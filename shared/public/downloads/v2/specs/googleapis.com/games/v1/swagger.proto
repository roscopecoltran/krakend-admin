syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package googleplaygameservices;

message GetAchievementsRequest {
    alt alt = 1;
    // The last-seen mutation timestamp.
    string consistencyToken = 2;
    string fields = 3;
    string key = 4;
    // The preferred language to use for strings returned by this method.
    string language = 5;
    // The maximum number of achievement resources to return in the response, used for paging. For any response, the actual number of achievement resources returned may be less than the specified maxResults.
    int32 maxResults = 6;
    string oauth_token = 7;
    // The token returned by the previous request.
    string pageToken = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message PostAchievementsUpdateMultipleRequest {
    alt alt = 1;
    AchievementUpdateMultipleRequest body = 2;
    // The last-seen mutation timestamp.
    string consistencyToken = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostAchievementsAchievementIdIncrementRequest {
    // The ID of the achievement used by this method.
    string achievementId = 1;
    alt alt = 2;
    // The last-seen mutation timestamp.
    string consistencyToken = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // A randomly generated numeric ID for each request specified by the caller. This number is used at the server to ensure that the request is handled correctly across retries.
    string requestId = 9;
    // The number of steps to increment.
    int32 stepsToIncrement = 10;
    string userIp = 11;
}

message PostAchievementsAchievementIdRevealRequest {
    // The ID of the achievement used by this method.
    string achievementId = 1;
    alt alt = 2;
    // The last-seen mutation timestamp.
    string consistencyToken = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostAchievementsAchievementIdSetStepsAtLeastRequest {
    // The ID of the achievement used by this method.
    string achievementId = 1;
    alt alt = 2;
    // The last-seen mutation timestamp.
    string consistencyToken = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // The minimum value to set the steps to.
    int32 steps = 9;
    string userIp = 10;
}

message PostAchievementsAchievementIdUnlockRequest {
    // The ID of the achievement used by this method.
    string achievementId = 1;
    alt alt = 2;
    // The last-seen mutation timestamp.
    string consistencyToken = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostApplicationsPlayedRequest {
    alt alt = 1;
    // The last-seen mutation timestamp.
    string consistencyToken = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetApplicationsApplicationIdRequest {
    alt alt = 1;
    // The application ID from the Google Play developer console.
    string applicationId = 2;
    // The last-seen mutation timestamp.
    string consistencyToken = 3;
    string fields = 4;
    string key = 5;
    // The preferred language to use for strings returned by this method.
    string language = 6;
    string oauth_token = 7;
    // Restrict application details returned to the specific platform.
    enum GetApplicationsApplicationIdRequest_PlatformType {
        GETAPPLICATIONSAPPLICATIONIDREQUEST_PLATFORMTYPE_ANDROID = 0;
        GETAPPLICATIONSAPPLICATIONIDREQUEST_PLATFORMTYPE_IOS = 1;
        GETAPPLICATIONSAPPLICATIONIDREQUEST_PLATFORMTYPE_WEB_APP = 2;
    }
    GetApplicationsApplicationIdRequest_PlatformType platformType = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message GetApplicationsApplicationIdVerifyRequest {
    alt alt = 1;
    // The application ID from the Google Play developer console.
    string applicationId = 2;
    // The last-seen mutation timestamp.
    string consistencyToken = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetEventDefinitionsRequest {
    alt alt = 1;
    // The last-seen mutation timestamp.
    string consistencyToken = 2;
    string fields = 3;
    string key = 4;
    // The preferred language to use for strings returned by this method.
    string language = 5;
    // The maximum number of event definitions to return in the response, used for paging. For any response, the actual number of event definitions to return may be less than the specified maxResults.
    int32 maxResults = 6;
    string oauth_token = 7;
    // The token returned by the previous request.
    string pageToken = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message GetEventsRequest {
    alt alt = 1;
    // The last-seen mutation timestamp.
    string consistencyToken = 2;
    string fields = 3;
    string key = 4;
    // The preferred language to use for strings returned by this method.
    string language = 5;
    // The maximum number of events to return in the response, used for paging. For any response, the actual number of events to return may be less than the specified maxResults.
    int32 maxResults = 6;
    string oauth_token = 7;
    // The token returned by the previous request.
    string pageToken = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message PostEventsRequest {
    alt alt = 1;
    EventRecordRequest body = 2;
    // The last-seen mutation timestamp.
    string consistencyToken = 3;
    string fields = 4;
    string key = 5;
    // The preferred language to use for strings returned by this method.
    string language = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetLeaderboardsRequest {
    alt alt = 1;
    // The last-seen mutation timestamp.
    string consistencyToken = 2;
    string fields = 3;
    string key = 4;
    // The preferred language to use for strings returned by this method.
    string language = 5;
    // The maximum number of leaderboards to return in the response. For any response, the actual number of leaderboards returned may be less than the specified maxResults.
    int32 maxResults = 6;
    string oauth_token = 7;
    // The token returned by the previous request.
    string pageToken = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message PostLeaderboardsScoresRequest {
    alt alt = 1;
    PlayerScoreSubmissionList body = 2;
    // The last-seen mutation timestamp.
    string consistencyToken = 3;
    string fields = 4;
    string key = 5;
    // The preferred language to use for strings returned by this method.
    string language = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetLeaderboardsLeaderboardIdRequest {
    alt alt = 1;
    // The last-seen mutation timestamp.
    string consistencyToken = 2;
    string fields = 3;
    string key = 4;
    // The preferred language to use for strings returned by this method.
    string language = 5;
    // The ID of the leaderboard.
    string leaderboardId = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostLeaderboardsLeaderboardIdScoresRequest {
    alt alt = 1;
    // The last-seen mutation timestamp.
    string consistencyToken = 2;
    string fields = 3;
    string key = 4;
    // The preferred language to use for strings returned by this method.
    string language = 5;
    // The ID of the leaderboard.
    string leaderboardId = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    // The score you're submitting. The submitted score is ignored if it is worse than a previously submitted score, where worse depends on the leaderboard sort order. The meaning of the score value depends on the leaderboard format type. For fixed-point, the score represents the raw value. For time, the score represents elapsed time in milliseconds. For currency, the score represents a value in micro units.
    string score = 10;
    // Additional information about the score you're submitting. Values must contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.
    string scoreTag = 11;
    string userIp = 12;
}

message GetLeaderboardsLeaderboardIdScoresCollectionRequest {
    alt alt = 1;
    // The collection of scores you're requesting.
    enum GetLeaderboardsLeaderboardIdScoresCollectionRequest_Collection {
        GETLEADERBOARDSLEADERBOARDIDSCORESCOLLECTIONREQUEST_COLLECTION_PUBLIC = 0;
        GETLEADERBOARDSLEADERBOARDIDSCORESCOLLECTIONREQUEST_COLLECTION_SOCIAL = 1;
        GETLEADERBOARDSLEADERBOARDIDSCORESCOLLECTIONREQUEST_COLLECTION_SOCIAL_1P = 2;
    }
    GetLeaderboardsLeaderboardIdScoresCollectionRequest_Collection collection = 2;
    // The last-seen mutation timestamp.
    string consistencyToken = 3;
    string fields = 4;
    string key = 5;
    // The preferred language to use for strings returned by this method.
    string language = 6;
    // The ID of the leaderboard.
    string leaderboardId = 7;
    // The maximum number of leaderboard scores to return in the response. For any response, the actual number of leaderboard scores returned may be less than the specified maxResults.
    int32 maxResults = 8;
    string oauth_token = 9;
    // The token returned by the previous request.
    string pageToken = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // The time span for the scores and ranks you're requesting.
    enum GetLeaderboardsLeaderboardIdScoresCollectionRequest_TimeSpan {
        GETLEADERBOARDSLEADERBOARDIDSCORESCOLLECTIONREQUEST_TIMESPAN_ALL_TIME = 0;
        GETLEADERBOARDSLEADERBOARDIDSCORESCOLLECTIONREQUEST_TIMESPAN_DAILY = 1;
        GETLEADERBOARDSLEADERBOARDIDSCORESCOLLECTIONREQUEST_TIMESPAN_WEEKLY = 2;
    }
    GetLeaderboardsLeaderboardIdScoresCollectionRequest_TimeSpan timeSpan = 13;
    string userIp = 14;
}

message GetLeaderboardsLeaderboardIdWindowCollectionRequest {
    alt alt = 1;
    // The collection of scores you're requesting.
    enum GetLeaderboardsLeaderboardIdWindowCollectionRequest_Collection {
        GETLEADERBOARDSLEADERBOARDIDWINDOWCOLLECTIONREQUEST_COLLECTION_PUBLIC = 0;
        GETLEADERBOARDSLEADERBOARDIDWINDOWCOLLECTIONREQUEST_COLLECTION_SOCIAL = 1;
        GETLEADERBOARDSLEADERBOARDIDWINDOWCOLLECTIONREQUEST_COLLECTION_SOCIAL_1P = 2;
    }
    GetLeaderboardsLeaderboardIdWindowCollectionRequest_Collection collection = 2;
    // The last-seen mutation timestamp.
    string consistencyToken = 3;
    string fields = 4;
    string key = 5;
    // The preferred language to use for strings returned by this method.
    string language = 6;
    // The ID of the leaderboard.
    string leaderboardId = 7;
    // The maximum number of leaderboard scores to return in the response. For any response, the actual number of leaderboard scores returned may be less than the specified maxResults.
    int32 maxResults = 8;
    string oauth_token = 9;
    // The token returned by the previous request.
    string pageToken = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // The preferred number of scores to return above the player's score. More scores may be returned if the player is at the bottom of the leaderboard; fewer may be returned if the player is at the top. Must be less than or equal to maxResults.
    int32 resultsAbove = 13;
    // True if the top scores should be returned when the player is not in the leaderboard. Defaults to true.
    bool returnTopIfAbsent = 14;
    // The time span for the scores and ranks you're requesting.
    enum GetLeaderboardsLeaderboardIdWindowCollectionRequest_TimeSpan {
        GETLEADERBOARDSLEADERBOARDIDWINDOWCOLLECTIONREQUEST_TIMESPAN_ALL_TIME = 0;
        GETLEADERBOARDSLEADERBOARDIDWINDOWCOLLECTIONREQUEST_TIMESPAN_DAILY = 1;
        GETLEADERBOARDSLEADERBOARDIDWINDOWCOLLECTIONREQUEST_TIMESPAN_WEEKLY = 2;
    }
    GetLeaderboardsLeaderboardIdWindowCollectionRequest_TimeSpan timeSpan = 15;
    string userIp = 16;
}

message GetMetagameConfigRequest {
    alt alt = 1;
    // The last-seen mutation timestamp.
    string consistencyToken = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetPlayersMePlayersCollectionRequest {
    alt alt = 1;
    // Collection of players being retrieved
    enum GetPlayersMePlayersCollectionRequest_Collection {
        GETPLAYERSMEPLAYERSCOLLECTIONREQUEST_COLLECTION_CONNECTED = 0;
        GETPLAYERSMEPLAYERSCOLLECTIONREQUEST_COLLECTION_PLAYEDWITH = 1;
        GETPLAYERSMEPLAYERSCOLLECTIONREQUEST_COLLECTION_PLAYED_WITH = 2;
        GETPLAYERSMEPLAYERSCOLLECTIONREQUEST_COLLECTION_VISIBLE = 3;
    }
    GetPlayersMePlayersCollectionRequest_Collection collection = 2;
    // The last-seen mutation timestamp.
    string consistencyToken = 3;
    string fields = 4;
    string key = 5;
    // The preferred language to use for strings returned by this method.
    string language = 6;
    // The maximum number of player resources to return in the response, used for paging. For any response, the actual number of player resources returned may be less than the specified maxResults.
    int32 maxResults = 7;
    string oauth_token = 8;
    // The token returned by the previous request.
    string pageToken = 9;
    boolean prettyPrint = 10;
    string quotaUser = 11;
    string userIp = 12;
}

message GetPlayersPlayerIdRequest {
    alt alt = 1;
    // The last-seen mutation timestamp.
    string consistencyToken = 2;
    string fields = 3;
    string key = 4;
    // The preferred language to use for strings returned by this method.
    string language = 5;
    string oauth_token = 6;
    // A player ID. A value of me may be used in place of the authenticated player's ID.
    string playerId = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetPlayersPlayerIdAchievementsRequest {
    alt alt = 1;
    // The last-seen mutation timestamp.
    string consistencyToken = 2;
    string fields = 3;
    string key = 4;
    // The preferred language to use for strings returned by this method.
    string language = 5;
    // The maximum number of achievement resources to return in the response, used for paging. For any response, the actual number of achievement resources returned may be less than the specified maxResults.
    int32 maxResults = 6;
    string oauth_token = 7;
    // The token returned by the previous request.
    string pageToken = 8;
    // A player ID. A value of me may be used in place of the authenticated player's ID.
    string playerId = 9;
    boolean prettyPrint = 10;
    string quotaUser = 11;
    // Tells the server to return only achievements with the specified state. If this parameter isn't specified, all achievements are returned.
    enum GetPlayersPlayerIdAchievementsRequest_State {
        GETPLAYERSPLAYERIDACHIEVEMENTSREQUEST_STATE_ALL = 0;
        GETPLAYERSPLAYERIDACHIEVEMENTSREQUEST_STATE_HIDDEN = 1;
        GETPLAYERSPLAYERIDACHIEVEMENTSREQUEST_STATE_REVEALED = 2;
        GETPLAYERSPLAYERIDACHIEVEMENTSREQUEST_STATE_UNLOCKED = 3;
    }
    GetPlayersPlayerIdAchievementsRequest_State state = 12;
    string userIp = 13;
}

message GetPlayersPlayerIdCategoriesCollectionRequest {
    alt alt = 1;
    // The collection of categories for which data will be returned.
    enum GetPlayersPlayerIdCategoriesCollectionRequest_Collection {
        GETPLAYERSPLAYERIDCATEGORIESCOLLECTIONREQUEST_COLLECTION_ALL = 0;
    }
    GetPlayersPlayerIdCategoriesCollectionRequest_Collection collection = 2;
    // The last-seen mutation timestamp.
    string consistencyToken = 3;
    string fields = 4;
    string key = 5;
    // The preferred language to use for strings returned by this method.
    string language = 6;
    // The maximum number of category resources to return in the response, used for paging. For any response, the actual number of category resources returned may be less than the specified maxResults.
    int32 maxResults = 7;
    string oauth_token = 8;
    // The token returned by the previous request.
    string pageToken = 9;
    // A player ID. A value of me may be used in place of the authenticated player's ID.
    string playerId = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string userIp = 13;
}

message GetPlayersPlayerIdLeaderboardsLeaderboardIdScoresTimeSpanRequest {
    alt alt = 1;
    // The last-seen mutation timestamp.
    string consistencyToken = 2;
    string fields = 3;
    // The types of ranks to return. If the parameter is omitted, no ranks will be returned.
    enum GetPlayersPlayerIdLeaderboardsLeaderboardIdScoresTimeSpanRequest_IncludeRankType {
        GETPLAYERSPLAYERIDLEADERBOARDSLEADERBOARDIDSCORESTIMESPANREQUEST_INCLUDERANKTYPE_ALL = 0;
        GETPLAYERSPLAYERIDLEADERBOARDSLEADERBOARDIDSCORESTIMESPANREQUEST_INCLUDERANKTYPE_PUBLIC = 1;
        GETPLAYERSPLAYERIDLEADERBOARDSLEADERBOARDIDSCORESTIMESPANREQUEST_INCLUDERANKTYPE_SOCIAL = 2;
    }
    GetPlayersPlayerIdLeaderboardsLeaderboardIdScoresTimeSpanRequest_IncludeRankType includeRankType = 4;
    string key = 5;
    // The preferred language to use for strings returned by this method.
    string language = 6;
    // The ID of the leaderboard. Can be set to 'ALL' to retrieve data for all leaderboards for this application.
    string leaderboardId = 7;
    // The maximum number of leaderboard scores to return in the response. For any response, the actual number of leaderboard scores returned may be less than the specified maxResults.
    int32 maxResults = 8;
    string oauth_token = 9;
    // The token returned by the previous request.
    string pageToken = 10;
    // A player ID. A value of me may be used in place of the authenticated player's ID.
    string playerId = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    // The time span for the scores and ranks you're requesting.
    enum GetPlayersPlayerIdLeaderboardsLeaderboardIdScoresTimeSpanRequest_TimeSpan {
        GETPLAYERSPLAYERIDLEADERBOARDSLEADERBOARDIDSCORESTIMESPANREQUEST_TIMESPAN_ALL = 0;
        GETPLAYERSPLAYERIDLEADERBOARDSLEADERBOARDIDSCORESTIMESPANREQUEST_TIMESPAN_ALL_TIME = 1;
        GETPLAYERSPLAYERIDLEADERBOARDSLEADERBOARDIDSCORESTIMESPANREQUEST_TIMESPAN_DAILY = 2;
        GETPLAYERSPLAYERIDLEADERBOARDSLEADERBOARDIDSCORESTIMESPANREQUEST_TIMESPAN_WEEKLY = 3;
    }
    GetPlayersPlayerIdLeaderboardsLeaderboardIdScoresTimeSpanRequest_TimeSpan timeSpan = 14;
    string userIp = 15;
}

message GetPlayersPlayerIdQuestsRequest {
    alt alt = 1;
    // The last-seen mutation timestamp.
    string consistencyToken = 2;
    string fields = 3;
    string key = 4;
    // The preferred language to use for strings returned by this method.
    string language = 5;
    // The maximum number of quest resources to return in the response, used for paging. For any response, the actual number of quest resources returned may be less than the specified maxResults. Acceptable values are 1 to 50, inclusive. (Default: 50).
    int32 maxResults = 6;
    string oauth_token = 7;
    // The token returned by the previous request.
    string pageToken = 8;
    // A player ID. A value of me may be used in place of the authenticated player's ID.
    string playerId = 9;
    boolean prettyPrint = 10;
    string quotaUser = 11;
    string userIp = 12;
}

message GetPlayersPlayerIdSnapshotsRequest {
    alt alt = 1;
    // The last-seen mutation timestamp.
    string consistencyToken = 2;
    string fields = 3;
    string key = 4;
    // The preferred language to use for strings returned by this method.
    string language = 5;
    // The maximum number of snapshot resources to return in the response, used for paging. For any response, the actual number of snapshot resources returned may be less than the specified maxResults.
    int32 maxResults = 6;
    string oauth_token = 7;
    // The token returned by the previous request.
    string pageToken = 8;
    // A player ID. A value of me may be used in place of the authenticated player's ID.
    string playerId = 9;
    boolean prettyPrint = 10;
    string quotaUser = 11;
    string userIp = 12;
}

message PutPushtokensRequest {
    alt alt = 1;
    PushToken body = 2;
    // The last-seen mutation timestamp.
    string consistencyToken = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostPushtokensRemoveRequest {
    alt alt = 1;
    PushTokenId body = 2;
    // The last-seen mutation timestamp.
    string consistencyToken = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostQuestsQuestIdAcceptRequest {
    alt alt = 1;
    // The last-seen mutation timestamp.
    string consistencyToken = 2;
    string fields = 3;
    string key = 4;
    // The preferred language to use for strings returned by this method.
    string language = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // The ID of the quest.
    string questId = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PutQuestsQuestIdMilestonesMilestoneIdClaimRequest {
    alt alt = 1;
    // The last-seen mutation timestamp.
    string consistencyToken = 2;
    string fields = 3;
    string key = 4;
    // The ID of the milestone.
    string milestoneId = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // The ID of the quest.
    string questId = 8;
    string quotaUser = 9;
    // A numeric ID to ensure that the request is handled correctly across retries. Your client application must generate this ID randomly.
    string requestId = 10;
    string userIp = 11;
}

message GetRevisionsCheckRequest {
    alt alt = 1;
    // The revision of the client SDK used by your application. Format:
    // [PLATFORM_TYPE]:[VERSION_NUMBER]. Possible values of PLATFORM_TYPE are:
    //  
    // - "ANDROID" - Client is running the Android SDK. 
    // - "IOS" - Client is running the iOS SDK. 
    // - "WEB_APP" - Client is running as a Web App.
    string clientRevision = 2;
    // The last-seen mutation timestamp.
    string consistencyToken = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetRoomsRequest {
    alt alt = 1;
    // The last-seen mutation timestamp.
    string consistencyToken = 2;
    string fields = 3;
    string key = 4;
    // The preferred language to use for strings returned by this method.
    string language = 5;
    // The maximum number of rooms to return in the response, used for paging. For any response, the actual number of rooms to return may be less than the specified maxResults.
    int32 maxResults = 6;
    string oauth_token = 7;
    // The token returned by the previous request.
    string pageToken = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message PostRoomsCreateRequest {
    alt alt = 1;
    RoomCreateRequest body = 2;
    // The last-seen mutation timestamp.
    string consistencyToken = 3;
    string fields = 4;
    string key = 5;
    // The preferred language to use for strings returned by this method.
    string language = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetRoomsRoomIdRequest {
    alt alt = 1;
    // The last-seen mutation timestamp.
    string consistencyToken = 2;
    string fields = 3;
    string key = 4;
    // The preferred language to use for strings returned by this method.
    string language = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // The ID of the room.
    string roomId = 9;
    string userIp = 10;
}

message PostRoomsRoomIdDeclineRequest {
    alt alt = 1;
    // The last-seen mutation timestamp.
    string consistencyToken = 2;
    string fields = 3;
    string key = 4;
    // The preferred language to use for strings returned by this method.
    string language = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // The ID of the room.
    string roomId = 9;
    string userIp = 10;
}

message PostRoomsRoomIdDismissRequest {
    alt alt = 1;
    // The last-seen mutation timestamp.
    string consistencyToken = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The ID of the room.
    string roomId = 8;
    string userIp = 9;
}

message PostRoomsRoomIdJoinRequest {
    alt alt = 1;
    RoomJoinRequest body = 2;
    // The last-seen mutation timestamp.
    string consistencyToken = 3;
    string fields = 4;
    string key = 5;
    // The preferred language to use for strings returned by this method.
    string language = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    // The ID of the room.
    string roomId = 10;
    string userIp = 11;
}

message PostRoomsRoomIdLeaveRequest {
    alt alt = 1;
    RoomLeaveRequest body = 2;
    // The last-seen mutation timestamp.
    string consistencyToken = 3;
    string fields = 4;
    string key = 5;
    // The preferred language to use for strings returned by this method.
    string language = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    // The ID of the room.
    string roomId = 10;
    string userIp = 11;
}

message PostRoomsRoomIdReportstatusRequest {
    alt alt = 1;
    RoomP2PStatuses body = 2;
    // The last-seen mutation timestamp.
    string consistencyToken = 3;
    string fields = 4;
    string key = 5;
    // The preferred language to use for strings returned by this method.
    string language = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    // The ID of the room.
    string roomId = 10;
    string userIp = 11;
}

message GetSnapshotsSnapshotIdRequest {
    alt alt = 1;
    // The last-seen mutation timestamp.
    string consistencyToken = 2;
    string fields = 3;
    string key = 4;
    // The preferred language to use for strings returned by this method.
    string language = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // The ID of the snapshot.
    string snapshotId = 9;
    string userIp = 10;
}

message GetTurnbasedmatchesRequest {
    alt alt = 1;
    // The last-seen mutation timestamp.
    string consistencyToken = 2;
    string fields = 3;
    // True if match data should be returned in the response. Note that not all data will necessarily be returned if include_match_data is true; the server may decide to only return data for some of the matches to limit download size for the client. The remainder of the data for these matches will be retrievable on request.
    bool includeMatchData = 4;
    string key = 5;
    // The preferred language to use for strings returned by this method.
    string language = 6;
    // The maximum number of completed or canceled matches to return in the response. If not set, all matches returned could be completed or canceled.
    int32 maxCompletedMatches = 7;
    // The maximum number of matches to return in the response, used for paging. For any response, the actual number of matches to return may be less than the specified maxResults.
    int32 maxResults = 8;
    string oauth_token = 9;
    // The token returned by the previous request.
    string pageToken = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string userIp = 13;
}

message PostTurnbasedmatchesCreateRequest {
    alt alt = 1;
    TurnBasedMatchCreateRequest body = 2;
    // The last-seen mutation timestamp.
    string consistencyToken = 3;
    string fields = 4;
    string key = 5;
    // The preferred language to use for strings returned by this method.
    string language = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetTurnbasedmatchesSyncRequest {
    alt alt = 1;
    // The last-seen mutation timestamp.
    string consistencyToken = 2;
    string fields = 3;
    // True if match data should be returned in the response. Note that not all data will necessarily be returned if include_match_data is true; the server may decide to only return data for some of the matches to limit download size for the client. The remainder of the data for these matches will be retrievable on request.
    bool includeMatchData = 4;
    string key = 5;
    // The preferred language to use for strings returned by this method.
    string language = 6;
    // The maximum number of completed or canceled matches to return in the response. If not set, all matches returned could be completed or canceled.
    int32 maxCompletedMatches = 7;
    // The maximum number of matches to return in the response, used for paging. For any response, the actual number of matches to return may be less than the specified maxResults.
    int32 maxResults = 8;
    string oauth_token = 9;
    // The token returned by the previous request.
    string pageToken = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string userIp = 13;
}

message GetTurnbasedmatchesMatchIdRequest {
    alt alt = 1;
    // The last-seen mutation timestamp.
    string consistencyToken = 2;
    string fields = 3;
    // Get match data along with metadata.
    bool includeMatchData = 4;
    string key = 5;
    // The preferred language to use for strings returned by this method.
    string language = 6;
    // The ID of the match.
    string matchId = 7;
    string oauth_token = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message PutTurnbasedmatchesMatchIdCancelRequest {
    alt alt = 1;
    // The last-seen mutation timestamp.
    string consistencyToken = 2;
    string fields = 3;
    string key = 4;
    // The ID of the match.
    string matchId = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PutTurnbasedmatchesMatchIdDeclineRequest {
    alt alt = 1;
    // The last-seen mutation timestamp.
    string consistencyToken = 2;
    string fields = 3;
    string key = 4;
    // The preferred language to use for strings returned by this method.
    string language = 5;
    // The ID of the match.
    string matchId = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PutTurnbasedmatchesMatchIdDismissRequest {
    alt alt = 1;
    // The last-seen mutation timestamp.
    string consistencyToken = 2;
    string fields = 3;
    string key = 4;
    // The ID of the match.
    string matchId = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PutTurnbasedmatchesMatchIdFinishRequest {
    alt alt = 1;
    TurnBasedMatchResults body = 2;
    // The last-seen mutation timestamp.
    string consistencyToken = 3;
    string fields = 4;
    string key = 5;
    // The preferred language to use for strings returned by this method.
    string language = 6;
    // The ID of the match.
    string matchId = 7;
    string oauth_token = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message PutTurnbasedmatchesMatchIdJoinRequest {
    alt alt = 1;
    // The last-seen mutation timestamp.
    string consistencyToken = 2;
    string fields = 3;
    string key = 4;
    // The preferred language to use for strings returned by this method.
    string language = 5;
    // The ID of the match.
    string matchId = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PutTurnbasedmatchesMatchIdLeaveRequest {
    alt alt = 1;
    // The last-seen mutation timestamp.
    string consistencyToken = 2;
    string fields = 3;
    string key = 4;
    // The preferred language to use for strings returned by this method.
    string language = 5;
    // The ID of the match.
    string matchId = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PutTurnbasedmatchesMatchIdLeaveTurnRequest {
    alt alt = 1;
    // The last-seen mutation timestamp.
    string consistencyToken = 2;
    string fields = 3;
    string key = 4;
    // The preferred language to use for strings returned by this method.
    string language = 5;
    // The ID of the match.
    string matchId = 6;
    // The version of the match being updated.
    int32 matchVersion = 7;
    string oauth_token = 8;
    // The ID of another participant who should take their turn next. If not set, the match will wait for other player(s) to join via automatching; this is only valid if automatch criteria is set on the match with remaining slots for automatched players.
    string pendingParticipantId = 9;
    boolean prettyPrint = 10;
    string quotaUser = 11;
    string userIp = 12;
}

message PostTurnbasedmatchesMatchIdRematchRequest {
    alt alt = 1;
    // The last-seen mutation timestamp.
    string consistencyToken = 2;
    string fields = 3;
    string key = 4;
    // The preferred language to use for strings returned by this method.
    string language = 5;
    // The ID of the match.
    string matchId = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    // A randomly generated numeric ID for each request specified by the caller. This number is used at the server to ensure that the request is handled correctly across retries.
    string requestId = 10;
    string userIp = 11;
}

message PutTurnbasedmatchesMatchIdTurnRequest {
    alt alt = 1;
    TurnBasedMatchTurn body = 2;
    // The last-seen mutation timestamp.
    string consistencyToken = 3;
    string fields = 4;
    string key = 5;
    // The preferred language to use for strings returned by this method.
    string language = 6;
    // The ID of the match.
    string matchId = 7;
    string oauth_token = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message AchievementDefinition {
    // The type of the achievement.
    // Possible values are:  
    // - "STANDARD" - Achievement is either locked or unlocked. 
    // - "INCREMENTAL" - Achievement is incremental.
    string achievementType = 1;
    // The description of the achievement.
    string description = 2;
    // Experience points which will be earned when unlocking this achievement.
    string experiencePoints = 3;
    // The total steps for an incremental achievement as a string.
    string formattedTotalSteps = 4;
    // The ID of the achievement.
    string id = 5;
    // The initial state of the achievement.
    // Possible values are:  
    // - "HIDDEN" - Achievement is hidden. 
    // - "REVEALED" - Achievement is revealed. 
    // - "UNLOCKED" - Achievement is unlocked.
    string initialState = 6;
    // Indicates whether the revealed icon image being returned is a default image, or is provided by the game.
    bool isRevealedIconUrlDefault = 7;
    // Indicates whether the unlocked icon image being returned is a default image, or is game-provided.
    bool isUnlockedIconUrlDefault = 8;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#achievementDefinition.
    string kind = 9;
    // The name of the achievement.
    string name = 10;
    // The image URL for the revealed achievement icon.
    string revealedIconUrl = 11;
    // The total steps for an incremental achievement.
    int32 totalSteps = 12;
    // The image URL for the unlocked achievement icon.
    string unlockedIconUrl = 13;
}

message AchievementDefinitionsListResponse {
    // The achievement definitions.
    repeated AchievementDefinition items = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#achievementDefinitionsListResponse.
    string kind = 2;
    // Token corresponding to the next page of results.
    string nextPageToken = 3;
}

message AchievementIncrementResponse {
    // The current steps recorded for this incremental achievement.
    int32 currentSteps = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#achievementIncrementResponse.
    string kind = 2;
    // Whether the current steps for the achievement has reached the number of steps required to unlock.
    bool newlyUnlocked = 3;
}

message AchievementRevealResponse {
    // The current state of the achievement for which a reveal was attempted. This might be UNLOCKED if the achievement was already unlocked.
    // Possible values are:  
    // - "REVEALED" - Achievement is revealed. 
    // - "UNLOCKED" - Achievement is unlocked.
    string currentState = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#achievementRevealResponse.
    string kind = 2;
}

message AchievementSetStepsAtLeastResponse {
    // The current steps recorded for this incremental achievement.
    int32 currentSteps = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#achievementSetStepsAtLeastResponse.
    string kind = 2;
    // Whether the the current steps for the achievement has reached the number of steps required to unlock.
    bool newlyUnlocked = 3;
}

message AchievementUnlockResponse {
    // Uniquely identifies the type of this resource. Value is always the fixed string games#achievementUnlockResponse.
    string kind = 1;
    // Whether this achievement was newly unlocked (that is, whether the unlock request for the achievement was the first for the player).
    bool newlyUnlocked = 2;
}

message AchievementUpdateMultipleRequest {
    // Uniquely identifies the type of this resource. Value is always the fixed string games#achievementUpdateMultipleRequest.
    string kind = 1;
    // The individual achievement update requests.
    repeated AchievementUpdateRequest updates = 2;
}

message AchievementUpdateMultipleResponse {
    // Uniquely identifies the type of this resource. Value is always the fixed string games#achievementUpdateListResponse.
    string kind = 1;
    // The updated state of the achievements.
    repeated AchievementUpdateResponse updatedAchievements = 2;
}

message AchievementUpdateRequest {
    // The achievement this update is being applied to.
    string achievementId = 1;
    // The payload if an update of type INCREMENT was requested for the achievement.
    GamesAchievementIncrement incrementPayload = 2;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#achievementUpdateRequest.
    string kind = 3;
    // The payload if an update of type SET_STEPS_AT_LEAST was requested for the achievement.
    GamesAchievementSetStepsAtLeast setStepsAtLeastPayload = 4;
    // The type of update being applied.
    // Possible values are:  
    // - "REVEAL" - Achievement is revealed. 
    // - "UNLOCK" - Achievement is unlocked. 
    // - "INCREMENT" - Achievement is incremented. 
    // - "SET_STEPS_AT_LEAST" - Achievement progress is set to at least the passed value.
    string updateType = 5;
}

message AchievementUpdateResponse {
    // The achievement this update is was applied to.
    string achievementId = 1;
    // The current state of the achievement.
    // Possible values are:  
    // - "HIDDEN" - Achievement is hidden. 
    // - "REVEALED" - Achievement is revealed. 
    // - "UNLOCKED" - Achievement is unlocked.
    string currentState = 2;
    // The current steps recorded for this achievement if it is incremental.
    int32 currentSteps = 3;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#achievementUpdateResponse.
    string kind = 4;
    // Whether this achievement was newly unlocked (that is, whether the unlock request for the achievement was the first for the player).
    bool newlyUnlocked = 5;
    // Whether the requested updates actually affected the achievement.
    bool updateOccurred = 6;
}

message AggregateStats {
    // The number of messages sent between a pair of peers.
    string count = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#aggregateStats.
    string kind = 2;
    // The maximum amount.
    string max = 3;
    // The minimum amount.
    string min = 4;
    // The total number of bytes sent for messages between a pair of peers.
    string sum = 5;
}

message AnonymousPlayer {
    // The base URL for the image to display for the anonymous player.
    string avatarImageUrl = 1;
    // The name to display for the anonymous player.
    string displayName = 2;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#anonymousPlayer.
    string kind = 3;
}

message Application {
    // The number of achievements visible to the currently authenticated player.
    int32 achievement_count = 1;
    // The assets of the application.
    repeated ImageAsset assets = 2;
    // The author of the application.
    string author = 3;
    // The category of the application.
    ApplicationCategory category = 4;
    // The description of the application.
    string description = 5;
    // A list of features that have been enabled for the application.
    // Possible values are:  
    // - "SNAPSHOTS" - Snapshots has been enabled
    repeated string enabledFeatures = 6;
    // The ID of the application.
    string id = 7;
    // The instances of the application.
    repeated Instance instances = 8;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#application.
    string kind = 9;
    // The last updated timestamp of the application.
    string lastUpdatedTimestamp = 10;
    // The number of leaderboards visible to the currently authenticated player.
    int32 leaderboard_count = 11;
    // The name of the application.
    string name = 12;
    // A hint to the client UI for what color to use as an app-themed color. The color is given as an RGB triplet (e.g. "E0E0E0").
    string themeColor = 13;
}

message ApplicationCategory {
    // Uniquely identifies the type of this resource. Value is always the fixed string games#applicationCategory.
    string kind = 1;
    // The primary category.
    string primary = 2;
    // The secondary category.
    string secondary = 3;
}

message ApplicationVerifyResponse {
    // An alternate ID that was once used for the player that was issued the auth token used in this request. (This field is not normally populated.)
    string alternate_player_id = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#applicationVerifyResponse.
    string kind = 2;
    // The ID of the player that was issued the auth token used in this request.
    string player_id = 3;
}

message Category {
    // The category name.
    string category = 1;
    // Experience points earned in this category.
    string experiencePoints = 2;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#category.
    string kind = 3;
}

message CategoryListResponse {
    // The list of categories with usage data.
    repeated Category items = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#categoryListResponse.
    string kind = 2;
    // Token corresponding to the next page of results.
    string nextPageToken = 3;
}

message EventBatchRecordFailure {
    // The cause for the update failure.
    // Possible values are:  
    // - "TOO_LARGE": A batch request was issued with more events than are allowed in a single batch. 
    // - "TIME_PERIOD_EXPIRED": A batch was sent with data too far in the past to record. 
    // - "TIME_PERIOD_SHORT": A batch was sent with a time range that was too short. 
    // - "TIME_PERIOD_LONG": A batch was sent with a time range that was too long. 
    // - "ALREADY_UPDATED": An attempt was made to record a batch of data which was already seen. 
    // - "RECORD_RATE_HIGH": An attempt was made to record data faster than the server will apply updates.
    string failureCause = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#eventBatchRecordFailure.
    string kind = 2;
    // The time range which was rejected; empty for a request-wide failure.
    EventPeriodRange range = 3;
}

message EventChild {
    // The ID of the child event.
    string childId = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#eventChild.
    string kind = 2;
}

message EventDefinition {
    // A list of events that are a child of this event.
    repeated EventChild childEvents = 1;
    // Description of what this event represents.
    string description = 2;
    // The name to display for the event.
    string displayName = 3;
    // The ID of the event.
    string id = 4;
    // The base URL for the image that represents the event.
    string imageUrl = 5;
    // Indicates whether the icon image being returned is a default image, or is game-provided.
    bool isDefaultImageUrl = 6;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#eventDefinition.
    string kind = 7;
    // The visibility of event being tracked in this definition.
    // Possible values are:  
    // - "REVEALED": This event should be visible to all users. 
    // - "HIDDEN": This event should only be shown to users that have recorded this event at least once.
    string visibility = 8;
}

message EventDefinitionListResponse {
    // The event definitions.
    repeated EventDefinition items = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#eventDefinitionListResponse.
    string kind = 2;
    // The pagination token for the next page of results.
    string nextPageToken = 3;
}

message EventPeriodRange {
    // Uniquely identifies the type of this resource. Value is always the fixed string games#eventPeriodRange.
    string kind = 1;
    // The time when this update period ends, in millis, since 1970 UTC (Unix Epoch).
    string periodEndMillis = 2;
    // The time when this update period begins, in millis, since 1970 UTC (Unix Epoch).
    string periodStartMillis = 3;
}

message EventPeriodUpdate {
    // Uniquely identifies the type of this resource. Value is always the fixed string games#eventPeriodUpdate.
    string kind = 1;
    // The time period being covered by this update.
    EventPeriodRange timePeriod = 2;
    // The updates being made for this time period.
    repeated EventUpdateRequest updates = 3;
}

message EventRecordFailure {
    // The ID of the event that was not updated.
    string eventId = 1;
    // The cause for the update failure.
    // Possible values are:  
    // - "NOT_FOUND" - An attempt was made to set an event that was not defined. 
    // - "INVALID_UPDATE_VALUE" - An attempt was made to increment an event by a non-positive value.
    string failureCause = 2;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#eventRecordFailure.
    string kind = 3;
}

message EventRecordRequest {
    // The current time when this update was sent, in milliseconds, since 1970 UTC (Unix Epoch).
    string currentTimeMillis = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#eventRecordRequest.
    string kind = 2;
    // The request ID used to identify this attempt to record events.
    string requestId = 3;
    // A list of the time period updates being made in this request.
    repeated EventPeriodUpdate timePeriods = 4;
}

message EventUpdateRequest {
    // The ID of the event being modified in this update.
    string definitionId = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#eventUpdateRequest.
    string kind = 2;
    // The number of times this event occurred in this time period.
    string updateCount = 3;
}

message EventUpdateResponse {
    // Any batch-wide failures which occurred applying updates.
    repeated EventBatchRecordFailure batchFailures = 1;
    // Any failures updating a particular event.
    repeated EventRecordFailure eventFailures = 2;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#eventUpdateResponse.
    string kind = 3;
    // The current status of any updated events
    repeated PlayerEvent playerEvents = 4;
}

message GamesAchievementIncrement {
    // Uniquely identifies the type of this resource. Value is always the fixed string games#GamesAchievementIncrement.
    string kind = 1;
    // The requestId associated with an increment to an achievement.
    string requestId = 2;
    // The number of steps to be incremented.
    int32 steps = 3;
}

message GamesAchievementSetStepsAtLeast {
    // Uniquely identifies the type of this resource. Value is always the fixed string games#GamesAchievementSetStepsAtLeast.
    string kind = 1;
    // The minimum number of steps for the achievement to be set to.
    int32 steps = 2;
}

message ImageAsset {
    // The height of the asset.
    int32 height = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#imageAsset.
    string kind = 2;
    // The name of the asset.
    string name = 3;
    // The URL of the asset.
    string url = 4;
    // The width of the asset.
    int32 width = 5;
}

message Instance {
    // URI which shows where a user can acquire this instance.
    string acquisitionUri = 1;
    // Platform dependent details for Android.
    InstanceAndroidDetails androidInstance = 2;
    // Platform dependent details for iOS.
    InstanceIosDetails iosInstance = 3;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#instance.
    string kind = 4;
    // Localized display name.
    string name = 5;
    // The platform type.
    // Possible values are:  
    // - "ANDROID" - Instance is for Android. 
    // - "IOS" - Instance is for iOS 
    // - "WEB_APP" - Instance is for Web App.
    string platformType = 6;
    // Flag to show if this game instance supports realtime play.
    bool realtimePlay = 7;
    // Flag to show if this game instance supports turn based play.
    bool turnBasedPlay = 8;
    // Platform dependent details for Web.
    InstanceWebDetails webInstance = 9;
}

message InstanceAndroidDetails {
    // Flag indicating whether the anti-piracy check is enabled.
    bool enablePiracyCheck = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#instanceAndroidDetails.
    string kind = 2;
    // Android package name which maps to Google Play URL.
    string packageName = 3;
    // Indicates that this instance is the default for new installations.
    bool preferred = 4;
}

message InstanceIosDetails {
    // Bundle identifier.
    string bundleIdentifier = 1;
    // iTunes App ID.
    string itunesAppId = 2;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#instanceIosDetails.
    string kind = 3;
    // Indicates that this instance is the default for new installations on iPad devices.
    bool preferredForIpad = 4;
    // Indicates that this instance is the default for new installations on iPhone devices.
    bool preferredForIphone = 5;
    // Flag to indicate if this instance supports iPad.
    bool supportIpad = 6;
    // Flag to indicate if this instance supports iPhone.
    bool supportIphone = 7;
}

message InstanceWebDetails {
    // Uniquely identifies the type of this resource. Value is always the fixed string games#instanceWebDetails.
    string kind = 1;
    // Launch URL for the game.
    string launchUrl = 2;
    // Indicates that this instance is the default for new installations.
    bool preferred = 3;
}

message Leaderboard {
    // The icon for the leaderboard.
    string iconUrl = 1;
    // The leaderboard ID.
    string id = 2;
    // Indicates whether the icon image being returned is a default image, or is game-provided.
    bool isIconUrlDefault = 3;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#leaderboard.
    string kind = 4;
    // The name of the leaderboard.
    string name = 5;
    // How scores are ordered.
    // Possible values are:  
    // - "LARGER_IS_BETTER" - Larger values are better; scores are sorted in descending order. 
    // - "SMALLER_IS_BETTER" - Smaller values are better; scores are sorted in ascending order.
    string order = 6;
}

message LeaderboardEntry {
    // The localized string for the numerical value of this score.
    string formattedScore = 1;
    // The localized string for the rank of this score for this leaderboard.
    string formattedScoreRank = 2;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#leaderboardEntry.
    string kind = 3;
    // The player who holds this score.
    Player player = 4;
    // The rank of this score for this leaderboard.
    string scoreRank = 5;
    // Additional information about the score. Values must contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.
    string scoreTag = 6;
    // The numerical value of this score.
    string scoreValue = 7;
    // The time span of this high score.
    // Possible values are:  
    // - "ALL_TIME" - The score is an all-time high score. 
    // - "WEEKLY" - The score is a weekly high score. 
    // - "DAILY" - The score is a daily high score.
    string timeSpan = 8;
    // The timestamp at which this score was recorded, in milliseconds since the epoch in UTC.
    string writeTimestampMillis = 9;
}

message LeaderboardListResponse {
    // The leaderboards.
    repeated Leaderboard items = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#leaderboardListResponse.
    string kind = 2;
    // Token corresponding to the next page of results.
    string nextPageToken = 3;
}

message LeaderboardScoreRank {
    // The number of scores in the leaderboard as a string.
    string formattedNumScores = 1;
    // The rank in the leaderboard as a string.
    string formattedRank = 2;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#leaderboardScoreRank.
    string kind = 3;
    // The number of scores in the leaderboard.
    string numScores = 4;
    // The rank in the leaderboard.
    string rank = 5;
}

message LeaderboardScores {
    // The scores in the leaderboard.
    repeated LeaderboardEntry items = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#leaderboardScores.
    string kind = 2;
    // The pagination token for the next page of results.
    string nextPageToken = 3;
    // The total number of scores in the leaderboard.
    string numScores = 4;
    // The score of the requesting player on the leaderboard. The player's score may appear both here and in the list of scores above. If you are viewing a public leaderboard and the player is not sharing their gameplay information publicly, the scoreRank and formattedScoreRank values will not be present.
    LeaderboardEntry playerScore = 5;
    // The pagination token for the previous page of results.
    string prevPageToken = 6;
}

message MetagameConfig {
    // Current version of the metagame configuration data. When this data is updated, the version number will be increased by one.
    int32 currentVersion = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#metagameConfig.
    string kind = 2;
    // The list of player levels.
    repeated PlayerLevel playerLevels = 3;
}

message NetworkDiagnostics {
    // The Android network subtype.
    int32 androidNetworkSubtype = 1;
    // The Android network type.
    int32 androidNetworkType = 2;
    // iOS network type as defined in Reachability.h.
    int32 iosNetworkType = 3;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#networkDiagnostics.
    string kind = 4;
    // The MCC+MNC code for the client's network connection. On Android: http://developer.android.com/reference/android/telephony/TelephonyManager.html#getNetworkOperator() On iOS, see: https://developer.apple.com/library/ios/documentation/NetworkingInternet/Reference/CTCarrier/Reference/Reference.html
    string networkOperatorCode = 5;
    // The name of the carrier of the client's network connection. On Android: http://developer.android.com/reference/android/telephony/TelephonyManager.html#getNetworkOperatorName() On iOS: https://developer.apple.com/library/ios/documentation/NetworkingInternet/Reference/CTCarrier/Reference/Reference.html#//apple_ref/occ/instp/CTCarrier/carrierName
    string networkOperatorName = 6;
    // The amount of time in milliseconds it took for the client to establish a connection with the XMPP server.
    int32 registrationLatencyMillis = 7;
}

message ParticipantResult {
    // Uniquely identifies the type of this resource. Value is always the fixed string games#participantResult.
    string kind = 1;
    // The ID of the participant.
    string participantId = 2;
    // The placement or ranking of the participant in the match results; a number from one to the number of participants in the match. Multiple participants may have the same placing value in case of a type.
    int32 placing = 3;
    // The result of the participant for this match.
    // Possible values are:  
    // - "MATCH_RESULT_WIN" - The participant won the match. 
    // - "MATCH_RESULT_LOSS" - The participant lost the match. 
    // - "MATCH_RESULT_TIE" - The participant tied the match. 
    // - "MATCH_RESULT_NONE" - There was no winner for the match (nobody wins or loses this kind of game.) 
    // - "MATCH_RESULT_DISCONNECT" - The participant disconnected / left during the match. 
    // - "MATCH_RESULT_DISAGREED" - Different clients reported different results for this participant.
    string result = 4;
}

message PeerChannelDiagnostics {
    // Number of bytes received.
    AggregateStats bytesReceived = 1;
    // Number of bytes sent.
    AggregateStats bytesSent = 2;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#peerChannelDiagnostics.
    string kind = 3;
    // Number of messages lost.
    int32 numMessagesLost = 4;
    // Number of messages received.
    int32 numMessagesReceived = 5;
    // Number of messages sent.
    int32 numMessagesSent = 6;
    // Number of send failures.
    int32 numSendFailures = 7;
    // Roundtrip latency stats in milliseconds.
    AggregateStats roundtripLatencyMillis = 8;
}

message PeerSessionDiagnostics {
    // Connected time in milliseconds.
    string connectedTimestampMillis = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#peerSessionDiagnostics.
    string kind = 2;
    // The participant ID of the peer.
    string participantId = 3;
    // Reliable channel diagnostics.
    PeerChannelDiagnostics reliableChannel = 4;
    // Unreliable channel diagnostics.
    PeerChannelDiagnostics unreliableChannel = 5;
}

message Played {
    // True if the player was auto-matched with the currently authenticated user.
    bool autoMatched = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#played.
    string kind = 2;
    // The last time the player played the game in milliseconds since the epoch in UTC.
    string timeMillis = 3;
}

message Player {
    // The base URL for the image that represents the player.
    string avatarImageUrl = 1;
    // The url to the landscape mode player banner image.
    string bannerUrlLandscape = 2;
    // The url to the portrait mode player banner image.
    string bannerUrlPortrait = 3;
    // The name to display for the player.
    string displayName = 4;
    // An object to represent Play Game experience information for the player.
    PlayerExperienceInfo experienceInfo = 5;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#player.
    string kind = 6;
    // Details about the last time this player played a multiplayer game with the currently authenticated player. Populated for PLAYED_WITH player collection members.
    Played lastPlayedWith = 7;
    // An object representation of the individual components of the player's name. For some players, these fields may not be present.
    message Name {
            // The family name of this player. In some places, this is known as the last name.
    string familyName = 1;
            // The given name of this player. In some places, this is known as the first name.
    string givenName = 2;
    }
    Name name = 8;
    // The player ID that was used for this player the first time they signed into the game in question. This is only populated for calls to player.get for the requesting player, only if the player ID has subsequently changed, and only to clients that support remapping player IDs.
    string originalPlayerId = 9;
    // The ID of the player.
    string playerId = 10;
    // The player's profile settings. Controls whether or not the player's profile is visible to other players.
    ProfileSettings profileSettings = 11;
    // The player's title rewarded for their game activities.
    string title = 12;
}

message PlayerAchievement {
    // The state of the achievement.
    // Possible values are:  
    // - "HIDDEN" - Achievement is hidden. 
    // - "REVEALED" - Achievement is revealed. 
    // - "UNLOCKED" - Achievement is unlocked.
    string achievementState = 1;
    // The current steps for an incremental achievement.
    int32 currentSteps = 2;
    // Experience points earned for the achievement. This field is absent for achievements that have not yet been unlocked and 0 for achievements that have been unlocked by testers but that are unpublished.
    string experiencePoints = 3;
    // The current steps for an incremental achievement as a string.
    string formattedCurrentStepsString = 4;
    // The ID of the achievement.
    string id = 5;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#playerAchievement.
    string kind = 6;
    // The timestamp of the last modification to this achievement's state.
    string lastUpdatedTimestamp = 7;
}

message PlayerAchievementListResponse {
    // The achievements.
    repeated PlayerAchievement items = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#playerAchievementListResponse.
    string kind = 2;
    // Token corresponding to the next page of results.
    string nextPageToken = 3;
}

message PlayerEvent {
    // The ID of the event definition.
    string definitionId = 1;
    // The current number of times this event has occurred, as a string. The formatting of this string depends on the configuration of your event in the Play Games Developer Console.
    string formattedNumEvents = 2;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#playerEvent.
    string kind = 3;
    // The current number of times this event has occurred.
    string numEvents = 4;
    // The ID of the player.
    string playerId = 5;
}

message PlayerEventListResponse {
    // The player events.
    repeated PlayerEvent items = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#playerEventListResponse.
    string kind = 2;
    // The pagination token for the next page of results.
    string nextPageToken = 3;
}

message PlayerExperienceInfo {
    // The current number of experience points for the player.
    string currentExperiencePoints = 1;
    // The current level of the player.
    PlayerLevel currentLevel = 2;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#playerExperienceInfo.
    string kind = 3;
    // The timestamp when the player was leveled up, in millis since Unix epoch UTC.
    string lastLevelUpTimestampMillis = 4;
    // The next level of the player. If the current level is the maximum level, this should be same as the current level.
    PlayerLevel nextLevel = 5;
}

message PlayerLeaderboardScore {
    // Uniquely identifies the type of this resource. Value is always the fixed string games#playerLeaderboardScore.
    string kind = 1;
    // The ID of the leaderboard this score is in.
    string leaderboard_id = 2;
    // The public rank of the score in this leaderboard. This object will not be present if the user is not sharing their scores publicly.
    LeaderboardScoreRank publicRank = 3;
    // The formatted value of this score.
    string scoreString = 4;
    // Additional information about the score. Values must contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.
    string scoreTag = 5;
    // The numerical value of this score.
    string scoreValue = 6;
    // The social rank of the score in this leaderboard.
    LeaderboardScoreRank socialRank = 7;
    // The time span of this score.
    // Possible values are:  
    // - "ALL_TIME" - The score is an all-time score. 
    // - "WEEKLY" - The score is a weekly score. 
    // - "DAILY" - The score is a daily score.
    string timeSpan = 8;
    // The timestamp at which this score was recorded, in milliseconds since the epoch in UTC.
    string writeTimestamp = 9;
}

message PlayerLeaderboardScoreListResponse {
    // The leaderboard scores.
    repeated PlayerLeaderboardScore items = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#playerLeaderboardScoreListResponse.
    string kind = 2;
    // The pagination token for the next page of results.
    string nextPageToken = 3;
    // The Player resources for the owner of this score.
    Player player = 4;
}

message PlayerLevel {
    // Uniquely identifies the type of this resource. Value is always the fixed string games#playerLevel.
    string kind = 1;
    // The level for the user.
    int32 level = 2;
    // The maximum experience points for this level.
    string maxExperiencePoints = 3;
    // The minimum experience points for this level.
    string minExperiencePoints = 4;
}

message PlayerListResponse {
    // The players.
    repeated Player items = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#playerListResponse.
    string kind = 2;
    // Token corresponding to the next page of results.
    string nextPageToken = 3;
}

message PlayerScore {
    // The formatted score for this player score.
    string formattedScore = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#playerScore.
    string kind = 2;
    // The numerical value for this player score.
    string score = 3;
    // Additional information about this score. Values will contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.
    string scoreTag = 4;
    // The time span for this player score.
    // Possible values are:  
    // - "ALL_TIME" - The score is an all-time score. 
    // - "WEEKLY" - The score is a weekly score. 
    // - "DAILY" - The score is a daily score.
    string timeSpan = 5;
}

message PlayerScoreListResponse {
    // Uniquely identifies the type of this resource. Value is always the fixed string games#playerScoreListResponse.
    string kind = 1;
    // The score submissions statuses.
    repeated PlayerScoreResponse submittedScores = 2;
}

message PlayerScoreResponse {
    // The time spans where the submitted score is better than the existing score for that time span.
    // Possible values are:  
    // - "ALL_TIME" - The score is an all-time score. 
    // - "WEEKLY" - The score is a weekly score. 
    // - "DAILY" - The score is a daily score.
    repeated string beatenScoreTimeSpans = 1;
    // The formatted value of the submitted score.
    string formattedScore = 2;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#playerScoreResponse.
    string kind = 3;
    // The leaderboard ID that this score was submitted to.
    string leaderboardId = 4;
    // Additional information about this score. Values will contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.
    string scoreTag = 5;
    // The scores in time spans that have not been beaten. As an example, the submitted score may be better than the player's DAILY score, but not better than the player's scores for the WEEKLY or ALL_TIME time spans.
    repeated PlayerScore unbeatenScores = 6;
}

message PlayerScoreSubmissionList {
    // Uniquely identifies the type of this resource. Value is always the fixed string games#playerScoreSubmissionList.
    string kind = 1;
    // The score submissions.
    repeated ScoreSubmission scores = 2;
}

message ProfileSettings {
    // Uniquely identifies the type of this resource. Value is always the fixed string games#profileSettings.
    string kind = 1;
    // The player's current profile visibility. This field is visible to both 1P and 3P APIs.
    bool profileVisible = 2;
}

message PushToken {
    // The revision of the client SDK used by your application, in the same format that's used by revisions.check. Used to send backward compatible messages. Format: [PLATFORM_TYPE]:[VERSION_NUMBER]. Possible values of PLATFORM_TYPE are:  
    // - IOS - Push token is for iOS
    string clientRevision = 1;
    // Unique identifier for this push token.
    PushTokenId id = 2;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#pushToken.
    string kind = 3;
    // The preferred language for notifications that are sent using this token.
    string language = 4;
}

message PushTokenId {
    // A push token ID for iOS devices.
    message Ios {
            // Device token supplied by an iOS system call to register for remote notifications. Encode this field as web-safe base64.
    string apns_device_token = 1;
            // Indicates whether this token should be used for the production or sandbox APNS server.
    string apns_environment = 2;
    }
    Ios ios = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#pushTokenId.
    string kind = 2;
}

message Quest {
    // The timestamp at which the user accepted the quest in milliseconds since the epoch in UTC. Only present if the player has accepted the quest.
    string acceptedTimestampMillis = 1;
    // The ID of the application this quest is part of.
    string applicationId = 2;
    // The banner image URL for the quest.
    string bannerUrl = 3;
    // The description of the quest.
    string description = 4;
    // The timestamp at which the quest ceases to be active in milliseconds since the epoch in UTC.
    string endTimestampMillis = 5;
    // The icon image URL for the quest.
    string iconUrl = 6;
    // The ID of the quest.
    string id = 7;
    // Indicates whether the banner image being returned is a default image, or is game-provided.
    bool isDefaultBannerUrl = 8;
    // Indicates whether the icon image being returned is a default image, or is game-provided.
    bool isDefaultIconUrl = 9;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#quest.
    string kind = 10;
    // The timestamp at which the quest was last updated by the user in milliseconds since the epoch in UTC. Only present if the player has accepted the quest.
    string lastUpdatedTimestampMillis = 11;
    // The quest milestones.
    repeated QuestMilestone milestones = 12;
    // The name of the quest.
    string name = 13;
    // The timestamp at which the user should be notified that the quest will end soon in milliseconds since the epoch in UTC.
    string notifyTimestampMillis = 14;
    // The timestamp at which the quest becomes active in milliseconds since the epoch in UTC.
    string startTimestampMillis = 15;
    // The state of the quest.
    // Possible values are:  
    // - "UPCOMING": The quest is upcoming. The user can see the quest, but cannot accept it until it is open. 
    // - "OPEN": The quest is currently open and may be accepted at this time. 
    // - "ACCEPTED": The user is currently participating in this quest. 
    // - "COMPLETED": The user has completed the quest. 
    // - "FAILED": The quest was attempted but was not completed before the deadline expired. 
    // - "EXPIRED": The quest has expired and was not accepted. 
    // - "DELETED": The quest should be deleted from the local database.
    string state = 16;
}

message QuestContribution {
    // The formatted value of the contribution as a string. Format depends on the configuration for the associated event definition in the Play Games Developer Console.
    string formattedValue = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#questContribution.
    string kind = 2;
    // The value of the contribution.
    string value = 3;
}

message QuestCriterion {
    // The total number of times the associated event must be incremented for the player to complete this quest.
    QuestContribution completionContribution = 1;
    // The number of increments the player has made toward the completion count event increments required to complete the quest. This value will not exceed the completion contribution.
    // There will be no currentContribution until the player has accepted the quest.
    QuestContribution currentContribution = 2;
    // The ID of the event the criterion corresponds to.
    string eventId = 3;
    // The value of the event associated with this quest at the time that the quest was accepted. This value may change if event increments that took place before the start of quest are uploaded after the quest starts.
    // There will be no initialPlayerProgress until the player has accepted the quest.
    QuestContribution initialPlayerProgress = 4;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#questCriterion.
    string kind = 5;
}

message QuestListResponse {
    // The quests.
    repeated Quest items = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#questListResponse.
    string kind = 2;
    // Token corresponding to the next page of results.
    string nextPageToken = 3;
}

message QuestMilestone {
    // The completion reward data of the milestone, represented as a Base64-encoded string. This is a developer-specified binary blob with size between 0 and 2 KB before encoding.
    string completionRewardData = 1;
    // The criteria of the milestone.
    repeated QuestCriterion criteria = 2;
    // The milestone ID.
    string id = 3;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#questMilestone.
    string kind = 4;
    // The current state of the milestone.
    // Possible values are:  
    // - "COMPLETED_NOT_CLAIMED" - The milestone is complete, but has not yet been claimed. 
    // - "CLAIMED" - The milestone is complete and has been claimed. 
    // - "NOT_COMPLETED" - The milestone has not yet been completed. 
    // - "NOT_STARTED" - The milestone is for a quest that has not yet been accepted.
    string state = 5;
}

message RevisionCheckResponse {
    // The version of the API this client revision should use when calling API methods.
    string apiVersion = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#revisionCheckResponse.
    string kind = 2;
    // The result of the revision check.
    // Possible values are:  
    // - "OK" - The revision being used is current. 
    // - "DEPRECATED" - There is currently a newer version available, but the revision being used still works. 
    // - "INVALID" - The revision being used is not supported in any released version.
    string revisionStatus = 3;
}

message Room {
    // The ID of the application being played.
    string applicationId = 1;
    // Criteria for auto-matching players into this room.
    RoomAutoMatchingCriteria autoMatchingCriteria = 2;
    // Auto-matching status for this room. Not set if the room is not currently in the auto-matching queue.
    RoomAutoMatchStatus autoMatchingStatus = 3;
    // Details about the room creation.
    RoomModification creationDetails = 4;
    // This short description is generated by our servers and worded relative to the player requesting the room. It is intended to be displayed when the room is shown in a list (that is, an invitation to a room.)
    string description = 5;
    // The ID of the participant that invited the user to the room. Not set if the user was not invited to the room.
    string inviterId = 6;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#room.
    string kind = 7;
    // Details about the last update to the room.
    RoomModification lastUpdateDetails = 8;
    // The participants involved in the room, along with their statuses. Includes participants who have left or declined invitations.
    repeated RoomParticipant participants = 9;
    // Globally unique ID for a room.
    string roomId = 10;
    // The version of the room status: an increasing counter, used by the client to ignore out-of-order updates to room status.
    int32 roomStatusVersion = 11;
    // The status of the room.
    // Possible values are:  
    // - "ROOM_INVITING" - One or more players have been invited and not responded. 
    // - "ROOM_AUTO_MATCHING" - One or more slots need to be filled by auto-matching. 
    // - "ROOM_CONNECTING" - Players have joined and are connecting to each other (either before or after auto-matching). 
    // - "ROOM_ACTIVE" - All players have joined and connected to each other. 
    // - "ROOM_DELETED" - The room should no longer be shown on the client. Returned in sync calls when a player joins a room (as a tombstone), or for rooms where all joined participants have left.
    string status = 12;
    // The variant / mode of the application being played; can be any integer value, or left blank.
    int32 variant = 13;
}

message RoomAutoMatchStatus {
    // Uniquely identifies the type of this resource. Value is always the fixed string games#roomAutoMatchStatus.
    string kind = 1;
    // An estimate for the amount of time (in seconds) that auto-matching is expected to take to complete.
    int32 waitEstimateSeconds = 2;
}

message RoomAutoMatchingCriteria {
    // A bitmask indicating when auto-matches are valid. When ANDed with other exclusive bitmasks, the result must be zero. Can be used to support exclusive roles within a game.
    string exclusiveBitmask = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#roomAutoMatchingCriteria.
    string kind = 2;
    // The maximum number of players that should be added to the room by auto-matching.
    int32 maxAutoMatchingPlayers = 3;
    // The minimum number of players that should be added to the room by auto-matching.
    int32 minAutoMatchingPlayers = 4;
}

message RoomClientAddress {
    // Uniquely identifies the type of this resource. Value is always the fixed string games#roomClientAddress.
    string kind = 1;
    // The XMPP address of the client on the Google Games XMPP network.
    string xmppAddress = 2;
}

message RoomCreateRequest {
    // Criteria for auto-matching players into this room.
    RoomAutoMatchingCriteria autoMatchingCriteria = 1;
    // The capabilities that this client supports for realtime communication.
    repeated string capabilities = 2;
    // Client address for the player creating the room.
    RoomClientAddress clientAddress = 3;
    // The player IDs to invite to the room.
    repeated string invitedPlayerIds = 4;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#roomCreateRequest.
    string kind = 5;
    // Network diagnostics for the client creating the room.
    NetworkDiagnostics networkDiagnostics = 6;
    // A randomly generated numeric ID. This number is used at the server to ensure that the request is handled correctly across retries.
    string requestId = 7;
    // The variant / mode of the application to be played. This can be any integer value, or left blank. You should use a small number of variants to keep the auto-matching pool as large as possible.
    int32 variant = 8;
}

message RoomJoinRequest {
    // The capabilities that this client supports for realtime communication.
    repeated string capabilities = 1;
    // Client address for the player joining the room.
    RoomClientAddress clientAddress = 2;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#roomJoinRequest.
    string kind = 3;
    // Network diagnostics for the client joining the room.
    NetworkDiagnostics networkDiagnostics = 4;
}

message RoomLeaveDiagnostics {
    // Android network subtype. http://developer.android.com/reference/android/net/NetworkInfo.html#getSubtype()
    int32 androidNetworkSubtype = 1;
    // Android network type. http://developer.android.com/reference/android/net/NetworkInfo.html#getType()
    int32 androidNetworkType = 2;
    // iOS network type as defined in Reachability.h.
    int32 iosNetworkType = 3;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#roomLeaveDiagnostics.
    string kind = 4;
    // The MCC+MNC code for the client's network connection. On Android: http://developer.android.com/reference/android/telephony/TelephonyManager.html#getNetworkOperator() On iOS, see: https://developer.apple.com/library/ios/documentation/NetworkingInternet/Reference/CTCarrier/Reference/Reference.html
    string networkOperatorCode = 5;
    // The name of the carrier of the client's network connection. On Android: http://developer.android.com/reference/android/telephony/TelephonyManager.html#getNetworkOperatorName() On iOS: https://developer.apple.com/library/ios/documentation/NetworkingInternet/Reference/CTCarrier/Reference/Reference.html#//apple_ref/occ/instp/CTCarrier/carrierName
    string networkOperatorName = 6;
    // Diagnostics about all peer sessions.
    repeated PeerSessionDiagnostics peerSession = 7;
    // Whether or not sockets were used.
    bool socketsUsed = 8;
}

message RoomLeaveRequest {
    // Uniquely identifies the type of this resource. Value is always the fixed string games#roomLeaveRequest.
    string kind = 1;
    // Diagnostics for a player leaving the room.
    RoomLeaveDiagnostics leaveDiagnostics = 2;
    // Reason for leaving the match.
    // Possible values are:  
    // - "PLAYER_LEFT" - The player chose to leave the room.. 
    // - "GAME_LEFT" - The game chose to remove the player from the room. 
    // - "REALTIME_ABANDONED" - The player switched to another application and abandoned the room. 
    // - "REALTIME_PEER_CONNECTION_FAILURE" - The client was unable to establish a connection to other peer(s). 
    // - "REALTIME_SERVER_CONNECTION_FAILURE" - The client was unable to communicate with the server. 
    // - "REALTIME_SERVER_ERROR" - The client received an error response when it tried to communicate with the server. 
    // - "REALTIME_TIMEOUT" - The client timed out while waiting for a room. 
    // - "REALTIME_CLIENT_DISCONNECTING" - The client disconnects without first calling Leave. 
    // - "REALTIME_SIGN_OUT" - The user signed out of G+ while in the room. 
    // - "REALTIME_GAME_CRASHED" - The game crashed. 
    // - "REALTIME_ROOM_SERVICE_CRASHED" - RoomAndroidService crashed. 
    // - "REALTIME_DIFFERENT_CLIENT_ROOM_OPERATION" - Another client is trying to enter a room. 
    // - "REALTIME_SAME_CLIENT_ROOM_OPERATION" - The same client is trying to enter a new room.
    string reason = 3;
}

message RoomList {
    // The rooms.
    repeated Room items = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#roomList.
    string kind = 2;
    // The pagination token for the next page of results.
    string nextPageToken = 3;
}

message RoomModification {
    // Uniquely identifies the type of this resource. Value is always the fixed string games#roomModification.
    string kind = 1;
    // The timestamp at which they modified the room, in milliseconds since the epoch in UTC.
    string modifiedTimestampMillis = 2;
    // The ID of the participant that modified the room.
    string participantId = 3;
}

message RoomP2PStatus {
    // The amount of time in milliseconds it took to establish connections with this peer.
    int32 connectionSetupLatencyMillis = 1;
    // The error code in event of a failure.
    // Possible values are:  
    // - "P2P_FAILED" - The client failed to establish a P2P connection with the peer. 
    // - "PRESENCE_FAILED" - The client failed to register to receive P2P connections. 
    // - "RELAY_SERVER_FAILED" - The client received an error when trying to use the relay server to establish a P2P connection with the peer.
    string error = 2;
    // More detailed diagnostic message returned in event of a failure.
    string error_reason = 3;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#roomP2PStatus.
    string kind = 4;
    // The ID of the participant.
    string participantId = 5;
    // The status of the peer in the room.
    // Possible values are:  
    // - "CONNECTION_ESTABLISHED" - The client established a P2P connection with the peer. 
    // - "CONNECTION_FAILED" - The client failed to establish directed presence with the peer.
    string status = 6;
    // The amount of time in milliseconds it took to send packets back and forth on the unreliable channel with this peer.
    int32 unreliableRoundtripLatencyMillis = 7;
}

message RoomP2PStatuses {
    // Uniquely identifies the type of this resource. Value is always the fixed string games#roomP2PStatuses.
    string kind = 1;
    // The updates for the peers.
    repeated RoomP2PStatus updates = 2;
}

message RoomParticipant {
    // True if this participant was auto-matched with the requesting player.
    bool autoMatched = 1;
    // Information about a player that has been anonymously auto-matched against the requesting player. (Either player or autoMatchedPlayer will be set.)
    AnonymousPlayer autoMatchedPlayer = 2;
    // The capabilities which can be used when communicating with this participant.
    repeated string capabilities = 3;
    // Client address for the participant.
    RoomClientAddress clientAddress = 4;
    // True if this participant is in the fully connected set of peers in the room.
    bool connected = 5;
    // An identifier for the participant in the scope of the room. Cannot be used to identify a player across rooms or in other contexts.
    string id = 6;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#roomParticipant.
    string kind = 7;
    // The reason the participant left the room; populated if the participant status is PARTICIPANT_LEFT.
    // Possible values are:  
    // - "PLAYER_LEFT" - The player explicitly chose to leave the room. 
    // - "GAME_LEFT" - The game chose to remove the player from the room. 
    // - "ABANDONED" - The player switched to another application and abandoned the room.
    // - "PEER_CONNECTION_FAILURE" - The client was unable to establish or maintain a connection to other peer(s) in the room.
    // - "SERVER_ERROR" - The client received an error response when it tried to communicate with the server. 
    // - "TIMEOUT" - The client timed out while waiting for players to join and connect. 
    // - "PRESENCE_FAILURE" - The client's XMPP connection ended abruptly.
    string leaveReason = 8;
    // Information about the player. Not populated if this player was anonymously auto-matched against the requesting player. (Either player or autoMatchedPlayer will be set.)
    Player player = 9;
    // The status of the participant with respect to the room.
    // Possible values are:  
    // - "PARTICIPANT_INVITED" - The participant has been invited to join the room, but has not yet responded. 
    // - "PARTICIPANT_JOINED" - The participant has joined the room (either after creating it or accepting an invitation.) 
    // - "PARTICIPANT_DECLINED" - The participant declined an invitation to join the room. 
    // - "PARTICIPANT_LEFT" - The participant joined the room and then left it.
    string status = 10;
}

message RoomStatus {
    // Auto-matching status for this room. Not set if the room is not currently in the automatching queue.
    RoomAutoMatchStatus autoMatchingStatus = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#roomStatus.
    string kind = 2;
    // The participants involved in the room, along with their statuses. Includes participants who have left or declined invitations.
    repeated RoomParticipant participants = 3;
    // Globally unique ID for a room.
    string roomId = 4;
    // The status of the room.
    // Possible values are:  
    // - "ROOM_INVITING" - One or more players have been invited and not responded. 
    // - "ROOM_AUTO_MATCHING" - One or more slots need to be filled by auto-matching. 
    // - "ROOM_CONNECTING" - Players have joined are connecting to each other (either before or after auto-matching). 
    // - "ROOM_ACTIVE" - All players have joined and connected to each other. 
    // - "ROOM_DELETED" - All joined players have left.
    string status = 5;
    // The version of the status for the room: an increasing counter, used by the client to ignore out-of-order updates to room status.
    int32 statusVersion = 6;
}

message ScoreSubmission {
    // Uniquely identifies the type of this resource. Value is always the fixed string games#scoreSubmission.
    string kind = 1;
    // The leaderboard this score is being submitted to.
    string leaderboardId = 2;
    // The new score being submitted.
    string score = 3;
    // Additional information about this score. Values will contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.
    string scoreTag = 4;
    // Signature Values will contain URI-safe characters as defined by section 2.3 of RFC 3986.
    string signature = 5;
}

message Snapshot {
    // The cover image of this snapshot. May be absent if there is no image.
    SnapshotImage coverImage = 1;
    // The description of this snapshot.
    string description = 2;
    // The ID of the file underlying this snapshot in the Drive API. Only present if the snapshot is a view on a Drive file and the file is owned by the caller.
    string driveId = 3;
    // The duration associated with this snapshot, in millis.
    string durationMillis = 4;
    // The ID of the snapshot.
    string id = 5;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#snapshot.
    string kind = 6;
    // The timestamp (in millis since Unix epoch) of the last modification to this snapshot.
    string lastModifiedMillis = 7;
    // The progress value (64-bit integer set by developer) associated with this snapshot.
    string progressValue = 8;
    // The title of this snapshot.
    string title = 9;
    // The type of this snapshot.
    // Possible values are:  
    // - "SAVE_GAME" - A snapshot representing a save game.
    string type = 10;
    // The unique name provided when the snapshot was created.
    string uniqueName = 11;
}

message SnapshotImage {
    // The height of the image.
    int32 height = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#snapshotImage.
    string kind = 2;
    // The MIME type of the image.
    string mime_type = 3;
    // The URL of the image. This URL may be invalidated at any time and should not be cached.
    string url = 4;
    // The width of the image.
    int32 width = 5;
}

message SnapshotListResponse {
    // The snapshots.
    repeated Snapshot items = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#snapshotListResponse.
    string kind = 2;
    // Token corresponding to the next page of results. If there are no more results, the token is omitted.
    string nextPageToken = 3;
}

message TurnBasedAutoMatchingCriteria {
    // A bitmask indicating when auto-matches are valid. When ANDed with other exclusive bitmasks, the result must be zero. Can be used to support exclusive roles within a game.
    string exclusiveBitmask = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#turnBasedAutoMatchingCriteria.
    string kind = 2;
    // The maximum number of players that should be added to the match by auto-matching.
    int32 maxAutoMatchingPlayers = 3;
    // The minimum number of players that should be added to the match by auto-matching.
    int32 minAutoMatchingPlayers = 4;
}

message TurnBasedMatch {
    // The ID of the application being played.
    string applicationId = 1;
    // Criteria for auto-matching players into this match.
    TurnBasedAutoMatchingCriteria autoMatchingCriteria = 2;
    // Details about the match creation.
    TurnBasedMatchModification creationDetails = 3;
    // The data / game state for this match.
    TurnBasedMatchData data = 4;
    // This short description is generated by our servers based on turn state and is localized and worded relative to the player requesting the match. It is intended to be displayed when the match is shown in a list.
    string description = 5;
    // The ID of the participant that invited the user to the match. Not set if the user was not invited to the match.
    string inviterId = 6;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#turnBasedMatch.
    string kind = 7;
    // Details about the last update to the match.
    TurnBasedMatchModification lastUpdateDetails = 8;
    // Globally unique ID for a turn-based match.
    string matchId = 9;
    // The number of the match in a chain of rematches. Will be set to 1 for the first match and incremented by 1 for each rematch.
    int32 matchNumber = 10;
    // The version of this match: an increasing counter, used to avoid out-of-date updates to the match.
    int32 matchVersion = 11;
    // The participants involved in the match, along with their statuses. Includes participants who have left or declined invitations.
    repeated TurnBasedMatchParticipant participants = 12;
    // The ID of the participant that is taking a turn.
    string pendingParticipantId = 13;
    // The data / game state for the previous match; set for the first turn of rematches only.
    TurnBasedMatchData previousMatchData = 14;
    // The ID of a rematch of this match. Only set for completed matches that have been rematched.
    string rematchId = 15;
    // The results reported for this match.
    repeated ParticipantResult results = 16;
    // The status of the match.
    // Possible values are:  
    // - "MATCH_AUTO_MATCHING" - One or more slots need to be filled by auto-matching; the match cannot be established until they are filled. 
    // - "MATCH_ACTIVE" - The match has started. 
    // - "MATCH_COMPLETE" - The match has finished. 
    // - "MATCH_CANCELED" - The match was canceled. 
    // - "MATCH_EXPIRED" - The match expired due to inactivity. 
    // - "MATCH_DELETED" - The match should no longer be shown on the client. Returned only for tombstones for matches when sync is called.
    string status = 17;
    // The status of the current user in the match. Derived from the match type, match status, the user's participant status, and the pending participant for the match.
    // Possible values are:  
    // - "USER_INVITED" - The user has been invited to join the match and has not responded yet. 
    // - "USER_AWAITING_TURN" - The user is waiting for their turn. 
    // - "USER_TURN" - The user has an action to take in the match. 
    // - "USER_MATCH_COMPLETED" - The match has ended (it is completed, canceled, or expired.)
    string userMatchStatus = 18;
    // The variant / mode of the application being played; can be any integer value, or left blank.
    int32 variant = 19;
    // The ID of another participant in the match that can be used when describing the participants the user is playing with.
    string withParticipantId = 20;
}

message TurnBasedMatchCreateRequest {
    // Criteria for auto-matching players into this match.
    TurnBasedAutoMatchingCriteria autoMatchingCriteria = 1;
    // The player ids to invite to the match.
    repeated string invitedPlayerIds = 2;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#turnBasedMatchCreateRequest.
    string kind = 3;
    // A randomly generated numeric ID. This number is used at the server to ensure that the request is handled correctly across retries.
    string requestId = 4;
    // The variant / mode of the application to be played. This can be any integer value, or left blank. You should use a small number of variants to keep the auto-matching pool as large as possible.
    int32 variant = 5;
}

message TurnBasedMatchData {
    // The byte representation of the data (limited to 128 kB), as a Base64-encoded string with the URL_SAFE encoding option.
    string data = 1;
    // True if this match has data available but it wasn't returned in a list response; fetching the match individually will retrieve this data.
    bool dataAvailable = 2;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#turnBasedMatchData.
    string kind = 3;
}

message TurnBasedMatchDataRequest {
    // The byte representation of the data (limited to 128 kB), as a Base64-encoded string with the URL_SAFE encoding option.
    string data = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#turnBasedMatchDataRequest.
    string kind = 2;
}

message TurnBasedMatchList {
    // The matches.
    repeated TurnBasedMatch items = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#turnBasedMatchList.
    string kind = 2;
    // The pagination token for the next page of results.
    string nextPageToken = 3;
}

message TurnBasedMatchModification {
    // Uniquely identifies the type of this resource. Value is always the fixed string games#turnBasedMatchModification.
    string kind = 1;
    // The timestamp at which they modified the match, in milliseconds since the epoch in UTC.
    string modifiedTimestampMillis = 2;
    // The ID of the participant that modified the match.
    string participantId = 3;
}

message TurnBasedMatchParticipant {
    // True if this participant was auto-matched with the requesting player.
    bool autoMatched = 1;
    // Information about a player that has been anonymously auto-matched against the requesting player. (Either player or autoMatchedPlayer will be set.)
    AnonymousPlayer autoMatchedPlayer = 2;
    // An identifier for the participant in the scope of the match. Cannot be used to identify a player across matches or in other contexts.
    string id = 3;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#turnBasedMatchParticipant.
    string kind = 4;
    // Information about the player. Not populated if this player was anonymously auto-matched against the requesting player. (Either player or autoMatchedPlayer will be set.)
    Player player = 5;
    // The status of the participant with respect to the match.
    // Possible values are:  
    // - "PARTICIPANT_NOT_INVITED_YET" - The participant is slated to be invited to the match, but the invitation has not been sent; the invite will be sent when it becomes their turn. 
    // - "PARTICIPANT_INVITED" - The participant has been invited to join the match, but has not yet responded. 
    // - "PARTICIPANT_JOINED" - The participant has joined the match (either after creating it or accepting an invitation.) 
    // - "PARTICIPANT_DECLINED" - The participant declined an invitation to join the match. 
    // - "PARTICIPANT_LEFT" - The participant joined the match and then left it. 
    // - "PARTICIPANT_FINISHED" - The participant finished playing in the match. 
    // - "PARTICIPANT_UNRESPONSIVE" - The participant did not take their turn in the allotted time.
    string status = 6;
}

message TurnBasedMatchRematch {
    // Uniquely identifies the type of this resource. Value is always the fixed string games#turnBasedMatchRematch.
    string kind = 1;
    // The old match that the rematch was created from; will be updated such that the rematchId field will point at the new match.
    TurnBasedMatch previousMatch = 2;
    // The newly created match; a rematch of the old match with the same participants.
    TurnBasedMatch rematch = 3;
}

message TurnBasedMatchResults {
    // The final match data.
    TurnBasedMatchDataRequest data = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#turnBasedMatchResults.
    string kind = 2;
    // The version of the match being updated.
    int32 matchVersion = 3;
    // The match results for the participants in the match.
    repeated ParticipantResult results = 4;
}

message TurnBasedMatchSync {
    // The matches.
    repeated TurnBasedMatch items = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#turnBasedMatchSync.
    string kind = 2;
    // True if there were more matches available to fetch at the time the response was generated (which were not returned due to page size limits.)
    bool moreAvailable = 3;
    // The pagination token for the next page of results.
    string nextPageToken = 4;
}

message TurnBasedMatchTurn {
    // The shared game state data after the turn is over.
    TurnBasedMatchDataRequest data = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#turnBasedMatchTurn.
    string kind = 2;
    // The version of this match: an increasing counter, used to avoid out-of-date updates to the match.
    int32 matchVersion = 3;
    // The ID of the participant who should take their turn next. May be set to the current player's participant ID to update match state without changing the turn. If not set, the match will wait for other player(s) to join via automatching; this is only valid if automatch criteria is set on the match with remaining slots for automatched players.
    string pendingParticipantId = 4;
    // The match results for the participants in the match.
    repeated ParticipantResult results = 5;
}

enum Alt {
    JSON = 0;
}

service GooglePlayGameServicesService {
    // Lists all the achievement definitions for your application.
    rpc GetAchievements(GetAchievementsRequest) returns (AchievementDefinitionsListResponse) {
      option (google.api.http) = {
        get: "/games/v1/achievements"
      };
    }
    // Updates multiple achievements for the currently authenticated player.
    rpc PostAchievementsUpdateMultiple(PostAchievementsUpdateMultipleRequest) returns (AchievementUpdateMultipleResponse) {
      option (google.api.http) = {
        post: "/games/v1/achievements/updateMultiple"
        body: "body"
      };
    }
    // Increments the steps of the achievement with the given ID for the currently authenticated player.
    rpc PostAchievementsAchievementIdIncrement(PostAchievementsAchievementIdIncrementRequest) returns (AchievementIncrementResponse) {
      option (google.api.http) = {
        post: "/games/v1/achievements/{achievementId}/increment"
      };
    }
    // Sets the state of the achievement with the given ID to REVEALED for the currently authenticated player.
    rpc PostAchievementsAchievementIdReveal(PostAchievementsAchievementIdRevealRequest) returns (AchievementRevealResponse) {
      option (google.api.http) = {
        post: "/games/v1/achievements/{achievementId}/reveal"
      };
    }
    // Sets the steps for the currently authenticated player towards unlocking an achievement. If the steps parameter is less than the current number of steps that the player already gained for the achievement, the achievement is not modified.
    rpc PostAchievementsAchievementIdSetStepsAtLeast(PostAchievementsAchievementIdSetStepsAtLeastRequest) returns (AchievementSetStepsAtLeastResponse) {
      option (google.api.http) = {
        post: "/games/v1/achievements/{achievementId}/setStepsAtLeast"
      };
    }
    // Unlocks this achievement for the currently authenticated player.
    rpc PostAchievementsAchievementIdUnlock(PostAchievementsAchievementIdUnlockRequest) returns (AchievementUnlockResponse) {
      option (google.api.http) = {
        post: "/games/v1/achievements/{achievementId}/unlock"
      };
    }
    // Indicate that the the currently authenticated user is playing your application.
    rpc PostApplicationsPlayed(PostApplicationsPlayedRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/games/v1/applications/played"
      };
    }
    // Retrieves the metadata of the application with the given ID. If the requested application is not available for the specified platformType, the returned response will not include any instance data.
    rpc GetApplicationsApplicationId(GetApplicationsApplicationIdRequest) returns (Application) {
      option (google.api.http) = {
        get: "/games/v1/applications/{applicationId}"
      };
    }
    // Verifies the auth token provided with this request is for the application with the specified ID, and returns the ID of the player it was granted for.
    rpc GetApplicationsApplicationIdVerify(GetApplicationsApplicationIdVerifyRequest) returns (ApplicationVerifyResponse) {
      option (google.api.http) = {
        get: "/games/v1/applications/{applicationId}/verify"
      };
    }
    // Returns a list of the event definitions in this application.
    rpc GetEventDefinitions(GetEventDefinitionsRequest) returns (EventDefinitionListResponse) {
      option (google.api.http) = {
        get: "/games/v1/eventDefinitions"
      };
    }
    // Returns a list showing the current progress on events in this application for the currently authenticated user.
    rpc GetEvents(GetEventsRequest) returns (PlayerEventListResponse) {
      option (google.api.http) = {
        get: "/games/v1/events"
      };
    }
    // Records a batch of changes to the number of times events have occurred for the currently authenticated user of this application.
    rpc PostEvents(PostEventsRequest) returns (EventUpdateResponse) {
      option (google.api.http) = {
        post: "/games/v1/events"
        body: "body"
      };
    }
    // Lists all the leaderboard metadata for your application.
    rpc GetLeaderboards(GetLeaderboardsRequest) returns (LeaderboardListResponse) {
      option (google.api.http) = {
        get: "/games/v1/leaderboards"
      };
    }
    // Submits multiple scores to leaderboards.
    rpc PostLeaderboardsScores(PostLeaderboardsScoresRequest) returns (PlayerScoreListResponse) {
      option (google.api.http) = {
        post: "/games/v1/leaderboards/scores"
        body: "body"
      };
    }
    // Retrieves the metadata of the leaderboard with the given ID.
    rpc GetLeaderboardsLeaderboardId(GetLeaderboardsLeaderboardIdRequest) returns (Leaderboard) {
      option (google.api.http) = {
        get: "/games/v1/leaderboards/{leaderboardId}"
      };
    }
    // Submits a score to the specified leaderboard.
    rpc PostLeaderboardsLeaderboardIdScores(PostLeaderboardsLeaderboardIdScoresRequest) returns (PlayerScoreResponse) {
      option (google.api.http) = {
        post: "/games/v1/leaderboards/{leaderboardId}/scores"
      };
    }
    // Lists the scores in a leaderboard, starting from the top.
    rpc GetLeaderboardsLeaderboardIdScoresCollection(GetLeaderboardsLeaderboardIdScoresCollectionRequest) returns (LeaderboardScores) {
      option (google.api.http) = {
        get: "/games/v1/leaderboards/{leaderboardId}/scores/{collection}"
      };
    }
    // Lists the scores in a leaderboard around (and including) a player's score.
    rpc GetLeaderboardsLeaderboardIdWindowCollection(GetLeaderboardsLeaderboardIdWindowCollectionRequest) returns (LeaderboardScores) {
      option (google.api.http) = {
        get: "/games/v1/leaderboards/{leaderboardId}/window/{collection}"
      };
    }
    // Return the metagame configuration data for the calling application.
    rpc GetMetagameConfig(GetMetagameConfigRequest) returns (MetagameConfig) {
      option (google.api.http) = {
        get: "/games/v1/metagameConfig"
      };
    }
    // Get the collection of players for the currently authenticated user.
    rpc GetPlayersMePlayersCollection(GetPlayersMePlayersCollectionRequest) returns (PlayerListResponse) {
      option (google.api.http) = {
        get: "/games/v1/players/me/players/{collection}"
      };
    }
    // Retrieves the Player resource with the given ID. To retrieve the player for the currently authenticated user, set playerId to me.
    rpc GetPlayersPlayerId(GetPlayersPlayerIdRequest) returns (Player) {
      option (google.api.http) = {
        get: "/games/v1/players/{playerId}"
      };
    }
    // Lists the progress for all your application's achievements for the currently authenticated player.
    rpc GetPlayersPlayerIdAchievements(GetPlayersPlayerIdAchievementsRequest) returns (PlayerAchievementListResponse) {
      option (google.api.http) = {
        get: "/games/v1/players/{playerId}/achievements"
      };
    }
    // List play data aggregated per category for the player corresponding to playerId.
    rpc GetPlayersPlayerIdCategoriesCollection(GetPlayersPlayerIdCategoriesCollectionRequest) returns (CategoryListResponse) {
      option (google.api.http) = {
        get: "/games/v1/players/{playerId}/categories/{collection}"
      };
    }
    // Get high scores, and optionally ranks, in leaderboards for the currently authenticated player. For a specific time span, leaderboardId can be set to ALL to retrieve data for all leaderboards in a given time span.
    // NOTE: You cannot ask for 'ALL' leaderboards and 'ALL' timeSpans in the same request; only one parameter may be set to 'ALL'.
    rpc GetPlayersPlayerIdLeaderboardsLeaderboardIdScoresTimeSpan(GetPlayersPlayerIdLeaderboardsLeaderboardIdScoresTimeSpanRequest) returns (PlayerLeaderboardScoreListResponse) {
      option (google.api.http) = {
        get: "/games/v1/players/{playerId}/leaderboards/{leaderboardId}/scores/{timeSpan}"
      };
    }
    // Get a list of quests for your application and the currently authenticated player.
    rpc GetPlayersPlayerIdQuests(GetPlayersPlayerIdQuestsRequest) returns (QuestListResponse) {
      option (google.api.http) = {
        get: "/games/v1/players/{playerId}/quests"
      };
    }
    // Retrieves a list of snapshots created by your application for the player corresponding to the player ID.
    rpc GetPlayersPlayerIdSnapshots(GetPlayersPlayerIdSnapshotsRequest) returns (SnapshotListResponse) {
      option (google.api.http) = {
        get: "/games/v1/players/{playerId}/snapshots"
      };
    }
    // Registers a push token for the current user and application.
    rpc PutPushtokens(PutPushtokensRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/games/v1/pushtokens"
        body: "body"
      };
    }
    // Removes a push token for the current user and application. Removing a non-existent push token will report success.
    rpc PostPushtokensRemove(PostPushtokensRemoveRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/games/v1/pushtokens/remove"
        body: "body"
      };
    }
    // Indicates that the currently authorized user will participate in the quest.
    rpc PostQuestsQuestIdAccept(PostQuestsQuestIdAcceptRequest) returns (Quest) {
      option (google.api.http) = {
        post: "/games/v1/quests/{questId}/accept"
      };
    }
    // Report that a reward for the milestone corresponding to milestoneId for the quest corresponding to questId has been claimed by the currently authorized user.
    rpc PutQuestsQuestIdMilestonesMilestoneIdClaim(PutQuestsQuestIdMilestonesMilestoneIdClaimRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/games/v1/quests/{questId}/milestones/{milestoneId}/claim"
      };
    }
    // Checks whether the games client is out of date.
    rpc GetRevisionsCheck(GetRevisionsCheckRequest) returns (RevisionCheckResponse) {
      option (google.api.http) = {
        get: "/games/v1/revisions/check"
      };
    }
    // Returns invitations to join rooms.
    rpc GetRooms(GetRoomsRequest) returns (RoomList) {
      option (google.api.http) = {
        get: "/games/v1/rooms"
      };
    }
    // Create a room. For internal use by the Games SDK only. Calling this method directly is unsupported.
    rpc PostRoomsCreate(PostRoomsCreateRequest) returns (Room) {
      option (google.api.http) = {
        post: "/games/v1/rooms/create"
        body: "body"
      };
    }
    // Get the data for a room.
    rpc GetRoomsRoomId(GetRoomsRoomIdRequest) returns (Room) {
      option (google.api.http) = {
        get: "/games/v1/rooms/{roomId}"
      };
    }
    // Decline an invitation to join a room. For internal use by the Games SDK only. Calling this method directly is unsupported.
    rpc PostRoomsRoomIdDecline(PostRoomsRoomIdDeclineRequest) returns (Room) {
      option (google.api.http) = {
        post: "/games/v1/rooms/{roomId}/decline"
      };
    }
    // Dismiss an invitation to join a room. For internal use by the Games SDK only. Calling this method directly is unsupported.
    rpc PostRoomsRoomIdDismiss(PostRoomsRoomIdDismissRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/games/v1/rooms/{roomId}/dismiss"
      };
    }
    // Join a room. For internal use by the Games SDK only. Calling this method directly is unsupported.
    rpc PostRoomsRoomIdJoin(PostRoomsRoomIdJoinRequest) returns (Room) {
      option (google.api.http) = {
        post: "/games/v1/rooms/{roomId}/join"
        body: "body"
      };
    }
    // Leave a room. For internal use by the Games SDK only. Calling this method directly is unsupported.
    rpc PostRoomsRoomIdLeave(PostRoomsRoomIdLeaveRequest) returns (Room) {
      option (google.api.http) = {
        post: "/games/v1/rooms/{roomId}/leave"
        body: "body"
      };
    }
    // Updates sent by a client reporting the status of peers in a room. For internal use by the Games SDK only. Calling this method directly is unsupported.
    rpc PostRoomsRoomIdReportstatus(PostRoomsRoomIdReportstatusRequest) returns (RoomStatus) {
      option (google.api.http) = {
        post: "/games/v1/rooms/{roomId}/reportstatus"
        body: "body"
      };
    }
    // Retrieves the metadata for a given snapshot ID.
    rpc GetSnapshotsSnapshotId(GetSnapshotsSnapshotIdRequest) returns (Snapshot) {
      option (google.api.http) = {
        get: "/games/v1/snapshots/{snapshotId}"
      };
    }
    // Returns turn-based matches the player is or was involved in.
    rpc GetTurnbasedmatches(GetTurnbasedmatchesRequest) returns (TurnBasedMatchList) {
      option (google.api.http) = {
        get: "/games/v1/turnbasedmatches"
      };
    }
    // Create a turn-based match.
    rpc PostTurnbasedmatchesCreate(PostTurnbasedmatchesCreateRequest) returns (TurnBasedMatch) {
      option (google.api.http) = {
        post: "/games/v1/turnbasedmatches/create"
        body: "body"
      };
    }
    // Returns turn-based matches the player is or was involved in that changed since the last sync call, with the least recent changes coming first. Matches that should be removed from the local cache will have a status of MATCH_DELETED.
    rpc GetTurnbasedmatchesSync(GetTurnbasedmatchesSyncRequest) returns (TurnBasedMatchSync) {
      option (google.api.http) = {
        get: "/games/v1/turnbasedmatches/sync"
      };
    }
    // Get the data for a turn-based match.
    rpc GetTurnbasedmatchesMatchId(GetTurnbasedmatchesMatchIdRequest) returns (TurnBasedMatch) {
      option (google.api.http) = {
        get: "/games/v1/turnbasedmatches/{matchId}"
      };
    }
    // Cancel a turn-based match.
    rpc PutTurnbasedmatchesMatchIdCancel(PutTurnbasedmatchesMatchIdCancelRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/games/v1/turnbasedmatches/{matchId}/cancel"
      };
    }
    // Decline an invitation to play a turn-based match.
    rpc PutTurnbasedmatchesMatchIdDecline(PutTurnbasedmatchesMatchIdDeclineRequest) returns (TurnBasedMatch) {
      option (google.api.http) = {
        put: "/games/v1/turnbasedmatches/{matchId}/decline"
      };
    }
    // Dismiss a turn-based match from the match list. The match will no longer show up in the list and will not generate notifications.
    rpc PutTurnbasedmatchesMatchIdDismiss(PutTurnbasedmatchesMatchIdDismissRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/games/v1/turnbasedmatches/{matchId}/dismiss"
      };
    }
    // Finish a turn-based match. Each player should make this call once, after all results are in. Only the player whose turn it is may make the first call to Finish, and can pass in the final match state.
    rpc PutTurnbasedmatchesMatchIdFinish(PutTurnbasedmatchesMatchIdFinishRequest) returns (TurnBasedMatch) {
      option (google.api.http) = {
        put: "/games/v1/turnbasedmatches/{matchId}/finish"
        body: "body"
      };
    }
    // Join a turn-based match.
    rpc PutTurnbasedmatchesMatchIdJoin(PutTurnbasedmatchesMatchIdJoinRequest) returns (TurnBasedMatch) {
      option (google.api.http) = {
        put: "/games/v1/turnbasedmatches/{matchId}/join"
      };
    }
    // Leave a turn-based match when it is not the current player's turn, without canceling the match.
    rpc PutTurnbasedmatchesMatchIdLeave(PutTurnbasedmatchesMatchIdLeaveRequest) returns (TurnBasedMatch) {
      option (google.api.http) = {
        put: "/games/v1/turnbasedmatches/{matchId}/leave"
      };
    }
    // Leave a turn-based match during the current player's turn, without canceling the match.
    rpc PutTurnbasedmatchesMatchIdLeaveTurn(PutTurnbasedmatchesMatchIdLeaveTurnRequest) returns (TurnBasedMatch) {
      option (google.api.http) = {
        put: "/games/v1/turnbasedmatches/{matchId}/leaveTurn"
      };
    }
    // Create a rematch of a match that was previously completed, with the same participants. This can be called by only one player on a match still in their list; the player must have called Finish first. Returns the newly created match; it will be the caller's turn.
    rpc PostTurnbasedmatchesMatchIdRematch(PostTurnbasedmatchesMatchIdRematchRequest) returns (TurnBasedMatchRematch) {
      option (google.api.http) = {
        post: "/games/v1/turnbasedmatches/{matchId}/rematch"
      };
    }
    // Commit the results of a player turn.
    rpc PutTurnbasedmatchesMatchIdTurn(PutTurnbasedmatchesMatchIdTurnRequest) returns (TurnBasedMatch) {
      option (google.api.http) = {
        put: "/games/v1/turnbasedmatches/{matchId}/turn"
        body: "body"
      };
    }
}

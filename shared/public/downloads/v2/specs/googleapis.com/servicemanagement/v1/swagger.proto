syntax = "proto3";

import "google/protobuf/wrappers.proto";

import "google/protobuf/empty.proto";

import "google/protobuf/any.proto";

import "google/api/annotations.proto";

package googleservicemanagement;

message GetV1OperationsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // A string for filtering Operations.
    //   The following filter fields are supported&#58;
    // 
    //   * serviceName&#58; Required. Only `=` operator is allowed.
    //   * startTime&#58; The time this job was started, in ISO 8601 format.
    //     Allowed operators are `>=`,  `>`, `<=`, and `<`.
    //   * status&#58; Can be `done`, `in_progress`, or `failed`. Allowed
    //     operators are `=`, and `!=`.
    // 
    //   Filter expression supports conjunction (AND) and disjunction (OR)
    //   logical operators. However, the serviceName restriction must be at the
    //   top-level and can only be combined with other restrictions via the AND
    //   logical operator.
    // 
    //   Examples&#58;
    // 
    //   * `serviceName={some-service}.googleapis.com`
    //   * `serviceName={some-service}.googleapis.com AND startTime>="2017-02-01"`
    //   * `serviceName={some-service}.googleapis.com AND status=done`
    //   * `serviceName={some-service}.googleapis.com AND (status=done OR startTime>="2017-02-01")`
    string filter = 7;
    string key = 8;
    // Not used.
    string name = 9;
    string oauth_token = 10;
    // The maximum number of operations to return. If unspecified, defaults to
    // 50. The maximum value is 100.
    int32 pageSize = 11;
    // The standard list page token.
    string pageToken = 12;
    boolean pp = 13;
    boolean prettyPrint = 14;
    string quotaUser = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

message GetV1ServicesRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    // Include services consumed by the specified consumer.
    // 
    // The Google Service Management implementation accepts the following
    // forms:
    // - project:<project_id>
    string consumerId = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    // Requested size of the next page of data.
    int32 pageSize = 10;
    // Token identifying which result to start with; returned by a previous list
    // call.
    string pageToken = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    // Include services produced by the specified project.
    string producerProjectId = 14;
    string quotaUser = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

message PostV1ServicesRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    ManagedService body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message GetV1ServicesServiceNameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    boolean pp = 9;
    boolean prettyPrint = 10;
    string quotaUser = 11;
    // The name of the service.  See the `ServiceManager` overview for naming
    // requirements.  For example: `example.googleapis.com`.
    string serviceName = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message DeleteV1ServicesServiceNameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    boolean pp = 9;
    boolean prettyPrint = 10;
    string quotaUser = 11;
    // The name of the service.  See the [overview](/service-management/overview)
    // for naming requirements.  For example: `example.googleapis.com`.
    string serviceName = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message GetV1ServicesServiceNameConfigRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    // The id of the service configuration resource.
    string configId = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // The name of the service.  See the [overview](/service-management/overview)
    // for naming requirements.  For example: `example.googleapis.com`.
    string serviceName = 13;
    string uploadType = 14;
    string upload_protocol = 15;
    // Specifies which parts of the Service Config should be returned in the
    // response.
    enum GetV1ServicesServiceNameConfigRequest_View {
        GETV1SERVICESSERVICENAMECONFIGREQUEST_VIEW_BASIC = 0;
        GETV1SERVICESSERVICENAMECONFIGREQUEST_VIEW_FULL = 1;
    }
    GetV1ServicesServiceNameConfigRequest_View view = 16;
}

message GetV1ServicesServiceNameConfigsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    // The max number of items to include in the response list.
    int32 pageSize = 9;
    // The token of the page to retrieve.
    string pageToken = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    // The name of the service.  See the [overview](/service-management/overview)
    // for naming requirements.  For example: `example.googleapis.com`.
    string serviceName = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message PostV1ServicesServiceNameConfigsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    Service body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // The name of the service.  See the [overview](/service-management/overview)
    // for naming requirements.  For example: `example.googleapis.com`.
    string serviceName = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1ServicesServiceNameConfigsConfigIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    // The id of the service configuration resource.
    string configId = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // The name of the service.  See the [overview](/service-management/overview)
    // for naming requirements.  For example: `example.googleapis.com`.
    string serviceName = 13;
    string uploadType = 14;
    string upload_protocol = 15;
    // Specifies which parts of the Service Config should be returned in the
    // response.
    enum GetV1ServicesServiceNameConfigsConfigIdRequest_View {
        GETV1SERVICESSERVICENAMECONFIGSCONFIGIDREQUEST_VIEW_BASIC = 0;
        GETV1SERVICESSERVICENAMECONFIGSCONFIGIDREQUEST_VIEW_FULL = 1;
    }
    GetV1ServicesServiceNameConfigsConfigIdRequest_View view = 16;
}

message PostV1ServicesServiceNameConfigs:SubmitRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    SubmitConfigSourceRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // The name of the service.  See the [overview](/service-management/overview)
    // for naming requirements.  For example: `example.googleapis.com`.
    string serviceName = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1ServicesServiceNameRolloutsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // Use `filter` to return subset of rollouts.
    // The following filters are supported:
    //   -- To limit the results to only those in
    //      [status](google.api.servicemanagement.v1.RolloutStatus) 'SUCCESS',
    //      use filter='status=SUCCESS'
    //   -- To limit the results to those in
    //      [status](google.api.servicemanagement.v1.RolloutStatus) 'CANCELLED'
    //      or 'FAILED', use filter='status=CANCELLED OR status=FAILED'
    string filter = 7;
    string key = 8;
    string oauth_token = 9;
    // The max number of items to include in the response list.
    int32 pageSize = 10;
    // The token of the page to retrieve.
    string pageToken = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    // The name of the service.  See the [overview](/service-management/overview)
    // for naming requirements.  For example: `example.googleapis.com`.
    string serviceName = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

message PostV1ServicesServiceNameRolloutsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    Rollout body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // The name of the service.  See the [overview](/service-management/overview)
    // for naming requirements.  For example: `example.googleapis.com`.
    string serviceName = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1ServicesServiceNameRolloutsRolloutIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    boolean pp = 9;
    boolean prettyPrint = 10;
    string quotaUser = 11;
    // The id of the rollout resource.
    string rolloutId = 12;
    // The name of the service.  See the [overview](/service-management/overview)
    // for naming requirements.  For example: `example.googleapis.com`.
    string serviceName = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1ServicesServiceName:DisableRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    DisableServiceRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // Name of the service to disable. Specifying an unknown service name
    // will cause the request to fail.
    string serviceName = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1ServicesServiceName:EnableRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    EnableServiceRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // Name of the service to enable. Specifying an unknown service name will
    // cause the request to fail.
    string serviceName = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1ServicesServiceName:UndeleteRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    boolean pp = 9;
    boolean prettyPrint = 10;
    string quotaUser = 11;
    // The name of the service. See the [overview](/service-management/overview)
    // for naming requirements. For example: `example.googleapis.com`.
    string serviceName = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PostV1Services:GenerateConfigReportRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    GenerateConfigReportRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message GetV1NameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    // The name of the operation resource.
    string name = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PostV1Resource:GetIamPolicyRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    GetIamPolicyRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // REQUIRED: The resource for which the policy is being requested.
    // See the operation documentation for the appropriate value for this field.
    string resource = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1Resource:SetIamPolicyRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    SetIamPolicyRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // REQUIRED: The resource for which the policy is being specified.
    // See the operation documentation for the appropriate value for this field.
    string resource = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1Resource:TestIamPermissionsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    TestIamPermissionsRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // REQUIRED: The resource for which the policy detail is being requested.
    // See the operation documentation for the appropriate value for this field.
    string resource = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

enum $.Xgafv {
    $XGAFV_1 = 0;
    $XGAFV_2 = 1;
}

message Advice {
    // Useful description for why this advice was applied and what actions should
    // be taken to mitigate any implied risks.
    string description = 1;
}

message Api {
    // The methods of this interface, in unspecified order.
    repeated Method methods = 1;
    // Included interfaces. See Mixin.
    repeated Mixin mixins = 2;
    // The fully qualified name of this interface, including package name
    // followed by the interface's simple name.
    string name = 3;
    // Any metadata attached to the interface.
    repeated Option options = 4;
    // Source context for the protocol buffer service represented by this
    // message.
    SourceContext sourceContext = 5;
    // The source syntax of the service.
    enum Api_Syntax {
        API_SYNTAX_SYNTAX_PROTO2 = 0;
        API_SYNTAX_SYNTAX_PROTO3 = 1;
    }
    Api_Syntax syntax = 6;
    // A version string for this interface. If specified, must have the form
    // `major-version.minor-version`, as in `1.10`. If the minor version is
    // omitted, it defaults to zero. If the entire version field is empty, the
    // major version is derived from the package name, as outlined below. If the
    // field is not empty, the version in the package name will be verified to be
    // consistent with what is provided here.
    // 
    // The versioning schema uses [semantic
    // versioning](http://semver.org) where the major version number
    // indicates a breaking change and the minor version an additive,
    // non-breaking change. Both version numbers are signals to users
    // what to expect from different versions, and should be carefully
    // chosen based on the product plan.
    // 
    // The major version is also reflected in the package name of the
    // interface, which must end in `v<major-version>`, as in
    // `google.feature.v1`. For major versions 0 and 1, the suffix can
    // be omitted. Zero major versions must only be used for
    // experimental, non-GA interfaces.
    string version = 7;
}

message AuditConfig {
    // The configuration for logging of each type of permission.
    // Next ID: 4
    repeated AuditLogConfig auditLogConfigs = 1;
    repeated string exemptedMembers = 2;
    // Specifies a service that will be enabled for audit logging.
    // For example, `storage.googleapis.com`, `cloudsql.googleapis.com`.
    // `allServices` is a special value that covers all services.
    string service = 3;
}

message AuditLogConfig {
    // Specifies the identities that do not cause logging for this type of
    // permission.
    // Follows the same format of Binding.members.
    repeated string exemptedMembers = 1;
    // The log type that this config enables.
    enum AuditLogConfig_LogType {
        AUDITLOGCONFIG_LOGTYPE_LOG_TYPE_UNSPECIFIED = 0;
        AUDITLOGCONFIG_LOGTYPE_ADMIN_READ = 1;
        AUDITLOGCONFIG_LOGTYPE_DATA_WRITE = 2;
        AUDITLOGCONFIG_LOGTYPE_DATA_READ = 3;
    }
    AuditLogConfig_LogType logType = 2;
}

message AuthProvider {
    // The list of JWT
    // [audiences](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.3).
    // that are allowed to access. A JWT containing any of these audiences will
    // be accepted. When this setting is absent, only JWTs with audience
    // "https://Service_name/API_name"
    // will be accepted. For example, if no audiences are in the setting,
    // LibraryService API will only accept JWTs with the following audience
    // "https://library-example.googleapis.com/google.example.library.v1.LibraryService".
    // 
    // Example:
    // 
    //     audiences: bookstore_android.apps.googleusercontent.com,
    //                bookstore_web.apps.googleusercontent.com
    string audiences = 1;
    // Redirect URL if JWT token is required but no present or is expired.
    // Implement authorizationUrl of securityDefinitions in OpenAPI spec.
    string authorizationUrl = 2;
    // The unique identifier of the auth provider. It will be referred to by
    // `AuthRequirement.provider_id`.
    // 
    // Example: "bookstore_auth".
    string id = 3;
    // Identifies the principal that issued the JWT. See
    // https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.1
    // Usually a URL or an email address.
    // 
    // Example: https://securetoken.google.com
    // Example: 1234567-compute@developer.gserviceaccount.com
    string issuer = 4;
    // URL of the provider's public key set to validate signature of the JWT. See
    // [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
    // Optional if the key set document:
    //  - can be retrieved from
    //    [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html
    //    of the issuer.
    //  - can be inferred from the email domain of the issuer (e.g. a Google service account).
    // 
    // Example: https://www.googleapis.com/oauth2/v1/certs
    string jwksUri = 5;
}

message AuthRequirement {
    // NOTE: This will be deprecated soon, once AuthProvider.audiences is
    // implemented and accepted in all the runtime components.
    // 
    // The list of JWT
    // [audiences](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.3).
    // that are allowed to access. A JWT containing any of these audiences will
    // be accepted. When this setting is absent, only JWTs with audience
    // "https://Service_name/API_name"
    // will be accepted. For example, if no audiences are in the setting,
    // LibraryService API will only accept JWTs with the following audience
    // "https://library-example.googleapis.com/google.example.library.v1.LibraryService".
    // 
    // Example:
    // 
    //     audiences: bookstore_android.apps.googleusercontent.com,
    //                bookstore_web.apps.googleusercontent.com
    string audiences = 1;
    // id from authentication provider.
    // 
    // Example:
    // 
    //     provider_id: bookstore_auth
    string providerId = 2;
}

message Authentication {
    // Defines a set of authentication providers that a service supports.
    repeated AuthProvider providers = 1;
    // A list of authentication rules that apply to individual API methods.
    // 
    // **NOTE:** All service configuration rules follow "last one wins" order.
    repeated AuthenticationRule rules = 2;
}

message AuthenticationRule {
    // Whether to allow requests without a credential. The credential can be
    // an OAuth token, Google cookies (first-party auth) or EndUserCreds.
    // 
    // For requests without credentials, if the service control environment is
    // specified, each incoming request **must** be associated with a service
    // consumer. This can be done by passing an API key that belongs to a consumer
    // project.
    bool allowWithoutCredential = 1;
    // Configuration for custom authentication.
    CustomAuthRequirements customAuth = 2;
    // The requirements for OAuth credentials.
    OAuthRequirements oauth = 3;
    // Requirements for additional authentication providers.
    repeated AuthRequirement requirements = 4;
    // Selects the methods to which this rule applies.
    // 
    // Refer to selector for syntax details.
    string selector = 5;
}

message AuthorizationConfig {
    // The name of the authorization provider, such as
    // firebaserules.googleapis.com.
    string provider = 1;
}

message Backend {
    // A list of API backend rules that apply to individual API methods.
    // 
    // **NOTE:** All service configuration rules follow "last one wins" order.
    repeated BackendRule rules = 1;
}

message BackendRule {
    // The address of the API backend.
    string address = 1;
    // The number of seconds to wait for a response from a request.  The default
    // deadline for gRPC is infinite (no deadline) and HTTP requests is 5 seconds.
    double deadline = 2;
    // Minimum deadline in seconds needed for this method. Calls having deadline
    // value lower than this will be rejected.
    double minDeadline = 3;
    // Selects the methods to which this rule applies.
    // 
    // Refer to selector for syntax details.
    string selector = 4;
}

message Billing {
    // Billing configurations for sending metrics to the consumer project.
    // There can be multiple consumer destinations per service, each one must have
    // a different monitored resource type. A metric can be used in at most
    // one consumer destination.
    repeated BillingDestination consumerDestinations = 1;
}

message BillingDestination {
    // Names of the metrics to report to this billing destination.
    // Each name must be defined in Service.metrics section.
    repeated string metrics = 1;
    // The monitored resource type. The type must be defined in
    // Service.monitored_resources section.
    string monitoredResource = 2;
}

message Binding {
    // The condition that is associated with this binding.
    // NOTE: an unsatisfied condition will not allow user access via current
    // binding. Different bindings, including their conditions, are examined
    // independently.
    // This field is GOOGLE_INTERNAL.
    Expr condition = 1;
    // Specifies the identities requesting access for a Cloud Platform resource.
    // `members` can have the following values:
    // 
    // * `allUsers`: A special identifier that represents anyone who is
    //    on the internet; with or without a Google account.
    // 
    // * `allAuthenticatedUsers`: A special identifier that represents anyone
    //    who is authenticated with a Google account or a service account.
    // 
    // * `user:{emailid}`: An email address that represents a specific Google
    //    account. For example, `alice@gmail.com` or `joe@example.com`.
    // 
    // 
    // * `serviceAccount:{emailid}`: An email address that represents a service
    //    account. For example, `my-other-app@appspot.gserviceaccount.com`.
    // 
    // * `group:{emailid}`: An email address that represents a Google group.
    //    For example, `admins@example.com`.
    // 
    // 
    // * `domain:{domain}`: A Google Apps domain name that represents all the
    //    users of that domain. For example, `google.com` or `example.com`.
    // 
    repeated string members = 2;
    // Role that is assigned to `members`.
    // For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
    // Required
    string role = 3;
}

message ChangeReport {
    // List of changes between two service configurations.
    // The changes will be alphabetically sorted based on the identifier
    // of each change.
    // A ConfigChange identifier is a dot separated path to the configuration.
    // Example: visibility.rules[selector='LibraryService.CreateBook'].restriction
    repeated ConfigChange configChanges = 1;
}

message ConfigChange {
    // Collection of advice provided for this change, useful for determining the
    // possible impact of this change.
    repeated Advice advices = 1;
    // The type for this change, either ADDED, REMOVED, or MODIFIED.
    enum ConfigChange_ChangeType {
        CONFIGCHANGE_CHANGETYPE_CHANGE_TYPE_UNSPECIFIED = 0;
        CONFIGCHANGE_CHANGETYPE_ADDED = 1;
        CONFIGCHANGE_CHANGETYPE_REMOVED = 2;
        CONFIGCHANGE_CHANGETYPE_MODIFIED = 3;
    }
    ConfigChange_ChangeType changeType = 2;
    // Object hierarchy path to the change, with levels separated by a '.'
    // character. For repeated fields, an applicable unique identifier field is
    // used for the index (usually selector, name, or id). For maps, the term
    // 'key' is used. If the field has no unique identifier, the numeric index
    // is used.
    // Examples:
    // - visibility.rules[selector=="google.LibraryService.CreateBook"].restriction
    // - quota.metric_rules[selector=="google"].metric_costs[key=="reads"].value
    // - logging.producer_destinations[0]
    string element = 3;
    // Value of the changed object in the new Service configuration,
    // in JSON format. This field will not be populated if ChangeType == REMOVED.
    string newValue = 4;
    // Value of the changed object in the old Service configuration,
    // in JSON format. This field will not be populated if ChangeType == ADDED.
    string oldValue = 5;
}

message ConfigFile {
    // The bytes that constitute the file.
    string fileContents = 1;
    // The file name of the configuration file (full or relative path).
    string filePath = 2;
    // The type of configuration file this represents.
    enum ConfigFile_FileType {
        CONFIGFILE_FILETYPE_FILE_TYPE_UNSPECIFIED = 0;
        CONFIGFILE_FILETYPE_SERVICE_CONFIG_YAML = 1;
        CONFIGFILE_FILETYPE_OPEN_API_JSON = 2;
        CONFIGFILE_FILETYPE_OPEN_API_YAML = 3;
        CONFIGFILE_FILETYPE_FILE_DESCRIPTOR_SET_PROTO = 4;
        CONFIGFILE_FILETYPE_PROTO_FILE = 5;
    }
    ConfigFile_FileType fileType = 3;
}

message ConfigRef {
    // Resource name of a service config. It must have the following
    // format: "services/{service name}/configs/{config id}".
    string name = 1;
}

message ConfigSource {
    // Set of source configuration files that are used to generate a service
    // configuration (`google.api.Service`).
    repeated ConfigFile files = 1;
    // A unique ID for a specific instance of this message, typically assigned
    // by the client for tracking purpose. If empty, the server may choose to
    // generate one instead.
    string id = 2;
}

message Context {
    // A list of RPC context rules that apply to individual API methods.
    // 
    // **NOTE:** All service configuration rules follow "last one wins" order.
    repeated ContextRule rules = 1;
}

message ContextRule {
    // A list of full type names of provided contexts.
    repeated string provided = 1;
    // A list of full type names of requested contexts.
    repeated string requested = 2;
    // Selects the methods to which this rule applies.
    // 
    // Refer to selector for syntax details.
    string selector = 3;
}

message Control {
    // The service control environment to use. If empty, no control plane
    // feature (like quota and billing) will be enabled.
    string environment = 1;
}

message CustomAuthRequirements {
    // A configuration string containing connection information for the
    // authentication provider, typically formatted as a SmartService string
    // (go/smartservice).
    string provider = 1;
}

message CustomError {
    // The list of custom error rules that apply to individual API messages.
    // 
    // **NOTE:** All service configuration rules follow "last one wins" order.
    repeated CustomErrorRule rules = 1;
    // The list of custom error detail types, e.g. 'google.foo.v1.CustomError'.
    repeated string types = 2;
}

message CustomErrorRule {
    // Mark this message as possible payload in error response.  Otherwise,
    // objects of this type will be filtered when they appear in error payload.
    bool isErrorType = 1;
    // Selects messages to which this rule applies.
    // 
    // Refer to selector for syntax details.
    string selector = 2;
}

message CustomHttpPattern {
    // The name of this custom HTTP verb.
    string kind = 1;
    // The path matched by this custom verb.
    string path = 2;
}

message DeleteServiceStrategy {
}

message Diagnostic {
    // The kind of diagnostic information provided.
    enum Diagnostic_Kind {
        DIAGNOSTIC_KIND_WARNING = 0;
        DIAGNOSTIC_KIND_ERROR = 1;
    }
    Diagnostic_Kind kind = 1;
    // File name and line number of the error or warning.
    string location = 2;
    // Message describing the error or warning.
    string message = 3;
}

message DisableServiceRequest {
    // The identity of consumer resource which service disablement will be
    // applied to.
    // 
    // The Google Service Management implementation accepts the following
    // forms:
    // - "project:<project_id>"
    // 
    // Note: this is made compatible with
    // google.api.servicecontrol.v1.Operation.consumer_id.
    string consumerId = 1;
}

message Documentation {
    // The URL to the root of documentation.
    string documentationRootUrl = 1;
    // Declares a single overview page. For example:
    // <pre><code>documentation:
    //   summary: ...
    //   overview: &#40;== include overview.md ==&#41;
    // </code></pre>
    // This is a shortcut for the following declaration (using pages style):
    // <pre><code>documentation:
    //   summary: ...
    //   pages:
    //   - name: Overview
    //     content: &#40;== include overview.md ==&#41;
    // </code></pre>
    // Note: you cannot specify both `overview` field and `pages` field.
    string overview = 2;
    // The top level pages for the documentation set.
    repeated Page pages = 3;
    // A list of documentation rules that apply to individual API elements.
    // 
    // **NOTE:** All service configuration rules follow "last one wins" order.
    repeated DocumentationRule rules = 4;
    // A short summary of what the service does. Can only be provided by
    // plain text.
    string summary = 5;
}

message DocumentationRule {
    // Deprecation description of the selected element(s). It can be provided if an
    // element is marked as `deprecated`.
    string deprecationDescription = 1;
    // Description of the selected API(s).
    string description = 2;
    // The selector is a comma-separated list of patterns. Each pattern is a
    // qualified name of the element which may end in "*", indicating a wildcard.
    // Wildcards are only allowed at the end and for a whole component of the
    // qualified name, i.e. "foo.*" is ok, but not "foo.b*" or "foo.*.bar". To
    // specify a default for all applicable elements, the whole pattern "*"
    // is used.
    string selector = 3;
}

message EnableServiceRequest {
    // The identity of consumer resource which service enablement will be
    // applied to.
    // 
    // The Google Service Management implementation accepts the following
    // forms:
    // - "project:<project_id>"
    // 
    // Note: this is made compatible with
    // google.api.servicecontrol.v1.Operation.consumer_id.
    string consumerId = 1;
}

message Endpoint {
    // DEPRECATED: This field is no longer supported. Instead of using aliases,
    // please specify multiple google.api.Endpoint for each of the intented
    // alias.
    // 
    // Additional names that this endpoint will be hosted on.
    repeated string aliases = 1;
    // Allowing
    // [CORS](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing), aka
    // cross-domain traffic, would allow the backends served from this endpoint to
    // receive and respond to HTTP OPTIONS requests. The response will be used by
    // the browser to determine whether the subsequent cross-origin request is
    // allowed to proceed.
    bool allowCors = 2;
    // The list of APIs served by this endpoint.
    // 
    // If no APIs are specified this translates to "all APIs" exported by the
    // service, as defined in the top-level service configuration.
    repeated string apis = 3;
    // The list of features enabled on this endpoint.
    repeated string features = 4;
    // The canonical name of this endpoint.
    string name = 5;
    // The specification of an Internet routable address of API frontend that will
    // handle requests to this [API Endpoint](https://cloud.google.com/apis/design/glossary).
    // It should be either a valid IPv4 address or a fully-qualified domain name.
    // For example, "8.8.8.8" or "myservice.appspot.com".
    string target = 6;
}

message Enum {
    // Enum value definitions.
    repeated EnumValue enumvalue = 1;
    // Enum type name.
    string name = 2;
    // Protocol buffer options.
    repeated Option options = 3;
    // The source context.
    SourceContext sourceContext = 4;
    // The source syntax.
    enum Enum_Syntax {
        ENUM_SYNTAX_SYNTAX_PROTO2 = 0;
        ENUM_SYNTAX_SYNTAX_PROTO3 = 1;
    }
    Enum_Syntax syntax = 5;
}

message EnumValue {
    // Enum value name.
    string name = 1;
    // Enum value number.
    int32 number = 2;
    // Protocol buffer options.
    repeated Option options = 3;
}

message Experimental {
    // Authorization configuration.
    AuthorizationConfig authorization = 1;
}

message Expr {
    // An optional description of the expression. This is a longer text which
    // describes the expression, e.g. when hovered over it in a UI.
    string description = 1;
    // Textual representation of an expression in
    // Common Expression Language syntax.
    // 
    // The application context of the containing message determines which
    // well-known feature set of CEL is supported.
    string expression = 2;
    // An optional string indicating the location of the expression for error
    // reporting, e.g. a file name and a position in the file.
    string location = 3;
    // An optional title for the expression, i.e. a short string describing
    // its purpose. This can be used e.g. in UIs which allow to enter the
    // expression.
    string title = 4;
}

message Field {
    // The field cardinality.
    enum Field_Cardinality {
        FIELD_CARDINALITY_CARDINALITY_UNKNOWN = 0;
        FIELD_CARDINALITY_CARDINALITY_OPTIONAL = 1;
        FIELD_CARDINALITY_CARDINALITY_REQUIRED = 2;
        FIELD_CARDINALITY_CARDINALITY_REPEATED = 3;
    }
    Field_Cardinality cardinality = 1;
    // The string value of the default value of this field. Proto2 syntax only.
    string defaultValue = 2;
    // The field JSON name.
    string jsonName = 3;
    // The field type.
    enum Field_Kind {
        FIELD_KIND_TYPE_UNKNOWN = 0;
        FIELD_KIND_TYPE_DOUBLE = 1;
        FIELD_KIND_TYPE_FLOAT = 2;
        FIELD_KIND_TYPE_INT64 = 3;
        FIELD_KIND_TYPE_UINT64 = 4;
        FIELD_KIND_TYPE_INT32 = 5;
        FIELD_KIND_TYPE_FIXED64 = 6;
        FIELD_KIND_TYPE_FIXED32 = 7;
        FIELD_KIND_TYPE_BOOL = 8;
        FIELD_KIND_TYPE_STRING = 9;
        FIELD_KIND_TYPE_GROUP = 10;
        FIELD_KIND_TYPE_MESSAGE = 11;
        FIELD_KIND_TYPE_BYTES = 12;
        FIELD_KIND_TYPE_UINT32 = 13;
        FIELD_KIND_TYPE_ENUM = 14;
        FIELD_KIND_TYPE_SFIXED32 = 15;
        FIELD_KIND_TYPE_SFIXED64 = 16;
        FIELD_KIND_TYPE_SINT32 = 17;
        FIELD_KIND_TYPE_SINT64 = 18;
    }
    Field_Kind kind = 4;
    // The field name.
    string name = 5;
    // The field number.
    int32 number = 6;
    // The index of the field type in `Type.oneofs`, for message or enumeration
    // types. The first type has index 1; zero means the type is not in the list.
    int32 oneofIndex = 7;
    // The protocol buffer options.
    repeated Option options = 8;
    // Whether to use alternative packed wire representation.
    bool packed = 9;
    // The field type URL, without the scheme, for message or enumeration
    // types. Example: `"type.googleapis.com/google.protobuf.Timestamp"`.
    string typeUrl = 10;
}

message FlowOperationMetadata {
    // The state of the operation with respect to cancellation.
    enum FlowOperationMetadata_CancelState {
        FLOWOPERATIONMETADATA_CANCELSTATE_RUNNING = 0;
        FLOWOPERATIONMETADATA_CANCELSTATE_UNCANCELLABLE = 1;
        FLOWOPERATIONMETADATA_CANCELSTATE_CANCELLED = 2;
    }
    FlowOperationMetadata_CancelState cancelState = 1;
    // Deadline for the flow to complete, to prevent orphaned Operations.
    // 
    // If the flow has not completed by this time, it may be terminated by
    // the engine, or force-failed by Operation lookup.
    // 
    // Note that this is not a hard deadline after which the Flow will
    // definitely be failed, rather it is a deadline after which it is reasonable
    // to suspect a problem and other parts of the system may kill operation
    // to ensure we don't have orphans.
    // see also: go/prevent-orphaned-operations
    string deadline = 2;
    // The name of the top-level flow corresponding to this operation.
    // Must be equal to the "name" field for a FlowName enum.
    string flowName = 3;
    // Operation type which is a flow type and subtype info as that is missing in
    // our datastore otherwise. This maps to the ordinal value of the enum:
    // jcg/api/tenant/operations/OperationNamespace.java
    int32 operationType = 4;
    // The full name of the resources that this flow is directly associated with.
    repeated string resourceNames = 5;
    // The start time of the operation.
    string startTime = 6;
    enum FlowOperationMetadata_Surface {
        FLOWOPERATIONMETADATA_SURFACE_UNSPECIFIED_OP_SERVICE = 0;
        FLOWOPERATIONMETADATA_SURFACE_SERVICE_MANAGEMENT = 1;
        FLOWOPERATIONMETADATA_SURFACE_SERVICE_USAGE = 2;
        FLOWOPERATIONMETADATA_SURFACE_SERVICE_CONSUMER_MANAGEMENT = 3;
    }
    FlowOperationMetadata_Surface surface = 7;
}

message GenerateConfigReportRequest {
    // Service configuration for which we want to generate the report.
    // For this version of API, the supported types are
    // google.api.servicemanagement.v1.ConfigRef,
    // google.api.servicemanagement.v1.ConfigSource,
    // and google.api.Service
    map<string, > newConfig = 1;
    // Service configuration against which the comparison will be done.
    // For this version of API, the supported types are
    // google.api.servicemanagement.v1.ConfigRef,
    // google.api.servicemanagement.v1.ConfigSource,
    // and google.api.Service
    map<string, > oldConfig = 2;
}

message GenerateConfigReportResponse {
    // list of ChangeReport, each corresponding to comparison between two
    // service configurations.
    repeated ChangeReport changeReports = 1;
    // Errors / Linter warnings associated with the service definition this
    // report
    // belongs to.
    repeated Diagnostic diagnostics = 2;
    // ID of the service configuration this report belongs to.
    string id = 3;
    // Name of the service this report belongs to.
    string serviceName = 4;
}

message GetIamPolicyRequest {
}

message Http {
    // When set to true, URL path parmeters will be fully URI-decoded except in
    // cases of single segment matches in reserved expansion, where "%2F" will be
    // left encoded.
    // 
    // The default behavior is to not decode RFC 6570 reserved characters in multi
    // segment matches.
    bool fullyDecodeReservedExpansion = 1;
    // A list of HTTP configuration rules that apply to individual API methods.
    // 
    // **NOTE:** All service configuration rules follow "last one wins" order.
    repeated HttpRule rules = 2;
}

message HttpRule {
    // Additional HTTP bindings for the selector. Nested bindings must
    // not contain an `additional_bindings` field themselves (that is,
    // the nesting may only be one level deep).
    repeated HttpRule additionalBindings = 1;
    // The name of the request field whose value is mapped to the HTTP body, or
    // `*` for mapping all fields not captured by the path pattern to the HTTP
    // body. NOTE: the referred field must not be a repeated field and must be
    // present at the top-level of request message type.
    string body = 2;
    // The custom pattern is used for specifying an HTTP method that is not
    // included in the `pattern` field, such as HEAD, or "*" to leave the
    // HTTP method unspecified for this rule. The wild-card rule is useful
    // for services that provide content to Web (HTML) clients.
    CustomHttpPattern custom = 3;
    // Used for deleting a resource.
    string delete = 4;
    // Used for listing and getting information about resources.
    string get = 5;
    // Use this only for Scotty Requests. Do not use this for bytestream methods.
    // For media support, add instead [][google.bytestream.RestByteStream] as an
    // API to your configuration.
    MediaDownload mediaDownload = 6;
    // Use this only for Scotty Requests. Do not use this for media support using
    // Bytestream, add instead
    // [][google.bytestream.RestByteStream] as an API to your
    // configuration for Bytestream methods.
    MediaUpload mediaUpload = 7;
    // Used for updating a resource.
    string patch = 8;
    // Used for creating a resource.
    string post = 9;
    // Used for updating a resource.
    string put = 10;
    // The name of the response field whose value is mapped to the HTTP body of
    // response. Other response fields are ignored. This field is optional. When
    // not set, the response message will be used as HTTP body of response.
    // NOTE: the referred field must be not a repeated field and must be present
    // at the top-level of response message type.
    string responseBody = 11;
    // Selects methods to which this rule applies.
    // 
    // Refer to selector for syntax details.
    string selector = 12;
}

message LabelDescriptor {
    // A human-readable description for the label.
    string description = 1;
    // The label key.
    string key = 2;
    // The type of data that can be assigned to the label.
    enum LabelDescriptor_ValueType {
        LABELDESCRIPTOR_VALUETYPE_STRING = 0;
        LABELDESCRIPTOR_VALUETYPE_BOOL = 1;
        LABELDESCRIPTOR_VALUETYPE_INT64 = 2;
    }
    LabelDescriptor_ValueType valueType = 3;
}

message ListOperationsResponse {
    // The standard List next-page token.
    string nextPageToken = 1;
    // A list of operations that matches the specified filter in the request.
    repeated Operation operations = 2;
}

message ListServiceConfigsResponse {
    // The token of the next page of results.
    string nextPageToken = 1;
    // The list of service configuration resources.
    repeated Service serviceConfigs = 2;
}

message ListServiceRolloutsResponse {
    // The token of the next page of results.
    string nextPageToken = 1;
    // The list of rollout resources.
    repeated Rollout rollouts = 2;
}

message ListServicesResponse {
    // Token that can be passed to `ListServices` to resume a paginated query.
    string nextPageToken = 1;
    // The returned services will only have the name field set.
    repeated ManagedService services = 2;
}

message LogDescriptor {
    // A human-readable description of this log. This information appears in
    // the documentation and can contain details.
    string description = 1;
    // The human-readable name for this log. This information appears on
    // the user interface and should be concise.
    string displayName = 2;
    // The set of labels that are available to describe a specific log entry.
    // Runtime requests that contain labels not specified here are
    // considered invalid.
    repeated LabelDescriptor labels = 3;
    // The name of the log. It must be less than 512 characters long and can
    // include the following characters: upper- and lower-case alphanumeric
    // characters [A-Za-z0-9], and punctuation characters including
    // slash, underscore, hyphen, period [/_-.].
    string name = 4;
}

message Logging {
    // Logging configurations for sending logs to the consumer project.
    // There can be multiple consumer destinations, each one must have a
    // different monitored resource type. A log can be used in at most
    // one consumer destination.
    repeated LoggingDestination consumerDestinations = 1;
    // Logging configurations for sending logs to the producer project.
    // There can be multiple producer destinations, each one must have a
    // different monitored resource type. A log can be used in at most
    // one producer destination.
    repeated LoggingDestination producerDestinations = 2;
}

message LoggingDestination {
    // Names of the logs to be sent to this destination. Each name must
    // be defined in the Service.logs section. If the log name is
    // not a domain scoped name, it will be automatically prefixed with
    // the service name followed by "/".
    repeated string logs = 1;
    // The monitored resource type. The type must be defined in the
    // Service.monitored_resources section.
    string monitoredResource = 2;
}

message ManagedService {
    // ID of the project that produces and owns this service.
    string producerProjectId = 1;
    // The name of the service. See the [overview](/service-management/overview)
    // for naming requirements.
    string serviceName = 2;
}

message MediaDownload {
    // A boolean that determines whether a notification for the completion of a
    // download should be sent to the backend.
    bool completeNotification = 1;
    // DO NOT USE FIELDS BELOW THIS LINE UNTIL THIS WARNING IS REMOVED.
    // 
    // Specify name of the download service if one is used for download.
    string downloadService = 2;
    // Name of the Scotty dropzone to use for the current API.
    string dropzone = 3;
    // Whether download is enabled.
    bool enabled = 4;
    // Optional maximum acceptable size for direct download.
    // The size is specified in bytes.
    string maxDirectDownloadSize = 5;
    // A boolean that determines if direct download from ESF should be used for
    // download of this media.
    bool useDirectDownload = 6;
}

message MediaUpload {
    // A boolean that determines whether a notification for the completion of an
    // upload should be sent to the backend. These notifications will not be seen
    // by the client and will not consume quota.
    bool completeNotification = 1;
    // Name of the Scotty dropzone to use for the current API.
    string dropzone = 2;
    // Whether upload is enabled.
    bool enabled = 3;
    // Optional maximum acceptable size for an upload.
    // The size is specified in bytes.
    string maxSize = 4;
    // An array of mimetype patterns. Esf will only accept uploads that match one
    // of the given patterns.
    repeated string mimeTypes = 5;
    // Whether to receive a notification for progress changes of media upload.
    bool progressNotification = 6;
    // Whether to receive a notification on the start of media upload.
    bool startNotification = 7;
    // DO NOT USE FIELDS BELOW THIS LINE UNTIL THIS WARNING IS REMOVED.
    // 
    // Specify name of the upload service if one is used for upload.
    string uploadService = 8;
}

message Method {
    // The simple name of this method.
    string name = 1;
    // Any metadata attached to the method.
    repeated Option options = 2;
    // If true, the request is streamed.
    bool requestStreaming = 3;
    // A URL of the input message type.
    string requestTypeUrl = 4;
    // If true, the response is streamed.
    bool responseStreaming = 5;
    // The URL of the output message type.
    string responseTypeUrl = 6;
    // The source syntax of this method.
    enum Method_Syntax {
        METHOD_SYNTAX_SYNTAX_PROTO2 = 0;
        METHOD_SYNTAX_SYNTAX_PROTO3 = 1;
    }
    Method_Syntax syntax = 7;
}

message MetricDescriptor {
    // A detailed description of the metric, which can be used in documentation.
    string description = 1;
    // A concise name for the metric, which can be displayed in user interfaces.
    // Use sentence case without an ending period, for example "Request count".
    string displayName = 2;
    // The set of labels that can be used to describe a specific
    // instance of this metric type. For example, the
    // `appengine.googleapis.com/http/server/response_latencies` metric
    // type has a label for the HTTP response code, `response_code`, so
    // you can look at latencies for successful responses or just
    // for responses that failed.
    repeated LabelDescriptor labels = 3;
    // Whether the metric records instantaneous values, changes to a value, etc.
    // Some combinations of `metric_kind` and `value_type` might not be supported.
    enum MetricDescriptor_MetricKind {
        METRICDESCRIPTOR_METRICKIND_METRIC_KIND_UNSPECIFIED = 0;
        METRICDESCRIPTOR_METRICKIND_GAUGE = 1;
        METRICDESCRIPTOR_METRICKIND_DELTA = 2;
        METRICDESCRIPTOR_METRICKIND_CUMULATIVE = 3;
    }
    MetricDescriptor_MetricKind metricKind = 4;
    // The resource name of the metric descriptor. Depending on the
    // implementation, the name typically includes: (1) the parent resource name
    // that defines the scope of the metric type or of its data; and (2) the
    // metric's URL-encoded type, which also appears in the `type` field of this
    // descriptor. For example, following is the resource name of a custom
    // metric within the GCP project `my-project-id`:
    // 
    //     "projects/my-project-id/metricDescriptors/custom.googleapis.com%2Finvoice%2Fpaid%2Famount"
    string name = 5;
    // The metric type, including its DNS name prefix. The type is not
    // URL-encoded.  All user-defined custom metric types have the DNS name
    // `custom.googleapis.com`.  Metric types should use a natural hierarchical
    // grouping. For example:
    // 
    //     "custom.googleapis.com/invoice/paid/amount"
    //     "appengine.googleapis.com/http/server/response_latencies"
    string type = 6;
    // The unit in which the metric value is reported. It is only applicable
    // if the `value_type` is `INT64`, `DOUBLE`, or `DISTRIBUTION`. The
    // supported units are a subset of [The Unified Code for Units of
    // Measure](http://unitsofmeasure.org/ucum.html) standard:
    // 
    // **Basic units (UNIT)**
    // 
    // * `bit`   bit
    // * `By`    byte
    // * `s`     second
    // * `min`   minute
    // * `h`     hour
    // * `d`     day
    // 
    // **Prefixes (PREFIX)**
    // 
    // * `k`     kilo    (10**3)
    // * `M`     mega    (10**6)
    // * `G`     giga    (10**9)
    // * `T`     tera    (10**12)
    // * `P`     peta    (10**15)
    // * `E`     exa     (10**18)
    // * `Z`     zetta   (10**21)
    // * `Y`     yotta   (10**24)
    // * `m`     milli   (10**-3)
    // * `u`     micro   (10**-6)
    // * `n`     nano    (10**-9)
    // * `p`     pico    (10**-12)
    // * `f`     femto   (10**-15)
    // * `a`     atto    (10**-18)
    // * `z`     zepto   (10**-21)
    // * `y`     yocto   (10**-24)
    // * `Ki`    kibi    (2**10)
    // * `Mi`    mebi    (2**20)
    // * `Gi`    gibi    (2**30)
    // * `Ti`    tebi    (2**40)
    // 
    // **Grammar**
    // 
    // The grammar includes the dimensionless unit `1`, such as `1/s`.
    // 
    // The grammar also includes these connectors:
    // 
    // * `/`    division (as an infix operator, e.g. `1/s`).
    // * `.`    multiplication (as an infix operator, e.g. `GBy.d`)
    // 
    // The grammar for a unit is as follows:
    // 
    //     Expression = Component { "." Component } { "/" Component } ;
    // 
    //     Component = [ PREFIX ] UNIT [ Annotation ]
    //               | Annotation
    //               | "1"
    //               ;
    // 
    //     Annotation = "{" NAME "}" ;
    // 
    // Notes:
    // 
    // * `Annotation` is just a comment if it follows a `UNIT` and is
    //    equivalent to `1` if it is used alone. For examples,
    //    `{requests}/s == 1/s`, `By{transmitted}/s == By/s`.
    // * `NAME` is a sequence of non-blank printable ASCII characters not
    //    containing '{' or '}'.
    string unit = 7;
    // Whether the measurement is an integer, a floating-point number, etc.
    // Some combinations of `metric_kind` and `value_type` might not be supported.
    enum MetricDescriptor_ValueType {
        METRICDESCRIPTOR_VALUETYPE_VALUE_TYPE_UNSPECIFIED = 0;
        METRICDESCRIPTOR_VALUETYPE_BOOL = 1;
        METRICDESCRIPTOR_VALUETYPE_INT64 = 2;
        METRICDESCRIPTOR_VALUETYPE_DOUBLE = 3;
        METRICDESCRIPTOR_VALUETYPE_STRING = 4;
        METRICDESCRIPTOR_VALUETYPE_DISTRIBUTION = 5;
        METRICDESCRIPTOR_VALUETYPE_MONEY = 6;
    }
    MetricDescriptor_ValueType valueType = 8;
}

message MetricRule {
    // Metrics to update when the selected methods are called, and the associated
    // cost applied to each metric.
    // 
    // The key of the map is the metric name, and the values are the amount
    // increased for the metric against which the quota limits are defined.
    // The value must not be negative.
    map<string, string> metricCosts = 1;
    // Selects the methods to which this rule applies.
    // 
    // Refer to selector for syntax details.
    string selector = 2;
}

message Mixin {
    // The fully qualified name of the interface which is included.
    string name = 1;
    // If non-empty specifies a path under which inherited HTTP paths
    // are rooted.
    string root = 2;
}

message MonitoredResourceDescriptor {
    // Optional. A detailed description of the monitored resource type that might
    // be used in documentation.
    string description = 1;
    // Optional. A concise name for the monitored resource type that might be
    // displayed in user interfaces. It should be a Title Cased Noun Phrase,
    // without any article or other determiners. For example,
    // `"Google Cloud SQL Database"`.
    string displayName = 2;
    // Required. A set of labels used to describe instances of this monitored
    // resource type. For example, an individual Google Cloud SQL database is
    // identified by values for the labels `"database_id"` and `"zone"`.
    repeated LabelDescriptor labels = 3;
    // Optional. The resource name of the monitored resource descriptor:
    // `"projects/{project_id}/monitoredResourceDescriptors/{type}"` where
    // {type} is the value of the `type` field in this object and
    // {project_id} is a project ID that provides API-specific context for
    // accessing the type.  APIs that do not use project information can use the
    // resource name format `"monitoredResourceDescriptors/{type}"`.
    string name = 4;
    // Required. The monitored resource type. For example, the type
    // `"cloudsql_database"` represents databases in Google Cloud SQL.
    // The maximum length of this value is 256 characters.
    string type = 5;
}

message Monitoring {
    // Monitoring configurations for sending metrics to the consumer project.
    // There can be multiple consumer destinations, each one must have a
    // different monitored resource type. A metric can be used in at most
    // one consumer destination.
    repeated MonitoringDestination consumerDestinations = 1;
    // Monitoring configurations for sending metrics to the producer project.
    // There can be multiple producer destinations, each one must have a
    // different monitored resource type. A metric can be used in at most
    // one producer destination.
    repeated MonitoringDestination producerDestinations = 2;
}

message MonitoringDestination {
    // Names of the metrics to report to this monitoring destination.
    // Each name must be defined in Service.metrics section.
    repeated string metrics = 1;
    // The monitored resource type. The type must be defined in
    // Service.monitored_resources section.
    string monitoredResource = 2;
}

message OAuthRequirements {
    // The list of publicly documented OAuth scopes that are allowed access. An
    // OAuth token containing any of these scopes will be accepted.
    // 
    // Example:
    // 
    //      canonical_scopes: https://www.googleapis.com/auth/calendar,
    //                        https://www.googleapis.com/auth/calendar.read
    string canonicalScopes = 1;
}

message Operation {
    // If the value is `false`, it means the operation is still in progress.
    // If `true`, the operation is completed, and either `error` or `response` is
    // available.
    bool done = 1;
    // The error result of the operation in case of failure or cancellation.
    Status error = 2;
    // Service-specific metadata associated with the operation.  It typically
    // contains progress information and common metadata such as create time.
    // Some services might not provide such metadata.  Any method that returns a
    // long-running operation should document the metadata type, if any.
    map<string, > metadata = 3;
    // The server-assigned name, which is only unique within the same service that
    // originally returns it. If you use the default HTTP mapping, the
    // `name` should have the format of `operations/some/unique/name`.
    string name = 4;
    // The normal response of the operation in case of success.  If the original
    // method returns no data on success, such as `Delete`, the response is
    // `google.protobuf.Empty`.  If the original method is standard
    // `Get`/`Create`/`Update`, the response should be the resource.  For other
    // methods, the response should have the type `XxxResponse`, where `Xxx`
    // is the original method name.  For example, if the original method name
    // is `TakeSnapshot()`, the inferred response type is
    // `TakeSnapshotResponse`.
    map<string, > response = 5;
}

message OperationMetadata {
    // Percentage of completion of this operation, ranging from 0 to 100.
    int32 progressPercentage = 1;
    // The full name of the resources that this operation is directly
    // associated with.
    repeated string resourceNames = 2;
    // The start time of the operation.
    string startTime = 3;
    // Detailed status information for each step. The order is undetermined.
    repeated Step steps = 4;
}

message Option {
    // The option's name. For protobuf built-in options (options defined in
    // descriptor.proto), this is the short name. For example, `"map_entry"`.
    // For custom options, it should be the fully-qualified name. For example,
    // `"google.api.http"`.
    string name = 1;
    // The option's value packed in an Any message. If the value is a primitive,
    // the corresponding wrapper type defined in google/protobuf/wrappers.proto
    // should be used. If the value is an enum, it should be stored as an int32
    // value using the google.protobuf.Int32Value type.
    map<string, > value = 2;
}

message Page {
    // The Markdown content of the page. You can use <code>&#40;== include {path} ==&#41;</code>
    // to include content from a Markdown file.
    string content = 1;
    // The name of the page. It will be used as an identity of the page to
    // generate URI of the page, text of the link to this page in navigation,
    // etc. The full page name (start from the root page name to this page
    // concatenated with `.`) can be used as reference to the page in your
    // documentation. For example:
    // <pre><code>pages:
    // - name: Tutorial
    //   content: &#40;== include tutorial.md ==&#41;
    //   subpages:
    //   - name: Java
    //     content: &#40;== include tutorial_java.md ==&#41;
    // </code></pre>
    // You can reference `Java` page using Markdown reference link syntax:
    // `Java`.
    string name = 2;
    // Subpages of this page. The order of subpages specified here will be
    // honored in the generated docset.
    repeated Page subpages = 3;
}

message Policy {
    // Specifies cloud audit logging configuration for this policy.
    repeated AuditConfig auditConfigs = 1;
    // Associates a list of `members` to a `role`.
    // `bindings` with no members will result in an error.
    repeated Binding bindings = 2;
    // `etag` is used for optimistic concurrency control as a way to help
    // prevent simultaneous updates of a policy from overwriting each other.
    // It is strongly suggested that systems make use of the `etag` in the
    // read-modify-write cycle to perform policy updates in order to avoid race
    // conditions: An `etag` is returned in the response to `getIamPolicy`, and
    // systems are expected to put that etag in the request to `setIamPolicy` to
    // ensure that their change will be applied to the same version of the policy.
    // 
    // If no `etag` is provided in the call to `setIamPolicy`, then the existing
    // policy is overwritten blindly.
    string etag = 3;
    bool iamOwned = 4;
    // Version of the `Policy`. The default version is 0.
    int32 version = 5;
}

message Quota {
    // List of `QuotaLimit` definitions for the service.
    repeated QuotaLimit limits = 1;
    // List of `MetricRule` definitions, each one mapping a selected method to one
    // or more metrics.
    repeated MetricRule metricRules = 2;
}

message QuotaLimit {
    // Default number of tokens that can be consumed during the specified
    // duration. This is the number of tokens assigned when a client
    // application developer activates the service for his/her project.
    // 
    // Specifying a value of 0 will block all requests. This can be used if you
    // are provisioning quota to selected consumers and blocking others.
    // Similarly, a value of -1 will indicate an unlimited quota. No other
    // negative values are allowed.
    // 
    // Used by group-based quotas only.
    string defaultLimit = 1;
    // Optional. User-visible, extended description for this quota limit.
    // Should be used only when more context is needed to understand this limit
    // than provided by the limit's display name (see: `display_name`).
    string description = 2;
    // User-visible display name for this limit.
    // Optional. If not set, the UI will provide a default display name based on
    // the quota configuration. This field can be used to override the default
    // display name generated from the configuration.
    string displayName = 3;
    // Duration of this limit in textual notation. Example: "100s", "24h", "1d".
    // For duration longer than a day, only multiple of days is supported. We
    // support only "100s" and "1d" for now. Additional support will be added in
    // the future. "0" indicates indefinite duration.
    // 
    // Used by group-based quotas only.
    string duration = 4;
    // Free tier value displayed in the Developers Console for this limit.
    // The free tier is the number of tokens that will be subtracted from the
    // billed amount when billing is enabled.
    // This field can only be set on a limit with duration "1d", in a billable
    // group; it is invalid on any other limit. If this field is not set, it
    // defaults to 0, indicating that there is no free tier for this service.
    // 
    // Used by group-based quotas only.
    string freeTier = 5;
    // Maximum number of tokens that can be consumed during the specified
    // duration. Client application developers can override the default limit up
    // to this maximum. If specified, this value cannot be set to a value less
    // than the default limit. If not specified, it is set to the default limit.
    // 
    // To allow clients to apply overrides with no upper bound, set this to -1,
    // indicating unlimited maximum quota.
    // 
    // Used by group-based quotas only.
    string maxLimit = 6;
    // The name of the metric this quota limit applies to. The quota limits with
    // the same metric will be checked together during runtime. The metric must be
    // defined within the service config.
    // 
    // Used by metric-based quotas only.
    string metric = 7;
    // Name of the quota limit. The name is used to refer to the limit when
    // overriding the default limit on per-consumer basis.
    // 
    // For metric-based quota limits, the name must be provided, and it must be
    // unique within the service. The name can only include alphanumeric
    // characters as well as '-'.
    // 
    // The maximum length of the limit name is 64 characters.
    // 
    // The name of a limit is used as a unique identifier for this limit.
    // Therefore, once a limit has been put into use, its name should be
    // immutable. You can use the display_name field to provide a user-friendly
    // name for the limit. The display name can be evolved over time without
    // affecting the identity of the limit.
    string name = 8;
    // Specify the unit of the quota limit. It uses the same syntax as
    // Metric.unit. The supported unit kinds are determined by the quota
    // backend system.
    // 
    // The [Google Service Control](https://cloud.google.com/service-control)
    // supports the following unit components:
    // * One of the time intevals:
    //   * "/min"  for quota every minute.
    //   * "/d"  for quota every 24 hours, starting 00:00 US Pacific Time.
    //   * Otherwise the quota won't be reset by time, such as storage limit.
    // * One and only one of the granted containers:
    //   * "/{project}" quota for a project
    // 
    // Here are some examples:
    // * "1/min/{project}" for quota per minute per project.
    // 
    // Note: the order of unit components is insignificant.
    // The "1" at the beginning is required to follow the metric unit syntax.
    // 
    // Used by metric-based quotas only.
    string unit = 9;
    // Tiered limit values, currently only STANDARD is supported.
    map<string, string> values = 10;
}

message Rollout {
    // Creation time of the rollout. Readonly.
    string createTime = 1;
    // The user who created the Rollout. Readonly.
    string createdBy = 2;
    // The strategy associated with a rollout to delete a `ManagedService`.
    // Readonly.
    DeleteServiceStrategy deleteServiceStrategy = 3;
    // Optional unique identifier of this Rollout. Only lower case letters, digits
    //  and '-' are allowed.
    // 
    // If not specified by client, the server will generate one. The generated id
    // will have the form of <date><revision number>, where "date" is the create
    // date in ISO 8601 format.  "revision number" is a monotonically increasing
    // positive number that is reset every day for each service.
    // An example of the generated rollout_id is '2016-02-16r1'
    string rolloutId = 4;
    // The name of the service associated with this Rollout.
    string serviceName = 5;
    // The status of this rollout. Readonly. In case of a failed rollout,
    // the system will automatically rollback to the current Rollout
    // version. Readonly.
    enum Rollout_Statu {
        ROLLOUT_STATU_ROLLOUT_STATUS_UNSPECIFIED = 0;
        ROLLOUT_STATU_IN_PROGRESS = 1;
        ROLLOUT_STATU_SUCCESS = 2;
        ROLLOUT_STATU_CANCELLED = 3;
        ROLLOUT_STATU_FAILED = 4;
        ROLLOUT_STATU_PENDING = 5;
        ROLLOUT_STATU_FAILED_ROLLED_BACK = 6;
    }
    Rollout_Statu status = 6;
    // Google Service Control selects service configurations based on
    // traffic percentage.
    TrafficPercentStrategy trafficPercentStrategy = 7;
}

message Service {
    // A list of API interfaces exported by this service. Only the `name` field
    // of the google.protobuf.Api needs to be provided by the configuration
    // author, as the remaining fields will be derived from the IDL during the
    // normalization process. It is an error to specify an API interface here
    // which cannot be resolved against the associated IDL files.
    repeated Api apis = 1;
    // Auth configuration.
    Authentication authentication = 2;
    // API backend configuration.
    Backend backend = 3;
    // Billing configuration.
    Billing billing = 4;
    // The semantic version of the service configuration. The config version
    // affects the interpretation of the service configuration. For example,
    // certain features are enabled by default for certain config versions.
    // The latest config version is `3`.
    uint32 configVersion = 5;
    // Context configuration.
    Context context = 6;
    // Configuration for the service control plane.
    Control control = 7;
    // Custom error configuration.
    CustomError customError = 8;
    // Additional API documentation.
    Documentation documentation = 9;
    // Configuration for network endpoints.  If this is empty, then an endpoint
    // with the same name as the service is automatically generated to service all
    // defined APIs.
    repeated Endpoint endpoints = 10;
    // A list of all enum types included in this API service.  Enums
    // referenced directly or indirectly by the `apis` are automatically
    // included.  Enums which are not referenced but shall be included
    // should be listed here by name. Example:
    // 
    //     enums:
    //     - name: google.someapi.v1.SomeEnum
    repeated Enum enums = 11;
    // Experimental configuration.
    Experimental experimental = 12;
    // HTTP configuration.
    Http http = 13;
    // A unique ID for a specific instance of this message, typically assigned
    // by the client for tracking purpose. If empty, the server may choose to
    // generate one instead.
    string id = 14;
    // Logging configuration.
    Logging logging = 15;
    // Defines the logs used by this service.
    repeated LogDescriptor logs = 16;
    // Defines the metrics used by this service.
    repeated MetricDescriptor metrics = 17;
    // Defines the monitored resources used by this service. This is required
    // by the Service.monitoring and Service.logging configurations.
    repeated MonitoredResourceDescriptor monitoredResources = 18;
    // Monitoring configuration.
    Monitoring monitoring = 19;
    // The DNS address at which this service is available,
    // e.g. `calendar.googleapis.com`.
    string name = 20;
    // The Google project that owns this service.
    string producerProjectId = 21;
    // Quota configuration.
    Quota quota = 22;
    // Output only. The source information for this configuration if available.
    SourceInfo sourceInfo = 23;
    // System parameter configuration.
    SystemParameters systemParameters = 24;
    // A list of all proto message types included in this API service.
    // It serves similar purpose as [google.api.Service.types], except that
    // these types are not needed by user-defined APIs. Therefore, they will not
    // show up in the generated discovery doc. This field should only be used
    // to define system APIs in ESF.
    repeated Type systemTypes = 25;
    // The product title for this service.
    string title = 26;
    // A list of all proto message types included in this API service.
    // Types referenced directly or indirectly by the `apis` are
    // automatically included.  Messages which are not referenced but
    // shall be included, such as types used by the `google.protobuf.Any` type,
    // should be listed here by name. Example:
    // 
    //     types:
    //     - name: google.protobuf.Int32
    repeated Type types = 27;
    // Configuration controlling usage of this service.
    Usage usage = 28;
    // API visibility configuration.
    Visibility visibility = 29;
}

message SetIamPolicyRequest {
    // REQUIRED: The complete policy to be applied to the `resource`. The size of
    // the policy is limited to a few 10s of KB. An empty policy is a
    // valid policy but certain Cloud Platform services (such as Projects)
    // might reject them.
    Policy policy = 1;
    // OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
    // the fields in the mask will be modified. If no mask is provided, the
    // following default mask is used:
    // paths: "bindings, etag"
    // This field is only used by Cloud IAM.
    string updateMask = 2;
}

message SourceContext {
    // The path-qualified name of the .proto file that contained the associated
    // protobuf element.  For example: `"google/protobuf/source_context.proto"`.
    string fileName = 1;
}

message SourceInfo {
    // All files used during config generation.
    message SourceFile {
    }
    repeated SourceFile sourceFiles = 1;
}

message Status {
    // The status code, which should be an enum value of google.rpc.Code.
    int32 code = 1;
    // A list of messages that carry the error details.  There is a common set of
    // message types for APIs to use.
    message Detail {
    }
    repeated Detail details = 2;
    // A developer-facing error message, which should be in English. Any
    // user-facing error message should be localized and sent in the
    // google.rpc.Status.details field, or localized by the client.
    string message = 3;
}

message Step {
    // The short description of the step.
    string description = 1;
    // The status code.
    enum Step_Statu {
        STEP_STATU_STATUS_UNSPECIFIED = 0;
        STEP_STATU_DONE = 1;
        STEP_STATU_NOT_STARTED = 2;
        STEP_STATU_IN_PROGRESS = 3;
        STEP_STATU_FAILED = 4;
        STEP_STATU_CANCELLED = 5;
    }
    Step_Statu status = 2;
}

message SubmitConfigSourceRequest {
    // The source configuration for the service.
    ConfigSource configSource = 1;
    // Optional. If set, this will result in the generation of a
    // `google.api.Service` configuration based on the `ConfigSource` provided,
    // but the generated config and the sources will NOT be persisted.
    bool validateOnly = 2;
}

message SubmitConfigSourceResponse {
    // The generated service configuration.
    Service serviceConfig = 1;
}

message SystemParameter {
    // Define the HTTP header name to use for the parameter. It is case
    // insensitive.
    string httpHeader = 1;
    // Define the name of the parameter, such as "api_key" . It is case sensitive.
    string name = 2;
    // Define the URL query parameter name to use for the parameter. It is case
    // sensitive.
    string urlQueryParameter = 3;
}

message SystemParameterRule {
    // Define parameters. Multiple names may be defined for a parameter.
    // For a given method call, only one of them should be used. If multiple
    // names are used the behavior is implementation-dependent.
    // If none of the specified names are present the behavior is
    // parameter-dependent.
    repeated SystemParameter parameters = 1;
    // Selects the methods to which this rule applies. Use '*' to indicate all
    // methods in all APIs.
    // 
    // Refer to selector for syntax details.
    string selector = 2;
}

message SystemParameters {
    // Define system parameters.
    // 
    // The parameters defined here will override the default parameters
    // implemented by the system. If this field is missing from the service
    // config, default system parameters will be used. Default system parameters
    // and names is implementation-dependent.
    // 
    // Example: define api key for all methods
    // 
    //     system_parameters
    //       rules:
    //         - selector: "*"
    //           parameters:
    //             - name: api_key
    //               url_query_parameter: api_key
    // 
    // 
    // Example: define 2 api key names for a specific method.
    // 
    //     system_parameters
    //       rules:
    //         - selector: "/ListShelves"
    //           parameters:
    //             - name: api_key
    //               http_header: Api-Key1
    //             - name: api_key
    //               http_header: Api-Key2
    // 
    // **NOTE:** All service configuration rules follow "last one wins" order.
    repeated SystemParameterRule rules = 1;
}

message TestIamPermissionsRequest {
    // The set of permissions to check for the `resource`. Permissions with
    // wildcards (such as '*' or 'storage.*') are not allowed. For more
    // information see
    // [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
    repeated string permissions = 1;
}

message TestIamPermissionsResponse {
    // A subset of `TestPermissionsRequest.permissions` that the caller is
    // allowed.
    repeated string permissions = 1;
}

message TrafficPercentStrategy {
    // Maps service configuration IDs to their corresponding traffic percentage.
    // Key is the service configuration ID, Value is the traffic percentage
    // which must be greater than 0.0 and the sum must equal to 100.0.
    map<string, number> percentages = 1;
}

message Type {
    // The list of fields.
    repeated Field fields = 1;
    // The fully qualified message name.
    string name = 2;
    // The list of types appearing in `oneof` definitions in this type.
    repeated string oneofs = 3;
    // The protocol buffer options.
    repeated Option options = 4;
    // The source context.
    SourceContext sourceContext = 5;
    // The source syntax.
    enum Type_Syntax {
        TYPE_SYNTAX_SYNTAX_PROTO2 = 0;
        TYPE_SYNTAX_SYNTAX_PROTO3 = 1;
    }
    Type_Syntax syntax = 6;
}

message UndeleteServiceResponse {
    // Revived service resource.
    ManagedService service = 1;
}

message Usage {
    // The full resource name of a channel used for sending notifications to the
    // service producer.
    // 
    // Google Service Management currently only supports
    // [Google Cloud Pub/Sub](https://cloud.google.com/pubsub) as a notification
    // channel. To use Google Cloud Pub/Sub as the channel, this must be the name
    // of a Cloud Pub/Sub topic that uses the Cloud Pub/Sub topic name format
    // documented in https://cloud.google.com/pubsub/docs/overview.
    string producerNotificationChannel = 1;
    // Requirements that must be satisfied before a consumer project can use the
    // service. Each requirement is of the form <service.name>/<requirement-id>;
    // for example 'serviceusage.googleapis.com/billing-enabled'.
    repeated string requirements = 2;
    // A list of usage rules that apply to individual API methods.
    // 
    // **NOTE:** All service configuration rules follow "last one wins" order.
    repeated UsageRule rules = 3;
}

message UsageRule {
    // True, if the method allows unregistered calls; false otherwise.
    bool allowUnregisteredCalls = 1;
    // Selects the methods to which this rule applies. Use '*' to indicate all
    // methods in all APIs.
    // 
    // Refer to selector for syntax details.
    string selector = 2;
    // True, if the method should skip service control. If so, no control plane
    // feature (like quota and billing) will be enabled.
    bool skipServiceControl = 3;
}

message Visibility {
    // A list of visibility rules that apply to individual API elements.
    // 
    // **NOTE:** All service configuration rules follow "last one wins" order.
    repeated VisibilityRule rules = 1;
}

message VisibilityRule {
    // A comma-separated list of visibility labels that apply to the `selector`.
    // Any of the listed labels can be used to grant the visibility.
    // 
    // If a rule has multiple labels, removing one of the labels but not all of
    // them can break clients.
    // 
    // Example:
    // 
    //     visibility:
    //       rules:
    //       - selector: google.calendar.Calendar.EnhancedSearch
    //         restriction: GOOGLE_INTERNAL, TRUSTED_TESTER
    // 
    // Removing GOOGLE_INTERNAL from this restriction will break clients that
    // rely on this method and only had access to it through GOOGLE_INTERNAL.
    string restriction = 1;
    // Selects methods, messages, fields, enums, etc. to which this rule applies.
    // 
    // Refer to selector for syntax details.
    string selector = 2;
}

enum Alt {
    JSON = 0;
    MEDIA = 1;
    PROTO = 2;
}

service GoogleServiceManagementService {
    // Lists service operations that match the specified filter in the request.
    rpc GetV1Operations(GetV1OperationsRequest) returns (ListOperationsResponse) {
      option (google.api.http) = {
        get: "//v1/operations"
      };
    }
    // Lists managed services.
    // 
    // Returns all public services. For authenticated users, also returns all
    // services the calling user has "servicemanagement.services.get" permission
    // for.
    // 
    // **BETA:** If the caller specifies the `consumer_id`, it returns only the
    // services enabled on the consumer. The `consumer_id` must have the format
    // of "project:{PROJECT-ID}".
    rpc GetV1Services(GetV1ServicesRequest) returns (ListServicesResponse) {
      option (google.api.http) = {
        get: "//v1/services"
      };
    }
    // Creates a new managed service.
    // Please note one producer project can own no more than 20 services.
    // 
    // Operation<response: ManagedService>
    rpc PostV1Services(PostV1ServicesRequest) returns (Operation) {
      option (google.api.http) = {
        post: "//v1/services"
        body: "body"
      };
    }
    // Gets a managed service. Authentication is required unless the service is
    // public.
    rpc GetV1ServicesServiceName(GetV1ServicesServiceNameRequest) returns (ManagedService) {
      option (google.api.http) = {
        get: "//v1/services/{serviceName}"
      };
    }
    // Deletes a managed service. This method will change the service to the
    // `Soft-Delete` state for 30 days. Within this period, service producers may
    // call UndeleteService to restore the service.
    // After 30 days, the service will be permanently deleted.
    // 
    // Operation<response: google.protobuf.Empty>
    rpc DeleteV1ServicesServiceName(DeleteV1ServicesServiceNameRequest) returns (Operation) {
      option (google.api.http) = {
        delete: "//v1/services/{serviceName}"
      };
    }
    // Gets a service configuration (version) for a managed service.
    rpc GetV1ServicesServiceNameConfig(GetV1ServicesServiceNameConfigRequest) returns (Service) {
      option (google.api.http) = {
        get: "//v1/services/{serviceName}/config"
      };
    }
    // Lists the history of the service configuration for a managed service,
    // from the newest to the oldest.
    rpc GetV1ServicesServiceNameConfigs(GetV1ServicesServiceNameConfigsRequest) returns (ListServiceConfigsResponse) {
      option (google.api.http) = {
        get: "//v1/services/{serviceName}/configs"
      };
    }
    // Creates a new service configuration (version) for a managed service.
    // This method only stores the service configuration. To roll out the service
    // configuration to backend systems please call
    // CreateServiceRollout.
    rpc PostV1ServicesServiceNameConfigs(PostV1ServicesServiceNameConfigsRequest) returns (Service) {
      option (google.api.http) = {
        post: "//v1/services/{serviceName}/configs"
        body: "body"
      };
    }
    // Gets a service configuration (version) for a managed service.
    rpc GetV1ServicesServiceNameConfigsConfigId(GetV1ServicesServiceNameConfigsConfigIdRequest) returns (Service) {
      option (google.api.http) = {
        get: "//v1/services/{serviceName}/configs/{configId}"
      };
    }
    // Creates a new service configuration (version) for a managed service based
    // on
    // user-supplied configuration source files (for example: OpenAPI
    // Specification). This method stores the source configurations as well as the
    // generated service configuration. To rollout the service configuration to
    // other services,
    // please call CreateServiceRollout.
    // 
    // Operation<response: SubmitConfigSourceResponse>
    rpc PostV1ServicesServiceNameConfigs:Submit(PostV1ServicesServiceNameConfigs:SubmitRequest) returns (Operation) {
      option (google.api.http) = {
        post: "//v1/services/{serviceName}/configs:submit"
        body: "body"
      };
    }
    // Lists the history of the service configuration rollouts for a managed
    // service, from the newest to the oldest.
    rpc GetV1ServicesServiceNameRollouts(GetV1ServicesServiceNameRolloutsRequest) returns (ListServiceRolloutsResponse) {
      option (google.api.http) = {
        get: "//v1/services/{serviceName}/rollouts"
      };
    }
    // Creates a new service configuration rollout. Based on rollout, the
    // Google Service Management will roll out the service configurations to
    // different backend services. For example, the logging configuration will be
    // pushed to Google Cloud Logging.
    // 
    // Please note that any previous pending and running Rollouts and associated
    // Operations will be automatically cancelled so that the latest Rollout will
    // not be blocked by previous Rollouts.
    // 
    // Operation<response: Rollout>
    rpc PostV1ServicesServiceNameRollouts(PostV1ServicesServiceNameRolloutsRequest) returns (Operation) {
      option (google.api.http) = {
        post: "//v1/services/{serviceName}/rollouts"
        body: "body"
      };
    }
    // Gets a service configuration rollout.
    rpc GetV1ServicesServiceNameRolloutsRolloutId(GetV1ServicesServiceNameRolloutsRolloutIdRequest) returns (Rollout) {
      option (google.api.http) = {
        get: "//v1/services/{serviceName}/rollouts/{rolloutId}"
      };
    }
    // Disables a service for a project, so it can no longer be
    // be used for the project. It prevents accidental usage that may cause
    // unexpected billing charges or security leaks.
    // 
    // Operation<response: DisableServiceResponse>
    rpc PostV1ServicesServiceName:Disable(PostV1ServicesServiceName:DisableRequest) returns (Operation) {
      option (google.api.http) = {
        post: "//v1/services/{serviceName}:disable"
        body: "body"
      };
    }
    // Enables a service for a project, so it can be used
    // for the project. See
    // [Cloud Auth Guide](https://cloud.google.com/docs/authentication) for
    // more information.
    // 
    // Operation<response: EnableServiceResponse>
    rpc PostV1ServicesServiceName:Enable(PostV1ServicesServiceName:EnableRequest) returns (Operation) {
      option (google.api.http) = {
        post: "//v1/services/{serviceName}:enable"
        body: "body"
      };
    }
    // Revives a previously deleted managed service. The method restores the
    // service using the configuration at the time the service was deleted.
    // The target service must exist and must have been deleted within the
    // last 30 days.
    // 
    // Operation<response: UndeleteServiceResponse>
    rpc PostV1ServicesServiceName:Undelete(PostV1ServicesServiceName:UndeleteRequest) returns (Operation) {
      option (google.api.http) = {
        post: "//v1/services/{serviceName}:undelete"
      };
    }
    // Generates and returns a report (errors, warnings and changes from
    // existing configurations) associated with
    // GenerateConfigReportRequest.new_value
    // 
    // If GenerateConfigReportRequest.old_value is specified,
    // GenerateConfigReportRequest will contain a single ChangeReport based on the
    // comparison between GenerateConfigReportRequest.new_value and
    // GenerateConfigReportRequest.old_value.
    // If GenerateConfigReportRequest.old_value is not specified, this method
    // will compare GenerateConfigReportRequest.new_value with the last pushed
    // service configuration.
    rpc PostV1Services:GenerateConfigReport(PostV1Services:GenerateConfigReportRequest) returns (GenerateConfigReportResponse) {
      option (google.api.http) = {
        post: "//v1/services:generateConfigReport"
        body: "body"
      };
    }
    // Gets the latest state of a long-running operation.  Clients can use this
    // method to poll the operation result at intervals as recommended by the API
    // service.
    rpc GetV1Name(GetV1NameRequest) returns (Operation) {
      option (google.api.http) = {
        get: "//v1/{name}"
      };
    }
    // Gets the access control policy for a resource.
    // Returns an empty policy if the resource exists and does not have a policy
    // set.
    rpc PostV1Resource:GetIamPolicy(PostV1Resource:GetIamPolicyRequest) returns (Policy) {
      option (google.api.http) = {
        post: "//v1/{resource}:getIamPolicy"
        body: "body"
      };
    }
    // Sets the access control policy on the specified resource. Replaces any
    // existing policy.
    rpc PostV1Resource:SetIamPolicy(PostV1Resource:SetIamPolicyRequest) returns (Policy) {
      option (google.api.http) = {
        post: "//v1/{resource}:setIamPolicy"
        body: "body"
      };
    }
    // Returns permissions that a caller has on the specified resource.
    // If the resource does not exist, this will return an empty set of
    // permissions, not a NOT_FOUND error.
    // 
    // Note: This operation is designed to be used for building permission-aware
    // UIs and command-line tools, not for authorization checking. This operation
    // may "fail open" without warning.
    rpc PostV1Resource:TestIamPermissions(PostV1Resource:TestIamPermissionsRequest) returns (TestIamPermissionsResponse) {
      option (google.api.http) = {
        post: "//v1/{resource}:testIamPermissions"
        body: "body"
      };
    }
}

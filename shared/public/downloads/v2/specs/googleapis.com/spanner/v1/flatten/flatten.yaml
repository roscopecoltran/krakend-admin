basePath: /
definitions.BeginTransactionRequest.description: The request for BeginTransaction.
definitions.BeginTransactionRequest.properties.options.$ref: '#/definitions/TransactionOptions'
definitions.BeginTransactionRequest.properties.options.description: Required. Options
  for the new transaction.
definitions.BeginTransactionRequest.type: object
definitions.Binding.description: Associates `members` with a `role`.
definitions.Binding.properties.members.description: |+
  Specifies the identities requesting access for a Cloud Platform resource.
  `members` can have the following values:

  * `allUsers`: A special identifier that represents anyone who is
     on the internet; with or without a Google account.

  * `allAuthenticatedUsers`: A special identifier that represents anyone
     who is authenticated with a Google account or a service account.

  * `user:{emailid}`: An email address that represents a specific Google
     account. For example, `alice@gmail.com` or `joe@example.com`.


  * `serviceAccount:{emailid}`: An email address that represents a service
     account. For example, `my-other-app@appspot.gserviceaccount.com`.

  * `group:{emailid}`: An email address that represents a Google group.
     For example, `admins@example.com`.


  * `domain:{domain}`: A Google Apps domain name that represents all the
     users of that domain. For example, `google.com` or `example.com`.

definitions.Binding.properties.members.items.type: string
definitions.Binding.properties.members.type: array
definitions.Binding.properties.role.description: |-
  Role that is assigned to `members`.
  For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
  Required
definitions.Binding.properties.role.type: string
definitions.Binding.type: object
definitions.ChildLink.description: |-
  Metadata associated with a parent-child relationship appearing in a
  PlanNode.
definitions.ChildLink.properties.childIndex.description: The node to which the link
  points.
definitions.ChildLink.properties.childIndex.format: int32
definitions.ChildLink.properties.childIndex.type: integer
definitions.ChildLink.properties.type.description: |-
  The type of the link. For example, in Hash Joins this could be used to
  distinguish between the build child and the probe child, or in the case
  of the child being an output variable, to represent the tag associated
  with the output variable.
definitions.ChildLink.properties.type.type: string
definitions.ChildLink.properties.variable.description: |-
  Only present if the child node is SCALAR and corresponds
  to an output variable of the parent node. The field carries the name of
  the output variable.
  For example, a `TableScan` operator that reads rows from a table will
  have child links to the `SCALAR` nodes representing the output variables
  created for each column that is read by the operator. The corresponding
  `variable` fields will be set to the variable names assigned to the
  columns.
definitions.ChildLink.properties.variable.type: string
definitions.ChildLink.type: object
definitions.CommitRequest.description: The request for Commit.
definitions.CommitRequest.properties.mutations.description: |-
  The mutations to be executed when this transaction commits. All
  mutations are applied atomically, in the order they appear in
  this list.
definitions.CommitRequest.properties.mutations.items.$ref: '#/definitions/Mutation'
definitions.CommitRequest.properties.mutations.type: array
definitions.CommitRequest.properties.singleUseTransaction.$ref: '#/definitions/TransactionOptions'
definitions.CommitRequest.properties.singleUseTransaction.description: |-
  Execute mutations in a temporary transaction. Note that unlike
  commit of a previously-started transaction, commit with a
  temporary transaction is non-idempotent. That is, if the
  `CommitRequest` is sent to Cloud Spanner more than once (for
  instance, due to retries in the application, or in the
  transport library), it is possible that the mutations are
  executed more than once. If this is undesirable, use
  BeginTransaction and
  Commit instead.
definitions.CommitRequest.properties.transactionId.description: Commit a previously-started
  transaction.
definitions.CommitRequest.properties.transactionId.format: byte
definitions.CommitRequest.properties.transactionId.type: string
definitions.CommitRequest.type: object
definitions.CommitResponse.description: The response for Commit.
definitions.CommitResponse.properties.commitTimestamp.description: The Cloud Spanner
  timestamp at which the transaction committed.
definitions.CommitResponse.properties.commitTimestamp.format: google-datetime
definitions.CommitResponse.properties.commitTimestamp.type: string
definitions.CommitResponse.type: object
definitions.CreateDatabaseMetadata.description: |-
  Metadata type for the operation returned by
  CreateDatabase.
definitions.CreateDatabaseMetadata.properties.database.description: The database being
  created.
definitions.CreateDatabaseMetadata.properties.database.type: string
definitions.CreateDatabaseMetadata.type: object
definitions.CreateDatabaseRequest.description: The request for CreateDatabase.
definitions.CreateDatabaseRequest.properties.createStatement.description: |-
  Required. A `CREATE DATABASE` statement, which specifies the ID of the
  new database.  The database ID must conform to the regular expression
  `a-z*[a-z0-9]` and be between 2 and 30 characters in length.
  If the database ID is a reserved word or if it contains a hyphen, the
  database ID must be enclosed in backticks (`` ` ``).
definitions.CreateDatabaseRequest.properties.createStatement.type: string
definitions.CreateDatabaseRequest.properties.extraStatements.description: |-
  An optional list of DDL statements to run inside the newly created
  database. Statements can create tables, indexes, etc. These
  statements execute atomically with the creation of the database:
  if there is an error in any statement, the database is not created.
definitions.CreateDatabaseRequest.properties.extraStatements.items.type: string
definitions.CreateDatabaseRequest.properties.extraStatements.type: array
definitions.CreateDatabaseRequest.type: object
definitions.CreateInstanceMetadata.description: |-
  Metadata type for the operation returned by
  CreateInstance.
definitions.CreateInstanceMetadata.properties.cancelTime.description: |-
  The time at which this operation was cancelled. If set, this operation is
  in the process of undoing itself (which is guaranteed to succeed) and
  cannot be cancelled again.
definitions.CreateInstanceMetadata.properties.cancelTime.format: google-datetime
definitions.CreateInstanceMetadata.properties.cancelTime.type: string
definitions.CreateInstanceMetadata.properties.endTime.description: The time at which
  this operation failed or was completed successfully.
definitions.CreateInstanceMetadata.properties.endTime.format: google-datetime
definitions.CreateInstanceMetadata.properties.endTime.type: string
definitions.CreateInstanceMetadata.properties.instance.$ref: '#/definitions/Instance'
definitions.CreateInstanceMetadata.properties.instance.description: The instance being
  created.
definitions.CreateInstanceMetadata.properties.startTime.description: |-
  The time at which the
  CreateInstance request was
  received.
definitions.CreateInstanceMetadata.properties.startTime.format: google-datetime
definitions.CreateInstanceMetadata.properties.startTime.type: string
definitions.CreateInstanceMetadata.type: object
definitions.CreateInstanceRequest.description: The request for CreateInstance.
definitions.CreateInstanceRequest.properties.instance.$ref: '#/definitions/Instance'
definitions.CreateInstanceRequest.properties.instance.description: |-
  Required. The instance to create.  The name may be omitted, but if
  specified must be `<parent>/instances/<instance_id>`.
definitions.CreateInstanceRequest.properties.instanceId.description: |-
  Required. The ID of the instance to create.  Valid identifiers are of the
  form `a-z*[a-z0-9]` and must be between 6 and 30 characters in
  length.
definitions.CreateInstanceRequest.properties.instanceId.type: string
definitions.CreateInstanceRequest.type: object
definitions.CreateSessionRequest.description: The request for CreateSession.
definitions.CreateSessionRequest.properties.session.$ref: '#/definitions/Session'
definitions.CreateSessionRequest.properties.session.description: The session to create.
definitions.CreateSessionRequest.type: object
definitions.Database.description: A Cloud Spanner database.
definitions.Database.properties.name.description: |-
  Required. The name of the database. Values are of the form
  `projects/<project>/instances/<instance>/databases/<database>`,
  where `<database>` is as specified in the `CREATE DATABASE`
  statement. This name can be passed to other API methods to
  identify the database.
definitions.Database.properties.name.type: string
definitions.Database.properties.state.description: Output only. The current database
  state.
definitions.Database.properties.state.enum.length: 3
definitions.Database.properties.state.enum[0]: STATE_UNSPECIFIED
definitions.Database.properties.state.enum[1]: CREATING
definitions.Database.properties.state.enum[2]: READY
definitions.Database.properties.state.type: string
definitions.Database.type: object
definitions.Delete.description: Arguments to delete operations.
definitions.Delete.properties.keySet.$ref: '#/definitions/KeySet'
definitions.Delete.properties.keySet.description: Required. The primary keys of the
  rows within table to delete.
definitions.Delete.properties.table.description: Required. The table whose rows will
  be deleted.
definitions.Delete.properties.table.type: string
definitions.Delete.type: object
definitions.Empty.description: |-
  A generic empty message that you can re-use to avoid defining duplicated
  empty messages in your APIs. A typical example is to use it as the request
  or the response type of an API method. For instance:

      service Foo {
        rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
      }

  The JSON representation for `Empty` is empty JSON object `{}`.
definitions.Empty.type: object
definitions.ExecuteSqlRequest.description: |-
  The request for ExecuteSql and
  ExecuteStreamingSql.
definitions.ExecuteSqlRequest.properties.paramTypes.additionalProperties.$ref: '#/definitions/Type'
definitions.ExecuteSqlRequest.properties.paramTypes.description: |-
  It is not always possible for Cloud Spanner to infer the right SQL type
  from a JSON value.  For example, values of type `BYTES` and values
  of type `STRING` both appear in params as JSON strings.

  In these cases, `param_types` can be used to specify the exact
  SQL type for some or all of the SQL query parameters. See the
  definition of Type for more information
  about SQL types.
definitions.ExecuteSqlRequest.properties.paramTypes.type: object
definitions.ExecuteSqlRequest.properties.params.additionalProperties.description: Properties
  of the object.
definitions.ExecuteSqlRequest.properties.params.description: |-
  The SQL query string can contain parameter placeholders. A parameter
  placeholder consists of `'@'` followed by the parameter
  name. Parameter names consist of any combination of letters,
  numbers, and underscores.

  Parameters can appear anywhere that a literal value is expected.  The same
  parameter name can be used more than once, for example:
    `"WHERE id > @msg_id AND id < @msg_id + 100"`

  It is an error to execute an SQL query with unbound parameters.

  Parameter values are specified using `params`, which is a JSON
  object whose keys are parameter names, and whose values are the
  corresponding parameter values.
definitions.ExecuteSqlRequest.properties.params.type: object
definitions.ExecuteSqlRequest.properties.queryMode.description: |-
  Used to control the amount of debugging information returned in
  ResultSetStats.
definitions.ExecuteSqlRequest.properties.queryMode.enum.length: 3
definitions.ExecuteSqlRequest.properties.queryMode.enum[0]: NORMAL
definitions.ExecuteSqlRequest.properties.queryMode.enum[1]: PLAN
definitions.ExecuteSqlRequest.properties.queryMode.enum[2]: PROFILE
definitions.ExecuteSqlRequest.properties.queryMode.type: string
definitions.ExecuteSqlRequest.properties.resumeToken.description: |-
  If this request is resuming a previously interrupted SQL query
  execution, `resume_token` should be copied from the last
  PartialResultSet yielded before the interruption. Doing this
  enables the new SQL query execution to resume where the last one left
  off. The rest of the request parameters must exactly match the
  request that yielded this token.
definitions.ExecuteSqlRequest.properties.resumeToken.format: byte
definitions.ExecuteSqlRequest.properties.resumeToken.type: string
definitions.ExecuteSqlRequest.properties.sql.description: Required. The SQL query
  string.
definitions.ExecuteSqlRequest.properties.sql.type: string
definitions.ExecuteSqlRequest.properties.transaction.$ref: '#/definitions/TransactionSelector'
definitions.ExecuteSqlRequest.properties.transaction.description: |-
  The transaction to use. If none is provided, the default is a
  temporary read-only transaction with strong concurrency.
definitions.ExecuteSqlRequest.type: object
definitions.Field.description: Message representing a single field of a struct.
definitions.Field.properties.name.description: |-
  The name of the field. For reads, this is the column name. For
  SQL queries, it is the column alias (e.g., `"Word"` in the
  query `"SELECT 'hello' AS Word"`), or the column name (e.g.,
  `"ColName"` in the query `"SELECT ColName FROM Table"`). Some
  columns might have an empty name (e.g., !"SELECT
  UPPER(ColName)"`). Note that a query result can contain
  multiple fields with the same name.
definitions.Field.properties.name.type: string
definitions.Field.properties.type.$ref: '#/definitions/Type'
definitions.Field.properties.type.description: The type of the field.
definitions.Field.type: object
definitions.GetDatabaseDdlResponse.description: The response for GetDatabaseDdl.
definitions.GetDatabaseDdlResponse.properties.statements.description: |-
  A list of formatted DDL statements defining the schema of the database
  specified in the request.
definitions.GetDatabaseDdlResponse.properties.statements.items.type: string
definitions.GetDatabaseDdlResponse.properties.statements.type: array
definitions.GetDatabaseDdlResponse.type: object
definitions.GetIamPolicyRequest.description: Request message for `GetIamPolicy` method.
definitions.GetIamPolicyRequest.type: object
definitions.Instance.description: An isolated set of Cloud Spanner resources on which
  databases can be hosted.
definitions.Instance.properties.config.description: |-
  Required. The name of the instance's configuration. Values are of the form
  `projects/<project>/instanceConfigs/<configuration>`. See
  also InstanceConfig and
  ListInstanceConfigs.
definitions.Instance.properties.config.type: string
definitions.Instance.properties.displayName.description: |-
  Required. The descriptive name for this instance as it appears in UIs.
  Must be unique per project and between 4 and 30 characters in length.
definitions.Instance.properties.displayName.type: string
definitions.Instance.properties.labels.additionalProperties.type: string
definitions.Instance.properties.labels.description: |-
  Cloud Labels are a flexible and lightweight mechanism for organizing cloud
  resources into groups that reflect a customer's organizational needs and
  deployment strategies. Cloud Labels can be used to filter collections of
  resources. They can be used to control how resource metrics are aggregated.
  And they can be used as arguments to policy management rules (e.g. route,
  firewall, load balancing, etc.).

   * Label keys must be between 1 and 63 characters long and must conform to
     the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`.
   * Label values must be between 0 and 63 characters long and must conform
     to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`.
   * No more than 64 labels can be associated with a given resource.

  See https://goo.gl/xmQnxf for more information on and examples of labels.

  If you plan to use labels in your own code, please note that additional
  characters may be allowed in the future. And so you are advised to use an
  internal label representation, such as JSON, which doesn't rely upon
  specific characters being disallowed.  For example, representing labels
  as the string:  name + "_" + value  would prove problematic if we were to
  allow "_" in a future release.
definitions.Instance.properties.labels.type: object
definitions.Instance.properties.name.description: |-
  Required. A unique identifier for the instance, which cannot be changed
  after the instance is created. Values are of the form
  `projects/<project>/instances/a-z*[a-z0-9]`. The final
  segment of the name must be between 6 and 30 characters in length.
definitions.Instance.properties.name.type: string
definitions.Instance.properties.nodeCount.description: |-
  Required. The number of nodes allocated to this instance. This may be zero
  in API responses for instances that are not yet in state `READY`.

  Each Spanner node can provide up to 10,000 QPS of reads or 2000 QPS of
  writes (writing single rows at 1KB data per row), and 2 TiB storage.

  For optimal performance, we recommend provisioning enough nodes to keep
  overall CPU utilization under 75%.

  A minimum of 3 nodes is recommended for production environments.  This
  minimum is required for SLAs to apply to your instance.

  Note that Cloud Spanner performance is highly dependent on workload, schema
  design, and dataset characteristics. The performance numbers above are
  estimates, and assume [best practices](https://cloud.google.com/spanner/docs/bulk-loading)
  are followed.
definitions.Instance.properties.nodeCount.format: int32
definitions.Instance.properties.nodeCount.type: integer
definitions.Instance.properties.state.description: |-
  Output only. The current instance state. For
  CreateInstance, the state must be
  either omitted or set to `CREATING`. For
  UpdateInstance, the state must be
  either omitted or set to `READY`.
definitions.Instance.properties.state.enum.length: 3
definitions.Instance.properties.state.enum[0]: STATE_UNSPECIFIED
definitions.Instance.properties.state.enum[1]: CREATING
definitions.Instance.properties.state.enum[2]: READY
definitions.Instance.properties.state.type: string
definitions.Instance.type: object
definitions.InstanceConfig.description: |-
  A possible configuration for a Cloud Spanner instance. Configurations
  define the geographic placement of nodes and their replication.
definitions.InstanceConfig.properties.displayName.description: The name of this instance
  configuration as it appears in UIs.
definitions.InstanceConfig.properties.displayName.type: string
definitions.InstanceConfig.properties.name.description: |-
  A unique identifier for the instance configuration.  Values
  are of the form
  `projects/<project>/instanceConfigs/a-z*`
definitions.InstanceConfig.properties.name.type: string
definitions.InstanceConfig.type: object
definitions.KeyRange.description: |-
  KeyRange represents a range of rows in a table or index.

  A range has a start key and an end key. These keys can be open or
  closed, indicating if the range includes rows with that key.

  Keys are represented by lists, where the ith value in the list
  corresponds to the ith component of the table or index primary key.
  Individual values are encoded as described here.

  For example, consider the following table definition:

      CREATE TABLE UserEvents (
        UserName STRING(MAX),
        EventDate STRING(10)
      ) PRIMARY KEY(UserName, EventDate);

  The following keys name rows in this table:

      "Bob", "2014-09-23"

  Since the `UserEvents` table's `PRIMARY KEY` clause names two
  columns, each `UserEvents` key has two elements; the first is the
  `UserName`, and the second is the `EventDate`.

  Key ranges with multiple components are interpreted
  lexicographically by component using the table or index key's declared
  sort order. For example, the following range returns all events for
  user `"Bob"` that occurred in the year 2015:

      "start_closed": ["Bob", "2015-01-01"]
      "end_closed": ["Bob", "2015-12-31"]

  Start and end keys can omit trailing key components. This affects the
  inclusion and exclusion of rows that exactly match the provided key
  components: if the key is closed, then rows that exactly match the
  provided components are included; if the key is open, then rows
  that exactly match are not included.

  For example, the following range includes all events for `"Bob"` that
  occurred during and after the year 2000:

      "start_closed": ["Bob", "2000-01-01"]
      "end_closed": ["Bob"]

  The next example retrieves all events for `"Bob"`:

      "start_closed": ["Bob"]
      "end_closed": ["Bob"]

  To retrieve events before the year 2000:

      "start_closed": ["Bob"]
      "end_open": ["Bob", "2000-01-01"]

  The following range includes all rows in the table:

      "start_closed": []
      "end_closed": []

  This range returns all users whose `UserName` begins with any
  character from A to C:

      "start_closed": ["A"]
      "end_open": ["D"]

  This range returns all users whose `UserName` begins with B:

      "start_closed": ["B"]
      "end_open": ["C"]

  Key ranges honor column sort order. For example, suppose a table is
  defined as follows:

      CREATE TABLE DescendingSortedTable {
        Key INT64,
        ...
      ) PRIMARY KEY(Key DESC);

  The following range retrieves all rows with key values between 1
  and 100 inclusive:

      "start_closed": ["100"]
      "end_closed": ["1"]

  Note that 100 is passed as the start, and 1 is passed as the end,
  because `Key` is a descending column in the schema.
definitions.KeyRange.properties.endClosed.description: |-
  If the end is closed, then the range includes all rows whose
  first `len(end_closed)` key columns exactly match `end_closed`.
definitions.KeyRange.properties.endClosed.type: array
definitions.KeyRange.properties.endOpen.description: |-
  If the end is open, then the range excludes rows whose first
  `len(end_open)` key columns exactly match `end_open`.
definitions.KeyRange.properties.endOpen.type: array
definitions.KeyRange.properties.startClosed.description: |-
  If the start is closed, then the range includes all rows whose
  first `len(start_closed)` key columns exactly match `start_closed`.
definitions.KeyRange.properties.startClosed.type: array
definitions.KeyRange.properties.startOpen.description: |-
  If the start is open, then the range excludes rows whose first
  `len(start_open)` key columns exactly match `start_open`.
definitions.KeyRange.properties.startOpen.type: array
definitions.KeyRange.type: object
definitions.KeySet.description: |-
  `KeySet` defines a collection of Cloud Spanner keys and/or key ranges. All
  the keys are expected to be in the same table or index. The keys need
  not be sorted in any particular way.

  If the same key is specified multiple times in the set (for example
  if two ranges, two keys, or a key and a range overlap), Cloud Spanner
  behaves as if the key were only specified once.
definitions.KeySet.properties.all.description: |-
  For convenience `all` can be set to `true` to indicate that this
  `KeySet` matches all keys in the table or index. Note that any keys
  specified in `keys` or `ranges` are only yielded once.
definitions.KeySet.properties.all.type: boolean
definitions.KeySet.properties.keys.description: |-
  A list of specific keys. Entries in `keys` should have exactly as
  many elements as there are columns in the primary or index key
  with which this `KeySet` is used.  Individual key values are
  encoded as described here.
definitions.KeySet.properties.keys.items.type: array
definitions.KeySet.properties.keys.type: array
definitions.KeySet.properties.ranges.description: |-
  A list of key ranges. See KeyRange for more information about
  key range specifications.
definitions.KeySet.properties.ranges.items.$ref: '#/definitions/KeyRange'
definitions.KeySet.properties.ranges.type: array
definitions.KeySet.type: object
definitions.ListDatabasesResponse.description: The response for ListDatabases.
definitions.ListDatabasesResponse.properties.databases.description: Databases that
  matched the request.
definitions.ListDatabasesResponse.properties.databases.items.$ref: '#/definitions/Database'
definitions.ListDatabasesResponse.properties.databases.type: array
definitions.ListDatabasesResponse.properties.nextPageToken.description: |-
  `next_page_token` can be sent in a subsequent
  ListDatabases call to fetch more
  of the matching databases.
definitions.ListDatabasesResponse.properties.nextPageToken.type: string
definitions.ListDatabasesResponse.type: object
definitions.ListInstanceConfigsResponse.description: The response for ListInstanceConfigs.
definitions.ListInstanceConfigsResponse.properties.instanceConfigs.description: The
  list of requested instance configurations.
definitions.ListInstanceConfigsResponse.properties.instanceConfigs.items.$ref: '#/definitions/InstanceConfig'
definitions.ListInstanceConfigsResponse.properties.instanceConfigs.type: array
definitions.ListInstanceConfigsResponse.properties.nextPageToken.description: |-
  `next_page_token` can be sent in a subsequent
  ListInstanceConfigs call to
  fetch more of the matching instance configurations.
definitions.ListInstanceConfigsResponse.properties.nextPageToken.type: string
definitions.ListInstanceConfigsResponse.type: object
definitions.ListInstancesResponse.description: The response for ListInstances.
definitions.ListInstancesResponse.properties.instances.description: The list of requested
  instances.
definitions.ListInstancesResponse.properties.instances.items.$ref: '#/definitions/Instance'
definitions.ListInstancesResponse.properties.instances.type: array
definitions.ListInstancesResponse.properties.nextPageToken.description: |-
  `next_page_token` can be sent in a subsequent
  ListInstances call to fetch more
  of the matching instances.
definitions.ListInstancesResponse.properties.nextPageToken.type: string
definitions.ListInstancesResponse.type: object
definitions.ListOperationsResponse.description: The response message for Operations.ListOperations.
definitions.ListOperationsResponse.properties.nextPageToken.description: The standard
  List next-page token.
definitions.ListOperationsResponse.properties.nextPageToken.type: string
definitions.ListOperationsResponse.properties.operations.description: A list of operations
  that matches the specified filter in the request.
definitions.ListOperationsResponse.properties.operations.items.$ref: '#/definitions/Operation'
definitions.ListOperationsResponse.properties.operations.type: array
definitions.ListOperationsResponse.type: object
definitions.ListSessionsResponse.description: The response for ListSessions.
definitions.ListSessionsResponse.properties.nextPageToken.description: |-
  `next_page_token` can be sent in a subsequent
  ListSessions call to fetch more of the matching
  sessions.
definitions.ListSessionsResponse.properties.nextPageToken.type: string
definitions.ListSessionsResponse.properties.sessions.description: The list of requested
  sessions.
definitions.ListSessionsResponse.properties.sessions.items.$ref: '#/definitions/Session'
definitions.ListSessionsResponse.properties.sessions.type: array
definitions.ListSessionsResponse.type: object
definitions.Mutation.description: |-
  A modification to one or more Cloud Spanner rows.  Mutations can be
  applied to a Cloud Spanner database by sending them in a
  Commit call.
definitions.Mutation.properties.delete.$ref: '#/definitions/Delete'
definitions.Mutation.properties.delete.description: |-
  Delete rows from a table. Succeeds whether or not the named
  rows were present.
definitions.Mutation.properties.insert.$ref: '#/definitions/Write'
definitions.Mutation.properties.insert.description: |-
  Insert new rows in a table. If any of the rows already exist,
  the write or transaction fails with error `ALREADY_EXISTS`.
definitions.Mutation.properties.insertOrUpdate.$ref: '#/definitions/Write'
definitions.Mutation.properties.insertOrUpdate.description: |-
  Like insert, except that if the row already exists, then
  its column values are overwritten with the ones provided. Any
  column values not explicitly written are preserved.
definitions.Mutation.properties.replace.$ref: '#/definitions/Write'
definitions.Mutation.properties.replace.description: |-
  Like insert, except that if the row already exists, it is
  deleted, and the column values provided are inserted
  instead. Unlike insert_or_update, this means any values not
  explicitly written become `NULL`.
definitions.Mutation.properties.update.$ref: '#/definitions/Write'
definitions.Mutation.properties.update.description: |-
  Update existing rows in a table. If any of the rows does not
  already exist, the transaction fails with error `NOT_FOUND`.
definitions.Mutation.type: object
definitions.Operation.description: |-
  This resource represents a long-running operation that is the result of a
  network API call.
definitions.Operation.properties.done.description: |-
  If the value is `false`, it means the operation is still in progress.
  If `true`, the operation is completed, and either `error` or `response` is
  available.
definitions.Operation.properties.done.type: boolean
definitions.Operation.properties.error.$ref: '#/definitions/Status'
definitions.Operation.properties.error.description: The error result of the operation
  in case of failure or cancellation.
definitions.Operation.properties.metadata.additionalProperties.description: Properties
  of the object. Contains field @type with type URL.
definitions.Operation.properties.metadata.description: |-
  Service-specific metadata associated with the operation.  It typically
  contains progress information and common metadata such as create time.
  Some services might not provide such metadata.  Any method that returns a
  long-running operation should document the metadata type, if any.
definitions.Operation.properties.metadata.type: object
definitions.Operation.properties.name.description: |-
  The server-assigned name, which is only unique within the same service that
  originally returns it. If you use the default HTTP mapping, the
  `name` should have the format of `operations/some/unique/name`.
definitions.Operation.properties.name.type: string
definitions.Operation.properties.response.additionalProperties.description: Properties
  of the object. Contains field @type with type URL.
definitions.Operation.properties.response.description: |-
  The normal response of the operation in case of success.  If the original
  method returns no data on success, such as `Delete`, the response is
  `google.protobuf.Empty`.  If the original method is standard
  `Get`/`Create`/`Update`, the response should be the resource.  For other
  methods, the response should have the type `XxxResponse`, where `Xxx`
  is the original method name.  For example, if the original method name
  is `TakeSnapshot()`, the inferred response type is
  `TakeSnapshotResponse`.
definitions.Operation.properties.response.type: object
definitions.Operation.type: object
definitions.PartialResultSet.description: |-
  Partial results from a streaming read or SQL query. Streaming reads and
  SQL queries better tolerate large result sets, large rows, and large
  values, but are a little trickier to consume.
definitions.PartialResultSet.properties.chunkedValue.description: |-
  If true, then the final value in values is chunked, and must
  be combined with more values from subsequent `PartialResultSet`s
  to obtain a complete field value.
definitions.PartialResultSet.properties.chunkedValue.type: boolean
definitions.PartialResultSet.properties.metadata.$ref: '#/definitions/ResultSetMetadata'
definitions.PartialResultSet.properties.metadata.description: |-
  Metadata about the result set, such as row type information.
  Only present in the first response.
definitions.PartialResultSet.properties.resumeToken.description: |-
  Streaming calls might be interrupted for a variety of reasons, such
  as TCP connection loss. If this occurs, the stream of results can
  be resumed by re-sending the original request and including
  `resume_token`. Note that executing any other transaction in the
  same session invalidates the token.
definitions.PartialResultSet.properties.resumeToken.format: byte
definitions.PartialResultSet.properties.resumeToken.type: string
definitions.PartialResultSet.properties.stats.$ref: '#/definitions/ResultSetStats'
definitions.PartialResultSet.properties.stats.description: |-
  Query plan and execution statistics for the query that produced this
  streaming result set. These can be requested by setting
  ExecuteSqlRequest.query_mode and are sent
  only once with the last response in the stream.
definitions.PartialResultSet.properties.values.description: |-
  A streamed result set consists of a stream of values, which might
  be split into many `PartialResultSet` messages to accommodate
  large rows and/or large values. Every N complete values defines a
  row, where N is equal to the number of entries in
  metadata.row_type.fields.

  Most values are encoded based on type as described
  here.

  It is possible that the last value in values is "chunked",
  meaning that the rest of the value is sent in subsequent
  `PartialResultSet`(s). This is denoted by the chunked_value
  field. Two or more chunked values can be merged to form a
  complete value as follows:

    * `bool/number/null`: cannot be chunked
    * `string`: concatenate the strings
    * `list`: concatenate the lists. If the last element in a list is a
      `string`, `list`, or `object`, merge it with the first element in
      the next list by applying these rules recursively.
    * `object`: concatenate the (field name, field value) pairs. If a
      field name is duplicated, then apply these rules recursively
      to merge the field values.

  Some examples of merging:

      # Strings are concatenated.
      "foo", "bar" => "foobar"

      # Lists of non-strings are concatenated.
      [2, 3], [4] => [2, 3, 4]

      # Lists are concatenated, but the last and first elements are merged
      # because they are strings.
      ["a", "b"], ["c", "d"] => ["a", "bc", "d"]

      # Lists are concatenated, but the last and first elements are merged
      # because they are lists. Recursively, the last and first elements
      # of the inner lists are merged because they are strings.
      ["a", ["b", "c"]], [["d"], "e"] => ["a", ["b", "cd"], "e"]

      # Non-overlapping object fields are combined.
      {"a": "1"}, {"b": "2"} => {"a": "1", "b": 2"}

      # Overlapping object fields are merged.
      {"a": "1"}, {"a": "2"} => {"a": "12"}

      # Examples of merging objects containing lists of strings.
      {"a": ["1"]}, {"a": ["2"]} => {"a": ["12"]}

  For a more complete example, suppose a streaming SQL query is
  yielding a result set whose rows contain a single string
  field. The following `PartialResultSet`s might be yielded:

      {
        "metadata": { ... }
        "values": ["Hello", "W"]
        "chunked_value": true
        "resume_token": "Af65..."
      }
      {
        "values": ["orl"]
        "chunked_value": true
        "resume_token": "Bqp2..."
      }
      {
        "values": ["d"]
        "resume_token": "Zx1B..."
      }

  This sequence of `PartialResultSet`s encodes two rows, one
  containing the field value `"Hello"`, and a second containing the
  field value `"World" = "W" + "orl" + "d"`.
definitions.PartialResultSet.properties.values.type: array
definitions.PartialResultSet.type: object
definitions.PlanNode.description: Node information for nodes appearing in a QueryPlan.plan_nodes.
definitions.PlanNode.properties.childLinks.description: List of child node `index`es
  and their relationship to this parent.
definitions.PlanNode.properties.childLinks.items.$ref: '#/definitions/ChildLink'
definitions.PlanNode.properties.childLinks.type: array
definitions.PlanNode.properties.displayName.description: The display name for the
  node.
definitions.PlanNode.properties.displayName.type: string
definitions.PlanNode.properties.executionStats.additionalProperties.description: Properties
  of the object.
definitions.PlanNode.properties.executionStats.description: |-
  The execution statistics associated with the node, contained in a group of
  key-value pairs. Only present if the plan was returned as a result of a
  profile query. For example, number of executions, number of rows/time per
  execution etc.
definitions.PlanNode.properties.executionStats.type: object
definitions.PlanNode.properties.index.description: The `PlanNode`'s index in node
  list.
definitions.PlanNode.properties.index.format: int32
definitions.PlanNode.properties.index.type: integer
definitions.PlanNode.properties.kind.description: |-
  Used to determine the type of node. May be needed for visualizing
  different kinds of nodes differently. For example, If the node is a
  SCALAR node, it will have a condensed representation
  which can be used to directly embed a description of the node in its
  parent.
definitions.PlanNode.properties.kind.enum.length: 3
definitions.PlanNode.properties.kind.enum[0]: KIND_UNSPECIFIED
definitions.PlanNode.properties.kind.enum[1]: RELATIONAL
definitions.PlanNode.properties.kind.enum[2]: SCALAR
definitions.PlanNode.properties.kind.type: string
definitions.PlanNode.properties.metadata.additionalProperties.description: Properties
  of the object.
definitions.PlanNode.properties.metadata.description: |-
  Attributes relevant to the node contained in a group of key-value pairs.
  For example, a Parameter Reference node could have the following
  information in its metadata:

      {
        "parameter_reference": "param1",
        "parameter_type": "array"
      }
definitions.PlanNode.properties.metadata.type: object
definitions.PlanNode.properties.shortRepresentation.$ref: '#/definitions/ShortRepresentation'
definitions.PlanNode.properties.shortRepresentation.description: Condensed representation
  for SCALAR nodes.
definitions.PlanNode.type: object
definitions.Policy.description: |-
  Defines an Identity and Access Management (IAM) policy. It is used to
  specify access control policies for Cloud Platform resources.


  A `Policy` consists of a list of `bindings`. A `Binding` binds a list of
  `members` to a `role`, where the members can be user accounts, Google groups,
  Google domains, and service accounts. A `role` is a named list of permissions
  defined by IAM.

  **Example**

      {
        "bindings": [
          {
            "role": "roles/owner",
            "members": [
              "user:mike@example.com",
              "group:admins@example.com",
              "domain:google.com",
              "serviceAccount:my-other-app@appspot.gserviceaccount.com",
            ]
          },
          {
            "role": "roles/viewer",
            "members": ["user:sean@example.com"]
          }
        ]
      }

  For a description of IAM and its features, see the
  [IAM developer's guide](https://cloud.google.com/iam).
definitions.Policy.properties.bindings.description: |-
  Associates a list of `members` to a `role`.
  `bindings` with no members will result in an error.
definitions.Policy.properties.bindings.items.$ref: '#/definitions/Binding'
definitions.Policy.properties.bindings.type: array
definitions.Policy.properties.etag.description: |-
  `etag` is used for optimistic concurrency control as a way to help
  prevent simultaneous updates of a policy from overwriting each other.
  It is strongly suggested that systems make use of the `etag` in the
  read-modify-write cycle to perform policy updates in order to avoid race
  conditions: An `etag` is returned in the response to `getIamPolicy`, and
  systems are expected to put that etag in the request to `setIamPolicy` to
  ensure that their change will be applied to the same version of the policy.

  If no `etag` is provided in the call to `setIamPolicy`, then the existing
  policy is overwritten blindly.
definitions.Policy.properties.etag.format: byte
definitions.Policy.properties.etag.type: string
definitions.Policy.properties.version.description: Version of the `Policy`. The default
  version is 0.
definitions.Policy.properties.version.format: int32
definitions.Policy.properties.version.type: integer
definitions.Policy.type: object
definitions.QueryPlan.description: Contains an ordered list of nodes appearing in
  the query plan.
definitions.QueryPlan.properties.planNodes.description: |-
  The nodes in the query plan. Plan nodes are returned in pre-order starting
  with the plan root. Each PlanNode's `id` corresponds to its index in
  `plan_nodes`.
definitions.QueryPlan.properties.planNodes.items.$ref: '#/definitions/PlanNode'
definitions.QueryPlan.properties.planNodes.type: array
definitions.QueryPlan.type: object
definitions.ReadOnly.description: Message type to initiate a read-only transaction.
definitions.ReadOnly.properties.exactStaleness.description: |-
  Executes all reads at a timestamp that is `exact_staleness`
  old. The timestamp is chosen soon after the read is started.

  Guarantees that all writes that have committed more than the
  specified number of seconds ago are visible. Because Cloud Spanner
  chooses the exact timestamp, this mode works even if the client's
  local clock is substantially skewed from Cloud Spanner commit
  timestamps.

  Useful for reading at nearby replicas without the distributed
  timestamp negotiation overhead of `max_staleness`.
definitions.ReadOnly.properties.exactStaleness.format: google-duration
definitions.ReadOnly.properties.exactStaleness.type: string
definitions.ReadOnly.properties.maxStaleness.description: |-
  Read data at a timestamp >= `NOW - max_staleness`
  seconds. Guarantees that all writes that have committed more
  than the specified number of seconds ago are visible. Because
  Cloud Spanner chooses the exact timestamp, this mode works even if
  the client's local clock is substantially skewed from Cloud Spanner
  commit timestamps.

  Useful for reading the freshest data available at a nearby
  replica, while bounding the possible staleness if the local
  replica has fallen behind.

  Note that this option can only be used in single-use
  transactions.
definitions.ReadOnly.properties.maxStaleness.format: google-duration
definitions.ReadOnly.properties.maxStaleness.type: string
definitions.ReadOnly.properties.minReadTimestamp.description: |-
  Executes all reads at a timestamp >= `min_read_timestamp`.

  This is useful for requesting fresher data than some previous
  read, or data that is fresh enough to observe the effects of some
  previously committed transaction whose timestamp is known.

  Note that this option can only be used in single-use transactions.
definitions.ReadOnly.properties.minReadTimestamp.format: google-datetime
definitions.ReadOnly.properties.minReadTimestamp.type: string
definitions.ReadOnly.properties.readTimestamp.description: |-
  Executes all reads at the given timestamp. Unlike other modes,
  reads at a specific timestamp are repeatable; the same read at
  the same timestamp always returns the same data. If the
  timestamp is in the future, the read will block until the
  specified timestamp, modulo the read's deadline.

  Useful for large scale consistent reads such as mapreduces, or
  for coordinating many reads against a consistent snapshot of the
  data.
definitions.ReadOnly.properties.readTimestamp.format: google-datetime
definitions.ReadOnly.properties.readTimestamp.type: string
definitions.ReadOnly.properties.returnReadTimestamp.description: |-
  If true, the Cloud Spanner-selected read timestamp is included in
  the Transaction message that describes the transaction.
definitions.ReadOnly.properties.returnReadTimestamp.type: boolean
definitions.ReadOnly.properties.strong.description: |-
  Read at a timestamp where all previously committed transactions
  are visible.
definitions.ReadOnly.properties.strong.type: boolean
definitions.ReadOnly.type: object
definitions.ReadRequest.description: |-
  The request for Read and
  StreamingRead.
definitions.ReadRequest.properties.columns.description: |-
  The columns of table to be returned for each row matching
  this request.
definitions.ReadRequest.properties.columns.items.type: string
definitions.ReadRequest.properties.columns.type: array
definitions.ReadRequest.properties.index.description: |-
  If non-empty, the name of an index on table. This index is
  used instead of the table primary key when interpreting key_set
  and sorting result rows. See key_set for further information.
definitions.ReadRequest.properties.index.type: string
definitions.ReadRequest.properties.keySet.$ref: '#/definitions/KeySet'
definitions.ReadRequest.properties.keySet.description: |-
  Required. `key_set` identifies the rows to be yielded. `key_set` names the
  primary keys of the rows in table to be yielded, unless index
  is present. If index is present, then key_set instead names
  index keys in index.

  Rows are yielded in table primary key order (if index is empty)
  or index key order (if index is non-empty).

  It is not an error for the `key_set` to name rows that do not
  exist in the database. Read yields nothing for nonexistent rows.
definitions.ReadRequest.properties.limit.description: |-
  If greater than zero, only the first `limit` rows are yielded. If `limit`
  is zero, the default is no limit.
  A limit cannot be specified if partition_token is set.
definitions.ReadRequest.properties.limit.format: int64
definitions.ReadRequest.properties.limit.type: string
definitions.ReadRequest.properties.resumeToken.description: |-
  If this request is resuming a previously interrupted read,
  `resume_token` should be copied from the last
  PartialResultSet yielded before the interruption. Doing this
  enables the new read to resume where the last read left off. The
  rest of the request parameters must exactly match the request
  that yielded this token.
definitions.ReadRequest.properties.resumeToken.format: byte
definitions.ReadRequest.properties.resumeToken.type: string
definitions.ReadRequest.properties.table.description: Required. The name of the table
  in the database to be read.
definitions.ReadRequest.properties.table.type: string
definitions.ReadRequest.properties.transaction.$ref: '#/definitions/TransactionSelector'
definitions.ReadRequest.properties.transaction.description: |-
  The transaction to use. If none is provided, the default is a
  temporary read-only transaction with strong concurrency.
definitions.ReadRequest.type: object
definitions.ReadWrite.description: |-
  Message type to initiate a read-write transaction. Currently this
  transaction type has no options.
definitions.ReadWrite.type: object
definitions.ResultSet.description: |-
  Results from Read or
  ExecuteSql.
definitions.ResultSet.properties.metadata.$ref: '#/definitions/ResultSetMetadata'
definitions.ResultSet.properties.metadata.description: Metadata about the result set,
  such as row type information.
definitions.ResultSet.properties.rows.description: |-
  Each element in `rows` is a row whose format is defined by
  metadata.row_type. The ith element
  in each row matches the ith field in
  metadata.row_type. Elements are
  encoded based on type as described
  here.
definitions.ResultSet.properties.rows.items.type: array
definitions.ResultSet.properties.rows.type: array
definitions.ResultSet.properties.stats.$ref: '#/definitions/ResultSetStats'
definitions.ResultSet.properties.stats.description: |-
  Query plan and execution statistics for the query that produced this
  result set. These can be requested by setting
  ExecuteSqlRequest.query_mode.
definitions.ResultSet.type: object
definitions.ResultSetMetadata.description: Metadata about a ResultSet or PartialResultSet.
definitions.ResultSetMetadata.properties.rowType.$ref: '#/definitions/StructType'
definitions.ResultSetMetadata.properties.rowType.description: |-
  Indicates the field names and types for the rows in the result
  set.  For example, a SQL query like `"SELECT UserId, UserName FROM
  Users"` could return a `row_type` value like:

      "fields": [
        { "name": "UserId", "type": { "code": "INT64" } },
        { "name": "UserName", "type": { "code": "STRING" } },
      ]
definitions.ResultSetMetadata.properties.transaction.$ref: '#/definitions/Transaction'
definitions.ResultSetMetadata.properties.transaction.description: |-
  If the read or SQL query began a transaction as a side-effect, the
  information about the new transaction is yielded here.
definitions.ResultSetMetadata.type: object
definitions.ResultSetStats.description: Additional statistics about a ResultSet or
  PartialResultSet.
definitions.ResultSetStats.properties.queryPlan.$ref: '#/definitions/QueryPlan'
definitions.ResultSetStats.properties.queryPlan.description: QueryPlan for the query
  associated with this result.
definitions.ResultSetStats.properties.queryStats.additionalProperties.description: Properties
  of the object.
definitions.ResultSetStats.properties.queryStats.description: |-
  Aggregated statistics from the execution of the query. Only present when
  the query is profiled. For example, a query could return the statistics as
  follows:

      {
        "rows_returned": "3",
        "elapsed_time": "1.22 secs",
        "cpu_time": "1.19 secs"
      }
definitions.ResultSetStats.properties.queryStats.type: object
definitions.ResultSetStats.type: object
definitions.RollbackRequest.description: The request for Rollback.
definitions.RollbackRequest.properties.transactionId.description: Required. The transaction
  to roll back.
definitions.RollbackRequest.properties.transactionId.format: byte
definitions.RollbackRequest.properties.transactionId.type: string
definitions.RollbackRequest.type: object
definitions.Session.description: A session in the Cloud Spanner API.
definitions.Session.properties.approximateLastUseTime.description: |-
  Output only. The approximate timestamp when the session is last used. It is
  typically earlier than the actual last use time.
definitions.Session.properties.approximateLastUseTime.format: google-datetime
definitions.Session.properties.approximateLastUseTime.type: string
definitions.Session.properties.createTime.description: Output only. The timestamp
  when the session is created.
definitions.Session.properties.createTime.format: google-datetime
definitions.Session.properties.createTime.type: string
definitions.Session.properties.labels.additionalProperties.type: string
definitions.Session.properties.labels.description: |-
  The labels for the session.

   * Label keys must be between 1 and 63 characters long and must conform to
     the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`.
   * Label values must be between 0 and 63 characters long and must conform
     to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`.
   * No more than 20 labels can be associated with a given session.
definitions.Session.properties.labels.type: object
definitions.Session.properties.name.description: The name of the session.
definitions.Session.properties.name.type: string
definitions.Session.type: object
definitions.SetIamPolicyRequest.description: Request message for `SetIamPolicy` method.
definitions.SetIamPolicyRequest.properties.policy.$ref: '#/definitions/Policy'
definitions.SetIamPolicyRequest.properties.policy.description: |-
  REQUIRED: The complete policy to be applied to the `resource`. The size of
  the policy is limited to a few 10s of KB. An empty policy is a
  valid policy but certain Cloud Platform services (such as Projects)
  might reject them.
definitions.SetIamPolicyRequest.type: object
definitions.ShortRepresentation.description: |-
  Condensed representation of a node and its subtree. Only present for
  `SCALAR` PlanNode(s).
definitions.ShortRepresentation.properties.description.description: A string representation
  of the expression subtree rooted at this node.
definitions.ShortRepresentation.properties.description.type: string
definitions.ShortRepresentation.properties.subqueries.additionalProperties.format: int32
definitions.ShortRepresentation.properties.subqueries.additionalProperties.type: integer
definitions.ShortRepresentation.properties.subqueries.description: |-
  A mapping of (subquery variable name) -> (subquery node id) for cases
  where the `description` string of this node references a `SCALAR`
  subquery contained in the expression subtree rooted at this node. The
  referenced `SCALAR` subquery may not necessarily be a direct child of
  this node.
definitions.ShortRepresentation.properties.subqueries.type: object
definitions.ShortRepresentation.type: object
definitions.Status.description: |-
  The `Status` type defines a logical error model that is suitable for different
  programming environments, including REST APIs and RPC APIs. It is used by
  [gRPC](https://github.com/grpc). The error model is designed to be:

  - Simple to use and understand for most users
  - Flexible enough to meet unexpected needs

  # Overview

  The `Status` message contains three pieces of data: error code, error message,
  and error details. The error code should be an enum value of
  google.rpc.Code, but it may accept additional error codes if needed.  The
  error message should be a developer-facing English message that helps
  developers *understand* and *resolve* the error. If a localized user-facing
  error message is needed, put the localized message in the error details or
  localize it in the client. The optional error details may contain arbitrary
  information about the error. There is a predefined set of error detail types
  in the package `google.rpc` that can be used for common error conditions.

  # Language mapping

  The `Status` message is the logical representation of the error model, but it
  is not necessarily the actual wire format. When the `Status` message is
  exposed in different client libraries and different wire protocols, it can be
  mapped differently. For example, it will likely be mapped to some exceptions
  in Java, but more likely mapped to some error codes in C.

  # Other uses

  The error model and the `Status` message can be used in a variety of
  environments, either with or without APIs, to provide a
  consistent developer experience across different environments.

  Example uses of this error model include:

  - Partial errors. If a service needs to return partial errors to the client,
      it may embed the `Status` in the normal response to indicate the partial
      errors.

  - Workflow errors. A typical workflow has multiple steps. Each step may
      have a `Status` message for error reporting.

  - Batch operations. If a client uses batch request and batch response, the
      `Status` message should be used directly inside batch response, one for
      each error sub-response.

  - Asynchronous operations. If an API call embeds asynchronous operation
      results in its response, the status of those operations should be
      represented directly using the `Status` message.

  - Logging. If some API errors are stored in logs, the message `Status` could
      be used directly after any stripping needed for security/privacy reasons.
definitions.Status.properties.code.description: The status code, which should be an
  enum value of google.rpc.Code.
definitions.Status.properties.code.format: int32
definitions.Status.properties.code.type: integer
definitions.Status.properties.details.description: |-
  A list of messages that carry the error details.  There is a common set of
  message types for APIs to use.
definitions.Status.properties.details.items.additionalProperties.description: Properties
  of the object. Contains field @type with type URL.
definitions.Status.properties.details.items.type: object
definitions.Status.properties.details.type: array
definitions.Status.properties.message.description: |-
  A developer-facing error message, which should be in English. Any
  user-facing error message should be localized and sent in the
  google.rpc.Status.details field, or localized by the client.
definitions.Status.properties.message.type: string
definitions.Status.type: object
definitions.StructType.description: '`StructType` defines the fields of a STRUCT type.'
definitions.StructType.properties.fields.description: |-
  The list of fields that make up this struct. Order is
  significant, because values of this struct type are represented as
  lists, where the order of field values matches the order of
  fields in the StructType. In turn, the order of fields
  matches the order of columns in a read request, or the order of
  fields in the `SELECT` clause of a query.
definitions.StructType.properties.fields.items.$ref: '#/definitions/Field'
definitions.StructType.properties.fields.type: array
definitions.StructType.type: object
definitions.TestIamPermissionsRequest.description: Request message for `TestIamPermissions`
  method.
definitions.TestIamPermissionsRequest.properties.permissions.description: |-
  REQUIRED: The set of permissions to check for 'resource'.
  Permissions with wildcards (such as '*', 'spanner.*', 'spanner.instances.*') are not allowed.
definitions.TestIamPermissionsRequest.properties.permissions.items.type: string
definitions.TestIamPermissionsRequest.properties.permissions.type: array
definitions.TestIamPermissionsRequest.type: object
definitions.TestIamPermissionsResponse.description: Response message for `TestIamPermissions`
  method.
definitions.TestIamPermissionsResponse.properties.permissions.description: |-
  A subset of `TestPermissionsRequest.permissions` that the caller is
  allowed.
definitions.TestIamPermissionsResponse.properties.permissions.items.type: string
definitions.TestIamPermissionsResponse.properties.permissions.type: array
definitions.TestIamPermissionsResponse.type: object
definitions.Transaction.description: A transaction.
definitions.Transaction.properties.id.description: |-
  `id` may be used to identify the transaction in subsequent
  Read,
  ExecuteSql,
  Commit, or
  Rollback calls.

  Single-use read-only transactions do not have IDs, because
  single-use transactions do not support multiple requests.
definitions.Transaction.properties.id.format: byte
definitions.Transaction.properties.id.type: string
definitions.Transaction.properties.readTimestamp.description: |-
  For snapshot read-only transactions, the read timestamp chosen
  for the transaction. Not returned by default: see
  TransactionOptions.ReadOnly.return_read_timestamp.
definitions.Transaction.properties.readTimestamp.format: google-datetime
definitions.Transaction.properties.readTimestamp.type: string
definitions.Transaction.type: object
definitions.TransactionOptions.description: |-
  # Transactions


  Each session can have at most one active transaction at a time. After the
  active transaction is completed, the session can immediately be
  re-used for the next transaction. It is not necessary to create a
  new session for each transaction.

  # Transaction Modes

  Cloud Spanner supports two transaction modes:

    1. Locking read-write. This type of transaction is the only way
       to write data into Cloud Spanner. These transactions rely on
       pessimistic locking and, if necessary, two-phase commit.
       Locking read-write transactions may abort, requiring the
       application to retry.

    2. Snapshot read-only. This transaction type provides guaranteed
       consistency across several reads, but does not allow
       writes. Snapshot read-only transactions can be configured to
       read at timestamps in the past. Snapshot read-only
       transactions do not need to be committed.

  For transactions that only read, snapshot read-only transactions
  provide simpler semantics and are almost always faster. In
  particular, read-only transactions do not take locks, so they do
  not conflict with read-write transactions. As a consequence of not
  taking locks, they also do not abort, so retry loops are not needed.

  Transactions may only read/write data in a single database. They
  may, however, read/write data in different tables within that
  database.

  ## Locking Read-Write Transactions

  Locking transactions may be used to atomically read-modify-write
  data anywhere in a database. This type of transaction is externally
  consistent.

  Clients should attempt to minimize the amount of time a transaction
  is active. Faster transactions commit with higher probability
  and cause less contention. Cloud Spanner attempts to keep read locks
  active as long as the transaction continues to do reads, and the
  transaction has not been terminated by
  Commit or
  Rollback.  Long periods of
  inactivity at the client may cause Cloud Spanner to release a
  transaction's locks and abort it.

  Reads performed within a transaction acquire locks on the data
  being read. Writes can only be done at commit time, after all reads
  have been completed.
  Conceptually, a read-write transaction consists of zero or more
  reads or SQL queries followed by
  Commit. At any time before
  Commit, the client can send a
  Rollback request to abort the
  transaction.

  ### Semantics

  Cloud Spanner can commit the transaction if all read locks it acquired
  are still valid at commit time, and it is able to acquire write
  locks for all writes. Cloud Spanner can abort the transaction for any
  reason. If a commit attempt returns `ABORTED`, Cloud Spanner guarantees
  that the transaction has not modified any user data in Cloud Spanner.

  Unless the transaction commits, Cloud Spanner makes no guarantees about
  how long the transaction's locks were held for. It is an error to
  use Cloud Spanner locks for any sort of mutual exclusion other than
  between Cloud Spanner transactions themselves.

  ### Retrying Aborted Transactions

  When a transaction aborts, the application can choose to retry the
  whole transaction again. To maximize the chances of successfully
  committing the retry, the client should execute the retry in the
  same session as the original attempt. The original session's lock
  priority increases with each consecutive abort, meaning that each
  attempt has a slightly better chance of success than the previous.

  Under some circumstances (e.g., many transactions attempting to
  modify the same row(s)), a transaction can abort many times in a
  short period before successfully committing. Thus, it is not a good
  idea to cap the number of retries a transaction can attempt;
  instead, it is better to limit the total amount of wall time spent
  retrying.

  ### Idle Transactions

  A transaction is considered idle if it has no outstanding reads or
  SQL queries and has not started a read or SQL query within the last 10
  seconds. Idle transactions can be aborted by Cloud Spanner so that they
  don't hold on to locks indefinitely. In that case, the commit will
  fail with error `ABORTED`.

  If this behavior is undesirable, periodically executing a simple
  SQL query in the transaction (e.g., `SELECT 1`) prevents the
  transaction from becoming idle.

  ## Snapshot Read-Only Transactions

  Snapshot read-only transactions provides a simpler method than
  locking read-write transactions for doing several consistent
  reads. However, this type of transaction does not support writes.

  Snapshot transactions do not take locks. Instead, they work by
  choosing a Cloud Spanner timestamp, then executing all reads at that
  timestamp. Since they do not acquire locks, they do not block
  concurrent read-write transactions.

  Unlike locking read-write transactions, snapshot read-only
  transactions never abort. They can fail if the chosen read
  timestamp is garbage collected; however, the default garbage
  collection policy is generous enough that most applications do not
  need to worry about this in practice.

  Snapshot read-only transactions do not need to call
  Commit or
  Rollback (and in fact are not
  permitted to do so).

  To execute a snapshot transaction, the client specifies a timestamp
  bound, which tells Cloud Spanner how to choose a read timestamp.

  The types of timestamp bound are:

    - Strong (the default).
    - Bounded staleness.
    - Exact staleness.

  If the Cloud Spanner database to be read is geographically distributed,
  stale read-only transactions can execute more quickly than strong
  or read-write transaction, because they are able to execute far
  from the leader replica.

  Each type of timestamp bound is discussed in detail below.

  ### Strong

  Strong reads are guaranteed to see the effects of all transactions
  that have committed before the start of the read. Furthermore, all
  rows yielded by a single read are consistent with each other -- if
  any part of the read observes a transaction, all parts of the read
  see the transaction.

  Strong reads are not repeatable: two consecutive strong read-only
  transactions might return inconsistent results if there are
  concurrent writes. If consistency across reads is required, the
  reads should be executed within a transaction or at an exact read
  timestamp.

  See TransactionOptions.ReadOnly.strong.

  ### Exact Staleness

  These timestamp bounds execute reads at a user-specified
  timestamp. Reads at a timestamp are guaranteed to see a consistent
  prefix of the global transaction history: they observe
  modifications done by all transactions with a commit timestamp <=
  the read timestamp, and observe none of the modifications done by
  transactions with a larger commit timestamp. They will block until
  all conflicting transactions that may be assigned commit timestamps
  <= the read timestamp have finished.

  The timestamp can either be expressed as an absolute Cloud Spanner commit
  timestamp or a staleness relative to the current time.

  These modes do not require a "negotiation phase" to pick a
  timestamp. As a result, they execute slightly faster than the
  equivalent boundedly stale concurrency modes. On the other hand,
  boundedly stale reads usually return fresher results.

  See TransactionOptions.ReadOnly.read_timestamp and
  TransactionOptions.ReadOnly.exact_staleness.

  ### Bounded Staleness

  Bounded staleness modes allow Cloud Spanner to pick the read timestamp,
  subject to a user-provided staleness bound. Cloud Spanner chooses the
  newest timestamp within the staleness bound that allows execution
  of the reads at the closest available replica without blocking.

  All rows yielded are consistent with each other -- if any part of
  the read observes a transaction, all parts of the read see the
  transaction. Boundedly stale reads are not repeatable: two stale
  reads, even if they use the same staleness bound, can execute at
  different timestamps and thus return inconsistent results.

  Boundedly stale reads execute in two phases: the first phase
  negotiates a timestamp among all replicas needed to serve the
  read. In the second phase, reads are executed at the negotiated
  timestamp.

  As a result of the two phase execution, bounded staleness reads are
  usually a little slower than comparable exact staleness
  reads. However, they are typically able to return fresher
  results, and are more likely to execute at the closest replica.

  Because the timestamp negotiation requires up-front knowledge of
  which rows will be read, it can only be used with single-use
  read-only transactions.

  See TransactionOptions.ReadOnly.max_staleness and
  TransactionOptions.ReadOnly.min_read_timestamp.

  ### Old Read Timestamps and Garbage Collection

  Cloud Spanner continuously garbage collects deleted and overwritten data
  in the background to reclaim storage space. This process is known
  as "version GC". By default, version GC reclaims versions after they
  are one hour old. Because of this, Cloud Spanner cannot perform reads
  at read timestamps more than one hour in the past. This
  restriction also applies to in-progress reads and/or SQL queries whose
  timestamp become too old while executing. Reads and SQL queries with
  too-old read timestamps fail with the error `FAILED_PRECONDITION`.
definitions.TransactionOptions.properties.readOnly.$ref: '#/definitions/ReadOnly'
definitions.TransactionOptions.properties.readOnly.description: |-
  Transaction will not write.

  Authorization to begin a read-only transaction requires
  `spanner.databases.beginReadOnlyTransaction` permission
  on the `session` resource.
definitions.TransactionOptions.properties.readWrite.$ref: '#/definitions/ReadWrite'
definitions.TransactionOptions.properties.readWrite.description: |-
  Transaction may write.

  Authorization to begin a read-write transaction requires
  `spanner.databases.beginOrRollbackReadWriteTransaction` permission
  on the `session` resource.
definitions.TransactionOptions.type: object
definitions.TransactionSelector.description: |-
  This message is used to select the transaction in which a
  Read or
  ExecuteSql call runs.

  See TransactionOptions for more information about transactions.
definitions.TransactionSelector.properties.begin.$ref: '#/definitions/TransactionOptions'
definitions.TransactionSelector.properties.begin.description: |-
  Begin a new transaction and execute this read or SQL query in
  it. The transaction ID of the new transaction is returned in
  ResultSetMetadata.transaction, which is a Transaction.
definitions.TransactionSelector.properties.id.description: Execute the read or SQL
  query in a previously-started transaction.
definitions.TransactionSelector.properties.id.format: byte
definitions.TransactionSelector.properties.id.type: string
definitions.TransactionSelector.properties.singleUse.$ref: '#/definitions/TransactionOptions'
definitions.TransactionSelector.properties.singleUse.description: |-
  Execute the read or SQL query in a temporary transaction.
  This is the most efficient way to execute a transaction that
  consists of a single SQL query.
definitions.TransactionSelector.type: object
definitions.Type.description: |-
  `Type` indicates the type of a Cloud Spanner value, as might be stored in a
  table cell or returned from an SQL query.
definitions.Type.properties.arrayElementType.$ref: '#/definitions/Type'
definitions.Type.properties.arrayElementType.description: |-
  If code == ARRAY, then `array_element_type`
  is the type of the array elements.
definitions.Type.properties.code.description: Required. The TypeCode for this type.
definitions.Type.properties.code.enum.length: 10
definitions.Type.properties.code.enum[0]: TYPE_CODE_UNSPECIFIED
definitions.Type.properties.code.enum[1]: BOOL
definitions.Type.properties.code.enum[2]: INT64
definitions.Type.properties.code.enum[3]: FLOAT64
definitions.Type.properties.code.enum[4]: TIMESTAMP
definitions.Type.properties.code.enum[5]: DATE
definitions.Type.properties.code.enum[6]: STRING
definitions.Type.properties.code.enum[7]: BYTES
definitions.Type.properties.code.enum[8]: ARRAY
definitions.Type.properties.code.enum[9]: STRUCT
definitions.Type.properties.code.type: string
definitions.Type.properties.structType.$ref: '#/definitions/StructType'
definitions.Type.properties.structType.description: |-
  If code == STRUCT, then `struct_type`
  provides type information for the struct's fields.
definitions.Type.type: object
definitions.UpdateDatabaseDdlMetadata.description: |-
  Metadata type for the operation returned by
  UpdateDatabaseDdl.
definitions.UpdateDatabaseDdlMetadata.properties.commitTimestamps.description: |-
  Reports the commit timestamps of all statements that have
  succeeded so far, where `commit_timestamps[i]` is the commit
  timestamp for the statement `statements[i]`.
definitions.UpdateDatabaseDdlMetadata.properties.commitTimestamps.items.format: google-datetime
definitions.UpdateDatabaseDdlMetadata.properties.commitTimestamps.items.type: string
definitions.UpdateDatabaseDdlMetadata.properties.commitTimestamps.type: array
definitions.UpdateDatabaseDdlMetadata.properties.database.description: The database
  being modified.
definitions.UpdateDatabaseDdlMetadata.properties.database.type: string
definitions.UpdateDatabaseDdlMetadata.properties.statements.description: |-
  For an update this list contains all the statements. For an
  individual statement, this list contains only that statement.
definitions.UpdateDatabaseDdlMetadata.properties.statements.items.type: string
definitions.UpdateDatabaseDdlMetadata.properties.statements.type: array
definitions.UpdateDatabaseDdlMetadata.type: object
definitions.UpdateDatabaseDdlRequest.description: |-
  Enqueues the given DDL statements to be applied, in order but not
  necessarily all at once, to the database schema at some point (or
  points) in the future. The server checks that the statements
  are executable (syntactically valid, name tables that exist, etc.)
  before enqueueing them, but they may still fail upon
  later execution (e.g., if a statement from another batch of
  statements is applied first and it conflicts in some way, or if
  there is some data-related problem like a `NULL` value in a column to
  which `NOT NULL` would be added). If a statement fails, all
  subsequent statements in the batch are automatically cancelled.

  Each batch of statements is assigned a name which can be used with
  the Operations API to monitor
  progress. See the
  operation_id field for more
  details.
definitions.UpdateDatabaseDdlRequest.properties.operationId.description: |-
  If empty, the new update request is assigned an
  automatically-generated operation ID. Otherwise, `operation_id`
  is used to construct the name of the resulting
  Operation.

  Specifying an explicit operation ID simplifies determining
  whether the statements were executed in the event that the
  UpdateDatabaseDdl call is replayed,
  or the return value is otherwise lost: the database and
  `operation_id` fields can be combined to form the
  name of the resulting
  longrunning.Operation: `<database>/operations/<operation_id>`.

  `operation_id` should be unique within the database, and must be
  a valid identifier: `a-z*`. Note that
  automatically-generated operation IDs always begin with an
  underscore. If the named operation already exists,
  UpdateDatabaseDdl returns
  `ALREADY_EXISTS`.
definitions.UpdateDatabaseDdlRequest.properties.operationId.type: string
definitions.UpdateDatabaseDdlRequest.properties.statements.description: DDL statements
  to be applied to the database.
definitions.UpdateDatabaseDdlRequest.properties.statements.items.type: string
definitions.UpdateDatabaseDdlRequest.properties.statements.type: array
definitions.UpdateDatabaseDdlRequest.type: object
definitions.UpdateInstanceMetadata.description: |-
  Metadata type for the operation returned by
  UpdateInstance.
definitions.UpdateInstanceMetadata.properties.cancelTime.description: |-
  The time at which this operation was cancelled. If set, this operation is
  in the process of undoing itself (which is guaranteed to succeed) and
  cannot be cancelled again.
definitions.UpdateInstanceMetadata.properties.cancelTime.format: google-datetime
definitions.UpdateInstanceMetadata.properties.cancelTime.type: string
definitions.UpdateInstanceMetadata.properties.endTime.description: The time at which
  this operation failed or was completed successfully.
definitions.UpdateInstanceMetadata.properties.endTime.format: google-datetime
definitions.UpdateInstanceMetadata.properties.endTime.type: string
definitions.UpdateInstanceMetadata.properties.instance.$ref: '#/definitions/Instance'
definitions.UpdateInstanceMetadata.properties.instance.description: The desired end
  state of the update.
definitions.UpdateInstanceMetadata.properties.startTime.description: |-
  The time at which UpdateInstance
  request was received.
definitions.UpdateInstanceMetadata.properties.startTime.format: google-datetime
definitions.UpdateInstanceMetadata.properties.startTime.type: string
definitions.UpdateInstanceMetadata.type: object
definitions.UpdateInstanceRequest.description: The request for UpdateInstance.
definitions.UpdateInstanceRequest.properties.fieldMask.description: |-
  Required. A mask specifying which fields in [][google.spanner.admin.instance.v1.UpdateInstanceRequest.instance] should be updated.
  The field mask must always be specified; this prevents any future fields in
  [][google.spanner.admin.instance.v1.Instance] from being erased accidentally by clients that do not know
  about them.
definitions.UpdateInstanceRequest.properties.fieldMask.format: google-fieldmask
definitions.UpdateInstanceRequest.properties.fieldMask.type: string
definitions.UpdateInstanceRequest.properties.instance.$ref: '#/definitions/Instance'
definitions.UpdateInstanceRequest.properties.instance.description: |-
  Required. The instance to update, which must always include the instance
  name.  Otherwise, only fields mentioned in [][google.spanner.admin.instance.v1.UpdateInstanceRequest.field_mask] need be included.
definitions.UpdateInstanceRequest.type: object
definitions.Write.description: |-
  Arguments to insert, update, insert_or_update, and
  replace operations.
definitions.Write.properties.columns.description: |-
  The names of the columns in table to be written.

  The list of columns must contain enough columns to allow
  Cloud Spanner to derive values for all primary key columns in the
  row(s) to be modified.
definitions.Write.properties.columns.items.type: string
definitions.Write.properties.columns.type: array
definitions.Write.properties.table.description: Required. The table whose rows will
  be written.
definitions.Write.properties.table.type: string
definitions.Write.properties.values.description: |-
  The values to be written. `values` can contain more than one
  list of values. If it does, then multiple rows are written, one
  for each entry in `values`. Each list in `values` must have
  exactly as many entries as there are entries in columns
  above. Sending multiple lists is equivalent to sending multiple
  `Mutation`s, each containing one `values` entry and repeating
  table and columns. Individual values in each list are
  encoded as described here.
definitions.Write.properties.values.items.type: array
definitions.Write.properties.values.type: array
definitions.Write.type: object
externalDocs.url: https://cloud.google.com/spanner/
host: spanner.googleapis.com
info.contact.name: Google
info.contact.url: https://google.com
info.description: Cloud Spanner is a managed, mission-critical, globally consistent
  and scalable relational database service.
info.title: Cloud Spanner
info.version: v1
info.x-apiClientRegistration.url: https://console.developers.google.com
info.x-logo.url: https://api.apis.guru/v2/cache/logo/https_www.google.com_images_branding_googlelogo_2x_googlelogo_color_272x92dp.png
info.x-origin.length: 1
info.x-origin[0].converter.url: https://github.com/lucybot/api-spec-converter
info.x-origin[0].converter.version: 2.6.0
info.x-origin[0].format: google
info.x-origin[0].url: https://spanner.googleapis.com/$discovery/rest?version=v1
info.x-origin[0].version: v1
info.x-preferred: true
info.x-providerName: googleapis.com
info.x-serviceName: spanner
parameters.$.xgafv.description: V1 error format.
parameters.$.xgafv.enum.length: 2
parameters.$.xgafv.enum[0]: "1"
parameters.$.xgafv.enum[1]: "2"
parameters.$.xgafv.in: query
parameters.$.xgafv.name: $.xgafv
parameters.$.xgafv.type: string
parameters.access_token.description: OAuth access token.
parameters.access_token.in: query
parameters.access_token.name: access_token
parameters.access_token.type: string
parameters.alt.default: json
parameters.alt.description: Data format for response.
parameters.alt.enum.length: 3
parameters.alt.enum[0]: json
parameters.alt.enum[1]: media
parameters.alt.enum[2]: proto
parameters.alt.in: query
parameters.alt.name: alt
parameters.alt.type: string
parameters.bearer_token.description: OAuth bearer token.
parameters.bearer_token.in: query
parameters.bearer_token.name: bearer_token
parameters.bearer_token.type: string
parameters.callback.description: JSONP
parameters.callback.in: query
parameters.callback.name: callback
parameters.callback.type: string
parameters.fields.description: Selector specifying which fields to include in a partial
  response.
parameters.fields.in: query
parameters.fields.name: fields
parameters.fields.type: string
parameters.key.description: API key. Your API key identifies your project and provides
  you with API access, quota, and reports. Required unless you provide an OAuth 2.0
  token.
parameters.key.in: query
parameters.key.name: key
parameters.key.type: string
parameters.oauth_token.description: OAuth 2.0 token for the current user.
parameters.oauth_token.in: query
parameters.oauth_token.name: oauth_token
parameters.oauth_token.type: string
parameters.pp.default: true
parameters.pp.description: Pretty-print response.
parameters.pp.in: query
parameters.pp.name: pp
parameters.pp.type: boolean
parameters.prettyPrint.default: true
parameters.prettyPrint.description: Returns response with indentations and line breaks.
parameters.prettyPrint.in: query
parameters.prettyPrint.name: prettyPrint
parameters.prettyPrint.type: boolean
parameters.quotaUser.description: Available to use for quota purposes for server-side
  applications. Can be any arbitrary string assigned to a user, but should not exceed
  40 characters.
parameters.quotaUser.in: query
parameters.quotaUser.name: quotaUser
parameters.quotaUser.type: string
parameters.upload_protocol.description: Upload protocol for media (e.g. "raw", "multipart").
parameters.upload_protocol.in: query
parameters.upload_protocol.name: upload_protocol
parameters.upload_protocol.type: string
parameters.uploadType.description: Legacy upload protocol for media (e.g. "media",
  "multipart").
parameters.uploadType.in: query
parameters.uploadType.name: uploadType
parameters.uploadType.type: string
paths./v1/{database}.delete.description: Drops (aka deletes) a Cloud Spanner database.
paths./v1/{database}.delete.operationId: spanner.projects.instances.databases.dropDatabase
paths./v1/{database}.delete.parameters.length: 1
paths./v1/{database}.delete.parameters[0].description: Required. The database to be
  dropped.
paths./v1/{database}.delete.parameters[0].in: path
paths./v1/{database}.delete.parameters[0].name: database
paths./v1/{database}.delete.parameters[0].required: true
paths./v1/{database}.delete.parameters[0].type: string
paths./v1/{database}.delete.parameters[0].x-reservedExpansion: true
paths./v1/{database}.delete.responses.200.description: Successful response
paths./v1/{database}.delete.responses.200.schema.$ref: '#/definitions/Empty'
paths./v1/{database}.delete.security.length: 2
paths./v1/{database}.delete.security[0].Oauth2.length: 1
paths./v1/{database}.delete.security[0].Oauth2[0]: https://www.googleapis.com/auth/cloud-platform
paths./v1/{database}.delete.security[1].Oauth2.length: 1
paths./v1/{database}.delete.security[1].Oauth2[0]: https://www.googleapis.com/auth/spanner.admin
paths./v1/{database}.delete.tags.length: 1
paths./v1/{database}.delete.tags[0]: projects
paths./v1/{database}.parameters.length: 13
paths./v1/{database}.parameters[0].$ref: '#/parameters/fields'
paths./v1/{database}.parameters[1].$ref: '#/parameters/uploadType'
paths./v1/{database}.parameters[2].$ref: '#/parameters/$.xgafv'
paths./v1/{database}.parameters[3].$ref: '#/parameters/callback'
paths./v1/{database}.parameters[4].$ref: '#/parameters/alt'
paths./v1/{database}.parameters[5].$ref: '#/parameters/key'
paths./v1/{database}.parameters[6].$ref: '#/parameters/access_token'
paths./v1/{database}.parameters[7].$ref: '#/parameters/quotaUser'
paths./v1/{database}.parameters[8].$ref: '#/parameters/pp'
paths./v1/{database}.parameters[9].$ref: '#/parameters/oauth_token'
paths./v1/{database}.parameters[10].$ref: '#/parameters/bearer_token'
paths./v1/{database}.parameters[11].$ref: '#/parameters/upload_protocol'
paths./v1/{database}.parameters[12].$ref: '#/parameters/prettyPrint'
paths./v1/{database}/ddl.get.description: |-
  Returns the schema of a Cloud Spanner database as a list of formatted
  DDL statements. This method does not show pending schema updates, those may
  be queried using the Operations API.
paths./v1/{database}/ddl.get.operationId: spanner.projects.instances.databases.getDdl
paths./v1/{database}/ddl.get.parameters.length: 1
paths./v1/{database}/ddl.get.parameters[0].description: Required. The database whose
  schema we wish to get.
paths./v1/{database}/ddl.get.parameters[0].in: path
paths./v1/{database}/ddl.get.parameters[0].name: database
paths./v1/{database}/ddl.get.parameters[0].required: true
paths./v1/{database}/ddl.get.parameters[0].type: string
paths./v1/{database}/ddl.get.parameters[0].x-reservedExpansion: true
paths./v1/{database}/ddl.get.responses.200.description: Successful response
paths./v1/{database}/ddl.get.responses.200.schema.$ref: '#/definitions/GetDatabaseDdlResponse'
paths./v1/{database}/ddl.get.security.length: 2
paths./v1/{database}/ddl.get.security[0].Oauth2.length: 1
paths./v1/{database}/ddl.get.security[0].Oauth2[0]: https://www.googleapis.com/auth/cloud-platform
paths./v1/{database}/ddl.get.security[1].Oauth2.length: 1
paths./v1/{database}/ddl.get.security[1].Oauth2[0]: https://www.googleapis.com/auth/spanner.admin
paths./v1/{database}/ddl.get.tags.length: 1
paths./v1/{database}/ddl.get.tags[0]: projects
paths./v1/{database}/ddl.parameters.length: 13
paths./v1/{database}/ddl.parameters[0].$ref: '#/parameters/fields'
paths./v1/{database}/ddl.parameters[1].$ref: '#/parameters/uploadType'
paths./v1/{database}/ddl.parameters[2].$ref: '#/parameters/$.xgafv'
paths./v1/{database}/ddl.parameters[3].$ref: '#/parameters/callback'
paths./v1/{database}/ddl.parameters[4].$ref: '#/parameters/alt'
paths./v1/{database}/ddl.parameters[5].$ref: '#/parameters/key'
paths./v1/{database}/ddl.parameters[6].$ref: '#/parameters/access_token'
paths./v1/{database}/ddl.parameters[7].$ref: '#/parameters/quotaUser'
paths./v1/{database}/ddl.parameters[8].$ref: '#/parameters/pp'
paths./v1/{database}/ddl.parameters[9].$ref: '#/parameters/oauth_token'
paths./v1/{database}/ddl.parameters[10].$ref: '#/parameters/bearer_token'
paths./v1/{database}/ddl.parameters[11].$ref: '#/parameters/upload_protocol'
paths./v1/{database}/ddl.parameters[12].$ref: '#/parameters/prettyPrint'
paths./v1/{database}/ddl.patch.description: |-
  Updates the schema of a Cloud Spanner database by
  creating/altering/dropping tables, columns, indexes, etc. The returned
  long-running operation will have a name of
  the format `<database_name>/operations/<operation_id>` and can be used to
  track execution of the schema change(s). The
  metadata field type is
  UpdateDatabaseDdlMetadata.  The operation has no response.
paths./v1/{database}/ddl.patch.operationId: spanner.projects.instances.databases.updateDdl
paths./v1/{database}/ddl.patch.parameters.length: 2
paths./v1/{database}/ddl.patch.parameters[0].description: Required. The database to
  update.
paths./v1/{database}/ddl.patch.parameters[0].in: path
paths./v1/{database}/ddl.patch.parameters[0].name: database
paths./v1/{database}/ddl.patch.parameters[0].required: true
paths./v1/{database}/ddl.patch.parameters[0].type: string
paths./v1/{database}/ddl.patch.parameters[0].x-reservedExpansion: true
paths./v1/{database}/ddl.patch.parameters[1].in: body
paths./v1/{database}/ddl.patch.parameters[1].name: body
paths./v1/{database}/ddl.patch.parameters[1].schema.$ref: '#/definitions/UpdateDatabaseDdlRequest'
paths./v1/{database}/ddl.patch.responses.200.description: Successful response
paths./v1/{database}/ddl.patch.responses.200.schema.$ref: '#/definitions/Operation'
paths./v1/{database}/ddl.patch.security.length: 2
paths./v1/{database}/ddl.patch.security[0].Oauth2.length: 1
paths./v1/{database}/ddl.patch.security[0].Oauth2[0]: https://www.googleapis.com/auth/cloud-platform
paths./v1/{database}/ddl.patch.security[1].Oauth2.length: 1
paths./v1/{database}/ddl.patch.security[1].Oauth2[0]: https://www.googleapis.com/auth/spanner.admin
paths./v1/{database}/ddl.patch.tags.length: 1
paths./v1/{database}/ddl.patch.tags[0]: projects
paths./v1/{database}/sessions.get.description: Lists all sessions in a given database.
paths./v1/{database}/sessions.get.operationId: spanner.projects.instances.databases.sessions.list
paths./v1/{database}/sessions.get.parameters.length: 4
paths./v1/{database}/sessions.get.parameters[0].description: Required. The database
  in which to list sessions.
paths./v1/{database}/sessions.get.parameters[0].in: path
paths./v1/{database}/sessions.get.parameters[0].name: database
paths./v1/{database}/sessions.get.parameters[0].required: true
paths./v1/{database}/sessions.get.parameters[0].type: string
paths./v1/{database}/sessions.get.parameters[0].x-reservedExpansion: true
paths./v1/{database}/sessions.get.parameters[1].description: |-
  An expression for filtering the results of the request. Filter rules are
  case insensitive. The fields eligible for filtering are:

    * labels.key where key is the name of a label

  Some examples of using filters are:

    * labels.env:* --> The session has the label "env".
    * labels.env:dev --> The session has the label "env" and the value of
                         the label contains the string "dev".
paths./v1/{database}/sessions.get.parameters[1].in: query
paths./v1/{database}/sessions.get.parameters[1].name: filter
paths./v1/{database}/sessions.get.parameters[1].type: string
paths./v1/{database}/sessions.get.parameters[2].description: |-
  Number of sessions to be returned in the response. If 0 or less, defaults
  to the server's maximum allowed page size.
paths./v1/{database}/sessions.get.parameters[2].in: query
paths./v1/{database}/sessions.get.parameters[2].name: pageSize
paths./v1/{database}/sessions.get.parameters[2].type: integer
paths./v1/{database}/sessions.get.parameters[3].description: |-
  If non-empty, `page_token` should contain a
  next_page_token from a previous
  ListSessionsResponse.
paths./v1/{database}/sessions.get.parameters[3].in: query
paths./v1/{database}/sessions.get.parameters[3].name: pageToken
paths./v1/{database}/sessions.get.parameters[3].type: string
paths./v1/{database}/sessions.get.responses.200.description: Successful response
paths./v1/{database}/sessions.get.responses.200.schema.$ref: '#/definitions/ListSessionsResponse'
paths./v1/{database}/sessions.get.security.length: 2
paths./v1/{database}/sessions.get.security[0].Oauth2.length: 1
paths./v1/{database}/sessions.get.security[0].Oauth2[0]: https://www.googleapis.com/auth/cloud-platform
paths./v1/{database}/sessions.get.security[1].Oauth2.length: 1
paths./v1/{database}/sessions.get.security[1].Oauth2[0]: https://www.googleapis.com/auth/spanner.data
paths./v1/{database}/sessions.get.tags.length: 1
paths./v1/{database}/sessions.get.tags[0]: projects
paths./v1/{database}/sessions.parameters.length: 13
paths./v1/{database}/sessions.parameters[0].$ref: '#/parameters/fields'
paths./v1/{database}/sessions.parameters[1].$ref: '#/parameters/uploadType'
paths./v1/{database}/sessions.parameters[2].$ref: '#/parameters/$.xgafv'
paths./v1/{database}/sessions.parameters[3].$ref: '#/parameters/callback'
paths./v1/{database}/sessions.parameters[4].$ref: '#/parameters/alt'
paths./v1/{database}/sessions.parameters[5].$ref: '#/parameters/key'
paths./v1/{database}/sessions.parameters[6].$ref: '#/parameters/access_token'
paths./v1/{database}/sessions.parameters[7].$ref: '#/parameters/quotaUser'
paths./v1/{database}/sessions.parameters[8].$ref: '#/parameters/pp'
paths./v1/{database}/sessions.parameters[9].$ref: '#/parameters/oauth_token'
paths./v1/{database}/sessions.parameters[10].$ref: '#/parameters/bearer_token'
paths./v1/{database}/sessions.parameters[11].$ref: '#/parameters/upload_protocol'
paths./v1/{database}/sessions.parameters[12].$ref: '#/parameters/prettyPrint'
paths./v1/{database}/sessions.post.description: |-
  Creates a new session. A session can be used to perform
  transactions that read and/or modify data in a Cloud Spanner database.
  Sessions are meant to be reused for many consecutive
  transactions.

  Sessions can only execute one transaction at a time. To execute
  multiple concurrent read-write/write-only transactions, create
  multiple sessions. Note that standalone reads and queries use a
  transaction internally, and count toward the one transaction
  limit.

  Cloud Spanner limits the number of sessions that can exist at any given
  time; thus, it is a good idea to delete idle and/or unneeded sessions.
  Aside from explicit deletes, Cloud Spanner can delete sessions for which no
  operations are sent for more than an hour. If a session is deleted,
  requests to it return `NOT_FOUND`.

  Idle sessions can be kept alive by sending a trivial SQL query
  periodically, e.g., `"SELECT 1"`.
paths./v1/{database}/sessions.post.operationId: spanner.projects.instances.databases.sessions.create
paths./v1/{database}/sessions.post.parameters.length: 2
paths./v1/{database}/sessions.post.parameters[0].in: body
paths./v1/{database}/sessions.post.parameters[0].name: body
paths./v1/{database}/sessions.post.parameters[0].schema.$ref: '#/definitions/CreateSessionRequest'
paths./v1/{database}/sessions.post.parameters[1].description: Required. The database
  in which the new session is created.
paths./v1/{database}/sessions.post.parameters[1].in: path
paths./v1/{database}/sessions.post.parameters[1].name: database
paths./v1/{database}/sessions.post.parameters[1].required: true
paths./v1/{database}/sessions.post.parameters[1].type: string
paths./v1/{database}/sessions.post.parameters[1].x-reservedExpansion: true
paths./v1/{database}/sessions.post.responses.200.description: Successful response
paths./v1/{database}/sessions.post.responses.200.schema.$ref: '#/definitions/Session'
paths./v1/{database}/sessions.post.security.length: 2
paths./v1/{database}/sessions.post.security[0].Oauth2.length: 1
paths./v1/{database}/sessions.post.security[0].Oauth2[0]: https://www.googleapis.com/auth/cloud-platform
paths./v1/{database}/sessions.post.security[1].Oauth2.length: 1
paths./v1/{database}/sessions.post.security[1].Oauth2[0]: https://www.googleapis.com/auth/spanner.data
paths./v1/{database}/sessions.post.tags.length: 1
paths./v1/{database}/sessions.post.tags[0]: projects
paths./v1/{name}.delete.description: Ends a session, releasing server resources associated
  with it.
paths./v1/{name}.delete.operationId: spanner.projects.instances.databases.sessions.delete
paths./v1/{name}.delete.parameters.length: 1
paths./v1/{name}.delete.parameters[0].description: Required. The name of the session
  to delete.
paths./v1/{name}.delete.parameters[0].in: path
paths./v1/{name}.delete.parameters[0].name: name
paths./v1/{name}.delete.parameters[0].required: true
paths./v1/{name}.delete.parameters[0].type: string
paths./v1/{name}.delete.parameters[0].x-reservedExpansion: true
paths./v1/{name}.delete.responses.200.description: Successful response
paths./v1/{name}.delete.responses.200.schema.$ref: '#/definitions/Empty'
paths./v1/{name}.delete.security.length: 2
paths./v1/{name}.delete.security[0].Oauth2.length: 1
paths./v1/{name}.delete.security[0].Oauth2[0]: https://www.googleapis.com/auth/cloud-platform
paths./v1/{name}.delete.security[1].Oauth2.length: 1
paths./v1/{name}.delete.security[1].Oauth2[0]: https://www.googleapis.com/auth/spanner.data
paths./v1/{name}.delete.tags.length: 1
paths./v1/{name}.delete.tags[0]: projects
paths./v1/{name}.get.description: |-
  Gets a session. Returns `NOT_FOUND` if the session does not exist.
  This is mainly useful for determining whether a session is still
  alive.
paths./v1/{name}.get.operationId: spanner.projects.instances.databases.sessions.get
paths./v1/{name}.get.parameters.length: 1
paths./v1/{name}.get.parameters[0].description: Required. The name of the session
  to retrieve.
paths./v1/{name}.get.parameters[0].in: path
paths./v1/{name}.get.parameters[0].name: name
paths./v1/{name}.get.parameters[0].required: true
paths./v1/{name}.get.parameters[0].type: string
paths./v1/{name}.get.parameters[0].x-reservedExpansion: true
paths./v1/{name}.get.responses.200.description: Successful response
paths./v1/{name}.get.responses.200.schema.$ref: '#/definitions/Session'
paths./v1/{name}.get.security.length: 2
paths./v1/{name}.get.security[0].Oauth2.length: 1
paths./v1/{name}.get.security[0].Oauth2[0]: https://www.googleapis.com/auth/cloud-platform
paths./v1/{name}.get.security[1].Oauth2.length: 1
paths./v1/{name}.get.security[1].Oauth2[0]: https://www.googleapis.com/auth/spanner.data
paths./v1/{name}.get.tags.length: 1
paths./v1/{name}.get.tags[0]: projects
paths./v1/{name}.parameters.length: 13
paths./v1/{name}.parameters[0].$ref: '#/parameters/fields'
paths./v1/{name}.parameters[1].$ref: '#/parameters/uploadType'
paths./v1/{name}.parameters[2].$ref: '#/parameters/$.xgafv'
paths./v1/{name}.parameters[3].$ref: '#/parameters/callback'
paths./v1/{name}.parameters[4].$ref: '#/parameters/alt'
paths./v1/{name}.parameters[5].$ref: '#/parameters/key'
paths./v1/{name}.parameters[6].$ref: '#/parameters/access_token'
paths./v1/{name}.parameters[7].$ref: '#/parameters/quotaUser'
paths./v1/{name}.parameters[8].$ref: '#/parameters/pp'
paths./v1/{name}.parameters[9].$ref: '#/parameters/oauth_token'
paths./v1/{name}.parameters[10].$ref: '#/parameters/bearer_token'
paths./v1/{name}.parameters[11].$ref: '#/parameters/upload_protocol'
paths./v1/{name}.parameters[12].$ref: '#/parameters/prettyPrint'
paths./v1/{name}.patch.description: |-
  Updates an instance, and begins allocating or releasing resources
  as requested. The returned long-running
  operation can be used to track the
  progress of updating the instance. If the named instance does not
  exist, returns `NOT_FOUND`.

  Immediately upon completion of this request:

    * For resource types for which a decrease in the instance's allocation
      has been requested, billing is based on the newly-requested level.

  Until completion of the returned operation:

    * Cancelling the operation sets its metadata's
      cancel_time, and begins
      restoring resources to their pre-request values. The operation
      is guaranteed to succeed at undoing all resource changes,
      after which point it terminates with a `CANCELLED` status.
    * All other attempts to modify the instance are rejected.
    * Reading the instance via the API continues to give the pre-request
      resource levels.

  Upon completion of the returned operation:

    * Billing begins for all successfully-allocated resources (some types
      may have lower than the requested levels).
    * All newly-reserved resources are available for serving the instance's
      tables.
    * The instance's new resource levels are readable via the API.

  The returned long-running operation will
  have a name of the format `<instance_name>/operations/<operation_id>` and
  can be used to track the instance modification.  The
  metadata field type is
  UpdateInstanceMetadata.
  The response field type is
  Instance, if successful.

  Authorization requires `spanner.instances.update` permission on
  resource name.
paths./v1/{name}.patch.operationId: spanner.projects.instances.patch
paths./v1/{name}.patch.parameters.length: 2
paths./v1/{name}.patch.parameters[0].description: |-
  Required. A unique identifier for the instance, which cannot be changed
  after the instance is created. Values are of the form
  `projects/<project>/instances/a-z*[a-z0-9]`. The final
  segment of the name must be between 6 and 30 characters in length.
paths./v1/{name}.patch.parameters[0].in: path
paths./v1/{name}.patch.parameters[0].name: name
paths./v1/{name}.patch.parameters[0].required: true
paths./v1/{name}.patch.parameters[0].type: string
paths./v1/{name}.patch.parameters[0].x-reservedExpansion: true
paths./v1/{name}.patch.parameters[1].in: body
paths./v1/{name}.patch.parameters[1].name: body
paths./v1/{name}.patch.parameters[1].schema.$ref: '#/definitions/UpdateInstanceRequest'
paths./v1/{name}.patch.responses.200.description: Successful response
paths./v1/{name}.patch.responses.200.schema.$ref: '#/definitions/Operation'
paths./v1/{name}.patch.security.length: 2
paths./v1/{name}.patch.security[0].Oauth2.length: 1
paths./v1/{name}.patch.security[0].Oauth2[0]: https://www.googleapis.com/auth/cloud-platform
paths./v1/{name}.patch.security[1].Oauth2.length: 1
paths./v1/{name}.patch.security[1].Oauth2[0]: https://www.googleapis.com/auth/spanner.admin
paths./v1/{name}.patch.tags.length: 1
paths./v1/{name}.patch.tags[0]: projects
paths./v1/{name}:cancel.parameters.length: 13
paths./v1/{name}:cancel.parameters[0].$ref: '#/parameters/fields'
paths./v1/{name}:cancel.parameters[1].$ref: '#/parameters/uploadType'
paths./v1/{name}:cancel.parameters[2].$ref: '#/parameters/$.xgafv'
paths./v1/{name}:cancel.parameters[3].$ref: '#/parameters/callback'
paths./v1/{name}:cancel.parameters[4].$ref: '#/parameters/alt'
paths./v1/{name}:cancel.parameters[5].$ref: '#/parameters/key'
paths./v1/{name}:cancel.parameters[6].$ref: '#/parameters/access_token'
paths./v1/{name}:cancel.parameters[7].$ref: '#/parameters/quotaUser'
paths./v1/{name}:cancel.parameters[8].$ref: '#/parameters/pp'
paths./v1/{name}:cancel.parameters[9].$ref: '#/parameters/oauth_token'
paths./v1/{name}:cancel.parameters[10].$ref: '#/parameters/bearer_token'
paths./v1/{name}:cancel.parameters[11].$ref: '#/parameters/upload_protocol'
paths./v1/{name}:cancel.parameters[12].$ref: '#/parameters/prettyPrint'
paths./v1/{name}:cancel.post.description: |-
  Starts asynchronous cancellation on a long-running operation.  The server
  makes a best effort to cancel the operation, but success is not
  guaranteed.  If the server doesn't support this method, it returns
  `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
  Operations.GetOperation or
  other methods to check whether the cancellation succeeded or whether the
  operation completed despite cancellation. On successful cancellation,
  the operation is not deleted; instead, it becomes an operation with
  an Operation.error value with a google.rpc.Status.code of 1,
  corresponding to `Code.CANCELLED`.
paths./v1/{name}:cancel.post.operationId: spanner.projects.instances.databases.operations.cancel
paths./v1/{name}:cancel.post.parameters.length: 1
paths./v1/{name}:cancel.post.parameters[0].description: The name of the operation
  resource to be cancelled.
paths./v1/{name}:cancel.post.parameters[0].in: path
paths./v1/{name}:cancel.post.parameters[0].name: name
paths./v1/{name}:cancel.post.parameters[0].required: true
paths./v1/{name}:cancel.post.parameters[0].type: string
paths./v1/{name}:cancel.post.parameters[0].x-reservedExpansion: true
paths./v1/{name}:cancel.post.responses.200.description: Successful response
paths./v1/{name}:cancel.post.responses.200.schema.$ref: '#/definitions/Empty'
paths./v1/{name}:cancel.post.security.length: 2
paths./v1/{name}:cancel.post.security[0].Oauth2.length: 1
paths./v1/{name}:cancel.post.security[0].Oauth2[0]: https://www.googleapis.com/auth/cloud-platform
paths./v1/{name}:cancel.post.security[1].Oauth2.length: 1
paths./v1/{name}:cancel.post.security[1].Oauth2[0]: https://www.googleapis.com/auth/spanner.admin
paths./v1/{name}:cancel.post.tags.length: 1
paths./v1/{name}:cancel.post.tags[0]: projects
paths./v1/{parent}/databases.get.description: Lists Cloud Spanner databases.
paths./v1/{parent}/databases.get.operationId: spanner.projects.instances.databases.list
paths./v1/{parent}/databases.get.parameters.length: 3
paths./v1/{parent}/databases.get.parameters[0].description: |-
  Required. The instance whose databases should be listed.
  Values are of the form `projects/<project>/instances/<instance>`.
paths./v1/{parent}/databases.get.parameters[0].in: path
paths./v1/{parent}/databases.get.parameters[0].name: parent
paths./v1/{parent}/databases.get.parameters[0].required: true
paths./v1/{parent}/databases.get.parameters[0].type: string
paths./v1/{parent}/databases.get.parameters[0].x-reservedExpansion: true
paths./v1/{parent}/databases.get.parameters[1].description: |-
  If non-empty, `page_token` should contain a
  next_page_token from a
  previous ListDatabasesResponse.
paths./v1/{parent}/databases.get.parameters[1].in: query
paths./v1/{parent}/databases.get.parameters[1].name: pageToken
paths./v1/{parent}/databases.get.parameters[1].type: string
paths./v1/{parent}/databases.get.parameters[2].description: |-
  Number of databases to be returned in the response. If 0 or less,
  defaults to the server's maximum allowed page size.
paths./v1/{parent}/databases.get.parameters[2].in: query
paths./v1/{parent}/databases.get.parameters[2].name: pageSize
paths./v1/{parent}/databases.get.parameters[2].type: integer
paths./v1/{parent}/databases.get.responses.200.description: Successful response
paths./v1/{parent}/databases.get.responses.200.schema.$ref: '#/definitions/ListDatabasesResponse'
paths./v1/{parent}/databases.get.security.length: 2
paths./v1/{parent}/databases.get.security[0].Oauth2.length: 1
paths./v1/{parent}/databases.get.security[0].Oauth2[0]: https://www.googleapis.com/auth/cloud-platform
paths./v1/{parent}/databases.get.security[1].Oauth2.length: 1
paths./v1/{parent}/databases.get.security[1].Oauth2[0]: https://www.googleapis.com/auth/spanner.admin
paths./v1/{parent}/databases.get.tags.length: 1
paths./v1/{parent}/databases.get.tags[0]: projects
paths./v1/{parent}/databases.parameters.length: 13
paths./v1/{parent}/databases.parameters[0].$ref: '#/parameters/fields'
paths./v1/{parent}/databases.parameters[1].$ref: '#/parameters/uploadType'
paths./v1/{parent}/databases.parameters[2].$ref: '#/parameters/$.xgafv'
paths./v1/{parent}/databases.parameters[3].$ref: '#/parameters/callback'
paths./v1/{parent}/databases.parameters[4].$ref: '#/parameters/alt'
paths./v1/{parent}/databases.parameters[5].$ref: '#/parameters/key'
paths./v1/{parent}/databases.parameters[6].$ref: '#/parameters/access_token'
paths./v1/{parent}/databases.parameters[7].$ref: '#/parameters/quotaUser'
paths./v1/{parent}/databases.parameters[8].$ref: '#/parameters/pp'
paths./v1/{parent}/databases.parameters[9].$ref: '#/parameters/oauth_token'
paths./v1/{parent}/databases.parameters[10].$ref: '#/parameters/bearer_token'
paths./v1/{parent}/databases.parameters[11].$ref: '#/parameters/upload_protocol'
paths./v1/{parent}/databases.parameters[12].$ref: '#/parameters/prettyPrint'
paths./v1/{parent}/databases.post.description: |-
  Creates a new Cloud Spanner database and starts to prepare it for serving.
  The returned long-running operation will
  have a name of the format `<database_name>/operations/<operation_id>` and
  can be used to track preparation of the database. The
  metadata field type is
  CreateDatabaseMetadata. The
  response field type is
  Database, if successful.
paths./v1/{parent}/databases.post.operationId: spanner.projects.instances.databases.create
paths./v1/{parent}/databases.post.parameters.length: 2
paths./v1/{parent}/databases.post.parameters[0].description: |-
  Required. The name of the instance that will serve the new database.
  Values are of the form `projects/<project>/instances/<instance>`.
paths./v1/{parent}/databases.post.parameters[0].in: path
paths./v1/{parent}/databases.post.parameters[0].name: parent
paths./v1/{parent}/databases.post.parameters[0].required: true
paths./v1/{parent}/databases.post.parameters[0].type: string
paths./v1/{parent}/databases.post.parameters[0].x-reservedExpansion: true
paths./v1/{parent}/databases.post.parameters[1].in: body
paths./v1/{parent}/databases.post.parameters[1].name: body
paths./v1/{parent}/databases.post.parameters[1].schema.$ref: '#/definitions/CreateDatabaseRequest'
paths./v1/{parent}/databases.post.responses.200.description: Successful response
paths./v1/{parent}/databases.post.responses.200.schema.$ref: '#/definitions/Operation'
paths./v1/{parent}/databases.post.security.length: 2
paths./v1/{parent}/databases.post.security[0].Oauth2.length: 1
paths./v1/{parent}/databases.post.security[0].Oauth2[0]: https://www.googleapis.com/auth/cloud-platform
paths./v1/{parent}/databases.post.security[1].Oauth2.length: 1
paths./v1/{parent}/databases.post.security[1].Oauth2[0]: https://www.googleapis.com/auth/spanner.admin
paths./v1/{parent}/databases.post.tags.length: 1
paths./v1/{parent}/databases.post.tags[0]: projects
paths./v1/{parent}/instanceConfigs.get.description: Lists the supported instance configurations
  for a given project.
paths./v1/{parent}/instanceConfigs.get.operationId: spanner.projects.instanceConfigs.list
paths./v1/{parent}/instanceConfigs.get.parameters.length: 3
paths./v1/{parent}/instanceConfigs.get.parameters[0].description: |-
  Required. The name of the project for which a list of supported instance
  configurations is requested. Values are of the form
  `projects/<project>`.
paths./v1/{parent}/instanceConfigs.get.parameters[0].in: path
paths./v1/{parent}/instanceConfigs.get.parameters[0].name: parent
paths./v1/{parent}/instanceConfigs.get.parameters[0].required: true
paths./v1/{parent}/instanceConfigs.get.parameters[0].type: string
paths./v1/{parent}/instanceConfigs.get.parameters[0].x-reservedExpansion: true
paths./v1/{parent}/instanceConfigs.get.parameters[1].description: |-
  If non-empty, `page_token` should contain a
  next_page_token
  from a previous ListInstanceConfigsResponse.
paths./v1/{parent}/instanceConfigs.get.parameters[1].in: query
paths./v1/{parent}/instanceConfigs.get.parameters[1].name: pageToken
paths./v1/{parent}/instanceConfigs.get.parameters[1].type: string
paths./v1/{parent}/instanceConfigs.get.parameters[2].description: |-
  Number of instance configurations to be returned in the response. If 0 or
  less, defaults to the server's maximum allowed page size.
paths./v1/{parent}/instanceConfigs.get.parameters[2].in: query
paths./v1/{parent}/instanceConfigs.get.parameters[2].name: pageSize
paths./v1/{parent}/instanceConfigs.get.parameters[2].type: integer
paths./v1/{parent}/instanceConfigs.get.responses.200.description: Successful response
paths./v1/{parent}/instanceConfigs.get.responses.200.schema.$ref: '#/definitions/ListInstanceConfigsResponse'
paths./v1/{parent}/instanceConfigs.get.security.length: 2
paths./v1/{parent}/instanceConfigs.get.security[0].Oauth2.length: 1
paths./v1/{parent}/instanceConfigs.get.security[0].Oauth2[0]: https://www.googleapis.com/auth/cloud-platform
paths./v1/{parent}/instanceConfigs.get.security[1].Oauth2.length: 1
paths./v1/{parent}/instanceConfigs.get.security[1].Oauth2[0]: https://www.googleapis.com/auth/spanner.admin
paths./v1/{parent}/instanceConfigs.get.tags.length: 1
paths./v1/{parent}/instanceConfigs.get.tags[0]: projects
paths./v1/{parent}/instanceConfigs.parameters.length: 13
paths./v1/{parent}/instanceConfigs.parameters[0].$ref: '#/parameters/fields'
paths./v1/{parent}/instanceConfigs.parameters[1].$ref: '#/parameters/uploadType'
paths./v1/{parent}/instanceConfigs.parameters[2].$ref: '#/parameters/$.xgafv'
paths./v1/{parent}/instanceConfigs.parameters[3].$ref: '#/parameters/callback'
paths./v1/{parent}/instanceConfigs.parameters[4].$ref: '#/parameters/alt'
paths./v1/{parent}/instanceConfigs.parameters[5].$ref: '#/parameters/key'
paths./v1/{parent}/instanceConfigs.parameters[6].$ref: '#/parameters/access_token'
paths./v1/{parent}/instanceConfigs.parameters[7].$ref: '#/parameters/quotaUser'
paths./v1/{parent}/instanceConfigs.parameters[8].$ref: '#/parameters/pp'
paths./v1/{parent}/instanceConfigs.parameters[9].$ref: '#/parameters/oauth_token'
paths./v1/{parent}/instanceConfigs.parameters[10].$ref: '#/parameters/bearer_token'
paths./v1/{parent}/instanceConfigs.parameters[11].$ref: '#/parameters/upload_protocol'
paths./v1/{parent}/instanceConfigs.parameters[12].$ref: '#/parameters/prettyPrint'
paths./v1/{parent}/instances.get.description: Lists all instances in the given project.
paths./v1/{parent}/instances.get.operationId: spanner.projects.instances.list
paths./v1/{parent}/instances.get.parameters.length: 4
paths./v1/{parent}/instances.get.parameters[0].description: |-
  Required. The name of the project for which a list of instances is
  requested. Values are of the form `projects/<project>`.
paths./v1/{parent}/instances.get.parameters[0].in: path
paths./v1/{parent}/instances.get.parameters[0].name: parent
paths./v1/{parent}/instances.get.parameters[0].required: true
paths./v1/{parent}/instances.get.parameters[0].type: string
paths./v1/{parent}/instances.get.parameters[0].x-reservedExpansion: true
paths./v1/{parent}/instances.get.parameters[1].description: |-
  If non-empty, `page_token` should contain a
  next_page_token from a
  previous ListInstancesResponse.
paths./v1/{parent}/instances.get.parameters[1].in: query
paths./v1/{parent}/instances.get.parameters[1].name: pageToken
paths./v1/{parent}/instances.get.parameters[1].type: string
paths./v1/{parent}/instances.get.parameters[2].description: |-
  Number of instances to be returned in the response. If 0 or less, defaults
  to the server's maximum allowed page size.
paths./v1/{parent}/instances.get.parameters[2].in: query
paths./v1/{parent}/instances.get.parameters[2].name: pageSize
paths./v1/{parent}/instances.get.parameters[2].type: integer
paths./v1/{parent}/instances.get.parameters[3].description: |-
  An expression for filtering the results of the request. Filter rules are
  case insensitive. The fields eligible for filtering are:

    * name
    * display_name
    * labels.key where key is the name of a label

  Some examples of using filters are:

    * name:* --> The instance has a name.
    * name:Howl --> The instance's name contains the string "howl".
    * name:HOWL --> Equivalent to above.
    * NAME:howl --> Equivalent to above.
    * labels.env:* --> The instance has the label "env".
    * labels.env:dev --> The instance has the label "env" and the value of
                         the label contains the string "dev".
    * name:howl labels.env:dev --> The instance's name contains "howl" and
                                   it has the label "env" with its value
                                   containing "dev".
paths./v1/{parent}/instances.get.parameters[3].in: query
paths./v1/{parent}/instances.get.parameters[3].name: filter
paths./v1/{parent}/instances.get.parameters[3].type: string
paths./v1/{parent}/instances.get.responses.200.description: Successful response
paths./v1/{parent}/instances.get.responses.200.schema.$ref: '#/definitions/ListInstancesResponse'
paths./v1/{parent}/instances.get.security.length: 2
paths./v1/{parent}/instances.get.security[0].Oauth2.length: 1
paths./v1/{parent}/instances.get.security[0].Oauth2[0]: https://www.googleapis.com/auth/cloud-platform
paths./v1/{parent}/instances.get.security[1].Oauth2.length: 1
paths./v1/{parent}/instances.get.security[1].Oauth2[0]: https://www.googleapis.com/auth/spanner.admin
paths./v1/{parent}/instances.get.tags.length: 1
paths./v1/{parent}/instances.get.tags[0]: projects
paths./v1/{parent}/instances.parameters.length: 13
paths./v1/{parent}/instances.parameters[0].$ref: '#/parameters/fields'
paths./v1/{parent}/instances.parameters[1].$ref: '#/parameters/uploadType'
paths./v1/{parent}/instances.parameters[2].$ref: '#/parameters/$.xgafv'
paths./v1/{parent}/instances.parameters[3].$ref: '#/parameters/callback'
paths./v1/{parent}/instances.parameters[4].$ref: '#/parameters/alt'
paths./v1/{parent}/instances.parameters[5].$ref: '#/parameters/key'
paths./v1/{parent}/instances.parameters[6].$ref: '#/parameters/access_token'
paths./v1/{parent}/instances.parameters[7].$ref: '#/parameters/quotaUser'
paths./v1/{parent}/instances.parameters[8].$ref: '#/parameters/pp'
paths./v1/{parent}/instances.parameters[9].$ref: '#/parameters/oauth_token'
paths./v1/{parent}/instances.parameters[10].$ref: '#/parameters/bearer_token'
paths./v1/{parent}/instances.parameters[11].$ref: '#/parameters/upload_protocol'
paths./v1/{parent}/instances.parameters[12].$ref: '#/parameters/prettyPrint'
paths./v1/{parent}/instances.post.description: |-
  Creates an instance and begins preparing it to begin serving. The
  returned long-running operation
  can be used to track the progress of preparing the new
  instance. The instance name is assigned by the caller. If the
  named instance already exists, `CreateInstance` returns
  `ALREADY_EXISTS`.

  Immediately upon completion of this request:

    * The instance is readable via the API, with all requested attributes
      but no allocated resources. Its state is `CREATING`.

  Until completion of the returned operation:

    * Cancelling the operation renders the instance immediately unreadable
      via the API.
    * The instance can be deleted.
    * All other attempts to modify the instance are rejected.

  Upon completion of the returned operation:

    * Billing for all successfully-allocated resources begins (some types
      may have lower than the requested levels).
    * Databases can be created in the instance.
    * The instance's allocated resource levels are readable via the API.
    * The instance's state becomes `READY`.

  The returned long-running operation will
  have a name of the format `<instance_name>/operations/<operation_id>` and
  can be used to track creation of the instance.  The
  metadata field type is
  CreateInstanceMetadata.
  The response field type is
  Instance, if successful.
paths./v1/{parent}/instances.post.operationId: spanner.projects.instances.create
paths./v1/{parent}/instances.post.parameters.length: 2
paths./v1/{parent}/instances.post.parameters[0].description: |-
  Required. The name of the project in which to create the instance. Values
  are of the form `projects/<project>`.
paths./v1/{parent}/instances.post.parameters[0].in: path
paths./v1/{parent}/instances.post.parameters[0].name: parent
paths./v1/{parent}/instances.post.parameters[0].required: true
paths./v1/{parent}/instances.post.parameters[0].type: string
paths./v1/{parent}/instances.post.parameters[0].x-reservedExpansion: true
paths./v1/{parent}/instances.post.parameters[1].in: body
paths./v1/{parent}/instances.post.parameters[1].name: body
paths./v1/{parent}/instances.post.parameters[1].schema.$ref: '#/definitions/CreateInstanceRequest'
paths./v1/{parent}/instances.post.responses.200.description: Successful response
paths./v1/{parent}/instances.post.responses.200.schema.$ref: '#/definitions/Operation'
paths./v1/{parent}/instances.post.security.length: 2
paths./v1/{parent}/instances.post.security[0].Oauth2.length: 1
paths./v1/{parent}/instances.post.security[0].Oauth2[0]: https://www.googleapis.com/auth/cloud-platform
paths./v1/{parent}/instances.post.security[1].Oauth2.length: 1
paths./v1/{parent}/instances.post.security[1].Oauth2[0]: https://www.googleapis.com/auth/spanner.admin
paths./v1/{parent}/instances.post.tags.length: 1
paths./v1/{parent}/instances.post.tags[0]: projects
paths./v1/{resource}:getIamPolicy.parameters.length: 13
paths./v1/{resource}:getIamPolicy.parameters[0].$ref: '#/parameters/fields'
paths./v1/{resource}:getIamPolicy.parameters[1].$ref: '#/parameters/uploadType'
paths./v1/{resource}:getIamPolicy.parameters[2].$ref: '#/parameters/$.xgafv'
paths./v1/{resource}:getIamPolicy.parameters[3].$ref: '#/parameters/callback'
paths./v1/{resource}:getIamPolicy.parameters[4].$ref: '#/parameters/alt'
paths./v1/{resource}:getIamPolicy.parameters[5].$ref: '#/parameters/key'
paths./v1/{resource}:getIamPolicy.parameters[6].$ref: '#/parameters/access_token'
paths./v1/{resource}:getIamPolicy.parameters[7].$ref: '#/parameters/quotaUser'
paths./v1/{resource}:getIamPolicy.parameters[8].$ref: '#/parameters/pp'
paths./v1/{resource}:getIamPolicy.parameters[9].$ref: '#/parameters/oauth_token'
paths./v1/{resource}:getIamPolicy.parameters[10].$ref: '#/parameters/bearer_token'
paths./v1/{resource}:getIamPolicy.parameters[11].$ref: '#/parameters/upload_protocol'
paths./v1/{resource}:getIamPolicy.parameters[12].$ref: '#/parameters/prettyPrint'
paths./v1/{resource}:getIamPolicy.post.description: |-
  Gets the access control policy for a database resource. Returns an empty
  policy if a database exists but does not have a policy set.

  Authorization requires `spanner.databases.getIamPolicy` permission on
  resource.
paths./v1/{resource}:getIamPolicy.post.operationId: spanner.projects.instances.databases.getIamPolicy
paths./v1/{resource}:getIamPolicy.post.parameters.length: 2
paths./v1/{resource}:getIamPolicy.post.parameters[0].description: 'REQUIRED: The Cloud
  Spanner resource for which the policy is being retrieved. The format is `projects/<project
  ID>/instances/<instance ID>` for instance resources and `projects/<project ID>/instances/<instance
  ID>/databases/<database ID>` for database resources.'
paths./v1/{resource}:getIamPolicy.post.parameters[0].in: path
paths./v1/{resource}:getIamPolicy.post.parameters[0].name: resource
paths./v1/{resource}:getIamPolicy.post.parameters[0].required: true
paths./v1/{resource}:getIamPolicy.post.parameters[0].type: string
paths./v1/{resource}:getIamPolicy.post.parameters[0].x-reservedExpansion: true
paths./v1/{resource}:getIamPolicy.post.parameters[1].in: body
paths./v1/{resource}:getIamPolicy.post.parameters[1].name: body
paths./v1/{resource}:getIamPolicy.post.parameters[1].schema.$ref: '#/definitions/GetIamPolicyRequest'
paths./v1/{resource}:getIamPolicy.post.responses.200.description: Successful response
paths./v1/{resource}:getIamPolicy.post.responses.200.schema.$ref: '#/definitions/Policy'
paths./v1/{resource}:getIamPolicy.post.security.length: 2
paths./v1/{resource}:getIamPolicy.post.security[0].Oauth2.length: 1
paths./v1/{resource}:getIamPolicy.post.security[0].Oauth2[0]: https://www.googleapis.com/auth/cloud-platform
paths./v1/{resource}:getIamPolicy.post.security[1].Oauth2.length: 1
paths./v1/{resource}:getIamPolicy.post.security[1].Oauth2[0]: https://www.googleapis.com/auth/spanner.admin
paths./v1/{resource}:getIamPolicy.post.tags.length: 1
paths./v1/{resource}:getIamPolicy.post.tags[0]: projects
paths./v1/{resource}:setIamPolicy.parameters.length: 13
paths./v1/{resource}:setIamPolicy.parameters[0].$ref: '#/parameters/fields'
paths./v1/{resource}:setIamPolicy.parameters[1].$ref: '#/parameters/uploadType'
paths./v1/{resource}:setIamPolicy.parameters[2].$ref: '#/parameters/$.xgafv'
paths./v1/{resource}:setIamPolicy.parameters[3].$ref: '#/parameters/callback'
paths./v1/{resource}:setIamPolicy.parameters[4].$ref: '#/parameters/alt'
paths./v1/{resource}:setIamPolicy.parameters[5].$ref: '#/parameters/key'
paths./v1/{resource}:setIamPolicy.parameters[6].$ref: '#/parameters/access_token'
paths./v1/{resource}:setIamPolicy.parameters[7].$ref: '#/parameters/quotaUser'
paths./v1/{resource}:setIamPolicy.parameters[8].$ref: '#/parameters/pp'
paths./v1/{resource}:setIamPolicy.parameters[9].$ref: '#/parameters/oauth_token'
paths./v1/{resource}:setIamPolicy.parameters[10].$ref: '#/parameters/bearer_token'
paths./v1/{resource}:setIamPolicy.parameters[11].$ref: '#/parameters/upload_protocol'
paths./v1/{resource}:setIamPolicy.parameters[12].$ref: '#/parameters/prettyPrint'
paths./v1/{resource}:setIamPolicy.post.description: |-
  Sets the access control policy on a database resource. Replaces any
  existing policy.

  Authorization requires `spanner.databases.setIamPolicy` permission on
  resource.
paths./v1/{resource}:setIamPolicy.post.operationId: spanner.projects.instances.databases.setIamPolicy
paths./v1/{resource}:setIamPolicy.post.parameters.length: 2
paths./v1/{resource}:setIamPolicy.post.parameters[0].description: 'REQUIRED: The Cloud
  Spanner resource for which the policy is being set. The format is `projects/<project
  ID>/instances/<instance ID>` for instance resources and `projects/<project ID>/instances/<instance
  ID>/databases/<database ID>` for databases resources.'
paths./v1/{resource}:setIamPolicy.post.parameters[0].in: path
paths./v1/{resource}:setIamPolicy.post.parameters[0].name: resource
paths./v1/{resource}:setIamPolicy.post.parameters[0].required: true
paths./v1/{resource}:setIamPolicy.post.parameters[0].type: string
paths./v1/{resource}:setIamPolicy.post.parameters[0].x-reservedExpansion: true
paths./v1/{resource}:setIamPolicy.post.parameters[1].in: body
paths./v1/{resource}:setIamPolicy.post.parameters[1].name: body
paths./v1/{resource}:setIamPolicy.post.parameters[1].schema.$ref: '#/definitions/SetIamPolicyRequest'
paths./v1/{resource}:setIamPolicy.post.responses.200.description: Successful response
paths./v1/{resource}:setIamPolicy.post.responses.200.schema.$ref: '#/definitions/Policy'
paths./v1/{resource}:setIamPolicy.post.security.length: 2
paths./v1/{resource}:setIamPolicy.post.security[0].Oauth2.length: 1
paths./v1/{resource}:setIamPolicy.post.security[0].Oauth2[0]: https://www.googleapis.com/auth/cloud-platform
paths./v1/{resource}:setIamPolicy.post.security[1].Oauth2.length: 1
paths./v1/{resource}:setIamPolicy.post.security[1].Oauth2[0]: https://www.googleapis.com/auth/spanner.admin
paths./v1/{resource}:setIamPolicy.post.tags.length: 1
paths./v1/{resource}:setIamPolicy.post.tags[0]: projects
paths./v1/{resource}:testIamPermissions.parameters.length: 13
paths./v1/{resource}:testIamPermissions.parameters[0].$ref: '#/parameters/fields'
paths./v1/{resource}:testIamPermissions.parameters[1].$ref: '#/parameters/uploadType'
paths./v1/{resource}:testIamPermissions.parameters[2].$ref: '#/parameters/$.xgafv'
paths./v1/{resource}:testIamPermissions.parameters[3].$ref: '#/parameters/callback'
paths./v1/{resource}:testIamPermissions.parameters[4].$ref: '#/parameters/alt'
paths./v1/{resource}:testIamPermissions.parameters[5].$ref: '#/parameters/key'
paths./v1/{resource}:testIamPermissions.parameters[6].$ref: '#/parameters/access_token'
paths./v1/{resource}:testIamPermissions.parameters[7].$ref: '#/parameters/quotaUser'
paths./v1/{resource}:testIamPermissions.parameters[8].$ref: '#/parameters/pp'
paths./v1/{resource}:testIamPermissions.parameters[9].$ref: '#/parameters/oauth_token'
paths./v1/{resource}:testIamPermissions.parameters[10].$ref: '#/parameters/bearer_token'
paths./v1/{resource}:testIamPermissions.parameters[11].$ref: '#/parameters/upload_protocol'
paths./v1/{resource}:testIamPermissions.parameters[12].$ref: '#/parameters/prettyPrint'
paths./v1/{resource}:testIamPermissions.post.description: |-
  Returns permissions that the caller has on the specified database resource.

  Attempting this RPC on a non-existent Cloud Spanner database will result in
  a NOT_FOUND error if the user has `spanner.databases.list` permission on
  the containing Cloud Spanner instance. Otherwise returns an empty set of
  permissions.
paths./v1/{resource}:testIamPermissions.post.operationId: spanner.projects.instances.databases.testIamPermissions
paths./v1/{resource}:testIamPermissions.post.parameters.length: 2
paths./v1/{resource}:testIamPermissions.post.parameters[0].description: 'REQUIRED:
  The Cloud Spanner resource for which permissions are being tested. The format is
  `projects/<project ID>/instances/<instance ID>` for instance resources and `projects/<project
  ID>/instances/<instance ID>/databases/<database ID>` for database resources.'
paths./v1/{resource}:testIamPermissions.post.parameters[0].in: path
paths./v1/{resource}:testIamPermissions.post.parameters[0].name: resource
paths./v1/{resource}:testIamPermissions.post.parameters[0].required: true
paths./v1/{resource}:testIamPermissions.post.parameters[0].type: string
paths./v1/{resource}:testIamPermissions.post.parameters[0].x-reservedExpansion: true
paths./v1/{resource}:testIamPermissions.post.parameters[1].in: body
paths./v1/{resource}:testIamPermissions.post.parameters[1].name: body
paths./v1/{resource}:testIamPermissions.post.parameters[1].schema.$ref: '#/definitions/TestIamPermissionsRequest'
paths./v1/{resource}:testIamPermissions.post.responses.200.description: Successful
  response
paths./v1/{resource}:testIamPermissions.post.responses.200.schema.$ref: '#/definitions/TestIamPermissionsResponse'
paths./v1/{resource}:testIamPermissions.post.security.length: 2
paths./v1/{resource}:testIamPermissions.post.security[0].Oauth2.length: 1
paths./v1/{resource}:testIamPermissions.post.security[0].Oauth2[0]: https://www.googleapis.com/auth/cloud-platform
paths./v1/{resource}:testIamPermissions.post.security[1].Oauth2.length: 1
paths./v1/{resource}:testIamPermissions.post.security[1].Oauth2[0]: https://www.googleapis.com/auth/spanner.admin
paths./v1/{resource}:testIamPermissions.post.tags.length: 1
paths./v1/{resource}:testIamPermissions.post.tags[0]: projects
paths./v1/{session}:beginTransaction.parameters.length: 13
paths./v1/{session}:beginTransaction.parameters[0].$ref: '#/parameters/fields'
paths./v1/{session}:beginTransaction.parameters[1].$ref: '#/parameters/uploadType'
paths./v1/{session}:beginTransaction.parameters[2].$ref: '#/parameters/$.xgafv'
paths./v1/{session}:beginTransaction.parameters[3].$ref: '#/parameters/callback'
paths./v1/{session}:beginTransaction.parameters[4].$ref: '#/parameters/alt'
paths./v1/{session}:beginTransaction.parameters[5].$ref: '#/parameters/key'
paths./v1/{session}:beginTransaction.parameters[6].$ref: '#/parameters/access_token'
paths./v1/{session}:beginTransaction.parameters[7].$ref: '#/parameters/quotaUser'
paths./v1/{session}:beginTransaction.parameters[8].$ref: '#/parameters/pp'
paths./v1/{session}:beginTransaction.parameters[9].$ref: '#/parameters/oauth_token'
paths./v1/{session}:beginTransaction.parameters[10].$ref: '#/parameters/bearer_token'
paths./v1/{session}:beginTransaction.parameters[11].$ref: '#/parameters/upload_protocol'
paths./v1/{session}:beginTransaction.parameters[12].$ref: '#/parameters/prettyPrint'
paths./v1/{session}:beginTransaction.post.description: |-
  Begins a new transaction. This step can often be skipped:
  Read, ExecuteSql and
  Commit can begin a new transaction as a
  side-effect.
paths./v1/{session}:beginTransaction.post.operationId: spanner.projects.instances.databases.sessions.beginTransaction
paths./v1/{session}:beginTransaction.post.parameters.length: 2
paths./v1/{session}:beginTransaction.post.parameters[0].description: Required. The
  session in which the transaction runs.
paths./v1/{session}:beginTransaction.post.parameters[0].in: path
paths./v1/{session}:beginTransaction.post.parameters[0].name: session
paths./v1/{session}:beginTransaction.post.parameters[0].required: true
paths./v1/{session}:beginTransaction.post.parameters[0].type: string
paths./v1/{session}:beginTransaction.post.parameters[0].x-reservedExpansion: true
paths./v1/{session}:beginTransaction.post.parameters[1].in: body
paths./v1/{session}:beginTransaction.post.parameters[1].name: body
paths./v1/{session}:beginTransaction.post.parameters[1].schema.$ref: '#/definitions/BeginTransactionRequest'
paths./v1/{session}:beginTransaction.post.responses.200.description: Successful response
paths./v1/{session}:beginTransaction.post.responses.200.schema.$ref: '#/definitions/Transaction'
paths./v1/{session}:beginTransaction.post.security.length: 2
paths./v1/{session}:beginTransaction.post.security[0].Oauth2.length: 1
paths./v1/{session}:beginTransaction.post.security[0].Oauth2[0]: https://www.googleapis.com/auth/cloud-platform
paths./v1/{session}:beginTransaction.post.security[1].Oauth2.length: 1
paths./v1/{session}:beginTransaction.post.security[1].Oauth2[0]: https://www.googleapis.com/auth/spanner.data
paths./v1/{session}:beginTransaction.post.tags.length: 1
paths./v1/{session}:beginTransaction.post.tags[0]: projects
paths./v1/{session}:commit.parameters.length: 13
paths./v1/{session}:commit.parameters[0].$ref: '#/parameters/fields'
paths./v1/{session}:commit.parameters[1].$ref: '#/parameters/uploadType'
paths./v1/{session}:commit.parameters[2].$ref: '#/parameters/$.xgafv'
paths./v1/{session}:commit.parameters[3].$ref: '#/parameters/callback'
paths./v1/{session}:commit.parameters[4].$ref: '#/parameters/alt'
paths./v1/{session}:commit.parameters[5].$ref: '#/parameters/key'
paths./v1/{session}:commit.parameters[6].$ref: '#/parameters/access_token'
paths./v1/{session}:commit.parameters[7].$ref: '#/parameters/quotaUser'
paths./v1/{session}:commit.parameters[8].$ref: '#/parameters/pp'
paths./v1/{session}:commit.parameters[9].$ref: '#/parameters/oauth_token'
paths./v1/{session}:commit.parameters[10].$ref: '#/parameters/bearer_token'
paths./v1/{session}:commit.parameters[11].$ref: '#/parameters/upload_protocol'
paths./v1/{session}:commit.parameters[12].$ref: '#/parameters/prettyPrint'
paths./v1/{session}:commit.post.description: |-
  Commits a transaction. The request includes the mutations to be
  applied to rows in the database.

  `Commit` might return an `ABORTED` error. This can occur at any time;
  commonly, the cause is conflicts with concurrent
  transactions. However, it can also happen for a variety of other
  reasons. If `Commit` returns `ABORTED`, the caller should re-attempt
  the transaction from the beginning, re-using the same session.
paths./v1/{session}:commit.post.operationId: spanner.projects.instances.databases.sessions.commit
paths./v1/{session}:commit.post.parameters.length: 2
paths./v1/{session}:commit.post.parameters[0].description: Required. The session in
  which the transaction to be committed is running.
paths./v1/{session}:commit.post.parameters[0].in: path
paths./v1/{session}:commit.post.parameters[0].name: session
paths./v1/{session}:commit.post.parameters[0].required: true
paths./v1/{session}:commit.post.parameters[0].type: string
paths./v1/{session}:commit.post.parameters[0].x-reservedExpansion: true
paths./v1/{session}:commit.post.parameters[1].in: body
paths./v1/{session}:commit.post.parameters[1].name: body
paths./v1/{session}:commit.post.parameters[1].schema.$ref: '#/definitions/CommitRequest'
paths./v1/{session}:commit.post.responses.200.description: Successful response
paths./v1/{session}:commit.post.responses.200.schema.$ref: '#/definitions/CommitResponse'
paths./v1/{session}:commit.post.security.length: 2
paths./v1/{session}:commit.post.security[0].Oauth2.length: 1
paths./v1/{session}:commit.post.security[0].Oauth2[0]: https://www.googleapis.com/auth/cloud-platform
paths./v1/{session}:commit.post.security[1].Oauth2.length: 1
paths./v1/{session}:commit.post.security[1].Oauth2[0]: https://www.googleapis.com/auth/spanner.data
paths./v1/{session}:commit.post.tags.length: 1
paths./v1/{session}:commit.post.tags[0]: projects
paths./v1/{session}:executeSql.parameters.length: 13
paths./v1/{session}:executeSql.parameters[0].$ref: '#/parameters/fields'
paths./v1/{session}:executeSql.parameters[1].$ref: '#/parameters/uploadType'
paths./v1/{session}:executeSql.parameters[2].$ref: '#/parameters/$.xgafv'
paths./v1/{session}:executeSql.parameters[3].$ref: '#/parameters/callback'
paths./v1/{session}:executeSql.parameters[4].$ref: '#/parameters/alt'
paths./v1/{session}:executeSql.parameters[5].$ref: '#/parameters/key'
paths./v1/{session}:executeSql.parameters[6].$ref: '#/parameters/access_token'
paths./v1/{session}:executeSql.parameters[7].$ref: '#/parameters/quotaUser'
paths./v1/{session}:executeSql.parameters[8].$ref: '#/parameters/pp'
paths./v1/{session}:executeSql.parameters[9].$ref: '#/parameters/oauth_token'
paths./v1/{session}:executeSql.parameters[10].$ref: '#/parameters/bearer_token'
paths./v1/{session}:executeSql.parameters[11].$ref: '#/parameters/upload_protocol'
paths./v1/{session}:executeSql.parameters[12].$ref: '#/parameters/prettyPrint'
paths./v1/{session}:executeSql.post.description: |-
  Executes an SQL query, returning all rows in a single reply. This
  method cannot be used to return a result set larger than 10 MiB;
  if the query yields more data than that, the query fails with
  a `FAILED_PRECONDITION` error.

  Queries inside read-write transactions might return `ABORTED`. If
  this occurs, the application should restart the transaction from
  the beginning. See Transaction for more details.

  Larger result sets can be fetched in streaming fashion by calling
  ExecuteStreamingSql instead.
paths./v1/{session}:executeSql.post.operationId: spanner.projects.instances.databases.sessions.executeSql
paths./v1/{session}:executeSql.post.parameters.length: 2
paths./v1/{session}:executeSql.post.parameters[0].description: Required. The session
  in which the SQL query should be performed.
paths./v1/{session}:executeSql.post.parameters[0].in: path
paths./v1/{session}:executeSql.post.parameters[0].name: session
paths./v1/{session}:executeSql.post.parameters[0].required: true
paths./v1/{session}:executeSql.post.parameters[0].type: string
paths./v1/{session}:executeSql.post.parameters[0].x-reservedExpansion: true
paths./v1/{session}:executeSql.post.parameters[1].in: body
paths./v1/{session}:executeSql.post.parameters[1].name: body
paths./v1/{session}:executeSql.post.parameters[1].schema.$ref: '#/definitions/ExecuteSqlRequest'
paths./v1/{session}:executeSql.post.responses.200.description: Successful response
paths./v1/{session}:executeSql.post.responses.200.schema.$ref: '#/definitions/ResultSet'
paths./v1/{session}:executeSql.post.security.length: 2
paths./v1/{session}:executeSql.post.security[0].Oauth2.length: 1
paths./v1/{session}:executeSql.post.security[0].Oauth2[0]: https://www.googleapis.com/auth/cloud-platform
paths./v1/{session}:executeSql.post.security[1].Oauth2.length: 1
paths./v1/{session}:executeSql.post.security[1].Oauth2[0]: https://www.googleapis.com/auth/spanner.data
paths./v1/{session}:executeSql.post.tags.length: 1
paths./v1/{session}:executeSql.post.tags[0]: projects
paths./v1/{session}:executeStreamingSql.parameters.length: 13
paths./v1/{session}:executeStreamingSql.parameters[0].$ref: '#/parameters/fields'
paths./v1/{session}:executeStreamingSql.parameters[1].$ref: '#/parameters/uploadType'
paths./v1/{session}:executeStreamingSql.parameters[2].$ref: '#/parameters/$.xgafv'
paths./v1/{session}:executeStreamingSql.parameters[3].$ref: '#/parameters/callback'
paths./v1/{session}:executeStreamingSql.parameters[4].$ref: '#/parameters/alt'
paths./v1/{session}:executeStreamingSql.parameters[5].$ref: '#/parameters/key'
paths./v1/{session}:executeStreamingSql.parameters[6].$ref: '#/parameters/access_token'
paths./v1/{session}:executeStreamingSql.parameters[7].$ref: '#/parameters/quotaUser'
paths./v1/{session}:executeStreamingSql.parameters[8].$ref: '#/parameters/pp'
paths./v1/{session}:executeStreamingSql.parameters[9].$ref: '#/parameters/oauth_token'
paths./v1/{session}:executeStreamingSql.parameters[10].$ref: '#/parameters/bearer_token'
paths./v1/{session}:executeStreamingSql.parameters[11].$ref: '#/parameters/upload_protocol'
paths./v1/{session}:executeStreamingSql.parameters[12].$ref: '#/parameters/prettyPrint'
paths./v1/{session}:executeStreamingSql.post.description: |-
  Like ExecuteSql, except returns the result
  set as a stream. Unlike ExecuteSql, there
  is no limit on the size of the returned result set. However, no
  individual row in the result set can exceed 100 MiB, and no
  column value can exceed 10 MiB.
paths./v1/{session}:executeStreamingSql.post.operationId: spanner.projects.instances.databases.sessions.executeStreamingSql
paths./v1/{session}:executeStreamingSql.post.parameters.length: 2
paths./v1/{session}:executeStreamingSql.post.parameters[0].description: Required.
  The session in which the SQL query should be performed.
paths./v1/{session}:executeStreamingSql.post.parameters[0].in: path
paths./v1/{session}:executeStreamingSql.post.parameters[0].name: session
paths./v1/{session}:executeStreamingSql.post.parameters[0].required: true
paths./v1/{session}:executeStreamingSql.post.parameters[0].type: string
paths./v1/{session}:executeStreamingSql.post.parameters[0].x-reservedExpansion: true
paths./v1/{session}:executeStreamingSql.post.parameters[1].in: body
paths./v1/{session}:executeStreamingSql.post.parameters[1].name: body
paths./v1/{session}:executeStreamingSql.post.parameters[1].schema.$ref: '#/definitions/ExecuteSqlRequest'
paths./v1/{session}:executeStreamingSql.post.responses.200.description: Successful
  response
paths./v1/{session}:executeStreamingSql.post.responses.200.schema.$ref: '#/definitions/PartialResultSet'
paths./v1/{session}:executeStreamingSql.post.security.length: 2
paths./v1/{session}:executeStreamingSql.post.security[0].Oauth2.length: 1
paths./v1/{session}:executeStreamingSql.post.security[0].Oauth2[0]: https://www.googleapis.com/auth/cloud-platform
paths./v1/{session}:executeStreamingSql.post.security[1].Oauth2.length: 1
paths./v1/{session}:executeStreamingSql.post.security[1].Oauth2[0]: https://www.googleapis.com/auth/spanner.data
paths./v1/{session}:executeStreamingSql.post.tags.length: 1
paths./v1/{session}:executeStreamingSql.post.tags[0]: projects
paths./v1/{session}:read.parameters.length: 13
paths./v1/{session}:read.parameters[0].$ref: '#/parameters/fields'
paths./v1/{session}:read.parameters[1].$ref: '#/parameters/uploadType'
paths./v1/{session}:read.parameters[2].$ref: '#/parameters/$.xgafv'
paths./v1/{session}:read.parameters[3].$ref: '#/parameters/callback'
paths./v1/{session}:read.parameters[4].$ref: '#/parameters/alt'
paths./v1/{session}:read.parameters[5].$ref: '#/parameters/key'
paths./v1/{session}:read.parameters[6].$ref: '#/parameters/access_token'
paths./v1/{session}:read.parameters[7].$ref: '#/parameters/quotaUser'
paths./v1/{session}:read.parameters[8].$ref: '#/parameters/pp'
paths./v1/{session}:read.parameters[9].$ref: '#/parameters/oauth_token'
paths./v1/{session}:read.parameters[10].$ref: '#/parameters/bearer_token'
paths./v1/{session}:read.parameters[11].$ref: '#/parameters/upload_protocol'
paths./v1/{session}:read.parameters[12].$ref: '#/parameters/prettyPrint'
paths./v1/{session}:read.post.description: |-
  Reads rows from the database using key lookups and scans, as a
  simple key/value style alternative to
  ExecuteSql.  This method cannot be used to
  return a result set larger than 10 MiB; if the read matches more
  data than that, the read fails with a `FAILED_PRECONDITION`
  error.

  Reads inside read-write transactions might return `ABORTED`. If
  this occurs, the application should restart the transaction from
  the beginning. See Transaction for more details.

  Larger result sets can be yielded in streaming fashion by calling
  StreamingRead instead.
paths./v1/{session}:read.post.operationId: spanner.projects.instances.databases.sessions.read
paths./v1/{session}:read.post.parameters.length: 2
paths./v1/{session}:read.post.parameters[0].description: Required. The session in
  which the read should be performed.
paths./v1/{session}:read.post.parameters[0].in: path
paths./v1/{session}:read.post.parameters[0].name: session
paths./v1/{session}:read.post.parameters[0].required: true
paths./v1/{session}:read.post.parameters[0].type: string
paths./v1/{session}:read.post.parameters[0].x-reservedExpansion: true
paths./v1/{session}:read.post.parameters[1].in: body
paths./v1/{session}:read.post.parameters[1].name: body
paths./v1/{session}:read.post.parameters[1].schema.$ref: '#/definitions/ReadRequest'
paths./v1/{session}:read.post.responses.200.description: Successful response
paths./v1/{session}:read.post.responses.200.schema.$ref: '#/definitions/ResultSet'
paths./v1/{session}:read.post.security.length: 2
paths./v1/{session}:read.post.security[0].Oauth2.length: 1
paths./v1/{session}:read.post.security[0].Oauth2[0]: https://www.googleapis.com/auth/cloud-platform
paths./v1/{session}:read.post.security[1].Oauth2.length: 1
paths./v1/{session}:read.post.security[1].Oauth2[0]: https://www.googleapis.com/auth/spanner.data
paths./v1/{session}:read.post.tags.length: 1
paths./v1/{session}:read.post.tags[0]: projects
paths./v1/{session}:rollback.parameters.length: 13
paths./v1/{session}:rollback.parameters[0].$ref: '#/parameters/fields'
paths./v1/{session}:rollback.parameters[1].$ref: '#/parameters/uploadType'
paths./v1/{session}:rollback.parameters[2].$ref: '#/parameters/$.xgafv'
paths./v1/{session}:rollback.parameters[3].$ref: '#/parameters/callback'
paths./v1/{session}:rollback.parameters[4].$ref: '#/parameters/alt'
paths./v1/{session}:rollback.parameters[5].$ref: '#/parameters/key'
paths./v1/{session}:rollback.parameters[6].$ref: '#/parameters/access_token'
paths./v1/{session}:rollback.parameters[7].$ref: '#/parameters/quotaUser'
paths./v1/{session}:rollback.parameters[8].$ref: '#/parameters/pp'
paths./v1/{session}:rollback.parameters[9].$ref: '#/parameters/oauth_token'
paths./v1/{session}:rollback.parameters[10].$ref: '#/parameters/bearer_token'
paths./v1/{session}:rollback.parameters[11].$ref: '#/parameters/upload_protocol'
paths./v1/{session}:rollback.parameters[12].$ref: '#/parameters/prettyPrint'
paths./v1/{session}:rollback.post.description: |-
  Rolls back a transaction, releasing any locks it holds. It is a good
  idea to call this for any transaction that includes one or more
  Read or ExecuteSql requests and
  ultimately decides not to commit.

  `Rollback` returns `OK` if it successfully aborts the transaction, the
  transaction was already aborted, or the transaction is not
  found. `Rollback` never returns `ABORTED`.
paths./v1/{session}:rollback.post.operationId: spanner.projects.instances.databases.sessions.rollback
paths./v1/{session}:rollback.post.parameters.length: 2
paths./v1/{session}:rollback.post.parameters[0].description: Required. The session
  in which the transaction to roll back is running.
paths./v1/{session}:rollback.post.parameters[0].in: path
paths./v1/{session}:rollback.post.parameters[0].name: session
paths./v1/{session}:rollback.post.parameters[0].required: true
paths./v1/{session}:rollback.post.parameters[0].type: string
paths./v1/{session}:rollback.post.parameters[0].x-reservedExpansion: true
paths./v1/{session}:rollback.post.parameters[1].in: body
paths./v1/{session}:rollback.post.parameters[1].name: body
paths./v1/{session}:rollback.post.parameters[1].schema.$ref: '#/definitions/RollbackRequest'
paths./v1/{session}:rollback.post.responses.200.description: Successful response
paths./v1/{session}:rollback.post.responses.200.schema.$ref: '#/definitions/Empty'
paths./v1/{session}:rollback.post.security.length: 2
paths./v1/{session}:rollback.post.security[0].Oauth2.length: 1
paths./v1/{session}:rollback.post.security[0].Oauth2[0]: https://www.googleapis.com/auth/cloud-platform
paths./v1/{session}:rollback.post.security[1].Oauth2.length: 1
paths./v1/{session}:rollback.post.security[1].Oauth2[0]: https://www.googleapis.com/auth/spanner.data
paths./v1/{session}:rollback.post.tags.length: 1
paths./v1/{session}:rollback.post.tags[0]: projects
paths./v1/{session}:streamingRead.parameters.length: 13
paths./v1/{session}:streamingRead.parameters[0].$ref: '#/parameters/fields'
paths./v1/{session}:streamingRead.parameters[1].$ref: '#/parameters/uploadType'
paths./v1/{session}:streamingRead.parameters[2].$ref: '#/parameters/$.xgafv'
paths./v1/{session}:streamingRead.parameters[3].$ref: '#/parameters/callback'
paths./v1/{session}:streamingRead.parameters[4].$ref: '#/parameters/alt'
paths./v1/{session}:streamingRead.parameters[5].$ref: '#/parameters/key'
paths./v1/{session}:streamingRead.parameters[6].$ref: '#/parameters/access_token'
paths./v1/{session}:streamingRead.parameters[7].$ref: '#/parameters/quotaUser'
paths./v1/{session}:streamingRead.parameters[8].$ref: '#/parameters/pp'
paths./v1/{session}:streamingRead.parameters[9].$ref: '#/parameters/oauth_token'
paths./v1/{session}:streamingRead.parameters[10].$ref: '#/parameters/bearer_token'
paths./v1/{session}:streamingRead.parameters[11].$ref: '#/parameters/upload_protocol'
paths./v1/{session}:streamingRead.parameters[12].$ref: '#/parameters/prettyPrint'
paths./v1/{session}:streamingRead.post.description: |-
  Like Read, except returns the result set as a
  stream. Unlike Read, there is no limit on the
  size of the returned result set. However, no individual row in
  the result set can exceed 100 MiB, and no column value can exceed
  10 MiB.
paths./v1/{session}:streamingRead.post.operationId: spanner.projects.instances.databases.sessions.streamingRead
paths./v1/{session}:streamingRead.post.parameters.length: 2
paths./v1/{session}:streamingRead.post.parameters[0].description: Required. The session
  in which the read should be performed.
paths./v1/{session}:streamingRead.post.parameters[0].in: path
paths./v1/{session}:streamingRead.post.parameters[0].name: session
paths./v1/{session}:streamingRead.post.parameters[0].required: true
paths./v1/{session}:streamingRead.post.parameters[0].type: string
paths./v1/{session}:streamingRead.post.parameters[0].x-reservedExpansion: true
paths./v1/{session}:streamingRead.post.parameters[1].in: body
paths./v1/{session}:streamingRead.post.parameters[1].name: body
paths./v1/{session}:streamingRead.post.parameters[1].schema.$ref: '#/definitions/ReadRequest'
paths./v1/{session}:streamingRead.post.responses.200.description: Successful response
paths./v1/{session}:streamingRead.post.responses.200.schema.$ref: '#/definitions/PartialResultSet'
paths./v1/{session}:streamingRead.post.security.length: 2
paths./v1/{session}:streamingRead.post.security[0].Oauth2.length: 1
paths./v1/{session}:streamingRead.post.security[0].Oauth2[0]: https://www.googleapis.com/auth/cloud-platform
paths./v1/{session}:streamingRead.post.security[1].Oauth2.length: 1
paths./v1/{session}:streamingRead.post.security[1].Oauth2[0]: https://www.googleapis.com/auth/spanner.data
paths./v1/{session}:streamingRead.post.tags.length: 1
paths./v1/{session}:streamingRead.post.tags[0]: projects
schemes.length: 1
schemes[0]: https
securityDefinitions.Oauth2.authorizationUrl: https://accounts.google.com/o/oauth2/auth
securityDefinitions.Oauth2.description: Oauth 2.0 authentication
securityDefinitions.Oauth2.flow: implicit
securityDefinitions.Oauth2.scopes.https://www.googleapis.com/auth/cloud-platform: View
  and manage your data across Google Cloud Platform services
securityDefinitions.Oauth2.scopes.https://www.googleapis.com/auth/spanner.admin: Administer
  your Spanner databases
securityDefinitions.Oauth2.scopes.https://www.googleapis.com/auth/spanner.data: View
  and manage the contents of your Spanner databases
securityDefinitions.Oauth2.type: oauth2
swagger: "2.0"
tags.length: 1
tags[0].name: projects
x-hasEquivalentPaths: true

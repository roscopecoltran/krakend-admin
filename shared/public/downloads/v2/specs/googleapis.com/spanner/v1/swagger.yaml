swagger: '2.0'
schemes:
  - https
host: spanner.googleapis.com
basePath: /
x-hasEquivalentPaths: true
info:
  contact:
    name: Google
    url: 'https://google.com'
  description: 'Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.'
  title: Cloud Spanner
  version: v1
  x-apiClientRegistration:
    url: 'https://console.developers.google.com'
  x-logo:
    url: 'https://api.apis.guru/v2/cache/logo/https_www.google.com_images_branding_googlelogo_2x_googlelogo_color_272x92dp.png'
  x-origin:
    - converter:
        url: 'https://github.com/lucybot/api-spec-converter'
        version: 2.6.0
      format: google
      url: 'https://spanner.googleapis.com/$discovery/rest?version=v1'
      version: v1
  x-preferred: true
  x-providerName: googleapis.com
  x-serviceName: spanner
externalDocs:
  url: 'https://cloud.google.com/spanner/'
securityDefinitions:
  Oauth2:
    authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
    description: Oauth 2.0 authentication
    flow: implicit
    scopes:
      'https://www.googleapis.com/auth/cloud-platform': View and manage your data across Google Cloud Platform services
      'https://www.googleapis.com/auth/spanner.admin': Administer your Spanner databases
      'https://www.googleapis.com/auth/spanner.data': View and manage the contents of your Spanner databases
    type: oauth2
parameters:
  $.xgafv:
    description: V1 error format.
    enum:
      - '1'
      - '2'
    in: query
    name: $.xgafv
    type: string
  access_token:
    description: OAuth access token.
    in: query
    name: access_token
    type: string
  alt:
    default: json
    description: Data format for response.
    enum:
      - json
      - media
      - proto
    in: query
    name: alt
    type: string
  bearer_token:
    description: OAuth bearer token.
    in: query
    name: bearer_token
    type: string
  callback:
    description: JSONP
    in: query
    name: callback
    type: string
  fields:
    description: Selector specifying which fields to include in a partial response.
    in: query
    name: fields
    type: string
  key:
    description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
    in: query
    name: key
    type: string
  oauth_token:
    description: OAuth 2.0 token for the current user.
    in: query
    name: oauth_token
    type: string
  pp:
    default: true
    description: Pretty-print response.
    in: query
    name: pp
    type: boolean
  prettyPrint:
    default: true
    description: Returns response with indentations and line breaks.
    in: query
    name: prettyPrint
    type: boolean
  quotaUser:
    description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
    in: query
    name: quotaUser
    type: string
  uploadType:
    description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
    in: query
    name: uploadType
    type: string
  upload_protocol:
    description: 'Upload protocol for media (e.g. "raw", "multipart").'
    in: query
    name: upload_protocol
    type: string
tags:
  - name: projects
paths:
  '/v1/{database}':
    delete:
      description: Drops (aka deletes) a Cloud Spanner database.
      operationId: spanner.projects.instances.databases.dropDatabase
      parameters:
        - description: Required. The database to be dropped.
          in: path
          name: database
          required: true
          type: string
          x-reservedExpansion: true
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Empty'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spanner.admin'
      tags:
        - projects
    parameters:
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/upload_protocol'
      - $ref: '#/parameters/prettyPrint'
  '/v1/{database}/ddl':
    get:
      description: |-
        Returns the schema of a Cloud Spanner database as a list of formatted
        DDL statements. This method does not show pending schema updates, those may
        be queried using the Operations API.
      operationId: spanner.projects.instances.databases.getDdl
      parameters:
        - description: Required. The database whose schema we wish to get.
          in: path
          name: database
          required: true
          type: string
          x-reservedExpansion: true
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/GetDatabaseDdlResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spanner.admin'
      tags:
        - projects
    parameters:
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/upload_protocol'
      - $ref: '#/parameters/prettyPrint'
    patch:
      description: |-
        Updates the schema of a Cloud Spanner database by
        creating/altering/dropping tables, columns, indexes, etc. The returned
        long-running operation will have a name of
        the format `<database_name>/operations/<operation_id>` and can be used to
        track execution of the schema change(s). The
        metadata field type is
        UpdateDatabaseDdlMetadata.  The operation has no response.
      operationId: spanner.projects.instances.databases.updateDdl
      parameters:
        - description: Required. The database to update.
          in: path
          name: database
          required: true
          type: string
          x-reservedExpansion: true
        - in: body
          name: body
          schema:
            $ref: '#/definitions/UpdateDatabaseDdlRequest'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Operation'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spanner.admin'
      tags:
        - projects
  '/v1/{database}/sessions':
    get:
      description: Lists all sessions in a given database.
      operationId: spanner.projects.instances.databases.sessions.list
      parameters:
        - description: Required. The database in which to list sessions.
          in: path
          name: database
          required: true
          type: string
          x-reservedExpansion: true
        - description: |-
            An expression for filtering the results of the request. Filter rules are
            case insensitive. The fields eligible for filtering are:

              * labels.key where key is the name of a label

            Some examples of using filters are:

              * labels.env:* --> The session has the label "env".
              * labels.env:dev --> The session has the label "env" and the value of
                                   the label contains the string "dev".
          in: query
          name: filter
          type: string
        - description: |-
            Number of sessions to be returned in the response. If 0 or less, defaults
            to the server's maximum allowed page size.
          in: query
          name: pageSize
          type: integer
        - description: |-
            If non-empty, `page_token` should contain a
            next_page_token from a previous
            ListSessionsResponse.
          in: query
          name: pageToken
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/ListSessionsResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spanner.data'
      tags:
        - projects
    parameters:
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/upload_protocol'
      - $ref: '#/parameters/prettyPrint'
    post:
      description: |-
        Creates a new session. A session can be used to perform
        transactions that read and/or modify data in a Cloud Spanner database.
        Sessions are meant to be reused for many consecutive
        transactions.

        Sessions can only execute one transaction at a time. To execute
        multiple concurrent read-write/write-only transactions, create
        multiple sessions. Note that standalone reads and queries use a
        transaction internally, and count toward the one transaction
        limit.

        Cloud Spanner limits the number of sessions that can exist at any given
        time; thus, it is a good idea to delete idle and/or unneeded sessions.
        Aside from explicit deletes, Cloud Spanner can delete sessions for which no
        operations are sent for more than an hour. If a session is deleted,
        requests to it return `NOT_FOUND`.

        Idle sessions can be kept alive by sending a trivial SQL query
        periodically, e.g., `"SELECT 1"`.
      operationId: spanner.projects.instances.databases.sessions.create
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/CreateSessionRequest'
        - description: Required. The database in which the new session is created.
          in: path
          name: database
          required: true
          type: string
          x-reservedExpansion: true
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Session'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spanner.data'
      tags:
        - projects
  '/v1/{name}':
    delete:
      description: 'Ends a session, releasing server resources associated with it.'
      operationId: spanner.projects.instances.databases.sessions.delete
      parameters:
        - description: Required. The name of the session to delete.
          in: path
          name: name
          required: true
          type: string
          x-reservedExpansion: true
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Empty'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spanner.data'
      tags:
        - projects
    get:
      description: |-
        Gets a session. Returns `NOT_FOUND` if the session does not exist.
        This is mainly useful for determining whether a session is still
        alive.
      operationId: spanner.projects.instances.databases.sessions.get
      parameters:
        - description: Required. The name of the session to retrieve.
          in: path
          name: name
          required: true
          type: string
          x-reservedExpansion: true
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Session'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spanner.data'
      tags:
        - projects
    parameters:
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/upload_protocol'
      - $ref: '#/parameters/prettyPrint'
    patch:
      description: |-
        Updates an instance, and begins allocating or releasing resources
        as requested. The returned long-running
        operation can be used to track the
        progress of updating the instance. If the named instance does not
        exist, returns `NOT_FOUND`.

        Immediately upon completion of this request:

          * For resource types for which a decrease in the instance's allocation
            has been requested, billing is based on the newly-requested level.

        Until completion of the returned operation:

          * Cancelling the operation sets its metadata's
            cancel_time, and begins
            restoring resources to their pre-request values. The operation
            is guaranteed to succeed at undoing all resource changes,
            after which point it terminates with a `CANCELLED` status.
          * All other attempts to modify the instance are rejected.
          * Reading the instance via the API continues to give the pre-request
            resource levels.

        Upon completion of the returned operation:

          * Billing begins for all successfully-allocated resources (some types
            may have lower than the requested levels).
          * All newly-reserved resources are available for serving the instance's
            tables.
          * The instance's new resource levels are readable via the API.

        The returned long-running operation will
        have a name of the format `<instance_name>/operations/<operation_id>` and
        can be used to track the instance modification.  The
        metadata field type is
        UpdateInstanceMetadata.
        The response field type is
        Instance, if successful.

        Authorization requires `spanner.instances.update` permission on
        resource name.
      operationId: spanner.projects.instances.patch
      parameters:
        - description: |-
            Required. A unique identifier for the instance, which cannot be changed
            after the instance is created. Values are of the form
            `projects/<project>/instances/a-z*[a-z0-9]`. The final
            segment of the name must be between 6 and 30 characters in length.
          in: path
          name: name
          required: true
          type: string
          x-reservedExpansion: true
        - in: body
          name: body
          schema:
            $ref: '#/definitions/UpdateInstanceRequest'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Operation'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spanner.admin'
      tags:
        - projects
  '/v1/{name}:cancel':
    parameters:
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/upload_protocol'
      - $ref: '#/parameters/prettyPrint'
    post:
      description: |-
        Starts asynchronous cancellation on a long-running operation.  The server
        makes a best effort to cancel the operation, but success is not
        guaranteed.  If the server doesn't support this method, it returns
        `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
        Operations.GetOperation or
        other methods to check whether the cancellation succeeded or whether the
        operation completed despite cancellation. On successful cancellation,
        the operation is not deleted; instead, it becomes an operation with
        an Operation.error value with a google.rpc.Status.code of 1,
        corresponding to `Code.CANCELLED`.
      operationId: spanner.projects.instances.databases.operations.cancel
      parameters:
        - description: The name of the operation resource to be cancelled.
          in: path
          name: name
          required: true
          type: string
          x-reservedExpansion: true
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Empty'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spanner.admin'
      tags:
        - projects
  '/v1/{parent}/databases':
    get:
      description: Lists Cloud Spanner databases.
      operationId: spanner.projects.instances.databases.list
      parameters:
        - description: |-
            Required. The instance whose databases should be listed.
            Values are of the form `projects/<project>/instances/<instance>`.
          in: path
          name: parent
          required: true
          type: string
          x-reservedExpansion: true
        - description: |-
            If non-empty, `page_token` should contain a
            next_page_token from a
            previous ListDatabasesResponse.
          in: query
          name: pageToken
          type: string
        - description: |-
            Number of databases to be returned in the response. If 0 or less,
            defaults to the server's maximum allowed page size.
          in: query
          name: pageSize
          type: integer
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/ListDatabasesResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spanner.admin'
      tags:
        - projects
    parameters:
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/upload_protocol'
      - $ref: '#/parameters/prettyPrint'
    post:
      description: |-
        Creates a new Cloud Spanner database and starts to prepare it for serving.
        The returned long-running operation will
        have a name of the format `<database_name>/operations/<operation_id>` and
        can be used to track preparation of the database. The
        metadata field type is
        CreateDatabaseMetadata. The
        response field type is
        Database, if successful.
      operationId: spanner.projects.instances.databases.create
      parameters:
        - description: |-
            Required. The name of the instance that will serve the new database.
            Values are of the form `projects/<project>/instances/<instance>`.
          in: path
          name: parent
          required: true
          type: string
          x-reservedExpansion: true
        - in: body
          name: body
          schema:
            $ref: '#/definitions/CreateDatabaseRequest'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Operation'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spanner.admin'
      tags:
        - projects
  '/v1/{parent}/instanceConfigs':
    get:
      description: Lists the supported instance configurations for a given project.
      operationId: spanner.projects.instanceConfigs.list
      parameters:
        - description: |-
            Required. The name of the project for which a list of supported instance
            configurations is requested. Values are of the form
            `projects/<project>`.
          in: path
          name: parent
          required: true
          type: string
          x-reservedExpansion: true
        - description: |-
            If non-empty, `page_token` should contain a
            next_page_token
            from a previous ListInstanceConfigsResponse.
          in: query
          name: pageToken
          type: string
        - description: |-
            Number of instance configurations to be returned in the response. If 0 or
            less, defaults to the server's maximum allowed page size.
          in: query
          name: pageSize
          type: integer
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/ListInstanceConfigsResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spanner.admin'
      tags:
        - projects
    parameters:
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/upload_protocol'
      - $ref: '#/parameters/prettyPrint'
  '/v1/{parent}/instances':
    get:
      description: Lists all instances in the given project.
      operationId: spanner.projects.instances.list
      parameters:
        - description: |-
            Required. The name of the project for which a list of instances is
            requested. Values are of the form `projects/<project>`.
          in: path
          name: parent
          required: true
          type: string
          x-reservedExpansion: true
        - description: |-
            If non-empty, `page_token` should contain a
            next_page_token from a
            previous ListInstancesResponse.
          in: query
          name: pageToken
          type: string
        - description: |-
            Number of instances to be returned in the response. If 0 or less, defaults
            to the server's maximum allowed page size.
          in: query
          name: pageSize
          type: integer
        - description: |-
            An expression for filtering the results of the request. Filter rules are
            case insensitive. The fields eligible for filtering are:

              * name
              * display_name
              * labels.key where key is the name of a label

            Some examples of using filters are:

              * name:* --> The instance has a name.
              * name:Howl --> The instance's name contains the string "howl".
              * name:HOWL --> Equivalent to above.
              * NAME:howl --> Equivalent to above.
              * labels.env:* --> The instance has the label "env".
              * labels.env:dev --> The instance has the label "env" and the value of
                                   the label contains the string "dev".
              * name:howl labels.env:dev --> The instance's name contains "howl" and
                                             it has the label "env" with its value
                                             containing "dev".
          in: query
          name: filter
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/ListInstancesResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spanner.admin'
      tags:
        - projects
    parameters:
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/upload_protocol'
      - $ref: '#/parameters/prettyPrint'
    post:
      description: |-
        Creates an instance and begins preparing it to begin serving. The
        returned long-running operation
        can be used to track the progress of preparing the new
        instance. The instance name is assigned by the caller. If the
        named instance already exists, `CreateInstance` returns
        `ALREADY_EXISTS`.

        Immediately upon completion of this request:

          * The instance is readable via the API, with all requested attributes
            but no allocated resources. Its state is `CREATING`.

        Until completion of the returned operation:

          * Cancelling the operation renders the instance immediately unreadable
            via the API.
          * The instance can be deleted.
          * All other attempts to modify the instance are rejected.

        Upon completion of the returned operation:

          * Billing for all successfully-allocated resources begins (some types
            may have lower than the requested levels).
          * Databases can be created in the instance.
          * The instance's allocated resource levels are readable via the API.
          * The instance's state becomes `READY`.

        The returned long-running operation will
        have a name of the format `<instance_name>/operations/<operation_id>` and
        can be used to track creation of the instance.  The
        metadata field type is
        CreateInstanceMetadata.
        The response field type is
        Instance, if successful.
      operationId: spanner.projects.instances.create
      parameters:
        - description: |-
            Required. The name of the project in which to create the instance. Values
            are of the form `projects/<project>`.
          in: path
          name: parent
          required: true
          type: string
          x-reservedExpansion: true
        - in: body
          name: body
          schema:
            $ref: '#/definitions/CreateInstanceRequest'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Operation'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spanner.admin'
      tags:
        - projects
  '/v1/{resource}:getIamPolicy':
    parameters:
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/upload_protocol'
      - $ref: '#/parameters/prettyPrint'
    post:
      description: |-
        Gets the access control policy for a database resource. Returns an empty
        policy if a database exists but does not have a policy set.

        Authorization requires `spanner.databases.getIamPolicy` permission on
        resource.
      operationId: spanner.projects.instances.databases.getIamPolicy
      parameters:
        - description: 'REQUIRED: The Cloud Spanner resource for which the policy is being retrieved. The format is `projects/<project ID>/instances/<instance ID>` for instance resources and `projects/<project ID>/instances/<instance ID>/databases/<database ID>` for database resources.'
          in: path
          name: resource
          required: true
          type: string
          x-reservedExpansion: true
        - in: body
          name: body
          schema:
            $ref: '#/definitions/GetIamPolicyRequest'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Policy'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spanner.admin'
      tags:
        - projects
  '/v1/{resource}:setIamPolicy':
    parameters:
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/upload_protocol'
      - $ref: '#/parameters/prettyPrint'
    post:
      description: |-
        Sets the access control policy on a database resource. Replaces any
        existing policy.

        Authorization requires `spanner.databases.setIamPolicy` permission on
        resource.
      operationId: spanner.projects.instances.databases.setIamPolicy
      parameters:
        - description: 'REQUIRED: The Cloud Spanner resource for which the policy is being set. The format is `projects/<project ID>/instances/<instance ID>` for instance resources and `projects/<project ID>/instances/<instance ID>/databases/<database ID>` for databases resources.'
          in: path
          name: resource
          required: true
          type: string
          x-reservedExpansion: true
        - in: body
          name: body
          schema:
            $ref: '#/definitions/SetIamPolicyRequest'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Policy'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spanner.admin'
      tags:
        - projects
  '/v1/{resource}:testIamPermissions':
    parameters:
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/upload_protocol'
      - $ref: '#/parameters/prettyPrint'
    post:
      description: |-
        Returns permissions that the caller has on the specified database resource.

        Attempting this RPC on a non-existent Cloud Spanner database will result in
        a NOT_FOUND error if the user has `spanner.databases.list` permission on
        the containing Cloud Spanner instance. Otherwise returns an empty set of
        permissions.
      operationId: spanner.projects.instances.databases.testIamPermissions
      parameters:
        - description: 'REQUIRED: The Cloud Spanner resource for which permissions are being tested. The format is `projects/<project ID>/instances/<instance ID>` for instance resources and `projects/<project ID>/instances/<instance ID>/databases/<database ID>` for database resources.'
          in: path
          name: resource
          required: true
          type: string
          x-reservedExpansion: true
        - in: body
          name: body
          schema:
            $ref: '#/definitions/TestIamPermissionsRequest'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/TestIamPermissionsResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spanner.admin'
      tags:
        - projects
  '/v1/{session}:beginTransaction':
    parameters:
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/upload_protocol'
      - $ref: '#/parameters/prettyPrint'
    post:
      description: |-
        Begins a new transaction. This step can often be skipped:
        Read, ExecuteSql and
        Commit can begin a new transaction as a
        side-effect.
      operationId: spanner.projects.instances.databases.sessions.beginTransaction
      parameters:
        - description: Required. The session in which the transaction runs.
          in: path
          name: session
          required: true
          type: string
          x-reservedExpansion: true
        - in: body
          name: body
          schema:
            $ref: '#/definitions/BeginTransactionRequest'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Transaction'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spanner.data'
      tags:
        - projects
  '/v1/{session}:commit':
    parameters:
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/upload_protocol'
      - $ref: '#/parameters/prettyPrint'
    post:
      description: |-
        Commits a transaction. The request includes the mutations to be
        applied to rows in the database.

        `Commit` might return an `ABORTED` error. This can occur at any time;
        commonly, the cause is conflicts with concurrent
        transactions. However, it can also happen for a variety of other
        reasons. If `Commit` returns `ABORTED`, the caller should re-attempt
        the transaction from the beginning, re-using the same session.
      operationId: spanner.projects.instances.databases.sessions.commit
      parameters:
        - description: Required. The session in which the transaction to be committed is running.
          in: path
          name: session
          required: true
          type: string
          x-reservedExpansion: true
        - in: body
          name: body
          schema:
            $ref: '#/definitions/CommitRequest'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/CommitResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spanner.data'
      tags:
        - projects
  '/v1/{session}:executeSql':
    parameters:
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/upload_protocol'
      - $ref: '#/parameters/prettyPrint'
    post:
      description: |-
        Executes an SQL query, returning all rows in a single reply. This
        method cannot be used to return a result set larger than 10 MiB;
        if the query yields more data than that, the query fails with
        a `FAILED_PRECONDITION` error.

        Queries inside read-write transactions might return `ABORTED`. If
        this occurs, the application should restart the transaction from
        the beginning. See Transaction for more details.

        Larger result sets can be fetched in streaming fashion by calling
        ExecuteStreamingSql instead.
      operationId: spanner.projects.instances.databases.sessions.executeSql
      parameters:
        - description: Required. The session in which the SQL query should be performed.
          in: path
          name: session
          required: true
          type: string
          x-reservedExpansion: true
        - in: body
          name: body
          schema:
            $ref: '#/definitions/ExecuteSqlRequest'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/ResultSet'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spanner.data'
      tags:
        - projects
  '/v1/{session}:executeStreamingSql':
    parameters:
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/upload_protocol'
      - $ref: '#/parameters/prettyPrint'
    post:
      description: |-
        Like ExecuteSql, except returns the result
        set as a stream. Unlike ExecuteSql, there
        is no limit on the size of the returned result set. However, no
        individual row in the result set can exceed 100 MiB, and no
        column value can exceed 10 MiB.
      operationId: spanner.projects.instances.databases.sessions.executeStreamingSql
      parameters:
        - description: Required. The session in which the SQL query should be performed.
          in: path
          name: session
          required: true
          type: string
          x-reservedExpansion: true
        - in: body
          name: body
          schema:
            $ref: '#/definitions/ExecuteSqlRequest'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/PartialResultSet'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spanner.data'
      tags:
        - projects
  '/v1/{session}:read':
    parameters:
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/upload_protocol'
      - $ref: '#/parameters/prettyPrint'
    post:
      description: |-
        Reads rows from the database using key lookups and scans, as a
        simple key/value style alternative to
        ExecuteSql.  This method cannot be used to
        return a result set larger than 10 MiB; if the read matches more
        data than that, the read fails with a `FAILED_PRECONDITION`
        error.

        Reads inside read-write transactions might return `ABORTED`. If
        this occurs, the application should restart the transaction from
        the beginning. See Transaction for more details.

        Larger result sets can be yielded in streaming fashion by calling
        StreamingRead instead.
      operationId: spanner.projects.instances.databases.sessions.read
      parameters:
        - description: Required. The session in which the read should be performed.
          in: path
          name: session
          required: true
          type: string
          x-reservedExpansion: true
        - in: body
          name: body
          schema:
            $ref: '#/definitions/ReadRequest'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/ResultSet'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spanner.data'
      tags:
        - projects
  '/v1/{session}:rollback':
    parameters:
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/upload_protocol'
      - $ref: '#/parameters/prettyPrint'
    post:
      description: |-
        Rolls back a transaction, releasing any locks it holds. It is a good
        idea to call this for any transaction that includes one or more
        Read or ExecuteSql requests and
        ultimately decides not to commit.

        `Rollback` returns `OK` if it successfully aborts the transaction, the
        transaction was already aborted, or the transaction is not
        found. `Rollback` never returns `ABORTED`.
      operationId: spanner.projects.instances.databases.sessions.rollback
      parameters:
        - description: Required. The session in which the transaction to roll back is running.
          in: path
          name: session
          required: true
          type: string
          x-reservedExpansion: true
        - in: body
          name: body
          schema:
            $ref: '#/definitions/RollbackRequest'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Empty'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spanner.data'
      tags:
        - projects
  '/v1/{session}:streamingRead':
    parameters:
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/upload_protocol'
      - $ref: '#/parameters/prettyPrint'
    post:
      description: |-
        Like Read, except returns the result set as a
        stream. Unlike Read, there is no limit on the
        size of the returned result set. However, no individual row in
        the result set can exceed 100 MiB, and no column value can exceed
        10 MiB.
      operationId: spanner.projects.instances.databases.sessions.streamingRead
      parameters:
        - description: Required. The session in which the read should be performed.
          in: path
          name: session
          required: true
          type: string
          x-reservedExpansion: true
        - in: body
          name: body
          schema:
            $ref: '#/definitions/ReadRequest'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/PartialResultSet'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spanner.data'
      tags:
        - projects
definitions:
  BeginTransactionRequest:
    description: The request for BeginTransaction.
    properties:
      options:
        $ref: '#/definitions/TransactionOptions'
        description: Required. Options for the new transaction.
    type: object
  Binding:
    description: Associates `members` with a `role`.
    properties:
      members:
        description: |+
          Specifies the identities requesting access for a Cloud Platform resource.
          `members` can have the following values:

          * `allUsers`: A special identifier that represents anyone who is
             on the internet; with or without a Google account.

          * `allAuthenticatedUsers`: A special identifier that represents anyone
             who is authenticated with a Google account or a service account.

          * `user:{emailid}`: An email address that represents a specific Google
             account. For example, `alice@gmail.com` or `joe@example.com`.


          * `serviceAccount:{emailid}`: An email address that represents a service
             account. For example, `my-other-app@appspot.gserviceaccount.com`.

          * `group:{emailid}`: An email address that represents a Google group.
             For example, `admins@example.com`.


          * `domain:{domain}`: A Google Apps domain name that represents all the
             users of that domain. For example, `google.com` or `example.com`.

        items:
          type: string
        type: array
      role:
        description: |-
          Role that is assigned to `members`.
          For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
          Required
        type: string
    type: object
  ChildLink:
    description: |-
      Metadata associated with a parent-child relationship appearing in a
      PlanNode.
    properties:
      childIndex:
        description: The node to which the link points.
        format: int32
        type: integer
      type:
        description: |-
          The type of the link. For example, in Hash Joins this could be used to
          distinguish between the build child and the probe child, or in the case
          of the child being an output variable, to represent the tag associated
          with the output variable.
        type: string
      variable:
        description: |-
          Only present if the child node is SCALAR and corresponds
          to an output variable of the parent node. The field carries the name of
          the output variable.
          For example, a `TableScan` operator that reads rows from a table will
          have child links to the `SCALAR` nodes representing the output variables
          created for each column that is read by the operator. The corresponding
          `variable` fields will be set to the variable names assigned to the
          columns.
        type: string
    type: object
  CommitRequest:
    description: The request for Commit.
    properties:
      mutations:
        description: |-
          The mutations to be executed when this transaction commits. All
          mutations are applied atomically, in the order they appear in
          this list.
        items:
          $ref: '#/definitions/Mutation'
        type: array
      singleUseTransaction:
        $ref: '#/definitions/TransactionOptions'
        description: |-
          Execute mutations in a temporary transaction. Note that unlike
          commit of a previously-started transaction, commit with a
          temporary transaction is non-idempotent. That is, if the
          `CommitRequest` is sent to Cloud Spanner more than once (for
          instance, due to retries in the application, or in the
          transport library), it is possible that the mutations are
          executed more than once. If this is undesirable, use
          BeginTransaction and
          Commit instead.
      transactionId:
        description: Commit a previously-started transaction.
        format: byte
        type: string
    type: object
  CommitResponse:
    description: The response for Commit.
    properties:
      commitTimestamp:
        description: The Cloud Spanner timestamp at which the transaction committed.
        format: google-datetime
        type: string
    type: object
  CreateDatabaseMetadata:
    description: |-
      Metadata type for the operation returned by
      CreateDatabase.
    properties:
      database:
        description: The database being created.
        type: string
    type: object
  CreateDatabaseRequest:
    description: The request for CreateDatabase.
    properties:
      createStatement:
        description: |-
          Required. A `CREATE DATABASE` statement, which specifies the ID of the
          new database.  The database ID must conform to the regular expression
          `a-z*[a-z0-9]` and be between 2 and 30 characters in length.
          If the database ID is a reserved word or if it contains a hyphen, the
          database ID must be enclosed in backticks (`` ` ``).
        type: string
      extraStatements:
        description: |-
          An optional list of DDL statements to run inside the newly created
          database. Statements can create tables, indexes, etc. These
          statements execute atomically with the creation of the database:
          if there is an error in any statement, the database is not created.
        items:
          type: string
        type: array
    type: object
  CreateInstanceMetadata:
    description: |-
      Metadata type for the operation returned by
      CreateInstance.
    properties:
      cancelTime:
        description: |-
          The time at which this operation was cancelled. If set, this operation is
          in the process of undoing itself (which is guaranteed to succeed) and
          cannot be cancelled again.
        format: google-datetime
        type: string
      endTime:
        description: The time at which this operation failed or was completed successfully.
        format: google-datetime
        type: string
      instance:
        $ref: '#/definitions/Instance'
        description: The instance being created.
      startTime:
        description: |-
          The time at which the
          CreateInstance request was
          received.
        format: google-datetime
        type: string
    type: object
  CreateInstanceRequest:
    description: The request for CreateInstance.
    properties:
      instance:
        $ref: '#/definitions/Instance'
        description: |-
          Required. The instance to create.  The name may be omitted, but if
          specified must be `<parent>/instances/<instance_id>`.
      instanceId:
        description: |-
          Required. The ID of the instance to create.  Valid identifiers are of the
          form `a-z*[a-z0-9]` and must be between 6 and 30 characters in
          length.
        type: string
    type: object
  CreateSessionRequest:
    description: The request for CreateSession.
    properties:
      session:
        $ref: '#/definitions/Session'
        description: The session to create.
    type: object
  Database:
    description: A Cloud Spanner database.
    properties:
      name:
        description: |-
          Required. The name of the database. Values are of the form
          `projects/<project>/instances/<instance>/databases/<database>`,
          where `<database>` is as specified in the `CREATE DATABASE`
          statement. This name can be passed to other API methods to
          identify the database.
        type: string
      state:
        description: Output only. The current database state.
        enum:
          - STATE_UNSPECIFIED
          - CREATING
          - READY
        type: string
    type: object
  Delete:
    description: Arguments to delete operations.
    properties:
      keySet:
        $ref: '#/definitions/KeySet'
        description: Required. The primary keys of the rows within table to delete.
      table:
        description: Required. The table whose rows will be deleted.
        type: string
    type: object
  Empty:
    description: |-
      A generic empty message that you can re-use to avoid defining duplicated
      empty messages in your APIs. A typical example is to use it as the request
      or the response type of an API method. For instance:

          service Foo {
            rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
          }

      The JSON representation for `Empty` is empty JSON object `{}`.
    properties: {}
    type: object
  ExecuteSqlRequest:
    description: |-
      The request for ExecuteSql and
      ExecuteStreamingSql.
    properties:
      paramTypes:
        additionalProperties:
          $ref: '#/definitions/Type'
        description: |-
          It is not always possible for Cloud Spanner to infer the right SQL type
          from a JSON value.  For example, values of type `BYTES` and values
          of type `STRING` both appear in params as JSON strings.

          In these cases, `param_types` can be used to specify the exact
          SQL type for some or all of the SQL query parameters. See the
          definition of Type for more information
          about SQL types.
        type: object
      params:
        additionalProperties:
          description: Properties of the object.
        description: |-
          The SQL query string can contain parameter placeholders. A parameter
          placeholder consists of `'@'` followed by the parameter
          name. Parameter names consist of any combination of letters,
          numbers, and underscores.

          Parameters can appear anywhere that a literal value is expected.  The same
          parameter name can be used more than once, for example:
            `"WHERE id > @msg_id AND id < @msg_id + 100"`

          It is an error to execute an SQL query with unbound parameters.

          Parameter values are specified using `params`, which is a JSON
          object whose keys are parameter names, and whose values are the
          corresponding parameter values.
        type: object
      queryMode:
        description: |-
          Used to control the amount of debugging information returned in
          ResultSetStats.
        enum:
          - NORMAL
          - PLAN
          - PROFILE
        type: string
      resumeToken:
        description: |-
          If this request is resuming a previously interrupted SQL query
          execution, `resume_token` should be copied from the last
          PartialResultSet yielded before the interruption. Doing this
          enables the new SQL query execution to resume where the last one left
          off. The rest of the request parameters must exactly match the
          request that yielded this token.
        format: byte
        type: string
      sql:
        description: Required. The SQL query string.
        type: string
      transaction:
        $ref: '#/definitions/TransactionSelector'
        description: |-
          The transaction to use. If none is provided, the default is a
          temporary read-only transaction with strong concurrency.
    type: object
  Field:
    description: Message representing a single field of a struct.
    properties:
      name:
        description: |-
          The name of the field. For reads, this is the column name. For
          SQL queries, it is the column alias (e.g., `"Word"` in the
          query `"SELECT 'hello' AS Word"`), or the column name (e.g.,
          `"ColName"` in the query `"SELECT ColName FROM Table"`). Some
          columns might have an empty name (e.g., !"SELECT
          UPPER(ColName)"`). Note that a query result can contain
          multiple fields with the same name.
        type: string
      type:
        $ref: '#/definitions/Type'
        description: The type of the field.
    type: object
  GetDatabaseDdlResponse:
    description: The response for GetDatabaseDdl.
    properties:
      statements:
        description: |-
          A list of formatted DDL statements defining the schema of the database
          specified in the request.
        items:
          type: string
        type: array
    type: object
  GetIamPolicyRequest:
    description: Request message for `GetIamPolicy` method.
    properties: {}
    type: object
  Instance:
    description: An isolated set of Cloud Spanner resources on which databases can be hosted.
    properties:
      config:
        description: |-
          Required. The name of the instance's configuration. Values are of the form
          `projects/<project>/instanceConfigs/<configuration>`. See
          also InstanceConfig and
          ListInstanceConfigs.
        type: string
      displayName:
        description: |-
          Required. The descriptive name for this instance as it appears in UIs.
          Must be unique per project and between 4 and 30 characters in length.
        type: string
      labels:
        additionalProperties:
          type: string
        description: |-
          Cloud Labels are a flexible and lightweight mechanism for organizing cloud
          resources into groups that reflect a customer's organizational needs and
          deployment strategies. Cloud Labels can be used to filter collections of
          resources. They can be used to control how resource metrics are aggregated.
          And they can be used as arguments to policy management rules (e.g. route,
          firewall, load balancing, etc.).

           * Label keys must be between 1 and 63 characters long and must conform to
             the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`.
           * Label values must be between 0 and 63 characters long and must conform
             to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`.
           * No more than 64 labels can be associated with a given resource.

          See https://goo.gl/xmQnxf for more information on and examples of labels.

          If you plan to use labels in your own code, please note that additional
          characters may be allowed in the future. And so you are advised to use an
          internal label representation, such as JSON, which doesn't rely upon
          specific characters being disallowed.  For example, representing labels
          as the string:  name + "_" + value  would prove problematic if we were to
          allow "_" in a future release.
        type: object
      name:
        description: |-
          Required. A unique identifier for the instance, which cannot be changed
          after the instance is created. Values are of the form
          `projects/<project>/instances/a-z*[a-z0-9]`. The final
          segment of the name must be between 6 and 30 characters in length.
        type: string
      nodeCount:
        description: |-
          Required. The number of nodes allocated to this instance. This may be zero
          in API responses for instances that are not yet in state `READY`.

          Each Spanner node can provide up to 10,000 QPS of reads or 2000 QPS of
          writes (writing single rows at 1KB data per row), and 2 TiB storage.

          For optimal performance, we recommend provisioning enough nodes to keep
          overall CPU utilization under 75%.

          A minimum of 3 nodes is recommended for production environments.  This
          minimum is required for SLAs to apply to your instance.

          Note that Cloud Spanner performance is highly dependent on workload, schema
          design, and dataset characteristics. The performance numbers above are
          estimates, and assume [best practices](https://cloud.google.com/spanner/docs/bulk-loading)
          are followed.
        format: int32
        type: integer
      state:
        description: |-
          Output only. The current instance state. For
          CreateInstance, the state must be
          either omitted or set to `CREATING`. For
          UpdateInstance, the state must be
          either omitted or set to `READY`.
        enum:
          - STATE_UNSPECIFIED
          - CREATING
          - READY
        type: string
    type: object
  InstanceConfig:
    description: |-
      A possible configuration for a Cloud Spanner instance. Configurations
      define the geographic placement of nodes and their replication.
    properties:
      displayName:
        description: The name of this instance configuration as it appears in UIs.
        type: string
      name:
        description: |-
          A unique identifier for the instance configuration.  Values
          are of the form
          `projects/<project>/instanceConfigs/a-z*`
        type: string
    type: object
  KeyRange:
    description: |-
      KeyRange represents a range of rows in a table or index.

      A range has a start key and an end key. These keys can be open or
      closed, indicating if the range includes rows with that key.

      Keys are represented by lists, where the ith value in the list
      corresponds to the ith component of the table or index primary key.
      Individual values are encoded as described here.

      For example, consider the following table definition:

          CREATE TABLE UserEvents (
            UserName STRING(MAX),
            EventDate STRING(10)
          ) PRIMARY KEY(UserName, EventDate);

      The following keys name rows in this table:

          "Bob", "2014-09-23"

      Since the `UserEvents` table's `PRIMARY KEY` clause names two
      columns, each `UserEvents` key has two elements; the first is the
      `UserName`, and the second is the `EventDate`.

      Key ranges with multiple components are interpreted
      lexicographically by component using the table or index key's declared
      sort order. For example, the following range returns all events for
      user `"Bob"` that occurred in the year 2015:

          "start_closed": ["Bob", "2015-01-01"]
          "end_closed": ["Bob", "2015-12-31"]

      Start and end keys can omit trailing key components. This affects the
      inclusion and exclusion of rows that exactly match the provided key
      components: if the key is closed, then rows that exactly match the
      provided components are included; if the key is open, then rows
      that exactly match are not included.

      For example, the following range includes all events for `"Bob"` that
      occurred during and after the year 2000:

          "start_closed": ["Bob", "2000-01-01"]
          "end_closed": ["Bob"]

      The next example retrieves all events for `"Bob"`:

          "start_closed": ["Bob"]
          "end_closed": ["Bob"]

      To retrieve events before the year 2000:

          "start_closed": ["Bob"]
          "end_open": ["Bob", "2000-01-01"]

      The following range includes all rows in the table:

          "start_closed": []
          "end_closed": []

      This range returns all users whose `UserName` begins with any
      character from A to C:

          "start_closed": ["A"]
          "end_open": ["D"]

      This range returns all users whose `UserName` begins with B:

          "start_closed": ["B"]
          "end_open": ["C"]

      Key ranges honor column sort order. For example, suppose a table is
      defined as follows:

          CREATE TABLE DescendingSortedTable {
            Key INT64,
            ...
          ) PRIMARY KEY(Key DESC);

      The following range retrieves all rows with key values between 1
      and 100 inclusive:

          "start_closed": ["100"]
          "end_closed": ["1"]

      Note that 100 is passed as the start, and 1 is passed as the end,
      because `Key` is a descending column in the schema.
    properties:
      endClosed:
        description: |-
          If the end is closed, then the range includes all rows whose
          first `len(end_closed)` key columns exactly match `end_closed`.
        items: {}
        type: array
      endOpen:
        description: |-
          If the end is open, then the range excludes rows whose first
          `len(end_open)` key columns exactly match `end_open`.
        items: {}
        type: array
      startClosed:
        description: |-
          If the start is closed, then the range includes all rows whose
          first `len(start_closed)` key columns exactly match `start_closed`.
        items: {}
        type: array
      startOpen:
        description: |-
          If the start is open, then the range excludes rows whose first
          `len(start_open)` key columns exactly match `start_open`.
        items: {}
        type: array
    type: object
  KeySet:
    description: |-
      `KeySet` defines a collection of Cloud Spanner keys and/or key ranges. All
      the keys are expected to be in the same table or index. The keys need
      not be sorted in any particular way.

      If the same key is specified multiple times in the set (for example
      if two ranges, two keys, or a key and a range overlap), Cloud Spanner
      behaves as if the key were only specified once.
    properties:
      all:
        description: |-
          For convenience `all` can be set to `true` to indicate that this
          `KeySet` matches all keys in the table or index. Note that any keys
          specified in `keys` or `ranges` are only yielded once.
        type: boolean
      keys:
        description: |-
          A list of specific keys. Entries in `keys` should have exactly as
          many elements as there are columns in the primary or index key
          with which this `KeySet` is used.  Individual key values are
          encoded as described here.
        items:
          items: {}
          type: array
        type: array
      ranges:
        description: |-
          A list of key ranges. See KeyRange for more information about
          key range specifications.
        items:
          $ref: '#/definitions/KeyRange'
        type: array
    type: object
  ListDatabasesResponse:
    description: The response for ListDatabases.
    properties:
      databases:
        description: Databases that matched the request.
        items:
          $ref: '#/definitions/Database'
        type: array
      nextPageToken:
        description: |-
          `next_page_token` can be sent in a subsequent
          ListDatabases call to fetch more
          of the matching databases.
        type: string
    type: object
  ListInstanceConfigsResponse:
    description: The response for ListInstanceConfigs.
    properties:
      instanceConfigs:
        description: The list of requested instance configurations.
        items:
          $ref: '#/definitions/InstanceConfig'
        type: array
      nextPageToken:
        description: |-
          `next_page_token` can be sent in a subsequent
          ListInstanceConfigs call to
          fetch more of the matching instance configurations.
        type: string
    type: object
  ListInstancesResponse:
    description: The response for ListInstances.
    properties:
      instances:
        description: The list of requested instances.
        items:
          $ref: '#/definitions/Instance'
        type: array
      nextPageToken:
        description: |-
          `next_page_token` can be sent in a subsequent
          ListInstances call to fetch more
          of the matching instances.
        type: string
    type: object
  ListOperationsResponse:
    description: The response message for Operations.ListOperations.
    properties:
      nextPageToken:
        description: The standard List next-page token.
        type: string
      operations:
        description: A list of operations that matches the specified filter in the request.
        items:
          $ref: '#/definitions/Operation'
        type: array
    type: object
  ListSessionsResponse:
    description: The response for ListSessions.
    properties:
      nextPageToken:
        description: |-
          `next_page_token` can be sent in a subsequent
          ListSessions call to fetch more of the matching
          sessions.
        type: string
      sessions:
        description: The list of requested sessions.
        items:
          $ref: '#/definitions/Session'
        type: array
    type: object
  Mutation:
    description: |-
      A modification to one or more Cloud Spanner rows.  Mutations can be
      applied to a Cloud Spanner database by sending them in a
      Commit call.
    properties:
      delete:
        $ref: '#/definitions/Delete'
        description: |-
          Delete rows from a table. Succeeds whether or not the named
          rows were present.
      insert:
        $ref: '#/definitions/Write'
        description: |-
          Insert new rows in a table. If any of the rows already exist,
          the write or transaction fails with error `ALREADY_EXISTS`.
      insertOrUpdate:
        $ref: '#/definitions/Write'
        description: |-
          Like insert, except that if the row already exists, then
          its column values are overwritten with the ones provided. Any
          column values not explicitly written are preserved.
      replace:
        $ref: '#/definitions/Write'
        description: |-
          Like insert, except that if the row already exists, it is
          deleted, and the column values provided are inserted
          instead. Unlike insert_or_update, this means any values not
          explicitly written become `NULL`.
      update:
        $ref: '#/definitions/Write'
        description: |-
          Update existing rows in a table. If any of the rows does not
          already exist, the transaction fails with error `NOT_FOUND`.
    type: object
  Operation:
    description: |-
      This resource represents a long-running operation that is the result of a
      network API call.
    properties:
      done:
        description: |-
          If the value is `false`, it means the operation is still in progress.
          If `true`, the operation is completed, and either `error` or `response` is
          available.
        type: boolean
      error:
        $ref: '#/definitions/Status'
        description: The error result of the operation in case of failure or cancellation.
      metadata:
        additionalProperties:
          description: Properties of the object. Contains field @type with type URL.
        description: |-
          Service-specific metadata associated with the operation.  It typically
          contains progress information and common metadata such as create time.
          Some services might not provide such metadata.  Any method that returns a
          long-running operation should document the metadata type, if any.
        type: object
      name:
        description: |-
          The server-assigned name, which is only unique within the same service that
          originally returns it. If you use the default HTTP mapping, the
          `name` should have the format of `operations/some/unique/name`.
        type: string
      response:
        additionalProperties:
          description: Properties of the object. Contains field @type with type URL.
        description: |-
          The normal response of the operation in case of success.  If the original
          method returns no data on success, such as `Delete`, the response is
          `google.protobuf.Empty`.  If the original method is standard
          `Get`/`Create`/`Update`, the response should be the resource.  For other
          methods, the response should have the type `XxxResponse`, where `Xxx`
          is the original method name.  For example, if the original method name
          is `TakeSnapshot()`, the inferred response type is
          `TakeSnapshotResponse`.
        type: object
    type: object
  PartialResultSet:
    description: |-
      Partial results from a streaming read or SQL query. Streaming reads and
      SQL queries better tolerate large result sets, large rows, and large
      values, but are a little trickier to consume.
    properties:
      chunkedValue:
        description: |-
          If true, then the final value in values is chunked, and must
          be combined with more values from subsequent `PartialResultSet`s
          to obtain a complete field value.
        type: boolean
      metadata:
        $ref: '#/definitions/ResultSetMetadata'
        description: |-
          Metadata about the result set, such as row type information.
          Only present in the first response.
      resumeToken:
        description: |-
          Streaming calls might be interrupted for a variety of reasons, such
          as TCP connection loss. If this occurs, the stream of results can
          be resumed by re-sending the original request and including
          `resume_token`. Note that executing any other transaction in the
          same session invalidates the token.
        format: byte
        type: string
      stats:
        $ref: '#/definitions/ResultSetStats'
        description: |-
          Query plan and execution statistics for the query that produced this
          streaming result set. These can be requested by setting
          ExecuteSqlRequest.query_mode and are sent
          only once with the last response in the stream.
      values:
        description: |-
          A streamed result set consists of a stream of values, which might
          be split into many `PartialResultSet` messages to accommodate
          large rows and/or large values. Every N complete values defines a
          row, where N is equal to the number of entries in
          metadata.row_type.fields.

          Most values are encoded based on type as described
          here.

          It is possible that the last value in values is "chunked",
          meaning that the rest of the value is sent in subsequent
          `PartialResultSet`(s). This is denoted by the chunked_value
          field. Two or more chunked values can be merged to form a
          complete value as follows:

            * `bool/number/null`: cannot be chunked
            * `string`: concatenate the strings
            * `list`: concatenate the lists. If the last element in a list is a
              `string`, `list`, or `object`, merge it with the first element in
              the next list by applying these rules recursively.
            * `object`: concatenate the (field name, field value) pairs. If a
              field name is duplicated, then apply these rules recursively
              to merge the field values.

          Some examples of merging:

              # Strings are concatenated.
              "foo", "bar" => "foobar"

              # Lists of non-strings are concatenated.
              [2, 3], [4] => [2, 3, 4]

              # Lists are concatenated, but the last and first elements are merged
              # because they are strings.
              ["a", "b"], ["c", "d"] => ["a", "bc", "d"]

              # Lists are concatenated, but the last and first elements are merged
              # because they are lists. Recursively, the last and first elements
              # of the inner lists are merged because they are strings.
              ["a", ["b", "c"]], [["d"], "e"] => ["a", ["b", "cd"], "e"]

              # Non-overlapping object fields are combined.
              {"a": "1"}, {"b": "2"} => {"a": "1", "b": 2"}

              # Overlapping object fields are merged.
              {"a": "1"}, {"a": "2"} => {"a": "12"}

              # Examples of merging objects containing lists of strings.
              {"a": ["1"]}, {"a": ["2"]} => {"a": ["12"]}

          For a more complete example, suppose a streaming SQL query is
          yielding a result set whose rows contain a single string
          field. The following `PartialResultSet`s might be yielded:

              {
                "metadata": { ... }
                "values": ["Hello", "W"]
                "chunked_value": true
                "resume_token": "Af65..."
              }
              {
                "values": ["orl"]
                "chunked_value": true
                "resume_token": "Bqp2..."
              }
              {
                "values": ["d"]
                "resume_token": "Zx1B..."
              }

          This sequence of `PartialResultSet`s encodes two rows, one
          containing the field value `"Hello"`, and a second containing the
          field value `"World" = "W" + "orl" + "d"`.
        items: {}
        type: array
    type: object
  PlanNode:
    description: Node information for nodes appearing in a QueryPlan.plan_nodes.
    properties:
      childLinks:
        description: List of child node `index`es and their relationship to this parent.
        items:
          $ref: '#/definitions/ChildLink'
        type: array
      displayName:
        description: The display name for the node.
        type: string
      executionStats:
        additionalProperties:
          description: Properties of the object.
        description: |-
          The execution statistics associated with the node, contained in a group of
          key-value pairs. Only present if the plan was returned as a result of a
          profile query. For example, number of executions, number of rows/time per
          execution etc.
        type: object
      index:
        description: The `PlanNode`'s index in node list.
        format: int32
        type: integer
      kind:
        description: |-
          Used to determine the type of node. May be needed for visualizing
          different kinds of nodes differently. For example, If the node is a
          SCALAR node, it will have a condensed representation
          which can be used to directly embed a description of the node in its
          parent.
        enum:
          - KIND_UNSPECIFIED
          - RELATIONAL
          - SCALAR
        type: string
      metadata:
        additionalProperties:
          description: Properties of the object.
        description: |-
          Attributes relevant to the node contained in a group of key-value pairs.
          For example, a Parameter Reference node could have the following
          information in its metadata:

              {
                "parameter_reference": "param1",
                "parameter_type": "array"
              }
        type: object
      shortRepresentation:
        $ref: '#/definitions/ShortRepresentation'
        description: Condensed representation for SCALAR nodes.
    type: object
  Policy:
    description: |-
      Defines an Identity and Access Management (IAM) policy. It is used to
      specify access control policies for Cloud Platform resources.


      A `Policy` consists of a list of `bindings`. A `Binding` binds a list of
      `members` to a `role`, where the members can be user accounts, Google groups,
      Google domains, and service accounts. A `role` is a named list of permissions
      defined by IAM.

      **Example**

          {
            "bindings": [
              {
                "role": "roles/owner",
                "members": [
                  "user:mike@example.com",
                  "group:admins@example.com",
                  "domain:google.com",
                  "serviceAccount:my-other-app@appspot.gserviceaccount.com",
                ]
              },
              {
                "role": "roles/viewer",
                "members": ["user:sean@example.com"]
              }
            ]
          }

      For a description of IAM and its features, see the
      [IAM developer's guide](https://cloud.google.com/iam).
    properties:
      bindings:
        description: |-
          Associates a list of `members` to a `role`.
          `bindings` with no members will result in an error.
        items:
          $ref: '#/definitions/Binding'
        type: array
      etag:
        description: |-
          `etag` is used for optimistic concurrency control as a way to help
          prevent simultaneous updates of a policy from overwriting each other.
          It is strongly suggested that systems make use of the `etag` in the
          read-modify-write cycle to perform policy updates in order to avoid race
          conditions: An `etag` is returned in the response to `getIamPolicy`, and
          systems are expected to put that etag in the request to `setIamPolicy` to
          ensure that their change will be applied to the same version of the policy.

          If no `etag` is provided in the call to `setIamPolicy`, then the existing
          policy is overwritten blindly.
        format: byte
        type: string
      version:
        description: Version of the `Policy`. The default version is 0.
        format: int32
        type: integer
    type: object
  QueryPlan:
    description: Contains an ordered list of nodes appearing in the query plan.
    properties:
      planNodes:
        description: |-
          The nodes in the query plan. Plan nodes are returned in pre-order starting
          with the plan root. Each PlanNode's `id` corresponds to its index in
          `plan_nodes`.
        items:
          $ref: '#/definitions/PlanNode'
        type: array
    type: object
  ReadOnly:
    description: Message type to initiate a read-only transaction.
    properties:
      exactStaleness:
        description: |-
          Executes all reads at a timestamp that is `exact_staleness`
          old. The timestamp is chosen soon after the read is started.

          Guarantees that all writes that have committed more than the
          specified number of seconds ago are visible. Because Cloud Spanner
          chooses the exact timestamp, this mode works even if the client's
          local clock is substantially skewed from Cloud Spanner commit
          timestamps.

          Useful for reading at nearby replicas without the distributed
          timestamp negotiation overhead of `max_staleness`.
        format: google-duration
        type: string
      maxStaleness:
        description: |-
          Read data at a timestamp >= `NOW - max_staleness`
          seconds. Guarantees that all writes that have committed more
          than the specified number of seconds ago are visible. Because
          Cloud Spanner chooses the exact timestamp, this mode works even if
          the client's local clock is substantially skewed from Cloud Spanner
          commit timestamps.

          Useful for reading the freshest data available at a nearby
          replica, while bounding the possible staleness if the local
          replica has fallen behind.

          Note that this option can only be used in single-use
          transactions.
        format: google-duration
        type: string
      minReadTimestamp:
        description: |-
          Executes all reads at a timestamp >= `min_read_timestamp`.

          This is useful for requesting fresher data than some previous
          read, or data that is fresh enough to observe the effects of some
          previously committed transaction whose timestamp is known.

          Note that this option can only be used in single-use transactions.
        format: google-datetime
        type: string
      readTimestamp:
        description: |-
          Executes all reads at the given timestamp. Unlike other modes,
          reads at a specific timestamp are repeatable; the same read at
          the same timestamp always returns the same data. If the
          timestamp is in the future, the read will block until the
          specified timestamp, modulo the read's deadline.

          Useful for large scale consistent reads such as mapreduces, or
          for coordinating many reads against a consistent snapshot of the
          data.
        format: google-datetime
        type: string
      returnReadTimestamp:
        description: |-
          If true, the Cloud Spanner-selected read timestamp is included in
          the Transaction message that describes the transaction.
        type: boolean
      strong:
        description: |-
          Read at a timestamp where all previously committed transactions
          are visible.
        type: boolean
    type: object
  ReadRequest:
    description: |-
      The request for Read and
      StreamingRead.
    properties:
      columns:
        description: |-
          The columns of table to be returned for each row matching
          this request.
        items:
          type: string
        type: array
      index:
        description: |-
          If non-empty, the name of an index on table. This index is
          used instead of the table primary key when interpreting key_set
          and sorting result rows. See key_set for further information.
        type: string
      keySet:
        $ref: '#/definitions/KeySet'
        description: |-
          Required. `key_set` identifies the rows to be yielded. `key_set` names the
          primary keys of the rows in table to be yielded, unless index
          is present. If index is present, then key_set instead names
          index keys in index.

          Rows are yielded in table primary key order (if index is empty)
          or index key order (if index is non-empty).

          It is not an error for the `key_set` to name rows that do not
          exist in the database. Read yields nothing for nonexistent rows.
      limit:
        description: |-
          If greater than zero, only the first `limit` rows are yielded. If `limit`
          is zero, the default is no limit.
          A limit cannot be specified if partition_token is set.
        format: int64
        type: string
      resumeToken:
        description: |-
          If this request is resuming a previously interrupted read,
          `resume_token` should be copied from the last
          PartialResultSet yielded before the interruption. Doing this
          enables the new read to resume where the last read left off. The
          rest of the request parameters must exactly match the request
          that yielded this token.
        format: byte
        type: string
      table:
        description: Required. The name of the table in the database to be read.
        type: string
      transaction:
        $ref: '#/definitions/TransactionSelector'
        description: |-
          The transaction to use. If none is provided, the default is a
          temporary read-only transaction with strong concurrency.
    type: object
  ReadWrite:
    description: |-
      Message type to initiate a read-write transaction. Currently this
      transaction type has no options.
    properties: {}
    type: object
  ResultSet:
    description: |-
      Results from Read or
      ExecuteSql.
    properties:
      metadata:
        $ref: '#/definitions/ResultSetMetadata'
        description: 'Metadata about the result set, such as row type information.'
      rows:
        description: |-
          Each element in `rows` is a row whose format is defined by
          metadata.row_type. The ith element
          in each row matches the ith field in
          metadata.row_type. Elements are
          encoded based on type as described
          here.
        items:
          items: {}
          type: array
        type: array
      stats:
        $ref: '#/definitions/ResultSetStats'
        description: |-
          Query plan and execution statistics for the query that produced this
          result set. These can be requested by setting
          ExecuteSqlRequest.query_mode.
    type: object
  ResultSetMetadata:
    description: Metadata about a ResultSet or PartialResultSet.
    properties:
      rowType:
        $ref: '#/definitions/StructType'
        description: |-
          Indicates the field names and types for the rows in the result
          set.  For example, a SQL query like `"SELECT UserId, UserName FROM
          Users"` could return a `row_type` value like:

              "fields": [
                { "name": "UserId", "type": { "code": "INT64" } },
                { "name": "UserName", "type": { "code": "STRING" } },
              ]
      transaction:
        $ref: '#/definitions/Transaction'
        description: |-
          If the read or SQL query began a transaction as a side-effect, the
          information about the new transaction is yielded here.
    type: object
  ResultSetStats:
    description: Additional statistics about a ResultSet or PartialResultSet.
    properties:
      queryPlan:
        $ref: '#/definitions/QueryPlan'
        description: QueryPlan for the query associated with this result.
      queryStats:
        additionalProperties:
          description: Properties of the object.
        description: |-
          Aggregated statistics from the execution of the query. Only present when
          the query is profiled. For example, a query could return the statistics as
          follows:

              {
                "rows_returned": "3",
                "elapsed_time": "1.22 secs",
                "cpu_time": "1.19 secs"
              }
        type: object
    type: object
  RollbackRequest:
    description: The request for Rollback.
    properties:
      transactionId:
        description: Required. The transaction to roll back.
        format: byte
        type: string
    type: object
  Session:
    description: A session in the Cloud Spanner API.
    properties:
      approximateLastUseTime:
        description: |-
          Output only. The approximate timestamp when the session is last used. It is
          typically earlier than the actual last use time.
        format: google-datetime
        type: string
      createTime:
        description: Output only. The timestamp when the session is created.
        format: google-datetime
        type: string
      labels:
        additionalProperties:
          type: string
        description: |-
          The labels for the session.

           * Label keys must be between 1 and 63 characters long and must conform to
             the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`.
           * Label values must be between 0 and 63 characters long and must conform
             to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`.
           * No more than 20 labels can be associated with a given session.
        type: object
      name:
        description: The name of the session.
        type: string
    type: object
  SetIamPolicyRequest:
    description: Request message for `SetIamPolicy` method.
    properties:
      policy:
        $ref: '#/definitions/Policy'
        description: |-
          REQUIRED: The complete policy to be applied to the `resource`. The size of
          the policy is limited to a few 10s of KB. An empty policy is a
          valid policy but certain Cloud Platform services (such as Projects)
          might reject them.
    type: object
  ShortRepresentation:
    description: |-
      Condensed representation of a node and its subtree. Only present for
      `SCALAR` PlanNode(s).
    properties:
      description:
        description: A string representation of the expression subtree rooted at this node.
        type: string
      subqueries:
        additionalProperties:
          format: int32
          type: integer
        description: |-
          A mapping of (subquery variable name) -> (subquery node id) for cases
          where the `description` string of this node references a `SCALAR`
          subquery contained in the expression subtree rooted at this node. The
          referenced `SCALAR` subquery may not necessarily be a direct child of
          this node.
        type: object
    type: object
  Status:
    description: |-
      The `Status` type defines a logical error model that is suitable for different
      programming environments, including REST APIs and RPC APIs. It is used by
      [gRPC](https://github.com/grpc). The error model is designed to be:

      - Simple to use and understand for most users
      - Flexible enough to meet unexpected needs

      # Overview

      The `Status` message contains three pieces of data: error code, error message,
      and error details. The error code should be an enum value of
      google.rpc.Code, but it may accept additional error codes if needed.  The
      error message should be a developer-facing English message that helps
      developers *understand* and *resolve* the error. If a localized user-facing
      error message is needed, put the localized message in the error details or
      localize it in the client. The optional error details may contain arbitrary
      information about the error. There is a predefined set of error detail types
      in the package `google.rpc` that can be used for common error conditions.

      # Language mapping

      The `Status` message is the logical representation of the error model, but it
      is not necessarily the actual wire format. When the `Status` message is
      exposed in different client libraries and different wire protocols, it can be
      mapped differently. For example, it will likely be mapped to some exceptions
      in Java, but more likely mapped to some error codes in C.

      # Other uses

      The error model and the `Status` message can be used in a variety of
      environments, either with or without APIs, to provide a
      consistent developer experience across different environments.

      Example uses of this error model include:

      - Partial errors. If a service needs to return partial errors to the client,
          it may embed the `Status` in the normal response to indicate the partial
          errors.

      - Workflow errors. A typical workflow has multiple steps. Each step may
          have a `Status` message for error reporting.

      - Batch operations. If a client uses batch request and batch response, the
          `Status` message should be used directly inside batch response, one for
          each error sub-response.

      - Asynchronous operations. If an API call embeds asynchronous operation
          results in its response, the status of those operations should be
          represented directly using the `Status` message.

      - Logging. If some API errors are stored in logs, the message `Status` could
          be used directly after any stripping needed for security/privacy reasons.
    properties:
      code:
        description: 'The status code, which should be an enum value of google.rpc.Code.'
        format: int32
        type: integer
      details:
        description: |-
          A list of messages that carry the error details.  There is a common set of
          message types for APIs to use.
        items:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          type: object
        type: array
      message:
        description: |-
          A developer-facing error message, which should be in English. Any
          user-facing error message should be localized and sent in the
          google.rpc.Status.details field, or localized by the client.
        type: string
    type: object
  StructType:
    description: '`StructType` defines the fields of a STRUCT type.'
    properties:
      fields:
        description: |-
          The list of fields that make up this struct. Order is
          significant, because values of this struct type are represented as
          lists, where the order of field values matches the order of
          fields in the StructType. In turn, the order of fields
          matches the order of columns in a read request, or the order of
          fields in the `SELECT` clause of a query.
        items:
          $ref: '#/definitions/Field'
        type: array
    type: object
  TestIamPermissionsRequest:
    description: Request message for `TestIamPermissions` method.
    properties:
      permissions:
        description: |-
          REQUIRED: The set of permissions to check for 'resource'.
          Permissions with wildcards (such as '*', 'spanner.*', 'spanner.instances.*') are not allowed.
        items:
          type: string
        type: array
    type: object
  TestIamPermissionsResponse:
    description: Response message for `TestIamPermissions` method.
    properties:
      permissions:
        description: |-
          A subset of `TestPermissionsRequest.permissions` that the caller is
          allowed.
        items:
          type: string
        type: array
    type: object
  Transaction:
    description: A transaction.
    properties:
      id:
        description: |-
          `id` may be used to identify the transaction in subsequent
          Read,
          ExecuteSql,
          Commit, or
          Rollback calls.

          Single-use read-only transactions do not have IDs, because
          single-use transactions do not support multiple requests.
        format: byte
        type: string
      readTimestamp:
        description: |-
          For snapshot read-only transactions, the read timestamp chosen
          for the transaction. Not returned by default: see
          TransactionOptions.ReadOnly.return_read_timestamp.
        format: google-datetime
        type: string
    type: object
  TransactionOptions:
    description: |-
      # Transactions


      Each session can have at most one active transaction at a time. After the
      active transaction is completed, the session can immediately be
      re-used for the next transaction. It is not necessary to create a
      new session for each transaction.

      # Transaction Modes

      Cloud Spanner supports two transaction modes:

        1. Locking read-write. This type of transaction is the only way
           to write data into Cloud Spanner. These transactions rely on
           pessimistic locking and, if necessary, two-phase commit.
           Locking read-write transactions may abort, requiring the
           application to retry.

        2. Snapshot read-only. This transaction type provides guaranteed
           consistency across several reads, but does not allow
           writes. Snapshot read-only transactions can be configured to
           read at timestamps in the past. Snapshot read-only
           transactions do not need to be committed.

      For transactions that only read, snapshot read-only transactions
      provide simpler semantics and are almost always faster. In
      particular, read-only transactions do not take locks, so they do
      not conflict with read-write transactions. As a consequence of not
      taking locks, they also do not abort, so retry loops are not needed.

      Transactions may only read/write data in a single database. They
      may, however, read/write data in different tables within that
      database.

      ## Locking Read-Write Transactions

      Locking transactions may be used to atomically read-modify-write
      data anywhere in a database. This type of transaction is externally
      consistent.

      Clients should attempt to minimize the amount of time a transaction
      is active. Faster transactions commit with higher probability
      and cause less contention. Cloud Spanner attempts to keep read locks
      active as long as the transaction continues to do reads, and the
      transaction has not been terminated by
      Commit or
      Rollback.  Long periods of
      inactivity at the client may cause Cloud Spanner to release a
      transaction's locks and abort it.

      Reads performed within a transaction acquire locks on the data
      being read. Writes can only be done at commit time, after all reads
      have been completed.
      Conceptually, a read-write transaction consists of zero or more
      reads or SQL queries followed by
      Commit. At any time before
      Commit, the client can send a
      Rollback request to abort the
      transaction.

      ### Semantics

      Cloud Spanner can commit the transaction if all read locks it acquired
      are still valid at commit time, and it is able to acquire write
      locks for all writes. Cloud Spanner can abort the transaction for any
      reason. If a commit attempt returns `ABORTED`, Cloud Spanner guarantees
      that the transaction has not modified any user data in Cloud Spanner.

      Unless the transaction commits, Cloud Spanner makes no guarantees about
      how long the transaction's locks were held for. It is an error to
      use Cloud Spanner locks for any sort of mutual exclusion other than
      between Cloud Spanner transactions themselves.

      ### Retrying Aborted Transactions

      When a transaction aborts, the application can choose to retry the
      whole transaction again. To maximize the chances of successfully
      committing the retry, the client should execute the retry in the
      same session as the original attempt. The original session's lock
      priority increases with each consecutive abort, meaning that each
      attempt has a slightly better chance of success than the previous.

      Under some circumstances (e.g., many transactions attempting to
      modify the same row(s)), a transaction can abort many times in a
      short period before successfully committing. Thus, it is not a good
      idea to cap the number of retries a transaction can attempt;
      instead, it is better to limit the total amount of wall time spent
      retrying.

      ### Idle Transactions

      A transaction is considered idle if it has no outstanding reads or
      SQL queries and has not started a read or SQL query within the last 10
      seconds. Idle transactions can be aborted by Cloud Spanner so that they
      don't hold on to locks indefinitely. In that case, the commit will
      fail with error `ABORTED`.

      If this behavior is undesirable, periodically executing a simple
      SQL query in the transaction (e.g., `SELECT 1`) prevents the
      transaction from becoming idle.

      ## Snapshot Read-Only Transactions

      Snapshot read-only transactions provides a simpler method than
      locking read-write transactions for doing several consistent
      reads. However, this type of transaction does not support writes.

      Snapshot transactions do not take locks. Instead, they work by
      choosing a Cloud Spanner timestamp, then executing all reads at that
      timestamp. Since they do not acquire locks, they do not block
      concurrent read-write transactions.

      Unlike locking read-write transactions, snapshot read-only
      transactions never abort. They can fail if the chosen read
      timestamp is garbage collected; however, the default garbage
      collection policy is generous enough that most applications do not
      need to worry about this in practice.

      Snapshot read-only transactions do not need to call
      Commit or
      Rollback (and in fact are not
      permitted to do so).

      To execute a snapshot transaction, the client specifies a timestamp
      bound, which tells Cloud Spanner how to choose a read timestamp.

      The types of timestamp bound are:

        - Strong (the default).
        - Bounded staleness.
        - Exact staleness.

      If the Cloud Spanner database to be read is geographically distributed,
      stale read-only transactions can execute more quickly than strong
      or read-write transaction, because they are able to execute far
      from the leader replica.

      Each type of timestamp bound is discussed in detail below.

      ### Strong

      Strong reads are guaranteed to see the effects of all transactions
      that have committed before the start of the read. Furthermore, all
      rows yielded by a single read are consistent with each other -- if
      any part of the read observes a transaction, all parts of the read
      see the transaction.

      Strong reads are not repeatable: two consecutive strong read-only
      transactions might return inconsistent results if there are
      concurrent writes. If consistency across reads is required, the
      reads should be executed within a transaction or at an exact read
      timestamp.

      See TransactionOptions.ReadOnly.strong.

      ### Exact Staleness

      These timestamp bounds execute reads at a user-specified
      timestamp. Reads at a timestamp are guaranteed to see a consistent
      prefix of the global transaction history: they observe
      modifications done by all transactions with a commit timestamp <=
      the read timestamp, and observe none of the modifications done by
      transactions with a larger commit timestamp. They will block until
      all conflicting transactions that may be assigned commit timestamps
      <= the read timestamp have finished.

      The timestamp can either be expressed as an absolute Cloud Spanner commit
      timestamp or a staleness relative to the current time.

      These modes do not require a "negotiation phase" to pick a
      timestamp. As a result, they execute slightly faster than the
      equivalent boundedly stale concurrency modes. On the other hand,
      boundedly stale reads usually return fresher results.

      See TransactionOptions.ReadOnly.read_timestamp and
      TransactionOptions.ReadOnly.exact_staleness.

      ### Bounded Staleness

      Bounded staleness modes allow Cloud Spanner to pick the read timestamp,
      subject to a user-provided staleness bound. Cloud Spanner chooses the
      newest timestamp within the staleness bound that allows execution
      of the reads at the closest available replica without blocking.

      All rows yielded are consistent with each other -- if any part of
      the read observes a transaction, all parts of the read see the
      transaction. Boundedly stale reads are not repeatable: two stale
      reads, even if they use the same staleness bound, can execute at
      different timestamps and thus return inconsistent results.

      Boundedly stale reads execute in two phases: the first phase
      negotiates a timestamp among all replicas needed to serve the
      read. In the second phase, reads are executed at the negotiated
      timestamp.

      As a result of the two phase execution, bounded staleness reads are
      usually a little slower than comparable exact staleness
      reads. However, they are typically able to return fresher
      results, and are more likely to execute at the closest replica.

      Because the timestamp negotiation requires up-front knowledge of
      which rows will be read, it can only be used with single-use
      read-only transactions.

      See TransactionOptions.ReadOnly.max_staleness and
      TransactionOptions.ReadOnly.min_read_timestamp.

      ### Old Read Timestamps and Garbage Collection

      Cloud Spanner continuously garbage collects deleted and overwritten data
      in the background to reclaim storage space. This process is known
      as "version GC". By default, version GC reclaims versions after they
      are one hour old. Because of this, Cloud Spanner cannot perform reads
      at read timestamps more than one hour in the past. This
      restriction also applies to in-progress reads and/or SQL queries whose
      timestamp become too old while executing. Reads and SQL queries with
      too-old read timestamps fail with the error `FAILED_PRECONDITION`.
    properties:
      readOnly:
        $ref: '#/definitions/ReadOnly'
        description: |-
          Transaction will not write.

          Authorization to begin a read-only transaction requires
          `spanner.databases.beginReadOnlyTransaction` permission
          on the `session` resource.
      readWrite:
        $ref: '#/definitions/ReadWrite'
        description: |-
          Transaction may write.

          Authorization to begin a read-write transaction requires
          `spanner.databases.beginOrRollbackReadWriteTransaction` permission
          on the `session` resource.
    type: object
  TransactionSelector:
    description: |-
      This message is used to select the transaction in which a
      Read or
      ExecuteSql call runs.

      See TransactionOptions for more information about transactions.
    properties:
      begin:
        $ref: '#/definitions/TransactionOptions'
        description: |-
          Begin a new transaction and execute this read or SQL query in
          it. The transaction ID of the new transaction is returned in
          ResultSetMetadata.transaction, which is a Transaction.
      id:
        description: Execute the read or SQL query in a previously-started transaction.
        format: byte
        type: string
      singleUse:
        $ref: '#/definitions/TransactionOptions'
        description: |-
          Execute the read or SQL query in a temporary transaction.
          This is the most efficient way to execute a transaction that
          consists of a single SQL query.
    type: object
  Type:
    description: |-
      `Type` indicates the type of a Cloud Spanner value, as might be stored in a
      table cell or returned from an SQL query.
    properties:
      arrayElementType:
        $ref: '#/definitions/Type'
        description: |-
          If code == ARRAY, then `array_element_type`
          is the type of the array elements.
      code:
        description: Required. The TypeCode for this type.
        enum:
          - TYPE_CODE_UNSPECIFIED
          - BOOL
          - INT64
          - FLOAT64
          - TIMESTAMP
          - DATE
          - STRING
          - BYTES
          - ARRAY
          - STRUCT
        type: string
      structType:
        $ref: '#/definitions/StructType'
        description: |-
          If code == STRUCT, then `struct_type`
          provides type information for the struct's fields.
    type: object
  UpdateDatabaseDdlMetadata:
    description: |-
      Metadata type for the operation returned by
      UpdateDatabaseDdl.
    properties:
      commitTimestamps:
        description: |-
          Reports the commit timestamps of all statements that have
          succeeded so far, where `commit_timestamps[i]` is the commit
          timestamp for the statement `statements[i]`.
        items:
          format: google-datetime
          type: string
        type: array
      database:
        description: The database being modified.
        type: string
      statements:
        description: |-
          For an update this list contains all the statements. For an
          individual statement, this list contains only that statement.
        items:
          type: string
        type: array
    type: object
  UpdateDatabaseDdlRequest:
    description: |-
      Enqueues the given DDL statements to be applied, in order but not
      necessarily all at once, to the database schema at some point (or
      points) in the future. The server checks that the statements
      are executable (syntactically valid, name tables that exist, etc.)
      before enqueueing them, but they may still fail upon
      later execution (e.g., if a statement from another batch of
      statements is applied first and it conflicts in some way, or if
      there is some data-related problem like a `NULL` value in a column to
      which `NOT NULL` would be added). If a statement fails, all
      subsequent statements in the batch are automatically cancelled.

      Each batch of statements is assigned a name which can be used with
      the Operations API to monitor
      progress. See the
      operation_id field for more
      details.
    properties:
      operationId:
        description: |-
          If empty, the new update request is assigned an
          automatically-generated operation ID. Otherwise, `operation_id`
          is used to construct the name of the resulting
          Operation.

          Specifying an explicit operation ID simplifies determining
          whether the statements were executed in the event that the
          UpdateDatabaseDdl call is replayed,
          or the return value is otherwise lost: the database and
          `operation_id` fields can be combined to form the
          name of the resulting
          longrunning.Operation: `<database>/operations/<operation_id>`.

          `operation_id` should be unique within the database, and must be
          a valid identifier: `a-z*`. Note that
          automatically-generated operation IDs always begin with an
          underscore. If the named operation already exists,
          UpdateDatabaseDdl returns
          `ALREADY_EXISTS`.
        type: string
      statements:
        description: DDL statements to be applied to the database.
        items:
          type: string
        type: array
    type: object
  UpdateInstanceMetadata:
    description: |-
      Metadata type for the operation returned by
      UpdateInstance.
    properties:
      cancelTime:
        description: |-
          The time at which this operation was cancelled. If set, this operation is
          in the process of undoing itself (which is guaranteed to succeed) and
          cannot be cancelled again.
        format: google-datetime
        type: string
      endTime:
        description: The time at which this operation failed or was completed successfully.
        format: google-datetime
        type: string
      instance:
        $ref: '#/definitions/Instance'
        description: The desired end state of the update.
      startTime:
        description: |-
          The time at which UpdateInstance
          request was received.
        format: google-datetime
        type: string
    type: object
  UpdateInstanceRequest:
    description: The request for UpdateInstance.
    properties:
      fieldMask:
        description: |-
          Required. A mask specifying which fields in [][google.spanner.admin.instance.v1.UpdateInstanceRequest.instance] should be updated.
          The field mask must always be specified; this prevents any future fields in
          [][google.spanner.admin.instance.v1.Instance] from being erased accidentally by clients that do not know
          about them.
        format: google-fieldmask
        type: string
      instance:
        $ref: '#/definitions/Instance'
        description: |-
          Required. The instance to update, which must always include the instance
          name.  Otherwise, only fields mentioned in [][google.spanner.admin.instance.v1.UpdateInstanceRequest.field_mask] need be included.
    type: object
  Write:
    description: |-
      Arguments to insert, update, insert_or_update, and
      replace operations.
    properties:
      columns:
        description: |-
          The names of the columns in table to be written.

          The list of columns must contain enough columns to allow
          Cloud Spanner to derive values for all primary key columns in the
          row(s) to be modified.
        items:
          type: string
        type: array
      table:
        description: Required. The table whose rows will be written.
        type: string
      values:
        description: |-
          The values to be written. `values` can contain more than one
          list of values. If it does, then multiple rows are written, one
          for each entry in `values`. Each list in `values` must have
          exactly as many entries as there are entries in columns
          above. Sending multiple lists is equivalent to sending multiple
          `Mutation`s, each containing one `values` entry and repeating
          table and columns. Individual values in each list are
          encoded as described here.
        items:
          items: {}
          type: array
        type: array
    type: object

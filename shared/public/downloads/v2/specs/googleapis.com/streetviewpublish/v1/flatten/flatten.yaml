basePath: /
definitions.BatchDeletePhotosRequest.description: Request to delete multiple Photos.
definitions.BatchDeletePhotosRequest.properties.photoIds.description: |-
  Required. IDs of the Photos. For HTTP
  GET requests, the URL query parameter should be
  `photoIds=<id1>&photoIds=<id2>&...`.
definitions.BatchDeletePhotosRequest.properties.photoIds.items.type: string
definitions.BatchDeletePhotosRequest.properties.photoIds.type: array
definitions.BatchDeletePhotosRequest.type: object
definitions.BatchDeletePhotosResponse.description: |-
  Response to batch delete of one or more
  Photos.
definitions.BatchDeletePhotosResponse.properties.status.description: |-
  The status for the operation to delete a single
  Photo in the batch request.
definitions.BatchDeletePhotosResponse.properties.status.items.$ref: '#/definitions/Status'
definitions.BatchDeletePhotosResponse.properties.status.type: array
definitions.BatchDeletePhotosResponse.type: object
definitions.BatchGetPhotosResponse.description: Response to batch get of Photos.
definitions.BatchGetPhotosResponse.properties.results.description: |-
  List of results for each individual
  Photo requested, in the same order as
  the requests in
  BatchGetPhotos.
definitions.BatchGetPhotosResponse.properties.results.items.$ref: '#/definitions/PhotoResponse'
definitions.BatchGetPhotosResponse.properties.results.type: array
definitions.BatchGetPhotosResponse.type: object
definitions.BatchUpdatePhotosRequest.description: |-
  Request to update the metadata of photos.
  Updating the pixels of photos is not supported.
definitions.BatchUpdatePhotosRequest.properties.updatePhotoRequests.description: |-
  Required. List of
  UpdatePhotoRequests.
definitions.BatchUpdatePhotosRequest.properties.updatePhotoRequests.items.$ref: '#/definitions/UpdatePhotoRequest'
definitions.BatchUpdatePhotosRequest.properties.updatePhotoRequests.type: array
definitions.BatchUpdatePhotosRequest.type: object
definitions.BatchUpdatePhotosResponse.description: |-
  Response to batch update of metadata of one or more
  Photos.
definitions.BatchUpdatePhotosResponse.properties.results.description: |-
  List of results for each individual
  Photo updated, in the same order as
  the request.
definitions.BatchUpdatePhotosResponse.properties.results.items.$ref: '#/definitions/PhotoResponse'
definitions.BatchUpdatePhotosResponse.properties.results.type: array
definitions.BatchUpdatePhotosResponse.type: object
definitions.Connection.description: A connection is the link from a source photo to
  a destination photo.
definitions.Connection.properties.target.$ref: '#/definitions/PhotoId'
definitions.Connection.properties.target.description: |-
  Required. The destination of the connection from the containing photo to
  another photo.
definitions.Connection.type: object
definitions.Empty.description: |-
  A generic empty message that you can re-use to avoid defining duplicated
  empty messages in your APIs. A typical example is to use it as the request
  or the response type of an API method. For instance:

      service Foo {
        rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
      }

  The JSON representation for `Empty` is empty JSON object `{}`.
definitions.Empty.type: object
definitions.LatLng.description: |-
  An object representing a latitude/longitude pair. This is expressed as a pair
  of doubles representing degrees latitude and degrees longitude. Unless
  specified otherwise, this must conform to the
  <a href="http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf">WGS84
  standard</a>. Values must be within normalized ranges.

  Example of normalization code in Python:

      def NormalizeLongitude(longitude):
        """Wraps decimal degrees longitude to [-180.0, 180.0]."""
        q, r = divmod(longitude, 360.0)
        if r > 180.0 or (r == 180.0 and q <= -1.0):
          return r - 360.0
        return r

      def NormalizeLatLng(latitude, longitude):
        """Wraps decimal degrees latitude and longitude to
        [-90.0, 90.0] and [-180.0, 180.0], respectively."""
        r = latitude % 360.0
        if r <= 90.0:
          return r, NormalizeLongitude(longitude)
        elif r >= 270.0:
          return r - 360, NormalizeLongitude(longitude)
        else:
          return 180 - r, NormalizeLongitude(longitude + 180.0)

      assert 180.0 == NormalizeLongitude(180.0)
      assert -180.0 == NormalizeLongitude(-180.0)
      assert -179.0 == NormalizeLongitude(181.0)
      assert (0.0, 0.0) == NormalizeLatLng(360.0, 0.0)
      assert (0.0, 0.0) == NormalizeLatLng(-360.0, 0.0)
      assert (85.0, 180.0) == NormalizeLatLng(95.0, 0.0)
      assert (-85.0, -170.0) == NormalizeLatLng(-95.0, 10.0)
      assert (90.0, 10.0) == NormalizeLatLng(90.0, 10.0)
      assert (-90.0, -10.0) == NormalizeLatLng(-90.0, -10.0)
      assert (0.0, -170.0) == NormalizeLatLng(-180.0, 10.0)
      assert (0.0, -170.0) == NormalizeLatLng(180.0, 10.0)
      assert (-90.0, 10.0) == NormalizeLatLng(270.0, 10.0)
      assert (90.0, 10.0) == NormalizeLatLng(-270.0, 10.0)
definitions.LatLng.properties.latitude.description: The latitude in degrees. It must
  be in the range [-90.0, +90.0].
definitions.LatLng.properties.latitude.format: double
definitions.LatLng.properties.latitude.type: number
definitions.LatLng.properties.longitude.description: The longitude in degrees. It
  must be in the range [-180.0, +180.0].
definitions.LatLng.properties.longitude.format: double
definitions.LatLng.properties.longitude.type: number
definitions.LatLng.type: object
definitions.Level.description: Level information containing level number and its corresponding
  name.
definitions.Level.properties.name.description: |-
  Required. A name assigned to this Level, restricted to 3 characters.
  Consider how the elevator buttons would be labeled for this level if there
  was an elevator.
definitions.Level.properties.name.type: string
definitions.Level.properties.number.description: |-
  Floor number, used for ordering. 0 indicates the ground level, 1 indicates
  the first level above ground level, -1 indicates the first level under
  ground level. Non-integer values are OK.
definitions.Level.properties.number.format: double
definitions.Level.properties.number.type: number
definitions.Level.type: object
definitions.ListPhotosResponse.description: Response to list all photos that belong
  to a user.
definitions.ListPhotosResponse.properties.nextPageToken.description: |-
  Token to retrieve the next page of results, or empty if there are no more
  results in the list.
definitions.ListPhotosResponse.properties.nextPageToken.type: string
definitions.ListPhotosResponse.properties.photos.description: |-
  List of photos. The maximum number of items returned is based on the
  pageSize field
  in the request.
definitions.ListPhotosResponse.properties.photos.items.$ref: '#/definitions/Photo'
definitions.ListPhotosResponse.properties.photos.type: array
definitions.ListPhotosResponse.type: object
definitions.Operation.description: |-
  This resource represents a long-running operation that is the result of a
  network API call.
definitions.Operation.properties.done.description: |-
  If the value is `false`, it means the operation is still in progress.
  If `true`, the operation is completed, and either `error` or `response` is
  available.
definitions.Operation.properties.done.type: boolean
definitions.Operation.properties.error.$ref: '#/definitions/Status'
definitions.Operation.properties.error.description: The error result of the operation
  in case of failure or cancellation.
definitions.Operation.properties.metadata.additionalProperties.description: Properties
  of the object. Contains field @type with type URL.
definitions.Operation.properties.metadata.description: |-
  Service-specific metadata associated with the operation.  It typically
  contains progress information and common metadata such as create time.
  Some services might not provide such metadata.  Any method that returns a
  long-running operation should document the metadata type, if any.
definitions.Operation.properties.metadata.type: object
definitions.Operation.properties.name.description: |-
  The server-assigned name, which is only unique within the same service that
  originally returns it. If you use the default HTTP mapping, the
  `name` should have the format of `operations/some/unique/name`.
definitions.Operation.properties.name.type: string
definitions.Operation.properties.response.additionalProperties.description: Properties
  of the object. Contains field @type with type URL.
definitions.Operation.properties.response.description: |-
  The normal response of the operation in case of success.  If the original
  method returns no data on success, such as `Delete`, the response is
  `google.protobuf.Empty`.  If the original method is standard
  `Get`/`Create`/`Update`, the response should be the resource.  For other
  methods, the response should have the type `XxxResponse`, where `Xxx`
  is the original method name.  For example, if the original method name
  is `TakeSnapshot()`, the inferred response type is
  `TakeSnapshotResponse`.
definitions.Operation.properties.response.type: object
definitions.Operation.type: object
definitions.Photo.description: Photo is used to store 360 photos along with photo
  metadata.
definitions.Photo.properties.captureTime.description: |-
  Absolute time when the photo was captured.
  When the photo has no exif timestamp, this is used to set a timestamp in
  the photo metadata.
definitions.Photo.properties.captureTime.format: google-datetime
definitions.Photo.properties.captureTime.type: string
definitions.Photo.properties.connections.description: |-
  Connections to other photos. A connection represents the link from this
  photo to another photo.
definitions.Photo.properties.connections.items.$ref: '#/definitions/Connection'
definitions.Photo.properties.connections.type: array
definitions.Photo.properties.downloadUrl.description: |-
  Output only. The download URL for the photo bytes. This field is set only
  when
  GetPhotoRequest.view
  is set to
  PhotoView.INCLUDE_DOWNLOAD_URL.
definitions.Photo.properties.downloadUrl.type: string
definitions.Photo.properties.photoId.$ref: '#/definitions/PhotoId'
definitions.Photo.properties.photoId.description: |-
  Required when updating a photo. Output only when creating a photo.
  Identifier for the photo, which is unique among all photos in
  Google.
definitions.Photo.properties.places.description: Places where this photo belongs.
definitions.Photo.properties.places.items.$ref: '#/definitions/Place'
definitions.Photo.properties.places.type: array
definitions.Photo.properties.pose.$ref: '#/definitions/Pose'
definitions.Photo.properties.pose.description: Pose of the photo.
definitions.Photo.properties.shareLink.description: Output only. The share link for
  the photo.
definitions.Photo.properties.shareLink.type: string
definitions.Photo.properties.thumbnailUrl.description: Output only. The thumbnail
  URL for showing a preview of the given photo.
definitions.Photo.properties.thumbnailUrl.type: string
definitions.Photo.properties.uploadReference.$ref: '#/definitions/UploadRef'
definitions.Photo.properties.uploadReference.description: |-
  Required when creating a photo. Input only. The resource URL where the
  photo bytes are uploaded to.
definitions.Photo.properties.viewCount.description: Output only. View count of the
  photo.
definitions.Photo.properties.viewCount.format: int64
definitions.Photo.properties.viewCount.type: string
definitions.Photo.type: object
definitions.PhotoId.description: Identifier for a Photo.
definitions.PhotoId.properties.id.description: Required. A unique identifier for a
  photo.
definitions.PhotoId.properties.id.type: string
definitions.PhotoId.type: object
definitions.PhotoResponse.description: |-
  Response payload for a single
  Photo
  in batch operations including
  BatchGetPhotos
  and
  BatchUpdatePhotos.
definitions.PhotoResponse.properties.photo.$ref: '#/definitions/Photo'
definitions.PhotoResponse.properties.photo.description: |-
  The Photo resource, if the request
  was successful.
definitions.PhotoResponse.properties.status.$ref: '#/definitions/Status'
definitions.PhotoResponse.properties.status.description: |-
  The status for the operation to get or update a single photo in the batch
  request.
definitions.PhotoResponse.type: object
definitions.Place.description: Place metadata for an entity.
definitions.Place.properties.placeId.description: |-
  Place identifier, as described in
  https://developers.google.com/places/place-id.
definitions.Place.properties.placeId.type: string
definitions.Place.type: object
definitions.Pose.description: Raw pose measurement for an entity.
definitions.Pose.properties.altitude.description: |-
  Altitude of the pose in meters above ground level (as defined by WGS84).
  NaN indicates an unmeasured quantity.
definitions.Pose.properties.altitude.format: double
definitions.Pose.properties.altitude.type: number
definitions.Pose.properties.heading.description: |-
  Compass heading, measured at the center of the photo in degrees clockwise
  from North. Value must be >=0 and <360.
  NaN indicates an unmeasured quantity.
definitions.Pose.properties.heading.format: double
definitions.Pose.properties.heading.type: number
definitions.Pose.properties.latLngPair.$ref: '#/definitions/LatLng'
definitions.Pose.properties.latLngPair.description: |-
  Latitude and longitude pair of the pose, as explained here:
  https://cloud.google.com/datastore/docs/reference/rest/Shared.Types/LatLng
  When creating a Photo, if the
  latitude and longitude pair are not provided here, the geolocation from the
  exif header will be used. If the latitude and longitude pair is not
  provided and cannot be found in the exif header, the create photo process
  will fail.
definitions.Pose.properties.level.$ref: '#/definitions/Level'
definitions.Pose.properties.level.description: Level (the floor in a building) used
  to configure vertical navigation.
definitions.Pose.properties.pitch.description: |-
  Pitch, measured at the center of the photo in degrees. Value must be >=-90
  and <= 90. A value of -90 means looking directly down, and a value of 90
  means looking directly up.
  NaN indicates an unmeasured quantity.
definitions.Pose.properties.pitch.format: double
definitions.Pose.properties.pitch.type: number
definitions.Pose.properties.roll.description: |-
  Roll, measured in degrees. Value must be >= 0 and <360. A value of 0
  means level with the horizon.
  NaN indicates an unmeasured quantity.
definitions.Pose.properties.roll.format: double
definitions.Pose.properties.roll.type: number
definitions.Pose.type: object
definitions.Status.description: |-
  The `Status` type defines a logical error model that is suitable for different
  programming environments, including REST APIs and RPC APIs. It is used by
  [gRPC](https://github.com/grpc). The error model is designed to be:

  - Simple to use and understand for most users
  - Flexible enough to meet unexpected needs

  # Overview

  The `Status` message contains three pieces of data: error code, error message,
  and error details. The error code should be an enum value of
  google.rpc.Code, but it may accept additional error codes if needed.  The
  error message should be a developer-facing English message that helps
  developers *understand* and *resolve* the error. If a localized user-facing
  error message is needed, put the localized message in the error details or
  localize it in the client. The optional error details may contain arbitrary
  information about the error. There is a predefined set of error detail types
  in the package `google.rpc` that can be used for common error conditions.

  # Language mapping

  The `Status` message is the logical representation of the error model, but it
  is not necessarily the actual wire format. When the `Status` message is
  exposed in different client libraries and different wire protocols, it can be
  mapped differently. For example, it will likely be mapped to some exceptions
  in Java, but more likely mapped to some error codes in C.

  # Other uses

  The error model and the `Status` message can be used in a variety of
  environments, either with or without APIs, to provide a
  consistent developer experience across different environments.

  Example uses of this error model include:

  - Partial errors. If a service needs to return partial errors to the client,
      it may embed the `Status` in the normal response to indicate the partial
      errors.

  - Workflow errors. A typical workflow has multiple steps. Each step may
      have a `Status` message for error reporting.

  - Batch operations. If a client uses batch request and batch response, the
      `Status` message should be used directly inside batch response, one for
      each error sub-response.

  - Asynchronous operations. If an API call embeds asynchronous operation
      results in its response, the status of those operations should be
      represented directly using the `Status` message.

  - Logging. If some API errors are stored in logs, the message `Status` could
      be used directly after any stripping needed for security/privacy reasons.
definitions.Status.properties.code.description: The status code, which should be an
  enum value of google.rpc.Code.
definitions.Status.properties.code.format: int32
definitions.Status.properties.code.type: integer
definitions.Status.properties.details.description: |-
  A list of messages that carry the error details.  There is a common set of
  message types for APIs to use.
definitions.Status.properties.details.items.additionalProperties.description: Properties
  of the object. Contains field @type with type URL.
definitions.Status.properties.details.items.type: object
definitions.Status.properties.details.type: array
definitions.Status.properties.message.description: |-
  A developer-facing error message, which should be in English. Any
  user-facing error message should be localized and sent in the
  google.rpc.Status.details field, or localized by the client.
definitions.Status.properties.message.type: string
definitions.Status.type: object
definitions.UpdatePhotoRequest.description: |-
  Request to update the metadata of a
  Photo. Updating the pixels of a photo
  is not supported.
definitions.UpdatePhotoRequest.properties.photo.$ref: '#/definitions/Photo'
definitions.UpdatePhotoRequest.properties.photo.description: |-
  Required. Photo object containing the
  new metadata.
definitions.UpdatePhotoRequest.properties.updateMask.description: |-
  Mask that identifies fields on the photo metadata to update.
  If not present, the old Photo
  metadata will be entirely replaced with the
  new Photo metadata in this request.
  The update fails if invalid fields are specified. Multiple fields can be
  specified in a comma-delimited list.

  The following fields are valid:

  * `pose.heading`
  * `pose.latLngPair`
  * `pose.pitch`
  * `pose.roll`
  * `pose.level`
  * `pose.altitude`
  * `connections`
  * `places`


  <aside class="note"><b>Note:</b> Repeated fields in
  updateMask
  mean the entire set of repeated values will be replaced with the new
  contents. For example, if
  updateMask
  contains `connections` and `UpdatePhotoRequest.photo.connections` is empty,
  all connections will be removed.</aside>
definitions.UpdatePhotoRequest.properties.updateMask.format: google-fieldmask
definitions.UpdatePhotoRequest.properties.updateMask.type: string
definitions.UpdatePhotoRequest.type: object
definitions.UploadRef.description: Upload reference for media files.
definitions.UploadRef.properties.uploadUrl.description: |-
  Required. An upload reference should be unique for each user. It follows
  the form:
  "https://streetviewpublish.googleapis.com/media/user/{account_id}/photo/{upload_reference}"
definitions.UploadRef.properties.uploadUrl.type: string
definitions.UploadRef.type: object
externalDocs.url: https://developers.google.com/streetview/publish/
host: streetviewpublish.googleapis.com
info.contact.name: Google
info.contact.url: https://google.com
info.description: |
  Publishes 360 photos to Google Maps, along with position, orientation, and connectivity metadata. Apps can offer an interface for positioning, connecting, and uploading user-generated Street View images.
info.title: Street View Publish
info.version: v1
info.x-apiClientRegistration.url: https://console.developers.google.com
info.x-logo.url: https://api.apis.guru/v2/cache/logo/https_www.google.com_images_branding_googlelogo_2x_googlelogo_color_272x92dp.png
info.x-origin.length: 1
info.x-origin[0].converter.url: https://github.com/lucybot/api-spec-converter
info.x-origin[0].converter.version: 2.6.0
info.x-origin[0].format: google
info.x-origin[0].url: https://streetviewpublish.googleapis.com/$discovery/rest?version=v1
info.x-origin[0].version: v1
info.x-preferred: true
info.x-providerName: googleapis.com
info.x-serviceName: streetviewpublish
parameters.$.xgafv.description: V1 error format.
parameters.$.xgafv.enum.length: 2
parameters.$.xgafv.enum[0]: "1"
parameters.$.xgafv.enum[1]: "2"
parameters.$.xgafv.in: query
parameters.$.xgafv.name: $.xgafv
parameters.$.xgafv.type: string
parameters.access_token.description: OAuth access token.
parameters.access_token.in: query
parameters.access_token.name: access_token
parameters.access_token.type: string
parameters.alt.default: json
parameters.alt.description: Data format for response.
parameters.alt.enum.length: 3
parameters.alt.enum[0]: json
parameters.alt.enum[1]: media
parameters.alt.enum[2]: proto
parameters.alt.in: query
parameters.alt.name: alt
parameters.alt.type: string
parameters.bearer_token.description: OAuth bearer token.
parameters.bearer_token.in: query
parameters.bearer_token.name: bearer_token
parameters.bearer_token.type: string
parameters.callback.description: JSONP
parameters.callback.in: query
parameters.callback.name: callback
parameters.callback.type: string
parameters.fields.description: Selector specifying which fields to include in a partial
  response.
parameters.fields.in: query
parameters.fields.name: fields
parameters.fields.type: string
parameters.key.description: API key. Your API key identifies your project and provides
  you with API access, quota, and reports. Required unless you provide an OAuth 2.0
  token.
parameters.key.in: query
parameters.key.name: key
parameters.key.type: string
parameters.oauth_token.description: OAuth 2.0 token for the current user.
parameters.oauth_token.in: query
parameters.oauth_token.name: oauth_token
parameters.oauth_token.type: string
parameters.pp.default: true
parameters.pp.description: Pretty-print response.
parameters.pp.in: query
parameters.pp.name: pp
parameters.pp.type: boolean
parameters.prettyPrint.default: true
parameters.prettyPrint.description: Returns response with indentations and line breaks.
parameters.prettyPrint.in: query
parameters.prettyPrint.name: prettyPrint
parameters.prettyPrint.type: boolean
parameters.quotaUser.description: Available to use for quota purposes for server-side
  applications. Can be any arbitrary string assigned to a user, but should not exceed
  40 characters.
parameters.quotaUser.in: query
parameters.quotaUser.name: quotaUser
parameters.quotaUser.type: string
parameters.upload_protocol.description: Upload protocol for media (e.g. "raw", "multipart").
parameters.upload_protocol.in: query
parameters.upload_protocol.name: upload_protocol
parameters.upload_protocol.type: string
parameters.uploadType.description: Legacy upload protocol for media (e.g. "media",
  "multipart").
parameters.uploadType.in: query
parameters.uploadType.name: uploadType
parameters.uploadType.type: string
paths./v1/photo.parameters.length: 13
paths./v1/photo.parameters[0].$ref: '#/parameters/$.xgafv'
paths./v1/photo.parameters[1].$ref: '#/parameters/access_token'
paths./v1/photo.parameters[2].$ref: '#/parameters/alt'
paths./v1/photo.parameters[3].$ref: '#/parameters/bearer_token'
paths./v1/photo.parameters[4].$ref: '#/parameters/callback'
paths./v1/photo.parameters[5].$ref: '#/parameters/fields'
paths./v1/photo.parameters[6].$ref: '#/parameters/key'
paths./v1/photo.parameters[7].$ref: '#/parameters/oauth_token'
paths./v1/photo.parameters[8].$ref: '#/parameters/pp'
paths./v1/photo.parameters[9].$ref: '#/parameters/prettyPrint'
paths./v1/photo.parameters[10].$ref: '#/parameters/quotaUser'
paths./v1/photo.parameters[11].$ref: '#/parameters/uploadType'
paths./v1/photo.parameters[12].$ref: '#/parameters/upload_protocol'
paths./v1/photo.post.description: |-
  After the client finishes uploading the photo with the returned
  UploadRef,
  CreatePhoto
  publishes the uploaded Photo to
  Street View on Google Maps.

  Currently, the only way to set heading, pitch, and roll in CreatePhoto is
  through the [Photo Sphere XMP
  metadata](https://developers.google.com/streetview/spherical-metadata) in
  the photo bytes. The `pose.heading`, `pose.pitch`, `pose.roll`,
  `pose.altitude`, and `pose.level` fields in Pose are ignored for
  CreatePhoto.

  This method returns the following error codes:

  * google.rpc.Code.INVALID_ARGUMENT if the request is malformed.
  * google.rpc.Code.NOT_FOUND if the upload reference does not exist.
  * google.rpc.Code.RESOURCE_EXHAUSTED if the account has reached the
  storage limit.
paths./v1/photo.post.operationId: streetviewpublish.photo.create
paths./v1/photo.post.parameters.length: 1
paths./v1/photo.post.parameters[0].in: body
paths./v1/photo.post.parameters[0].name: body
paths./v1/photo.post.parameters[0].schema.$ref: '#/definitions/Photo'
paths./v1/photo.post.responses.200.description: Successful response
paths./v1/photo.post.responses.200.schema.$ref: '#/definitions/Photo'
paths./v1/photo.post.security.length: 1
paths./v1/photo.post.security[0].Oauth2.length: 1
paths./v1/photo.post.security[0].Oauth2[0]: https://www.googleapis.com/auth/streetviewpublish
paths./v1/photo.post.tags.length: 1
paths./v1/photo.post.tags[0]: photo
paths./v1/photo/{id}.parameters.length: 13
paths./v1/photo/{id}.parameters[0].$ref: '#/parameters/$.xgafv'
paths./v1/photo/{id}.parameters[1].$ref: '#/parameters/access_token'
paths./v1/photo/{id}.parameters[2].$ref: '#/parameters/alt'
paths./v1/photo/{id}.parameters[3].$ref: '#/parameters/bearer_token'
paths./v1/photo/{id}.parameters[4].$ref: '#/parameters/callback'
paths./v1/photo/{id}.parameters[5].$ref: '#/parameters/fields'
paths./v1/photo/{id}.parameters[6].$ref: '#/parameters/key'
paths./v1/photo/{id}.parameters[7].$ref: '#/parameters/oauth_token'
paths./v1/photo/{id}.parameters[8].$ref: '#/parameters/pp'
paths./v1/photo/{id}.parameters[9].$ref: '#/parameters/prettyPrint'
paths./v1/photo/{id}.parameters[10].$ref: '#/parameters/quotaUser'
paths./v1/photo/{id}.parameters[11].$ref: '#/parameters/uploadType'
paths./v1/photo/{id}.parameters[12].$ref: '#/parameters/upload_protocol'
paths./v1/photo/{id}.put.description: |-
  Updates the metadata of a Photo, such
  as pose, place association, connections, etc. Changing the pixels of a
  photo is not supported.

  Only the fields specified in the
  updateMask
  field are used. If `updateMask` is not present, the update applies to all
  fields.

  <aside class="note"><b>Note:</b> To update
  Pose.altitude,
  Pose.latLngPair has to be
  filled as well. Otherwise, the request will fail.</aside>

  This method returns the following error codes:

  * google.rpc.Code.PERMISSION_DENIED if the requesting user did not
  create the requested photo.
  * google.rpc.Code.INVALID_ARGUMENT if the request is malformed.
  * google.rpc.Code.NOT_FOUND if the requested photo does not exist.
paths./v1/photo/{id}.put.operationId: streetviewpublish.photo.update
paths./v1/photo/{id}.put.parameters.length: 3
paths./v1/photo/{id}.put.parameters[0].in: body
paths./v1/photo/{id}.put.parameters[0].name: body
paths./v1/photo/{id}.put.parameters[0].schema.$ref: '#/definitions/Photo'
paths./v1/photo/{id}.put.parameters[1].description: Required. A unique identifier
  for a photo.
paths./v1/photo/{id}.put.parameters[1].in: path
paths./v1/photo/{id}.put.parameters[1].name: id
paths./v1/photo/{id}.put.parameters[1].required: true
paths./v1/photo/{id}.put.parameters[1].type: string
paths./v1/photo/{id}.put.parameters[2].description: |-
  Mask that identifies fields on the photo metadata to update.
  If not present, the old Photo
  metadata will be entirely replaced with the
  new Photo metadata in this request.
  The update fails if invalid fields are specified. Multiple fields can be
  specified in a comma-delimited list.

  The following fields are valid:

  * `pose.heading`
  * `pose.latLngPair`
  * `pose.pitch`
  * `pose.roll`
  * `pose.level`
  * `pose.altitude`
  * `connections`
  * `places`


  <aside class="note"><b>Note:</b> Repeated fields in
  updateMask
  mean the entire set of repeated values will be replaced with the new
  contents. For example, if
  updateMask
  contains `connections` and `UpdatePhotoRequest.photo.connections` is empty,
  all connections will be removed.</aside>
paths./v1/photo/{id}.put.parameters[2].in: query
paths./v1/photo/{id}.put.parameters[2].name: updateMask
paths./v1/photo/{id}.put.parameters[2].type: string
paths./v1/photo/{id}.put.responses.200.description: Successful response
paths./v1/photo/{id}.put.responses.200.schema.$ref: '#/definitions/Photo'
paths./v1/photo/{id}.put.security.length: 1
paths./v1/photo/{id}.put.security[0].Oauth2.length: 1
paths./v1/photo/{id}.put.security[0].Oauth2[0]: https://www.googleapis.com/auth/streetviewpublish
paths./v1/photo/{id}.put.tags.length: 1
paths./v1/photo/{id}.put.tags[0]: photo
paths./v1/photo/{photoId}.delete.description: |-
  Deletes a Photo and its metadata.

  This method returns the following error codes:

  * google.rpc.Code.PERMISSION_DENIED if the requesting user did not
  create the requested photo.
  * google.rpc.Code.NOT_FOUND if the photo ID does not exist.
paths./v1/photo/{photoId}.delete.operationId: streetviewpublish.photo.delete
paths./v1/photo/{photoId}.delete.parameters.length: 1
paths./v1/photo/{photoId}.delete.parameters[0].description: Required. ID of the Photo.
paths./v1/photo/{photoId}.delete.parameters[0].in: path
paths./v1/photo/{photoId}.delete.parameters[0].name: photoId
paths./v1/photo/{photoId}.delete.parameters[0].required: true
paths./v1/photo/{photoId}.delete.parameters[0].type: string
paths./v1/photo/{photoId}.delete.responses.200.description: Successful response
paths./v1/photo/{photoId}.delete.responses.200.schema.$ref: '#/definitions/Empty'
paths./v1/photo/{photoId}.delete.security.length: 1
paths./v1/photo/{photoId}.delete.security[0].Oauth2.length: 1
paths./v1/photo/{photoId}.delete.security[0].Oauth2[0]: https://www.googleapis.com/auth/streetviewpublish
paths./v1/photo/{photoId}.delete.tags.length: 1
paths./v1/photo/{photoId}.delete.tags[0]: photo
paths./v1/photo/{photoId}.get.description: |-
  Gets the metadata of the specified
  Photo.

  This method returns the following error codes:

  * google.rpc.Code.PERMISSION_DENIED if the requesting user did not
  create the requested Photo.
  * google.rpc.Code.NOT_FOUND if the requested
  Photo does not exist.
paths./v1/photo/{photoId}.get.operationId: streetviewpublish.photo.get
paths./v1/photo/{photoId}.get.parameters.length: 2
paths./v1/photo/{photoId}.get.parameters[0].description: Required. ID of the Photo.
paths./v1/photo/{photoId}.get.parameters[0].in: path
paths./v1/photo/{photoId}.get.parameters[0].name: photoId
paths./v1/photo/{photoId}.get.parameters[0].required: true
paths./v1/photo/{photoId}.get.parameters[0].type: string
paths./v1/photo/{photoId}.get.parameters[1].description: |-
  Specifies if a download URL for the photo bytes should be returned in the
  Photo response.
paths./v1/photo/{photoId}.get.parameters[1].enum.length: 2
paths./v1/photo/{photoId}.get.parameters[1].enum[0]: BASIC
paths./v1/photo/{photoId}.get.parameters[1].enum[1]: INCLUDE_DOWNLOAD_URL
paths./v1/photo/{photoId}.get.parameters[1].in: query
paths./v1/photo/{photoId}.get.parameters[1].name: view
paths./v1/photo/{photoId}.get.parameters[1].type: string
paths./v1/photo/{photoId}.get.responses.200.description: Successful response
paths./v1/photo/{photoId}.get.responses.200.schema.$ref: '#/definitions/Photo'
paths./v1/photo/{photoId}.get.security.length: 1
paths./v1/photo/{photoId}.get.security[0].Oauth2.length: 1
paths./v1/photo/{photoId}.get.security[0].Oauth2[0]: https://www.googleapis.com/auth/streetviewpublish
paths./v1/photo/{photoId}.get.tags.length: 1
paths./v1/photo/{photoId}.get.tags[0]: photo
paths./v1/photo/{photoId}.parameters.length: 13
paths./v1/photo/{photoId}.parameters[0].$ref: '#/parameters/$.xgafv'
paths./v1/photo/{photoId}.parameters[1].$ref: '#/parameters/access_token'
paths./v1/photo/{photoId}.parameters[2].$ref: '#/parameters/alt'
paths./v1/photo/{photoId}.parameters[3].$ref: '#/parameters/bearer_token'
paths./v1/photo/{photoId}.parameters[4].$ref: '#/parameters/callback'
paths./v1/photo/{photoId}.parameters[5].$ref: '#/parameters/fields'
paths./v1/photo/{photoId}.parameters[6].$ref: '#/parameters/key'
paths./v1/photo/{photoId}.parameters[7].$ref: '#/parameters/oauth_token'
paths./v1/photo/{photoId}.parameters[8].$ref: '#/parameters/pp'
paths./v1/photo/{photoId}.parameters[9].$ref: '#/parameters/prettyPrint'
paths./v1/photo/{photoId}.parameters[10].$ref: '#/parameters/quotaUser'
paths./v1/photo/{photoId}.parameters[11].$ref: '#/parameters/uploadType'
paths./v1/photo/{photoId}.parameters[12].$ref: '#/parameters/upload_protocol'
paths./v1/photo:startUpload.parameters.length: 13
paths./v1/photo:startUpload.parameters[0].$ref: '#/parameters/$.xgafv'
paths./v1/photo:startUpload.parameters[1].$ref: '#/parameters/access_token'
paths./v1/photo:startUpload.parameters[2].$ref: '#/parameters/alt'
paths./v1/photo:startUpload.parameters[3].$ref: '#/parameters/bearer_token'
paths./v1/photo:startUpload.parameters[4].$ref: '#/parameters/callback'
paths./v1/photo:startUpload.parameters[5].$ref: '#/parameters/fields'
paths./v1/photo:startUpload.parameters[6].$ref: '#/parameters/key'
paths./v1/photo:startUpload.parameters[7].$ref: '#/parameters/oauth_token'
paths./v1/photo:startUpload.parameters[8].$ref: '#/parameters/pp'
paths./v1/photo:startUpload.parameters[9].$ref: '#/parameters/prettyPrint'
paths./v1/photo:startUpload.parameters[10].$ref: '#/parameters/quotaUser'
paths./v1/photo:startUpload.parameters[11].$ref: '#/parameters/uploadType'
paths./v1/photo:startUpload.parameters[12].$ref: '#/parameters/upload_protocol'
paths./v1/photo:startUpload.post.description: |-
  Creates an upload session to start uploading photo bytes. The upload URL of
  the returned UploadRef is used to
  upload the bytes for the Photo.

  In addition to the photo requirements shown in
  https://support.google.com/maps/answer/7012050?hl=en&ref_topic=6275604,
  the photo must also meet the following requirements:

  * Photo Sphere XMP metadata must be included in the photo medadata. See
  https://developers.google.com/streetview/spherical-metadata for the
  required fields.
  * The pixel size of the photo must meet the size requirements listed in
  https://support.google.com/maps/answer/7012050?hl=en&ref_topic=6275604, and
  the photo must be a full 360 horizontally.

  After the upload is complete, the
  UploadRef is used with
  CreatePhoto
  to create the Photo object entry.
paths./v1/photo:startUpload.post.operationId: streetviewpublish.photo.startUpload
paths./v1/photo:startUpload.post.parameters.length: 1
paths./v1/photo:startUpload.post.parameters[0].in: body
paths./v1/photo:startUpload.post.parameters[0].name: body
paths./v1/photo:startUpload.post.parameters[0].schema.$ref: '#/definitions/Empty'
paths./v1/photo:startUpload.post.responses.200.description: Successful response
paths./v1/photo:startUpload.post.responses.200.schema.$ref: '#/definitions/UploadRef'
paths./v1/photo:startUpload.post.security.length: 1
paths./v1/photo:startUpload.post.security[0].Oauth2.length: 1
paths./v1/photo:startUpload.post.security[0].Oauth2[0]: https://www.googleapis.com/auth/streetviewpublish
paths./v1/photo:startUpload.post.tags.length: 1
paths./v1/photo:startUpload.post.tags[0]: photo
paths./v1/photos.get.description: |-
  Lists all the Photos that belong to
  the user.
paths./v1/photos.get.operationId: streetviewpublish.photos.list
paths./v1/photos.get.parameters.length: 4
paths./v1/photos.get.parameters[0].description: |-
  The filter expression. For example: `placeId=ChIJj61dQgK6j4AR4GeTYWZsKWw`.

  The only filter supported at the moment is `placeId`.
paths./v1/photos.get.parameters[0].in: query
paths./v1/photos.get.parameters[0].name: filter
paths./v1/photos.get.parameters[0].type: string
paths./v1/photos.get.parameters[1].description: |-
  The maximum number of photos to return.
  `pageSize` must be non-negative. If `pageSize` is zero or is not provided,
  the default page size of 100 will be used.
  The number of photos returned in the response may be less than `pageSize`
  if the number of photos that belong to the user is less than `pageSize`.
paths./v1/photos.get.parameters[1].in: query
paths./v1/photos.get.parameters[1].name: pageSize
paths./v1/photos.get.parameters[1].type: integer
paths./v1/photos.get.parameters[2].description: |-
  The
  nextPageToken
  value returned from a previous
  ListPhotos
  request, if any.
paths./v1/photos.get.parameters[2].in: query
paths./v1/photos.get.parameters[2].name: pageToken
paths./v1/photos.get.parameters[2].type: string
paths./v1/photos.get.parameters[3].description: |-
  Specifies if a download URL for the photos bytes should be returned in the
  Photos response.
paths./v1/photos.get.parameters[3].enum.length: 2
paths./v1/photos.get.parameters[3].enum[0]: BASIC
paths./v1/photos.get.parameters[3].enum[1]: INCLUDE_DOWNLOAD_URL
paths./v1/photos.get.parameters[3].in: query
paths./v1/photos.get.parameters[3].name: view
paths./v1/photos.get.parameters[3].type: string
paths./v1/photos.get.responses.200.description: Successful response
paths./v1/photos.get.responses.200.schema.$ref: '#/definitions/ListPhotosResponse'
paths./v1/photos.get.security.length: 1
paths./v1/photos.get.security[0].Oauth2.length: 1
paths./v1/photos.get.security[0].Oauth2[0]: https://www.googleapis.com/auth/streetviewpublish
paths./v1/photos.get.tags.length: 1
paths./v1/photos.get.tags[0]: photos
paths./v1/photos.parameters.length: 13
paths./v1/photos.parameters[0].$ref: '#/parameters/$.xgafv'
paths./v1/photos.parameters[1].$ref: '#/parameters/access_token'
paths./v1/photos.parameters[2].$ref: '#/parameters/alt'
paths./v1/photos.parameters[3].$ref: '#/parameters/bearer_token'
paths./v1/photos.parameters[4].$ref: '#/parameters/callback'
paths./v1/photos.parameters[5].$ref: '#/parameters/fields'
paths./v1/photos.parameters[6].$ref: '#/parameters/key'
paths./v1/photos.parameters[7].$ref: '#/parameters/oauth_token'
paths./v1/photos.parameters[8].$ref: '#/parameters/pp'
paths./v1/photos.parameters[9].$ref: '#/parameters/prettyPrint'
paths./v1/photos.parameters[10].$ref: '#/parameters/quotaUser'
paths./v1/photos.parameters[11].$ref: '#/parameters/uploadType'
paths./v1/photos.parameters[12].$ref: '#/parameters/upload_protocol'
paths./v1/photos:batchDelete.parameters.length: 13
paths./v1/photos:batchDelete.parameters[0].$ref: '#/parameters/$.xgafv'
paths./v1/photos:batchDelete.parameters[1].$ref: '#/parameters/access_token'
paths./v1/photos:batchDelete.parameters[2].$ref: '#/parameters/alt'
paths./v1/photos:batchDelete.parameters[3].$ref: '#/parameters/bearer_token'
paths./v1/photos:batchDelete.parameters[4].$ref: '#/parameters/callback'
paths./v1/photos:batchDelete.parameters[5].$ref: '#/parameters/fields'
paths./v1/photos:batchDelete.parameters[6].$ref: '#/parameters/key'
paths./v1/photos:batchDelete.parameters[7].$ref: '#/parameters/oauth_token'
paths./v1/photos:batchDelete.parameters[8].$ref: '#/parameters/pp'
paths./v1/photos:batchDelete.parameters[9].$ref: '#/parameters/prettyPrint'
paths./v1/photos:batchDelete.parameters[10].$ref: '#/parameters/quotaUser'
paths./v1/photos:batchDelete.parameters[11].$ref: '#/parameters/uploadType'
paths./v1/photos:batchDelete.parameters[12].$ref: '#/parameters/upload_protocol'
paths./v1/photos:batchDelete.post.description: |-
  Deletes a list of Photos and their
  metadata.

  Note that if
  BatchDeletePhotos
  fails, either critical fields are missing or there was an authentication
  error. Even if
  BatchDeletePhotos
  succeeds, there may have been failures for single photos in the batch.
  These failures will be specified in each
  PhotoResponse.status
  in
  BatchDeletePhotosResponse.results.
  See
  DeletePhoto
  for specific failures that can occur per photo.
paths./v1/photos:batchDelete.post.operationId: streetviewpublish.photos.batchDelete
paths./v1/photos:batchDelete.post.parameters.length: 1
paths./v1/photos:batchDelete.post.parameters[0].in: body
paths./v1/photos:batchDelete.post.parameters[0].name: body
paths./v1/photos:batchDelete.post.parameters[0].schema.$ref: '#/definitions/BatchDeletePhotosRequest'
paths./v1/photos:batchDelete.post.responses.200.description: Successful response
paths./v1/photos:batchDelete.post.responses.200.schema.$ref: '#/definitions/BatchDeletePhotosResponse'
paths./v1/photos:batchDelete.post.security.length: 1
paths./v1/photos:batchDelete.post.security[0].Oauth2.length: 1
paths./v1/photos:batchDelete.post.security[0].Oauth2[0]: https://www.googleapis.com/auth/streetviewpublish
paths./v1/photos:batchDelete.post.tags.length: 1
paths./v1/photos:batchDelete.post.tags[0]: photos
paths./v1/photos:batchGet.get.description: |-
  Gets the metadata of the specified
  Photo batch.

  Note that if
  BatchGetPhotos
  fails, either critical fields are missing or there was an authentication
  error. Even if
  BatchGetPhotos
  succeeds, there may have been failures for single photos in the batch.
  These failures will be specified in each
  PhotoResponse.status
  in
  BatchGetPhotosResponse.results.
  See
  GetPhoto
  for specific failures that can occur per photo.
paths./v1/photos:batchGet.get.operationId: streetviewpublish.photos.batchGet
paths./v1/photos:batchGet.get.parameters.length: 2
paths./v1/photos:batchGet.get.parameters[0].collectionFormat: multi
paths./v1/photos:batchGet.get.parameters[0].description: |-
  Required. IDs of the Photos. For HTTP
  GET requests, the URL query parameter should be
  `photoIds=<id1>&photoIds=<id2>&...`.
paths./v1/photos:batchGet.get.parameters[0].in: query
paths./v1/photos:batchGet.get.parameters[0].items.type: string
paths./v1/photos:batchGet.get.parameters[0].name: photoIds
paths./v1/photos:batchGet.get.parameters[0].type: array
paths./v1/photos:batchGet.get.parameters[1].description: |-
  Specifies if a download URL for the photo bytes should be returned in the
  Photo response.
paths./v1/photos:batchGet.get.parameters[1].enum.length: 2
paths./v1/photos:batchGet.get.parameters[1].enum[0]: BASIC
paths./v1/photos:batchGet.get.parameters[1].enum[1]: INCLUDE_DOWNLOAD_URL
paths./v1/photos:batchGet.get.parameters[1].in: query
paths./v1/photos:batchGet.get.parameters[1].name: view
paths./v1/photos:batchGet.get.parameters[1].type: string
paths./v1/photos:batchGet.get.responses.200.description: Successful response
paths./v1/photos:batchGet.get.responses.200.schema.$ref: '#/definitions/BatchGetPhotosResponse'
paths./v1/photos:batchGet.get.security.length: 1
paths./v1/photos:batchGet.get.security[0].Oauth2.length: 1
paths./v1/photos:batchGet.get.security[0].Oauth2[0]: https://www.googleapis.com/auth/streetviewpublish
paths./v1/photos:batchGet.get.tags.length: 1
paths./v1/photos:batchGet.get.tags[0]: photos
paths./v1/photos:batchGet.parameters.length: 13
paths./v1/photos:batchGet.parameters[0].$ref: '#/parameters/$.xgafv'
paths./v1/photos:batchGet.parameters[1].$ref: '#/parameters/access_token'
paths./v1/photos:batchGet.parameters[2].$ref: '#/parameters/alt'
paths./v1/photos:batchGet.parameters[3].$ref: '#/parameters/bearer_token'
paths./v1/photos:batchGet.parameters[4].$ref: '#/parameters/callback'
paths./v1/photos:batchGet.parameters[5].$ref: '#/parameters/fields'
paths./v1/photos:batchGet.parameters[6].$ref: '#/parameters/key'
paths./v1/photos:batchGet.parameters[7].$ref: '#/parameters/oauth_token'
paths./v1/photos:batchGet.parameters[8].$ref: '#/parameters/pp'
paths./v1/photos:batchGet.parameters[9].$ref: '#/parameters/prettyPrint'
paths./v1/photos:batchGet.parameters[10].$ref: '#/parameters/quotaUser'
paths./v1/photos:batchGet.parameters[11].$ref: '#/parameters/uploadType'
paths./v1/photos:batchGet.parameters[12].$ref: '#/parameters/upload_protocol'
paths./v1/photos:batchUpdate.parameters.length: 13
paths./v1/photos:batchUpdate.parameters[0].$ref: '#/parameters/$.xgafv'
paths./v1/photos:batchUpdate.parameters[1].$ref: '#/parameters/access_token'
paths./v1/photos:batchUpdate.parameters[2].$ref: '#/parameters/alt'
paths./v1/photos:batchUpdate.parameters[3].$ref: '#/parameters/bearer_token'
paths./v1/photos:batchUpdate.parameters[4].$ref: '#/parameters/callback'
paths./v1/photos:batchUpdate.parameters[5].$ref: '#/parameters/fields'
paths./v1/photos:batchUpdate.parameters[6].$ref: '#/parameters/key'
paths./v1/photos:batchUpdate.parameters[7].$ref: '#/parameters/oauth_token'
paths./v1/photos:batchUpdate.parameters[8].$ref: '#/parameters/pp'
paths./v1/photos:batchUpdate.parameters[9].$ref: '#/parameters/prettyPrint'
paths./v1/photos:batchUpdate.parameters[10].$ref: '#/parameters/quotaUser'
paths./v1/photos:batchUpdate.parameters[11].$ref: '#/parameters/uploadType'
paths./v1/photos:batchUpdate.parameters[12].$ref: '#/parameters/upload_protocol'
paths./v1/photos:batchUpdate.post.description: |-
  Updates the metadata of Photos, such
  as pose, place association, connections, etc. Changing the pixels of photos
  is not supported.

  Note that if
  BatchUpdatePhotos
  fails, either critical fields are missing or there was an authentication
  error. Even if
  BatchUpdatePhotos
  succeeds, there may have been failures for single photos in the batch.
  These failures will be specified in each
  PhotoResponse.status
  in
  BatchUpdatePhotosResponse.results.
  See
  UpdatePhoto
  for specific failures that can occur per photo.

  Only the fields specified in
  updateMask
  field are used. If `updateMask` is not present, the update applies to all
  fields.

  <aside class="note"><b>Note:</b> To update
  Pose.altitude,
  Pose.latLngPair has to be
  filled as well. Otherwise, the request will fail.</aside>
paths./v1/photos:batchUpdate.post.operationId: streetviewpublish.photos.batchUpdate
paths./v1/photos:batchUpdate.post.parameters.length: 1
paths./v1/photos:batchUpdate.post.parameters[0].in: body
paths./v1/photos:batchUpdate.post.parameters[0].name: body
paths./v1/photos:batchUpdate.post.parameters[0].schema.$ref: '#/definitions/BatchUpdatePhotosRequest'
paths./v1/photos:batchUpdate.post.responses.200.description: Successful response
paths./v1/photos:batchUpdate.post.responses.200.schema.$ref: '#/definitions/BatchUpdatePhotosResponse'
paths./v1/photos:batchUpdate.post.security.length: 1
paths./v1/photos:batchUpdate.post.security[0].Oauth2.length: 1
paths./v1/photos:batchUpdate.post.security[0].Oauth2[0]: https://www.googleapis.com/auth/streetviewpublish
paths./v1/photos:batchUpdate.post.tags.length: 1
paths./v1/photos:batchUpdate.post.tags[0]: photos
schemes.length: 1
schemes[0]: https
securityDefinitions.Oauth2.authorizationUrl: https://accounts.google.com/o/oauth2/auth
securityDefinitions.Oauth2.description: Oauth 2.0 authentication
securityDefinitions.Oauth2.flow: implicit
securityDefinitions.Oauth2.scopes.https://www.googleapis.com/auth/streetviewpublish: Publish
  and manage your 360 photos on Google Street View
securityDefinitions.Oauth2.type: oauth2
swagger: "2.0"
tags.length: 2
tags[0].name: photo
tags[1].name: photos
x-hasEquivalentPaths: true

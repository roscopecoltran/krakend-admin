swagger: '2.0'
schemes:
  - https
host: streetviewpublish.googleapis.com
basePath: /
x-hasEquivalentPaths: true
info:
  contact:
    name: Google
    url: 'https://google.com'
  description: |
    Publishes 360 photos to Google Maps, along with position, orientation, and connectivity metadata. Apps can offer an interface for positioning, connecting, and uploading user-generated Street View images.
  title: Street View Publish
  version: v1
  x-apiClientRegistration:
    url: 'https://console.developers.google.com'
  x-logo:
    url: 'https://api.apis.guru/v2/cache/logo/https_www.google.com_images_branding_googlelogo_2x_googlelogo_color_272x92dp.png'
  x-origin:
    - converter:
        url: 'https://github.com/lucybot/api-spec-converter'
        version: 2.6.0
      format: google
      url: 'https://streetviewpublish.googleapis.com/$discovery/rest?version=v1'
      version: v1
  x-preferred: true
  x-providerName: googleapis.com
  x-serviceName: streetviewpublish
externalDocs:
  url: 'https://developers.google.com/streetview/publish/'
securityDefinitions:
  Oauth2:
    authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
    description: Oauth 2.0 authentication
    flow: implicit
    scopes:
      'https://www.googleapis.com/auth/streetviewpublish': Publish and manage your 360 photos on Google Street View
    type: oauth2
parameters:
  $.xgafv:
    description: V1 error format.
    enum:
      - '1'
      - '2'
    in: query
    name: $.xgafv
    type: string
  access_token:
    description: OAuth access token.
    in: query
    name: access_token
    type: string
  alt:
    default: json
    description: Data format for response.
    enum:
      - json
      - media
      - proto
    in: query
    name: alt
    type: string
  bearer_token:
    description: OAuth bearer token.
    in: query
    name: bearer_token
    type: string
  callback:
    description: JSONP
    in: query
    name: callback
    type: string
  fields:
    description: Selector specifying which fields to include in a partial response.
    in: query
    name: fields
    type: string
  key:
    description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
    in: query
    name: key
    type: string
  oauth_token:
    description: OAuth 2.0 token for the current user.
    in: query
    name: oauth_token
    type: string
  pp:
    default: true
    description: Pretty-print response.
    in: query
    name: pp
    type: boolean
  prettyPrint:
    default: true
    description: Returns response with indentations and line breaks.
    in: query
    name: prettyPrint
    type: boolean
  quotaUser:
    description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
    in: query
    name: quotaUser
    type: string
  uploadType:
    description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
    in: query
    name: uploadType
    type: string
  upload_protocol:
    description: 'Upload protocol for media (e.g. "raw", "multipart").'
    in: query
    name: upload_protocol
    type: string
tags:
  - name: photo
  - name: photos
paths:
  /v1/photo:
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
    post:
      description: |-
        After the client finishes uploading the photo with the returned
        UploadRef,
        CreatePhoto
        publishes the uploaded Photo to
        Street View on Google Maps.

        Currently, the only way to set heading, pitch, and roll in CreatePhoto is
        through the [Photo Sphere XMP
        metadata](https://developers.google.com/streetview/spherical-metadata) in
        the photo bytes. The `pose.heading`, `pose.pitch`, `pose.roll`,
        `pose.altitude`, and `pose.level` fields in Pose are ignored for
        CreatePhoto.

        This method returns the following error codes:

        * google.rpc.Code.INVALID_ARGUMENT if the request is malformed.
        * google.rpc.Code.NOT_FOUND if the upload reference does not exist.
        * google.rpc.Code.RESOURCE_EXHAUSTED if the account has reached the
        storage limit.
      operationId: streetviewpublish.photo.create
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Photo'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Photo'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/streetviewpublish'
      tags:
        - photo
  '/v1/photo/{id}':
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
    put:
      description: |-
        Updates the metadata of a Photo, such
        as pose, place association, connections, etc. Changing the pixels of a
        photo is not supported.

        Only the fields specified in the
        updateMask
        field are used. If `updateMask` is not present, the update applies to all
        fields.

        <aside class="note"><b>Note:</b> To update
        Pose.altitude,
        Pose.latLngPair has to be
        filled as well. Otherwise, the request will fail.</aside>

        This method returns the following error codes:

        * google.rpc.Code.PERMISSION_DENIED if the requesting user did not
        create the requested photo.
        * google.rpc.Code.INVALID_ARGUMENT if the request is malformed.
        * google.rpc.Code.NOT_FOUND if the requested photo does not exist.
      operationId: streetviewpublish.photo.update
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Photo'
        - description: Required. A unique identifier for a photo.
          in: path
          name: id
          required: true
          type: string
        - description: |-
            Mask that identifies fields on the photo metadata to update.
            If not present, the old Photo
            metadata will be entirely replaced with the
            new Photo metadata in this request.
            The update fails if invalid fields are specified. Multiple fields can be
            specified in a comma-delimited list.

            The following fields are valid:

            * `pose.heading`
            * `pose.latLngPair`
            * `pose.pitch`
            * `pose.roll`
            * `pose.level`
            * `pose.altitude`
            * `connections`
            * `places`


            <aside class="note"><b>Note:</b> Repeated fields in
            updateMask
            mean the entire set of repeated values will be replaced with the new
            contents. For example, if
            updateMask
            contains `connections` and `UpdatePhotoRequest.photo.connections` is empty,
            all connections will be removed.</aside>
          in: query
          name: updateMask
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Photo'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/streetviewpublish'
      tags:
        - photo
  '/v1/photo/{photoId}':
    delete:
      description: |-
        Deletes a Photo and its metadata.

        This method returns the following error codes:

        * google.rpc.Code.PERMISSION_DENIED if the requesting user did not
        create the requested photo.
        * google.rpc.Code.NOT_FOUND if the photo ID does not exist.
      operationId: streetviewpublish.photo.delete
      parameters:
        - description: Required. ID of the Photo.
          in: path
          name: photoId
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Empty'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/streetviewpublish'
      tags:
        - photo
    get:
      description: |-
        Gets the metadata of the specified
        Photo.

        This method returns the following error codes:

        * google.rpc.Code.PERMISSION_DENIED if the requesting user did not
        create the requested Photo.
        * google.rpc.Code.NOT_FOUND if the requested
        Photo does not exist.
      operationId: streetviewpublish.photo.get
      parameters:
        - description: Required. ID of the Photo.
          in: path
          name: photoId
          required: true
          type: string
        - description: |-
            Specifies if a download URL for the photo bytes should be returned in the
            Photo response.
          enum:
            - BASIC
            - INCLUDE_DOWNLOAD_URL
          in: query
          name: view
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Photo'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/streetviewpublish'
      tags:
        - photo
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
  '/v1/photo:startUpload':
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
    post:
      description: |-
        Creates an upload session to start uploading photo bytes. The upload URL of
        the returned UploadRef is used to
        upload the bytes for the Photo.

        In addition to the photo requirements shown in
        https://support.google.com/maps/answer/7012050?hl=en&ref_topic=6275604,
        the photo must also meet the following requirements:

        * Photo Sphere XMP metadata must be included in the photo medadata. See
        https://developers.google.com/streetview/spherical-metadata for the
        required fields.
        * The pixel size of the photo must meet the size requirements listed in
        https://support.google.com/maps/answer/7012050?hl=en&ref_topic=6275604, and
        the photo must be a full 360 horizontally.

        After the upload is complete, the
        UploadRef is used with
        CreatePhoto
        to create the Photo object entry.
      operationId: streetviewpublish.photo.startUpload
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Empty'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/UploadRef'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/streetviewpublish'
      tags:
        - photo
  /v1/photos:
    get:
      description: |-
        Lists all the Photos that belong to
        the user.
      operationId: streetviewpublish.photos.list
      parameters:
        - description: |-
            The filter expression. For example: `placeId=ChIJj61dQgK6j4AR4GeTYWZsKWw`.

            The only filter supported at the moment is `placeId`.
          in: query
          name: filter
          type: string
        - description: |-
            The maximum number of photos to return.
            `pageSize` must be non-negative. If `pageSize` is zero or is not provided,
            the default page size of 100 will be used.
            The number of photos returned in the response may be less than `pageSize`
            if the number of photos that belong to the user is less than `pageSize`.
          in: query
          name: pageSize
          type: integer
        - description: |-
            The
            nextPageToken
            value returned from a previous
            ListPhotos
            request, if any.
          in: query
          name: pageToken
          type: string
        - description: |-
            Specifies if a download URL for the photos bytes should be returned in the
            Photos response.
          enum:
            - BASIC
            - INCLUDE_DOWNLOAD_URL
          in: query
          name: view
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/ListPhotosResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/streetviewpublish'
      tags:
        - photos
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
  '/v1/photos:batchDelete':
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
    post:
      description: |-
        Deletes a list of Photos and their
        metadata.

        Note that if
        BatchDeletePhotos
        fails, either critical fields are missing or there was an authentication
        error. Even if
        BatchDeletePhotos
        succeeds, there may have been failures for single photos in the batch.
        These failures will be specified in each
        PhotoResponse.status
        in
        BatchDeletePhotosResponse.results.
        See
        DeletePhoto
        for specific failures that can occur per photo.
      operationId: streetviewpublish.photos.batchDelete
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/BatchDeletePhotosRequest'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/BatchDeletePhotosResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/streetviewpublish'
      tags:
        - photos
  '/v1/photos:batchGet':
    get:
      description: |-
        Gets the metadata of the specified
        Photo batch.

        Note that if
        BatchGetPhotos
        fails, either critical fields are missing or there was an authentication
        error. Even if
        BatchGetPhotos
        succeeds, there may have been failures for single photos in the batch.
        These failures will be specified in each
        PhotoResponse.status
        in
        BatchGetPhotosResponse.results.
        See
        GetPhoto
        for specific failures that can occur per photo.
      operationId: streetviewpublish.photos.batchGet
      parameters:
        - collectionFormat: multi
          description: |-
            Required. IDs of the Photos. For HTTP
            GET requests, the URL query parameter should be
            `photoIds=<id1>&photoIds=<id2>&...`.
          in: query
          items:
            type: string
          name: photoIds
          type: array
        - description: |-
            Specifies if a download URL for the photo bytes should be returned in the
            Photo response.
          enum:
            - BASIC
            - INCLUDE_DOWNLOAD_URL
          in: query
          name: view
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/BatchGetPhotosResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/streetviewpublish'
      tags:
        - photos
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
  '/v1/photos:batchUpdate':
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
    post:
      description: |-
        Updates the metadata of Photos, such
        as pose, place association, connections, etc. Changing the pixels of photos
        is not supported.

        Note that if
        BatchUpdatePhotos
        fails, either critical fields are missing or there was an authentication
        error. Even if
        BatchUpdatePhotos
        succeeds, there may have been failures for single photos in the batch.
        These failures will be specified in each
        PhotoResponse.status
        in
        BatchUpdatePhotosResponse.results.
        See
        UpdatePhoto
        for specific failures that can occur per photo.

        Only the fields specified in
        updateMask
        field are used. If `updateMask` is not present, the update applies to all
        fields.

        <aside class="note"><b>Note:</b> To update
        Pose.altitude,
        Pose.latLngPair has to be
        filled as well. Otherwise, the request will fail.</aside>
      operationId: streetviewpublish.photos.batchUpdate
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/BatchUpdatePhotosRequest'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/BatchUpdatePhotosResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/streetviewpublish'
      tags:
        - photos
definitions:
  BatchDeletePhotosRequest:
    description: Request to delete multiple Photos.
    properties:
      photoIds:
        description: |-
          Required. IDs of the Photos. For HTTP
          GET requests, the URL query parameter should be
          `photoIds=<id1>&photoIds=<id2>&...`.
        items:
          type: string
        type: array
    type: object
  BatchDeletePhotosResponse:
    description: |-
      Response to batch delete of one or more
      Photos.
    properties:
      status:
        description: |-
          The status for the operation to delete a single
          Photo in the batch request.
        items:
          $ref: '#/definitions/Status'
        type: array
    type: object
  BatchGetPhotosResponse:
    description: Response to batch get of Photos.
    properties:
      results:
        description: |-
          List of results for each individual
          Photo requested, in the same order as
          the requests in
          BatchGetPhotos.
        items:
          $ref: '#/definitions/PhotoResponse'
        type: array
    type: object
  BatchUpdatePhotosRequest:
    description: |-
      Request to update the metadata of photos.
      Updating the pixels of photos is not supported.
    properties:
      updatePhotoRequests:
        description: |-
          Required. List of
          UpdatePhotoRequests.
        items:
          $ref: '#/definitions/UpdatePhotoRequest'
        type: array
    type: object
  BatchUpdatePhotosResponse:
    description: |-
      Response to batch update of metadata of one or more
      Photos.
    properties:
      results:
        description: |-
          List of results for each individual
          Photo updated, in the same order as
          the request.
        items:
          $ref: '#/definitions/PhotoResponse'
        type: array
    type: object
  Connection:
    description: A connection is the link from a source photo to a destination photo.
    properties:
      target:
        $ref: '#/definitions/PhotoId'
        description: |-
          Required. The destination of the connection from the containing photo to
          another photo.
    type: object
  Empty:
    description: |-
      A generic empty message that you can re-use to avoid defining duplicated
      empty messages in your APIs. A typical example is to use it as the request
      or the response type of an API method. For instance:

          service Foo {
            rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
          }

      The JSON representation for `Empty` is empty JSON object `{}`.
    properties: {}
    type: object
  LatLng:
    description: |-
      An object representing a latitude/longitude pair. This is expressed as a pair
      of doubles representing degrees latitude and degrees longitude. Unless
      specified otherwise, this must conform to the
      <a href="http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf">WGS84
      standard</a>. Values must be within normalized ranges.

      Example of normalization code in Python:

          def NormalizeLongitude(longitude):
            """Wraps decimal degrees longitude to [-180.0, 180.0]."""
            q, r = divmod(longitude, 360.0)
            if r > 180.0 or (r == 180.0 and q <= -1.0):
              return r - 360.0
            return r

          def NormalizeLatLng(latitude, longitude):
            """Wraps decimal degrees latitude and longitude to
            [-90.0, 90.0] and [-180.0, 180.0], respectively."""
            r = latitude % 360.0
            if r <= 90.0:
              return r, NormalizeLongitude(longitude)
            elif r >= 270.0:
              return r - 360, NormalizeLongitude(longitude)
            else:
              return 180 - r, NormalizeLongitude(longitude + 180.0)

          assert 180.0 == NormalizeLongitude(180.0)
          assert -180.0 == NormalizeLongitude(-180.0)
          assert -179.0 == NormalizeLongitude(181.0)
          assert (0.0, 0.0) == NormalizeLatLng(360.0, 0.0)
          assert (0.0, 0.0) == NormalizeLatLng(-360.0, 0.0)
          assert (85.0, 180.0) == NormalizeLatLng(95.0, 0.0)
          assert (-85.0, -170.0) == NormalizeLatLng(-95.0, 10.0)
          assert (90.0, 10.0) == NormalizeLatLng(90.0, 10.0)
          assert (-90.0, -10.0) == NormalizeLatLng(-90.0, -10.0)
          assert (0.0, -170.0) == NormalizeLatLng(-180.0, 10.0)
          assert (0.0, -170.0) == NormalizeLatLng(180.0, 10.0)
          assert (-90.0, 10.0) == NormalizeLatLng(270.0, 10.0)
          assert (90.0, 10.0) == NormalizeLatLng(-270.0, 10.0)
    properties:
      latitude:
        description: 'The latitude in degrees. It must be in the range [-90.0, +90.0].'
        format: double
        type: number
      longitude:
        description: 'The longitude in degrees. It must be in the range [-180.0, +180.0].'
        format: double
        type: number
    type: object
  Level:
    description: Level information containing level number and its corresponding name.
    properties:
      name:
        description: |-
          Required. A name assigned to this Level, restricted to 3 characters.
          Consider how the elevator buttons would be labeled for this level if there
          was an elevator.
        type: string
      number:
        description: |-
          Floor number, used for ordering. 0 indicates the ground level, 1 indicates
          the first level above ground level, -1 indicates the first level under
          ground level. Non-integer values are OK.
        format: double
        type: number
    type: object
  ListPhotosResponse:
    description: Response to list all photos that belong to a user.
    properties:
      nextPageToken:
        description: |-
          Token to retrieve the next page of results, or empty if there are no more
          results in the list.
        type: string
      photos:
        description: |-
          List of photos. The maximum number of items returned is based on the
          pageSize field
          in the request.
        items:
          $ref: '#/definitions/Photo'
        type: array
    type: object
  Operation:
    description: |-
      This resource represents a long-running operation that is the result of a
      network API call.
    properties:
      done:
        description: |-
          If the value is `false`, it means the operation is still in progress.
          If `true`, the operation is completed, and either `error` or `response` is
          available.
        type: boolean
      error:
        $ref: '#/definitions/Status'
        description: The error result of the operation in case of failure or cancellation.
      metadata:
        additionalProperties:
          description: Properties of the object. Contains field @type with type URL.
        description: |-
          Service-specific metadata associated with the operation.  It typically
          contains progress information and common metadata such as create time.
          Some services might not provide such metadata.  Any method that returns a
          long-running operation should document the metadata type, if any.
        type: object
      name:
        description: |-
          The server-assigned name, which is only unique within the same service that
          originally returns it. If you use the default HTTP mapping, the
          `name` should have the format of `operations/some/unique/name`.
        type: string
      response:
        additionalProperties:
          description: Properties of the object. Contains field @type with type URL.
        description: |-
          The normal response of the operation in case of success.  If the original
          method returns no data on success, such as `Delete`, the response is
          `google.protobuf.Empty`.  If the original method is standard
          `Get`/`Create`/`Update`, the response should be the resource.  For other
          methods, the response should have the type `XxxResponse`, where `Xxx`
          is the original method name.  For example, if the original method name
          is `TakeSnapshot()`, the inferred response type is
          `TakeSnapshotResponse`.
        type: object
    type: object
  Photo:
    description: Photo is used to store 360 photos along with photo metadata.
    properties:
      captureTime:
        description: |-
          Absolute time when the photo was captured.
          When the photo has no exif timestamp, this is used to set a timestamp in
          the photo metadata.
        format: google-datetime
        type: string
      connections:
        description: |-
          Connections to other photos. A connection represents the link from this
          photo to another photo.
        items:
          $ref: '#/definitions/Connection'
        type: array
      downloadUrl:
        description: |-
          Output only. The download URL for the photo bytes. This field is set only
          when
          GetPhotoRequest.view
          is set to
          PhotoView.INCLUDE_DOWNLOAD_URL.
        type: string
      photoId:
        $ref: '#/definitions/PhotoId'
        description: |-
          Required when updating a photo. Output only when creating a photo.
          Identifier for the photo, which is unique among all photos in
          Google.
      places:
        description: Places where this photo belongs.
        items:
          $ref: '#/definitions/Place'
        type: array
      pose:
        $ref: '#/definitions/Pose'
        description: Pose of the photo.
      shareLink:
        description: Output only. The share link for the photo.
        type: string
      thumbnailUrl:
        description: Output only. The thumbnail URL for showing a preview of the given photo.
        type: string
      uploadReference:
        $ref: '#/definitions/UploadRef'
        description: |-
          Required when creating a photo. Input only. The resource URL where the
          photo bytes are uploaded to.
      viewCount:
        description: Output only. View count of the photo.
        format: int64
        type: string
    type: object
  PhotoId:
    description: Identifier for a Photo.
    properties:
      id:
        description: Required. A unique identifier for a photo.
        type: string
    type: object
  PhotoResponse:
    description: |-
      Response payload for a single
      Photo
      in batch operations including
      BatchGetPhotos
      and
      BatchUpdatePhotos.
    properties:
      photo:
        $ref: '#/definitions/Photo'
        description: |-
          The Photo resource, if the request
          was successful.
      status:
        $ref: '#/definitions/Status'
        description: |-
          The status for the operation to get or update a single photo in the batch
          request.
    type: object
  Place:
    description: Place metadata for an entity.
    properties:
      placeId:
        description: |-
          Place identifier, as described in
          https://developers.google.com/places/place-id.
        type: string
    type: object
  Pose:
    description: Raw pose measurement for an entity.
    properties:
      altitude:
        description: |-
          Altitude of the pose in meters above ground level (as defined by WGS84).
          NaN indicates an unmeasured quantity.
        format: double
        type: number
      heading:
        description: |-
          Compass heading, measured at the center of the photo in degrees clockwise
          from North. Value must be >=0 and <360.
          NaN indicates an unmeasured quantity.
        format: double
        type: number
      latLngPair:
        $ref: '#/definitions/LatLng'
        description: |-
          Latitude and longitude pair of the pose, as explained here:
          https://cloud.google.com/datastore/docs/reference/rest/Shared.Types/LatLng
          When creating a Photo, if the
          latitude and longitude pair are not provided here, the geolocation from the
          exif header will be used. If the latitude and longitude pair is not
          provided and cannot be found in the exif header, the create photo process
          will fail.
      level:
        $ref: '#/definitions/Level'
        description: Level (the floor in a building) used to configure vertical navigation.
      pitch:
        description: |-
          Pitch, measured at the center of the photo in degrees. Value must be >=-90
          and <= 90. A value of -90 means looking directly down, and a value of 90
          means looking directly up.
          NaN indicates an unmeasured quantity.
        format: double
        type: number
      roll:
        description: |-
          Roll, measured in degrees. Value must be >= 0 and <360. A value of 0
          means level with the horizon.
          NaN indicates an unmeasured quantity.
        format: double
        type: number
    type: object
  Status:
    description: |-
      The `Status` type defines a logical error model that is suitable for different
      programming environments, including REST APIs and RPC APIs. It is used by
      [gRPC](https://github.com/grpc). The error model is designed to be:

      - Simple to use and understand for most users
      - Flexible enough to meet unexpected needs

      # Overview

      The `Status` message contains three pieces of data: error code, error message,
      and error details. The error code should be an enum value of
      google.rpc.Code, but it may accept additional error codes if needed.  The
      error message should be a developer-facing English message that helps
      developers *understand* and *resolve* the error. If a localized user-facing
      error message is needed, put the localized message in the error details or
      localize it in the client. The optional error details may contain arbitrary
      information about the error. There is a predefined set of error detail types
      in the package `google.rpc` that can be used for common error conditions.

      # Language mapping

      The `Status` message is the logical representation of the error model, but it
      is not necessarily the actual wire format. When the `Status` message is
      exposed in different client libraries and different wire protocols, it can be
      mapped differently. For example, it will likely be mapped to some exceptions
      in Java, but more likely mapped to some error codes in C.

      # Other uses

      The error model and the `Status` message can be used in a variety of
      environments, either with or without APIs, to provide a
      consistent developer experience across different environments.

      Example uses of this error model include:

      - Partial errors. If a service needs to return partial errors to the client,
          it may embed the `Status` in the normal response to indicate the partial
          errors.

      - Workflow errors. A typical workflow has multiple steps. Each step may
          have a `Status` message for error reporting.

      - Batch operations. If a client uses batch request and batch response, the
          `Status` message should be used directly inside batch response, one for
          each error sub-response.

      - Asynchronous operations. If an API call embeds asynchronous operation
          results in its response, the status of those operations should be
          represented directly using the `Status` message.

      - Logging. If some API errors are stored in logs, the message `Status` could
          be used directly after any stripping needed for security/privacy reasons.
    properties:
      code:
        description: 'The status code, which should be an enum value of google.rpc.Code.'
        format: int32
        type: integer
      details:
        description: |-
          A list of messages that carry the error details.  There is a common set of
          message types for APIs to use.
        items:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          type: object
        type: array
      message:
        description: |-
          A developer-facing error message, which should be in English. Any
          user-facing error message should be localized and sent in the
          google.rpc.Status.details field, or localized by the client.
        type: string
    type: object
  UpdatePhotoRequest:
    description: |-
      Request to update the metadata of a
      Photo. Updating the pixels of a photo
      is not supported.
    properties:
      photo:
        $ref: '#/definitions/Photo'
        description: |-
          Required. Photo object containing the
          new metadata.
      updateMask:
        description: |-
          Mask that identifies fields on the photo metadata to update.
          If not present, the old Photo
          metadata will be entirely replaced with the
          new Photo metadata in this request.
          The update fails if invalid fields are specified. Multiple fields can be
          specified in a comma-delimited list.

          The following fields are valid:

          * `pose.heading`
          * `pose.latLngPair`
          * `pose.pitch`
          * `pose.roll`
          * `pose.level`
          * `pose.altitude`
          * `connections`
          * `places`


          <aside class="note"><b>Note:</b> Repeated fields in
          updateMask
          mean the entire set of repeated values will be replaced with the new
          contents. For example, if
          updateMask
          contains `connections` and `UpdatePhotoRequest.photo.connections` is empty,
          all connections will be removed.</aside>
        format: google-fieldmask
        type: string
    type: object
  UploadRef:
    description: Upload reference for media files.
    properties:
      uploadUrl:
        description: |-
          Required. An upload reference should be unique for each user. It follows
          the form:
          "https://streetviewpublish.googleapis.com/media/user/{account_id}/photo/{upload_reference}"
        type: string
    type: object

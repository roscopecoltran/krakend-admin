syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package streetviewpublish;

message PostV1PhotoRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    Photo body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PutV1PhotoIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    Photo body = 5;
    string callback = 6;
    string fields = 7;
    // Required. A unique identifier for a photo.
    string id = 8;
    string key = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    // Mask that identifies fields on the photo metadata to update.
    // If not present, the old Photo
    // metadata will be entirely replaced with the
    // new Photo metadata in this request.
    // The update fails if invalid fields are specified. Multiple fields can be
    // specified in a comma-delimited list.
    // 
    // The following fields are valid:
    // 
    // * `pose.heading`
    // * `pose.latLngPair`
    // * `pose.pitch`
    // * `pose.roll`
    // * `pose.level`
    // * `pose.altitude`
    // * `connections`
    // * `places`
    // 
    // 
    // <aside class="note"><b>Note:</b> Repeated fields in
    // updateMask
    // mean the entire set of repeated values will be replaced with the new
    // contents. For example, if
    // updateMask
    // contains `connections` and `UpdatePhotoRequest.photo.connections` is empty,
    // all connections will be removed.</aside>
    string updateMask = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message GetV1PhotoPhotoIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    // Required. ID of the Photo.
    string photoId = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
    // Specifies if a download URL for the photo bytes should be returned in the
    // Photo response.
    enum GetV1PhotoPhotoIdRequest_View {
        GETV1PHOTOPHOTOIDREQUEST_VIEW_BASIC = 0;
        GETV1PHOTOPHOTOIDREQUEST_VIEW_INCLUDE_DOWNLOAD_URL = 1;
    }
    GetV1PhotoPhotoIdRequest_View view = 15;
}

message DeleteV1PhotoPhotoIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    // Required. ID of the Photo.
    string photoId = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PostV1Photo:StartUploadRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    Empty body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message GetV1PhotosRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // The filter expression. For example: `placeId=ChIJj61dQgK6j4AR4GeTYWZsKWw`.
    // 
    // The only filter supported at the moment is `placeId`.
    string filter = 7;
    string key = 8;
    string oauth_token = 9;
    // The maximum number of photos to return.
    // `pageSize` must be non-negative. If `pageSize` is zero or is not provided,
    // the default page size of 100 will be used.
    // The number of photos returned in the response may be less than `pageSize`
    // if the number of photos that belong to the user is less than `pageSize`.
    int32 pageSize = 10;
    // The
    // nextPageToken
    // value returned from a previous
    // ListPhotos
    // request, if any.
    string pageToken = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
    // Specifies if a download URL for the photos bytes should be returned in the
    // Photos response.
    enum GetV1PhotosRequest_View {
        GETV1PHOTOSREQUEST_VIEW_BASIC = 0;
        GETV1PHOTOSREQUEST_VIEW_INCLUDE_DOWNLOAD_URL = 1;
    }
    GetV1PhotosRequest_View view = 17;
}

message PostV1Photos:BatchDeleteRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    BatchDeletePhotosRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message GetV1Photos:BatchGetRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    // Required. IDs of the Photos. For HTTP
    // GET requests, the URL query parameter should be
    // `photoIds=<id1>&photoIds=<id2>&...`.
    repeated string photoIds = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
    // Specifies if a download URL for the photo bytes should be returned in the
    // Photo response.
    enum GetV1Photos:BatchGetRequest_View {
        GETV1PHOTOS:BATCHGETREQUEST_VIEW_BASIC = 0;
        GETV1PHOTOS:BATCHGETREQUEST_VIEW_INCLUDE_DOWNLOAD_URL = 1;
    }
    GetV1Photos:BatchGetRequest_View view = 15;
}

message PostV1Photos:BatchUpdateRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    BatchUpdatePhotosRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

enum $.Xgafv {
    $XGAFV_1 = 0;
    $XGAFV_2 = 1;
}

message BatchDeletePhotosRequest {
    // Required. IDs of the Photos. For HTTP
    // GET requests, the URL query parameter should be
    // `photoIds=<id1>&photoIds=<id2>&...`.
    repeated string photoIds = 1;
}

message BatchDeletePhotosResponse {
    // The status for the operation to delete a single
    // Photo in the batch request.
    repeated Status status = 1;
}

message BatchGetPhotosResponse {
    // List of results for each individual
    // Photo requested, in the same order as
    // the requests in
    // BatchGetPhotos.
    repeated PhotoResponse results = 1;
}

message BatchUpdatePhotosRequest {
    // Required. List of
    // UpdatePhotoRequests.
    repeated UpdatePhotoRequest updatePhotoRequests = 1;
}

message BatchUpdatePhotosResponse {
    // List of results for each individual
    // Photo updated, in the same order as
    // the request.
    repeated PhotoResponse results = 1;
}

message Connection {
    // Required. The destination of the connection from the containing photo to
    // another photo.
    PhotoId target = 1;
}

message Empty {
}

message LatLng {
    // The latitude in degrees. It must be in the range [-90.0, +90.0].
    double latitude = 1;
    // The longitude in degrees. It must be in the range [-180.0, +180.0].
    double longitude = 2;
}

message Level {
    // Required. A name assigned to this Level, restricted to 3 characters.
    // Consider how the elevator buttons would be labeled for this level if there
    // was an elevator.
    string name = 1;
    // Floor number, used for ordering. 0 indicates the ground level, 1 indicates
    // the first level above ground level, -1 indicates the first level under
    // ground level. Non-integer values are OK.
    double number = 2;
}

message ListPhotosResponse {
    // Token to retrieve the next page of results, or empty if there are no more
    // results in the list.
    string nextPageToken = 1;
    // List of photos. The maximum number of items returned is based on the
    // pageSize field
    // in the request.
    repeated Photo photos = 2;
}

message Operation {
    // If the value is `false`, it means the operation is still in progress.
    // If `true`, the operation is completed, and either `error` or `response` is
    // available.
    bool done = 1;
    // The error result of the operation in case of failure or cancellation.
    Status error = 2;
    // Service-specific metadata associated with the operation.  It typically
    // contains progress information and common metadata such as create time.
    // Some services might not provide such metadata.  Any method that returns a
    // long-running operation should document the metadata type, if any.
    map<string, > metadata = 3;
    // The server-assigned name, which is only unique within the same service that
    // originally returns it. If you use the default HTTP mapping, the
    // `name` should have the format of `operations/some/unique/name`.
    string name = 4;
    // The normal response of the operation in case of success.  If the original
    // method returns no data on success, such as `Delete`, the response is
    // `google.protobuf.Empty`.  If the original method is standard
    // `Get`/`Create`/`Update`, the response should be the resource.  For other
    // methods, the response should have the type `XxxResponse`, where `Xxx`
    // is the original method name.  For example, if the original method name
    // is `TakeSnapshot()`, the inferred response type is
    // `TakeSnapshotResponse`.
    map<string, > response = 5;
}

message Photo {
    // Absolute time when the photo was captured.
    // When the photo has no exif timestamp, this is used to set a timestamp in
    // the photo metadata.
    string captureTime = 1;
    // Connections to other photos. A connection represents the link from this
    // photo to another photo.
    repeated Connection connections = 2;
    // Output only. The download URL for the photo bytes. This field is set only
    // when
    // GetPhotoRequest.view
    // is set to
    // PhotoView.INCLUDE_DOWNLOAD_URL.
    string downloadUrl = 3;
    // Required when updating a photo. Output only when creating a photo.
    // Identifier for the photo, which is unique among all photos in
    // Google.
    PhotoId photoId = 4;
    // Places where this photo belongs.
    repeated Place places = 5;
    // Pose of the photo.
    Pose pose = 6;
    // Output only. The share link for the photo.
    string shareLink = 7;
    // Output only. The thumbnail URL for showing a preview of the given photo.
    string thumbnailUrl = 8;
    // Required when creating a photo. Input only. The resource URL where the
    // photo bytes are uploaded to.
    UploadRef uploadReference = 9;
    // Output only. View count of the photo.
    string viewCount = 10;
}

message PhotoId {
    // Required. A unique identifier for a photo.
    string id = 1;
}

message PhotoResponse {
    // The Photo resource, if the request
    // was successful.
    Photo photo = 1;
    // The status for the operation to get or update a single photo in the batch
    // request.
    Status status = 2;
}

message Place {
    // Place identifier, as described in
    // https://developers.google.com/places/place-id.
    string placeId = 1;
}

message Pose {
    // Altitude of the pose in meters above ground level (as defined by WGS84).
    // NaN indicates an unmeasured quantity.
    double altitude = 1;
    // Compass heading, measured at the center of the photo in degrees clockwise
    // from North. Value must be >=0 and <360.
    // NaN indicates an unmeasured quantity.
    double heading = 2;
    // Latitude and longitude pair of the pose, as explained here:
    // https://cloud.google.com/datastore/docs/reference/rest/Shared.Types/LatLng
    // When creating a Photo, if the
    // latitude and longitude pair are not provided here, the geolocation from the
    // exif header will be used. If the latitude and longitude pair is not
    // provided and cannot be found in the exif header, the create photo process
    // will fail.
    LatLng latLngPair = 3;
    // Level (the floor in a building) used to configure vertical navigation.
    Level level = 4;
    // Pitch, measured at the center of the photo in degrees. Value must be >=-90
    // and <= 90. A value of -90 means looking directly down, and a value of 90
    // means looking directly up.
    // NaN indicates an unmeasured quantity.
    double pitch = 5;
    // Roll, measured in degrees. Value must be >= 0 and <360. A value of 0
    // means level with the horizon.
    // NaN indicates an unmeasured quantity.
    double roll = 6;
}

message Status {
    // The status code, which should be an enum value of google.rpc.Code.
    int32 code = 1;
    // A list of messages that carry the error details.  There is a common set of
    // message types for APIs to use.
    message Detail {
    }
    repeated Detail details = 2;
    // A developer-facing error message, which should be in English. Any
    // user-facing error message should be localized and sent in the
    // google.rpc.Status.details field, or localized by the client.
    string message = 3;
}

message UpdatePhotoRequest {
    // Required. Photo object containing the
    // new metadata.
    Photo photo = 1;
    // Mask that identifies fields on the photo metadata to update.
    // If not present, the old Photo
    // metadata will be entirely replaced with the
    // new Photo metadata in this request.
    // The update fails if invalid fields are specified. Multiple fields can be
    // specified in a comma-delimited list.
    // 
    // The following fields are valid:
    // 
    // * `pose.heading`
    // * `pose.latLngPair`
    // * `pose.pitch`
    // * `pose.roll`
    // * `pose.level`
    // * `pose.altitude`
    // * `connections`
    // * `places`
    // 
    // 
    // <aside class="note"><b>Note:</b> Repeated fields in
    // updateMask
    // mean the entire set of repeated values will be replaced with the new
    // contents. For example, if
    // updateMask
    // contains `connections` and `UpdatePhotoRequest.photo.connections` is empty,
    // all connections will be removed.</aside>
    string updateMask = 2;
}

message UploadRef {
    // Required. An upload reference should be unique for each user. It follows
    // the form:
    // "https://streetviewpublish.googleapis.com/media/user/{account_id}/photo/{upload_reference}"
    string uploadUrl = 1;
}

enum Alt {
    JSON = 0;
    MEDIA = 1;
    PROTO = 2;
}

service StreetViewPublishService {
    // After the client finishes uploading the photo with the returned
    // UploadRef,
    // CreatePhoto
    // publishes the uploaded Photo to
    // Street View on Google Maps.
    // 
    // Currently, the only way to set heading, pitch, and roll in CreatePhoto is
    // through the [Photo Sphere XMP
    // metadata](https://developers.google.com/streetview/spherical-metadata) in
    // the photo bytes. The `pose.heading`, `pose.pitch`, `pose.roll`,
    // `pose.altitude`, and `pose.level` fields in Pose are ignored for
    // CreatePhoto.
    // 
    // This method returns the following error codes:
    // 
    // * google.rpc.Code.INVALID_ARGUMENT if the request is malformed.
    // * google.rpc.Code.NOT_FOUND if the upload reference does not exist.
    // * google.rpc.Code.RESOURCE_EXHAUSTED if the account has reached the
    // storage limit.
    rpc PostV1Photo(PostV1PhotoRequest) returns (Photo) {
      option (google.api.http) = {
        post: "//v1/photo"
        body: "body"
      };
    }
    // Updates the metadata of a Photo, such
    // as pose, place association, connections, etc. Changing the pixels of a
    // photo is not supported.
    // 
    // Only the fields specified in the
    // updateMask
    // field are used. If `updateMask` is not present, the update applies to all
    // fields.
    // 
    // <aside class="note"><b>Note:</b> To update
    // Pose.altitude,
    // Pose.latLngPair has to be
    // filled as well. Otherwise, the request will fail.</aside>
    // 
    // This method returns the following error codes:
    // 
    // * google.rpc.Code.PERMISSION_DENIED if the requesting user did not
    // create the requested photo.
    // * google.rpc.Code.INVALID_ARGUMENT if the request is malformed.
    // * google.rpc.Code.NOT_FOUND if the requested photo does not exist.
    rpc PutV1PhotoId(PutV1PhotoIdRequest) returns (Photo) {
      option (google.api.http) = {
        put: "//v1/photo/{id}"
        body: "body"
      };
    }
    // Gets the metadata of the specified
    // Photo.
    // 
    // This method returns the following error codes:
    // 
    // * google.rpc.Code.PERMISSION_DENIED if the requesting user did not
    // create the requested Photo.
    // * google.rpc.Code.NOT_FOUND if the requested
    // Photo does not exist.
    rpc GetV1PhotoPhotoId(GetV1PhotoPhotoIdRequest) returns (Photo) {
      option (google.api.http) = {
        get: "//v1/photo/{photoId}"
      };
    }
    // Deletes a Photo and its metadata.
    // 
    // This method returns the following error codes:
    // 
    // * google.rpc.Code.PERMISSION_DENIED if the requesting user did not
    // create the requested photo.
    // * google.rpc.Code.NOT_FOUND if the photo ID does not exist.
    rpc DeleteV1PhotoPhotoId(DeleteV1PhotoPhotoIdRequest) returns (Empty) {
      option (google.api.http) = {
        delete: "//v1/photo/{photoId}"
      };
    }
    // Creates an upload session to start uploading photo bytes. The upload URL of
    // the returned UploadRef is used to
    // upload the bytes for the Photo.
    // 
    // In addition to the photo requirements shown in
    // https://support.google.com/maps/answer/7012050?hl=en&ref_topic=6275604,
    // the photo must also meet the following requirements:
    // 
    // * Photo Sphere XMP metadata must be included in the photo medadata. See
    // https://developers.google.com/streetview/spherical-metadata for the
    // required fields.
    // * The pixel size of the photo must meet the size requirements listed in
    // https://support.google.com/maps/answer/7012050?hl=en&ref_topic=6275604, and
    // the photo must be a full 360 horizontally.
    // 
    // After the upload is complete, the
    // UploadRef is used with
    // CreatePhoto
    // to create the Photo object entry.
    rpc PostV1Photo:StartUpload(PostV1Photo:StartUploadRequest) returns (UploadRef) {
      option (google.api.http) = {
        post: "//v1/photo:startUpload"
        body: "body"
      };
    }
    // Lists all the Photos that belong to
    // the user.
    rpc GetV1Photos(GetV1PhotosRequest) returns (ListPhotosResponse) {
      option (google.api.http) = {
        get: "//v1/photos"
      };
    }
    // Deletes a list of Photos and their
    // metadata.
    // 
    // Note that if
    // BatchDeletePhotos
    // fails, either critical fields are missing or there was an authentication
    // error. Even if
    // BatchDeletePhotos
    // succeeds, there may have been failures for single photos in the batch.
    // These failures will be specified in each
    // PhotoResponse.status
    // in
    // BatchDeletePhotosResponse.results.
    // See
    // DeletePhoto
    // for specific failures that can occur per photo.
    rpc PostV1Photos:BatchDelete(PostV1Photos:BatchDeleteRequest) returns (BatchDeletePhotosResponse) {
      option (google.api.http) = {
        post: "//v1/photos:batchDelete"
        body: "body"
      };
    }
    // Gets the metadata of the specified
    // Photo batch.
    // 
    // Note that if
    // BatchGetPhotos
    // fails, either critical fields are missing or there was an authentication
    // error. Even if
    // BatchGetPhotos
    // succeeds, there may have been failures for single photos in the batch.
    // These failures will be specified in each
    // PhotoResponse.status
    // in
    // BatchGetPhotosResponse.results.
    // See
    // GetPhoto
    // for specific failures that can occur per photo.
    rpc GetV1Photos:BatchGet(GetV1Photos:BatchGetRequest) returns (BatchGetPhotosResponse) {
      option (google.api.http) = {
        get: "//v1/photos:batchGet"
      };
    }
    // Updates the metadata of Photos, such
    // as pose, place association, connections, etc. Changing the pixels of photos
    // is not supported.
    // 
    // Note that if
    // BatchUpdatePhotos
    // fails, either critical fields are missing or there was an authentication
    // error. Even if
    // BatchUpdatePhotos
    // succeeds, there may have been failures for single photos in the batch.
    // These failures will be specified in each
    // PhotoResponse.status
    // in
    // BatchUpdatePhotosResponse.results.
    // See
    // UpdatePhoto
    // for specific failures that can occur per photo.
    // 
    // Only the fields specified in
    // updateMask
    // field are used. If `updateMask` is not present, the update applies to all
    // fields.
    // 
    // <aside class="note"><b>Note:</b> To update
    // Pose.altitude,
    // Pose.latLngPair has to be
    // filled as well. Otherwise, the request will fail.</aside>
    rpc PostV1Photos:BatchUpdate(PostV1Photos:BatchUpdateRequest) returns (BatchUpdatePhotosResponse) {
      option (google.api.http) = {
        post: "//v1/photos:batchUpdate"
        body: "body"
      };
    }
}

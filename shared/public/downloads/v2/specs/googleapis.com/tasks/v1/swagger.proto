syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package tasks;

message PostListsTasklistClearRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    // Task list identifier.
    string tasklist = 7;
    string userIp = 8;
}

message GetListsTasklistTasksRequest {
    alt alt = 1;
    // Upper bound for a task's completion date (as a RFC 3339 timestamp) to filter by. Optional. The default is not to filter by completion date.
    string completedMax = 2;
    // Lower bound for a task's completion date (as a RFC 3339 timestamp) to filter by. Optional. The default is not to filter by completion date.
    string completedMin = 3;
    // Upper bound for a task's due date (as a RFC 3339 timestamp) to filter by. Optional. The default is not to filter by due date.
    string dueMax = 4;
    // Lower bound for a task's due date (as a RFC 3339 timestamp) to filter by. Optional. The default is not to filter by due date.
    string dueMin = 5;
    string fields = 6;
    string key = 7;
    // Maximum number of task lists returned on one page. Optional. The default is 100.
    string maxResults = 8;
    string oauth_token = 9;
    // Token specifying the result page to return. Optional.
    string pageToken = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // Flag indicating whether completed tasks are returned in the result. Optional. The default is True.
    bool showCompleted = 13;
    // Flag indicating whether deleted tasks are returned in the result. Optional. The default is False.
    bool showDeleted = 14;
    // Flag indicating whether hidden tasks are returned in the result. Optional. The default is False.
    bool showHidden = 15;
    // Task list identifier.
    string tasklist = 16;
    // Lower bound for a task's last modification time (as a RFC 3339 timestamp) to filter by. Optional. The default is not to filter by last modification time.
    string updatedMin = 17;
    string userIp = 18;
}

message PostListsTasklistTasksRequest {
    alt alt = 1;
    Task body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // Parent task identifier. If the task is created at the top level, this parameter is omitted. Optional.
    string parent = 6;
    boolean prettyPrint = 7;
    // Previous sibling task identifier. If the task is created at the first position among its siblings, this parameter is omitted. Optional.
    string previous = 8;
    string quotaUser = 9;
    // Task list identifier.
    string tasklist = 10;
    string userIp = 11;
}

message GetListsTasklistTasksTaskRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    // Task identifier.
    string task = 7;
    // Task list identifier.
    string tasklist = 8;
    string userIp = 9;
}

message PutListsTasklistTasksTaskRequest {
    alt alt = 1;
    Task body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // Task identifier.
    string task = 8;
    // Task list identifier.
    string tasklist = 9;
    string userIp = 10;
}

message DeleteListsTasklistTasksTaskRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    // Task identifier.
    string task = 7;
    // Task list identifier.
    string tasklist = 8;
    string userIp = 9;
}

message PostListsTasklistTasksTaskMoveRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    // New parent task identifier. If the task is moved to the top level, this parameter is omitted. Optional.
    string parent = 5;
    boolean prettyPrint = 6;
    // New previous sibling task identifier. If the task is moved to the first position among its siblings, this parameter is omitted. Optional.
    string previous = 7;
    string quotaUser = 8;
    // Task identifier.
    string task = 9;
    // Task list identifier.
    string tasklist = 10;
    string userIp = 11;
}

message GetUsers@MeListsRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // Maximum number of task lists returned on one page. Optional. The default is 100.
    string maxResults = 4;
    string oauth_token = 5;
    // Token specifying the result page to return. Optional.
    string pageToken = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostUsers@MeListsRequest {
    alt alt = 1;
    TaskList body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetUsers@MeListsTasklistRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    // Task list identifier.
    string tasklist = 7;
    string userIp = 8;
}

message PutUsers@MeListsTasklistRequest {
    alt alt = 1;
    TaskList body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // Task list identifier.
    string tasklist = 8;
    string userIp = 9;
}

message DeleteUsers@MeListsTasklistRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    // Task list identifier.
    string tasklist = 7;
    string userIp = 8;
}

message Task {
    // Completion date of the task (as a RFC 3339 timestamp). This field is omitted if the task has not been completed.
    string completed = 1;
    // Flag indicating whether the task has been deleted. The default if False.
    bool deleted = 2;
    // Due date of the task (as a RFC 3339 timestamp). Optional.
    string due = 3;
    // ETag of the resource.
    string etag = 4;
    // Flag indicating whether the task is hidden. This is the case if the task had been marked completed when the task list was last cleared. The default is False. This field is read-only.
    bool hidden = 5;
    // Task identifier.
    string id = 6;
    // Type of the resource. This is always "tasks#task".
    string kind = 7;
    // Collection of links. This collection is read-only.
    message Link {
            // The description. In HTML speak: Everything between <a> and </a>.
    string description = 1;
            // The URL.
    string link = 2;
            // Type of the link, e.g. "email".
    string type = 3;
    }
    repeated Link links = 8;
    // Notes describing the task. Optional.
    string notes = 9;
    // Parent task identifier. This field is omitted if it is a top-level task. This field is read-only. Use the "move" method to move the task under a different parent or to the top level.
    string parent = 10;
    // String indicating the position of the task among its sibling tasks under the same parent task or at the top level. If this string is greater than another task's corresponding position string according to lexicographical ordering, the task is positioned after the other task under the same parent task (or at the top level). This field is read-only. Use the "move" method to move the task to another position.
    string position = 11;
    // URL pointing to this task. Used to retrieve, update, or delete this task.
    string selfLink = 12;
    // Status of the task. This is either "needsAction" or "completed".
    string status = 13;
    // Title of the task.
    string title = 14;
    // Last modification time of the task (as a RFC 3339 timestamp).
    string updated = 15;
}

message TaskList {
    // ETag of the resource.
    string etag = 1;
    // Task list identifier.
    string id = 2;
    // Type of the resource. This is always "tasks#taskList".
    string kind = 3;
    // URL pointing to this task list. Used to retrieve, update, or delete this task list.
    string selfLink = 4;
    // Title of the task list.
    string title = 5;
    // Last modification time of the task list (as a RFC 3339 timestamp).
    string updated = 6;
}

message TaskLists {
    // ETag of the resource.
    string etag = 1;
    // Collection of task lists.
    repeated TaskList items = 2;
    // Type of the resource. This is always "tasks#taskLists".
    string kind = 3;
    // Token that can be used to request the next page of this result.
    string nextPageToken = 4;
}

message Tasks {
    // ETag of the resource.
    string etag = 1;
    // Collection of tasks.
    repeated Task items = 2;
    // Type of the resource. This is always "tasks#tasks".
    string kind = 3;
    // Token used to access the next page of this result.
    string nextPageToken = 4;
}

enum Alt {
    JSON = 0;
}

service TasksService {
    // Clears all completed tasks from the specified task list. The affected tasks will be marked as 'hidden' and no longer be returned by default when retrieving all tasks for a task list.
    rpc PostListsTasklistClear(PostListsTasklistClearRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/tasks/v1/lists/{tasklist}/clear"
      };
    }
    // Returns all tasks in the specified task list.
    rpc GetListsTasklistTasks(GetListsTasklistTasksRequest) returns (Tasks) {
      option (google.api.http) = {
        get: "/tasks/v1/lists/{tasklist}/tasks"
      };
    }
    // Creates a new task on the specified task list.
    rpc PostListsTasklistTasks(PostListsTasklistTasksRequest) returns (Task) {
      option (google.api.http) = {
        post: "/tasks/v1/lists/{tasklist}/tasks"
        body: "body"
      };
    }
    // Returns the specified task.
    rpc GetListsTasklistTasksTask(GetListsTasklistTasksTaskRequest) returns (Task) {
      option (google.api.http) = {
        get: "/tasks/v1/lists/{tasklist}/tasks/{task}"
      };
    }
    // Updates the specified task.
    rpc PutListsTasklistTasksTask(PutListsTasklistTasksTaskRequest) returns (Task) {
      option (google.api.http) = {
        put: "/tasks/v1/lists/{tasklist}/tasks/{task}"
        body: "body"
      };
    }
    // Deletes the specified task from the task list.
    rpc DeleteListsTasklistTasksTask(DeleteListsTasklistTasksTaskRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/tasks/v1/lists/{tasklist}/tasks/{task}"
      };
    }
    // Moves the specified task to another position in the task list. This can include putting it as a child task under a new parent and/or move it to a different position among its sibling tasks.
    rpc PostListsTasklistTasksTaskMove(PostListsTasklistTasksTaskMoveRequest) returns (Task) {
      option (google.api.http) = {
        post: "/tasks/v1/lists/{tasklist}/tasks/{task}/move"
      };
    }
    // Returns all the authenticated user's task lists.
    rpc GetUsers@MeLists(GetUsers@MeListsRequest) returns (TaskLists) {
      option (google.api.http) = {
        get: "/tasks/v1/users/@me/lists"
      };
    }
    // Creates a new task list and adds it to the authenticated user's task lists.
    rpc PostUsers@MeLists(PostUsers@MeListsRequest) returns (TaskList) {
      option (google.api.http) = {
        post: "/tasks/v1/users/@me/lists"
        body: "body"
      };
    }
    // Returns the authenticated user's specified task list.
    rpc GetUsers@MeListsTasklist(GetUsers@MeListsTasklistRequest) returns (TaskList) {
      option (google.api.http) = {
        get: "/tasks/v1/users/@me/lists/{tasklist}"
      };
    }
    // Updates the authenticated user's specified task list.
    rpc PutUsers@MeListsTasklist(PutUsers@MeListsTasklistRequest) returns (TaskList) {
      option (google.api.http) = {
        put: "/tasks/v1/users/@me/lists/{tasklist}"
        body: "body"
      };
    }
    // Deletes the authenticated user's specified task list.
    rpc DeleteUsers@MeListsTasklist(DeleteUsers@MeListsTasklistRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/tasks/v1/users/@me/lists/{tasklist}"
      };
    }
}

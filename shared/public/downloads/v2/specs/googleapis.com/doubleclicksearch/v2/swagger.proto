syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package doubleclicksearch;

message GetAgencyAgencyIdAdvertiserAdvertiserIdEngineEngineAccountIdConversionRequest {
    // Numeric ID of the ad group.
    string adGroupId = 1;
    // Numeric ID of the ad.
    string adId = 2;
    // Numeric ID of the advertiser.
    string advertiserId = 3;
    // Numeric ID of the agency.
    string agencyId = 4;
    alt alt = 5;
    // Numeric ID of the campaign.
    string campaignId = 6;
    // Numeric ID of the criterion.
    string criterionId = 7;
    // Last date (inclusive) on which to retrieve conversions. Format is yyyymmdd.
    int32 endDate = 8;
    // Numeric ID of the engine account.
    string engineAccountId = 9;
    string fields = 10;
    string key = 11;
    string oauth_token = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    // The number of conversions to return per call.
    int32 rowCount = 15;
    // First date (inclusive) on which to retrieve conversions. Format is yyyymmdd.
    int32 startDate = 16;
    // The 0-based starting index for retrieving conversions results.
    int32 startRow = 17;
    string userIp = 18;
}

message GetAgencyAgencyIdAdvertiserAdvertiserIdSavedcolumnsRequest {
    // DS ID of the advertiser.
    string advertiserId = 1;
    // DS ID of the agency.
    string agencyId = 2;
    alt alt = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PutConversionRequest {
    alt alt = 1;
    ConversionList body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostConversionRequest {
    alt alt = 1;
    ConversionList body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostConversionUpdateAvailabilityRequest {
    alt alt = 1;
    UpdateAvailabilityRequest empty = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostReportsRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    ReportRequest reportRequest = 7;
    string userIp = 8;
}

message PostReportsGenerateRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    ReportRequest reportRequest = 7;
    string userIp = 8;
}

message GetReportsReportIdRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    // ID of the report request being polled.
    string reportId = 7;
    string userIp = 8;
}

message GetReportsReportIdFilesReportFragmentRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    // The index of the report fragment to download.
    int32 reportFragment = 7;
    // ID of the report.
    string reportId = 8;
    string userIp = 9;
}

message Availability {
    // DS advertiser ID.
    string advertiserId = 1;
    // DS agency ID.
    string agencyId = 2;
    // The time by which all conversions have been uploaded, in epoch millis UTC.
    string availabilityTimestamp = 3;
    // The numeric segmentation identifier (for example, DoubleClick Search Floodlight activity ID).
    string segmentationId = 4;
    // The friendly segmentation identifier (for example, DoubleClick Search Floodlight activity name).
    string segmentationName = 5;
    // The segmentation type that this availability is for (its default value is FLOODLIGHT).
    string segmentationType = 6;
}

message Conversion {
    // DS ad group ID.
    string adGroupId = 1;
    // DS ad ID.
    string adId = 2;
    // DS advertiser ID.
    string advertiserId = 3;
    // DS agency ID.
    string agencyId = 4;
    // Available to advertisers only after contacting DoubleClick Search customer support.
    string attributionModel = 5;
    // DS campaign ID.
    string campaignId = 6;
    // Sales channel for the product. Acceptable values are:  
    // - "local": a physical store 
    // - "online": an online store
    string channel = 7;
    // DS click ID for the conversion.
    string clickId = 8;
    // For offline conversions, advertisers provide this ID. Advertisers can specify any ID that is meaningful to them. Each conversion in a request must specify a unique ID, and the combination of ID and timestamp must be unique amongst all conversions within the advertiser.
    // For online conversions, DS copies the dsConversionId or floodlightOrderId into this property depending on the advertiser's Floodlight instructions.
    string conversionId = 9;
    // The time at which the conversion was last modified, in epoch millis UTC.
    string conversionModifiedTimestamp = 10;
    // The time at which the conversion took place, in epoch millis UTC.
    string conversionTimestamp = 11;
    // Available to advertisers only after contacting DoubleClick Search customer support.
    string countMillis = 12;
    // DS criterion (keyword) ID.
    string criterionId = 13;
    // The currency code for the conversion's revenue. Should be in ISO 4217 alphabetic (3-char) format.
    string currencyCode = 14;
    // Custom dimensions for the conversion, which can be used to filter data in a report.
    repeated CustomDimension customDimension = 15;
    // Custom metrics for the conversion.
    repeated CustomMetric customMetric = 16;
    // The type of device on which the conversion occurred.
    string deviceType = 17;
    // ID that DoubleClick Search generates for each conversion.
    string dsConversionId = 18;
    // DS engine account ID.
    string engineAccountId = 19;
    // The Floodlight order ID provided by the advertiser for the conversion.
    string floodlightOrderId = 20;
    // ID that DS generates and uses to uniquely identify the inventory account that contains the product.
    string inventoryAccountId = 21;
    // The country registered for the Merchant Center feed that contains the product. Use an ISO 3166 code to specify a country.
    string productCountry = 22;
    // DS product group ID.
    string productGroupId = 23;
    // The product ID (SKU).
    string productId = 24;
    // The language registered for the Merchant Center feed that contains the product. Use an ISO 639 code to specify a language.
    string productLanguage = 25;
    // The quantity of this conversion, in millis.
    string quantityMillis = 26;
    // The revenue amount of this TRANSACTION conversion, in micros (value multiplied by 1000000, no decimal). For example, to specify a revenue value of "10" enter "10000000" (10 million) in your request.
    string revenueMicros = 27;
    // The numeric segmentation identifier (for example, DoubleClick Search Floodlight activity ID).
    string segmentationId = 28;
    // The friendly segmentation identifier (for example, DoubleClick Search Floodlight activity name).
    string segmentationName = 29;
    // The segmentation type of this conversion (for example, FLOODLIGHT).
    string segmentationType = 30;
    // The state of the conversion, that is, either ACTIVE or REMOVED. Note: state DELETED is deprecated.
    string state = 31;
    // The ID of the local store for which the product was advertised. Applicable only when the channel is "local".
    string storeId = 32;
    // The type of the conversion, that is, either ACTION or TRANSACTION. An ACTION conversion is an action by the user that has no monetarily quantifiable value, while a TRANSACTION conversion is an action that does have a monetarily quantifiable value. Examples are email list signups (ACTION) versus ecommerce purchases (TRANSACTION).
    string type = 33;
}

message ConversionList {
    // The conversions being requested.
    repeated Conversion conversion = 1;
    // Identifies this as a ConversionList resource. Value: the fixed string doubleclicksearch#conversionList.
    string kind = 2;
}

message CustomDimension {
    // Custom dimension name.
    string name = 1;
    // Custom dimension value.
    string value = 2;
}

message CustomMetric {
    // Custom metric name.
    string name = 1;
    // Custom metric numeric value.
    double value = 2;
}

message Report {
    // Asynchronous report only. Contains a list of generated report files once the report has succesfully completed.
    message File {
            // The size of this report file in bytes.
    string byteCount = 1;
            // Use this url to download the report file.
    string url = 2;
    }
    repeated File files = 1;
    // Asynchronous report only. Id of the report.
    string id = 2;
    // Asynchronous report only. True if and only if the report has completed successfully and the report files are ready to be downloaded.
    bool isReportReady = 3;
    // Identifies this as a Report resource. Value: the fixed string doubleclicksearch#report.
    string kind = 4;
    // The request that created the report. Optional fields not specified in the original request are filled with default values.
    ReportRequest request = 5;
    // The number of report rows generated by the report, not including headers.
    int32 rowCount = 6;
    // Synchronous report only. Generated report rows.
    repeated ReportRow rows = 7;
    // The currency code of all monetary values produced in the report, including values that are set by users (e.g., keyword bid settings) and metrics (e.g., cost and revenue). The currency code of a report is determined by the statisticsCurrency field of the report request.
    string statisticsCurrencyCode = 8;
    // If all statistics of the report are sourced from the same time zone, this would be it. Otherwise the field is unset.
    string statisticsTimeZone = 9;
}

message ReportApiColumnSpec {
    // Name of a DoubleClick Search column to include in the report.
    string columnName = 1;
    // Segments a report by a custom dimension. The report must be scoped to an advertiser or lower, and the custom dimension must already be set up in DoubleClick Search. The custom dimension name, which appears in DoubleClick Search, is case sensitive.
    // If used in a conversion report, returns the value of the specified custom dimension for the given conversion, if set. This column does not segment the conversion report.
    string customDimensionName = 2;
    // Name of a custom metric to include in the report. The report must be scoped to an advertiser or lower, and the custom metric must already be set up in DoubleClick Search. The custom metric name, which appears in DoubleClick Search, is case sensitive.
    string customMetricName = 3;
    // Inclusive day in YYYY-MM-DD format. When provided, this overrides the overall time range of the report for this column only. Must be provided together with startDate.
    string endDate = 4;
    // Synchronous report only. Set to true to group by this column. Defaults to false.
    bool groupByColumn = 5;
    // Text used to identify this column in the report output; defaults to columnName or savedColumnName when not specified. This can be used to prevent collisions between DoubleClick Search columns and saved columns with the same name.
    string headerText = 6;
    // The platform that is used to provide data for the custom dimension. Acceptable values are "floodlight".
    string platformSource = 7;
    // Returns metrics only for a specific type of product activity. Accepted values are:  
    // - "sold": returns metrics only for products that were sold 
    // - "advertised": returns metrics only for products that were advertised in a Shopping campaign, and that might or might not have been sold
    string productReportPerspective = 8;
    // Name of a saved column to include in the report. The report must be scoped at advertiser or lower, and this saved column must already be created in the DoubleClick Search UI.
    string savedColumnName = 9;
    // Inclusive date in YYYY-MM-DD format. When provided, this overrides the overall time range of the report for this column only. Must be provided together with endDate.
    string startDate = 10;
}

message ReportRequest {
    // The columns to include in the report. This includes both DoubleClick Search columns and saved columns. For DoubleClick Search columns, only the columnName parameter is required. For saved columns only the savedColumnName parameter is required. Both columnName and savedColumnName cannot be set in the same stanza.
    repeated ReportApiColumnSpec columns = 1;
    // Format that the report should be returned in. Currently csv or tsv is supported.
    string downloadFormat = 2;
    // A list of filters to be applied to the report.
    message Filter {
            // Column to perform the filter on. This can be a DoubleClick Search column or a saved column.
    ReportApiColumnSpec column = 1;
            // Operator to use in the filter. See the filter reference for a list of available operators.
    string operator = 2;
            // A list of values to filter the column value against.
    message Value {
        }
        repeated Value values = 3;
    }
    repeated Filter filters = 3;
    // Determines if removed entities should be included in the report. Defaults to false. Deprecated, please use includeRemovedEntities instead.
    bool includeDeletedEntities = 4;
    // Determines if removed entities should be included in the report. Defaults to false.
    bool includeRemovedEntities = 5;
    // Asynchronous report only. The maximum number of rows per report file. A large report is split into many files based on this field. Acceptable values are 1000000 to 100000000, inclusive.
    int32 maxRowsPerFile = 6;
    // Synchronous report only. A list of columns and directions defining sorting to be performed on the report rows.
    message OrderBy {
            // Column to perform the sort on. This can be a DoubleClick Search-defined column or a saved column.
    ReportApiColumnSpec column = 1;
            // The sort direction, which is either ascending or descending.
    string sortOrder = 2;
    }
    repeated OrderBy orderBy = 7;
    // The reportScope is a set of IDs that are used to determine which subset of entities will be returned in the report. The full lineage of IDs from the lowest scoped level desired up through agency is required.
    message ReportScope {
            // DS ad group ID.
    string adGroupId = 1;
            // DS ad ID.
    string adId = 2;
            // DS advertiser ID.
    string advertiserId = 3;
            // DS agency ID.
    string agencyId = 4;
            // DS campaign ID.
    string campaignId = 5;
            // DS engine account ID.
    string engineAccountId = 6;
            // DS keyword ID.
    string keywordId = 7;
    }
    ReportScope reportScope = 8;
    // Determines the type of rows that are returned in the report. For example, if you specify reportType: keyword, each row in the report will contain data about a keyword. See the Types of Reports reference for the columns that are available for each type.
    string reportType = 9;
    // Synchronous report only. The maxinum number of rows to return; additional rows are dropped. Acceptable values are 0 to 10000, inclusive. Defaults to 10000.
    int32 rowCount = 10;
    // Synchronous report only. Zero-based index of the first row to return. Acceptable values are 0 to 50000, inclusive. Defaults to 0.
    int32 startRow = 11;
    // Specifies the currency in which monetary will be returned. Possible values are: usd, agency (valid if the report is scoped to agency or lower), advertiser (valid if the report is scoped to * advertiser or lower), or account (valid if the report is scoped to engine account or lower).
    string statisticsCurrency = 12;
    // If metrics are requested in a report, this argument will be used to restrict the metrics to a specific time range.
    message TimeRange {
            // Inclusive UTC timestamp in RFC format, e.g., 2013-07-16T10:16:23.555Z. See additional references on how changed attribute reports work.
    string changedAttributesSinceTimestamp = 1;
            // Inclusive UTC timestamp in RFC format, e.g., 2013-07-16T10:16:23.555Z. See additional references on how changed metrics reports work.
    string changedMetricsSinceTimestamp = 2;
            // Inclusive date in YYYY-MM-DD format.
    string endDate = 3;
            // Inclusive date in YYYY-MM-DD format.
    string startDate = 4;
    }
    TimeRange timeRange = 13;
    // If true, the report would only be created if all the requested stat data are sourced from a single timezone. Defaults to false.
    bool verifySingleTimeZone = 14;
}

map<string, > ReportRow = 1

message SavedColumn {
    // Identifies this as a SavedColumn resource. Value: the fixed string doubleclicksearch#savedColumn.
    string kind = 1;
    // The name of the saved column.
    string savedColumnName = 2;
    // The type of data this saved column will produce.
    string type = 3;
}

message SavedColumnList {
    // The saved columns being requested.
    repeated SavedColumn items = 1;
    // Identifies this as a SavedColumnList resource. Value: the fixed string doubleclicksearch#savedColumnList.
    string kind = 2;
}

message UpdateAvailabilityRequest {
    // The availabilities being requested.
    repeated Availability availabilities = 1;
}

message UpdateAvailabilityResponse {
    // The availabilities being returned.
    repeated Availability availabilities = 1;
}

enum Alt {
    JSON = 0;
}

service DoubleClickSearchService {
    // Retrieves a list of conversions from a DoubleClick Search engine account.
    rpc GetAgencyAgencyIdAdvertiserAdvertiserIdEngineEngineAccountIdConversion(GetAgencyAgencyIdAdvertiserAdvertiserIdEngineEngineAccountIdConversionRequest) returns (ConversionList) {
      option (google.api.http) = {
        get: "/doubleclicksearch/v2/agency/{agencyId}/advertiser/{advertiserId}/engine/{engineAccountId}/conversion"
      };
    }
    // Retrieve the list of saved columns for a specified advertiser.
    rpc GetAgencyAgencyIdAdvertiserAdvertiserIdSavedcolumns(GetAgencyAgencyIdAdvertiserAdvertiserIdSavedcolumnsRequest) returns (SavedColumnList) {
      option (google.api.http) = {
        get: "/doubleclicksearch/v2/agency/{agencyId}/advertiser/{advertiserId}/savedcolumns"
      };
    }
    // Updates a batch of conversions in DoubleClick Search.
    rpc PutConversion(PutConversionRequest) returns (ConversionList) {
      option (google.api.http) = {
        put: "/doubleclicksearch/v2/conversion"
        body: "body"
      };
    }
    // Inserts a batch of new conversions into DoubleClick Search.
    rpc PostConversion(PostConversionRequest) returns (ConversionList) {
      option (google.api.http) = {
        post: "/doubleclicksearch/v2/conversion"
        body: "body"
      };
    }
    // Updates the availabilities of a batch of floodlight activities in DoubleClick Search.
    rpc PostConversionUpdateAvailability(PostConversionUpdateAvailabilityRequest) returns (UpdateAvailabilityResponse) {
      option (google.api.http) = {
        post: "/doubleclicksearch/v2/conversion/updateAvailability"
        body: "empty"
      };
    }
    // Inserts a report request into the reporting system.
    rpc PostReports(PostReportsRequest) returns (Report) {
      option (google.api.http) = {
        post: "/doubleclicksearch/v2/reports"
        body: "reportRequest"
      };
    }
    // Generates and returns a report immediately.
    rpc PostReportsGenerate(PostReportsGenerateRequest) returns (Report) {
      option (google.api.http) = {
        post: "/doubleclicksearch/v2/reports/generate"
        body: "reportRequest"
      };
    }
    // Polls for the status of a report request.
    rpc GetReportsReportId(GetReportsReportIdRequest) returns (Report) {
      option (google.api.http) = {
        get: "/doubleclicksearch/v2/reports/{reportId}"
      };
    }
    // Downloads a report file encoded in UTF-8.
    rpc GetReportsReportIdFilesReportFragment(GetReportsReportIdFilesReportFragmentRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/doubleclicksearch/v2/reports/{reportId}/files/{reportFragment}"
      };
    }
}

syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package youtubedata;

message GetActivitiesRequest {
    alt alt = 1;
    // The channelId parameter specifies a unique YouTube channel ID. The API will then return a list of that channel's activities.
    string channelId = 2;
    string fields = 3;
    // Set this parameter's value to true to retrieve the activity feed that displays on the YouTube home page for the currently authenticated user.
    bool home = 4;
    string key = 5;
    // The maxResults parameter specifies the maximum number of items that should be returned in the result set.
    int32 maxResults = 6;
    // Set this parameter's value to true to retrieve a feed of the authenticated user's activities.
    bool mine = 7;
    string oauth_token = 8;
    // The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    string pageToken = 9;
    // The part parameter specifies a comma-separated list of one or more activity resource properties that the API response will include.
    // 
    // If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in an activity resource, the snippet property contains other properties that identify the type of activity, a display title for the activity, and so forth. If you set part=snippet, the API response will also contain all of those nested properties.
    string part = 10;
    boolean prettyPrint = 11;
    // The publishedAfter parameter specifies the earliest date and time that an activity could have occurred for that activity to be included in the API response. If the parameter value specifies a day, but not a time, then any activities that occurred that day will be included in the result set. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
    string publishedAfter = 12;
    // The publishedBefore parameter specifies the date and time before which an activity must have occurred for that activity to be included in the API response. If the parameter value specifies a day, but not a time, then any activities that occurred that day will be excluded from the result set. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
    string publishedBefore = 13;
    string quotaUser = 14;
    // The regionCode parameter instructs the API to return results for the specified country. The parameter value is an ISO 3166-1 alpha-2 country code. YouTube uses this value when the authorized user's previous activity on YouTube does not provide enough information to generate the activity feed.
    string regionCode = 15;
    string userIp = 16;
}

message PostActivitiesRequest {
    alt alt = 1;
    Activity body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.
    string part = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetCaptionsRequest {
    alt alt = 1;
    string fields = 2;
    // The id parameter specifies a comma-separated list of IDs that identify the caption resources that should be retrieved. Each ID must identify a caption track associated with the specified video.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    // ID of the Google+ Page for the channel that the request is on behalf of.
    string onBehalfOf = 6;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 7;
    // The part parameter specifies a comma-separated list of one or more caption resource parts that the API response will include. The part names that you can include in the parameter value are id and snippet.
    string part = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    string userIp = 11;
    // The videoId parameter specifies the YouTube video ID of the video for which the API should return caption tracks.
    string videoId = 12;
}

message PutCaptionsRequest {
    alt alt = 1;
    Caption body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // ID of the Google+ Page for the channel that the request is be on behalf of
    string onBehalfOf = 6;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 7;
    // The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. Set the property value to snippet if you are updating the track's draft status. Otherwise, set the property value to id.
    string part = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    // Note: The API server only processes the parameter value if the request contains an updated caption file.
    // 
    // The sync parameter indicates whether YouTube should automatically synchronize the caption file with the audio track of the video. If you set the value to true, YouTube will automatically synchronize the caption track with the audio track.
    bool sync = 11;
    string userIp = 12;
}

message PostCaptionsRequest {
    alt alt = 1;
    Caption body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // ID of the Google+ Page for the channel that the request is be on behalf of
    string onBehalfOf = 6;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 7;
    // The part parameter specifies the caption resource parts that the API response will include. Set the parameter value to snippet.
    string part = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    // The sync parameter indicates whether YouTube should automatically synchronize the caption file with the audio track of the video. If you set the value to true, YouTube will disregard any time codes that are in the uploaded caption file and generate new time codes for the captions.
    // 
    // You should set the sync parameter to true if you are uploading a transcript, which has no time codes, or if you suspect the time codes in your file are incorrect and want YouTube to try to fix them.
    bool sync = 11;
    string userIp = 12;
}

message DeleteCaptionsRequest {
    alt alt = 1;
    string fields = 2;
    // The id parameter identifies the caption track that is being deleted. The value is a caption track ID as identified by the id property in a caption resource.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    // ID of the Google+ Page for the channel that the request is be on behalf of
    string onBehalfOf = 6;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetCaptionsIdRequest {
    alt alt = 1;
    string fields = 2;
    // The id parameter identifies the caption track that is being retrieved. The value is a caption track ID as identified by the id property in a caption resource.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    // ID of the Google+ Page for the channel that the request is be on behalf of
    string onBehalfOf = 6;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    // The tfmt parameter specifies that the caption track should be returned in a specific format. If the parameter is not included in the request, the track is returned in its original format.
    enum GetCaptionsIdRequest_Tfmt {
        GETCAPTIONSIDREQUEST_TFMT_SBV = 0;
        GETCAPTIONSIDREQUEST_TFMT_SCC = 1;
        GETCAPTIONSIDREQUEST_TFMT_SRT = 2;
        GETCAPTIONSIDREQUEST_TFMT_TTML = 3;
        GETCAPTIONSIDREQUEST_TFMT_VTT = 4;
    }
    GetCaptionsIdRequest_Tfmt tfmt = 10;
    // The tlang parameter specifies that the API response should return a translation of the specified caption track. The parameter value is an ISO 639-1 two-letter language code that identifies the desired caption language. The translation is generated by using machine translation, such as Google Translate.
    string tlang = 11;
    string userIp = 12;
}

message PostChannelBannersInsertRequest {
    alt alt = 1;
    ChannelBannerResource body = 2;
    // The channelId parameter identifies the YouTube channel to which the banner is uploaded. The channelId parameter was introduced as a required parameter in May 2017. As this was a backward-incompatible change, channelBanners.insert requests that do not specify this parameter will not return an error until six months have passed from the time that the parameter was introduced. Please see the API Terms of Service for the official policy regarding backward incompatible changes and the API revision history for the exact date that the parameter was introduced.
    string channelId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetChannelSectionsRequest {
    alt alt = 1;
    // The channelId parameter specifies a YouTube channel ID. The API will only return that channel's channelSections.
    string channelId = 2;
    string fields = 3;
    // The hl parameter indicates that the snippet.localized property values in the returned channelSection resources should be in the specified language if localized values for that language are available. For example, if the API request specifies hl=de, the snippet.localized properties in the API response will contain German titles if German titles are available. Channel owners can provide localized channel section titles using either the channelSections.insert or channelSections.update method.
    string hl = 4;
    // The id parameter specifies a comma-separated list of the YouTube channelSection ID(s) for the resource(s) that are being retrieved. In a channelSection resource, the id property specifies the YouTube channelSection ID.
    string id = 5;
    string key = 6;
    // Set this parameter's value to true to retrieve a feed of the authenticated user's channelSections.
    bool mine = 7;
    string oauth_token = 8;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 9;
    // The part parameter specifies a comma-separated list of one or more channelSection resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, and contentDetails.
    // 
    // If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a channelSection resource, the snippet property contains other properties, such as a display title for the channelSection. If you set part=snippet, the API response will also contain all of those nested properties.
    string part = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string userIp = 13;
}

message PutChannelSectionsRequest {
    alt alt = 1;
    ChannelSection body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 6;
    // The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.
    // 
    // The part names that you can include in the parameter value are snippet and contentDetails.
    string part = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostChannelSectionsRequest {
    alt alt = 1;
    ChannelSection body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 6;
    // This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.
    // 
    // This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    string onBehalfOfContentOwnerChannel = 7;
    // The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.
    // 
    // The part names that you can include in the parameter value are snippet and contentDetails.
    string part = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message DeleteChannelSectionsRequest {
    alt alt = 1;
    string fields = 2;
    // The id parameter specifies the YouTube channelSection ID for the resource that is being deleted. In a channelSection resource, the id property specifies the YouTube channelSection ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetChannelsRequest {
    alt alt = 1;
    // The categoryId parameter specifies a YouTube guide category, thereby requesting YouTube channels associated with that category.
    string categoryId = 2;
    string fields = 3;
    // The forUsername parameter specifies a YouTube username, thereby requesting the channel associated with that username.
    string forUsername = 4;
    // The hl parameter should be used for filter out the properties that are not in the given language. Used for the brandingSettings part.
    string hl = 5;
    // The id parameter specifies a comma-separated list of the YouTube channel ID(s) for the resource(s) that are being retrieved. In a channel resource, the id property specifies the channel's YouTube channel ID.
    string id = 6;
    string key = 7;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // Set this parameter's value to true to instruct the API to only return channels managed by the content owner that the onBehalfOfContentOwner parameter specifies. The user must be authenticated as a CMS account linked to the specified content owner and onBehalfOfContentOwner must be provided.
    bool managedByMe = 8;
    // The maxResults parameter specifies the maximum number of items that should be returned in the result set.
    int32 maxResults = 9;
    // Set this parameter's value to true to instruct the API to only return channels owned by the authenticated user.
    bool mine = 10;
    // Use the subscriptions.list method and its mySubscribers parameter to retrieve a list of subscribers to the authenticated user's channel.
    bool mySubscribers = 11;
    string oauth_token = 12;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 13;
    // The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    string pageToken = 14;
    // The part parameter specifies a comma-separated list of one or more channel resource properties that the API response will include.
    // 
    // If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a channel resource, the contentDetails property contains other properties, such as the uploads properties. As such, if you set part=contentDetails, the API response will also contain all of those nested properties.
    string part = 15;
    boolean prettyPrint = 16;
    string quotaUser = 17;
    string userIp = 18;
}

message PutChannelsRequest {
    alt alt = 1;
    Channel body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // The onBehalfOfContentOwner parameter indicates that the authenticated user is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with needs to be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 6;
    // The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.
    // 
    // The API currently only allows the parameter value to be set to either brandingSettings or invideoPromotion. (You cannot update both of those parts with a single request.)
    // 
    // Note that this method overrides the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies.
    string part = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetCommentThreadsRequest {
    // The allThreadsRelatedToChannelId parameter instructs the API to return all comment threads associated with the specified channel. The response can include comments about the channel or about the channel's videos.
    string allThreadsRelatedToChannelId = 1;
    alt alt = 2;
    // The channelId parameter instructs the API to return comment threads containing comments about the specified channel. (The response will not include comments left on videos that the channel uploaded.)
    string channelId = 3;
    string fields = 4;
    // The id parameter specifies a comma-separated list of comment thread IDs for the resources that should be retrieved.
    string id = 5;
    string key = 6;
    // The maxResults parameter specifies the maximum number of items that should be returned in the result set.
    // 
    // Note: This parameter is not supported for use in conjunction with the id parameter.
    int32 maxResults = 7;
    // Set this parameter to limit the returned comment threads to a particular moderation state.
    // 
    // Note: This parameter is not supported for use in conjunction with the id parameter.
    enum GetCommentThreadsRequest_ModerationStatu {
        GETCOMMENTTHREADSREQUEST_MODERATIONSTATU_HELDFORREVIEW = 0;
        GETCOMMENTTHREADSREQUEST_MODERATIONSTATU_LIKELYSPAM = 1;
        GETCOMMENTTHREADSREQUEST_MODERATIONSTATU_PUBLISHED = 2;
    }
    GetCommentThreadsRequest_ModerationStatu moderationStatus = 8;
    string oauth_token = 9;
    // The order parameter specifies the order in which the API response should list comment threads. Valid values are: 
    // - time - Comment threads are ordered by time. This is the default behavior.
    // - relevance - Comment threads are ordered by relevance.Note: This parameter is not supported for use in conjunction with the id parameter.
    enum GetCommentThreadsRequest_Order {
        GETCOMMENTTHREADSREQUEST_ORDER_RELEVANCE = 0;
        GETCOMMENTTHREADSREQUEST_ORDER_TIME = 1;
    }
    GetCommentThreadsRequest_Order order = 10;
    // The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken property identifies the next page of the result that can be retrieved.
    // 
    // Note: This parameter is not supported for use in conjunction with the id parameter.
    string pageToken = 11;
    // The part parameter specifies a comma-separated list of one or more commentThread resource properties that the API response will include.
    string part = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    // The searchTerms parameter instructs the API to limit the API response to only contain comments that contain the specified search terms.
    // 
    // Note: This parameter is not supported for use in conjunction with the id parameter.
    string searchTerms = 15;
    // Set this parameter's value to html or plainText to instruct the API to return the comments left by users in html formatted or in plain text.
    enum GetCommentThreadsRequest_TextFormat {
        GETCOMMENTTHREADSREQUEST_TEXTFORMAT_HTML = 0;
        GETCOMMENTTHREADSREQUEST_TEXTFORMAT_PLAINTEXT = 1;
    }
    GetCommentThreadsRequest_TextFormat textFormat = 16;
    string userIp = 17;
    // The videoId parameter instructs the API to return comment threads associated with the specified video ID.
    string videoId = 18;
}

message PutCommentThreadsRequest {
    alt alt = 1;
    CommentThread body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // The part parameter specifies a comma-separated list of commentThread resource properties that the API response will include. You must at least include the snippet part in the parameter value since that part contains all of the properties that the API request can update.
    string part = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostCommentThreadsRequest {
    alt alt = 1;
    CommentThread body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // The part parameter identifies the properties that the API response will include. Set the parameter value to snippet. The snippet part has a quota cost of 2 units.
    string part = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetCommentsRequest {
    alt alt = 1;
    string fields = 2;
    // The id parameter specifies a comma-separated list of comment IDs for the resources that are being retrieved. In a comment resource, the id property specifies the comment's ID.
    string id = 3;
    string key = 4;
    // The maxResults parameter specifies the maximum number of items that should be returned in the result set.
    // 
    // Note: This parameter is not supported for use in conjunction with the id parameter.
    int32 maxResults = 5;
    string oauth_token = 6;
    // The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken property identifies the next page of the result that can be retrieved.
    // 
    // Note: This parameter is not supported for use in conjunction with the id parameter.
    string pageToken = 7;
    // The parentId parameter specifies the ID of the comment for which replies should be retrieved.
    // 
    // Note: YouTube currently supports replies only for top-level comments. However, replies to replies may be supported in the future.
    string parentId = 8;
    // The part parameter specifies a comma-separated list of one or more comment resource properties that the API response will include.
    string part = 9;
    boolean prettyPrint = 10;
    string quotaUser = 11;
    // This parameter indicates whether the API should return comments formatted as HTML or as plain text.
    enum GetCommentsRequest_TextFormat {
        GETCOMMENTSREQUEST_TEXTFORMAT_HTML = 0;
        GETCOMMENTSREQUEST_TEXTFORMAT_PLAINTEXT = 1;
    }
    GetCommentsRequest_TextFormat textFormat = 12;
    string userIp = 13;
}

message PutCommentsRequest {
    alt alt = 1;
    Comment body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // The part parameter identifies the properties that the API response will include. You must at least include the snippet part in the parameter value since that part contains all of the properties that the API request can update.
    string part = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostCommentsRequest {
    alt alt = 1;
    Comment body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // The part parameter identifies the properties that the API response will include. Set the parameter value to snippet. The snippet part has a quota cost of 2 units.
    string part = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message DeleteCommentsRequest {
    alt alt = 1;
    string fields = 2;
    // The id parameter specifies the comment ID for the resource that is being deleted.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostCommentsMarkAsSpamRequest {
    alt alt = 1;
    string fields = 2;
    // The id parameter specifies a comma-separated list of IDs of comments that the caller believes should be classified as spam.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostCommentsSetModerationStatusRequest {
    alt alt = 1;
    // The banAuthor parameter lets you indicate that you want to automatically reject any additional comments written by the comment's author. Set the parameter value to true to ban the author.
    // 
    // Note: This parameter is only valid if the moderationStatus parameter is also set to rejected.
    bool banAuthor = 2;
    string fields = 3;
    // The id parameter specifies a comma-separated list of IDs that identify the comments for which you are updating the moderation status.
    string id = 4;
    string key = 5;
    // Identifies the new moderation status of the specified comments.
    enum PostCommentsSetModerationStatusRequest_ModerationStatu {
        POSTCOMMENTSSETMODERATIONSTATUSREQUEST_MODERATIONSTATU_HELDFORREVIEW = 0;
        POSTCOMMENTSSETMODERATIONSTATUSREQUEST_MODERATIONSTATU_PUBLISHED = 1;
        POSTCOMMENTSSETMODERATIONSTATUSREQUEST_MODERATIONSTATU_REJECTED = 2;
    }
    PostCommentsSetModerationStatusRequest_ModerationStatu moderationStatus = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetFanFundingEventsRequest {
    alt alt = 1;
    string fields = 2;
    // The hl parameter instructs the API to retrieve localized resource metadata for a specific application language that the YouTube website supports. The parameter value must be a language code included in the list returned by the i18nLanguages.list method.
    // 
    // If localized resource details are available in that language, the resource's snippet.localized object will contain the localized values. However, if localized details are not available, the snippet.localized object will contain resource details in the resource's default language.
    string hl = 3;
    string key = 4;
    // The maxResults parameter specifies the maximum number of items that should be returned in the result set.
    int32 maxResults = 5;
    string oauth_token = 6;
    // The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    string pageToken = 7;
    // The part parameter specifies the fanFundingEvent resource parts that the API response will include. Supported values are id and snippet.
    string part = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message GetGuideCategoriesRequest {
    alt alt = 1;
    string fields = 2;
    // The hl parameter specifies the language that will be used for text values in the API response.
    string hl = 3;
    // The id parameter specifies a comma-separated list of the YouTube channel category ID(s) for the resource(s) that are being retrieved. In a guideCategory resource, the id property specifies the YouTube channel category ID.
    string id = 4;
    string key = 5;
    string oauth_token = 6;
    // The part parameter specifies the guideCategory resource properties that the API response will include. Set the parameter value to snippet.
    string part = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    // The regionCode parameter instructs the API to return the list of guide categories available in the specified country. The parameter value is an ISO 3166-1 alpha-2 country code.
    string regionCode = 10;
    string userIp = 11;
}

message GetI18nLanguagesRequest {
    alt alt = 1;
    string fields = 2;
    // The hl parameter specifies the language that should be used for text values in the API response.
    string hl = 3;
    string key = 4;
    string oauth_token = 5;
    // The part parameter specifies the i18nLanguage resource properties that the API response will include. Set the parameter value to snippet.
    string part = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetI18nRegionsRequest {
    alt alt = 1;
    string fields = 2;
    // The hl parameter specifies the language that should be used for text values in the API response.
    string hl = 3;
    string key = 4;
    string oauth_token = 5;
    // The part parameter specifies the i18nRegion resource properties that the API response will include. Set the parameter value to snippet.
    string part = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetLiveBroadcastsRequest {
    alt alt = 1;
    // The broadcastStatus parameter filters the API response to only include broadcasts with the specified status.
    enum GetLiveBroadcastsRequest_BroadcastStatu {
        GETLIVEBROADCASTSREQUEST_BROADCASTSTATU_ACTIVE = 0;
        GETLIVEBROADCASTSREQUEST_BROADCASTSTATU_ALL = 1;
        GETLIVEBROADCASTSREQUEST_BROADCASTSTATU_COMPLETED = 2;
        GETLIVEBROADCASTSREQUEST_BROADCASTSTATU_UPCOMING = 3;
    }
    GetLiveBroadcastsRequest_BroadcastStatu broadcastStatus = 2;
    // The broadcastType parameter filters the API response to only include broadcasts with the specified type. This is only compatible with the mine filter for now.
    enum GetLiveBroadcastsRequest_BroadcastType {
        GETLIVEBROADCASTSREQUEST_BROADCASTTYPE_ALL = 0;
        GETLIVEBROADCASTSREQUEST_BROADCASTTYPE_EVENT = 1;
        GETLIVEBROADCASTSREQUEST_BROADCASTTYPE_PERSISTENT = 2;
    }
    GetLiveBroadcastsRequest_BroadcastType broadcastType = 3;
    string fields = 4;
    // The id parameter specifies a comma-separated list of YouTube broadcast IDs that identify the broadcasts being retrieved. In a liveBroadcast resource, the id property specifies the broadcast's ID.
    string id = 5;
    string key = 6;
    // The maxResults parameter specifies the maximum number of items that should be returned in the result set.
    int32 maxResults = 7;
    // The mine parameter can be used to instruct the API to only return broadcasts owned by the authenticated user. Set the parameter value to true to only retrieve your own broadcasts.
    bool mine = 8;
    string oauth_token = 9;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 10;
    // This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.
    // 
    // This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    string onBehalfOfContentOwnerChannel = 11;
    // The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    string pageToken = 12;
    // The part parameter specifies a comma-separated list of one or more liveBroadcast resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, contentDetails, and status.
    string part = 13;
    boolean prettyPrint = 14;
    string quotaUser = 15;
    string userIp = 16;
}

message PutLiveBroadcastsRequest {
    alt alt = 1;
    LiveBroadcast body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 6;
    // This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.
    // 
    // This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    string onBehalfOfContentOwnerChannel = 7;
    // The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.
    // 
    // The part properties that you can include in the parameter value are id, snippet, contentDetails, and status.
    // 
    // Note that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. For example, a broadcast's privacy status is defined in the status part. As such, if your request is updating a private or unlisted broadcast, and the request's part parameter value includes the status part, the broadcast's privacy setting will be updated to whatever value the request body specifies. If the request body does not specify a value, the existing privacy setting will be removed and the broadcast will revert to the default privacy setting.
    string part = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message PostLiveBroadcastsRequest {
    alt alt = 1;
    LiveBroadcast body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 6;
    // This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.
    // 
    // This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    string onBehalfOfContentOwnerChannel = 7;
    // The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.
    // 
    // The part properties that you can include in the parameter value are id, snippet, contentDetails, and status.
    string part = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message DeleteLiveBroadcastsRequest {
    alt alt = 1;
    string fields = 2;
    // The id parameter specifies the YouTube live broadcast ID for the resource that is being deleted.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 6;
    // This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.
    // 
    // This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    string onBehalfOfContentOwnerChannel = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostLiveBroadcastsBindRequest {
    alt alt = 1;
    string fields = 2;
    // The id parameter specifies the unique ID of the broadcast that is being bound to a video stream.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 6;
    // This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.
    // 
    // This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    string onBehalfOfContentOwnerChannel = 7;
    // The part parameter specifies a comma-separated list of one or more liveBroadcast resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, contentDetails, and status.
    string part = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    // The streamId parameter specifies the unique ID of the video stream that is being bound to a broadcast. If this parameter is omitted, the API will remove any existing binding between the broadcast and a video stream.
    string streamId = 11;
    string userIp = 12;
}

message PostLiveBroadcastsControlRequest {
    alt alt = 1;
    // The displaySlate parameter specifies whether the slate is being enabled or disabled.
    bool displaySlate = 2;
    string fields = 3;
    // The id parameter specifies the YouTube live broadcast ID that uniquely identifies the broadcast in which the slate is being updated.
    string id = 4;
    string key = 5;
    string oauth_token = 6;
    // The offsetTimeMs parameter specifies a positive time offset when the specified slate change will occur. The value is measured in milliseconds from the beginning of the broadcast's monitor stream, which is the time that the testing phase for the broadcast began. Even though it is specified in milliseconds, the value is actually an approximation, and YouTube completes the requested action as closely as possible to that time.
    // 
    // If you do not specify a value for this parameter, then YouTube performs the action as soon as possible. See the Getting started guide for more details.
    // 
    // Important: You should only specify a value for this parameter if your broadcast stream is delayed.
    string offsetTimeMs = 7;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 8;
    // This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.
    // 
    // This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    string onBehalfOfContentOwnerChannel = 9;
    // The part parameter specifies a comma-separated list of one or more liveBroadcast resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, contentDetails, and status.
    string part = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string userIp = 13;
    // The walltime parameter specifies the wall clock time at which the specified slate change will occur. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sssZ) format.
    string walltime = 14;
}

message PostLiveBroadcastsTransitionRequest {
    alt alt = 1;
    // The broadcastStatus parameter identifies the state to which the broadcast is changing. Note that to transition a broadcast to either the testing or live state, the status.streamStatus must be active for the stream that the broadcast is bound to.
    enum PostLiveBroadcastsTransitionRequest_BroadcastStatu {
        POSTLIVEBROADCASTSTRANSITIONREQUEST_BROADCASTSTATU_COMPLETE = 0;
        POSTLIVEBROADCASTSTRANSITIONREQUEST_BROADCASTSTATU_LIVE = 1;
        POSTLIVEBROADCASTSTRANSITIONREQUEST_BROADCASTSTATU_TESTING = 2;
    }
    PostLiveBroadcastsTransitionRequest_BroadcastStatu broadcastStatus = 2;
    string fields = 3;
    // The id parameter specifies the unique ID of the broadcast that is transitioning to another status.
    string id = 4;
    string key = 5;
    string oauth_token = 6;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 7;
    // This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.
    // 
    // This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    string onBehalfOfContentOwnerChannel = 8;
    // The part parameter specifies a comma-separated list of one or more liveBroadcast resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, contentDetails, and status.
    string part = 9;
    boolean prettyPrint = 10;
    string quotaUser = 11;
    string userIp = 12;
}

message PostLiveChatBansRequest {
    alt alt = 1;
    LiveChatBan body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response returns. Set the parameter value to snippet.
    string part = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message DeleteLiveChatBansRequest {
    alt alt = 1;
    string fields = 2;
    // The id parameter identifies the chat ban to remove. The value uniquely identifies both the ban and the chat.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetLiveChatMessagesRequest {
    alt alt = 1;
    string fields = 2;
    // The hl parameter instructs the API to retrieve localized resource metadata for a specific application language that the YouTube website supports. The parameter value must be a language code included in the list returned by the i18nLanguages.list method.
    // 
    // If localized resource details are available in that language, the resource's snippet.localized object will contain the localized values. However, if localized details are not available, the snippet.localized object will contain resource details in the resource's default language.
    string hl = 3;
    string key = 4;
    // The liveChatId parameter specifies the ID of the chat whose messages will be returned.
    string liveChatId = 5;
    // The maxResults parameter specifies the maximum number of messages that should be returned in the result set.
    int32 maxResults = 6;
    string oauth_token = 7;
    // The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken property identify other pages that could be retrieved.
    string pageToken = 8;
    // The part parameter specifies the liveChatComment resource parts that the API response will include. Supported values are id and snippet.
    string part = 9;
    boolean prettyPrint = 10;
    // The profileImageSize parameter specifies the size of the user profile pictures that should be returned in the result set. Default: 88.
    int32 profileImageSize = 11;
    string quotaUser = 12;
    string userIp = 13;
}

message PostLiveChatMessagesRequest {
    alt alt = 1;
    LiveChatMessage body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // The part parameter serves two purposes. It identifies the properties that the write operation will set as well as the properties that the API response will include. Set the parameter value to snippet.
    string part = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message DeleteLiveChatMessagesRequest {
    alt alt = 1;
    string fields = 2;
    // The id parameter specifies the YouTube chat message ID of the resource that is being deleted.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetLiveChatModeratorsRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // The liveChatId parameter specifies the YouTube live chat for which the API should return moderators.
    string liveChatId = 4;
    // The maxResults parameter specifies the maximum number of items that should be returned in the result set.
    int32 maxResults = 5;
    string oauth_token = 6;
    // The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    string pageToken = 7;
    // The part parameter specifies the liveChatModerator resource parts that the API response will include. Supported values are id and snippet.
    string part = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message PostLiveChatModeratorsRequest {
    alt alt = 1;
    LiveChatModerator body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response returns. Set the parameter value to snippet.
    string part = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message DeleteLiveChatModeratorsRequest {
    alt alt = 1;
    string fields = 2;
    // The id parameter identifies the chat moderator to remove. The value uniquely identifies both the moderator and the chat.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetLiveStreamsRequest {
    alt alt = 1;
    string fields = 2;
    // The id parameter specifies a comma-separated list of YouTube stream IDs that identify the streams being retrieved. In a liveStream resource, the id property specifies the stream's ID.
    string id = 3;
    string key = 4;
    // The maxResults parameter specifies the maximum number of items that should be returned in the result set.
    int32 maxResults = 5;
    // The mine parameter can be used to instruct the API to only return streams owned by the authenticated user. Set the parameter value to true to only retrieve your own streams.
    bool mine = 6;
    string oauth_token = 7;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 8;
    // This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.
    // 
    // This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    string onBehalfOfContentOwnerChannel = 9;
    // The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    string pageToken = 10;
    // The part parameter specifies a comma-separated list of one or more liveStream resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, cdn, and status.
    string part = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string userIp = 14;
}

message PutLiveStreamsRequest {
    alt alt = 1;
    LiveStream body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 6;
    // This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.
    // 
    // This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    string onBehalfOfContentOwnerChannel = 7;
    // The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.
    // 
    // The part properties that you can include in the parameter value are id, snippet, cdn, and status.
    // 
    // Note that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. If the request body does not specify a value for a mutable property, the existing value for that property will be removed.
    string part = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message PostLiveStreamsRequest {
    alt alt = 1;
    LiveStream body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 6;
    // This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.
    // 
    // This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    string onBehalfOfContentOwnerChannel = 7;
    // The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.
    // 
    // The part properties that you can include in the parameter value are id, snippet, cdn, and status.
    string part = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message DeleteLiveStreamsRequest {
    alt alt = 1;
    string fields = 2;
    // The id parameter specifies the YouTube live stream ID for the resource that is being deleted.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 6;
    // This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.
    // 
    // This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    string onBehalfOfContentOwnerChannel = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetPlaylistItemsRequest {
    alt alt = 1;
    string fields = 2;
    // The id parameter specifies a comma-separated list of one or more unique playlist item IDs.
    string id = 3;
    string key = 4;
    // The maxResults parameter specifies the maximum number of items that should be returned in the result set.
    int32 maxResults = 5;
    string oauth_token = 6;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 7;
    // The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    string pageToken = 8;
    // The part parameter specifies a comma-separated list of one or more playlistItem resource properties that the API response will include.
    // 
    // If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a playlistItem resource, the snippet property contains numerous fields, including the title, description, position, and resourceId properties. As such, if you set part=snippet, the API response will contain all of those properties.
    string part = 9;
    // The playlistId parameter specifies the unique ID of the playlist for which you want to retrieve playlist items. Note that even though this is an optional parameter, every request to retrieve playlist items must specify a value for either the id parameter or the playlistId parameter.
    string playlistId = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string userIp = 13;
    // The videoId parameter specifies that the request should return only the playlist items that contain the specified video.
    string videoId = 14;
}

message PutPlaylistItemsRequest {
    alt alt = 1;
    PlaylistItem body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 6;
    // The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.
    // 
    // Note that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. For example, a playlist item can specify a start time and end time, which identify the times portion of the video that should play when users watch the video in the playlist. If your request is updating a playlist item that sets these values, and the request's part parameter value includes the contentDetails part, the playlist item's start and end times will be updated to whatever value the request body specifies. If the request body does not specify values, the existing start and end times will be removed and replaced with the default settings.
    string part = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostPlaylistItemsRequest {
    alt alt = 1;
    PlaylistItem body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 6;
    // The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.
    string part = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message DeletePlaylistItemsRequest {
    alt alt = 1;
    string fields = 2;
    // The id parameter specifies the YouTube playlist item ID for the playlist item that is being deleted. In a playlistItem resource, the id property specifies the playlist item's ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetPlaylistsRequest {
    alt alt = 1;
    // This value indicates that the API should only return the specified channel's playlists.
    string channelId = 2;
    string fields = 3;
    // The hl parameter should be used for filter out the properties that are not in the given language. Used for the snippet part.
    string hl = 4;
    // The id parameter specifies a comma-separated list of the YouTube playlist ID(s) for the resource(s) that are being retrieved. In a playlist resource, the id property specifies the playlist's YouTube playlist ID.
    string id = 5;
    string key = 6;
    // The maxResults parameter specifies the maximum number of items that should be returned in the result set.
    int32 maxResults = 7;
    // Set this parameter's value to true to instruct the API to only return playlists owned by the authenticated user.
    bool mine = 8;
    string oauth_token = 9;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 10;
    // This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.
    // 
    // This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    string onBehalfOfContentOwnerChannel = 11;
    // The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    string pageToken = 12;
    // The part parameter specifies a comma-separated list of one or more playlist resource properties that the API response will include.
    // 
    // If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a playlist resource, the snippet property contains properties like author, title, description, tags, and timeCreated. As such, if you set part=snippet, the API response will contain all of those properties.
    string part = 13;
    boolean prettyPrint = 14;
    string quotaUser = 15;
    string userIp = 16;
}

message PutPlaylistsRequest {
    alt alt = 1;
    Playlist body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 6;
    // The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.
    // 
    // Note that this method will override the existing values for mutable properties that are contained in any parts that the request body specifies. For example, a playlist's description is contained in the snippet part, which must be included in the request body. If the request does not specify a value for the snippet.description property, the playlist's existing description will be deleted.
    string part = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostPlaylistsRequest {
    alt alt = 1;
    Playlist body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 6;
    // This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.
    // 
    // This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    string onBehalfOfContentOwnerChannel = 7;
    // The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.
    string part = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message DeletePlaylistsRequest {
    alt alt = 1;
    string fields = 2;
    // The id parameter specifies the YouTube playlist ID for the playlist that is being deleted. In a playlist resource, the id property specifies the playlist's ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetSearchRequest {
    alt alt = 1;
    // The channelId parameter indicates that the API response should only contain resources created by the channel
    string channelId = 2;
    // The channelType parameter lets you restrict a search to a particular type of channel.
    enum GetSearchRequest_ChannelType {
        GETSEARCHREQUEST_CHANNELTYPE_ANY = 0;
        GETSEARCHREQUEST_CHANNELTYPE_SHOW = 1;
    }
    GetSearchRequest_ChannelType channelType = 3;
    // The eventType parameter restricts a search to broadcast events. If you specify a value for this parameter, you must also set the type parameter's value to video.
    enum GetSearchRequest_EventType {
        GETSEARCHREQUEST_EVENTTYPE_COMPLETED = 0;
        GETSEARCHREQUEST_EVENTTYPE_LIVE = 1;
        GETSEARCHREQUEST_EVENTTYPE_UPCOMING = 2;
    }
    GetSearchRequest_EventType eventType = 4;
    string fields = 5;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The forContentOwner parameter restricts the search to only retrieve resources owned by the content owner specified by the onBehalfOfContentOwner parameter. The user must be authenticated using a CMS account linked to the specified content owner and onBehalfOfContentOwner must be provided.
    bool forContentOwner = 6;
    // The forDeveloper parameter restricts the search to only retrieve videos uploaded via the developer's application or website. The API server uses the request's authorization credentials to identify the developer. Therefore, a developer can restrict results to videos uploaded through the developer's own app or website but not to videos uploaded through other apps or sites.
    bool forDeveloper = 7;
    // The forMine parameter restricts the search to only retrieve videos owned by the authenticated user. If you set this parameter to true, then the type parameter's value must also be set to video.
    bool forMine = 8;
    string key = 9;
    // The location parameter, in conjunction with the locationRadius parameter, defines a circular geographic area and also restricts a search to videos that specify, in their metadata, a geographic location that falls within that area. The parameter value is a string that specifies latitude/longitude coordinates e.g. (37.42307,-122.08427).
    // 
    // 
    // - The location parameter value identifies the point at the center of the area.
    // - The locationRadius parameter specifies the maximum distance that the location associated with a video can be from that point for the video to still be included in the search results.The API returns an error if your request specifies a value for the location parameter but does not also specify a value for the locationRadius parameter.
    string location = 10;
    // The locationRadius parameter, in conjunction with the location parameter, defines a circular geographic area.
    // 
    // The parameter value must be a floating point number followed by a measurement unit. Valid measurement units are m, km, ft, and mi. For example, valid parameter values include 1500m, 5km, 10000ft, and 0.75mi. The API does not support locationRadius parameter values larger than 1000 kilometers.
    // 
    // Note: See the definition of the location parameter for more information.
    string locationRadius = 11;
    // The maxResults parameter specifies the maximum number of items that should be returned in the result set.
    int32 maxResults = 12;
    string oauth_token = 13;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 14;
    // The order parameter specifies the method that will be used to order resources in the API response.
    enum GetSearchRequest_Order {
        GETSEARCHREQUEST_ORDER_DATE = 0;
        GETSEARCHREQUEST_ORDER_RATING = 1;
        GETSEARCHREQUEST_ORDER_RELEVANCE = 2;
        GETSEARCHREQUEST_ORDER_TITLE = 3;
        GETSEARCHREQUEST_ORDER_VIDEOCOUNT = 4;
        GETSEARCHREQUEST_ORDER_VIEWCOUNT = 5;
    }
    GetSearchRequest_Order order = 15;
    // The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    string pageToken = 16;
    // The part parameter specifies a comma-separated list of one or more search resource properties that the API response will include. Set the parameter value to snippet.
    string part = 17;
    boolean prettyPrint = 18;
    // The publishedAfter parameter indicates that the API response should only contain resources created after the specified time. The value is an RFC 3339 formatted date-time value (1970-01-01T00:00:00Z).
    string publishedAfter = 19;
    // The publishedBefore parameter indicates that the API response should only contain resources created before the specified time. The value is an RFC 3339 formatted date-time value (1970-01-01T00:00:00Z).
    string publishedBefore = 20;
    // The q parameter specifies the query term to search for.
    // 
    // Your request can also use the Boolean NOT (-) and OR (|) operators to exclude videos or to find videos that are associated with one of several search terms. For example, to search for videos matching either "boating" or "sailing", set the q parameter value to boating|sailing. Similarly, to search for videos matching either "boating" or "sailing" but not "fishing", set the q parameter value to boating|sailing -fishing. Note that the pipe character must be URL-escaped when it is sent in your API request. The URL-escaped value for the pipe character is %7C.
    string q = 21;
    string quotaUser = 22;
    // The regionCode parameter instructs the API to return search results for the specified country. The parameter value is an ISO 3166-1 alpha-2 country code.
    string regionCode = 23;
    // The relatedToVideoId parameter retrieves a list of videos that are related to the video that the parameter value identifies. The parameter value must be set to a YouTube video ID and, if you are using this parameter, the type parameter must be set to video.
    string relatedToVideoId = 24;
    // The relevanceLanguage parameter instructs the API to return search results that are most relevant to the specified language. The parameter value is typically an ISO 639-1 two-letter language code. However, you should use the values zh-Hans for simplified Chinese and zh-Hant for traditional Chinese. Please note that results in other languages will still be returned if they are highly relevant to the search query term.
    string relevanceLanguage = 25;
    // The safeSearch parameter indicates whether the search results should include restricted content as well as standard content.
    enum GetSearchRequest_SafeSearch {
        GETSEARCHREQUEST_SAFESEARCH_MODERATE = 0;
        GETSEARCHREQUEST_SAFESEARCH_NONE = 1;
        GETSEARCHREQUEST_SAFESEARCH_STRICT = 2;
    }
    GetSearchRequest_SafeSearch safeSearch = 26;
    // The topicId parameter indicates that the API response should only contain resources associated with the specified topic. The value identifies a Freebase topic ID.
    string topicId = 27;
    // The type parameter restricts a search query to only retrieve a particular type of resource. The value is a comma-separated list of resource types.
    string type = 28;
    string userIp = 29;
    // The videoCaption parameter indicates whether the API should filter video search results based on whether they have captions. If you specify a value for this parameter, you must also set the type parameter's value to video.
    enum GetSearchRequest_VideoCaption {
        GETSEARCHREQUEST_VIDEOCAPTION_ANY = 0;
        GETSEARCHREQUEST_VIDEOCAPTION_CLOSEDCAPTION = 1;
        GETSEARCHREQUEST_VIDEOCAPTION_NONE = 2;
    }
    GetSearchRequest_VideoCaption videoCaption = 30;
    // The videoCategoryId parameter filters video search results based on their category. If you specify a value for this parameter, you must also set the type parameter's value to video.
    string videoCategoryId = 31;
    // The videoDefinition parameter lets you restrict a search to only include either high definition (HD) or standard definition (SD) videos. HD videos are available for playback in at least 720p, though higher resolutions, like 1080p, might also be available. If you specify a value for this parameter, you must also set the type parameter's value to video.
    enum GetSearchRequest_VideoDefinition {
        GETSEARCHREQUEST_VIDEODEFINITION_ANY = 0;
        GETSEARCHREQUEST_VIDEODEFINITION_HIGH = 1;
        GETSEARCHREQUEST_VIDEODEFINITION_STANDARD = 2;
    }
    GetSearchRequest_VideoDefinition videoDefinition = 32;
    // The videoDimension parameter lets you restrict a search to only retrieve 2D or 3D videos. If you specify a value for this parameter, you must also set the type parameter's value to video.
    enum GetSearchRequest_VideoDimension {
        GETSEARCHREQUEST_VIDEODIMENSION_2D = 0;
        GETSEARCHREQUEST_VIDEODIMENSION_3D = 1;
        GETSEARCHREQUEST_VIDEODIMENSION_ANY = 2;
    }
    GetSearchRequest_VideoDimension videoDimension = 33;
    // The videoDuration parameter filters video search results based on their duration. If you specify a value for this parameter, you must also set the type parameter's value to video.
    enum GetSearchRequest_VideoDuration {
        GETSEARCHREQUEST_VIDEODURATION_ANY = 0;
        GETSEARCHREQUEST_VIDEODURATION_LONG = 1;
        GETSEARCHREQUEST_VIDEODURATION_MEDIUM = 2;
        GETSEARCHREQUEST_VIDEODURATION_SHORT = 3;
    }
    GetSearchRequest_VideoDuration videoDuration = 34;
    // The videoEmbeddable parameter lets you to restrict a search to only videos that can be embedded into a webpage. If you specify a value for this parameter, you must also set the type parameter's value to video.
    enum GetSearchRequest_VideoEmbeddable {
        GETSEARCHREQUEST_VIDEOEMBEDDABLE_ANY = 0;
        GETSEARCHREQUEST_VIDEOEMBEDDABLE_TRUE = 1;
    }
    GetSearchRequest_VideoEmbeddable videoEmbeddable = 35;
    // The videoLicense parameter filters search results to only include videos with a particular license. YouTube lets video uploaders choose to attach either the Creative Commons license or the standard YouTube license to each of their videos. If you specify a value for this parameter, you must also set the type parameter's value to video.
    enum GetSearchRequest_VideoLicense {
        GETSEARCHREQUEST_VIDEOLICENSE_ANY = 0;
        GETSEARCHREQUEST_VIDEOLICENSE_CREATIVECOMMON = 1;
        GETSEARCHREQUEST_VIDEOLICENSE_YOUTUBE = 2;
    }
    GetSearchRequest_VideoLicense videoLicense = 36;
    // The videoSyndicated parameter lets you to restrict a search to only videos that can be played outside youtube.com. If you specify a value for this parameter, you must also set the type parameter's value to video.
    enum GetSearchRequest_VideoSyndicated {
        GETSEARCHREQUEST_VIDEOSYNDICATED_ANY = 0;
        GETSEARCHREQUEST_VIDEOSYNDICATED_TRUE = 1;
    }
    GetSearchRequest_VideoSyndicated videoSyndicated = 37;
    // The videoType parameter lets you restrict a search to a particular type of videos. If you specify a value for this parameter, you must also set the type parameter's value to video.
    enum GetSearchRequest_VideoType {
        GETSEARCHREQUEST_VIDEOTYPE_ANY = 0;
        GETSEARCHREQUEST_VIDEOTYPE_EPISODE = 1;
        GETSEARCHREQUEST_VIDEOTYPE_MOVIE = 2;
    }
    GetSearchRequest_VideoType videoType = 38;
}

message GetSponsorsRequest {
    alt alt = 1;
    string fields = 2;
    // The filter parameter specifies which channel sponsors to return.
    enum GetSponsorsRequest_Filter {
        GETSPONSORSREQUEST_FILTER_ALL = 0;
        GETSPONSORSREQUEST_FILTER_NEWEST = 1;
    }
    GetSponsorsRequest_Filter filter = 3;
    string key = 4;
    // The maxResults parameter specifies the maximum number of items that should be returned in the result set.
    int32 maxResults = 5;
    string oauth_token = 6;
    // The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    string pageToken = 7;
    // The part parameter specifies the sponsor resource parts that the API response will include. Supported values are id and snippet.
    string part = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message GetSubscriptionsRequest {
    alt alt = 1;
    // The channelId parameter specifies a YouTube channel ID. The API will only return that channel's subscriptions.
    string channelId = 2;
    string fields = 3;
    // The forChannelId parameter specifies a comma-separated list of channel IDs. The API response will then only contain subscriptions matching those channels.
    string forChannelId = 4;
    // The id parameter specifies a comma-separated list of the YouTube subscription ID(s) for the resource(s) that are being retrieved. In a subscription resource, the id property specifies the YouTube subscription ID.
    string id = 5;
    string key = 6;
    // The maxResults parameter specifies the maximum number of items that should be returned in the result set.
    int32 maxResults = 7;
    // Set this parameter's value to true to retrieve a feed of the authenticated user's subscriptions.
    bool mine = 8;
    // Set this parameter's value to true to retrieve a feed of the subscribers of the authenticated user in reverse chronological order (newest first).
    bool myRecentSubscribers = 9;
    // Set this parameter's value to true to retrieve a feed of the subscribers of the authenticated user in no particular order.
    bool mySubscribers = 10;
    string oauth_token = 11;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 12;
    // This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.
    // 
    // This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    string onBehalfOfContentOwnerChannel = 13;
    // The order parameter specifies the method that will be used to sort resources in the API response.
    enum GetSubscriptionsRequest_Order {
        GETSUBSCRIPTIONSREQUEST_ORDER_ALPHABETICAL = 0;
        GETSUBSCRIPTIONSREQUEST_ORDER_RELEVANCE = 1;
        GETSUBSCRIPTIONSREQUEST_ORDER_UNREAD = 2;
    }
    GetSubscriptionsRequest_Order order = 14;
    // The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    string pageToken = 15;
    // The part parameter specifies a comma-separated list of one or more subscription resource properties that the API response will include.
    // 
    // If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a subscription resource, the snippet property contains other properties, such as a display title for the subscription. If you set part=snippet, the API response will also contain all of those nested properties.
    string part = 16;
    boolean prettyPrint = 17;
    string quotaUser = 18;
    string userIp = 19;
}

message PostSubscriptionsRequest {
    alt alt = 1;
    Subscription body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.
    string part = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message DeleteSubscriptionsRequest {
    alt alt = 1;
    string fields = 2;
    // The id parameter specifies the YouTube subscription ID for the resource that is being deleted. In a subscription resource, the id property specifies the YouTube subscription ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetSuperChatEventsRequest {
    alt alt = 1;
    string fields = 2;
    // The hl parameter instructs the API to retrieve localized resource metadata for a specific application language that the YouTube website supports. The parameter value must be a language code included in the list returned by the i18nLanguages.list method.
    // 
    // If localized resource details are available in that language, the resource's snippet.localized object will contain the localized values. However, if localized details are not available, the snippet.localized object will contain resource details in the resource's default language.
    string hl = 3;
    string key = 4;
    // The maxResults parameter specifies the maximum number of items that should be returned in the result set.
    int32 maxResults = 5;
    string oauth_token = 6;
    // The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    string pageToken = 7;
    // The part parameter specifies the superChatEvent resource parts that the API response will include. Supported values are id and snippet.
    string part = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message PostThumbnailsSetRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
    // The videoId parameter specifies a YouTube video ID for which the custom video thumbnail is being provided.
    string videoId = 9;
}

message GetVideoAbuseReportReasonsRequest {
    alt alt = 1;
    string fields = 2;
    // The hl parameter specifies the language that should be used for text values in the API response.
    string hl = 3;
    string key = 4;
    string oauth_token = 5;
    // The part parameter specifies the videoCategory resource parts that the API response will include. Supported values are id and snippet.
    string part = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetVideoCategoriesRequest {
    alt alt = 1;
    string fields = 2;
    // The hl parameter specifies the language that should be used for text values in the API response.
    string hl = 3;
    // The id parameter specifies a comma-separated list of video category IDs for the resources that you are retrieving.
    string id = 4;
    string key = 5;
    string oauth_token = 6;
    // The part parameter specifies the videoCategory resource properties that the API response will include. Set the parameter value to snippet.
    string part = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    // The regionCode parameter instructs the API to return the list of video categories available in the specified country. The parameter value is an ISO 3166-1 alpha-2 country code.
    string regionCode = 10;
    string userIp = 11;
}

message GetVideosRequest {
    alt alt = 1;
    // The chart parameter identifies the chart that you want to retrieve.
    enum GetVideosRequest_Chart {
        GETVIDEOSREQUEST_CHART_MOSTPOPULAR = 0;
    }
    GetVideosRequest_Chart chart = 2;
    string fields = 3;
    // The hl parameter instructs the API to retrieve localized resource metadata for a specific application language that the YouTube website supports. The parameter value must be a language code included in the list returned by the i18nLanguages.list method.
    // 
    // If localized resource details are available in that language, the resource's snippet.localized object will contain the localized values. However, if localized details are not available, the snippet.localized object will contain resource details in the resource's default language.
    string hl = 4;
    // The id parameter specifies a comma-separated list of the YouTube video ID(s) for the resource(s) that are being retrieved. In a video resource, the id property specifies the video's ID.
    string id = 5;
    string key = 6;
    // DEPRECATED
    string locale = 7;
    // The maxHeight parameter specifies a maximum height of the embedded player. If maxWidth is provided, maxHeight may not be reached in order to not violate the width request.
    int32 maxHeight = 8;
    // The maxResults parameter specifies the maximum number of items that should be returned in the result set.
    // 
    // Note: This parameter is supported for use in conjunction with the myRating and chart parameters, but it is not supported for use in conjunction with the id parameter.
    int32 maxResults = 9;
    // The maxWidth parameter specifies a maximum width of the embedded player. If maxHeight is provided, maxWidth may not be reached in order to not violate the height request.
    int32 maxWidth = 10;
    // Set this parameter's value to like or dislike to instruct the API to only return videos liked or disliked by the authenticated user.
    enum GetVideosRequest_MyRating {
        GETVIDEOSREQUEST_MYRATING_DISLIKE = 0;
        GETVIDEOSREQUEST_MYRATING_LIKE = 1;
    }
    GetVideosRequest_MyRating myRating = 11;
    string oauth_token = 12;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 13;
    // The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    // 
    // Note: This parameter is supported for use in conjunction with the myRating and chart parameters, but it is not supported for use in conjunction with the id parameter.
    string pageToken = 14;
    // The part parameter specifies a comma-separated list of one or more video resource properties that the API response will include.
    // 
    // If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a video resource, the snippet property contains the channelId, title, description, tags, and categoryId properties. As such, if you set part=snippet, the API response will contain all of those properties.
    string part = 15;
    boolean prettyPrint = 16;
    string quotaUser = 17;
    // The regionCode parameter instructs the API to select a video chart available in the specified region. This parameter can only be used in conjunction with the chart parameter. The parameter value is an ISO 3166-1 alpha-2 country code.
    string regionCode = 18;
    string userIp = 19;
    // The videoCategoryId parameter identifies the video category for which the chart should be retrieved. This parameter can only be used in conjunction with the chart parameter. By default, charts are not restricted to a particular category.
    string videoCategoryId = 20;
}

message PutVideosRequest {
    alt alt = 1;
    Video body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 6;
    // The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.
    // 
    // Note that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. For example, a video's privacy setting is contained in the status part. As such, if your request is updating a private video, and the request's part parameter value includes the status part, the video's privacy setting will be updated to whatever value the request body specifies. If the request body does not specify a value, the existing privacy setting will be removed and the video will revert to the default privacy setting.
    // 
    // In addition, not all parts contain properties that can be set when inserting or updating a video. For example, the statistics object encapsulates statistics that YouTube calculates for a video and does not contain values that you can set or modify. If the parameter value specifies a part that does not contain mutable values, that part will still be included in the API response.
    string part = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostVideosRequest {
    alt alt = 1;
    // The autoLevels parameter indicates whether YouTube should automatically enhance the video's lighting and color.
    bool autoLevels = 2;
    Video body = 3;
    string fields = 4;
    string key = 5;
    // The notifySubscribers parameter indicates whether YouTube should send a notification about the new video to users who subscribe to the video's channel. A parameter value of True indicates that subscribers will be notified of newly uploaded videos. However, a channel owner who is uploading many videos might prefer to set the value to False to avoid sending a notification about each new video to the channel's subscribers.
    bool notifySubscribers = 6;
    string oauth_token = 7;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 8;
    // This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.
    // 
    // This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    string onBehalfOfContentOwnerChannel = 9;
    // The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.
    // 
    // Note that not all parts contain properties that can be set when inserting or updating a video. For example, the statistics object encapsulates statistics that YouTube calculates for a video and does not contain values that you can set or modify. If the parameter value specifies a part that does not contain mutable values, that part will still be included in the API response.
    string part = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // The stabilize parameter indicates whether YouTube should adjust the video to remove shaky camera motions.
    bool stabilize = 13;
    string userIp = 14;
}

message DeleteVideosRequest {
    alt alt = 1;
    string fields = 2;
    // The id parameter specifies the YouTube video ID for the resource that is being deleted. In a video resource, the id property specifies the video's ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetVideosGetRatingRequest {
    alt alt = 1;
    string fields = 2;
    // The id parameter specifies a comma-separated list of the YouTube video ID(s) for the resource(s) for which you are retrieving rating data. In a video resource, the id property specifies the video's ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostVideosRateRequest {
    alt alt = 1;
    string fields = 2;
    // The id parameter specifies the YouTube video ID of the video that is being rated or having its rating removed.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // Specifies the rating to record.
    enum PostVideosRateRequest_Rating {
        POSTVIDEOSRATEREQUEST_RATING_DISLIKE = 0;
        POSTVIDEOSRATEREQUEST_RATING_LIKE = 1;
        POSTVIDEOSRATEREQUEST_RATING_NONE = 2;
    }
    PostVideosRateRequest_Rating rating = 8;
    string userIp = 9;
}

message PostVideosReportAbuseRequest {
    alt alt = 1;
    VideoAbuseReport body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostWatermarksSetRequest {
    alt alt = 1;
    InvideoBranding body = 2;
    // The channelId parameter specifies the YouTube channel ID for which the watermark is being provided.
    string channelId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostWatermarksUnsetRequest {
    alt alt = 1;
    // The channelId parameter specifies the YouTube channel ID for which the watermark is being unset.
    string channelId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // Note: This parameter is intended exclusively for YouTube content partners.
    // 
    // The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    string onBehalfOfContentOwner = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message AccessPolicy {
    // The value of allowed indicates whether the access to the policy is allowed or denied by default.
    bool allowed = 1;
    // A list of region codes that identify countries where the default policy do not apply.
    repeated string exception = 2;
}

message Activity {
    // The contentDetails object contains information about the content associated with the activity. For example, if the snippet.type value is videoRated, then the contentDetails object's content identifies the rated video.
    ActivityContentDetails contentDetails = 1;
    // Etag of this resource.
    string etag = 2;
    // The ID that YouTube uses to uniquely identify the activity.
    string id = 3;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#activity".
    string kind = 4;
    // The snippet object contains basic details about the activity, including the activity's type and group ID.
    ActivitySnippet snippet = 5;
}

message ActivityContentDetails {
    // The bulletin object contains details about a channel bulletin post. This object is only present if the snippet.type is bulletin.
    ActivityContentDetailsBulletin bulletin = 1;
    // The channelItem object contains details about a resource which was added to a channel. This property is only present if the snippet.type is channelItem.
    ActivityContentDetailsChannelItem channelItem = 2;
    // The comment object contains information about a resource that received a comment. This property is only present if the snippet.type is comment.
    ActivityContentDetailsComment comment = 3;
    // The favorite object contains information about a video that was marked as a favorite video. This property is only present if the snippet.type is favorite.
    ActivityContentDetailsFavorite favorite = 4;
    // The like object contains information about a resource that received a positive (like) rating. This property is only present if the snippet.type is like.
    ActivityContentDetailsLike like = 5;
    // The playlistItem object contains information about a new playlist item. This property is only present if the snippet.type is playlistItem.
    ActivityContentDetailsPlaylistItem playlistItem = 6;
    // The promotedItem object contains details about a resource which is being promoted. This property is only present if the snippet.type is promotedItem.
    ActivityContentDetailsPromotedItem promotedItem = 7;
    // The recommendation object contains information about a recommended resource. This property is only present if the snippet.type is recommendation.
    ActivityContentDetailsRecommendation recommendation = 8;
    // The social object contains details about a social network post. This property is only present if the snippet.type is social.
    ActivityContentDetailsSocial social = 9;
    // The subscription object contains information about a channel that a user subscribed to. This property is only present if the snippet.type is subscription.
    ActivityContentDetailsSubscription subscription = 10;
    // The upload object contains information about the uploaded video. This property is only present if the snippet.type is upload.
    ActivityContentDetailsUpload upload = 11;
}

message ActivityContentDetailsBulletin {
    // The resourceId object contains information that identifies the resource associated with a bulletin post.
    ResourceId resourceId = 1;
}

message ActivityContentDetailsChannelItem {
    // The resourceId object contains information that identifies the resource that was added to the channel.
    ResourceId resourceId = 1;
}

message ActivityContentDetailsComment {
    // The resourceId object contains information that identifies the resource associated with the comment.
    ResourceId resourceId = 1;
}

message ActivityContentDetailsFavorite {
    // The resourceId object contains information that identifies the resource that was marked as a favorite.
    ResourceId resourceId = 1;
}

message ActivityContentDetailsLike {
    // The resourceId object contains information that identifies the rated resource.
    ResourceId resourceId = 1;
}

message ActivityContentDetailsPlaylistItem {
    // The value that YouTube uses to uniquely identify the playlist.
    string playlistId = 1;
    // ID of the item within the playlist.
    string playlistItemId = 2;
    // The resourceId object contains information about the resource that was added to the playlist.
    ResourceId resourceId = 3;
}

message ActivityContentDetailsPromotedItem {
    // The URL the client should fetch to request a promoted item.
    string adTag = 1;
    // The URL the client should ping to indicate that the user clicked through on this promoted item.
    string clickTrackingUrl = 2;
    // The URL the client should ping to indicate that the user was shown this promoted item.
    string creativeViewUrl = 3;
    // The type of call-to-action, a message to the user indicating action that can be taken.
    enum ActivityContentDetailsPromotedItem_CtaType {
        ACTIVITYCONTENTDETAILSPROMOTEDITEM_CTATYPE_UNSPECIFIED = 0;
        ACTIVITYCONTENTDETAILSPROMOTEDITEM_CTATYPE_VISITADVERTISERSITE = 1;
    }
    ActivityContentDetailsPromotedItem_CtaType ctaType = 4;
    // The custom call-to-action button text. If specified, it will override the default button text for the cta_type.
    string customCtaButtonText = 5;
    // The text description to accompany the promoted item.
    string descriptionText = 6;
    // The URL the client should direct the user to, if the user chooses to visit the advertiser's website.
    string destinationUrl = 7;
    // The list of forecasting URLs. The client should ping all of these URLs when a promoted item is not available, to indicate that a promoted item could have been shown.
    repeated string forecastingUrl = 8;
    // The list of impression URLs. The client should ping all of these URLs to indicate that the user was shown this promoted item.
    repeated string impressionUrl = 9;
    // The ID that YouTube uses to uniquely identify the promoted video.
    string videoId = 10;
}

message ActivityContentDetailsRecommendation {
    // The reason that the resource is recommended to the user.
    enum ActivityContentDetailsRecommendation_Reason {
        ACTIVITYCONTENTDETAILSRECOMMENDATION_REASON_UNSPECIFIED = 0;
        ACTIVITYCONTENTDETAILSRECOMMENDATION_REASON_VIDEOFAVORITED = 1;
        ACTIVITYCONTENTDETAILSRECOMMENDATION_REASON_VIDEOLIKED = 2;
        ACTIVITYCONTENTDETAILSRECOMMENDATION_REASON_VIDEOWATCHED = 3;
    }
    ActivityContentDetailsRecommendation_Reason reason = 1;
    // The resourceId object contains information that identifies the recommended resource.
    ResourceId resourceId = 2;
    // The seedResourceId object contains information about the resource that caused the recommendation.
    ResourceId seedResourceId = 3;
}

message ActivityContentDetailsSocial {
    // The author of the social network post.
    string author = 1;
    // An image of the post's author.
    string imageUrl = 2;
    // The URL of the social network post.
    string referenceUrl = 3;
    // The resourceId object encapsulates information that identifies the resource associated with a social network post.
    ResourceId resourceId = 4;
    // The name of the social network.
    enum ActivityContentDetailsSocial_Type {
        ACTIVITYCONTENTDETAILSSOCIAL_TYPE_FACEBOOK = 0;
        ACTIVITYCONTENTDETAILSSOCIAL_TYPE_GOOGLEPLUS = 1;
        ACTIVITYCONTENTDETAILSSOCIAL_TYPE_TWITTER = 2;
        ACTIVITYCONTENTDETAILSSOCIAL_TYPE_UNSPECIFIED = 3;
    }
    ActivityContentDetailsSocial_Type type = 5;
}

message ActivityContentDetailsSubscription {
    // The resourceId object contains information that identifies the resource that the user subscribed to.
    ResourceId resourceId = 1;
}

message ActivityContentDetailsUpload {
    // The ID that YouTube uses to uniquely identify the uploaded video.
    string videoId = 1;
}

message ActivityListResponse {
    // Etag of this resource.
    string etag = 1;
    // Serialized EventId of the request which produced this response.
    string eventId = 2;
    // A list of activities, or events, that match the request criteria.
    repeated Activity items = 3;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#activityListResponse".
    string kind = 4;
    // The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
    string nextPageToken = 5;
    PageInfo pageInfo = 6;
    // The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
    string prevPageToken = 7;
    TokenPagination tokenPagination = 8;
    // The visitorId identifies the visitor.
    string visitorId = 9;
}

message ActivitySnippet {
    // The ID that YouTube uses to uniquely identify the channel associated with the activity.
    string channelId = 1;
    // Channel title for the channel responsible for this activity
    string channelTitle = 2;
    // The description of the resource primarily associated with the activity.
    string description = 3;
    // The group ID associated with the activity. A group ID identifies user events that are associated with the same user and resource. For example, if a user rates a video and marks the same video as a favorite, the entries for those events would have the same group ID in the user's activity feed. In your user interface, you can avoid repetition by grouping events with the same groupId value.
    string groupId = 4;
    // The date and time that the video was uploaded. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
    string publishedAt = 5;
    // A map of thumbnail images associated with the resource that is primarily associated with the activity. For each object in the map, the key is the name of the thumbnail image, and the value is an object that contains other information about the thumbnail.
    ThumbnailDetails thumbnails = 6;
    // The title of the resource primarily associated with the activity.
    string title = 7;
    // The type of activity that the resource describes.
    enum ActivitySnippet_Type {
        ACTIVITYSNIPPET_TYPE_BULLETIN = 0;
        ACTIVITYSNIPPET_TYPE_CHANNELITEM = 1;
        ACTIVITYSNIPPET_TYPE_COMMENT = 2;
        ACTIVITYSNIPPET_TYPE_FAVORITE = 3;
        ACTIVITYSNIPPET_TYPE_LIKE = 4;
        ACTIVITYSNIPPET_TYPE_PLAYLISTITEM = 5;
        ACTIVITYSNIPPET_TYPE_PROMOTEDITEM = 6;
        ACTIVITYSNIPPET_TYPE_RECOMMENDATION = 7;
        ACTIVITYSNIPPET_TYPE_SOCIAL = 8;
        ACTIVITYSNIPPET_TYPE_SUBSCRIPTION = 9;
        ACTIVITYSNIPPET_TYPE_UPLOAD = 10;
    }
    ActivitySnippet_Type type = 8;
}

message Caption {
    // Etag of this resource.
    string etag = 1;
    // The ID that YouTube uses to uniquely identify the caption track.
    string id = 2;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#caption".
    string kind = 3;
    // The snippet object contains basic details about the caption.
    CaptionSnippet snippet = 4;
}

message CaptionListResponse {
    // Etag of this resource.
    string etag = 1;
    // Serialized EventId of the request which produced this response.
    string eventId = 2;
    // A list of captions that match the request criteria.
    repeated Caption items = 3;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#captionListResponse".
    string kind = 4;
    // The visitorId identifies the visitor.
    string visitorId = 5;
}

message CaptionSnippet {
    // The type of audio track associated with the caption track.
    enum CaptionSnippet_AudioTrackType {
        CAPTIONSNIPPET_AUDIOTRACKTYPE_COMMENTARY = 0;
        CAPTIONSNIPPET_AUDIOTRACKTYPE_DESCRIPTIVE = 1;
        CAPTIONSNIPPET_AUDIOTRACKTYPE_PRIMARY = 2;
        CAPTIONSNIPPET_AUDIOTRACKTYPE_UNKNOWN = 3;
    }
    CaptionSnippet_AudioTrackType audioTrackType = 1;
    // The reason that YouTube failed to process the caption track. This property is only present if the state property's value is failed.
    enum CaptionSnippet_FailureReason {
        CAPTIONSNIPPET_FAILUREREASON_PROCESSINGFAILED = 0;
        CAPTIONSNIPPET_FAILUREREASON_UNKNOWNFORMAT = 1;
        CAPTIONSNIPPET_FAILUREREASON_UNSUPPORTEDFORMAT = 2;
    }
    CaptionSnippet_FailureReason failureReason = 2;
    // Indicates whether YouTube synchronized the caption track to the audio track in the video. The value will be true if a sync was explicitly requested when the caption track was uploaded. For example, when calling the captions.insert or captions.update methods, you can set the sync parameter to true to instruct YouTube to sync the uploaded track to the video. If the value is false, YouTube uses the time codes in the uploaded caption track to determine when to display captions.
    bool isAutoSynced = 3;
    // Indicates whether the track contains closed captions for the deaf and hard of hearing. The default value is false.
    bool isCC = 4;
    // Indicates whether the caption track is a draft. If the value is true, then the track is not publicly visible. The default value is false.
    bool isDraft = 5;
    // Indicates whether caption track is formatted for "easy reader," meaning it is at a third-grade level for language learners. The default value is false.
    bool isEasyReader = 6;
    // Indicates whether the caption track uses large text for the vision-impaired. The default value is false.
    bool isLarge = 7;
    // The language of the caption track. The property value is a BCP-47 language tag.
    string language = 8;
    // The date and time when the caption track was last updated. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
    string lastUpdated = 9;
    // The name of the caption track. The name is intended to be visible to the user as an option during playback.
    string name = 10;
    // The caption track's status.
    enum CaptionSnippet_Statu {
        CAPTIONSNIPPET_STATU_FAILED = 0;
        CAPTIONSNIPPET_STATU_SERVING = 1;
        CAPTIONSNIPPET_STATU_SYNCING = 2;
    }
    CaptionSnippet_Statu status = 11;
    // The caption track's type.
    enum CaptionSnippet_TrackKind {
        CAPTIONSNIPPET_TRACKKIND_ASR = 0;
        CAPTIONSNIPPET_TRACKKIND_FORCED = 1;
        CAPTIONSNIPPET_TRACKKIND_STANDARD = 2;
    }
    CaptionSnippet_TrackKind trackKind = 12;
    // The ID that YouTube uses to uniquely identify the video associated with the caption track.
    string videoId = 13;
}

message CdnSettings {
    // The format of the video stream that you are sending to Youtube.
    string format = 1;
    // The frame rate of the inbound video data.
    enum CdnSettings_FrameRate {
        CDNSETTINGS_FRAMERATE_30FPS = 0;
        CDNSETTINGS_FRAMERATE_60FPS = 1;
    }
    CdnSettings_FrameRate frameRate = 2;
    // The ingestionInfo object contains information that YouTube provides that you need to transmit your RTMP or HTTP stream to YouTube.
    IngestionInfo ingestionInfo = 3;
    // The method or protocol used to transmit the video stream.
    enum CdnSettings_IngestionType {
        CDNSETTINGS_INGESTIONTYPE_DASH = 0;
        CDNSETTINGS_INGESTIONTYPE_RTMP = 1;
    }
    CdnSettings_IngestionType ingestionType = 4;
    // The resolution of the inbound video data.
    enum CdnSettings_Resolution {
        CDNSETTINGS_RESOLUTION_1080P = 0;
        CDNSETTINGS_RESOLUTION_1440P = 1;
        CDNSETTINGS_RESOLUTION_2160P = 2;
        CDNSETTINGS_RESOLUTION_240P = 3;
        CDNSETTINGS_RESOLUTION_360P = 4;
        CDNSETTINGS_RESOLUTION_480P = 5;
        CDNSETTINGS_RESOLUTION_720P = 6;
    }
    CdnSettings_Resolution resolution = 5;
}

message Channel {
    // The auditionDetails object encapsulates channel data that is relevant for YouTube Partners during the audition process.
    ChannelAuditDetails auditDetails = 1;
    // The brandingSettings object encapsulates information about the branding of the channel.
    ChannelBrandingSettings brandingSettings = 2;
    // The contentDetails object encapsulates information about the channel's content.
    ChannelContentDetails contentDetails = 3;
    // The contentOwnerDetails object encapsulates channel data that is relevant for YouTube Partners linked with the channel.
    ChannelContentOwnerDetails contentOwnerDetails = 4;
    // The conversionPings object encapsulates information about conversion pings that need to be respected by the channel.
    ChannelConversionPings conversionPings = 5;
    // Etag of this resource.
    string etag = 6;
    // The ID that YouTube uses to uniquely identify the channel.
    string id = 7;
    // The invideoPromotion object encapsulates information about promotion campaign associated with the channel.
    InvideoPromotion invideoPromotion = 8;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#channel".
    string kind = 9;
    // Localizations for different languages
    map<string, ChannelLocalization> localizations = 10;
    // The snippet object contains basic details about the channel, such as its title, description, and thumbnail images.
    ChannelSnippet snippet = 11;
    // The statistics object encapsulates statistics for the channel.
    ChannelStatistics statistics = 12;
    // The status object encapsulates information about the privacy status of the channel.
    ChannelStatus status = 13;
    // The topicDetails object encapsulates information about Freebase topics associated with the channel.
    ChannelTopicDetails topicDetails = 14;
}

message ChannelAuditDetails {
    // Whether or not the channel respects the community guidelines.
    bool communityGuidelinesGoodStanding = 1;
    // Whether or not the channel has any unresolved claims.
    bool contentIdClaimsGoodStanding = 2;
    // Whether or not the channel has any copyright strikes.
    bool copyrightStrikesGoodStanding = 3;
    // Describes the general state of the channel. This field will always show if there are any issues whatsoever with the channel. Currently this field represents the result of the logical and operation over the community guidelines good standing, the copyright strikes good standing and the content ID claims good standing, but this may change in the future.
    bool overallGoodStanding = 4;
}

message ChannelBannerResource {
    // Etag of this resource.
    string etag = 1;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#channelBannerResource".
    string kind = 2;
    // The URL of this banner image.
    string url = 3;
}

message ChannelBrandingSettings {
    // Branding properties for the channel view.
    ChannelSettings channel = 1;
    // Additional experimental branding properties.
    repeated PropertyValue hints = 2;
    // Branding properties for branding images.
    ImageSettings image = 3;
    // Branding properties for the watch page.
    WatchSettings watch = 4;
}

message ChannelContentDetails {
    message RelatedPlaylists {
            // The ID of the playlist that contains the channel"s favorite videos. Use the  playlistItems.insert and  playlistItems.delete to add or remove items from that list.
    string favorites = 1;
            // The ID of the playlist that contains the channel"s liked videos. Use the   playlistItems.insert and  playlistItems.delete to add or remove items from that list.
    string likes = 2;
            // The ID of the playlist that contains the channel"s uploaded videos. Use the  videos.insert method to upload new videos and the videos.delete method to delete previously uploaded videos.
    string uploads = 3;
            // The ID of the playlist that contains the channel"s watch history. Use the  playlistItems.insert and  playlistItems.delete to add or remove items from that list.
    string watchHistory = 4;
            // The ID of the playlist that contains the channel"s watch later playlist. Use the playlistItems.insert and  playlistItems.delete to add or remove items from that list.
    string watchLater = 5;
    }
    RelatedPlaylists relatedPlaylists = 1;
}

message ChannelContentOwnerDetails {
    // The ID of the content owner linked to the channel.
    string contentOwner = 1;
    // The date and time of when the channel was linked to the content owner. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
    string timeLinked = 2;
}

message ChannelConversionPing {
    // Defines the context of the ping.
    enum ChannelConversionPing_Context {
        CHANNELCONVERSIONPING_CONTEXT_CVIEW = 0;
        CHANNELCONVERSIONPING_CONTEXT_SUBSCRIBE = 1;
        CHANNELCONVERSIONPING_CONTEXT_UNSUBSCRIBE = 2;
    }
    ChannelConversionPing_Context context = 1;
    // The url (without the schema) that the player shall send the ping to. It's at caller's descretion to decide which schema to use (http vs https) Example of a returned url: //googleads.g.doubleclick.net/pagead/ viewthroughconversion/962985656/?data=path%3DtHe_path%3Btype%3D cview%3Butuid%3DGISQtTNGYqaYl4sKxoVvKA&labe=default The caller must append biscotti authentication (ms param in case of mobile, for example) to this ping.
    string conversionUrl = 2;
}

message ChannelConversionPings {
    // Pings that the app shall fire (authenticated by biscotti cookie). Each ping has a context, in which the app must fire the ping, and a url identifying the ping.
    repeated ChannelConversionPing pings = 1;
}

message ChannelListResponse {
    // Etag of this resource.
    string etag = 1;
    // Serialized EventId of the request which produced this response.
    string eventId = 2;
    // A list of channels that match the request criteria.
    repeated Channel items = 3;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#channelListResponse".
    string kind = 4;
    // The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
    string nextPageToken = 5;
    PageInfo pageInfo = 6;
    // The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
    string prevPageToken = 7;
    TokenPagination tokenPagination = 8;
    // The visitorId identifies the visitor.
    string visitorId = 9;
}

message ChannelLocalization {
    // The localized strings for channel's description.
    string description = 1;
    // The localized strings for channel's title.
    string title = 2;
}

message ChannelProfileDetails {
    // The YouTube channel ID.
    string channelId = 1;
    // The channel's URL.
    string channelUrl = 2;
    // The channel's display name.
    string displayName = 3;
    // The channels's avatar URL.
    string profileImageUrl = 4;
}

message ChannelSection {
    // The contentDetails object contains details about the channel section content, such as a list of playlists or channels featured in the section.
    ChannelSectionContentDetails contentDetails = 1;
    // Etag of this resource.
    string etag = 2;
    // The ID that YouTube uses to uniquely identify the channel section.
    string id = 3;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#channelSection".
    string kind = 4;
    // Localizations for different languages
    map<string, ChannelSectionLocalization> localizations = 5;
    // The snippet object contains basic details about the channel section, such as its type, style and title.
    ChannelSectionSnippet snippet = 6;
    // The targeting object contains basic targeting settings about the channel section.
    ChannelSectionTargeting targeting = 7;
}

message ChannelSectionContentDetails {
    // The channel ids for type multiple_channels.
    repeated string channels = 1;
    // The playlist ids for type single_playlist and multiple_playlists. For singlePlaylist, only one playlistId is allowed.
    repeated string playlists = 2;
}

message ChannelSectionListResponse {
    // Etag of this resource.
    string etag = 1;
    // Serialized EventId of the request which produced this response.
    string eventId = 2;
    // A list of ChannelSections that match the request criteria.
    repeated ChannelSection items = 3;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#channelSectionListResponse".
    string kind = 4;
    // The visitorId identifies the visitor.
    string visitorId = 5;
}

message ChannelSectionLocalization {
    // The localized strings for channel section's title.
    string title = 1;
}

message ChannelSectionSnippet {
    // The ID that YouTube uses to uniquely identify the channel that published the channel section.
    string channelId = 1;
    // The language of the channel section's default title and description.
    string defaultLanguage = 2;
    // Localized title, read-only.
    ChannelSectionLocalization localized = 3;
    // The position of the channel section in the channel.
    uint32 position = 4;
    // The style of the channel section.
    enum ChannelSectionSnippet_Style {
        CHANNELSECTIONSNIPPET_STYLE_CHANNELSECTIONSTYLEUNDEFINED = 0;
        CHANNELSECTIONSNIPPET_STYLE_HORIZONTALROW = 1;
        CHANNELSECTIONSNIPPET_STYLE_VERTICALLIST = 2;
    }
    ChannelSectionSnippet_Style style = 5;
    // The channel section's title for multiple_playlists and multiple_channels.
    string title = 6;
    // The type of the channel section.
    enum ChannelSectionSnippet_Type {
        CHANNELSECTIONSNIPPET_TYPE_ALLPLAYLISTS = 0;
        CHANNELSECTIONSNIPPET_TYPE_CHANNELSECTIONTYPEUNDEFINED = 1;
        CHANNELSECTIONSNIPPET_TYPE_COMPLETEDEVENTS = 2;
        CHANNELSECTIONSNIPPET_TYPE_LIKEDPLAYLISTS = 3;
        CHANNELSECTIONSNIPPET_TYPE_LIKES = 4;
        CHANNELSECTIONSNIPPET_TYPE_LIVEEVENTS = 5;
        CHANNELSECTIONSNIPPET_TYPE_MULTIPLECHANNELS = 6;
        CHANNELSECTIONSNIPPET_TYPE_MULTIPLEPLAYLISTS = 7;
        CHANNELSECTIONSNIPPET_TYPE_POPULARUPLOADS = 8;
        CHANNELSECTIONSNIPPET_TYPE_POSTEDPLAYLISTS = 9;
        CHANNELSECTIONSNIPPET_TYPE_POSTEDVIDEOS = 10;
        CHANNELSECTIONSNIPPET_TYPE_RECENTACTIVITY = 11;
        CHANNELSECTIONSNIPPET_TYPE_RECENTPOSTS = 12;
        CHANNELSECTIONSNIPPET_TYPE_RECENTUPLOADS = 13;
        CHANNELSECTIONSNIPPET_TYPE_SINGLEPLAYLIST = 14;
        CHANNELSECTIONSNIPPET_TYPE_SUBSCRIPTIONS = 15;
        CHANNELSECTIONSNIPPET_TYPE_UPCOMINGEVENTS = 16;
    }
    ChannelSectionSnippet_Type type = 7;
}

message ChannelSectionTargeting {
    // The country the channel section is targeting.
    repeated string countries = 1;
    // The language the channel section is targeting.
    repeated string languages = 2;
    // The region the channel section is targeting.
    repeated string regions = 3;
}

message ChannelSettings {
    // The country of the channel.
    string country = 1;
    string defaultLanguage = 2;
    // Which content tab users should see when viewing the channel.
    string defaultTab = 3;
    // Specifies the channel description.
    string description = 4;
    // Title for the featured channels tab.
    string featuredChannelsTitle = 5;
    // The list of featured channels.
    repeated string featuredChannelsUrls = 6;
    // Lists keywords associated with the channel, comma-separated.
    string keywords = 7;
    // Whether user-submitted comments left on the channel page need to be approved by the channel owner to be publicly visible.
    bool moderateComments = 8;
    // A prominent color that can be rendered on this channel page.
    string profileColor = 9;
    // Whether the tab to browse the videos should be displayed.
    bool showBrowseView = 10;
    // Whether related channels should be proposed.
    bool showRelatedChannels = 11;
    // Specifies the channel title.
    string title = 12;
    // The ID for a Google Analytics account to track and measure traffic to the channels.
    string trackingAnalyticsAccountId = 13;
    // The trailer of the channel, for users that are not subscribers.
    string unsubscribedTrailer = 14;
}

message ChannelSnippet {
    // The country of the channel.
    string country = 1;
    // The custom url of the channel.
    string customUrl = 2;
    // The language of the channel's default title and description.
    string defaultLanguage = 3;
    // The description of the channel.
    string description = 4;
    // Localized title and description, read-only.
    ChannelLocalization localized = 5;
    // The date and time that the channel was created. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
    string publishedAt = 6;
    // A map of thumbnail images associated with the channel. For each object in the map, the key is the name of the thumbnail image, and the value is an object that contains other information about the thumbnail.
    ThumbnailDetails thumbnails = 7;
    // The channel's title.
    string title = 8;
}

message ChannelStatistics {
    // The number of comments for the channel.
    string commentCount = 1;
    // Whether or not the number of subscribers is shown for this user.
    bool hiddenSubscriberCount = 2;
    // The number of subscribers that the channel has.
    string subscriberCount = 3;
    // The number of videos uploaded to the channel.
    string videoCount = 4;
    // The number of times the channel has been viewed.
    string viewCount = 5;
}

message ChannelStatus {
    // If true, then the user is linked to either a YouTube username or G+ account. Otherwise, the user doesn't have a public YouTube identity.
    bool isLinked = 1;
    // The long uploads status of this channel. See
    enum ChannelStatus_LongUploadsStatu {
        CHANNELSTATUS_LONGUPLOADSSTATU_ALLOWED = 0;
        CHANNELSTATUS_LONGUPLOADSSTATU_DISALLOWED = 1;
        CHANNELSTATUS_LONGUPLOADSSTATU_ELIGIBLE = 2;
        CHANNELSTATUS_LONGUPLOADSSTATU_LONGUPLOADSUNSPECIFIED = 3;
    }
    ChannelStatus_LongUploadsStatu longUploadsStatus = 2;
    // Privacy status of the channel.
    enum ChannelStatus_PrivacyStatu {
        CHANNELSTATUS_PRIVACYSTATU_PRIVATE = 0;
        CHANNELSTATUS_PRIVACYSTATU_PUBLIC = 1;
        CHANNELSTATUS_PRIVACYSTATU_UNLISTED = 2;
    }
    ChannelStatus_PrivacyStatu privacyStatus = 3;
}

message ChannelTopicDetails {
    // A list of Wikipedia URLs that describe the channel's content.
    repeated string topicCategories = 1;
    // A list of Freebase topic IDs associated with the channel. You can retrieve information about each topic using the Freebase Topic API.
    repeated string topicIds = 2;
}

message Comment {
    // Etag of this resource.
    string etag = 1;
    // The ID that YouTube uses to uniquely identify the comment.
    string id = 2;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#comment".
    string kind = 3;
    // The snippet object contains basic details about the comment.
    CommentSnippet snippet = 4;
}

message CommentListResponse {
    // Etag of this resource.
    string etag = 1;
    // Serialized EventId of the request which produced this response.
    string eventId = 2;
    // A list of comments that match the request criteria.
    repeated Comment items = 3;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#commentListResponse".
    string kind = 4;
    // The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
    string nextPageToken = 5;
    PageInfo pageInfo = 6;
    TokenPagination tokenPagination = 7;
    // The visitorId identifies the visitor.
    string visitorId = 8;
}

message CommentSnippet {
    // The id of the author's YouTube channel, if any.
    ;
    // Link to the author's YouTube channel, if any.
    string authorChannelUrl = 2;
    // The name of the user who posted the comment.
    string authorDisplayName = 3;
    // The URL for the avatar of the user who posted the comment.
    string authorProfileImageUrl = 4;
    // Whether the current viewer can rate this comment.
    bool canRate = 5;
    // The id of the corresponding YouTube channel. In case of a channel comment this is the channel the comment refers to. In case of a video comment it's the video's channel.
    string channelId = 6;
    // The total number of likes this comment has received.
    uint32 likeCount = 7;
    // The comment's moderation status. Will not be set if the comments were requested through the id filter.
    enum CommentSnippet_ModerationStatu {
        COMMENTSNIPPET_MODERATIONSTATU_HELDFORREVIEW = 0;
        COMMENTSNIPPET_MODERATIONSTATU_LIKELYSPAM = 1;
        COMMENTSNIPPET_MODERATIONSTATU_PUBLISHED = 2;
        COMMENTSNIPPET_MODERATIONSTATU_REJECTED = 3;
    }
    CommentSnippet_ModerationStatu moderationStatus = 8;
    // The unique id of the parent comment, only set for replies.
    string parentId = 9;
    // The date and time when the comment was orignally published. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
    string publishedAt = 10;
    // The comment's text. The format is either plain text or HTML dependent on what has been requested. Even the plain text representation may differ from the text originally posted in that it may replace video links with video titles etc.
    string textDisplay = 11;
    // The comment's original raw text as initially posted or last updated. The original text will only be returned if it is accessible to the viewer, which is only guaranteed if the viewer is the comment's author.
    string textOriginal = 12;
    // The date and time when was last updated . The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
    string updatedAt = 13;
    // The ID of the video the comment refers to, if any.
    string videoId = 14;
    // The rating the viewer has given to this comment. For the time being this will never return RATE_TYPE_DISLIKE and instead return RATE_TYPE_NONE. This may change in the future.
    enum CommentSnippet_ViewerRating {
        COMMENTSNIPPET_VIEWERRATING_DISLIKE = 0;
        COMMENTSNIPPET_VIEWERRATING_LIKE = 1;
        COMMENTSNIPPET_VIEWERRATING_NONE = 2;
        COMMENTSNIPPET_VIEWERRATING_UNSPECIFIED = 3;
    }
    CommentSnippet_ViewerRating viewerRating = 15;
}

message CommentThread {
    // Etag of this resource.
    string etag = 1;
    // The ID that YouTube uses to uniquely identify the comment thread.
    string id = 2;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#commentThread".
    string kind = 3;
    // The replies object contains a limited number of replies (if any) to the top level comment found in the snippet.
    CommentThreadReplies replies = 4;
    // The snippet object contains basic details about the comment thread and also the top level comment.
    CommentThreadSnippet snippet = 5;
}

message CommentThreadListResponse {
    // Etag of this resource.
    string etag = 1;
    // Serialized EventId of the request which produced this response.
    string eventId = 2;
    // A list of comment threads that match the request criteria.
    repeated CommentThread items = 3;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#commentThreadListResponse".
    string kind = 4;
    // The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
    string nextPageToken = 5;
    PageInfo pageInfo = 6;
    TokenPagination tokenPagination = 7;
    // The visitorId identifies the visitor.
    string visitorId = 8;
}

message CommentThreadReplies {
    // A limited number of replies. Unless the number of replies returned equals total_reply_count in the snippet the returned replies are only a subset of the total number of replies.
    repeated Comment comments = 1;
}

message CommentThreadSnippet {
    // Whether the current viewer of the thread can reply to it. This is viewer specific - other viewers may see a different value for this field.
    bool canReply = 1;
    // The YouTube channel the comments in the thread refer to or the channel with the video the comments refer to. If video_id isn't set the comments refer to the channel itself.
    string channelId = 2;
    // Whether the thread (and therefore all its comments) is visible to all YouTube users.
    bool isPublic = 3;
    // The top level comment of this thread.
    Comment topLevelComment = 4;
    // The total number of replies (not including the top level comment).
    uint32 totalReplyCount = 5;
    // The ID of the video the comments refer to, if any. No video_id implies a channel discussion comment.
    string videoId = 6;
}

message ContentRating {
    // The video's Australian Classification Board (ACB) or Australian Communications and Media Authority (ACMA) rating. ACMA ratings are used to classify children's television programming.
    enum ContentRating_AcbRating {
        CONTENTRATING_ACBRATING_ACBC = 0;
        CONTENTRATING_ACBRATING_ACBE = 1;
        CONTENTRATING_ACBRATING_ACBG = 2;
        CONTENTRATING_ACBRATING_ACBM = 3;
        CONTENTRATING_ACBRATING_ACBMA15PLUS = 4;
        CONTENTRATING_ACBRATING_ACBP = 5;
        CONTENTRATING_ACBRATING_ACBPG = 6;
        CONTENTRATING_ACBRATING_ACBR18PLUS = 7;
        CONTENTRATING_ACBRATING_ACBUNRATED = 8;
    }
    ContentRating_AcbRating acbRating = 1;
    // The video's rating from Italy's Autorità per le Garanzie nelle Comunicazioni (AGCOM).
    enum ContentRating_AgcomRating {
        CONTENTRATING_AGCOMRATING_AGCOMT = 0;
        CONTENTRATING_AGCOMRATING_AGCOMUNRATED = 1;
        CONTENTRATING_AGCOMRATING_AGCOMVM14 = 2;
        CONTENTRATING_AGCOMRATING_AGCOMVM18 = 3;
    }
    ContentRating_AgcomRating agcomRating = 2;
    // The video's Anatel (Asociación Nacional de Televisión) rating for Chilean television.
    enum ContentRating_AnatelRating {
        CONTENTRATING_ANATELRATING_ANATELA = 0;
        CONTENTRATING_ANATELRATING_ANATELF = 1;
        CONTENTRATING_ANATELRATING_ANATELI = 2;
        CONTENTRATING_ANATELRATING_ANATELI10 = 3;
        CONTENTRATING_ANATELRATING_ANATELI12 = 4;
        CONTENTRATING_ANATELRATING_ANATELI7 = 5;
        CONTENTRATING_ANATELRATING_ANATELR = 6;
        CONTENTRATING_ANATELRATING_ANATELUNRATED = 7;
    }
    ContentRating_AnatelRating anatelRating = 3;
    // The video's British Board of Film Classification (BBFC) rating.
    enum ContentRating_BbfcRating {
        CONTENTRATING_BBFCRATING_BBFC12 = 0;
        CONTENTRATING_BBFCRATING_BBFC12A = 1;
        CONTENTRATING_BBFCRATING_BBFC15 = 2;
        CONTENTRATING_BBFCRATING_BBFC18 = 3;
        CONTENTRATING_BBFCRATING_BBFCPG = 4;
        CONTENTRATING_BBFCRATING_BBFCR18 = 5;
        CONTENTRATING_BBFCRATING_BBFCU = 6;
        CONTENTRATING_BBFCRATING_BBFCUNRATED = 7;
    }
    ContentRating_BbfcRating bbfcRating = 4;
    // The video's rating from Thailand's Board of Film and Video Censors.
    enum ContentRating_BfvcRating {
        CONTENTRATING_BFVCRATING_BFVC13 = 0;
        CONTENTRATING_BFVCRATING_BFVC15 = 1;
        CONTENTRATING_BFVCRATING_BFVC18 = 2;
        CONTENTRATING_BFVCRATING_BFVC20 = 3;
        CONTENTRATING_BFVCRATING_BFVCB = 4;
        CONTENTRATING_BFVCRATING_BFVCE = 5;
        CONTENTRATING_BFVCRATING_BFVCG = 6;
        CONTENTRATING_BFVCRATING_BFVCUNRATED = 7;
    }
    ContentRating_BfvcRating bfvcRating = 5;
    // The video's rating from the Austrian Board of Media Classification (Bundesministerium für Unterricht, Kunst und Kultur).
    enum ContentRating_BmukkRating {
        CONTENTRATING_BMUKKRATING_BMUKK10 = 0;
        CONTENTRATING_BMUKKRATING_BMUKK12 = 1;
        CONTENTRATING_BMUKKRATING_BMUKK14 = 2;
        CONTENTRATING_BMUKKRATING_BMUKK16 = 3;
        CONTENTRATING_BMUKKRATING_BMUKK6 = 4;
        CONTENTRATING_BMUKKRATING_BMUKK8 = 5;
        CONTENTRATING_BMUKKRATING_BMUKKAA = 6;
        CONTENTRATING_BMUKKRATING_BMUKKUNRATED = 7;
    }
    ContentRating_BmukkRating bmukkRating = 6;
    // Rating system for Canadian TV - Canadian TV Classification System The video's rating from the Canadian Radio-Television and Telecommunications Commission (CRTC) for Canadian English-language broadcasts. For more information, see the Canadian Broadcast Standards Council website.
    enum ContentRating_CatvRating {
        CONTENTRATING_CATVRATING_CATV14PLUS = 0;
        CONTENTRATING_CATVRATING_CATV18PLUS = 1;
        CONTENTRATING_CATVRATING_CATVC = 2;
        CONTENTRATING_CATVRATING_CATVC8 = 3;
        CONTENTRATING_CATVRATING_CATVG = 4;
        CONTENTRATING_CATVRATING_CATVPG = 5;
        CONTENTRATING_CATVRATING_CATVUNRATED = 6;
    }
    ContentRating_CatvRating catvRating = 7;
    // The video's rating from the Canadian Radio-Television and Telecommunications Commission (CRTC) for Canadian French-language broadcasts. For more information, see the Canadian Broadcast Standards Council website.
    enum ContentRating_CatvfrRating {
        CONTENTRATING_CATVFRRATING_CATVFR13PLUS = 0;
        CONTENTRATING_CATVFRRATING_CATVFR16PLUS = 1;
        CONTENTRATING_CATVFRRATING_CATVFR18PLUS = 2;
        CONTENTRATING_CATVFRRATING_CATVFR8PLUS = 3;
        CONTENTRATING_CATVFRRATING_CATVFRG = 4;
        CONTENTRATING_CATVFRRATING_CATVFRUNRATED = 5;
    }
    ContentRating_CatvfrRating catvfrRating = 8;
    // The video's Central Board of Film Certification (CBFC - India) rating.
    enum ContentRating_CbfcRating {
        CONTENTRATING_CBFCRATING_CBFCA = 0;
        CONTENTRATING_CBFCRATING_CBFCS = 1;
        CONTENTRATING_CBFCRATING_CBFCU = 2;
        CONTENTRATING_CBFCRATING_CBFCUA = 3;
        CONTENTRATING_CBFCRATING_CBFCUNRATED = 4;
    }
    ContentRating_CbfcRating cbfcRating = 9;
    // The video's Consejo de Calificación Cinematográfica (Chile) rating.
    enum ContentRating_CccRating {
        CONTENTRATING_CCCRATING_CCC14 = 0;
        CONTENTRATING_CCCRATING_CCC18 = 1;
        CONTENTRATING_CCCRATING_CCC18S = 2;
        CONTENTRATING_CCCRATING_CCC18V = 3;
        CONTENTRATING_CCCRATING_CCC6 = 4;
        CONTENTRATING_CCCRATING_CCCTE = 5;
        CONTENTRATING_CCCRATING_CCCUNRATED = 6;
    }
    ContentRating_CccRating cccRating = 10;
    // The video's rating from Portugal's Comissão de Classificação de Espect´culos.
    enum ContentRating_CceRating {
        CONTENTRATING_CCERATING_CCEM12 = 0;
        CONTENTRATING_CCERATING_CCEM14 = 1;
        CONTENTRATING_CCERATING_CCEM16 = 2;
        CONTENTRATING_CCERATING_CCEM18 = 3;
        CONTENTRATING_CCERATING_CCEM4 = 4;
        CONTENTRATING_CCERATING_CCEM6 = 5;
        CONTENTRATING_CCERATING_CCEUNRATED = 6;
    }
    ContentRating_CceRating cceRating = 11;
    // The video's rating in Switzerland.
    enum ContentRating_ChfilmRating {
        CONTENTRATING_CHFILMRATING_CHFILM0 = 0;
        CONTENTRATING_CHFILMRATING_CHFILM12 = 1;
        CONTENTRATING_CHFILMRATING_CHFILM16 = 2;
        CONTENTRATING_CHFILMRATING_CHFILM18 = 3;
        CONTENTRATING_CHFILMRATING_CHFILM6 = 4;
        CONTENTRATING_CHFILMRATING_CHFILMUNRATED = 5;
    }
    ContentRating_ChfilmRating chfilmRating = 12;
    // The video's Canadian Home Video Rating System (CHVRS) rating.
    enum ContentRating_ChvrsRating {
        CONTENTRATING_CHVRSRATING_CHVRS14A = 0;
        CONTENTRATING_CHVRSRATING_CHVRS18A = 1;
        CONTENTRATING_CHVRSRATING_CHVRSE = 2;
        CONTENTRATING_CHVRSRATING_CHVRSG = 3;
        CONTENTRATING_CHVRSRATING_CHVRSPG = 4;
        CONTENTRATING_CHVRSRATING_CHVRSR = 5;
        CONTENTRATING_CHVRSRATING_CHVRSUNRATED = 6;
    }
    ContentRating_ChvrsRating chvrsRating = 13;
    // The video's rating from the Commission de Contrôle des Films (Belgium).
    enum ContentRating_CicfRating {
        CONTENTRATING_CICFRATING_CICFE = 0;
        CONTENTRATING_CICFRATING_CICFKNTENA = 1;
        CONTENTRATING_CICFRATING_CICFKTEA = 2;
        CONTENTRATING_CICFRATING_CICFUNRATED = 3;
    }
    ContentRating_CicfRating cicfRating = 14;
    // The video's rating from Romania's CONSILIUL NATIONAL AL AUDIOVIZUALULUI (CNA).
    enum ContentRating_CnaRating {
        CONTENTRATING_CNARATING_CNA12 = 0;
        CONTENTRATING_CNARATING_CNA15 = 1;
        CONTENTRATING_CNARATING_CNA18 = 2;
        CONTENTRATING_CNARATING_CNA18PLUS = 3;
        CONTENTRATING_CNARATING_CNAAP = 4;
        CONTENTRATING_CNARATING_CNAUNRATED = 5;
    }
    ContentRating_CnaRating cnaRating = 15;
    // Rating system in France - Commission de classification cinematographique
    enum ContentRating_CncRating {
        CONTENTRATING_CNCRATING_CNC10 = 0;
        CONTENTRATING_CNCRATING_CNC12 = 1;
        CONTENTRATING_CNCRATING_CNC16 = 2;
        CONTENTRATING_CNCRATING_CNC18 = 3;
        CONTENTRATING_CNCRATING_CNCE = 4;
        CONTENTRATING_CNCRATING_CNCT = 5;
        CONTENTRATING_CNCRATING_CNCUNRATED = 6;
    }
    ContentRating_CncRating cncRating = 16;
    // The video's rating from France's Conseil supérieur de l?audiovisuel, which rates broadcast content.
    enum ContentRating_CsaRating {
        CONTENTRATING_CSARATING_CSA10 = 0;
        CONTENTRATING_CSARATING_CSA12 = 1;
        CONTENTRATING_CSARATING_CSA16 = 2;
        CONTENTRATING_CSARATING_CSA18 = 3;
        CONTENTRATING_CSARATING_CSAINTERDICTION = 4;
        CONTENTRATING_CSARATING_CSAT = 5;
        CONTENTRATING_CSARATING_CSAUNRATED = 6;
    }
    ContentRating_CsaRating csaRating = 17;
    // The video's rating from Luxembourg's Commission de surveillance de la classification des films (CSCF).
    enum ContentRating_CscfRating {
        CONTENTRATING_CSCFRATING_CSCF12 = 0;
        CONTENTRATING_CSCFRATING_CSCF16 = 1;
        CONTENTRATING_CSCFRATING_CSCF18 = 2;
        CONTENTRATING_CSCFRATING_CSCF6 = 3;
        CONTENTRATING_CSCFRATING_CSCF9 = 4;
        CONTENTRATING_CSCFRATING_CSCFA = 5;
        CONTENTRATING_CSCFRATING_CSCFAL = 6;
        CONTENTRATING_CSCFRATING_CSCFUNRATED = 7;
    }
    ContentRating_CscfRating cscfRating = 18;
    // The video's rating in the Czech Republic.
    enum ContentRating_CzfilmRating {
        CONTENTRATING_CZFILMRATING_CZFILM12 = 0;
        CONTENTRATING_CZFILMRATING_CZFILM14 = 1;
        CONTENTRATING_CZFILMRATING_CZFILM18 = 2;
        CONTENTRATING_CZFILMRATING_CZFILMU = 3;
        CONTENTRATING_CZFILMRATING_CZFILMUNRATED = 4;
    }
    ContentRating_CzfilmRating czfilmRating = 19;
    // The video's Departamento de Justiça, Classificação, Qualificação e Títulos (DJCQT - Brazil) rating.
    enum ContentRating_DjctqRating {
        CONTENTRATING_DJCTQRATING_DJCTQ10 = 0;
        CONTENTRATING_DJCTQRATING_DJCTQ12 = 1;
        CONTENTRATING_DJCTQRATING_DJCTQ14 = 2;
        CONTENTRATING_DJCTQRATING_DJCTQ16 = 3;
        CONTENTRATING_DJCTQRATING_DJCTQ18 = 4;
        CONTENTRATING_DJCTQRATING_DJCTQL = 5;
        CONTENTRATING_DJCTQRATING_DJCTQUNRATED = 6;
    }
    ContentRating_DjctqRating djctqRating = 20;
    // Reasons that explain why the video received its DJCQT (Brazil) rating.
    repeated string djctqRatingReasons = 21;
    // Rating system in Turkey - Evaluation and Classification Board of the Ministry of Culture and Tourism
    enum ContentRating_EcbmctRating {
        CONTENTRATING_ECBMCTRATING_ECBMCT13A = 0;
        CONTENTRATING_ECBMCTRATING_ECBMCT13PLUS = 1;
        CONTENTRATING_ECBMCTRATING_ECBMCT15A = 2;
        CONTENTRATING_ECBMCTRATING_ECBMCT15PLUS = 3;
        CONTENTRATING_ECBMCTRATING_ECBMCT18PLUS = 4;
        CONTENTRATING_ECBMCTRATING_ECBMCT7A = 5;
        CONTENTRATING_ECBMCTRATING_ECBMCT7PLUS = 6;
        CONTENTRATING_ECBMCTRATING_ECBMCTG = 7;
        CONTENTRATING_ECBMCTRATING_ECBMCTUNRATED = 8;
    }
    ContentRating_EcbmctRating ecbmctRating = 22;
    // The video's rating in Estonia.
    enum ContentRating_EefilmRating {
        CONTENTRATING_EEFILMRATING_EEFILMK12 = 0;
        CONTENTRATING_EEFILMRATING_EEFILMK14 = 1;
        CONTENTRATING_EEFILMRATING_EEFILMK16 = 2;
        CONTENTRATING_EEFILMRATING_EEFILMK6 = 3;
        CONTENTRATING_EEFILMRATING_EEFILML = 4;
        CONTENTRATING_EEFILMRATING_EEFILMMS12 = 5;
        CONTENTRATING_EEFILMRATING_EEFILMMS6 = 6;
        CONTENTRATING_EEFILMRATING_EEFILMPERE = 7;
        CONTENTRATING_EEFILMRATING_EEFILMUNRATED = 8;
    }
    ContentRating_EefilmRating eefilmRating = 23;
    // The video's rating in Egypt.
    enum ContentRating_EgfilmRating {
        CONTENTRATING_EGFILMRATING_EGFILM18 = 0;
        CONTENTRATING_EGFILMRATING_EGFILMBN = 1;
        CONTENTRATING_EGFILMRATING_EGFILMGN = 2;
        CONTENTRATING_EGFILMRATING_EGFILMUNRATED = 3;
    }
    ContentRating_EgfilmRating egfilmRating = 24;
    // The video's Eirin (映倫) rating. Eirin is the Japanese rating system.
    enum ContentRating_EirinRating {
        CONTENTRATING_EIRINRATING_EIRING = 0;
        CONTENTRATING_EIRINRATING_EIRINPG12 = 1;
        CONTENTRATING_EIRINRATING_EIRINR15PLUS = 2;
        CONTENTRATING_EIRINRATING_EIRINR18PLUS = 3;
        CONTENTRATING_EIRINRATING_EIRINUNRATED = 4;
    }
    ContentRating_EirinRating eirinRating = 25;
    // The video's rating from Malaysia's Film Censorship Board.
    enum ContentRating_FcbmRating {
        CONTENTRATING_FCBMRATING_FCBM18 = 0;
        CONTENTRATING_FCBMRATING_FCBM18PA = 1;
        CONTENTRATING_FCBMRATING_FCBM18PL = 2;
        CONTENTRATING_FCBMRATING_FCBM18SG = 3;
        CONTENTRATING_FCBMRATING_FCBM18SX = 4;
        CONTENTRATING_FCBMRATING_FCBMP13 = 5;
        CONTENTRATING_FCBMRATING_FCBMPG13 = 6;
        CONTENTRATING_FCBMRATING_FCBMU = 7;
        CONTENTRATING_FCBMRATING_FCBMUNRATED = 8;
    }
    ContentRating_FcbmRating fcbmRating = 26;
    // The video's rating from Hong Kong's Office for Film, Newspaper and Article Administration.
    enum ContentRating_FcoRating {
        CONTENTRATING_FCORATING_FCOI = 0;
        CONTENTRATING_FCORATING_FCOII = 1;
        CONTENTRATING_FCORATING_FCOIIA = 2;
        CONTENTRATING_FCORATING_FCOIIB = 3;
        CONTENTRATING_FCORATING_FCOIII = 4;
        CONTENTRATING_FCORATING_FCOUNRATED = 5;
    }
    ContentRating_FcoRating fcoRating = 27;
    // This property has been deprecated. Use the contentDetails.contentRating.cncRating instead.
    enum ContentRating_FmocRating {
        CONTENTRATING_FMOCRATING_FMOC10 = 0;
        CONTENTRATING_FMOCRATING_FMOC12 = 1;
        CONTENTRATING_FMOCRATING_FMOC16 = 2;
        CONTENTRATING_FMOCRATING_FMOC18 = 3;
        CONTENTRATING_FMOCRATING_FMOCE = 4;
        CONTENTRATING_FMOCRATING_FMOCU = 5;
        CONTENTRATING_FMOCRATING_FMOCUNRATED = 6;
    }
    ContentRating_FmocRating fmocRating = 28;
    // The video's rating from South Africa's Film and Publication Board.
    enum ContentRating_FpbRating {
        CONTENTRATING_FPBRATING_FPB10 = 0;
        CONTENTRATING_FPBRATING_FPB1012PG = 1;
        CONTENTRATING_FPBRATING_FPB13 = 2;
        CONTENTRATING_FPBRATING_FPB16 = 3;
        CONTENTRATING_FPBRATING_FPB18 = 4;
        CONTENTRATING_FPBRATING_FPB79PG = 5;
        CONTENTRATING_FPBRATING_FPBA = 6;
        CONTENTRATING_FPBRATING_FPBPG = 7;
        CONTENTRATING_FPBRATING_FPBUNRATED = 8;
        CONTENTRATING_FPBRATING_FPBX18 = 9;
        CONTENTRATING_FPBRATING_FPBXX = 10;
    }
    ContentRating_FpbRating fpbRating = 29;
    // Reasons that explain why the video received its FPB (South Africa) rating.
    repeated string fpbRatingReasons = 30;
    // The video's Freiwillige Selbstkontrolle der Filmwirtschaft (FSK - Germany) rating.
    enum ContentRating_FskRating {
        CONTENTRATING_FSKRATING_FSK0 = 0;
        CONTENTRATING_FSKRATING_FSK12 = 1;
        CONTENTRATING_FSKRATING_FSK16 = 2;
        CONTENTRATING_FSKRATING_FSK18 = 3;
        CONTENTRATING_FSKRATING_FSK6 = 4;
        CONTENTRATING_FSKRATING_FSKUNRATED = 5;
    }
    ContentRating_FskRating fskRating = 31;
    // The video's rating in Greece.
    enum ContentRating_GrfilmRating {
        CONTENTRATING_GRFILMRATING_GRFILME = 0;
        CONTENTRATING_GRFILMRATING_GRFILMK = 1;
        CONTENTRATING_GRFILMRATING_GRFILMK12 = 2;
        CONTENTRATING_GRFILMRATING_GRFILMK13 = 3;
        CONTENTRATING_GRFILMRATING_GRFILMK15 = 4;
        CONTENTRATING_GRFILMRATING_GRFILMK17 = 5;
        CONTENTRATING_GRFILMRATING_GRFILMK18 = 6;
        CONTENTRATING_GRFILMRATING_GRFILMUNRATED = 7;
    }
    ContentRating_GrfilmRating grfilmRating = 32;
    // The video's Instituto de la Cinematografía y de las Artes Audiovisuales (ICAA - Spain) rating.
    enum ContentRating_IcaaRating {
        CONTENTRATING_ICAARATING_ICAA12 = 0;
        CONTENTRATING_ICAARATING_ICAA13 = 1;
        CONTENTRATING_ICAARATING_ICAA16 = 2;
        CONTENTRATING_ICAARATING_ICAA18 = 3;
        CONTENTRATING_ICAARATING_ICAA7 = 4;
        CONTENTRATING_ICAARATING_ICAAAPTA = 5;
        CONTENTRATING_ICAARATING_ICAAUNRATED = 6;
        CONTENTRATING_ICAARATING_ICAAX = 7;
    }
    ContentRating_IcaaRating icaaRating = 33;
    // The video's Irish Film Classification Office (IFCO - Ireland) rating. See the IFCO website for more information.
    enum ContentRating_IfcoRating {
        CONTENTRATING_IFCORATING_IFCO12 = 0;
        CONTENTRATING_IFCORATING_IFCO12A = 1;
        CONTENTRATING_IFCORATING_IFCO15 = 2;
        CONTENTRATING_IFCORATING_IFCO15A = 3;
        CONTENTRATING_IFCORATING_IFCO16 = 4;
        CONTENTRATING_IFCORATING_IFCO18 = 5;
        CONTENTRATING_IFCORATING_IFCOG = 6;
        CONTENTRATING_IFCORATING_IFCOPG = 7;
        CONTENTRATING_IFCORATING_IFCOUNRATED = 8;
    }
    ContentRating_IfcoRating ifcoRating = 34;
    // The video's rating in Israel.
    enum ContentRating_IlfilmRating {
        CONTENTRATING_ILFILMRATING_ILFILM12 = 0;
        CONTENTRATING_ILFILMRATING_ILFILM16 = 1;
        CONTENTRATING_ILFILMRATING_ILFILM18 = 2;
        CONTENTRATING_ILFILMRATING_ILFILMAA = 3;
        CONTENTRATING_ILFILMRATING_ILFILMUNRATED = 4;
    }
    ContentRating_IlfilmRating ilfilmRating = 35;
    // The video's INCAA (Instituto Nacional de Cine y Artes Audiovisuales - Argentina) rating.
    enum ContentRating_IncaaRating {
        CONTENTRATING_INCAARATING_INCAAATP = 0;
        CONTENTRATING_INCAARATING_INCAAC = 1;
        CONTENTRATING_INCAARATING_INCAASAM13 = 2;
        CONTENTRATING_INCAARATING_INCAASAM16 = 3;
        CONTENTRATING_INCAARATING_INCAASAM18 = 4;
        CONTENTRATING_INCAARATING_INCAAUNRATED = 5;
    }
    ContentRating_IncaaRating incaaRating = 36;
    // The video's rating from the Kenya Film Classification Board.
    enum ContentRating_KfcbRating {
        CONTENTRATING_KFCBRATING_KFCB16PLUS = 0;
        CONTENTRATING_KFCBRATING_KFCBG = 1;
        CONTENTRATING_KFCBRATING_KFCBPG = 2;
        CONTENTRATING_KFCBRATING_KFCBR = 3;
        CONTENTRATING_KFCBRATING_KFCBUNRATED = 4;
    }
    ContentRating_KfcbRating kfcbRating = 37;
    // voor de Classificatie van Audiovisuele Media (Netherlands).
    enum ContentRating_KijkwijzerRating {
        CONTENTRATING_KIJKWIJZERRATING_KIJKWIJZER12 = 0;
        CONTENTRATING_KIJKWIJZERRATING_KIJKWIJZER16 = 1;
        CONTENTRATING_KIJKWIJZERRATING_KIJKWIJZER18 = 2;
        CONTENTRATING_KIJKWIJZERRATING_KIJKWIJZER6 = 3;
        CONTENTRATING_KIJKWIJZERRATING_KIJKWIJZER9 = 4;
        CONTENTRATING_KIJKWIJZERRATING_KIJKWIJZERAL = 5;
        CONTENTRATING_KIJKWIJZERRATING_KIJKWIJZERUNRATED = 6;
    }
    ContentRating_KijkwijzerRating kijkwijzerRating = 38;
    // The video's Korea Media Rating Board (영상물등급위원회) rating. The KMRB rates videos in South Korea.
    enum ContentRating_KmrbRating {
        CONTENTRATING_KMRBRATING_KMRB12PLUS = 0;
        CONTENTRATING_KMRBRATING_KMRB15PLUS = 1;
        CONTENTRATING_KMRBRATING_KMRBALL = 2;
        CONTENTRATING_KMRBRATING_KMRBR = 3;
        CONTENTRATING_KMRBRATING_KMRBTEENR = 4;
        CONTENTRATING_KMRBRATING_KMRBUNRATED = 5;
    }
    ContentRating_KmrbRating kmrbRating = 39;
    // The video's rating from Indonesia's Lembaga Sensor Film.
    enum ContentRating_LsfRating {
        CONTENTRATING_LSFRATING_LSF13 = 0;
        CONTENTRATING_LSFRATING_LSF17 = 1;
        CONTENTRATING_LSFRATING_LSF21 = 2;
        CONTENTRATING_LSFRATING_LSFA = 3;
        CONTENTRATING_LSFRATING_LSFBO = 4;
        CONTENTRATING_LSFRATING_LSFD = 5;
        CONTENTRATING_LSFRATING_LSFR = 6;
        CONTENTRATING_LSFRATING_LSFSU = 7;
        CONTENTRATING_LSFRATING_LSFUNRATED = 8;
    }
    ContentRating_LsfRating lsfRating = 40;
    // The video's rating from Malta's Film Age-Classification Board.
    enum ContentRating_MccaaRating {
        CONTENTRATING_MCCAARATING_MCCAA12 = 0;
        CONTENTRATING_MCCAARATING_MCCAA12A = 1;
        CONTENTRATING_MCCAARATING_MCCAA14 = 2;
        CONTENTRATING_MCCAARATING_MCCAA15 = 3;
        CONTENTRATING_MCCAARATING_MCCAA16 = 4;
        CONTENTRATING_MCCAARATING_MCCAA18 = 5;
        CONTENTRATING_MCCAARATING_MCCAAPG = 6;
        CONTENTRATING_MCCAARATING_MCCAAU = 7;
        CONTENTRATING_MCCAARATING_MCCAAUNRATED = 8;
    }
    ContentRating_MccaaRating mccaaRating = 41;
    // The video's rating from the Danish Film Institute's (Det Danske Filminstitut) Media Council for Children and Young People.
    enum ContentRating_MccypRating {
        CONTENTRATING_MCCYPRATING_MCCYP11 = 0;
        CONTENTRATING_MCCYPRATING_MCCYP15 = 1;
        CONTENTRATING_MCCYPRATING_MCCYP7 = 2;
        CONTENTRATING_MCCYPRATING_MCCYPA = 3;
        CONTENTRATING_MCCYPRATING_MCCYPUNRATED = 4;
    }
    ContentRating_MccypRating mccypRating = 42;
    // The video's rating system for Vietnam - MCST
    enum ContentRating_McstRating {
        CONTENTRATING_MCSTRATING_MCST0 = 0;
        CONTENTRATING_MCSTRATING_MCST16PLUS = 1;
        CONTENTRATING_MCSTRATING_MCSTC13 = 2;
        CONTENTRATING_MCSTRATING_MCSTC16 = 3;
        CONTENTRATING_MCSTRATING_MCSTC18 = 4;
        CONTENTRATING_MCSTRATING_MCSTGPG = 5;
        CONTENTRATING_MCSTRATING_MCSTP = 6;
        CONTENTRATING_MCSTRATING_MCSTUNRATED = 7;
    }
    ContentRating_McstRating mcstRating = 43;
    // The video's rating from Singapore's Media Development Authority (MDA) and, specifically, it's Board of Film Censors (BFC).
    enum ContentRating_MdaRating {
        CONTENTRATING_MDARATING_MDAG = 0;
        CONTENTRATING_MDARATING_MDAM18 = 1;
        CONTENTRATING_MDARATING_MDANC16 = 2;
        CONTENTRATING_MDARATING_MDAPG = 3;
        CONTENTRATING_MDARATING_MDAPG13 = 4;
        CONTENTRATING_MDARATING_MDAR21 = 5;
        CONTENTRATING_MDARATING_MDAUNRATED = 6;
    }
    ContentRating_MdaRating mdaRating = 44;
    // The video's rating from Medietilsynet, the Norwegian Media Authority.
    enum ContentRating_MedietilsynetRating {
        CONTENTRATING_MEDIETILSYNETRATING_MEDIETILSYNET11 = 0;
        CONTENTRATING_MEDIETILSYNETRATING_MEDIETILSYNET12 = 1;
        CONTENTRATING_MEDIETILSYNETRATING_MEDIETILSYNET15 = 2;
        CONTENTRATING_MEDIETILSYNETRATING_MEDIETILSYNET18 = 3;
        CONTENTRATING_MEDIETILSYNETRATING_MEDIETILSYNET6 = 4;
        CONTENTRATING_MEDIETILSYNETRATING_MEDIETILSYNET7 = 5;
        CONTENTRATING_MEDIETILSYNETRATING_MEDIETILSYNET9 = 6;
        CONTENTRATING_MEDIETILSYNETRATING_MEDIETILSYNETA = 7;
        CONTENTRATING_MEDIETILSYNETRATING_MEDIETILSYNETUNRATED = 8;
    }
    ContentRating_MedietilsynetRating medietilsynetRating = 45;
    // The video's rating from Finland's Kansallinen Audiovisuaalinen Instituutti (National Audiovisual Institute).
    enum ContentRating_MekuRating {
        CONTENTRATING_MEKURATING_MEKU12 = 0;
        CONTENTRATING_MEKURATING_MEKU16 = 1;
        CONTENTRATING_MEKURATING_MEKU18 = 2;
        CONTENTRATING_MEKURATING_MEKU7 = 3;
        CONTENTRATING_MEKURATING_MEKUS = 4;
        CONTENTRATING_MEKURATING_MEKUUNRATED = 5;
    }
    ContentRating_MekuRating mekuRating = 46;
    // The rating system for MENA countries, a clone of MPAA. It is needed to
    enum ContentRating_MenaMpaaRating {
        CONTENTRATING_MENAMPAARATING_MENAMPAAG = 0;
        CONTENTRATING_MENAMPAARATING_MENAMPAAPG = 1;
        CONTENTRATING_MENAMPAARATING_MENAMPAAPG13 = 2;
        CONTENTRATING_MENAMPAARATING_MENAMPAAR = 3;
        CONTENTRATING_MENAMPAARATING_MENAMPAAUNRATED = 4;
    }
    ContentRating_MenaMpaaRating menaMpaaRating = 47;
    // The video's rating from the Ministero dei Beni e delle Attività Culturali e del Turismo (Italy).
    enum ContentRating_MibacRating {
        CONTENTRATING_MIBACRATING_MIBACT = 0;
        CONTENTRATING_MIBACRATING_MIBACUNRATED = 1;
        CONTENTRATING_MIBACRATING_MIBACVAP = 2;
        CONTENTRATING_MIBACRATING_MIBACVM12 = 3;
        CONTENTRATING_MIBACRATING_MIBACVM14 = 4;
        CONTENTRATING_MIBACRATING_MIBACVM18 = 5;
    }
    ContentRating_MibacRating mibacRating = 48;
    // The video's Ministerio de Cultura (Colombia) rating.
    enum ContentRating_MocRating {
        CONTENTRATING_MOCRATING_MOC12 = 0;
        CONTENTRATING_MOCRATING_MOC15 = 1;
        CONTENTRATING_MOCRATING_MOC18 = 2;
        CONTENTRATING_MOCRATING_MOC7 = 3;
        CONTENTRATING_MOCRATING_MOCBANNED = 4;
        CONTENTRATING_MOCRATING_MOCE = 5;
        CONTENTRATING_MOCRATING_MOCT = 6;
        CONTENTRATING_MOCRATING_MOCUNRATED = 7;
        CONTENTRATING_MOCRATING_MOCX = 8;
    }
    ContentRating_MocRating mocRating = 49;
    // The video's rating from Taiwan's Ministry of Culture (文化部).
    enum ContentRating_MoctwRating {
        CONTENTRATING_MOCTWRATING_MOCTWG = 0;
        CONTENTRATING_MOCTWRATING_MOCTWP = 1;
        CONTENTRATING_MOCTWRATING_MOCTWPG = 2;
        CONTENTRATING_MOCTWRATING_MOCTWR = 3;
        CONTENTRATING_MOCTWRATING_MOCTWR12 = 4;
        CONTENTRATING_MOCTWRATING_MOCTWR15 = 5;
        CONTENTRATING_MOCTWRATING_MOCTWUNRATED = 6;
    }
    ContentRating_MoctwRating moctwRating = 50;
    // The video's Motion Picture Association of America (MPAA) rating.
    enum ContentRating_MpaaRating {
        CONTENTRATING_MPAARATING_MPAAG = 0;
        CONTENTRATING_MPAARATING_MPAANC17 = 1;
        CONTENTRATING_MPAARATING_MPAAPG = 2;
        CONTENTRATING_MPAARATING_MPAAPG13 = 3;
        CONTENTRATING_MPAARATING_MPAAR = 4;
        CONTENTRATING_MPAARATING_MPAAUNRATED = 5;
    }
    ContentRating_MpaaRating mpaaRating = 51;
    // The rating system for trailer, DVD, and Ad in the US. See http://movielabs.com/md/ratings/v2.3/html/US_MPAAT_Ratings.html.
    enum ContentRating_MpaatRating {
        CONTENTRATING_MPAATRATING_MPAATGB = 0;
        CONTENTRATING_MPAATRATING_MPAATRB = 1;
    }
    ContentRating_MpaatRating mpaatRating = 52;
    // The video's rating from the Movie and Television Review and Classification Board (Philippines).
    enum ContentRating_MtrcbRating {
        CONTENTRATING_MTRCBRATING_MTRCBG = 0;
        CONTENTRATING_MTRCBRATING_MTRCBPG = 1;
        CONTENTRATING_MTRCBRATING_MTRCBR13 = 2;
        CONTENTRATING_MTRCBRATING_MTRCBR16 = 3;
        CONTENTRATING_MTRCBRATING_MTRCBR18 = 4;
        CONTENTRATING_MTRCBRATING_MTRCBUNRATED = 5;
        CONTENTRATING_MTRCBRATING_MTRCBX = 6;
    }
    ContentRating_MtrcbRating mtrcbRating = 53;
    // The video's rating from the Maldives National Bureau of Classification.
    enum ContentRating_NbcRating {
        CONTENTRATING_NBCRATING_NBC12PLUS = 0;
        CONTENTRATING_NBCRATING_NBC15PLUS = 1;
        CONTENTRATING_NBCRATING_NBC18PLUS = 2;
        CONTENTRATING_NBCRATING_NBC18PLUSR = 3;
        CONTENTRATING_NBCRATING_NBCG = 4;
        CONTENTRATING_NBCRATING_NBCPG = 5;
        CONTENTRATING_NBCRATING_NBCPU = 6;
        CONTENTRATING_NBCRATING_NBCUNRATED = 7;
    }
    ContentRating_NbcRating nbcRating = 54;
    // The video's rating in Poland.
    enum ContentRating_NbcplRating {
        CONTENTRATING_NBCPLRATING_NBCPL18PLUS = 0;
        CONTENTRATING_NBCPLRATING_NBCPLI = 1;
        CONTENTRATING_NBCPLRATING_NBCPLII = 2;
        CONTENTRATING_NBCPLRATING_NBCPLIII = 3;
        CONTENTRATING_NBCPLRATING_NBCPLIV = 4;
        CONTENTRATING_NBCPLRATING_NBCPLUNRATED = 5;
    }
    ContentRating_NbcplRating nbcplRating = 55;
    // The video's rating from the Bulgarian National Film Center.
    enum ContentRating_NfrcRating {
        CONTENTRATING_NFRCRATING_NFRCA = 0;
        CONTENTRATING_NFRCRATING_NFRCB = 1;
        CONTENTRATING_NFRCRATING_NFRCC = 2;
        CONTENTRATING_NFRCRATING_NFRCD = 3;
        CONTENTRATING_NFRCRATING_NFRCUNRATED = 4;
        CONTENTRATING_NFRCRATING_NFRCX = 5;
    }
    ContentRating_NfrcRating nfrcRating = 56;
    // The video's rating from Nigeria's National Film and Video Censors Board.
    enum ContentRating_NfvcbRating {
        CONTENTRATING_NFVCBRATING_NFVCB12 = 0;
        CONTENTRATING_NFVCBRATING_NFVCB12A = 1;
        CONTENTRATING_NFVCBRATING_NFVCB15 = 2;
        CONTENTRATING_NFVCBRATING_NFVCB18 = 3;
        CONTENTRATING_NFVCBRATING_NFVCBG = 4;
        CONTENTRATING_NFVCBRATING_NFVCBPG = 5;
        CONTENTRATING_NFVCBRATING_NFVCBRE = 6;
        CONTENTRATING_NFVCBRATING_NFVCBUNRATED = 7;
    }
    ContentRating_NfvcbRating nfvcbRating = 57;
    // The video's rating from the Nacionãlais Kino centrs (National Film Centre of Latvia).
    enum ContentRating_NkclvRating {
        CONTENTRATING_NKCLVRATING_NKCLV12PLUS = 0;
        CONTENTRATING_NKCLVRATING_NKCLV18PLUS = 1;
        CONTENTRATING_NKCLVRATING_NKCLV7PLUS = 2;
        CONTENTRATING_NKCLVRATING_NKCLVU = 3;
        CONTENTRATING_NKCLVRATING_NKCLVUNRATED = 4;
    }
    ContentRating_NkclvRating nkclvRating = 58;
    // The video's Office of Film and Literature Classification (OFLC - New Zealand) rating.
    enum ContentRating_OflcRating {
        CONTENTRATING_OFLCRATING_OFLCG = 0;
        CONTENTRATING_OFLCRATING_OFLCM = 1;
        CONTENTRATING_OFLCRATING_OFLCPG = 2;
        CONTENTRATING_OFLCRATING_OFLCR13 = 3;
        CONTENTRATING_OFLCRATING_OFLCR15 = 4;
        CONTENTRATING_OFLCRATING_OFLCR16 = 5;
        CONTENTRATING_OFLCRATING_OFLCR18 = 6;
        CONTENTRATING_OFLCRATING_OFLCRP13 = 7;
        CONTENTRATING_OFLCRATING_OFLCRP16 = 8;
        CONTENTRATING_OFLCRATING_OFLCUNRATED = 9;
    }
    ContentRating_OflcRating oflcRating = 59;
    // The video's rating in Peru.
    enum ContentRating_PefilmRating {
        CONTENTRATING_PEFILMRATING_PEFILM14 = 0;
        CONTENTRATING_PEFILMRATING_PEFILM18 = 1;
        CONTENTRATING_PEFILMRATING_PEFILMPG = 2;
        CONTENTRATING_PEFILMRATING_PEFILMPT = 3;
        CONTENTRATING_PEFILMRATING_PEFILMUNRATED = 4;
    }
    ContentRating_PefilmRating pefilmRating = 60;
    // The video's rating from the Hungarian Nemzeti Filmiroda, the Rating Committee of the National Office of Film.
    enum ContentRating_RcnofRating {
        CONTENTRATING_RCNOFRATING_RCNOFI = 0;
        CONTENTRATING_RCNOFRATING_RCNOFII = 1;
        CONTENTRATING_RCNOFRATING_RCNOFIII = 2;
        CONTENTRATING_RCNOFRATING_RCNOFIV = 3;
        CONTENTRATING_RCNOFRATING_RCNOFUNRATED = 4;
        CONTENTRATING_RCNOFRATING_RCNOFV = 5;
        CONTENTRATING_RCNOFRATING_RCNOFVI = 6;
    }
    ContentRating_RcnofRating rcnofRating = 61;
    // The video's rating in Venezuela.
    enum ContentRating_ResorteviolenciaRating {
        CONTENTRATING_RESORTEVIOLENCIARATING_RESORTEVIOLENCIAA = 0;
        CONTENTRATING_RESORTEVIOLENCIARATING_RESORTEVIOLENCIAB = 1;
        CONTENTRATING_RESORTEVIOLENCIARATING_RESORTEVIOLENCIAC = 2;
        CONTENTRATING_RESORTEVIOLENCIARATING_RESORTEVIOLENCIAD = 3;
        CONTENTRATING_RESORTEVIOLENCIARATING_RESORTEVIOLENCIAE = 4;
        CONTENTRATING_RESORTEVIOLENCIARATING_RESORTEVIOLENCIAUNRATED = 5;
    }
    ContentRating_ResorteviolenciaRating resorteviolenciaRating = 62;
    // The video's General Directorate of Radio, Television and Cinematography (Mexico) rating.
    enum ContentRating_RtcRating {
        CONTENTRATING_RTCRATING_RTCA = 0;
        CONTENTRATING_RTCRATING_RTCAA = 1;
        CONTENTRATING_RTCRATING_RTCB = 2;
        CONTENTRATING_RTCRATING_RTCB15 = 3;
        CONTENTRATING_RTCRATING_RTCC = 4;
        CONTENTRATING_RTCRATING_RTCD = 5;
        CONTENTRATING_RTCRATING_RTCUNRATED = 6;
    }
    ContentRating_RtcRating rtcRating = 63;
    // The video's rating from Ireland's Raidió Teilifís Éireann.
    enum ContentRating_RteRating {
        CONTENTRATING_RTERATING_RTECH = 0;
        CONTENTRATING_RTERATING_RTEGA = 1;
        CONTENTRATING_RTERATING_RTEMA = 2;
        CONTENTRATING_RTERATING_RTEPS = 3;
        CONTENTRATING_RTERATING_RTEUNRATED = 4;
    }
    ContentRating_RteRating rteRating = 64;
    // The video's National Film Registry of the Russian Federation (MKRF - Russia) rating.
    enum ContentRating_RussiaRating {
        CONTENTRATING_RUSSIARATING_RUSSIA0 = 0;
        CONTENTRATING_RUSSIARATING_RUSSIA12 = 1;
        CONTENTRATING_RUSSIARATING_RUSSIA16 = 2;
        CONTENTRATING_RUSSIARATING_RUSSIA18 = 3;
        CONTENTRATING_RUSSIARATING_RUSSIA6 = 4;
        CONTENTRATING_RUSSIARATING_RUSSIAUNRATED = 5;
    }
    ContentRating_RussiaRating russiaRating = 65;
    // The video's rating in Slovakia.
    enum ContentRating_SkfilmRating {
        CONTENTRATING_SKFILMRATING_SKFILMG = 0;
        CONTENTRATING_SKFILMRATING_SKFILMP2 = 1;
        CONTENTRATING_SKFILMRATING_SKFILMP5 = 2;
        CONTENTRATING_SKFILMRATING_SKFILMP8 = 3;
        CONTENTRATING_SKFILMRATING_SKFILMUNRATED = 4;
    }
    ContentRating_SkfilmRating skfilmRating = 66;
    // The video's rating in Iceland.
    enum ContentRating_SmaisRating {
        CONTENTRATING_SMAISRATING_SMAIS12 = 0;
        CONTENTRATING_SMAISRATING_SMAIS14 = 1;
        CONTENTRATING_SMAISRATING_SMAIS16 = 2;
        CONTENTRATING_SMAISRATING_SMAIS18 = 3;
        CONTENTRATING_SMAISRATING_SMAIS7 = 4;
        CONTENTRATING_SMAISRATING_SMAISL = 5;
        CONTENTRATING_SMAISRATING_SMAISUNRATED = 6;
    }
    ContentRating_SmaisRating smaisRating = 67;
    // The video's rating from Statens medieråd (Sweden's National Media Council).
    enum ContentRating_SmsaRating {
        CONTENTRATING_SMSARATING_SMSA11 = 0;
        CONTENTRATING_SMSARATING_SMSA15 = 1;
        CONTENTRATING_SMSARATING_SMSA7 = 2;
        CONTENTRATING_SMSARATING_SMSAA = 3;
        CONTENTRATING_SMSARATING_SMSAUNRATED = 4;
    }
    ContentRating_SmsaRating smsaRating = 68;
    // The video's TV Parental Guidelines (TVPG) rating.
    enum ContentRating_TvpgRating {
        CONTENTRATING_TVPGRATING_PG14 = 0;
        CONTENTRATING_TVPGRATING_TVPGG = 1;
        CONTENTRATING_TVPGRATING_TVPGMA = 2;
        CONTENTRATING_TVPGRATING_TVPGPG = 3;
        CONTENTRATING_TVPGRATING_TVPGUNRATED = 4;
        CONTENTRATING_TVPGRATING_TVPGY = 5;
        CONTENTRATING_TVPGRATING_TVPGY7 = 6;
        CONTENTRATING_TVPGRATING_TVPGY7FV = 7;
    }
    ContentRating_TvpgRating tvpgRating = 69;
    // A rating that YouTube uses to identify age-restricted content.
    enum ContentRating_YtRating {
        CONTENTRATING_YTRATING_YTAGERESTRICTED = 0;
    }
    ContentRating_YtRating ytRating = 70;
}

message FanFundingEvent {
    // Etag of this resource.
    string etag = 1;
    // The ID that YouTube assigns to uniquely identify the fan funding event.
    string id = 2;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#fanFundingEvent".
    string kind = 3;
    // The snippet object contains basic details about the fan funding event.
    FanFundingEventSnippet snippet = 4;
}

message FanFundingEventListResponse {
    // Etag of this resource.
    string etag = 1;
    // Serialized EventId of the request which produced this response.
    string eventId = 2;
    // A list of fan funding events that match the request criteria.
    repeated FanFundingEvent items = 3;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#fanFundingEventListResponse".
    string kind = 4;
    // The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
    string nextPageToken = 5;
    PageInfo pageInfo = 6;
    TokenPagination tokenPagination = 7;
    // The visitorId identifies the visitor.
    string visitorId = 8;
}

message FanFundingEventSnippet {
    // The amount of funding in micros of fund_currency. e.g., 1 is represented
    string amountMicros = 1;
    // Channel id where the funding event occurred.
    string channelId = 2;
    // The text contents of the comment left by the user.
    string commentText = 3;
    // The date and time when the funding occurred. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
    string createdAt = 4;
    // The currency in which the fund was made. ISO 4217.
    string currency = 5;
    // A rendered string that displays the fund amount and currency (e.g., "$1.00"). The string is rendered for the given language.
    string displayString = 6;
    // Details about the supporter. Only filled if the event was made public by the user.
    ChannelProfileDetails supporterDetails = 7;
}

message GeoPoint {
    // Altitude above the reference ellipsoid, in meters.
    double altitude = 1;
    // Latitude in degrees.
    double latitude = 2;
    // Longitude in degrees.
    double longitude = 3;
}

message GuideCategory {
    // Etag of this resource.
    string etag = 1;
    // The ID that YouTube uses to uniquely identify the guide category.
    string id = 2;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#guideCategory".
    string kind = 3;
    // The snippet object contains basic details about the category, such as its title.
    GuideCategorySnippet snippet = 4;
}

message GuideCategoryListResponse {
    // Etag of this resource.
    string etag = 1;
    // Serialized EventId of the request which produced this response.
    string eventId = 2;
    // A list of categories that can be associated with YouTube channels. In this map, the category ID is the map key, and its value is the corresponding guideCategory resource.
    repeated GuideCategory items = 3;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#guideCategoryListResponse".
    string kind = 4;
    // The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
    string nextPageToken = 5;
    PageInfo pageInfo = 6;
    // The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
    string prevPageToken = 7;
    TokenPagination tokenPagination = 8;
    // The visitorId identifies the visitor.
    string visitorId = 9;
}

message GuideCategorySnippet {
    string channelId = 1;
    // Description of the guide category.
    string title = 2;
}

message I18nLanguage {
    // Etag of this resource.
    string etag = 1;
    // The ID that YouTube uses to uniquely identify the i18n language.
    string id = 2;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#i18nLanguage".
    string kind = 3;
    // The snippet object contains basic details about the i18n language, such as language code and human-readable name.
    I18nLanguageSnippet snippet = 4;
}

message I18nLanguageListResponse {
    // Etag of this resource.
    string etag = 1;
    // Serialized EventId of the request which produced this response.
    string eventId = 2;
    // A list of supported i18n languages. In this map, the i18n language ID is the map key, and its value is the corresponding i18nLanguage resource.
    repeated I18nLanguage items = 3;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#i18nLanguageListResponse".
    string kind = 4;
    // The visitorId identifies the visitor.
    string visitorId = 5;
}

message I18nLanguageSnippet {
    // A short BCP-47 code that uniquely identifies a language.
    string hl = 1;
    // The human-readable name of the language in the language itself.
    string name = 2;
}

message I18nRegion {
    // Etag of this resource.
    string etag = 1;
    // The ID that YouTube uses to uniquely identify the i18n region.
    string id = 2;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#i18nRegion".
    string kind = 3;
    // The snippet object contains basic details about the i18n region, such as region code and human-readable name.
    I18nRegionSnippet snippet = 4;
}

message I18nRegionListResponse {
    // Etag of this resource.
    string etag = 1;
    // Serialized EventId of the request which produced this response.
    string eventId = 2;
    // A list of regions where YouTube is available. In this map, the i18n region ID is the map key, and its value is the corresponding i18nRegion resource.
    repeated I18nRegion items = 3;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#i18nRegionListResponse".
    string kind = 4;
    // The visitorId identifies the visitor.
    string visitorId = 5;
}

message I18nRegionSnippet {
    // The region code as a 2-letter ISO country code.
    string gl = 1;
    // The human-readable name of the region.
    string name = 2;
}

message ImageSettings {
    // The URL for the background image shown on the video watch page. The image should be 1200px by 615px, with a maximum file size of 128k.
    LocalizedProperty backgroundImageUrl = 1;
    // This is used only in update requests; if it's set, we use this URL to generate all of the above banner URLs.
    string bannerExternalUrl = 2;
    // Banner image. Desktop size (1060x175).
    string bannerImageUrl = 3;
    // Banner image. Mobile size high resolution (1440x395).
    string bannerMobileExtraHdImageUrl = 4;
    // Banner image. Mobile size high resolution (1280x360).
    string bannerMobileHdImageUrl = 5;
    // Banner image. Mobile size (640x175).
    string bannerMobileImageUrl = 6;
    // Banner image. Mobile size low resolution (320x88).
    string bannerMobileLowImageUrl = 7;
    // Banner image. Mobile size medium/high resolution (960x263).
    string bannerMobileMediumHdImageUrl = 8;
    // Banner image. Tablet size extra high resolution (2560x424).
    string bannerTabletExtraHdImageUrl = 9;
    // Banner image. Tablet size high resolution (2276x377).
    string bannerTabletHdImageUrl = 10;
    // Banner image. Tablet size (1707x283).
    string bannerTabletImageUrl = 11;
    // Banner image. Tablet size low resolution (1138x188).
    string bannerTabletLowImageUrl = 12;
    // Banner image. TV size high resolution (1920x1080).
    string bannerTvHighImageUrl = 13;
    // Banner image. TV size extra high resolution (2120x1192).
    string bannerTvImageUrl = 14;
    // Banner image. TV size low resolution (854x480).
    string bannerTvLowImageUrl = 15;
    // Banner image. TV size medium resolution (1280x720).
    string bannerTvMediumImageUrl = 16;
    // The image map script for the large banner image.
    LocalizedProperty largeBrandedBannerImageImapScript = 17;
    // The URL for the 854px by 70px image that appears below the video player in the expanded video view of the video watch page.
    LocalizedProperty largeBrandedBannerImageUrl = 18;
    // The image map script for the small banner image.
    LocalizedProperty smallBrandedBannerImageImapScript = 19;
    // The URL for the 640px by 70px banner image that appears below the video player in the default view of the video watch page.
    LocalizedProperty smallBrandedBannerImageUrl = 20;
    // The URL for a 1px by 1px tracking pixel that can be used to collect statistics for views of the channel or video pages.
    string trackingImageUrl = 21;
    // The URL for the image that appears above the top-left corner of the video player. This is a 25-pixel-high image with a flexible width that cannot exceed 170 pixels.
    string watchIconImageUrl = 22;
}

message IngestionInfo {
    // The backup ingestion URL that you should use to stream video to YouTube. You have the option of simultaneously streaming the content that you are sending to the ingestionAddress to this URL.
    string backupIngestionAddress = 1;
    // The primary ingestion URL that you should use to stream video to YouTube. You must stream video to this URL.
    // 
    // Depending on which application or tool you use to encode your video stream, you may need to enter the stream URL and stream name separately or you may need to concatenate them in the following format:
    // 
    // STREAM_URL/STREAM_NAME
    string ingestionAddress = 2;
    // The HTTP or RTMP stream name that YouTube assigns to the video stream.
    string streamName = 3;
}

message InvideoBranding {
    string imageBytes = 1;
    string imageUrl = 2;
    InvideoPosition position = 3;
    string targetChannelId = 4;
    InvideoTiming timing = 5;
}

message InvideoPosition {
    // Describes in which corner of the video the visual widget will appear.
    enum InvideoPosition_CornerPosition {
        INVIDEOPOSITION_CORNERPOSITION_BOTTOMLEFT = 0;
        INVIDEOPOSITION_CORNERPOSITION_BOTTOMRIGHT = 1;
        INVIDEOPOSITION_CORNERPOSITION_TOPLEFT = 2;
        INVIDEOPOSITION_CORNERPOSITION_TOPRIGHT = 3;
    }
    InvideoPosition_CornerPosition cornerPosition = 1;
    // Defines the position type.
    enum InvideoPosition_Type {
        INVIDEOPOSITION_TYPE_CORNER = 0;
    }
    InvideoPosition_Type type = 2;
}

message InvideoPromotion {
    // The default temporal position within the video where the promoted item will be displayed. Can be overriden by more specific timing in the item.
    InvideoTiming defaultTiming = 1;
    // List of promoted items in decreasing priority.
    repeated PromotedItem items = 2;
    // The spatial position within the video where the promoted item will be displayed.
    InvideoPosition position = 3;
    // Indicates whether the channel's promotional campaign uses "smart timing." This feature attempts to show promotions at a point in the video when they are more likely to be clicked and less likely to disrupt the viewing experience. This feature also picks up a single promotion to show on each video.
    bool useSmartTiming = 4;
}

message InvideoTiming {
    // Defines the duration in milliseconds for which the promotion should be displayed. If missing, the client should use the default.
    string durationMs = 1;
    // Defines the time at which the promotion will appear. Depending on the value of type the value of the offsetMs field will represent a time offset from the start or from the end of the video, expressed in milliseconds.
    string offsetMs = 2;
    // Describes a timing type. If the value is offsetFromStart, then the offsetMs field represents an offset from the start of the video. If the value is offsetFromEnd, then the offsetMs field represents an offset from the end of the video.
    enum InvideoTiming_Type {
        INVIDEOTIMING_TYPE_OFFSETFROMEND = 0;
        INVIDEOTIMING_TYPE_OFFSETFROMSTART = 1;
    }
    InvideoTiming_Type type = 3;
}

message LanguageTag {
    string value = 1;
}

message LiveBroadcast {
    // The contentDetails object contains information about the event's video content, such as whether the content can be shown in an embedded video player or if it will be archived and therefore available for viewing after the event has concluded.
    LiveBroadcastContentDetails contentDetails = 1;
    // Etag of this resource.
    string etag = 2;
    // The ID that YouTube assigns to uniquely identify the broadcast.
    string id = 3;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#liveBroadcast".
    string kind = 4;
    // The snippet object contains basic details about the event, including its title, description, start time, and end time.
    LiveBroadcastSnippet snippet = 5;
    // The statistics object contains info about the event's current stats. These include concurrent viewers and total chat count. Statistics can change (in either direction) during the lifetime of an event. Statistics are only returned while the event is live.
    LiveBroadcastStatistics statistics = 6;
    // The status object contains information about the event's status.
    LiveBroadcastStatus status = 7;
}

message LiveBroadcastContentDetails {
    // This value uniquely identifies the live stream bound to the broadcast.
    string boundStreamId = 1;
    // The date and time that the live stream referenced by boundStreamId was last updated.
    string boundStreamLastUpdateTimeMs = 2;
    enum LiveBroadcastContentDetails_ClosedCaptionsType {
        LIVEBROADCASTCONTENTDETAILS_CLOSEDCAPTIONSTYPE_CLOSEDCAPTIONSDISABLED = 0;
        LIVEBROADCASTCONTENTDETAILS_CLOSEDCAPTIONSTYPE_CLOSEDCAPTIONSEMBEDDED = 1;
        LIVEBROADCASTCONTENTDETAILS_CLOSEDCAPTIONSTYPE_CLOSEDCAPTIONSHTTPPOST = 2;
    }
    LiveBroadcastContentDetails_ClosedCaptionsType closedCaptionsType = 3;
    // This setting indicates whether HTTP POST closed captioning is enabled for this broadcast. The ingestion URL of the closed captions is returned through the liveStreams API. This is mutually exclusive with using the closed_captions_type property, and is equivalent to setting closed_captions_type to CLOSED_CAPTIONS_HTTP_POST.
    bool enableClosedCaptions = 4;
    // This setting indicates whether YouTube should enable content encryption for the broadcast.
    bool enableContentEncryption = 5;
    // This setting determines whether viewers can access DVR controls while watching the video. DVR controls enable the viewer to control the video playback experience by pausing, rewinding, or fast forwarding content. The default value for this property is true.
    // 
    // 
    // 
    // Important: You must set the value to true and also set the enableArchive property's value to true if you want to make playback available immediately after the broadcast ends.
    bool enableDvr = 6;
    // This setting indicates whether the broadcast video can be played in an embedded player. If you choose to archive the video (using the enableArchive property), this setting will also apply to the archived video.
    bool enableEmbed = 7;
    // Indicates whether this broadcast has low latency enabled.
    bool enableLowLatency = 8;
    // If both this and enable_low_latency are set, they must match. LATENCY_NORMAL should match enable_low_latency=false LATENCY_LOW should match enable_low_latency=true LATENCY_ULTRA_LOW should have enable_low_latency omitted.
    enum LiveBroadcastContentDetails_LatencyPreference {
        LIVEBROADCASTCONTENTDETAILS_LATENCYPREFERENCE_LOW = 0;
        LIVEBROADCASTCONTENTDETAILS_LATENCYPREFERENCE_NORMAL = 1;
        LIVEBROADCASTCONTENTDETAILS_LATENCYPREFERENCE_ULTRALOW = 2;
    }
    LiveBroadcastContentDetails_LatencyPreference latencyPreference = 9;
    string mesh = 10;
    // The monitorStream object contains information about the monitor stream, which the broadcaster can use to review the event content before the broadcast stream is shown publicly.
    MonitorStreamInfo monitorStream = 11;
    // The projection format of this broadcast. This defaults to rectangular.
    enum LiveBroadcastContentDetails_Projection {
        LIVEBROADCASTCONTENTDETAILS_PROJECTION_360 = 0;
        LIVEBROADCASTCONTENTDETAILS_PROJECTION_MESH = 1;
        LIVEBROADCASTCONTENTDETAILS_PROJECTION_RECTANGULAR = 2;
    }
    LiveBroadcastContentDetails_Projection projection = 12;
    // Automatically start recording after the event goes live. The default value for this property is true.
    // 
    // 
    // 
    // Important: You must also set the enableDvr property's value to true if you want the playback to be available immediately after the broadcast ends. If you set this property's value to true but do not also set the enableDvr property to true, there may be a delay of around one day before the archived video will be available for playback.
    bool recordFromStart = 13;
    // This setting indicates whether the broadcast should automatically begin with an in-stream slate when you update the broadcast's status to live. After updating the status, you then need to send a liveCuepoints.insert request that sets the cuepoint's eventState to end to remove the in-stream slate and make your broadcast stream visible to viewers.
    bool startWithSlate = 14;
}

message LiveBroadcastListResponse {
    // Etag of this resource.
    string etag = 1;
    // Serialized EventId of the request which produced this response.
    string eventId = 2;
    // A list of broadcasts that match the request criteria.
    repeated LiveBroadcast items = 3;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#liveBroadcastListResponse".
    string kind = 4;
    // The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
    string nextPageToken = 5;
    PageInfo pageInfo = 6;
    // The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
    string prevPageToken = 7;
    TokenPagination tokenPagination = 8;
    // The visitorId identifies the visitor.
    string visitorId = 9;
}

message LiveBroadcastSnippet {
    // The date and time that the broadcast actually ended. This information is only available once the broadcast's state is complete. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
    string actualEndTime = 1;
    // The date and time that the broadcast actually started. This information is only available once the broadcast's state is live. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
    string actualStartTime = 2;
    // The ID that YouTube uses to uniquely identify the channel that is publishing the broadcast.
    string channelId = 3;
    // The broadcast's description. As with the title, you can set this field by modifying the broadcast resource or by setting the description field of the corresponding video resource.
    string description = 4;
    bool isDefaultBroadcast = 5;
    // The id of the live chat for this broadcast.
    string liveChatId = 6;
    // The date and time that the broadcast was added to YouTube's live broadcast schedule. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
    string publishedAt = 7;
    // The date and time that the broadcast is scheduled to end. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
    string scheduledEndTime = 8;
    // The date and time that the broadcast is scheduled to start. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
    string scheduledStartTime = 9;
    // A map of thumbnail images associated with the broadcast. For each nested object in this object, the key is the name of the thumbnail image, and the value is an object that contains other information about the thumbnail.
    ThumbnailDetails thumbnails = 10;
    // The broadcast's title. Note that the broadcast represents exactly one YouTube video. You can set this field by modifying the broadcast resource or by setting the title field of the corresponding video resource.
    string title = 11;
}

message LiveBroadcastStatistics {
    // The number of viewers currently watching the broadcast. The property and its value will be present if the broadcast has current viewers and the broadcast owner has not hidden the viewcount for the video. Note that YouTube stops tracking the number of concurrent viewers for a broadcast when the broadcast ends. So, this property would not identify the number of viewers watching an archived video of a live broadcast that already ended.
    string concurrentViewers = 1;
    // The total number of live chat messages currently on the broadcast. The property and its value will be present if the broadcast is public, has the live chat feature enabled, and has at least one message. Note that this field will not be filled after the broadcast ends. So this property would not identify the number of chat messages for an archived video of a completed live broadcast.
    string totalChatCount = 2;
}

message LiveBroadcastStatus {
    // The broadcast's status. The status can be updated using the API's liveBroadcasts.transition method.
    enum LiveBroadcastStatus_LifeCycleStatu {
        LIVEBROADCASTSTATUS_LIFECYCLESTATU_ABANDONED = 0;
        LIVEBROADCASTSTATUS_LIFECYCLESTATU_COMPLETE = 1;
        LIVEBROADCASTSTATUS_LIFECYCLESTATU_COMPLETESTARTING = 2;
        LIVEBROADCASTSTATUS_LIFECYCLESTATU_CREATED = 3;
        LIVEBROADCASTSTATUS_LIFECYCLESTATU_LIVE = 4;
        LIVEBROADCASTSTATUS_LIFECYCLESTATU_LIVESTARTING = 5;
        LIVEBROADCASTSTATUS_LIFECYCLESTATU_READY = 6;
        LIVEBROADCASTSTATUS_LIFECYCLESTATU_RECLAIMED = 7;
        LIVEBROADCASTSTATUS_LIFECYCLESTATU_REVOKED = 8;
        LIVEBROADCASTSTATUS_LIFECYCLESTATU_TESTSTARTING = 9;
        LIVEBROADCASTSTATUS_LIFECYCLESTATU_TESTING = 10;
    }
    LiveBroadcastStatus_LifeCycleStatu lifeCycleStatus = 1;
    // Priority of the live broadcast event (internal state).
    enum LiveBroadcastStatus_LiveBroadcastPriority {
        LIVEBROADCASTSTATUS_LIVEBROADCASTPRIORITY_HIGH = 0;
        LIVEBROADCASTSTATUS_LIVEBROADCASTPRIORITY_LOW = 1;
        LIVEBROADCASTSTATUS_LIVEBROADCASTPRIORITY_NORMAL = 2;
    }
    LiveBroadcastStatus_LiveBroadcastPriority liveBroadcastPriority = 2;
    // The broadcast's privacy status. Note that the broadcast represents exactly one YouTube video, so the privacy settings are identical to those supported for videos. In addition, you can set this field by modifying the broadcast resource or by setting the privacyStatus field of the corresponding video resource.
    enum LiveBroadcastStatus_PrivacyStatu {
        LIVEBROADCASTSTATUS_PRIVACYSTATU_PRIVATE = 0;
        LIVEBROADCASTSTATUS_PRIVACYSTATU_PUBLIC = 1;
        LIVEBROADCASTSTATUS_PRIVACYSTATU_UNLISTED = 2;
    }
    LiveBroadcastStatus_PrivacyStatu privacyStatus = 3;
    // The broadcast's recording status.
    enum LiveBroadcastStatus_RecordingStatu {
        LIVEBROADCASTSTATUS_RECORDINGSTATU_NOTRECORDING = 0;
        LIVEBROADCASTSTATUS_RECORDINGSTATU_RECORDED = 1;
        LIVEBROADCASTSTATUS_RECORDINGSTATU_RECORDING = 2;
    }
    LiveBroadcastStatus_RecordingStatu recordingStatus = 4;
}

message LiveChatBan {
    // Etag of this resource.
    string etag = 1;
    // The ID that YouTube assigns to uniquely identify the ban.
    string id = 2;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#liveChatBan".
    string kind = 3;
    // The snippet object contains basic details about the ban.
    LiveChatBanSnippet snippet = 4;
}

message LiveChatBanSnippet {
    // The duration of a ban, only filled if the ban has type TEMPORARY.
    string banDurationSeconds = 1;
    ChannelProfileDetails bannedUserDetails = 2;
    // The chat this ban is pertinent to.
    string liveChatId = 3;
    // The type of ban.
    enum LiveChatBanSnippet_Type {
        LIVECHATBANSNIPPET_TYPE_PERMANENT = 0;
        LIVECHATBANSNIPPET_TYPE_TEMPORARY = 1;
    }
    LiveChatBanSnippet_Type type = 4;
}

message LiveChatFanFundingEventDetails {
    // A rendered string that displays the fund amount and currency to the user.
    string amountDisplayString = 1;
    // The amount of the fund.
    string amountMicros = 2;
    // The currency in which the fund was made.
    string currency = 3;
    // The comment added by the user to this fan funding event.
    string userComment = 4;
}

message LiveChatMessage {
    // The authorDetails object contains basic details about the user that posted this message.
    LiveChatMessageAuthorDetails authorDetails = 1;
    // Etag of this resource.
    string etag = 2;
    // The ID that YouTube assigns to uniquely identify the message.
    string id = 3;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#liveChatMessage".
    string kind = 4;
    // The snippet object contains basic details about the message.
    LiveChatMessageSnippet snippet = 5;
}

message LiveChatMessageAuthorDetails {
    // The YouTube channel ID.
    string channelId = 1;
    // The channel's URL.
    string channelUrl = 2;
    // The channel's display name.
    string displayName = 3;
    // Whether the author is a moderator of the live chat.
    bool isChatModerator = 4;
    // Whether the author is the owner of the live chat.
    bool isChatOwner = 5;
    // Whether the author is a sponsor of the live chat.
    bool isChatSponsor = 6;
    // Whether the author's identity has been verified by YouTube.
    bool isVerified = 7;
    // The channels's avatar URL.
    string profileImageUrl = 8;
}

message LiveChatMessageDeletedDetails {
    string deletedMessageId = 1;
}

message LiveChatMessageListResponse {
    // Etag of this resource.
    string etag = 1;
    // Serialized EventId of the request which produced this response.
    string eventId = 2;
    // A list of live chat messages.
    repeated LiveChatMessage items = 3;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#liveChatMessageListResponse".
    string kind = 4;
    // The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
    string nextPageToken = 5;
    // The date and time when the underlying stream went offline. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
    string offlineAt = 6;
    PageInfo pageInfo = 7;
    // The amount of time the client should wait before polling again.
    uint32 pollingIntervalMillis = 8;
    TokenPagination tokenPagination = 9;
    // The visitorId identifies the visitor.
    string visitorId = 10;
}

message LiveChatMessageRetractedDetails {
    string retractedMessageId = 1;
}

message LiveChatMessageSnippet {
    // The ID of the user that authored this message, this field is not always filled. textMessageEvent - the user that wrote the message fanFundingEvent - the user that funded the broadcast newSponsorEvent - the user that just became a sponsor messageDeletedEvent - the moderator that took the action messageRetractedEvent - the author that retracted their message userBannedEvent - the moderator that took the action superChatEvent - the user that made the purchase
    string authorChannelId = 1;
    // Contains a string that can be displayed to the user. If this field is not present the message is silent, at the moment only messages of type TOMBSTONE and CHAT_ENDED_EVENT are silent.
    string displayMessage = 2;
    // Details about the funding event, this is only set if the type is 'fanFundingEvent'.
    LiveChatFanFundingEventDetails fanFundingEventDetails = 3;
    // Whether the message has display content that should be displayed to users.
    bool hasDisplayContent = 4;
    string liveChatId = 5;
    LiveChatMessageDeletedDetails messageDeletedDetails = 6;
    LiveChatMessageRetractedDetails messageRetractedDetails = 7;
    LiveChatPollClosedDetails pollClosedDetails = 8;
    LiveChatPollEditedDetails pollEditedDetails = 9;
    LiveChatPollOpenedDetails pollOpenedDetails = 10;
    LiveChatPollVotedDetails pollVotedDetails = 11;
    // The date and time when the message was orignally published. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
    string publishedAt = 12;
    // Details about the Super Chat event, this is only set if the type is 'superChatEvent'.
    LiveChatSuperChatDetails superChatDetails = 13;
    // Details about the text message, this is only set if the type is 'textMessageEvent'.
    LiveChatTextMessageDetails textMessageDetails = 14;
    // The type of message, this will always be present, it determines the contents of the message as well as which fields will be present.
    enum LiveChatMessageSnippet_Type {
        LIVECHATMESSAGESNIPPET_TYPE_CHATENDEDEVENT = 0;
        LIVECHATMESSAGESNIPPET_TYPE_FANFUNDINGEVENT = 1;
        LIVECHATMESSAGESNIPPET_TYPE_MESSAGEDELETEDEVENT = 2;
        LIVECHATMESSAGESNIPPET_TYPE_MESSAGERETRACTEDEVENT = 3;
        LIVECHATMESSAGESNIPPET_TYPE_NEWSPONSOREVENT = 4;
        LIVECHATMESSAGESNIPPET_TYPE_POLLCLOSEDEVENT = 5;
        LIVECHATMESSAGESNIPPET_TYPE_POLLEDITEDEVENT = 6;
        LIVECHATMESSAGESNIPPET_TYPE_POLLOPENEDEVENT = 7;
        LIVECHATMESSAGESNIPPET_TYPE_POLLVOTEDEVENT = 8;
        LIVECHATMESSAGESNIPPET_TYPE_SPONSORONLYMODEENDEDEVENT = 9;
        LIVECHATMESSAGESNIPPET_TYPE_SPONSORONLYMODESTARTEDEVENT = 10;
        LIVECHATMESSAGESNIPPET_TYPE_SUPERCHATEVENT = 11;
        LIVECHATMESSAGESNIPPET_TYPE_TEXTMESSAGEEVENT = 12;
        LIVECHATMESSAGESNIPPET_TYPE_TOMBSTONE = 13;
        LIVECHATMESSAGESNIPPET_TYPE_USERBANNEDEVENT = 14;
    }
    LiveChatMessageSnippet_Type type = 15;
    LiveChatUserBannedMessageDetails userBannedDetails = 16;
}

message LiveChatModerator {
    // Etag of this resource.
    string etag = 1;
    // The ID that YouTube assigns to uniquely identify the moderator.
    string id = 2;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#liveChatModerator".
    string kind = 3;
    // The snippet object contains basic details about the moderator.
    LiveChatModeratorSnippet snippet = 4;
}

message LiveChatModeratorListResponse {
    // Etag of this resource.
    string etag = 1;
    // Serialized EventId of the request which produced this response.
    string eventId = 2;
    // A list of moderators that match the request criteria.
    repeated LiveChatModerator items = 3;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#liveChatModeratorListResponse".
    string kind = 4;
    // The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
    string nextPageToken = 5;
    PageInfo pageInfo = 6;
    // The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
    string prevPageToken = 7;
    TokenPagination tokenPagination = 8;
    // The visitorId identifies the visitor.
    string visitorId = 9;
}

message LiveChatModeratorSnippet {
    // The ID of the live chat this moderator can act on.
    string liveChatId = 1;
    // Details about the moderator.
    ChannelProfileDetails moderatorDetails = 2;
}

message LiveChatPollClosedDetails {
    // The id of the poll that was closed.
    string pollId = 1;
}

message LiveChatPollEditedDetails {
    string id = 1;
    repeated LiveChatPollItem items = 2;
    string prompt = 3;
}

message LiveChatPollItem {
    // Plain text description of the item.
    string description = 1;
    string itemId = 2;
}

message LiveChatPollOpenedDetails {
    string id = 1;
    repeated LiveChatPollItem items = 2;
    string prompt = 3;
}

message LiveChatPollVotedDetails {
    // The poll item the user chose.
    string itemId = 1;
    // The poll the user voted on.
    string pollId = 2;
}

message LiveChatSuperChatDetails {
    // A rendered string that displays the fund amount and currency to the user.
    string amountDisplayString = 1;
    // The amount purchased by the user, in micros (1,750,000 micros = 1.75).
    string amountMicros = 2;
    // The currency in which the purchase was made.
    string currency = 3;
    // The tier in which the amount belongs to. Lower amounts belong to lower tiers. Starts at 1.
    uint32 tier = 4;
    // The comment added by the user to this Super Chat event.
    string userComment = 5;
}

message LiveChatTextMessageDetails {
    // The user's message.
    string messageText = 1;
}

message LiveChatUserBannedMessageDetails {
    // The duration of the ban. This property is only present if the banType is temporary.
    string banDurationSeconds = 1;
    // The type of ban.
    enum LiveChatUserBannedMessageDetails_BanType {
        LIVECHATUSERBANNEDMESSAGEDETAILS_BANTYPE_PERMANENT = 0;
        LIVECHATUSERBANNEDMESSAGEDETAILS_BANTYPE_TEMPORARY = 1;
    }
    LiveChatUserBannedMessageDetails_BanType banType = 2;
    // The details of the user that was banned.
    ChannelProfileDetails bannedUserDetails = 3;
}

message LiveStream {
    // The cdn object defines the live stream's content delivery network (CDN) settings. These settings provide details about the manner in which you stream your content to YouTube.
    CdnSettings cdn = 1;
    // The content_details object contains information about the stream, including the closed captions ingestion URL.
    LiveStreamContentDetails contentDetails = 2;
    // Etag of this resource.
    string etag = 3;
    // The ID that YouTube assigns to uniquely identify the stream.
    string id = 4;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#liveStream".
    string kind = 5;
    // The snippet object contains basic details about the stream, including its channel, title, and description.
    LiveStreamSnippet snippet = 6;
    // The status object contains information about live stream's status.
    LiveStreamStatus status = 7;
}

message LiveStreamConfigurationIssue {
    // The long-form description of the issue and how to resolve it.
    string description = 1;
    // The short-form reason for this issue.
    string reason = 2;
    // How severe this issue is to the stream.
    enum LiveStreamConfigurationIssue_Severity {
        LIVESTREAMCONFIGURATIONISSUE_SEVERITY_ERROR = 0;
        LIVESTREAMCONFIGURATIONISSUE_SEVERITY_INFO = 1;
        LIVESTREAMCONFIGURATIONISSUE_SEVERITY_WARNING = 2;
    }
    LiveStreamConfigurationIssue_Severity severity = 3;
    // The kind of error happening.
    enum LiveStreamConfigurationIssue_Type {
        LIVESTREAMCONFIGURATIONISSUE_TYPE_AUDIOBITRATEHIGH = 0;
        LIVESTREAMCONFIGURATIONISSUE_TYPE_AUDIOBITRATELOW = 1;
        LIVESTREAMCONFIGURATIONISSUE_TYPE_AUDIOBITRATEMISMATCH = 2;
        LIVESTREAMCONFIGURATIONISSUE_TYPE_AUDIOCODEC = 3;
        LIVESTREAMCONFIGURATIONISSUE_TYPE_AUDIOCODECMISMATCH = 4;
        LIVESTREAMCONFIGURATIONISSUE_TYPE_AUDIOSAMPLERATE = 5;
        LIVESTREAMCONFIGURATIONISSUE_TYPE_AUDIOSAMPLERATEMISMATCH = 6;
        LIVESTREAMCONFIGURATIONISSUE_TYPE_AUDIOSTEREOMISMATCH = 7;
        LIVESTREAMCONFIGURATIONISSUE_TYPE_AUDIOTOOMANYCHANNELS = 8;
        LIVESTREAMCONFIGURATIONISSUE_TYPE_BADCONTAINER = 9;
        LIVESTREAMCONFIGURATIONISSUE_TYPE_BITRATEHIGH = 10;
        LIVESTREAMCONFIGURATIONISSUE_TYPE_BITRATELOW = 11;
        LIVESTREAMCONFIGURATIONISSUE_TYPE_FRAMERATEHIGH = 12;
        LIVESTREAMCONFIGURATIONISSUE_TYPE_FRAMERATEMISMATCH = 13;
        LIVESTREAMCONFIGURATIONISSUE_TYPE_GOPMISMATCH = 14;
        LIVESTREAMCONFIGURATIONISSUE_TYPE_GOPSIZELONG = 15;
        LIVESTREAMCONFIGURATIONISSUE_TYPE_GOPSIZEOVER = 16;
        LIVESTREAMCONFIGURATIONISSUE_TYPE_GOPSIZESHORT = 17;
        LIVESTREAMCONFIGURATIONISSUE_TYPE_INTERLACEDVIDEO = 18;
        LIVESTREAMCONFIGURATIONISSUE_TYPE_MULTIPLEAUDIOSTREAMS = 19;
        LIVESTREAMCONFIGURATIONISSUE_TYPE_MULTIPLEVIDEOSTREAMS = 20;
        LIVESTREAMCONFIGURATIONISSUE_TYPE_NOAUDIOSTREAM = 21;
        LIVESTREAMCONFIGURATIONISSUE_TYPE_NOVIDEOSTREAM = 22;
        LIVESTREAMCONFIGURATIONISSUE_TYPE_OPENGOP = 23;
        LIVESTREAMCONFIGURATIONISSUE_TYPE_RESOLUTIONMISMATCH = 24;
        LIVESTREAMCONFIGURATIONISSUE_TYPE_VIDEOBITRATEMISMATCH = 25;
        LIVESTREAMCONFIGURATIONISSUE_TYPE_VIDEOCODEC = 26;
        LIVESTREAMCONFIGURATIONISSUE_TYPE_VIDEOCODECMISMATCH = 27;
        LIVESTREAMCONFIGURATIONISSUE_TYPE_VIDEOINGESTIONSTARVED = 28;
        LIVESTREAMCONFIGURATIONISSUE_TYPE_VIDEOINTERLACEMISMATCH = 29;
        LIVESTREAMCONFIGURATIONISSUE_TYPE_VIDEOPROFILEMISMATCH = 30;
        LIVESTREAMCONFIGURATIONISSUE_TYPE_VIDEORESOLUTIONSUBOPTIMAL = 31;
        LIVESTREAMCONFIGURATIONISSUE_TYPE_VIDEORESOLUTIONUNSUPPORTED = 32;
    }
    LiveStreamConfigurationIssue_Type type = 4;
}

message LiveStreamContentDetails {
    // The ingestion URL where the closed captions of this stream are sent.
    string closedCaptionsIngestionUrl = 1;
    // Indicates whether the stream is reusable, which means that it can be bound to multiple broadcasts. It is common for broadcasters to reuse the same stream for many different broadcasts if those broadcasts occur at different times.
    // 
    // If you set this value to false, then the stream will not be reusable, which means that it can only be bound to one broadcast. Non-reusable streams differ from reusable streams in the following ways:  
    // - A non-reusable stream can only be bound to one broadcast. 
    // - A non-reusable stream might be deleted by an automated process after the broadcast ends. 
    // - The  liveStreams.list method does not list non-reusable streams if you call the method and set the mine parameter to true. The only way to use that method to retrieve the resource for a non-reusable stream is to use the id parameter to identify the stream.
    bool isReusable = 2;
}

message LiveStreamHealthStatus {
    // The configurations issues on this stream
    repeated LiveStreamConfigurationIssue configurationIssues = 1;
    // The last time this status was updated (in seconds)
    string lastUpdateTimeSeconds = 2;
    // The status code of this stream
    enum LiveStreamHealthStatus_Statu {
        LIVESTREAMHEALTHSTATUS_STATU_BAD = 0;
        LIVESTREAMHEALTHSTATUS_STATU_GOOD = 1;
        LIVESTREAMHEALTHSTATUS_STATU_NODATA = 2;
        LIVESTREAMHEALTHSTATUS_STATU_OK = 3;
        LIVESTREAMHEALTHSTATUS_STATU_REVOKED = 4;
    }
    LiveStreamHealthStatus_Statu status = 3;
}

message LiveStreamListResponse {
    // Etag of this resource.
    string etag = 1;
    // Serialized EventId of the request which produced this response.
    string eventId = 2;
    // A list of live streams that match the request criteria.
    repeated LiveStream items = 3;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#liveStreamListResponse".
    string kind = 4;
    // The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
    string nextPageToken = 5;
    PageInfo pageInfo = 6;
    // The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
    string prevPageToken = 7;
    TokenPagination tokenPagination = 8;
    // The visitorId identifies the visitor.
    string visitorId = 9;
}

message LiveStreamSnippet {
    // The ID that YouTube uses to uniquely identify the channel that is transmitting the stream.
    string channelId = 1;
    // The stream's description. The value cannot be longer than 10000 characters.
    string description = 2;
    bool isDefaultStream = 3;
    // The date and time that the stream was created. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
    string publishedAt = 4;
    // The stream's title. The value must be between 1 and 128 characters long.
    string title = 5;
}

message LiveStreamStatus {
    // The health status of the stream.
    LiveStreamHealthStatus healthStatus = 1;
    enum LiveStreamStatus_StreamStatu {
        LIVESTREAMSTATUS_STREAMSTATU_ACTIVE = 0;
        LIVESTREAMSTATUS_STREAMSTATU_CREATED = 1;
        LIVESTREAMSTATUS_STREAMSTATU_ERROR = 2;
        LIVESTREAMSTATUS_STREAMSTATU_INACTIVE = 3;
        LIVESTREAMSTATUS_STREAMSTATU_READY = 4;
    }
    LiveStreamStatus_StreamStatu streamStatus = 2;
}

message LocalizedProperty {
    string default = 1;
    // The language of the default property.
    LanguageTag defaultLanguage = 2;
    repeated LocalizedString localized = 3;
}

message LocalizedString {
    string language = 1;
    string value = 2;
}

message MonitorStreamInfo {
    // If you have set the enableMonitorStream property to true, then this property determines the length of the live broadcast delay.
    uint32 broadcastStreamDelayMs = 1;
    // HTML code that embeds a player that plays the monitor stream.
    string embedHtml = 2;
    // This value determines whether the monitor stream is enabled for the broadcast. If the monitor stream is enabled, then YouTube will broadcast the event content on a special stream intended only for the broadcaster's consumption. The broadcaster can use the stream to review the event content and also to identify the optimal times to insert cuepoints.
    // 
    // You need to set this value to true if you intend to have a broadcast delay for your event.
    // 
    // Note: This property cannot be updated once the broadcast is in the testing or live state.
    bool enableMonitorStream = 3;
}

message PageInfo {
    // The number of results included in the API response.
    int32 resultsPerPage = 1;
    // The total number of results in the result set.
    int32 totalResults = 2;
}

message Playlist {
    // The contentDetails object contains information like video count.
    PlaylistContentDetails contentDetails = 1;
    // Etag of this resource.
    string etag = 2;
    // The ID that YouTube uses to uniquely identify the playlist.
    string id = 3;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#playlist".
    string kind = 4;
    // Localizations for different languages
    map<string, PlaylistLocalization> localizations = 5;
    // The player object contains information that you would use to play the playlist in an embedded player.
    PlaylistPlayer player = 6;
    // The snippet object contains basic details about the playlist, such as its title and description.
    PlaylistSnippet snippet = 7;
    // The status object contains status information for the playlist.
    PlaylistStatus status = 8;
}

message PlaylistContentDetails {
    // The number of videos in the playlist.
    uint32 itemCount = 1;
}

message PlaylistItem {
    // The contentDetails object is included in the resource if the included item is a YouTube video. The object contains additional information about the video.
    PlaylistItemContentDetails contentDetails = 1;
    // Etag of this resource.
    string etag = 2;
    // The ID that YouTube uses to uniquely identify the playlist item.
    string id = 3;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#playlistItem".
    string kind = 4;
    // The snippet object contains basic details about the playlist item, such as its title and position in the playlist.
    PlaylistItemSnippet snippet = 5;
    // The status object contains information about the playlist item's privacy status.
    PlaylistItemStatus status = 6;
}

message PlaylistItemContentDetails {
    // The time, measured in seconds from the start of the video, when the video should stop playing. (The playlist owner can specify the times when the video should start and stop playing when the video is played in the context of the playlist.) By default, assume that the video.endTime is the end of the video.
    string endAt = 1;
    // A user-generated note for this item.
    string note = 2;
    // The time, measured in seconds from the start of the video, when the video should start playing. (The playlist owner can specify the times when the video should start and stop playing when the video is played in the context of the playlist.) The default value is 0.
    string startAt = 3;
    // The ID that YouTube uses to uniquely identify a video. To retrieve the video resource, set the id query parameter to this value in your API request.
    string videoId = 4;
    // The date and time that the video was published to YouTube. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
    string videoPublishedAt = 5;
}

message PlaylistItemListResponse {
    // Etag of this resource.
    string etag = 1;
    // Serialized EventId of the request which produced this response.
    string eventId = 2;
    // A list of playlist items that match the request criteria.
    repeated PlaylistItem items = 3;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#playlistItemListResponse".
    string kind = 4;
    // The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
    string nextPageToken = 5;
    PageInfo pageInfo = 6;
    // The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
    string prevPageToken = 7;
    TokenPagination tokenPagination = 8;
    // The visitorId identifies the visitor.
    string visitorId = 9;
}

message PlaylistItemSnippet {
    // The ID that YouTube uses to uniquely identify the user that added the item to the playlist.
    string channelId = 1;
    // Channel title for the channel that the playlist item belongs to.
    string channelTitle = 2;
    // The item's description.
    string description = 3;
    // The ID that YouTube uses to uniquely identify the playlist that the playlist item is in.
    string playlistId = 4;
    // The order in which the item appears in the playlist. The value uses a zero-based index, so the first item has a position of 0, the second item has a position of 1, and so forth.
    uint32 position = 5;
    // The date and time that the item was added to the playlist. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
    string publishedAt = 6;
    // The id object contains information that can be used to uniquely identify the resource that is included in the playlist as the playlist item.
    ResourceId resourceId = 7;
    // A map of thumbnail images associated with the playlist item. For each object in the map, the key is the name of the thumbnail image, and the value is an object that contains other information about the thumbnail.
    ThumbnailDetails thumbnails = 8;
    // The item's title.
    string title = 9;
}

message PlaylistItemStatus {
    // This resource's privacy status.
    enum PlaylistItemStatus_PrivacyStatu {
        PLAYLISTITEMSTATUS_PRIVACYSTATU_PRIVATE = 0;
        PLAYLISTITEMSTATUS_PRIVACYSTATU_PUBLIC = 1;
        PLAYLISTITEMSTATUS_PRIVACYSTATU_UNLISTED = 2;
    }
    PlaylistItemStatus_PrivacyStatu privacyStatus = 1;
}

message PlaylistListResponse {
    // Etag of this resource.
    string etag = 1;
    // Serialized EventId of the request which produced this response.
    string eventId = 2;
    // A list of playlists that match the request criteria.
    repeated Playlist items = 3;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#playlistListResponse".
    string kind = 4;
    // The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
    string nextPageToken = 5;
    PageInfo pageInfo = 6;
    // The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
    string prevPageToken = 7;
    TokenPagination tokenPagination = 8;
    // The visitorId identifies the visitor.
    string visitorId = 9;
}

message PlaylistLocalization {
    // The localized strings for playlist's description.
    string description = 1;
    // The localized strings for playlist's title.
    string title = 2;
}

message PlaylistPlayer {
    // An <iframe> tag that embeds a player that will play the playlist.
    string embedHtml = 1;
}

message PlaylistSnippet {
    // The ID that YouTube uses to uniquely identify the channel that published the playlist.
    string channelId = 1;
    // The channel title of the channel that the video belongs to.
    string channelTitle = 2;
    // The language of the playlist's default title and description.
    string defaultLanguage = 3;
    // The playlist's description.
    string description = 4;
    // Localized title and description, read-only.
    PlaylistLocalization localized = 5;
    // The date and time that the playlist was created. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
    string publishedAt = 6;
    // Keyword tags associated with the playlist.
    repeated string tags = 7;
    // A map of thumbnail images associated with the playlist. For each object in the map, the key is the name of the thumbnail image, and the value is an object that contains other information about the thumbnail.
    ThumbnailDetails thumbnails = 8;
    // The playlist's title.
    string title = 9;
}

message PlaylistStatus {
    // The playlist's privacy status.
    enum PlaylistStatus_PrivacyStatu {
        PLAYLISTSTATUS_PRIVACYSTATU_PRIVATE = 0;
        PLAYLISTSTATUS_PRIVACYSTATU_PUBLIC = 1;
        PLAYLISTSTATUS_PRIVACYSTATU_UNLISTED = 2;
    }
    PlaylistStatus_PrivacyStatu privacyStatus = 1;
}

message PromotedItem {
    // A custom message to display for this promotion. This field is currently ignored unless the promoted item is a website.
    string customMessage = 1;
    // Identifies the promoted item.
    PromotedItemId id = 2;
    // If true, the content owner's name will be used when displaying the promotion. This field can only be set when the update is made on behalf of the content owner.
    bool promotedByContentOwner = 3;
    // The temporal position within the video where the promoted item will be displayed. If present, it overrides the default timing.
    InvideoTiming timing = 4;
}

message PromotedItemId {
    // If type is recentUpload, this field identifies the channel from which to take the recent upload. If missing, the channel is assumed to be the same channel for which the invideoPromotion is set.
    string recentlyUploadedBy = 1;
    // Describes the type of the promoted item.
    enum PromotedItemId_Type {
        PROMOTEDITEMID_TYPE_RECENTUPLOAD = 0;
        PROMOTEDITEMID_TYPE_VIDEO = 1;
        PROMOTEDITEMID_TYPE_WEBSITE = 2;
    }
    PromotedItemId_Type type = 2;
    // If the promoted item represents a video, this field represents the unique YouTube ID identifying it. This field will be present only if type has the value video.
    string videoId = 3;
    // If the promoted item represents a website, this field represents the url pointing to the website. This field will be present only if type has the value website.
    string websiteUrl = 4;
}

message PropertyValue {
    // A property.
    string property = 1;
    // The property's value.
    string value = 2;
}

message ResourceId {
    // The ID that YouTube uses to uniquely identify the referred resource, if that resource is a channel. This property is only present if the resourceId.kind value is youtube#channel.
    string channelId = 1;
    // The type of the API resource.
    string kind = 2;
    // The ID that YouTube uses to uniquely identify the referred resource, if that resource is a playlist. This property is only present if the resourceId.kind value is youtube#playlist.
    string playlistId = 3;
    // The ID that YouTube uses to uniquely identify the referred resource, if that resource is a video. This property is only present if the resourceId.kind value is youtube#video.
    string videoId = 4;
}

message SearchListResponse {
    // Etag of this resource.
    string etag = 1;
    // Serialized EventId of the request which produced this response.
    string eventId = 2;
    // A list of results that match the search criteria.
    repeated SearchResult items = 3;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#searchListResponse".
    string kind = 4;
    // The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
    string nextPageToken = 5;
    PageInfo pageInfo = 6;
    // The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
    string prevPageToken = 7;
    string regionCode = 8;
    TokenPagination tokenPagination = 9;
    // The visitorId identifies the visitor.
    string visitorId = 10;
}

message SearchResult {
    // Etag of this resource.
    string etag = 1;
    // The id object contains information that can be used to uniquely identify the resource that matches the search request.
    ResourceId id = 2;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#searchResult".
    string kind = 3;
    // The snippet object contains basic details about a search result, such as its title or description. For example, if the search result is a video, then the title will be the video's title and the description will be the video's description.
    SearchResultSnippet snippet = 4;
}

message SearchResultSnippet {
    // The value that YouTube uses to uniquely identify the channel that published the resource that the search result identifies.
    string channelId = 1;
    // The title of the channel that published the resource that the search result identifies.
    string channelTitle = 2;
    // A description of the search result.
    string description = 3;
    // It indicates if the resource (video or channel) has upcoming/active live broadcast content. Or it's "none" if there is not any upcoming/active live broadcasts.
    enum SearchResultSnippet_LiveBroadcastContent {
        SEARCHRESULTSNIPPET_LIVEBROADCASTCONTENT_LIVE = 0;
        SEARCHRESULTSNIPPET_LIVEBROADCASTCONTENT_NONE = 1;
        SEARCHRESULTSNIPPET_LIVEBROADCASTCONTENT_UPCOMING = 2;
    }
    SearchResultSnippet_LiveBroadcastContent liveBroadcastContent = 4;
    // The creation date and time of the resource that the search result identifies. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
    string publishedAt = 5;
    // A map of thumbnail images associated with the search result. For each object in the map, the key is the name of the thumbnail image, and the value is an object that contains other information about the thumbnail.
    ThumbnailDetails thumbnails = 6;
    // The title of the search result.
    string title = 7;
}

message Sponsor {
    // Etag of this resource.
    string etag = 1;
    // The ID that YouTube assigns to uniquely identify the sponsor.
    string id = 2;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#sponsor".
    string kind = 3;
    // The snippet object contains basic details about the sponsor.
    SponsorSnippet snippet = 4;
}

message SponsorListResponse {
    // Etag of this resource.
    string etag = 1;
    // Serialized EventId of the request which produced this response.
    string eventId = 2;
    // A list of sponsors that match the request criteria.
    repeated Sponsor items = 3;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#sponsorListResponse".
    string kind = 4;
    // The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
    string nextPageToken = 5;
    PageInfo pageInfo = 6;
    TokenPagination tokenPagination = 7;
    // The visitorId identifies the visitor.
    string visitorId = 8;
}

message SponsorSnippet {
    // The id of the channel being sponsored.
    string channelId = 1;
    // Details about the sponsor.
    ChannelProfileDetails sponsorDetails = 2;
    // The date and time when the user became a sponsor. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
    string sponsorSince = 3;
}

message Subscription {
    // The contentDetails object contains basic statistics about the subscription.
    SubscriptionContentDetails contentDetails = 1;
    // Etag of this resource.
    string etag = 2;
    // The ID that YouTube uses to uniquely identify the subscription.
    string id = 3;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#subscription".
    string kind = 4;
    // The snippet object contains basic details about the subscription, including its title and the channel that the user subscribed to.
    SubscriptionSnippet snippet = 5;
    // The subscriberSnippet object contains basic details about the sbuscriber.
    SubscriptionSubscriberSnippet subscriberSnippet = 6;
}

message SubscriptionContentDetails {
    // The type of activity this subscription is for (only uploads, everything).
    enum SubscriptionContentDetails_ActivityType {
        SUBSCRIPTIONCONTENTDETAILS_ACTIVITYTYPE_ALL = 0;
        SUBSCRIPTIONCONTENTDETAILS_ACTIVITYTYPE_UPLOADS = 1;
    }
    SubscriptionContentDetails_ActivityType activityType = 1;
    // The number of new items in the subscription since its content was last read.
    uint32 newItemCount = 2;
    // The approximate number of items that the subscription points to.
    uint32 totalItemCount = 3;
}

message SubscriptionListResponse {
    // Etag of this resource.
    string etag = 1;
    // Serialized EventId of the request which produced this response.
    string eventId = 2;
    // A list of subscriptions that match the request criteria.
    repeated Subscription items = 3;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#subscriptionListResponse".
    string kind = 4;
    // The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
    string nextPageToken = 5;
    PageInfo pageInfo = 6;
    // The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
    string prevPageToken = 7;
    TokenPagination tokenPagination = 8;
    // The visitorId identifies the visitor.
    string visitorId = 9;
}

message SubscriptionSnippet {
    // The ID that YouTube uses to uniquely identify the subscriber's channel.
    string channelId = 1;
    // Channel title for the channel that the subscription belongs to.
    string channelTitle = 2;
    // The subscription's details.
    string description = 3;
    // The date and time that the subscription was created. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
    string publishedAt = 4;
    // The id object contains information about the channel that the user subscribed to.
    ResourceId resourceId = 5;
    // A map of thumbnail images associated with the video. For each object in the map, the key is the name of the thumbnail image, and the value is an object that contains other information about the thumbnail.
    ThumbnailDetails thumbnails = 6;
    // The subscription's title.
    string title = 7;
}

message SubscriptionSubscriberSnippet {
    // The channel ID of the subscriber.
    string channelId = 1;
    // The description of the subscriber.
    string description = 2;
    // Thumbnails for this subscriber.
    ThumbnailDetails thumbnails = 3;
    // The title of the subscriber.
    string title = 4;
}

message SuperChatEvent {
    // Etag of this resource.
    string etag = 1;
    // The ID that YouTube assigns to uniquely identify the Super Chat event.
    string id = 2;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#superChatEvent".
    string kind = 3;
    // The snippet object contains basic details about the Super Chat event.
    SuperChatEventSnippet snippet = 4;
}

message SuperChatEventListResponse {
    // Etag of this resource.
    string etag = 1;
    // Serialized EventId of the request which produced this response.
    string eventId = 2;
    // A list of Super Chat purchases that match the request criteria.
    repeated SuperChatEvent items = 3;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#superChatEventListResponse".
    string kind = 4;
    // The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
    string nextPageToken = 5;
    PageInfo pageInfo = 6;
    TokenPagination tokenPagination = 7;
    // The visitorId identifies the visitor.
    string visitorId = 8;
}

message SuperChatEventSnippet {
    // The purchase amount, in micros of the purchase currency. e.g., 1 is represented as 1000000.
    string amountMicros = 1;
    // Channel id where the event occurred.
    string channelId = 2;
    // The text contents of the comment left by the user.
    string commentText = 3;
    // The date and time when the event occurred. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
    string createdAt = 4;
    // The currency in which the purchase was made. ISO 4217.
    string currency = 5;
    // A rendered string that displays the purchase amount and currency (e.g., "$1.00"). The string is rendered for the given language.
    string displayString = 6;
    // The tier for the paid message, which is based on the amount of money spent to purchase the message.
    uint32 messageType = 7;
    // Details about the supporter.
    ChannelProfileDetails supporterDetails = 8;
}

message Thumbnail {
    // (Optional) Height of the thumbnail image.
    uint32 height = 1;
    // The thumbnail image's URL.
    string url = 2;
    // (Optional) Width of the thumbnail image.
    uint32 width = 3;
}

message ThumbnailDetails {
    // The default image for this resource.
    Thumbnail default = 1;
    // The high quality image for this resource.
    Thumbnail high = 2;
    // The maximum resolution quality image for this resource.
    Thumbnail maxres = 3;
    // The medium quality image for this resource.
    Thumbnail medium = 4;
    // The standard quality image for this resource.
    Thumbnail standard = 5;
}

message ThumbnailSetResponse {
    // Etag of this resource.
    string etag = 1;
    // Serialized EventId of the request which produced this response.
    string eventId = 2;
    // A list of thumbnails.
    repeated ThumbnailDetails items = 3;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#thumbnailSetResponse".
    string kind = 4;
    // The visitorId identifies the visitor.
    string visitorId = 5;
}

message TokenPagination {
}

message Video {
    // Age restriction details related to a video. This data can only be retrieved by the video owner.
    VideoAgeGating ageGating = 1;
    // The contentDetails object contains information about the video content, including the length of the video and its aspect ratio.
    VideoContentDetails contentDetails = 2;
    // Etag of this resource.
    string etag = 3;
    // The fileDetails object encapsulates information about the video file that was uploaded to YouTube, including the file's resolution, duration, audio and video codecs, stream bitrates, and more. This data can only be retrieved by the video owner.
    VideoFileDetails fileDetails = 4;
    // The ID that YouTube uses to uniquely identify the video.
    string id = 5;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#video".
    string kind = 6;
    // The liveStreamingDetails object contains metadata about a live video broadcast. The object will only be present in a video resource if the video is an upcoming, live, or completed live broadcast.
    VideoLiveStreamingDetails liveStreamingDetails = 7;
    // List with all localizations.
    map<string, VideoLocalization> localizations = 8;
    // The monetizationDetails object encapsulates information about the monetization status of the video.
    VideoMonetizationDetails monetizationDetails = 9;
    // The player object contains information that you would use to play the video in an embedded player.
    VideoPlayer player = 10;
    // The processingProgress object encapsulates information about YouTube's progress in processing the uploaded video file. The properties in the object identify the current processing status and an estimate of the time remaining until YouTube finishes processing the video. This part also indicates whether different types of data or content, such as file details or thumbnail images, are available for the video.
    // 
    // The processingProgress object is designed to be polled so that the video uploaded can track the progress that YouTube has made in processing the uploaded video file. This data can only be retrieved by the video owner.
    VideoProcessingDetails processingDetails = 11;
    // The projectDetails object contains information about the project specific video metadata.
    VideoProjectDetails projectDetails = 12;
    // The recordingDetails object encapsulates information about the location, date and address where the video was recorded.
    VideoRecordingDetails recordingDetails = 13;
    // The snippet object contains basic details about the video, such as its title, description, and category.
    VideoSnippet snippet = 14;
    // The statistics object contains statistics about the video.
    VideoStatistics statistics = 15;
    // The status object contains information about the video's uploading, processing, and privacy statuses.
    VideoStatus status = 16;
    // The suggestions object encapsulates suggestions that identify opportunities to improve the video quality or the metadata for the uploaded video. This data can only be retrieved by the video owner.
    VideoSuggestions suggestions = 17;
    // The topicDetails object encapsulates information about Freebase topics associated with the video.
    VideoTopicDetails topicDetails = 18;
}

message VideoAbuseReport {
    // Additional comments regarding the abuse report.
    string comments = 1;
    // The language that the content was viewed in.
    string language = 2;
    // The high-level, or primary, reason that the content is abusive. The value is an abuse report reason ID.
    string reasonId = 3;
    // The specific, or secondary, reason that this content is abusive (if available). The value is an abuse report reason ID that is a valid secondary reason for the primary reason.
    string secondaryReasonId = 4;
    // The ID that YouTube uses to uniquely identify the video.
    string videoId = 5;
}

message VideoAbuseReportReason {
    // Etag of this resource.
    string etag = 1;
    // The ID of this abuse report reason.
    string id = 2;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#videoAbuseReportReason".
    string kind = 3;
    // The snippet object contains basic details about the abuse report reason.
    VideoAbuseReportReasonSnippet snippet = 4;
}

message VideoAbuseReportReasonListResponse {
    // Etag of this resource.
    string etag = 1;
    // Serialized EventId of the request which produced this response.
    string eventId = 2;
    // A list of valid abuse reasons that are used with video.ReportAbuse.
    repeated VideoAbuseReportReason items = 3;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#videoAbuseReportReasonListResponse".
    string kind = 4;
    // The visitorId identifies the visitor.
    string visitorId = 5;
}

message VideoAbuseReportReasonSnippet {
    // The localized label belonging to this abuse report reason.
    string label = 1;
    // The secondary reasons associated with this reason, if any are available. (There might be 0 or more.)
    repeated VideoAbuseReportSecondaryReason secondaryReasons = 2;
}

message VideoAbuseReportSecondaryReason {
    // The ID of this abuse report secondary reason.
    string id = 1;
    // The localized label for this abuse report secondary reason.
    string label = 2;
}

message VideoAgeGating {
    // Indicates whether or not the video has alcoholic beverage content. Only users of legal purchasing age in a particular country, as identified by ICAP, can view the content.
    bool alcoholContent = 1;
    // Age-restricted trailers. For redband trailers and adult-rated video-games. Only users aged 18+ can view the content. The the field is true the content is restricted to viewers aged 18+. Otherwise The field won't be present.
    bool restricted = 2;
    // Video game rating, if any.
    enum VideoAgeGating_VideoGameRating {
        VIDEOAGEGATING_VIDEOGAMERATING_ANYONE = 0;
        VIDEOAGEGATING_VIDEOGAMERATING_M15PLUS = 1;
        VIDEOAGEGATING_VIDEOGAMERATING_M16PLUS = 2;
        VIDEOAGEGATING_VIDEOGAMERATING_M17PLUS = 3;
    }
    VideoAgeGating_VideoGameRating videoGameRating = 3;
}

message VideoCategory {
    // Etag of this resource.
    string etag = 1;
    // The ID that YouTube uses to uniquely identify the video category.
    string id = 2;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#videoCategory".
    string kind = 3;
    // The snippet object contains basic details about the video category, including its title.
    VideoCategorySnippet snippet = 4;
}

message VideoCategoryListResponse {
    // Etag of this resource.
    string etag = 1;
    // Serialized EventId of the request which produced this response.
    string eventId = 2;
    // A list of video categories that can be associated with YouTube videos. In this map, the video category ID is the map key, and its value is the corresponding videoCategory resource.
    repeated VideoCategory items = 3;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#videoCategoryListResponse".
    string kind = 4;
    // The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
    string nextPageToken = 5;
    PageInfo pageInfo = 6;
    // The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
    string prevPageToken = 7;
    TokenPagination tokenPagination = 8;
    // The visitorId identifies the visitor.
    string visitorId = 9;
}

message VideoCategorySnippet {
    bool assignable = 1;
    // The YouTube channel that created the video category.
    string channelId = 2;
    // The video category's title.
    string title = 3;
}

message VideoContentDetails {
    // The value of captions indicates whether the video has captions or not.
    enum VideoContentDetails_Caption {
        VIDEOCONTENTDETAILS_CAPTION_FALSE = 0;
        VIDEOCONTENTDETAILS_CAPTION_TRUE = 1;
    }
    VideoContentDetails_Caption caption = 1;
    // Specifies the ratings that the video received under various rating schemes.
    ContentRating contentRating = 2;
    // The countryRestriction object contains information about the countries where a video is (or is not) viewable.
    AccessPolicy countryRestriction = 3;
    // The value of definition indicates whether the video is available in high definition or only in standard definition.
    enum VideoContentDetails_Definition {
        VIDEOCONTENTDETAILS_DEFINITION_HD = 0;
        VIDEOCONTENTDETAILS_DEFINITION_SD = 1;
    }
    VideoContentDetails_Definition definition = 4;
    // The value of dimension indicates whether the video is available in 3D or in 2D.
    string dimension = 5;
    // The length of the video. The tag value is an ISO 8601 duration in the format PT#M#S, in which the letters PT indicate that the value specifies a period of time, and the letters M and S refer to length in minutes and seconds, respectively. The # characters preceding the M and S letters are both integers that specify the number of minutes (or seconds) of the video. For example, a value of PT15M51S indicates that the video is 15 minutes and 51 seconds long.
    string duration = 6;
    // Indicates whether the video uploader has provided a custom thumbnail image for the video. This property is only visible to the video uploader.
    bool hasCustomThumbnail = 7;
    // The value of is_license_content indicates whether the video is licensed content.
    bool licensedContent = 8;
    // Specifies the projection format of the video.
    enum VideoContentDetails_Projection {
        VIDEOCONTENTDETAILS_PROJECTION_360 = 0;
        VIDEOCONTENTDETAILS_PROJECTION_RECTANGULAR = 1;
    }
    VideoContentDetails_Projection projection = 9;
    // The regionRestriction object contains information about the countries where a video is (or is not) viewable. The object will contain either the contentDetails.regionRestriction.allowed property or the contentDetails.regionRestriction.blocked property.
    VideoContentDetailsRegionRestriction regionRestriction = 10;
}

message VideoContentDetailsRegionRestriction {
    // A list of region codes that identify countries where the video is viewable. If this property is present and a country is not listed in its value, then the video is blocked from appearing in that country. If this property is present and contains an empty list, the video is blocked in all countries.
    repeated string allowed = 1;
    // A list of region codes that identify countries where the video is blocked. If this property is present and a country is not listed in its value, then the video is viewable in that country. If this property is present and contains an empty list, the video is viewable in all countries.
    repeated string blocked = 2;
}

message VideoFileDetails {
    // A list of audio streams contained in the uploaded video file. Each item in the list contains detailed metadata about an audio stream.
    repeated VideoFileDetailsAudioStream audioStreams = 1;
    // The uploaded video file's combined (video and audio) bitrate in bits per second.
    string bitrateBps = 2;
    // The uploaded video file's container format.
    string container = 3;
    // The date and time when the uploaded video file was created. The value is specified in ISO 8601 format. Currently, the following ISO 8601 formats are supported:  
    // - Date only: YYYY-MM-DD 
    // - Naive time: YYYY-MM-DDTHH:MM:SS 
    // - Time with timezone: YYYY-MM-DDTHH:MM:SS+HH:MM
    string creationTime = 4;
    // The length of the uploaded video in milliseconds.
    string durationMs = 5;
    // The uploaded file's name. This field is present whether a video file or another type of file was uploaded.
    string fileName = 6;
    // The uploaded file's size in bytes. This field is present whether a video file or another type of file was uploaded.
    string fileSize = 7;
    // The uploaded file's type as detected by YouTube's video processing engine. Currently, YouTube only processes video files, but this field is present whether a video file or another type of file was uploaded.
    enum VideoFileDetails_FileType {
        VIDEOFILEDETAILS_FILETYPE_ARCHIVE = 0;
        VIDEOFILEDETAILS_FILETYPE_AUDIO = 1;
        VIDEOFILEDETAILS_FILETYPE_DOCUMENT = 2;
        VIDEOFILEDETAILS_FILETYPE_IMAGE = 3;
        VIDEOFILEDETAILS_FILETYPE_OTHER = 4;
        VIDEOFILEDETAILS_FILETYPE_PROJECT = 5;
        VIDEOFILEDETAILS_FILETYPE_VIDEO = 6;
    }
    VideoFileDetails_FileType fileType = 8;
    // A list of video streams contained in the uploaded video file. Each item in the list contains detailed metadata about a video stream.
    repeated VideoFileDetailsVideoStream videoStreams = 9;
}

message VideoFileDetailsAudioStream {
    // The audio stream's bitrate, in bits per second.
    string bitrateBps = 1;
    // The number of audio channels that the stream contains.
    uint32 channelCount = 2;
    // The audio codec that the stream uses.
    string codec = 3;
    // A value that uniquely identifies a video vendor. Typically, the value is a four-letter vendor code.
    string vendor = 4;
}

message VideoFileDetailsVideoStream {
    // The video content's display aspect ratio, which specifies the aspect ratio in which the video should be displayed.
    double aspectRatio = 1;
    // The video stream's bitrate, in bits per second.
    string bitrateBps = 2;
    // The video codec that the stream uses.
    string codec = 3;
    // The video stream's frame rate, in frames per second.
    double frameRateFps = 4;
    // The encoded video content's height in pixels.
    uint32 heightPixels = 5;
    // The amount that YouTube needs to rotate the original source content to properly display the video.
    enum VideoFileDetailsVideoStream_Rotation {
        VIDEOFILEDETAILSVIDEOSTREAM_ROTATION_CLOCKWISE = 0;
        VIDEOFILEDETAILSVIDEOSTREAM_ROTATION_COUNTERCLOCKWISE = 1;
        VIDEOFILEDETAILSVIDEOSTREAM_ROTATION_NONE = 2;
        VIDEOFILEDETAILSVIDEOSTREAM_ROTATION_OTHER = 3;
        VIDEOFILEDETAILSVIDEOSTREAM_ROTATION_UPSIDEDOWN = 4;
    }
    VideoFileDetailsVideoStream_Rotation rotation = 6;
    // A value that uniquely identifies a video vendor. Typically, the value is a four-letter vendor code.
    string vendor = 7;
    // The encoded video content's width in pixels. You can calculate the video's encoding aspect ratio as width_pixels / height_pixels.
    uint32 widthPixels = 8;
}

message VideoGetRatingResponse {
    // Etag of this resource.
    string etag = 1;
    // Serialized EventId of the request which produced this response.
    string eventId = 2;
    // A list of ratings that match the request criteria.
    repeated VideoRating items = 3;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#videoGetRatingResponse".
    string kind = 4;
    // The visitorId identifies the visitor.
    string visitorId = 5;
}

message VideoListResponse {
    // Etag of this resource.
    string etag = 1;
    // Serialized EventId of the request which produced this response.
    string eventId = 2;
    // A list of videos that match the request criteria.
    repeated Video items = 3;
    // Identifies what kind of resource this is. Value: the fixed string "youtube#videoListResponse".
    string kind = 4;
    // The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
    string nextPageToken = 5;
    PageInfo pageInfo = 6;
    // The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
    string prevPageToken = 7;
    TokenPagination tokenPagination = 8;
    // The visitorId identifies the visitor.
    string visitorId = 9;
}

message VideoLiveStreamingDetails {
    // The ID of the currently active live chat attached to this video. This field is filled only if the video is a currently live broadcast that has live chat. Once the broadcast transitions to complete this field will be removed and the live chat closed down. For persistent broadcasts that live chat id will no longer be tied to this video but rather to the new video being displayed at the persistent page.
    string activeLiveChatId = 1;
    // The time that the broadcast actually ended. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format. This value will not be available until the broadcast is over.
    string actualEndTime = 2;
    // The time that the broadcast actually started. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format. This value will not be available until the broadcast begins.
    string actualStartTime = 3;
    // The number of viewers currently watching the broadcast. The property and its value will be present if the broadcast has current viewers and the broadcast owner has not hidden the viewcount for the video. Note that YouTube stops tracking the number of concurrent viewers for a broadcast when the broadcast ends. So, this property would not identify the number of viewers watching an archived video of a live broadcast that already ended.
    string concurrentViewers = 4;
    // The time that the broadcast is scheduled to end. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format. If the value is empty or the property is not present, then the broadcast is scheduled to continue indefinitely.
    string scheduledEndTime = 5;
    // The time that the broadcast is scheduled to begin. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
    string scheduledStartTime = 6;
}

message VideoLocalization {
    // Localized version of the video's description.
    string description = 1;
    // Localized version of the video's title.
    string title = 2;
}

message VideoMonetizationDetails {
    // The value of access indicates whether the video can be monetized or not.
    AccessPolicy access = 1;
}

message VideoPlayer {
    string embedHeight = 1;
    // An <iframe> tag that embeds a player that will play the video.
    string embedHtml = 2;
    // The embed width
    string embedWidth = 3;
}

message VideoProcessingDetails {
    // This value indicates whether video editing suggestions, which might improve video quality or the playback experience, are available for the video. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request.
    string editorSuggestionsAvailability = 1;
    // This value indicates whether file details are available for the uploaded video. You can retrieve a video's file details by requesting the fileDetails part in your videos.list() request.
    string fileDetailsAvailability = 2;
    // The reason that YouTube failed to process the video. This property will only have a value if the processingStatus property's value is failed.
    enum VideoProcessingDetails_ProcessingFailureReason {
        VIDEOPROCESSINGDETAILS_PROCESSINGFAILUREREASON_OTHER = 0;
        VIDEOPROCESSINGDETAILS_PROCESSINGFAILUREREASON_STREAMINGFAILED = 1;
        VIDEOPROCESSINGDETAILS_PROCESSINGFAILUREREASON_TRANSCODEFAILED = 2;
        VIDEOPROCESSINGDETAILS_PROCESSINGFAILUREREASON_UPLOADFAILED = 3;
    }
    VideoProcessingDetails_ProcessingFailureReason processingFailureReason = 3;
    // This value indicates whether the video processing engine has generated suggestions that might improve YouTube's ability to process the the video, warnings that explain video processing problems, or errors that cause video processing problems. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request.
    string processingIssuesAvailability = 4;
    // The processingProgress object contains information about the progress YouTube has made in processing the video. The values are really only relevant if the video's processing status is processing.
    VideoProcessingDetailsProcessingProgress processingProgress = 5;
    // The video's processing status. This value indicates whether YouTube was able to process the video or if the video is still being processed.
    enum VideoProcessingDetails_ProcessingStatu {
        VIDEOPROCESSINGDETAILS_PROCESSINGSTATU_FAILED = 0;
        VIDEOPROCESSINGDETAILS_PROCESSINGSTATU_PROCESSING = 1;
        VIDEOPROCESSINGDETAILS_PROCESSINGSTATU_SUCCEEDED = 2;
        VIDEOPROCESSINGDETAILS_PROCESSINGSTATU_TERMINATED = 3;
    }
    VideoProcessingDetails_ProcessingStatu processingStatus = 6;
    // This value indicates whether keyword (tag) suggestions are available for the video. Tags can be added to a video's metadata to make it easier for other users to find the video. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request.
    string tagSuggestionsAvailability = 7;
    // This value indicates whether thumbnail images have been generated for the video.
    string thumbnailsAvailability = 8;
}

message VideoProcessingDetailsProcessingProgress {
    // The number of parts of the video that YouTube has already processed. You can estimate the percentage of the video that YouTube has already processed by calculating:
    // 100 * parts_processed / parts_total
    // 
    // Note that since the estimated number of parts could increase without a corresponding increase in the number of parts that have already been processed, it is possible that the calculated progress could periodically decrease while YouTube processes a video.
    string partsProcessed = 1;
    // An estimate of the total number of parts that need to be processed for the video. The number may be updated with more precise estimates while YouTube processes the video.
    string partsTotal = 2;
    // An estimate of the amount of time, in millseconds, that YouTube needs to finish processing the video.
    string timeLeftMs = 3;
}

message VideoProjectDetails {
    // A list of project tags associated with the video during the upload.
    repeated string tags = 1;
}

message VideoRating {
    enum VideoRating_Rating {
        VIDEORATING_RATING_DISLIKE = 0;
        VIDEORATING_RATING_LIKE = 1;
        VIDEORATING_RATING_NONE = 2;
        VIDEORATING_RATING_UNSPECIFIED = 3;
    }
    VideoRating_Rating rating = 1;
    string videoId = 2;
}

message VideoRecordingDetails {
    // The geolocation information associated with the video.
    GeoPoint location = 1;
    // The text description of the location where the video was recorded.
    string locationDescription = 2;
    // The date and time when the video was recorded. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sssZ) format.
    string recordingDate = 3;
}

message VideoSnippet {
    // The YouTube video category associated with the video.
    string categoryId = 1;
    // The ID that YouTube uses to uniquely identify the channel that the video was uploaded to.
    string channelId = 2;
    // Channel title for the channel that the video belongs to.
    string channelTitle = 3;
    // The default_audio_language property specifies the language spoken in the video's default audio track.
    string defaultAudioLanguage = 4;
    // The language of the videos's default snippet.
    string defaultLanguage = 5;
    // The video's description.
    string description = 6;
    // Indicates if the video is an upcoming/active live broadcast. Or it's "none" if the video is not an upcoming/active live broadcast.
    enum VideoSnippet_LiveBroadcastContent {
        VIDEOSNIPPET_LIVEBROADCASTCONTENT_LIVE = 0;
        VIDEOSNIPPET_LIVEBROADCASTCONTENT_NONE = 1;
        VIDEOSNIPPET_LIVEBROADCASTCONTENT_UPCOMING = 2;
    }
    VideoSnippet_LiveBroadcastContent liveBroadcastContent = 7;
    // Localized snippet selected with the hl parameter. If no such localization exists, this field is populated with the default snippet. (Read-only)
    VideoLocalization localized = 8;
    // The date and time that the video was uploaded. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
    string publishedAt = 9;
    // A list of keyword tags associated with the video. Tags may contain spaces.
    repeated string tags = 10;
    // A map of thumbnail images associated with the video. For each object in the map, the key is the name of the thumbnail image, and the value is an object that contains other information about the thumbnail.
    ThumbnailDetails thumbnails = 11;
    // The video's title.
    string title = 12;
}

message VideoStatistics {
    // The number of comments for the video.
    string commentCount = 1;
    // The number of users who have indicated that they disliked the video by giving it a negative rating.
    string dislikeCount = 2;
    // The number of users who currently have the video marked as a favorite video.
    string favoriteCount = 3;
    // The number of users who have indicated that they liked the video by giving it a positive rating.
    string likeCount = 4;
    // The number of times the video has been viewed.
    string viewCount = 5;
}

message VideoStatus {
    // This value indicates if the video can be embedded on another website.
    bool embeddable = 1;
    // This value explains why a video failed to upload. This property is only present if the uploadStatus property indicates that the upload failed.
    enum VideoStatus_FailureReason {
        VIDEOSTATUS_FAILUREREASON_CODEC = 0;
        VIDEOSTATUS_FAILUREREASON_CONVERSION = 1;
        VIDEOSTATUS_FAILUREREASON_EMPTYFILE = 2;
        VIDEOSTATUS_FAILUREREASON_INVALIDFILE = 3;
        VIDEOSTATUS_FAILUREREASON_TOOSMALL = 4;
        VIDEOSTATUS_FAILUREREASON_UPLOADABORTED = 5;
    }
    VideoStatus_FailureReason failureReason = 2;
    // The video's license.
    enum VideoStatus_License {
        VIDEOSTATUS_LICENSE_CREATIVECOMMON = 0;
        VIDEOSTATUS_LICENSE_YOUTUBE = 1;
    }
    VideoStatus_License license = 3;
    // The video's privacy status.
    enum VideoStatus_PrivacyStatu {
        VIDEOSTATUS_PRIVACYSTATU_PRIVATE = 0;
        VIDEOSTATUS_PRIVACYSTATU_PUBLIC = 1;
        VIDEOSTATUS_PRIVACYSTATU_UNLISTED = 2;
    }
    VideoStatus_PrivacyStatu privacyStatus = 4;
    // This value indicates if the extended video statistics on the watch page can be viewed by everyone. Note that the view count, likes, etc will still be visible if this is disabled.
    bool publicStatsViewable = 5;
    // The date and time when the video is scheduled to publish. It can be set only if the privacy status of the video is private. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
    string publishAt = 6;
    // This value explains why YouTube rejected an uploaded video. This property is only present if the uploadStatus property indicates that the upload was rejected.
    enum VideoStatus_RejectionReason {
        VIDEOSTATUS_REJECTIONREASON_CLAIM = 0;
        VIDEOSTATUS_REJECTIONREASON_COPYRIGHT = 1;
        VIDEOSTATUS_REJECTIONREASON_DUPLICATE = 2;
        VIDEOSTATUS_REJECTIONREASON_INAPPROPRIATE = 3;
        VIDEOSTATUS_REJECTIONREASON_LEGAL = 4;
        VIDEOSTATUS_REJECTIONREASON_LENGTH = 5;
        VIDEOSTATUS_REJECTIONREASON_TERMSOFUSE = 6;
        VIDEOSTATUS_REJECTIONREASON_TRADEMARK = 7;
        VIDEOSTATUS_REJECTIONREASON_UPLOADERACCOUNTCLOSED = 8;
        VIDEOSTATUS_REJECTIONREASON_UPLOADERACCOUNTSUSPENDED = 9;
    }
    VideoStatus_RejectionReason rejectionReason = 7;
    // The status of the uploaded video.
    enum VideoStatus_UploadStatu {
        VIDEOSTATUS_UPLOADSTATU_DELETED = 0;
        VIDEOSTATUS_UPLOADSTATU_FAILED = 1;
        VIDEOSTATUS_UPLOADSTATU_PROCESSED = 2;
        VIDEOSTATUS_UPLOADSTATU_REJECTED = 3;
        VIDEOSTATUS_UPLOADSTATU_UPLOADED = 4;
    }
    VideoStatus_UploadStatu uploadStatus = 8;
}

message VideoSuggestions {
    // A list of video editing operations that might improve the video quality or playback experience of the uploaded video.
    repeated string editorSuggestions = 1;
    // A list of errors that will prevent YouTube from successfully processing the uploaded video video. These errors indicate that, regardless of the video's current processing status, eventually, that status will almost certainly be failed.
    repeated string processingErrors = 2;
    // A list of suggestions that may improve YouTube's ability to process the video.
    repeated string processingHints = 3;
    // A list of reasons why YouTube may have difficulty transcoding the uploaded video or that might result in an erroneous transcoding. These warnings are generated before YouTube actually processes the uploaded video file. In addition, they identify issues that are unlikely to cause the video processing to fail but that might cause problems such as sync issues, video artifacts, or a missing audio track.
    repeated string processingWarnings = 4;
    // A list of keyword tags that could be added to the video's metadata to increase the likelihood that users will locate your video when searching or browsing on YouTube.
    repeated VideoSuggestionsTagSuggestion tagSuggestions = 5;
}

message VideoSuggestionsTagSuggestion {
    // A set of video categories for which the tag is relevant. You can use this information to display appropriate tag suggestions based on the video category that the video uploader associates with the video. By default, tag suggestions are relevant for all categories if there are no restricts defined for the keyword.
    repeated string categoryRestricts = 1;
    // The keyword tag suggested for the video.
    string tag = 2;
}

message VideoTopicDetails {
    // Similar to topic_id, except that these topics are merely relevant to the video. These are topics that may be mentioned in, or appear in the video. You can retrieve information about each topic using Freebase Topic API.
    repeated string relevantTopicIds = 1;
    // A list of Wikipedia URLs that provide a high-level description of the video's content.
    repeated string topicCategories = 2;
    // A list of Freebase topic IDs that are centrally associated with the video. These are topics that are centrally featured in the video, and it can be said that the video is mainly about each of these. You can retrieve information about each topic using the Freebase Topic API.
    repeated string topicIds = 3;
}

message WatchSettings {
    // The text color for the video watch page's branded area.
    string backgroundColor = 1;
    // An ID that uniquely identifies a playlist that displays next to the video player.
    string featuredPlaylistId = 2;
    // The background color for the video watch page's branded area.
    string textColor = 3;
}

enum Alt {
    JSON = 0;
}

service YouTubeDataService {
    // Returns a list of channel activity events that match the request criteria. For example, you can retrieve events associated with a particular channel, events associated with the user's subscriptions and Google+ friends, or the YouTube home page feed, which is customized for each user.
    rpc GetActivities(GetActivitiesRequest) returns (ActivityListResponse) {
      option (google.api.http) = {
        get: "/youtube/v3/activities"
      };
    }
    // Posts a bulletin for a specific channel. (The user submitting the request must be authorized to act on the channel's behalf.)
    // 
    // Note: Even though an activity resource can contain information about actions like a user rating a video or marking a video as a favorite, you need to use other API methods to generate those activity resources. For example, you would use the API's videos.rate() method to rate a video and the playlistItems.insert() method to mark a video as a favorite.
    rpc PostActivities(PostActivitiesRequest) returns (Activity) {
      option (google.api.http) = {
        post: "/youtube/v3/activities"
        body: "body"
      };
    }
    // Returns a list of caption tracks that are associated with a specified video. Note that the API response does not contain the actual captions and that the captions.download method provides the ability to retrieve a caption track.
    rpc GetCaptions(GetCaptionsRequest) returns (CaptionListResponse) {
      option (google.api.http) = {
        get: "/youtube/v3/captions"
      };
    }
    // Updates a caption track. When updating a caption track, you can change the track's draft status, upload a new caption file for the track, or both.
    rpc PutCaptions(PutCaptionsRequest) returns (Caption) {
      option (google.api.http) = {
        put: "/youtube/v3/captions"
        body: "body"
      };
    }
    // Uploads a caption track.
    rpc PostCaptions(PostCaptionsRequest) returns (Caption) {
      option (google.api.http) = {
        post: "/youtube/v3/captions"
        body: "body"
      };
    }
    // Deletes a specified caption track.
    rpc DeleteCaptions(DeleteCaptionsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/youtube/v3/captions"
      };
    }
    // Downloads a caption track. The caption track is returned in its original format unless the request specifies a value for the tfmt parameter and in its original language unless the request specifies a value for the tlang parameter.
    rpc GetCaptionsId(GetCaptionsIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/youtube/v3/captions/{id}"
      };
    }
    // Uploads a channel banner image to YouTube. This method represents the first two steps in a three-step process to update the banner image for a channel:
    // 
    // - Call the channelBanners.insert method to upload the binary image data to YouTube. The image must have a 16:9 aspect ratio and be at least 2120x1192 pixels.
    // - Extract the url property's value from the response that the API returns for step 1.
    // - Call the channels.update method to update the channel's branding settings. Set the brandingSettings.image.bannerExternalUrl property's value to the URL obtained in step 2.
    rpc PostChannelBannersInsert(PostChannelBannersInsertRequest) returns (ChannelBannerResource) {
      option (google.api.http) = {
        post: "/youtube/v3/channelBanners/insert"
        body: "body"
      };
    }
    // Returns channelSection resources that match the API request criteria.
    rpc GetChannelSections(GetChannelSectionsRequest) returns (ChannelSectionListResponse) {
      option (google.api.http) = {
        get: "/youtube/v3/channelSections"
      };
    }
    // Update a channelSection.
    rpc PutChannelSections(PutChannelSectionsRequest) returns (ChannelSection) {
      option (google.api.http) = {
        put: "/youtube/v3/channelSections"
        body: "body"
      };
    }
    // Adds a channelSection for the authenticated user's channel.
    rpc PostChannelSections(PostChannelSectionsRequest) returns (ChannelSection) {
      option (google.api.http) = {
        post: "/youtube/v3/channelSections"
        body: "body"
      };
    }
    // Deletes a channelSection.
    rpc DeleteChannelSections(DeleteChannelSectionsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/youtube/v3/channelSections"
      };
    }
    // Returns a collection of zero or more channel resources that match the request criteria.
    rpc GetChannels(GetChannelsRequest) returns (ChannelListResponse) {
      option (google.api.http) = {
        get: "/youtube/v3/channels"
      };
    }
    // Updates a channel's metadata. Note that this method currently only supports updates to the channel resource's brandingSettings and invideoPromotion objects and their child properties.
    rpc PutChannels(PutChannelsRequest) returns (Channel) {
      option (google.api.http) = {
        put: "/youtube/v3/channels"
        body: "body"
      };
    }
    // Returns a list of comment threads that match the API request parameters.
    rpc GetCommentThreads(GetCommentThreadsRequest) returns (CommentThreadListResponse) {
      option (google.api.http) = {
        get: "/youtube/v3/commentThreads"
      };
    }
    // Modifies the top-level comment in a comment thread.
    rpc PutCommentThreads(PutCommentThreadsRequest) returns (CommentThread) {
      option (google.api.http) = {
        put: "/youtube/v3/commentThreads"
        body: "body"
      };
    }
    // Creates a new top-level comment. To add a reply to an existing comment, use the comments.insert method instead.
    rpc PostCommentThreads(PostCommentThreadsRequest) returns (CommentThread) {
      option (google.api.http) = {
        post: "/youtube/v3/commentThreads"
        body: "body"
      };
    }
    // Returns a list of comments that match the API request parameters.
    rpc GetComments(GetCommentsRequest) returns (CommentListResponse) {
      option (google.api.http) = {
        get: "/youtube/v3/comments"
      };
    }
    // Modifies a comment.
    rpc PutComments(PutCommentsRequest) returns (Comment) {
      option (google.api.http) = {
        put: "/youtube/v3/comments"
        body: "body"
      };
    }
    // Creates a reply to an existing comment. Note: To create a top-level comment, use the commentThreads.insert method.
    rpc PostComments(PostCommentsRequest) returns (Comment) {
      option (google.api.http) = {
        post: "/youtube/v3/comments"
        body: "body"
      };
    }
    // Deletes a comment.
    rpc DeleteComments(DeleteCommentsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/youtube/v3/comments"
      };
    }
    // Expresses the caller's opinion that one or more comments should be flagged as spam.
    rpc PostCommentsMarkAsSpam(PostCommentsMarkAsSpamRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/youtube/v3/comments/markAsSpam"
      };
    }
    // Sets the moderation status of one or more comments. The API request must be authorized by the owner of the channel or video associated with the comments.
    rpc PostCommentsSetModerationStatus(PostCommentsSetModerationStatusRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/youtube/v3/comments/setModerationStatus"
      };
    }
    // Lists fan funding events for a channel.
    rpc GetFanFundingEvents(GetFanFundingEventsRequest) returns (FanFundingEventListResponse) {
      option (google.api.http) = {
        get: "/youtube/v3/fanFundingEvents"
      };
    }
    // Returns a list of categories that can be associated with YouTube channels.
    rpc GetGuideCategories(GetGuideCategoriesRequest) returns (GuideCategoryListResponse) {
      option (google.api.http) = {
        get: "/youtube/v3/guideCategories"
      };
    }
    // Returns a list of application languages that the YouTube website supports.
    rpc GetI18nLanguages(GetI18nLanguagesRequest) returns (I18nLanguageListResponse) {
      option (google.api.http) = {
        get: "/youtube/v3/i18nLanguages"
      };
    }
    // Returns a list of content regions that the YouTube website supports.
    rpc GetI18nRegions(GetI18nRegionsRequest) returns (I18nRegionListResponse) {
      option (google.api.http) = {
        get: "/youtube/v3/i18nRegions"
      };
    }
    // Returns a list of YouTube broadcasts that match the API request parameters.
    rpc GetLiveBroadcasts(GetLiveBroadcastsRequest) returns (LiveBroadcastListResponse) {
      option (google.api.http) = {
        get: "/youtube/v3/liveBroadcasts"
      };
    }
    // Updates a broadcast. For example, you could modify the broadcast settings defined in the liveBroadcast resource's contentDetails object.
    rpc PutLiveBroadcasts(PutLiveBroadcastsRequest) returns (LiveBroadcast) {
      option (google.api.http) = {
        put: "/youtube/v3/liveBroadcasts"
        body: "body"
      };
    }
    // Creates a broadcast.
    rpc PostLiveBroadcasts(PostLiveBroadcastsRequest) returns (LiveBroadcast) {
      option (google.api.http) = {
        post: "/youtube/v3/liveBroadcasts"
        body: "body"
      };
    }
    // Deletes a broadcast.
    rpc DeleteLiveBroadcasts(DeleteLiveBroadcastsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/youtube/v3/liveBroadcasts"
      };
    }
    // Binds a YouTube broadcast to a stream or removes an existing binding between a broadcast and a stream. A broadcast can only be bound to one video stream, though a video stream may be bound to more than one broadcast.
    rpc PostLiveBroadcastsBind(PostLiveBroadcastsBindRequest) returns (LiveBroadcast) {
      option (google.api.http) = {
        post: "/youtube/v3/liveBroadcasts/bind"
      };
    }
    // Controls the settings for a slate that can be displayed in the broadcast stream.
    rpc PostLiveBroadcastsControl(PostLiveBroadcastsControlRequest) returns (LiveBroadcast) {
      option (google.api.http) = {
        post: "/youtube/v3/liveBroadcasts/control"
      };
    }
    // Changes the status of a YouTube live broadcast and initiates any processes associated with the new status. For example, when you transition a broadcast's status to testing, YouTube starts to transmit video to that broadcast's monitor stream. Before calling this method, you should confirm that the value of the status.streamStatus property for the stream bound to your broadcast is active.
    rpc PostLiveBroadcastsTransition(PostLiveBroadcastsTransitionRequest) returns (LiveBroadcast) {
      option (google.api.http) = {
        post: "/youtube/v3/liveBroadcasts/transition"
      };
    }
    // Adds a new ban to the chat.
    rpc PostLiveChatBans(PostLiveChatBansRequest) returns (LiveChatBan) {
      option (google.api.http) = {
        post: "/youtube/v3/liveChat/bans"
        body: "body"
      };
    }
    // Removes a chat ban.
    rpc DeleteLiveChatBans(DeleteLiveChatBansRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/youtube/v3/liveChat/bans"
      };
    }
    // Lists live chat messages for a specific chat.
    rpc GetLiveChatMessages(GetLiveChatMessagesRequest) returns (LiveChatMessageListResponse) {
      option (google.api.http) = {
        get: "/youtube/v3/liveChat/messages"
      };
    }
    // Adds a message to a live chat.
    rpc PostLiveChatMessages(PostLiveChatMessagesRequest) returns (LiveChatMessage) {
      option (google.api.http) = {
        post: "/youtube/v3/liveChat/messages"
        body: "body"
      };
    }
    // Deletes a chat message.
    rpc DeleteLiveChatMessages(DeleteLiveChatMessagesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/youtube/v3/liveChat/messages"
      };
    }
    // Lists moderators for a live chat.
    rpc GetLiveChatModerators(GetLiveChatModeratorsRequest) returns (LiveChatModeratorListResponse) {
      option (google.api.http) = {
        get: "/youtube/v3/liveChat/moderators"
      };
    }
    // Adds a new moderator for the chat.
    rpc PostLiveChatModerators(PostLiveChatModeratorsRequest) returns (LiveChatModerator) {
      option (google.api.http) = {
        post: "/youtube/v3/liveChat/moderators"
        body: "body"
      };
    }
    // Removes a chat moderator.
    rpc DeleteLiveChatModerators(DeleteLiveChatModeratorsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/youtube/v3/liveChat/moderators"
      };
    }
    // Returns a list of video streams that match the API request parameters.
    rpc GetLiveStreams(GetLiveStreamsRequest) returns (LiveStreamListResponse) {
      option (google.api.http) = {
        get: "/youtube/v3/liveStreams"
      };
    }
    // Updates a video stream. If the properties that you want to change cannot be updated, then you need to create a new stream with the proper settings.
    rpc PutLiveStreams(PutLiveStreamsRequest) returns (LiveStream) {
      option (google.api.http) = {
        put: "/youtube/v3/liveStreams"
        body: "body"
      };
    }
    // Creates a video stream. The stream enables you to send your video to YouTube, which can then broadcast the video to your audience.
    rpc PostLiveStreams(PostLiveStreamsRequest) returns (LiveStream) {
      option (google.api.http) = {
        post: "/youtube/v3/liveStreams"
        body: "body"
      };
    }
    // Deletes a video stream.
    rpc DeleteLiveStreams(DeleteLiveStreamsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/youtube/v3/liveStreams"
      };
    }
    // Returns a collection of playlist items that match the API request parameters. You can retrieve all of the playlist items in a specified playlist or retrieve one or more playlist items by their unique IDs.
    rpc GetPlaylistItems(GetPlaylistItemsRequest) returns (PlaylistItemListResponse) {
      option (google.api.http) = {
        get: "/youtube/v3/playlistItems"
      };
    }
    // Modifies a playlist item. For example, you could update the item's position in the playlist.
    rpc PutPlaylistItems(PutPlaylistItemsRequest) returns (PlaylistItem) {
      option (google.api.http) = {
        put: "/youtube/v3/playlistItems"
        body: "body"
      };
    }
    // Adds a resource to a playlist.
    rpc PostPlaylistItems(PostPlaylistItemsRequest) returns (PlaylistItem) {
      option (google.api.http) = {
        post: "/youtube/v3/playlistItems"
        body: "body"
      };
    }
    // Deletes a playlist item.
    rpc DeletePlaylistItems(DeletePlaylistItemsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/youtube/v3/playlistItems"
      };
    }
    // Returns a collection of playlists that match the API request parameters. For example, you can retrieve all playlists that the authenticated user owns, or you can retrieve one or more playlists by their unique IDs.
    rpc GetPlaylists(GetPlaylistsRequest) returns (PlaylistListResponse) {
      option (google.api.http) = {
        get: "/youtube/v3/playlists"
      };
    }
    // Modifies a playlist. For example, you could change a playlist's title, description, or privacy status.
    rpc PutPlaylists(PutPlaylistsRequest) returns (Playlist) {
      option (google.api.http) = {
        put: "/youtube/v3/playlists"
        body: "body"
      };
    }
    // Creates a playlist.
    rpc PostPlaylists(PostPlaylistsRequest) returns (Playlist) {
      option (google.api.http) = {
        post: "/youtube/v3/playlists"
        body: "body"
      };
    }
    // Deletes a playlist.
    rpc DeletePlaylists(DeletePlaylistsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/youtube/v3/playlists"
      };
    }
    // Returns a collection of search results that match the query parameters specified in the API request. By default, a search result set identifies matching video, channel, and playlist resources, but you can also configure queries to only retrieve a specific type of resource.
    rpc GetSearch(GetSearchRequest) returns (SearchListResponse) {
      option (google.api.http) = {
        get: "/youtube/v3/search"
      };
    }
    // Lists sponsors for a channel.
    rpc GetSponsors(GetSponsorsRequest) returns (SponsorListResponse) {
      option (google.api.http) = {
        get: "/youtube/v3/sponsors"
      };
    }
    // Returns subscription resources that match the API request criteria.
    rpc GetSubscriptions(GetSubscriptionsRequest) returns (SubscriptionListResponse) {
      option (google.api.http) = {
        get: "/youtube/v3/subscriptions"
      };
    }
    // Adds a subscription for the authenticated user's channel.
    rpc PostSubscriptions(PostSubscriptionsRequest) returns (Subscription) {
      option (google.api.http) = {
        post: "/youtube/v3/subscriptions"
        body: "body"
      };
    }
    // Deletes a subscription.
    rpc DeleteSubscriptions(DeleteSubscriptionsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/youtube/v3/subscriptions"
      };
    }
    // Lists Super Chat events for a channel.
    rpc GetSuperChatEvents(GetSuperChatEventsRequest) returns (SuperChatEventListResponse) {
      option (google.api.http) = {
        get: "/youtube/v3/superChatEvents"
      };
    }
    // Uploads a custom video thumbnail to YouTube and sets it for a video.
    rpc PostThumbnailsSet(PostThumbnailsSetRequest) returns (ThumbnailSetResponse) {
      option (google.api.http) = {
        post: "/youtube/v3/thumbnails/set"
      };
    }
    // Returns a list of abuse reasons that can be used for reporting abusive videos.
    rpc GetVideoAbuseReportReasons(GetVideoAbuseReportReasonsRequest) returns (VideoAbuseReportReasonListResponse) {
      option (google.api.http) = {
        get: "/youtube/v3/videoAbuseReportReasons"
      };
    }
    // Returns a list of categories that can be associated with YouTube videos.
    rpc GetVideoCategories(GetVideoCategoriesRequest) returns (VideoCategoryListResponse) {
      option (google.api.http) = {
        get: "/youtube/v3/videoCategories"
      };
    }
    // Returns a list of videos that match the API request parameters.
    rpc GetVideos(GetVideosRequest) returns (VideoListResponse) {
      option (google.api.http) = {
        get: "/youtube/v3/videos"
      };
    }
    // Updates a video's metadata.
    rpc PutVideos(PutVideosRequest) returns (Video) {
      option (google.api.http) = {
        put: "/youtube/v3/videos"
        body: "body"
      };
    }
    // Uploads a video to YouTube and optionally sets the video's metadata.
    rpc PostVideos(PostVideosRequest) returns (Video) {
      option (google.api.http) = {
        post: "/youtube/v3/videos"
        body: "body"
      };
    }
    // Deletes a YouTube video.
    rpc DeleteVideos(DeleteVideosRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/youtube/v3/videos"
      };
    }
    // Retrieves the ratings that the authorized user gave to a list of specified videos.
    rpc GetVideosGetRating(GetVideosGetRatingRequest) returns (VideoGetRatingResponse) {
      option (google.api.http) = {
        get: "/youtube/v3/videos/getRating"
      };
    }
    // Add a like or dislike rating to a video or remove a rating from a video.
    rpc PostVideosRate(PostVideosRateRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/youtube/v3/videos/rate"
      };
    }
    // Report abuse for a video.
    rpc PostVideosReportAbuse(PostVideosReportAbuseRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/youtube/v3/videos/reportAbuse"
        body: "body"
      };
    }
    // Uploads a watermark image to YouTube and sets it for a channel.
    rpc PostWatermarksSet(PostWatermarksSetRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/youtube/v3/watermarks/set"
        body: "body"
      };
    }
    // Deletes a channel's watermark image.
    rpc PostWatermarksUnset(PostWatermarksUnsetRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/youtube/v3/watermarks/unset"
      };
    }
}

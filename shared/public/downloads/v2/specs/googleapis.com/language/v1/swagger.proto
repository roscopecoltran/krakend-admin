syntax = "proto3";

import "google/api/annotations.proto";

package googlecloudnaturallanguage;

message PostV1Documents:AnalyzeEntitiesRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    AnalyzeEntitiesRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PostV1Documents:AnalyzeEntitySentimentRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    AnalyzeEntitySentimentRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PostV1Documents:AnalyzeSentimentRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    AnalyzeSentimentRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PostV1Documents:AnalyzeSyntaxRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    AnalyzeSyntaxRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PostV1Documents:AnnotateTextRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    AnnotateTextRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

enum $.Xgafv {
    $XGAFV_1 = 0;
    $XGAFV_2 = 1;
}

message AnalyzeEntitiesRequest {
    // Input document.
    Document document = 1;
    // The encoding type used by the API to calculate offsets.
    enum AnalyzeEntitiesRequest_EncodingType {
        ANALYZEENTITIESREQUEST_ENCODINGTYPE_NONE = 0;
        ANALYZEENTITIESREQUEST_ENCODINGTYPE_UTF8 = 1;
        ANALYZEENTITIESREQUEST_ENCODINGTYPE_UTF16 = 2;
        ANALYZEENTITIESREQUEST_ENCODINGTYPE_UTF32 = 3;
    }
    AnalyzeEntitiesRequest_EncodingType encodingType = 2;
}

message AnalyzeEntitiesResponse {
    // The recognized entities in the input document.
    repeated Entity entities = 1;
    // The language of the text, which will be the same as the language specified
    // in the request or, if not specified, the automatically-detected language.
    // See Document.language field for more details.
    string language = 2;
}

message AnalyzeEntitySentimentRequest {
    // Input document.
    Document document = 1;
    // The encoding type used by the API to calculate offsets.
    enum AnalyzeEntitySentimentRequest_EncodingType {
        ANALYZEENTITYSENTIMENTREQUEST_ENCODINGTYPE_NONE = 0;
        ANALYZEENTITYSENTIMENTREQUEST_ENCODINGTYPE_UTF8 = 1;
        ANALYZEENTITYSENTIMENTREQUEST_ENCODINGTYPE_UTF16 = 2;
        ANALYZEENTITYSENTIMENTREQUEST_ENCODINGTYPE_UTF32 = 3;
    }
    AnalyzeEntitySentimentRequest_EncodingType encodingType = 2;
}

message AnalyzeEntitySentimentResponse {
    // The recognized entities in the input document with associated sentiments.
    repeated Entity entities = 1;
    // The language of the text, which will be the same as the language specified
    // in the request or, if not specified, the automatically-detected language.
    // See Document.language field for more details.
    string language = 2;
}

message AnalyzeSentimentRequest {
    // Input document.
    Document document = 1;
    // The encoding type used by the API to calculate sentence offsets.
    enum AnalyzeSentimentRequest_EncodingType {
        ANALYZESENTIMENTREQUEST_ENCODINGTYPE_NONE = 0;
        ANALYZESENTIMENTREQUEST_ENCODINGTYPE_UTF8 = 1;
        ANALYZESENTIMENTREQUEST_ENCODINGTYPE_UTF16 = 2;
        ANALYZESENTIMENTREQUEST_ENCODINGTYPE_UTF32 = 3;
    }
    AnalyzeSentimentRequest_EncodingType encodingType = 2;
}

message AnalyzeSentimentResponse {
    // The overall sentiment of the input document.
    Sentiment documentSentiment = 1;
    // The language of the text, which will be the same as the language specified
    // in the request or, if not specified, the automatically-detected language.
    // See Document.language field for more details.
    string language = 2;
    // The sentiment for all the sentences in the document.
    repeated Sentence sentences = 3;
}

message AnalyzeSyntaxRequest {
    // Input document.
    Document document = 1;
    // The encoding type used by the API to calculate offsets.
    enum AnalyzeSyntaxRequest_EncodingType {
        ANALYZESYNTAXREQUEST_ENCODINGTYPE_NONE = 0;
        ANALYZESYNTAXREQUEST_ENCODINGTYPE_UTF8 = 1;
        ANALYZESYNTAXREQUEST_ENCODINGTYPE_UTF16 = 2;
        ANALYZESYNTAXREQUEST_ENCODINGTYPE_UTF32 = 3;
    }
    AnalyzeSyntaxRequest_EncodingType encodingType = 2;
}

message AnalyzeSyntaxResponse {
    // The language of the text, which will be the same as the language specified
    // in the request or, if not specified, the automatically-detected language.
    // See Document.language field for more details.
    string language = 1;
    // Sentences in the input document.
    repeated Sentence sentences = 2;
    // Tokens, along with their syntactic information, in the input document.
    repeated Token tokens = 3;
}

message AnnotateTextRequest {
    // Input document.
    Document document = 1;
    // The encoding type used by the API to calculate offsets.
    enum AnnotateTextRequest_EncodingType {
        ANNOTATETEXTREQUEST_ENCODINGTYPE_NONE = 0;
        ANNOTATETEXTREQUEST_ENCODINGTYPE_UTF8 = 1;
        ANNOTATETEXTREQUEST_ENCODINGTYPE_UTF16 = 2;
        ANNOTATETEXTREQUEST_ENCODINGTYPE_UTF32 = 3;
    }
    AnnotateTextRequest_EncodingType encodingType = 2;
    // The enabled features.
    Features features = 3;
}

message AnnotateTextResponse {
    // The overall sentiment for the document. Populated if the user enables
    // AnnotateTextRequest.Features.extract_document_sentiment.
    Sentiment documentSentiment = 1;
    // Entities, along with their semantic information, in the input document.
    // Populated if the user enables
    // AnnotateTextRequest.Features.extract_entities.
    repeated Entity entities = 2;
    // The language of the text, which will be the same as the language specified
    // in the request or, if not specified, the automatically-detected language.
    // See Document.language field for more details.
    string language = 3;
    // Sentences in the input document. Populated if the user enables
    // AnnotateTextRequest.Features.extract_syntax.
    repeated Sentence sentences = 4;
    // Tokens, along with their syntactic information, in the input document.
    // Populated if the user enables
    // AnnotateTextRequest.Features.extract_syntax.
    repeated Token tokens = 5;
}

message DependencyEdge {
    // Represents the head of this token in the dependency tree.
    // This is the index of the token which has an arc going to this token.
    // The index is the position of the token in the array of tokens returned
    // by the API method. If this token is a root token, then the
    // `head_token_index` is its own index.
    int32 headTokenIndex = 1;
    // The parse label for the token.
    enum DependencyEdge_Label {
        DEPENDENCYEDGE_LABEL_UNKNOWN = 0;
        DEPENDENCYEDGE_LABEL_ABBREV = 1;
        DEPENDENCYEDGE_LABEL_ACOMP = 2;
        DEPENDENCYEDGE_LABEL_ADVCL = 3;
        DEPENDENCYEDGE_LABEL_ADVMOD = 4;
        DEPENDENCYEDGE_LABEL_AMOD = 5;
        DEPENDENCYEDGE_LABEL_APPOS = 6;
        DEPENDENCYEDGE_LABEL_ATTR = 7;
        DEPENDENCYEDGE_LABEL_AUX = 8;
        DEPENDENCYEDGE_LABEL_AUXPASS = 9;
        DEPENDENCYEDGE_LABEL_CC = 10;
        DEPENDENCYEDGE_LABEL_CCOMP = 11;
        DEPENDENCYEDGE_LABEL_CONJ = 12;
        DEPENDENCYEDGE_LABEL_CSUBJ = 13;
        DEPENDENCYEDGE_LABEL_CSUBJPASS = 14;
        DEPENDENCYEDGE_LABEL_DEP = 15;
        DEPENDENCYEDGE_LABEL_DET = 16;
        DEPENDENCYEDGE_LABEL_DISCOURSE = 17;
        DEPENDENCYEDGE_LABEL_DOBJ = 18;
        DEPENDENCYEDGE_LABEL_EXPL = 19;
        DEPENDENCYEDGE_LABEL_GOESWITH = 20;
        DEPENDENCYEDGE_LABEL_IOBJ = 21;
        DEPENDENCYEDGE_LABEL_MARK = 22;
        DEPENDENCYEDGE_LABEL_MWE = 23;
        DEPENDENCYEDGE_LABEL_MWV = 24;
        DEPENDENCYEDGE_LABEL_NEG = 25;
        DEPENDENCYEDGE_LABEL_NN = 26;
        DEPENDENCYEDGE_LABEL_NPADVMOD = 27;
        DEPENDENCYEDGE_LABEL_NSUBJ = 28;
        DEPENDENCYEDGE_LABEL_NSUBJPASS = 29;
        DEPENDENCYEDGE_LABEL_NUM = 30;
        DEPENDENCYEDGE_LABEL_NUMBER = 31;
        DEPENDENCYEDGE_LABEL_P = 32;
        DEPENDENCYEDGE_LABEL_PARATAXIS = 33;
        DEPENDENCYEDGE_LABEL_PARTMOD = 34;
        DEPENDENCYEDGE_LABEL_PCOMP = 35;
        DEPENDENCYEDGE_LABEL_POBJ = 36;
        DEPENDENCYEDGE_LABEL_POSS = 37;
        DEPENDENCYEDGE_LABEL_POSTNEG = 38;
        DEPENDENCYEDGE_LABEL_PRECOMP = 39;
        DEPENDENCYEDGE_LABEL_PRECONJ = 40;
        DEPENDENCYEDGE_LABEL_PREDET = 41;
        DEPENDENCYEDGE_LABEL_PREF = 42;
        DEPENDENCYEDGE_LABEL_PREP = 43;
        DEPENDENCYEDGE_LABEL_PRONL = 44;
        DEPENDENCYEDGE_LABEL_PRT = 45;
        DEPENDENCYEDGE_LABEL_PS = 46;
        DEPENDENCYEDGE_LABEL_QUANTMOD = 47;
        DEPENDENCYEDGE_LABEL_RCMOD = 48;
        DEPENDENCYEDGE_LABEL_RCMODREL = 49;
        DEPENDENCYEDGE_LABEL_RDROP = 50;
        DEPENDENCYEDGE_LABEL_REF = 51;
        DEPENDENCYEDGE_LABEL_REMNANT = 52;
        DEPENDENCYEDGE_LABEL_REPARANDUM = 53;
        DEPENDENCYEDGE_LABEL_ROOT = 54;
        DEPENDENCYEDGE_LABEL_SNUM = 55;
        DEPENDENCYEDGE_LABEL_SUFF = 56;
        DEPENDENCYEDGE_LABEL_TMOD = 57;
        DEPENDENCYEDGE_LABEL_TOPIC = 58;
        DEPENDENCYEDGE_LABEL_VMOD = 59;
        DEPENDENCYEDGE_LABEL_VOCATIVE = 60;
        DEPENDENCYEDGE_LABEL_XCOMP = 61;
        DEPENDENCYEDGE_LABEL_SUFFIX = 62;
        DEPENDENCYEDGE_LABEL_TITLE = 63;
        DEPENDENCYEDGE_LABEL_ADVPHMOD = 64;
        DEPENDENCYEDGE_LABEL_AUXCAUS = 65;
        DEPENDENCYEDGE_LABEL_AUXVV = 66;
        DEPENDENCYEDGE_LABEL_DTMOD = 67;
        DEPENDENCYEDGE_LABEL_FOREIGN = 68;
        DEPENDENCYEDGE_LABEL_KW = 69;
        DEPENDENCYEDGE_LABEL_LIST = 70;
        DEPENDENCYEDGE_LABEL_NOMC = 71;
        DEPENDENCYEDGE_LABEL_NOMCSUBJ = 72;
        DEPENDENCYEDGE_LABEL_NOMCSUBJPASS = 73;
        DEPENDENCYEDGE_LABEL_NUMC = 74;
        DEPENDENCYEDGE_LABEL_COP = 75;
        DEPENDENCYEDGE_LABEL_DISLOCATED = 76;
        DEPENDENCYEDGE_LABEL_ASP = 77;
        DEPENDENCYEDGE_LABEL_GMOD = 78;
        DEPENDENCYEDGE_LABEL_GOBJ = 79;
        DEPENDENCYEDGE_LABEL_INFMOD = 80;
        DEPENDENCYEDGE_LABEL_MES = 81;
        DEPENDENCYEDGE_LABEL_NCOMP = 82;
    }
    DependencyEdge_Label label = 2;
}

message Document {
    // The content of the input in string format.
    string content = 1;
    // The Google Cloud Storage URI where the file content is located.
    // This URI must be of the form: gs://bucket_name/object_name. For more
    // details, see https://cloud.google.com/storage/docs/reference-uris.
    // NOTE: Cloud Storage object versioning is not supported.
    string gcsContentUri = 2;
    // The language of the document (if not specified, the language is
    // automatically detected). Both ISO and BCP-47 language codes are
    // accepted.<br>
    // [Language Support](/natural-language/docs/languages)
    // lists currently supported languages for each API method.
    // If the language (either specified by the caller or automatically detected)
    // is not supported by the called API method, an `INVALID_ARGUMENT` error
    // is returned.
    string language = 3;
    // Required. If the type is not set or is `TYPE_UNSPECIFIED`,
    // returns an `INVALID_ARGUMENT` error.
    enum Document_Type {
        DOCUMENT_TYPE_TYPE_UNSPECIFIED = 0;
        DOCUMENT_TYPE_PLAIN_TEXT = 1;
        DOCUMENT_TYPE_HTML = 2;
    }
    Document_Type type = 4;
}

message Entity {
    // The mentions of this entity in the input document. The API currently
    // supports proper noun mentions.
    repeated EntityMention mentions = 1;
    // Metadata associated with the entity.
    // 
    // Currently, Wikipedia URLs and Knowledge Graph MIDs are provided, if
    // available. The associated keys are "wikipedia_url" and "mid", respectively.
    map<string, string> metadata = 2;
    // The representative name for the entity.
    string name = 3;
    // The salience score associated with the entity in the [0, 1.0] range.
    // 
    // The salience score for an entity provides information about the
    // importance or centrality of that entity to the entire document text.
    // Scores closer to 0 are less salient, while scores closer to 1.0 are highly
    // salient.
    float salience = 4;
    // For calls to AnalyzeEntitySentiment or if
    // AnnotateTextRequest.Features.extract_entity_sentiment is set to
    // true, this field will contain the aggregate sentiment expressed for this
    // entity in the provided document.
    Sentiment sentiment = 5;
    // The entity type.
    enum Entity_Type {
        ENTITY_TYPE_UNKNOWN = 0;
        ENTITY_TYPE_PERSON = 1;
        ENTITY_TYPE_LOCATION = 2;
        ENTITY_TYPE_ORGANIZATION = 3;
        ENTITY_TYPE_EVENT = 4;
        ENTITY_TYPE_WORK_OF_ART = 5;
        ENTITY_TYPE_CONSUMER_GOOD = 6;
        ENTITY_TYPE_OTHER = 7;
    }
    Entity_Type type = 6;
}

message EntityMention {
    // For calls to AnalyzeEntitySentiment or if
    // AnnotateTextRequest.Features.extract_entity_sentiment is set to
    // true, this field will contain the sentiment expressed for this mention of
    // the entity in the provided document.
    Sentiment sentiment = 1;
    // The mention text.
    TextSpan text = 2;
    // The type of the entity mention.
    enum EntityMention_Type {
        ENTITYMENTION_TYPE_TYPE_UNKNOWN = 0;
        ENTITYMENTION_TYPE_PROPER = 1;
        ENTITYMENTION_TYPE_COMMON = 2;
    }
    EntityMention_Type type = 3;
}

message Features {
    // Extract document-level sentiment.
    bool extractDocumentSentiment = 1;
    // Extract entities.
    bool extractEntities = 2;
    // Extract entities and their associated sentiment.
    bool extractEntitySentiment = 3;
    // Extract syntax information.
    bool extractSyntax = 4;
}

message PartOfSpeech {
    // The grammatical aspect.
    enum PartOfSpeech_Aspect {
        PARTOFSPEECH_ASPECT_ASPECT_UNKNOWN = 0;
        PARTOFSPEECH_ASPECT_PERFECTIVE = 1;
        PARTOFSPEECH_ASPECT_IMPERFECTIVE = 2;
        PARTOFSPEECH_ASPECT_PROGRESSIVE = 3;
    }
    PartOfSpeech_Aspect aspect = 1;
    // The grammatical case.
    enum PartOfSpeech_Case {
        PARTOFSPEECH_CASE_CASE_UNKNOWN = 0;
        PARTOFSPEECH_CASE_ACCUSATIVE = 1;
        PARTOFSPEECH_CASE_ADVERBIAL = 2;
        PARTOFSPEECH_CASE_COMPLEMENTIVE = 3;
        PARTOFSPEECH_CASE_DATIVE = 4;
        PARTOFSPEECH_CASE_GENITIVE = 5;
        PARTOFSPEECH_CASE_INSTRUMENTAL = 6;
        PARTOFSPEECH_CASE_LOCATIVE = 7;
        PARTOFSPEECH_CASE_NOMINATIVE = 8;
        PARTOFSPEECH_CASE_OBLIQUE = 9;
        PARTOFSPEECH_CASE_PARTITIVE = 10;
        PARTOFSPEECH_CASE_PREPOSITIONAL = 11;
        PARTOFSPEECH_CASE_REFLEXIVE_CASE = 12;
        PARTOFSPEECH_CASE_RELATIVE_CASE = 13;
        PARTOFSPEECH_CASE_VOCATIVE = 14;
    }
    PartOfSpeech_Case case = 2;
    // The grammatical form.
    enum PartOfSpeech_Form {
        PARTOFSPEECH_FORM_FORM_UNKNOWN = 0;
        PARTOFSPEECH_FORM_ADNOMIAL = 1;
        PARTOFSPEECH_FORM_AUXILIARY = 2;
        PARTOFSPEECH_FORM_COMPLEMENTIZER = 3;
        PARTOFSPEECH_FORM_FINAL_ENDING = 4;
        PARTOFSPEECH_FORM_GERUND = 5;
        PARTOFSPEECH_FORM_REALIS = 6;
        PARTOFSPEECH_FORM_IRREALIS = 7;
        PARTOFSPEECH_FORM_SHORT = 8;
        PARTOFSPEECH_FORM_LONG = 9;
        PARTOFSPEECH_FORM_ORDER = 10;
        PARTOFSPEECH_FORM_SPECIFIC = 11;
    }
    PartOfSpeech_Form form = 3;
    // The grammatical gender.
    enum PartOfSpeech_Gender {
        PARTOFSPEECH_GENDER_GENDER_UNKNOWN = 0;
        PARTOFSPEECH_GENDER_FEMININE = 1;
        PARTOFSPEECH_GENDER_MASCULINE = 2;
        PARTOFSPEECH_GENDER_NEUTER = 3;
    }
    PartOfSpeech_Gender gender = 4;
    // The grammatical mood.
    enum PartOfSpeech_Mood {
        PARTOFSPEECH_MOOD_MOOD_UNKNOWN = 0;
        PARTOFSPEECH_MOOD_CONDITIONAL_MOOD = 1;
        PARTOFSPEECH_MOOD_IMPERATIVE = 2;
        PARTOFSPEECH_MOOD_INDICATIVE = 3;
        PARTOFSPEECH_MOOD_INTERROGATIVE = 4;
        PARTOFSPEECH_MOOD_JUSSIVE = 5;
        PARTOFSPEECH_MOOD_SUBJUNCTIVE = 6;
    }
    PartOfSpeech_Mood mood = 5;
    // The grammatical number.
    enum PartOfSpeech_Number {
        PARTOFSPEECH_NUMBER_NUMBER_UNKNOWN = 0;
        PARTOFSPEECH_NUMBER_SINGULAR = 1;
        PARTOFSPEECH_NUMBER_PLURAL = 2;
        PARTOFSPEECH_NUMBER_DUAL = 3;
    }
    PartOfSpeech_Number number = 6;
    // The grammatical person.
    enum PartOfSpeech_Person {
        PARTOFSPEECH_PERSON_PERSON_UNKNOWN = 0;
        PARTOFSPEECH_PERSON_FIRST = 1;
        PARTOFSPEECH_PERSON_SECOND = 2;
        PARTOFSPEECH_PERSON_THIRD = 3;
        PARTOFSPEECH_PERSON_REFLEXIVE_PERSON = 4;
    }
    PartOfSpeech_Person person = 7;
    // The grammatical properness.
    enum PartOfSpeech_Proper {
        PARTOFSPEECH_PROPER_PROPER_UNKNOWN = 0;
        PARTOFSPEECH_PROPER_PROPER = 1;
        PARTOFSPEECH_PROPER_NOT_PROPER = 2;
    }
    PartOfSpeech_Proper proper = 8;
    // The grammatical reciprocity.
    enum PartOfSpeech_Reciprocity {
        PARTOFSPEECH_RECIPROCITY_RECIPROCITY_UNKNOWN = 0;
        PARTOFSPEECH_RECIPROCITY_RECIPROCAL = 1;
        PARTOFSPEECH_RECIPROCITY_NON_RECIPROCAL = 2;
    }
    PartOfSpeech_Reciprocity reciprocity = 9;
    // The part of speech tag.
    enum PartOfSpeech_Tag {
        PARTOFSPEECH_TAG_UNKNOWN = 0;
        PARTOFSPEECH_TAG_ADJ = 1;
        PARTOFSPEECH_TAG_ADP = 2;
        PARTOFSPEECH_TAG_ADV = 3;
        PARTOFSPEECH_TAG_CONJ = 4;
        PARTOFSPEECH_TAG_DET = 5;
        PARTOFSPEECH_TAG_NOUN = 6;
        PARTOFSPEECH_TAG_NUM = 7;
        PARTOFSPEECH_TAG_PRON = 8;
        PARTOFSPEECH_TAG_PRT = 9;
        PARTOFSPEECH_TAG_PUNCT = 10;
        PARTOFSPEECH_TAG_VERB = 11;
        PARTOFSPEECH_TAG_X = 12;
        PARTOFSPEECH_TAG_AFFIX = 13;
    }
    PartOfSpeech_Tag tag = 10;
    // The grammatical tense.
    enum PartOfSpeech_Tense {
        PARTOFSPEECH_TENSE_TENSE_UNKNOWN = 0;
        PARTOFSPEECH_TENSE_CONDITIONAL_TENSE = 1;
        PARTOFSPEECH_TENSE_FUTURE = 2;
        PARTOFSPEECH_TENSE_PAST = 3;
        PARTOFSPEECH_TENSE_PRESENT = 4;
        PARTOFSPEECH_TENSE_IMPERFECT = 5;
        PARTOFSPEECH_TENSE_PLUPERFECT = 6;
    }
    PartOfSpeech_Tense tense = 11;
    // The grammatical voice.
    enum PartOfSpeech_Voice {
        PARTOFSPEECH_VOICE_VOICE_UNKNOWN = 0;
        PARTOFSPEECH_VOICE_ACTIVE = 1;
        PARTOFSPEECH_VOICE_CAUSATIVE = 2;
        PARTOFSPEECH_VOICE_PASSIVE = 3;
    }
    PartOfSpeech_Voice voice = 12;
}

message Sentence {
    // For calls to AnalyzeSentiment or if
    // AnnotateTextRequest.Features.extract_document_sentiment is set to
    // true, this field will contain the sentiment for the sentence.
    Sentiment sentiment = 1;
    // The sentence text.
    TextSpan text = 2;
}

message Sentiment {
    // A non-negative number in the [0, +inf) range, which represents
    // the absolute magnitude of sentiment regardless of score (positive or
    // negative).
    float magnitude = 1;
    // Sentiment score between -1.0 (negative sentiment) and 1.0
    // (positive sentiment).
    float score = 2;
}

message Status {
    // The status code, which should be an enum value of google.rpc.Code.
    int32 code = 1;
    // A list of messages that carry the error details.  There is a common set of
    // message types for APIs to use.
    message Detail {
    }
    repeated Detail details = 2;
    // A developer-facing error message, which should be in English. Any
    // user-facing error message should be localized and sent in the
    // google.rpc.Status.details field, or localized by the client.
    string message = 3;
}

message TextSpan {
    // The API calculates the beginning offset of the content in the original
    // document according to the EncodingType specified in the API request.
    int32 beginOffset = 1;
    // The content of the output text.
    string content = 2;
}

message Token {
    // Dependency tree parse for this token.
    DependencyEdge dependencyEdge = 1;
    // [Lemma](https://en.wikipedia.org/wiki/Lemma_%28morphology%29) of the token.
    string lemma = 2;
    // Parts of speech tag for this token.
    PartOfSpeech partOfSpeech = 3;
    // The token text.
    TextSpan text = 4;
}

enum Alt {
    JSON = 0;
    MEDIA = 1;
    PROTO = 2;
}

service GoogleCloudNaturalLanguageService {
    // Finds named entities (currently proper names and common nouns) in the text
    // along with entity types, salience, mentions for each entity, and
    // other properties.
    rpc PostV1Documents:AnalyzeEntities(PostV1Documents:AnalyzeEntitiesRequest) returns (AnalyzeEntitiesResponse) {
      option (google.api.http) = {
        post: "//v1/documents:analyzeEntities"
        body: "body"
      };
    }
    // Finds entities, similar to AnalyzeEntities in the text and analyzes
    // sentiment associated with each entity and its mentions.
    rpc PostV1Documents:AnalyzeEntitySentiment(PostV1Documents:AnalyzeEntitySentimentRequest) returns (AnalyzeEntitySentimentResponse) {
      option (google.api.http) = {
        post: "//v1/documents:analyzeEntitySentiment"
        body: "body"
      };
    }
    // Analyzes the sentiment of the provided text.
    rpc PostV1Documents:AnalyzeSentiment(PostV1Documents:AnalyzeSentimentRequest) returns (AnalyzeSentimentResponse) {
      option (google.api.http) = {
        post: "//v1/documents:analyzeSentiment"
        body: "body"
      };
    }
    // Analyzes the syntax of the text and provides sentence boundaries and
    // tokenization along with part of speech tags, dependency trees, and other
    // properties.
    rpc PostV1Documents:AnalyzeSyntax(PostV1Documents:AnalyzeSyntaxRequest) returns (AnalyzeSyntaxResponse) {
      option (google.api.http) = {
        post: "//v1/documents:analyzeSyntax"
        body: "body"
      };
    }
    // A convenience method that provides all the features that analyzeSentiment,
    // analyzeEntities, and analyzeSyntax provide in one call.
    rpc PostV1Documents:AnnotateText(PostV1Documents:AnnotateTextRequest) returns (AnnotateTextResponse) {
      option (google.api.http) = {
        post: "//v1/documents:annotateText"
        body: "body"
      };
    }
}

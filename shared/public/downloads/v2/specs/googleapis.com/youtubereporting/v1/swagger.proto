syntax = "proto3";

import "google/api/annotations.proto";

package youtubereporting;

message GetV1JobsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // If set to true, also system-managed jobs will be returned; otherwise only
    // user-created jobs will be returned. System-managed jobs can neither be
    // modified nor deleted.
    bool includeSystemManaged = 7;
    string key = 8;
    string oauth_token = 9;
    // The content owner's external ID on which behalf the user is acting on. If
    // not set, the user is acting for himself (his own channel).
    string onBehalfOfContentOwner = 10;
    // Requested page size. Server may return fewer jobs than requested.
    // If unspecified, server will pick an appropriate default.
    int32 pageSize = 11;
    // A token identifying a page of results the server should return. Typically,
    // this is the value of
    // ListReportTypesResponse.next_page_token
    // returned in response to the previous call to the `ListJobs` method.
    string pageToken = 12;
    boolean pp = 13;
    boolean prettyPrint = 14;
    string quotaUser = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

message PostV1JobsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    Job body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    // The content owner's external ID on which behalf the user is acting on. If
    // not set, the user is acting for himself (his own channel).
    string onBehalfOfContentOwner = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1JobsJobIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // The ID of the job to retrieve.
    string jobId = 7;
    string key = 8;
    string oauth_token = 9;
    // The content owner's external ID on which behalf the user is acting on. If
    // not set, the user is acting for himself (his own channel).
    string onBehalfOfContentOwner = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message DeleteV1JobsJobIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // The ID of the job to delete.
    string jobId = 7;
    string key = 8;
    string oauth_token = 9;
    // The content owner's external ID on which behalf the user is acting on. If
    // not set, the user is acting for himself (his own channel).
    string onBehalfOfContentOwner = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1JobsJobIdReportsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    // If set, only reports created after the specified date/time are returned.
    string createdAfter = 6;
    string fields = 7;
    // The ID of the job.
    string jobId = 8;
    string key = 9;
    string oauth_token = 10;
    // The content owner's external ID on which behalf the user is acting on. If
    // not set, the user is acting for himself (his own channel).
    string onBehalfOfContentOwner = 11;
    // Requested page size. Server may return fewer report types than requested.
    // If unspecified, server will pick an appropriate default.
    int32 pageSize = 12;
    // A token identifying a page of results the server should return. Typically,
    // this is the value of
    // ListReportsResponse.next_page_token
    // returned in response to the previous call to the `ListReports` method.
    string pageToken = 13;
    boolean pp = 14;
    boolean prettyPrint = 15;
    string quotaUser = 16;
    // If set, only reports whose start time is greater than or equal the
    // specified date/time are returned.
    string startTimeAtOrAfter = 17;
    // If set, only reports whose start time is smaller than the specified
    // date/time are returned.
    string startTimeBefore = 18;
    string uploadType = 19;
    string upload_protocol = 20;
}

message GetV1JobsJobIdReportsReportIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // The ID of the job.
    string jobId = 7;
    string key = 8;
    string oauth_token = 9;
    // The content owner's external ID on which behalf the user is acting on. If
    // not set, the user is acting for himself (his own channel).
    string onBehalfOfContentOwner = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    // The ID of the report to retrieve.
    string reportId = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message GetV1MediaResourceNameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    boolean pp = 9;
    boolean prettyPrint = 10;
    string quotaUser = 11;
    // Name of the media that is being downloaded.  See
    // ReadRequest.resource_name.
    string resourceName = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message GetV1ReportTypesRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // If set to true, also system-managed report types will be returned;
    // otherwise only the report types that can be used to create new reporting
    // jobs will be returned.
    bool includeSystemManaged = 7;
    string key = 8;
    string oauth_token = 9;
    // The content owner's external ID on which behalf the user is acting on. If
    // not set, the user is acting for himself (his own channel).
    string onBehalfOfContentOwner = 10;
    // Requested page size. Server may return fewer report types than requested.
    // If unspecified, server will pick an appropriate default.
    int32 pageSize = 11;
    // A token identifying a page of results the server should return. Typically,
    // this is the value of
    // ListReportTypesResponse.next_page_token
    // returned in response to the previous call to the `ListReportTypes` method.
    string pageToken = 12;
    boolean pp = 13;
    boolean prettyPrint = 14;
    string quotaUser = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

enum $.Xgafv {
    $XGAFV_1 = 0;
    $XGAFV_2 = 1;
}

message Empty {
}

message Job {
    // The creation date/time of the job.
    string createTime = 1;
    // The date/time when this job will expire/expired. After a job expired, no
    // new reports are generated.
    string expireTime = 2;
    // The server-generated ID of the job (max. 40 characters).
    string id = 3;
    // The name of the job (max. 100 characters).
    string name = 4;
    // The type of reports this job creates. Corresponds to the ID of a
    // ReportType.
    string reportTypeId = 5;
    // True if this a system-managed job that cannot be modified by the user;
    // otherwise false.
    bool systemManaged = 6;
}

message ListJobsResponse {
    // The list of jobs.
    repeated Job jobs = 1;
    // A token to retrieve next page of results.
    // Pass this value in the
    // ListJobsRequest.page_token
    // field in the subsequent call to `ListJobs` method to retrieve the next
    // page of results.
    string nextPageToken = 2;
}

message ListReportTypesResponse {
    // A token to retrieve next page of results.
    // Pass this value in the
    // ListReportTypesRequest.page_token
    // field in the subsequent call to `ListReportTypes` method to retrieve the next
    // page of results.
    string nextPageToken = 1;
    // The list of report types.
    repeated ReportType reportTypes = 2;
}

message ListReportsResponse {
    // A token to retrieve next page of results.
    // Pass this value in the
    // ListReportsRequest.page_token
    // field in the subsequent call to `ListReports` method to retrieve the next
    // page of results.
    string nextPageToken = 1;
    // The list of report types.
    repeated Report reports = 2;
}

message Media {
    // Name of the media resource.
    string resourceName = 1;
}

message Report {
    // The date/time when this report was created.
    string createTime = 1;
    // The URL from which the report can be downloaded (max. 1000 characters).
    string downloadUrl = 2;
    // The end of the time period that the report instance covers. The value is
    // exclusive.
    string endTime = 3;
    // The server-generated ID of the report.
    string id = 4;
    // The date/time when the job this report belongs to will expire/expired.
    string jobExpireTime = 5;
    // The ID of the job that created this report.
    string jobId = 6;
    // The start of the time period that the report instance covers. The value is
    // inclusive.
    string startTime = 7;
}

message ReportType {
    // The date/time when this report type was/will be deprecated.
    string deprecateTime = 1;
    // The ID of the report type (max. 100 characters).
    string id = 2;
    // The name of the report type (max. 100 characters).
    string name = 3;
    // True if this a system-managed report type; otherwise false. Reporting jobs
    // for system-managed report types are created automatically and can thus not
    // be used in the `CreateJob` method.
    bool systemManaged = 4;
}

enum Alt {
    JSON = 0;
    MEDIA = 1;
    PROTO = 2;
}

service YouTubeReportingService {
    // Lists jobs.
    rpc GetV1Jobs(GetV1JobsRequest) returns (ListJobsResponse) {
      option (google.api.http) = {
        get: "//v1/jobs"
      };
    }
    // Creates a job and returns it.
    rpc PostV1Jobs(PostV1JobsRequest) returns (Job) {
      option (google.api.http) = {
        post: "//v1/jobs"
        body: "body"
      };
    }
    // Gets a job.
    rpc GetV1JobsJobId(GetV1JobsJobIdRequest) returns (Job) {
      option (google.api.http) = {
        get: "//v1/jobs/{jobId}"
      };
    }
    // Deletes a job.
    rpc DeleteV1JobsJobId(DeleteV1JobsJobIdRequest) returns (Empty) {
      option (google.api.http) = {
        delete: "//v1/jobs/{jobId}"
      };
    }
    // Lists reports created by a specific job.
    // Returns NOT_FOUND if the job does not exist.
    rpc GetV1JobsJobIdReports(GetV1JobsJobIdReportsRequest) returns (ListReportsResponse) {
      option (google.api.http) = {
        get: "//v1/jobs/{jobId}/reports"
      };
    }
    // Gets the metadata of a specific report.
    rpc GetV1JobsJobIdReportsReportId(GetV1JobsJobIdReportsReportIdRequest) returns (Report) {
      option (google.api.http) = {
        get: "//v1/jobs/{jobId}/reports/{reportId}"
      };
    }
    // Method for media download. Download is supported
    // on the URI `/v1/media/{+name}?alt=media`.
    rpc GetV1MediaResourceName(GetV1MediaResourceNameRequest) returns (Media) {
      option (google.api.http) = {
        get: "//v1/media/{resourceName}"
      };
    }
    // Lists report types.
    rpc GetV1ReportTypes(GetV1ReportTypesRequest) returns (ListReportTypesResponse) {
      option (google.api.http) = {
        get: "//v1/reportTypes"
      };
    }
}

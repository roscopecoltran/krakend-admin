syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package googleappengineadmin;

message GetV1alphaAppsAppsIdAuthorizedCertificatesRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    // Part of `parent`. Name of the parent Application resource. Example: apps/myapp.
    string appsId = 4;
    string bearer_token = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    // Maximum results to return per page.
    int32 pageSize = 10;
    // Continuation token for fetching the next page of results.
    string pageToken = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
    // Controls the set of fields returned in the LIST response.
    enum GetV1alphaAppsAppsIdAuthorizedCertificatesRequest_View {
        GETV1ALPHAAPPSAPPSIDAUTHORIZEDCERTIFICATESREQUEST_VIEW_BASIC_CERTIFICATE = 0;
        GETV1ALPHAAPPSAPPSIDAUTHORIZEDCERTIFICATESREQUEST_VIEW_FULL_CERTIFICATE = 1;
    }
    GetV1alphaAppsAppsIdAuthorizedCertificatesRequest_View view = 17;
}

message PostV1alphaAppsAppsIdAuthorizedCertificatesRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    // Part of `parent`. Name of the parent Application resource. Example: apps/myapp.
    string appsId = 4;
    string bearer_token = 5;
    AuthorizedCertificate body = 6;
    string callback = 7;
    string fields = 8;
    string key = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1alphaAppsAppsIdAuthorizedCertificatesAuthorizedCertificatesIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    // Part of `name`. Name of the resource requested. Example: apps/myapp/authorizedCertificates/12345.
    string appsId = 4;
    // Part of `name`. See documentation of `appsId`.
    string authorizedCertificatesId = 5;
    string bearer_token = 6;
    string callback = 7;
    string fields = 8;
    string key = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
    // Controls the set of fields returned in the GET response.
    enum GetV1alphaAppsAppsIdAuthorizedCertificatesAuthorizedCertificatesIdRequest_View {
        GETV1ALPHAAPPSAPPSIDAUTHORIZEDCERTIFICATESAUTHORIZEDCERTIFICATESIDREQUEST_VIEW_BASIC_CERTIFICATE = 0;
        GETV1ALPHAAPPSAPPSIDAUTHORIZEDCERTIFICATESAUTHORIZEDCERTIFICATESIDREQUEST_VIEW_FULL_CERTIFICATE = 1;
    }
    GetV1alphaAppsAppsIdAuthorizedCertificatesAuthorizedCertificatesIdRequest_View view = 16;
}

message DeleteV1alphaAppsAppsIdAuthorizedCertificatesAuthorizedCertificatesIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    // Part of `name`. Name of the resource to delete. Example: apps/myapp/authorizedCertificates/12345.
    string appsId = 4;
    // Part of `name`. See documentation of `appsId`.
    string authorizedCertificatesId = 5;
    string bearer_token = 6;
    string callback = 7;
    string fields = 8;
    string key = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1alphaAppsAppsIdAuthorizedDomainsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    // Part of `parent`. Name of the parent Application resource. Example: apps/myapp.
    string appsId = 4;
    string bearer_token = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    // Maximum results to return per page.
    int32 pageSize = 10;
    // Continuation token for fetching the next page of results.
    string pageToken = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message GetV1alphaAppsAppsIdDomainMappingsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    // Part of `parent`. Name of the parent Application resource. Example: apps/myapp.
    string appsId = 4;
    string bearer_token = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    // Maximum results to return per page.
    int32 pageSize = 10;
    // Continuation token for fetching the next page of results.
    string pageToken = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message PostV1alphaAppsAppsIdDomainMappingsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    // Part of `parent`. Name of the parent Application resource. Example: apps/myapp.
    string appsId = 4;
    string bearer_token = 5;
    DomainMapping body = 6;
    string callback = 7;
    string fields = 8;
    string key = 9;
    // Whether a managed certificate should be provided by App Engine. If true, a certificate ID must be manaually set in the DomainMapping resource to configure SSL for this domain. If false, a managed certificate will be provisioned and a certificate ID will be automatically populated.
    bool noManagedCertificate = 10;
    string oauth_token = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message GetV1alphaAppsAppsIdDomainMappingsDomainMappingsIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    // Part of `name`. Name of the resource requested. Example: apps/myapp/domainMappings/example.com.
    string appsId = 4;
    string bearer_token = 5;
    string callback = 6;
    // Part of `name`. See documentation of `appsId`.
    string domainMappingsId = 7;
    string fields = 8;
    string key = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message DeleteV1alphaAppsAppsIdDomainMappingsDomainMappingsIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    // Part of `name`. Name of the resource to delete. Example: apps/myapp/domainMappings/example.com.
    string appsId = 4;
    string bearer_token = 5;
    string callback = 6;
    // Part of `name`. See documentation of `appsId`.
    string domainMappingsId = 7;
    string fields = 8;
    string key = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1alphaAppsAppsIdLocationsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    // Part of `name`. The resource that owns the locations collection, if applicable.
    string appsId = 4;
    string bearer_token = 5;
    string callback = 6;
    string fields = 7;
    // The standard list filter.
    string filter = 8;
    string key = 9;
    string oauth_token = 10;
    // The standard list page size.
    int32 pageSize = 11;
    // The standard list page token.
    string pageToken = 12;
    boolean pp = 13;
    boolean prettyPrint = 14;
    string quotaUser = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

message GetV1alphaAppsAppsIdLocationsLocationsIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    // Part of `name`. Resource name for the location.
    string appsId = 4;
    string bearer_token = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    // Part of `name`. See documentation of `appsId`.
    string locationsId = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1alphaAppsAppsIdOperationsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    // Part of `name`. The name of the operation's parent resource.
    string appsId = 4;
    string bearer_token = 5;
    string callback = 6;
    string fields = 7;
    // The standard list filter.
    string filter = 8;
    string key = 9;
    string oauth_token = 10;
    // The standard list page size.
    int32 pageSize = 11;
    // The standard list page token.
    string pageToken = 12;
    boolean pp = 13;
    boolean prettyPrint = 14;
    string quotaUser = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

message GetV1alphaAppsAppsIdOperationsOperationsIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    // Part of `name`. The name of the operation resource.
    string appsId = 4;
    string bearer_token = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    // Part of `name`. See documentation of `appsId`.
    string operationsId = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

enum $.Xgafv {
    $XGAFV_1 = 0;
    $XGAFV_2 = 1;
}

message AuthorizedCertificate {
    // The SSL certificate serving the AuthorizedCertificate resource. This must be obtained independently from a certificate authority.
    CertificateRawData certificateRawData = 1;
    // The user-specified display name of the certificate. This is not guaranteed to be unique. Example: My Certificate.
    string displayName = 2;
    // Aggregate count of the domain mappings with this certificate mapped. This count includes domain mappings on applications for which the user does not have VIEWER permissions.Only returned by GET or LIST requests when specifically requested by the view=FULL_CERTIFICATE option.@OutputOnly
    int32 domainMappingsCount = 3;
    // Topmost applicable domains of this certificate. This certificate applies to these domains and their subdomains. Example: example.com.@OutputOnly
    repeated string domainNames = 4;
    // The time when this certificate expires. To update the renewal time on this certificate, upload an SSL certificate with a different expiration time using AuthorizedCertificates.UpdateAuthorizedCertificate.@OutputOnly
    string expireTime = 5;
    // Relative name of the certificate. This is a unique value autogenerated on AuthorizedCertificate resource creation. Example: 12345.@OutputOnly
    string id = 6;
    // Only applicable if this certificate is managed by App Engine. Managed certificates are tied to the lifecycle of a DomainMapping and cannot be updated or deleted via the AuthorizedCertificates API. If this certificate is manually administered by the user, this field will be empty.@OutputOnly
    ManagedCertificate managedCertificate = 7;
    // Full path to the AuthorizedCertificate resource in the API. Example: apps/myapp/authorizedCertificates/12345.@OutputOnly
    string name = 8;
    // The full paths to user visible Domain Mapping resources that have this certificate mapped. Example: apps/myapp/domainMappings/example.com.This may not represent the full list of mapped domain mappings if the user does not have VIEWER permissions on all of the applications that have this certificate mapped. See domain_mappings_count for a complete count.Only returned by GET or LIST requests when specifically requested by the view=FULL_CERTIFICATE option.@OutputOnly
    repeated string visibleDomainMappings = 9;
}

message AuthorizedDomain {
    // Fully qualified domain name of the domain authorized for use. Example: example.com.
    string id = 1;
    // Full path to the AuthorizedDomain resource in the API. Example: apps/myapp/authorizedDomains/example.com.@OutputOnly
    string name = 2;
}

message CertificateRawData {
    // Unencrypted PEM encoded RSA private key. This field is set once on certificate creation and then encrypted. The key size must be 2048 bits or fewer. Must include the header and footer. Example: <pre> -----BEGIN RSA PRIVATE KEY----- <unencrypted_key_value> -----END RSA PRIVATE KEY----- </pre> @InputOnly
    string privateKey = 1;
    // PEM encoded x.509 public key certificate. This field is set once on certificate creation. Must include the header and footer. Example: <pre> -----BEGIN CERTIFICATE----- <certificate_value> -----END CERTIFICATE----- </pre>
    string publicCertificate = 2;
}

message DomainMapping {
    // Relative name of the domain serving the application. Example: example.com.
    string id = 1;
    // Full path to the DomainMapping resource in the API. Example: apps/myapp/domainMapping/example.com.@OutputOnly
    string name = 2;
    // The resource records required to configure this domain mapping. These records must be added to the domain's DNS configuration in order to serve the application via this domain mapping.@OutputOnly
    repeated ResourceRecord resourceRecords = 3;
    // SSL configuration for this domain. If unconfigured, this domain will not serve with SSL.
    SslSettings sslSettings = 4;
}

message Empty {
}

message ListAuthorizedCertificatesResponse {
    // The SSL certificates the user is authorized to administer.
    repeated AuthorizedCertificate certificates = 1;
    // Continuation token for fetching the next page of results.
    string nextPageToken = 2;
}

message ListAuthorizedDomainsResponse {
    // The authorized domains belonging to the user.
    repeated AuthorizedDomain domains = 1;
    // Continuation token for fetching the next page of results.
    string nextPageToken = 2;
}

message ListDomainMappingsResponse {
    // The domain mappings for the application.
    repeated DomainMapping domainMappings = 1;
    // Continuation token for fetching the next page of results.
    string nextPageToken = 2;
}

message ListLocationsResponse {
    // A list of locations that matches the specified filter in the request.
    repeated Location locations = 1;
    // The standard List next-page token.
    string nextPageToken = 2;
}

message ListOperationsResponse {
    // The standard List next-page token.
    string nextPageToken = 1;
    // A list of operations that matches the specified filter in the request.
    repeated Operation operations = 2;
}

message Location {
    // Cross-service attributes for the location. For example
    // {"cloud.googleapis.com/region": "us-east1"}
    map<string, string> labels = 1;
    // The canonical id for this location. For example: "us-east1".
    string locationId = 2;
    // Service-specific metadata. For example the available capacity at the given location.
    map<string, > metadata = 3;
    // Resource name for the location, which may vary between implementations. For example: "projects/example-project/locations/us-east1"
    string name = 4;
}

message LocationMetadata {
    // App Engine Flexible Environment is available in the given location.@OutputOnly
    bool flexibleEnvironmentAvailable = 1;
    // App Engine Standard Environment is available in the given location.@OutputOnly
    bool standardEnvironmentAvailable = 2;
}

message ManagedCertificate {
    // Time at which the certificate was last renewed. The renewal process is fully managed. Certificate renewal will automatically occur before the certificate expires. Renewal errors can be tracked via ManagementStatus.@OutputOnly
    string lastRenewalTime = 1;
    // Status of certificate management. Refers to the most recent certificate acquisition or renewal attempt.@OutputOnly
    enum ManagedCertificate_Statu {
        MANAGEDCERTIFICATE_STATU_UNSPECIFIED_STATUS = 0;
        MANAGEDCERTIFICATE_STATU_OK = 1;
        MANAGEDCERTIFICATE_STATU_PENDING = 2;
        MANAGEDCERTIFICATE_STATU_FAILED_RETRYING_INTERNAL = 3;
        MANAGEDCERTIFICATE_STATU_FAILED_RETRYING_NOT_VISIBLE = 4;
        MANAGEDCERTIFICATE_STATU_FAILED_PERMANENTLY_NOT_VISIBLE = 5;
    }
    ManagedCertificate_Statu status = 2;
}

message Operation {
    // If the value is false, it means the operation is still in progress. If true, the operation is completed, and either error or response is available.
    bool done = 1;
    // The error result of the operation in case of failure or cancellation.
    Status error = 2;
    // Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
    map<string, > metadata = 3;
    // The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the name should have the format of operations/some/unique/name.
    string name = 4;
    // The normal response of the operation in case of success. If the original method returns no data on success, such as Delete, the response is google.protobuf.Empty. If the original method is standard Get/Create/Update, the response should be the resource. For other methods, the response should have the type XxxResponse, where Xxx is the original method name. For example, if the original method name is TakeSnapshot(), the inferred response type is TakeSnapshotResponse.
    map<string, > response = 5;
}

message OperationMetadata {
    // Timestamp that this operation completed.@OutputOnly
    string endTime = 1;
    // Timestamp that this operation was created.@OutputOnly
    string insertTime = 2;
    // API method that initiated this operation. Example: google.appengine.v1beta4.Version.CreateVersion.@OutputOnly
    string method = 3;
    // Type of this operation. Deprecated, use method field instead. Example: "create_version".@OutputOnly
    string operationType = 4;
    // Name of the resource that this operation is acting on. Example: apps/myapp/modules/default.@OutputOnly
    string target = 5;
    // User who requested this operation.@OutputOnly
    string user = 6;
}

message OperationMetadataExperimental {
    // Time that this operation completed.@OutputOnly
    string endTime = 1;
    // Time that this operation was created.@OutputOnly
    string insertTime = 2;
    // API method that initiated this operation. Example: google.appengine.experimental.CustomDomains.CreateCustomDomain.@OutputOnly
    string method = 3;
    // Name of the resource that this operation is acting on. Example: apps/myapp/customDomains/example.com.@OutputOnly
    string target = 4;
    // User who requested this operation.@OutputOnly
    string user = 5;
}

message OperationMetadataV1 {
    // Time that this operation completed.@OutputOnly
    string endTime = 1;
    // Ephemeral message that may change every time the operation is polled. @OutputOnly
    string ephemeralMessage = 2;
    // Time that this operation was created.@OutputOnly
    string insertTime = 3;
    // API method that initiated this operation. Example: google.appengine.v1.Versions.CreateVersion.@OutputOnly
    string method = 4;
    // Name of the resource that this operation is acting on. Example: apps/myapp/services/default.@OutputOnly
    string target = 5;
    // User who requested this operation.@OutputOnly
    string user = 6;
    // Durable messages that persist on every operation poll. @OutputOnly
    repeated string warning = 7;
}

message OperationMetadataV1Alpha {
    // Time that this operation completed.@OutputOnly
    string endTime = 1;
    // Ephemeral message that may change every time the operation is polled. @OutputOnly
    string ephemeralMessage = 2;
    // Time that this operation was created.@OutputOnly
    string insertTime = 3;
    // API method that initiated this operation. Example: google.appengine.v1alpha.Versions.CreateVersion.@OutputOnly
    string method = 4;
    // Name of the resource that this operation is acting on. Example: apps/myapp/services/default.@OutputOnly
    string target = 5;
    // User who requested this operation.@OutputOnly
    string user = 6;
    // Durable messages that persist on every operation poll. @OutputOnly
    repeated string warning = 7;
}

message OperationMetadataV1Beta {
    // Time that this operation completed.@OutputOnly
    string endTime = 1;
    // Ephemeral message that may change every time the operation is polled. @OutputOnly
    string ephemeralMessage = 2;
    // Time that this operation was created.@OutputOnly
    string insertTime = 3;
    // API method that initiated this operation. Example: google.appengine.v1beta.Versions.CreateVersion.@OutputOnly
    string method = 4;
    // Name of the resource that this operation is acting on. Example: apps/myapp/services/default.@OutputOnly
    string target = 5;
    // User who requested this operation.@OutputOnly
    string user = 6;
    // Durable messages that persist on every operation poll. @OutputOnly
    repeated string warning = 7;
}

message OperationMetadataV1Beta5 {
    // Timestamp that this operation completed.@OutputOnly
    string endTime = 1;
    // Timestamp that this operation was created.@OutputOnly
    string insertTime = 2;
    // API method name that initiated this operation. Example: google.appengine.v1beta5.Version.CreateVersion.@OutputOnly
    string method = 3;
    // Name of the resource that this operation is acting on. Example: apps/myapp/services/default.@OutputOnly
    string target = 4;
    // User who requested this operation.@OutputOnly
    string user = 5;
}

message ResourceRecord {
    // Relative name of the object affected by this record. Only applicable for CNAME records. Example: 'www'.
    string name = 1;
    // Data for this record. Values vary by record type, as defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1).
    string rrdata = 2;
    // Resource record type. Example: AAAA.
    enum ResourceRecord_Type {
        RESOURCERECORD_TYPE_A = 0;
        RESOURCERECORD_TYPE_AAAA = 1;
        RESOURCERECORD_TYPE_CNAME = 2;
    }
    ResourceRecord_Type type = 3;
}

message SslSettings {
    // ID of the AuthorizedCertificate resource configuring SSL for the application. Clearing this field will remove SSL support.By default, a managed certificate is automatically created for every domain mapping. To omit SSL support or to configure SSL manually, specify no_managed_certificate on a CREATE or UPDATE request. You must be authorized to administer the AuthorizedCertificate resource to manually map it to a DomainMapping resource. Example: 12345.
    string certificateId = 1;
    // Whether the mapped certificate is an App Engine managed certificate. Managed certificates are created by default with a domain mapping. To opt out, specify no_managed_certificate on a CREATE or UPDATE request.@OutputOnly
    bool isManagedCertificate = 2;
}

message Status {
    // The status code, which should be an enum value of google.rpc.Code.
    int32 code = 1;
    // A list of messages that carry the error details. There is a common set of message types for APIs to use.
    message Detail {
    }
    repeated Detail details = 2;
    // A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
    string message = 3;
}

enum Alt {
    JSON = 0;
    MEDIA = 1;
    PROTO = 2;
}

service GoogleAppEngineAdminService {
    // Lists all SSL certificates the user is authorized to administer.
    rpc GetV1alphaAppsAppsIdAuthorizedCertificates(GetV1alphaAppsAppsIdAuthorizedCertificatesRequest) returns (ListAuthorizedCertificatesResponse) {
      option (google.api.http) = {
        get: "//v1alpha/apps/{appsId}/authorizedCertificates"
      };
    }
    // Uploads the specified SSL certificate.
    rpc PostV1alphaAppsAppsIdAuthorizedCertificates(PostV1alphaAppsAppsIdAuthorizedCertificatesRequest) returns (AuthorizedCertificate) {
      option (google.api.http) = {
        post: "//v1alpha/apps/{appsId}/authorizedCertificates"
        body: "body"
      };
    }
    // Gets the specified SSL certificate.
    rpc GetV1alphaAppsAppsIdAuthorizedCertificatesAuthorizedCertificatesId(GetV1alphaAppsAppsIdAuthorizedCertificatesAuthorizedCertificatesIdRequest) returns (AuthorizedCertificate) {
      option (google.api.http) = {
        get: "//v1alpha/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}"
      };
    }
    // Deletes the specified SSL certificate.
    rpc DeleteV1alphaAppsAppsIdAuthorizedCertificatesAuthorizedCertificatesId(DeleteV1alphaAppsAppsIdAuthorizedCertificatesAuthorizedCertificatesIdRequest) returns (Empty) {
      option (google.api.http) = {
        delete: "//v1alpha/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}"
      };
    }
    // Lists all domains the user is authorized to administer.
    rpc GetV1alphaAppsAppsIdAuthorizedDomains(GetV1alphaAppsAppsIdAuthorizedDomainsRequest) returns (ListAuthorizedDomainsResponse) {
      option (google.api.http) = {
        get: "//v1alpha/apps/{appsId}/authorizedDomains"
      };
    }
    // Lists the domain mappings on an application.
    rpc GetV1alphaAppsAppsIdDomainMappings(GetV1alphaAppsAppsIdDomainMappingsRequest) returns (ListDomainMappingsResponse) {
      option (google.api.http) = {
        get: "//v1alpha/apps/{appsId}/domainMappings"
      };
    }
    // Maps a domain to an application. A user must be authorized to administer a domain in order to map it to an application. For a list of available authorized domains, see AuthorizedDomains.ListAuthorizedDomains.
    rpc PostV1alphaAppsAppsIdDomainMappings(PostV1alphaAppsAppsIdDomainMappingsRequest) returns (Operation) {
      option (google.api.http) = {
        post: "//v1alpha/apps/{appsId}/domainMappings"
        body: "body"
      };
    }
    // Gets the specified domain mapping.
    rpc GetV1alphaAppsAppsIdDomainMappingsDomainMappingsId(GetV1alphaAppsAppsIdDomainMappingsDomainMappingsIdRequest) returns (DomainMapping) {
      option (google.api.http) = {
        get: "//v1alpha/apps/{appsId}/domainMappings/{domainMappingsId}"
      };
    }
    // Deletes the specified domain mapping. A user must be authorized to administer the associated domain in order to delete a DomainMapping resource.
    rpc DeleteV1alphaAppsAppsIdDomainMappingsDomainMappingsId(DeleteV1alphaAppsAppsIdDomainMappingsDomainMappingsIdRequest) returns (Operation) {
      option (google.api.http) = {
        delete: "//v1alpha/apps/{appsId}/domainMappings/{domainMappingsId}"
      };
    }
    // Lists information about the supported locations for this service.
    rpc GetV1alphaAppsAppsIdLocations(GetV1alphaAppsAppsIdLocationsRequest) returns (ListLocationsResponse) {
      option (google.api.http) = {
        get: "//v1alpha/apps/{appsId}/locations"
      };
    }
    // Get information about a location.
    rpc GetV1alphaAppsAppsIdLocationsLocationsId(GetV1alphaAppsAppsIdLocationsLocationsIdRequest) returns (Location) {
      option (google.api.http) = {
        get: "//v1alpha/apps/{appsId}/locations/{locationsId}"
      };
    }
    // Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.NOTE: the name binding allows API services to override the binding to use different resource name schemes, such as users/*/operations. To override the binding, API services can add a binding such as "/v1/{name=users/*}/operations" to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.
    rpc GetV1alphaAppsAppsIdOperations(GetV1alphaAppsAppsIdOperationsRequest) returns (ListOperationsResponse) {
      option (google.api.http) = {
        get: "//v1alpha/apps/{appsId}/operations"
      };
    }
    // Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
    rpc GetV1alphaAppsAppsIdOperationsOperationsId(GetV1alphaAppsAppsIdOperationsOperationsIdRequest) returns (Operation) {
      option (google.api.http) = {
        get: "//v1alpha/apps/{appsId}/operations/{operationsId}"
      };
    }
}

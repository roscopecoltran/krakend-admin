syntax = "proto3";

import "google/api/annotations.proto";

package stackdriverdebugger;

message PostV2ControllerDebuggeesRegisterRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    RegisterDebuggeeRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message GetV2ControllerDebuggeesDebuggeeIdBreakpointsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    // Identifies the debuggee.
    string debuggeeId = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // If set to `true` (recommended), returns `google.rpc.Code.OK` status and
    // sets the `wait_expired` response field to `true` when the server-selected
    // timeout has expired.
    // 
    // If set to `false` (deprecated), returns `google.rpc.Code.ABORTED` status
    // when the server-selected timeout has expired.
    bool successOnTimeout = 13;
    string uploadType = 14;
    string upload_protocol = 15;
    // A token that, if specified, blocks the method call until the list
    // of active breakpoints has changed, or a server-selected timeout has
    // expired. The value should be set from the `next_wait_token` field in
    // the last response. The initial value should be set to `"init"`.
    string waitToken = 16;
}

message PutV2ControllerDebuggeesDebuggeeIdBreakpointsIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    UpdateActiveBreakpointRequest body = 5;
    string callback = 6;
    // Identifies the debuggee being debugged.
    string debuggeeId = 7;
    string fields = 8;
    // Breakpoint identifier, unique in the scope of the debuggee.
    string id = 9;
    string key = 10;
    string oauth_token = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message GetV2DebuggerDebuggeesRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    // The client version making the call.
    // Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).
    string clientVersion = 6;
    string fields = 7;
    // When set to `true`, the result includes all debuggees. Otherwise, the
    // result includes only debuggees that are active.
    bool includeInactive = 8;
    string key = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    // Project number of a Google Cloud project whose debuggees to list.
    string project = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message GetV2DebuggerDebuggeesDebuggeeIdBreakpointsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // Only breakpoints with the specified action will pass the filter.
    enum GetV2DebuggerDebuggeesDebuggeeIdBreakpointsRequest_Action.Value {
        GETV2DEBUGGERDEBUGGEESDEBUGGEEIDBREAKPOINTSREQUEST_ACTIONVALUE_CAPTURE = 0;
        GETV2DEBUGGERDEBUGGEESDEBUGGEEIDBREAKPOINTSREQUEST_ACTIONVALUE_LOG = 1;
    }
    GetV2DebuggerDebuggeesDebuggeeIdBreakpointsRequest_Action.Value action.value = 3;
    alt alt = 4;
    string bearer_token = 5;
    string callback = 6;
    // The client version making the call.
    // Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).
    string clientVersion = 7;
    // ID of the debuggee whose breakpoints to list.
    string debuggeeId = 8;
    string fields = 9;
    // When set to `true`, the response includes the list of breakpoints set by
    // any user. Otherwise, it includes only breakpoints set by the caller.
    bool includeAllUsers = 10;
    // When set to `true`, the response includes active and inactive
    // breakpoints. Otherwise, it includes only active breakpoints.
    bool includeInactive = 11;
    string key = 12;
    string oauth_token = 13;
    boolean pp = 14;
    boolean prettyPrint = 15;
    string quotaUser = 16;
    // This field is deprecated. The following fields are always stripped out of
    // the result: `stack_frames`, `evaluated_expressions` and `variable_table`.
    bool stripResults = 17;
    string uploadType = 18;
    string upload_protocol = 19;
    // A wait token that, if specified, blocks the call until the breakpoints
    // list has changed, or a server selected timeout has expired.  The value
    // should be set from the last response. The error code
    // `google.rpc.Code.ABORTED` (RPC) is returned on wait timeout, which
    // should be called again with the same `wait_token`.
    string waitToken = 20;
}

message PostV2DebuggerDebuggeesDebuggeeIdBreakpointsSetRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    Breakpoint body = 5;
    string callback = 6;
    // The client version making the call.
    // Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).
    string clientVersion = 7;
    // ID of the debuggee where the breakpoint is to be set.
    string debuggeeId = 8;
    string fields = 9;
    string key = 10;
    string oauth_token = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message GetV2DebuggerDebuggeesDebuggeeIdBreakpointsBreakpointIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    // ID of the breakpoint to get.
    string breakpointId = 5;
    string callback = 6;
    // The client version making the call.
    // Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).
    string clientVersion = 7;
    // ID of the debuggee whose breakpoint to get.
    string debuggeeId = 8;
    string fields = 9;
    string key = 10;
    string oauth_token = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message DeleteV2DebuggerDebuggeesDebuggeeIdBreakpointsBreakpointIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    // ID of the breakpoint to delete.
    string breakpointId = 5;
    string callback = 6;
    // The client version making the call.
    // Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).
    string clientVersion = 7;
    // ID of the debuggee whose breakpoint to delete.
    string debuggeeId = 8;
    string fields = 9;
    string key = 10;
    string oauth_token = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

enum $.Xgafv {
    $XGAFV_1 = 0;
    $XGAFV_2 = 1;
}

message AliasContext {
    // The alias kind.
    enum AliasContext_Kind {
        ALIASCONTEXT_KIND_ANY = 0;
        ALIASCONTEXT_KIND_FIXED = 1;
        ALIASCONTEXT_KIND_MOVABLE = 2;
        ALIASCONTEXT_KIND_OTHER = 3;
    }
    AliasContext_Kind kind = 1;
    // The alias name.
    string name = 2;
}

message Breakpoint {
    // Action that the agent should perform when the code at the
    // breakpoint location is hit.
    enum Breakpoint_Action {
        BREAKPOINT_ACTION_CAPTURE = 0;
        BREAKPOINT_ACTION_LOG = 1;
    }
    Breakpoint_Action action = 1;
    // Condition that triggers the breakpoint.
    // The condition is a compound boolean expression composed using expressions
    // in a programming language at the source location.
    string condition = 2;
    // Time this breakpoint was created by the server in seconds resolution.
    string createTime = 3;
    // Values of evaluated expressions at breakpoint time.
    // The evaluated expressions appear in exactly the same order they
    // are listed in the `expressions` field.
    // The `name` field holds the original expression text, the `value` or
    // `members` field holds the result of the evaluated expression.
    // If the expression cannot be evaluated, the `status` inside the `Variable`
    // will indicate an error and contain the error text.
    repeated Variable evaluatedExpressions = 4;
    // List of read-only expressions to evaluate at the breakpoint location.
    // The expressions are composed using expressions in the programming language
    // at the source location. If the breakpoint action is `LOG`, the evaluated
    // expressions are included in log statements.
    repeated string expressions = 5;
    // Time this breakpoint was finalized as seen by the server in seconds
    // resolution.
    string finalTime = 6;
    // Breakpoint identifier, unique in the scope of the debuggee.
    string id = 7;
    // When true, indicates that this is a final result and the
    // breakpoint state will not change from here on.
    bool isFinalState = 8;
    // A set of custom breakpoint properties, populated by the agent, to be
    // displayed to the user.
    map<string, string> labels = 9;
    // Breakpoint source location.
    SourceLocation location = 10;
    // Indicates the severity of the log. Only relevant when action is `LOG`.
    enum Breakpoint_LogLevel {
        BREAKPOINT_LOGLEVEL_INFO = 0;
        BREAKPOINT_LOGLEVEL_WARNING = 1;
        BREAKPOINT_LOGLEVEL_ERROR = 2;
    }
    Breakpoint_LogLevel logLevel = 11;
    // Only relevant when action is `LOG`. Defines the message to log when
    // the breakpoint hits. The message may include parameter placeholders `$0`,
    // `$1`, etc. These placeholders are replaced with the evaluated value
    // of the appropriate expression. Expressions not referenced in
    // `log_message_format` are not logged.
    // 
    // Example: `Message received, id = $0, count = $1` with
    // `expressions` = `[ message.id, message.count ]`.
    string logMessageFormat = 12;
    // The stack at breakpoint time.
    repeated StackFrame stackFrames = 13;
    // Breakpoint status.
    // 
    // The status includes an error flag and a human readable message.
    // This field is usually unset. The message can be either
    // informational or an error message. Regardless, clients should always
    // display the text message back to the user.
    // 
    // Error status indicates complete failure of the breakpoint.
    // 
    // Example (non-final state): `Still loading symbols...`
    // 
    // Examples (final state):
    // 
    // *   `Invalid line number` referring to location
    // *   `Field f not found in class C` referring to condition
    StatusMessage status = 14;
    // E-mail address of the user that created this breakpoint
    string userEmail = 15;
    // The `variable_table` exists to aid with computation, memory and network
    // traffic optimization.  It enables storing a variable once and reference
    // it from multiple variables, including variables stored in the
    // `variable_table` itself.
    // For example, the same `this` object, which may appear at many levels of
    // the stack, can have all of its data stored once in this table.  The
    // stack frame variables then would hold only a reference to it.
    // 
    // The variable `var_table_index` field is an index into this repeated field.
    // The stored objects are nameless and get their name from the referencing
    // variable. The effective variable is a merge of the referencing variable
    // and the referenced variable.
    repeated Variable variableTable = 16;
}

message CloudRepoSourceContext {
    // An alias, which may be a branch or tag.
    AliasContext aliasContext = 1;
    // The name of an alias (branch, tag, etc.).
    string aliasName = 2;
    // The ID of the repo.
    RepoId repoId = 3;
    // A revision ID.
    string revisionId = 4;
}

message CloudWorkspaceId {
    // The unique name of the workspace within the repo.  This is the name
    // chosen by the client in the Source API's CreateWorkspace method.
    string name = 1;
    // The ID of the repo containing the workspace.
    RepoId repoId = 2;
}

message CloudWorkspaceSourceContext {
    // The ID of the snapshot.
    // An empty snapshot_id refers to the most recent snapshot.
    string snapshotId = 1;
    // The ID of the workspace.
    CloudWorkspaceId workspaceId = 2;
}

message Debuggee {
    // Version ID of the agent.
    // Schema: `domain/language-platform/vmajor.minor` (for example
    // `google.com/java-gcp/v1.1`).
    string agentVersion = 1;
    // Human readable description of the debuggee.
    // Including a human-readable project name, environment name and version
    // information is recommended.
    string description = 2;
    // References to the locations and revisions of the source code used in the
    // deployed application.
    // 
    // NOTE: this field is experimental and can be ignored.
    repeated ExtendedSourceContext extSourceContexts = 3;
    // Unique identifier for the debuggee generated by the controller service.
    string id = 4;
    // If set to `true`, indicates that the agent should disable itself and
    // detach from the debuggee.
    bool isDisabled = 5;
    // If set to `true`, indicates that Controller service does not detect any
    // activity from the debuggee agents and the application is possibly stopped.
    bool isInactive = 6;
    // A set of custom debuggee properties, populated by the agent, to be
    // displayed to the user.
    map<string, string> labels = 7;
    // Project the debuggee is associated with.
    // Use project number or id when registering a Google Cloud Platform project.
    string project = 8;
    // References to the locations and revisions of the source code used in the
    // deployed application.
    repeated SourceContext sourceContexts = 9;
    // Human readable message to be displayed to the user about this debuggee.
    // Absence of this field indicates no status. The message can be either
    // informational or an error status.
    StatusMessage status = 10;
    // Uniquifier to further distiguish the application.
    // It is possible that different applications might have identical values in
    // the debuggee message, thus, incorrectly identified as a single application
    // by the Controller service. This field adds salt to further distiguish the
    // application. Agents should consider seeding this field with value that
    // identifies the code, binary, configuration and environment.
    string uniquifier = 11;
}

message Empty {
}

message ExtendedSourceContext {
    // Any source context.
    SourceContext context = 1;
    // Labels with user defined metadata.
    map<string, string> labels = 2;
}

message FormatMessage {
    // Format template for the message. The `format` uses placeholders `$0`,
    // `$1`, etc. to reference parameters. `$$` can be used to denote the `$`
    // character.
    // 
    // Examples:
    // 
    // *   `Failed to load '$0' which helps debug $1 the first time it
    //     is loaded.  Again, $0 is very important.`
    // *   `Please pay $$10 to use $0 instead of $1.`
    string format = 1;
    // Optional parameters to be embedded into the message.
    repeated string parameters = 2;
}

message GerritSourceContext {
    // An alias, which may be a branch or tag.
    AliasContext aliasContext = 1;
    // The name of an alias (branch, tag, etc.).
    string aliasName = 2;
    // The full project name within the host. Projects may be nested, so
    // "project/subproject" is a valid project name.
    // The "repo name" is hostURI/project.
    string gerritProject = 3;
    // The URI of a running Gerrit instance.
    string hostUri = 4;
    // A revision (commit) ID.
    string revisionId = 5;
}

message GetBreakpointResponse {
    // Complete breakpoint state.
    // The fields `id` and `location` are guaranteed to be set.
    Breakpoint breakpoint = 1;
}

message GitSourceContext {
    // Git commit hash.
    // required.
    string revisionId = 1;
    // Git repository URL.
    string url = 2;
}

message ListActiveBreakpointsResponse {
    // List of all active breakpoints.
    // The fields `id` and `location` are guaranteed to be set on each breakpoint.
    repeated Breakpoint breakpoints = 1;
    // A token that can be used in the next method call to block until
    // the list of breakpoints changes.
    string nextWaitToken = 2;
    // If set to `true`, indicates that there is no change to the
    // list of active breakpoints and the server-selected timeout has expired.
    // The `breakpoints` field would be empty and should be ignored.
    bool waitExpired = 3;
}

message ListBreakpointsResponse {
    // List of breakpoints matching the request.
    // The fields `id` and `location` are guaranteed to be set on each breakpoint.
    // The fields: `stack_frames`, `evaluated_expressions` and `variable_table`
    // are cleared on each breakpoint regardless of its status.
    repeated Breakpoint breakpoints = 1;
    // A wait token that can be used in the next call to `list` (REST) or
    // `ListBreakpoints` (RPC) to block until the list of breakpoints has changes.
    string nextWaitToken = 2;
}

message ListDebuggeesResponse {
    // List of debuggees accessible to the calling user.
    // The fields `debuggee.id` and `description` are guaranteed to be set.
    // The `description` field is a human readable field provided by agents and
    // can be displayed to users.
    repeated Debuggee debuggees = 1;
}

message ProjectRepoId {
    // The ID of the project.
    string projectId = 1;
    // The name of the repo. Leave empty for the default repo.
    string repoName = 2;
}

message RegisterDebuggeeRequest {
    // Debuggee information to register.
    // The fields `project`, `uniquifier`, `description` and `agent_version`
    // of the debuggee must be set.
    Debuggee debuggee = 1;
}

message RegisterDebuggeeResponse {
    // Debuggee resource.
    // The field `id` is guranteed to be set (in addition to the echoed fields).
    // If the field `is_disabled` is set to `true`, the agent should disable
    // itself by removing all breakpoints and detaching from the application.
    // It should however continue to poll `RegisterDebuggee` until reenabled.
    Debuggee debuggee = 1;
}

message RepoId {
    // A combination of a project ID and a repo name.
    ProjectRepoId projectRepoId = 1;
    // A server-assigned, globally unique identifier.
    string uid = 2;
}

message SetBreakpointResponse {
    // Breakpoint resource.
    // The field `id` is guaranteed to be set (in addition to the echoed fileds).
    Breakpoint breakpoint = 1;
}

message SourceContext {
    // A SourceContext referring to a revision in a cloud repo.
    CloudRepoSourceContext cloudRepo = 1;
    // A SourceContext referring to a snapshot in a cloud workspace.
    CloudWorkspaceSourceContext cloudWorkspace = 2;
    // A SourceContext referring to a Gerrit project.
    GerritSourceContext gerrit = 3;
    // A SourceContext referring to any third party Git repo (e.g. GitHub).
    GitSourceContext git = 4;
}

message SourceLocation {
    // Line inside the file. The first line in the file has the value `1`.
    int32 line = 1;
    // Path to the source file within the source context of the target binary.
    string path = 2;
}

message StackFrame {
    // Set of arguments passed to this function.
    // Note that this might not be populated for all stack frames.
    repeated Variable arguments = 1;
    // Demangled function name at the call site.
    string function = 2;
    // Set of local variables at the stack frame location.
    // Note that this might not be populated for all stack frames.
    repeated Variable locals = 3;
    // Source location of the call site.
    SourceLocation location = 4;
}

message StatusMessage {
    // Status message text.
    FormatMessage description = 1;
    // Distinguishes errors from informational messages.
    bool isError = 2;
    // Reference to which the message applies.
    enum StatusMessage_RefersTo {
        STATUSMESSAGE_REFERSTO_UNSPECIFIED = 0;
        STATUSMESSAGE_REFERSTO_BREAKPOINT_SOURCE_LOCATION = 1;
        STATUSMESSAGE_REFERSTO_BREAKPOINT_CONDITION = 2;
        STATUSMESSAGE_REFERSTO_BREAKPOINT_EXPRESSION = 3;
        STATUSMESSAGE_REFERSTO_BREAKPOINT_AGE = 4;
        STATUSMESSAGE_REFERSTO_VARIABLE_NAME = 5;
        STATUSMESSAGE_REFERSTO_VARIABLE_VALUE = 6;
    }
    StatusMessage_RefersTo refersTo = 3;
}

message UpdateActiveBreakpointRequest {
    // Updated breakpoint information.
    // The field `id` must be set.
    // The agent must echo all Breakpoint specification fields in the update.
    Breakpoint breakpoint = 1;
}

message UpdateActiveBreakpointResponse {
}

message Variable {
    // Members contained or pointed to by the variable.
    repeated Variable members = 1;
    // Name of the variable, if any.
    string name = 2;
    // Status associated with the variable. This field will usually stay
    // unset. A status of a single variable only applies to that variable or
    // expression. The rest of breakpoint data still remains valid. Variables
    // might be reported in error state even when breakpoint is not in final
    // state.
    // 
    // The message may refer to variable name with `refers_to` set to
    // `VARIABLE_NAME`. Alternatively `refers_to` will be set to `VARIABLE_VALUE`.
    // In either case variable value and members will be unset.
    // 
    // Example of error message applied to name: `Invalid expression syntax`.
    // 
    // Example of information message applied to value: `Not captured`.
    // 
    // Examples of error message applied to value:
    // 
    // *   `Malformed string`,
    // *   `Field f not found in class C`
    // *   `Null pointer dereference`
    StatusMessage status = 3;
    // Variable type (e.g. `MyClass`). If the variable is split with
    // `var_table_index`, `type` goes next to `value`. The interpretation of
    // a type is agent specific. It is recommended to include the dynamic type
    // rather than a static type of an object.
    string type = 4;
    // Simple value of the variable.
    string value = 5;
    // Reference to a variable in the shared variable table. More than
    // one variable can reference the same variable in the table. The
    // `var_table_index` field is an index into `variable_table` in Breakpoint.
    int32 varTableIndex = 6;
}

enum Alt {
    JSON = 0;
    MEDIA = 1;
    PROTO = 2;
}

service StackdriverDebuggerService {
    // Registers the debuggee with the controller service.
    // 
    // All agents attached to the same application must call this method with
    // exactly the same request content to get back the same stable `debuggee_id`.
    // Agents should call this method again whenever `google.rpc.Code.NOT_FOUND`
    // is returned from any controller method.
    // 
    // This protocol allows the controller service to disable debuggees, recover
    // from data loss, or change the `debuggee_id` format. Agents must handle
    // `debuggee_id` value changing upon re-registration.
    rpc PostV2ControllerDebuggeesRegister(PostV2ControllerDebuggeesRegisterRequest) returns (RegisterDebuggeeResponse) {
      option (google.api.http) = {
        post: "//v2/controller/debuggees/register"
        body: "body"
      };
    }
    // Returns the list of all active breakpoints for the debuggee.
    // 
    // The breakpoint specification (`location`, `condition`, and `expressions`
    // fields) is semantically immutable, although the field values may
    // change. For example, an agent may update the location line number
    // to reflect the actual line where the breakpoint was set, but this
    // doesn't change the breakpoint semantics.
    // 
    // This means that an agent does not need to check if a breakpoint has changed
    // when it encounters the same breakpoint on a successive call.
    // Moreover, an agent should remember the breakpoints that are completed
    // until the controller removes them from the active list to avoid
    // setting those breakpoints again.
    rpc GetV2ControllerDebuggeesDebuggeeIdBreakpoints(GetV2ControllerDebuggeesDebuggeeIdBreakpointsRequest) returns (ListActiveBreakpointsResponse) {
      option (google.api.http) = {
        get: "//v2/controller/debuggees/{debuggeeId}/breakpoints"
      };
    }
    // Updates the breakpoint state or mutable fields.
    // The entire Breakpoint message must be sent back to the controller service.
    // 
    // Updates to active breakpoint fields are only allowed if the new value
    // does not change the breakpoint specification. Updates to the `location`,
    // `condition` and `expressions` fields should not alter the breakpoint
    // semantics. These may only make changes such as canonicalizing a value
    // or snapping the location to the correct line of code.
    rpc PutV2ControllerDebuggeesDebuggeeIdBreakpointsId(PutV2ControllerDebuggeesDebuggeeIdBreakpointsIdRequest) returns (UpdateActiveBreakpointResponse) {
      option (google.api.http) = {
        put: "//v2/controller/debuggees/{debuggeeId}/breakpoints/{id}"
        body: "body"
      };
    }
    // Lists all the debuggees that the user has access to.
    rpc GetV2DebuggerDebuggees(GetV2DebuggerDebuggeesRequest) returns (ListDebuggeesResponse) {
      option (google.api.http) = {
        get: "//v2/debugger/debuggees"
      };
    }
    // Lists all breakpoints for the debuggee.
    rpc GetV2DebuggerDebuggeesDebuggeeIdBreakpoints(GetV2DebuggerDebuggeesDebuggeeIdBreakpointsRequest) returns (ListBreakpointsResponse) {
      option (google.api.http) = {
        get: "//v2/debugger/debuggees/{debuggeeId}/breakpoints"
      };
    }
    // Sets the breakpoint to the debuggee.
    rpc PostV2DebuggerDebuggeesDebuggeeIdBreakpointsSet(PostV2DebuggerDebuggeesDebuggeeIdBreakpointsSetRequest) returns (SetBreakpointResponse) {
      option (google.api.http) = {
        post: "//v2/debugger/debuggees/{debuggeeId}/breakpoints/set"
        body: "body"
      };
    }
    // Gets breakpoint information.
    rpc GetV2DebuggerDebuggeesDebuggeeIdBreakpointsBreakpointId(GetV2DebuggerDebuggeesDebuggeeIdBreakpointsBreakpointIdRequest) returns (GetBreakpointResponse) {
      option (google.api.http) = {
        get: "//v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}"
      };
    }
    // Deletes the breakpoint from the debuggee.
    rpc DeleteV2DebuggerDebuggeesDebuggeeIdBreakpointsBreakpointId(DeleteV2DebuggerDebuggeesDebuggeeIdBreakpointsBreakpointIdRequest) returns (Empty) {
      option (google.api.http) = {
        delete: "//v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}"
      };
    }
}

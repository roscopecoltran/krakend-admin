basePath: /
definitions.AliasContext.description: An alias to a repo revision.
definitions.AliasContext.properties.kind.description: The alias kind.
definitions.AliasContext.properties.kind.enum.length: 4
definitions.AliasContext.properties.kind.enum[0]: ANY
definitions.AliasContext.properties.kind.enum[1]: FIXED
definitions.AliasContext.properties.kind.enum[2]: MOVABLE
definitions.AliasContext.properties.kind.enum[3]: OTHER
definitions.AliasContext.properties.kind.type: string
definitions.AliasContext.properties.name.description: The alias name.
definitions.AliasContext.properties.name.type: string
definitions.AliasContext.type: object
definitions.Breakpoint.description: Represents the breakpoint specification, status
  and results.
definitions.Breakpoint.properties.action.description: |-
  Action that the agent should perform when the code at the
  breakpoint location is hit.
definitions.Breakpoint.properties.action.enum.length: 2
definitions.Breakpoint.properties.action.enum[0]: CAPTURE
definitions.Breakpoint.properties.action.enum[1]: LOG
definitions.Breakpoint.properties.action.type: string
definitions.Breakpoint.properties.condition.description: |-
  Condition that triggers the breakpoint.
  The condition is a compound boolean expression composed using expressions
  in a programming language at the source location.
definitions.Breakpoint.properties.condition.type: string
definitions.Breakpoint.properties.createTime.description: Time this breakpoint was
  created by the server in seconds resolution.
definitions.Breakpoint.properties.createTime.format: google-datetime
definitions.Breakpoint.properties.createTime.type: string
definitions.Breakpoint.properties.evaluatedExpressions.description: |-
  Values of evaluated expressions at breakpoint time.
  The evaluated expressions appear in exactly the same order they
  are listed in the `expressions` field.
  The `name` field holds the original expression text, the `value` or
  `members` field holds the result of the evaluated expression.
  If the expression cannot be evaluated, the `status` inside the `Variable`
  will indicate an error and contain the error text.
definitions.Breakpoint.properties.evaluatedExpressions.items.$ref: '#/definitions/Variable'
definitions.Breakpoint.properties.evaluatedExpressions.type: array
definitions.Breakpoint.properties.expressions.description: |-
  List of read-only expressions to evaluate at the breakpoint location.
  The expressions are composed using expressions in the programming language
  at the source location. If the breakpoint action is `LOG`, the evaluated
  expressions are included in log statements.
definitions.Breakpoint.properties.expressions.items.type: string
definitions.Breakpoint.properties.expressions.type: array
definitions.Breakpoint.properties.finalTime.description: |-
  Time this breakpoint was finalized as seen by the server in seconds
  resolution.
definitions.Breakpoint.properties.finalTime.format: google-datetime
definitions.Breakpoint.properties.finalTime.type: string
definitions.Breakpoint.properties.id.description: Breakpoint identifier, unique in
  the scope of the debuggee.
definitions.Breakpoint.properties.id.type: string
definitions.Breakpoint.properties.isFinalState.description: |-
  When true, indicates that this is a final result and the
  breakpoint state will not change from here on.
definitions.Breakpoint.properties.isFinalState.type: boolean
definitions.Breakpoint.properties.labels.additionalProperties.type: string
definitions.Breakpoint.properties.labels.description: |-
  A set of custom breakpoint properties, populated by the agent, to be
  displayed to the user.
definitions.Breakpoint.properties.labels.type: object
definitions.Breakpoint.properties.location.$ref: '#/definitions/SourceLocation'
definitions.Breakpoint.properties.location.description: Breakpoint source location.
definitions.Breakpoint.properties.logLevel.description: Indicates the severity of
  the log. Only relevant when action is `LOG`.
definitions.Breakpoint.properties.logLevel.enum.length: 3
definitions.Breakpoint.properties.logLevel.enum[0]: INFO
definitions.Breakpoint.properties.logLevel.enum[1]: WARNING
definitions.Breakpoint.properties.logLevel.enum[2]: ERROR
definitions.Breakpoint.properties.logLevel.type: string
definitions.Breakpoint.properties.logMessageFormat.description: |-
  Only relevant when action is `LOG`. Defines the message to log when
  the breakpoint hits. The message may include parameter placeholders `$0`,
  `$1`, etc. These placeholders are replaced with the evaluated value
  of the appropriate expression. Expressions not referenced in
  `log_message_format` are not logged.

  Example: `Message received, id = $0, count = $1` with
  `expressions` = `[ message.id, message.count ]`.
definitions.Breakpoint.properties.logMessageFormat.type: string
definitions.Breakpoint.properties.stackFrames.description: The stack at breakpoint
  time.
definitions.Breakpoint.properties.stackFrames.items.$ref: '#/definitions/StackFrame'
definitions.Breakpoint.properties.stackFrames.type: array
definitions.Breakpoint.properties.status.$ref: '#/definitions/StatusMessage'
definitions.Breakpoint.properties.status.description: |-
  Breakpoint status.

  The status includes an error flag and a human readable message.
  This field is usually unset. The message can be either
  informational or an error message. Regardless, clients should always
  display the text message back to the user.

  Error status indicates complete failure of the breakpoint.

  Example (non-final state): `Still loading symbols...`

  Examples (final state):

  *   `Invalid line number` referring to location
  *   `Field f not found in class C` referring to condition
definitions.Breakpoint.properties.userEmail.description: E-mail address of the user
  that created this breakpoint
definitions.Breakpoint.properties.userEmail.type: string
definitions.Breakpoint.properties.variableTable.description: |-
  The `variable_table` exists to aid with computation, memory and network
  traffic optimization.  It enables storing a variable once and reference
  it from multiple variables, including variables stored in the
  `variable_table` itself.
  For example, the same `this` object, which may appear at many levels of
  the stack, can have all of its data stored once in this table.  The
  stack frame variables then would hold only a reference to it.

  The variable `var_table_index` field is an index into this repeated field.
  The stored objects are nameless and get their name from the referencing
  variable. The effective variable is a merge of the referencing variable
  and the referenced variable.
definitions.Breakpoint.properties.variableTable.items.$ref: '#/definitions/Variable'
definitions.Breakpoint.properties.variableTable.type: array
definitions.Breakpoint.type: object
definitions.CloudRepoSourceContext.description: |-
  A CloudRepoSourceContext denotes a particular revision in a cloud
  repo (a repo hosted by the Google Cloud Platform).
definitions.CloudRepoSourceContext.properties.aliasContext.$ref: '#/definitions/AliasContext'
definitions.CloudRepoSourceContext.properties.aliasContext.description: An alias,
  which may be a branch or tag.
definitions.CloudRepoSourceContext.properties.aliasName.description: The name of an
  alias (branch, tag, etc.).
definitions.CloudRepoSourceContext.properties.aliasName.type: string
definitions.CloudRepoSourceContext.properties.repoId.$ref: '#/definitions/RepoId'
definitions.CloudRepoSourceContext.properties.repoId.description: The ID of the repo.
definitions.CloudRepoSourceContext.properties.revisionId.description: A revision ID.
definitions.CloudRepoSourceContext.properties.revisionId.type: string
definitions.CloudRepoSourceContext.type: object
definitions.CloudWorkspaceId.description: |-
  A CloudWorkspaceId is a unique identifier for a cloud workspace.
  A cloud workspace is a place associated with a repo where modified files
  can be stored before they are committed.
definitions.CloudWorkspaceId.properties.name.description: |-
  The unique name of the workspace within the repo.  This is the name
  chosen by the client in the Source API's CreateWorkspace method.
definitions.CloudWorkspaceId.properties.name.type: string
definitions.CloudWorkspaceId.properties.repoId.$ref: '#/definitions/RepoId'
definitions.CloudWorkspaceId.properties.repoId.description: The ID of the repo containing
  the workspace.
definitions.CloudWorkspaceId.type: object
definitions.CloudWorkspaceSourceContext.description: A CloudWorkspaceSourceContext
  denotes a workspace at a particular snapshot.
definitions.CloudWorkspaceSourceContext.properties.snapshotId.description: |-
  The ID of the snapshot.
  An empty snapshot_id refers to the most recent snapshot.
definitions.CloudWorkspaceSourceContext.properties.snapshotId.type: string
definitions.CloudWorkspaceSourceContext.properties.workspaceId.$ref: '#/definitions/CloudWorkspaceId'
definitions.CloudWorkspaceSourceContext.properties.workspaceId.description: The ID
  of the workspace.
definitions.CloudWorkspaceSourceContext.type: object
definitions.Debuggee.description: |-
  Represents the debugged application. The application may include one or more
  replicated processes executing the same code. Each of these processes is
  attached with a debugger agent, carrying out the debugging commands.
  Agents attached to the same debuggee identify themselves as such by using
  exactly the same Debuggee message value when registering.
definitions.Debuggee.properties.agentVersion.description: |-
  Version ID of the agent.
  Schema: `domain/language-platform/vmajor.minor` (for example
  `google.com/java-gcp/v1.1`).
definitions.Debuggee.properties.agentVersion.type: string
definitions.Debuggee.properties.description.description: |-
  Human readable description of the debuggee.
  Including a human-readable project name, environment name and version
  information is recommended.
definitions.Debuggee.properties.description.type: string
definitions.Debuggee.properties.extSourceContexts.description: |-
  References to the locations and revisions of the source code used in the
  deployed application.

  NOTE: this field is experimental and can be ignored.
definitions.Debuggee.properties.extSourceContexts.items.$ref: '#/definitions/ExtendedSourceContext'
definitions.Debuggee.properties.extSourceContexts.type: array
definitions.Debuggee.properties.id.description: Unique identifier for the debuggee
  generated by the controller service.
definitions.Debuggee.properties.id.type: string
definitions.Debuggee.properties.isDisabled.description: |-
  If set to `true`, indicates that the agent should disable itself and
  detach from the debuggee.
definitions.Debuggee.properties.isDisabled.type: boolean
definitions.Debuggee.properties.isInactive.description: |-
  If set to `true`, indicates that Controller service does not detect any
  activity from the debuggee agents and the application is possibly stopped.
definitions.Debuggee.properties.isInactive.type: boolean
definitions.Debuggee.properties.labels.additionalProperties.type: string
definitions.Debuggee.properties.labels.description: |-
  A set of custom debuggee properties, populated by the agent, to be
  displayed to the user.
definitions.Debuggee.properties.labels.type: object
definitions.Debuggee.properties.project.description: |-
  Project the debuggee is associated with.
  Use project number or id when registering a Google Cloud Platform project.
definitions.Debuggee.properties.project.type: string
definitions.Debuggee.properties.sourceContexts.description: |-
  References to the locations and revisions of the source code used in the
  deployed application.
definitions.Debuggee.properties.sourceContexts.items.$ref: '#/definitions/SourceContext'
definitions.Debuggee.properties.sourceContexts.type: array
definitions.Debuggee.properties.status.$ref: '#/definitions/StatusMessage'
definitions.Debuggee.properties.status.description: |-
  Human readable message to be displayed to the user about this debuggee.
  Absence of this field indicates no status. The message can be either
  informational or an error status.
definitions.Debuggee.properties.uniquifier.description: |-
  Uniquifier to further distiguish the application.
  It is possible that different applications might have identical values in
  the debuggee message, thus, incorrectly identified as a single application
  by the Controller service. This field adds salt to further distiguish the
  application. Agents should consider seeding this field with value that
  identifies the code, binary, configuration and environment.
definitions.Debuggee.properties.uniquifier.type: string
definitions.Debuggee.type: object
definitions.Empty.description: |-
  A generic empty message that you can re-use to avoid defining duplicated
  empty messages in your APIs. A typical example is to use it as the request
  or the response type of an API method. For instance:

      service Foo {
        rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
      }

  The JSON representation for `Empty` is empty JSON object `{}`.
definitions.Empty.type: object
definitions.ExtendedSourceContext.description: |-
  An ExtendedSourceContext is a SourceContext combined with additional
  details describing the context.
definitions.ExtendedSourceContext.properties.context.$ref: '#/definitions/SourceContext'
definitions.ExtendedSourceContext.properties.context.description: Any source context.
definitions.ExtendedSourceContext.properties.labels.additionalProperties.type: string
definitions.ExtendedSourceContext.properties.labels.description: Labels with user
  defined metadata.
definitions.ExtendedSourceContext.properties.labels.type: object
definitions.ExtendedSourceContext.type: object
definitions.FormatMessage.description: Represents a message with parameters.
definitions.FormatMessage.properties.format.description: |-
  Format template for the message. The `format` uses placeholders `$0`,
  `$1`, etc. to reference parameters. `$$` can be used to denote the `$`
  character.

  Examples:

  *   `Failed to load '$0' which helps debug $1 the first time it
      is loaded.  Again, $0 is very important.`
  *   `Please pay $$10 to use $0 instead of $1.`
definitions.FormatMessage.properties.format.type: string
definitions.FormatMessage.properties.parameters.description: Optional parameters to
  be embedded into the message.
definitions.FormatMessage.properties.parameters.items.type: string
definitions.FormatMessage.properties.parameters.type: array
definitions.FormatMessage.type: object
definitions.GerritSourceContext.description: A SourceContext referring to a Gerrit
  project.
definitions.GerritSourceContext.properties.aliasContext.$ref: '#/definitions/AliasContext'
definitions.GerritSourceContext.properties.aliasContext.description: An alias, which
  may be a branch or tag.
definitions.GerritSourceContext.properties.aliasName.description: The name of an alias
  (branch, tag, etc.).
definitions.GerritSourceContext.properties.aliasName.type: string
definitions.GerritSourceContext.properties.gerritProject.description: |-
  The full project name within the host. Projects may be nested, so
  "project/subproject" is a valid project name.
  The "repo name" is hostURI/project.
definitions.GerritSourceContext.properties.gerritProject.type: string
definitions.GerritSourceContext.properties.hostUri.description: The URI of a running
  Gerrit instance.
definitions.GerritSourceContext.properties.hostUri.type: string
definitions.GerritSourceContext.properties.revisionId.description: A revision (commit)
  ID.
definitions.GerritSourceContext.properties.revisionId.type: string
definitions.GerritSourceContext.type: object
definitions.GetBreakpointResponse.description: Response for getting breakpoint information.
definitions.GetBreakpointResponse.properties.breakpoint.$ref: '#/definitions/Breakpoint'
definitions.GetBreakpointResponse.properties.breakpoint.description: |-
  Complete breakpoint state.
  The fields `id` and `location` are guaranteed to be set.
definitions.GetBreakpointResponse.type: object
definitions.GitSourceContext.description: |-
  A GitSourceContext denotes a particular revision in a third party Git
  repository (e.g. GitHub).
definitions.GitSourceContext.properties.revisionId.description: |-
  Git commit hash.
  required.
definitions.GitSourceContext.properties.revisionId.type: string
definitions.GitSourceContext.properties.url.description: Git repository URL.
definitions.GitSourceContext.properties.url.type: string
definitions.GitSourceContext.type: object
definitions.ListActiveBreakpointsResponse.description: Response for listing active
  breakpoints.
definitions.ListActiveBreakpointsResponse.properties.breakpoints.description: |-
  List of all active breakpoints.
  The fields `id` and `location` are guaranteed to be set on each breakpoint.
definitions.ListActiveBreakpointsResponse.properties.breakpoints.items.$ref: '#/definitions/Breakpoint'
definitions.ListActiveBreakpointsResponse.properties.breakpoints.type: array
definitions.ListActiveBreakpointsResponse.properties.nextWaitToken.description: |-
  A token that can be used in the next method call to block until
  the list of breakpoints changes.
definitions.ListActiveBreakpointsResponse.properties.nextWaitToken.type: string
definitions.ListActiveBreakpointsResponse.properties.waitExpired.description: |-
  If set to `true`, indicates that there is no change to the
  list of active breakpoints and the server-selected timeout has expired.
  The `breakpoints` field would be empty and should be ignored.
definitions.ListActiveBreakpointsResponse.properties.waitExpired.type: boolean
definitions.ListActiveBreakpointsResponse.type: object
definitions.ListBreakpointsResponse.description: Response for listing breakpoints.
definitions.ListBreakpointsResponse.properties.breakpoints.description: |-
  List of breakpoints matching the request.
  The fields `id` and `location` are guaranteed to be set on each breakpoint.
  The fields: `stack_frames`, `evaluated_expressions` and `variable_table`
  are cleared on each breakpoint regardless of its status.
definitions.ListBreakpointsResponse.properties.breakpoints.items.$ref: '#/definitions/Breakpoint'
definitions.ListBreakpointsResponse.properties.breakpoints.type: array
definitions.ListBreakpointsResponse.properties.nextWaitToken.description: |-
  A wait token that can be used in the next call to `list` (REST) or
  `ListBreakpoints` (RPC) to block until the list of breakpoints has changes.
definitions.ListBreakpointsResponse.properties.nextWaitToken.type: string
definitions.ListBreakpointsResponse.type: object
definitions.ListDebuggeesResponse.description: Response for listing debuggees.
definitions.ListDebuggeesResponse.properties.debuggees.description: |-
  List of debuggees accessible to the calling user.
  The fields `debuggee.id` and `description` are guaranteed to be set.
  The `description` field is a human readable field provided by agents and
  can be displayed to users.
definitions.ListDebuggeesResponse.properties.debuggees.items.$ref: '#/definitions/Debuggee'
definitions.ListDebuggeesResponse.properties.debuggees.type: array
definitions.ListDebuggeesResponse.type: object
definitions.ProjectRepoId.description: |-
  Selects a repo using a Google Cloud Platform project ID
  (e.g. winged-cargo-31) and a repo name within that project.
definitions.ProjectRepoId.properties.projectId.description: The ID of the project.
definitions.ProjectRepoId.properties.projectId.type: string
definitions.ProjectRepoId.properties.repoName.description: The name of the repo. Leave
  empty for the default repo.
definitions.ProjectRepoId.properties.repoName.type: string
definitions.ProjectRepoId.type: object
definitions.RegisterDebuggeeRequest.description: Request to register a debuggee.
definitions.RegisterDebuggeeRequest.properties.debuggee.$ref: '#/definitions/Debuggee'
definitions.RegisterDebuggeeRequest.properties.debuggee.description: |-
  Debuggee information to register.
  The fields `project`, `uniquifier`, `description` and `agent_version`
  of the debuggee must be set.
definitions.RegisterDebuggeeRequest.type: object
definitions.RegisterDebuggeeResponse.description: Response for registering a debuggee.
definitions.RegisterDebuggeeResponse.properties.debuggee.$ref: '#/definitions/Debuggee'
definitions.RegisterDebuggeeResponse.properties.debuggee.description: |-
  Debuggee resource.
  The field `id` is guranteed to be set (in addition to the echoed fields).
  If the field `is_disabled` is set to `true`, the agent should disable
  itself by removing all breakpoints and detaching from the application.
  It should however continue to poll `RegisterDebuggee` until reenabled.
definitions.RegisterDebuggeeResponse.type: object
definitions.RepoId.description: A unique identifier for a cloud repo.
definitions.RepoId.properties.projectRepoId.$ref: '#/definitions/ProjectRepoId'
definitions.RepoId.properties.projectRepoId.description: A combination of a project
  ID and a repo name.
definitions.RepoId.properties.uid.description: A server-assigned, globally unique
  identifier.
definitions.RepoId.properties.uid.type: string
definitions.RepoId.type: object
definitions.SetBreakpointResponse.description: Response for setting a breakpoint.
definitions.SetBreakpointResponse.properties.breakpoint.$ref: '#/definitions/Breakpoint'
definitions.SetBreakpointResponse.properties.breakpoint.description: |-
  Breakpoint resource.
  The field `id` is guaranteed to be set (in addition to the echoed fileds).
definitions.SetBreakpointResponse.type: object
definitions.SourceContext.description: |-
  A SourceContext is a reference to a tree of files. A SourceContext together
  with a path point to a unique revision of a single file or directory.
definitions.SourceContext.properties.cloudRepo.$ref: '#/definitions/CloudRepoSourceContext'
definitions.SourceContext.properties.cloudRepo.description: A SourceContext referring
  to a revision in a cloud repo.
definitions.SourceContext.properties.cloudWorkspace.$ref: '#/definitions/CloudWorkspaceSourceContext'
definitions.SourceContext.properties.cloudWorkspace.description: A SourceContext referring
  to a snapshot in a cloud workspace.
definitions.SourceContext.properties.gerrit.$ref: '#/definitions/GerritSourceContext'
definitions.SourceContext.properties.gerrit.description: A SourceContext referring
  to a Gerrit project.
definitions.SourceContext.properties.git.$ref: '#/definitions/GitSourceContext'
definitions.SourceContext.properties.git.description: A SourceContext referring to
  any third party Git repo (e.g. GitHub).
definitions.SourceContext.type: object
definitions.SourceLocation.description: Represents a location in the source code.
definitions.SourceLocation.properties.line.description: Line inside the file. The
  first line in the file has the value `1`.
definitions.SourceLocation.properties.line.format: int32
definitions.SourceLocation.properties.line.type: integer
definitions.SourceLocation.properties.path.description: Path to the source file within
  the source context of the target binary.
definitions.SourceLocation.properties.path.type: string
definitions.SourceLocation.type: object
definitions.StackFrame.description: Represents a stack frame context.
definitions.StackFrame.properties.arguments.description: |-
  Set of arguments passed to this function.
  Note that this might not be populated for all stack frames.
definitions.StackFrame.properties.arguments.items.$ref: '#/definitions/Variable'
definitions.StackFrame.properties.arguments.type: array
definitions.StackFrame.properties.function.description: Demangled function name at
  the call site.
definitions.StackFrame.properties.function.type: string
definitions.StackFrame.properties.locals.description: |-
  Set of local variables at the stack frame location.
  Note that this might not be populated for all stack frames.
definitions.StackFrame.properties.locals.items.$ref: '#/definitions/Variable'
definitions.StackFrame.properties.locals.type: array
definitions.StackFrame.properties.location.$ref: '#/definitions/SourceLocation'
definitions.StackFrame.properties.location.description: Source location of the call
  site.
definitions.StackFrame.type: object
definitions.StatusMessage.description: |-
  Represents a contextual status message.
  The message can indicate an error or informational status, and refer to
  specific parts of the containing object.
  For example, the `Breakpoint.status` field can indicate an error referring
  to the `BREAKPOINT_SOURCE_LOCATION` with the message `Location not found`.
definitions.StatusMessage.properties.description.$ref: '#/definitions/FormatMessage'
definitions.StatusMessage.properties.description.description: Status message text.
definitions.StatusMessage.properties.isError.description: Distinguishes errors from
  informational messages.
definitions.StatusMessage.properties.isError.type: boolean
definitions.StatusMessage.properties.refersTo.description: Reference to which the
  message applies.
definitions.StatusMessage.properties.refersTo.enum.length: 7
definitions.StatusMessage.properties.refersTo.enum[0]: UNSPECIFIED
definitions.StatusMessage.properties.refersTo.enum[1]: BREAKPOINT_SOURCE_LOCATION
definitions.StatusMessage.properties.refersTo.enum[2]: BREAKPOINT_CONDITION
definitions.StatusMessage.properties.refersTo.enum[3]: BREAKPOINT_EXPRESSION
definitions.StatusMessage.properties.refersTo.enum[4]: BREAKPOINT_AGE
definitions.StatusMessage.properties.refersTo.enum[5]: VARIABLE_NAME
definitions.StatusMessage.properties.refersTo.enum[6]: VARIABLE_VALUE
definitions.StatusMessage.properties.refersTo.type: string
definitions.StatusMessage.type: object
definitions.UpdateActiveBreakpointRequest.description: Request to update an active
  breakpoint.
definitions.UpdateActiveBreakpointRequest.properties.breakpoint.$ref: '#/definitions/Breakpoint'
definitions.UpdateActiveBreakpointRequest.properties.breakpoint.description: |-
  Updated breakpoint information.
  The field `id` must be set.
  The agent must echo all Breakpoint specification fields in the update.
definitions.UpdateActiveBreakpointRequest.type: object
definitions.UpdateActiveBreakpointResponse.description: |-
  Response for updating an active breakpoint.
  The message is defined to allow future extensions.
definitions.UpdateActiveBreakpointResponse.type: object
definitions.Variable.description: |-
  Represents a variable or an argument possibly of a compound object type.
  Note how the following variables are represented:

  1) A simple variable:

      int x = 5

      { name: "x", value: "5", type: "int" }  // Captured variable

  2) A compound object:

      struct T {
          int m1;
          int m2;
      };
      T x = { 3, 7 };

      {  // Captured variable
          name: "x",
          type: "T",
          members { name: "m1", value: "3", type: "int" },
          members { name: "m2", value: "7", type: "int" }
      }

  3) A pointer where the pointee was captured:

      T x = { 3, 7 };
      T* p = &x;

      {   // Captured variable
          name: "p",
          type: "T*",
          value: "0x00500500",
          members { name: "m1", value: "3", type: "int" },
          members { name: "m2", value: "7", type: "int" }
      }

  4) A pointer where the pointee was not captured:

      T* p = new T;

      {   // Captured variable
          name: "p",
          type: "T*",
          value: "0x00400400"
          status { is_error: true, description { format: "unavailable" } }
      }

  The status should describe the reason for the missing value,
  such as `<optimized out>`, `<inaccessible>`, `<pointers limit reached>`.

  Note that a null pointer should not have members.

  5) An unnamed value:

      int* p = new int(7);

      {   // Captured variable
          name: "p",
          value: "0x00500500",
          type: "int*",
          members { value: "7", type: "int" } }

  6) An unnamed pointer where the pointee was not captured:

      int* p = new int(7);
      int** pp = &p;

      {  // Captured variable
          name: "pp",
          value: "0x00500500",
          type: "int**",
          members {
              value: "0x00400400",
              type: "int*"
              status {
                  is_error: true,
                  description: { format: "unavailable" } }
              }
          }
      }

  To optimize computation, memory and network traffic, variables that
  repeat in the output multiple times can be stored once in a shared
  variable table and be referenced using the `var_table_index` field.  The
  variables stored in the shared table are nameless and are essentially
  a partition of the complete variable. To reconstruct the complete
  variable, merge the referencing variable with the referenced variable.

  When using the shared variable table, the following variables:

      T x = { 3, 7 };
      T* p = &x;
      T& r = x;

      { name: "x", var_table_index: 3, type: "T" }  // Captured variables
      { name: "p", value "0x00500500", type="T*", var_table_index: 3 }
      { name: "r", type="T&", var_table_index: 3 }

      {  // Shared variable table entry #3:
          members { name: "m1", value: "3", type: "int" },
          members { name: "m2", value: "7", type: "int" }
      }

  Note that the pointer address is stored with the referencing variable
  and not with the referenced variable. This allows the referenced variable
  to be shared between pointers and references.

  The type field is optional. The debugger agent may or may not support it.
definitions.Variable.properties.members.description: Members contained or pointed
  to by the variable.
definitions.Variable.properties.members.items.$ref: '#/definitions/Variable'
definitions.Variable.properties.members.type: array
definitions.Variable.properties.name.description: Name of the variable, if any.
definitions.Variable.properties.name.type: string
definitions.Variable.properties.status.$ref: '#/definitions/StatusMessage'
definitions.Variable.properties.status.description: |-
  Status associated with the variable. This field will usually stay
  unset. A status of a single variable only applies to that variable or
  expression. The rest of breakpoint data still remains valid. Variables
  might be reported in error state even when breakpoint is not in final
  state.

  The message may refer to variable name with `refers_to` set to
  `VARIABLE_NAME`. Alternatively `refers_to` will be set to `VARIABLE_VALUE`.
  In either case variable value and members will be unset.

  Example of error message applied to name: `Invalid expression syntax`.

  Example of information message applied to value: `Not captured`.

  Examples of error message applied to value:

  *   `Malformed string`,
  *   `Field f not found in class C`
  *   `Null pointer dereference`
definitions.Variable.properties.type.description: |-
  Variable type (e.g. `MyClass`). If the variable is split with
  `var_table_index`, `type` goes next to `value`. The interpretation of
  a type is agent specific. It is recommended to include the dynamic type
  rather than a static type of an object.
definitions.Variable.properties.type.type: string
definitions.Variable.properties.value.description: Simple value of the variable.
definitions.Variable.properties.value.type: string
definitions.Variable.properties.varTableIndex.description: |-
  Reference to a variable in the shared variable table. More than
  one variable can reference the same variable in the table. The
  `var_table_index` field is an index into `variable_table` in Breakpoint.
definitions.Variable.properties.varTableIndex.format: int32
definitions.Variable.properties.varTableIndex.type: integer
definitions.Variable.type: object
externalDocs.url: http://cloud.google.com/debugger
host: clouddebugger.googleapis.com
info.contact.name: Google
info.contact.url: https://google.com
info.description: |
  Examines the call stack and variables of a running application without stopping or slowing it down.
info.title: Stackdriver Debugger
info.version: v2
info.x-apiClientRegistration.url: https://console.developers.google.com
info.x-logo.url: https://api.apis.guru/v2/cache/logo/https_cloud.google.com__static_images_new-gcp-logo.png
info.x-origin.length: 1
info.x-origin[0].converter.url: https://github.com/lucybot/api-spec-converter
info.x-origin[0].converter.version: 2.6.0
info.x-origin[0].format: google
info.x-origin[0].url: https://clouddebugger.googleapis.com/$discovery/rest?version=v2
info.x-origin[0].version: v1
info.x-preferred: true
info.x-providerName: googleapis.com
info.x-serviceName: clouddebugger
parameters.$.xgafv.description: V1 error format.
parameters.$.xgafv.enum.length: 2
parameters.$.xgafv.enum[0]: "1"
parameters.$.xgafv.enum[1]: "2"
parameters.$.xgafv.in: query
parameters.$.xgafv.name: $.xgafv
parameters.$.xgafv.type: string
parameters.access_token.description: OAuth access token.
parameters.access_token.in: query
parameters.access_token.name: access_token
parameters.access_token.type: string
parameters.alt.default: json
parameters.alt.description: Data format for response.
parameters.alt.enum.length: 3
parameters.alt.enum[0]: json
parameters.alt.enum[1]: media
parameters.alt.enum[2]: proto
parameters.alt.in: query
parameters.alt.name: alt
parameters.alt.type: string
parameters.bearer_token.description: OAuth bearer token.
parameters.bearer_token.in: query
parameters.bearer_token.name: bearer_token
parameters.bearer_token.type: string
parameters.callback.description: JSONP
parameters.callback.in: query
parameters.callback.name: callback
parameters.callback.type: string
parameters.fields.description: Selector specifying which fields to include in a partial
  response.
parameters.fields.in: query
parameters.fields.name: fields
parameters.fields.type: string
parameters.key.description: API key. Your API key identifies your project and provides
  you with API access, quota, and reports. Required unless you provide an OAuth 2.0
  token.
parameters.key.in: query
parameters.key.name: key
parameters.key.type: string
parameters.oauth_token.description: OAuth 2.0 token for the current user.
parameters.oauth_token.in: query
parameters.oauth_token.name: oauth_token
parameters.oauth_token.type: string
parameters.pp.default: true
parameters.pp.description: Pretty-print response.
parameters.pp.in: query
parameters.pp.name: pp
parameters.pp.type: boolean
parameters.prettyPrint.default: true
parameters.prettyPrint.description: Returns response with indentations and line breaks.
parameters.prettyPrint.in: query
parameters.prettyPrint.name: prettyPrint
parameters.prettyPrint.type: boolean
parameters.quotaUser.description: Available to use for quota purposes for server-side
  applications. Can be any arbitrary string assigned to a user, but should not exceed
  40 characters.
parameters.quotaUser.in: query
parameters.quotaUser.name: quotaUser
parameters.quotaUser.type: string
parameters.upload_protocol.description: Upload protocol for media (e.g. "raw", "multipart").
parameters.upload_protocol.in: query
parameters.upload_protocol.name: upload_protocol
parameters.upload_protocol.type: string
parameters.uploadType.description: Legacy upload protocol for media (e.g. "media",
  "multipart").
parameters.uploadType.in: query
parameters.uploadType.name: uploadType
parameters.uploadType.type: string
paths./v2/controller/debuggees/{debuggeeId}/breakpoints.get.description: |-
  Returns the list of all active breakpoints for the debuggee.

  The breakpoint specification (`location`, `condition`, and `expressions`
  fields) is semantically immutable, although the field values may
  change. For example, an agent may update the location line number
  to reflect the actual line where the breakpoint was set, but this
  doesn't change the breakpoint semantics.

  This means that an agent does not need to check if a breakpoint has changed
  when it encounters the same breakpoint on a successive call.
  Moreover, an agent should remember the breakpoints that are completed
  until the controller removes them from the active list to avoid
  setting those breakpoints again.
paths./v2/controller/debuggees/{debuggeeId}/breakpoints.get.operationId: clouddebugger.controller.debuggees.breakpoints.list
paths./v2/controller/debuggees/{debuggeeId}/breakpoints.get.parameters.length: 3
paths./v2/controller/debuggees/{debuggeeId}/breakpoints.get.parameters[0].description: Identifies
  the debuggee.
paths./v2/controller/debuggees/{debuggeeId}/breakpoints.get.parameters[0].in: path
paths./v2/controller/debuggees/{debuggeeId}/breakpoints.get.parameters[0].name: debuggeeId
paths./v2/controller/debuggees/{debuggeeId}/breakpoints.get.parameters[0].required: true
paths./v2/controller/debuggees/{debuggeeId}/breakpoints.get.parameters[0].type: string
paths./v2/controller/debuggees/{debuggeeId}/breakpoints.get.parameters[1].description: |-
  If set to `true` (recommended), returns `google.rpc.Code.OK` status and
  sets the `wait_expired` response field to `true` when the server-selected
  timeout has expired.

  If set to `false` (deprecated), returns `google.rpc.Code.ABORTED` status
  when the server-selected timeout has expired.
paths./v2/controller/debuggees/{debuggeeId}/breakpoints.get.parameters[1].in: query
paths./v2/controller/debuggees/{debuggeeId}/breakpoints.get.parameters[1].name: successOnTimeout
paths./v2/controller/debuggees/{debuggeeId}/breakpoints.get.parameters[1].type: boolean
paths./v2/controller/debuggees/{debuggeeId}/breakpoints.get.parameters[2].description: |-
  A token that, if specified, blocks the method call until the list
  of active breakpoints has changed, or a server-selected timeout has
  expired. The value should be set from the `next_wait_token` field in
  the last response. The initial value should be set to `"init"`.
paths./v2/controller/debuggees/{debuggeeId}/breakpoints.get.parameters[2].in: query
paths./v2/controller/debuggees/{debuggeeId}/breakpoints.get.parameters[2].name: waitToken
paths./v2/controller/debuggees/{debuggeeId}/breakpoints.get.parameters[2].type: string
paths./v2/controller/debuggees/{debuggeeId}/breakpoints.get.responses.200.description: Successful
  response
paths./v2/controller/debuggees/{debuggeeId}/breakpoints.get.responses.200.schema.$ref: '#/definitions/ListActiveBreakpointsResponse'
paths./v2/controller/debuggees/{debuggeeId}/breakpoints.get.security.length: 2
paths./v2/controller/debuggees/{debuggeeId}/breakpoints.get.security[0].Oauth2.length: 1
paths./v2/controller/debuggees/{debuggeeId}/breakpoints.get.security[0].Oauth2[0]: https://www.googleapis.com/auth/cloud-platform
paths./v2/controller/debuggees/{debuggeeId}/breakpoints.get.security[1].Oauth2.length: 1
paths./v2/controller/debuggees/{debuggeeId}/breakpoints.get.security[1].Oauth2[0]: https://www.googleapis.com/auth/cloud_debugger
paths./v2/controller/debuggees/{debuggeeId}/breakpoints.get.tags.length: 1
paths./v2/controller/debuggees/{debuggeeId}/breakpoints.get.tags[0]: controller
paths./v2/controller/debuggees/{debuggeeId}/breakpoints.parameters.length: 13
paths./v2/controller/debuggees/{debuggeeId}/breakpoints.parameters[0].$ref: '#/parameters/fields'
paths./v2/controller/debuggees/{debuggeeId}/breakpoints.parameters[1].$ref: '#/parameters/uploadType'
paths./v2/controller/debuggees/{debuggeeId}/breakpoints.parameters[2].$ref: '#/parameters/$.xgafv'
paths./v2/controller/debuggees/{debuggeeId}/breakpoints.parameters[3].$ref: '#/parameters/callback'
paths./v2/controller/debuggees/{debuggeeId}/breakpoints.parameters[4].$ref: '#/parameters/alt'
paths./v2/controller/debuggees/{debuggeeId}/breakpoints.parameters[5].$ref: '#/parameters/access_token'
paths./v2/controller/debuggees/{debuggeeId}/breakpoints.parameters[6].$ref: '#/parameters/key'
paths./v2/controller/debuggees/{debuggeeId}/breakpoints.parameters[7].$ref: '#/parameters/quotaUser'
paths./v2/controller/debuggees/{debuggeeId}/breakpoints.parameters[8].$ref: '#/parameters/pp'
paths./v2/controller/debuggees/{debuggeeId}/breakpoints.parameters[9].$ref: '#/parameters/oauth_token'
paths./v2/controller/debuggees/{debuggeeId}/breakpoints.parameters[10].$ref: '#/parameters/bearer_token'
paths./v2/controller/debuggees/{debuggeeId}/breakpoints.parameters[11].$ref: '#/parameters/upload_protocol'
paths./v2/controller/debuggees/{debuggeeId}/breakpoints.parameters[12].$ref: '#/parameters/prettyPrint'
paths./v2/controller/debuggees/{debuggeeId}/breakpoints/{id}.parameters.length: 13
paths./v2/controller/debuggees/{debuggeeId}/breakpoints/{id}.parameters[0].$ref: '#/parameters/fields'
paths./v2/controller/debuggees/{debuggeeId}/breakpoints/{id}.parameters[1].$ref: '#/parameters/uploadType'
paths./v2/controller/debuggees/{debuggeeId}/breakpoints/{id}.parameters[2].$ref: '#/parameters/$.xgafv'
paths./v2/controller/debuggees/{debuggeeId}/breakpoints/{id}.parameters[3].$ref: '#/parameters/callback'
paths./v2/controller/debuggees/{debuggeeId}/breakpoints/{id}.parameters[4].$ref: '#/parameters/alt'
paths./v2/controller/debuggees/{debuggeeId}/breakpoints/{id}.parameters[5].$ref: '#/parameters/access_token'
paths./v2/controller/debuggees/{debuggeeId}/breakpoints/{id}.parameters[6].$ref: '#/parameters/key'
paths./v2/controller/debuggees/{debuggeeId}/breakpoints/{id}.parameters[7].$ref: '#/parameters/quotaUser'
paths./v2/controller/debuggees/{debuggeeId}/breakpoints/{id}.parameters[8].$ref: '#/parameters/pp'
paths./v2/controller/debuggees/{debuggeeId}/breakpoints/{id}.parameters[9].$ref: '#/parameters/oauth_token'
paths./v2/controller/debuggees/{debuggeeId}/breakpoints/{id}.parameters[10].$ref: '#/parameters/bearer_token'
paths./v2/controller/debuggees/{debuggeeId}/breakpoints/{id}.parameters[11].$ref: '#/parameters/upload_protocol'
paths./v2/controller/debuggees/{debuggeeId}/breakpoints/{id}.parameters[12].$ref: '#/parameters/prettyPrint'
paths./v2/controller/debuggees/{debuggeeId}/breakpoints/{id}.put.description: |-
  Updates the breakpoint state or mutable fields.
  The entire Breakpoint message must be sent back to the controller service.

  Updates to active breakpoint fields are only allowed if the new value
  does not change the breakpoint specification. Updates to the `location`,
  `condition` and `expressions` fields should not alter the breakpoint
  semantics. These may only make changes such as canonicalizing a value
  or snapping the location to the correct line of code.
paths./v2/controller/debuggees/{debuggeeId}/breakpoints/{id}.put.operationId: clouddebugger.controller.debuggees.breakpoints.update
paths./v2/controller/debuggees/{debuggeeId}/breakpoints/{id}.put.parameters.length: 3
paths./v2/controller/debuggees/{debuggeeId}/breakpoints/{id}.put.parameters[0].description: Identifies
  the debuggee being debugged.
paths./v2/controller/debuggees/{debuggeeId}/breakpoints/{id}.put.parameters[0].in: path
paths./v2/controller/debuggees/{debuggeeId}/breakpoints/{id}.put.parameters[0].name: debuggeeId
paths./v2/controller/debuggees/{debuggeeId}/breakpoints/{id}.put.parameters[0].required: true
paths./v2/controller/debuggees/{debuggeeId}/breakpoints/{id}.put.parameters[0].type: string
paths./v2/controller/debuggees/{debuggeeId}/breakpoints/{id}.put.parameters[1].description: Breakpoint
  identifier, unique in the scope of the debuggee.
paths./v2/controller/debuggees/{debuggeeId}/breakpoints/{id}.put.parameters[1].in: path
paths./v2/controller/debuggees/{debuggeeId}/breakpoints/{id}.put.parameters[1].name: id
paths./v2/controller/debuggees/{debuggeeId}/breakpoints/{id}.put.parameters[1].required: true
paths./v2/controller/debuggees/{debuggeeId}/breakpoints/{id}.put.parameters[1].type: string
paths./v2/controller/debuggees/{debuggeeId}/breakpoints/{id}.put.parameters[2].in: body
paths./v2/controller/debuggees/{debuggeeId}/breakpoints/{id}.put.parameters[2].name: body
paths./v2/controller/debuggees/{debuggeeId}/breakpoints/{id}.put.parameters[2].schema.$ref: '#/definitions/UpdateActiveBreakpointRequest'
paths./v2/controller/debuggees/{debuggeeId}/breakpoints/{id}.put.responses.200.description: Successful
  response
paths./v2/controller/debuggees/{debuggeeId}/breakpoints/{id}.put.responses.200.schema.$ref: '#/definitions/UpdateActiveBreakpointResponse'
paths./v2/controller/debuggees/{debuggeeId}/breakpoints/{id}.put.security.length: 2
paths./v2/controller/debuggees/{debuggeeId}/breakpoints/{id}.put.security[0].Oauth2.length: 1
paths./v2/controller/debuggees/{debuggeeId}/breakpoints/{id}.put.security[0].Oauth2[0]: https://www.googleapis.com/auth/cloud-platform
paths./v2/controller/debuggees/{debuggeeId}/breakpoints/{id}.put.security[1].Oauth2.length: 1
paths./v2/controller/debuggees/{debuggeeId}/breakpoints/{id}.put.security[1].Oauth2[0]: https://www.googleapis.com/auth/cloud_debugger
paths./v2/controller/debuggees/{debuggeeId}/breakpoints/{id}.put.tags.length: 1
paths./v2/controller/debuggees/{debuggeeId}/breakpoints/{id}.put.tags[0]: controller
paths./v2/controller/debuggees/register.parameters.length: 13
paths./v2/controller/debuggees/register.parameters[0].$ref: '#/parameters/fields'
paths./v2/controller/debuggees/register.parameters[1].$ref: '#/parameters/uploadType'
paths./v2/controller/debuggees/register.parameters[2].$ref: '#/parameters/$.xgafv'
paths./v2/controller/debuggees/register.parameters[3].$ref: '#/parameters/callback'
paths./v2/controller/debuggees/register.parameters[4].$ref: '#/parameters/alt'
paths./v2/controller/debuggees/register.parameters[5].$ref: '#/parameters/access_token'
paths./v2/controller/debuggees/register.parameters[6].$ref: '#/parameters/key'
paths./v2/controller/debuggees/register.parameters[7].$ref: '#/parameters/quotaUser'
paths./v2/controller/debuggees/register.parameters[8].$ref: '#/parameters/pp'
paths./v2/controller/debuggees/register.parameters[9].$ref: '#/parameters/oauth_token'
paths./v2/controller/debuggees/register.parameters[10].$ref: '#/parameters/bearer_token'
paths./v2/controller/debuggees/register.parameters[11].$ref: '#/parameters/upload_protocol'
paths./v2/controller/debuggees/register.parameters[12].$ref: '#/parameters/prettyPrint'
paths./v2/controller/debuggees/register.post.description: |-
  Registers the debuggee with the controller service.

  All agents attached to the same application must call this method with
  exactly the same request content to get back the same stable `debuggee_id`.
  Agents should call this method again whenever `google.rpc.Code.NOT_FOUND`
  is returned from any controller method.

  This protocol allows the controller service to disable debuggees, recover
  from data loss, or change the `debuggee_id` format. Agents must handle
  `debuggee_id` value changing upon re-registration.
paths./v2/controller/debuggees/register.post.operationId: clouddebugger.controller.debuggees.register
paths./v2/controller/debuggees/register.post.parameters.length: 1
paths./v2/controller/debuggees/register.post.parameters[0].in: body
paths./v2/controller/debuggees/register.post.parameters[0].name: body
paths./v2/controller/debuggees/register.post.parameters[0].schema.$ref: '#/definitions/RegisterDebuggeeRequest'
paths./v2/controller/debuggees/register.post.responses.200.description: Successful
  response
paths./v2/controller/debuggees/register.post.responses.200.schema.$ref: '#/definitions/RegisterDebuggeeResponse'
paths./v2/controller/debuggees/register.post.security.length: 2
paths./v2/controller/debuggees/register.post.security[0].Oauth2.length: 1
paths./v2/controller/debuggees/register.post.security[0].Oauth2[0]: https://www.googleapis.com/auth/cloud-platform
paths./v2/controller/debuggees/register.post.security[1].Oauth2.length: 1
paths./v2/controller/debuggees/register.post.security[1].Oauth2[0]: https://www.googleapis.com/auth/cloud_debugger
paths./v2/controller/debuggees/register.post.tags.length: 1
paths./v2/controller/debuggees/register.post.tags[0]: controller
paths./v2/debugger/debuggees.get.description: Lists all the debuggees that the user
  has access to.
paths./v2/debugger/debuggees.get.operationId: clouddebugger.debugger.debuggees.list
paths./v2/debugger/debuggees.get.parameters.length: 3
paths./v2/debugger/debuggees.get.parameters[0].description: |-
  The client version making the call.
  Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).
paths./v2/debugger/debuggees.get.parameters[0].in: query
paths./v2/debugger/debuggees.get.parameters[0].name: clientVersion
paths./v2/debugger/debuggees.get.parameters[0].type: string
paths./v2/debugger/debuggees.get.parameters[1].description: |-
  When set to `true`, the result includes all debuggees. Otherwise, the
  result includes only debuggees that are active.
paths./v2/debugger/debuggees.get.parameters[1].in: query
paths./v2/debugger/debuggees.get.parameters[1].name: includeInactive
paths./v2/debugger/debuggees.get.parameters[1].type: boolean
paths./v2/debugger/debuggees.get.parameters[2].description: Project number of a Google
  Cloud project whose debuggees to list.
paths./v2/debugger/debuggees.get.parameters[2].in: query
paths./v2/debugger/debuggees.get.parameters[2].name: project
paths./v2/debugger/debuggees.get.parameters[2].type: string
paths./v2/debugger/debuggees.get.responses.200.description: Successful response
paths./v2/debugger/debuggees.get.responses.200.schema.$ref: '#/definitions/ListDebuggeesResponse'
paths./v2/debugger/debuggees.get.security.length: 2
paths./v2/debugger/debuggees.get.security[0].Oauth2.length: 1
paths./v2/debugger/debuggees.get.security[0].Oauth2[0]: https://www.googleapis.com/auth/cloud-platform
paths./v2/debugger/debuggees.get.security[1].Oauth2.length: 1
paths./v2/debugger/debuggees.get.security[1].Oauth2[0]: https://www.googleapis.com/auth/cloud_debugger
paths./v2/debugger/debuggees.get.tags.length: 1
paths./v2/debugger/debuggees.get.tags[0]: debugger
paths./v2/debugger/debuggees.parameters.length: 13
paths./v2/debugger/debuggees.parameters[0].$ref: '#/parameters/fields'
paths./v2/debugger/debuggees.parameters[1].$ref: '#/parameters/uploadType'
paths./v2/debugger/debuggees.parameters[2].$ref: '#/parameters/$.xgafv'
paths./v2/debugger/debuggees.parameters[3].$ref: '#/parameters/callback'
paths./v2/debugger/debuggees.parameters[4].$ref: '#/parameters/alt'
paths./v2/debugger/debuggees.parameters[5].$ref: '#/parameters/access_token'
paths./v2/debugger/debuggees.parameters[6].$ref: '#/parameters/key'
paths./v2/debugger/debuggees.parameters[7].$ref: '#/parameters/quotaUser'
paths./v2/debugger/debuggees.parameters[8].$ref: '#/parameters/pp'
paths./v2/debugger/debuggees.parameters[9].$ref: '#/parameters/oauth_token'
paths./v2/debugger/debuggees.parameters[10].$ref: '#/parameters/bearer_token'
paths./v2/debugger/debuggees.parameters[11].$ref: '#/parameters/upload_protocol'
paths./v2/debugger/debuggees.parameters[12].$ref: '#/parameters/prettyPrint'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.description: Lists all breakpoints
  for the debuggee.
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.operationId: clouddebugger.debugger.debuggees.breakpoints.list
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.parameters.length: 7
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.parameters[0].description: Only
  breakpoints with the specified action will pass the filter.
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.parameters[0].enum.length: 2
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.parameters[0].enum[0]: CAPTURE
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.parameters[0].enum[1]: LOG
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.parameters[0].in: query
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.parameters[0].name: action.value
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.parameters[0].type: string
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.parameters[1].description: |-
  The client version making the call.
  Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.parameters[1].in: query
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.parameters[1].name: clientVersion
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.parameters[1].type: string
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.parameters[2].description: ID
  of the debuggee whose breakpoints to list.
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.parameters[2].in: path
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.parameters[2].name: debuggeeId
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.parameters[2].required: true
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.parameters[2].type: string
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.parameters[3].description: |-
  When set to `true`, the response includes the list of breakpoints set by
  any user. Otherwise, it includes only breakpoints set by the caller.
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.parameters[3].in: query
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.parameters[3].name: includeAllUsers
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.parameters[3].type: boolean
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.parameters[4].description: |-
  When set to `true`, the response includes active and inactive
  breakpoints. Otherwise, it includes only active breakpoints.
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.parameters[4].in: query
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.parameters[4].name: includeInactive
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.parameters[4].type: boolean
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.parameters[5].description: |-
  This field is deprecated. The following fields are always stripped out of
  the result: `stack_frames`, `evaluated_expressions` and `variable_table`.
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.parameters[5].in: query
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.parameters[5].name: stripResults
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.parameters[5].type: boolean
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.parameters[6].description: |-
  A wait token that, if specified, blocks the call until the breakpoints
  list has changed, or a server selected timeout has expired.  The value
  should be set from the last response. The error code
  `google.rpc.Code.ABORTED` (RPC) is returned on wait timeout, which
  should be called again with the same `wait_token`.
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.parameters[6].in: query
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.parameters[6].name: waitToken
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.parameters[6].type: string
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.responses.200.description: Successful
  response
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.responses.200.schema.$ref: '#/definitions/ListBreakpointsResponse'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.security.length: 2
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.security[0].Oauth2.length: 1
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.security[0].Oauth2[0]: https://www.googleapis.com/auth/cloud-platform
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.security[1].Oauth2.length: 1
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.security[1].Oauth2[0]: https://www.googleapis.com/auth/cloud_debugger
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.tags.length: 1
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.get.tags[0]: debugger
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.parameters.length: 13
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.parameters[0].$ref: '#/parameters/fields'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.parameters[1].$ref: '#/parameters/uploadType'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.parameters[2].$ref: '#/parameters/$.xgafv'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.parameters[3].$ref: '#/parameters/callback'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.parameters[4].$ref: '#/parameters/alt'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.parameters[5].$ref: '#/parameters/access_token'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.parameters[6].$ref: '#/parameters/key'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.parameters[7].$ref: '#/parameters/quotaUser'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.parameters[8].$ref: '#/parameters/pp'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.parameters[9].$ref: '#/parameters/oauth_token'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.parameters[10].$ref: '#/parameters/bearer_token'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.parameters[11].$ref: '#/parameters/upload_protocol'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints.parameters[12].$ref: '#/parameters/prettyPrint'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.delete.description: Deletes
  the breakpoint from the debuggee.
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.delete.operationId: clouddebugger.debugger.debuggees.breakpoints.delete
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.delete.parameters.length: 3
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.delete.parameters[0].description: ID
  of the breakpoint to delete.
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.delete.parameters[0].in: path
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.delete.parameters[0].name: breakpointId
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.delete.parameters[0].required: true
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.delete.parameters[0].type: string
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.delete.parameters[1].description: |-
  The client version making the call.
  Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.delete.parameters[1].in: query
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.delete.parameters[1].name: clientVersion
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.delete.parameters[1].type: string
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.delete.parameters[2].description: ID
  of the debuggee whose breakpoint to delete.
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.delete.parameters[2].in: path
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.delete.parameters[2].name: debuggeeId
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.delete.parameters[2].required: true
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.delete.parameters[2].type: string
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.delete.responses.200.description: Successful
  response
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.delete.responses.200.schema.$ref: '#/definitions/Empty'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.delete.security.length: 2
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.delete.security[0].Oauth2.length: 1
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.delete.security[0].Oauth2[0]: https://www.googleapis.com/auth/cloud-platform
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.delete.security[1].Oauth2.length: 1
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.delete.security[1].Oauth2[0]: https://www.googleapis.com/auth/cloud_debugger
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.delete.tags.length: 1
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.delete.tags[0]: debugger
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.get.description: Gets
  breakpoint information.
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.get.operationId: clouddebugger.debugger.debuggees.breakpoints.get
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.get.parameters.length: 3
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.get.parameters[0].description: ID
  of the breakpoint to get.
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.get.parameters[0].in: path
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.get.parameters[0].name: breakpointId
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.get.parameters[0].required: true
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.get.parameters[0].type: string
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.get.parameters[1].description: |-
  The client version making the call.
  Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.get.parameters[1].in: query
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.get.parameters[1].name: clientVersion
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.get.parameters[1].type: string
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.get.parameters[2].description: ID
  of the debuggee whose breakpoint to get.
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.get.parameters[2].in: path
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.get.parameters[2].name: debuggeeId
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.get.parameters[2].required: true
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.get.parameters[2].type: string
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.get.responses.200.description: Successful
  response
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.get.responses.200.schema.$ref: '#/definitions/GetBreakpointResponse'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.get.security.length: 2
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.get.security[0].Oauth2.length: 1
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.get.security[0].Oauth2[0]: https://www.googleapis.com/auth/cloud-platform
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.get.security[1].Oauth2.length: 1
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.get.security[1].Oauth2[0]: https://www.googleapis.com/auth/cloud_debugger
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.get.tags.length: 1
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.get.tags[0]: debugger
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.parameters.length: 13
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.parameters[0].$ref: '#/parameters/fields'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.parameters[1].$ref: '#/parameters/uploadType'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.parameters[2].$ref: '#/parameters/$.xgafv'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.parameters[3].$ref: '#/parameters/callback'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.parameters[4].$ref: '#/parameters/alt'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.parameters[5].$ref: '#/parameters/access_token'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.parameters[6].$ref: '#/parameters/key'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.parameters[7].$ref: '#/parameters/quotaUser'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.parameters[8].$ref: '#/parameters/pp'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.parameters[9].$ref: '#/parameters/oauth_token'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.parameters[10].$ref: '#/parameters/bearer_token'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.parameters[11].$ref: '#/parameters/upload_protocol'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}.parameters[12].$ref: '#/parameters/prettyPrint'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/set.parameters.length: 13
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/set.parameters[0].$ref: '#/parameters/fields'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/set.parameters[1].$ref: '#/parameters/uploadType'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/set.parameters[2].$ref: '#/parameters/$.xgafv'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/set.parameters[3].$ref: '#/parameters/callback'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/set.parameters[4].$ref: '#/parameters/alt'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/set.parameters[5].$ref: '#/parameters/access_token'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/set.parameters[6].$ref: '#/parameters/key'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/set.parameters[7].$ref: '#/parameters/quotaUser'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/set.parameters[8].$ref: '#/parameters/pp'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/set.parameters[9].$ref: '#/parameters/oauth_token'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/set.parameters[10].$ref: '#/parameters/bearer_token'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/set.parameters[11].$ref: '#/parameters/upload_protocol'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/set.parameters[12].$ref: '#/parameters/prettyPrint'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/set.post.description: Sets the
  breakpoint to the debuggee.
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/set.post.operationId: clouddebugger.debugger.debuggees.breakpoints.set
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/set.post.parameters.length: 3
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/set.post.parameters[0].in: body
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/set.post.parameters[0].name: body
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/set.post.parameters[0].schema.$ref: '#/definitions/Breakpoint'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/set.post.parameters[1].description: |-
  The client version making the call.
  Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/set.post.parameters[1].in: query
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/set.post.parameters[1].name: clientVersion
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/set.post.parameters[1].type: string
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/set.post.parameters[2].description: ID
  of the debuggee where the breakpoint is to be set.
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/set.post.parameters[2].in: path
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/set.post.parameters[2].name: debuggeeId
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/set.post.parameters[2].required: true
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/set.post.parameters[2].type: string
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/set.post.responses.200.description: Successful
  response
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/set.post.responses.200.schema.$ref: '#/definitions/SetBreakpointResponse'
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/set.post.security.length: 2
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/set.post.security[0].Oauth2.length: 1
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/set.post.security[0].Oauth2[0]: https://www.googleapis.com/auth/cloud-platform
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/set.post.security[1].Oauth2.length: 1
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/set.post.security[1].Oauth2[0]: https://www.googleapis.com/auth/cloud_debugger
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/set.post.tags.length: 1
paths./v2/debugger/debuggees/{debuggeeId}/breakpoints/set.post.tags[0]: debugger
schemes.length: 1
schemes[0]: https
securityDefinitions.Oauth2.authorizationUrl: https://accounts.google.com/o/oauth2/auth
securityDefinitions.Oauth2.description: Oauth 2.0 authentication
securityDefinitions.Oauth2.flow: implicit
securityDefinitions.Oauth2.scopes.https://www.googleapis.com/auth/cloud-platform: View
  and manage your data across Google Cloud Platform services
securityDefinitions.Oauth2.scopes.https://www.googleapis.com/auth/cloud_debugger: Manage
  cloud debugger
securityDefinitions.Oauth2.type: oauth2
swagger: "2.0"
tags.length: 2
tags[0].name: controller
tags[1].name: debugger

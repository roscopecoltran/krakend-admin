syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package drive;

message GetAboutRequest {
    alt alt = 1;
    string fields = 2;
    // When calculating the number of remaining change IDs, whether to include public files the user has opened and shared files. When set to false, this counts only change IDs for owned files and any shared or public files that the user has explicitly added to a folder they own.
    bool includeSubscribed = 3;
    string key = 4;
    // Maximum number of remaining change IDs to count
    string maxChangeIdCount = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // Change ID to start counting from when calculating number of remaining change IDs
    string startChangeId = 9;
    string userIp = 10;
}

message GetAppsRequest {
    alt alt = 1;
    // A comma-separated list of file extensions for open with filtering. All apps within the given app query scope which can open any of the given file extensions will be included in the response. If appFilterMimeTypes are provided as well, the result is a union of the two resulting app lists.
    string appFilterExtensions = 2;
    // A comma-separated list of MIME types for open with filtering. All apps within the given app query scope which can open any of the given MIME types will be included in the response. If appFilterExtensions are provided as well, the result is a union of the two resulting app lists.
    string appFilterMimeTypes = 3;
    string fields = 4;
    string key = 5;
    // A language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).
    string languageCode = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetAppsAppIdRequest {
    alt alt = 1;
    // The ID of the app.
    string appId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetChangesRequest {
    alt alt = 1;
    string fields = 2;
    // Whether changes should include the file resource if the file is still accessible by the user at the time of the request, even when a file was removed from the list of changes and there will be no further change entries for this file.
    bool includeCorpusRemovals = 3;
    // Whether to include changes indicating that items have been removed from the list of changes, for example by deletion or loss of access.
    bool includeDeleted = 4;
    // Whether to include public files the user has opened and shared files. When set to false, the list only includes owned files plus any shared or public files the user has explicitly added to a folder they own.
    bool includeSubscribed = 5;
    // Whether Team Drive files or changes should be included in results.
    bool includeTeamDriveItems = 6;
    string key = 7;
    // Maximum number of changes to return.
    int32 maxResults = 8;
    string oauth_token = 9;
    // The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response or to the response from the getStartPageToken method.
    string pageToken = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // A comma-separated list of spaces to query. Supported values are 'drive', 'appDataFolder' and 'photos'.
    string spaces = 13;
    // Change ID to start listing changes from.
    string startChangeId = 14;
    // Whether the requesting application supports Team Drives.
    bool supportsTeamDrives = 15;
    // The Team Drive from which changes will be returned. If specified the change IDs will be reflective of the Team Drive; use the combined Team Drive ID and change ID as an identifier.
    string teamDriveId = 16;
    string userIp = 17;
}

message GetChangesStartPageTokenRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    // Whether the requesting application supports Team Drives.
    bool supportsTeamDrives = 7;
    // The ID of the Team Drive for which the starting pageToken for listing future changes from that Team Drive will be returned.
    string teamDriveId = 8;
    string userIp = 9;
}

message PostChangesWatchRequest {
    alt alt = 1;
    string fields = 2;
    // Whether changes should include the file resource if the file is still accessible by the user at the time of the request, even when a file was removed from the list of changes and there will be no further change entries for this file.
    bool includeCorpusRemovals = 3;
    // Whether to include changes indicating that items have been removed from the list of changes, for example by deletion or loss of access.
    bool includeDeleted = 4;
    // Whether to include public files the user has opened and shared files. When set to false, the list only includes owned files plus any shared or public files the user has explicitly added to a folder they own.
    bool includeSubscribed = 5;
    // Whether Team Drive files or changes should be included in results.
    bool includeTeamDriveItems = 6;
    string key = 7;
    // Maximum number of changes to return.
    int32 maxResults = 8;
    string oauth_token = 9;
    // The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response or to the response from the getStartPageToken method.
    string pageToken = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    Channel resource = 13;
    // A comma-separated list of spaces to query. Supported values are 'drive', 'appDataFolder' and 'photos'.
    string spaces = 14;
    // Change ID to start listing changes from.
    string startChangeId = 15;
    // Whether the requesting application supports Team Drives.
    bool supportsTeamDrives = 16;
    // The Team Drive from which changes will be returned. If specified the change IDs will be reflective of the Team Drive; use the combined Team Drive ID and change ID as an identifier.
    string teamDriveId = 17;
    string userIp = 18;
}

message GetChangesChangeIdRequest {
    alt alt = 1;
    // The ID of the change.
    string changeId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // Whether the requesting application supports Team Drives.
    bool supportsTeamDrives = 8;
    // The Team Drive from which the change will be returned.
    string teamDriveId = 9;
    string userIp = 10;
}

message PostChannelsStopRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    Channel resource = 7;
    string userIp = 8;
}

message GetFilesRequest {
    alt alt = 1;
    // Comma-separated list of bodies of items (files/documents) to which the query applies. Supported bodies are 'default', 'domain', 'teamDrive' and 'allTeamDrives'. 'allTeamDrives' must be combined with 'default'; all other values must be used in isolation. Prefer 'default' or 'teamDrive' to 'allTeamDrives' for efficiency.
    string corpora = 2;
    // The body of items (files/documents) to which the query applies. Deprecated: use 'corpora' instead.
    enum GetFilesRequest_Corpu {
        GETFILESREQUEST_CORPU_DEFAULT = 0;
        GETFILESREQUEST_CORPU_DOMAIN = 1;
    }
    GetFilesRequest_Corpu corpus = 3;
    string fields = 4;
    // Whether Team Drive items should be included in results.
    bool includeTeamDriveItems = 5;
    string key = 6;
    // The maximum number of files to return per page. Partial or empty result pages are possible even before the end of the files list has been reached.
    int32 maxResults = 7;
    string oauth_token = 8;
    // A comma-separated list of sort keys. Valid keys are 'createdDate', 'folder', 'lastViewedByMeDate', 'modifiedByMeDate', 'modifiedDate', 'quotaBytesUsed', 'recency', 'sharedWithMeDate', 'starred', 'title', and 'title_natural'. Each key sorts ascending by default, but may be reversed with the 'desc' modifier. Example usage: ?orderBy=folder,modifiedDate desc,title. Please note that there is a current limitation for users with approximately one million files in which the requested sort order is ignored.
    string orderBy = 9;
    // Page token for files.
    string pageToken = 10;
    boolean prettyPrint = 11;
    // This parameter is deprecated and has no function.
    enum GetFilesRequest_Projection {
        GETFILESREQUEST_PROJECTION_BASIC = 0;
        GETFILESREQUEST_PROJECTION_FULL = 1;
    }
    GetFilesRequest_Projection projection = 12;
    // Query string for searching files.
    string q = 13;
    string quotaUser = 14;
    // A comma-separated list of spaces to query. Supported values are 'drive', 'appDataFolder' and 'photos'.
    string spaces = 15;
    // Whether the requesting application supports Team Drives.
    bool supportsTeamDrives = 16;
    // ID of Team Drive to search.
    string teamDriveId = 17;
    string userIp = 18;
}

message PostFilesRequest {
    alt alt = 1;
    File body = 2;
    // Whether to convert this file to the corresponding Google Docs format.
    bool convert = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    // Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads.
    bool ocr = 7;
    // If ocr is true, hints at the language to use. Valid values are BCP 47 codes.
    string ocrLanguage = 8;
    // Whether to pin the head revision of the uploaded file. A file can have a maximum of 200 pinned revisions.
    bool pinned = 9;
    boolean prettyPrint = 10;
    string quotaUser = 11;
    // Whether the requesting application supports Team Drives.
    bool supportsTeamDrives = 12;
    // The language of the timed text.
    string timedTextLanguage = 13;
    // The timed text track name.
    string timedTextTrackName = 14;
    // Whether to use the content as indexable text.
    bool useContentAsIndexableText = 15;
    string userIp = 16;
    // The visibility of the new file. This parameter is only relevant when convert=false.
    enum PostFilesRequest_Visibility {
        POSTFILESREQUEST_VISIBILITY_DEFAULT = 0;
        POSTFILESREQUEST_VISIBILITY_PRIVATE = 1;
    }
    PostFilesRequest_Visibility visibility = 17;
}

message GetFilesGenerateIdsRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // Maximum number of IDs to return.
    int32 maxResults = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The space in which the IDs can be used to create new files. Supported values are 'drive' and 'appDataFolder'.
    string space = 8;
    string userIp = 9;
}

message DeleteFilesTrashRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    string userIp = 7;
}

message GetFilesFileIdRequest {
    // Whether the user is acknowledging the risk of downloading known malware or other abusive files.
    bool acknowledgeAbuse = 1;
    alt alt = 2;
    string fields = 3;
    // The ID for the file in question.
    string fileId = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // This parameter is deprecated and has no function.
    enum GetFilesFileIdRequest_Projection {
        GETFILESFILEIDREQUEST_PROJECTION_BASIC = 0;
        GETFILESFILEIDREQUEST_PROJECTION_FULL = 1;
    }
    GetFilesFileIdRequest_Projection projection = 8;
    string quotaUser = 9;
    // Specifies the Revision ID that should be downloaded. Ignored unless alt=media is specified.
    string revisionId = 10;
    // Whether the requesting application supports Team Drives.
    bool supportsTeamDrives = 11;
    // Deprecated: Use files.update with modifiedDateBehavior=noChange, updateViewedDate=true and an empty request body.
    bool updateViewedDate = 12;
    string userIp = 13;
}

message PutFilesFileIdRequest {
    // Comma-separated list of parent IDs to add.
    string addParents = 1;
    alt alt = 2;
    File body = 3;
    // This parameter is deprecated and has no function.
    bool convert = 4;
    string fields = 5;
    // The ID of the file to update.
    string fileId = 6;
    string key = 7;
    // Determines the behavior in which modifiedDate is updated. This overrides setModifiedDate.
    enum PutFilesFileIdRequest_ModifiedDateBehavior {
        PUTFILESFILEIDREQUEST_MODIFIEDDATEBEHAVIOR_FROMBODY = 0;
        PUTFILESFILEIDREQUEST_MODIFIEDDATEBEHAVIOR_FROMBODYIFNEEDED = 1;
        PUTFILESFILEIDREQUEST_MODIFIEDDATEBEHAVIOR_FROMBODYORNOW = 2;
        PUTFILESFILEIDREQUEST_MODIFIEDDATEBEHAVIOR_NOCHANGE = 3;
        PUTFILESFILEIDREQUEST_MODIFIEDDATEBEHAVIOR_NOW = 4;
        PUTFILESFILEIDREQUEST_MODIFIEDDATEBEHAVIOR_NOWIFNEEDED = 5;
    }
    PutFilesFileIdRequest_ModifiedDateBehavior modifiedDateBehavior = 8;
    // Whether a blob upload should create a new revision. If false, the blob data in the current head revision is replaced. If true or not set, a new blob is created as head revision, and previous unpinned revisions are preserved for a short period of time. Pinned revisions are stored indefinitely, using additional storage quota, up to a maximum of 200 revisions. For details on how revisions are retained, see the Drive Help Center.
    bool newRevision = 9;
    string oauth_token = 10;
    // Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads.
    bool ocr = 11;
    // If ocr is true, hints at the language to use. Valid values are BCP 47 codes.
    string ocrLanguage = 12;
    // Whether to pin the new revision. A file can have a maximum of 200 pinned revisions.
    bool pinned = 13;
    boolean prettyPrint = 14;
    string quotaUser = 15;
    // Comma-separated list of parent IDs to remove.
    string removeParents = 16;
    // Whether to set the modified date with the supplied modified date.
    bool setModifiedDate = 17;
    // Whether the requesting application supports Team Drives.
    bool supportsTeamDrives = 18;
    // The language of the timed text.
    string timedTextLanguage = 19;
    // The timed text track name.
    string timedTextTrackName = 20;
    // Whether to update the view date after successfully updating the file.
    bool updateViewedDate = 21;
    // Whether to use the content as indexable text.
    bool useContentAsIndexableText = 22;
    string userIp = 23;
}

message DeleteFilesFileIdRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the file to delete.
    string fileId = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // Whether the requesting application supports Team Drives.
    bool supportsTeamDrives = 8;
    string userIp = 9;
}

message GetFilesFileIdCommentsRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the file.
    string fileId = 3;
    // If set, all comments and replies, including deleted comments and replies (with content stripped) will be returned.
    bool includeDeleted = 4;
    string key = 5;
    // The maximum number of discussions to include in the response, used for paging.
    int32 maxResults = 6;
    string oauth_token = 7;
    // The continuation token, used to page through large result sets. To get the next page of results, set this parameter to the value of "nextPageToken" from the previous response.
    string pageToken = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    // Only discussions that were updated after this timestamp will be returned. Formatted as an RFC 3339 timestamp.
    string updatedMin = 11;
    string userIp = 12;
}

message PostFilesFileIdCommentsRequest {
    alt alt = 1;
    Comment body = 2;
    string fields = 3;
    // The ID of the file.
    string fileId = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetFilesFileIdCommentsCommentIdRequest {
    alt alt = 1;
    // The ID of the comment.
    string commentId = 2;
    string fields = 3;
    // The ID of the file.
    string fileId = 4;
    // If set, this will succeed when retrieving a deleted comment, and will include any deleted replies.
    bool includeDeleted = 5;
    string key = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PutFilesFileIdCommentsCommentIdRequest {
    alt alt = 1;
    Comment body = 2;
    // The ID of the comment.
    string commentId = 3;
    string fields = 4;
    // The ID of the file.
    string fileId = 5;
    string key = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message DeleteFilesFileIdCommentsCommentIdRequest {
    alt alt = 1;
    // The ID of the comment.
    string commentId = 2;
    string fields = 3;
    // The ID of the file.
    string fileId = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetFilesFileIdCommentsCommentIdRepliesRequest {
    alt alt = 1;
    // The ID of the comment.
    string commentId = 2;
    string fields = 3;
    // The ID of the file.
    string fileId = 4;
    // If set, all replies, including deleted replies (with content stripped) will be returned.
    bool includeDeleted = 5;
    string key = 6;
    // The maximum number of replies to include in the response, used for paging.
    int32 maxResults = 7;
    string oauth_token = 8;
    // The continuation token, used to page through large result sets. To get the next page of results, set this parameter to the value of "nextPageToken" from the previous response.
    string pageToken = 9;
    boolean prettyPrint = 10;
    string quotaUser = 11;
    string userIp = 12;
}

message PostFilesFileIdCommentsCommentIdRepliesRequest {
    alt alt = 1;
    CommentReply body = 2;
    // The ID of the comment.
    string commentId = 3;
    string fields = 4;
    // The ID of the file.
    string fileId = 5;
    string key = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetFilesFileIdCommentsCommentIdRepliesReplyIdRequest {
    alt alt = 1;
    // The ID of the comment.
    string commentId = 2;
    string fields = 3;
    // The ID of the file.
    string fileId = 4;
    // If set, this will succeed when retrieving a deleted reply.
    bool includeDeleted = 5;
    string key = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    // The ID of the reply.
    string replyId = 10;
    string userIp = 11;
}

message PutFilesFileIdCommentsCommentIdRepliesReplyIdRequest {
    alt alt = 1;
    CommentReply body = 2;
    // The ID of the comment.
    string commentId = 3;
    string fields = 4;
    // The ID of the file.
    string fileId = 5;
    string key = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    // The ID of the reply.
    string replyId = 10;
    string userIp = 11;
}

message DeleteFilesFileIdCommentsCommentIdRepliesReplyIdRequest {
    alt alt = 1;
    // The ID of the comment.
    string commentId = 2;
    string fields = 3;
    // The ID of the file.
    string fileId = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // The ID of the reply.
    string replyId = 9;
    string userIp = 10;
}

message PostFilesFileIdCopyRequest {
    alt alt = 1;
    File body = 2;
    // Whether to convert this file to the corresponding Google Docs format.
    bool convert = 3;
    string fields = 4;
    // The ID of the file to copy.
    string fileId = 5;
    string key = 6;
    string oauth_token = 7;
    // Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads.
    bool ocr = 8;
    // If ocr is true, hints at the language to use. Valid values are BCP 47 codes.
    string ocrLanguage = 9;
    // Whether to pin the head revision of the new copy. A file can have a maximum of 200 pinned revisions.
    bool pinned = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // Whether the requesting application supports Team Drives.
    bool supportsTeamDrives = 13;
    // The language of the timed text.
    string timedTextLanguage = 14;
    // The timed text track name.
    string timedTextTrackName = 15;
    string userIp = 16;
    // The visibility of the new file. This parameter is only relevant when the source is not a native Google Doc and convert=false.
    enum PostFilesFileIdCopyRequest_Visibility {
        POSTFILESFILEIDCOPYREQUEST_VISIBILITY_DEFAULT = 0;
        POSTFILESFILEIDCOPYREQUEST_VISIBILITY_PRIVATE = 1;
    }
    PostFilesFileIdCopyRequest_Visibility visibility = 17;
}

message GetFilesFileIdExportRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the file.
    string fileId = 3;
    string key = 4;
    // The MIME type of the format requested for this export.
    string mimeType = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetFilesFileIdParentsRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the file.
    string fileId = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostFilesFileIdParentsRequest {
    alt alt = 1;
    ParentReference body = 2;
    string fields = 3;
    // The ID of the file.
    string fileId = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // Whether the requesting application supports Team Drives.
    bool supportsTeamDrives = 9;
    string userIp = 10;
}

message GetFilesFileIdParentsParentIdRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the file.
    string fileId = 3;
    string key = 4;
    string oauth_token = 5;
    // The ID of the parent.
    string parentId = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message DeleteFilesFileIdParentsParentIdRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the file.
    string fileId = 3;
    string key = 4;
    string oauth_token = 5;
    // The ID of the parent.
    string parentId = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetFilesFileIdPermissionsRequest {
    alt alt = 1;
    string fields = 2;
    // The ID for the file or Team Drive.
    string fileId = 3;
    string key = 4;
    // The maximum number of permissions to return per page. When not set for files in a Team Drive, at most 100 results will be returned. When not set for files that are not in a Team Drive, the entire list will be returned.
    int32 maxResults = 5;
    string oauth_token = 6;
    // The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response.
    string pageToken = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    // Whether the requesting application supports Team Drives.
    bool supportsTeamDrives = 10;
    string userIp = 11;
}

message PostFilesFileIdPermissionsRequest {
    alt alt = 1;
    Permission body = 2;
    // A custom message to include in notification emails.
    string emailMessage = 3;
    string fields = 4;
    // The ID for the file or Team Drive.
    string fileId = 5;
    string key = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    // Whether to send notification emails when sharing to users or groups. This parameter is ignored and an email is sent if the role is owner.
    bool sendNotificationEmails = 10;
    // Whether the requesting application supports Team Drives.
    bool supportsTeamDrives = 11;
    string userIp = 12;
}

message GetFilesFileIdPermissionsPermissionIdRequest {
    alt alt = 1;
    string fields = 2;
    // The ID for the file or Team Drive.
    string fileId = 3;
    string key = 4;
    string oauth_token = 5;
    // The ID for the permission.
    string permissionId = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // Whether the requesting application supports Team Drives.
    bool supportsTeamDrives = 9;
    string userIp = 10;
}

message PutFilesFileIdPermissionsPermissionIdRequest {
    alt alt = 1;
    Permission body = 2;
    string fields = 3;
    // The ID for the file or Team Drive.
    string fileId = 4;
    string key = 5;
    string oauth_token = 6;
    // The ID for the permission.
    string permissionId = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    // Whether to remove the expiration date.
    bool removeExpiration = 10;
    // Whether the requesting application supports Team Drives.
    bool supportsTeamDrives = 11;
    // Whether changing a role to 'owner' downgrades the current owners to writers. Does nothing if the specified role is not 'owner'.
    bool transferOwnership = 12;
    string userIp = 13;
}

message DeleteFilesFileIdPermissionsPermissionIdRequest {
    alt alt = 1;
    string fields = 2;
    // The ID for the file or Team Drive.
    string fileId = 3;
    string key = 4;
    string oauth_token = 5;
    // The ID for the permission.
    string permissionId = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // Whether the requesting application supports Team Drives.
    bool supportsTeamDrives = 9;
    string userIp = 10;
}

message GetFilesFileIdPropertiesRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the file.
    string fileId = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostFilesFileIdPropertiesRequest {
    alt alt = 1;
    Property body = 2;
    string fields = 3;
    // The ID of the file.
    string fileId = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetFilesFileIdPropertiesPropertyKeyRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the file.
    string fileId = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // The key of the property.
    string propertyKey = 7;
    string quotaUser = 8;
    string userIp = 9;
    // The visibility of the property.
    string visibility = 10;
}

message PutFilesFileIdPropertiesPropertyKeyRequest {
    alt alt = 1;
    Property body = 2;
    string fields = 3;
    // The ID of the file.
    string fileId = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // The key of the property.
    string propertyKey = 8;
    string quotaUser = 9;
    string userIp = 10;
    // The visibility of the property.
    string visibility = 11;
}

message DeleteFilesFileIdPropertiesPropertyKeyRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the file.
    string fileId = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // The key of the property.
    string propertyKey = 7;
    string quotaUser = 8;
    string userIp = 9;
    // The visibility of the property.
    string visibility = 10;
}

message GetFilesFileIdRealtimeRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the file that the Realtime API data model is associated with.
    string fileId = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The revision of the Realtime API data model to export. Revisions start at 1 (the initial empty data model) and are incremented with each change. If this parameter is excluded, the most recent data model will be returned.
    int32 revision = 8;
    string userIp = 9;
}

message PutFilesFileIdRealtimeRequest {
    alt alt = 1;
    // The revision of the model to diff the uploaded model against. If set, the uploaded model is diffed against the provided revision and those differences are merged with any changes made to the model after the provided revision. If not set, the uploaded model replaces the current model on the server.
    string baseRevision = 2;
    string fields = 3;
    // The ID of the file that the Realtime API data model is associated with.
    string fileId = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetFilesFileIdRevisionsRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the file.
    string fileId = 3;
    string key = 4;
    // Maximum number of revisions to return.
    int32 maxResults = 5;
    string oauth_token = 6;
    // Page token for revisions. To get the next page of results, set this parameter to the value of "nextPageToken" from the previous response.
    string pageToken = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetFilesFileIdRevisionsRevisionIdRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the file.
    string fileId = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The ID of the revision.
    string revisionId = 8;
    string userIp = 9;
}

message PutFilesFileIdRevisionsRevisionIdRequest {
    alt alt = 1;
    Revision body = 2;
    string fields = 3;
    // The ID for the file.
    string fileId = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // The ID for the revision.
    string revisionId = 9;
    string userIp = 10;
}

message DeleteFilesFileIdRevisionsRevisionIdRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the file.
    string fileId = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The ID of the revision.
    string revisionId = 8;
    string userIp = 9;
}

message PostFilesFileIdTouchRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the file to update.
    string fileId = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // Whether the requesting application supports Team Drives.
    bool supportsTeamDrives = 8;
    string userIp = 9;
}

message PostFilesFileIdTrashRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the file to trash.
    string fileId = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // Whether the requesting application supports Team Drives.
    bool supportsTeamDrives = 8;
    string userIp = 9;
}

message PostFilesFileIdUntrashRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the file to untrash.
    string fileId = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // Whether the requesting application supports Team Drives.
    bool supportsTeamDrives = 8;
    string userIp = 9;
}

message PostFilesFileIdWatchRequest {
    // Whether the user is acknowledging the risk of downloading known malware or other abusive files.
    bool acknowledgeAbuse = 1;
    alt alt = 2;
    string fields = 3;
    // The ID for the file in question.
    string fileId = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // This parameter is deprecated and has no function.
    enum PostFilesFileIdWatchRequest_Projection {
        POSTFILESFILEIDWATCHREQUEST_PROJECTION_BASIC = 0;
        POSTFILESFILEIDWATCHREQUEST_PROJECTION_FULL = 1;
    }
    PostFilesFileIdWatchRequest_Projection projection = 8;
    string quotaUser = 9;
    Channel resource = 10;
    // Specifies the Revision ID that should be downloaded. Ignored unless alt=media is specified.
    string revisionId = 11;
    // Whether the requesting application supports Team Drives.
    bool supportsTeamDrives = 12;
    // Deprecated: Use files.update with modifiedDateBehavior=noChange, updateViewedDate=true and an empty request body.
    bool updateViewedDate = 13;
    string userIp = 14;
}

message GetFilesFolderIdChildrenRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the folder.
    string folderId = 3;
    string key = 4;
    // Maximum number of children to return.
    int32 maxResults = 5;
    string oauth_token = 6;
    // A comma-separated list of sort keys. Valid keys are 'createdDate', 'folder', 'lastViewedByMeDate', 'modifiedByMeDate', 'modifiedDate', 'quotaBytesUsed', 'recency', 'sharedWithMeDate', 'starred', and 'title'. Each key sorts ascending by default, but may be reversed with the 'desc' modifier. Example usage: ?orderBy=folder,modifiedDate desc,title. Please note that there is a current limitation for users with approximately one million files in which the requested sort order is ignored.
    string orderBy = 7;
    // Page token for children.
    string pageToken = 8;
    boolean prettyPrint = 9;
    // Query string for searching children.
    string q = 10;
    string quotaUser = 11;
    string userIp = 12;
}

message PostFilesFolderIdChildrenRequest {
    alt alt = 1;
    ChildReference body = 2;
    string fields = 3;
    // The ID of the folder.
    string folderId = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // Whether the requesting application supports Team Drives.
    bool supportsTeamDrives = 9;
    string userIp = 10;
}

message GetFilesFolderIdChildrenChildIdRequest {
    alt alt = 1;
    // The ID of the child.
    string childId = 2;
    string fields = 3;
    // The ID of the folder.
    string folderId = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message DeleteFilesFolderIdChildrenChildIdRequest {
    alt alt = 1;
    // The ID of the child.
    string childId = 2;
    string fields = 3;
    // The ID of the folder.
    string folderId = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetPermissionIdsEmailRequest {
    alt alt = 1;
    // The email address for which to return a permission ID
    string email = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetTeamdrivesRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // Maximum number of Team Drives to return.
    int32 maxResults = 4;
    string oauth_token = 5;
    // Page token for Team Drives.
    string pageToken = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostTeamdrivesRequest {
    alt alt = 1;
    TeamDrive body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // An ID, such as a random UUID, which uniquely identifies this user's request for idempotent creation of a Team Drive. A repeated request by the same user and with the same request ID will avoid creating duplicates by attempting to create the same Team Drive. If the Team Drive already exists a 409 error will be returned.
    string requestId = 8;
    string userIp = 9;
}

message GetTeamdrivesTeamDriveIdRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    // The ID of the Team Drive
    string teamDriveId = 7;
    string userIp = 8;
}

message PutTeamdrivesTeamDriveIdRequest {
    alt alt = 1;
    TeamDrive body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The ID of the Team Drive
    string teamDriveId = 8;
    string userIp = 9;
}

message DeleteTeamdrivesTeamDriveIdRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    // The ID of the Team Drive
    string teamDriveId = 7;
    string userIp = 8;
}

message About {
    // Information about supported additional roles per file type. The most specific type takes precedence.
    message AdditionalRoleInfo {
            // The supported additional roles per primary role.
    message RoleSet {
                    // The supported additional roles with the primary role.
    repeated string additionalRoles = 1;
                    // A primary permission role.
    string primaryRole = 2;
        }
        repeated RoleSet roleSets = 1;
            // The content type that this additional role info applies to.
    string type = 2;
    }
    repeated AdditionalRoleInfo additionalRoleInfo = 1;
    // The domain sharing policy for the current user. Possible values are:  
    // - allowed 
    // - allowedWithWarning 
    // - incomingOnly 
    // - disallowed
    string domainSharingPolicy = 2;
    // The ETag of the item.
    string etag = 3;
    // The allowable export formats.
    message ExportFormat {
            // The content type to convert from.
    string source = 1;
            // The possible content types to convert to.
    repeated string targets = 2;
    }
    repeated ExportFormat exportFormats = 4;
    // List of additional features enabled on this account.
    message Feature {
            // The name of the feature.
    string featureName = 1;
            // The request limit rate for this feature, in queries per second.
    double featureRate = 2;
    }
    repeated Feature features = 5;
    // The palette of allowable folder colors as RGB hex strings.
    repeated string folderColorPalette = 6;
    // The allowable import formats.
    message ImportFormat {
            // The imported file's content type to convert from.
    string source = 1;
            // The possible content types to convert to.
    repeated string targets = 2;
    }
    repeated ImportFormat importFormats = 7;
    // A boolean indicating whether the authenticated app is installed by the authenticated user.
    bool isCurrentAppInstalled = 8;
    // This is always drive#about.
    string kind = 9;
    // The user's language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).
    string languageCode = 10;
    // The largest change id.
    string largestChangeId = 11;
    // List of max upload sizes for each file type. The most specific type takes precedence.
    message MaxUploadSize {
            // The max upload size for this type.
    string size = 1;
            // The file type.
    string type = 2;
    }
    repeated MaxUploadSize maxUploadSizes = 12;
    // The name of the current user.
    string name = 13;
    // The current user's ID as visible in the permissions collection.
    string permissionId = 14;
    // The amount of storage quota used by different Google services.
    message QuotaBytesByService {
            // The storage quota bytes used by the service.
    string bytesUsed = 1;
            // The service's name, e.g. DRIVE, GMAIL, or PHOTOS.
    string serviceName = 2;
    }
    repeated QuotaBytesByService quotaBytesByService = 15;
    // The total number of quota bytes.
    string quotaBytesTotal = 16;
    // The number of quota bytes used by Google Drive.
    string quotaBytesUsed = 17;
    // The number of quota bytes used by all Google apps (Drive, Picasa, etc.).
    string quotaBytesUsedAggregate = 18;
    // The number of quota bytes used by trashed items.
    string quotaBytesUsedInTrash = 19;
    // The type of the user's storage quota. Possible values are:  
    // - LIMITED 
    // - UNLIMITED
    string quotaType = 20;
    // The number of remaining change ids, limited to no more than 2500.
    string remainingChangeIds = 21;
    // The id of the root folder.
    string rootFolderId = 22;
    // A link back to this item.
    string selfLink = 23;
    // A list of themes that are supported for Team Drives.
    message TeamDriveTheme {
            // A link to this Team Drive theme's background image.
    string backgroundImageLink = 1;
            // The color of this Team Drive theme as an RGB hex string.
    string colorRgb = 2;
            // The ID of the theme.
    string id = 3;
    }
    repeated TeamDriveTheme teamDriveThemes = 24;
    // The authenticated user.
    User user = 25;
}

message App {
    // Whether the app is authorized to access data on the user's Drive.
    bool authorized = 1;
    // The template url to create a new file with this app in a given folder. The template will contain {folderId} to be replaced by the folder to create the new file in.
    string createInFolderTemplate = 2;
    // The url to create a new file with this app.
    string createUrl = 3;
    // Whether the app has drive-wide scope. An app with drive-wide scope can access all files in the user's drive.
    bool hasDriveWideScope = 4;
    // The various icons for the app.
    message Icon {
            // Category of the icon. Allowed values are:  
    // - application - icon for the application 
    // - document - icon for a file associated with the app 
    // - documentShared - icon for a shared file associated with the app
    string category = 1;
            // URL for the icon.
    string iconUrl = 2;
            // Size of the icon. Represented as the maximum of the width and height.
    int32 size = 3;
    }
    repeated Icon icons = 5;
    // The ID of the app.
    string id = 6;
    // Whether the app is installed.
    bool installed = 7;
    // This is always drive#app.
    string kind = 8;
    // A long description of the app.
    string longDescription = 9;
    // The name of the app.
    string name = 10;
    // The type of object this app creates (e.g. Chart). If empty, the app name should be used instead.
    string objectType = 11;
    // The template url for opening files with this app. The template will contain {ids} and/or {exportIds} to be replaced by the actual file ids. See  Open Files  for the full documentation.
    string openUrlTemplate = 12;
    // The list of primary file extensions.
    repeated string primaryFileExtensions = 13;
    // The list of primary mime types.
    repeated string primaryMimeTypes = 14;
    // The ID of the product listing for this app.
    string productId = 15;
    // A link to the product listing for this app.
    string productUrl = 16;
    // The list of secondary file extensions.
    repeated string secondaryFileExtensions = 17;
    // The list of secondary mime types.
    repeated string secondaryMimeTypes = 18;
    // A short description of the app.
    string shortDescription = 19;
    // Whether this app supports creating new objects.
    bool supportsCreate = 20;
    // Whether this app supports importing Google Docs.
    bool supportsImport = 21;
    // Whether this app supports opening more than one file.
    bool supportsMultiOpen = 22;
    // Whether this app supports creating new files when offline.
    bool supportsOfflineCreate = 23;
    // Whether the app is selected as the default handler for the types it supports.
    bool useByDefault = 24;
}

message AppList {
    // List of app IDs that the user has specified to use by default. The list is in reverse-priority order (lowest to highest).
    repeated string defaultAppIds = 1;
    // The ETag of the list.
    string etag = 2;
    // The list of apps.
    repeated App items = 3;
    // This is always drive#appList.
    string kind = 4;
    // A link back to this list.
    string selfLink = 5;
}

message Change {
    // Whether the file or Team Drive has been removed from this list of changes, for example by deletion or loss of access.
    bool deleted = 1;
    // The updated state of the file. Present if the type is file and the file has not been removed from this list of changes.
    File file = 2;
    // The ID of the file associated with this change.
    string fileId = 3;
    // The ID of the change.
    string id = 4;
    // This is always drive#change.
    string kind = 5;
    // The time of this modification.
    string modificationDate = 6;
    // A link back to this change.
    string selfLink = 7;
    // The updated state of the Team Drive. Present if the type is teamDrive, the user is still a member of the Team Drive, and the Team Drive has not been deleted.
    TeamDrive teamDrive = 8;
    // The ID of the Team Drive associated with this change.
    string teamDriveId = 9;
    // The type of the change. Possible values are file and teamDrive.
    string type = 10;
}

message ChangeList {
    // The ETag of the list.
    string etag = 1;
    // The list of changes. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
    repeated Change items = 2;
    // This is always drive#changeList.
    string kind = 3;
    // The current largest change ID.
    string largestChangeId = 4;
    // The starting page token for future changes. This will be present only if the end of the current changes list has been reached.
    string newStartPageToken = 5;
    // A link to the next page of changes.
    string nextLink = 6;
    // The page token for the next page of changes. This will be absent if the end of the changes list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.
    string nextPageToken = 7;
    // A link back to this list.
    string selfLink = 8;
}

message Channel {
    // The address where notifications are delivered for this channel.
    string address = 1;
    // Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.
    string expiration = 2;
    // A UUID or similar unique string that identifies this channel.
    string id = 3;
    // Identifies this as a notification channel used to watch for changes to a resource. Value: the fixed string "api#channel".
    string kind = 4;
    // Additional parameters controlling delivery channel behavior. Optional.
    map<string, string> params = 5;
    // A Boolean value to indicate whether payload is wanted. Optional.
    bool payload = 6;
    // An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.
    string resourceId = 7;
    // A version-specific identifier for the watched resource.
    string resourceUri = 8;
    // An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.
    string token = 9;
    // The type of delivery mechanism used for this channel.
    string type = 10;
}

message ChildList {
    // The ETag of the list.
    string etag = 1;
    // The list of children. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
    repeated ChildReference items = 2;
    // This is always drive#childList.
    string kind = 3;
    // A link to the next page of children.
    string nextLink = 4;
    // The page token for the next page of children. This will be absent if the end of the children list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.
    string nextPageToken = 5;
    // A link back to this list.
    string selfLink = 6;
}

message ChildReference {
    // A link to the child.
    string childLink = 1;
    // The ID of the child.
    string id = 2;
    // This is always drive#childReference.
    string kind = 3;
    // A link back to this reference.
    string selfLink = 4;
}

message Comment {
    // A region of the document represented as a JSON string. See anchor documentation for details on how to define and interpret anchor properties.
    string anchor = 1;
    // The user who wrote this comment.
    User author = 2;
    // The ID of the comment.
    string commentId = 3;
    // The plain text content used to create this comment. This is not HTML safe and should only be used as a starting point to make edits to a comment's content.
    string content = 4;
    // The context of the file which is being commented on.
    message Context {
            // The MIME type of the context snippet.
    string type = 1;
            // Data representation of the segment of the file being commented on. In the case of a text file for example, this would be the actual text that the comment is about.
    string value = 2;
    }
    Context context = 5;
    // The date when this comment was first created.
    string createdDate = 6;
    // Whether this comment has been deleted. If a comment has been deleted the content will be cleared and this will only represent a comment that once existed.
    bool deleted = 7;
    // The file which this comment is addressing.
    string fileId = 8;
    // The title of the file which this comment is addressing.
    string fileTitle = 9;
    // HTML formatted content for this comment.
    string htmlContent = 10;
    // This is always drive#comment.
    string kind = 11;
    // The date when this comment or any of its replies were last modified.
    string modifiedDate = 12;
    // Replies to this post.
    repeated CommentReply replies = 13;
    // A link back to this comment.
    string selfLink = 14;
    // The status of this comment. Status can be changed by posting a reply to a comment with the desired status.  
    // - "open" - The comment is still open. 
    // - "resolved" - The comment has been resolved by one of its replies.
    string status = 15;
}

message CommentList {
    // The list of comments. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
    repeated Comment items = 1;
    // This is always drive#commentList.
    string kind = 2;
    // A link to the next page of comments.
    string nextLink = 3;
    // The page token for the next page of comments. This will be absent if the end of the comments list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.
    string nextPageToken = 4;
    // A link back to this list.
    string selfLink = 5;
}

message CommentReply {
    // The user who wrote this reply.
    User author = 1;
    // The plain text content used to create this reply. This is not HTML safe and should only be used as a starting point to make edits to a reply's content. This field is required on inserts if no verb is specified (resolve/reopen).
    string content = 2;
    // The date when this reply was first created.
    string createdDate = 3;
    // Whether this reply has been deleted. If a reply has been deleted the content will be cleared and this will only represent a reply that once existed.
    bool deleted = 4;
    // HTML formatted content for this reply.
    string htmlContent = 5;
    // This is always drive#commentReply.
    string kind = 6;
    // The date when this reply was last modified.
    string modifiedDate = 7;
    // The ID of the reply.
    string replyId = 8;
    // The action this reply performed to the parent comment. When creating a new reply this is the action to be perform to the parent comment. Possible values are:  
    // - "resolve" - To resolve a comment. 
    // - "reopen" - To reopen (un-resolve) a comment.
    string verb = 9;
}

message CommentReplyList {
    // The list of replies. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
    repeated CommentReply items = 1;
    // This is always drive#commentReplyList.
    string kind = 2;
    // A link to the next page of replies.
    string nextLink = 3;
    // The page token for the next page of replies. This will be absent if the end of the replies list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.
    string nextPageToken = 4;
    // A link back to this list.
    string selfLink = 5;
}

message File {
    // A link for opening the file in a relevant Google editor or viewer.
    string alternateLink = 1;
    // Whether this file is in the Application Data folder.
    bool appDataContents = 2;
    // Deprecated: use capabilities/canComment.
    bool canComment = 3;
    // Deprecated: use capabilities/canReadRevisions.
    bool canReadRevisions = 4;
    // Capabilities the current user has on this file. Each capability corresponds to a fine-grained action that a user may take.
    message Capabilities {
            // Whether the current user can add children to this folder. This is always false when the item is not a folder.
    bool canAddChildren = 1;
            // Whether the current user can change the restricted download label of this file.
    bool canChangeRestrictedDownload = 2;
            // Whether the current user can comment on this file.
    bool canComment = 3;
            // Whether the current user can copy this file. For a Team Drive item, whether the current user can copy non-folder descendants of this item, or this item itself if it is not a folder.
    bool canCopy = 4;
            // Whether the current user can delete this file.
    bool canDelete = 5;
            // Whether the current user can download this file.
    bool canDownload = 6;
            // Whether the current user can edit this file.
    bool canEdit = 7;
            // Whether the current user can list the children of this folder. This is always false when the item is not a folder.
    bool canListChildren = 8;
            // Whether the current user can move this item into a Team Drive. If the item is in a Team Drive, this field is equivalent to canMoveTeamDriveItem.
    bool canMoveItemIntoTeamDrive = 9;
            // Whether the current user can move this Team Drive item by changing its parent. Note that a request to change the parent for this item may still fail depending on the new parent that is being added. Only populated for Team Drive files.
    bool canMoveTeamDriveItem = 10;
            // Whether the current user can read the revisions resource of this file. For a Team Drive item, whether revisions of non-folder descendants of this item, or this item itself if it is not a folder, can be read.
    bool canReadRevisions = 11;
            // Whether the current user can read the Team Drive to which this file belongs. Only populated for Team Drive files.
    bool canReadTeamDrive = 12;
            // Whether the current user can remove children from this folder. This is always false when the item is not a folder.
    bool canRemoveChildren = 13;
            // Whether the current user can rename this file.
    bool canRename = 14;
            // Whether the current user can modify the sharing settings for this file.
    bool canShare = 15;
            // Whether the current user can move this file to trash.
    bool canTrash = 16;
            // Whether the current user can restore this file from trash.
    bool canUntrash = 17;
    }
    Capabilities capabilities = 5;
    // Deprecated: use capabilities/canCopy.
    bool copyable = 6;
    // Create time for this file (formatted RFC 3339 timestamp).
    string createdDate = 7;
    // A link to open this file with the user's default app for this file. Only populated when the drive.apps.readonly scope is used.
    string defaultOpenWithLink = 8;
    // A short description of the file.
    string description = 9;
    string downloadUrl = 10;
    // Deprecated: use capabilities/canEdit.
    bool editable = 11;
    // A link for embedding the file.
    string embedLink = 12;
    // ETag of the file.
    string etag = 13;
    // Whether this file has been explicitly trashed, as opposed to recursively trashed.
    bool explicitlyTrashed = 14;
    // Links for exporting Google Docs to specific formats.
    map<string, string> exportLinks = 15;
    // The final component of fullFileExtension with trailing text that does not appear to be part of the extension removed. This field is only populated for files with content stored in Drive; it is not populated for Google Docs or shortcut files.
    string fileExtension = 16;
    // The size of the file in bytes. This field is only populated for files with content stored in Drive; it is not populated for Google Docs or shortcut files.
    string fileSize = 17;
    // Folder color as an RGB hex string if the file is a folder. The list of supported colors is available in the folderColorPalette field of the About resource. If an unsupported color is specified, it will be changed to the closest color in the palette. Not populated for Team Drive files.
    string folderColorRgb = 18;
    // The full file extension; extracted from the title. May contain multiple concatenated extensions, such as "tar.gz". Removing an extension from the title does not clear this field; however, changing the extension on the title does update this field. This field is only populated for files with content stored in Drive; it is not populated for Google Docs or shortcut files.
    string fullFileExtension = 19;
    // Whether any users are granted file access directly on this file. This field is only populated for Team Drive files.
    bool hasAugmentedPermissions = 20;
    // Whether this file has a thumbnail. This does not indicate whether the requesting app has access to the thumbnail. To check access, look for the presence of the thumbnailLink field.
    bool hasThumbnail = 21;
    // The ID of the file's head revision. This field is only populated for files with content stored in Drive; it is not populated for Google Docs or shortcut files.
    string headRevisionId = 22;
    // A link to the file's icon.
    string iconLink = 23;
    // The ID of the file.
    string id = 24;
    // Metadata about image media. This will only be present for image types, and its contents will depend on what can be parsed from the image content.
    message ImageMediaMetadata {
            // The aperture used to create the photo (f-number).
    float aperture = 1;
            // The make of the camera used to create the photo.
    string cameraMake = 2;
            // The model of the camera used to create the photo.
    string cameraModel = 3;
            // The color space of the photo.
    string colorSpace = 4;
            // The date and time the photo was taken (EXIF format timestamp).
    string date = 5;
            // The exposure bias of the photo (APEX value).
    float exposureBias = 6;
            // The exposure mode used to create the photo.
    string exposureMode = 7;
            // The length of the exposure, in seconds.
    float exposureTime = 8;
            // Whether a flash was used to create the photo.
    bool flashUsed = 9;
            // The focal length used to create the photo, in millimeters.
    float focalLength = 10;
            // The height of the image in pixels.
    int32 height = 11;
            // The ISO speed used to create the photo.
    int32 isoSpeed = 12;
            // The lens used to create the photo.
    string lens = 13;
            // Geographic location information stored in the image.
    message Location {
                    // The altitude stored in the image.
    double altitude = 1;
                    // The latitude stored in the image.
    double latitude = 2;
                    // The longitude stored in the image.
    double longitude = 3;
        }
        Location location = 14;
            // The smallest f-number of the lens at the focal length used to create the photo (APEX value).
    float maxApertureValue = 15;
            // The metering mode used to create the photo.
    string meteringMode = 16;
            // The rotation in clockwise degrees from the image's original orientation.
    int32 rotation = 17;
            // The type of sensor used to create the photo.
    string sensor = 18;
            // The distance to the subject of the photo, in meters.
    int32 subjectDistance = 19;
            // The white balance mode used to create the photo.
    string whiteBalance = 20;
            // The width of the image in pixels.
    int32 width = 21;
    }
    ImageMediaMetadata imageMediaMetadata = 25;
    // Indexable text attributes for the file (can only be written)
    message IndexableText {
            // The text to be indexed for this file.
    string text = 1;
    }
    IndexableText indexableText = 26;
    // Whether the file was created or opened by the requesting app.
    bool isAppAuthorized = 27;
    // The type of file. This is always drive#file.
    string kind = 28;
    // A group of labels for the file.
    message Labels {
            // Deprecated.
    bool hidden = 1;
            // Whether the file has been modified by this user.
    bool modified = 2;
            // Whether viewers and commenters are prevented from downloading, printing, and copying this file.
    bool restricted = 3;
            // Whether this file is starred by the user.
    bool starred = 4;
            // Whether this file has been trashed. This label applies to all users accessing the file; however, only owners are allowed to see and untrash files.
    bool trashed = 5;
            // Whether this file has been viewed by this user.
    bool viewed = 6;
    }
    Labels labels = 29;
    // The last user to modify this file.
    User lastModifyingUser = 30;
    // Name of the last user to modify this file.
    string lastModifyingUserName = 31;
    // Last time this file was viewed by the user (formatted RFC 3339 timestamp).
    string lastViewedByMeDate = 32;
    // Deprecated.
    string markedViewedByMeDate = 33;
    // An MD5 checksum for the content of this file. This field is only populated for files with content stored in Drive; it is not populated for Google Docs or shortcut files.
    string md5Checksum = 34;
    // The MIME type of the file. This is only mutable on update when uploading new content. This field can be left blank, and the mimetype will be determined from the uploaded content's MIME type.
    string mimeType = 35;
    // Last time this file was modified by the user (formatted RFC 3339 timestamp). Note that setting modifiedDate will also update the modifiedByMe date for the user which set the date.
    string modifiedByMeDate = 36;
    // Last time this file was modified by anyone (formatted RFC 3339 timestamp). This is only mutable on update when the setModifiedDate parameter is set.
    string modifiedDate = 37;
    // A map of the id of each of the user's apps to a link to open this file with that app. Only populated when the drive.apps.readonly scope is used.
    map<string, string> openWithLinks = 38;
    // The original filename of the uploaded content if available, or else the original value of the title field. This is only available for files with binary content in Drive.
    string originalFilename = 39;
    // Whether the file is owned by the current user. Not populated for Team Drive files.
    bool ownedByMe = 40;
    // Name(s) of the owner(s) of this file. Not populated for Team Drive files.
    repeated string ownerNames = 41;
    // The owner(s) of this file. Not populated for Team Drive files.
    repeated User owners = 42;
    // Collection of parent folders which contain this file.
    // Setting this field will put the file in all of the provided folders. On insert, if no folders are provided, the file will be placed in the default root folder.
    repeated ParentReference parents = 43;
    // List of permission IDs for users with access to this file.
    repeated string permissionIds = 44;
    // The list of permissions for users with access to this file. Not populated for Team Drive files.
    repeated Permission permissions = 45;
    // The list of properties.
    repeated Property properties = 46;
    // The number of quota bytes used by this file.
    string quotaBytesUsed = 47;
    // A link back to this file.
    string selfLink = 48;
    // Deprecated: use capabilities/canShare.
    bool shareable = 49;
    // Whether the file has been shared. Not populated for Team Drive files.
    bool shared = 50;
    // Time at which this file was shared with the user (formatted RFC 3339 timestamp).
    string sharedWithMeDate = 51;
    // User that shared the item with the current user, if available.
    User sharingUser = 52;
    // The list of spaces which contain the file. Supported values are 'drive', 'appDataFolder' and 'photos'.
    repeated string spaces = 53;
    // ID of the Team Drive the file resides in.
    string teamDriveId = 54;
    // A thumbnail for the file. This will only be used if Drive cannot generate a standard thumbnail.
    message Thumbnail {
            // The URL-safe Base64 encoded bytes of the thumbnail image. It should conform to RFC 4648 section 5.
    string image = 1;
            // The MIME type of the thumbnail.
    string mimeType = 2;
    }
    Thumbnail thumbnail = 55;
    // A short-lived link to the file's thumbnail. Typically lasts on the order of hours. Only populated when the requesting app can access the file's content.
    string thumbnailLink = 56;
    // The thumbnail version for use in thumbnail cache invalidation.
    string thumbnailVersion = 57;
    // The title of this file. Note that for immutable items such as the top level folders of Team Drives, My Drive root folder, and Application Data folder the title is constant.
    string title = 58;
    // The time that the item was trashed (formatted RFC 3339 timestamp). Only populated for Team Drive files.
    string trashedDate = 59;
    // If the file has been explicitly trashed, the user who trashed it. Only populated for Team Drive files.
    User trashingUser = 60;
    // The permissions for the authenticated user on this file.
    Permission userPermission = 61;
    // A monotonically increasing version number for the file. This reflects every change made to the file on the server, even those not visible to the requesting user.
    string version = 62;
    // Metadata about video media. This will only be present for video types.
    message VideoMediaMetadata {
            // The duration of the video in milliseconds.
    string durationMillis = 1;
            // The height of the video in pixels.
    int32 height = 2;
            // The width of the video in pixels.
    int32 width = 3;
    }
    VideoMediaMetadata videoMediaMetadata = 63;
    // A link for downloading the content of the file in a browser using cookie based authentication. In cases where the content is shared publicly, the content can be downloaded without any credentials.
    string webContentLink = 64;
    // A link only available on public folders for viewing their static web assets (HTML, CSS, JS, etc) via Google Drive's Website Hosting.
    string webViewLink = 65;
    // Whether writers can share the document with other users. Not populated for Team Drive files.
    bool writersCanShare = 66;
}

message FileList {
    // The ETag of the list.
    string etag = 1;
    // Whether the search process was incomplete. If true, then some search results may be missing, since all documents were not searched. This may occur when searching multiple Team Drives with the "default,allTeamDrives" corpora, but all corpora could not be searched. When this happens, it is suggested that clients narrow their query by choosing a different corpus such as "default" or "teamDrive".
    bool incompleteSearch = 2;
    // The list of files. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
    repeated File items = 3;
    // This is always drive#fileList.
    string kind = 4;
    // A link to the next page of files.
    string nextLink = 5;
    // The page token for the next page of files. This will be absent if the end of the files list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.
    string nextPageToken = 6;
    // A link back to this list.
    string selfLink = 7;
}

message GeneratedIds {
    // The IDs generated for the requesting user in the specified space.
    repeated string ids = 1;
    // This is always drive#generatedIds
    string kind = 2;
    // The type of file that can be created with these IDs.
    string space = 3;
}

message ParentList {
    // The ETag of the list.
    string etag = 1;
    // The list of parents.
    repeated ParentReference items = 2;
    // This is always drive#parentList.
    string kind = 3;
    // A link back to this list.
    string selfLink = 4;
}

message ParentReference {
    // The ID of the parent.
    string id = 1;
    // Whether or not the parent is the root folder.
    bool isRoot = 2;
    // This is always drive#parentReference.
    string kind = 3;
    // A link to the parent.
    string parentLink = 4;
    // A link back to this reference.
    string selfLink = 5;
}

message Permission {
    // Additional roles for this user. Only commenter is currently allowed, though more may be supported in the future.
    repeated string additionalRoles = 1;
    // Deprecated.
    string authKey = 2;
    // Whether the account associated with this permission has been deleted. This field only pertains to user and group permissions.
    bool deleted = 3;
    // The domain name of the entity this permission refers to. This is an output-only field which is present when the permission type is user, group or domain.
    string domain = 4;
    // The email address of the user or group this permission refers to. This is an output-only field which is present when the permission type is user or group.
    string emailAddress = 5;
    // The ETag of the permission.
    string etag = 6;
    // The time at which this permission will expire (RFC 3339 date-time). Expiration dates have the following restrictions:  
    // - They can only be set on user and group permissions 
    // - The date must be in the future 
    // - The date cannot be more than a year in the future 
    // - The date can only be set on drive.permissions.update requests
    string expirationDate = 7;
    // The ID of the user this permission refers to, and identical to the permissionId in the About and Files resources. When making a drive.permissions.insert request, exactly one of the id or value fields must be specified unless the permission type is anyone, in which case both id and value are ignored.
    string id = 8;
    // This is always drive#permission.
    string kind = 9;
    // The name for this permission.
    string name = 10;
    // A link to the profile photo, if available.
    string photoLink = 11;
    // The primary role for this user. While new values may be supported in the future, the following are currently allowed:  
    // - organizer 
    // - owner 
    // - reader 
    // - writer
    string role = 12;
    // A link back to this permission.
    string selfLink = 13;
    // Details of whether the permissions on this Team Drive item are inherited or directly on this item. This is an output-only field which is present only for Team Drive items.
    message TeamDrivePermissionDetail {
            // Additional roles for this user. Only commenter is currently possible, though more may be supported in the future.
    repeated string additionalRoles = 1;
            // Whether this permission is inherited. This field is always populated. This is an output-only field.
    bool inherited = 2;
            // The ID of the item from which this permission is inherited. This is an output-only field and is only populated for members of the Team Drive.
    string inheritedFrom = 3;
            // The primary role for this user. While new values may be added in the future, the following are currently possible:  
    // - organizer 
    // - reader 
    // - writer
    string role = 4;
            // The Team Drive permission type for this user. While new values may be added in future, the following are currently possible:  
    // - file 
    // - member
    string teamDrivePermissionType = 5;
    }
    repeated TeamDrivePermissionDetail teamDrivePermissionDetails = 14;
    // The account type. Allowed values are:  
    // - user 
    // - group 
    // - domain 
    // - anyone
    string type = 15;
    // The email address or domain name for the entity. This is used during inserts and is not populated in responses. When making a drive.permissions.insert request, exactly one of the id or value fields must be specified unless the permission type is anyone, in which case both id and value are ignored.
    string value = 16;
    // Whether the link is required for this permission.
    bool withLink = 17;
}

message PermissionId {
    // The permission ID.
    string id = 1;
    // This is always drive#permissionId.
    string kind = 2;
}

message PermissionList {
    // The ETag of the list.
    string etag = 1;
    // The list of permissions.
    repeated Permission items = 2;
    // This is always drive#permissionList.
    string kind = 3;
    // The page token for the next page of permissions. This field will be absent if the end of the permissions list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.
    string nextPageToken = 4;
    // A link back to this list.
    string selfLink = 5;
}

message Property {
    // ETag of the property.
    string etag = 1;
    // The key of this property.
    string key = 2;
    // This is always drive#property.
    string kind = 3;
    // The link back to this property.
    string selfLink = 4;
    // The value of this property.
    string value = 5;
    // The visibility of this property.
    string visibility = 6;
}

message PropertyList {
    // The ETag of the list.
    string etag = 1;
    // The list of properties.
    repeated Property items = 2;
    // This is always drive#propertyList.
    string kind = 3;
    // The link back to this list.
    string selfLink = 4;
}

message Revision {
    // Short term download URL for the file. This will only be populated on files with content stored in Drive.
    string downloadUrl = 1;
    // The ETag of the revision.
    string etag = 2;
    // Links for exporting Google Docs to specific formats.
    map<string, string> exportLinks = 3;
    // The size of the revision in bytes. This will only be populated on files with content stored in Drive.
    string fileSize = 4;
    // The ID of the revision.
    string id = 5;
    // This is always drive#revision.
    string kind = 6;
    // The last user to modify this revision.
    User lastModifyingUser = 7;
    // Name of the last user to modify this revision.
    string lastModifyingUserName = 8;
    // An MD5 checksum for the content of this revision. This will only be populated on files with content stored in Drive.
    string md5Checksum = 9;
    // The MIME type of the revision.
    string mimeType = 10;
    // Last time this revision was modified (formatted RFC 3339 timestamp).
    string modifiedDate = 11;
    // The original filename when this revision was created. This will only be populated on files with content stored in Drive.
    string originalFilename = 12;
    // Whether this revision is pinned to prevent automatic purging. This will only be populated and can only be modified on files with content stored in Drive which are not Google Docs. Revisions can also be pinned when they are created through the drive.files.insert/update/copy by using the pinned query parameter.
    bool pinned = 13;
    // Whether subsequent revisions will be automatically republished. This is only populated and can only be modified for Google Docs.
    bool publishAuto = 14;
    // Whether this revision is published. This is only populated and can only be modified for Google Docs.
    bool published = 15;
    // A link to the published revision.
    string publishedLink = 16;
    // Whether this revision is published outside the domain. This is only populated and can only be modified for Google Docs.
    bool publishedOutsideDomain = 17;
    // A link back to this revision.
    string selfLink = 18;
}

message RevisionList {
    // The ETag of the list.
    string etag = 1;
    // The list of revisions. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
    repeated Revision items = 2;
    // This is always drive#revisionList.
    string kind = 3;
    // The page token for the next page of revisions. This field will be absent if the end of the revisions list has been reached. If the token is rejected for any reason, it should be discarded and pagination should be restarted from the first page of results.
    string nextPageToken = 4;
    // A link back to this list.
    string selfLink = 5;
}

message StartPageToken {
    // Identifies what kind of resource this is. Value: the fixed string "drive#startPageToken".
    string kind = 1;
    // The starting page token for listing changes.
    string startPageToken = 2;
}

message TeamDrive {
    // An image file and cropping parameters from which a background image for this Team Drive is set. This is a write only field; it can only be set on drive.teamdrives.update requests that don't set themeId. When specified, all fields of the backgroundImageFile must be set.
    message BackgroundImageFile {
            // The ID of an image file in Drive to use for the background image.
    string id = 1;
            // The width of the cropped image in the closed range of 0 to 1. This value represents the width of the cropped image divided by the width of the entire image. The height is computed by applying a width to height aspect ratio of 80 to 9. The resulting image must be at least 1280 pixels wide and 144 pixels high.
    float width = 2;
            // The X coordinate of the upper left corner of the cropping area in the background image. This is a value in the closed range of 0 to 1. This value represents the horizontal distance from the left side of the entire image to the left side of the cropping area divided by the width of the entire image.
    float xCoordinate = 3;
            // The Y coordinate of the upper left corner of the cropping area in the background image. This is a value in the closed range of 0 to 1. This value represents the vertical distance from the top side of the entire image to the top side of the cropping area divided by the height of the entire image.
    float yCoordinate = 4;
    }
    BackgroundImageFile backgroundImageFile = 1;
    // A short-lived link to this Team Drive's background image.
    string backgroundImageLink = 2;
    // Capabilities the current user has on this Team Drive.
    message Capabilities {
            // Whether the current user can add children to folders in this Team Drive.
    bool canAddChildren = 1;
            // Whether the current user can change the background of this Team Drive.
    bool canChangeTeamDriveBackground = 2;
            // Whether the current user can comment on files in this Team Drive.
    bool canComment = 3;
            // Whether the current user can copy files in this Team Drive.
    bool canCopy = 4;
            // Whether the current user can delete this Team Drive. Attempting to delete the Team Drive may still fail if there are untrashed items inside the Team Drive.
    bool canDeleteTeamDrive = 5;
            // Whether the current user can download files in this Team Drive.
    bool canDownload = 6;
            // Whether the current user can edit files in this Team Drive
    bool canEdit = 7;
            // Whether the current user can list the children of folders in this Team Drive.
    bool canListChildren = 8;
            // Whether the current user can add members to this Team Drive or remove them or change their role.
    bool canManageMembers = 9;
            // Whether the current user can read the revisions resource of files in this Team Drive.
    bool canReadRevisions = 10;
            // Whether the current user can remove children from folders in this Team Drive.
    bool canRemoveChildren = 11;
            // Whether the current user can rename files or folders in this Team Drive.
    bool canRename = 12;
            // Whether the current user can rename this Team Drive.
    bool canRenameTeamDrive = 13;
            // Whether the current user can share files or folders in this Team Drive.
    bool canShare = 14;
    }
    Capabilities capabilities = 3;
    // The color of this Team Drive as an RGB hex string. It can only be set on a drive.teamdrives.update request that does not set themeId.
    string colorRgb = 4;
    // The ID of this Team Drive which is also the ID of the top level folder for this Team Drive.
    string id = 5;
    // This is always drive#teamDrive
    string kind = 6;
    // The name of this Team Drive.
    string name = 7;
    // The ID of the theme from which the background image and color will be set. The set of possible teamDriveThemes can be retrieved from a drive.about.get response. When not specified on a drive.teamdrives.insert request, a random theme is chosen from which the background image and color are set. This is a write-only field; it can only be set on requests that don't set colorRgb or backgroundImageFile.
    string themeId = 8;
}

message TeamDriveList {
    // The list of Team Drives.
    repeated TeamDrive items = 1;
    // This is always drive#teamDriveList
    string kind = 2;
    // The page token for the next page of Team Drives.
    string nextPageToken = 3;
}

message User {
    // A plain text displayable name for this user.
    string displayName = 1;
    // The email address of the user.
    string emailAddress = 2;
    // Whether this user is the same as the authenticated user for whom the request was made.
    bool isAuthenticatedUser = 3;
    // This is always drive#user.
    string kind = 4;
    // The user's ID as visible in the permissions collection.
    string permissionId = 5;
    // The user's profile picture.
    message Picture {
            // A URL that points to a profile picture of this user.
    string url = 1;
    }
    Picture picture = 6;
}

enum Alt {
    JSON = 0;
}

service DriveService {
    // Gets the information about the current user along with Drive API settings
    rpc GetAbout(GetAboutRequest) returns (About) {
      option (google.api.http) = {
        get: "/drive/v2/about"
      };
    }
    // Lists a user's installed apps.
    rpc GetApps(GetAppsRequest) returns (AppList) {
      option (google.api.http) = {
        get: "/drive/v2/apps"
      };
    }
    // Gets a specific app.
    rpc GetAppsAppId(GetAppsAppIdRequest) returns (App) {
      option (google.api.http) = {
        get: "/drive/v2/apps/{appId}"
      };
    }
    // Lists the changes for a user or Team Drive.
    rpc GetChanges(GetChangesRequest) returns (ChangeList) {
      option (google.api.http) = {
        get: "/drive/v2/changes"
      };
    }
    // Gets the starting pageToken for listing future changes.
    rpc GetChangesStartPageToken(GetChangesStartPageTokenRequest) returns (StartPageToken) {
      option (google.api.http) = {
        get: "/drive/v2/changes/startPageToken"
      };
    }
    // Subscribe to changes for a user.
    rpc PostChangesWatch(PostChangesWatchRequest) returns (Channel) {
      option (google.api.http) = {
        post: "/drive/v2/changes/watch"
        body: "resource"
      };
    }
    // Gets a specific change.
    rpc GetChangesChangeId(GetChangesChangeIdRequest) returns (Change) {
      option (google.api.http) = {
        get: "/drive/v2/changes/{changeId}"
      };
    }
    // Stop watching resources through this channel
    rpc PostChannelsStop(PostChannelsStopRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/drive/v2/channels/stop"
        body: "resource"
      };
    }
    // Lists the user's files.
    rpc GetFiles(GetFilesRequest) returns (FileList) {
      option (google.api.http) = {
        get: "/drive/v2/files"
      };
    }
    // Insert a new file.
    rpc PostFiles(PostFilesRequest) returns (File) {
      option (google.api.http) = {
        post: "/drive/v2/files"
        body: "body"
      };
    }
    // Generates a set of file IDs which can be provided in insert requests.
    rpc GetFilesGenerateIds(GetFilesGenerateIdsRequest) returns (GeneratedIds) {
      option (google.api.http) = {
        get: "/drive/v2/files/generateIds"
      };
    }
    // Permanently deletes all of the user's trashed files.
    rpc DeleteFilesTrash(DeleteFilesTrashRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/drive/v2/files/trash"
      };
    }
    // Gets a file's metadata by ID.
    rpc GetFilesFileId(GetFilesFileIdRequest) returns (File) {
      option (google.api.http) = {
        get: "/drive/v2/files/{fileId}"
      };
    }
    // Updates file metadata and/or content.
    rpc PutFilesFileId(PutFilesFileIdRequest) returns (File) {
      option (google.api.http) = {
        put: "/drive/v2/files/{fileId}"
        body: "body"
      };
    }
    // Permanently deletes a file by ID. Skips the trash. The currently authenticated user must own the file or be an organizer on the parent for Team Drive files.
    rpc DeleteFilesFileId(DeleteFilesFileIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/drive/v2/files/{fileId}"
      };
    }
    // Lists a file's comments.
    rpc GetFilesFileIdComments(GetFilesFileIdCommentsRequest) returns (CommentList) {
      option (google.api.http) = {
        get: "/drive/v2/files/{fileId}/comments"
      };
    }
    // Creates a new comment on the given file.
    rpc PostFilesFileIdComments(PostFilesFileIdCommentsRequest) returns (Comment) {
      option (google.api.http) = {
        post: "/drive/v2/files/{fileId}/comments"
        body: "body"
      };
    }
    // Gets a comment by ID.
    rpc GetFilesFileIdCommentsCommentId(GetFilesFileIdCommentsCommentIdRequest) returns (Comment) {
      option (google.api.http) = {
        get: "/drive/v2/files/{fileId}/comments/{commentId}"
      };
    }
    // Updates an existing comment.
    rpc PutFilesFileIdCommentsCommentId(PutFilesFileIdCommentsCommentIdRequest) returns (Comment) {
      option (google.api.http) = {
        put: "/drive/v2/files/{fileId}/comments/{commentId}"
        body: "body"
      };
    }
    // Deletes a comment.
    rpc DeleteFilesFileIdCommentsCommentId(DeleteFilesFileIdCommentsCommentIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/drive/v2/files/{fileId}/comments/{commentId}"
      };
    }
    // Lists all of the replies to a comment.
    rpc GetFilesFileIdCommentsCommentIdReplies(GetFilesFileIdCommentsCommentIdRepliesRequest) returns (CommentReplyList) {
      option (google.api.http) = {
        get: "/drive/v2/files/{fileId}/comments/{commentId}/replies"
      };
    }
    // Creates a new reply to the given comment.
    rpc PostFilesFileIdCommentsCommentIdReplies(PostFilesFileIdCommentsCommentIdRepliesRequest) returns (CommentReply) {
      option (google.api.http) = {
        post: "/drive/v2/files/{fileId}/comments/{commentId}/replies"
        body: "body"
      };
    }
    // Gets a reply.
    rpc GetFilesFileIdCommentsCommentIdRepliesReplyId(GetFilesFileIdCommentsCommentIdRepliesReplyIdRequest) returns (CommentReply) {
      option (google.api.http) = {
        get: "/drive/v2/files/{fileId}/comments/{commentId}/replies/{replyId}"
      };
    }
    // Updates an existing reply.
    rpc PutFilesFileIdCommentsCommentIdRepliesReplyId(PutFilesFileIdCommentsCommentIdRepliesReplyIdRequest) returns (CommentReply) {
      option (google.api.http) = {
        put: "/drive/v2/files/{fileId}/comments/{commentId}/replies/{replyId}"
        body: "body"
      };
    }
    // Deletes a reply.
    rpc DeleteFilesFileIdCommentsCommentIdRepliesReplyId(DeleteFilesFileIdCommentsCommentIdRepliesReplyIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/drive/v2/files/{fileId}/comments/{commentId}/replies/{replyId}"
      };
    }
    // Creates a copy of the specified file.
    rpc PostFilesFileIdCopy(PostFilesFileIdCopyRequest) returns (File) {
      option (google.api.http) = {
        post: "/drive/v2/files/{fileId}/copy"
        body: "body"
      };
    }
    // Exports a Google Doc to the requested MIME type and returns the exported content. Please note that the exported content is limited to 10MB.
    rpc GetFilesFileIdExport(GetFilesFileIdExportRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/drive/v2/files/{fileId}/export"
      };
    }
    // Lists a file's parents.
    rpc GetFilesFileIdParents(GetFilesFileIdParentsRequest) returns (ParentList) {
      option (google.api.http) = {
        get: "/drive/v2/files/{fileId}/parents"
      };
    }
    // Adds a parent folder for a file.
    rpc PostFilesFileIdParents(PostFilesFileIdParentsRequest) returns (ParentReference) {
      option (google.api.http) = {
        post: "/drive/v2/files/{fileId}/parents"
        body: "body"
      };
    }
    // Gets a specific parent reference.
    rpc GetFilesFileIdParentsParentId(GetFilesFileIdParentsParentIdRequest) returns (ParentReference) {
      option (google.api.http) = {
        get: "/drive/v2/files/{fileId}/parents/{parentId}"
      };
    }
    // Removes a parent from a file.
    rpc DeleteFilesFileIdParentsParentId(DeleteFilesFileIdParentsParentIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/drive/v2/files/{fileId}/parents/{parentId}"
      };
    }
    // Lists a file's or Team Drive's permissions.
    rpc GetFilesFileIdPermissions(GetFilesFileIdPermissionsRequest) returns (PermissionList) {
      option (google.api.http) = {
        get: "/drive/v2/files/{fileId}/permissions"
      };
    }
    // Inserts a permission for a file or Team Drive.
    rpc PostFilesFileIdPermissions(PostFilesFileIdPermissionsRequest) returns (Permission) {
      option (google.api.http) = {
        post: "/drive/v2/files/{fileId}/permissions"
        body: "body"
      };
    }
    // Gets a permission by ID.
    rpc GetFilesFileIdPermissionsPermissionId(GetFilesFileIdPermissionsPermissionIdRequest) returns (Permission) {
      option (google.api.http) = {
        get: "/drive/v2/files/{fileId}/permissions/{permissionId}"
      };
    }
    // Updates a permission.
    rpc PutFilesFileIdPermissionsPermissionId(PutFilesFileIdPermissionsPermissionIdRequest) returns (Permission) {
      option (google.api.http) = {
        put: "/drive/v2/files/{fileId}/permissions/{permissionId}"
        body: "body"
      };
    }
    // Deletes a permission from a file or Team Drive.
    rpc DeleteFilesFileIdPermissionsPermissionId(DeleteFilesFileIdPermissionsPermissionIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/drive/v2/files/{fileId}/permissions/{permissionId}"
      };
    }
    // Lists a file's properties.
    rpc GetFilesFileIdProperties(GetFilesFileIdPropertiesRequest) returns (PropertyList) {
      option (google.api.http) = {
        get: "/drive/v2/files/{fileId}/properties"
      };
    }
    // Adds a property to a file, or updates it if it already exists.
    rpc PostFilesFileIdProperties(PostFilesFileIdPropertiesRequest) returns (Property) {
      option (google.api.http) = {
        post: "/drive/v2/files/{fileId}/properties"
        body: "body"
      };
    }
    // Gets a property by its key.
    rpc GetFilesFileIdPropertiesPropertyKey(GetFilesFileIdPropertiesPropertyKeyRequest) returns (Property) {
      option (google.api.http) = {
        get: "/drive/v2/files/{fileId}/properties/{propertyKey}"
      };
    }
    // Updates a property, or adds it if it doesn't exist.
    rpc PutFilesFileIdPropertiesPropertyKey(PutFilesFileIdPropertiesPropertyKeyRequest) returns (Property) {
      option (google.api.http) = {
        put: "/drive/v2/files/{fileId}/properties/{propertyKey}"
        body: "body"
      };
    }
    // Deletes a property.
    rpc DeleteFilesFileIdPropertiesPropertyKey(DeleteFilesFileIdPropertiesPropertyKeyRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/drive/v2/files/{fileId}/properties/{propertyKey}"
      };
    }
    // Exports the contents of the Realtime API data model associated with this file as JSON.
    rpc GetFilesFileIdRealtime(GetFilesFileIdRealtimeRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/drive/v2/files/{fileId}/realtime"
      };
    }
    // Overwrites the Realtime API data model associated with this file with the provided JSON data model.
    rpc PutFilesFileIdRealtime(PutFilesFileIdRealtimeRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/drive/v2/files/{fileId}/realtime"
      };
    }
    // Lists a file's revisions.
    rpc GetFilesFileIdRevisions(GetFilesFileIdRevisionsRequest) returns (RevisionList) {
      option (google.api.http) = {
        get: "/drive/v2/files/{fileId}/revisions"
      };
    }
    // Gets a specific revision.
    rpc GetFilesFileIdRevisionsRevisionId(GetFilesFileIdRevisionsRevisionIdRequest) returns (Revision) {
      option (google.api.http) = {
        get: "/drive/v2/files/{fileId}/revisions/{revisionId}"
      };
    }
    // Updates a revision.
    rpc PutFilesFileIdRevisionsRevisionId(PutFilesFileIdRevisionsRevisionIdRequest) returns (Revision) {
      option (google.api.http) = {
        put: "/drive/v2/files/{fileId}/revisions/{revisionId}"
        body: "body"
      };
    }
    // Removes a revision.
    rpc DeleteFilesFileIdRevisionsRevisionId(DeleteFilesFileIdRevisionsRevisionIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/drive/v2/files/{fileId}/revisions/{revisionId}"
      };
    }
    // Set the file's updated time to the current server time.
    rpc PostFilesFileIdTouch(PostFilesFileIdTouchRequest) returns (File) {
      option (google.api.http) = {
        post: "/drive/v2/files/{fileId}/touch"
      };
    }
    // Moves a file to the trash. The currently authenticated user must own the file or be an organizer on the parent for Team Drive files.
    rpc PostFilesFileIdTrash(PostFilesFileIdTrashRequest) returns (File) {
      option (google.api.http) = {
        post: "/drive/v2/files/{fileId}/trash"
      };
    }
    // Restores a file from the trash.
    rpc PostFilesFileIdUntrash(PostFilesFileIdUntrashRequest) returns (File) {
      option (google.api.http) = {
        post: "/drive/v2/files/{fileId}/untrash"
      };
    }
    // Subscribe to changes on a file
    rpc PostFilesFileIdWatch(PostFilesFileIdWatchRequest) returns (Channel) {
      option (google.api.http) = {
        post: "/drive/v2/files/{fileId}/watch"
        body: "resource"
      };
    }
    // Lists a folder's children.
    rpc GetFilesFolderIdChildren(GetFilesFolderIdChildrenRequest) returns (ChildList) {
      option (google.api.http) = {
        get: "/drive/v2/files/{folderId}/children"
      };
    }
    // Inserts a file into a folder.
    rpc PostFilesFolderIdChildren(PostFilesFolderIdChildrenRequest) returns (ChildReference) {
      option (google.api.http) = {
        post: "/drive/v2/files/{folderId}/children"
        body: "body"
      };
    }
    // Gets a specific child reference.
    rpc GetFilesFolderIdChildrenChildId(GetFilesFolderIdChildrenChildIdRequest) returns (ChildReference) {
      option (google.api.http) = {
        get: "/drive/v2/files/{folderId}/children/{childId}"
      };
    }
    // Removes a child from a folder.
    rpc DeleteFilesFolderIdChildrenChildId(DeleteFilesFolderIdChildrenChildIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/drive/v2/files/{folderId}/children/{childId}"
      };
    }
    // Returns the permission ID for an email address.
    rpc GetPermissionIdsEmail(GetPermissionIdsEmailRequest) returns (PermissionId) {
      option (google.api.http) = {
        get: "/drive/v2/permissionIds/{email}"
      };
    }
    // Lists the user's Team Drives.
    rpc GetTeamdrives(GetTeamdrivesRequest) returns (TeamDriveList) {
      option (google.api.http) = {
        get: "/drive/v2/teamdrives"
      };
    }
    // Creates a new Team Drive.
    rpc PostTeamdrives(PostTeamdrivesRequest) returns (TeamDrive) {
      option (google.api.http) = {
        post: "/drive/v2/teamdrives"
        body: "body"
      };
    }
    // Gets a Team Drive's metadata by ID.
    rpc GetTeamdrivesTeamDriveId(GetTeamdrivesTeamDriveIdRequest) returns (TeamDrive) {
      option (google.api.http) = {
        get: "/drive/v2/teamdrives/{teamDriveId}"
      };
    }
    // Updates a Team Drive's metadata
    rpc PutTeamdrivesTeamDriveId(PutTeamdrivesTeamDriveIdRequest) returns (TeamDrive) {
      option (google.api.http) = {
        put: "/drive/v2/teamdrives/{teamDriveId}"
        body: "body"
      };
    }
    // Permanently deletes a Team Drive for which the user is an organizer. The Team Drive cannot contain any untrashed items.
    rpc DeleteTeamdrivesTeamDriveId(DeleteTeamdrivesTeamDriveIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/drive/v2/teamdrives/{teamDriveId}"
      };
    }
}

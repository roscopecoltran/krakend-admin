syntax = "proto3";

import "google/protobuf/wrappers.proto";

import "google/api/annotations.proto";

package stackdrivermonitoring;

message GetV3NameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    // The group to retrieve. The format is "projects/{project_id_or_number}/groups/{group_id}".
    string name = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PutV3NameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    Group body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    // Output only. The name of this group. The format is "projects/{project_id_or_number}/groups/{group_id}". When creating a group, this field is ignored and a new name is created consisting of the project specified in the call to CreateGroup and a unique {group_id} that is generated automatically.
    string name = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
    // If true, validate this request but do not update the existing group.
    bool validateOnly = 16;
}

message DeleteV3NameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    // The group to delete. The format is "projects/{project_id_or_number}/groups/{group_id}".
    string name = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PostV3NameCollectdTimeSeriesRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    CreateCollectdTimeSeriesRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    // The project in which to create the time series. The format is "projects/PROJECT_ID_OR_NUMBER".
    string name = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV3NameGroupsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    // A group name: "projects/{project_id_or_number}/groups/{group_id}". Returns groups that are ancestors of the specified group. The groups are returned in order, starting with the immediate parent and ending with the most distant ancestor. If the specified group has no immediate parent, the results are empty.
    string ancestorsOfGroup = 4;
    string bearer_token = 5;
    string callback = 6;
    // A group name: "projects/{project_id_or_number}/groups/{group_id}". Returns groups whose parentName field contains the group name. If no groups have this parent, the results are empty.
    string childrenOfGroup = 7;
    // A group name: "projects/{project_id_or_number}/groups/{group_id}". Returns the descendants of the specified group. This is a superset of the results returned by the childrenOfGroup filter, and includes children-of-children, and so forth.
    string descendantsOfGroup = 8;
    string fields = 9;
    string key = 10;
    // The project whose groups are to be listed. The format is "projects/{project_id_or_number}".
    string name = 11;
    string oauth_token = 12;
    // A positive number that is the maximum number of results to return.
    int32 pageSize = 13;
    // If this field is not empty then it must contain the nextPageToken value returned by a previous call to this method. Using this field causes the method to return additional results from the previous method call.
    string pageToken = 14;
    boolean pp = 15;
    boolean prettyPrint = 16;
    string quotaUser = 17;
    string uploadType = 18;
    string upload_protocol = 19;
}

message PostV3NameGroupsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    Group body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    // The project in which to create the group. The format is "projects/{project_id_or_number}".
    string name = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
    // If true, validate this request but do not create the group.
    bool validateOnly = 16;
}

message GetV3NameMembersRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // An optional list filter describing the members to be returned. The filter may reference the type, labels, and metadata of monitored resources that comprise the group. For example, to return only resources representing Compute Engine VM instances, use this filter:
    // resource.type = "gce_instance"
    string filter = 7;
    // Required. The end of the time interval.
    string interval.endTime = 8;
    // Optional. The beginning of the time interval. The default value for the start time is the end time. The start time must not be later than the end time.
    string interval.startTime = 9;
    string key = 10;
    // The group whose members are listed. The format is "projects/{project_id_or_number}/groups/{group_id}".
    string name = 11;
    string oauth_token = 12;
    // A positive number that is the maximum number of results to return.
    int32 pageSize = 13;
    // If this field is not empty then it must contain the nextPageToken value returned by a previous call to this method. Using this field causes the method to return additional results from the previous method call.
    string pageToken = 14;
    boolean pp = 15;
    boolean prettyPrint = 16;
    string quotaUser = 17;
    string uploadType = 18;
    string upload_protocol = 19;
}

message GetV3NameMetricDescriptorsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // If this field is empty, all custom and system-defined metric descriptors are returned. Otherwise, the filter specifies which metric descriptors are to be returned. For example, the following filter matches all custom metrics:
    // metric.type = starts_with("custom.googleapis.com/")
    string filter = 7;
    string key = 8;
    // The project on which to execute the request. The format is "projects/{project_id_or_number}".
    string name = 9;
    string oauth_token = 10;
    // A positive number that is the maximum number of results to return.
    int32 pageSize = 11;
    // If this field is not empty then it must contain the nextPageToken value returned by a previous call to this method. Using this field causes the method to return additional results from the previous method call.
    string pageToken = 12;
    boolean pp = 13;
    boolean prettyPrint = 14;
    string quotaUser = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

message PostV3NameMetricDescriptorsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    MetricDescriptor body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    // The project on which to execute the request. The format is "projects/{project_id_or_number}".
    string name = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV3NameMonitoredResourceDescriptorsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // An optional filter describing the descriptors to be returned. The filter can reference the descriptor's type and labels. For example, the following filter returns only Google Compute Engine descriptors that have an id label:
    // resource.type = starts_with("gce_") AND resource.label:id
    string filter = 7;
    string key = 8;
    // The project on which to execute the request. The format is "projects/{project_id_or_number}".
    string name = 9;
    string oauth_token = 10;
    // A positive number that is the maximum number of results to return.
    int32 pageSize = 11;
    // If this field is not empty then it must contain the nextPageToken value returned by a previous call to this method. Using this field causes the method to return additional results from the previous method call.
    string pageToken = 12;
    boolean pp = 13;
    boolean prettyPrint = 14;
    string quotaUser = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

message GetV3NameTimeSeriesRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // The alignment period for per-time series alignment. If present, alignmentPeriod must be at least 60 seconds. After per-time series alignment, each time series will contain data points only on the period boundaries. If perSeriesAligner is not specified or equals ALIGN_NONE, then this field is ignored. If perSeriesAligner is specified and does not equal ALIGN_NONE, then this field must be defined; otherwise an error is returned.
    string aggregation.alignmentPeriod = 3;
    // The approach to be used to combine time series. Not all reducer functions may be applied to all time series, depending on the metric type and the value type of the original time series. Reduction may change the metric type of value type of the time series.Time series data must be aligned in order to perform cross-time series reduction. If crossSeriesReducer is specified, then perSeriesAligner must be specified and not equal ALIGN_NONE and alignmentPeriod must be specified; otherwise, an error is returned.
    enum GetV3NameTimeSeriesRequest_Aggregation.CrossSeriesReducer {
        GETV3NAMETIMESERIESREQUEST_AGGREGATIONCROSSSERIESREDUCER_REDUCE_NONE = 0;
        GETV3NAMETIMESERIESREQUEST_AGGREGATIONCROSSSERIESREDUCER_REDUCE_MEAN = 1;
        GETV3NAMETIMESERIESREQUEST_AGGREGATIONCROSSSERIESREDUCER_REDUCE_MIN = 2;
        GETV3NAMETIMESERIESREQUEST_AGGREGATIONCROSSSERIESREDUCER_REDUCE_MAX = 3;
        GETV3NAMETIMESERIESREQUEST_AGGREGATIONCROSSSERIESREDUCER_REDUCE_SUM = 4;
        GETV3NAMETIMESERIESREQUEST_AGGREGATIONCROSSSERIESREDUCER_REDUCE_STDDEV = 5;
        GETV3NAMETIMESERIESREQUEST_AGGREGATIONCROSSSERIESREDUCER_REDUCE_COUNT = 6;
        GETV3NAMETIMESERIESREQUEST_AGGREGATIONCROSSSERIESREDUCER_REDUCE_COUNT_TRUE = 7;
        GETV3NAMETIMESERIESREQUEST_AGGREGATIONCROSSSERIESREDUCER_REDUCE_FRACTION_TRUE = 8;
        GETV3NAMETIMESERIESREQUEST_AGGREGATIONCROSSSERIESREDUCER_REDUCE_PERCENTILE_99 = 9;
        GETV3NAMETIMESERIESREQUEST_AGGREGATIONCROSSSERIESREDUCER_REDUCE_PERCENTILE_95 = 10;
        GETV3NAMETIMESERIESREQUEST_AGGREGATIONCROSSSERIESREDUCER_REDUCE_PERCENTILE_50 = 11;
        GETV3NAMETIMESERIESREQUEST_AGGREGATIONCROSSSERIESREDUCER_REDUCE_PERCENTILE_05 = 12;
    }
    GetV3NameTimeSeriesRequest_Aggregation.CrossSeriesReducer aggregation.crossSeriesReducer = 4;
    // The set of fields to preserve when crossSeriesReducer is specified. The groupByFields determine how the time series are partitioned into subsets prior to applying the aggregation function. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The crossSeriesReducer is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains resource.type. Fields not specified in groupByFields are aggregated away. If groupByFields is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If crossSeriesReducer is not defined, this field is ignored.
    repeated string aggregation.groupByFields = 5;
    // The approach to be used to align individual time series. Not all alignment functions may be applied to all time series, depending on the metric type and value type of the original time series. Alignment may change the metric type or the value type of the time series.Time series data must be aligned in order to perform cross-time series reduction. If crossSeriesReducer is specified, then perSeriesAligner must be specified and not equal ALIGN_NONE and alignmentPeriod must be specified; otherwise, an error is returned.
    enum GetV3NameTimeSeriesRequest_Aggregation.PerSeriesAligner {
        GETV3NAMETIMESERIESREQUEST_AGGREGATIONPERSERIESALIGNER_ALIGN_NONE = 0;
        GETV3NAMETIMESERIESREQUEST_AGGREGATIONPERSERIESALIGNER_ALIGN_DELTA = 1;
        GETV3NAMETIMESERIESREQUEST_AGGREGATIONPERSERIESALIGNER_ALIGN_RATE = 2;
        GETV3NAMETIMESERIESREQUEST_AGGREGATIONPERSERIESALIGNER_ALIGN_INTERPOLATE = 3;
        GETV3NAMETIMESERIESREQUEST_AGGREGATIONPERSERIESALIGNER_ALIGN_NEXT_OLDER = 4;
        GETV3NAMETIMESERIESREQUEST_AGGREGATIONPERSERIESALIGNER_ALIGN_MIN = 5;
        GETV3NAMETIMESERIESREQUEST_AGGREGATIONPERSERIESALIGNER_ALIGN_MAX = 6;
        GETV3NAMETIMESERIESREQUEST_AGGREGATIONPERSERIESALIGNER_ALIGN_MEAN = 7;
        GETV3NAMETIMESERIESREQUEST_AGGREGATIONPERSERIESALIGNER_ALIGN_COUNT = 8;
        GETV3NAMETIMESERIESREQUEST_AGGREGATIONPERSERIESALIGNER_ALIGN_SUM = 9;
        GETV3NAMETIMESERIESREQUEST_AGGREGATIONPERSERIESALIGNER_ALIGN_STDDEV = 10;
        GETV3NAMETIMESERIESREQUEST_AGGREGATIONPERSERIESALIGNER_ALIGN_COUNT_TRUE = 11;
        GETV3NAMETIMESERIESREQUEST_AGGREGATIONPERSERIESALIGNER_ALIGN_FRACTION_TRUE = 12;
        GETV3NAMETIMESERIESREQUEST_AGGREGATIONPERSERIESALIGNER_ALIGN_PERCENTILE_99 = 13;
        GETV3NAMETIMESERIESREQUEST_AGGREGATIONPERSERIESALIGNER_ALIGN_PERCENTILE_95 = 14;
        GETV3NAMETIMESERIESREQUEST_AGGREGATIONPERSERIESALIGNER_ALIGN_PERCENTILE_50 = 15;
        GETV3NAMETIMESERIESREQUEST_AGGREGATIONPERSERIESALIGNER_ALIGN_PERCENTILE_05 = 16;
    }
    GetV3NameTimeSeriesRequest_Aggregation.PerSeriesAligner aggregation.perSeriesAligner = 6;
    alt alt = 7;
    string bearer_token = 8;
    string callback = 9;
    string fields = 10;
    // A monitoring filter that specifies which time series should be returned. The filter must specify a single metric type, and can additionally specify metric labels and other information. For example:
    // metric.type = "compute.googleapis.com/instance/cpu/usage_time" AND
    //     metric.label.instance_name = "my-instance-name"
    string filter = 11;
    // Required. The end of the time interval.
    string interval.endTime = 12;
    // Optional. The beginning of the time interval. The default value for the start time is the end time. The start time must not be later than the end time.
    string interval.startTime = 13;
    string key = 14;
    // The project on which to execute the request. The format is "projects/{project_id_or_number}".
    string name = 15;
    string oauth_token = 16;
    // Specifies the order in which the points of the time series should be returned. By default, results are not ordered. Currently, this field must be left blank.
    string orderBy = 17;
    // A positive number that is the maximum number of results to return. When view field sets to FULL, it limits the number of Points server will return; if view field is HEADERS, it limits the number of TimeSeries server will return.
    int32 pageSize = 18;
    // If this field is not empty then it must contain the nextPageToken value returned by a previous call to this method. Using this field causes the method to return additional results from the previous method call.
    string pageToken = 19;
    boolean pp = 20;
    boolean prettyPrint = 21;
    string quotaUser = 22;
    string uploadType = 23;
    string upload_protocol = 24;
    // Specifies which information is returned about the time series.
    enum GetV3NameTimeSeriesRequest_View {
        GETV3NAMETIMESERIESREQUEST_VIEW_FULL = 0;
        GETV3NAMETIMESERIESREQUEST_VIEW_HEADERS = 1;
    }
    GetV3NameTimeSeriesRequest_View view = 25;
}

message PostV3NameTimeSeriesRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    CreateTimeSeriesRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    // The project on which to execute the request. The format is "projects/{project_id_or_number}".
    string name = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

enum $.Xgafv {
    $XGAFV_1 = 0;
    $XGAFV_2 = 1;
}

message BucketOptions {
    // The explicit buckets.
    Explicit explicitBuckets = 1;
    // The exponential buckets.
    Exponential exponentialBuckets = 2;
    // The linear bucket.
    Linear linearBuckets = 3;
}

message CollectdPayload {
    // The end time of the interval.
    string endTime = 1;
    // The measurement metadata. Example: "process_id" -> 12345
    map<string, TypedValue> metadata = 2;
    // The name of the plugin. Example: "disk".
    string plugin = 3;
    // The instance name of the plugin Example: "hdcl".
    string pluginInstance = 4;
    // The start time of the interval.
    string startTime = 5;
    // The measurement type. Example: "memory".
    string type = 6;
    // The measurement type instance. Example: "used".
    string typeInstance = 7;
    // The measured values during this time interval. Each value must have a different dataSourceName.
    repeated CollectdValue values = 8;
}

message CollectdPayloadError {
    // Records the error status for the payload. If this field is present, the partial errors for nested values won't be populated.
    Status error = 1;
    // The zero-based index in CreateCollectdTimeSeriesRequest.collectd_payloads.
    int32 index = 2;
    // Records the error status for values that were not written due to an error.Failed payloads for which nothing is written will not include partial value errors.
    repeated CollectdValueError valueErrors = 3;
}

message CollectdValue {
    // The data source for the collectd value. For example there are two data sources for network measurements: "rx" and "tx".
    string dataSourceName = 1;
    // The type of measurement.
    enum CollectdValue_DataSourceType {
        COLLECTDVALUE_DATASOURCETYPE_UNSPECIFIED_DATA_SOURCE_TYPE = 0;
        COLLECTDVALUE_DATASOURCETYPE_GAUGE = 1;
        COLLECTDVALUE_DATASOURCETYPE_COUNTER = 2;
        COLLECTDVALUE_DATASOURCETYPE_DERIVE = 3;
        COLLECTDVALUE_DATASOURCETYPE_ABSOLUTE = 4;
    }
    CollectdValue_DataSourceType dataSourceType = 2;
    // The measurement value.
    TypedValue value = 3;
}

message CollectdValueError {
    // Records the error status for the value.
    Status error = 1;
    // The zero-based index in CollectdPayload.values within the parent CreateCollectdTimeSeriesRequest.collectd_payloads.
    int32 index = 2;
}

message CreateCollectdTimeSeriesRequest {
    // The collectd payloads representing the time series data. You must not include more than a single point for each time series, so no two payloads can have the same values for all of the fields plugin, plugin_instance, type, and type_instance.
    repeated CollectdPayload collectdPayloads = 1;
    // The version of collectd that collected the data. Example: "5.3.0-192.el6".
    string collectdVersion = 2;
    // The monitored resource associated with the time series.
    MonitoredResource resource = 3;
}

message CreateCollectdTimeSeriesResponse {
    // Records the error status for points that were not written due to an error.Failed requests for which nothing is written will return an error response instead.
    repeated CollectdPayloadError payloadErrors = 1;
}

message CreateTimeSeriesRequest {
    // The new data to be added to a list of time series. Adds at most one data point to each of several time series. The new data point must be more recent than any other point in its time series. Each TimeSeries value must fully specify a unique time series by supplying all label values for the metric and the monitored resource.
    repeated TimeSeries timeSeries = 1;
}

message Distribution {
    // Required in the Stackdriver Monitoring API v3. The values for each bucket specified in bucket_options. The sum of the values in bucketCounts must equal the value in the count field of the Distribution object. The order of the bucket counts follows the numbering schemes described for the three bucket types. The underflow bucket has number 0; the finite buckets, if any, have numbers 1 through N-2; and the overflow bucket has number N-1. The size of bucket_counts must not be greater than N. If the size is less than N, then the remaining buckets are assigned values of zero.
    repeated string bucketCounts = 1;
    // Required in the Stackdriver Monitoring API v3. Defines the histogram bucket boundaries.
    BucketOptions bucketOptions = 2;
    // The number of values in the population. Must be non-negative. This value must equal the sum of the values in bucket_counts if a histogram is provided.
    string count = 3;
    // The arithmetic mean of the values in the population. If count is zero then this field must be zero.
    double mean = 4;
    // If specified, contains the range of the population values. The field must not be present if the count is zero. This field is presently ignored by the Stackdriver Monitoring API v3.
    Range range = 5;
    // The sum of squared deviations from the mean of the values in the population. For values x_i this is:
    // Sum[i=1..n]((x_i - mean)^2)
    // Knuth, "The Art of Computer Programming", Vol. 2, page 323, 3rd edition describes Welford's method for accumulating this sum in one pass.If count is zero then this field must be zero.
    double sumOfSquaredDeviation = 6;
}

message Empty {
}

message Explicit {
    // The values must be monotonically increasing.
    repeated double bounds = 1;
}

message Exponential {
    // Must be greater than 1.
    double growthFactor = 1;
    // Must be greater than 0.
    int32 numFiniteBuckets = 2;
    // Must be greater than 0.
    double scale = 3;
}

message Field {
    // The field cardinality.
    enum Field_Cardinality {
        FIELD_CARDINALITY_CARDINALITY_UNKNOWN = 0;
        FIELD_CARDINALITY_CARDINALITY_OPTIONAL = 1;
        FIELD_CARDINALITY_CARDINALITY_REQUIRED = 2;
        FIELD_CARDINALITY_CARDINALITY_REPEATED = 3;
    }
    Field_Cardinality cardinality = 1;
    // The string value of the default value of this field. Proto2 syntax only.
    string defaultValue = 2;
    // The field JSON name.
    string jsonName = 3;
    // The field type.
    enum Field_Kind {
        FIELD_KIND_TYPE_UNKNOWN = 0;
        FIELD_KIND_TYPE_DOUBLE = 1;
        FIELD_KIND_TYPE_FLOAT = 2;
        FIELD_KIND_TYPE_INT64 = 3;
        FIELD_KIND_TYPE_UINT64 = 4;
        FIELD_KIND_TYPE_INT32 = 5;
        FIELD_KIND_TYPE_FIXED64 = 6;
        FIELD_KIND_TYPE_FIXED32 = 7;
        FIELD_KIND_TYPE_BOOL = 8;
        FIELD_KIND_TYPE_STRING = 9;
        FIELD_KIND_TYPE_GROUP = 10;
        FIELD_KIND_TYPE_MESSAGE = 11;
        FIELD_KIND_TYPE_BYTES = 12;
        FIELD_KIND_TYPE_UINT32 = 13;
        FIELD_KIND_TYPE_ENUM = 14;
        FIELD_KIND_TYPE_SFIXED32 = 15;
        FIELD_KIND_TYPE_SFIXED64 = 16;
        FIELD_KIND_TYPE_SINT32 = 17;
        FIELD_KIND_TYPE_SINT64 = 18;
    }
    Field_Kind kind = 4;
    // The field name.
    string name = 5;
    // The field number.
    int32 number = 6;
    // The index of the field type in Type.oneofs, for message or enumeration types. The first type has index 1; zero means the type is not in the list.
    int32 oneofIndex = 7;
    // The protocol buffer options.
    repeated Option options = 8;
    // Whether to use alternative packed wire representation.
    bool packed = 9;
    // The field type URL, without the scheme, for message or enumeration types. Example: "type.googleapis.com/google.protobuf.Timestamp".
    string typeUrl = 10;
}

message Group {
    // A user-assigned name for this group, used only for display purposes.
    string displayName = 1;
    // The filter used to determine which monitored resources belong to this group.
    string filter = 2;
    // If true, the members of this group are considered to be a cluster. The system can perform additional analysis on groups that are clusters.
    bool isCluster = 3;
    // Output only. The name of this group. The format is "projects/{project_id_or_number}/groups/{group_id}". When creating a group, this field is ignored and a new name is created consisting of the project specified in the call to CreateGroup and a unique {group_id} that is generated automatically.
    string name = 4;
    // The name of the group's parent, if it has one. The format is "projects/{project_id_or_number}/groups/{group_id}". For groups with no parent, parentName is the empty string, "".
    string parentName = 5;
}

message LabelDescriptor {
    // A human-readable description for the label.
    string description = 1;
    // The label key.
    string key = 2;
    // The type of data that can be assigned to the label.
    enum LabelDescriptor_ValueType {
        LABELDESCRIPTOR_VALUETYPE_STRING = 0;
        LABELDESCRIPTOR_VALUETYPE_BOOL = 1;
        LABELDESCRIPTOR_VALUETYPE_INT64 = 2;
    }
    LabelDescriptor_ValueType valueType = 3;
}

message Linear {
    // Must be greater than 0.
    int32 numFiniteBuckets = 1;
    // Lower bound of the first bucket.
    double offset = 2;
    // Must be greater than 0.
    double width = 3;
}

message ListGroupMembersResponse {
    // A set of monitored resources in the group.
    repeated MonitoredResource members = 1;
    // If there are more results than have been returned, then this field is set to a non-empty value. To see the additional results, use that value as pageToken in the next call to this method.
    string nextPageToken = 2;
    // The total number of elements matching this request.
    int32 totalSize = 3;
}

message ListGroupsResponse {
    // The groups that match the specified filters.
    repeated Group group = 1;
    // If there are more results than have been returned, then this field is set to a non-empty value. To see the additional results, use that value as pageToken in the next call to this method.
    string nextPageToken = 2;
}

message ListMetricDescriptorsResponse {
    // The metric descriptors that are available to the project and that match the value of filter, if present.
    repeated MetricDescriptor metricDescriptors = 1;
    // If there are more results than have been returned, then this field is set to a non-empty value. To see the additional results, use that value as pageToken in the next call to this method.
    string nextPageToken = 2;
}

message ListMonitoredResourceDescriptorsResponse {
    // If there are more results than have been returned, then this field is set to a non-empty value. To see the additional results, use that value as pageToken in the next call to this method.
    string nextPageToken = 1;
    // The monitored resource descriptors that are available to this project and that match filter, if present.
    repeated MonitoredResourceDescriptor resourceDescriptors = 2;
}

message ListTimeSeriesResponse {
    // If there are more results than have been returned, then this field is set to a non-empty value. To see the additional results, use that value as pageToken in the next call to this method.
    string nextPageToken = 1;
    // One or more time series that match the filter included in the request.
    repeated TimeSeries timeSeries = 2;
}

message Metric {
    // The set of label values that uniquely identify this metric. All labels listed in the MetricDescriptor must be assigned values.
    map<string, string> labels = 1;
    // An existing metric type, see google.api.MetricDescriptor. For example, custom.googleapis.com/invoice/paid/amount.
    string type = 2;
}

message MetricDescriptor {
    // A detailed description of the metric, which can be used in documentation.
    string description = 1;
    // A concise name for the metric, which can be displayed in user interfaces. Use sentence case without an ending period, for example "Request count".
    string displayName = 2;
    // The set of labels that can be used to describe a specific instance of this metric type. For example, the appengine.googleapis.com/http/server/response_latencies metric type has a label for the HTTP response code, response_code, so you can look at latencies for successful responses or just for responses that failed.
    repeated LabelDescriptor labels = 3;
    // Whether the metric records instantaneous values, changes to a value, etc. Some combinations of metric_kind and value_type might not be supported.
    enum MetricDescriptor_MetricKind {
        METRICDESCRIPTOR_METRICKIND_METRIC_KIND_UNSPECIFIED = 0;
        METRICDESCRIPTOR_METRICKIND_GAUGE = 1;
        METRICDESCRIPTOR_METRICKIND_DELTA = 2;
        METRICDESCRIPTOR_METRICKIND_CUMULATIVE = 3;
    }
    MetricDescriptor_MetricKind metricKind = 4;
    // The resource name of the metric descriptor. Depending on the implementation, the name typically includes: (1) the parent resource name that defines the scope of the metric type or of its data; and (2) the metric's URL-encoded type, which also appears in the type field of this descriptor. For example, following is the resource name of a custom metric within the GCP project my-project-id:
    // "projects/my-project-id/metricDescriptors/custom.googleapis.com%2Finvoice%2Fpaid%2Famount"
    string name = 5;
    // The metric type, including its DNS name prefix. The type is not URL-encoded. All user-defined custom metric types have the DNS name custom.googleapis.com. Metric types should use a natural hierarchical grouping. For example:
    // "custom.googleapis.com/invoice/paid/amount"
    // "appengine.googleapis.com/http/server/response_latencies"
    string type = 6;
    // The unit in which the metric value is reported. It is only applicable if the value_type is INT64, DOUBLE, or DISTRIBUTION. The supported units are a subset of The Unified Code for Units of Measure (http://unitsofmeasure.org/ucum.html) standard:Basic units (UNIT)
    // bit bit
    // By byte
    // s second
    // min minute
    // h hour
    // d dayPrefixes (PREFIX)
    // k kilo (10**3)
    // M mega (10**6)
    // G giga (10**9)
    // T tera (10**12)
    // P peta (10**15)
    // E exa (10**18)
    // Z zetta (10**21)
    // Y yotta (10**24)
    // m milli (10**-3)
    // u micro (10**-6)
    // n nano (10**-9)
    // p pico (10**-12)
    // f femto (10**-15)
    // a atto (10**-18)
    // z zepto (10**-21)
    // y yocto (10**-24)
    // Ki kibi (2**10)
    // Mi mebi (2**20)
    // Gi gibi (2**30)
    // Ti tebi (2**40)GrammarThe grammar includes the dimensionless unit 1, such as 1/s.The grammar also includes these connectors:
    // / division (as an infix operator, e.g. 1/s).
    // . multiplication (as an infix operator, e.g. GBy.d)The grammar for a unit is as follows:
    // Expression = Component { "." Component } { "/" Component } ;
    // 
    // Component = [ PREFIX ] UNIT [ Annotation ]
    //           | Annotation
    //           | "1"
    //           ;
    // 
    // Annotation = "{" NAME "}" ;
    // Notes:
    // Annotation is just a comment if it follows a UNIT and is  equivalent to 1 if it is used alone. For examples,  {requests}/s == 1/s, By{transmitted}/s == By/s.
    // NAME is a sequence of non-blank printable ASCII characters not  containing '{' or '}'.
    string unit = 7;
    // Whether the measurement is an integer, a floating-point number, etc. Some combinations of metric_kind and value_type might not be supported.
    enum MetricDescriptor_ValueType {
        METRICDESCRIPTOR_VALUETYPE_VALUE_TYPE_UNSPECIFIED = 0;
        METRICDESCRIPTOR_VALUETYPE_BOOL = 1;
        METRICDESCRIPTOR_VALUETYPE_INT64 = 2;
        METRICDESCRIPTOR_VALUETYPE_DOUBLE = 3;
        METRICDESCRIPTOR_VALUETYPE_STRING = 4;
        METRICDESCRIPTOR_VALUETYPE_DISTRIBUTION = 5;
        METRICDESCRIPTOR_VALUETYPE_MONEY = 6;
    }
    MetricDescriptor_ValueType valueType = 8;
}

message MonitoredResource {
    // Required. Values for all of the labels listed in the associated monitored resource descriptor. For example, Compute Engine VM instances use the labels "project_id", "instance_id", and "zone".
    map<string, string> labels = 1;
    // Required. The monitored resource type. This field must match the type field of a MonitoredResourceDescriptor object. For example, the type of a Compute Engine VM instance is gce_instance.
    string type = 2;
}

message MonitoredResourceDescriptor {
    // Optional. A detailed description of the monitored resource type that might be used in documentation.
    string description = 1;
    // Optional. A concise name for the monitored resource type that might be displayed in user interfaces. It should be a Title Cased Noun Phrase, without any article or other determiners. For example, "Google Cloud SQL Database".
    string displayName = 2;
    // Required. A set of labels used to describe instances of this monitored resource type. For example, an individual Google Cloud SQL database is identified by values for the labels "database_id" and "zone".
    repeated LabelDescriptor labels = 3;
    // Optional. The resource name of the monitored resource descriptor: "projects/{project_id}/monitoredResourceDescriptors/{type}" where {type} is the value of the type field in this object and {project_id} is a project ID that provides API-specific context for accessing the type. APIs that do not use project information can use the resource name format "monitoredResourceDescriptors/{type}".
    string name = 4;
    // Required. The monitored resource type. For example, the type "cloudsql_database" represents databases in Google Cloud SQL. The maximum length of this value is 256 characters.
    string type = 5;
}

message Option {
    // The option's name. For protobuf built-in options (options defined in descriptor.proto), this is the short name. For example, "map_entry". For custom options, it should be the fully-qualified name. For example, "google.api.http".
    string name = 1;
    // The option's value packed in an Any message. If the value is a primitive, the corresponding wrapper type defined in google/protobuf/wrappers.proto should be used. If the value is an enum, it should be stored as an int32 value using the google.protobuf.Int32Value type.
    map<string, > value = 2;
}

message Point {
    // The time interval to which the data point applies. For GAUGE metrics, only the end time of the interval is used. For DELTA metrics, the start and end time should specify a non-zero interval, with subsequent points specifying contiguous and non-overlapping intervals. For CUMULATIVE metrics, the start and end time should specify a non-zero interval, with subsequent points specifying the same start time and increasing end times, until an event resets the cumulative value to zero and sets a new start time for the following points.
    TimeInterval interval = 1;
    // The value of the data point.
    TypedValue value = 2;
}

message Range {
    // The maximum of the population values.
    double max = 1;
    // The minimum of the population values.
    double min = 2;
}

message SourceContext {
    // The path-qualified name of the .proto file that contained the associated protobuf element. For example: "google/protobuf/source_context.proto".
    string fileName = 1;
}

message Status {
    // The status code, which should be an enum value of google.rpc.Code.
    int32 code = 1;
    // A list of messages that carry the error details. There is a common set of message types for APIs to use.
    message Detail {
    }
    repeated Detail details = 2;
    // A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
    string message = 3;
}

message TimeInterval {
    // Required. The end of the time interval.
    string endTime = 1;
    // Optional. The beginning of the time interval. The default value for the start time is the end time. The start time must not be later than the end time.
    string startTime = 2;
}

message TimeSeries {
    // The associated metric. A fully-specified metric used to identify the time series.
    Metric metric = 1;
    // The metric kind of the time series. When listing time series, this metric kind might be different from the metric kind of the associated metric if this time series is an alignment or reduction of other time series.When creating a time series, this field is optional. If present, it must be the same as the metric kind of the associated metric. If the associated metric's descriptor must be auto-created, then this field specifies the metric kind of the new descriptor and must be either GAUGE (the default) or CUMULATIVE.
    enum TimeSeries_MetricKind {
        TIMESERIES_METRICKIND_METRIC_KIND_UNSPECIFIED = 0;
        TIMESERIES_METRICKIND_GAUGE = 1;
        TIMESERIES_METRICKIND_DELTA = 2;
        TIMESERIES_METRICKIND_CUMULATIVE = 3;
    }
    TimeSeries_MetricKind metricKind = 2;
    // The data points of this time series. When listing time series, the order of the points is specified by the list method.When creating a time series, this field must contain exactly one point and the point's type must be the same as the value type of the associated metric. If the associated metric's descriptor must be auto-created, then the value type of the descriptor is determined by the point's type, which must be BOOL, INT64, DOUBLE, or DISTRIBUTION.
    repeated Point points = 3;
    // The associated monitored resource. Custom metrics can use only certain monitored resource types in their time series data.
    MonitoredResource resource = 4;
    // The value type of the time series. When listing time series, this value type might be different from the value type of the associated metric if this time series is an alignment or reduction of other time series.When creating a time series, this field is optional. If present, it must be the same as the type of the data in the points field.
    enum TimeSeries_ValueType {
        TIMESERIES_VALUETYPE_VALUE_TYPE_UNSPECIFIED = 0;
        TIMESERIES_VALUETYPE_BOOL = 1;
        TIMESERIES_VALUETYPE_INT64 = 2;
        TIMESERIES_VALUETYPE_DOUBLE = 3;
        TIMESERIES_VALUETYPE_STRING = 4;
        TIMESERIES_VALUETYPE_DISTRIBUTION = 5;
        TIMESERIES_VALUETYPE_MONEY = 6;
    }
    TimeSeries_ValueType valueType = 5;
}

message Type {
    // The list of fields.
    repeated Field fields = 1;
    // The fully qualified message name.
    string name = 2;
    // The list of types appearing in oneof definitions in this type.
    repeated string oneofs = 3;
    // The protocol buffer options.
    repeated Option options = 4;
    // The source context.
    SourceContext sourceContext = 5;
    // The source syntax.
    enum Type_Syntax {
        TYPE_SYNTAX_SYNTAX_PROTO2 = 0;
        TYPE_SYNTAX_SYNTAX_PROTO3 = 1;
    }
    Type_Syntax syntax = 6;
}

message TypedValue {
    // A Boolean value: true or false.
    bool boolValue = 1;
    // A distribution value.
    Distribution distributionValue = 2;
    // A 64-bit double-precision floating-point number. Its magnitude is approximately &plusmn;10<sup>&plusmn;300</sup> and it has 16 significant digits of precision.
    double doubleValue = 3;
    // A 64-bit integer. Its range is approximately &plusmn;9.2x10<sup>18</sup>.
    string int64Value = 4;
    // A variable-length string value.
    string stringValue = 5;
}

enum Alt {
    JSON = 0;
    MEDIA = 1;
    PROTO = 2;
}

service StackdriverMonitoringService {
    // Gets a single group.
    rpc GetV3Name(GetV3NameRequest) returns (Group) {
      option (google.api.http) = {
        get: "//v3/{name}"
      };
    }
    // Updates an existing group. You can change any group attributes except name.
    rpc PutV3Name(PutV3NameRequest) returns (Group) {
      option (google.api.http) = {
        put: "//v3/{name}"
        body: "body"
      };
    }
    // Deletes an existing group.
    rpc DeleteV3Name(DeleteV3NameRequest) returns (Empty) {
      option (google.api.http) = {
        delete: "//v3/{name}"
      };
    }
    // Stackdriver Monitoring Agent only: Creates a new time series.<aside class="caution">This method is only for use by the Stackdriver Monitoring Agent. Use projects.timeSeries.create instead.</aside>
    rpc PostV3NameCollectdTimeSeries(PostV3NameCollectdTimeSeriesRequest) returns (CreateCollectdTimeSeriesResponse) {
      option (google.api.http) = {
        post: "//v3/{name}/collectdTimeSeries"
        body: "body"
      };
    }
    // Lists the existing groups.
    rpc GetV3NameGroups(GetV3NameGroupsRequest) returns (ListGroupsResponse) {
      option (google.api.http) = {
        get: "//v3/{name}/groups"
      };
    }
    // Creates a new group.
    rpc PostV3NameGroups(PostV3NameGroupsRequest) returns (Group) {
      option (google.api.http) = {
        post: "//v3/{name}/groups"
        body: "body"
      };
    }
    // Lists the monitored resources that are members of a group.
    rpc GetV3NameMembers(GetV3NameMembersRequest) returns (ListGroupMembersResponse) {
      option (google.api.http) = {
        get: "//v3/{name}/members"
      };
    }
    // Lists metric descriptors that match a filter. This method does not require a Stackdriver account.
    rpc GetV3NameMetricDescriptors(GetV3NameMetricDescriptorsRequest) returns (ListMetricDescriptorsResponse) {
      option (google.api.http) = {
        get: "//v3/{name}/metricDescriptors"
      };
    }
    // Creates a new metric descriptor. User-created metric descriptors define custom metrics.
    rpc PostV3NameMetricDescriptors(PostV3NameMetricDescriptorsRequest) returns (MetricDescriptor) {
      option (google.api.http) = {
        post: "//v3/{name}/metricDescriptors"
        body: "body"
      };
    }
    // Lists monitored resource descriptors that match a filter. This method does not require a Stackdriver account.
    rpc GetV3NameMonitoredResourceDescriptors(GetV3NameMonitoredResourceDescriptorsRequest) returns (ListMonitoredResourceDescriptorsResponse) {
      option (google.api.http) = {
        get: "//v3/{name}/monitoredResourceDescriptors"
      };
    }
    // Lists time series that match a filter. This method does not require a Stackdriver account.
    rpc GetV3NameTimeSeries(GetV3NameTimeSeriesRequest) returns (ListTimeSeriesResponse) {
      option (google.api.http) = {
        get: "//v3/{name}/timeSeries"
      };
    }
    // Creates or adds data to one or more time series. The response is empty if all time series in the request were written. If any time series could not be written, a corresponding failure message is included in the error response.
    rpc PostV3NameTimeSeries(PostV3NameTimeSeriesRequest) returns (Empty) {
      option (google.api.http) = {
        post: "//v3/{name}/timeSeries"
        body: "body"
      };
    }
}

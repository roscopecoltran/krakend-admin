syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package googlemirror;

message PostAccountsUserTokenAccountTypeAccountNameRequest {
    // The name of the account to be passed to the Android Account Manager.
    string accountName = 1;
    // Account type to be passed to Android Account Manager.
    string accountType = 2;
    alt alt = 3;
    Account body = 4;
    string fields = 5;
    string key = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
    // The ID for the user.
    string userToken = 11;
}

message GetContactsRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    string userIp = 7;
}

message PostContactsRequest {
    alt alt = 1;
    Contact body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetContactsIdRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the contact.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PutContactsIdRequest {
    alt alt = 1;
    Contact body = 2;
    string fields = 3;
    // The ID of the contact.
    string id = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message DeleteContactsIdRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the contact.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetLocationsRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    string userIp = 7;
}

message GetLocationsIdRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the location or latest for the last known location.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetSettingsIdRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the setting. The following IDs are valid: 
    // - locale - The key to the user’s language/locale (BCP 47 identifier) that Glassware should use to render localized content. 
    // - timezone - The key to the user’s current time zone region as defined in the tz database. Example: America/Los_Angeles.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetSubscriptionsRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    string userIp = 7;
}

message PostSubscriptionsRequest {
    alt alt = 1;
    Subscription body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PutSubscriptionsIdRequest {
    alt alt = 1;
    Subscription body = 2;
    string fields = 3;
    // The ID of the subscription.
    string id = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message DeleteSubscriptionsIdRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the subscription.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetTimelineRequest {
    alt alt = 1;
    // If provided, only items with the given bundleId will be returned.
    string bundleId = 2;
    string fields = 3;
    // If true, tombstone records for deleted items will be returned.
    bool includeDeleted = 4;
    string key = 5;
    // The maximum number of items to include in the response, used for paging.
    int32 maxResults = 6;
    string oauth_token = 7;
    // Controls the order in which timeline items are returned.
    enum GetTimelineRequest_OrderBy {
        GETTIMELINEREQUEST_ORDERBY_DISPLAYTIME = 0;
        GETTIMELINEREQUEST_ORDERBY_WRITETIME = 1;
    }
    GetTimelineRequest_OrderBy orderBy = 8;
    // Token for the page of results to return.
    string pageToken = 9;
    // If true, only pinned items will be returned.
    bool pinnedOnly = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // If provided, only items with the given sourceItemId will be returned.
    string sourceItemId = 13;
    string userIp = 14;
}

message PostTimelineRequest {
    alt alt = 1;
    TimelineItem body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetTimelineIdRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the timeline item.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PutTimelineIdRequest {
    alt alt = 1;
    TimelineItem body = 2;
    string fields = 3;
    // The ID of the timeline item.
    string id = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message DeleteTimelineIdRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the timeline item.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetTimelineItemIdAttachmentsRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the timeline item whose attachments should be listed.
    string itemId = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostTimelineItemIdAttachmentsRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the timeline item the attachment belongs to.
    string itemId = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetTimelineItemIdAttachmentsAttachmentIdRequest {
    alt alt = 1;
    // The ID of the attachment.
    string attachmentId = 2;
    string fields = 3;
    // The ID of the timeline item the attachment belongs to.
    string itemId = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message DeleteTimelineItemIdAttachmentsAttachmentIdRequest {
    alt alt = 1;
    // The ID of the attachment.
    string attachmentId = 2;
    string fields = 3;
    // The ID of the timeline item the attachment belongs to.
    string itemId = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message Account {
    repeated AuthToken authTokens = 1;
    repeated string features = 2;
    string password = 3;
    repeated UserData userData = 4;
}

message Attachment {
    // The MIME type of the attachment.
    string contentType = 1;
    // The URL for the content.
    string contentUrl = 2;
    // The ID of the attachment.
    string id = 3;
    // Indicates that the contentUrl is not available because the attachment content is still being processed. If the caller wishes to retrieve the content, it should try again later.
    bool isProcessingContent = 4;
}

message AttachmentsListResponse {
    // The list of attachments.
    repeated Attachment items = 1;
    // The type of resource. This is always mirror#attachmentsList.
    string kind = 2;
}

message AuthToken {
    string authToken = 1;
    string type = 2;
}

message Command {
    // The type of operation this command corresponds to. Allowed values are:  
    // - TAKE_A_NOTE - Shares a timeline item with the transcription of user speech from the "Take a note" voice menu command.  
    // - POST_AN_UPDATE - Shares a timeline item with the transcription of user speech from the "Post an update" voice menu command.
    string type = 1;
}

message Contact {
    // A list of voice menu commands that a contact can handle. Glass shows up to three contacts for each voice menu command. If there are more than that, the three contacts with the highest priority are shown for that particular command.
    repeated Command acceptCommands = 1;
    // A list of MIME types that a contact supports. The contact will be shown to the user if any of its acceptTypes matches any of the types of the attachments on the item. If no acceptTypes are given, the contact will be shown for all items.
    repeated string acceptTypes = 2;
    // The name to display for this contact.
    string displayName = 3;
    // An ID for this contact. This is generated by the application and is treated as an opaque token.
    string id = 4;
    // Set of image URLs to display for a contact. Most contacts will have a single image, but a "group" contact may include up to 8 image URLs and they will be resized and cropped into a mosaic on the client.
    repeated string imageUrls = 5;
    // The type of resource. This is always mirror#contact.
    string kind = 6;
    // Primary phone number for the contact. This can be a fully-qualified number, with country calling code and area code, or a local number.
    string phoneNumber = 7;
    // Priority for the contact to determine ordering in a list of contacts. Contacts with higher priorities will be shown before ones with lower priorities.
    uint32 priority = 8;
    // A list of sharing features that a contact can handle. Allowed values are:  
    // - ADD_CAPTION
    repeated string sharingFeatures = 9;
    // The ID of the application that created this contact. This is populated by the API
    string source = 10;
    // Name of this contact as it should be pronounced. If this contact's name must be spoken as part of a voice disambiguation menu, this name is used as the expected pronunciation. This is useful for contact names with unpronounceable characters or whose display spelling is otherwise not phonetic.
    string speakableName = 11;
    // The type for this contact. This is used for sorting in UIs. Allowed values are:  
    // - INDIVIDUAL - Represents a single person. This is the default. 
    // - GROUP - Represents more than a single person.
    string type = 12;
}

message ContactsListResponse {
    // Contact list.
    repeated Contact items = 1;
    // The type of resource. This is always mirror#contacts.
    string kind = 2;
}

message Location {
    // The accuracy of the location fix in meters.
    double accuracy = 1;
    // The full address of the location.
    string address = 2;
    // The name to be displayed. This may be a business name or a user-defined place, such as "Home".
    string displayName = 3;
    // The ID of the location.
    string id = 4;
    // The type of resource. This is always mirror#location.
    string kind = 5;
    // The latitude, in degrees.
    double latitude = 6;
    // The longitude, in degrees.
    double longitude = 7;
    // The time at which this location was captured, formatted according to RFC 3339.
    string timestamp = 8;
}

message LocationsListResponse {
    // The list of locations.
    repeated Location items = 1;
    // The type of resource. This is always mirror#locationsList.
    string kind = 2;
}

message MenuItem {
    // Controls the behavior when the user picks the menu option. Allowed values are:  
    // - CUSTOM - Custom action set by the service. When the user selects this menuItem, the API triggers a notification to your callbackUrl with the userActions.type set to CUSTOM and the userActions.payload set to the ID of this menu item. This is the default value. 
    // - Built-in actions:  
    // - REPLY - Initiate a reply to the timeline item using the voice recording UI. The creator attribute must be set in the timeline item for this menu to be available. 
    // - REPLY_ALL - Same behavior as REPLY. The original timeline item's recipients will be added to the reply item. 
    // - DELETE - Delete the timeline item. 
    // - SHARE - Share the timeline item with the available contacts. 
    // - READ_ALOUD - Read the timeline item's speakableText aloud; if this field is not set, read the text field; if none of those fields are set, this menu item is ignored. 
    // - GET_MEDIA_INPUT - Allow users to provide media payloads to Glassware from a menu item (currently, only transcribed text from voice input is supported). Subscribe to notifications when users invoke this menu item to receive the timeline item ID. Retrieve the media from the timeline item in the payload property. 
    // - VOICE_CALL - Initiate a phone call using the timeline item's creator.phoneNumber attribute as recipient. 
    // - NAVIGATE - Navigate to the timeline item's location. 
    // - TOGGLE_PINNED - Toggle the isPinned state of the timeline item. 
    // - OPEN_URI - Open the payload of the menu item in the browser. 
    // - PLAY_VIDEO - Open the payload of the menu item in the Glass video player. 
    // - SEND_MESSAGE - Initiate sending a message to the timeline item's creator:  
    // - If the creator.phoneNumber is set and Glass is connected to an Android phone, the message is an SMS. 
    // - Otherwise, if the creator.email is set, the message is an email.
    string action = 1;
    // The ContextualMenus.Command associated with this MenuItem (e.g. READ_ALOUD). The voice label for this command will be displayed in the voice menu and the touch label will be displayed in the touch menu. Note that the default menu value's display name will be overriden if you specify this property. Values that do not correspond to a ContextualMenus.Command name will be ignored.
    string contextual_command = 2;
    // The ID for this menu item. This is generated by the application and is treated as an opaque token.
    string id = 3;
    // A generic payload whose meaning changes depending on this MenuItem's action.  
    // - When the action is OPEN_URI, the payload is the URL of the website to view. 
    // - When the action is PLAY_VIDEO, the payload is the streaming URL of the video 
    // - When the action is GET_MEDIA_INPUT, the payload is the text transcription of a user's speech input
    string payload = 4;
    // If set to true on a CUSTOM menu item, that item will be removed from the menu after it is selected.
    bool removeWhenSelected = 5;
    // For CUSTOM items, a list of values controlling the appearance of the menu item in each of its states. A value for the DEFAULT state must be provided. If the PENDING or CONFIRMED states are missing, they will not be shown.
    repeated MenuValue values = 6;
}

message MenuValue {
    // The name to display for the menu item. If you specify this property for a built-in menu item, the default contextual voice command for that menu item is not shown.
    string displayName = 1;
    // URL of an icon to display with the menu item.
    string iconUrl = 2;
    // The state that this value applies to. Allowed values are:  
    // - DEFAULT - Default value shown when displayed in the menuItems list. 
    // - PENDING - Value shown when the menuItem has been selected by the user but can still be cancelled. 
    // - CONFIRMED - Value shown when the menuItem has been selected by the user and can no longer be cancelled.
    string state = 3;
}

message Notification {
    // The collection that generated the notification.
    string collection = 1;
    // The ID of the item that generated the notification.
    string itemId = 2;
    // The type of operation that generated the notification.
    string operation = 3;
    // A list of actions taken by the user that triggered the notification.
    repeated UserAction userActions = 4;
    // The user token provided by the service when it subscribed for notifications.
    string userToken = 5;
    // The secret verify token provided by the service when it subscribed for notifications.
    string verifyToken = 6;
}

message NotificationConfig {
    // The time at which the notification should be delivered.
    string deliveryTime = 1;
    // Describes how important the notification is. Allowed values are:  
    // - DEFAULT - Notifications of default importance. A chime will be played to alert users.
    string level = 2;
}

message Setting {
    // The setting's ID. The following IDs are valid:  
    // - locale - The key to the user’s language/locale (BCP 47 identifier) that Glassware should use to render localized content.  
    // - timezone - The key to the user’s current time zone region as defined in the tz database. Example: America/Los_Angeles.
    string id = 1;
    // The type of resource. This is always mirror#setting.
    string kind = 2;
    // The setting value, as a string.
    string value = 3;
}

message Subscription {
    // The URL where notifications should be delivered (must start with https://).
    string callbackUrl = 1;
    // The collection to subscribe to. Allowed values are:  
    // - timeline - Changes in the timeline including insertion, deletion, and updates. 
    // - locations - Location updates. 
    // - settings - Settings updates.
    string collection = 2;
    // The ID of the subscription.
    string id = 3;
    // The type of resource. This is always mirror#subscription.
    string kind = 4;
    // Container object for notifications. This is not populated in the Subscription resource.
    Notification notification = 5;
    // A list of operations that should be subscribed to. An empty list indicates that all operations on the collection should be subscribed to. Allowed values are:  
    // - UPDATE - The item has been updated. 
    // - INSERT - A new item has been inserted. 
    // - DELETE - The item has been deleted. 
    // - MENU_ACTION - A custom menu item has been triggered by the user.
    repeated string operation = 6;
    // The time at which this subscription was last modified, formatted according to RFC 3339.
    string updated = 7;
    // An opaque token sent to the subscriber in notifications so that it can determine the ID of the user.
    string userToken = 8;
    // A secret token sent to the subscriber in notifications so that it can verify that the notification was generated by Google.
    string verifyToken = 9;
}

message SubscriptionsListResponse {
    // The list of subscriptions.
    repeated Subscription items = 1;
    // The type of resource. This is always mirror#subscriptionsList.
    string kind = 2;
}

message TimelineItem {
    // A list of media attachments associated with this item. As a convenience, you can refer to attachments in your HTML payloads with the attachment or cid scheme. For example:  
    // - attachment: <img src="attachment:attachment_index"> where attachment_index is the 0-based index of this array. 
    // - cid: <img src="cid:attachment_id"> where attachment_id is the ID of the attachment.
    repeated Attachment attachments = 1;
    // The bundle ID for this item. Services can specify a bundleId to group many items together. They appear under a single top-level item on the device.
    string bundleId = 2;
    // A canonical URL pointing to the canonical/high quality version of the data represented by the timeline item.
    string canonicalUrl = 3;
    // The time at which this item was created, formatted according to RFC 3339.
    string created = 4;
    // The user or group that created this item.
    Contact creator = 5;
    // The time that should be displayed when this item is viewed in the timeline, formatted according to RFC 3339. This user's timeline is sorted chronologically on display time, so this will also determine where the item is displayed in the timeline. If not set by the service, the display time defaults to the updated time.
    string displayTime = 6;
    // ETag for this item.
    string etag = 7;
    // HTML content for this item. If both text and html are provided for an item, the html will be rendered in the timeline.
    // Allowed HTML elements - You can use these elements in your timeline cards.
    //  
    // - Headers: h1, h2, h3, h4, h5, h6 
    // - Images: img 
    // - Lists: li, ol, ul 
    // - HTML5 semantics: article, aside, details, figure, figcaption, footer, header, nav, section, summary, time 
    // - Structural: blockquote, br, div, hr, p, span 
    // - Style: b, big, center, em, i, u, s, small, strike, strong, style, sub, sup 
    // - Tables: table, tbody, td, tfoot, th, thead, tr  
    // Blocked HTML elements: These elements and their contents are removed from HTML payloads.
    //  
    // - Document headers: head, title 
    // - Embeds: audio, embed, object, source, video 
    // - Frames: frame, frameset 
    // - Scripting: applet, script  
    // Other elements: Any elements that aren't listed are removed, but their contents are preserved.
    string html = 8;
    // The ID of the timeline item. This is unique within a user's timeline.
    string id = 9;
    // If this item was generated as a reply to another item, this field will be set to the ID of the item being replied to. This can be used to attach a reply to the appropriate conversation or post.
    string inReplyTo = 10;
    // Whether this item is a bundle cover.
    // 
    // If an item is marked as a bundle cover, it will be the entry point to the bundle of items that have the same bundleId as that item. It will be shown only on the main timeline — not within the opened bundle.
    // 
    // On the main timeline, items that are shown are:  
    // - Items that have isBundleCover set to true  
    // - Items that do not have a bundleId  In a bundle sub-timeline, items that are shown are:  
    // - Items that have the bundleId in question AND isBundleCover set to false
    bool isBundleCover = 11;
    // When true, indicates this item is deleted, and only the ID property is set.
    bool isDeleted = 12;
    // When true, indicates this item is pinned, which means it's grouped alongside "active" items like navigation and hangouts, on the opposite side of the home screen from historical (non-pinned) timeline items. You can allow the user to toggle the value of this property with the TOGGLE_PINNED built-in menu item.
    bool isPinned = 13;
    // The type of resource. This is always mirror#timelineItem.
    string kind = 14;
    // The geographic location associated with this item.
    Location location = 15;
    // A list of menu items that will be presented to the user when this item is selected in the timeline.
    repeated MenuItem menuItems = 16;
    // Controls how notifications for this item are presented on the device. If this is missing, no notification will be generated.
    NotificationConfig notification = 17;
    // For pinned items, this determines the order in which the item is displayed in the timeline, with a higher score appearing closer to the clock. Note: setting this field is currently not supported.
    int32 pinScore = 18;
    // A list of users or groups that this item has been shared with.
    repeated Contact recipients = 19;
    // A URL that can be used to retrieve this item.
    string selfLink = 20;
    // Opaque string you can use to map a timeline item to data in your own service.
    string sourceItemId = 21;
    // The speakable version of the content of this item. Along with the READ_ALOUD menu item, use this field to provide text that would be clearer when read aloud, or to provide extended information to what is displayed visually on Glass.
    // 
    // Glassware should also specify the speakableType field, which will be spoken before this text in cases where the additional context is useful, for example when the user requests that the item be read aloud following a notification.
    string speakableText = 22;
    // A speakable description of the type of this item. This will be announced to the user prior to reading the content of the item in cases where the additional context is useful, for example when the user requests that the item be read aloud following a notification.
    // 
    // This should be a short, simple noun phrase such as "Email", "Text message", or "Daily Planet News Update".
    // 
    // Glassware are encouraged to populate this field for every timeline item, even if the item does not contain speakableText or text so that the user can learn the type of the item without looking at the screen.
    string speakableType = 23;
    // Text content of this item.
    string text = 24;
    // The title of this item.
    string title = 25;
    // The time at which this item was last modified, formatted according to RFC 3339.
    string updated = 26;
}

message TimelineListResponse {
    // Items in the timeline.
    repeated TimelineItem items = 1;
    // The type of resource. This is always mirror#timeline.
    string kind = 2;
    // The next page token. Provide this as the pageToken parameter in the request to retrieve the next page of results.
    string nextPageToken = 3;
}

message UserAction {
    // An optional payload for the action.
    // 
    // For actions of type CUSTOM, this is the ID of the custom menu item that was selected.
    string payload = 1;
    // The type of action. The value of this can be:  
    // - SHARE - the user shared an item. 
    // - REPLY - the user replied to an item. 
    // - REPLY_ALL - the user replied to all recipients of an item. 
    // - CUSTOM - the user selected a custom menu item on the timeline item. 
    // - DELETE - the user deleted the item. 
    // - PIN - the user pinned the item. 
    // - UNPIN - the user unpinned the item. 
    // - LAUNCH - the user initiated a voice command.  In the future, additional types may be added. UserActions with unrecognized types should be ignored.
    string type = 2;
}

message UserData {
    string key = 1;
    string value = 2;
}

enum Alt {
    JSON = 0;
}

service GoogleMirrorService {
    // Inserts a new account for a user
    rpc PostAccountsUserTokenAccountTypeAccountName(PostAccountsUserTokenAccountTypeAccountNameRequest) returns (Account) {
      option (google.api.http) = {
        post: "/mirror/v1/accounts/{userToken}/{accountType}/{accountName}"
        body: "body"
      };
    }
    // Retrieves a list of contacts for the authenticated user.
    rpc GetContacts(GetContactsRequest) returns (ContactsListResponse) {
      option (google.api.http) = {
        get: "/mirror/v1/contacts"
      };
    }
    // Inserts a new contact.
    rpc PostContacts(PostContactsRequest) returns (Contact) {
      option (google.api.http) = {
        post: "/mirror/v1/contacts"
        body: "body"
      };
    }
    // Gets a single contact by ID.
    rpc GetContactsId(GetContactsIdRequest) returns (Contact) {
      option (google.api.http) = {
        get: "/mirror/v1/contacts/{id}"
      };
    }
    // Updates a contact in place.
    rpc PutContactsId(PutContactsIdRequest) returns (Contact) {
      option (google.api.http) = {
        put: "/mirror/v1/contacts/{id}"
        body: "body"
      };
    }
    // Deletes a contact.
    rpc DeleteContactsId(DeleteContactsIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/mirror/v1/contacts/{id}"
      };
    }
    // Retrieves a list of locations for the user.
    rpc GetLocations(GetLocationsRequest) returns (LocationsListResponse) {
      option (google.api.http) = {
        get: "/mirror/v1/locations"
      };
    }
    // Gets a single location by ID.
    rpc GetLocationsId(GetLocationsIdRequest) returns (Location) {
      option (google.api.http) = {
        get: "/mirror/v1/locations/{id}"
      };
    }
    // Gets a single setting by ID.
    rpc GetSettingsId(GetSettingsIdRequest) returns (Setting) {
      option (google.api.http) = {
        get: "/mirror/v1/settings/{id}"
      };
    }
    // Retrieves a list of subscriptions for the authenticated user and service.
    rpc GetSubscriptions(GetSubscriptionsRequest) returns (SubscriptionsListResponse) {
      option (google.api.http) = {
        get: "/mirror/v1/subscriptions"
      };
    }
    // Creates a new subscription.
    rpc PostSubscriptions(PostSubscriptionsRequest) returns (Subscription) {
      option (google.api.http) = {
        post: "/mirror/v1/subscriptions"
        body: "body"
      };
    }
    // Updates an existing subscription in place.
    rpc PutSubscriptionsId(PutSubscriptionsIdRequest) returns (Subscription) {
      option (google.api.http) = {
        put: "/mirror/v1/subscriptions/{id}"
        body: "body"
      };
    }
    // Deletes a subscription.
    rpc DeleteSubscriptionsId(DeleteSubscriptionsIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/mirror/v1/subscriptions/{id}"
      };
    }
    // Retrieves a list of timeline items for the authenticated user.
    rpc GetTimeline(GetTimelineRequest) returns (TimelineListResponse) {
      option (google.api.http) = {
        get: "/mirror/v1/timeline"
      };
    }
    // Inserts a new item into the timeline.
    rpc PostTimeline(PostTimelineRequest) returns (TimelineItem) {
      option (google.api.http) = {
        post: "/mirror/v1/timeline"
        body: "body"
      };
    }
    // Gets a single timeline item by ID.
    rpc GetTimelineId(GetTimelineIdRequest) returns (TimelineItem) {
      option (google.api.http) = {
        get: "/mirror/v1/timeline/{id}"
      };
    }
    // Updates a timeline item in place.
    rpc PutTimelineId(PutTimelineIdRequest) returns (TimelineItem) {
      option (google.api.http) = {
        put: "/mirror/v1/timeline/{id}"
        body: "body"
      };
    }
    // Deletes a timeline item.
    rpc DeleteTimelineId(DeleteTimelineIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/mirror/v1/timeline/{id}"
      };
    }
    // Returns a list of attachments for a timeline item.
    rpc GetTimelineItemIdAttachments(GetTimelineItemIdAttachmentsRequest) returns (AttachmentsListResponse) {
      option (google.api.http) = {
        get: "/mirror/v1/timeline/{itemId}/attachments"
      };
    }
    // Adds a new attachment to a timeline item.
    rpc PostTimelineItemIdAttachments(PostTimelineItemIdAttachmentsRequest) returns (Attachment) {
      option (google.api.http) = {
        post: "/mirror/v1/timeline/{itemId}/attachments"
      };
    }
    // Retrieves an attachment on a timeline item by item ID and attachment ID.
    rpc GetTimelineItemIdAttachmentsAttachmentId(GetTimelineItemIdAttachmentsAttachmentIdRequest) returns (Attachment) {
      option (google.api.http) = {
        get: "/mirror/v1/timeline/{itemId}/attachments/{attachmentId}"
      };
    }
    // Deletes an attachment from a timeline item.
    rpc DeleteTimelineItemIdAttachmentsAttachmentId(DeleteTimelineItemIdAttachmentsAttachmentIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/mirror/v1/timeline/{itemId}/attachments/{attachmentId}"
      };
    }
}

syntax = "proto3";

import "google/api/annotations.proto";

package dlp;

message PostV2beta1Content:DeidentifyRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    GooglePrivacyDlpV2beta1DeidentifyContentRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PostV2beta1Content:InspectRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    GooglePrivacyDlpV2beta1InspectContentRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PostV2beta1Content:RedactRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    GooglePrivacyDlpV2beta1RedactContentRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PostV2beta1DataSource:AnalyzeRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    GooglePrivacyDlpV2beta1AnalyzeDataSourceRiskRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PostV2beta1InspectOperationsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    GooglePrivacyDlpV2beta1CreateInspectOperationRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message GetV2beta1RootCategoriesRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    // Optional language code for localized friendly category names.
    // If omitted or if localized strings are not available,
    // en-US strings will be returned.
    string languageCode = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message GetV2beta1RootCategoriesCategoryInfoTypesRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    // Category name as returned by ListRootCategories.
    string category = 6;
    string fields = 7;
    string key = 8;
    // Optional BCP-47 language code for localized info type friendly
    // names. If omitted, or if localized strings are not available,
    // en-US strings will be returned.
    string languageCode = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV2beta1NameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    // The name of the operation resource.
    string name = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message DeleteV2beta1NameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    // The name of the operation resource to be deleted.
    string name = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message GetV2beta1NameFindingsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // Restricts findings to items that match. Supports info_type and likelihood.
    // 
    // Examples:
    // 
    // - info_type=EMAIL_ADDRESS
    // - info_type=PHONE_NUMBER,EMAIL_ADDRESS
    // - likelihood=VERY_LIKELY
    // - likelihood=VERY_LIKELY,LIKELY
    // - info_type=EMAIL_ADDRESS,likelihood=VERY_LIKELY,LIKELY
    string filter = 7;
    string key = 8;
    // Identifier of the results set returned as metadata of
    // the longrunning operation created by a call to InspectDataSource.
    // Should be in the format of `inspect/results/{id}`.
    string name = 9;
    string oauth_token = 10;
    // Maximum number of results to return.
    // If 0, the implementation selects a reasonable value.
    int32 pageSize = 11;
    // The value returned by the last `ListInspectFindingsResponse`; indicates
    // that this is a continuation of a prior `ListInspectFindings` call, and that
    // the system should return the next page of data.
    string pageToken = 12;
    boolean pp = 13;
    boolean prettyPrint = 14;
    string quotaUser = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

message PostV2beta1Name:CancelRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    GoogleLongrunningCancelOperationRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    // The name of the operation resource to be cancelled.
    string name = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

enum $.Xgafv {
    $XGAFV_1 = 0;
    $XGAFV_2 = 1;
}

message GoogleLongrunningCancelOperationRequest {
}

message GoogleLongrunningListOperationsResponse {
    // The standard List next-page token.
    string nextPageToken = 1;
    // A list of operations that matches the specified filter in the request.
    repeated GoogleLongrunningOperation operations = 2;
}

message GoogleLongrunningOperation {
    // If the value is `false`, it means the operation is still in progress.
    // If `true`, the operation is completed, and either `error` or `response` is
    // available.
    bool done = 1;
    // The error result of the operation in case of failure or cancellation.
    GoogleRpcStatus error = 2;
    // This field will contain an InspectOperationMetadata object for `inspect.operations.create` or a RiskAnalysisOperationMetadata object for `dataSource.analyze`.  This will always be returned with the Operation.
    map<string, > metadata = 3;
    // The server-assigned name. The `name` should have the format of `inspect/operations/<identifier>`.
    string name = 4;
    // This field will contain an InspectOperationResult object for `inspect.operations.create` or a RiskAnalysisOperationResult object for `dataSource.analyze`.
    map<string, > response = 5;
}

message GooglePrivacyDlpV2beta1AnalyzeDataSourceRiskRequest {
    // Privacy metric to compute.
    GooglePrivacyDlpV2beta1PrivacyMetric privacyMetric = 1;
    // Input dataset to compute metrics over.
    GooglePrivacyDlpV2beta1BigQueryTable sourceTable = 2;
}

message GooglePrivacyDlpV2beta1BigQueryOptions {
    // References to fields uniquely identifying rows within the table.
    // Nested fields in the format, like `person.birthdate.year`, are allowed.
    repeated GooglePrivacyDlpV2beta1FieldId identifyingFields = 1;
    // Complete BigQuery table reference.
    GooglePrivacyDlpV2beta1BigQueryTable tableReference = 2;
}

message GooglePrivacyDlpV2beta1BigQueryTable {
    // Dataset ID of the table.
    string datasetId = 1;
    // The Google Cloud Platform project ID of the project containing the table.
    // If omitted, project ID is inferred from the API call.
    string projectId = 2;
    // Name of the table.
    string tableId = 3;
}

message GooglePrivacyDlpV2beta1Bucket {
    // Upper bound of the range, exclusive; type must match min.
    GooglePrivacyDlpV2beta1Value max = 1;
    // Lower bound of the range, inclusive. Type should be the same as max if
    // used.
    GooglePrivacyDlpV2beta1Value min = 2;
    // Replacement value for this bucket. If not provided
    // the default behavior will be to hyphenate the min-max range.
    GooglePrivacyDlpV2beta1Value replacementValue = 3;
}

message GooglePrivacyDlpV2beta1BucketingConfig {
    repeated GooglePrivacyDlpV2beta1Bucket buckets = 1;
}

message GooglePrivacyDlpV2beta1CategoricalStatsConfig {
    // Field to compute categorical stats on. All column types are
    // supported except for arrays and structs. However, it may be more
    // informative to use NumericalStats when the field type is supported,
    // depending on the data.
    GooglePrivacyDlpV2beta1FieldId field = 1;
}

message GooglePrivacyDlpV2beta1CategoricalStatsHistogramBucket {
    // Total number of records in this bucket.
    string bucketSize = 1;
    // Sample of value frequencies in this bucket. The total number of
    // values returned per bucket is capped at 20.
    repeated GooglePrivacyDlpV2beta1ValueFrequency bucketValues = 2;
    // Lower bound on the value frequency of the values in this bucket.
    string valueFrequencyLowerBound = 3;
    // Upper bound on the value frequency of the values in this bucket.
    string valueFrequencyUpperBound = 4;
}

message GooglePrivacyDlpV2beta1CategoricalStatsResult {
    // Histogram of value frequencies in the column.
    repeated GooglePrivacyDlpV2beta1CategoricalStatsHistogramBucket valueFrequencyHistogramBuckets = 1;
}

message GooglePrivacyDlpV2beta1CategoryDescription {
    // Human readable form of the category name.
    string displayName = 1;
    // Internal name of the category.
    string name = 2;
}

message GooglePrivacyDlpV2beta1CharacterMaskConfig {
    // When masking a string, items in this list will be skipped when replacing.
    // For example, if your string is 555-555-5555 and you ask us to skip `-` and
    // mask 5 chars with * we would produce ***-*55-5555.
    repeated GooglePrivacyDlpV2beta1CharsToIgnore charactersToIgnore = 1;
    // Character to mask the sensitive values&mdash;for example, "*" for an
    // alphabetic string such as name, or "0" for a numeric string such as ZIP
    // code or credit card number. String must have length 1. If not supplied, we
    // will default to "*" for strings, 0 for digits.
    string maskingCharacter = 2;
    // Number of characters to mask. If not set, all matching chars will be
    // masked. Skipped characters do not count towards this tally.
    int32 numberToMask = 3;
    // Mask characters in reverse order. For example, if `masking_character` is
    // '0', number_to_mask is 14, and `reverse_order` is false, then
    // 1234-5678-9012-3456 -> 00000000000000-3456
    // If `masking_character` is '*', `number_to_mask` is 3, and `reverse_order`
    // is true, then 12345 -> 12***
    bool reverseOrder = 4;
}

message GooglePrivacyDlpV2beta1CharsToIgnore {
    string charactersToSkip = 1;
    enum GooglePrivacyDlpV2beta1CharsToIgnore_CommonCharactersToIgnore {
        GOOGLEPRIVACYDLPV2BETA1CHARSTOIGNORE_COMMONCHARACTERSTOIGNORE_CHARACTER_GROUP_UNSPECIFIED = 0;
        GOOGLEPRIVACYDLPV2BETA1CHARSTOIGNORE_COMMONCHARACTERSTOIGNORE_NUMERIC = 1;
        GOOGLEPRIVACYDLPV2BETA1CHARSTOIGNORE_COMMONCHARACTERSTOIGNORE_ALPHA_UPPER_CASE = 2;
        GOOGLEPRIVACYDLPV2BETA1CHARSTOIGNORE_COMMONCHARACTERSTOIGNORE_ALPHA_LOWER_CASE = 3;
        GOOGLEPRIVACYDLPV2BETA1CHARSTOIGNORE_COMMONCHARACTERSTOIGNORE_PUNCTUATION = 4;
        GOOGLEPRIVACYDLPV2BETA1CHARSTOIGNORE_COMMONCHARACTERSTOIGNORE_WHITESPACE = 5;
    }
    GooglePrivacyDlpV2beta1CharsToIgnore_CommonCharactersToIgnore commonCharactersToIgnore = 2;
}

message GooglePrivacyDlpV2beta1CloudStorageKey {
    // Path to the file.
    string filePath = 1;
    // Byte offset of the referenced data in the file.
    string startOffset = 2;
}

message GooglePrivacyDlpV2beta1CloudStorageOptions {
    GooglePrivacyDlpV2beta1FileSet fileSet = 1;
}

message GooglePrivacyDlpV2beta1CloudStoragePath {
    // The url, in the format of `gs://bucket/<path>`.
    string path = 1;
}

message GooglePrivacyDlpV2beta1Color {
    // The amount of blue in the color as a value in the interval [0, 1].
    float blue = 1;
    // The amount of green in the color as a value in the interval [0, 1].
    float green = 2;
    // The amount of red in the color as a value in the interval [0, 1].
    float red = 3;
}

message GooglePrivacyDlpV2beta1Condition {
    // Field within the record this condition is evaluated against. [required]
    GooglePrivacyDlpV2beta1FieldId field = 1;
    // Operator used to compare the field or info type to the value. [required]
    enum GooglePrivacyDlpV2beta1Condition_Operator {
        GOOGLEPRIVACYDLPV2BETA1CONDITION_OPERATOR_RELATIONAL_OPERATOR_UNSPECIFIED = 0;
        GOOGLEPRIVACYDLPV2BETA1CONDITION_OPERATOR_EQUAL_TO = 1;
        GOOGLEPRIVACYDLPV2BETA1CONDITION_OPERATOR_NOT_EQUAL_TO = 2;
        GOOGLEPRIVACYDLPV2BETA1CONDITION_OPERATOR_GREATER_THAN = 3;
        GOOGLEPRIVACYDLPV2BETA1CONDITION_OPERATOR_LESS_THAN = 4;
        GOOGLEPRIVACYDLPV2BETA1CONDITION_OPERATOR_GREATER_THAN_OR_EQUALS = 5;
        GOOGLEPRIVACYDLPV2BETA1CONDITION_OPERATOR_LESS_THAN_OR_EQUALS = 6;
        GOOGLEPRIVACYDLPV2BETA1CONDITION_OPERATOR_EXISTS = 7;
    }
    GooglePrivacyDlpV2beta1Condition_Operator operator = 2;
    // Value to compare against. [Required, except for `EXISTS` tests.]
    GooglePrivacyDlpV2beta1Value value = 3;
}

message GooglePrivacyDlpV2beta1Conditions {
    repeated GooglePrivacyDlpV2beta1Condition conditions = 1;
}

message GooglePrivacyDlpV2beta1ContentItem {
    // Content data to inspect or redact.
    string data = 1;
    // Structured content for inspection.
    GooglePrivacyDlpV2beta1Table table = 2;
    // Type of the content, as defined in Content-Type HTTP header.
    // Supported types are: all "text" types, octet streams, PNG images,
    // JPEG images.
    string type = 3;
    // String data to inspect or redact.
    string value = 4;
}

message GooglePrivacyDlpV2beta1CreateInspectOperationRequest {
    // Configuration for the inspector.
    GooglePrivacyDlpV2beta1InspectConfig inspectConfig = 1;
    // Additional configuration settings for long running operations.
    GooglePrivacyDlpV2beta1OperationConfig operationConfig = 2;
    // Optional location to store findings.
    GooglePrivacyDlpV2beta1OutputStorageConfig outputConfig = 3;
    // Specification of the data set to process.
    GooglePrivacyDlpV2beta1StorageConfig storageConfig = 4;
}

message GooglePrivacyDlpV2beta1CryptoHashConfig {
    // The key used by the hash function.
    GooglePrivacyDlpV2beta1CryptoKey cryptoKey = 1;
}

message GooglePrivacyDlpV2beta1CryptoKey {
    GooglePrivacyDlpV2beta1KmsWrappedCryptoKey kmsWrapped = 1;
    GooglePrivacyDlpV2beta1TransientCryptoKey transient = 2;
    GooglePrivacyDlpV2beta1UnwrappedCryptoKey unwrapped = 3;
}

message GooglePrivacyDlpV2beta1CryptoReplaceFfxFpeConfig {
    enum GooglePrivacyDlpV2beta1CryptoReplaceFfxFpeConfig_CommonAlphabet {
        GOOGLEPRIVACYDLPV2BETA1CRYPTOREPLACEFFXFPECONFIG_COMMONALPHABET_FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED = 0;
        GOOGLEPRIVACYDLPV2BETA1CRYPTOREPLACEFFXFPECONFIG_COMMONALPHABET_NUMERIC = 1;
        GOOGLEPRIVACYDLPV2BETA1CRYPTOREPLACEFFXFPECONFIG_COMMONALPHABET_HEXADECIMAL = 2;
        GOOGLEPRIVACYDLPV2BETA1CRYPTOREPLACEFFXFPECONFIG_COMMONALPHABET_UPPER_CASE_ALPHA_NUMERIC = 3;
        GOOGLEPRIVACYDLPV2BETA1CRYPTOREPLACEFFXFPECONFIG_COMMONALPHABET_ALPHA_NUMERIC = 4;
    }
    GooglePrivacyDlpV2beta1CryptoReplaceFfxFpeConfig_CommonAlphabet commonAlphabet = 1;
    // A context may be used for higher security since the same
    // identifier in two different contexts likely will be given a distinct
    // surrogate. The principle is that the likeliness is inversely related
    // to the ratio of the number of distinct identifiers per context over the
    // number of possible surrogates: As long as this ratio is small, the
    // likehood is large.
    // 
    // If the context is not set, a default tweak will be used.
    // If the context is set but:
    // 
    // 1. there is no record present when transforming a given value or
    // 1. the field is not present when transforming a given value,
    // 
    // a default tweak will be used.
    // 
    // Note that case (1) is expected when an `InfoTypeTransformation` is
    // applied to both structured and non-structured `ContentItem`s.
    // Currently, the referenced field may be of value type integer or string.
    // 
    // The tweak is constructed as a sequence of bytes in big endian byte order
    // such that:
    // 
    // - a 64 bit integer is encoded followed by a single byte of value 1
    // - a string is encoded in UTF-8 format followed by a single byte of value 2
    // 
    // This is also known as the 'tweak', as in tweakable encryption.
    GooglePrivacyDlpV2beta1FieldId context = 2;
    // The key used by the encryption algorithm. [required]
    GooglePrivacyDlpV2beta1CryptoKey cryptoKey = 3;
    // This is supported by mapping these to the alphanumeric characters
    // that the FFX mode natively supports. This happens before/after
    // encryption/decryption.
    // Each character listed must appear only once.
    // Number of characters must be in the range [2, 62].
    // This must be encoded as ASCII.
    // The order of characters does not matter.
    string customAlphabet = 4;
    // The native way to select the alphabet. Must be in the range [2, 62].
    int32 radix = 5;
}

message GooglePrivacyDlpV2beta1DatastoreKey {
    // Datastore entity key.
    GooglePrivacyDlpV2beta1Key entityKey = 1;
}

message GooglePrivacyDlpV2beta1DatastoreOptions {
    // The kind to process.
    GooglePrivacyDlpV2beta1KindExpression kind = 1;
    // A partition ID identifies a grouping of entities. The grouping is always
    // by project and namespace, however the namespace ID may be empty.
    GooglePrivacyDlpV2beta1PartitionId partitionId = 2;
    // Properties to scan. If none are specified, all properties will be scanned
    // by default.
    repeated GooglePrivacyDlpV2beta1Projection projection = 3;
}

message GooglePrivacyDlpV2beta1DeidentificationSummary {
    // Transformations applied to the dataset.
    repeated GooglePrivacyDlpV2beta1TransformationSummary transformationSummaries = 1;
    // Total size in bytes that were transformed in some way.
    string transformedBytes = 2;
}

message GooglePrivacyDlpV2beta1DeidentifyConfig {
    // Treat the dataset as free-form text and apply the same free text
    // transformation everywhere.
    GooglePrivacyDlpV2beta1InfoTypeTransformations infoTypeTransformations = 1;
    // Treat the dataset as structured. Transformations can be applied to
    // specific locations within structured datasets, such as transforming
    // a column within a table.
    GooglePrivacyDlpV2beta1RecordTransformations recordTransformations = 2;
}

message GooglePrivacyDlpV2beta1DeidentifyContentRequest {
    // Configuration for the de-identification of the list of content items.
    GooglePrivacyDlpV2beta1DeidentifyConfig deidentifyConfig = 1;
    // Configuration for the inspector.
    GooglePrivacyDlpV2beta1InspectConfig inspectConfig = 2;
    // The list of items to inspect. Up to 100 are allowed per request.
    // All items will be treated as text/*.
    repeated GooglePrivacyDlpV2beta1ContentItem items = 3;
}

message GooglePrivacyDlpV2beta1DeidentifyContentResponse {
    repeated GooglePrivacyDlpV2beta1ContentItem items = 1;
    // A review of the transformations that took place for each item.
    repeated GooglePrivacyDlpV2beta1DeidentificationSummary summaries = 2;
}

message GooglePrivacyDlpV2beta1EntityId {
    // Composite key indicating which field contains the entity identifier.
    GooglePrivacyDlpV2beta1FieldId field = 1;
}

message GooglePrivacyDlpV2beta1Expressions {
    GooglePrivacyDlpV2beta1Conditions conditions = 1;
    // The operator to apply to the result of conditions. Default and currently
    // only supported value is `AND`.
    enum GooglePrivacyDlpV2beta1Expressions_LogicalOperator {
        GOOGLEPRIVACYDLPV2BETA1EXPRESSIONS_LOGICALOPERATOR_LOGICAL_OPERATOR_UNSPECIFIED = 0;
        GOOGLEPRIVACYDLPV2BETA1EXPRESSIONS_LOGICALOPERATOR_AND = 1;
    }
    GooglePrivacyDlpV2beta1Expressions_LogicalOperator logicalOperator = 2;
}

message GooglePrivacyDlpV2beta1FieldId {
    // Name describing the field.
    string columnName = 1;
}

message GooglePrivacyDlpV2beta1FieldTransformation {
    // Only apply the transformation if the condition evaluates to true for the
    // given `RecordCondition`. The conditions are allowed to reference fields
    // that are not used in the actual transformation. [optional]
    // 
    // Example Use Cases:
    // 
    // - Apply a different bucket transformation to an age column if the zip code
    // column for the same record is within a specific range.
    // - Redact a field if the date of birth field is greater than 85.
    GooglePrivacyDlpV2beta1RecordCondition condition = 1;
    // Input field(s) to apply the transformation to. [required]
    repeated GooglePrivacyDlpV2beta1FieldId fields = 2;
    // Treat the contents of the field as free text, and selectively
    // transform content that matches an `InfoType`.
    GooglePrivacyDlpV2beta1InfoTypeTransformations infoTypeTransformations = 3;
    // Apply the transformation to the entire field.
    GooglePrivacyDlpV2beta1PrimitiveTransformation primitiveTransformation = 4;
}

message GooglePrivacyDlpV2beta1FileSet {
    // The url, in the format `gs://<bucket>/<path>`. Trailing wildcard in the
    // path is allowed.
    string url = 1;
}

message GooglePrivacyDlpV2beta1Finding {
    // Timestamp when finding was detected.
    string createTime = 1;
    // The specific type of info the string might be.
    GooglePrivacyDlpV2beta1InfoType infoType = 2;
    // Estimate of how likely it is that the info_type is correct.
    enum GooglePrivacyDlpV2beta1Finding_Likelihood {
        GOOGLEPRIVACYDLPV2BETA1FINDING_LIKELIHOOD_LIKELIHOOD_UNSPECIFIED = 0;
        GOOGLEPRIVACYDLPV2BETA1FINDING_LIKELIHOOD_VERY_UNLIKELY = 1;
        GOOGLEPRIVACYDLPV2BETA1FINDING_LIKELIHOOD_UNLIKELY = 2;
        GOOGLEPRIVACYDLPV2BETA1FINDING_LIKELIHOOD_POSSIBLE = 3;
        GOOGLEPRIVACYDLPV2BETA1FINDING_LIKELIHOOD_LIKELY = 4;
        GOOGLEPRIVACYDLPV2BETA1FINDING_LIKELIHOOD_VERY_LIKELY = 5;
    }
    GooglePrivacyDlpV2beta1Finding_Likelihood likelihood = 3;
    // Location of the info found.
    GooglePrivacyDlpV2beta1Location location = 4;
    // The specific string that may be potentially sensitive info.
    string quote = 5;
}

message GooglePrivacyDlpV2beta1FixedSizeBucketingConfig {
    // Size of each bucket (except for minimum and maximum buckets). So if
    // `lower_bound` = 10, `upper_bound` = 89, and `bucket_size` = 10, then the
    // following buckets would be used: -10, 10-20, 20-30, 30-40, 40-50, 50-60,
    // 60-70, 70-80, 80-89, 89+. Precision up to 2 decimals works. [Required].
    double bucketSize = 1;
    // Lower bound value of buckets. All values less than `lower_bound` are
    // grouped together into a single bucket; for example if `lower_bound` = 10,
    // then all values less than 10 are replaced with the value “-10”. [Required].
    GooglePrivacyDlpV2beta1Value lowerBound = 2;
    // Upper bound value of buckets. All values greater than upper_bound are
    // grouped together into a single bucket; for example if `upper_bound` = 89,
    // then all values greater than 89 are replaced with the value “89+”.
    // [Required].
    GooglePrivacyDlpV2beta1Value upperBound = 3;
}

message GooglePrivacyDlpV2beta1ImageLocation {
    // Height of the bounding box in pixels.
    int32 height = 1;
    // Left coordinate of the bounding box. (0,0) is upper left.
    int32 left = 2;
    // Top coordinate of the bounding box. (0,0) is upper left.
    int32 top = 3;
    // Width of the bounding box in pixels.
    int32 width = 4;
}

message GooglePrivacyDlpV2beta1ImageRedactionConfig {
    // Only one per info_type should be provided per request. If not
    // specified, and redact_all_text is false, the DLP API will redact all
    // text that it matches against all info_types that are found, but not
    // specified in another ImageRedactionConfig.
    GooglePrivacyDlpV2beta1InfoType infoType = 1;
    // If true, all text found in the image, regardless whether it matches an
    // info_type, is redacted.
    bool redactAllText = 2;
    // The color to use when redacting content from an image. If not specified,
    // the default is black.
    GooglePrivacyDlpV2beta1Color redactionColor = 3;
}

message GooglePrivacyDlpV2beta1InfoType {
    // Name of the information type.
    string name = 1;
}

message GooglePrivacyDlpV2beta1InfoTypeDescription {
    // List of categories this infoType belongs to.
    repeated GooglePrivacyDlpV2beta1CategoryDescription categories = 1;
    // Human readable form of the infoType name.
    string displayName = 2;
    // Internal name of the infoType.
    string name = 3;
}

message GooglePrivacyDlpV2beta1InfoTypeLimit {
    // Type of information the findings limit applies to. Only one limit per
    // info_type should be provided. If InfoTypeLimit does not have an
    // info_type, the DLP API applies the limit against all info_types that are
    // found but not specified in another InfoTypeLimit.
    GooglePrivacyDlpV2beta1InfoType infoType = 1;
    // Max findings limit for the given infoType.
    int32 maxFindings = 2;
}

message GooglePrivacyDlpV2beta1InfoTypeStatistics {
    // Number of findings for this info type.
    string count = 1;
    // The type of finding this stat is for.
    GooglePrivacyDlpV2beta1InfoType infoType = 2;
}

message GooglePrivacyDlpV2beta1InfoTypeTransformation {
    // Info types to apply the transformation to. Empty list will match all
    // available info types for this transformation.
    repeated GooglePrivacyDlpV2beta1InfoType infoTypes = 1;
    // Primitive transformation to apply to the info type. [required]
    GooglePrivacyDlpV2beta1PrimitiveTransformation primitiveTransformation = 2;
}

message GooglePrivacyDlpV2beta1InfoTypeTransformations {
    // Transformation for each info type. Cannot specify more than one
    // for a given info type. [required]
    repeated GooglePrivacyDlpV2beta1InfoTypeTransformation transformations = 1;
}

message GooglePrivacyDlpV2beta1InspectConfig {
    // When true, excludes type information of the findings.
    bool excludeTypes = 1;
    // When true, a contextual quote from the data that triggered a finding is
    // included in the response; see Finding.quote.
    bool includeQuote = 2;
    // Configuration of findings limit given for specified info types.
    repeated GooglePrivacyDlpV2beta1InfoTypeLimit infoTypeLimits = 3;
    // Restricts what info_types to look for. The values must correspond to
    // InfoType values returned by ListInfoTypes or found in documentation.
    // Empty info_types runs all enabled detectors.
    repeated GooglePrivacyDlpV2beta1InfoType infoTypes = 4;
    // Limits the number of findings per content item or long running operation.
    int32 maxFindings = 5;
    // Only returns findings equal or above this threshold.
    enum GooglePrivacyDlpV2beta1InspectConfig_MinLikelihood {
        GOOGLEPRIVACYDLPV2BETA1INSPECTCONFIG_MINLIKELIHOOD_LIKELIHOOD_UNSPECIFIED = 0;
        GOOGLEPRIVACYDLPV2BETA1INSPECTCONFIG_MINLIKELIHOOD_VERY_UNLIKELY = 1;
        GOOGLEPRIVACYDLPV2BETA1INSPECTCONFIG_MINLIKELIHOOD_UNLIKELY = 2;
        GOOGLEPRIVACYDLPV2BETA1INSPECTCONFIG_MINLIKELIHOOD_POSSIBLE = 3;
        GOOGLEPRIVACYDLPV2BETA1INSPECTCONFIG_MINLIKELIHOOD_LIKELY = 4;
        GOOGLEPRIVACYDLPV2BETA1INSPECTCONFIG_MINLIKELIHOOD_VERY_LIKELY = 5;
    }
    GooglePrivacyDlpV2beta1InspectConfig_MinLikelihood minLikelihood = 6;
}

message GooglePrivacyDlpV2beta1InspectContentRequest {
    // Configuration for the inspector.
    GooglePrivacyDlpV2beta1InspectConfig inspectConfig = 1;
    // The list of items to inspect. Items in a single request are
    // considered "related" unless inspect_config.independent_inputs is true.
    // Up to 100 are allowed per request.
    repeated GooglePrivacyDlpV2beta1ContentItem items = 2;
}

message GooglePrivacyDlpV2beta1InspectContentResponse {
    // Each content_item from the request has a result in this list, in the
    // same order as the request.
    repeated GooglePrivacyDlpV2beta1InspectResult results = 1;
}

message GooglePrivacyDlpV2beta1InspectOperationMetadata {
    // The time which this request was started.
    string createTime = 1;
    repeated GooglePrivacyDlpV2beta1InfoTypeStatistics infoTypeStats = 2;
    // Total size in bytes that were processed.
    string processedBytes = 3;
    // The inspect config used to create the Operation.
    GooglePrivacyDlpV2beta1InspectConfig requestInspectConfig = 4;
    // Optional location to store findings.
    GooglePrivacyDlpV2beta1OutputStorageConfig requestOutputConfig = 5;
    // The storage config used to create the Operation.
    GooglePrivacyDlpV2beta1StorageConfig requestStorageConfig = 6;
    // Estimate of the number of bytes to process.
    string totalEstimatedBytes = 7;
}

message GooglePrivacyDlpV2beta1InspectOperationResult {
    // The server-assigned name, which is only unique within the same service that
    // originally returns it. If you use the default HTTP mapping, the
    // `name` should have the format of `inspect/results/{id}`.
    string name = 1;
}

message GooglePrivacyDlpV2beta1InspectResult {
    // List of findings for an item.
    repeated GooglePrivacyDlpV2beta1Finding findings = 1;
    // If true, then this item might have more findings than were returned,
    // and the findings returned are an arbitrary subset of all findings.
    // The findings list might be truncated because the input items were too
    // large, or because the server reached the maximum amount of resources
    // allowed for a single API call. For best results, divide the input into
    // smaller batches.
    bool findingsTruncated = 2;
}

message GooglePrivacyDlpV2beta1KAnonymityConfig {
    // Optional message indicating that each distinct `EntityId` should not
    // contribute to the k-anonymity count more than once per equivalence class.
    GooglePrivacyDlpV2beta1EntityId entityId = 1;
    // Set of fields to compute k-anonymity over. When multiple fields are
    // specified, they are considered a single composite key. Structs and
    // repeated data types are not supported; however, nested fields are
    // supported so long as they are not structs themselves or nested within
    // a repeated field.
    repeated GooglePrivacyDlpV2beta1FieldId quasiIds = 2;
}

message GooglePrivacyDlpV2beta1KAnonymityEquivalenceClass {
    // Size of the equivalence class, for example number of rows with the
    // above set of values.
    string equivalenceClassSize = 1;
    // Set of values defining the equivalence class. One value per
    // quasi-identifier column in the original KAnonymity metric message.
    // The order is always the same as the original request.
    repeated GooglePrivacyDlpV2beta1Value quasiIdsValues = 2;
}

message GooglePrivacyDlpV2beta1KAnonymityHistogramBucket {
    // Total number of records in this bucket.
    string bucketSize = 1;
    // Sample of equivalence classes in this bucket. The total number of
    // classes returned per bucket is capped at 20.
    repeated GooglePrivacyDlpV2beta1KAnonymityEquivalenceClass bucketValues = 2;
    // Lower bound on the size of the equivalence classes in this bucket.
    string equivalenceClassSizeLowerBound = 3;
    // Upper bound on the size of the equivalence classes in this bucket.
    string equivalenceClassSizeUpperBound = 4;
}

message GooglePrivacyDlpV2beta1KAnonymityResult {
    // Histogram of k-anonymity equivalence classes.
    repeated GooglePrivacyDlpV2beta1KAnonymityHistogramBucket equivalenceClassHistogramBuckets = 1;
}

message GooglePrivacyDlpV2beta1Key {
    // Entities are partitioned into subsets, currently identified by a project
    // ID and namespace ID.
    // Queries are scoped to a single partition.
    GooglePrivacyDlpV2beta1PartitionId partitionId = 1;
    // The entity path.
    // An entity path consists of one or more elements composed of a kind and a
    // string or numerical identifier, which identify entities. The first
    // element identifies a _root entity_, the second element identifies
    // a _child_ of the root entity, the third element identifies a child of the
    // second entity, and so forth. The entities identified by all prefixes of
    // the path are called the element's _ancestors_.
    // 
    // A path can never be empty, and a path can have at most 100 elements.
    repeated GooglePrivacyDlpV2beta1PathElement path = 2;
}

message GooglePrivacyDlpV2beta1KindExpression {
    // The name of the kind.
    string name = 1;
}

message GooglePrivacyDlpV2beta1KmsWrappedCryptoKey {
    // The resource name of the KMS CryptoKey to use for unwrapping. [required]
    string cryptoKeyName = 1;
    // The wrapped data crypto key. [required]
    string wrappedKey = 2;
}

message GooglePrivacyDlpV2beta1LDiversityConfig {
    // Set of quasi-identifiers indicating how equivalence classes are
    // defined for the l-diversity computation. When multiple fields are
    // specified, they are considered a single composite key.
    repeated GooglePrivacyDlpV2beta1FieldId quasiIds = 1;
    // Sensitive field for computing the l-value.
    GooglePrivacyDlpV2beta1FieldId sensitiveAttribute = 2;
}

message GooglePrivacyDlpV2beta1LDiversityEquivalenceClass {
    // Size of the k-anonymity equivalence class.
    string equivalenceClassSize = 1;
    // Number of distinct sensitive values in this equivalence class.
    string numDistinctSensitiveValues = 2;
    // Quasi-identifier values defining the k-anonymity equivalence
    // class. The order is always the same as the original request.
    repeated GooglePrivacyDlpV2beta1Value quasiIdsValues = 3;
    // Estimated frequencies of top sensitive values.
    repeated GooglePrivacyDlpV2beta1ValueFrequency topSensitiveValues = 4;
}

message GooglePrivacyDlpV2beta1LDiversityHistogramBucket {
    // Total number of records in this bucket.
    string bucketSize = 1;
    // Sample of equivalence classes in this bucket. The total number of
    // classes returned per bucket is capped at 20.
    repeated GooglePrivacyDlpV2beta1LDiversityEquivalenceClass bucketValues = 2;
    // Lower bound on the sensitive value frequencies of the equivalence
    // classes in this bucket.
    string sensitiveValueFrequencyLowerBound = 3;
    // Upper bound on the sensitive value frequencies of the equivalence
    // classes in this bucket.
    string sensitiveValueFrequencyUpperBound = 4;
}

message GooglePrivacyDlpV2beta1LDiversityResult {
    // Histogram of l-diversity equivalence class sensitive value frequencies.
    repeated GooglePrivacyDlpV2beta1LDiversityHistogramBucket sensitiveValueFrequencyHistogramBuckets = 1;
}

message GooglePrivacyDlpV2beta1ListInfoTypesResponse {
    // Set of sensitive info types belonging to a category.
    repeated GooglePrivacyDlpV2beta1InfoTypeDescription infoTypes = 1;
}

message GooglePrivacyDlpV2beta1ListInspectFindingsResponse {
    // If not empty, indicates that there may be more results that match the
    // request; this value should be passed in a new `ListInspectFindingsRequest`.
    string nextPageToken = 1;
    // The results.
    GooglePrivacyDlpV2beta1InspectResult result = 2;
}

message GooglePrivacyDlpV2beta1ListRootCategoriesResponse {
    // List of all into type categories supported by the API.
    repeated GooglePrivacyDlpV2beta1CategoryDescription categories = 1;
}

message GooglePrivacyDlpV2beta1Location {
    // Zero-based byte offsets within a content item.
    GooglePrivacyDlpV2beta1Range byteRange = 1;
    // Character offsets within a content item, included when content type
    // is a text. Default charset assumed to be UTF-8.
    GooglePrivacyDlpV2beta1Range codepointRange = 2;
    // Field id of the field containing the finding.
    GooglePrivacyDlpV2beta1FieldId fieldId = 3;
    // Location within an image's pixels.
    repeated GooglePrivacyDlpV2beta1ImageLocation imageBoxes = 4;
    // Key of the finding.
    GooglePrivacyDlpV2beta1RecordKey recordKey = 5;
    // Location within a `ContentItem.Table`.
    GooglePrivacyDlpV2beta1TableLocation tableLocation = 6;
}

message GooglePrivacyDlpV2beta1NumericalStatsConfig {
    // Field to compute numerical stats on. Supported types are
    // integer, float, date, datetime, timestamp, time.
    GooglePrivacyDlpV2beta1FieldId field = 1;
}

message GooglePrivacyDlpV2beta1NumericalStatsResult {
    // Maximum value appearing in the column.
    GooglePrivacyDlpV2beta1Value maxValue = 1;
    // Minimum value appearing in the column.
    GooglePrivacyDlpV2beta1Value minValue = 2;
    // List of 99 values that partition the set of field values into 100 equal
    // sized buckets.
    repeated GooglePrivacyDlpV2beta1Value quantileValues = 3;
}

message GooglePrivacyDlpV2beta1OperationConfig {
    // Max number of findings per file, Datastore entity, or database row.
    string maxItemFindings = 1;
}

message GooglePrivacyDlpV2beta1OutputStorageConfig {
    // The path to a Google Cloud Storage location to store output.
    // The bucket must already exist and
    // the Google APIs service account for DLP must have write permission to
    // write to the given bucket.
    // Results are split over multiple csv files with each file name matching
    // the pattern "[operation_id]_[count].csv", for example
    // `3094877188788974909_1.csv`. The `operation_id` matches the
    // identifier for the Operation, and the `count` is a counter used for
    // tracking the number of files written.
    // 
    // The CSV file(s) contain the following columns regardless of storage type
    // scanned:
    // - id
    // - info_type
    // - likelihood
    // - byte size of finding
    // - quote
    // - timestamp
    // 
    // For Cloud Storage the next columns are:
    // 
    // - file_path
    // - start_offset
    // 
    // For Cloud Datastore the next columns are:
    // 
    // - project_id
    // - namespace_id
    // - path
    // - column_name
    // - offset
    // 
    // For BigQuery the next columns are:
    // 
    // - row_number
    // - project_id
    // - dataset_id
    // - table_id
    GooglePrivacyDlpV2beta1CloudStoragePath storagePath = 1;
    // Store findings in a new table in the dataset.
    GooglePrivacyDlpV2beta1BigQueryTable table = 2;
}

message GooglePrivacyDlpV2beta1PartitionId {
    // If not empty, the ID of the namespace to which the entities belong.
    string namespaceId = 1;
    // The ID of the project to which the entities belong.
    string projectId = 2;
}

message GooglePrivacyDlpV2beta1PathElement {
    // The auto-allocated ID of the entity.
    // Never equal to zero. Values less than zero are discouraged and may not
    // be supported in the future.
    string id = 1;
    // The kind of the entity.
    // A kind matching regex `__.*__` is reserved/read-only.
    // A kind must not contain more than 1500 bytes when UTF-8 encoded.
    // Cannot be `""`.
    string kind = 2;
    // The name of the entity.
    // A name matching regex `__.*__` is reserved/read-only.
    // A name must not be more than 1500 bytes when UTF-8 encoded.
    // Cannot be `""`.
    string name = 3;
}

message GooglePrivacyDlpV2beta1PrimitiveTransformation {
    GooglePrivacyDlpV2beta1BucketingConfig bucketingConfig = 1;
    GooglePrivacyDlpV2beta1CharacterMaskConfig characterMaskConfig = 2;
    GooglePrivacyDlpV2beta1CryptoHashConfig cryptoHashConfig = 3;
    GooglePrivacyDlpV2beta1CryptoReplaceFfxFpeConfig cryptoReplaceFfxFpeConfig = 4;
    GooglePrivacyDlpV2beta1FixedSizeBucketingConfig fixedSizeBucketingConfig = 5;
    GooglePrivacyDlpV2beta1RedactConfig redactConfig = 6;
    GooglePrivacyDlpV2beta1ReplaceValueConfig replaceConfig = 7;
    GooglePrivacyDlpV2beta1ReplaceWithInfoTypeConfig replaceWithInfoTypeConfig = 8;
    GooglePrivacyDlpV2beta1TimePartConfig timePartConfig = 9;
}

message GooglePrivacyDlpV2beta1PrivacyMetric {
    GooglePrivacyDlpV2beta1CategoricalStatsConfig categoricalStatsConfig = 1;
    GooglePrivacyDlpV2beta1KAnonymityConfig kAnonymityConfig = 2;
    GooglePrivacyDlpV2beta1LDiversityConfig lDiversityConfig = 3;
    GooglePrivacyDlpV2beta1NumericalStatsConfig numericalStatsConfig = 4;
}

message GooglePrivacyDlpV2beta1Projection {
    // The property to project.
    GooglePrivacyDlpV2beta1PropertyReference property = 1;
}

message GooglePrivacyDlpV2beta1PropertyReference {
    // The name of the property.
    // If name includes "."s, it may be interpreted as a property name path.
    string name = 1;
}

message GooglePrivacyDlpV2beta1Range {
    // Index of the last character of the range (exclusive).
    string end = 1;
    // Index of the first character of the range (inclusive).
    string start = 2;
}

message GooglePrivacyDlpV2beta1RecordCondition {
    GooglePrivacyDlpV2beta1Expressions expressions = 1;
}

message GooglePrivacyDlpV2beta1RecordKey {
    GooglePrivacyDlpV2beta1CloudStorageKey cloudStorageKey = 1;
    GooglePrivacyDlpV2beta1DatastoreKey datastoreKey = 2;
}

message GooglePrivacyDlpV2beta1RecordSuppression {
    GooglePrivacyDlpV2beta1RecordCondition condition = 1;
}

message GooglePrivacyDlpV2beta1RecordTransformations {
    // Transform the record by applying various field transformations.
    repeated GooglePrivacyDlpV2beta1FieldTransformation fieldTransformations = 1;
    // Configuration defining which records get suppressed entirely. Records that
    // match any suppression rule are omitted from the output [optional].
    repeated GooglePrivacyDlpV2beta1RecordSuppression recordSuppressions = 2;
}

message GooglePrivacyDlpV2beta1RedactConfig {
}

message GooglePrivacyDlpV2beta1RedactContentRequest {
    // The configuration for specifying what content to redact from images.
    repeated GooglePrivacyDlpV2beta1ImageRedactionConfig imageRedactionConfigs = 1;
    // Configuration for the inspector.
    GooglePrivacyDlpV2beta1InspectConfig inspectConfig = 2;
    // The list of items to inspect. Up to 100 are allowed per request.
    repeated GooglePrivacyDlpV2beta1ContentItem items = 3;
    // The strings to replace findings text findings with. Must specify at least
    // one of these or one ImageRedactionConfig if redacting images.
    repeated GooglePrivacyDlpV2beta1ReplaceConfig replaceConfigs = 4;
}

message GooglePrivacyDlpV2beta1RedactContentResponse {
    // The redacted content.
    repeated GooglePrivacyDlpV2beta1ContentItem items = 1;
}

message GooglePrivacyDlpV2beta1ReplaceConfig {
    // Type of information to replace. Only one ReplaceConfig per info_type
    // should be provided. If ReplaceConfig does not have an info_type, the DLP
    // API matches it against all info_types that are found but not specified in
    // another ReplaceConfig.
    GooglePrivacyDlpV2beta1InfoType infoType = 1;
    // Content replacing sensitive information of given type. Max 256 chars.
    string replaceWith = 2;
}

message GooglePrivacyDlpV2beta1ReplaceValueConfig {
    // Value to replace it with.
    GooglePrivacyDlpV2beta1Value newValue = 1;
}

message GooglePrivacyDlpV2beta1ReplaceWithInfoTypeConfig {
}

message GooglePrivacyDlpV2beta1RiskAnalysisOperationMetadata {
    // The time which this request was started.
    string createTime = 1;
    // Privacy metric to compute.
    GooglePrivacyDlpV2beta1PrivacyMetric requestedPrivacyMetric = 2;
    // Input dataset to compute metrics over.
    GooglePrivacyDlpV2beta1BigQueryTable requestedSourceTable = 3;
}

message GooglePrivacyDlpV2beta1RiskAnalysisOperationResult {
    GooglePrivacyDlpV2beta1CategoricalStatsResult categoricalStatsResult = 1;
    GooglePrivacyDlpV2beta1KAnonymityResult kAnonymityResult = 2;
    GooglePrivacyDlpV2beta1LDiversityResult lDiversityResult = 3;
    GooglePrivacyDlpV2beta1NumericalStatsResult numericalStatsResult = 4;
}

message GooglePrivacyDlpV2beta1Row {
    repeated GooglePrivacyDlpV2beta1Value values = 1;
}

message GooglePrivacyDlpV2beta1StorageConfig {
    // BigQuery options specification.
    GooglePrivacyDlpV2beta1BigQueryOptions bigQueryOptions = 1;
    // Google Cloud Storage options specification.
    GooglePrivacyDlpV2beta1CloudStorageOptions cloudStorageOptions = 2;
    // Google Cloud Datastore options specification.
    GooglePrivacyDlpV2beta1DatastoreOptions datastoreOptions = 3;
}

message GooglePrivacyDlpV2beta1SummaryResult {
    enum GooglePrivacyDlpV2beta1SummaryResult_Code {
        GOOGLEPRIVACYDLPV2BETA1SUMMARYRESULT_CODE_TRANSFORMATION_RESULT_CODE_UNSPECIFIED = 0;
        GOOGLEPRIVACYDLPV2BETA1SUMMARYRESULT_CODE_SUCCESS = 1;
        GOOGLEPRIVACYDLPV2BETA1SUMMARYRESULT_CODE_ERROR = 2;
    }
    GooglePrivacyDlpV2beta1SummaryResult_Code code = 1;
    string count = 2;
    // A place for warnings or errors to show up if a transformation didn't
    // work as expected.
    string details = 3;
}

message GooglePrivacyDlpV2beta1Table {
    repeated GooglePrivacyDlpV2beta1FieldId headers = 1;
    repeated GooglePrivacyDlpV2beta1Row rows = 2;
}

message GooglePrivacyDlpV2beta1TableLocation {
    // The zero-based index of the row where the finding is located.
    string rowIndex = 1;
}

message GooglePrivacyDlpV2beta1TimePartConfig {
    enum GooglePrivacyDlpV2beta1TimePartConfig_PartToExtract {
        GOOGLEPRIVACYDLPV2BETA1TIMEPARTCONFIG_PARTTOEXTRACT_TIME_PART_UNSPECIFIED = 0;
        GOOGLEPRIVACYDLPV2BETA1TIMEPARTCONFIG_PARTTOEXTRACT_YEAR = 1;
        GOOGLEPRIVACYDLPV2BETA1TIMEPARTCONFIG_PARTTOEXTRACT_MONTH = 2;
        GOOGLEPRIVACYDLPV2BETA1TIMEPARTCONFIG_PARTTOEXTRACT_DAY_OF_MONTH = 3;
        GOOGLEPRIVACYDLPV2BETA1TIMEPARTCONFIG_PARTTOEXTRACT_DAY_OF_WEEK = 4;
        GOOGLEPRIVACYDLPV2BETA1TIMEPARTCONFIG_PARTTOEXTRACT_WEEK_OF_YEAR = 5;
        GOOGLEPRIVACYDLPV2BETA1TIMEPARTCONFIG_PARTTOEXTRACT_HOUR_OF_DAY = 6;
    }
    GooglePrivacyDlpV2beta1TimePartConfig_PartToExtract partToExtract = 1;
}

message GooglePrivacyDlpV2beta1TransformationSummary {
    // Set if the transformation was limited to a specific FieldId.
    GooglePrivacyDlpV2beta1FieldId field = 1;
    // The field transformation that was applied. This list will contain
    // multiple only in the case of errors.
    repeated GooglePrivacyDlpV2beta1FieldTransformation fieldTransformations = 2;
    // Set if the transformation was limited to a specific info_type.
    GooglePrivacyDlpV2beta1InfoType infoType = 3;
    // The specific suppression option these stats apply to.
    GooglePrivacyDlpV2beta1RecordSuppression recordSuppress = 4;
    repeated GooglePrivacyDlpV2beta1SummaryResult results = 5;
    // The specific transformation these stats apply to.
    GooglePrivacyDlpV2beta1PrimitiveTransformation transformation = 6;
}

message GooglePrivacyDlpV2beta1TransientCryptoKey {
    // Name of the key. [required]
    // This is an arbitrary string used to differentiate different keys.
    // A unique key is generated per name: two separate `TransientCryptoKey`
    // protos share the same generated key if their names are the same.
    // When the data crypto key is generated, this name is not used in any way
    // (repeating the api call will result in a different key being generated).
    string name = 1;
}

message GooglePrivacyDlpV2beta1UnwrappedCryptoKey {
    // The AES 128/192/256 bit key. [required]
    string key = 1;
}

message GooglePrivacyDlpV2beta1Value {
    bool booleanValue = 1;
    GoogleTypeDate dateValue = 2;
    double floatValue = 3;
    string integerValue = 4;
    string stringValue = 5;
    GoogleTypeTimeOfDay timeValue = 6;
    string timestampValue = 7;
}

message GooglePrivacyDlpV2beta1ValueFrequency {
    // How many times the value is contained in the field.
    string count = 1;
    // A value contained in the field in question.
    GooglePrivacyDlpV2beta1Value value = 2;
}

message GoogleProtobufEmpty {
}

message GoogleRpcStatus {
    // The status code, which should be an enum value of google.rpc.Code.
    int32 code = 1;
    // A list of messages that carry the error details.  There is a common set of
    // message types for APIs to use.
    message Detail {
    }
    repeated Detail details = 2;
    // A developer-facing error message, which should be in English. Any
    // user-facing error message should be localized and sent in the
    // google.rpc.Status.details field, or localized by the client.
    string message = 3;
}

message GoogleTypeDate {
    // Day of month. Must be from 1 to 31 and valid for the year and month, or 0
    // if specifying a year/month where the day is not significant.
    int32 day = 1;
    // Month of year. Must be from 1 to 12.
    int32 month = 2;
    // Year of date. Must be from 1 to 9999, or 0 if specifying a date without
    // a year.
    int32 year = 3;
}

message GoogleTypeTimeOfDay {
    // Hours of day in 24 hour format. Should be from 0 to 23. An API may choose
    // to allow the value "24:00:00" for scenarios like business closing time.
    int32 hours = 1;
    // Minutes of hour of day. Must be from 0 to 59.
    int32 minutes = 2;
    // Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
    int32 nanos = 3;
    // Seconds of minutes of the time. Must normally be from 0 to 59. An API may
    // allow the value 60 if it allows leap-seconds.
    int32 seconds = 4;
}

enum Alt {
    JSON = 0;
    MEDIA = 1;
    PROTO = 2;
}

service DLPService {
    // De-identifies potentially sensitive info from a list of strings.
    // This method has limits on input size and output size.
    rpc PostV2beta1Content:Deidentify(PostV2beta1Content:DeidentifyRequest) returns (GooglePrivacyDlpV2beta1DeidentifyContentResponse) {
      option (google.api.http) = {
        post: "//v2beta1/content:deidentify"
        body: "body"
      };
    }
    // Finds potentially sensitive info in a list of strings.
    // This method has limits on input size, processing time, and output size.
    rpc PostV2beta1Content:Inspect(PostV2beta1Content:InspectRequest) returns (GooglePrivacyDlpV2beta1InspectContentResponse) {
      option (google.api.http) = {
        post: "//v2beta1/content:inspect"
        body: "body"
      };
    }
    // Redacts potentially sensitive info from a list of strings.
    // This method has limits on input size, processing time, and output size.
    rpc PostV2beta1Content:Redact(PostV2beta1Content:RedactRequest) returns (GooglePrivacyDlpV2beta1RedactContentResponse) {
      option (google.api.http) = {
        post: "//v2beta1/content:redact"
        body: "body"
      };
    }
    // Schedules a job to compute risk analysis metrics over content in a Google
    // Cloud Platform repository.
    rpc PostV2beta1DataSource:Analyze(PostV2beta1DataSource:AnalyzeRequest) returns (GoogleLongrunningOperation) {
      option (google.api.http) = {
        post: "//v2beta1/dataSource:analyze"
        body: "body"
      };
    }
    // Schedules a job scanning content in a Google Cloud Platform data
    // repository.
    rpc PostV2beta1InspectOperations(PostV2beta1InspectOperationsRequest) returns (GoogleLongrunningOperation) {
      option (google.api.http) = {
        post: "//v2beta1/inspect/operations"
        body: "body"
      };
    }
    // Returns the list of root categories of sensitive information.
    rpc GetV2beta1RootCategories(GetV2beta1RootCategoriesRequest) returns (GooglePrivacyDlpV2beta1ListRootCategoriesResponse) {
      option (google.api.http) = {
        get: "//v2beta1/rootCategories"
      };
    }
    // Returns sensitive information types for given category.
    rpc GetV2beta1RootCategoriesCategoryInfoTypes(GetV2beta1RootCategoriesCategoryInfoTypesRequest) returns (GooglePrivacyDlpV2beta1ListInfoTypesResponse) {
      option (google.api.http) = {
        get: "//v2beta1/rootCategories/{category}/infoTypes"
      };
    }
    // Gets the latest state of a long-running operation.  Clients can use this
    // method to poll the operation result at intervals as recommended by the API
    // service.
    rpc GetV2beta1Name(GetV2beta1NameRequest) returns (GoogleLongrunningOperation) {
      option (google.api.http) = {
        get: "//v2beta1/{name}"
      };
    }
    // This method is not supported and the server returns `UNIMPLEMENTED`.
    rpc DeleteV2beta1Name(DeleteV2beta1NameRequest) returns (GoogleProtobufEmpty) {
      option (google.api.http) = {
        delete: "//v2beta1/{name}"
      };
    }
    // Returns list of results for given inspect operation result set id.
    rpc GetV2beta1NameFindings(GetV2beta1NameFindingsRequest) returns (GooglePrivacyDlpV2beta1ListInspectFindingsResponse) {
      option (google.api.http) = {
        get: "//v2beta1/{name}/findings"
      };
    }
    // Cancels an operation. Use the `inspect.operations.get` to check whether the cancellation succeeded or the operation completed despite cancellation.
    rpc PostV2beta1Name:Cancel(PostV2beta1Name:CancelRequest) returns (GoogleProtobufEmpty) {
      option (google.api.http) = {
        post: "//v2beta1/{name}:cancel"
        body: "body"
      };
    }
}

basePath: /
definitions.RemoteConfig.description: |-
  *
  The RemoteConfig consists of a list of conditions (which can be
  thought of as named "if" statements) and a map of parameters (parameter key
  to a stucture containing an optional default value, as well as a optional
  submap of (condition name to value when that condition is true).
definitions.RemoteConfig.properties.conditions.description: |-
  The list of named conditions. The order *does* affect the semantics.
  The condition_name values of these entries must be unique.

  The resolved value of a config parameter P is determined as follow:
  * Let Y be the set of values from the submap of P that refer to conditions
    that evaluate to <code>true</code>.
  * If Y is non empty, the value is taken from the specific submap in Y whose
    condition_name is the earliest in this condition list.
  * Else, if P has a default value option (condition_name is empty) then
    the value is taken from that option.
  * Else, parameter P has no value and is omitted from the config result.

  Example: parameter key "p1", default value "v1", submap specified as
  {"c1": v2, "c2": v3} where "c1" and "c2" are names of conditions in the
  condition list (where "c1" in this example appears before "c2").  The
  value of p1 would be v2 as long as c1 is true.  Otherwise, if c2 is true,
  p1 would evaluate to v3, and if c1 and c2 are both false, p1 would evaluate
  to v1.  If no default value was specified, and c1 and c2 were both false,
  no value for p1 would be generated.
definitions.RemoteConfig.properties.conditions.items.$ref: '#/definitions/RemoteConfigCondition'
definitions.RemoteConfig.properties.conditions.type: array
definitions.RemoteConfig.properties.parameters.additionalProperties.$ref: '#/definitions/RemoteConfigParameter'
definitions.RemoteConfig.properties.parameters.description: |-
  Map of parameter keys to their optional default values and optional submap
  of (condition name : value). Order doesn't affect semantics, and so is
  sorted by the server. The 'key' values of the params must be unique.
definitions.RemoteConfig.properties.parameters.type: object
definitions.RemoteConfig.type: object
definitions.RemoteConfigCondition.description: |-
  A single RemoteConfig Condition.  A list of these (because order matters) are
  part of a single RemoteConfig template.
definitions.RemoteConfigCondition.properties.expression.description: Required.
definitions.RemoteConfigCondition.properties.expression.type: string
definitions.RemoteConfigCondition.properties.name.description: |-
  Required.
  A non empty and unique name of this condition.
definitions.RemoteConfigCondition.properties.name.type: string
definitions.RemoteConfigCondition.properties.tagColor.description: |-
  Optional.
  The display (tag) color of this condition. This serves as part of a tag
  (in the future, we may add tag text as well as tag color, but that is not
  yet implemented in the UI).
  This value has no affect on the semantics of the delivered config and it
  is ignored by the backend, except for passing it through write/read
  requests.
  Not having this value or having the "CONDITION_DISPLAY_COLOR_UNSPECIFIED"
  value (0) have the same meaning:  Let the UI choose any valid color when
  displaying the condition.
definitions.RemoteConfigCondition.properties.tagColor.enum.length: 12
definitions.RemoteConfigCondition.properties.tagColor.enum[0]: CONDITION_DISPLAY_COLOR_UNSPECIFIED
definitions.RemoteConfigCondition.properties.tagColor.enum[1]: BLUE
definitions.RemoteConfigCondition.properties.tagColor.enum[2]: BROWN
definitions.RemoteConfigCondition.properties.tagColor.enum[3]: CYAN
definitions.RemoteConfigCondition.properties.tagColor.enum[4]: DEEP_ORANGE
definitions.RemoteConfigCondition.properties.tagColor.enum[5]: GREEN
definitions.RemoteConfigCondition.properties.tagColor.enum[6]: INDIGO
definitions.RemoteConfigCondition.properties.tagColor.enum[7]: LIME
definitions.RemoteConfigCondition.properties.tagColor.enum[8]: ORANGE
definitions.RemoteConfigCondition.properties.tagColor.enum[9]: PINK
definitions.RemoteConfigCondition.properties.tagColor.enum[10]: PURPLE
definitions.RemoteConfigCondition.properties.tagColor.enum[11]: TEAL
definitions.RemoteConfigCondition.properties.tagColor.type: string
definitions.RemoteConfigCondition.type: object
definitions.RemoteConfigParameter.description: |-
  While default_value and conditional_values are each optional, at least one of
  the two is required - otherwise, the parameter is meaningless (and an
  exception will be thrown by the validation logic).
definitions.RemoteConfigParameter.properties.conditionalValues.additionalProperties.$ref: '#/definitions/RemoteConfigParameterValue'
definitions.RemoteConfigParameter.properties.conditionalValues.description: |-
  Optional - a map of (condition_name, value). The condition_name of the
  highest priority (the one listed first in the conditions array) determines
  the value of this parameter.
definitions.RemoteConfigParameter.properties.conditionalValues.type: object
definitions.RemoteConfigParameter.properties.defaultValue.$ref: '#/definitions/RemoteConfigParameterValue'
definitions.RemoteConfigParameter.properties.defaultValue.description: |-
  Optional - value to set the parameter to, when none of the named conditions
  evaluate to <code>true</code>.
definitions.RemoteConfigParameter.type: object
definitions.RemoteConfigParameterValue.description: |-
  A RemoteConfigParameter's "value" (either the default value, or the value
  associated with a condition name) is either a string, or the
  "use_in_app_default" indicator (which means to leave out the parameter from
  the returned <key, value> map that is the output of the parameter fetch).
  We represent the "use_in_app_default" as a bool, but (when using the boolean
  instead of the string) it should always be <code>true</code>.
definitions.RemoteConfigParameterValue.properties.useInAppDefault.description: if
  true, omit the parameter from the map of fetched parameter values
definitions.RemoteConfigParameterValue.properties.useInAppDefault.type: boolean
definitions.RemoteConfigParameterValue.properties.value.description: the string to
  set the parameter to
definitions.RemoteConfigParameterValue.properties.value.type: string
definitions.RemoteConfigParameterValue.type: object
externalDocs.url: https://firebase.google.com/docs/remote-config/
host: firebaseremoteconfig.googleapis.com
info.contact.name: Google
info.contact.url: https://google.com
info.description: Firebase Remote Config API allows the 3P clients to manage Remote
  Config conditions and parameters for Firebase applications.
info.title: Firebase Remote Config
info.version: v1
info.x-apiClientRegistration.url: https://console.developers.google.com
info.x-logo.url: https://api.apis.guru/v2/cache/logo/https_www.google.com_images_branding_googlelogo_2x_googlelogo_color_272x92dp.png
info.x-origin.length: 1
info.x-origin[0].converter.url: https://github.com/lucybot/api-spec-converter
info.x-origin[0].converter.version: 2.6.0
info.x-origin[0].format: google
info.x-origin[0].url: https://firebaseremoteconfig.googleapis.com/$discovery/rest?version=v1
info.x-origin[0].version: v1
info.x-preferred: true
info.x-providerName: googleapis.com
info.x-serviceName: firebaseremoteconfig
parameters.$.xgafv.description: V1 error format.
parameters.$.xgafv.enum.length: 2
parameters.$.xgafv.enum[0]: "1"
parameters.$.xgafv.enum[1]: "2"
parameters.$.xgafv.in: query
parameters.$.xgafv.name: $.xgafv
parameters.$.xgafv.type: string
parameters.access_token.description: OAuth access token.
parameters.access_token.in: query
parameters.access_token.name: access_token
parameters.access_token.type: string
parameters.alt.default: json
parameters.alt.description: Data format for response.
parameters.alt.enum.length: 3
parameters.alt.enum[0]: json
parameters.alt.enum[1]: media
parameters.alt.enum[2]: proto
parameters.alt.in: query
parameters.alt.name: alt
parameters.alt.type: string
parameters.bearer_token.description: OAuth bearer token.
parameters.bearer_token.in: query
parameters.bearer_token.name: bearer_token
parameters.bearer_token.type: string
parameters.callback.description: JSONP
parameters.callback.in: query
parameters.callback.name: callback
parameters.callback.type: string
parameters.fields.description: Selector specifying which fields to include in a partial
  response.
parameters.fields.in: query
parameters.fields.name: fields
parameters.fields.type: string
parameters.key.description: API key. Your API key identifies your project and provides
  you with API access, quota, and reports. Required unless you provide an OAuth 2.0
  token.
parameters.key.in: query
parameters.key.name: key
parameters.key.type: string
parameters.oauth_token.description: OAuth 2.0 token for the current user.
parameters.oauth_token.in: query
parameters.oauth_token.name: oauth_token
parameters.oauth_token.type: string
parameters.pp.default: true
parameters.pp.description: Pretty-print response.
parameters.pp.in: query
parameters.pp.name: pp
parameters.pp.type: boolean
parameters.prettyPrint.default: true
parameters.prettyPrint.description: Returns response with indentations and line breaks.
parameters.prettyPrint.in: query
parameters.prettyPrint.name: prettyPrint
parameters.prettyPrint.type: boolean
parameters.quotaUser.description: Available to use for quota purposes for server-side
  applications. Can be any arbitrary string assigned to a user, but should not exceed
  40 characters.
parameters.quotaUser.in: query
parameters.quotaUser.name: quotaUser
parameters.quotaUser.type: string
parameters.upload_protocol.description: Upload protocol for media (e.g. "raw", "multipart").
parameters.upload_protocol.in: query
parameters.upload_protocol.name: upload_protocol
parameters.upload_protocol.type: string
parameters.uploadType.description: Legacy upload protocol for media (e.g. "media",
  "multipart").
parameters.uploadType.in: query
parameters.uploadType.name: uploadType
parameters.uploadType.type: string
paths./v1/{project}/remoteConfig.get.description: |-
  Get the latest version Remote Configuration for a project.
  Returns the RemoteConfig as the payload, and also the eTag as a
  response header.
paths./v1/{project}/remoteConfig.get.operationId: firebaseremoteconfig.projects.getRemoteConfig
paths./v1/{project}/remoteConfig.get.parameters.length: 1
paths./v1/{project}/remoteConfig.get.parameters[0].description: |-
  The GMP project identifier. Required.
  See note at the beginning of this file regarding project ids.
paths./v1/{project}/remoteConfig.get.parameters[0].in: path
paths./v1/{project}/remoteConfig.get.parameters[0].name: project
paths./v1/{project}/remoteConfig.get.parameters[0].required: true
paths./v1/{project}/remoteConfig.get.parameters[0].type: string
paths./v1/{project}/remoteConfig.get.parameters[0].x-reservedExpansion: true
paths./v1/{project}/remoteConfig.get.responses.200.description: Successful response
paths./v1/{project}/remoteConfig.get.responses.200.schema.$ref: '#/definitions/RemoteConfig'
paths./v1/{project}/remoteConfig.get.tags.length: 1
paths./v1/{project}/remoteConfig.get.tags[0]: projects
paths./v1/{project}/remoteConfig.parameters.length: 13
paths./v1/{project}/remoteConfig.parameters[0].$ref: '#/parameters/$.xgafv'
paths./v1/{project}/remoteConfig.parameters[1].$ref: '#/parameters/access_token'
paths./v1/{project}/remoteConfig.parameters[2].$ref: '#/parameters/alt'
paths./v1/{project}/remoteConfig.parameters[3].$ref: '#/parameters/bearer_token'
paths./v1/{project}/remoteConfig.parameters[4].$ref: '#/parameters/callback'
paths./v1/{project}/remoteConfig.parameters[5].$ref: '#/parameters/fields'
paths./v1/{project}/remoteConfig.parameters[6].$ref: '#/parameters/key'
paths./v1/{project}/remoteConfig.parameters[7].$ref: '#/parameters/oauth_token'
paths./v1/{project}/remoteConfig.parameters[8].$ref: '#/parameters/pp'
paths./v1/{project}/remoteConfig.parameters[9].$ref: '#/parameters/prettyPrint'
paths./v1/{project}/remoteConfig.parameters[10].$ref: '#/parameters/quotaUser'
paths./v1/{project}/remoteConfig.parameters[11].$ref: '#/parameters/uploadType'
paths./v1/{project}/remoteConfig.parameters[12].$ref: '#/parameters/upload_protocol'
paths./v1/{project}/remoteConfig.put.description: |-
  Update a RemoteConfig. We treat this as an always-existing
  resource (when it is not found in our data store, we treat it as version
  0, a template with zero conditions and zero parameters). Hence there are
  no Create or Delete operations. Returns the updated template when
  successful (and the updated eTag as a response header), or an error if
  things go wrong.
  Possible error messages:
  * VALIDATION_ERROR (HTTP status 400) with additional details if the
  template being passed in can not be validated.
  * AUTHENTICATION_ERROR (HTTP status 401) if the request can not be
  authenticate (e.g. no access token, or invalid access token).
  * AUTHORIZATION_ERROR (HTTP status 403) if the request can not be
  authorized (e.g. the user has no access to the specified project id).
  * VERSION_MISMATCH (HTTP status 412) when trying to update when the
  expected eTag (passed in via the "If-match" header) is not specified, or
  is specified but does does not match the current eTag.
  * Internal error (HTTP status 500) for Database problems or other internal
  errors.
paths./v1/{project}/remoteConfig.put.operationId: firebaseremoteconfig.projects.updateRemoteConfig
paths./v1/{project}/remoteConfig.put.parameters.length: 3
paths./v1/{project}/remoteConfig.put.parameters[0].in: body
paths./v1/{project}/remoteConfig.put.parameters[0].name: body
paths./v1/{project}/remoteConfig.put.parameters[0].schema.$ref: '#/definitions/RemoteConfig'
paths./v1/{project}/remoteConfig.put.parameters[1].description: |-
  The GMP project identifier. Required.
  See note at the beginning of this file regarding project ids.
paths./v1/{project}/remoteConfig.put.parameters[1].in: path
paths./v1/{project}/remoteConfig.put.parameters[1].name: project
paths./v1/{project}/remoteConfig.put.parameters[1].required: true
paths./v1/{project}/remoteConfig.put.parameters[1].type: string
paths./v1/{project}/remoteConfig.put.parameters[1].x-reservedExpansion: true
paths./v1/{project}/remoteConfig.put.parameters[2].description: |-
  Optional. Defaults to <code>false</code> (UpdateRemoteConfig call should
  update the backend if there are no validation/interal errors). May be set
  to <code>true</code> to indicate that, should no validation errors occur,
  the call should return a "200 OK" instead of performing the update. Note
  that other error messages (500 Internal Error, 412 Version Mismatch, etc)
  may still result after flipping to <code>false</code>, even if getting a
  "200 OK" when calling with <code>true</code>.
paths./v1/{project}/remoteConfig.put.parameters[2].in: query
paths./v1/{project}/remoteConfig.put.parameters[2].name: validateOnly
paths./v1/{project}/remoteConfig.put.parameters[2].type: boolean
paths./v1/{project}/remoteConfig.put.responses.200.description: Successful response
paths./v1/{project}/remoteConfig.put.responses.200.schema.$ref: '#/definitions/RemoteConfig'
paths./v1/{project}/remoteConfig.put.tags.length: 1
paths./v1/{project}/remoteConfig.put.tags[0]: projects
schemes.length: 1
schemes[0]: https
swagger: "2.0"
tags.length: 1
tags[0].name: projects

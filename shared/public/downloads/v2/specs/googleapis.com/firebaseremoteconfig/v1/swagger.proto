syntax = "proto3";

import "google/api/annotations.proto";

package firebaseremoteconfig;

message GetV1ProjectRemoteConfigRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    boolean pp = 9;
    boolean prettyPrint = 10;
    // The GMP project identifier. Required.
    // See note at the beginning of this file regarding project ids.
    string project = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PutV1ProjectRemoteConfigRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    RemoteConfig body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    // The GMP project identifier. Required.
    // See note at the beginning of this file regarding project ids.
    string project = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
    // Optional. Defaults to <code>false</code> (UpdateRemoteConfig call should
    // update the backend if there are no validation/interal errors). May be set
    // to <code>true</code> to indicate that, should no validation errors occur,
    // the call should return a "200 OK" instead of performing the update. Note
    // that other error messages (500 Internal Error, 412 Version Mismatch, etc)
    // may still result after flipping to <code>false</code>, even if getting a
    // "200 OK" when calling with <code>true</code>.
    bool validateOnly = 16;
}

enum $.Xgafv {
    $XGAFV_1 = 0;
    $XGAFV_2 = 1;
}

message RemoteConfig {
    // The list of named conditions. The order *does* affect the semantics.
    // The condition_name values of these entries must be unique.
    // 
    // The resolved value of a config parameter P is determined as follow:
    // * Let Y be the set of values from the submap of P that refer to conditions
    //   that evaluate to <code>true</code>.
    // * If Y is non empty, the value is taken from the specific submap in Y whose
    //   condition_name is the earliest in this condition list.
    // * Else, if P has a default value option (condition_name is empty) then
    //   the value is taken from that option.
    // * Else, parameter P has no value and is omitted from the config result.
    // 
    // Example: parameter key "p1", default value "v1", submap specified as
    // {"c1": v2, "c2": v3} where "c1" and "c2" are names of conditions in the
    // condition list (where "c1" in this example appears before "c2").  The
    // value of p1 would be v2 as long as c1 is true.  Otherwise, if c2 is true,
    // p1 would evaluate to v3, and if c1 and c2 are both false, p1 would evaluate
    // to v1.  If no default value was specified, and c1 and c2 were both false,
    // no value for p1 would be generated.
    repeated RemoteConfigCondition conditions = 1;
    // Map of parameter keys to their optional default values and optional submap
    // of (condition name : value). Order doesn't affect semantics, and so is
    // sorted by the server. The 'key' values of the params must be unique.
    map<string, RemoteConfigParameter> parameters = 2;
}

message RemoteConfigCondition {
    // Required.
    string expression = 1;
    // Required.
    // A non empty and unique name of this condition.
    string name = 2;
    // Optional.
    // The display (tag) color of this condition. This serves as part of a tag
    // (in the future, we may add tag text as well as tag color, but that is not
    // yet implemented in the UI).
    // This value has no affect on the semantics of the delivered config and it
    // is ignored by the backend, except for passing it through write/read
    // requests.
    // Not having this value or having the "CONDITION_DISPLAY_COLOR_UNSPECIFIED"
    // value (0) have the same meaning:  Let the UI choose any valid color when
    // displaying the condition.
    enum RemoteConfigCondition_TagColor {
        REMOTECONFIGCONDITION_TAGCOLOR_CONDITION_DISPLAY_COLOR_UNSPECIFIED = 0;
        REMOTECONFIGCONDITION_TAGCOLOR_BLUE = 1;
        REMOTECONFIGCONDITION_TAGCOLOR_BROWN = 2;
        REMOTECONFIGCONDITION_TAGCOLOR_CYAN = 3;
        REMOTECONFIGCONDITION_TAGCOLOR_DEEP_ORANGE = 4;
        REMOTECONFIGCONDITION_TAGCOLOR_GREEN = 5;
        REMOTECONFIGCONDITION_TAGCOLOR_INDIGO = 6;
        REMOTECONFIGCONDITION_TAGCOLOR_LIME = 7;
        REMOTECONFIGCONDITION_TAGCOLOR_ORANGE = 8;
        REMOTECONFIGCONDITION_TAGCOLOR_PINK = 9;
        REMOTECONFIGCONDITION_TAGCOLOR_PURPLE = 10;
        REMOTECONFIGCONDITION_TAGCOLOR_TEAL = 11;
    }
    RemoteConfigCondition_TagColor tagColor = 3;
}

message RemoteConfigParameter {
    // Optional - a map of (condition_name, value). The condition_name of the
    // highest priority (the one listed first in the conditions array) determines
    // the value of this parameter.
    map<string, RemoteConfigParameterValue> conditionalValues = 1;
    // Optional - value to set the parameter to, when none of the named conditions
    // evaluate to <code>true</code>.
    RemoteConfigParameterValue defaultValue = 2;
}

message RemoteConfigParameterValue {
    // if true, omit the parameter from the map of fetched parameter values
    bool useInAppDefault = 1;
    // the string to set the parameter to
    string value = 2;
}

enum Alt {
    JSON = 0;
    MEDIA = 1;
    PROTO = 2;
}

service FirebaseRemoteConfigService {
    // Get the latest version Remote Configuration for a project.
    // Returns the RemoteConfig as the payload, and also the eTag as a
    // response header.
    rpc GetV1ProjectRemoteConfig(GetV1ProjectRemoteConfigRequest) returns (RemoteConfig) {
      option (google.api.http) = {
        get: "//v1/{project}/remoteConfig"
      };
    }
    // Update a RemoteConfig. We treat this as an always-existing
    // resource (when it is not found in our data store, we treat it as version
    // 0, a template with zero conditions and zero parameters). Hence there are
    // no Create or Delete operations. Returns the updated template when
    // successful (and the updated eTag as a response header), or an error if
    // things go wrong.
    // Possible error messages:
    // * VALIDATION_ERROR (HTTP status 400) with additional details if the
    // template being passed in can not be validated.
    // * AUTHENTICATION_ERROR (HTTP status 401) if the request can not be
    // authenticate (e.g. no access token, or invalid access token).
    // * AUTHORIZATION_ERROR (HTTP status 403) if the request can not be
    // authorized (e.g. the user has no access to the specified project id).
    // * VERSION_MISMATCH (HTTP status 412) when trying to update when the
    // expected eTag (passed in via the "If-match" header) is not specified, or
    // is specified but does does not match the current eTag.
    // * Internal error (HTTP status 500) for Database problems or other internal
    // errors.
    rpc PutV1ProjectRemoteConfig(PutV1ProjectRemoteConfigRequest) returns (RemoteConfig) {
      option (google.api.http) = {
        put: "//v1/{project}/remoteConfig"
        body: "body"
      };
    }
}

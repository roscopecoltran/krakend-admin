syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package fitness;

message GetUserIdDataSourcesRequest {
    alt alt = 1;
    // The names of data types to include in the list. If not specified, all data sources will be returned.
    repeated string dataTypeName = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // List data sources for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
    string userId = 8;
    string userIp = 9;
}

message PostUserIdDataSourcesRequest {
    alt alt = 1;
    DataSource body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // Create the data source for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
    string userId = 8;
    string userIp = 9;
}

message GetUserIdDataSourcesDataSourceIdRequest {
    alt alt = 1;
    // The data stream ID of the data source to retrieve.
    string dataSourceId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // Retrieve a data source for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
    string userId = 8;
    string userIp = 9;
}

message PutUserIdDataSourcesDataSourceIdRequest {
    alt alt = 1;
    DataSource body = 2;
    // The data stream ID of the data source to update.
    string dataSourceId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // Update the data source for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
    string userId = 9;
    string userIp = 10;
}

message DeleteUserIdDataSourcesDataSourceIdRequest {
    alt alt = 1;
    // The data stream ID of the data source to delete.
    string dataSourceId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // Retrieve a data source for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
    string userId = 8;
    string userIp = 9;
}

message GetUserIdDataSourcesDataSourceIdDataPointChangesRequest {
    alt alt = 1;
    // The data stream ID of the data source that created the dataset.
    string dataSourceId = 2;
    string fields = 3;
    string key = 4;
    // If specified, no more than this many data point changes will be included in the response.
    int32 limit = 5;
    string oauth_token = 6;
    // The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of nextPageToken from the previous response.
    string pageToken = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    // List data points for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
    string userId = 10;
    string userIp = 11;
}

message GetUserIdDataSourcesDataSourceIdDatasetsDatasetIdRequest {
    alt alt = 1;
    // The data stream ID of the data source that created the dataset.
    string dataSourceId = 2;
    // Dataset identifier that is a composite of the minimum data point start time and maximum data point end time represented as nanoseconds from the epoch. The ID is formatted like: "startTime-endTime" where startTime and endTime are 64 bit integers.
    string datasetId = 3;
    string fields = 4;
    string key = 5;
    // If specified, no more than this many data points will be included in the dataset. If there are more data points in the dataset, nextPageToken will be set in the dataset response.
    int32 limit = 6;
    string oauth_token = 7;
    // The continuation token, which is used to page through large datasets. To get the next page of a dataset, set this parameter to the value of nextPageToken from the previous response. Each subsequent call will yield a partial dataset with data point end timestamps that are strictly smaller than those in the previous partial response.
    string pageToken = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    // Retrieve a dataset for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
    string userId = 11;
    string userIp = 12;
}

message DeleteUserIdDataSourcesDataSourceIdDatasetsDatasetIdRequest {
    alt alt = 1;
    // The client's current time in milliseconds since epoch.
    string currentTimeMillis = 2;
    // The data stream ID of the data source that created the dataset.
    string dataSourceId = 3;
    // Dataset identifier that is a composite of the minimum data point start time and maximum data point end time represented as nanoseconds from the epoch. The ID is formatted like: "startTime-endTime" where startTime and endTime are 64 bit integers.
    string datasetId = 4;
    string fields = 5;
    string key = 6;
    // When the operation was performed on the client.
    string modifiedTimeMillis = 7;
    string oauth_token = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    // Delete a dataset for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
    string userId = 11;
    string userIp = 12;
}

message PostUserIdDataset:AggregateRequest {
    alt alt = 1;
    AggregateRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // Aggregate data for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
    string userId = 8;
    string userIp = 9;
}

message GetUserIdSessionsRequest {
    alt alt = 1;
    // An RFC3339 timestamp. Only sessions ending between the start and end times will be included in the response.
    string endTime = 2;
    string fields = 3;
    // If true, deleted sessions will be returned. When set to true, sessions returned in this response will only have an ID and will not have any other fields.
    bool includeDeleted = 4;
    string key = 5;
    string oauth_token = 6;
    // The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of nextPageToken from the previous response.
    string pageToken = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    // An RFC3339 timestamp. Only sessions ending between the start and end times will be included in the response.
    string startTime = 10;
    // List sessions for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
    string userId = 11;
    string userIp = 12;
}

message PutUserIdSessionsSessionIdRequest {
    alt alt = 1;
    Session body = 2;
    // The client's current time in milliseconds since epoch.
    string currentTimeMillis = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // The ID of the session to be created.
    string sessionId = 9;
    // Create sessions for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
    string userId = 10;
    string userIp = 11;
}

message DeleteUserIdSessionsSessionIdRequest {
    alt alt = 1;
    // The client's current time in milliseconds since epoch.
    string currentTimeMillis = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The ID of the session to be deleted.
    string sessionId = 8;
    // Delete a session for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
    string userId = 9;
    string userIp = 10;
}

message AggregateBucket {
    // Available for Bucket.Type.ACTIVITY_TYPE, Bucket.Type.ACTIVITY_SEGMENT
    int32 activity = 1;
    // There will be one dataset per AggregateBy in the request.
    repeated Dataset dataset = 2;
    // The end time for the aggregated data, in milliseconds since epoch, inclusive.
    string endTimeMillis = 3;
    // Available for Bucket.Type.SESSION
    Session session = 4;
    // The start time for the aggregated data, in milliseconds since epoch, inclusive.
    string startTimeMillis = 5;
    // The type of a bucket signifies how the data aggregation is performed in the bucket.
    enum AggregateBucket_Type {
        AGGREGATEBUCKET_TYPE_ACTIVITYSEGMENT = 0;
        AGGREGATEBUCKET_TYPE_ACTIVITYTYPE = 1;
        AGGREGATEBUCKET_TYPE_SESSION = 2;
        AGGREGATEBUCKET_TYPE_TIME = 3;
        AGGREGATEBUCKET_TYPE_UNKNOWN = 4;
    }
    AggregateBucket_Type type = 6;
}

message AggregateBy {
    // A data source ID to aggregate. Mutually exclusive of dataTypeName. Only data from the specified data source ID will be included in the aggregation. The dataset in the response will have the same data source ID.
    string dataSourceId = 1;
    // The data type to aggregate. All data sources providing this data type will contribute data to the aggregation. The response will contain a single dataset for this data type name. The dataset will have a data source ID of derived:com.google.:com.google.android.gms:aggregated
    string dataTypeName = 2;
}

message AggregateRequest {
    // The specification of data to be aggregated. At least one aggregateBy spec must be provided. All data that is specified will be aggregated using the same bucketing criteria. There will be one dataset in the response for every aggregateBy spec.
    repeated AggregateBy aggregateBy = 1;
    // Specifies that data be aggregated each activity segment recored for a user. Similar to bucketByActivitySegment, but bucketing is done for each activity segment rather than all segments of the same type. Mutually exclusive of other bucketing specifications.
    BucketByActivity bucketByActivitySegment = 2;
    // Specifies that data be aggregated by the type of activity being performed when the data was recorded. All data that was recorded during a certain activity type (for the given time range) will be aggregated into the same bucket. Data that was recorded while the user was not active will not be included in the response. Mutually exclusive of other bucketing specifications.
    BucketByActivity bucketByActivityType = 3;
    // Specifies that data be aggregated by user sessions. Data that does not fall within the time range of a session will not be included in the response. Mutually exclusive of other bucketing specifications.
    BucketBySession bucketBySession = 4;
    // Specifies that data be aggregated by a single time interval. Mutually exclusive of other bucketing specifications.
    BucketByTime bucketByTime = 5;
    // The end of a window of time. Data that intersects with this time window will be aggregated. The time is in milliseconds since epoch, inclusive.
    string endTimeMillis = 6;
    // A list of acceptable data quality standards. Only data points which conform to at least one of the specified data quality standards will be returned. If the list is empty, all data points are returned.
    repeated string filteredDataQualityStandard = 7;
    // The start of a window of time. Data that intersects with this time window will be aggregated. The time is in milliseconds since epoch, inclusive.
    string startTimeMillis = 8;
}

message AggregateResponse {
    // A list of buckets containing the aggregated data.
    repeated AggregateBucket bucket = 1;
}

message Application {
    // An optional URI that can be used to link back to the application.
    string detailsUrl = 1;
    // The name of this application. This is required for REST clients, but we do not enforce uniqueness of this name. It is provided as a matter of convenience for other developers who would like to identify which REST created an Application or Data Source.
    string name = 2;
    // Package name for this application. This is used as a unique identifier when created by Android applications, but cannot be specified by REST clients. REST clients will have their developer project number reflected into the Data Source data stream IDs, instead of the packageName.
    string packageName = 3;
    // Version of the application. You should update this field whenever the application changes in a way that affects the computation of the data.
    string version = 4;
}

message BucketByActivity {
    // The default activity stream will be used if a specific activityDataSourceId is not specified.
    string activityDataSourceId = 1;
    // Specifies that only activity segments of duration longer than minDurationMillis are considered and used as a container for aggregated data.
    string minDurationMillis = 2;
}

message BucketBySession {
    // Specifies that only sessions of duration longer than minDurationMillis are considered and used as a container for aggregated data.
    string minDurationMillis = 1;
}

message BucketByTime {
    // Specifies that result buckets aggregate data by exactly durationMillis time frames. Time frames that contain no data will be included in the response with an empty dataset.
    string durationMillis = 1;
    BucketByTimePeriod period = 2;
}

message BucketByTimePeriod {
    // org.joda.timezone.DateTimeZone
    string timeZoneId = 1;
    enum BucketByTimePeriod_Type {
        BUCKETBYTIMEPERIOD_TYPE_DAY = 0;
        BUCKETBYTIMEPERIOD_TYPE_MONTH = 1;
        BUCKETBYTIMEPERIOD_TYPE_WEEK = 2;
    }
    BucketByTimePeriod_Type type = 2;
    int32 value = 3;
}

message DataPoint {
    // Used for version checking during transformation; that is, a datapoint can only replace another datapoint that has an older computation time stamp.
    string computationTimeMillis = 1;
    // The data type defining the format of the values in this data point.
    string dataTypeName = 2;
    // The end time of the interval represented by this data point, in nanoseconds since epoch.
    string endTimeNanos = 3;
    // Indicates the last time this data point was modified. Useful only in contexts where we are listing the data changes, rather than representing the current state of the data.
    string modifiedTimeMillis = 4;
    // If the data point is contained in a dataset for a derived data source, this field will be populated with the data source stream ID that created the data point originally.
    string originDataSourceId = 5;
    // The raw timestamp from the original SensorEvent.
    string rawTimestampNanos = 6;
    // The start time of the interval represented by this data point, in nanoseconds since epoch.
    string startTimeNanos = 7;
    // Values of each data type field for the data point. It is expected that each value corresponding to a data type field will occur in the same order that the field is listed with in the data type specified in a data source.
    // 
    // Only one of integer and floating point fields will be populated, depending on the format enum value within data source's type field.
    repeated Value value = 8;
}

message DataSource {
    // Information about an application which feeds sensor data into the platform.
    Application application = 1;
    repeated string dataQualityStandard = 2;
    // A unique identifier for the data stream produced by this data source. The identifier includes:
    // 
    //  
    // - The physical device's manufacturer, model, and serial number (UID). 
    // - The application's package name or name. Package name is used when the data source was created by an Android application. The developer project number is used when the data source was created by a REST client. 
    // - The data source's type. 
    // - The data source's stream name.  Note that not all attributes of the data source are used as part of the stream identifier. In particular, the version of the hardware/the application isn't used. This allows us to preserve the same stream through version updates. This also means that two DataSource objects may represent the same data stream even if they're not equal.
    // 
    // The exact format of the data stream ID created by an Android application is: type:dataType.name:application.packageName:device.manufacturer:device.model:device.uid:dataStreamName 
    // 
    // The exact format of the data stream ID created by a REST client is: type:dataType.name:developer project number:device.manufacturer:device.model:device.uid:dataStreamName 
    // 
    // When any of the optional fields that comprise of the data stream ID are blank, they will be omitted from the data stream ID. The minimum viable data stream ID would be: type:dataType.name:developer project number
    // 
    // Finally, the developer project number is obfuscated when read by any REST or Android client that did not create the data source. Only the data source creator will see the developer project number in clear and normal form.
    string dataStreamId = 3;
    // The stream name uniquely identifies this particular data source among other data sources of the same type from the same underlying producer. Setting the stream name is optional, but should be done whenever an application exposes two streams for the same data type, or when a device has two equivalent sensors.
    string dataStreamName = 4;
    // The data type defines the schema for a stream of data being collected by, inserted into, or queried from the Fitness API.
    DataType dataType = 5;
    // Representation of an integrated device (such as a phone or a wearable) that can hold sensors.
    Device device = 6;
    // An end-user visible name for this data source.
    string name = 7;
    // A constant describing the type of this data source. Indicates whether this data source produces raw or derived data.
    enum DataSource_Type {
        DATASOURCE_TYPE_DERIVED = 0;
        DATASOURCE_TYPE_RAW = 1;
    }
    DataSource_Type type = 8;
}

message DataType {
    // A field represents one dimension of a data type.
    repeated DataTypeField field = 1;
    // Each data type has a unique, namespaced, name. All data types in the com.google namespace are shared as part of the platform.
    string name = 2;
}

message DataTypeField {
    // The different supported formats for each field in a data type.
    enum DataTypeField_Format {
        DATATYPEFIELD_FORMAT_BLOB = 0;
        DATATYPEFIELD_FORMAT_FLOATLIST = 1;
        DATATYPEFIELD_FORMAT_FLOATPOINT = 2;
        DATATYPEFIELD_FORMAT_INTEGER = 3;
        DATATYPEFIELD_FORMAT_INTEGERLIST = 4;
        DATATYPEFIELD_FORMAT_MAP = 5;
        DATATYPEFIELD_FORMAT_STRING = 6;
    }
    DataTypeField_Format format = 1;
    // Defines the name and format of data. Unlike data type names, field names are not namespaced, and only need to be unique within the data type.
    string name = 2;
    bool optional = 3;
}

message Dataset {
    // The data stream ID of the data source that created the points in this dataset.
    string dataSourceId = 1;
    // The largest end time of all data points in this possibly partial representation of the dataset. Time is in nanoseconds from epoch. This should also match the first part of the dataset identifier.
    string maxEndTimeNs = 2;
    // The smallest start time of all data points in this possibly partial representation of the dataset. Time is in nanoseconds from epoch. This should also match the first part of the dataset identifier.
    string minStartTimeNs = 3;
    // This token will be set when a dataset is received in response to a GET request and the dataset is too large to be included in a single response. Provide this value in a subsequent GET request to return the next page of data points within this dataset.
    string nextPageToken = 4;
    // A partial list of data points contained in the dataset, ordered by largest endTimeNanos first. This list is considered complete when retrieving a small dataset and partial when patching a dataset or retrieving a dataset that is too large to include in a single response.
    repeated DataPoint point = 5;
}

message Device {
    // Manufacturer of the product/hardware.
    string manufacturer = 1;
    // End-user visible model name for the device.
    string model = 2;
    // A constant representing the type of the device.
    enum Device_Type {
        DEVICE_TYPE_CHESTSTRAP = 0;
        DEVICE_TYPE_HEADMOUNTED = 1;
        DEVICE_TYPE_PHONE = 2;
        DEVICE_TYPE_SCALE = 3;
        DEVICE_TYPE_TABLET = 4;
        DEVICE_TYPE_UNKNOWN = 5;
        DEVICE_TYPE_WATCH = 6;
    }
    Device_Type type = 3;
    // The serial number or other unique ID for the hardware. This field is obfuscated when read by any REST or Android client that did not create the data source. Only the data source creator will see the uid field in clear and normal form.
    string uid = 4;
    // Version string for the device hardware/software.
    string version = 5;
}

message ListDataPointChangesResponse {
    // The data stream ID of the data source with data point changes.
    string dataSourceId = 1;
    // Deleted data points for the user. Note, for modifications this should be parsed before handling insertions.
    repeated DataPoint deletedDataPoint = 2;
    // Inserted data points for the user.
    repeated DataPoint insertedDataPoint = 3;
    // The continuation token, which is used to page through large result sets. Provide this value in a subsequent request to return the next page of results.
    string nextPageToken = 4;
}

message ListDataSourcesResponse {
    // A previously created data source.
    repeated DataSource dataSource = 1;
}

message ListSessionsResponse {
    // If includeDeleted is set to true in the request, this list will contain sessions deleted with original end times that are within the startTime and endTime frame.
    repeated Session deletedSession = 1;
    // Flag to indicate server has more data to transfer
    bool hasMoreData = 2;
    // The continuation token, which is used to page through large result sets. Provide this value in a subsequent request to return the next page of results.
    string nextPageToken = 3;
    // Sessions with an end time that is between startTime and endTime of the request.
    repeated Session session = 4;
}

message MapValue {
    // Floating point value.
    double fpVal = 1;
}

message Session {
    // Session active time. While start_time_millis and end_time_millis define the full session time, the active time can be shorter and specified by active_time_millis. If the inactive time during the session is known, it should also be inserted via a com.google.activity.segment data point with a STILL activity value
    string activeTimeMillis = 1;
    // The type of activity this session represents.
    int32 activityType = 2;
    // The application that created the session.
    Application application = 3;
    // A description for this session.
    string description = 4;
    // An end time, in milliseconds since epoch, inclusive.
    string endTimeMillis = 5;
    // A client-generated identifier that is unique across all sessions owned by this particular user.
    string id = 6;
    // A timestamp that indicates when the session was last modified.
    string modifiedTimeMillis = 7;
    // A human readable name of the session.
    string name = 8;
    // A start time, in milliseconds since epoch, inclusive.
    string startTimeMillis = 9;
}

message Value {
    // Floating point value. When this is set, other values must not be set.
    double fpVal = 1;
    // Integer value. When this is set, other values must not be set.
    int32 intVal = 2;
    // Map value. The valid key space and units for the corresponding value of each entry should be documented as part of the data type definition. Keys should be kept small whenever possible. Data streams with large keys and high data frequency may be down sampled.
    repeated ValueMapValEntry mapVal = 3;
    // String value. When this is set, other values must not be set. Strings should be kept small whenever possible. Data streams with large string values and high data frequency may be down sampled.
    string stringVal = 4;
}

message ValueMapValEntry {
    string key = 1;
    MapValue value = 2;
}

enum Alt {
    JSON = 0;
}

service FitnessService {
    // Lists all data sources that are visible to the developer, using the OAuth scopes provided. The list is not exhaustive; the user may have private data sources that are only visible to other developers, or calls using other scopes.
    rpc GetUserIdDataSources(GetUserIdDataSourcesRequest) returns (ListDataSourcesResponse) {
      option (google.api.http) = {
        get: "/fitness/v1/users/{userId}/dataSources"
      };
    }
    // Creates a new data source that is unique across all data sources belonging to this user. The data stream ID field can be omitted and will be generated by the server with the correct format. The data stream ID is an ordered combination of some fields from the data source. In addition to the data source fields reflected into the data source ID, the developer project number that is authenticated when creating the data source is included. This developer project number is obfuscated when read by any other developer reading public data types.
    rpc PostUserIdDataSources(PostUserIdDataSourcesRequest) returns (DataSource) {
      option (google.api.http) = {
        post: "/fitness/v1/users/{userId}/dataSources"
        body: "body"
      };
    }
    // Returns the specified data source.
    rpc GetUserIdDataSourcesDataSourceId(GetUserIdDataSourcesDataSourceIdRequest) returns (DataSource) {
      option (google.api.http) = {
        get: "/fitness/v1/users/{userId}/dataSources/{dataSourceId}"
      };
    }
    // Updates the specified data source. The dataStreamId, dataType, type, dataStreamName, and device properties with the exception of version, cannot be modified.
    // 
    // Data sources are identified by their dataStreamId.
    rpc PutUserIdDataSourcesDataSourceId(PutUserIdDataSourcesDataSourceIdRequest) returns (DataSource) {
      option (google.api.http) = {
        put: "/fitness/v1/users/{userId}/dataSources/{dataSourceId}"
        body: "body"
      };
    }
    // Deletes the specified data source. The request will fail if the data source contains any data points.
    rpc DeleteUserIdDataSourcesDataSourceId(DeleteUserIdDataSourcesDataSourceIdRequest) returns (DataSource) {
      option (google.api.http) = {
        delete: "/fitness/v1/users/{userId}/dataSources/{dataSourceId}"
      };
    }
    // Queries for user's data point changes for a particular data source.
    rpc GetUserIdDataSourcesDataSourceIdDataPointChanges(GetUserIdDataSourcesDataSourceIdDataPointChangesRequest) returns (ListDataPointChangesResponse) {
      option (google.api.http) = {
        get: "/fitness/v1/users/{userId}/dataSources/{dataSourceId}/dataPointChanges"
      };
    }
    // Returns a dataset containing all data points whose start and end times overlap with the specified range of the dataset minimum start time and maximum end time. Specifically, any data point whose start time is less than or equal to the dataset end time and whose end time is greater than or equal to the dataset start time.
    rpc GetUserIdDataSourcesDataSourceIdDatasetsDatasetId(GetUserIdDataSourcesDataSourceIdDatasetsDatasetIdRequest) returns (Dataset) {
      option (google.api.http) = {
        get: "/fitness/v1/users/{userId}/dataSources/{dataSourceId}/datasets/{datasetId}"
      };
    }
    // Performs an inclusive delete of all data points whose start and end times have any overlap with the time range specified by the dataset ID. For most data types, the entire data point will be deleted. For data types where the time span represents a consistent value (such as com.google.activity.segment), and a data point straddles either end point of the dataset, only the overlapping portion of the data point will be deleted.
    rpc DeleteUserIdDataSourcesDataSourceIdDatasetsDatasetId(DeleteUserIdDataSourcesDataSourceIdDatasetsDatasetIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/fitness/v1/users/{userId}/dataSources/{dataSourceId}/datasets/{datasetId}"
      };
    }
    // Aggregates data of a certain type or stream into buckets divided by a given type of boundary. Multiple data sets of multiple types and from multiple sources can be aggreated into exactly one bucket type per request.
    rpc PostUserIdDataset:Aggregate(PostUserIdDataset:AggregateRequest) returns (AggregateResponse) {
      option (google.api.http) = {
        post: "/fitness/v1/users/{userId}/dataset:aggregate"
        body: "body"
      };
    }
    // Lists sessions previously created.
    rpc GetUserIdSessions(GetUserIdSessionsRequest) returns (ListSessionsResponse) {
      option (google.api.http) = {
        get: "/fitness/v1/users/{userId}/sessions"
      };
    }
    // Updates or insert a given session.
    rpc PutUserIdSessionsSessionId(PutUserIdSessionsSessionIdRequest) returns (Session) {
      option (google.api.http) = {
        put: "/fitness/v1/users/{userId}/sessions/{sessionId}"
        body: "body"
      };
    }
    // Deletes a session specified by the given session ID.
    rpc DeleteUserIdSessionsSessionId(DeleteUserIdSessionsSessionIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/fitness/v1/users/{userId}/sessions/{sessionId}"
      };
    }
}

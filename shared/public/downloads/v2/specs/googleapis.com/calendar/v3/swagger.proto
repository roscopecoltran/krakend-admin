syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package calendar;

message PostCalendarsRequest {
    alt alt = 1;
    Calendar body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetCalendarsCalendarIdRequest {
    alt alt = 1;
    // Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
    string calendarId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PutCalendarsCalendarIdRequest {
    alt alt = 1;
    Calendar body = 2;
    // Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
    string calendarId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message DeleteCalendarsCalendarIdRequest {
    alt alt = 1;
    // Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
    string calendarId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetCalendarsCalendarIdAclRequest {
    alt alt = 1;
    // Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
    string calendarId = 2;
    string fields = 3;
    string key = 4;
    // Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.
    int32 maxResults = 5;
    string oauth_token = 6;
    // Token specifying which result page to return. Optional.
    string pageToken = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    // Whether to include deleted ACLs in the result. Deleted ACLs are represented by role equal to "none". Deleted ACLs will always be included if syncToken is provided. Optional. The default is False.
    bool showDeleted = 10;
    // Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All entries deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.
    // If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.
    // Learn more about incremental synchronization.
    // Optional. The default is to return all entries.
    string syncToken = 11;
    string userIp = 12;
}

message PostCalendarsCalendarIdAclRequest {
    alt alt = 1;
    AclRule body = 2;
    // Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
    string calendarId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostCalendarsCalendarIdAclWatchRequest {
    alt alt = 1;
    // Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
    string calendarId = 2;
    string fields = 3;
    string key = 4;
    // Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.
    int32 maxResults = 5;
    string oauth_token = 6;
    // Token specifying which result page to return. Optional.
    string pageToken = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    Channel resource = 10;
    // Whether to include deleted ACLs in the result. Deleted ACLs are represented by role equal to "none". Deleted ACLs will always be included if syncToken is provided. Optional. The default is False.
    bool showDeleted = 11;
    // Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All entries deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.
    // If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.
    // Learn more about incremental synchronization.
    // Optional. The default is to return all entries.
    string syncToken = 12;
    string userIp = 13;
}

message GetCalendarsCalendarIdAclRuleIdRequest {
    alt alt = 1;
    // Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
    string calendarId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // ACL rule identifier.
    string ruleId = 8;
    string userIp = 9;
}

message PutCalendarsCalendarIdAclRuleIdRequest {
    alt alt = 1;
    AclRule body = 2;
    // Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
    string calendarId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // ACL rule identifier.
    string ruleId = 9;
    string userIp = 10;
}

message DeleteCalendarsCalendarIdAclRuleIdRequest {
    alt alt = 1;
    // Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
    string calendarId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // ACL rule identifier.
    string ruleId = 8;
    string userIp = 9;
}

message PostCalendarsCalendarIdClearRequest {
    alt alt = 1;
    // Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
    string calendarId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetCalendarsCalendarIdEventsRequest {
    alt alt = 1;
    // Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False.
    bool alwaysIncludeEmail = 2;
    // Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
    string calendarId = 3;
    string fields = 4;
    // Specifies event ID in the iCalendar format to be included in the response. Optional.
    string iCalUID = 5;
    string key = 6;
    // The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.
    int32 maxAttendees = 7;
    // Maximum number of events returned on one result page. The number of events in the resulting page may be less than this value, or none at all, even if there are more events matching the query. Incomplete pages can be detected by a non-empty nextPageToken field in the response. By default the value is 250 events. The page size can never be larger than 2500 events. Optional.
    int32 maxResults = 8;
    string oauth_token = 9;
    // The order of the events returned in the result. Optional. The default is an unspecified, stable order.
    enum GetCalendarsCalendarIdEventsRequest_OrderBy {
        GETCALENDARSCALENDARIDEVENTSREQUEST_ORDERBY_STARTTIME = 0;
        GETCALENDARSCALENDARIDEVENTSREQUEST_ORDERBY_UPDATED = 1;
    }
    GetCalendarsCalendarIdEventsRequest_OrderBy orderBy = 10;
    // Token specifying which result page to return. Optional.
    string pageToken = 11;
    boolean prettyPrint = 12;
    // Extended properties constraint specified as propertyName=value. Matches only private properties. This parameter might be repeated multiple times to return events that match all given constraints.
    repeated string privateExtendedProperty = 13;
    // Free text search terms to find events that match these terms in any field, except for extended properties. Optional.
    string q = 14;
    string quotaUser = 15;
    // Extended properties constraint specified as propertyName=value. Matches only shared properties. This parameter might be repeated multiple times to return events that match all given constraints.
    repeated string sharedExtendedProperty = 16;
    // Whether to include deleted events (with status equals "cancelled") in the result. Cancelled instances of recurring events (but not the underlying recurring event) will still be included if showDeleted and singleEvents are both False. If showDeleted and singleEvents are both True, only single instances of deleted events (but not the underlying recurring events) are returned. Optional. The default is False.
    bool showDeleted = 17;
    // Whether to include hidden invitations in the result. Optional. The default is False.
    bool showHiddenInvitations = 18;
    // Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves. Optional. The default is False.
    bool singleEvents = 19;
    // Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All events deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.
    // There are several query parameters that cannot be specified together with nextSyncToken to ensure consistency of the client state.
    // 
    // These are: 
    // - iCalUID 
    // - orderBy 
    // - privateExtendedProperty 
    // - q 
    // - sharedExtendedProperty 
    // - timeMin 
    // - timeMax 
    // - updatedMin If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.
    // Learn more about incremental synchronization.
    // Optional. The default is to return all entries.
    string syncToken = 20;
    // Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset, e.g., 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but will be ignored. If timeMin is set, timeMax must be greater than timeMin.
    string timeMax = 21;
    // Lower bound (inclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset, e.g., 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but will be ignored. If timeMax is set, timeMin must be smaller than timeMax.
    string timeMin = 22;
    // Time zone used in the response. Optional. The default is the time zone of the calendar.
    string timeZone = 23;
    // Lower bound for an event's last modification time (as a RFC3339 timestamp) to filter by. When specified, entries deleted since this time will always be included regardless of showDeleted. Optional. The default is not to filter by last modification time.
    string updatedMin = 24;
    string userIp = 25;
}

message PostCalendarsCalendarIdEventsRequest {
    alt alt = 1;
    Event body = 2;
    // Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
    string calendarId = 3;
    string fields = 4;
    string key = 5;
    // The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.
    int32 maxAttendees = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    // Whether to send notifications about the creation of the new event. Optional. The default is False.
    bool sendNotifications = 10;
    // Whether API client performing operation supports event attachments. Optional. The default is False.
    bool supportsAttachments = 11;
    string userIp = 12;
}

message PostCalendarsCalendarIdEventsImportRequest {
    alt alt = 1;
    Event body = 2;
    // Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
    string calendarId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // Whether API client performing operation supports event attachments. Optional. The default is False.
    bool supportsAttachments = 9;
    string userIp = 10;
}

message PostCalendarsCalendarIdEventsQuickAddRequest {
    alt alt = 1;
    // Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
    string calendarId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // Whether to send notifications about the creation of the event. Optional. The default is False.
    bool sendNotifications = 8;
    // The text describing the event to be created.
    string text = 9;
    string userIp = 10;
}

message PostCalendarsCalendarIdEventsWatchRequest {
    alt alt = 1;
    // Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False.
    bool alwaysIncludeEmail = 2;
    // Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
    string calendarId = 3;
    string fields = 4;
    // Specifies event ID in the iCalendar format to be included in the response. Optional.
    string iCalUID = 5;
    string key = 6;
    // The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.
    int32 maxAttendees = 7;
    // Maximum number of events returned on one result page. The number of events in the resulting page may be less than this value, or none at all, even if there are more events matching the query. Incomplete pages can be detected by a non-empty nextPageToken field in the response. By default the value is 250 events. The page size can never be larger than 2500 events. Optional.
    int32 maxResults = 8;
    string oauth_token = 9;
    // The order of the events returned in the result. Optional. The default is an unspecified, stable order.
    enum PostCalendarsCalendarIdEventsWatchRequest_OrderBy {
        POSTCALENDARSCALENDARIDEVENTSWATCHREQUEST_ORDERBY_STARTTIME = 0;
        POSTCALENDARSCALENDARIDEVENTSWATCHREQUEST_ORDERBY_UPDATED = 1;
    }
    PostCalendarsCalendarIdEventsWatchRequest_OrderBy orderBy = 10;
    // Token specifying which result page to return. Optional.
    string pageToken = 11;
    boolean prettyPrint = 12;
    // Extended properties constraint specified as propertyName=value. Matches only private properties. This parameter might be repeated multiple times to return events that match all given constraints.
    repeated string privateExtendedProperty = 13;
    // Free text search terms to find events that match these terms in any field, except for extended properties. Optional.
    string q = 14;
    string quotaUser = 15;
    Channel resource = 16;
    // Extended properties constraint specified as propertyName=value. Matches only shared properties. This parameter might be repeated multiple times to return events that match all given constraints.
    repeated string sharedExtendedProperty = 17;
    // Whether to include deleted events (with status equals "cancelled") in the result. Cancelled instances of recurring events (but not the underlying recurring event) will still be included if showDeleted and singleEvents are both False. If showDeleted and singleEvents are both True, only single instances of deleted events (but not the underlying recurring events) are returned. Optional. The default is False.
    bool showDeleted = 18;
    // Whether to include hidden invitations in the result. Optional. The default is False.
    bool showHiddenInvitations = 19;
    // Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves. Optional. The default is False.
    bool singleEvents = 20;
    // Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All events deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.
    // There are several query parameters that cannot be specified together with nextSyncToken to ensure consistency of the client state.
    // 
    // These are: 
    // - iCalUID 
    // - orderBy 
    // - privateExtendedProperty 
    // - q 
    // - sharedExtendedProperty 
    // - timeMin 
    // - timeMax 
    // - updatedMin If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.
    // Learn more about incremental synchronization.
    // Optional. The default is to return all entries.
    string syncToken = 21;
    // Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset, e.g., 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but will be ignored. If timeMin is set, timeMax must be greater than timeMin.
    string timeMax = 22;
    // Lower bound (inclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset, e.g., 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but will be ignored. If timeMax is set, timeMin must be smaller than timeMax.
    string timeMin = 23;
    // Time zone used in the response. Optional. The default is the time zone of the calendar.
    string timeZone = 24;
    // Lower bound for an event's last modification time (as a RFC3339 timestamp) to filter by. When specified, entries deleted since this time will always be included regardless of showDeleted. Optional. The default is not to filter by last modification time.
    string updatedMin = 25;
    string userIp = 26;
}

message GetCalendarsCalendarIdEventsEventIdRequest {
    alt alt = 1;
    // Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False.
    bool alwaysIncludeEmail = 2;
    // Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
    string calendarId = 3;
    // Event identifier.
    string eventId = 4;
    string fields = 5;
    string key = 6;
    // The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.
    int32 maxAttendees = 7;
    string oauth_token = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    // Time zone used in the response. Optional. The default is the time zone of the calendar.
    string timeZone = 11;
    string userIp = 12;
}

message PutCalendarsCalendarIdEventsEventIdRequest {
    alt alt = 1;
    // Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False.
    bool alwaysIncludeEmail = 2;
    Event body = 3;
    // Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
    string calendarId = 4;
    // Event identifier.
    string eventId = 5;
    string fields = 6;
    string key = 7;
    // The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.
    int32 maxAttendees = 8;
    string oauth_token = 9;
    boolean prettyPrint = 10;
    string quotaUser = 11;
    // Whether to send notifications about the event update (e.g. attendee's responses, title changes, etc.). Optional. The default is False.
    bool sendNotifications = 12;
    // Whether API client performing operation supports event attachments. Optional. The default is False.
    bool supportsAttachments = 13;
    string userIp = 14;
}

message DeleteCalendarsCalendarIdEventsEventIdRequest {
    alt alt = 1;
    // Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
    string calendarId = 2;
    // Event identifier.
    string eventId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // Whether to send notifications about the deletion of the event. Optional. The default is False.
    bool sendNotifications = 9;
    string userIp = 10;
}

message GetCalendarsCalendarIdEventsEventIdInstancesRequest {
    alt alt = 1;
    // Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False.
    bool alwaysIncludeEmail = 2;
    // Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
    string calendarId = 3;
    // Recurring event identifier.
    string eventId = 4;
    string fields = 5;
    string key = 6;
    // The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.
    int32 maxAttendees = 7;
    // Maximum number of events returned on one result page. By default the value is 250 events. The page size can never be larger than 2500 events. Optional.
    int32 maxResults = 8;
    string oauth_token = 9;
    // The original start time of the instance in the result. Optional.
    string originalStart = 10;
    // Token specifying which result page to return. Optional.
    string pageToken = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    // Whether to include deleted events (with status equals "cancelled") in the result. Cancelled instances of recurring events will still be included if singleEvents is False. Optional. The default is False.
    bool showDeleted = 14;
    // Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset.
    string timeMax = 15;
    // Lower bound (inclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset.
    string timeMin = 16;
    // Time zone used in the response. Optional. The default is the time zone of the calendar.
    string timeZone = 17;
    string userIp = 18;
}

message PostCalendarsCalendarIdEventsEventIdMoveRequest {
    alt alt = 1;
    // Calendar identifier of the source calendar where the event currently is on.
    string calendarId = 2;
    // Calendar identifier of the target calendar where the event is to be moved to.
    string destination = 3;
    // Event identifier.
    string eventId = 4;
    string fields = 5;
    string key = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    // Whether to send notifications about the change of the event's organizer. Optional. The default is False.
    bool sendNotifications = 10;
    string userIp = 11;
}

message PostChannelsStopRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    Channel resource = 7;
    string userIp = 8;
}

message GetColorsRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    string userIp = 7;
}

message PostFreeBusyRequest {
    alt alt = 1;
    FreeBusyRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetUsersMeCalendarListRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.
    int32 maxResults = 4;
    // The minimum access role for the user in the returned entries. Optional. The default is no restriction.
    enum GetUsersMeCalendarListRequest_MinAccessRole {
        GETUSERSMECALENDARLISTREQUEST_MINACCESSROLE_FREEBUSYREADER = 0;
        GETUSERSMECALENDARLISTREQUEST_MINACCESSROLE_OWNER = 1;
        GETUSERSMECALENDARLISTREQUEST_MINACCESSROLE_READER = 2;
        GETUSERSMECALENDARLISTREQUEST_MINACCESSROLE_WRITER = 3;
    }
    GetUsersMeCalendarListRequest_MinAccessRole minAccessRole = 5;
    string oauth_token = 6;
    // Token specifying which result page to return. Optional.
    string pageToken = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    // Whether to include deleted calendar list entries in the result. Optional. The default is False.
    bool showDeleted = 10;
    // Whether to show hidden entries. Optional. The default is False.
    bool showHidden = 11;
    // Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. If only read-only fields such as calendar properties or ACLs have changed, the entry won't be returned. All entries deleted and hidden since the previous list request will always be in the result set and it is not allowed to set showDeleted neither showHidden to False.
    // To ensure client state consistency minAccessRole query parameter cannot be specified together with nextSyncToken.
    // If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.
    // Learn more about incremental synchronization.
    // Optional. The default is to return all entries.
    string syncToken = 12;
    string userIp = 13;
}

message PostUsersMeCalendarListRequest {
    alt alt = 1;
    CalendarListEntry body = 2;
    // Whether to use the foregroundColor and backgroundColor fields to write the calendar colors (RGB). If this feature is used, the index-based colorId field will be set to the best matching option automatically. Optional. The default is False.
    bool colorRgbFormat = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostUsersMeCalendarListWatchRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.
    int32 maxResults = 4;
    // The minimum access role for the user in the returned entries. Optional. The default is no restriction.
    enum PostUsersMeCalendarListWatchRequest_MinAccessRole {
        POSTUSERSMECALENDARLISTWATCHREQUEST_MINACCESSROLE_FREEBUSYREADER = 0;
        POSTUSERSMECALENDARLISTWATCHREQUEST_MINACCESSROLE_OWNER = 1;
        POSTUSERSMECALENDARLISTWATCHREQUEST_MINACCESSROLE_READER = 2;
        POSTUSERSMECALENDARLISTWATCHREQUEST_MINACCESSROLE_WRITER = 3;
    }
    PostUsersMeCalendarListWatchRequest_MinAccessRole minAccessRole = 5;
    string oauth_token = 6;
    // Token specifying which result page to return. Optional.
    string pageToken = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    Channel resource = 10;
    // Whether to include deleted calendar list entries in the result. Optional. The default is False.
    bool showDeleted = 11;
    // Whether to show hidden entries. Optional. The default is False.
    bool showHidden = 12;
    // Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. If only read-only fields such as calendar properties or ACLs have changed, the entry won't be returned. All entries deleted and hidden since the previous list request will always be in the result set and it is not allowed to set showDeleted neither showHidden to False.
    // To ensure client state consistency minAccessRole query parameter cannot be specified together with nextSyncToken.
    // If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.
    // Learn more about incremental synchronization.
    // Optional. The default is to return all entries.
    string syncToken = 13;
    string userIp = 14;
}

message GetUsersMeCalendarListCalendarIdRequest {
    alt alt = 1;
    // Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
    string calendarId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PutUsersMeCalendarListCalendarIdRequest {
    alt alt = 1;
    CalendarListEntry body = 2;
    // Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
    string calendarId = 3;
    // Whether to use the foregroundColor and backgroundColor fields to write the calendar colors (RGB). If this feature is used, the index-based colorId field will be set to the best matching option automatically. Optional. The default is False.
    bool colorRgbFormat = 4;
    string fields = 5;
    string key = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message DeleteUsersMeCalendarListCalendarIdRequest {
    alt alt = 1;
    // Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
    string calendarId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetUsersMeSettingsRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.
    int32 maxResults = 4;
    string oauth_token = 5;
    // Token specifying which result page to return. Optional.
    string pageToken = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then.
    // If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.
    // Learn more about incremental synchronization.
    // Optional. The default is to return all entries.
    string syncToken = 9;
    string userIp = 10;
}

message PostUsersMeSettingsWatchRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.
    int32 maxResults = 4;
    string oauth_token = 5;
    // Token specifying which result page to return. Optional.
    string pageToken = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    Channel resource = 9;
    // Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then.
    // If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.
    // Learn more about incremental synchronization.
    // Optional. The default is to return all entries.
    string syncToken = 10;
    string userIp = 11;
}

message GetUsersMeSettingsSettingRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    // The id of the user setting.
    string setting = 7;
    string userIp = 8;
}

message Acl {
    // ETag of the collection.
    string etag = 1;
    // List of rules on the access control list.
    repeated AclRule items = 2;
    // Type of the collection ("calendar#acl").
    string kind = 3;
    // Token used to access the next page of this result. Omitted if no further results are available, in which case nextSyncToken is provided.
    string nextPageToken = 4;
    // Token used at a later point in time to retrieve only the entries that have changed since this result was returned. Omitted if further results are available, in which case nextPageToken is provided.
    string nextSyncToken = 5;
}

message AclRule {
    // ETag of the resource.
    string etag = 1;
    // Identifier of the ACL rule.
    string id = 2;
    // Type of the resource ("calendar#aclRule").
    string kind = 3;
    // The role assigned to the scope. Possible values are:  
    // - "none" - Provides no access. 
    // - "freeBusyReader" - Provides read access to free/busy information. 
    // - "reader" - Provides read access to the calendar. Private events will appear to users with reader access, but event details will be hidden. 
    // - "writer" - Provides read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible. 
    // - "owner" - Provides ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs.
    string role = 4;
    // The scope of the rule.
    message Scope {
            // The type of the scope. Possible values are:  
    // - "default" - The public scope. This is the default value. 
    // - "user" - Limits the scope to a single user. 
    // - "group" - Limits the scope to a group. 
    // - "domain" - Limits the scope to a domain.  Note: The permissions granted to the "default", or public, scope apply to any user, authenticated or not.
    string type = 1;
            // The email address of a user or group, or the name of a domain, depending on the scope type. Omitted for type "default".
    string value = 2;
    }
    Scope scope = 5;
}

message Calendar {
    // Description of the calendar. Optional.
    string description = 1;
    // ETag of the resource.
    string etag = 2;
    // Identifier of the calendar. To retrieve IDs call the calendarList.list() method.
    string id = 3;
    // Type of the resource ("calendar#calendar").
    string kind = 4;
    // Geographic location of the calendar as free-form text. Optional.
    string location = 5;
    // Title of the calendar.
    string summary = 6;
    // The time zone of the calendar. (Formatted as an IANA Time Zone Database name, e.g. "Europe/Zurich".) Optional.
    string timeZone = 7;
}

message CalendarList {
    // ETag of the collection.
    string etag = 1;
    // Calendars that are present on the user's calendar list.
    repeated CalendarListEntry items = 2;
    // Type of the collection ("calendar#calendarList").
    string kind = 3;
    // Token used to access the next page of this result. Omitted if no further results are available, in which case nextSyncToken is provided.
    string nextPageToken = 4;
    // Token used at a later point in time to retrieve only the entries that have changed since this result was returned. Omitted if further results are available, in which case nextPageToken is provided.
    string nextSyncToken = 5;
}

message CalendarListEntry {
    // The effective access role that the authenticated user has on the calendar. Read-only. Possible values are:  
    // - "freeBusyReader" - Provides read access to free/busy information. 
    // - "reader" - Provides read access to the calendar. Private events will appear to users with reader access, but event details will be hidden. 
    // - "writer" - Provides read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible. 
    // - "owner" - Provides ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs.
    string accessRole = 1;
    // The main color of the calendar in the hexadecimal format "#0088aa". This property supersedes the index-based colorId property. To set or change this property, you need to specify colorRgbFormat=true in the parameters of the insert, update and patch methods. Optional.
    string backgroundColor = 2;
    // The color of the calendar. This is an ID referring to an entry in the calendar section of the colors definition (see the colors endpoint). This property is superseded by the backgroundColor and foregroundColor properties and can be ignored when using these properties. Optional.
    string colorId = 3;
    // The default reminders that the authenticated user has for this calendar.
    repeated EventReminder defaultReminders = 4;
    // Whether this calendar list entry has been deleted from the calendar list. Read-only. Optional. The default is False.
    bool deleted = 5;
    // Description of the calendar. Optional. Read-only.
    string description = 6;
    // ETag of the resource.
    string etag = 7;
    // The foreground color of the calendar in the hexadecimal format "#ffffff". This property supersedes the index-based colorId property. To set or change this property, you need to specify colorRgbFormat=true in the parameters of the insert, update and patch methods. Optional.
    string foregroundColor = 8;
    // Whether the calendar has been hidden from the list. Optional. The default is False.
    bool hidden = 9;
    // Identifier of the calendar.
    string id = 10;
    // Type of the resource ("calendar#calendarListEntry").
    string kind = 11;
    // Geographic location of the calendar as free-form text. Optional. Read-only.
    string location = 12;
    // The notifications that the authenticated user is receiving for this calendar.
    message NotificationSettings {
            // The list of notifications set for this calendar.
    repeated CalendarNotification notifications = 1;
    }
    NotificationSettings notificationSettings = 13;
    // Whether the calendar is the primary calendar of the authenticated user. Read-only. Optional. The default is False.
    bool primary = 14;
    // Whether the calendar content shows up in the calendar UI. Optional. The default is False.
    bool selected = 15;
    // Title of the calendar. Read-only.
    string summary = 16;
    // The summary that the authenticated user has set for this calendar. Optional.
    string summaryOverride = 17;
    // The time zone of the calendar. Optional. Read-only.
    string timeZone = 18;
}

message CalendarNotification {
    // The method used to deliver the notification. Possible values are:  
    // - "email" - Reminders are sent via email. 
    // - "sms" - Reminders are sent via SMS. This value is read-only and is ignored on inserts and updates. SMS reminders are only available for G Suite customers.
    string method = 1;
    // The type of notification. Possible values are:  
    // - "eventCreation" - Notification sent when a new event is put on the calendar. 
    // - "eventChange" - Notification sent when an event is changed. 
    // - "eventCancellation" - Notification sent when an event is cancelled. 
    // - "eventResponse" - Notification sent when an event is changed. 
    // - "agenda" - An agenda with the events of the day (sent out in the morning).
    string type = 2;
}

message Channel {
    // The address where notifications are delivered for this channel.
    string address = 1;
    // Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.
    string expiration = 2;
    // A UUID or similar unique string that identifies this channel.
    string id = 3;
    // Identifies this as a notification channel used to watch for changes to a resource. Value: the fixed string "api#channel".
    string kind = 4;
    // Additional parameters controlling delivery channel behavior. Optional.
    map<string, string> params = 5;
    // A Boolean value to indicate whether payload is wanted. Optional.
    bool payload = 6;
    // An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.
    string resourceId = 7;
    // A version-specific identifier for the watched resource.
    string resourceUri = 8;
    // An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.
    string token = 9;
    // The type of delivery mechanism used for this channel.
    string type = 10;
}

message ColorDefinition {
    // The background color associated with this color definition.
    string background = 1;
    // The foreground color that can be used to write on top of a background with 'background' color.
    string foreground = 2;
}

message Colors {
    // A global palette of calendar colors, mapping from the color ID to its definition. A calendarListEntry resource refers to one of these color IDs in its color field. Read-only.
    map<string, ColorDefinition> calendar = 1;
    // A global palette of event colors, mapping from the color ID to its definition. An event resource may refer to one of these color IDs in its color field. Read-only.
    map<string, ColorDefinition> event = 2;
    // Type of the resource ("calendar#colors").
    string kind = 3;
    // Last modification time of the color palette (as a RFC3339 timestamp). Read-only.
    string updated = 4;
}

message Error {
    // Domain, or broad category, of the error.
    string domain = 1;
    // Specific reason for the error. Some of the possible values are:  
    // - "groupTooBig" - The group of users requested is too large for a single query. 
    // - "tooManyCalendarsRequested" - The number of calendars requested is too large for a single query. 
    // - "notFound" - The requested resource was not found. 
    // - "internalError" - The API service has encountered an internal error.  Additional error types may be added in the future, so clients should gracefully handle additional error statuses not included in this list.
    string reason = 2;
}

message Event {
    // Whether anyone can invite themselves to the event (currently works for Google+ events only). Optional. The default is False.
    bool anyoneCanAddSelf = 1;
    // File attachments for the event. Currently only Google Drive attachments are supported.
    // In order to modify attachments the supportsAttachments request parameter should be set to true.
    // There can be at most 25 attachments per event,
    repeated EventAttachment attachments = 2;
    // The attendees of the event. See the Events with attendees guide for more information on scheduling events with other calendar users.
    repeated EventAttendee attendees = 3;
    // Whether attendees may have been omitted from the event's representation. When retrieving an event, this may be due to a restriction specified by the maxAttendee query parameter. When updating an event, this can be used to only update the participant's response. Optional. The default is False.
    bool attendeesOmitted = 4;
    // The color of the event. This is an ID referring to an entry in the event section of the colors definition (see the  colors endpoint). Optional.
    string colorId = 5;
    // Creation time of the event (as a RFC3339 timestamp). Read-only.
    string created = 6;
    // The creator of the event. Read-only.
    message Creator {
            // The creator's name, if available.
    string displayName = 1;
            // The creator's email address, if available.
    string email = 2;
            // The creator's Profile ID, if available. It corresponds to theid field in the People collection of the Google+ API
    string id = 3;
            // Whether the creator corresponds to the calendar on which this copy of the event appears. Read-only. The default is False.
    bool self = 4;
    }
    Creator creator = 7;
    // Description of the event. Optional.
    string description = 8;
    // The (exclusive) end time of the event. For a recurring event, this is the end time of the first instance.
    EventDateTime end = 9;
    // Whether the end time is actually unspecified. An end time is still provided for compatibility reasons, even if this attribute is set to True. The default is False.
    bool endTimeUnspecified = 10;
    // ETag of the resource.
    string etag = 11;
    // Extended properties of the event.
    message ExtendedProperties {
            // Properties that are private to the copy of the event that appears on this calendar.
    map<string, string> private = 1;
            // Properties that are shared between copies of the event on other attendees' calendars.
    map<string, string> shared = 2;
    }
    ExtendedProperties extendedProperties = 12;
    // A gadget that extends this event.
    message Gadget {
            // The gadget's display mode. Optional. Possible values are:  
    // - "icon" - The gadget displays next to the event's title in the calendar view. 
    // - "chip" - The gadget displays when the event is clicked.
    string display = 1;
            // The gadget's height in pixels. The height must be an integer greater than 0. Optional.
    int32 height = 2;
            // The gadget's icon URL. The URL scheme must be HTTPS.
    string iconLink = 3;
            // The gadget's URL. The URL scheme must be HTTPS.
    string link = 4;
            // Preferences.
    map<string, string> preferences = 5;
            // The gadget's title.
    string title = 6;
            // The gadget's type.
    string type = 7;
            // The gadget's width in pixels. The width must be an integer greater than 0. Optional.
    int32 width = 8;
    }
    Gadget gadget = 13;
    // Whether attendees other than the organizer can invite others to the event. Optional. The default is True.
    bool guestsCanInviteOthers = 14;
    // Whether attendees other than the organizer can modify the event. Optional. The default is False.
    bool guestsCanModify = 15;
    // Whether attendees other than the organizer can see who the event's attendees are. Optional. The default is True.
    bool guestsCanSeeOtherGuests = 16;
    // An absolute link to the Google+ hangout associated with this event. Read-only.
    string hangoutLink = 17;
    // An absolute link to this event in the Google Calendar Web UI. Read-only.
    string htmlLink = 18;
    // Event unique identifier as defined in RFC5545. It is used to uniquely identify events accross calendaring systems and must be supplied when importing events via the import method.
    // Note that the icalUID and the id are not identical and only one of them should be supplied at event creation time. One difference in their semantics is that in recurring events, all occurrences of one event have different ids while they all share the same icalUIDs.
    string iCalUID = 19;
    // Opaque identifier of the event. When creating new single or recurring events, you can specify their IDs. Provided IDs must follow these rules:  
    // - characters allowed in the ID are those used in base32hex encoding, i.e. lowercase letters a-v and digits 0-9, see section 3.1.2 in RFC2938 
    // - the length of the ID must be between 5 and 1024 characters 
    // - the ID must be unique per calendar  Due to the globally distributed nature of the system, we cannot guarantee that ID collisions will be detected at event creation time. To minimize the risk of collisions we recommend using an established UUID algorithm such as one described in RFC4122.
    // If you do not specify an ID, it will be automatically generated by the server.
    // Note that the icalUID and the id are not identical and only one of them should be supplied at event creation time. One difference in their semantics is that in recurring events, all occurrences of one event have different ids while they all share the same icalUIDs.
    string id = 20;
    // Type of the resource ("calendar#event").
    string kind = 21;
    // Geographic location of the event as free-form text. Optional.
    string location = 22;
    // Whether this is a locked event copy where no changes can be made to the main event fields "summary", "description", "location", "start", "end" or "recurrence". The default is False. Read-Only.
    bool locked = 23;
    // The organizer of the event. If the organizer is also an attendee, this is indicated with a separate entry in attendees with the organizer field set to True. To change the organizer, use the move operation. Read-only, except when importing an event.
    message Organizer {
            // The organizer's name, if available.
    string displayName = 1;
            // The organizer's email address, if available. It must be a valid email address as per RFC5322.
    string email = 2;
            // The organizer's Profile ID, if available. It corresponds to theid field in the People collection of the Google+ API
    string id = 3;
            // Whether the organizer corresponds to the calendar on which this copy of the event appears. Read-only. The default is False.
    bool self = 4;
    }
    Organizer organizer = 24;
    // For an instance of a recurring event, this is the time at which this event would start according to the recurrence data in the recurring event identified by recurringEventId. Immutable.
    EventDateTime originalStartTime = 25;
    // Whether this is a private event copy where changes are not shared with other copies on other calendars. Optional. Immutable. The default is False.
    bool privateCopy = 26;
    // List of RRULE, EXRULE, RDATE and EXDATE lines for a recurring event, as specified in RFC5545. Note that DTSTART and DTEND lines are not allowed in this field; event start and end times are specified in the start and end fields. This field is omitted for single events or instances of recurring events.
    repeated string recurrence = 27;
    // For an instance of a recurring event, this is the id of the recurring event to which this instance belongs. Immutable.
    string recurringEventId = 28;
    // Information about the event's reminders for the authenticated user.
    message Reminders {
            // If the event doesn't use the default reminders, this lists the reminders specific to the event, or, if not set, indicates that no reminders are set for this event. The maximum number of override reminders is 5.
    repeated EventReminder overrides = 1;
            // Whether the default reminders of the calendar apply to the event.
    bool useDefault = 2;
    }
    Reminders reminders = 29;
    // Sequence number as per iCalendar.
    int32 sequence = 30;
    // Source from which the event was created. For example, a web page, an email message or any document identifiable by an URL with HTTP or HTTPS scheme. Can only be seen or modified by the creator of the event.
    message Source {
            // Title of the source; for example a title of a web page or an email subject.
    string title = 1;
            // URL of the source pointing to a resource. The URL scheme must be HTTP or HTTPS.
    string url = 2;
    }
    Source source = 31;
    // The (inclusive) start time of the event. For a recurring event, this is the start time of the first instance.
    EventDateTime start = 32;
    // Status of the event. Optional. Possible values are:  
    // - "confirmed" - The event is confirmed. This is the default status. 
    // - "tentative" - The event is tentatively confirmed. 
    // - "cancelled" - The event is cancelled.
    string status = 33;
    // Title of the event.
    string summary = 34;
    // Whether the event blocks time on the calendar. Optional. Possible values are:  
    // - "opaque" - Default value. The event does block time on the calendar. This is equivalent to setting Show me as to Busy in the Calendar UI. 
    // - "transparent" - The event does not block time on the calendar. This is equivalent to setting Show me as to Available in the Calendar UI.
    string transparency = 35;
    // Last modification time of the event (as a RFC3339 timestamp). Read-only.
    string updated = 36;
    // Visibility of the event. Optional. Possible values are:  
    // - "default" - Uses the default visibility for events on the calendar. This is the default value. 
    // - "public" - The event is public and event details are visible to all readers of the calendar. 
    // - "private" - The event is private and only event attendees may view event details. 
    // - "confidential" - The event is private. This value is provided for compatibility reasons.
    string visibility = 37;
}

message EventAttachment {
    // ID of the attached file. Read-only.
    // For Google Drive files, this is the ID of the corresponding Files resource entry in the Drive API.
    string fileId = 1;
    // URL link to the attachment.
    // For adding Google Drive file attachments use the same format as in alternateLink property of the Files resource in the Drive API.
    string fileUrl = 2;
    // URL link to the attachment's icon. Read-only.
    string iconLink = 3;
    // Internet media type (MIME type) of the attachment.
    string mimeType = 4;
    // Attachment title.
    string title = 5;
}

message EventAttendee {
    // Number of additional guests. Optional. The default is 0.
    int32 additionalGuests = 1;
    // The attendee's response comment. Optional.
    string comment = 2;
    // The attendee's name, if available. Optional.
    string displayName = 3;
    // The attendee's email address, if available. This field must be present when adding an attendee. It must be a valid email address as per RFC5322.
    string email = 4;
    // The attendee's Profile ID, if available. It corresponds to theid field in the People collection of the Google+ API
    string id = 5;
    // Whether this is an optional attendee. Optional. The default is False.
    bool optional = 6;
    // Whether the attendee is the organizer of the event. Read-only. The default is False.
    bool organizer = 7;
    // Whether the attendee is a resource. Read-only. The default is False.
    bool resource = 8;
    // The attendee's response status. Possible values are:  
    // - "needsAction" - The attendee has not responded to the invitation. 
    // - "declined" - The attendee has declined the invitation. 
    // - "tentative" - The attendee has tentatively accepted the invitation. 
    // - "accepted" - The attendee has accepted the invitation.
    string responseStatus = 9;
    // Whether this entry represents the calendar on which this copy of the event appears. Read-only. The default is False.
    bool self = 10;
}

message EventDateTime {
    // The date, in the format "yyyy-mm-dd", if this is an all-day event.
    string date = 1;
    // The time, as a combined date-time value (formatted according to RFC3339). A time zone offset is required unless a time zone is explicitly specified in timeZone.
    string dateTime = 2;
    // The time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. "Europe/Zurich".) For recurring events this field is required and specifies the time zone in which the recurrence is expanded. For single events this field is optional and indicates a custom time zone for the event start/end.
    string timeZone = 3;
}

message EventReminder {
    // The method used by this reminder. Possible values are:  
    // - "email" - Reminders are sent via email. 
    // - "sms" - Reminders are sent via SMS. These are only available for G Suite customers. Requests to set SMS reminders for other account types are ignored. 
    // - "popup" - Reminders are sent via a UI popup.
    string method = 1;
    // Number of minutes before the start of the event when the reminder should trigger. Valid values are between 0 and 40320 (4 weeks in minutes).
    int32 minutes = 2;
}

message Events {
    // The user's access role for this calendar. Read-only. Possible values are:  
    // - "none" - The user has no access. 
    // - "freeBusyReader" - The user has read access to free/busy information. 
    // - "reader" - The user has read access to the calendar. Private events will appear to users with reader access, but event details will be hidden. 
    // - "writer" - The user has read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible. 
    // - "owner" - The user has ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs.
    string accessRole = 1;
    // The default reminders on the calendar for the authenticated user. These reminders apply to all events on this calendar that do not explicitly override them (i.e. do not have reminders.useDefault set to True).
    repeated EventReminder defaultReminders = 2;
    // Description of the calendar. Read-only.
    string description = 3;
    // ETag of the collection.
    string etag = 4;
    // List of events on the calendar.
    repeated Event items = 5;
    // Type of the collection ("calendar#events").
    string kind = 6;
    // Token used to access the next page of this result. Omitted if no further results are available, in which case nextSyncToken is provided.
    string nextPageToken = 7;
    // Token used at a later point in time to retrieve only the entries that have changed since this result was returned. Omitted if further results are available, in which case nextPageToken is provided.
    string nextSyncToken = 8;
    // Title of the calendar. Read-only.
    string summary = 9;
    // The time zone of the calendar. Read-only.
    string timeZone = 10;
    // Last modification time of the calendar (as a RFC3339 timestamp). Read-only.
    string updated = 11;
}

message FreeBusyCalendar {
    // List of time ranges during which this calendar should be regarded as busy.
    repeated TimePeriod busy = 1;
    // Optional error(s) (if computation for the calendar failed).
    repeated Error errors = 2;
}

message FreeBusyGroup {
    // List of calendars' identifiers within a group.
    repeated string calendars = 1;
    // Optional error(s) (if computation for the group failed).
    repeated Error errors = 2;
}

message FreeBusyRequest {
    // Maximal number of calendars for which FreeBusy information is to be provided. Optional.
    int32 calendarExpansionMax = 1;
    // Maximal number of calendar identifiers to be provided for a single group. Optional. An error will be returned for a group with more members than this value.
    int32 groupExpansionMax = 2;
    // List of calendars and/or groups to query.
    repeated FreeBusyRequestItem items = 3;
    // The end of the interval for the query.
    string timeMax = 4;
    // The start of the interval for the query.
    string timeMin = 5;
    // Time zone used in the response. Optional. The default is UTC.
    string timeZone = 6;
}

message FreeBusyRequestItem {
    // The identifier of a calendar or a group.
    string id = 1;
}

message FreeBusyResponse {
    // List of free/busy information for calendars.
    map<string, FreeBusyCalendar> calendars = 1;
    // Expansion of groups.
    map<string, FreeBusyGroup> groups = 2;
    // Type of the resource ("calendar#freeBusy").
    string kind = 3;
    // The end of the interval.
    string timeMax = 4;
    // The start of the interval.
    string timeMin = 5;
}

message Setting {
    // ETag of the resource.
    string etag = 1;
    // The id of the user setting.
    string id = 2;
    // Type of the resource ("calendar#setting").
    string kind = 3;
    // Value of the user setting. The format of the value depends on the ID of the setting. It must always be a UTF-8 string of length up to 1024 characters.
    string value = 4;
}

message Settings {
    // Etag of the collection.
    string etag = 1;
    // List of user settings.
    repeated Setting items = 2;
    // Type of the collection ("calendar#settings").
    string kind = 3;
    // Token used to access the next page of this result. Omitted if no further results are available, in which case nextSyncToken is provided.
    string nextPageToken = 4;
    // Token used at a later point in time to retrieve only the entries that have changed since this result was returned. Omitted if further results are available, in which case nextPageToken is provided.
    string nextSyncToken = 5;
}

message TimePeriod {
    // The (exclusive) end of the time period.
    string end = 1;
    // The (inclusive) start of the time period.
    string start = 2;
}

enum Alt {
    JSON = 0;
}

service CalendarService {
    // Creates a secondary calendar.
    rpc PostCalendars(PostCalendarsRequest) returns (Calendar) {
      option (google.api.http) = {
        post: "/calendar/v3/calendars"
        body: "body"
      };
    }
    // Returns metadata for a calendar.
    rpc GetCalendarsCalendarId(GetCalendarsCalendarIdRequest) returns (Calendar) {
      option (google.api.http) = {
        get: "/calendar/v3/calendars/{calendarId}"
      };
    }
    // Updates metadata for a calendar.
    rpc PutCalendarsCalendarId(PutCalendarsCalendarIdRequest) returns (Calendar) {
      option (google.api.http) = {
        put: "/calendar/v3/calendars/{calendarId}"
        body: "body"
      };
    }
    // Deletes a secondary calendar. Use calendars.clear for clearing all events on primary calendars.
    rpc DeleteCalendarsCalendarId(DeleteCalendarsCalendarIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/calendar/v3/calendars/{calendarId}"
      };
    }
    // Returns the rules in the access control list for the calendar.
    rpc GetCalendarsCalendarIdAcl(GetCalendarsCalendarIdAclRequest) returns (Acl) {
      option (google.api.http) = {
        get: "/calendar/v3/calendars/{calendarId}/acl"
      };
    }
    // Creates an access control rule.
    rpc PostCalendarsCalendarIdAcl(PostCalendarsCalendarIdAclRequest) returns (AclRule) {
      option (google.api.http) = {
        post: "/calendar/v3/calendars/{calendarId}/acl"
        body: "body"
      };
    }
    // Watch for changes to ACL resources.
    rpc PostCalendarsCalendarIdAclWatch(PostCalendarsCalendarIdAclWatchRequest) returns (Channel) {
      option (google.api.http) = {
        post: "/calendar/v3/calendars/{calendarId}/acl/watch"
        body: "resource"
      };
    }
    // Returns an access control rule.
    rpc GetCalendarsCalendarIdAclRuleId(GetCalendarsCalendarIdAclRuleIdRequest) returns (AclRule) {
      option (google.api.http) = {
        get: "/calendar/v3/calendars/{calendarId}/acl/{ruleId}"
      };
    }
    // Updates an access control rule.
    rpc PutCalendarsCalendarIdAclRuleId(PutCalendarsCalendarIdAclRuleIdRequest) returns (AclRule) {
      option (google.api.http) = {
        put: "/calendar/v3/calendars/{calendarId}/acl/{ruleId}"
        body: "body"
      };
    }
    // Deletes an access control rule.
    rpc DeleteCalendarsCalendarIdAclRuleId(DeleteCalendarsCalendarIdAclRuleIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/calendar/v3/calendars/{calendarId}/acl/{ruleId}"
      };
    }
    // Clears a primary calendar. This operation deletes all events associated with the primary calendar of an account.
    rpc PostCalendarsCalendarIdClear(PostCalendarsCalendarIdClearRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/calendar/v3/calendars/{calendarId}/clear"
      };
    }
    // Returns events on the specified calendar.
    rpc GetCalendarsCalendarIdEvents(GetCalendarsCalendarIdEventsRequest) returns (Events) {
      option (google.api.http) = {
        get: "/calendar/v3/calendars/{calendarId}/events"
      };
    }
    // Creates an event.
    rpc PostCalendarsCalendarIdEvents(PostCalendarsCalendarIdEventsRequest) returns (Event) {
      option (google.api.http) = {
        post: "/calendar/v3/calendars/{calendarId}/events"
        body: "body"
      };
    }
    // Imports an event. This operation is used to add a private copy of an existing event to a calendar.
    rpc PostCalendarsCalendarIdEventsImport(PostCalendarsCalendarIdEventsImportRequest) returns (Event) {
      option (google.api.http) = {
        post: "/calendar/v3/calendars/{calendarId}/events/import"
        body: "body"
      };
    }
    // Creates an event based on a simple text string.
    rpc PostCalendarsCalendarIdEventsQuickAdd(PostCalendarsCalendarIdEventsQuickAddRequest) returns (Event) {
      option (google.api.http) = {
        post: "/calendar/v3/calendars/{calendarId}/events/quickAdd"
      };
    }
    // Watch for changes to Events resources.
    rpc PostCalendarsCalendarIdEventsWatch(PostCalendarsCalendarIdEventsWatchRequest) returns (Channel) {
      option (google.api.http) = {
        post: "/calendar/v3/calendars/{calendarId}/events/watch"
        body: "resource"
      };
    }
    // Returns an event.
    rpc GetCalendarsCalendarIdEventsEventId(GetCalendarsCalendarIdEventsEventIdRequest) returns (Event) {
      option (google.api.http) = {
        get: "/calendar/v3/calendars/{calendarId}/events/{eventId}"
      };
    }
    // Updates an event.
    rpc PutCalendarsCalendarIdEventsEventId(PutCalendarsCalendarIdEventsEventIdRequest) returns (Event) {
      option (google.api.http) = {
        put: "/calendar/v3/calendars/{calendarId}/events/{eventId}"
        body: "body"
      };
    }
    // Deletes an event.
    rpc DeleteCalendarsCalendarIdEventsEventId(DeleteCalendarsCalendarIdEventsEventIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/calendar/v3/calendars/{calendarId}/events/{eventId}"
      };
    }
    // Returns instances of the specified recurring event.
    rpc GetCalendarsCalendarIdEventsEventIdInstances(GetCalendarsCalendarIdEventsEventIdInstancesRequest) returns (Events) {
      option (google.api.http) = {
        get: "/calendar/v3/calendars/{calendarId}/events/{eventId}/instances"
      };
    }
    // Moves an event to another calendar, i.e. changes an event's organizer.
    rpc PostCalendarsCalendarIdEventsEventIdMove(PostCalendarsCalendarIdEventsEventIdMoveRequest) returns (Event) {
      option (google.api.http) = {
        post: "/calendar/v3/calendars/{calendarId}/events/{eventId}/move"
      };
    }
    // Stop watching resources through this channel
    rpc PostChannelsStop(PostChannelsStopRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/calendar/v3/channels/stop"
        body: "resource"
      };
    }
    // Returns the color definitions for calendars and events.
    rpc GetColors(GetColorsRequest) returns (Colors) {
      option (google.api.http) = {
        get: "/calendar/v3/colors"
      };
    }
    // Returns free/busy information for a set of calendars.
    rpc PostFreeBusy(PostFreeBusyRequest) returns (FreeBusyResponse) {
      option (google.api.http) = {
        post: "/calendar/v3/freeBusy"
        body: "body"
      };
    }
    // Returns entries on the user's calendar list.
    rpc GetUsersMeCalendarList(GetUsersMeCalendarListRequest) returns (CalendarList) {
      option (google.api.http) = {
        get: "/calendar/v3/users/me/calendarList"
      };
    }
    // Adds an entry to the user's calendar list.
    rpc PostUsersMeCalendarList(PostUsersMeCalendarListRequest) returns (CalendarListEntry) {
      option (google.api.http) = {
        post: "/calendar/v3/users/me/calendarList"
        body: "body"
      };
    }
    // Watch for changes to CalendarList resources.
    rpc PostUsersMeCalendarListWatch(PostUsersMeCalendarListWatchRequest) returns (Channel) {
      option (google.api.http) = {
        post: "/calendar/v3/users/me/calendarList/watch"
        body: "resource"
      };
    }
    // Returns an entry on the user's calendar list.
    rpc GetUsersMeCalendarListCalendarId(GetUsersMeCalendarListCalendarIdRequest) returns (CalendarListEntry) {
      option (google.api.http) = {
        get: "/calendar/v3/users/me/calendarList/{calendarId}"
      };
    }
    // Updates an entry on the user's calendar list.
    rpc PutUsersMeCalendarListCalendarId(PutUsersMeCalendarListCalendarIdRequest) returns (CalendarListEntry) {
      option (google.api.http) = {
        put: "/calendar/v3/users/me/calendarList/{calendarId}"
        body: "body"
      };
    }
    // Deletes an entry on the user's calendar list.
    rpc DeleteUsersMeCalendarListCalendarId(DeleteUsersMeCalendarListCalendarIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/calendar/v3/users/me/calendarList/{calendarId}"
      };
    }
    // Returns all user settings for the authenticated user.
    rpc GetUsersMeSettings(GetUsersMeSettingsRequest) returns (Settings) {
      option (google.api.http) = {
        get: "/calendar/v3/users/me/settings"
      };
    }
    // Watch for changes to Settings resources.
    rpc PostUsersMeSettingsWatch(PostUsersMeSettingsWatchRequest) returns (Channel) {
      option (google.api.http) = {
        post: "/calendar/v3/users/me/settings/watch"
        body: "resource"
      };
    }
    // Returns a single user setting.
    rpc GetUsersMeSettingsSetting(GetUsersMeSettingsSettingRequest) returns (Setting) {
      option (google.api.http) = {
        get: "/calendar/v3/users/me/settings/{setting}"
      };
    }
}

syntax = "proto3";

import "google/api/annotations.proto";

package googleclassroom;

message GetV1CoursesRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    // Restricts returned courses to those in one of the specified states
    // The default value is ACTIVE, ARCHIVED, PROVISIONED, DECLINED.
    repeated string courseStates = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    // Maximum number of items to return. Zero or unspecified indicates that the
    // server may assign a maximum.
    // 
    // The server may return fewer than the specified number of results.
    int32 pageSize = 10;
    // nextPageToken
    // value returned from a previous
    // list call,
    // indicating that the subsequent page of results should be returned.
    // 
    // The list request must be
    // otherwise identical to the one that resulted in this token.
    string pageToken = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    // Restricts returned courses to those having a student with the specified
    // identifier. The identifier can be one of the following:
    // 
    // * the numeric identifier for the user
    // * the email address of the user
    // * the string literal `"me"`, indicating the requesting user
    string studentId = 15;
    // Restricts returned courses to those having a teacher with the specified
    // identifier. The identifier can be one of the following:
    // 
    // * the numeric identifier for the user
    // * the email address of the user
    // * the string literal `"me"`, indicating the requesting user
    string teacherId = 16;
    string uploadType = 17;
    string upload_protocol = 18;
}

message PostV1CoursesRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    Course body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message GetV1CoursesCourseIdAliasesRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    // The identifier of the course.
    // This identifier can be either the Classroom-assigned identifier or an
    // alias.
    string courseId = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    // Maximum number of items to return. Zero or unspecified indicates that the
    // server may assign a maximum.
    // 
    // The server may return fewer than the specified number of results.
    int32 pageSize = 10;
    // nextPageToken
    // value returned from a previous
    // list call,
    // indicating that the subsequent page of results should be returned.
    // 
    // The list request
    // must be otherwise identical to the one that resulted in this token.
    string pageToken = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message PostV1CoursesCourseIdAliasesRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    CourseAlias body = 5;
    string callback = 6;
    // Identifier of the course to alias.
    // This identifier can be either the Classroom-assigned identifier or an
    // alias.
    string courseId = 7;
    string fields = 8;
    string key = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message DeleteV1CoursesCourseIdAliasesAliasRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // Alias to delete.
    // This may not be the Classroom-assigned identifier.
    string alias = 3;
    alt alt = 4;
    string bearer_token = 5;
    string callback = 6;
    // Identifier of the course whose alias should be deleted.
    // This identifier can be either the Classroom-assigned identifier or an
    // alias.
    string courseId = 7;
    string fields = 8;
    string key = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1CoursesCourseIdAnnouncementsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    // Restriction on the `state` of announcements returned.
    // If this argument is left unspecified, the default value is `PUBLISHED`.
    repeated string announcementStates = 4;
    string bearer_token = 5;
    string callback = 6;
    // Identifier of the course.
    // This identifier can be either the Classroom-assigned identifier or an
    // alias.
    string courseId = 7;
    string fields = 8;
    string key = 9;
    string oauth_token = 10;
    // Optional sort ordering for results. A comma-separated list of fields with
    // an optional sort direction keyword. Supported field is `updateTime`.
    // Supported direction keywords are `asc` and `desc`.
    // If not specified, `updateTime desc` is the default behavior.
    // Examples: `updateTime asc`, `updateTime`
    string orderBy = 11;
    // Maximum number of items to return. Zero or unspecified indicates that the
    // server may assign a maximum.
    // 
    // The server may return fewer than the specified number of results.
    int32 pageSize = 12;
    // nextPageToken
    // value returned from a previous
    // list call,
    // indicating that the subsequent page of results should be returned.
    // 
    // The list request
    // must be otherwise identical to the one that resulted in this token.
    string pageToken = 13;
    boolean pp = 14;
    boolean prettyPrint = 15;
    string quotaUser = 16;
    string uploadType = 17;
    string upload_protocol = 18;
}

message PostV1CoursesCourseIdAnnouncementsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    Announcement body = 5;
    string callback = 6;
    // Identifier of the course.
    // This identifier can be either the Classroom-assigned identifier or an
    // alias.
    string courseId = 7;
    string fields = 8;
    string key = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1CoursesCourseIdAnnouncementsIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    // Identifier of the course.
    // This identifier can be either the Classroom-assigned identifier or an
    // alias.
    string courseId = 6;
    string fields = 7;
    // Identifier of the announcement.
    string id = 8;
    string key = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message DeleteV1CoursesCourseIdAnnouncementsIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    // Identifier of the course.
    // This identifier can be either the Classroom-assigned identifier or an
    // alias.
    string courseId = 6;
    string fields = 7;
    // Identifier of the announcement to delete.
    // This identifier is a Classroom-assigned identifier.
    string id = 8;
    string key = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1CoursesCourseIdAnnouncementsId:ModifyAssigneesRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    ModifyAnnouncementAssigneesRequest body = 5;
    string callback = 6;
    // Identifier of the course.
    // This identifier can be either the Classroom-assigned identifier or an
    // alias.
    string courseId = 7;
    string fields = 8;
    // Identifier of the announcement.
    string id = 9;
    string key = 10;
    string oauth_token = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message GetV1CoursesCourseIdCourseWorkRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    // Identifier of the course.
    // This identifier can be either the Classroom-assigned identifier or an
    // alias.
    string courseId = 6;
    // Restriction on the work status to return. Only courseWork that matches
    // is returned. If unspecified, items with a work status of `PUBLISHED`
    // is returned.
    repeated string courseWorkStates = 7;
    string fields = 8;
    string key = 9;
    string oauth_token = 10;
    // Optional sort ordering for results. A comma-separated list of fields with
    // an optional sort direction keyword. Supported fields are `updateTime`
    // and `dueDate`. Supported direction keywords are `asc` and `desc`.
    // If not specified, `updateTime desc` is the default behavior.
    // Examples: `dueDate asc,updateTime desc`, `updateTime,dueDate desc`
    string orderBy = 11;
    // Maximum number of items to return. Zero or unspecified indicates that the
    // server may assign a maximum.
    // 
    // The server may return fewer than the specified number of results.
    int32 pageSize = 12;
    // nextPageToken
    // value returned from a previous
    // list call,
    // indicating that the subsequent page of results should be returned.
    // 
    // The list request
    // must be otherwise identical to the one that resulted in this token.
    string pageToken = 13;
    boolean pp = 14;
    boolean prettyPrint = 15;
    string quotaUser = 16;
    string uploadType = 17;
    string upload_protocol = 18;
}

message PostV1CoursesCourseIdCourseWorkRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    CourseWork body = 5;
    string callback = 6;
    // Identifier of the course.
    // This identifier can be either the Classroom-assigned identifier or an
    // alias.
    string courseId = 7;
    string fields = 8;
    string key = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1CoursesCourseIdCourseWorkCourseWorkIdStudentSubmissionsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    // Identifier of the course.
    // This identifier can be either the Classroom-assigned identifier or an
    // alias.
    string courseId = 6;
    // Identifier of the student work to request.
    // This may be set to the string literal `"-"` to request student work for
    // all course work in the specified course.
    string courseWorkId = 7;
    string fields = 8;
    string key = 9;
    // Requested lateness value. If specified, returned student submissions are
    // restricted by the requested value.
    // If unspecified, submissions are returned regardless of `late` value.
    enum GetV1CoursesCourseIdCourseWorkCourseWorkIdStudentSubmissionsRequest_Late {
        GETV1COURSESCOURSEIDCOURSEWORKCOURSEWORKIDSTUDENTSUBMISSIONSREQUEST_LATE_LATE_VALUES_UNSPECIFIED = 0;
        GETV1COURSESCOURSEIDCOURSEWORKCOURSEWORKIDSTUDENTSUBMISSIONSREQUEST_LATE_LATE_ONLY = 1;
        GETV1COURSESCOURSEIDCOURSEWORKCOURSEWORKIDSTUDENTSUBMISSIONSREQUEST_LATE_NOT_LATE_ONLY = 2;
    }
    GetV1CoursesCourseIdCourseWorkCourseWorkIdStudentSubmissionsRequest_Late late = 10;
    string oauth_token = 11;
    // Maximum number of items to return. Zero or unspecified indicates that the
    // server may assign a maximum.
    // 
    // The server may return fewer than the specified number of results.
    int32 pageSize = 12;
    // nextPageToken
    // value returned from a previous
    // list call,
    // indicating that the subsequent page of results should be returned.
    // 
    // The list request
    // must be otherwise identical to the one that resulted in this token.
    string pageToken = 13;
    boolean pp = 14;
    boolean prettyPrint = 15;
    string quotaUser = 16;
    // Requested submission states. If specified, returned student submissions
    // match one of the specified submission states.
    repeated string states = 17;
    string uploadType = 18;
    string upload_protocol = 19;
    // Optional argument to restrict returned student work to those owned by the
    // student with the specified identifier. The identifier can be one of the
    // following:
    // 
    // * the numeric identifier for the user
    // * the email address of the user
    // * the string literal `"me"`, indicating the requesting user
    string userId = 20;
}

message GetV1CoursesCourseIdCourseWorkCourseWorkIdStudentSubmissionsIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    // Identifier of the course.
    // This identifier can be either the Classroom-assigned identifier or an
    // alias.
    string courseId = 6;
    // Identifier of the course work.
    string courseWorkId = 7;
    string fields = 8;
    // Identifier of the student submission.
    string id = 9;
    string key = 10;
    string oauth_token = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message PostV1CoursesCourseIdCourseWorkCourseWorkIdStudentSubmissionsId:ModifyAttachmentsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    ModifyAttachmentsRequest body = 5;
    string callback = 6;
    // Identifier of the course.
    // This identifier can be either the Classroom-assigned identifier or an
    // alias.
    string courseId = 7;
    // Identifier of the course work.
    string courseWorkId = 8;
    string fields = 9;
    // Identifier of the student submission.
    string id = 10;
    string key = 11;
    string oauth_token = 12;
    boolean pp = 13;
    boolean prettyPrint = 14;
    string quotaUser = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

message PostV1CoursesCourseIdCourseWorkCourseWorkIdStudentSubmissionsId:ReclaimRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    ReclaimStudentSubmissionRequest body = 5;
    string callback = 6;
    // Identifier of the course.
    // This identifier can be either the Classroom-assigned identifier or an
    // alias.
    string courseId = 7;
    // Identifier of the course work.
    string courseWorkId = 8;
    string fields = 9;
    // Identifier of the student submission.
    string id = 10;
    string key = 11;
    string oauth_token = 12;
    boolean pp = 13;
    boolean prettyPrint = 14;
    string quotaUser = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

message PostV1CoursesCourseIdCourseWorkCourseWorkIdStudentSubmissionsId:ReturnRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    ReturnStudentSubmissionRequest body = 5;
    string callback = 6;
    // Identifier of the course.
    // This identifier can be either the Classroom-assigned identifier or an
    // alias.
    string courseId = 7;
    // Identifier of the course work.
    string courseWorkId = 8;
    string fields = 9;
    // Identifier of the student submission.
    string id = 10;
    string key = 11;
    string oauth_token = 12;
    boolean pp = 13;
    boolean prettyPrint = 14;
    string quotaUser = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

message PostV1CoursesCourseIdCourseWorkCourseWorkIdStudentSubmissionsId:TurnInRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    TurnInStudentSubmissionRequest body = 5;
    string callback = 6;
    // Identifier of the course.
    // This identifier can be either the Classroom-assigned identifier or an
    // alias.
    string courseId = 7;
    // Identifier of the course work.
    string courseWorkId = 8;
    string fields = 9;
    // Identifier of the student submission.
    string id = 10;
    string key = 11;
    string oauth_token = 12;
    boolean pp = 13;
    boolean prettyPrint = 14;
    string quotaUser = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

message GetV1CoursesCourseIdCourseWorkIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    // Identifier of the course.
    // This identifier can be either the Classroom-assigned identifier or an
    // alias.
    string courseId = 6;
    string fields = 7;
    // Identifier of the course work.
    string id = 8;
    string key = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message DeleteV1CoursesCourseIdCourseWorkIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    // Identifier of the course.
    // This identifier can be either the Classroom-assigned identifier or an
    // alias.
    string courseId = 6;
    string fields = 7;
    // Identifier of the course work to delete.
    // This identifier is a Classroom-assigned identifier.
    string id = 8;
    string key = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1CoursesCourseIdCourseWorkId:ModifyAssigneesRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    ModifyCourseWorkAssigneesRequest body = 5;
    string callback = 6;
    // Identifier of the course.
    // This identifier can be either the Classroom-assigned identifier or an
    // alias.
    string courseId = 7;
    string fields = 8;
    // Identifier of the coursework.
    string id = 9;
    string key = 10;
    string oauth_token = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message GetV1CoursesCourseIdStudentsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    // Identifier of the course.
    // This identifier can be either the Classroom-assigned identifier or an
    // alias.
    string courseId = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    // Maximum number of items to return. Zero means no maximum.
    // 
    // The server may return fewer than the specified number of results.
    int32 pageSize = 10;
    // nextPageToken
    // value returned from a previous
    // list call, indicating that
    // the subsequent page of results should be returned.
    // 
    // The list request must be
    // otherwise identical to the one that resulted in this token.
    string pageToken = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message PostV1CoursesCourseIdStudentsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    Student body = 5;
    string callback = 6;
    // Identifier of the course to create the student in.
    // This identifier can be either the Classroom-assigned identifier or an
    // alias.
    string courseId = 7;
    // Enrollment code of the course to create the student in.
    // This code is required if userId
    // corresponds to the requesting user; it may be omitted if the requesting
    // user has administrative permissions to create students for any user.
    string enrollmentCode = 8;
    string fields = 9;
    string key = 10;
    string oauth_token = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message GetV1CoursesCourseIdStudentsUserIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    // Identifier of the course.
    // This identifier can be either the Classroom-assigned identifier or an
    // alias.
    string courseId = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
    // Identifier of the student to return. The identifier can be one of the
    // following:
    // 
    // * the numeric identifier for the user
    // * the email address of the user
    // * the string literal `"me"`, indicating the requesting user
    string userId = 15;
}

message DeleteV1CoursesCourseIdStudentsUserIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    // Identifier of the course.
    // This identifier can be either the Classroom-assigned identifier or an
    // alias.
    string courseId = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
    // Identifier of the student to delete. The identifier can be one of the
    // following:
    // 
    // * the numeric identifier for the user
    // * the email address of the user
    // * the string literal `"me"`, indicating the requesting user
    string userId = 15;
}

message GetV1CoursesCourseIdTeachersRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    // Identifier of the course.
    // This identifier can be either the Classroom-assigned identifier or an
    // alias.
    string courseId = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    // Maximum number of items to return. Zero means no maximum.
    // 
    // The server may return fewer than the specified number of results.
    int32 pageSize = 10;
    // nextPageToken
    // value returned from a previous
    // list call, indicating that
    // the subsequent page of results should be returned.
    // 
    // The list request must be
    // otherwise identical to the one that resulted in this token.
    string pageToken = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message PostV1CoursesCourseIdTeachersRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    Teacher body = 5;
    string callback = 6;
    // Identifier of the course.
    // This identifier can be either the Classroom-assigned identifier or an
    // alias.
    string courseId = 7;
    string fields = 8;
    string key = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1CoursesCourseIdTeachersUserIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    // Identifier of the course.
    // This identifier can be either the Classroom-assigned identifier or an
    // alias.
    string courseId = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
    // Identifier of the teacher to return. The identifier can be one of the
    // following:
    // 
    // * the numeric identifier for the user
    // * the email address of the user
    // * the string literal `"me"`, indicating the requesting user
    string userId = 15;
}

message DeleteV1CoursesCourseIdTeachersUserIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    // Identifier of the course.
    // This identifier can be either the Classroom-assigned identifier or an
    // alias.
    string courseId = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
    // Identifier of the teacher to delete. The identifier can be one of the
    // following:
    // 
    // * the numeric identifier for the user
    // * the email address of the user
    // * the string literal `"me"`, indicating the requesting user
    string userId = 15;
}

message GetV1CoursesIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // Identifier of the course to return.
    // This identifier can be either the Classroom-assigned identifier or an
    // alias.
    string id = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PutV1CoursesIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    Course body = 5;
    string callback = 6;
    string fields = 7;
    // Identifier of the course to update.
    // This identifier can be either the Classroom-assigned identifier or an
    // alias.
    string id = 8;
    string key = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message DeleteV1CoursesIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // Identifier of the course to delete.
    // This identifier can be either the Classroom-assigned identifier or an
    // alias.
    string id = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message GetV1InvitationsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    // Restricts returned invitations to those for a course with the specified
    // identifier.
    string courseId = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    // Maximum number of items to return. Zero means no maximum.
    // 
    // The server may return fewer than the specified number of results.
    int32 pageSize = 10;
    // nextPageToken
    // value returned from a previous
    // list call, indicating
    // that the subsequent page of results should be returned.
    // 
    // The list request must be
    // otherwise identical to the one that resulted in this token.
    string pageToken = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
    // Restricts returned invitations to those for a specific user. The identifier
    // can be one of the following:
    // 
    // * the numeric identifier for the user
    // * the email address of the user
    // * the string literal `"me"`, indicating the requesting user
    string userId = 17;
}

message PostV1InvitationsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    Invitation body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message GetV1InvitationsIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // Identifier of the invitation to return.
    string id = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message DeleteV1InvitationsIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // Identifier of the invitation to delete.
    string id = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PostV1InvitationsId:AcceptRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // Identifier of the invitation to accept.
    string id = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PostV1RegistrationsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    Registration body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message DeleteV1RegistrationsRegistrationIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    boolean pp = 9;
    boolean prettyPrint = 10;
    string quotaUser = 11;
    // The `registration_id` of the `Registration` to be deleted.
    string registrationId = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message GetV1UserProfilesStudentIdGuardianInvitationsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // If specified, only results with the specified `invited_email_address`
    // will be returned.
    string invitedEmailAddress = 7;
    string key = 8;
    string oauth_token = 9;
    // Maximum number of items to return. Zero or unspecified indicates that the
    // server may assign a maximum.
    // 
    // The server may return fewer than the specified number of results.
    int32 pageSize = 10;
    // nextPageToken
    // value returned from a previous
    // list call,
    // indicating that the subsequent page of results should be returned.
    // 
    // The list request
    // must be otherwise identical to the one that resulted in this token.
    string pageToken = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    // If specified, only results with the specified `state` values will be
    // returned. Otherwise, results with a `state` of `PENDING` will be returned.
    repeated string states = 15;
    // The ID of the student whose guardian invitations are to be returned.
    // The identifier can be one of the following:
    // 
    // * the numeric identifier for the user
    // * the email address of the user
    // * the string literal `"me"`, indicating the requesting user
    // * the string literal `"-"`, indicating that results should be returned for
    //   all students that the requesting user is permitted to view guardian
    //   invitations.
    string studentId = 16;
    string uploadType = 17;
    string upload_protocol = 18;
}

message PostV1UserProfilesStudentIdGuardianInvitationsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    GuardianInvitation body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // ID of the student (in standard format)
    string studentId = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1UserProfilesStudentIdGuardianInvitationsInvitationIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // The `id` field of the `GuardianInvitation` being requested.
    string invitationId = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // The ID of the student whose guardian invitation is being requested.
    string studentId = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1UserProfilesStudentIdGuardiansRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // Filter results by the email address that the original invitation was sent
    // to, resulting in this guardian link.
    // This filter can only be used by domain administrators.
    string invitedEmailAddress = 7;
    string key = 8;
    string oauth_token = 9;
    // Maximum number of items to return. Zero or unspecified indicates that the
    // server may assign a maximum.
    // 
    // The server may return fewer than the specified number of results.
    int32 pageSize = 10;
    // nextPageToken
    // value returned from a previous
    // list call,
    // indicating that the subsequent page of results should be returned.
    // 
    // The list request
    // must be otherwise identical to the one that resulted in this token.
    string pageToken = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    // Filter results by the student who the guardian is linked to.
    // The identifier can be one of the following:
    // 
    // * the numeric identifier for the user
    // * the email address of the user
    // * the string literal `"me"`, indicating the requesting user
    // * the string literal `"-"`, indicating that results should be returned for
    //   all students that the requesting user has access to view.
    string studentId = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

message GetV1UserProfilesStudentIdGuardiansGuardianIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // The `id` field from a `Guardian`.
    string guardianId = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // The student whose guardian is being requested. One of the following:
    // 
    // * the numeric identifier for the user
    // * the email address of the user
    // * the string literal `"me"`, indicating the requesting user
    string studentId = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message DeleteV1UserProfilesStudentIdGuardiansGuardianIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // The `id` field from a `Guardian`.
    string guardianId = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // The student whose guardian is to be deleted. One of the following:
    // 
    // * the numeric identifier for the user
    // * the email address of the user
    // * the string literal `"me"`, indicating the requesting user
    string studentId = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1UserProfilesUserIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    boolean pp = 9;
    boolean prettyPrint = 10;
    string quotaUser = 11;
    string uploadType = 12;
    string upload_protocol = 13;
    // Identifier of the profile to return. The identifier can be one of the
    // following:
    // 
    // * the numeric identifier for the user
    // * the email address of the user
    // * the string literal `"me"`, indicating the requesting user
    string userId = 14;
}

enum $.Xgafv {
    $XGAFV_1 = 0;
    $XGAFV_2 = 1;
}

message Announcement {
    // Absolute link to this announcement in the Classroom web UI.
    // This is only populated if `state` is `PUBLISHED`.
    // 
    // Read-only.
    string alternateLink = 1;
    // Assignee mode of the announcement.
    // If unspecified, the default value is `ALL_STUDENTS`.
    enum Announcement_AssigneeMode {
        ANNOUNCEMENT_ASSIGNEEMODE_ASSIGNEE_MODE_UNSPECIFIED = 0;
        ANNOUNCEMENT_ASSIGNEEMODE_ALL_STUDENTS = 1;
        ANNOUNCEMENT_ASSIGNEEMODE_INDIVIDUAL_STUDENTS = 2;
    }
    Announcement_AssigneeMode assigneeMode = 2;
    // Identifier of the course.
    // 
    // Read-only.
    string courseId = 3;
    // Timestamp when this announcement was created.
    // 
    // Read-only.
    string creationTime = 4;
    // Identifier for the user that created the announcement.
    // 
    // Read-only.
    string creatorUserId = 5;
    // Classroom-assigned identifier of this announcement, unique per course.
    // 
    // Read-only.
    string id = 6;
    // Identifiers of students with access to the announcement.
    // This field is set only if `assigneeMode` is `INDIVIDUAL_STUDENTS`.
    // If the `assigneeMode` is `INDIVIDUAL_STUDENTS`, then only students specified in this
    // field will be able to see the announcement.
    IndividualStudentsOptions individualStudentsOptions = 7;
    // Additional materials.
    // 
    // Announcements must have no more than 20 material items.
    repeated Material materials = 8;
    // Optional timestamp when this announcement is scheduled to be published.
    string scheduledTime = 9;
    // Status of this announcement.
    // If unspecified, the default state is `DRAFT`.
    enum Announcement_State {
        ANNOUNCEMENT_STATE_ANNOUNCEMENT_STATE_UNSPECIFIED = 0;
        ANNOUNCEMENT_STATE_PUBLISHED = 1;
        ANNOUNCEMENT_STATE_DRAFT = 2;
        ANNOUNCEMENT_STATE_DELETED = 3;
    }
    Announcement_State state = 10;
    // Description of this announcement.
    // The text must be a valid UTF-8 string containing no more
    // than 30,000 characters.
    string text = 11;
    // Timestamp of the most recent change to this announcement.
    // 
    // Read-only.
    string updateTime = 12;
}

message Assignment {
    // Drive folder where attachments from student submissions are placed.
    // This is only populated for course teachers and administrators.
    DriveFolder studentWorkFolder = 1;
}

message AssignmentSubmission {
    // Attachments added by the student.
    // Drive files that correspond to materials with a share mode of
    // STUDENT_COPY may not exist yet if the student has not accessed the
    // assignment in Classroom.
    // 
    // Some attachment metadata is only populated if the requesting user has
    // permission to access it. Identifier and alternate_link fields are always
    // available, but others (e.g. title) may not be.
    repeated Attachment attachments = 1;
}

message Attachment {
    // Google Drive file attachment.
    DriveFile driveFile = 1;
    // Google Forms attachment.
    Form form = 2;
    // Link attachment.
    Link link = 3;
    // Youtube video attachment.
    YouTubeVideo youTubeVideo = 4;
}

message CloudPubsubTopic {
    // The `name` field of a Cloud Pub/Sub
    // [Topic](https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.topics#Topic).
    string topicName = 1;
}

message Course {
    // Absolute link to this course in the Classroom web UI.
    // 
    // Read-only.
    string alternateLink = 1;
    // The Calendar ID for a calendar that all course members can see, to which
    // Classroom adds events for course work and announcements in the course.
    // 
    // Read-only.
    string calendarId = 2;
    // The email address of a Google group containing all members of the course.
    // This group does not accept email and can only be used for permissions.
    // 
    // Read-only.
    string courseGroupEmail = 3;
    // Sets of materials that appear on the "about" page of this course.
    // 
    // Read-only.
    repeated CourseMaterialSet courseMaterialSets = 4;
    // State of the course.
    // If unspecified, the default state is `PROVISIONED`.
    enum Course_CourseState {
        COURSE_COURSESTATE_COURSE_STATE_UNSPECIFIED = 0;
        COURSE_COURSESTATE_ACTIVE = 1;
        COURSE_COURSESTATE_ARCHIVED = 2;
        COURSE_COURSESTATE_PROVISIONED = 3;
        COURSE_COURSESTATE_DECLINED = 4;
        COURSE_COURSESTATE_SUSPENDED = 5;
    }
    Course_CourseState courseState = 5;
    // Creation time of the course.
    // Specifying this field in a course update mask results in an error.
    // 
    // Read-only.
    string creationTime = 6;
    // Optional description.
    // For example, "We'll be learning about the structure of living
    // creatures from a combination of textbooks, guest lectures, and lab work.
    // Expect to be excited!"
    // If set, this field must be a valid UTF-8 string and no longer than 30,000
    // characters.
    string description = 7;
    // Optional heading for the description.
    // For example, "Welcome to 10th Grade Biology."
    // If set, this field must be a valid UTF-8 string and no longer than 3600
    // characters.
    string descriptionHeading = 8;
    // Enrollment code to use when joining this course.
    // Specifying this field in a course update mask results in an error.
    // 
    // Read-only.
    string enrollmentCode = 9;
    // Whether or not guardian notifications are enabled for this course.
    // 
    // Read-only.
    bool guardiansEnabled = 10;
    // Identifier for this course assigned by Classroom.
    // 
    // When
    // creating a course,
    // you may optionally set this identifier to an
    // alias string in the
    // request to create a corresponding alias. The `id` is still assigned by
    // Classroom and cannot be updated after the course is created.
    // 
    // Specifying this field in a course update mask results in an error.
    string id = 11;
    // Name of the course.
    // For example, "10th Grade Biology".
    // The name is required. It must be between 1 and 750 characters and a valid
    // UTF-8 string.
    string name = 12;
    // The identifier of the owner of a course.
    // 
    // When specified as a parameter of a
    // create course request, this
    // field is required.
    // The identifier can be one of the following:
    // 
    // * the numeric identifier for the user
    // * the email address of the user
    // * the string literal `"me"`, indicating the requesting user
    // 
    // This must be set in a create request. Admins can also specify this field
    // in a patch course request to
    // transfer ownership. In other contexts, it is read-only.
    string ownerId = 13;
    // Optional room location.
    // For example, "301".
    // If set, this field must be a valid UTF-8 string and no longer than 650
    // characters.
    string room = 14;
    // Section of the course.
    // For example, "Period 2".
    // If set, this field must be a valid UTF-8 string and no longer than 2800
    // characters.
    string section = 15;
    // Information about a Drive Folder that is shared with all teachers of the
    // course.
    // 
    // This field will only be set for teachers of the course and domain administrators.
    // 
    // Read-only.
    DriveFolder teacherFolder = 16;
    // The email address of a Google group containing all teachers of the course.
    // This group does not accept email and can only be used for permissions.
    // 
    // Read-only.
    string teacherGroupEmail = 17;
    // Time of the most recent update to this course.
    // Specifying this field in a course update mask results in an error.
    // 
    // Read-only.
    string updateTime = 18;
}

message CourseAlias {
    // Alias string. The format of the string indicates the desired alias scoping.
    // 
    // * `d:<name>` indicates a domain-scoped alias.
    //   Example: `d:math_101`
    // * `p:<name>` indicates a project-scoped alias.
    //   Example: `p:abc123`
    // 
    // This field has a maximum length of 256 characters.
    string alias = 1;
}

message CourseMaterial {
    // Google Drive file attachment.
    DriveFile driveFile = 1;
    // Google Forms attachment.
    Form form = 2;
    // Link atatchment.
    Link link = 3;
    // Youtube video attachment.
    YouTubeVideo youTubeVideo = 4;
}

message CourseMaterialSet {
    // Materials attached to this set.
    repeated CourseMaterial materials = 1;
    // Title for this set.
    string title = 2;
}

message CourseRosterChangesInfo {
    // The `course_id` of the course to subscribe to roster changes for.
    string courseId = 1;
}

message CourseWork {
    // Absolute link to this course work in the Classroom web UI.
    // This is only populated if `state` is `PUBLISHED`.
    // 
    // Read-only.
    string alternateLink = 1;
    // Assignee mode of the coursework.
    // If unspecified, the default value is `ALL_STUDENTS`.
    enum CourseWork_AssigneeMode {
        COURSEWORK_ASSIGNEEMODE_ASSIGNEE_MODE_UNSPECIFIED = 0;
        COURSEWORK_ASSIGNEEMODE_ALL_STUDENTS = 1;
        COURSEWORK_ASSIGNEEMODE_INDIVIDUAL_STUDENTS = 2;
    }
    CourseWork_AssigneeMode assigneeMode = 2;
    // Assignment details.
    // This is populated only when `work_type` is `ASSIGNMENT`.
    // 
    // Read-only.
    Assignment assignment = 3;
    // Whether this course work item is associated with the Developer Console
    // project making the request.
    // 
    // See google.classroom.Work.CreateCourseWork for more
    // details.
    // 
    // Read-only.
    bool associatedWithDeveloper = 4;
    // Identifier of the course.
    // 
    // Read-only.
    string courseId = 5;
    // Timestamp when this course work was created.
    // 
    // Read-only.
    string creationTime = 6;
    // Identifier for the user that created the coursework.
    // 
    // Read-only.
    string creatorUserId = 7;
    // Optional description of this course work.
    // If set, the description must be a valid UTF-8 string containing no more
    // than 30,000 characters.
    string description = 8;
    // Optional date, in UTC, that submissions for this this course work are due.
    // This must be specified if `due_time` is specified.
    Date dueDate = 9;
    // Optional time of day, in UTC, that submissions for this this course work
    // are due.
    // This must be specified if `due_date` is specified.
    TimeOfDay dueTime = 10;
    // Classroom-assigned identifier of this course work, unique per course.
    // 
    // Read-only.
    string id = 11;
    // Identifiers of students with access to the coursework.
    // This field is set only if `assigneeMode` is `INDIVIDUAL_STUDENTS`.
    // If the `assigneeMode` is `INDIVIDUAL_STUDENTS`, then only students
    // specified in this field will be assigned the coursework.
    IndividualStudentsOptions individualStudentsOptions = 12;
    // Additional materials.
    // 
    // CourseWork must have no more than 20 material items.
    repeated Material materials = 13;
    // Maximum grade for this course work.
    // If zero or unspecified, this assignment is considered ungraded.
    // This must be a non-negative integer value.
    double maxPoints = 14;
    // Multiple choice question details.
    // For read operations, this field is populated only when `work_type` is
    // `MULTIPLE_CHOICE_QUESTION`.
    // For write operations, this field must be specified when creating course
    // work with a `work_type` of `MULTIPLE_CHOICE_QUESTION`, and it must not be
    // set otherwise.
    MultipleChoiceQuestion multipleChoiceQuestion = 15;
    // Optional timestamp when this course work is scheduled to be published.
    string scheduledTime = 16;
    // Status of this course work.
    // If unspecified, the default state is `DRAFT`.
    enum CourseWork_State {
        COURSEWORK_STATE_COURSE_WORK_STATE_UNSPECIFIED = 0;
        COURSEWORK_STATE_PUBLISHED = 1;
        COURSEWORK_STATE_DRAFT = 2;
        COURSEWORK_STATE_DELETED = 3;
    }
    CourseWork_State state = 17;
    // Setting to determine when students are allowed to modify submissions.
    // If unspecified, the default value is `MODIFIABLE_UNTIL_TURNED_IN`.
    enum CourseWork_SubmissionModificationMode {
        COURSEWORK_SUBMISSIONMODIFICATIONMODE_SUBMISSION_MODIFICATION_MODE_UNSPECIFIED = 0;
        COURSEWORK_SUBMISSIONMODIFICATIONMODE_MODIFIABLE_UNTIL_TURNED_IN = 1;
        COURSEWORK_SUBMISSIONMODIFICATIONMODE_MODIFIABLE = 2;
    }
    CourseWork_SubmissionModificationMode submissionModificationMode = 18;
    // Title of this course work.
    // The title must be a valid UTF-8 string containing between 1 and 3000
    // characters.
    string title = 19;
    // Timestamp of the most recent change to this course work.
    // 
    // Read-only.
    string updateTime = 20;
    // Type of this course work.
    // 
    // The type is set when the course work is created and cannot be changed.
    enum CourseWork_WorkType {
        COURSEWORK_WORKTYPE_COURSE_WORK_TYPE_UNSPECIFIED = 0;
        COURSEWORK_WORKTYPE_ASSIGNMENT = 1;
        COURSEWORK_WORKTYPE_SHORT_ANSWER_QUESTION = 2;
        COURSEWORK_WORKTYPE_MULTIPLE_CHOICE_QUESTION = 3;
    }
    CourseWork_WorkType workType = 21;
}

message Date {
    // Day of month. Must be from 1 to 31 and valid for the year and month, or 0
    // if specifying a year/month where the day is not significant.
    int32 day = 1;
    // Month of year. Must be from 1 to 12.
    int32 month = 2;
    // Year of date. Must be from 1 to 9999, or 0 if specifying a date without
    // a year.
    int32 year = 3;
}

message DriveFile {
    // URL that can be used to access the Drive item.
    // 
    // Read-only.
    string alternateLink = 1;
    // Drive API resource ID.
    string id = 2;
    // URL of a thumbnail image of the Drive item.
    // 
    // Read-only.
    string thumbnailUrl = 3;
    // Title of the Drive item.
    // 
    // Read-only.
    string title = 4;
}

message DriveFolder {
    // URL that can be used to access the Drive folder.
    // 
    // Read-only.
    string alternateLink = 1;
    // Drive API resource ID.
    string id = 2;
    // Title of the Drive folder.
    // 
    // Read-only.
    string title = 3;
}

message Empty {
}

message Feed {
    // Information about a `Feed` with a `feed_type` of `COURSE_ROSTER_CHANGES`.
    // This field must be specified if `feed_type` is `COURSE_ROSTER_CHANGES`.
    CourseRosterChangesInfo courseRosterChangesInfo = 1;
    // The type of feed.
    enum Feed_FeedType {
        FEED_FEEDTYPE_FEED_TYPE_UNSPECIFIED = 0;
        FEED_FEEDTYPE_DOMAIN_ROSTER_CHANGES = 1;
        FEED_FEEDTYPE_COURSE_ROSTER_CHANGES = 2;
    }
    Feed_FeedType feedType = 2;
}

message Form {
    // URL of the form.
    string formUrl = 1;
    // URL of the form responses document.
    // Only set if respsonses have been recorded and only when the
    // requesting user is an editor of the form.
    // 
    // Read-only.
    string responseUrl = 2;
    // URL of a thumbnail image of the Form.
    // 
    // Read-only.
    string thumbnailUrl = 3;
    // Title of the Form.
    // 
    // Read-only.
    string title = 4;
}

message GlobalPermission {
    // Permission value.
    enum GlobalPermission_Permission {
        GLOBALPERMISSION_PERMISSION_PERMISSION_UNSPECIFIED = 0;
        GLOBALPERMISSION_PERMISSION_CREATE_COURSE = 1;
    }
    GlobalPermission_Permission permission = 1;
}

message GradeHistory {
    // The teacher who made the grade change.
    string actorUserId = 1;
    // The type of grade change at this time in the submission grade history.
    enum GradeHistory_GradeChangeType {
        GRADEHISTORY_GRADECHANGETYPE_UNKNOWN_GRADE_CHANGE_TYPE = 0;
        GRADEHISTORY_GRADECHANGETYPE_DRAFT_GRADE_POINTS_EARNED_CHANGE = 1;
        GRADEHISTORY_GRADECHANGETYPE_ASSIGNED_GRADE_POINTS_EARNED_CHANGE = 2;
        GRADEHISTORY_GRADECHANGETYPE_MAX_POINTS_CHANGE = 3;
    }
    GradeHistory_GradeChangeType gradeChangeType = 2;
    // When the grade of the submission was changed.
    string gradeTimestamp = 3;
    // The denominator of the grade at this time in the submission grade
    // history.
    double maxPoints = 4;
    // The numerator of the grade at this time in the submission grade history.
    double pointsEarned = 5;
}

message Guardian {
    // Identifier for the guardian.
    string guardianId = 1;
    // User profile for the guardian.
    UserProfile guardianProfile = 2;
    // The email address to which the initial guardian invitation was sent.
    // This field is only visible to domain administrators.
    string invitedEmailAddress = 3;
    // Identifier for the student to whom the guardian relationship applies.
    string studentId = 4;
}

message GuardianInvitation {
    // The time that this invitation was created.
    // 
    // Read-only.
    string creationTime = 1;
    // Unique identifier for this invitation.
    // 
    // Read-only.
    string invitationId = 2;
    // Email address that the invitation was sent to.
    // This field is only visible to domain administrators.
    string invitedEmailAddress = 3;
    // The state that this invitation is in.
    enum GuardianInvitation_State {
        GUARDIANINVITATION_STATE_GUARDIAN_INVITATION_STATE_UNSPECIFIED = 0;
        GUARDIANINVITATION_STATE_PENDING = 1;
        GUARDIANINVITATION_STATE_COMPLETE = 2;
    }
    GuardianInvitation_State state = 4;
    // ID of the student (in standard format)
    string studentId = 5;
}

message IndividualStudentsOptions {
    // Identifiers for the students that have access to the
    // coursework/announcement.
    repeated string studentIds = 1;
}

message Invitation {
    // Identifier of the course to invite the user to.
    string courseId = 1;
    // Identifier assigned by Classroom.
    // 
    // Read-only.
    string id = 2;
    // Role to invite the user to have.
    // Must not be `COURSE_ROLE_UNSPECIFIED`.
    enum Invitation_Role {
        INVITATION_ROLE_COURSE_ROLE_UNSPECIFIED = 0;
        INVITATION_ROLE_STUDENT = 1;
        INVITATION_ROLE_TEACHER = 2;
        INVITATION_ROLE_OWNER = 3;
    }
    Invitation_Role role = 3;
    // Identifier of the invited user.
    // 
    // When specified as a parameter of a request, this identifier can be set to
    // one of the following:
    // 
    // * the numeric identifier for the user
    // * the email address of the user
    // * the string literal `"me"`, indicating the requesting user
    string userId = 4;
}

message Link {
    // URL of a thumbnail image of the target URL.
    // 
    // Read-only.
    string thumbnailUrl = 1;
    // Title of the target of the URL.
    // 
    // Read-only.
    string title = 2;
    // URL to link to.
    // This must be a valid UTF-8 string containing between 1 and 2024 characters.
    string url = 3;
}

message ListAnnouncementsResponse {
    // Announcement items that match the request.
    repeated Announcement announcements = 1;
    // Token identifying the next page of results to return. If empty, no further
    // results are available.
    string nextPageToken = 2;
}

message ListCourseAliasesResponse {
    // The course aliases.
    repeated CourseAlias aliases = 1;
    // Token identifying the next page of results to return. If empty, no further
    // results are available.
    string nextPageToken = 2;
}

message ListCourseWorkResponse {
    // Course work items that match the request.
    repeated CourseWork courseWork = 1;
    // Token identifying the next page of results to return. If empty, no further
    // results are available.
    string nextPageToken = 2;
}

message ListCoursesResponse {
    // Courses that match the list request.
    repeated Course courses = 1;
    // Token identifying the next page of results to return. If empty, no further
    // results are available.
    string nextPageToken = 2;
}

message ListGuardianInvitationsResponse {
    // Guardian invitations that matched the list request.
    repeated GuardianInvitation guardianInvitations = 1;
    // Token identifying the next page of results to return. If empty, no further
    // results are available.
    string nextPageToken = 2;
}

message ListGuardiansResponse {
    // Guardians on this page of results that met the criteria specified in
    // the request.
    repeated Guardian guardians = 1;
    // Token identifying the next page of results to return. If empty, no further
    // results are available.
    string nextPageToken = 2;
}

message ListInvitationsResponse {
    // Invitations that match the list request.
    repeated Invitation invitations = 1;
    // Token identifying the next page of results to return. If empty, no further
    // results are available.
    string nextPageToken = 2;
}

message ListStudentSubmissionsResponse {
    // Token identifying the next page of results to return. If empty, no further
    // results are available.
    string nextPageToken = 1;
    // Student work that matches the request.
    repeated StudentSubmission studentSubmissions = 2;
}

message ListStudentsResponse {
    // Token identifying the next page of results to return. If empty, no further
    // results are available.
    string nextPageToken = 1;
    // Students who match the list request.
    repeated Student students = 2;
}

message ListTeachersResponse {
    // Token identifying the next page of results to return. If empty, no further
    // results are available.
    string nextPageToken = 1;
    // Teachers who match the list request.
    repeated Teacher teachers = 2;
}

message Material {
    // Google Drive file material.
    SharedDriveFile driveFile = 1;
    // Google Forms material.
    Form form = 2;
    // Link material. On creation, will be upgraded to a more appropriate type
    // if possible, and this will be reflected in the response.
    Link link = 3;
    // YouTube video material.
    YouTubeVideo youtubeVideo = 4;
}

message ModifyAnnouncementAssigneesRequest {
    // Mode of the announcement describing whether it will be accessible by all
    // students or specified individual students.
    enum ModifyAnnouncementAssigneesRequest_AssigneeMode {
        MODIFYANNOUNCEMENTASSIGNEESREQUEST_ASSIGNEEMODE_ASSIGNEE_MODE_UNSPECIFIED = 0;
        MODIFYANNOUNCEMENTASSIGNEESREQUEST_ASSIGNEEMODE_ALL_STUDENTS = 1;
        MODIFYANNOUNCEMENTASSIGNEESREQUEST_ASSIGNEEMODE_INDIVIDUAL_STUDENTS = 2;
    }
    ModifyAnnouncementAssigneesRequest_AssigneeMode assigneeMode = 1;
    // Set which students can view or cannot view the announcement.
    // Must be specified only when `assigneeMode` is `INDIVIDUAL_STUDENTS`.
    ModifyIndividualStudentsOptions modifyIndividualStudentsOptions = 2;
}

message ModifyAttachmentsRequest {
    // Attachments to add.
    // A student submission may not have more than 20 attachments.
    // 
    // Form attachments are not supported.
    repeated Attachment addAttachments = 1;
}

message ModifyCourseWorkAssigneesRequest {
    // Mode of the coursework describing whether it will be assigned to all
    // students or specified individual students.
    enum ModifyCourseWorkAssigneesRequest_AssigneeMode {
        MODIFYCOURSEWORKASSIGNEESREQUEST_ASSIGNEEMODE_ASSIGNEE_MODE_UNSPECIFIED = 0;
        MODIFYCOURSEWORKASSIGNEESREQUEST_ASSIGNEEMODE_ALL_STUDENTS = 1;
        MODIFYCOURSEWORKASSIGNEESREQUEST_ASSIGNEEMODE_INDIVIDUAL_STUDENTS = 2;
    }
    ModifyCourseWorkAssigneesRequest_AssigneeMode assigneeMode = 1;
    // Set which students are assigned or not assigned to the coursework.
    // Must be specified only when `assigneeMode` is `INDIVIDUAL_STUDENTS`.
    ModifyIndividualStudentsOptions modifyIndividualStudentsOptions = 2;
}

message ModifyIndividualStudentsOptions {
    // Ids of students to be added as having access to this
    // coursework/announcement.
    repeated string addStudentIds = 1;
    // Ids of students to be removed from having access to this
    // coursework/announcement.
    repeated string removeStudentIds = 2;
}

message MultipleChoiceQuestion {
    // Possible choices.
    repeated string choices = 1;
}

message MultipleChoiceSubmission {
    // Student's select choice.
    string answer = 1;
}

message Name {
    // The user's last name.
    // 
    // Read-only.
    string familyName = 1;
    // The user's full name formed by concatenating the first and last name
    // values.
    // 
    // Read-only.
    string fullName = 2;
    // The user's first name.
    // 
    // Read-only.
    string givenName = 3;
}

message ReclaimStudentSubmissionRequest {
}

message Registration {
    // The Cloud Pub/Sub topic that notifications are to be sent to.
    CloudPubsubTopic cloudPubsubTopic = 1;
    // The time until which the `Registration` is effective.
    // 
    // This is a read-only field assigned by the server.
    string expiryTime = 2;
    // Specification for the class of notifications that Classroom should deliver
    // to the `destination`.
    Feed feed = 3;
    // A server-generated unique identifier for this `Registration`.
    // 
    // Read-only.
    string registrationId = 4;
}

message ReturnStudentSubmissionRequest {
}

message SharedDriveFile {
    // Drive file details.
    DriveFile driveFile = 1;
    // Mechanism by which students access the Drive item.
    enum SharedDriveFile_ShareMode {
        SHAREDDRIVEFILE_SHAREMODE_UNKNOWN_SHARE_MODE = 0;
        SHAREDDRIVEFILE_SHAREMODE_VIEW = 1;
        SHAREDDRIVEFILE_SHAREMODE_EDIT = 2;
        SHAREDDRIVEFILE_SHAREMODE_STUDENT_COPY = 3;
    }
    SharedDriveFile_ShareMode shareMode = 2;
}

message ShortAnswerSubmission {
    // Student response to a short-answer question.
    string answer = 1;
}

message StateHistory {
    // The teacher or student who made the change
    string actorUserId = 1;
    // The workflow pipeline stage.
    enum StateHistory_State {
        STATEHISTORY_STATE_STATE_UNSPECIFIED = 0;
        STATEHISTORY_STATE_CREATED = 1;
        STATEHISTORY_STATE_TURNED_IN = 2;
        STATEHISTORY_STATE_RETURNED = 3;
        STATEHISTORY_STATE_RECLAIMED_BY_STUDENT = 4;
        STATEHISTORY_STATE_STUDENT_EDITED_AFTER_TURN_IN = 5;
    }
    StateHistory_State state = 2;
    // When the submission entered this state.
    string stateTimestamp = 3;
}

message Student {
    // Identifier of the course.
    // 
    // Read-only.
    string courseId = 1;
    // Global user information for the student.
    // 
    // Read-only.
    UserProfile profile = 2;
    // Information about a Drive Folder for this student's work in this course.
    // Only visible to the student and domain administrators.
    // 
    // Read-only.
    DriveFolder studentWorkFolder = 3;
    // Identifier of the user.
    // 
    // When specified as a parameter of a request, this identifier can be one of
    // the following:
    // 
    // * the numeric identifier for the user
    // * the email address of the user
    // * the string literal `"me"`, indicating the requesting user
    string userId = 4;
}

message StudentSubmission {
    // Absolute link to the submission in the Classroom web UI.
    // 
    // Read-only.
    string alternateLink = 1;
    // Optional grade. If unset, no grade was set.
    // This value must be non-negative. Decimal (i.e. non-integer) values are
    // allowed, but will be rounded to two decimal places.
    // 
    // This may be modified only by course teachers.
    double assignedGrade = 2;
    // Submission content when course_work_type is ASSIGNMENT.
    // 
    // Students can modify this content using
    // google.classroom.Work.ModifyAttachments.
    AssignmentSubmission assignmentSubmission = 3;
    // Whether this student submission is associated with the Developer Console
    // project making the request.
    // 
    // See google.classroom.Work.CreateCourseWork for more
    // details.
    // 
    // Read-only.
    bool associatedWithDeveloper = 4;
    // Identifier of the course.
    // 
    // Read-only.
    string courseId = 5;
    // Identifier for the course work this corresponds to.
    // 
    // Read-only.
    string courseWorkId = 6;
    // Type of course work this submission is for.
    // 
    // Read-only.
    enum StudentSubmission_CourseWorkType {
        STUDENTSUBMISSION_COURSEWORKTYPE_COURSE_WORK_TYPE_UNSPECIFIED = 0;
        STUDENTSUBMISSION_COURSEWORKTYPE_ASSIGNMENT = 1;
        STUDENTSUBMISSION_COURSEWORKTYPE_SHORT_ANSWER_QUESTION = 2;
        STUDENTSUBMISSION_COURSEWORKTYPE_MULTIPLE_CHOICE_QUESTION = 3;
    }
    StudentSubmission_CourseWorkType courseWorkType = 7;
    // Creation time of this submission.
    // This may be unset if the student has not accessed this item.
    // 
    // Read-only.
    string creationTime = 8;
    // Optional pending grade. If unset, no grade was set.
    // This value must be non-negative. Decimal (i.e. non-integer) values are
    // allowed, but will be rounded to two decimal places.
    // 
    // This is only visible to and modifiable by course teachers.
    double draftGrade = 9;
    // Classroom-assigned Identifier for the student submission.
    // This is unique among submissions for the relevant course work.
    // 
    // Read-only.
    string id = 10;
    // Whether this submission is late.
    // 
    // Read-only.
    bool late = 11;
    // Submission content when course_work_type is MULTIPLE_CHOICE_QUESTION.
    MultipleChoiceSubmission multipleChoiceSubmission = 12;
    // Submission content when course_work_type is SHORT_ANSWER_QUESTION.
    ShortAnswerSubmission shortAnswerSubmission = 13;
    // State of this submission.
    // 
    // Read-only.
    enum StudentSubmission_State {
        STUDENTSUBMISSION_STATE_SUBMISSION_STATE_UNSPECIFIED = 0;
        STUDENTSUBMISSION_STATE_NEW = 1;
        STUDENTSUBMISSION_STATE_CREATED = 2;
        STUDENTSUBMISSION_STATE_TURNED_IN = 3;
        STUDENTSUBMISSION_STATE_RETURNED = 4;
        STUDENTSUBMISSION_STATE_RECLAIMED_BY_STUDENT = 5;
    }
    StudentSubmission_State state = 14;
    // The history of the submission (includes state and grade histories).
    // 
    // Read-only.
    repeated SubmissionHistory submissionHistory = 15;
    // Last update time of this submission.
    // This may be unset if the student has not accessed this item.
    // 
    // Read-only.
    string updateTime = 16;
    // Identifier for the student that owns this submission.
    // 
    // Read-only.
    string userId = 17;
}

message SubmissionHistory {
    // The grade history information of the submission, if present.
    GradeHistory gradeHistory = 1;
    // The state history information of the submission, if present.
    StateHistory stateHistory = 2;
}

message Teacher {
    // Identifier of the course.
    // 
    // Read-only.
    string courseId = 1;
    // Global user information for the teacher.
    // 
    // Read-only.
    UserProfile profile = 2;
    // Identifier of the user.
    // 
    // When specified as a parameter of a request, this identifier can be one of
    // the following:
    // 
    // * the numeric identifier for the user
    // * the email address of the user
    // * the string literal `"me"`, indicating the requesting user
    string userId = 3;
}

message TimeOfDay {
    // Hours of day in 24 hour format. Should be from 0 to 23. An API may choose
    // to allow the value "24:00:00" for scenarios like business closing time.
    int32 hours = 1;
    // Minutes of hour of day. Must be from 0 to 59.
    int32 minutes = 2;
    // Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
    int32 nanos = 3;
    // Seconds of minutes of the time. Must normally be from 0 to 59. An API may
    // allow the value 60 if it allows leap-seconds.
    int32 seconds = 4;
}

message TurnInStudentSubmissionRequest {
}

message UserProfile {
    // Email address of the user.
    // 
    // Read-only.
    string emailAddress = 1;
    // Identifier of the user.
    // 
    // Read-only.
    string id = 2;
    // Name of the user.
    // 
    // Read-only.
    Name name = 3;
    // Global permissions of the user.
    // 
    // Read-only.
    repeated GlobalPermission permissions = 4;
    // URL of user's profile photo.
    // 
    // Read-only.
    string photoUrl = 5;
    // Represents whether a G Suite for Education user's domain administrator has
    // explicitly verified them as being a teacher. If the user is not a member of
    // a G Suite for Education domain, than this field will always be false.
    // 
    // Read-only
    bool verifiedTeacher = 6;
}

message YouTubeVideo {
    // URL that can be used to view the YouTube video.
    // 
    // Read-only.
    string alternateLink = 1;
    // YouTube API resource ID.
    string id = 2;
    // URL of a thumbnail image of the YouTube video.
    // 
    // Read-only.
    string thumbnailUrl = 3;
    // Title of the YouTube video.
    // 
    // Read-only.
    string title = 4;
}

enum Alt {
    JSON = 0;
    MEDIA = 1;
    PROTO = 2;
}

service GoogleClassroomService {
    // Returns a list of courses that the requesting user is permitted to view,
    // restricted to those that match the request. Returned courses are ordered by
    // creation time, with the most recently created coming first.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` for access errors.
    // * `INVALID_ARGUMENT` if the query argument is malformed.
    // * `NOT_FOUND` if any users specified in the query arguments do not exist.
    rpc GetV1Courses(GetV1CoursesRequest) returns (ListCoursesResponse) {
      option (google.api.http) = {
        get: "//v1/courses"
      };
    }
    // Creates a course.
    // 
    // The user specified in `ownerId` is the owner of the created course
    // and added as a teacher.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` if the requesting user is not permitted to create
    // courses or for access errors.
    // * `NOT_FOUND` if the primary teacher is not a valid user.
    // * `FAILED_PRECONDITION` if the course owner's account is disabled or for
    // the following request errors:
    //     * UserGroupsMembershipLimitReached
    // * `ALREADY_EXISTS` if an alias was specified in the `id` and
    // already exists.
    rpc PostV1Courses(PostV1CoursesRequest) returns (Course) {
      option (google.api.http) = {
        post: "//v1/courses"
        body: "body"
      };
    }
    // Returns a list of aliases for a course.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` if the requesting user is not permitted to access the
    // course or for access errors.
    // * `NOT_FOUND` if the course does not exist.
    rpc GetV1CoursesCourseIdAliases(GetV1CoursesCourseIdAliasesRequest) returns (ListCourseAliasesResponse) {
      option (google.api.http) = {
        get: "//v1/courses/{courseId}/aliases"
      };
    }
    // Creates an alias for a course.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` if the requesting user is not permitted to create the
    // alias or for access errors.
    // * `NOT_FOUND` if the course does not exist.
    // * `ALREADY_EXISTS` if the alias already exists.
    // * `FAILED_PRECONDITION` if the alias requested does not make sense for the
    //   requesting user or course (for example, if a user not in a domain
    //   attempts to access a domain-scoped alias).
    rpc PostV1CoursesCourseIdAliases(PostV1CoursesCourseIdAliasesRequest) returns (CourseAlias) {
      option (google.api.http) = {
        post: "//v1/courses/{courseId}/aliases"
        body: "body"
      };
    }
    // Deletes an alias of a course.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` if the requesting user is not permitted to remove the
    // alias or for access errors.
    // * `NOT_FOUND` if the alias does not exist.
    // * `FAILED_PRECONDITION` if the alias requested does not make sense for the
    //   requesting user or course (for example, if a user not in a domain
    //   attempts to delete a domain-scoped alias).
    rpc DeleteV1CoursesCourseIdAliasesAlias(DeleteV1CoursesCourseIdAliasesAliasRequest) returns (Empty) {
      option (google.api.http) = {
        delete: "//v1/courses/{courseId}/aliases/{alias}"
      };
    }
    // Returns a list of announcements that the requester is permitted to view.
    // 
    // Course students may only view `PUBLISHED` announcements. Course teachers
    // and domain administrators may view all announcements.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` if the requesting user is not permitted to access
    // the requested course or for access errors.
    // * `INVALID_ARGUMENT` if the request is malformed.
    // * `NOT_FOUND` if the requested course does not exist.
    rpc GetV1CoursesCourseIdAnnouncements(GetV1CoursesCourseIdAnnouncementsRequest) returns (ListAnnouncementsResponse) {
      option (google.api.http) = {
        get: "//v1/courses/{courseId}/announcements"
      };
    }
    // Creates an announcement.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` if the requesting user is not permitted to access the
    // requested course, create announcements in the requested course, share a
    // Drive attachment, or for access errors.
    // * `INVALID_ARGUMENT` if the request is malformed.
    // * `NOT_FOUND` if the requested course does not exist.
    // * `FAILED_PRECONDITION` for the following request error:
    //     * AttachmentNotVisible
    rpc PostV1CoursesCourseIdAnnouncements(PostV1CoursesCourseIdAnnouncementsRequest) returns (Announcement) {
      option (google.api.http) = {
        post: "//v1/courses/{courseId}/announcements"
        body: "body"
      };
    }
    // Returns an announcement.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` if the requesting user is not permitted to access the
    // requested course or announcement, or for access errors.
    // * `INVALID_ARGUMENT` if the request is malformed.
    // * `NOT_FOUND` if the requested course or announcement does not exist.
    rpc GetV1CoursesCourseIdAnnouncementsId(GetV1CoursesCourseIdAnnouncementsIdRequest) returns (Announcement) {
      option (google.api.http) = {
        get: "//v1/courses/{courseId}/announcements/{id}"
      };
    }
    // Deletes an announcement.
    // 
    // This request must be made by the Developer Console project of the
    // [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to
    // create the corresponding announcement item.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` if the requesting developer project did not create
    // the corresponding announcement, if the requesting user is not permitted
    // to delete the requested course or for access errors.
    // * `FAILED_PRECONDITION` if the requested announcement has already been
    // deleted.
    // * `NOT_FOUND` if no course exists with the requested ID.
    rpc DeleteV1CoursesCourseIdAnnouncementsId(DeleteV1CoursesCourseIdAnnouncementsIdRequest) returns (Empty) {
      option (google.api.http) = {
        delete: "//v1/courses/{courseId}/announcements/{id}"
      };
    }
    // Modifies assignee mode and options of an announcement.
    // 
    // Only a teacher of the course that contains the announcement may
    // call this method.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` if the requesting user is not permitted to access the
    // requested course or course work or for access errors.
    // * `INVALID_ARGUMENT` if the request is malformed.
    // * `NOT_FOUND` if the requested course or course work does not exist.
    rpc PostV1CoursesCourseIdAnnouncementsId:ModifyAssignees(PostV1CoursesCourseIdAnnouncementsId:ModifyAssigneesRequest) returns (Announcement) {
      option (google.api.http) = {
        post: "//v1/courses/{courseId}/announcements/{id}:modifyAssignees"
        body: "body"
      };
    }
    // Returns a list of course work that the requester is permitted to view.
    // 
    // Course students may only view `PUBLISHED` course work. Course teachers
    // and domain administrators may view all course work.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` if the requesting user is not permitted to access
    // the requested course or for access errors.
    // * `INVALID_ARGUMENT` if the request is malformed.
    // * `NOT_FOUND` if the requested course does not exist.
    rpc GetV1CoursesCourseIdCourseWork(GetV1CoursesCourseIdCourseWorkRequest) returns (ListCourseWorkResponse) {
      option (google.api.http) = {
        get: "//v1/courses/{courseId}/courseWork"
      };
    }
    // Creates course work.
    // 
    // The resulting course work (and corresponding student submissions) are
    // associated with the Developer Console project of the
    // [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to
    // make the request. Classroom API requests to modify course work and student
    // submissions must be made with an OAuth client ID from the associated
    // Developer Console project.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` if the requesting user is not permitted to access the
    // requested course, create course work in the requested course, share a
    // Drive attachment, or for access errors.
    // * `INVALID_ARGUMENT` if the request is malformed.
    // * `NOT_FOUND` if the requested course does not exist.
    // * `FAILED_PRECONDITION` for the following request error:
    //     * AttachmentNotVisible
    rpc PostV1CoursesCourseIdCourseWork(PostV1CoursesCourseIdCourseWorkRequest) returns (CourseWork) {
      option (google.api.http) = {
        post: "//v1/courses/{courseId}/courseWork"
        body: "body"
      };
    }
    // Returns a list of student submissions that the requester is permitted to
    // view, factoring in the OAuth scopes of the request.
    // `-` may be specified as the `course_work_id` to include student
    // submissions for multiple course work items.
    // 
    // Course students may only view their own work. Course teachers
    // and domain administrators may view all student submissions.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` if the requesting user is not permitted to access the
    // requested course or course work, or for access errors.
    // * `INVALID_ARGUMENT` if the request is malformed.
    // * `NOT_FOUND` if the requested course does not exist.
    rpc GetV1CoursesCourseIdCourseWorkCourseWorkIdStudentSubmissions(GetV1CoursesCourseIdCourseWorkCourseWorkIdStudentSubmissionsRequest) returns (ListStudentSubmissionsResponse) {
      option (google.api.http) = {
        get: "//v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions"
      };
    }
    // Returns a student submission.
    // 
    // * `PERMISSION_DENIED` if the requesting user is not permitted to access the
    // requested course, course work, or student submission or for
    // access errors.
    // * `INVALID_ARGUMENT` if the request is malformed.
    // * `NOT_FOUND` if the requested course, course work, or student submission
    // does not exist.
    rpc GetV1CoursesCourseIdCourseWorkCourseWorkIdStudentSubmissionsId(GetV1CoursesCourseIdCourseWorkCourseWorkIdStudentSubmissionsIdRequest) returns (StudentSubmission) {
      option (google.api.http) = {
        get: "//v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}"
      };
    }
    // Modifies attachments of student submission.
    // 
    // Attachments may only be added to student submissions belonging to course
    // work objects with a `workType` of `ASSIGNMENT`.
    // 
    // This request must be made by the Developer Console project of the
    // [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to
    // create the corresponding course work item.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` if the requesting user is not permitted to access the
    // requested course or course work, if the user is not permitted to modify
    // attachments on the requested student submission, or for
    // access errors.
    // * `INVALID_ARGUMENT` if the request is malformed.
    // * `NOT_FOUND` if the requested course, course work, or student submission
    // does not exist.
    rpc PostV1CoursesCourseIdCourseWorkCourseWorkIdStudentSubmissionsId:ModifyAttachments(PostV1CoursesCourseIdCourseWorkCourseWorkIdStudentSubmissionsId:ModifyAttachmentsRequest) returns (StudentSubmission) {
      option (google.api.http) = {
        post: "//v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:modifyAttachments"
        body: "body"
      };
    }
    // Reclaims a student submission on behalf of the student that owns it.
    // 
    // Reclaiming a student submission transfers ownership of attached Drive
    // files to the student and update the submission state.
    // 
    // Only the student that owns the requested student submission may call this
    // method, and only for a student submission that has been turned in.
    // 
    // This request must be made by the Developer Console project of the
    // [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to
    // create the corresponding course work item.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` if the requesting user is not permitted to access the
    // requested course or course work, unsubmit the requested student submission,
    // or for access errors.
    // * `FAILED_PRECONDITION` if the student submission has not been turned in.
    // * `INVALID_ARGUMENT` if the request is malformed.
    // * `NOT_FOUND` if the requested course, course work, or student submission
    // does not exist.
    rpc PostV1CoursesCourseIdCourseWorkCourseWorkIdStudentSubmissionsId:Reclaim(PostV1CoursesCourseIdCourseWorkCourseWorkIdStudentSubmissionsId:ReclaimRequest) returns (Empty) {
      option (google.api.http) = {
        post: "//v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:reclaim"
        body: "body"
      };
    }
    // Returns a student submission.
    // 
    // Returning a student submission transfers ownership of attached Drive
    // files to the student and may also update the submission state.
    // Unlike the Classroom application, returning a student submission does not
    // set assignedGrade to the draftGrade value.
    // 
    // Only a teacher of the course that contains the requested student submission
    // may call this method.
    // 
    // This request must be made by the Developer Console project of the
    // [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to
    // create the corresponding course work item.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` if the requesting user is not permitted to access the
    // requested course or course work, return the requested student submission,
    // or for access errors.
    // * `INVALID_ARGUMENT` if the request is malformed.
    // * `NOT_FOUND` if the requested course, course work, or student submission
    // does not exist.
    rpc PostV1CoursesCourseIdCourseWorkCourseWorkIdStudentSubmissionsId:Return(PostV1CoursesCourseIdCourseWorkCourseWorkIdStudentSubmissionsId:ReturnRequest) returns (Empty) {
      option (google.api.http) = {
        post: "//v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:return"
        body: "body"
      };
    }
    // Turns in a student submission.
    // 
    // Turning in a student submission transfers ownership of attached Drive
    // files to the teacher and may also update the submission state.
    // 
    // This may only be called by the student that owns the specified student
    // submission.
    // 
    // This request must be made by the Developer Console project of the
    // [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to
    // create the corresponding course work item.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` if the requesting user is not permitted to access the
    // requested course or course work, turn in the requested student submission,
    // or for access errors.
    // * `INVALID_ARGUMENT` if the request is malformed.
    // * `NOT_FOUND` if the requested course, course work, or student submission
    // does not exist.
    rpc PostV1CoursesCourseIdCourseWorkCourseWorkIdStudentSubmissionsId:TurnIn(PostV1CoursesCourseIdCourseWorkCourseWorkIdStudentSubmissionsId:TurnInRequest) returns (Empty) {
      option (google.api.http) = {
        post: "//v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:turnIn"
        body: "body"
      };
    }
    // Returns course work.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` if the requesting user is not permitted to access the
    // requested course or course work, or for access errors.
    // * `INVALID_ARGUMENT` if the request is malformed.
    // * `NOT_FOUND` if the requested course or course work does not exist.
    rpc GetV1CoursesCourseIdCourseWorkId(GetV1CoursesCourseIdCourseWorkIdRequest) returns (CourseWork) {
      option (google.api.http) = {
        get: "//v1/courses/{courseId}/courseWork/{id}"
      };
    }
    // Deletes a course work.
    // 
    // This request must be made by the Developer Console project of the
    // [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to
    // create the corresponding course work item.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` if the requesting developer project did not create
    // the corresponding course work, if the requesting user is not permitted
    // to delete the requested course or for access errors.
    // * `FAILED_PRECONDITION` if the requested course work has already been
    // deleted.
    // * `NOT_FOUND` if no course exists with the requested ID.
    rpc DeleteV1CoursesCourseIdCourseWorkId(DeleteV1CoursesCourseIdCourseWorkIdRequest) returns (Empty) {
      option (google.api.http) = {
        delete: "//v1/courses/{courseId}/courseWork/{id}"
      };
    }
    // Modifies assignee mode and options of a coursework.
    // 
    // Only a teacher of the course that contains the coursework may
    // call this method.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` if the requesting user is not permitted to access the
    // requested course or course work or for access errors.
    // * `INVALID_ARGUMENT` if the request is malformed.
    // * `NOT_FOUND` if the requested course or course work does not exist.
    rpc PostV1CoursesCourseIdCourseWorkId:ModifyAssignees(PostV1CoursesCourseIdCourseWorkId:ModifyAssigneesRequest) returns (CourseWork) {
      option (google.api.http) = {
        post: "//v1/courses/{courseId}/courseWork/{id}:modifyAssignees"
        body: "body"
      };
    }
    // Returns a list of students of this course that the requester
    // is permitted to view.
    // 
    // This method returns the following error codes:
    // 
    // * `NOT_FOUND` if the course does not exist.
    // * `PERMISSION_DENIED` for access errors.
    rpc GetV1CoursesCourseIdStudents(GetV1CoursesCourseIdStudentsRequest) returns (ListStudentsResponse) {
      option (google.api.http) = {
        get: "//v1/courses/{courseId}/students"
      };
    }
    // Adds a user as a student of a course.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` if the requesting user is not permitted to create
    // students in this course or for access errors.
    // * `NOT_FOUND` if the requested course ID does not exist.
    // * `FAILED_PRECONDITION` if the requested user's account is disabled,
    // for the following request errors:
    //     * CourseMemberLimitReached
    //     * CourseNotModifiable
    //     * UserGroupsMembershipLimitReached
    // * `ALREADY_EXISTS` if the user is already a student or teacher in the
    // course.
    rpc PostV1CoursesCourseIdStudents(PostV1CoursesCourseIdStudentsRequest) returns (Student) {
      option (google.api.http) = {
        post: "//v1/courses/{courseId}/students"
        body: "body"
      };
    }
    // Returns a student of a course.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` if the requesting user is not permitted to view
    // students of this course or for access errors.
    // * `NOT_FOUND` if no student of this course has the requested ID or if the
    // course does not exist.
    rpc GetV1CoursesCourseIdStudentsUserId(GetV1CoursesCourseIdStudentsUserIdRequest) returns (Student) {
      option (google.api.http) = {
        get: "//v1/courses/{courseId}/students/{userId}"
      };
    }
    // Deletes a student of a course.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` if the requesting user is not permitted to delete
    // students of this course or for access errors.
    // * `NOT_FOUND` if no student of this course has the requested ID or if the
    // course does not exist.
    rpc DeleteV1CoursesCourseIdStudentsUserId(DeleteV1CoursesCourseIdStudentsUserIdRequest) returns (Empty) {
      option (google.api.http) = {
        delete: "//v1/courses/{courseId}/students/{userId}"
      };
    }
    // Returns a list of teachers of this course that the requester
    // is permitted to view.
    // 
    // This method returns the following error codes:
    // 
    // * `NOT_FOUND` if the course does not exist.
    // * `PERMISSION_DENIED` for access errors.
    rpc GetV1CoursesCourseIdTeachers(GetV1CoursesCourseIdTeachersRequest) returns (ListTeachersResponse) {
      option (google.api.http) = {
        get: "//v1/courses/{courseId}/teachers"
      };
    }
    // Creates a teacher of a course.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` if the requesting user is not  permitted to create
    // teachers in this course or for access errors.
    // * `NOT_FOUND` if the requested course ID does not exist.
    // * `FAILED_PRECONDITION` if the requested user's account is disabled,
    // for the following request errors:
    //     * CourseMemberLimitReached
    //     * CourseNotModifiable
    //     * CourseTeacherLimitReached
    //     * UserGroupsMembershipLimitReached
    // * `ALREADY_EXISTS` if the user is already a teacher or student in the
    // course.
    rpc PostV1CoursesCourseIdTeachers(PostV1CoursesCourseIdTeachersRequest) returns (Teacher) {
      option (google.api.http) = {
        post: "//v1/courses/{courseId}/teachers"
        body: "body"
      };
    }
    // Returns a teacher of a course.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` if the requesting user is not permitted to view
    // teachers of this course or for access errors.
    // * `NOT_FOUND` if no teacher of this course has the requested ID or if the
    // course does not exist.
    rpc GetV1CoursesCourseIdTeachersUserId(GetV1CoursesCourseIdTeachersUserIdRequest) returns (Teacher) {
      option (google.api.http) = {
        get: "//v1/courses/{courseId}/teachers/{userId}"
      };
    }
    // Deletes a teacher of a course.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` if the requesting user is not permitted to delete
    // teachers of this course or for access errors.
    // * `NOT_FOUND` if no teacher of this course has the requested ID or if the
    // course does not exist.
    // * `FAILED_PRECONDITION` if the requested ID belongs to the primary teacher
    // of this course.
    rpc DeleteV1CoursesCourseIdTeachersUserId(DeleteV1CoursesCourseIdTeachersUserIdRequest) returns (Empty) {
      option (google.api.http) = {
        delete: "//v1/courses/{courseId}/teachers/{userId}"
      };
    }
    // Returns a course.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` if the requesting user is not permitted to access the
    // requested course or for access errors.
    // * `NOT_FOUND` if no course exists with the requested ID.
    rpc GetV1CoursesId(GetV1CoursesIdRequest) returns (Course) {
      option (google.api.http) = {
        get: "//v1/courses/{id}"
      };
    }
    // Updates a course.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` if the requesting user is not permitted to modify the
    // requested course or for access errors.
    // * `NOT_FOUND` if no course exists with the requested ID.
    // * `FAILED_PRECONDITION` for the following request errors:
    //     * CourseNotModifiable
    rpc PutV1CoursesId(PutV1CoursesIdRequest) returns (Course) {
      option (google.api.http) = {
        put: "//v1/courses/{id}"
        body: "body"
      };
    }
    // Deletes a course.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` if the requesting user is not permitted to delete the
    // requested course or for access errors.
    // * `NOT_FOUND` if no course exists with the requested ID.
    rpc DeleteV1CoursesId(DeleteV1CoursesIdRequest) returns (Empty) {
      option (google.api.http) = {
        delete: "//v1/courses/{id}"
      };
    }
    // Returns a list of invitations that the requesting user is permitted to
    // view, restricted to those that match the list request.
    // 
    // *Note:* At least one of `user_id` or `course_id` must be supplied. Both
    // fields can be supplied.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` for access errors.
    rpc GetV1Invitations(GetV1InvitationsRequest) returns (ListInvitationsResponse) {
      option (google.api.http) = {
        get: "//v1/invitations"
      };
    }
    // Creates an invitation. Only one invitation for a user and course may exist
    // at a time. Delete and re-create an invitation to make changes.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` if the requesting user is not permitted to create
    // invitations for this course or for access errors.
    // * `NOT_FOUND` if the course or the user does not exist.
    // * `FAILED_PRECONDITION` if the requested user's account is disabled or if
    // the user already has this role or a role with greater permissions.
    // * `ALREADY_EXISTS` if an invitation for the specified user and course
    // already exists.
    rpc PostV1Invitations(PostV1InvitationsRequest) returns (Invitation) {
      option (google.api.http) = {
        post: "//v1/invitations"
        body: "body"
      };
    }
    // Returns an invitation.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` if the requesting user is not permitted to view the
    // requested invitation or for access errors.
    // * `NOT_FOUND` if no invitation exists with the requested ID.
    rpc GetV1InvitationsId(GetV1InvitationsIdRequest) returns (Invitation) {
      option (google.api.http) = {
        get: "//v1/invitations/{id}"
      };
    }
    // Deletes an invitation.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` if the requesting user is not permitted to delete the
    // requested invitation or for access errors.
    // * `NOT_FOUND` if no invitation exists with the requested ID.
    rpc DeleteV1InvitationsId(DeleteV1InvitationsIdRequest) returns (Empty) {
      option (google.api.http) = {
        delete: "//v1/invitations/{id}"
      };
    }
    // Accepts an invitation, removing it and adding the invited user to the
    // teachers or students (as appropriate) of the specified course. Only the
    // invited user may accept an invitation.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` if the requesting user is not permitted to accept the
    // requested invitation or for access errors.
    // * `FAILED_PRECONDITION` for the following request errors:
    //     * CourseMemberLimitReached
    //     * CourseNotModifiable
    //     * CourseTeacherLimitReached
    //     * UserGroupsMembershipLimitReached
    // * `NOT_FOUND` if no invitation exists with the requested ID.
    rpc PostV1InvitationsId:Accept(PostV1InvitationsId:AcceptRequest) returns (Empty) {
      option (google.api.http) = {
        post: "//v1/invitations/{id}:accept"
      };
    }
    // Creates a `Registration`, causing Classroom to start sending notifications
    // from the provided `feed` to the provided `destination`.
    // 
    // Returns the created `Registration`. Currently, this will be the same as
    // the argument, but with server-assigned fields such as `expiry_time` and
    // `id` filled in.
    // 
    // Note that any value specified for the `expiry_time` or `id` fields will be
    // ignored.
    // 
    // While Classroom may validate the `destination` and return errors on a best
    // effort basis, it is the caller's responsibility to ensure that it exists
    // and that Classroom has permission to publish to it.
    // 
    // This method may return the following error codes:
    // 
    // * `PERMISSION_DENIED` if:
    //   * the authenticated user does not have permission to receive
    //     notifications from the requested field; or
    //   * the credential provided does not include the appropriate scope for the
    //     requested feed.
    //   * another access error is encountered.
    // * `INVALID_ARGUMENT` if:
    //   * no `destination` is specified, or the specified `destination` is not
    //     valid; or
    //   * no `feed` is specified, or the specified `feed` is not valid.
    // * `NOT_FOUND` if:
    //   * the specified `feed` cannot be located, or the requesting user does not
    //     have permission to determine whether or not it exists; or
    //   * the specified `destination` cannot be located, or Classroom has not
    //     been granted permission to publish to it.
    rpc PostV1Registrations(PostV1RegistrationsRequest) returns (Registration) {
      option (google.api.http) = {
        post: "//v1/registrations"
        body: "body"
      };
    }
    // Deletes a `Registration`, causing Classroom to stop sending notifications
    // for that `Registration`.
    rpc DeleteV1RegistrationsRegistrationId(DeleteV1RegistrationsRegistrationIdRequest) returns (Empty) {
      option (google.api.http) = {
        delete: "//v1/registrations/{registrationId}"
      };
    }
    // Returns a list of guardian invitations that the requesting user is
    // permitted to view, filtered by the parameters provided.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` if a `student_id` is specified, and the requesting
    //   user is not permitted to view guardian invitations for that student, if
    //   `"-"` is specified as the `student_id` and the user is not a domain
    //   administrator, if guardians are not enabled for the domain in question,
    //   or for other access errors.
    // * `INVALID_ARGUMENT` if a `student_id` is specified, but its format cannot
    //   be recognized (it is not an email address, nor a `student_id` from the
    //   API, nor the literal string `me`). May also be returned if an invalid
    //   `page_token` or `state` is provided.
    // * `NOT_FOUND` if a `student_id` is specified, and its format can be
    //   recognized, but Classroom has no record of that student.
    rpc GetV1UserProfilesStudentIdGuardianInvitations(GetV1UserProfilesStudentIdGuardianInvitationsRequest) returns (ListGuardianInvitationsResponse) {
      option (google.api.http) = {
        get: "//v1/userProfiles/{studentId}/guardianInvitations"
      };
    }
    // Creates a guardian invitation, and sends an email to the guardian asking
    // them to confirm that they are the student's guardian.
    // 
    // Once the guardian accepts the invitation, their `state` will change to
    // `COMPLETED` and they will start receiving guardian notifications. A
    // `Guardian` resource will also be created to represent the active guardian.
    // 
    // The request object must have the `student_id` and
    // `invited_email_address` fields set. Failing to set these fields, or
    // setting any other fields in the request, will result in an error.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` if the current user does not have permission to
    //   manage guardians, if the guardian in question has already rejected
    //   too many requests for that student, if guardians are not enabled for the
    //   domain in question, or for other access errors.
    // * `RESOURCE_EXHAUSTED` if the student or guardian has exceeded the guardian
    //   link limit.
    // * `INVALID_ARGUMENT` if the guardian email address is not valid (for
    //   example, if it is too long), or if the format of the student ID provided
    //   cannot be recognized (it is not an email address, nor a `user_id` from
    //   this API). This error will also be returned if read-only fields are set,
    //   or if the `state` field is set to to a value other than `PENDING`.
    // * `NOT_FOUND` if the student ID provided is a valid student ID, but
    //   Classroom has no record of that student.
    // * `ALREADY_EXISTS` if there is already a pending guardian invitation for
    //   the student and `invited_email_address` provided, or if the provided
    //   `invited_email_address` matches the Google account of an existing
    //   `Guardian` for this user.
    rpc PostV1UserProfilesStudentIdGuardianInvitations(PostV1UserProfilesStudentIdGuardianInvitationsRequest) returns (GuardianInvitation) {
      option (google.api.http) = {
        post: "//v1/userProfiles/{studentId}/guardianInvitations"
        body: "body"
      };
    }
    // Returns a specific guardian invitation.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` if the requesting user is not permitted to view
    //   guardian invitations for the student identified by the `student_id`, if
    //   guardians are not enabled for the domain in question, or for other
    //   access errors.
    // * `INVALID_ARGUMENT` if a `student_id` is specified, but its format cannot
    //   be recognized (it is not an email address, nor a `student_id` from the
    //   API, nor the literal string `me`).
    // * `NOT_FOUND` if Classroom cannot find any record of the given student or
    //   `invitation_id`. May also be returned if the student exists, but the
    //   requesting user does not have access to see that student.
    rpc GetV1UserProfilesStudentIdGuardianInvitationsInvitationId(GetV1UserProfilesStudentIdGuardianInvitationsInvitationIdRequest) returns (GuardianInvitation) {
      option (google.api.http) = {
        get: "//v1/userProfiles/{studentId}/guardianInvitations/{invitationId}"
      };
    }
    // Returns a list of guardians that the requesting user is permitted to
    // view, restricted to those that match the request.
    // 
    // To list guardians for any student that the requesting user may view
    // guardians for, use the literal character `-` for the student ID.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` if a `student_id` is specified, and the requesting
    //   user is not permitted to view guardian information for that student, if
    //   `"-"` is specified as the `student_id` and the user is not a domain
    //   administrator, if guardians are not enabled for the domain in question,
    //   if the `invited_email_address` filter is set by a user who is not a
    //   domain administrator, or for other access errors.
    // * `INVALID_ARGUMENT` if a `student_id` is specified, but its format cannot
    //   be recognized (it is not an email address, nor a `student_id` from the
    //   API, nor the literal string `me`). May also be returned if an invalid
    //   `page_token` is provided.
    // * `NOT_FOUND` if a `student_id` is specified, and its format can be
    //   recognized, but Classroom has no record of that student.
    rpc GetV1UserProfilesStudentIdGuardians(GetV1UserProfilesStudentIdGuardiansRequest) returns (ListGuardiansResponse) {
      option (google.api.http) = {
        get: "//v1/userProfiles/{studentId}/guardians"
      };
    }
    // Returns a specific guardian.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` if no user that matches the provided `student_id`
    //   is visible to the requesting user, if the requesting user is not
    //   permitted to view guardian information for the student identified by the
    //   `student_id`, if guardians are not enabled for the domain in question,
    //   or for other access errors.
    // * `INVALID_ARGUMENT` if a `student_id` is specified, but its format cannot
    //   be recognized (it is not an email address, nor a `student_id` from the
    //   API, nor the literal string `me`).
    // * `NOT_FOUND` if the requesting user is permitted to view guardians for
    //   the requested `student_id`, but no `Guardian` record exists for that
    //   student that matches the provided `guardian_id`.
    rpc GetV1UserProfilesStudentIdGuardiansGuardianId(GetV1UserProfilesStudentIdGuardiansGuardianIdRequest) returns (Guardian) {
      option (google.api.http) = {
        get: "//v1/userProfiles/{studentId}/guardians/{guardianId}"
      };
    }
    // Deletes a guardian.
    // 
    // The guardian will no longer receive guardian notifications and the guardian
    // will no longer be accessible via the API.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` if no user that matches the provided `student_id`
    //   is visible to the requesting user, if the requesting user is not
    //   permitted to manage guardians for the student identified by the
    //   `student_id`, if guardians are not enabled for the domain in question,
    //   or for other access errors.
    // * `INVALID_ARGUMENT` if a `student_id` is specified, but its format cannot
    //   be recognized (it is not an email address, nor a `student_id` from the
    //   API).
    // * `NOT_FOUND` if the requesting user is permitted to modify guardians for
    //   the requested `student_id`, but no `Guardian` record exists for that
    //   student with the provided `guardian_id`.
    rpc DeleteV1UserProfilesStudentIdGuardiansGuardianId(DeleteV1UserProfilesStudentIdGuardiansGuardianIdRequest) returns (Empty) {
      option (google.api.http) = {
        delete: "//v1/userProfiles/{studentId}/guardians/{guardianId}"
      };
    }
    // Returns a user profile.
    // 
    // This method returns the following error codes:
    // 
    // * `PERMISSION_DENIED` if the requesting user is not permitted to access
    // this user profile, if no profile exists with the requested ID, or for
    // access errors.
    rpc GetV1UserProfilesUserId(GetV1UserProfilesUserIdRequest) returns (UserProfile) {
      option (google.api.http) = {
        get: "//v1/userProfiles/{userId}"
      };
    }
}

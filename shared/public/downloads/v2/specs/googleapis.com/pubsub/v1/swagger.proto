syntax = "proto3";

import "google/api/annotations.proto";

package googlecloudpub/sub;

message PutV1NameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    Subscription body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    // The name of the subscription. It must have the format
    // `"projects/{project}/subscriptions/{subscription}"`. `{subscription}` must
    // start with a letter, and contain only letters (`[A-Za-z]`), numbers
    // (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`),
    // plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters
    // in length, and it must not start with `"goog"`.
    string name = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1ProjectSubscriptionsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    // Maximum number of subscriptions to return.
    int32 pageSize = 9;
    // The value returned by the last `ListSubscriptionsResponse`; indicates that
    // this is a continuation of a prior `ListSubscriptions` call, and that the
    // system should return the next page of data.
    string pageToken = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    // The name of the cloud project that subscriptions belong to.
    // Format is `projects/{project}`.
    string project = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message GetV1ProjectTopicsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    // Maximum number of topics to return.
    int32 pageSize = 9;
    // The value returned by the last `ListTopicsResponse`; indicates that this is
    // a continuation of a prior `ListTopics` call, and that the system should
    // return the next page of data.
    string pageToken = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    // The name of the cloud project that topics belong to.
    // Format is `projects/{project}`.
    string project = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message GetV1Resource:GetIamPolicyRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    boolean pp = 9;
    boolean prettyPrint = 10;
    string quotaUser = 11;
    // REQUIRED: The resource for which the policy is being requested.
    // See the operation documentation for the appropriate value for this field.
    string resource = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PostV1Resource:SetIamPolicyRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    SetIamPolicyRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // REQUIRED: The resource for which the policy is being specified.
    // See the operation documentation for the appropriate value for this field.
    string resource = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1Resource:TestIamPermissionsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    TestIamPermissionsRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // REQUIRED: The resource for which the policy detail is being requested.
    // See the operation documentation for the appropriate value for this field.
    string resource = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1SubscriptionRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    boolean pp = 9;
    boolean prettyPrint = 10;
    string quotaUser = 11;
    // The name of the subscription to get.
    // Format is `projects/{project}/subscriptions/{sub}`.
    string subscription = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message DeleteV1SubscriptionRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    boolean pp = 9;
    boolean prettyPrint = 10;
    string quotaUser = 11;
    // The subscription to delete.
    // Format is `projects/{project}/subscriptions/{sub}`.
    string subscription = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PostV1Subscription:AcknowledgeRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    AcknowledgeRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // The subscription whose message is being acknowledged.
    // Format is `projects/{project}/subscriptions/{sub}`.
    string subscription = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1Subscription:ModifyAckDeadlineRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    ModifyAckDeadlineRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // The name of the subscription.
    // Format is `projects/{project}/subscriptions/{sub}`.
    string subscription = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1Subscription:ModifyPushConfigRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    ModifyPushConfigRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // The name of the subscription.
    // Format is `projects/{project}/subscriptions/{sub}`.
    string subscription = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1Subscription:PullRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    PullRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // The subscription from which messages should be pulled.
    // Format is `projects/{project}/subscriptions/{sub}`.
    string subscription = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1TopicRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    boolean pp = 9;
    boolean prettyPrint = 10;
    string quotaUser = 11;
    // The name of the topic to get.
    // Format is `projects/{project}/topics/{topic}`.
    string topic = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message DeleteV1TopicRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    boolean pp = 9;
    boolean prettyPrint = 10;
    string quotaUser = 11;
    // Name of the topic to delete.
    // Format is `projects/{project}/topics/{topic}`.
    string topic = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message GetV1TopicSubscriptionsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    // Maximum number of subscription names to return.
    int32 pageSize = 9;
    // The value returned by the last `ListTopicSubscriptionsResponse`; indicates
    // that this is a continuation of a prior `ListTopicSubscriptions` call, and
    // that the system should return the next page of data.
    string pageToken = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    // The name of the topic that subscriptions are attached to.
    // Format is `projects/{project}/topics/{topic}`.
    string topic = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message PostV1Topic:PublishRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    PublishRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // The messages in the request will be published on this topic.
    // Format is `projects/{project}/topics/{topic}`.
    string topic = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

enum $.Xgafv {
    $XGAFV_1 = 0;
    $XGAFV_2 = 1;
}

message AcknowledgeRequest {
    // The acknowledgment ID for the messages being acknowledged that was returned
    // by the Pub/Sub system in the `Pull` response. Must not be empty.
    repeated string ackIds = 1;
}

message Binding {
    // Specifies the identities requesting access for a Cloud Platform resource.
    // `members` can have the following values:
    // 
    // * `allUsers`: A special identifier that represents anyone who is
    //    on the internet; with or without a Google account.
    // 
    // * `allAuthenticatedUsers`: A special identifier that represents anyone
    //    who is authenticated with a Google account or a service account.
    // 
    // * `user:{emailid}`: An email address that represents a specific Google
    //    account. For example, `alice@gmail.com` or `joe@example.com`.
    // 
    // 
    // * `serviceAccount:{emailid}`: An email address that represents a service
    //    account. For example, `my-other-app@appspot.gserviceaccount.com`.
    // 
    // * `group:{emailid}`: An email address that represents a Google group.
    //    For example, `admins@example.com`.
    // 
    // 
    // * `domain:{domain}`: A Google Apps domain name that represents all the
    //    users of that domain. For example, `google.com` or `example.com`.
    // 
    repeated string members = 1;
    // Role that is assigned to `members`.
    // For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
    // Required
    string role = 2;
}

message Empty {
}

message ListSubscriptionsResponse {
    // If not empty, indicates that there may be more subscriptions that match
    // the request; this value should be passed in a new
    // `ListSubscriptionsRequest` to get more subscriptions.
    string nextPageToken = 1;
    // The subscriptions that match the request.
    repeated Subscription subscriptions = 2;
}

message ListTopicSubscriptionsResponse {
    // If not empty, indicates that there may be more subscriptions that match
    // the request; this value should be passed in a new
    // `ListTopicSubscriptionsRequest` to get more subscriptions.
    string nextPageToken = 1;
    // The names of the subscriptions that match the request.
    repeated string subscriptions = 2;
}

message ListTopicsResponse {
    // If not empty, indicates that there may be more topics that match the
    // request; this value should be passed in a new `ListTopicsRequest`.
    string nextPageToken = 1;
    // The resulting topics.
    repeated Topic topics = 2;
}

message ModifyAckDeadlineRequest {
    // The new ack deadline with respect to the time this request was sent to
    // the Pub/Sub system. For example, if the value is 10, the new
    // ack deadline will expire 10 seconds after the `ModifyAckDeadline` call
    // was made. Specifying zero may immediately make the message available for
    // another pull request.
    // The minimum deadline you can specify is 0 seconds.
    // The maximum deadline you can specify is 600 seconds (10 minutes).
    int32 ackDeadlineSeconds = 1;
    // List of acknowledgment IDs.
    repeated string ackIds = 2;
}

message ModifyPushConfigRequest {
    // The push configuration for future deliveries.
    // 
    // An empty `pushConfig` indicates that the Pub/Sub system should
    // stop pushing messages from the given subscription and allow
    // messages to be pulled and acknowledged - effectively pausing
    // the subscription if `Pull` or `StreamingPull` is not called.
    PushConfig pushConfig = 1;
}

message Policy {
    // Associates a list of `members` to a `role`.
    // `bindings` with no members will result in an error.
    repeated Binding bindings = 1;
    // `etag` is used for optimistic concurrency control as a way to help
    // prevent simultaneous updates of a policy from overwriting each other.
    // It is strongly suggested that systems make use of the `etag` in the
    // read-modify-write cycle to perform policy updates in order to avoid race
    // conditions: An `etag` is returned in the response to `getIamPolicy`, and
    // systems are expected to put that etag in the request to `setIamPolicy` to
    // ensure that their change will be applied to the same version of the policy.
    // 
    // If no `etag` is provided in the call to `setIamPolicy`, then the existing
    // policy is overwritten blindly.
    string etag = 2;
    // Version of the `Policy`. The default version is 0.
    int32 version = 3;
}

message PublishRequest {
    // The messages to publish.
    repeated PubsubMessage messages = 1;
}

message PublishResponse {
    // The server-assigned ID of each published message, in the same order as
    // the messages in the request. IDs are guaranteed to be unique within
    // the topic.
    repeated string messageIds = 1;
}

message PubsubMessage {
    // Optional attributes for this message.
    map<string, string> attributes = 1;
    // The message payload.
    string data = 2;
    // ID of this message, assigned by the server when the message is published.
    // Guaranteed to be unique within the topic. This value may be read by a
    // subscriber that receives a `PubsubMessage` via a `Pull` call or a push
    // delivery. It must not be populated by the publisher in a `Publish` call.
    string messageId = 3;
    // The time at which the message was published, populated by the server when
    // it receives the `Publish` call. It must not be populated by the
    // publisher in a `Publish` call.
    string publishTime = 4;
}

message PullRequest {
    // The maximum number of messages returned for this request. The Pub/Sub
    // system may return fewer than the number specified.
    int32 maxMessages = 1;
    // If this field set to true, the system will respond immediately even if
    // it there are no messages available to return in the `Pull` response.
    // Otherwise, the system may wait (for a bounded amount of time) until at
    // least one message is available, rather than returning no messages. The
    // client may cancel the request if it does not wish to wait any longer for
    // the response.
    bool returnImmediately = 2;
}

message PullResponse {
    // Received Pub/Sub messages. The Pub/Sub system will return zero messages if
    // there are no more available in the backlog. The Pub/Sub system may return
    // fewer than the `maxMessages` requested even if there are more messages
    // available in the backlog.
    repeated ReceivedMessage receivedMessages = 1;
}

message PushConfig {
    // Endpoint configuration attributes.
    // 
    // Every endpoint has a set of API supported attributes that can be used to
    // control different aspects of the message delivery.
    // 
    // The currently supported attribute is `x-goog-version`, which you can
    // use to change the format of the pushed message. This attribute
    // indicates the version of the data expected by the endpoint. This
    // controls the shape of the pushed message (i.e., its fields and metadata).
    // The endpoint version is based on the version of the Pub/Sub API.
    // 
    // If not present during the `CreateSubscription` call, it will default to
    // the version of the API used to make such call. If not present during a
    // `ModifyPushConfig` call, its value will not be changed. `GetSubscription`
    // calls will always return a valid version, even if the subscription was
    // created without this attribute.
    // 
    // The possible values for this attribute are:
    // 
    // * `v1beta1`: uses the push format defined in the v1beta1 Pub/Sub API.
    // * `v1` or `v1beta2`: uses the push format defined in the v1 Pub/Sub API.
    map<string, string> attributes = 1;
    // A URL locating the endpoint to which messages should be pushed.
    // For example, a Webhook endpoint might use "https://example.com/push".
    string pushEndpoint = 2;
}

message ReceivedMessage {
    // This ID can be used to acknowledge the received message.
    string ackId = 1;
    // The message.
    PubsubMessage message = 2;
}

message SetIamPolicyRequest {
    // REQUIRED: The complete policy to be applied to the `resource`. The size of
    // the policy is limited to a few 10s of KB. An empty policy is a
    // valid policy but certain Cloud Platform services (such as Projects)
    // might reject them.
    Policy policy = 1;
}

message Subscription {
    // This value is the maximum time after a subscriber receives a message
    // before the subscriber should acknowledge the message. After message
    // delivery but before the ack deadline expires and before the message is
    // acknowledged, it is an outstanding message and will not be delivered
    // again during that time (on a best-effort basis).
    // 
    // For pull subscriptions, this value is used as the initial value for the ack
    // deadline. To override this value for a given message, call
    // `ModifyAckDeadline` with the corresponding `ack_id` if using
    // non-streaming pull or send the `ack_id` in a
    // `StreamingModifyAckDeadlineRequest` if using streaming pull.
    // The minimum custom deadline you can specify is 10 seconds.
    // The maximum custom deadline you can specify is 600 seconds (10 minutes).
    // If this parameter is 0, a default value of 10 seconds is used.
    // 
    // For push delivery, this value is also used to set the request timeout for
    // the call to the push endpoint.
    // 
    // If the subscriber never acknowledges the message, the Pub/Sub
    // system will eventually redeliver the message.
    int32 ackDeadlineSeconds = 1;
    // The name of the subscription. It must have the format
    // `"projects/{project}/subscriptions/{subscription}"`. `{subscription}` must
    // start with a letter, and contain only letters (`[A-Za-z]`), numbers
    // (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`),
    // plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters
    // in length, and it must not start with `"goog"`.
    string name = 2;
    // If push delivery is used with this subscription, this field is
    // used to configure it. An empty `pushConfig` signifies that the subscriber
    // will pull and ack messages using API methods.
    PushConfig pushConfig = 3;
    // The name of the topic from which this subscription is receiving messages.
    // Format is `projects/{project}/topics/{topic}`.
    // The value of this field will be `_deleted-topic_` if the topic has been
    // deleted.
    string topic = 4;
}

message TestIamPermissionsRequest {
    // The set of permissions to check for the `resource`. Permissions with
    // wildcards (such as '*' or 'storage.*') are not allowed. For more
    // information see
    // [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
    repeated string permissions = 1;
}

message TestIamPermissionsResponse {
    // A subset of `TestPermissionsRequest.permissions` that the caller is
    // allowed.
    repeated string permissions = 1;
}

message Topic {
    // The name of the topic. It must have the format
    // `"projects/{project}/topics/{topic}"`. `{topic}` must start with a letter,
    // and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`),
    // underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent
    // signs (`%`). It must be between 3 and 255 characters in length, and it
    // must not start with `"goog"`.
    string name = 1;
}

enum Alt {
    JSON = 0;
    MEDIA = 1;
    PROTO = 2;
}

service GoogleCloudPub/SubService {
    // Creates a subscription to a given topic.
    // If the subscription already exists, returns `ALREADY_EXISTS`.
    // If the corresponding topic doesn't exist, returns `NOT_FOUND`.
    // 
    // If the name is not provided in the request, the server will assign a random
    // name for this subscription on the same project as the topic, conforming
    // to the
    // [resource name format](https://cloud.google.com/pubsub/docs/overview#names).
    // The generated name is populated in the returned Subscription object.
    // Note that for REST API requests, you must specify a name in the request.
    rpc PutV1Name(PutV1NameRequest) returns (Subscription) {
      option (google.api.http) = {
        put: "//v1/{name}"
        body: "body"
      };
    }
    // Lists matching subscriptions.
    rpc GetV1ProjectSubscriptions(GetV1ProjectSubscriptionsRequest) returns (ListSubscriptionsResponse) {
      option (google.api.http) = {
        get: "//v1/{project}/subscriptions"
      };
    }
    // Lists matching topics.
    rpc GetV1ProjectTopics(GetV1ProjectTopicsRequest) returns (ListTopicsResponse) {
      option (google.api.http) = {
        get: "//v1/{project}/topics"
      };
    }
    // Gets the access control policy for a resource.
    // Returns an empty policy if the resource exists and does not have a policy
    // set.
    rpc GetV1Resource:GetIamPolicy(GetV1Resource:GetIamPolicyRequest) returns (Policy) {
      option (google.api.http) = {
        get: "//v1/{resource}:getIamPolicy"
      };
    }
    // Sets the access control policy on the specified resource. Replaces any
    // existing policy.
    rpc PostV1Resource:SetIamPolicy(PostV1Resource:SetIamPolicyRequest) returns (Policy) {
      option (google.api.http) = {
        post: "//v1/{resource}:setIamPolicy"
        body: "body"
      };
    }
    // Returns permissions that a caller has on the specified resource.
    // If the resource does not exist, this will return an empty set of
    // permissions, not a NOT_FOUND error.
    // 
    // Note: This operation is designed to be used for building permission-aware
    // UIs and command-line tools, not for authorization checking. This operation
    // may "fail open" without warning.
    rpc PostV1Resource:TestIamPermissions(PostV1Resource:TestIamPermissionsRequest) returns (TestIamPermissionsResponse) {
      option (google.api.http) = {
        post: "//v1/{resource}:testIamPermissions"
        body: "body"
      };
    }
    // Gets the configuration details of a subscription.
    rpc GetV1Subscription(GetV1SubscriptionRequest) returns (Subscription) {
      option (google.api.http) = {
        get: "//v1/{subscription}"
      };
    }
    // Deletes an existing subscription. All messages retained in the subscription
    // are immediately dropped. Calls to `Pull` after deletion will return
    // `NOT_FOUND`. After a subscription is deleted, a new one may be created with
    // the same name, but the new one has no association with the old
    // subscription or its topic unless the same topic is specified.
    rpc DeleteV1Subscription(DeleteV1SubscriptionRequest) returns (Empty) {
      option (google.api.http) = {
        delete: "//v1/{subscription}"
      };
    }
    // Acknowledges the messages associated with the `ack_ids` in the
    // `AcknowledgeRequest`. The Pub/Sub system can remove the relevant messages
    // from the subscription.
    // 
    // Acknowledging a message whose ack deadline has expired may succeed,
    // but such a message may be redelivered later. Acknowledging a message more
    // than once will not result in an error.
    rpc PostV1Subscription:Acknowledge(PostV1Subscription:AcknowledgeRequest) returns (Empty) {
      option (google.api.http) = {
        post: "//v1/{subscription}:acknowledge"
        body: "body"
      };
    }
    // Modifies the ack deadline for a specific message. This method is useful
    // to indicate that more time is needed to process a message by the
    // subscriber, or to make the message available for redelivery if the
    // processing was interrupted. Note that this does not modify the
    // subscription-level `ackDeadlineSeconds` used for subsequent messages.
    rpc PostV1Subscription:ModifyAckDeadline(PostV1Subscription:ModifyAckDeadlineRequest) returns (Empty) {
      option (google.api.http) = {
        post: "//v1/{subscription}:modifyAckDeadline"
        body: "body"
      };
    }
    // Modifies the `PushConfig` for a specified subscription.
    // 
    // This may be used to change a push subscription to a pull one (signified by
    // an empty `PushConfig`) or vice versa, or change the endpoint URL and other
    // attributes of a push subscription. Messages will accumulate for delivery
    // continuously through the call regardless of changes to the `PushConfig`.
    rpc PostV1Subscription:ModifyPushConfig(PostV1Subscription:ModifyPushConfigRequest) returns (Empty) {
      option (google.api.http) = {
        post: "//v1/{subscription}:modifyPushConfig"
        body: "body"
      };
    }
    // Pulls messages from the server. Returns an empty list if there are no
    // messages available in the backlog. The server may return `UNAVAILABLE` if
    // there are too many concurrent pull requests pending for the given
    // subscription.
    rpc PostV1Subscription:Pull(PostV1Subscription:PullRequest) returns (PullResponse) {
      option (google.api.http) = {
        post: "//v1/{subscription}:pull"
        body: "body"
      };
    }
    // Gets the configuration of a topic.
    rpc GetV1Topic(GetV1TopicRequest) returns (Topic) {
      option (google.api.http) = {
        get: "//v1/{topic}"
      };
    }
    // Deletes the topic with the given name. Returns `NOT_FOUND` if the topic
    // does not exist. After a topic is deleted, a new topic may be created with
    // the same name; this is an entirely new topic with none of the old
    // configuration or subscriptions. Existing subscriptions to this topic are
    // not deleted, but their `topic` field is set to `_deleted-topic_`.
    rpc DeleteV1Topic(DeleteV1TopicRequest) returns (Empty) {
      option (google.api.http) = {
        delete: "//v1/{topic}"
      };
    }
    // Lists the name of the subscriptions for this topic.
    rpc GetV1TopicSubscriptions(GetV1TopicSubscriptionsRequest) returns (ListTopicSubscriptionsResponse) {
      option (google.api.http) = {
        get: "//v1/{topic}/subscriptions"
      };
    }
    // Adds one or more messages to the topic. Returns `NOT_FOUND` if the topic
    // does not exist. The message payload must not be empty; it must contain
    //  either a non-empty data field, or at least one attribute.
    rpc PostV1Topic:Publish(PostV1Topic:PublishRequest) returns (PublishResponse) {
      option (google.api.http) = {
        post: "//v1/{topic}:publish"
        body: "body"
      };
    }
}

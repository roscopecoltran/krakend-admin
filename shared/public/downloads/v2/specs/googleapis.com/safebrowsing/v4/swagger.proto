syntax = "proto3";

import "google/api/annotations.proto";

package googlesafebrowsing;

message GetV4EncodedFullHashesEncodedRequestRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    // A client ID that (hopefully) uniquely identifies the client implementation
    // of the Safe Browsing API.
    string clientId = 6;
    // The version of the client implementation.
    string clientVersion = 7;
    // A serialized FindFullHashesRequest proto.
    string encodedRequest = 8;
    string fields = 9;
    string key = 10;
    string oauth_token = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message GetV4EncodedUpdatesEncodedRequestRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    // A client ID that uniquely identifies the client implementation of the Safe
    // Browsing API.
    string clientId = 6;
    // The version of the client implementation.
    string clientVersion = 7;
    // A serialized FetchThreatListUpdatesRequest proto.
    string encodedRequest = 8;
    string fields = 9;
    string key = 10;
    string oauth_token = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message PostV4FullHashes:FindRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    FindFullHashesRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PostV4ThreatListUpdates:FetchRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    FetchThreatListUpdatesRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message GetV4ThreatListsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    boolean pp = 9;
    boolean prettyPrint = 10;
    string quotaUser = 11;
    string uploadType = 12;
    string upload_protocol = 13;
}

message PostV4ThreatMatches:FindRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    FindThreatMatchesRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

enum $.Xgafv {
    $XGAFV_1 = 0;
    $XGAFV_2 = 1;
}

message Checksum {
    // The SHA256 hash of the client state; that is, of the sorted list of all
    // hashes present in the database.
    string sha256 = 1;
}

message ClientInfo {
    // A client ID that (hopefully) uniquely identifies the client implementation
    // of the Safe Browsing API.
    string clientId = 1;
    // The version of the client implementation.
    string clientVersion = 2;
}

message Constraints {
    // Sets the maximum number of entries that the client is willing to have
    // in the local database. This should be a power of 2 between 2**10 and
    // 2**20. If zero, no database size limit is set.
    int32 maxDatabaseEntries = 1;
    // The maximum size in number of entries. The update will not contain more
    // entries than this value.  This should be a power of 2 between 2**10 and
    // 2**20.  If zero, no update size limit is set.
    int32 maxUpdateEntries = 2;
    // Requests the list for a specific geographic location. If not set the
    // server may pick that value based on the user's IP address. Expects ISO
    // 3166-1 alpha-2 format.
    string region = 3;
    // The compression types supported by the client.
    repeated string supportedCompressions = 4;
}

message FetchThreatListUpdatesRequest {
    // The client metadata.
    ClientInfo client = 1;
    // The requested threat list updates.
    repeated ListUpdateRequest listUpdateRequests = 2;
}

message FetchThreatListUpdatesResponse {
    // The list updates requested by the clients.
    repeated ListUpdateResponse listUpdateResponses = 1;
    // The minimum duration the client must wait before issuing any update
    // request. If this field is not set clients may update as soon as they want.
    string minimumWaitDuration = 2;
}

message FindFullHashesRequest {
    // Client metadata associated with callers of higher-level APIs built on top
    // of the client's implementation.
    ClientInfo apiClient = 1;
    // The client metadata.
    ClientInfo client = 2;
    // The current client states for each of the client's local threat lists.
    repeated string clientStates = 3;
    // The lists and hashes to be checked.
    ThreatInfo threatInfo = 4;
}

message FindFullHashesResponse {
    // The full hashes that matched the requested prefixes.
    repeated ThreatMatch matches = 1;
    // The minimum duration the client must wait before issuing any find hashes
    // request. If this field is not set, clients can issue a request as soon as
    // they want.
    string minimumWaitDuration = 2;
    // For requested entities that did not match the threat list, how long to
    // cache the response.
    string negativeCacheDuration = 3;
}

message FindThreatMatchesRequest {
    // The client metadata.
    ClientInfo client = 1;
    // The lists and entries to be checked for matches.
    ThreatInfo threatInfo = 2;
}

message FindThreatMatchesResponse {
    // The threat list matches.
    repeated ThreatMatch matches = 1;
}

message ListThreatListsResponse {
    // The lists available for download by the client.
    repeated ThreatListDescriptor threatLists = 1;
}

message ListUpdateRequest {
    // The constraints associated with this request.
    Constraints constraints = 1;
    // The type of platform at risk by entries present in the list.
    enum ListUpdateRequest_PlatformType {
        LISTUPDATEREQUEST_PLATFORMTYPE_PLATFORM_TYPE_UNSPECIFIED = 0;
        LISTUPDATEREQUEST_PLATFORMTYPE_WINDOWS = 1;
        LISTUPDATEREQUEST_PLATFORMTYPE_LINUX = 2;
        LISTUPDATEREQUEST_PLATFORMTYPE_ANDROID = 3;
        LISTUPDATEREQUEST_PLATFORMTYPE_OSX = 4;
        LISTUPDATEREQUEST_PLATFORMTYPE_IOS = 5;
        LISTUPDATEREQUEST_PLATFORMTYPE_ANY_PLATFORM = 6;
        LISTUPDATEREQUEST_PLATFORMTYPE_ALL_PLATFORMS = 7;
        LISTUPDATEREQUEST_PLATFORMTYPE_CHROME = 8;
    }
    ListUpdateRequest_PlatformType platformType = 2;
    // The current state of the client for the requested list (the encrypted
    // client state that was received from the last successful list update).
    string state = 3;
    // The types of entries present in the list.
    enum ListUpdateRequest_ThreatEntryType {
        LISTUPDATEREQUEST_THREATENTRYTYPE_THREAT_ENTRY_TYPE_UNSPECIFIED = 0;
        LISTUPDATEREQUEST_THREATENTRYTYPE_URL = 1;
        LISTUPDATEREQUEST_THREATENTRYTYPE_EXECUTABLE = 2;
        LISTUPDATEREQUEST_THREATENTRYTYPE_IP_RANGE = 3;
        LISTUPDATEREQUEST_THREATENTRYTYPE_CHROME_EXTENSION = 4;
        LISTUPDATEREQUEST_THREATENTRYTYPE_FILENAME = 5;
        LISTUPDATEREQUEST_THREATENTRYTYPE_CERT = 6;
    }
    ListUpdateRequest_ThreatEntryType threatEntryType = 4;
    // The type of threat posed by entries present in the list.
    enum ListUpdateRequest_ThreatType {
        LISTUPDATEREQUEST_THREATTYPE_THREAT_TYPE_UNSPECIFIED = 0;
        LISTUPDATEREQUEST_THREATTYPE_MALWARE = 1;
        LISTUPDATEREQUEST_THREATTYPE_SOCIAL_ENGINEERING = 2;
        LISTUPDATEREQUEST_THREATTYPE_UNWANTED_SOFTWARE = 3;
        LISTUPDATEREQUEST_THREATTYPE_POTENTIALLY_HARMFUL_APPLICATION = 4;
        LISTUPDATEREQUEST_THREATTYPE_SOCIAL_ENGINEERING_INTERNAL = 5;
        LISTUPDATEREQUEST_THREATTYPE_API_ABUSE = 6;
        LISTUPDATEREQUEST_THREATTYPE_MALICIOUS_BINARY = 7;
        LISTUPDATEREQUEST_THREATTYPE_CSD_WHITELIST = 8;
        LISTUPDATEREQUEST_THREATTYPE_CSD_DOWNLOAD_WHITELIST = 9;
        LISTUPDATEREQUEST_THREATTYPE_CLIENT_INCIDENT = 10;
        LISTUPDATEREQUEST_THREATTYPE_CLIENT_INCIDENT_WHITELIST = 11;
        LISTUPDATEREQUEST_THREATTYPE_APK_MALWARE_OFFLINE = 12;
        LISTUPDATEREQUEST_THREATTYPE_SUBRESOURCE_FILTER = 13;
    }
    ListUpdateRequest_ThreatType threatType = 5;
}

message ListUpdateResponse {
    // A set of entries to add to a local threat type's list. Repeated to allow
    // for a combination of compressed and raw data to be sent in a single
    // response.
    repeated ThreatEntrySet additions = 1;
    // The expected SHA256 hash of the client state; that is, of the sorted list
    // of all hashes present in the database after applying the provided update.
    // If the client state doesn't match the expected state, the client must
    // disregard this update and retry later.
    Checksum checksum = 2;
    // The new client state, in encrypted format. Opaque to clients.
    string newClientState = 3;
    // The platform type for which data is returned.
    enum ListUpdateResponse_PlatformType {
        LISTUPDATERESPONSE_PLATFORMTYPE_PLATFORM_TYPE_UNSPECIFIED = 0;
        LISTUPDATERESPONSE_PLATFORMTYPE_WINDOWS = 1;
        LISTUPDATERESPONSE_PLATFORMTYPE_LINUX = 2;
        LISTUPDATERESPONSE_PLATFORMTYPE_ANDROID = 3;
        LISTUPDATERESPONSE_PLATFORMTYPE_OSX = 4;
        LISTUPDATERESPONSE_PLATFORMTYPE_IOS = 5;
        LISTUPDATERESPONSE_PLATFORMTYPE_ANY_PLATFORM = 6;
        LISTUPDATERESPONSE_PLATFORMTYPE_ALL_PLATFORMS = 7;
        LISTUPDATERESPONSE_PLATFORMTYPE_CHROME = 8;
    }
    ListUpdateResponse_PlatformType platformType = 4;
    // A set of entries to remove from a local threat type's list. In practice,
    // this field is empty or contains exactly one ThreatEntrySet.
    repeated ThreatEntrySet removals = 5;
    // The type of response. This may indicate that an action is required by the
    // client when the response is received.
    enum ListUpdateResponse_ResponseType {
        LISTUPDATERESPONSE_RESPONSETYPE_RESPONSE_TYPE_UNSPECIFIED = 0;
        LISTUPDATERESPONSE_RESPONSETYPE_PARTIAL_UPDATE = 1;
        LISTUPDATERESPONSE_RESPONSETYPE_FULL_UPDATE = 2;
    }
    ListUpdateResponse_ResponseType responseType = 6;
    // The format of the threats.
    enum ListUpdateResponse_ThreatEntryType {
        LISTUPDATERESPONSE_THREATENTRYTYPE_THREAT_ENTRY_TYPE_UNSPECIFIED = 0;
        LISTUPDATERESPONSE_THREATENTRYTYPE_URL = 1;
        LISTUPDATERESPONSE_THREATENTRYTYPE_EXECUTABLE = 2;
        LISTUPDATERESPONSE_THREATENTRYTYPE_IP_RANGE = 3;
        LISTUPDATERESPONSE_THREATENTRYTYPE_CHROME_EXTENSION = 4;
        LISTUPDATERESPONSE_THREATENTRYTYPE_FILENAME = 5;
        LISTUPDATERESPONSE_THREATENTRYTYPE_CERT = 6;
    }
    ListUpdateResponse_ThreatEntryType threatEntryType = 7;
    // The threat type for which data is returned.
    enum ListUpdateResponse_ThreatType {
        LISTUPDATERESPONSE_THREATTYPE_THREAT_TYPE_UNSPECIFIED = 0;
        LISTUPDATERESPONSE_THREATTYPE_MALWARE = 1;
        LISTUPDATERESPONSE_THREATTYPE_SOCIAL_ENGINEERING = 2;
        LISTUPDATERESPONSE_THREATTYPE_UNWANTED_SOFTWARE = 3;
        LISTUPDATERESPONSE_THREATTYPE_POTENTIALLY_HARMFUL_APPLICATION = 4;
        LISTUPDATERESPONSE_THREATTYPE_SOCIAL_ENGINEERING_INTERNAL = 5;
        LISTUPDATERESPONSE_THREATTYPE_API_ABUSE = 6;
        LISTUPDATERESPONSE_THREATTYPE_MALICIOUS_BINARY = 7;
        LISTUPDATERESPONSE_THREATTYPE_CSD_WHITELIST = 8;
        LISTUPDATERESPONSE_THREATTYPE_CSD_DOWNLOAD_WHITELIST = 9;
        LISTUPDATERESPONSE_THREATTYPE_CLIENT_INCIDENT = 10;
        LISTUPDATERESPONSE_THREATTYPE_CLIENT_INCIDENT_WHITELIST = 11;
        LISTUPDATERESPONSE_THREATTYPE_APK_MALWARE_OFFLINE = 12;
        LISTUPDATERESPONSE_THREATTYPE_SUBRESOURCE_FILTER = 13;
    }
    ListUpdateResponse_ThreatType threatType = 8;
}

message MetadataEntry {
    // The metadata entry key. For JSON requests, the key is base64-encoded.
    string key = 1;
    // The metadata entry value. For JSON requests, the value is base64-encoded.
    string value = 2;
}

message RawHashes {
    // The number of bytes for each prefix encoded below.  This field can be
    // anywhere from 4 (shortest prefix) to 32 (full SHA256 hash).
    int32 prefixSize = 1;
    // The hashes, in binary format, concatenated into one long string. Hashes are
    // sorted in lexicographic order. For JSON API users, hashes are
    // base64-encoded.
    string rawHashes = 2;
}

message RawIndices {
    // The indices to remove from a lexicographically-sorted local list.
    repeated int32 indices = 1;
}

message RiceDeltaEncoding {
    // The encoded deltas that are encoded using the Golomb-Rice coder.
    string encodedData = 1;
    // The offset of the first entry in the encoded data, or, if only a single
    // integer was encoded, that single integer's value.
    string firstValue = 2;
    // The number of entries that are delta encoded in the encoded data. If only a
    // single integer was encoded, this will be zero and the single value will be
    // stored in `first_value`.
    int32 numEntries = 3;
    // The Golomb-Rice parameter, which is a number between 2 and 28. This field
    // is missing (that is, zero) if `num_entries` is zero.
    int32 riceParameter = 4;
}

message ThreatEntry {
    // The digest of an executable in SHA256 format. The API supports both
    // binary and hex digests. For JSON requests, digests are base64-encoded.
    string digest = 1;
    // A hash prefix, consisting of the most significant 4-32 bytes of a SHA256
    // hash. This field is in binary format. For JSON requests, hashes are
    // base64-encoded.
    string hash = 2;
    // A URL.
    string url = 3;
}

message ThreatEntryMetadata {
    // The metadata entries.
    repeated MetadataEntry entries = 1;
}

message ThreatEntrySet {
    // The compression type for the entries in this set.
    enum ThreatEntrySet_CompressionType {
        THREATENTRYSET_COMPRESSIONTYPE_COMPRESSION_TYPE_UNSPECIFIED = 0;
        THREATENTRYSET_COMPRESSIONTYPE_RAW = 1;
        THREATENTRYSET_COMPRESSIONTYPE_RICE = 2;
    }
    ThreatEntrySet_CompressionType compressionType = 1;
    // The raw SHA256-formatted entries.
    RawHashes rawHashes = 2;
    // The raw removal indices for a local list.
    RawIndices rawIndices = 3;
    // The encoded 4-byte prefixes of SHA256-formatted entries, using a
    // Golomb-Rice encoding. The hashes are converted to uint32, sorted in
    // ascending order, then delta encoded and stored as encoded_data.
    RiceDeltaEncoding riceHashes = 4;
    // The encoded local, lexicographically-sorted list indices, using a
    // Golomb-Rice encoding. Used for sending compressed removal indices. The
    // removal indices (uint32) are sorted in ascending order, then delta encoded
    // and stored as encoded_data.
    RiceDeltaEncoding riceIndices = 5;
}

message ThreatInfo {
    // The platform types to be checked.
    repeated string platformTypes = 1;
    // The threat entries to be checked.
    repeated ThreatEntry threatEntries = 2;
    // The entry types to be checked.
    repeated string threatEntryTypes = 3;
    // The threat types to be checked.
    repeated string threatTypes = 4;
}

message ThreatListDescriptor {
    // The platform type targeted by the list's entries.
    enum ThreatListDescriptor_PlatformType {
        THREATLISTDESCRIPTOR_PLATFORMTYPE_PLATFORM_TYPE_UNSPECIFIED = 0;
        THREATLISTDESCRIPTOR_PLATFORMTYPE_WINDOWS = 1;
        THREATLISTDESCRIPTOR_PLATFORMTYPE_LINUX = 2;
        THREATLISTDESCRIPTOR_PLATFORMTYPE_ANDROID = 3;
        THREATLISTDESCRIPTOR_PLATFORMTYPE_OSX = 4;
        THREATLISTDESCRIPTOR_PLATFORMTYPE_IOS = 5;
        THREATLISTDESCRIPTOR_PLATFORMTYPE_ANY_PLATFORM = 6;
        THREATLISTDESCRIPTOR_PLATFORMTYPE_ALL_PLATFORMS = 7;
        THREATLISTDESCRIPTOR_PLATFORMTYPE_CHROME = 8;
    }
    ThreatListDescriptor_PlatformType platformType = 1;
    // The entry types contained in the list.
    enum ThreatListDescriptor_ThreatEntryType {
        THREATLISTDESCRIPTOR_THREATENTRYTYPE_THREAT_ENTRY_TYPE_UNSPECIFIED = 0;
        THREATLISTDESCRIPTOR_THREATENTRYTYPE_URL = 1;
        THREATLISTDESCRIPTOR_THREATENTRYTYPE_EXECUTABLE = 2;
        THREATLISTDESCRIPTOR_THREATENTRYTYPE_IP_RANGE = 3;
        THREATLISTDESCRIPTOR_THREATENTRYTYPE_CHROME_EXTENSION = 4;
        THREATLISTDESCRIPTOR_THREATENTRYTYPE_FILENAME = 5;
        THREATLISTDESCRIPTOR_THREATENTRYTYPE_CERT = 6;
    }
    ThreatListDescriptor_ThreatEntryType threatEntryType = 2;
    // The threat type posed by the list's entries.
    enum ThreatListDescriptor_ThreatType {
        THREATLISTDESCRIPTOR_THREATTYPE_THREAT_TYPE_UNSPECIFIED = 0;
        THREATLISTDESCRIPTOR_THREATTYPE_MALWARE = 1;
        THREATLISTDESCRIPTOR_THREATTYPE_SOCIAL_ENGINEERING = 2;
        THREATLISTDESCRIPTOR_THREATTYPE_UNWANTED_SOFTWARE = 3;
        THREATLISTDESCRIPTOR_THREATTYPE_POTENTIALLY_HARMFUL_APPLICATION = 4;
        THREATLISTDESCRIPTOR_THREATTYPE_SOCIAL_ENGINEERING_INTERNAL = 5;
        THREATLISTDESCRIPTOR_THREATTYPE_API_ABUSE = 6;
        THREATLISTDESCRIPTOR_THREATTYPE_MALICIOUS_BINARY = 7;
        THREATLISTDESCRIPTOR_THREATTYPE_CSD_WHITELIST = 8;
        THREATLISTDESCRIPTOR_THREATTYPE_CSD_DOWNLOAD_WHITELIST = 9;
        THREATLISTDESCRIPTOR_THREATTYPE_CLIENT_INCIDENT = 10;
        THREATLISTDESCRIPTOR_THREATTYPE_CLIENT_INCIDENT_WHITELIST = 11;
        THREATLISTDESCRIPTOR_THREATTYPE_APK_MALWARE_OFFLINE = 12;
        THREATLISTDESCRIPTOR_THREATTYPE_SUBRESOURCE_FILTER = 13;
    }
    ThreatListDescriptor_ThreatType threatType = 3;
}

message ThreatMatch {
    // The cache lifetime for the returned match. Clients must not cache this
    // response for more than this duration to avoid false positives.
    string cacheDuration = 1;
    // The platform type matching this threat.
    enum ThreatMatch_PlatformType {
        THREATMATCH_PLATFORMTYPE_PLATFORM_TYPE_UNSPECIFIED = 0;
        THREATMATCH_PLATFORMTYPE_WINDOWS = 1;
        THREATMATCH_PLATFORMTYPE_LINUX = 2;
        THREATMATCH_PLATFORMTYPE_ANDROID = 3;
        THREATMATCH_PLATFORMTYPE_OSX = 4;
        THREATMATCH_PLATFORMTYPE_IOS = 5;
        THREATMATCH_PLATFORMTYPE_ANY_PLATFORM = 6;
        THREATMATCH_PLATFORMTYPE_ALL_PLATFORMS = 7;
        THREATMATCH_PLATFORMTYPE_CHROME = 8;
    }
    ThreatMatch_PlatformType platformType = 2;
    // The threat matching this threat.
    ThreatEntry threat = 3;
    // Optional metadata associated with this threat.
    ThreatEntryMetadata threatEntryMetadata = 4;
    // The threat entry type matching this threat.
    enum ThreatMatch_ThreatEntryType {
        THREATMATCH_THREATENTRYTYPE_THREAT_ENTRY_TYPE_UNSPECIFIED = 0;
        THREATMATCH_THREATENTRYTYPE_URL = 1;
        THREATMATCH_THREATENTRYTYPE_EXECUTABLE = 2;
        THREATMATCH_THREATENTRYTYPE_IP_RANGE = 3;
        THREATMATCH_THREATENTRYTYPE_CHROME_EXTENSION = 4;
        THREATMATCH_THREATENTRYTYPE_FILENAME = 5;
        THREATMATCH_THREATENTRYTYPE_CERT = 6;
    }
    ThreatMatch_ThreatEntryType threatEntryType = 5;
    // The threat type matching this threat.
    enum ThreatMatch_ThreatType {
        THREATMATCH_THREATTYPE_THREAT_TYPE_UNSPECIFIED = 0;
        THREATMATCH_THREATTYPE_MALWARE = 1;
        THREATMATCH_THREATTYPE_SOCIAL_ENGINEERING = 2;
        THREATMATCH_THREATTYPE_UNWANTED_SOFTWARE = 3;
        THREATMATCH_THREATTYPE_POTENTIALLY_HARMFUL_APPLICATION = 4;
        THREATMATCH_THREATTYPE_SOCIAL_ENGINEERING_INTERNAL = 5;
        THREATMATCH_THREATTYPE_API_ABUSE = 6;
        THREATMATCH_THREATTYPE_MALICIOUS_BINARY = 7;
        THREATMATCH_THREATTYPE_CSD_WHITELIST = 8;
        THREATMATCH_THREATTYPE_CSD_DOWNLOAD_WHITELIST = 9;
        THREATMATCH_THREATTYPE_CLIENT_INCIDENT = 10;
        THREATMATCH_THREATTYPE_CLIENT_INCIDENT_WHITELIST = 11;
        THREATMATCH_THREATTYPE_APK_MALWARE_OFFLINE = 12;
        THREATMATCH_THREATTYPE_SUBRESOURCE_FILTER = 13;
    }
    ThreatMatch_ThreatType threatType = 6;
}

enum Alt {
    JSON = 0;
    MEDIA = 1;
    PROTO = 2;
}

service GoogleSafeBrowsingService {
    rpc GetV4EncodedFullHashesEncodedRequest(GetV4EncodedFullHashesEncodedRequestRequest) returns (FindFullHashesResponse) {
      option (google.api.http) = {
        get: "//v4/encodedFullHashes/{encodedRequest}"
      };
    }
    rpc GetV4EncodedUpdatesEncodedRequest(GetV4EncodedUpdatesEncodedRequestRequest) returns (FetchThreatListUpdatesResponse) {
      option (google.api.http) = {
        get: "//v4/encodedUpdates/{encodedRequest}"
      };
    }
    // Finds the full hashes that match the requested hash prefixes.
    rpc PostV4FullHashes:Find(PostV4FullHashes:FindRequest) returns (FindFullHashesResponse) {
      option (google.api.http) = {
        post: "//v4/fullHashes:find"
        body: "body"
      };
    }
    // Fetches the most recent threat list updates. A client can request updates
    // for multiple lists at once.
    rpc PostV4ThreatListUpdates:Fetch(PostV4ThreatListUpdates:FetchRequest) returns (FetchThreatListUpdatesResponse) {
      option (google.api.http) = {
        post: "//v4/threatListUpdates:fetch"
        body: "body"
      };
    }
    // Lists the Safe Browsing threat lists available for download.
    rpc GetV4ThreatLists(GetV4ThreatListsRequest) returns (ListThreatListsResponse) {
      option (google.api.http) = {
        get: "//v4/threatLists"
      };
    }
    // Finds the threat entries that match the Safe Browsing lists.
    rpc PostV4ThreatMatches:Find(PostV4ThreatMatches:FindRequest) returns (FindThreatMatchesResponse) {
      option (google.api.http) = {
        post: "//v4/threatMatches:find"
        body: "body"
      };
    }
}

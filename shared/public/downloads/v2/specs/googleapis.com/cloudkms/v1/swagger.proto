syntax = "proto3";

import "google/api/annotations.proto";

package googlecloudkeymanagementservice(kms);

message GetV1NameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    // The name of the CryptoKeyVersion to get.
    string name = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message GetV1NameLocationsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // The standard list filter.
    string filter = 7;
    string key = 8;
    // The resource that owns the locations collection, if applicable.
    string name = 9;
    string oauth_token = 10;
    // The standard list page size.
    int32 pageSize = 11;
    // The standard list page token.
    string pageToken = 12;
    boolean pp = 13;
    boolean prettyPrint = 14;
    string quotaUser = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

message PostV1Name:DecryptRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    DecryptRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    // Required. The resource name of the CryptoKey to use for decryption.
    // The server will choose the appropriate version.
    string name = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1Name:DestroyRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    DestroyCryptoKeyVersionRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    // The resource name of the CryptoKeyVersion to destroy.
    string name = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1Name:EncryptRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    EncryptRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    // Required. The resource name of the CryptoKey or CryptoKeyVersion
    // to use for encryption.
    // 
    // If a CryptoKey is specified, the server will use its
    // primary version.
    string name = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1Name:RestoreRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    RestoreCryptoKeyVersionRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    // The resource name of the CryptoKeyVersion to restore.
    string name = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1Name:UpdatePrimaryVersionRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    UpdateCryptoKeyPrimaryVersionRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    // The resource name of the CryptoKey to update.
    string name = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1ParentCryptoKeyVersionsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    // Optional limit on the number of CryptoKeyVersions to
    // include in the response. Further CryptoKeyVersions can
    // subsequently be obtained by including the
    // ListCryptoKeyVersionsResponse.next_page_token in a subsequent request.
    // If unspecified, the server will pick an appropriate default.
    int32 pageSize = 9;
    // Optional pagination token, returned earlier via
    // ListCryptoKeyVersionsResponse.next_page_token.
    string pageToken = 10;
    // Required. The resource name of the CryptoKey to list, in the format
    // `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
    string parent = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message PostV1ParentCryptoKeyVersionsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    CryptoKeyVersion body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    // Required. The name of the CryptoKey associated with
    // the CryptoKeyVersions.
    string parent = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1ParentCryptoKeysRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    // Optional limit on the number of CryptoKeys to include in the
    // response.  Further CryptoKeys can subsequently be obtained by
    // including the ListCryptoKeysResponse.next_page_token in a subsequent
    // request.  If unspecified, the server will pick an appropriate default.
    int32 pageSize = 9;
    // Optional pagination token, returned earlier via
    // ListCryptoKeysResponse.next_page_token.
    string pageToken = 10;
    // Required. The resource name of the KeyRing to list, in the format
    // `projects/*/locations/*/keyRings/*`.
    string parent = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message PostV1ParentCryptoKeysRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    CryptoKey body = 5;
    string callback = 6;
    // Required. It must be unique within a KeyRing and match the regular
    // expression `[a-zA-Z0-9_-]{1,63}`
    string cryptoKeyId = 7;
    string fields = 8;
    string key = 9;
    string oauth_token = 10;
    // Required. The name of the KeyRing associated with the
    // CryptoKeys.
    string parent = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message GetV1ParentKeyRingsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    // Optional limit on the number of KeyRings to include in the
    // response.  Further KeyRings can subsequently be obtained by
    // including the ListKeyRingsResponse.next_page_token in a subsequent
    // request.  If unspecified, the server will pick an appropriate default.
    int32 pageSize = 9;
    // Optional pagination token, returned earlier via
    // ListKeyRingsResponse.next_page_token.
    string pageToken = 10;
    // Required. The resource name of the location associated with the
    // KeyRings, in the format `projects/*/locations/*`.
    string parent = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message PostV1ParentKeyRingsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    KeyRing body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    // Required. It must be unique within a location and match the regular
    // expression `[a-zA-Z0-9_-]{1,63}`
    string keyRingId = 9;
    string oauth_token = 10;
    // Required. The resource name of the location associated with the
    // KeyRings, in the format `projects/*/locations/*`.
    string parent = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message GetV1Resource:GetIamPolicyRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    boolean pp = 9;
    boolean prettyPrint = 10;
    string quotaUser = 11;
    // REQUIRED: The resource for which the policy is being requested.
    // See the operation documentation for the appropriate value for this field.
    string resource = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PostV1Resource:SetIamPolicyRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    SetIamPolicyRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // REQUIRED: The resource for which the policy is being specified.
    // See the operation documentation for the appropriate value for this field.
    string resource = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1Resource:TestIamPermissionsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    TestIamPermissionsRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // REQUIRED: The resource for which the policy detail is being requested.
    // See the operation documentation for the appropriate value for this field.
    string resource = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

enum $.Xgafv {
    $XGAFV_1 = 0;
    $XGAFV_2 = 1;
}

message AuditConfig {
    // The configuration for logging of each type of permission.
    // Next ID: 4
    repeated AuditLogConfig auditLogConfigs = 1;
    repeated string exemptedMembers = 2;
    // Specifies a service that will be enabled for audit logging.
    // For example, `storage.googleapis.com`, `cloudsql.googleapis.com`.
    // `allServices` is a special value that covers all services.
    string service = 3;
}

message AuditLogConfig {
    // Specifies the identities that do not cause logging for this type of
    // permission.
    // Follows the same format of Binding.members.
    repeated string exemptedMembers = 1;
    // The log type that this config enables.
    enum AuditLogConfig_LogType {
        AUDITLOGCONFIG_LOGTYPE_LOG_TYPE_UNSPECIFIED = 0;
        AUDITLOGCONFIG_LOGTYPE_ADMIN_READ = 1;
        AUDITLOGCONFIG_LOGTYPE_DATA_WRITE = 2;
        AUDITLOGCONFIG_LOGTYPE_DATA_READ = 3;
    }
    AuditLogConfig_LogType logType = 2;
}

message Binding {
    // The condition that is associated with this binding.
    // NOTE: an unsatisfied condition will not allow user access via current
    // binding. Different bindings, including their conditions, are examined
    // independently.
    // This field is GOOGLE_INTERNAL.
    Expr condition = 1;
    // Specifies the identities requesting access for a Cloud Platform resource.
    // `members` can have the following values:
    // 
    // * `allUsers`: A special identifier that represents anyone who is
    //    on the internet; with or without a Google account.
    // 
    // * `allAuthenticatedUsers`: A special identifier that represents anyone
    //    who is authenticated with a Google account or a service account.
    // 
    // * `user:{emailid}`: An email address that represents a specific Google
    //    account. For example, `alice@gmail.com` or `joe@example.com`.
    // 
    // 
    // * `serviceAccount:{emailid}`: An email address that represents a service
    //    account. For example, `my-other-app@appspot.gserviceaccount.com`.
    // 
    // * `group:{emailid}`: An email address that represents a Google group.
    //    For example, `admins@example.com`.
    // 
    // 
    // * `domain:{domain}`: A Google Apps domain name that represents all the
    //    users of that domain. For example, `google.com` or `example.com`.
    // 
    repeated string members = 2;
    // Role that is assigned to `members`.
    // For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
    // Required
    string role = 3;
}

message CryptoKey {
    // Output only. The time at which this CryptoKey was created.
    string createTime = 1;
    // Labels with user defined metadata.
    map<string, string> labels = 2;
    // Output only. The resource name for this CryptoKey in the format
    // `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
    string name = 3;
    // At next_rotation_time, the Key Management Service will automatically:
    // 
    // 1. Create a new version of this CryptoKey.
    // 2. Mark the new version as primary.
    // 
    // Key rotations performed manually via
    // CreateCryptoKeyVersion and
    // UpdateCryptoKeyPrimaryVersion
    // do not affect next_rotation_time.
    string nextRotationTime = 4;
    // Output only. A copy of the "primary" CryptoKeyVersion that will be used
    // by Encrypt when this CryptoKey is given
    // in EncryptRequest.name.
    // 
    // The CryptoKey's primary version can be updated via
    // UpdateCryptoKeyPrimaryVersion.
    CryptoKeyVersion primary = 5;
    // The immutable purpose of this CryptoKey. Currently, the only acceptable
    // purpose is ENCRYPT_DECRYPT.
    enum CryptoKey_Purpose {
        CRYPTOKEY_PURPOSE_CRYPTO_KEY_PURPOSE_UNSPECIFIED = 0;
        CRYPTOKEY_PURPOSE_ENCRYPT_DECRYPT = 1;
    }
    CryptoKey_Purpose purpose = 6;
    // next_rotation_time will be advanced by this period when the service
    // automatically rotates a key. Must be at least one day.
    // 
    // If rotation_period is set, next_rotation_time must also be set.
    string rotationPeriod = 7;
}

message CryptoKeyVersion {
    // Output only. The time at which this CryptoKeyVersion was created.
    string createTime = 1;
    // Output only. The time this CryptoKeyVersion's key material was
    // destroyed. Only present if state is
    // DESTROYED.
    string destroyEventTime = 2;
    // Output only. The time this CryptoKeyVersion's key material is scheduled
    // for destruction. Only present if state is
    // DESTROY_SCHEDULED.
    string destroyTime = 3;
    // Output only. The resource name for this CryptoKeyVersion in the format
    // `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`.
    string name = 4;
    // The current state of the CryptoKeyVersion.
    enum CryptoKeyVersion_State {
        CRYPTOKEYVERSION_STATE_CRYPTO_KEY_VERSION_STATE_UNSPECIFIED = 0;
        CRYPTOKEYVERSION_STATE_ENABLED = 1;
        CRYPTOKEYVERSION_STATE_DISABLED = 2;
        CRYPTOKEYVERSION_STATE_DESTROYED = 3;
        CRYPTOKEYVERSION_STATE_DESTROY_SCHEDULED = 4;
    }
    CryptoKeyVersion_State state = 5;
}

message DecryptRequest {
    // Optional data that must match the data originally supplied in
    // EncryptRequest.additional_authenticated_data.
    string additionalAuthenticatedData = 1;
    // Required. The encrypted data originally returned in
    // EncryptResponse.ciphertext.
    string ciphertext = 2;
}

message DecryptResponse {
    // The decrypted data originally supplied in EncryptRequest.plaintext.
    string plaintext = 1;
}

message DestroyCryptoKeyVersionRequest {
}

message EncryptRequest {
    // Optional data that, if specified, must also be provided during decryption
    // through DecryptRequest.additional_authenticated_data.  Must be no
    // larger than 64KiB.
    string additionalAuthenticatedData = 1;
    // Required. The data to encrypt. Must be no larger than 64KiB.
    string plaintext = 2;
}

message EncryptResponse {
    // The encrypted data.
    string ciphertext = 1;
    // The resource name of the CryptoKeyVersion used in encryption.
    string name = 2;
}

message Expr {
    // An optional description of the expression. This is a longer text which
    // describes the expression, e.g. when hovered over it in a UI.
    string description = 1;
    // Textual representation of an expression in
    // Common Expression Language syntax.
    // 
    // The application context of the containing message determines which
    // well-known feature set of CEL is supported.
    string expression = 2;
    // An optional string indicating the location of the expression for error
    // reporting, e.g. a file name and a position in the file.
    string location = 3;
    // An optional title for the expression, i.e. a short string describing
    // its purpose. This can be used e.g. in UIs which allow to enter the
    // expression.
    string title = 4;
}

message KeyRing {
    // Output only. The time at which this KeyRing was created.
    string createTime = 1;
    // Output only. The resource name for the KeyRing in the format
    // `projects/*/locations/*/keyRings/*`.
    string name = 2;
}

message ListCryptoKeyVersionsResponse {
    // The list of CryptoKeyVersions.
    repeated CryptoKeyVersion cryptoKeyVersions = 1;
    // A token to retrieve next page of results. Pass this value in
    // ListCryptoKeyVersionsRequest.page_token to retrieve the next page of
    // results.
    string nextPageToken = 2;
    // The total number of CryptoKeyVersions that matched the
    // query.
    int32 totalSize = 3;
}

message ListCryptoKeysResponse {
    // The list of CryptoKeys.
    repeated CryptoKey cryptoKeys = 1;
    // A token to retrieve next page of results. Pass this value in
    // ListCryptoKeysRequest.page_token to retrieve the next page of results.
    string nextPageToken = 2;
    // The total number of CryptoKeys that matched the query.
    int32 totalSize = 3;
}

message ListKeyRingsResponse {
    // The list of KeyRings.
    repeated KeyRing keyRings = 1;
    // A token to retrieve next page of results. Pass this value in
    // ListKeyRingsRequest.page_token to retrieve the next page of results.
    string nextPageToken = 2;
    // The total number of KeyRings that matched the query.
    int32 totalSize = 3;
}

message ListLocationsResponse {
    // A list of locations that matches the specified filter in the request.
    repeated Location locations = 1;
    // The standard List next-page token.
    string nextPageToken = 2;
}

message Location {
    // Cross-service attributes for the location. For example
    // 
    //     {"cloud.googleapis.com/region": "us-east1"}
    map<string, string> labels = 1;
    // The canonical id for this location. For example: `"us-east1"`.
    string locationId = 2;
    // Service-specific metadata. For example the available capacity at the given
    // location.
    map<string, > metadata = 3;
    // Resource name for the location, which may vary between implementations.
    // For example: `"projects/example-project/locations/us-east1"`
    string name = 4;
}

message Policy {
    // Specifies cloud audit logging configuration for this policy.
    repeated AuditConfig auditConfigs = 1;
    // Associates a list of `members` to a `role`.
    // `bindings` with no members will result in an error.
    repeated Binding bindings = 2;
    // `etag` is used for optimistic concurrency control as a way to help
    // prevent simultaneous updates of a policy from overwriting each other.
    // It is strongly suggested that systems make use of the `etag` in the
    // read-modify-write cycle to perform policy updates in order to avoid race
    // conditions: An `etag` is returned in the response to `getIamPolicy`, and
    // systems are expected to put that etag in the request to `setIamPolicy` to
    // ensure that their change will be applied to the same version of the policy.
    // 
    // If no `etag` is provided in the call to `setIamPolicy`, then the existing
    // policy is overwritten blindly.
    string etag = 3;
    bool iamOwned = 4;
    // Version of the `Policy`. The default version is 0.
    int32 version = 5;
}

message RestoreCryptoKeyVersionRequest {
}

message SetIamPolicyRequest {
    // REQUIRED: The complete policy to be applied to the `resource`. The size of
    // the policy is limited to a few 10s of KB. An empty policy is a
    // valid policy but certain Cloud Platform services (such as Projects)
    // might reject them.
    Policy policy = 1;
    // OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
    // the fields in the mask will be modified. If no mask is provided, the
    // following default mask is used:
    // paths: "bindings, etag"
    // This field is only used by Cloud IAM.
    string updateMask = 2;
}

message TestIamPermissionsRequest {
    // The set of permissions to check for the `resource`. Permissions with
    // wildcards (such as '*' or 'storage.*') are not allowed. For more
    // information see
    // [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
    repeated string permissions = 1;
}

message TestIamPermissionsResponse {
    // A subset of `TestPermissionsRequest.permissions` that the caller is
    // allowed.
    repeated string permissions = 1;
}

message UpdateCryptoKeyPrimaryVersionRequest {
    // The id of the child CryptoKeyVersion to use as primary.
    string cryptoKeyVersionId = 1;
}

enum Alt {
    JSON = 0;
    MEDIA = 1;
    PROTO = 2;
}

service GoogleCloudKeyManagementService(KMS)Service {
    // Returns metadata for a given CryptoKeyVersion.
    rpc GetV1Name(GetV1NameRequest) returns (CryptoKeyVersion) {
      option (google.api.http) = {
        get: "//v1/{name}"
      };
    }
    // Lists information about the supported locations for this service.
    rpc GetV1NameLocations(GetV1NameLocationsRequest) returns (ListLocationsResponse) {
      option (google.api.http) = {
        get: "//v1/{name}/locations"
      };
    }
    // Decrypts data that was protected by Encrypt.
    rpc PostV1Name:Decrypt(PostV1Name:DecryptRequest) returns (DecryptResponse) {
      option (google.api.http) = {
        post: "//v1/{name}:decrypt"
        body: "body"
      };
    }
    // Schedule a CryptoKeyVersion for destruction.
    // 
    // Upon calling this method, CryptoKeyVersion.state will be set to
    // DESTROY_SCHEDULED
    // and destroy_time will be set to a time 24
    // hours in the future, at which point the state
    // will be changed to
    // DESTROYED, and the key
    // material will be irrevocably destroyed.
    // 
    // Before the destroy_time is reached,
    // RestoreCryptoKeyVersion may be called to reverse the process.
    rpc PostV1Name:Destroy(PostV1Name:DestroyRequest) returns (CryptoKeyVersion) {
      option (google.api.http) = {
        post: "//v1/{name}:destroy"
        body: "body"
      };
    }
    // Encrypts data, so that it can only be recovered by a call to Decrypt.
    rpc PostV1Name:Encrypt(PostV1Name:EncryptRequest) returns (EncryptResponse) {
      option (google.api.http) = {
        post: "//v1/{name}:encrypt"
        body: "body"
      };
    }
    // Restore a CryptoKeyVersion in the
    // DESTROY_SCHEDULED,
    // state.
    // 
    // Upon restoration of the CryptoKeyVersion, state
    // will be set to DISABLED,
    // and destroy_time will be cleared.
    rpc PostV1Name:Restore(PostV1Name:RestoreRequest) returns (CryptoKeyVersion) {
      option (google.api.http) = {
        post: "//v1/{name}:restore"
        body: "body"
      };
    }
    // Update the version of a CryptoKey that will be used in Encrypt
    rpc PostV1Name:UpdatePrimaryVersion(PostV1Name:UpdatePrimaryVersionRequest) returns (CryptoKey) {
      option (google.api.http) = {
        post: "//v1/{name}:updatePrimaryVersion"
        body: "body"
      };
    }
    // Lists CryptoKeyVersions.
    rpc GetV1ParentCryptoKeyVersions(GetV1ParentCryptoKeyVersionsRequest) returns (ListCryptoKeyVersionsResponse) {
      option (google.api.http) = {
        get: "//v1/{parent}/cryptoKeyVersions"
      };
    }
    // Create a new CryptoKeyVersion in a CryptoKey.
    // 
    // The server will assign the next sequential id. If unset,
    // state will be set to
    // ENABLED.
    rpc PostV1ParentCryptoKeyVersions(PostV1ParentCryptoKeyVersionsRequest) returns (CryptoKeyVersion) {
      option (google.api.http) = {
        post: "//v1/{parent}/cryptoKeyVersions"
        body: "body"
      };
    }
    // Lists CryptoKeys.
    rpc GetV1ParentCryptoKeys(GetV1ParentCryptoKeysRequest) returns (ListCryptoKeysResponse) {
      option (google.api.http) = {
        get: "//v1/{parent}/cryptoKeys"
      };
    }
    // Create a new CryptoKey within a KeyRing.
    // 
    // CryptoKey.purpose is required.
    rpc PostV1ParentCryptoKeys(PostV1ParentCryptoKeysRequest) returns (CryptoKey) {
      option (google.api.http) = {
        post: "//v1/{parent}/cryptoKeys"
        body: "body"
      };
    }
    // Lists KeyRings.
    rpc GetV1ParentKeyRings(GetV1ParentKeyRingsRequest) returns (ListKeyRingsResponse) {
      option (google.api.http) = {
        get: "//v1/{parent}/keyRings"
      };
    }
    // Create a new KeyRing in a given Project and Location.
    rpc PostV1ParentKeyRings(PostV1ParentKeyRingsRequest) returns (KeyRing) {
      option (google.api.http) = {
        post: "//v1/{parent}/keyRings"
        body: "body"
      };
    }
    // Gets the access control policy for a resource.
    // Returns an empty policy if the resource exists and does not have a policy
    // set.
    rpc GetV1Resource:GetIamPolicy(GetV1Resource:GetIamPolicyRequest) returns (Policy) {
      option (google.api.http) = {
        get: "//v1/{resource}:getIamPolicy"
      };
    }
    // Sets the access control policy on the specified resource. Replaces any
    // existing policy.
    rpc PostV1Resource:SetIamPolicy(PostV1Resource:SetIamPolicyRequest) returns (Policy) {
      option (google.api.http) = {
        post: "//v1/{resource}:setIamPolicy"
        body: "body"
      };
    }
    // Returns permissions that a caller has on the specified resource.
    // If the resource does not exist, this will return an empty set of
    // permissions, not a NOT_FOUND error.
    // 
    // Note: This operation is designed to be used for building permission-aware
    // UIs and command-line tools, not for authorization checking. This operation
    // may "fail open" without warning.
    rpc PostV1Resource:TestIamPermissions(PostV1Resource:TestIamPermissionsRequest) returns (TestIamPermissionsResponse) {
      option (google.api.http) = {
        post: "//v1/{resource}:testIamPermissions"
        body: "body"
      };
    }
}

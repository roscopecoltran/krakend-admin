syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package taskqueue;

message GetProjectTaskqueuesTaskqueueRequest {
    alt alt = 1;
    string fields = 2;
    // Whether to get stats. Optional.
    bool getStats = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // The project under which the queue lies.
    string project = 7;
    string quotaUser = 8;
    // The id of the taskqueue to get the properties of.
    string taskqueue = 9;
    string userIp = 10;
}

message GetProjectTaskqueuesTaskqueueTasksRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    // The project under which the queue lies.
    string project = 6;
    string quotaUser = 7;
    // The id of the taskqueue to list tasks from.
    string taskqueue = 8;
    string userIp = 9;
}

message PostProjectTaskqueuesTaskqueueTasksRequest {
    alt alt = 1;
    Task body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // The project under which the queue lies
    string project = 7;
    string quotaUser = 8;
    // The taskqueue to insert the task into
    string taskqueue = 9;
    string userIp = 10;
}

message PostProjectTaskqueuesTaskqueueTasksLeaseRequest {
    alt alt = 1;
    string fields = 2;
    // When true, all returned tasks will have the same tag
    bool groupByTag = 3;
    string key = 4;
    // The lease in seconds.
    int32 leaseSecs = 5;
    // The number of tasks to lease.
    int32 numTasks = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    // The project under which the queue lies.
    string project = 9;
    string quotaUser = 10;
    // The tag allowed for tasks in the response. Must only be specified if group_by_tag is true. If group_by_tag is true and tag is not specified the tag will be that of the oldest task by eta, i.e. the first available tag
    string tag = 11;
    // The taskqueue to lease a task from.
    string taskqueue = 12;
    string userIp = 13;
}

message GetProjectTaskqueuesTaskqueueTasksTaskRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    // The project under which the queue lies.
    string project = 6;
    string quotaUser = 7;
    // The task to get properties of.
    string task = 8;
    // The taskqueue in which the task belongs.
    string taskqueue = 9;
    string userIp = 10;
}

message PostProjectTaskqueuesTaskqueueTasksTaskRequest {
    alt alt = 1;
    Task body = 2;
    string fields = 3;
    string key = 4;
    // The new lease in seconds.
    int32 newLeaseSeconds = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // The project under which the queue lies.
    string project = 8;
    string quotaUser = 9;
    string task = 10;
    string taskqueue = 11;
    string userIp = 12;
}

message DeleteProjectTaskqueuesTaskqueueTasksTaskRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    // The project under which the queue lies.
    string project = 6;
    string quotaUser = 7;
    // The id of the task to delete.
    string task = 8;
    // The taskqueue to delete a task from.
    string taskqueue = 9;
    string userIp = 10;
}

message Task {
    // Time (in seconds since the epoch) at which the task was enqueued.
    string enqueueTimestamp = 1;
    // Name of the task.
    string id = 2;
    // The kind of object returned, in this case set to task.
    string kind = 3;
    // Time (in seconds since the epoch) at which the task lease will expire. This value is 0 if the task isnt currently leased out to a worker.
    string leaseTimestamp = 4;
    // A bag of bytes which is the task payload. The payload on the JSON side is always Base64 encoded.
    string payloadBase64 = 5;
    // Name of the queue that the task is in.
    string queueName = 6;
    // The number of leases applied to this task.
    int32 retry_count = 7;
    // Tag for the task, could be used later to lease tasks grouped by a specific tag.
    string tag = 8;
}

message TaskQueue {
    // ACLs that are applicable to this TaskQueue object.
    message Acl {
            // Email addresses of users who are "admins" of the TaskQueue. This means they can control the queue, eg set ACLs for the queue.
    repeated string adminEmails = 1;
            // Email addresses of users who can "consume" tasks from the TaskQueue. This means they can Dequeue and Delete tasks from the queue.
    repeated string consumerEmails = 2;
            // Email addresses of users who can "produce" tasks into the TaskQueue. This means they can Insert tasks into the queue.
    repeated string producerEmails = 3;
    }
    Acl acl = 1;
    // Name of the taskqueue.
    string id = 2;
    // The kind of REST object returned, in this case taskqueue.
    string kind = 3;
    // The number of times we should lease out tasks before giving up on them. If unset we lease them out forever until a worker deletes the task.
    int32 maxLeases = 4;
    // Statistics for the TaskQueue object in question.
    message Stats {
            // Number of tasks leased in the last hour.
    string leasedLastHour = 1;
            // Number of tasks leased in the last minute.
    string leasedLastMinute = 2;
            // The timestamp (in seconds since the epoch) of the oldest unfinished task.
    string oldestTask = 3;
            // Number of tasks in the queue.
    int32 totalTasks = 4;
    }
    Stats stats = 5;
}

message Tasks {
    // The actual list of tasks returned as a result of the lease operation.
    repeated Task items = 1;
    // The kind of object returned, a list of tasks.
    string kind = 2;
}

message Tasks2 {
    // The actual list of tasks currently active in the TaskQueue.
    repeated Task items = 1;
    // The kind of object returned, a list of tasks.
    string kind = 2;
}

enum Alt {
    JSON = 0;
}

service TaskQueueService {
    // Get detailed information about a TaskQueue.
    rpc GetProjectTaskqueuesTaskqueue(GetProjectTaskqueuesTaskqueueRequest) returns (TaskQueue) {
      option (google.api.http) = {
        get: "/taskqueue/v1beta2/projects/{project}/taskqueues/{taskqueue}"
      };
    }
    // List Tasks in a TaskQueue
    rpc GetProjectTaskqueuesTaskqueueTasks(GetProjectTaskqueuesTaskqueueTasksRequest) returns (Tasks2) {
      option (google.api.http) = {
        get: "/taskqueue/v1beta2/projects/{project}/taskqueues/{taskqueue}/tasks"
      };
    }
    // Insert a new task in a TaskQueue
    rpc PostProjectTaskqueuesTaskqueueTasks(PostProjectTaskqueuesTaskqueueTasksRequest) returns (Task) {
      option (google.api.http) = {
        post: "/taskqueue/v1beta2/projects/{project}/taskqueues/{taskqueue}/tasks"
        body: "body"
      };
    }
    // Lease 1 or more tasks from a TaskQueue.
    rpc PostProjectTaskqueuesTaskqueueTasksLease(PostProjectTaskqueuesTaskqueueTasksLeaseRequest) returns (Tasks) {
      option (google.api.http) = {
        post: "/taskqueue/v1beta2/projects/{project}/taskqueues/{taskqueue}/tasks/lease"
      };
    }
    // Get a particular task from a TaskQueue.
    rpc GetProjectTaskqueuesTaskqueueTasksTask(GetProjectTaskqueuesTaskqueueTasksTaskRequest) returns (Task) {
      option (google.api.http) = {
        get: "/taskqueue/v1beta2/projects/{project}/taskqueues/{taskqueue}/tasks/{task}"
      };
    }
    // Update tasks that are leased out of a TaskQueue.
    rpc PostProjectTaskqueuesTaskqueueTasksTask(PostProjectTaskqueuesTaskqueueTasksTaskRequest) returns (Task) {
      option (google.api.http) = {
        post: "/taskqueue/v1beta2/projects/{project}/taskqueues/{taskqueue}/tasks/{task}"
        body: "body"
      };
    }
    // Delete a task from a TaskQueue.
    rpc DeleteProjectTaskqueuesTaskqueueTasksTask(DeleteProjectTaskqueuesTaskqueueTasksTaskRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/taskqueue/v1beta2/projects/{project}/taskqueues/{taskqueue}/tasks/{task}"
      };
    }
}

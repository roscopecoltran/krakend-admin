syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package googlecloudfunctions;

message GetV1beta2OperationsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // The standard list filter.
    string filter = 7;
    string key = 8;
    // The name of the operation's parent resource.
    string name = 9;
    string oauth_token = 10;
    // The standard list page size.
    int32 pageSize = 11;
    // The standard list page token.
    string pageToken = 12;
    boolean pp = 13;
    boolean prettyPrint = 14;
    string quotaUser = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

message GetV1beta2LocationFunctionsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    // The project and location from which the function should be listed,
    // specified in the format `projects/*/locations/*`
    // If you want to list functions in all locations, use "-" in place of a
    // location.
    string location = 8;
    string oauth_token = 9;
    // Maximum number of functions to return per call.
    int32 pageSize = 10;
    // The value returned by the last
    // `ListFunctionsResponse`; indicates that
    // this is a continuation of a prior `ListFunctions` call, and that the
    // system should return the next page of data.
    string pageToken = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message PostV1beta2LocationFunctionsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    CloudFunction body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    // The project and location in which the function should be created, specified
    // in the format `projects/*/locations/*`
    string location = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1beta2NameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    // The name of the function which details should be obtained.
    string name = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PutV1beta2NameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    CloudFunction body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    // The name of the function to be updated.
    string name = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message DeleteV1beta2NameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    // The name of the function which should be deleted.
    string name = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message GetV1beta2NameLocationsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // The standard list filter.
    string filter = 7;
    string key = 8;
    // The resource that owns the locations collection, if applicable.
    string name = 9;
    string oauth_token = 10;
    // The standard list page size.
    int32 pageSize = 11;
    // The standard list page token.
    string pageToken = 12;
    boolean pp = 13;
    boolean prettyPrint = 14;
    string quotaUser = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

message PostV1beta2Name:CallRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    CallFunctionRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    // The name of the function to be called.
    string name = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

enum $.Xgafv {
    $XGAFV_1 = 0;
    $XGAFV_2 = 1;
}

message CallFunctionRequest {
    // Input to be passed to the function.
    string data = 1;
}

message CallFunctionResponse {
    // Either system or user-function generated error. Set if execution
    // was not successful.
    string error = 1;
    // Execution id of function invocation.
    string executionId = 2;
    // Result populated for successful execution of synchronous function. Will
    // not be populated if function does not return a result through context.
    string result = 3;
}

message CloudFunction {
    // The amount of memory in MB available for a function.
    // Defaults to 256MB.
    int32 availableMemoryMb = 1;
    // The name of the function (as defined in source code) that will be
    // executed. Defaults to the resource name suffix, if not specified. For
    // backward compatibility, if function with given name is not found, then the
    // system will try to use function named "function".
    // For Node.js this is name of a function exported by the module specified
    // in `source_location`.
    string entryPoint = 2;
    // A source that fires events in response to a condition in another service.
    EventTrigger eventTrigger = 3;
    // An HTTPS endpoint type of source that can be triggered via URL.
    HTTPSTrigger httpsTrigger = 4;
    // Labels associated with this Cloud Function.
    map<string, string> labels = 5;
    // Output only. Name of the most recent operation modifying the function. If
    // the function status is `DEPLOYING` or `DELETING`, then it points to the
    // active operation.
    string latestOperation = 6;
    // A user-defined name of the function. Function names must be unique
    // globally and match pattern `projects/*/locations/*/functions/*`
    string name = 7;
    // Output only. The service account of the function.
    string serviceAccount = 8;
    // The Google Cloud Storage URL, starting with gs://, pointing to the zip
    // archive which contains the function.
    string sourceArchiveUrl = 9;
    // The hosted repository where the function is defined.
    SourceRepository sourceRepository = 10;
    // The URL pointing to the hosted repository where the function is defined.
    // There are supported Cloud Source Repository URLs in the following
    // formats:
    // 
    // To refer to a specific commit:
    // `https://source.developers.google.com/projects/*/repos/*/revisions/*/paths/*`
    // To refer to a moveable alias (branch):
    // `https://source.developers.google.com/projects/*/repos/*/moveable-aliases/*/paths/*`
    // In particular, to refer to HEAD use `master` moveable alias.
    // To refer to a specific fixed alias (tag):
    // `https://source.developers.google.com/projects/*/repos/*/fixed-aliases/*/paths/*`
    // 
    // You may omit `paths/*` if you want to use the main directory.
    string sourceRepositoryUrl = 11;
    // Output only. Status of the function deployment.
    enum CloudFunction_Statu {
        CLOUDFUNCTION_STATU_STATUS_UNSPECIFIED = 0;
        CLOUDFUNCTION_STATU_READY = 1;
        CLOUDFUNCTION_STATU_FAILED = 2;
        CLOUDFUNCTION_STATU_DEPLOYING = 3;
        CLOUDFUNCTION_STATU_DELETING = 4;
    }
    CloudFunction_Statu status = 12;
    // The function execution timeout. Execution is considered failed and
    // can be terminated if the function is not completed at the end of the
    // timeout period. Defaults to 60 seconds.
    string timeout = 13;
    // Output only. The last update timestamp of a Cloud Function.
    string updateTime = 14;
    // Output only.
    // The version identifier of the Cloud Function. Each deployment attempt
    // results in a new version of a function being created.
    string versionId = 15;
}

message EventTrigger {
    // `event_type` names contain the service that is sending an event and the
    // kind of event that was fired. Must be of the form
    // `providers/*/eventTypes/*` e.g. Directly handle a Message published to
    // Google Cloud Pub/Sub `providers/cloud.pubsub/eventTypes/topic.publish`
    // 
    //      Handle an object changing in Google Cloud Storage
    //      `providers/cloud.storage/eventTypes/object.change`
    // 
    //      Handle a write to the Firebase Realtime Database
    //      `providers/google.firebase.database/eventTypes/ref.write`
    string eventType = 1;
    // Specifies policy for failed executions.
    FailurePolicy failurePolicy = 2;
    // Which instance of the source's service should send events. E.g. for Pub/Sub
    // this would be a Pub/Sub topic at `projects/*/topics/*`. For Google Cloud
    // Storage this would be a bucket at `projects/*/buckets/*`. For any source
    // that only supports one instance per-project, this should be the name of the
    // project (`projects/*`)
    string resource = 3;
    // The hostname of the service that should be observed.
    // 
    // If no string is provided, the default service implementing the API will
    // be used. For example, `storage.googleapis.com` is the default for all
    // event types in the 'google.storage` namespace.
    string service = 4;
}

message FailurePolicy {
    // If specified, then the function will be retried in case of a failure.
    Retry retry = 1;
}

message HTTPSTrigger {
    // Output only. The deployed url for the function.
    string url = 1;
}

message ListFunctionsResponse {
    // The functions that match the request.
    repeated CloudFunction functions = 1;
    // If not empty, indicates that there may be more functions that match
    // the request; this value should be passed in a new
    // google.cloud.functions.v1beta2.ListFunctionsRequest
    // to get more functions.
    string nextPageToken = 2;
}

message ListLocationsResponse {
    // A list of locations that matches the specified filter in the request.
    repeated Location locations = 1;
    // The standard List next-page token.
    string nextPageToken = 2;
}

message ListOperationsResponse {
    // The standard List next-page token.
    string nextPageToken = 1;
    // A list of operations that matches the specified filter in the request.
    repeated Operation operations = 2;
}

message Location {
    // Cross-service attributes for the location. For example
    // 
    //     {"cloud.googleapis.com/region": "us-east1"}
    map<string, string> labels = 1;
    // The canonical id for this location. For example: `"us-east1"`.
    string locationId = 2;
    // Service-specific metadata. For example the available capacity at the given
    // location.
    map<string, > metadata = 3;
    // Resource name for the location, which may vary between implementations.
    // For example: `"projects/example-project/locations/us-east1"`
    string name = 4;
}

message Operation {
    // If the value is `false`, it means the operation is still in progress.
    // If `true`, the operation is completed, and either `error` or `response` is
    // available.
    bool done = 1;
    // The error result of the operation in case of failure or cancellation.
    Status error = 2;
    // Service-specific metadata associated with the operation.  It typically
    // contains progress information and common metadata such as create time.
    // Some services might not provide such metadata.  Any method that returns a
    // long-running operation should document the metadata type, if any.
    map<string, > metadata = 3;
    // The server-assigned name, which is only unique within the same service that
    // originally returns it. If you use the default HTTP mapping, the
    // `name` should have the format of `operations/some/unique/name`.
    string name = 4;
    // The normal response of the operation in case of success.  If the original
    // method returns no data on success, such as `Delete`, the response is
    // `google.protobuf.Empty`.  If the original method is standard
    // `Get`/`Create`/`Update`, the response should be the resource.  For other
    // methods, the response should have the type `XxxResponse`, where `Xxx`
    // is the original method name.  For example, if the original method name
    // is `TakeSnapshot()`, the inferred response type is
    // `TakeSnapshotResponse`.
    map<string, > response = 5;
}

message OperationMetadataV1Beta2 {
    // The original request that started the operation.
    map<string, > request = 1;
    // Target of the operation - for example
    // projects/project-1/locations/region-1/functions/function-1
    string target = 2;
    // Type of operation.
    enum OperationMetadataV1Beta2_Type {
        OPERATIONMETADATAV1BETA2_TYPE_OPERATION_UNSPECIFIED = 0;
        OPERATIONMETADATAV1BETA2_TYPE_CREATE_FUNCTION = 1;
        OPERATIONMETADATAV1BETA2_TYPE_UPDATE_FUNCTION = 2;
        OPERATIONMETADATAV1BETA2_TYPE_DELETE_FUNCTION = 3;
    }
    OperationMetadataV1Beta2_Type type = 3;
    // Version id of the function created or updated by an API call.
    // This field is only pupulated for Create and Update operations.
    string versionId = 4;
}

message Retry {
}

message SourceRepository {
    // The name of the branch from which the function should be fetched.
    string branch = 1;
    // Output only. The id of the revision that was resolved at the moment of
    // function creation or update. For example when a user deployed from a
    // branch, it will be the revision id of the latest change on this branch at
    // that time. If user deployed from revision then this value will be always
    // equal to the revision specified by the user.
    string deployedRevision = 2;
    // URL to the hosted repository where the function is defined. Only paths in
    // https://source.developers.google.com domain are supported. The path should
    // contain the name of the repository.
    string repositoryUrl = 3;
    // The id of the revision that captures the state of the repository from
    // which the function should be fetched.
    string revision = 4;
    // The path within the repository where the function is defined. The path
    // should point to the directory where Cloud Functions files are located. Use
    // "/" if the function is defined directly in the root directory of a
    // repository.
    string sourcePath = 5;
    // The name of the tag that captures the state of the repository from
    // which the function should be fetched.
    string tag = 6;
}

message Status {
    // The status code, which should be an enum value of google.rpc.Code.
    int32 code = 1;
    // A list of messages that carry the error details.  There is a common set of
    // message types for APIs to use.
    message Detail {
    }
    repeated Detail details = 2;
    // A developer-facing error message, which should be in English. Any
    // user-facing error message should be localized and sent in the
    // google.rpc.Status.details field, or localized by the client.
    string message = 3;
}

enum Alt {
    JSON = 0;
    MEDIA = 1;
    PROTO = 2;
}

service GoogleCloudFunctionsService {
    // Lists operations that match the specified filter in the request. If the
    // server doesn't support this method, it returns `UNIMPLEMENTED`.
    // 
    // NOTE: the `name` binding allows API services to override the binding
    // to use different resource name schemes, such as `users/*/operations`. To
    // override the binding, API services can add a binding such as
    // `"/v1/{name=users/*}/operations"` to their service configuration.
    // For backwards compatibility, the default name includes the operations
    // collection id, however overriding users must ensure the name binding
    // is the parent resource, without the operations collection id.
    rpc GetV1beta2Operations(GetV1beta2OperationsRequest) returns (ListOperationsResponse) {
      option (google.api.http) = {
        get: "//v1beta2/operations"
      };
    }
    // Returns a list of functions that belong to the requested project.
    rpc GetV1beta2LocationFunctions(GetV1beta2LocationFunctionsRequest) returns (ListFunctionsResponse) {
      option (google.api.http) = {
        get: "//v1beta2/{location}/functions"
      };
    }
    // Creates a new function. If a function with the given name already exists in
    // the specified project, the long running operation will return
    // `ALREADY_EXISTS` error.
    rpc PostV1beta2LocationFunctions(PostV1beta2LocationFunctionsRequest) returns (Operation) {
      option (google.api.http) = {
        post: "//v1beta2/{location}/functions"
        body: "body"
      };
    }
    // Returns a function with the given name from the requested project.
    rpc GetV1beta2Name(GetV1beta2NameRequest) returns (CloudFunction) {
      option (google.api.http) = {
        get: "//v1beta2/{name}"
      };
    }
    // Updates existing function.
    rpc PutV1beta2Name(PutV1beta2NameRequest) returns (Operation) {
      option (google.api.http) = {
        put: "//v1beta2/{name}"
        body: "body"
      };
    }
    // Deletes a function with the given name from the specified project. If the
    // given function is used by some trigger, the trigger will be updated to
    // remove this function.
    rpc DeleteV1beta2Name(DeleteV1beta2NameRequest) returns (Operation) {
      option (google.api.http) = {
        delete: "//v1beta2/{name}"
      };
    }
    // Lists information about the supported locations for this service.
    rpc GetV1beta2NameLocations(GetV1beta2NameLocationsRequest) returns (ListLocationsResponse) {
      option (google.api.http) = {
        get: "//v1beta2/{name}/locations"
      };
    }
    // Invokes synchronously deployed function. To be used for testing, very
    // limited traffic allowed.
    rpc PostV1beta2Name:Call(PostV1beta2Name:CallRequest) returns (CallFunctionResponse) {
      option (google.api.http) = {
        post: "//v1beta2/{name}:call"
        body: "body"
      };
    }
}

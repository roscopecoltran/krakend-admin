swagger: '2.0'
schemes:
  - https
host: cloudfunctions.googleapis.com
basePath: /
info:
  contact:
    name: Google
    url: 'https://google.com'
  description: API for managing lightweight user-provided functions executed in response to events.
  title: Google Cloud Functions
  version: v1beta2
  x-apiClientRegistration:
    url: 'https://console.developers.google.com'
  x-logo:
    url: 'https://api.apis.guru/v2/cache/logo/https_www.google.com_images_branding_googlelogo_2x_googlelogo_color_272x92dp.png'
  x-origin:
    - converter:
        url: 'https://github.com/lucybot/api-spec-converter'
        version: 2.6.0
      format: google
      url: 'https://cloudfunctions.googleapis.com/$discovery/rest?version=v1beta2'
      version: v1
  x-preferred: false
  x-providerName: googleapis.com
  x-serviceName: cloudfunctions
externalDocs:
  url: 'https://cloud.google.com/functions'
securityDefinitions:
  Oauth2:
    authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
    description: Oauth 2.0 authentication
    flow: implicit
    scopes:
      'https://www.googleapis.com/auth/cloud-platform': View and manage your data across Google Cloud Platform services
    type: oauth2
parameters:
  $.xgafv:
    description: V1 error format.
    enum:
      - '1'
      - '2'
    in: query
    name: $.xgafv
    type: string
  access_token:
    description: OAuth access token.
    in: query
    name: access_token
    type: string
  alt:
    default: json
    description: Data format for response.
    enum:
      - json
      - media
      - proto
    in: query
    name: alt
    type: string
  bearer_token:
    description: OAuth bearer token.
    in: query
    name: bearer_token
    type: string
  callback:
    description: JSONP
    in: query
    name: callback
    type: string
  fields:
    description: Selector specifying which fields to include in a partial response.
    in: query
    name: fields
    type: string
  key:
    description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
    in: query
    name: key
    type: string
  oauth_token:
    description: OAuth 2.0 token for the current user.
    in: query
    name: oauth_token
    type: string
  pp:
    default: true
    description: Pretty-print response.
    in: query
    name: pp
    type: boolean
  prettyPrint:
    default: true
    description: Returns response with indentations and line breaks.
    in: query
    name: prettyPrint
    type: boolean
  quotaUser:
    description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
    in: query
    name: quotaUser
    type: string
  uploadType:
    description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
    in: query
    name: uploadType
    type: string
  upload_protocol:
    description: 'Upload protocol for media (e.g. "raw", "multipart").'
    in: query
    name: upload_protocol
    type: string
tags:
  - name: operations
  - name: projects
paths:
  /v1beta2/operations:
    get:
      description: |-
        Lists operations that match the specified filter in the request. If the
        server doesn't support this method, it returns `UNIMPLEMENTED`.

        NOTE: the `name` binding allows API services to override the binding
        to use different resource name schemes, such as `users/*/operations`. To
        override the binding, API services can add a binding such as
        `"/v1/{name=users/*}/operations"` to their service configuration.
        For backwards compatibility, the default name includes the operations
        collection id, however overriding users must ensure the name binding
        is the parent resource, without the operations collection id.
      operationId: cloudfunctions.operations.list
      parameters:
        - description: The standard list filter.
          in: query
          name: filter
          type: string
        - description: The name of the operation's parent resource.
          in: query
          name: name
          type: string
        - description: The standard list page size.
          in: query
          name: pageSize
          type: integer
        - description: The standard list page token.
          in: query
          name: pageToken
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/ListOperationsResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
      tags:
        - operations
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
  '/v1beta2/{location}/functions':
    get:
      description: Returns a list of functions that belong to the requested project.
      operationId: cloudfunctions.projects.locations.functions.list
      parameters:
        - description: |-
            The project and location from which the function should be listed,
            specified in the format `projects/*/locations/*`
            If you want to list functions in all locations, use "-" in place of a
            location.
          in: path
          name: location
          required: true
          type: string
          x-reservedExpansion: true
        - description: |-
            The value returned by the last
            `ListFunctionsResponse`; indicates that
            this is a continuation of a prior `ListFunctions` call, and that the
            system should return the next page of data.
          in: query
          name: pageToken
          type: string
        - description: Maximum number of functions to return per call.
          in: query
          name: pageSize
          type: integer
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/ListFunctionsResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
      tags:
        - projects
    parameters:
      - $ref: '#/parameters/upload_protocol'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
    post:
      description: |-
        Creates a new function. If a function with the given name already exists in
        the specified project, the long running operation will return
        `ALREADY_EXISTS` error.
      operationId: cloudfunctions.projects.locations.functions.create
      parameters:
        - description: |-
            The project and location in which the function should be created, specified
            in the format `projects/*/locations/*`
          in: path
          name: location
          required: true
          type: string
          x-reservedExpansion: true
        - in: body
          name: body
          schema:
            $ref: '#/definitions/CloudFunction'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Operation'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
      tags:
        - projects
  '/v1beta2/{name}':
    delete:
      description: |-
        Deletes a function with the given name from the specified project. If the
        given function is used by some trigger, the trigger will be updated to
        remove this function.
      operationId: cloudfunctions.projects.locations.functions.delete
      parameters:
        - description: The name of the function which should be deleted.
          in: path
          name: name
          required: true
          type: string
          x-reservedExpansion: true
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Operation'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
      tags:
        - projects
    get:
      description: Returns a function with the given name from the requested project.
      operationId: cloudfunctions.projects.locations.functions.get
      parameters:
        - description: The name of the function which details should be obtained.
          in: path
          name: name
          required: true
          type: string
          x-reservedExpansion: true
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/CloudFunction'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
      tags:
        - projects
    parameters:
      - $ref: '#/parameters/upload_protocol'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
    put:
      description: Updates existing function.
      operationId: cloudfunctions.projects.locations.functions.update
      parameters:
        - description: The name of the function to be updated.
          in: path
          name: name
          required: true
          type: string
          x-reservedExpansion: true
        - in: body
          name: body
          schema:
            $ref: '#/definitions/CloudFunction'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Operation'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
      tags:
        - projects
  '/v1beta2/{name}/locations':
    get:
      description: Lists information about the supported locations for this service.
      operationId: cloudfunctions.projects.locations.list
      parameters:
        - description: 'The resource that owns the locations collection, if applicable.'
          in: path
          name: name
          required: true
          type: string
          x-reservedExpansion: true
        - description: The standard list page token.
          in: query
          name: pageToken
          type: string
        - description: The standard list page size.
          in: query
          name: pageSize
          type: integer
        - description: The standard list filter.
          in: query
          name: filter
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/ListLocationsResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
      tags:
        - projects
    parameters:
      - $ref: '#/parameters/upload_protocol'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
  '/v1beta2/{name}:call':
    parameters:
      - $ref: '#/parameters/upload_protocol'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
    post:
      description: |-
        Invokes synchronously deployed function. To be used for testing, very
        limited traffic allowed.
      operationId: cloudfunctions.projects.locations.functions.call
      parameters:
        - description: The name of the function to be called.
          in: path
          name: name
          required: true
          type: string
          x-reservedExpansion: true
        - in: body
          name: body
          schema:
            $ref: '#/definitions/CallFunctionRequest'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/CallFunctionResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
      tags:
        - projects
definitions:
  CallFunctionRequest:
    description: Request for the `CallFunction` method.
    properties:
      data:
        description: Input to be passed to the function.
        type: string
    type: object
  CallFunctionResponse:
    description: Response of `CallFunction` method.
    properties:
      error:
        description: |-
          Either system or user-function generated error. Set if execution
          was not successful.
        type: string
      executionId:
        description: Execution id of function invocation.
        type: string
      result:
        description: |-
          Result populated for successful execution of synchronous function. Will
          not be populated if function does not return a result through context.
        type: string
    type: object
  CloudFunction:
    description: |-
      Describes a Cloud Function that contains user computation executed in
      response to an event. It encapsulate function and triggers configurations.
    properties:
      availableMemoryMb:
        description: |-
          The amount of memory in MB available for a function.
          Defaults to 256MB.
        format: int32
        type: integer
      entryPoint:
        description: |-
          The name of the function (as defined in source code) that will be
          executed. Defaults to the resource name suffix, if not specified. For
          backward compatibility, if function with given name is not found, then the
          system will try to use function named "function".
          For Node.js this is name of a function exported by the module specified
          in `source_location`.
        type: string
      eventTrigger:
        $ref: '#/definitions/EventTrigger'
        description: A source that fires events in response to a condition in another service.
      httpsTrigger:
        $ref: '#/definitions/HTTPSTrigger'
        description: An HTTPS endpoint type of source that can be triggered via URL.
      labels:
        additionalProperties:
          type: string
        description: Labels associated with this Cloud Function.
        type: object
      latestOperation:
        description: |-
          Output only. Name of the most recent operation modifying the function. If
          the function status is `DEPLOYING` or `DELETING`, then it points to the
          active operation.
        type: string
      name:
        description: |-
          A user-defined name of the function. Function names must be unique
          globally and match pattern `projects/*/locations/*/functions/*`
        type: string
      serviceAccount:
        description: Output only. The service account of the function.
        type: string
      sourceArchiveUrl:
        description: |-
          The Google Cloud Storage URL, starting with gs://, pointing to the zip
          archive which contains the function.
        type: string
      sourceRepository:
        $ref: '#/definitions/SourceRepository'
        description: The hosted repository where the function is defined.
      sourceRepositoryUrl:
        description: |-
          The URL pointing to the hosted repository where the function is defined.
          There are supported Cloud Source Repository URLs in the following
          formats:

          To refer to a specific commit:
          `https://source.developers.google.com/projects/*/repos/*/revisions/*/paths/*`
          To refer to a moveable alias (branch):
          `https://source.developers.google.com/projects/*/repos/*/moveable-aliases/*/paths/*`
          In particular, to refer to HEAD use `master` moveable alias.
          To refer to a specific fixed alias (tag):
          `https://source.developers.google.com/projects/*/repos/*/fixed-aliases/*/paths/*`

          You may omit `paths/*` if you want to use the main directory.
        type: string
      status:
        description: Output only. Status of the function deployment.
        enum:
          - STATUS_UNSPECIFIED
          - READY
          - FAILED
          - DEPLOYING
          - DELETING
        type: string
      timeout:
        description: |-
          The function execution timeout. Execution is considered failed and
          can be terminated if the function is not completed at the end of the
          timeout period. Defaults to 60 seconds.
        format: google-duration
        type: string
      updateTime:
        description: Output only. The last update timestamp of a Cloud Function.
        format: google-datetime
        type: string
      versionId:
        description: |-
          Output only.
          The version identifier of the Cloud Function. Each deployment attempt
          results in a new version of a function being created.
        format: int64
        type: string
    type: object
  EventTrigger:
    description: |-
      Describes EventTrigger, used to request events be sent from another
      service.
    properties:
      eventType:
        description: |-
          `event_type` names contain the service that is sending an event and the
          kind of event that was fired. Must be of the form
          `providers/*/eventTypes/*` e.g. Directly handle a Message published to
          Google Cloud Pub/Sub `providers/cloud.pubsub/eventTypes/topic.publish`

               Handle an object changing in Google Cloud Storage
               `providers/cloud.storage/eventTypes/object.change`

               Handle a write to the Firebase Realtime Database
               `providers/google.firebase.database/eventTypes/ref.write`
        type: string
      failurePolicy:
        $ref: '#/definitions/FailurePolicy'
        description: Specifies policy for failed executions.
      resource:
        description: |-
          Which instance of the source's service should send events. E.g. for Pub/Sub
          this would be a Pub/Sub topic at `projects/*/topics/*`. For Google Cloud
          Storage this would be a bucket at `projects/*/buckets/*`. For any source
          that only supports one instance per-project, this should be the name of the
          project (`projects/*`)
        type: string
      service:
        description: |-
          The hostname of the service that should be observed.

          If no string is provided, the default service implementing the API will
          be used. For example, `storage.googleapis.com` is the default for all
          event types in the 'google.storage` namespace.
        type: string
    type: object
  FailurePolicy:
    description: |-
      Describes the policy in case of function's execution failure.
      If empty, then defaults to ignoring failures (i.e. not retrying them).
    properties:
      retry:
        $ref: '#/definitions/Retry'
        description: 'If specified, then the function will be retried in case of a failure.'
    type: object
  HTTPSTrigger:
    description: 'Describes HTTPSTrigger, could be used to connect web hooks to function.'
    properties:
      url:
        description: Output only. The deployed url for the function.
        type: string
    type: object
  ListFunctionsResponse:
    description: Response for the `ListFunctions` method.
    properties:
      functions:
        description: The functions that match the request.
        items:
          $ref: '#/definitions/CloudFunction'
        type: array
      nextPageToken:
        description: |-
          If not empty, indicates that there may be more functions that match
          the request; this value should be passed in a new
          google.cloud.functions.v1beta2.ListFunctionsRequest
          to get more functions.
        type: string
    type: object
  ListLocationsResponse:
    description: The response message for Locations.ListLocations.
    properties:
      locations:
        description: A list of locations that matches the specified filter in the request.
        items:
          $ref: '#/definitions/Location'
        type: array
      nextPageToken:
        description: The standard List next-page token.
        type: string
    type: object
  ListOperationsResponse:
    description: The response message for Operations.ListOperations.
    properties:
      nextPageToken:
        description: The standard List next-page token.
        type: string
      operations:
        description: A list of operations that matches the specified filter in the request.
        items:
          $ref: '#/definitions/Operation'
        type: array
    type: object
  Location:
    description: A resource that represents Google Cloud Platform location.
    properties:
      labels:
        additionalProperties:
          type: string
        description: |-
          Cross-service attributes for the location. For example

              {"cloud.googleapis.com/region": "us-east1"}
        type: object
      locationId:
        description: 'The canonical id for this location. For example: `"us-east1"`.'
        type: string
      metadata:
        additionalProperties:
          description: Properties of the object. Contains field @type with type URL.
        description: |-
          Service-specific metadata. For example the available capacity at the given
          location.
        type: object
      name:
        description: |-
          Resource name for the location, which may vary between implementations.
          For example: `"projects/example-project/locations/us-east1"`
        type: string
    type: object
  Operation:
    description: |-
      This resource represents a long-running operation that is the result of a
      network API call.
    properties:
      done:
        description: |-
          If the value is `false`, it means the operation is still in progress.
          If `true`, the operation is completed, and either `error` or `response` is
          available.
        type: boolean
      error:
        $ref: '#/definitions/Status'
        description: The error result of the operation in case of failure or cancellation.
      metadata:
        additionalProperties:
          description: Properties of the object. Contains field @type with type URL.
        description: |-
          Service-specific metadata associated with the operation.  It typically
          contains progress information and common metadata such as create time.
          Some services might not provide such metadata.  Any method that returns a
          long-running operation should document the metadata type, if any.
        type: object
      name:
        description: |-
          The server-assigned name, which is only unique within the same service that
          originally returns it. If you use the default HTTP mapping, the
          `name` should have the format of `operations/some/unique/name`.
        type: string
      response:
        additionalProperties:
          description: Properties of the object. Contains field @type with type URL.
        description: |-
          The normal response of the operation in case of success.  If the original
          method returns no data on success, such as `Delete`, the response is
          `google.protobuf.Empty`.  If the original method is standard
          `Get`/`Create`/`Update`, the response should be the resource.  For other
          methods, the response should have the type `XxxResponse`, where `Xxx`
          is the original method name.  For example, if the original method name
          is `TakeSnapshot()`, the inferred response type is
          `TakeSnapshotResponse`.
        type: object
    type: object
  OperationMetadataV1Beta2:
    description: Metadata describing an Operation
    properties:
      request:
        additionalProperties:
          description: Properties of the object. Contains field @type with type URL.
        description: The original request that started the operation.
        type: object
      target:
        description: |-
          Target of the operation - for example
          projects/project-1/locations/region-1/functions/function-1
        type: string
      type:
        description: Type of operation.
        enum:
          - OPERATION_UNSPECIFIED
          - CREATE_FUNCTION
          - UPDATE_FUNCTION
          - DELETE_FUNCTION
        type: string
      versionId:
        description: |-
          Version id of the function created or updated by an API call.
          This field is only pupulated for Create and Update operations.
        format: int64
        type: string
    type: object
  Retry:
    description: |-
      Describes the retry policy in case of function's execution failure.
      A function execution will be retried on any failure.
      A failed execution will be retried up to 7 days with an exponential backoff
      (capped at 10 seconds).
      Retried execution is charged as any other execution.
    properties: {}
    type: object
  SourceRepository:
    description: Describes the location of the function source in a remote repository.
    properties:
      branch:
        description: The name of the branch from which the function should be fetched.
        type: string
      deployedRevision:
        description: |-
          Output only. The id of the revision that was resolved at the moment of
          function creation or update. For example when a user deployed from a
          branch, it will be the revision id of the latest change on this branch at
          that time. If user deployed from revision then this value will be always
          equal to the revision specified by the user.
        type: string
      repositoryUrl:
        description: |-
          URL to the hosted repository where the function is defined. Only paths in
          https://source.developers.google.com domain are supported. The path should
          contain the name of the repository.
        type: string
      revision:
        description: |-
          The id of the revision that captures the state of the repository from
          which the function should be fetched.
        type: string
      sourcePath:
        description: |-
          The path within the repository where the function is defined. The path
          should point to the directory where Cloud Functions files are located. Use
          "/" if the function is defined directly in the root directory of a
          repository.
        type: string
      tag:
        description: |-
          The name of the tag that captures the state of the repository from
          which the function should be fetched.
        type: string
    type: object
  Status:
    description: |-
      The `Status` type defines a logical error model that is suitable for different
      programming environments, including REST APIs and RPC APIs. It is used by
      [gRPC](https://github.com/grpc). The error model is designed to be:

      - Simple to use and understand for most users
      - Flexible enough to meet unexpected needs

      # Overview

      The `Status` message contains three pieces of data: error code, error message,
      and error details. The error code should be an enum value of
      google.rpc.Code, but it may accept additional error codes if needed.  The
      error message should be a developer-facing English message that helps
      developers *understand* and *resolve* the error. If a localized user-facing
      error message is needed, put the localized message in the error details or
      localize it in the client. The optional error details may contain arbitrary
      information about the error. There is a predefined set of error detail types
      in the package `google.rpc` that can be used for common error conditions.

      # Language mapping

      The `Status` message is the logical representation of the error model, but it
      is not necessarily the actual wire format. When the `Status` message is
      exposed in different client libraries and different wire protocols, it can be
      mapped differently. For example, it will likely be mapped to some exceptions
      in Java, but more likely mapped to some error codes in C.

      # Other uses

      The error model and the `Status` message can be used in a variety of
      environments, either with or without APIs, to provide a
      consistent developer experience across different environments.

      Example uses of this error model include:

      - Partial errors. If a service needs to return partial errors to the client,
          it may embed the `Status` in the normal response to indicate the partial
          errors.

      - Workflow errors. A typical workflow has multiple steps. Each step may
          have a `Status` message for error reporting.

      - Batch operations. If a client uses batch request and batch response, the
          `Status` message should be used directly inside batch response, one for
          each error sub-response.

      - Asynchronous operations. If an API call embeds asynchronous operation
          results in its response, the status of those operations should be
          represented directly using the `Status` message.

      - Logging. If some API errors are stored in logs, the message `Status` could
          be used directly after any stripping needed for security/privacy reasons.
    properties:
      code:
        description: 'The status code, which should be an enum value of google.rpc.Code.'
        format: int32
        type: integer
      details:
        description: |-
          A list of messages that carry the error details.  There is a common set of
          message types for APIs to use.
        items:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          type: object
        type: array
      message:
        description: |-
          A developer-facing error message, which should be in English. Any
          user-facing error message should be localized and sent in the
          google.rpc.Status.details field, or localized by the client.
        type: string
    type: object

swagger: '2.0'
schemes:
  - https
host: cloudtrace.googleapis.com
basePath: /
info:
  contact:
    name: Google
    url: 'https://google.com'
  description: |
    Send and retrieve trace data from Stackdriver Trace. Data is generated and available by default for all App Engine applications. Data from other applications can be written to Stackdriver Trace for display, reporting, and analysis.
  title: Stackdriver Trace
  version: v1
  x-apiClientRegistration:
    url: 'https://console.developers.google.com'
  x-logo:
    url: 'https://api.apis.guru/v2/cache/logo/https_www.google.com_images_branding_googlelogo_2x_googlelogo_color_272x92dp.png'
  x-origin:
    - converter:
        url: 'https://github.com/lucybot/api-spec-converter'
        version: 2.6.0
      format: google
      url: 'https://cloudtrace.googleapis.com/$discovery/rest?version=v1'
      version: v1
  x-preferred: true
  x-providerName: googleapis.com
  x-serviceName: cloudtrace
externalDocs:
  url: 'https://cloud.google.com/trace'
securityDefinitions:
  Oauth2:
    authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
    description: Oauth 2.0 authentication
    flow: implicit
    scopes:
      'https://www.googleapis.com/auth/cloud-platform': View and manage your data across Google Cloud Platform services
      'https://www.googleapis.com/auth/trace.append': Write Trace data for a project or application
      'https://www.googleapis.com/auth/trace.readonly': Read Trace data for a project or application
    type: oauth2
parameters:
  $.xgafv:
    description: V1 error format.
    enum:
      - '1'
      - '2'
    in: query
    name: $.xgafv
    type: string
  access_token:
    description: OAuth access token.
    in: query
    name: access_token
    type: string
  alt:
    default: json
    description: Data format for response.
    enum:
      - json
      - media
      - proto
    in: query
    name: alt
    type: string
  bearer_token:
    description: OAuth bearer token.
    in: query
    name: bearer_token
    type: string
  callback:
    description: JSONP
    in: query
    name: callback
    type: string
  fields:
    description: Selector specifying which fields to include in a partial response.
    in: query
    name: fields
    type: string
  key:
    description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
    in: query
    name: key
    type: string
  oauth_token:
    description: OAuth 2.0 token for the current user.
    in: query
    name: oauth_token
    type: string
  pp:
    default: true
    description: Pretty-print response.
    in: query
    name: pp
    type: boolean
  prettyPrint:
    default: true
    description: Returns response with indentations and line breaks.
    in: query
    name: prettyPrint
    type: boolean
  quotaUser:
    description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
    in: query
    name: quotaUser
    type: string
  uploadType:
    description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
    in: query
    name: uploadType
    type: string
  upload_protocol:
    description: 'Upload protocol for media (e.g. "raw", "multipart").'
    in: query
    name: upload_protocol
    type: string
tags:
  - name: projects
paths:
  '/v1/projects/{projectId}/traces':
    get:
      description: Returns of a list of traces that match the specified filter conditions.
      operationId: cloudtrace.projects.traces.list
      parameters:
        - description: |-
            End of the time interval (inclusive) during which the trace data was
            collected from the application.
          in: query
          name: endTime
          type: string
        - description: |-
            An optional filter against labels for the request.

            By default, searches use prefix matching. To specify exact match, prepend
            a plus symbol (`+`) to the search term.
            Multiple terms are ANDed. Syntax:

            *   `root:NAME_PREFIX` or `NAME_PREFIX`: Return traces where any root
                span starts with `NAME_PREFIX`.
            *   `+root:NAME` or `+NAME`: Return traces where any root span's name is
                exactly `NAME`.
            *   `span:NAME_PREFIX`: Return traces where any span starts with
                `NAME_PREFIX`.
            *   `+span:NAME`: Return traces where any span's name is exactly
                `NAME`.
            *   `latency:DURATION`: Return traces whose overall latency is
                greater or equal to than `DURATION`. Accepted units are nanoseconds
                (`ns`), milliseconds (`ms`), and seconds (`s`). Default is `ms`. For
                example, `latency:24ms` returns traces whose overall latency
                is greater than or equal to 24 milliseconds.
            *   `label:LABEL_KEY`: Return all traces containing the specified
                label key (exact match, case-sensitive) regardless of the key:value
                pair's value (including empty values).
            *   `LABEL_KEY:VALUE_PREFIX`: Return all traces containing the specified
                label key (exact match, case-sensitive) whose value starts with
                `VALUE_PREFIX`. Both a key and a value must be specified.
            *   `+LABEL_KEY:VALUE`: Return all traces containing a key:value pair
                exactly matching the specified text. Both a key and a value must be
                specified.
            *   `method:VALUE`: Equivalent to `/http/method:VALUE`.
            *   `url:VALUE`: Equivalent to `/http/url:VALUE`.
          in: query
          name: filter
          type: string
        - description: |-
            Field used to sort the returned traces. Optional.
            Can be one of the following:

            *   `trace_id`
            *   `name` (`name` field of root span in the trace)
            *   `duration` (difference between `end_time` and `start_time` fields of
                 the root span)
            *   `start` (`start_time` field of the root span)

            Descending order can be specified by appending `desc` to the sort field
            (for example, `name desc`).

            Only one sort field is permitted.
          in: query
          name: orderBy
          type: string
        - description: |-
            Maximum number of traces to return. If not specified or <= 0, the
            implementation selects a reasonable value.  The implementation may
            return fewer traces than the requested page size. Optional.
          in: query
          name: pageSize
          type: integer
        - description: |-
            Token identifying the page of results to return. If provided, use the
            value of the `next_page_token` field from a previous request. Optional.
          in: query
          name: pageToken
          type: string
        - description: ID of the Cloud project where the trace data is stored.
          in: path
          name: projectId
          required: true
          type: string
        - description: |-
            Start of the time interval (inclusive) during which the trace data was
            collected from the application.
          in: query
          name: startTime
          type: string
        - description: |-
            Type of data returned for traces in the list. Optional. Default is
            `MINIMAL`.
          enum:
            - VIEW_TYPE_UNSPECIFIED
            - MINIMAL
            - ROOTSPAN
            - COMPLETE
          in: query
          name: view
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/ListTracesResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/trace.readonly'
      tags:
        - projects
    parameters:
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/upload_protocol'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/access_token'
    patch:
      description: |-
        Sends new traces to Stackdriver Trace or updates existing traces. If the ID
        of a trace that you send matches that of an existing trace, any fields
        in the existing trace and its spans are overwritten by the provided values,
        and any new fields provided are merged with the existing trace data. If the
        ID does not match, a new trace is created.
      operationId: cloudtrace.projects.patchTraces
      parameters:
        - description: ID of the Cloud project where the trace data is stored.
          in: path
          name: projectId
          required: true
          type: string
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Traces'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Empty'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/trace.append'
      tags:
        - projects
  '/v1/projects/{projectId}/traces/{traceId}':
    get:
      description: Gets a single trace by its ID.
      operationId: cloudtrace.projects.traces.get
      parameters:
        - description: ID of the Cloud project where the trace data is stored.
          in: path
          name: projectId
          required: true
          type: string
        - description: ID of the trace to return.
          in: path
          name: traceId
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Trace'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/trace.readonly'
      tags:
        - projects
    parameters:
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/upload_protocol'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/access_token'
definitions:
  Empty:
    description: |-
      A generic empty message that you can re-use to avoid defining duplicated
      empty messages in your APIs. A typical example is to use it as the request
      or the response type of an API method. For instance:

          service Foo {
            rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
          }

      The JSON representation for `Empty` is empty JSON object `{}`.
    properties: {}
    type: object
  ListTracesResponse:
    description: The response message for the `ListTraces` method.
    properties:
      nextPageToken:
        description: |-
          If defined, indicates that there are more traces that match the request
          and that this value should be passed to the next request to continue
          retrieving additional traces.
        type: string
      traces:
        description: List of trace records returned.
        items:
          $ref: '#/definitions/Trace'
        type: array
    type: object
  Trace:
    description: |-
      A trace describes how long it takes for an application to perform an
      operation. It consists of a set of spans, each of which represent a single
      timed event within the operation.
    properties:
      projectId:
        description: Project ID of the Cloud project where the trace data is stored.
        type: string
      spans:
        description: Collection of spans in the trace.
        items:
          $ref: '#/definitions/TraceSpan'
        type: array
      traceId:
        description: |-
          Globally unique identifier for the trace. This identifier is a 128-bit
          numeric value formatted as a 32-byte hex string.
        type: string
    type: object
  TraceSpan:
    description: |-
      A span represents a single timed event within a trace. Spans can be nested
      and form a trace tree. Often, a trace contains a root span that describes the
      end-to-end latency of an operation and, optionally, one or more subspans for
      its suboperations. Spans do not need to be contiguous. There may be gaps
      between spans in a trace.
    properties:
      endTime:
        description: End time of the span in nanoseconds from the UNIX epoch.
        format: google-datetime
        type: string
      kind:
        description: |-
          Distinguishes between spans generated in a particular context. For example,
          two spans with the same name may be distinguished using `RPC_CLIENT`
          and `RPC_SERVER` to identify queueing latency associated with the span.
        enum:
          - SPAN_KIND_UNSPECIFIED
          - RPC_SERVER
          - RPC_CLIENT
        type: string
      labels:
        additionalProperties:
          type: string
        description: |-
          Collection of labels associated with the span. Label keys must be less than
          128 bytes. Label values must be less than 16 kilobytes (10MB for
          `/stacktrace` values).

          Some predefined label keys exist, or you may create your own. When creating
          your own, we recommend the following formats:

          * `/category/product/key` for agents of well-known products (e.g.
            `/db/mongodb/read_size`).
          * `short_host/path/key` for domain-specific keys (e.g.
            `foo.com/myproduct/bar`)

          Predefined labels include:

          *   `/agent`
          *   `/component`
          *   `/error/message`
          *   `/error/name`
          *   `/http/client_city`
          *   `/http/client_country`
          *   `/http/client_protocol`
          *   `/http/client_region`
          *   `/http/host`
          *   `/http/method`
          *   `/http/redirected_url`
          *   `/http/request/size`
          *   `/http/response/size`
          *   `/http/status_code`
          *   `/http/url`
          *   `/http/user_agent`
          *   `/pid`
          *   `/stacktrace`
          *   `/tid`
        type: object
      name:
        description: |-
          Name of the span. Must be less than 128 bytes. The span name is sanitized
          and displayed in the Stackdriver Trace tool in the
          {% dynamic print site_values.console_name %}.
          The name may be a method name or some other per-call site name.
          For the same executable and the same call point, a best practice is
          to use a consistent name, which makes it easier to correlate
          cross-trace spans.
        type: string
      parentSpanId:
        description: 'ID of the parent span, if any. Optional.'
        format: uint64
        type: string
      spanId:
        description: |-
          Identifier for the span. Must be a 64-bit integer other than 0 and
          unique within a trace.
        format: uint64
        type: string
      startTime:
        description: Start time of the span in nanoseconds from the UNIX epoch.
        format: google-datetime
        type: string
    type: object
  Traces:
    description: List of new or updated traces.
    properties:
      traces:
        description: List of traces.
        items:
          $ref: '#/definitions/Trace'
        type: array
    type: object

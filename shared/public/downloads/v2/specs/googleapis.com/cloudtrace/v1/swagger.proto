syntax = "proto3";

import "google/api/annotations.proto";

package stackdrivertrace;

message GetV1ProjectsProjectIdTracesRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    // End of the time interval (inclusive) during which the trace data was
    // collected from the application.
    string endTime = 6;
    string fields = 7;
    // An optional filter against labels for the request.
    // 
    // By default, searches use prefix matching. To specify exact match, prepend
    // a plus symbol (`+`) to the search term.
    // Multiple terms are ANDed. Syntax:
    // 
    // *   `root:NAME_PREFIX` or `NAME_PREFIX`: Return traces where any root
    //     span starts with `NAME_PREFIX`.
    // *   `+root:NAME` or `+NAME`: Return traces where any root span's name is
    //     exactly `NAME`.
    // *   `span:NAME_PREFIX`: Return traces where any span starts with
    //     `NAME_PREFIX`.
    // *   `+span:NAME`: Return traces where any span's name is exactly
    //     `NAME`.
    // *   `latency:DURATION`: Return traces whose overall latency is
    //     greater or equal to than `DURATION`. Accepted units are nanoseconds
    //     (`ns`), milliseconds (`ms`), and seconds (`s`). Default is `ms`. For
    //     example, `latency:24ms` returns traces whose overall latency
    //     is greater than or equal to 24 milliseconds.
    // *   `label:LABEL_KEY`: Return all traces containing the specified
    //     label key (exact match, case-sensitive) regardless of the key:value
    //     pair's value (including empty values).
    // *   `LABEL_KEY:VALUE_PREFIX`: Return all traces containing the specified
    //     label key (exact match, case-sensitive) whose value starts with
    //     `VALUE_PREFIX`. Both a key and a value must be specified.
    // *   `+LABEL_KEY:VALUE`: Return all traces containing a key:value pair
    //     exactly matching the specified text. Both a key and a value must be
    //     specified.
    // *   `method:VALUE`: Equivalent to `/http/method:VALUE`.
    // *   `url:VALUE`: Equivalent to `/http/url:VALUE`.
    string filter = 8;
    string key = 9;
    string oauth_token = 10;
    // Field used to sort the returned traces. Optional.
    // Can be one of the following:
    // 
    // *   `trace_id`
    // *   `name` (`name` field of root span in the trace)
    // *   `duration` (difference between `end_time` and `start_time` fields of
    //      the root span)
    // *   `start` (`start_time` field of the root span)
    // 
    // Descending order can be specified by appending `desc` to the sort field
    // (for example, `name desc`).
    // 
    // Only one sort field is permitted.
    string orderBy = 11;
    // Maximum number of traces to return. If not specified or <= 0, the
    // implementation selects a reasonable value.  The implementation may
    // return fewer traces than the requested page size. Optional.
    int32 pageSize = 12;
    // Token identifying the page of results to return. If provided, use the
    // value of the `next_page_token` field from a previous request. Optional.
    string pageToken = 13;
    boolean pp = 14;
    boolean prettyPrint = 15;
    // ID of the Cloud project where the trace data is stored.
    string projectId = 16;
    string quotaUser = 17;
    // Start of the time interval (inclusive) during which the trace data was
    // collected from the application.
    string startTime = 18;
    string uploadType = 19;
    string upload_protocol = 20;
    // Type of data returned for traces in the list. Optional. Default is
    // `MINIMAL`.
    enum GetV1ProjectsProjectIdTracesRequest_View {
        GETV1PROJECTSPROJECTIDTRACESREQUEST_VIEW_VIEW_TYPE_UNSPECIFIED = 0;
        GETV1PROJECTSPROJECTIDTRACESREQUEST_VIEW_MINIMAL = 1;
        GETV1PROJECTSPROJECTIDTRACESREQUEST_VIEW_ROOTSPAN = 2;
        GETV1PROJECTSPROJECTIDTRACESREQUEST_VIEW_COMPLETE = 3;
    }
    GetV1ProjectsProjectIdTracesRequest_View view = 21;
}

message GetV1ProjectsProjectIdTracesTraceIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    boolean pp = 9;
    boolean prettyPrint = 10;
    // ID of the Cloud project where the trace data is stored.
    string projectId = 11;
    string quotaUser = 12;
    // ID of the trace to return.
    string traceId = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

enum $.Xgafv {
    $XGAFV_1 = 0;
    $XGAFV_2 = 1;
}

message Empty {
}

message ListTracesResponse {
    // If defined, indicates that there are more traces that match the request
    // and that this value should be passed to the next request to continue
    // retrieving additional traces.
    string nextPageToken = 1;
    // List of trace records returned.
    repeated Trace traces = 2;
}

message Trace {
    // Project ID of the Cloud project where the trace data is stored.
    string projectId = 1;
    // Collection of spans in the trace.
    repeated TraceSpan spans = 2;
    // Globally unique identifier for the trace. This identifier is a 128-bit
    // numeric value formatted as a 32-byte hex string.
    string traceId = 3;
}

message TraceSpan {
    // End time of the span in nanoseconds from the UNIX epoch.
    string endTime = 1;
    // Distinguishes between spans generated in a particular context. For example,
    // two spans with the same name may be distinguished using `RPC_CLIENT`
    // and `RPC_SERVER` to identify queueing latency associated with the span.
    enum TraceSpan_Kind {
        TRACESPAN_KIND_SPAN_KIND_UNSPECIFIED = 0;
        TRACESPAN_KIND_RPC_SERVER = 1;
        TRACESPAN_KIND_RPC_CLIENT = 2;
    }
    TraceSpan_Kind kind = 2;
    // Collection of labels associated with the span. Label keys must be less than
    // 128 bytes. Label values must be less than 16 kilobytes (10MB for
    // `/stacktrace` values).
    // 
    // Some predefined label keys exist, or you may create your own. When creating
    // your own, we recommend the following formats:
    // 
    // * `/category/product/key` for agents of well-known products (e.g.
    //   `/db/mongodb/read_size`).
    // * `short_host/path/key` for domain-specific keys (e.g.
    //   `foo.com/myproduct/bar`)
    // 
    // Predefined labels include:
    // 
    // *   `/agent`
    // *   `/component`
    // *   `/error/message`
    // *   `/error/name`
    // *   `/http/client_city`
    // *   `/http/client_country`
    // *   `/http/client_protocol`
    // *   `/http/client_region`
    // *   `/http/host`
    // *   `/http/method`
    // *   `/http/redirected_url`
    // *   `/http/request/size`
    // *   `/http/response/size`
    // *   `/http/status_code`
    // *   `/http/url`
    // *   `/http/user_agent`
    // *   `/pid`
    // *   `/stacktrace`
    // *   `/tid`
    map<string, string> labels = 3;
    // Name of the span. Must be less than 128 bytes. The span name is sanitized
    // and displayed in the Stackdriver Trace tool in the
    // {% dynamic print site_values.console_name %}.
    // The name may be a method name or some other per-call site name.
    // For the same executable and the same call point, a best practice is
    // to use a consistent name, which makes it easier to correlate
    // cross-trace spans.
    string name = 4;
    // ID of the parent span, if any. Optional.
    string parentSpanId = 5;
    // Identifier for the span. Must be a 64-bit integer other than 0 and
    // unique within a trace.
    string spanId = 6;
    // Start time of the span in nanoseconds from the UNIX epoch.
    string startTime = 7;
}

message Traces {
    // List of traces.
    repeated Trace traces = 1;
}

enum Alt {
    JSON = 0;
    MEDIA = 1;
    PROTO = 2;
}

service StackdriverTraceService {
    // Returns of a list of traces that match the specified filter conditions.
    rpc GetV1ProjectsProjectIdTraces(GetV1ProjectsProjectIdTracesRequest) returns (ListTracesResponse) {
      option (google.api.http) = {
        get: "//v1/projects/{projectId}/traces"
      };
    }
    // Gets a single trace by its ID.
    rpc GetV1ProjectsProjectIdTracesTraceId(GetV1ProjectsProjectIdTracesTraceIdRequest) returns (Trace) {
      option (google.api.http) = {
        get: "//v1/projects/{projectId}/traces/{traceId}"
      };
    }
}

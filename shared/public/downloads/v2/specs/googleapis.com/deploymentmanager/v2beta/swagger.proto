syntax = "proto3";

import "google/api/annotations.proto";

package googleclouddeploymentmanagerapiv2betamethods;

message GetProjectGlobalCompositeTypesRequest {
    alt alt = 1;
    string fields = 2;
    // Sets a filter {expression} for filtering listed resources. Your {expression} must be in the format: field_name comparison_string literal_string.
    // 
    // The field_name is the name of the field you want to compare. Only atomic field types are supported (string, number, boolean). The comparison_string must be either eq (equals) or ne (not equals). The literal_string is the string value to filter to. The literal value must be valid for the type of field you are filtering by (string, number, boolean). For string fields, the literal value is interpreted as a regular expression using RE2 syntax. The literal value must match the entire field.
    // 
    // For example, to filter for instances that do not have a name of example-instance, you would use name ne example-instance.
    // 
    // You can filter on nested fields. For example, you could filter on instances that have set the scheduling.automaticRestart field to true. Use filtering on nested fields to take advantage of labels to organize and search for results based on label values.
    // 
    // To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple expressions are treated as AND expressions, meaning that resources must match all expressions to pass the filters.
    string filter = 3;
    string key = 4;
    // The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
    int32 maxResults = 5;
    string oauth_token = 6;
    // Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
    // 
    // You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
    // 
    // Currently, only sorting by name or creationTimestamp desc is supported.
    string orderBy = 7;
    // Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
    string pageToken = 8;
    boolean prettyPrint = 9;
    // The project ID for this request.
    string project = 10;
    string quotaUser = 11;
    string userIp = 12;
}

message PostProjectGlobalCompositeTypesRequest {
    alt alt = 1;
    CompositeType body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // The project ID for this request.
    string project = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetProjectGlobalCompositeTypesCompositeTypeRequest {
    alt alt = 1;
    // The name of the composite type for this request.
    string compositeType = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // The project ID for this request.
    string project = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PutProjectGlobalCompositeTypesCompositeTypeRequest {
    alt alt = 1;
    CompositeType body = 2;
    // The name of the composite type for this request.
    string compositeType = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // The project ID for this request.
    string project = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message DeleteProjectGlobalCompositeTypesCompositeTypeRequest {
    alt alt = 1;
    // The name of the type for this request.
    string compositeType = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // The project ID for this request.
    string project = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetProjectGlobalDeploymentsRequest {
    alt alt = 1;
    string fields = 2;
    // Sets a filter {expression} for filtering listed resources. Your {expression} must be in the format: field_name comparison_string literal_string.
    // 
    // The field_name is the name of the field you want to compare. Only atomic field types are supported (string, number, boolean). The comparison_string must be either eq (equals) or ne (not equals). The literal_string is the string value to filter to. The literal value must be valid for the type of field you are filtering by (string, number, boolean). For string fields, the literal value is interpreted as a regular expression using RE2 syntax. The literal value must match the entire field.
    // 
    // For example, to filter for instances that do not have a name of example-instance, you would use name ne example-instance.
    // 
    // You can filter on nested fields. For example, you could filter on instances that have set the scheduling.automaticRestart field to true. Use filtering on nested fields to take advantage of labels to organize and search for results based on label values.
    // 
    // To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple expressions are treated as AND expressions, meaning that resources must match all expressions to pass the filters.
    string filter = 3;
    string key = 4;
    // The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
    int32 maxResults = 5;
    string oauth_token = 6;
    // Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
    // 
    // You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
    // 
    // Currently, only sorting by name or creationTimestamp desc is supported.
    string orderBy = 7;
    // Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
    string pageToken = 8;
    boolean prettyPrint = 9;
    // The project ID for this request.
    string project = 10;
    string quotaUser = 11;
    string userIp = 12;
}

message PostProjectGlobalDeploymentsRequest {
    alt alt = 1;
    Deployment body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // If set to true, creates a deployment and creates "shell" resources but does not actually instantiate these resources. This allows you to preview what your deployment looks like. After previewing a deployment, you can deploy your resources by making a request with the update() method or you can use the cancelPreview() method to cancel the preview altogether. Note that the deployment will still exist after you cancel the preview and you must separately delete this deployment if you want to remove it.
    bool preview = 7;
    // The project ID for this request.
    string project = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetProjectGlobalDeploymentsDeploymentRequest {
    alt alt = 1;
    // The name of the deployment for this request.
    string deployment = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // The project ID for this request.
    string project = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PutProjectGlobalDeploymentsDeploymentRequest {
    alt alt = 1;
    Deployment body = 2;
    // Sets the policy to use for creating new resources.
    enum PutProjectGlobalDeploymentsDeploymentRequest_CreatePolicy {
        PUTPROJECTGLOBALDEPLOYMENTSDEPLOYMENTREQUEST_CREATEPOLICY_ACQUIRE = 0;
        PUTPROJECTGLOBALDEPLOYMENTSDEPLOYMENTREQUEST_CREATEPOLICY_CREATE_OR_ACQUIRE = 1;
    }
    PutProjectGlobalDeploymentsDeploymentRequest_CreatePolicy createPolicy = 3;
    // Sets the policy to use for deleting resources.
    enum PutProjectGlobalDeploymentsDeploymentRequest_DeletePolicy {
        PUTPROJECTGLOBALDEPLOYMENTSDEPLOYMENTREQUEST_DELETEPOLICY_ABANDON = 0;
        PUTPROJECTGLOBALDEPLOYMENTSDEPLOYMENTREQUEST_DELETEPOLICY_DELETE = 1;
    }
    PutProjectGlobalDeploymentsDeploymentRequest_DeletePolicy deletePolicy = 4;
    // The name of the deployment for this request.
    string deployment = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    boolean prettyPrint = 9;
    // If set to true, updates the deployment and creates and updates the "shell" resources but does not actually alter or instantiate these resources. This allows you to preview what your deployment will look like. You can use this intent to preview how an update would affect your deployment. You must provide a target.config with a configuration if this is set to true. After previewing a deployment, you can deploy your resources by making a request with the update() or you can cancelPreview() to remove the preview altogether. Note that the deployment will still exist after you cancel the preview and you must separately delete this deployment if you want to remove it.
    bool preview = 10;
    // The project ID for this request.
    string project = 11;
    string quotaUser = 12;
    string userIp = 13;
}

message DeleteProjectGlobalDeploymentsDeploymentRequest {
    alt alt = 1;
    // Sets the policy to use for deleting resources.
    enum DeleteProjectGlobalDeploymentsDeploymentRequest_DeletePolicy {
        DELETEPROJECTGLOBALDEPLOYMENTSDEPLOYMENTREQUEST_DELETEPOLICY_ABANDON = 0;
        DELETEPROJECTGLOBALDEPLOYMENTSDEPLOYMENTREQUEST_DELETEPOLICY_DELETE = 1;
    }
    DeleteProjectGlobalDeploymentsDeploymentRequest_DeletePolicy deletePolicy = 2;
    // The name of the deployment for this request.
    string deployment = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // The project ID for this request.
    string project = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostProjectGlobalDeploymentsDeploymentCancelPreviewRequest {
    alt alt = 1;
    DeploymentsCancelPreviewRequest body = 2;
    // The name of the deployment for this request.
    string deployment = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // The project ID for this request.
    string project = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetProjectGlobalDeploymentsDeploymentManifestsRequest {
    alt alt = 1;
    // The name of the deployment for this request.
    string deployment = 2;
    string fields = 3;
    // Sets a filter {expression} for filtering listed resources. Your {expression} must be in the format: field_name comparison_string literal_string.
    // 
    // The field_name is the name of the field you want to compare. Only atomic field types are supported (string, number, boolean). The comparison_string must be either eq (equals) or ne (not equals). The literal_string is the string value to filter to. The literal value must be valid for the type of field you are filtering by (string, number, boolean). For string fields, the literal value is interpreted as a regular expression using RE2 syntax. The literal value must match the entire field.
    // 
    // For example, to filter for instances that do not have a name of example-instance, you would use name ne example-instance.
    // 
    // You can filter on nested fields. For example, you could filter on instances that have set the scheduling.automaticRestart field to true. Use filtering on nested fields to take advantage of labels to organize and search for results based on label values.
    // 
    // To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple expressions are treated as AND expressions, meaning that resources must match all expressions to pass the filters.
    string filter = 4;
    string key = 5;
    // The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
    int32 maxResults = 6;
    string oauth_token = 7;
    // Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
    // 
    // You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
    // 
    // Currently, only sorting by name or creationTimestamp desc is supported.
    string orderBy = 8;
    // Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
    string pageToken = 9;
    boolean prettyPrint = 10;
    // The project ID for this request.
    string project = 11;
    string quotaUser = 12;
    string userIp = 13;
}

message GetProjectGlobalDeploymentsDeploymentManifestsManifestRequest {
    alt alt = 1;
    // The name of the deployment for this request.
    string deployment = 2;
    string fields = 3;
    string key = 4;
    // The name of the manifest for this request.
    string manifest = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // The project ID for this request.
    string project = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetProjectGlobalDeploymentsDeploymentResourcesRequest {
    alt alt = 1;
    // The name of the deployment for this request.
    string deployment = 2;
    string fields = 3;
    // Sets a filter {expression} for filtering listed resources. Your {expression} must be in the format: field_name comparison_string literal_string.
    // 
    // The field_name is the name of the field you want to compare. Only atomic field types are supported (string, number, boolean). The comparison_string must be either eq (equals) or ne (not equals). The literal_string is the string value to filter to. The literal value must be valid for the type of field you are filtering by (string, number, boolean). For string fields, the literal value is interpreted as a regular expression using RE2 syntax. The literal value must match the entire field.
    // 
    // For example, to filter for instances that do not have a name of example-instance, you would use name ne example-instance.
    // 
    // You can filter on nested fields. For example, you could filter on instances that have set the scheduling.automaticRestart field to true. Use filtering on nested fields to take advantage of labels to organize and search for results based on label values.
    // 
    // To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple expressions are treated as AND expressions, meaning that resources must match all expressions to pass the filters.
    string filter = 4;
    string key = 5;
    // The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
    int32 maxResults = 6;
    string oauth_token = 7;
    // Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
    // 
    // You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
    // 
    // Currently, only sorting by name or creationTimestamp desc is supported.
    string orderBy = 8;
    // Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
    string pageToken = 9;
    boolean prettyPrint = 10;
    // The project ID for this request.
    string project = 11;
    string quotaUser = 12;
    string userIp = 13;
}

message GetProjectGlobalDeploymentsDeploymentResourcesResourceRequest {
    alt alt = 1;
    // The name of the deployment for this request.
    string deployment = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // The project ID for this request.
    string project = 7;
    string quotaUser = 8;
    // The name of the resource for this request.
    string resource = 9;
    string userIp = 10;
}

message PostProjectGlobalDeploymentsDeploymentStopRequest {
    alt alt = 1;
    DeploymentsStopRequest body = 2;
    // The name of the deployment for this request.
    string deployment = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // The project ID for this request.
    string project = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetProjectGlobalDeploymentsResourceGetIamPolicyRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    // Project ID for this request.
    string project = 6;
    string quotaUser = 7;
    // Name of the resource for this request.
    string resource = 8;
    string userIp = 9;
}

message PostProjectGlobalDeploymentsResourceSetIamPolicyRequest {
    alt alt = 1;
    Policy body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // Project ID for this request.
    string project = 7;
    string quotaUser = 8;
    // Name of the resource for this request.
    string resource = 9;
    string userIp = 10;
}

message PostProjectGlobalDeploymentsResourceTestIamPermissionsRequest {
    alt alt = 1;
    TestPermissionsRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // Project ID for this request.
    string project = 7;
    string quotaUser = 8;
    // Name of the resource for this request.
    string resource = 9;
    string userIp = 10;
}

message GetProjectGlobalOperationsRequest {
    alt alt = 1;
    string fields = 2;
    // Sets a filter {expression} for filtering listed resources. Your {expression} must be in the format: field_name comparison_string literal_string.
    // 
    // The field_name is the name of the field you want to compare. Only atomic field types are supported (string, number, boolean). The comparison_string must be either eq (equals) or ne (not equals). The literal_string is the string value to filter to. The literal value must be valid for the type of field you are filtering by (string, number, boolean). For string fields, the literal value is interpreted as a regular expression using RE2 syntax. The literal value must match the entire field.
    // 
    // For example, to filter for instances that do not have a name of example-instance, you would use name ne example-instance.
    // 
    // You can filter on nested fields. For example, you could filter on instances that have set the scheduling.automaticRestart field to true. Use filtering on nested fields to take advantage of labels to organize and search for results based on label values.
    // 
    // To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple expressions are treated as AND expressions, meaning that resources must match all expressions to pass the filters.
    string filter = 3;
    string key = 4;
    // The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
    int32 maxResults = 5;
    string oauth_token = 6;
    // Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
    // 
    // You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
    // 
    // Currently, only sorting by name or creationTimestamp desc is supported.
    string orderBy = 7;
    // Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
    string pageToken = 8;
    boolean prettyPrint = 9;
    // The project ID for this request.
    string project = 10;
    string quotaUser = 11;
    string userIp = 12;
}

message GetProjectGlobalOperationsOperationRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    // The name of the operation for this request.
    string operation = 5;
    boolean prettyPrint = 6;
    // The project ID for this request.
    string project = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetProjectGlobalTypeProvidersRequest {
    alt alt = 1;
    string fields = 2;
    // Sets a filter {expression} for filtering listed resources. Your {expression} must be in the format: field_name comparison_string literal_string.
    // 
    // The field_name is the name of the field you want to compare. Only atomic field types are supported (string, number, boolean). The comparison_string must be either eq (equals) or ne (not equals). The literal_string is the string value to filter to. The literal value must be valid for the type of field you are filtering by (string, number, boolean). For string fields, the literal value is interpreted as a regular expression using RE2 syntax. The literal value must match the entire field.
    // 
    // For example, to filter for instances that do not have a name of example-instance, you would use name ne example-instance.
    // 
    // You can filter on nested fields. For example, you could filter on instances that have set the scheduling.automaticRestart field to true. Use filtering on nested fields to take advantage of labels to organize and search for results based on label values.
    // 
    // To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple expressions are treated as AND expressions, meaning that resources must match all expressions to pass the filters.
    string filter = 3;
    string key = 4;
    // The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
    int32 maxResults = 5;
    string oauth_token = 6;
    // Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
    // 
    // You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
    // 
    // Currently, only sorting by name or creationTimestamp desc is supported.
    string orderBy = 7;
    // Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
    string pageToken = 8;
    boolean prettyPrint = 9;
    // The project ID for this request.
    string project = 10;
    string quotaUser = 11;
    string userIp = 12;
}

message PostProjectGlobalTypeProvidersRequest {
    alt alt = 1;
    TypeProvider body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // The project ID for this request.
    string project = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetProjectGlobalTypeProvidersTypeProviderRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    // The project ID for this request.
    string project = 6;
    string quotaUser = 7;
    // The name of the type provider for this request.
    string typeProvider = 8;
    string userIp = 9;
}

message PutProjectGlobalTypeProvidersTypeProviderRequest {
    alt alt = 1;
    TypeProvider body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // The project ID for this request.
    string project = 7;
    string quotaUser = 8;
    // The name of the type provider for this request.
    string typeProvider = 9;
    string userIp = 10;
}

message DeleteProjectGlobalTypeProvidersTypeProviderRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    // The project ID for this request.
    string project = 6;
    string quotaUser = 7;
    // The name of the type provider for this request.
    string typeProvider = 8;
    string userIp = 9;
}

message GetProjectGlobalTypeProvidersTypeProviderTypesRequest {
    alt alt = 1;
    string fields = 2;
    // Sets a filter {expression} for filtering listed resources. Your {expression} must be in the format: field_name comparison_string literal_string.
    // 
    // The field_name is the name of the field you want to compare. Only atomic field types are supported (string, number, boolean). The comparison_string must be either eq (equals) or ne (not equals). The literal_string is the string value to filter to. The literal value must be valid for the type of field you are filtering by (string, number, boolean). For string fields, the literal value is interpreted as a regular expression using RE2 syntax. The literal value must match the entire field.
    // 
    // For example, to filter for instances that do not have a name of example-instance, you would use name ne example-instance.
    // 
    // You can filter on nested fields. For example, you could filter on instances that have set the scheduling.automaticRestart field to true. Use filtering on nested fields to take advantage of labels to organize and search for results based on label values.
    // 
    // To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple expressions are treated as AND expressions, meaning that resources must match all expressions to pass the filters.
    string filter = 3;
    string key = 4;
    // The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
    int32 maxResults = 5;
    string oauth_token = 6;
    // Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
    // 
    // You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
    // 
    // Currently, only sorting by name or creationTimestamp desc is supported.
    string orderBy = 7;
    // Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
    string pageToken = 8;
    boolean prettyPrint = 9;
    // The project ID for this request.
    string project = 10;
    string quotaUser = 11;
    // The name of the type provider for this request.
    string typeProvider = 12;
    string userIp = 13;
}

message GetProjectGlobalTypeProvidersTypeProviderTypesTypeRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    // The project ID for this request.
    string project = 6;
    string quotaUser = 7;
    // The name of the type provider for this request.
    string type = 8;
    // The name of the type provider for this request.
    string typeProvider = 9;
    string userIp = 10;
}

message GetProjectGlobalTypesRequest {
    alt alt = 1;
    string fields = 2;
    // Sets a filter {expression} for filtering listed resources. Your {expression} must be in the format: field_name comparison_string literal_string.
    // 
    // The field_name is the name of the field you want to compare. Only atomic field types are supported (string, number, boolean). The comparison_string must be either eq (equals) or ne (not equals). The literal_string is the string value to filter to. The literal value must be valid for the type of field you are filtering by (string, number, boolean). For string fields, the literal value is interpreted as a regular expression using RE2 syntax. The literal value must match the entire field.
    // 
    // For example, to filter for instances that do not have a name of example-instance, you would use name ne example-instance.
    // 
    // You can filter on nested fields. For example, you could filter on instances that have set the scheduling.automaticRestart field to true. Use filtering on nested fields to take advantage of labels to organize and search for results based on label values.
    // 
    // To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple expressions are treated as AND expressions, meaning that resources must match all expressions to pass the filters.
    string filter = 3;
    string key = 4;
    // The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
    int32 maxResults = 5;
    string oauth_token = 6;
    // Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
    // 
    // You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
    // 
    // Currently, only sorting by name or creationTimestamp desc is supported.
    string orderBy = 7;
    // Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
    string pageToken = 8;
    boolean prettyPrint = 9;
    // The project ID for this request.
    string project = 10;
    string quotaUser = 11;
    string userIp = 12;
}

message AuditConfig {
    // The configuration for logging of each type of permission.
    repeated AuditLogConfig auditLogConfigs = 1;
    repeated string exemptedMembers = 2;
    // Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
    string service = 3;
}

message AuditLogConfig {
    // Specifies the identities that do not cause logging for this type of permission. Follows the same format of [Binding.members][].
    repeated string exemptedMembers = 1;
    // The log type that this config enables.
    string logType = 2;
}

message AuthorizationLoggingOptions {
    // The type of the permission that was checked.
    string permissionType = 1;
}

message BaseType {
    // Allows resource handling overrides for specific collections
    repeated CollectionOverride collectionOverrides = 1;
    // Credential used when interacting with this type.
    Credential credential = 2;
    // Descriptor Url for the this type.
    string descriptorUrl = 3;
    // Options to apply when handling any resources in this service.
    Options options = 4;
}

message BasicAuth {
    string password = 1;
    string user = 2;
}

message Binding {
    // The condition that is associated with this binding. NOTE: an unsatisfied condition will not allow user access via current binding. Different bindings, including their conditions, are examined independently. This field is GOOGLE_INTERNAL.
    Expr condition = 1;
    // Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values:
    // 
    // * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account.
    // 
    // * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account.
    // 
    // * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@gmail.com` or `joe@example.com`.
    // 
    // 
    // 
    // * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`.
    // 
    // * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`.
    // 
    // 
    // 
    // * `domain:{domain}`: A Google Apps domain name that represents all the users of that domain. For example, `google.com` or `example.com`.
    repeated string members = 2;
    // Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
    string role = 3;
}

message CollectionOverride {
    // The collection that identifies this resource within its service.
    string collection = 1;
    // The options to apply to this resource-level override
    Options options = 2;
}

message CompositeType {
    // An optional textual description of the resource; provided by the client when the resource is created.
    string description = 1;
    // Output only. Unique identifier for the resource; defined by the server.
    string id = 2;
    // Output only. Timestamp when the composite type was created, in RFC3339 text format.
    string insertTime = 3;
    // Map of labels; provided by the client when the resource is created or updated. Specifically: Label keys must be between 1 and 63 characters long and must conform to the following regular expression: [a-z]([-a-z0-9]*[a-z0-9])? Label values must be between 0 and 63 characters long and must conform to the regular expression ([a-z]([-a-z0-9]*[a-z0-9])?)?
    repeated CompositeTypeLabelEntry labels = 4;
    // Name of the composite type.
    string name = 5;
    // Output only. The Operation that most recently ran, or is currently running, on this composite type.
    Operation operation = 6;
    // Output only. Self link for the type provider.
    string selfLink = 7;
    string status = 8;
    // Files for the template type.
    TemplateContents templateContents = 9;
}

message CompositeTypeLabelEntry {
    string key = 1;
    string value = 2;
}

message CompositeTypesListResponse {
    // Output only. A list of resource composite types supported by Deployment Manager.
    repeated CompositeType compositeTypes = 1;
    // A token used to continue a truncated list request.
    string nextPageToken = 2;
}

message Condition {
    // Trusted attributes supplied by the IAM system.
    string iam = 1;
    // An operator to apply the subject with.
    string op = 2;
    // Trusted attributes discharged by the service.
    string svc = 3;
    // Trusted attributes supplied by any service that owns resources and uses the IAM system for access control.
    string sys = 4;
    // DEPRECATED. Use 'values' instead.
    string value = 5;
    // The objects of the condition. This is mutually exclusive with 'value'.
    repeated string values = 6;
}

message ConfigFile {
    // The contents of the file.
    string content = 1;
}

message Credential {
    // Basic Auth Credential, only used by TypeProvider.
    BasicAuth basicAuth = 1;
    // Service Account Credential, only used by Deployment.
    ServiceAccount serviceAccount = 2;
    // Specify to use the project default credential, only supported by Deployment.
    bool useProjectDefault = 3;
}

message Deployment {
    // An optional user-provided description of the deployment.
    string description = 1;
    // Provides a fingerprint to use in requests to modify a deployment, such as update(), stop(), and cancelPreview() requests. A fingerprint is a randomly generated value that must be provided with update(), stop(), and cancelPreview() requests to perform optimistic locking. This ensures optimistic concurrency so that only one request happens at a time.
    // 
    // The fingerprint is initially generated by Deployment Manager and changes after every request to modify data. To get the latest fingerprint value, perform a get() request to a deployment.
    string fingerprint = 2;
    // Output only. Unique identifier for the resource; defined by the server.
    string id = 3;
    // Output only. Timestamp when the deployment was created, in RFC3339 text format .
    string insertTime = 4;
    // Map of labels; provided by the client when the resource is created or updated. Specifically: Label keys must be between 1 and 63 characters long and must conform to the following regular expression: [a-z]([-a-z0-9]*[a-z0-9])? Label values must be between 0 and 63 characters long and must conform to the regular expression ([a-z]([-a-z0-9]*[a-z0-9])?)?
    repeated DeploymentLabelEntry labels = 5;
    // Output only. URL of the manifest representing the last manifest that was successfully deployed.
    string manifest = 6;
    // Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression [a-z]([-a-z0-9]*[a-z0-9])? which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    string name = 7;
    // Output only. The Operation that most recently ran, or is currently running, on this deployment.
    Operation operation = 8;
    // Output only. Self link for the deployment.
    string selfLink = 9;
    // [Input Only] The parameters that define your deployment, including the deployment configuration and relevant templates.
    TargetConfiguration target = 10;
    // Output only. If Deployment Manager is currently updating or previewing an update to this deployment, the updated configuration appears here.
    DeploymentUpdate update = 11;
}

message DeploymentLabelEntry {
    string key = 1;
    string value = 2;
}

message DeploymentUpdate {
    // Output only. An optional user-provided description of the deployment after the current update has been applied.
    string description = 1;
    // Output only. Map of labels; provided by the client when the resource is created or updated. Specifically: Label keys must be between 1 and 63 characters long and must conform to the following regular expression: [a-z]([-a-z0-9]*[a-z0-9])? Label values must be between 0 and 63 characters long and must conform to the regular expression ([a-z]([-a-z0-9]*[a-z0-9])?)?
    repeated DeploymentUpdateLabelEntry labels = 2;
    // Output only. URL of the manifest representing the update configuration of this deployment.
    string manifest = 3;
}

message DeploymentUpdateLabelEntry {
    string key = 1;
    string value = 2;
}

message DeploymentsCancelPreviewRequest {
    // Specifies a fingerprint for cancelPreview() requests. A fingerprint is a randomly generated value that must be provided in cancelPreview() requests to perform optimistic locking. This ensures optimistic concurrency so that the deployment does not have conflicting requests (e.g. if someone attempts to make a new update request while another user attempts to cancel a preview, this would prevent one of the requests).
    // 
    // The fingerprint is initially generated by Deployment Manager and changes after every request to modify a deployment. To get the latest fingerprint value, perform a get() request on the deployment.
    string fingerprint = 1;
}

message DeploymentsListResponse {
    // Output only. The deployments contained in this response.
    repeated Deployment deployments = 1;
    // Output only. A token used to continue a truncated list request.
    string nextPageToken = 2;
}

message DeploymentsStopRequest {
    // Specifies a fingerprint for stop() requests. A fingerprint is a randomly generated value that must be provided in stop() requests to perform optimistic locking. This ensures optimistic concurrency so that the deployment does not have conflicting requests (e.g. if someone attempts to make a new update request while another user attempts to stop an ongoing update request, this would prevent a collision).
    // 
    // The fingerprint is initially generated by Deployment Manager and changes after every request to modify a deployment. To get the latest fingerprint value, perform a get() request on the deployment.
    string fingerprint = 1;
}

message Expr {
    // An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
    string description = 1;
    // Textual representation of an expression in Common Expression Language syntax.
    // 
    // The application context of the containing message determines which well-known feature set of CEL is supported.
    string expression = 2;
    // An optional string indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
    string location = 3;
    // An optional title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
    string title = 4;
}

message ImportFile {
    // The contents of the file.
    string content = 1;
    // The name of the file.
    string name = 2;
}

message InputMapping {
    // The name of the field that is going to be injected.
    string fieldName = 1;
    // The location where this mapping applies.
    string location = 2;
    // Regex to evaluate on method to decide if input applies.
    string methodMatch = 3;
    // A jsonPath expression to select an element.
    string value = 4;
}

message LogConfig {
    // Cloud audit options.
    LogConfigCloudAuditOptions cloudAudit = 1;
    // Counter options.
    LogConfigCounterOptions counter = 2;
    // Data access options.
    LogConfigDataAccessOptions dataAccess = 3;
}

message LogConfigCloudAuditOptions {
    // Information used by the Cloud Audit Logging pipeline.
    AuthorizationLoggingOptions authorizationLoggingOptions = 1;
    // The log_name to populate in the Cloud Audit Record.
    string logName = 2;
}

message LogConfigCounterOptions {
    // The field value to attribute.
    string field = 1;
    // The metric to update.
    string metric = 2;
}

message LogConfigDataAccessOptions {
    // Whether Gin logging should happen in a fail-closed manner at the caller. This is relevant only in the LocalIAM implementation, for now.
    string logMode = 1;
}

message Manifest {
    // Output only. The YAML configuration for this manifest.
    ConfigFile config = 1;
    // Output only. The fully-expanded configuration file, including any templates and references.
    string expandedConfig = 2;
    // Output only. Unique identifier for the resource; defined by the server.
    string id = 3;
    // Output only. The imported files for this manifest.
    repeated ImportFile imports = 4;
    // Output only. Timestamp when the manifest was created, in RFC3339 text format.
    string insertTime = 5;
    // Output only. The YAML layout for this manifest.
    string layout = 6;
    // Output only.
    // 
    // The name of the manifest.
    string name = 7;
    // Output only. Self link for the manifest.
    string selfLink = 8;
}

message ManifestsListResponse {
    // Output only. Manifests contained in this list response.
    repeated Manifest manifests = 1;
    // Output only. A token used to continue a truncated list request.
    string nextPageToken = 2;
}

message Operation {
    // [Output Only] Reserved for future use.
    string clientOperationId = 1;
    // [Deprecated] This field is deprecated.
    string creationTimestamp = 2;
    // [Output Only] A textual description of the operation, which is set when the operation is created.
    string description = 3;
    // [Output Only] The time that this operation was completed. This value is in RFC3339 text format.
    string endTime = 4;
    // [Output Only] If errors are generated during processing of the operation, this field will be populated.
    message Error {
            // [Output Only] The array of errors encountered while processing this operation.
    message Error {
                    // [Output Only] The error type identifier for this error.
    string code = 1;
                    // [Output Only] Indicates the field in the request that caused the error. This property is optional.
    string location = 2;
                    // [Output Only] An optional, human-readable error message.
    string message = 3;
        }
        repeated Error errors = 1;
    }
    Error error = 5;
    // [Output Only] If the operation fails, this field contains the HTTP error message that was returned, such as NOT FOUND.
    string httpErrorMessage = 6;
    // [Output Only] If the operation fails, this field contains the HTTP error status code that was returned. For example, a 404 means the resource was not found.
    int32 httpErrorStatusCode = 7;
    // [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    string id = 8;
    // [Output Only] The time that this operation was requested. This value is in RFC3339 text format.
    string insertTime = 9;
    // [Output Only] Type of the resource. Always compute#operation for Operation resources.
    string kind = 10;
    // [Output Only] Name of the resource.
    string name = 11;
    // [Output Only] The type of operation, such as insert, update, or delete, and so on.
    string operationType = 12;
    // [Output Only] An optional progress indicator that ranges from 0 to 100. There is no requirement that this be linear or support any granularity of operations. This should not be used to guess when the operation will be complete. This number should monotonically increase as the operation progresses.
    int32 progress = 13;
    // [Output Only] The URL of the region where the operation resides. Only available when performing regional operations.
    string region = 14;
    // [Output Only] Server-defined URL for the resource.
    string selfLink = 15;
    // [Output Only] The time that this operation was started by the server. This value is in RFC3339 text format.
    string startTime = 16;
    // [Output Only] The status of the operation, which can be one of the following: PENDING, RUNNING, or DONE.
    string status = 17;
    // [Output Only] An optional textual description of the current status of the operation.
    string statusMessage = 18;
    // [Output Only] The unique target ID, which identifies a specific incarnation of the target resource.
    string targetId = 19;
    // [Output Only] The URL of the resource that the operation modifies. For operations related to creating a snapshot, this points to the persistent disk that the snapshot was created from.
    string targetLink = 20;
    // [Output Only] User who requested the operation, for example: user@example.com.
    string user = 21;
    // [Output Only] If warning messages are generated during processing of the operation, this field will be populated.
    message Warning {
            // [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    string code = 1;
            // [Output Only] Metadata about this warning in key: value format. For example:
    // "data": [ { "key": "scope", "value": "zones/us-east1-d" }
    message Data {
                    // [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    string key = 1;
                    // [Output Only] A warning data value corresponding to the key.
    string value = 2;
        }
        repeated Data data = 2;
            // [Output Only] A human-readable description of the warning code.
    string message = 3;
    }
    repeated Warning warnings = 22;
    // [Output Only] The URL of the zone where the operation resides. Only available when performing per-zone operations.
    string zone = 23;
}

message OperationsListResponse {
    // Output only. A token used to continue a truncated list request.
    string nextPageToken = 1;
    // Output only. Operations contained in this list response.
    repeated Operation operations = 2;
}

message Options {
    // The mappings that apply for requests.
    repeated InputMapping inputMappings = 1;
    // Options for how to validate and process properties on a resource.
    ValidationOptions validationOptions = 2;
    // Additional properties block described as a jsonSchema, these properties will never be part of the json payload, but they can be consumed by InputMappings, this must be a valid json schema draft-04. The properties specified here will be decouple in a different section. This schema will be merged to the schema validation, and properties here will be extracted From the payload and consumed explicitly by InputMappings. ex: field1: type: string field2: type: number
    string virtualProperties = 3;
}

message Policy {
    // Specifies cloud audit logging configuration for this policy.
    repeated AuditConfig auditConfigs = 1;
    // Associates a list of `members` to a `role`. `bindings` with no members will result in an error.
    repeated Binding bindings = 2;
    // `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy.
    // 
    // If no `etag` is provided in the call to `setIamPolicy`, then the existing policy is overwritten blindly.
    string etag = 3;
    bool iamOwned = 4;
    // If more than one rule is specified, the rules are applied in the following manner: - All matching LOG rules are always applied. - If any DENY/DENY_WITH_LOG rule matches, permission is denied. Logging will be applied if one or more matching rule requires logging. - Otherwise, if any ALLOW/ALLOW_WITH_LOG rule matches, permission is granted. Logging will be applied if one or more matching rule requires logging. - Otherwise, if no rule applies, permission is denied.
    repeated Rule rules = 5;
    // Version of the `Policy`. The default version is 0.
    int32 version = 6;
}

message Resource {
    // The Access Control Policy set on this resource.
    ResourceAccessControl accessControl = 1;
    // Output only. The evaluated properties of the resource with references expanded. Returned as serialized YAML.
    string finalProperties = 2;
    // Output only. Unique identifier for the resource; defined by the server.
    string id = 3;
    // Output only. Timestamp when the resource was created or acquired, in RFC3339 text format .
    string insertTime = 4;
    // Output only. URL of the manifest representing the current configuration of this resource.
    string manifest = 5;
    // Output only. The name of the resource as it appears in the YAML config.
    string name = 6;
    // Output only. The current properties of the resource before any references have been filled in. Returned as serialized YAML.
    string properties = 7;
    // Output only. The type of the resource, for example compute.v1.instance, or cloudfunctions.v1beta1.function.
    string type = 8;
    // Output only. If Deployment Manager is currently updating or previewing an update to this resource, the updated configuration appears here.
    ResourceUpdate update = 9;
    // Output only. Timestamp when the resource was updated, in RFC3339 text format .
    string updateTime = 10;
    // Output only. The URL of the actual resource.
    string url = 11;
    // Output only. If warning messages are generated during processing of this resource, this field will be populated.
    message Warning {
            // [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    string code = 1;
            // [Output Only] Metadata about this warning in key: value format. For example:
    // "data": [ { "key": "scope", "value": "zones/us-east1-d" }
    message Data {
                    // [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    string key = 1;
                    // [Output Only] A warning data value corresponding to the key.
    string value = 2;
        }
        repeated Data data = 2;
            // [Output Only] A human-readable description of the warning code.
    string message = 3;
    }
    repeated Warning warnings = 12;
}

message ResourceAccessControl {
    // The GCP IAM Policy to set on the resource.
    string gcpIamPolicy = 1;
}

message ResourceUpdate {
    // The Access Control Policy to set on this resource after updating the resource itself.
    ResourceAccessControl accessControl = 1;
    // Output only. If errors are generated during update of the resource, this field will be populated.
    message Error {
            // [Output Only] The array of errors encountered while processing this operation.
    message Error {
                    // [Output Only] The error type identifier for this error.
    string code = 1;
                    // [Output Only] Indicates the field in the request that caused the error. This property is optional.
    string location = 2;
                    // [Output Only] An optional, human-readable error message.
    string message = 3;
        }
        repeated Error errors = 1;
    }
    Error error = 2;
    // Output only. The expanded properties of the resource with reference values expanded. Returned as serialized YAML.
    string finalProperties = 3;
    // Output only. The intent of the resource: PREVIEW, UPDATE, or CANCEL.
    string intent = 4;
    // Output only. URL of the manifest representing the update configuration of this resource.
    string manifest = 5;
    // Output only. The set of updated properties for this resource, before references are expanded. Returned as serialized YAML.
    string properties = 6;
    // Output only. The state of the resource.
    string state = 7;
    // Output only. If warning messages are generated during processing of this resource, this field will be populated.
    message Warning {
            // [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    string code = 1;
            // [Output Only] Metadata about this warning in key: value format. For example:
    // "data": [ { "key": "scope", "value": "zones/us-east1-d" }
    message Data {
                    // [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    string key = 1;
                    // [Output Only] A warning data value corresponding to the key.
    string value = 2;
        }
        repeated Data data = 2;
            // [Output Only] A human-readable description of the warning code.
    string message = 3;
    }
    repeated Warning warnings = 8;
}

message ResourcesListResponse {
    // A token used to continue a truncated list request.
    string nextPageToken = 1;
    // Resources contained in this list response.
    repeated Resource resources = 2;
}

message Rule {
    // Required
    string action = 1;
    // Additional restrictions that must be met. All conditions must pass for the rule to match.
    repeated Condition conditions = 2;
    // Human-readable description of the rule.
    string description = 3;
    // If one or more 'in' clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in at least one of these entries.
    repeated string ins = 4;
    // The config returned to callers of tech.iam.IAM.CheckPolicy for any entries that match the LOG action.
    repeated LogConfig logConfigs = 5;
    // If one or more 'not_in' clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in none of the entries.
    repeated string notIns = 6;
    // A permission is a string of form '..' (e.g., 'storage.buckets.list'). A value of '*' matches all permissions, and a verb part of '*' (e.g., 'storage.buckets.*') matches all verbs.
    repeated string permissions = 7;
}

message ServiceAccount {
    // The IAM service account email address like test@myproject.iam.gserviceaccount.com
    string email = 1;
}

message TargetConfiguration {
    // The configuration to use for this deployment.
    ConfigFile config = 1;
    // Specifies any files to import for this configuration. This can be used to import templates or other files. For example, you might import a text file in order to use the file in a template.
    repeated ImportFile imports = 2;
}

message TemplateContents {
    // Import files referenced by the main template.
    repeated ImportFile imports = 1;
    // Which interpreter (python or jinja) should be used during expansion.
    string interpreter = 2;
    // The contents of the template schema.
    string schema = 3;
    // The contents of the main template file.
    string template = 4;
}

message TestPermissionsRequest {
    // The set of permissions to check for the 'resource'. Permissions with wildcards (such as '*' or 'storage.*') are not allowed.
    repeated string permissions = 1;
}

message TestPermissionsResponse {
    // A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
    repeated string permissions = 1;
}

message Type {
    // Base Type (configurable service) that backs this Type.
    BaseType base = 1;
    // An optional textual description of the resource; provided by the client when the resource is created.
    string description = 2;
    // Output only. Unique identifier for the resource; defined by the server.
    string id = 3;
    // Output only. Timestamp when the type was created, in RFC3339 text format.
    string insertTime = 4;
    // Map of labels; provided by the client when the resource is created or updated. Specifically: Label keys must be between 1 and 63 characters long and must conform to the following regular expression: [a-z]([-a-z0-9]*[a-z0-9])? Label values must be between 0 and 63 characters long and must conform to the regular expression ([a-z]([-a-z0-9]*[a-z0-9])?)?
    repeated TypeLabelEntry labels = 5;
    // Name of the type.
    string name = 6;
    // Output only. The Operation that most recently ran, or is currently running, on this type.
    Operation operation = 7;
    // Output only. Self link for the type.
    string selfLink = 8;
}

message TypeInfo {
    // The description of the type.
    string description = 1;
    // For swagger 2.0 externalDocs field will be used. For swagger 1.2 this field will be empty.
    string documentationLink = 2;
    // Output only. Type of the output. Always deploymentManager#TypeInfo for TypeInfo.
    string kind = 3;
    // The base type or composite type name.
    string name = 4;
    // For base types with a collection, we return a schema and documentation link For template types, we return only a schema
    TypeInfoSchemaInfo schema = 5;
    // Output only. Server-defined URL for the resource.
    string selfLink = 6;
    // The title on the API descriptor URL provided.
    string title = 7;
}

message TypeInfoSchemaInfo {
    // The properties that this composite type or base type collection accept as input, represented as a json blob, format is: JSON Schema Draft V4
    string input = 1;
    // The properties that this composite type or base type collection exposes as output, these properties can be used for references, represented as json blob, format is: JSON Schema Draft V4
    string output = 2;
}

message TypeLabelEntry {
    string key = 1;
    string value = 2;
}

message TypeProvider {
    // Allows resource handling overrides for specific collections
    repeated CollectionOverride collectionOverrides = 1;
    // Credential used when interacting with this type.
    Credential credential = 2;
    // An optional textual description of the resource; provided by the client when the resource is created.
    string description = 3;
    // Descriptor Url for the this type provider.
    string descriptorUrl = 4;
    // Output only. Unique identifier for the resource; defined by the server.
    string id = 5;
    // Output only. Timestamp when the type provider was created, in RFC3339 text format.
    string insertTime = 6;
    // Map of labels; provided by the client when the resource is created or updated. Specifically: Label keys must be between 1 and 63 characters long and must conform to the following regular expression: [a-z]([-a-z0-9]*[a-z0-9])? Label values must be between 0 and 63 characters long and must conform to the regular expression ([a-z]([-a-z0-9]*[a-z0-9])?)?
    repeated TypeProviderLabelEntry labels = 7;
    // Name of the type provider.
    string name = 8;
    // Output only. The Operation that most recently ran, or is currently running, on this type provider.
    Operation operation = 9;
    // Options to apply when handling any resources in this service.
    Options options = 10;
    // Output only. Self link for the type provider.
    string selfLink = 11;
}

message TypeProviderLabelEntry {
    string key = 1;
    string value = 2;
}

message TypeProvidersListResponse {
    // A token used to continue a truncated list request.
    string nextPageToken = 1;
    // Output only. A list of resource type providers supported by Deployment Manager.
    repeated TypeProvider typeProviders = 2;
}

message TypeProvidersListTypesResponse {
    // A token used to continue a truncated list request.
    string nextPageToken = 1;
    // Output only. A list of resource type info.
    repeated TypeInfo types = 2;
}

message TypesListResponse {
    // A token used to continue a truncated list request.
    string nextPageToken = 1;
    // Output only. A list of resource types supported by Deployment Manager.
    repeated Type types = 2;
}

message ValidationOptions {
    // Customize how deployment manager will validate the resource against schema errors.
    string schemaValidation = 1;
    // Specify what to do with extra properties when executing a request.
    string undeclaredProperties = 2;
}

enum Alt {
    JSON = 0;
}

service GoogleCloudDeploymentManagerAPIV2BetaMethodsService {
    // Lists all composite types for Deployment Manager.
    rpc GetProjectGlobalCompositeTypes(GetProjectGlobalCompositeTypesRequest) returns (CompositeTypesListResponse) {
      option (google.api.http) = {
        get: "/deploymentmanager/v2beta/projects/{project}/global/compositeTypes"
      };
    }
    // Creates a composite type.
    rpc PostProjectGlobalCompositeTypes(PostProjectGlobalCompositeTypesRequest) returns (Operation) {
      option (google.api.http) = {
        post: "/deploymentmanager/v2beta/projects/{project}/global/compositeTypes"
        body: "body"
      };
    }
    // Gets information about a specific composite type.
    rpc GetProjectGlobalCompositeTypesCompositeType(GetProjectGlobalCompositeTypesCompositeTypeRequest) returns (CompositeType) {
      option (google.api.http) = {
        get: "/deploymentmanager/v2beta/projects/{project}/global/compositeTypes/{compositeType}"
      };
    }
    // Updates a composite type.
    rpc PutProjectGlobalCompositeTypesCompositeType(PutProjectGlobalCompositeTypesCompositeTypeRequest) returns (Operation) {
      option (google.api.http) = {
        put: "/deploymentmanager/v2beta/projects/{project}/global/compositeTypes/{compositeType}"
        body: "body"
      };
    }
    // Deletes a composite type.
    rpc DeleteProjectGlobalCompositeTypesCompositeType(DeleteProjectGlobalCompositeTypesCompositeTypeRequest) returns (Operation) {
      option (google.api.http) = {
        delete: "/deploymentmanager/v2beta/projects/{project}/global/compositeTypes/{compositeType}"
      };
    }
    // Lists all deployments for a given project.
    rpc GetProjectGlobalDeployments(GetProjectGlobalDeploymentsRequest) returns (DeploymentsListResponse) {
      option (google.api.http) = {
        get: "/deploymentmanager/v2beta/projects/{project}/global/deployments"
      };
    }
    // Creates a deployment and all of the resources described by the deployment manifest.
    rpc PostProjectGlobalDeployments(PostProjectGlobalDeploymentsRequest) returns (Operation) {
      option (google.api.http) = {
        post: "/deploymentmanager/v2beta/projects/{project}/global/deployments"
        body: "body"
      };
    }
    // Gets information about a specific deployment.
    rpc GetProjectGlobalDeploymentsDeployment(GetProjectGlobalDeploymentsDeploymentRequest) returns (Deployment) {
      option (google.api.http) = {
        get: "/deploymentmanager/v2beta/projects/{project}/global/deployments/{deployment}"
      };
    }
    // Updates a deployment and all of the resources described by the deployment manifest.
    rpc PutProjectGlobalDeploymentsDeployment(PutProjectGlobalDeploymentsDeploymentRequest) returns (Operation) {
      option (google.api.http) = {
        put: "/deploymentmanager/v2beta/projects/{project}/global/deployments/{deployment}"
        body: "body"
      };
    }
    // Deletes a deployment and all of the resources in the deployment.
    rpc DeleteProjectGlobalDeploymentsDeployment(DeleteProjectGlobalDeploymentsDeploymentRequest) returns (Operation) {
      option (google.api.http) = {
        delete: "/deploymentmanager/v2beta/projects/{project}/global/deployments/{deployment}"
      };
    }
    // Cancels and removes the preview currently associated with the deployment.
    rpc PostProjectGlobalDeploymentsDeploymentCancelPreview(PostProjectGlobalDeploymentsDeploymentCancelPreviewRequest) returns (Operation) {
      option (google.api.http) = {
        post: "/deploymentmanager/v2beta/projects/{project}/global/deployments/{deployment}/cancelPreview"
        body: "body"
      };
    }
    // Lists all manifests for a given deployment.
    rpc GetProjectGlobalDeploymentsDeploymentManifests(GetProjectGlobalDeploymentsDeploymentManifestsRequest) returns (ManifestsListResponse) {
      option (google.api.http) = {
        get: "/deploymentmanager/v2beta/projects/{project}/global/deployments/{deployment}/manifests"
      };
    }
    // Gets information about a specific manifest.
    rpc GetProjectGlobalDeploymentsDeploymentManifestsManifest(GetProjectGlobalDeploymentsDeploymentManifestsManifestRequest) returns (Manifest) {
      option (google.api.http) = {
        get: "/deploymentmanager/v2beta/projects/{project}/global/deployments/{deployment}/manifests/{manifest}"
      };
    }
    // Lists all resources in a given deployment.
    rpc GetProjectGlobalDeploymentsDeploymentResources(GetProjectGlobalDeploymentsDeploymentResourcesRequest) returns (ResourcesListResponse) {
      option (google.api.http) = {
        get: "/deploymentmanager/v2beta/projects/{project}/global/deployments/{deployment}/resources"
      };
    }
    // Gets information about a single resource.
    rpc GetProjectGlobalDeploymentsDeploymentResourcesResource(GetProjectGlobalDeploymentsDeploymentResourcesResourceRequest) returns (Resource) {
      option (google.api.http) = {
        get: "/deploymentmanager/v2beta/projects/{project}/global/deployments/{deployment}/resources/{resource}"
      };
    }
    // Stops an ongoing operation. This does not roll back any work that has already been completed, but prevents any new work from being started.
    rpc PostProjectGlobalDeploymentsDeploymentStop(PostProjectGlobalDeploymentsDeploymentStopRequest) returns (Operation) {
      option (google.api.http) = {
        post: "/deploymentmanager/v2beta/projects/{project}/global/deployments/{deployment}/stop"
        body: "body"
      };
    }
    // Gets the access control policy for a resource. May be empty if no such policy or resource exists.
    rpc GetProjectGlobalDeploymentsResourceGetIamPolicy(GetProjectGlobalDeploymentsResourceGetIamPolicyRequest) returns (Policy) {
      option (google.api.http) = {
        get: "/deploymentmanager/v2beta/projects/{project}/global/deployments/{resource}/getIamPolicy"
      };
    }
    // Sets the access control policy on the specified resource. Replaces any existing policy.
    rpc PostProjectGlobalDeploymentsResourceSetIamPolicy(PostProjectGlobalDeploymentsResourceSetIamPolicyRequest) returns (Policy) {
      option (google.api.http) = {
        post: "/deploymentmanager/v2beta/projects/{project}/global/deployments/{resource}/setIamPolicy"
        body: "body"
      };
    }
    // Returns permissions that a caller has on the specified resource.
    rpc PostProjectGlobalDeploymentsResourceTestIamPermissions(PostProjectGlobalDeploymentsResourceTestIamPermissionsRequest) returns (TestPermissionsResponse) {
      option (google.api.http) = {
        post: "/deploymentmanager/v2beta/projects/{project}/global/deployments/{resource}/testIamPermissions"
        body: "body"
      };
    }
    // Lists all operations for a project.
    rpc GetProjectGlobalOperations(GetProjectGlobalOperationsRequest) returns (OperationsListResponse) {
      option (google.api.http) = {
        get: "/deploymentmanager/v2beta/projects/{project}/global/operations"
      };
    }
    // Gets information about a specific operation.
    rpc GetProjectGlobalOperationsOperation(GetProjectGlobalOperationsOperationRequest) returns (Operation) {
      option (google.api.http) = {
        get: "/deploymentmanager/v2beta/projects/{project}/global/operations/{operation}"
      };
    }
    // Lists all resource type providers for Deployment Manager.
    rpc GetProjectGlobalTypeProviders(GetProjectGlobalTypeProvidersRequest) returns (TypeProvidersListResponse) {
      option (google.api.http) = {
        get: "/deploymentmanager/v2beta/projects/{project}/global/typeProviders"
      };
    }
    // Creates a type provider.
    rpc PostProjectGlobalTypeProviders(PostProjectGlobalTypeProvidersRequest) returns (Operation) {
      option (google.api.http) = {
        post: "/deploymentmanager/v2beta/projects/{project}/global/typeProviders"
        body: "body"
      };
    }
    // Gets information about a specific type provider.
    rpc GetProjectGlobalTypeProvidersTypeProvider(GetProjectGlobalTypeProvidersTypeProviderRequest) returns (TypeProvider) {
      option (google.api.http) = {
        get: "/deploymentmanager/v2beta/projects/{project}/global/typeProviders/{typeProvider}"
      };
    }
    // Updates a type provider.
    rpc PutProjectGlobalTypeProvidersTypeProvider(PutProjectGlobalTypeProvidersTypeProviderRequest) returns (Operation) {
      option (google.api.http) = {
        put: "/deploymentmanager/v2beta/projects/{project}/global/typeProviders/{typeProvider}"
        body: "body"
      };
    }
    // Deletes a type provider.
    rpc DeleteProjectGlobalTypeProvidersTypeProvider(DeleteProjectGlobalTypeProvidersTypeProviderRequest) returns (Operation) {
      option (google.api.http) = {
        delete: "/deploymentmanager/v2beta/projects/{project}/global/typeProviders/{typeProvider}"
      };
    }
    // Lists all the type info for a TypeProvider.
    rpc GetProjectGlobalTypeProvidersTypeProviderTypes(GetProjectGlobalTypeProvidersTypeProviderTypesRequest) returns (TypeProvidersListTypesResponse) {
      option (google.api.http) = {
        get: "/deploymentmanager/v2beta/projects/{project}/global/typeProviders/{typeProvider}/types"
      };
    }
    // Gets a type info for a type provided by a TypeProvider.
    rpc GetProjectGlobalTypeProvidersTypeProviderTypesType(GetProjectGlobalTypeProvidersTypeProviderTypesTypeRequest) returns (TypeInfo) {
      option (google.api.http) = {
        get: "/deploymentmanager/v2beta/projects/{project}/global/typeProviders/{typeProvider}/types/{type}"
      };
    }
    // Lists all resource types for Deployment Manager.
    rpc GetProjectGlobalTypes(GetProjectGlobalTypesRequest) returns (TypesListResponse) {
      option (google.api.http) = {
        get: "/deploymentmanager/v2beta/projects/{project}/global/types"
      };
    }
}

syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package gmail;

message GetUserIdDraftsRequest {
    alt alt = 1;
    string fields = 2;
    // Include drafts from SPAM and TRASH in the results.
    bool includeSpamTrash = 3;
    string key = 4;
    // Maximum number of drafts to return.
    int32 maxResults = 5;
    string oauth_token = 6;
    // Page token to retrieve a specific page of results in the list.
    string pageToken = 7;
    boolean prettyPrint = 8;
    // Only return draft messages matching the specified query. Supports the same query format as the Gmail search box. For example, "from:someuser@example.com rfc822msgid: is:unread".
    string q = 9;
    string quotaUser = 10;
    // The user's email address. The special value me can be used to indicate the authenticated user.
    string userId = 11;
    string userIp = 12;
}

message PostUserIdDraftsRequest {
    alt alt = 1;
    Draft body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The user's email address. The special value me can be used to indicate the authenticated user.
    string userId = 8;
    string userIp = 9;
}

message PostUserIdDraftsSendRequest {
    alt alt = 1;
    Draft body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The user's email address. The special value me can be used to indicate the authenticated user.
    string userId = 8;
    string userIp = 9;
}

message GetUserIdDraftsIdRequest {
    alt alt = 1;
    string fields = 2;
    // The format to return the draft in.
    enum GetUserIdDraftsIdRequest_Format {
        GETUSERIDDRAFTSIDREQUEST_FORMAT_FULL = 0;
        GETUSERIDDRAFTSIDREQUEST_FORMAT_METADATA = 1;
        GETUSERIDDRAFTSIDREQUEST_FORMAT_MINIMAL = 2;
        GETUSERIDDRAFTSIDREQUEST_FORMAT_RAW = 3;
    }
    GetUserIdDraftsIdRequest_Format format = 3;
    // The ID of the draft to retrieve.
    string id = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // The user's email address. The special value me can be used to indicate the authenticated user.
    string userId = 9;
    string userIp = 10;
}

message PutUserIdDraftsIdRequest {
    alt alt = 1;
    Draft body = 2;
    string fields = 3;
    // The ID of the draft to update.
    string id = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // The user's email address. The special value me can be used to indicate the authenticated user.
    string userId = 9;
    string userIp = 10;
}

message DeleteUserIdDraftsIdRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the draft to delete.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The user's email address. The special value me can be used to indicate the authenticated user.
    string userId = 8;
    string userIp = 9;
}

message GetUserIdHistoryRequest {
    alt alt = 1;
    string fields = 2;
    // History types to be returned by the function
    repeated string historyTypes = 3;
    string key = 4;
    // Only return messages with a label matching the ID.
    string labelId = 5;
    // The maximum number of history records to return.
    int32 maxResults = 6;
    string oauth_token = 7;
    // Page token to retrieve a specific page of results in the list.
    string pageToken = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    // Required. Returns history records after the specified startHistoryId. The supplied startHistoryId should be obtained from the historyId of a message, thread, or previous list response. History IDs increase chronologically but are not contiguous with random gaps in between valid IDs. Supplying an invalid or out of date startHistoryId typically returns an HTTP 404 error code. A historyId is typically valid for at least a week, but in some rare circumstances may be valid for only a few hours. If you receive an HTTP 404 error response, your application should perform a full sync. If you receive no nextPageToken in the response, there are no updates to retrieve and you can store the returned historyId for a future request.
    string startHistoryId = 11;
    // The user's email address. The special value me can be used to indicate the authenticated user.
    string userId = 12;
    string userIp = 13;
}

message GetUserIdLabelsRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    // The user's email address. The special value me can be used to indicate the authenticated user.
    string userId = 7;
    string userIp = 8;
}

message PostUserIdLabelsRequest {
    alt alt = 1;
    Label body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The user's email address. The special value me can be used to indicate the authenticated user.
    string userId = 8;
    string userIp = 9;
}

message GetUserIdLabelsIdRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the label to retrieve.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The user's email address. The special value me can be used to indicate the authenticated user.
    string userId = 8;
    string userIp = 9;
}

message PutUserIdLabelsIdRequest {
    alt alt = 1;
    Label body = 2;
    string fields = 3;
    // The ID of the label to update.
    string id = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // The user's email address. The special value me can be used to indicate the authenticated user.
    string userId = 9;
    string userIp = 10;
}

message DeleteUserIdLabelsIdRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the label to delete.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The user's email address. The special value me can be used to indicate the authenticated user.
    string userId = 8;
    string userIp = 9;
}

message GetUserIdMessagesRequest {
    alt alt = 1;
    string fields = 2;
    // Include messages from SPAM and TRASH in the results.
    bool includeSpamTrash = 3;
    string key = 4;
    // Only return messages with labels that match all of the specified label IDs.
    repeated string labelIds = 5;
    // Maximum number of messages to return.
    int32 maxResults = 6;
    string oauth_token = 7;
    // Page token to retrieve a specific page of results in the list.
    string pageToken = 8;
    boolean prettyPrint = 9;
    // Only return messages matching the specified query. Supports the same query format as the Gmail search box. For example, "from:someuser@example.com rfc822msgid:<somemsgid@example.com> is:unread". Parameter cannot be used when accessing the api using the gmail.metadata scope.
    string q = 10;
    string quotaUser = 11;
    // The user's email address. The special value me can be used to indicate the authenticated user.
    string userId = 12;
    string userIp = 13;
}

message PostUserIdMessagesRequest {
    alt alt = 1;
    Message body = 2;
    // Mark the email as permanently deleted (not TRASH) and only visible in Google Vault to a Vault administrator. Only used for G Suite accounts.
    bool deleted = 3;
    string fields = 4;
    // Source for Gmail's internal date of the message.
    enum PostUserIdMessagesRequest_InternalDateSource {
        POSTUSERIDMESSAGESREQUEST_INTERNALDATESOURCE_DATEHEADER = 0;
        POSTUSERIDMESSAGESREQUEST_INTERNALDATESOURCE_RECEIVEDTIME = 1;
    }
    PostUserIdMessagesRequest_InternalDateSource internalDateSource = 5;
    string key = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    // The user's email address. The special value me can be used to indicate the authenticated user.
    string userId = 10;
    string userIp = 11;
}

message PostUserIdMessagesBatchDeleteRequest {
    alt alt = 1;
    BatchDeleteMessagesRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The user's email address. The special value me can be used to indicate the authenticated user.
    string userId = 8;
    string userIp = 9;
}

message PostUserIdMessagesBatchModifyRequest {
    alt alt = 1;
    BatchModifyMessagesRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The user's email address. The special value me can be used to indicate the authenticated user.
    string userId = 8;
    string userIp = 9;
}

message PostUserIdMessagesImportRequest {
    alt alt = 1;
    Message body = 2;
    // Mark the email as permanently deleted (not TRASH) and only visible in Google Vault to a Vault administrator. Only used for G Suite accounts.
    bool deleted = 3;
    string fields = 4;
    // Source for Gmail's internal date of the message.
    enum PostUserIdMessagesImportRequest_InternalDateSource {
        POSTUSERIDMESSAGESIMPORTREQUEST_INTERNALDATESOURCE_DATEHEADER = 0;
        POSTUSERIDMESSAGESIMPORTREQUEST_INTERNALDATESOURCE_RECEIVEDTIME = 1;
    }
    PostUserIdMessagesImportRequest_InternalDateSource internalDateSource = 5;
    string key = 6;
    // Ignore the Gmail spam classifier decision and never mark this email as SPAM in the mailbox.
    bool neverMarkSpam = 7;
    string oauth_token = 8;
    boolean prettyPrint = 9;
    // Process calendar invites in the email and add any extracted meetings to the Google Calendar for this user.
    bool processForCalendar = 10;
    string quotaUser = 11;
    // The user's email address. The special value me can be used to indicate the authenticated user.
    string userId = 12;
    string userIp = 13;
}

message PostUserIdMessagesSendRequest {
    alt alt = 1;
    Message body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The user's email address. The special value me can be used to indicate the authenticated user.
    string userId = 8;
    string userIp = 9;
}

message GetUserIdMessagesIdRequest {
    alt alt = 1;
    string fields = 2;
    // The format to return the message in.
    enum GetUserIdMessagesIdRequest_Format {
        GETUSERIDMESSAGESIDREQUEST_FORMAT_FULL = 0;
        GETUSERIDMESSAGESIDREQUEST_FORMAT_METADATA = 1;
        GETUSERIDMESSAGESIDREQUEST_FORMAT_MINIMAL = 2;
        GETUSERIDMESSAGESIDREQUEST_FORMAT_RAW = 3;
    }
    GetUserIdMessagesIdRequest_Format format = 3;
    // The ID of the message to retrieve.
    string id = 4;
    string key = 5;
    // When given and format is METADATA, only include headers specified.
    repeated string metadataHeaders = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    // The user's email address. The special value me can be used to indicate the authenticated user.
    string userId = 10;
    string userIp = 11;
}

message DeleteUserIdMessagesIdRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the message to delete.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The user's email address. The special value me can be used to indicate the authenticated user.
    string userId = 8;
    string userIp = 9;
}

message PostUserIdMessagesIdModifyRequest {
    alt alt = 1;
    ModifyMessageRequest body = 2;
    string fields = 3;
    // The ID of the message to modify.
    string id = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // The user's email address. The special value me can be used to indicate the authenticated user.
    string userId = 9;
    string userIp = 10;
}

message PostUserIdMessagesIdTrashRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the message to Trash.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The user's email address. The special value me can be used to indicate the authenticated user.
    string userId = 8;
    string userIp = 9;
}

message PostUserIdMessagesIdUntrashRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the message to remove from Trash.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The user's email address. The special value me can be used to indicate the authenticated user.
    string userId = 8;
    string userIp = 9;
}

message GetUserIdMessagesMessageIdAttachmentsIdRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the attachment.
    string id = 3;
    string key = 4;
    // The ID of the message containing the attachment.
    string messageId = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // The user's email address. The special value me can be used to indicate the authenticated user.
    string userId = 9;
    string userIp = 10;
}

message GetUserIdProfileRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    // The user's email address. The special value me can be used to indicate the authenticated user.
    string userId = 7;
    string userIp = 8;
}

message GetUserIdSettingsAutoForwardingRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    // User's email address. The special value "me" can be used to indicate the authenticated user.
    string userId = 7;
    string userIp = 8;
}

message PutUserIdSettingsAutoForwardingRequest {
    alt alt = 1;
    AutoForwarding body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // User's email address. The special value "me" can be used to indicate the authenticated user.
    string userId = 8;
    string userIp = 9;
}

message GetUserIdSettingsFiltersRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    // User's email address. The special value "me" can be used to indicate the authenticated user.
    string userId = 7;
    string userIp = 8;
}

message PostUserIdSettingsFiltersRequest {
    alt alt = 1;
    Filter body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // User's email address. The special value "me" can be used to indicate the authenticated user.
    string userId = 8;
    string userIp = 9;
}

message GetUserIdSettingsFiltersIdRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the filter to be fetched.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // User's email address. The special value "me" can be used to indicate the authenticated user.
    string userId = 8;
    string userIp = 9;
}

message DeleteUserIdSettingsFiltersIdRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the filter to be deleted.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // User's email address. The special value "me" can be used to indicate the authenticated user.
    string userId = 8;
    string userIp = 9;
}

message GetUserIdSettingsForwardingAddressesRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    // User's email address. The special value "me" can be used to indicate the authenticated user.
    string userId = 7;
    string userIp = 8;
}

message PostUserIdSettingsForwardingAddressesRequest {
    alt alt = 1;
    ForwardingAddress body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // User's email address. The special value "me" can be used to indicate the authenticated user.
    string userId = 8;
    string userIp = 9;
}

message GetUserIdSettingsForwardingAddressesForwardingEmailRequest {
    alt alt = 1;
    string fields = 2;
    // The forwarding address to be retrieved.
    string forwardingEmail = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // User's email address. The special value "me" can be used to indicate the authenticated user.
    string userId = 8;
    string userIp = 9;
}

message DeleteUserIdSettingsForwardingAddressesForwardingEmailRequest {
    alt alt = 1;
    string fields = 2;
    // The forwarding address to be deleted.
    string forwardingEmail = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // User's email address. The special value "me" can be used to indicate the authenticated user.
    string userId = 8;
    string userIp = 9;
}

message GetUserIdSettingsImapRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    // User's email address. The special value "me" can be used to indicate the authenticated user.
    string userId = 7;
    string userIp = 8;
}

message PutUserIdSettingsImapRequest {
    alt alt = 1;
    ImapSettings body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // User's email address. The special value "me" can be used to indicate the authenticated user.
    string userId = 8;
    string userIp = 9;
}

message GetUserIdSettingsPopRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    // User's email address. The special value "me" can be used to indicate the authenticated user.
    string userId = 7;
    string userIp = 8;
}

message PutUserIdSettingsPopRequest {
    alt alt = 1;
    PopSettings body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // User's email address. The special value "me" can be used to indicate the authenticated user.
    string userId = 8;
    string userIp = 9;
}

message GetUserIdSettingsSendAsRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    // User's email address. The special value "me" can be used to indicate the authenticated user.
    string userId = 7;
    string userIp = 8;
}

message PostUserIdSettingsSendAsRequest {
    alt alt = 1;
    SendAs body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // User's email address. The special value "me" can be used to indicate the authenticated user.
    string userId = 8;
    string userIp = 9;
}

message GetUserIdSettingsSendAsSendAsEmailRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    // The send-as alias to be retrieved.
    string sendAsEmail = 7;
    // User's email address. The special value "me" can be used to indicate the authenticated user.
    string userId = 8;
    string userIp = 9;
}

message PutUserIdSettingsSendAsSendAsEmailRequest {
    alt alt = 1;
    SendAs body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The send-as alias to be updated.
    string sendAsEmail = 8;
    // User's email address. The special value "me" can be used to indicate the authenticated user.
    string userId = 9;
    string userIp = 10;
}

message DeleteUserIdSettingsSendAsSendAsEmailRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    // The send-as alias to be deleted.
    string sendAsEmail = 7;
    // User's email address. The special value "me" can be used to indicate the authenticated user.
    string userId = 8;
    string userIp = 9;
}

message GetUserIdSettingsSendAsSendAsEmailSmimeInfoRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    // The email address that appears in the "From:" header for mail sent using this alias.
    string sendAsEmail = 7;
    // The user's email address. The special value me can be used to indicate the authenticated user.
    string userId = 8;
    string userIp = 9;
}

message PostUserIdSettingsSendAsSendAsEmailSmimeInfoRequest {
    alt alt = 1;
    SmimeInfo body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The email address that appears in the "From:" header for mail sent using this alias.
    string sendAsEmail = 8;
    // The user's email address. The special value me can be used to indicate the authenticated user.
    string userId = 9;
    string userIp = 10;
}

message GetUserIdSettingsSendAsSendAsEmailSmimeInfoIdRequest {
    alt alt = 1;
    string fields = 2;
    // The immutable ID for the SmimeInfo.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The email address that appears in the "From:" header for mail sent using this alias.
    string sendAsEmail = 8;
    // The user's email address. The special value me can be used to indicate the authenticated user.
    string userId = 9;
    string userIp = 10;
}

message DeleteUserIdSettingsSendAsSendAsEmailSmimeInfoIdRequest {
    alt alt = 1;
    string fields = 2;
    // The immutable ID for the SmimeInfo.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The email address that appears in the "From:" header for mail sent using this alias.
    string sendAsEmail = 8;
    // The user's email address. The special value me can be used to indicate the authenticated user.
    string userId = 9;
    string userIp = 10;
}

message PostUserIdSettingsSendAsSendAsEmailSmimeInfoIdSetDefaultRequest {
    alt alt = 1;
    string fields = 2;
    // The immutable ID for the SmimeInfo.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The email address that appears in the "From:" header for mail sent using this alias.
    string sendAsEmail = 8;
    // The user's email address. The special value me can be used to indicate the authenticated user.
    string userId = 9;
    string userIp = 10;
}

message PostUserIdSettingsSendAsSendAsEmailVerifyRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    // The send-as alias to be verified.
    string sendAsEmail = 7;
    // User's email address. The special value "me" can be used to indicate the authenticated user.
    string userId = 8;
    string userIp = 9;
}

message GetUserIdSettingsVacationRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    // User's email address. The special value "me" can be used to indicate the authenticated user.
    string userId = 7;
    string userIp = 8;
}

message PutUserIdSettingsVacationRequest {
    alt alt = 1;
    VacationSettings body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // User's email address. The special value "me" can be used to indicate the authenticated user.
    string userId = 8;
    string userIp = 9;
}

message PostUserIdStopRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    // The user's email address. The special value me can be used to indicate the authenticated user.
    string userId = 7;
    string userIp = 8;
}

message GetUserIdThreadsRequest {
    alt alt = 1;
    string fields = 2;
    // Include threads from SPAM and TRASH in the results.
    bool includeSpamTrash = 3;
    string key = 4;
    // Only return threads with labels that match all of the specified label IDs.
    repeated string labelIds = 5;
    // Maximum number of threads to return.
    int32 maxResults = 6;
    string oauth_token = 7;
    // Page token to retrieve a specific page of results in the list.
    string pageToken = 8;
    boolean prettyPrint = 9;
    // Only return threads matching the specified query. Supports the same query format as the Gmail search box. For example, "from:someuser@example.com rfc822msgid: is:unread". Parameter cannot be used when accessing the api using the gmail.metadata scope.
    string q = 10;
    string quotaUser = 11;
    // The user's email address. The special value me can be used to indicate the authenticated user.
    string userId = 12;
    string userIp = 13;
}

message GetUserIdThreadsIdRequest {
    alt alt = 1;
    string fields = 2;
    // The format to return the messages in.
    enum GetUserIdThreadsIdRequest_Format {
        GETUSERIDTHREADSIDREQUEST_FORMAT_FULL = 0;
        GETUSERIDTHREADSIDREQUEST_FORMAT_METADATA = 1;
        GETUSERIDTHREADSIDREQUEST_FORMAT_MINIMAL = 2;
    }
    GetUserIdThreadsIdRequest_Format format = 3;
    // The ID of the thread to retrieve.
    string id = 4;
    string key = 5;
    // When given and format is METADATA, only include headers specified.
    repeated string metadataHeaders = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    // The user's email address. The special value me can be used to indicate the authenticated user.
    string userId = 10;
    string userIp = 11;
}

message DeleteUserIdThreadsIdRequest {
    alt alt = 1;
    string fields = 2;
    // ID of the Thread to delete.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The user's email address. The special value me can be used to indicate the authenticated user.
    string userId = 8;
    string userIp = 9;
}

message PostUserIdThreadsIdModifyRequest {
    alt alt = 1;
    ModifyThreadRequest body = 2;
    string fields = 3;
    // The ID of the thread to modify.
    string id = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // The user's email address. The special value me can be used to indicate the authenticated user.
    string userId = 9;
    string userIp = 10;
}

message PostUserIdThreadsIdTrashRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the thread to Trash.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The user's email address. The special value me can be used to indicate the authenticated user.
    string userId = 8;
    string userIp = 9;
}

message PostUserIdThreadsIdUntrashRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the thread to remove from Trash.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The user's email address. The special value me can be used to indicate the authenticated user.
    string userId = 8;
    string userIp = 9;
}

message PostUserIdWatchRequest {
    alt alt = 1;
    WatchRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The user's email address. The special value me can be used to indicate the authenticated user.
    string userId = 8;
    string userIp = 9;
}

message AutoForwarding {
    // The state that a message should be left in after it has been forwarded.
    enum AutoForwarding_Disposition {
        AUTOFORWARDING_DISPOSITION_ARCHIVE = 0;
        AUTOFORWARDING_DISPOSITION_DISPOSITIONUNSPECIFIED = 1;
        AUTOFORWARDING_DISPOSITION_LEAVEININBOX = 2;
        AUTOFORWARDING_DISPOSITION_MARKREAD = 3;
        AUTOFORWARDING_DISPOSITION_TRASH = 4;
    }
    AutoForwarding_Disposition disposition = 1;
    // Email address to which all incoming messages are forwarded. This email address must be a verified member of the forwarding addresses.
    string emailAddress = 2;
    // Whether all incoming mail is automatically forwarded to another address.
    bool enabled = 3;
}

message BatchDeleteMessagesRequest {
    // The IDs of the messages to delete.
    repeated string ids = 1;
}

message BatchModifyMessagesRequest {
    // A list of label IDs to add to messages.
    repeated string addLabelIds = 1;
    // The IDs of the messages to modify. There is a limit of 1000 ids per request.
    repeated string ids = 2;
    // A list of label IDs to remove from messages.
    repeated string removeLabelIds = 3;
}

message Draft {
    // The immutable ID of the draft.
    string id = 1;
    // The message content of the draft.
    Message message = 2;
}

message Filter {
    // Action that the filter performs.
    FilterAction action = 1;
    // Matching criteria for the filter.
    FilterCriteria criteria = 2;
    // The server assigned ID of the filter.
    string id = 3;
}

message FilterAction {
    // List of labels to add to the message.
    repeated string addLabelIds = 1;
    // Email address that the message should be forwarded to.
    string forward = 2;
    // List of labels to remove from the message.
    repeated string removeLabelIds = 3;
}

message FilterCriteria {
    // Whether the response should exclude chats.
    bool excludeChats = 1;
    // The sender's display name or email address.
    string from = 2;
    // Whether the message has any attachment.
    bool hasAttachment = 3;
    // Only return messages not matching the specified query. Supports the same query format as the Gmail search box. For example, "from:someuser@example.com rfc822msgid: is:unread".
    string negatedQuery = 4;
    // Only return messages matching the specified query. Supports the same query format as the Gmail search box. For example, "from:someuser@example.com rfc822msgid: is:unread".
    string query = 5;
    // The size of the entire RFC822 message in bytes, including all headers and attachments.
    int32 size = 6;
    // How the message size in bytes should be in relation to the size field.
    enum FilterCriteria_SizeComparison {
        FILTERCRITERIA_SIZECOMPARISON_LARGER = 0;
        FILTERCRITERIA_SIZECOMPARISON_SMALLER = 1;
        FILTERCRITERIA_SIZECOMPARISON_UNSPECIFIED = 2;
    }
    FilterCriteria_SizeComparison sizeComparison = 7;
    // Case-insensitive phrase found in the message's subject. Trailing and leading whitespace are be trimmed and adjacent spaces are collapsed.
    string subject = 8;
    // The recipient's display name or email address. Includes recipients in the "to", "cc", and "bcc" header fields. You can use simply the local part of the email address. For example, "example" and "example@" both match "example@gmail.com". This field is case-insensitive.
    string to = 9;
}

message ForwardingAddress {
    // An email address to which messages can be forwarded.
    string forwardingEmail = 1;
    // Indicates whether this address has been verified and is usable for forwarding. Read-only.
    enum ForwardingAddress_VerificationStatu {
        FORWARDINGADDRESS_VERIFICATIONSTATU_ACCEPTED = 0;
        FORWARDINGADDRESS_VERIFICATIONSTATU_PENDING = 1;
        FORWARDINGADDRESS_VERIFICATIONSTATU_VERIFICATIONSTATUSUNSPECIFIED = 2;
    }
    ForwardingAddress_VerificationStatu verificationStatus = 2;
}

message History {
    // The mailbox sequence ID.
    string id = 1;
    // Labels added to messages in this history record.
    repeated HistoryLabelAdded labelsAdded = 2;
    // Labels removed from messages in this history record.
    repeated HistoryLabelRemoved labelsRemoved = 3;
    // List of messages changed in this history record. The fields for specific change types, such as messagesAdded may duplicate messages in this field. We recommend using the specific change-type fields instead of this.
    repeated Message messages = 4;
    // Messages added to the mailbox in this history record.
    repeated HistoryMessageAdded messagesAdded = 5;
    // Messages deleted (not Trashed) from the mailbox in this history record.
    repeated HistoryMessageDeleted messagesDeleted = 6;
}

message HistoryLabelAdded {
    // Label IDs added to the message.
    repeated string labelIds = 1;
    Message message = 2;
}

message HistoryLabelRemoved {
    // Label IDs removed from the message.
    repeated string labelIds = 1;
    Message message = 2;
}

message HistoryMessageAdded {
    Message message = 1;
}

message HistoryMessageDeleted {
    Message message = 1;
}

message ImapSettings {
    // If this value is true, Gmail will immediately expunge a message when it is marked as deleted in IMAP. Otherwise, Gmail will wait for an update from the client before expunging messages marked as deleted.
    bool autoExpunge = 1;
    // Whether IMAP is enabled for the account.
    bool enabled = 2;
    // The action that will be executed on a message when it is marked as deleted and expunged from the last visible IMAP folder.
    enum ImapSettings_ExpungeBehavior {
        IMAPSETTINGS_EXPUNGEBEHAVIOR_ARCHIVE = 0;
        IMAPSETTINGS_EXPUNGEBEHAVIOR_DELETEFOREVER = 1;
        IMAPSETTINGS_EXPUNGEBEHAVIOR_EXPUNGEBEHAVIORUNSPECIFIED = 2;
        IMAPSETTINGS_EXPUNGEBEHAVIOR_TRASH = 3;
    }
    ImapSettings_ExpungeBehavior expungeBehavior = 3;
    // An optional limit on the number of messages that an IMAP folder may contain. Legal values are 0, 1000, 2000, 5000 or 10000. A value of zero is interpreted to mean that there is no limit.
    int32 maxFolderSize = 4;
}

message Label {
    // The immutable ID of the label.
    string id = 1;
    // The visibility of the label in the label list in the Gmail web interface.
    enum Label_LabelListVisibility {
        LABEL_LABELLISTVISIBILITY_LABELHIDE = 0;
        LABEL_LABELLISTVISIBILITY_LABELSHOW = 1;
        LABEL_LABELLISTVISIBILITY_LABELSHOWIFUNREAD = 2;
    }
    Label_LabelListVisibility labelListVisibility = 2;
    // The visibility of the label in the message list in the Gmail web interface.
    enum Label_MessageListVisibility {
        LABEL_MESSAGELISTVISIBILITY_HIDE = 0;
        LABEL_MESSAGELISTVISIBILITY_SHOW = 1;
    }
    Label_MessageListVisibility messageListVisibility = 3;
    // The total number of messages with the label.
    int32 messagesTotal = 4;
    // The number of unread messages with the label.
    int32 messagesUnread = 5;
    // The display name of the label.
    string name = 6;
    // The total number of threads with the label.
    int32 threadsTotal = 7;
    // The number of unread threads with the label.
    int32 threadsUnread = 8;
    // The owner type for the label. User labels are created by the user and can be modified and deleted by the user and can be applied to any message or thread. System labels are internally created and cannot be added, modified, or deleted. System labels may be able to be applied to or removed from messages and threads under some circumstances but this is not guaranteed. For example, users can apply and remove the INBOX and UNREAD labels from messages and threads, but cannot apply or remove the DRAFTS or SENT labels from messages or threads.
    enum Label_Type {
        LABEL_TYPE_SYSTEM = 0;
        LABEL_TYPE_USER = 1;
    }
    Label_Type type = 9;
}

message ListDraftsResponse {
    // List of drafts.
    repeated Draft drafts = 1;
    // Token to retrieve the next page of results in the list.
    string nextPageToken = 2;
    // Estimated total number of results.
    uint32 resultSizeEstimate = 3;
}

message ListFiltersResponse {
    // List of a user's filters.
    repeated Filter filter = 1;
}

message ListForwardingAddressesResponse {
    // List of addresses that may be used for forwarding.
    repeated ForwardingAddress forwardingAddresses = 1;
}

message ListHistoryResponse {
    // List of history records. Any messages contained in the response will typically only have id and threadId fields populated.
    repeated History history = 1;
    // The ID of the mailbox's current history record.
    string historyId = 2;
    // Page token to retrieve the next page of results in the list.
    string nextPageToken = 3;
}

message ListLabelsResponse {
    // List of labels.
    repeated Label labels = 1;
}

message ListMessagesResponse {
    // List of messages.
    repeated Message messages = 1;
    // Token to retrieve the next page of results in the list.
    string nextPageToken = 2;
    // Estimated total number of results.
    uint32 resultSizeEstimate = 3;
}

message ListSendAsResponse {
    // List of send-as aliases.
    repeated SendAs sendAs = 1;
}

message ListSmimeInfoResponse {
    // List of SmimeInfo.
    repeated SmimeInfo smimeInfo = 1;
}

message ListThreadsResponse {
    // Page token to retrieve the next page of results in the list.
    string nextPageToken = 1;
    // Estimated total number of results.
    uint32 resultSizeEstimate = 2;
    // List of threads.
    repeated Thread threads = 3;
}

message Message {
    // The ID of the last history record that modified this message.
    string historyId = 1;
    // The immutable ID of the message.
    string id = 2;
    // The internal message creation timestamp (epoch ms), which determines ordering in the inbox. For normal SMTP-received email, this represents the time the message was originally accepted by Google, which is more reliable than the Date header. However, for API-migrated mail, it can be configured by client to be based on the Date header.
    string internalDate = 3;
    // List of IDs of labels applied to this message.
    repeated string labelIds = 4;
    // The parsed email structure in the message parts.
    MessagePart payload = 5;
    // The entire email message in an RFC 2822 formatted and base64url encoded string. Returned in messages.get and drafts.get responses when the format=RAW parameter is supplied.
    string raw = 6;
    // Estimated size in bytes of the message.
    int32 sizeEstimate = 7;
    // A short part of the message text.
    string snippet = 8;
    // The ID of the thread the message belongs to. To add a message or draft to a thread, the following criteria must be met: 
    // - The requested threadId must be specified on the Message or Draft.Message you supply with your request. 
    // - The References and In-Reply-To headers must be set in compliance with the RFC 2822 standard. 
    // - The Subject headers must match.
    string threadId = 9;
}

message MessagePart {
    // The message part body for this part, which may be empty for container MIME message parts.
    MessagePartBody body = 1;
    // The filename of the attachment. Only present if this message part represents an attachment.
    string filename = 2;
    // List of headers on this message part. For the top-level message part, representing the entire message payload, it will contain the standard RFC 2822 email headers such as To, From, and Subject.
    repeated MessagePartHeader headers = 3;
    // The MIME type of the message part.
    string mimeType = 4;
    // The immutable ID of the message part.
    string partId = 5;
    // The child MIME message parts of this part. This only applies to container MIME message parts, for example multipart/*. For non- container MIME message part types, such as text/plain, this field is empty. For more information, see RFC 1521.
    repeated MessagePart parts = 6;
}

message MessagePartBody {
    // When present, contains the ID of an external attachment that can be retrieved in a separate messages.attachments.get request. When not present, the entire content of the message part body is contained in the data field.
    string attachmentId = 1;
    // The body data of a MIME message part as a base64url encoded string. May be empty for MIME container types that have no message body or when the body data is sent as a separate attachment. An attachment ID is present if the body data is contained in a separate attachment.
    string data = 2;
    // Number of bytes for the message part data (encoding notwithstanding).
    int32 size = 3;
}

message MessagePartHeader {
    // The name of the header before the : separator. For example, To.
    string name = 1;
    // The value of the header after the : separator. For example, someuser@example.com.
    string value = 2;
}

message ModifyMessageRequest {
    // A list of IDs of labels to add to this message.
    repeated string addLabelIds = 1;
    // A list IDs of labels to remove from this message.
    repeated string removeLabelIds = 2;
}

message ModifyThreadRequest {
    // A list of IDs of labels to add to this thread.
    repeated string addLabelIds = 1;
    // A list of IDs of labels to remove from this thread.
    repeated string removeLabelIds = 2;
}

message PopSettings {
    // The range of messages which are accessible via POP.
    enum PopSettings_AccessWindow {
        POPSETTINGS_ACCESSWINDOW_ACCESSWINDOWUNSPECIFIED = 0;
        POPSETTINGS_ACCESSWINDOW_ALLMAIL = 1;
        POPSETTINGS_ACCESSWINDOW_DISABLED = 2;
        POPSETTINGS_ACCESSWINDOW_FROMNOWON = 3;
    }
    PopSettings_AccessWindow accessWindow = 1;
    // The action that will be executed on a message after it has been fetched via POP.
    enum PopSettings_Disposition {
        POPSETTINGS_DISPOSITION_ARCHIVE = 0;
        POPSETTINGS_DISPOSITION_DISPOSITIONUNSPECIFIED = 1;
        POPSETTINGS_DISPOSITION_LEAVEININBOX = 2;
        POPSETTINGS_DISPOSITION_MARKREAD = 3;
        POPSETTINGS_DISPOSITION_TRASH = 4;
    }
    PopSettings_Disposition disposition = 2;
}

message Profile {
    // The user's email address.
    string emailAddress = 1;
    // The ID of the mailbox's current history record.
    string historyId = 2;
    // The total number of messages in the mailbox.
    int32 messagesTotal = 3;
    // The total number of threads in the mailbox.
    int32 threadsTotal = 4;
}

message SendAs {
    // A name that appears in the "From:" header for mail sent using this alias. For custom "from" addresses, when this is empty, Gmail will populate the "From:" header with the name that is used for the primary address associated with the account.
    string displayName = 1;
    // Whether this address is selected as the default "From:" address in situations such as composing a new message or sending a vacation auto-reply. Every Gmail account has exactly one default send-as address, so the only legal value that clients may write to this field is true. Changing this from false to true for an address will result in this field becoming false for the other previous default address.
    bool isDefault = 2;
    // Whether this address is the primary address used to login to the account. Every Gmail account has exactly one primary address, and it cannot be deleted from the collection of send-as aliases. This field is read-only.
    bool isPrimary = 3;
    // An optional email address that is included in a "Reply-To:" header for mail sent using this alias. If this is empty, Gmail will not generate a "Reply-To:" header.
    string replyToAddress = 4;
    // The email address that appears in the "From:" header for mail sent using this alias. This is read-only for all operations except create.
    string sendAsEmail = 5;
    // An optional HTML signature that is included in messages composed with this alias in the Gmail web UI.
    string signature = 6;
    // An optional SMTP service that will be used as an outbound relay for mail sent using this alias. If this is empty, outbound mail will be sent directly from Gmail's servers to the destination SMTP service. This setting only applies to custom "from" aliases.
    SmtpMsa smtpMsa = 7;
    // Whether Gmail should  treat this address as an alias for the user's primary email address. This setting only applies to custom "from" aliases.
    bool treatAsAlias = 8;
    // Indicates whether this address has been verified for use as a send-as alias. Read-only. This setting only applies to custom "from" aliases.
    enum SendAs_VerificationStatu {
        SENDAS_VERIFICATIONSTATU_ACCEPTED = 0;
        SENDAS_VERIFICATIONSTATU_PENDING = 1;
        SENDAS_VERIFICATIONSTATU_VERIFICATIONSTATUSUNSPECIFIED = 2;
    }
    SendAs_VerificationStatu verificationStatus = 9;
}

message SmimeInfo {
    // Encrypted key password, when key is encrypted.
    string encryptedKeyPassword = 1;
    // When the certificate expires (in milliseconds since epoch).
    string expiration = 2;
    // The immutable ID for the SmimeInfo.
    string id = 3;
    // Whether this SmimeInfo is the default one for this user's send-as address.
    bool isDefault = 4;
    // The S/MIME certificate issuer's common name.
    string issuerCn = 5;
    // PEM formatted X509 concatenated certificate string (standard base64 encoding). Format used for returning key, which includes public key as well as certificate chain (not private key).
    string pem = 6;
    // PKCS#12 format containing a single private/public key pair and certificate chain. This format is only accepted from client for creating a new SmimeInfo and is never returned, because the private key is not intended to be exported. PKCS#12 may be encrypted, in which case encryptedKeyPassword should be set appropriately.
    string pkcs12 = 7;
}

message SmtpMsa {
    // The hostname of the SMTP service. Required.
    string host = 1;
    // The password that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
    string password = 2;
    // The port of the SMTP service. Required.
    int32 port = 3;
    // The protocol that will be used to secure communication with the SMTP service. Required.
    enum SmtpMsa_SecurityMode {
        SMTPMSA_SECURITYMODE_NONE = 0;
        SMTPMSA_SECURITYMODE_SECURITYMODEUNSPECIFIED = 1;
        SMTPMSA_SECURITYMODE_SSL = 2;
        SMTPMSA_SECURITYMODE_STARTTLS = 3;
    }
    SmtpMsa_SecurityMode securityMode = 4;
    // The username that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
    string username = 5;
}

message Thread {
    // The ID of the last history record that modified this thread.
    string historyId = 1;
    // The unique ID of the thread.
    string id = 2;
    // The list of messages in the thread.
    repeated Message messages = 3;
    // A short part of the message text.
    string snippet = 4;
}

message VacationSettings {
    // Flag that controls whether Gmail automatically replies to messages.
    bool enableAutoReply = 1;
    // An optional end time for sending auto-replies (epoch ms). When this is specified, Gmail will automatically reply only to messages that it receives before the end time. If both startTime and endTime are specified, startTime must precede endTime.
    string endTime = 2;
    // Response body in HTML format. Gmail will sanitize the HTML before storing it.
    string responseBodyHtml = 3;
    // Response body in plain text format.
    string responseBodyPlainText = 4;
    // Optional text to prepend to the subject line in vacation responses. In order to enable auto-replies, either the response subject or the response body must be nonempty.
    string responseSubject = 5;
    // Flag that determines whether responses are sent to recipients who are not in the user's list of contacts.
    bool restrictToContacts = 6;
    // Flag that determines whether responses are sent to recipients who are outside of the user's domain. This feature is only available for G Suite users.
    bool restrictToDomain = 7;
    // An optional start time for sending auto-replies (epoch ms). When this is specified, Gmail will automatically reply only to messages that it receives after the start time. If both startTime and endTime are specified, startTime must precede endTime.
    string startTime = 8;
}

message WatchRequest {
    // Filtering behavior of labelIds list specified.
    enum WatchRequest_LabelFilterAction {
        WATCHREQUEST_LABELFILTERACTION_EXCLUDE = 0;
        WATCHREQUEST_LABELFILTERACTION_INCLUDE = 1;
    }
    WatchRequest_LabelFilterAction labelFilterAction = 1;
    // List of label_ids to restrict notifications about. By default, if unspecified, all changes are pushed out. If specified then dictates which labels are required for a push notification to be generated.
    repeated string labelIds = 2;
    // A fully qualified Google Cloud Pub/Sub API topic name to publish the events to. This topic name **must** already exist in Cloud Pub/Sub and you **must** have already granted gmail "publish" permission on it. For example, "projects/my-project-identifier/topics/my-topic-name" (using the Cloud Pub/Sub "v1" topic naming format).
    // 
    // Note that the "my-project-identifier" portion must exactly match your Google developer project id (the one executing this watch request).
    string topicName = 3;
}

message WatchResponse {
    // When Gmail will stop sending notifications for mailbox updates (epoch millis). Call watch again before this time to renew the watch.
    string expiration = 1;
    // The ID of the mailbox's current history record.
    string historyId = 2;
}

enum Alt {
    JSON = 0;
}

service GmailService {
    // Lists the drafts in the user's mailbox.
    rpc GetUserIdDrafts(GetUserIdDraftsRequest) returns (ListDraftsResponse) {
      option (google.api.http) = {
        get: "/gmail/v1/users/{userId}/drafts"
      };
    }
    // Creates a new draft with the DRAFT label.
    rpc PostUserIdDrafts(PostUserIdDraftsRequest) returns (Draft) {
      option (google.api.http) = {
        post: "/gmail/v1/users/{userId}/drafts"
        body: "body"
      };
    }
    // Sends the specified, existing draft to the recipients in the To, Cc, and Bcc headers.
    rpc PostUserIdDraftsSend(PostUserIdDraftsSendRequest) returns (Message) {
      option (google.api.http) = {
        post: "/gmail/v1/users/{userId}/drafts/send"
        body: "body"
      };
    }
    // Gets the specified draft.
    rpc GetUserIdDraftsId(GetUserIdDraftsIdRequest) returns (Draft) {
      option (google.api.http) = {
        get: "/gmail/v1/users/{userId}/drafts/{id}"
      };
    }
    // Replaces a draft's content.
    rpc PutUserIdDraftsId(PutUserIdDraftsIdRequest) returns (Draft) {
      option (google.api.http) = {
        put: "/gmail/v1/users/{userId}/drafts/{id}"
        body: "body"
      };
    }
    // Immediately and permanently deletes the specified draft. Does not simply trash it.
    rpc DeleteUserIdDraftsId(DeleteUserIdDraftsIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/gmail/v1/users/{userId}/drafts/{id}"
      };
    }
    // Lists the history of all changes to the given mailbox. History results are returned in chronological order (increasing historyId).
    rpc GetUserIdHistory(GetUserIdHistoryRequest) returns (ListHistoryResponse) {
      option (google.api.http) = {
        get: "/gmail/v1/users/{userId}/history"
      };
    }
    // Lists all labels in the user's mailbox.
    rpc GetUserIdLabels(GetUserIdLabelsRequest) returns (ListLabelsResponse) {
      option (google.api.http) = {
        get: "/gmail/v1/users/{userId}/labels"
      };
    }
    // Creates a new label.
    rpc PostUserIdLabels(PostUserIdLabelsRequest) returns (Label) {
      option (google.api.http) = {
        post: "/gmail/v1/users/{userId}/labels"
        body: "body"
      };
    }
    // Gets the specified label.
    rpc GetUserIdLabelsId(GetUserIdLabelsIdRequest) returns (Label) {
      option (google.api.http) = {
        get: "/gmail/v1/users/{userId}/labels/{id}"
      };
    }
    // Updates the specified label.
    rpc PutUserIdLabelsId(PutUserIdLabelsIdRequest) returns (Label) {
      option (google.api.http) = {
        put: "/gmail/v1/users/{userId}/labels/{id}"
        body: "body"
      };
    }
    // Immediately and permanently deletes the specified label and removes it from any messages and threads that it is applied to.
    rpc DeleteUserIdLabelsId(DeleteUserIdLabelsIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/gmail/v1/users/{userId}/labels/{id}"
      };
    }
    // Lists the messages in the user's mailbox.
    rpc GetUserIdMessages(GetUserIdMessagesRequest) returns (ListMessagesResponse) {
      option (google.api.http) = {
        get: "/gmail/v1/users/{userId}/messages"
      };
    }
    // Directly inserts a message into only this user's mailbox similar to IMAP APPEND, bypassing most scanning and classification. Does not send a message.
    rpc PostUserIdMessages(PostUserIdMessagesRequest) returns (Message) {
      option (google.api.http) = {
        post: "/gmail/v1/users/{userId}/messages"
        body: "body"
      };
    }
    // Deletes many messages by message ID. Provides no guarantees that messages were not already deleted or even existed at all.
    rpc PostUserIdMessagesBatchDelete(PostUserIdMessagesBatchDeleteRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/gmail/v1/users/{userId}/messages/batchDelete"
        body: "body"
      };
    }
    // Modifies the labels on the specified messages.
    rpc PostUserIdMessagesBatchModify(PostUserIdMessagesBatchModifyRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/gmail/v1/users/{userId}/messages/batchModify"
        body: "body"
      };
    }
    // Imports a message into only this user's mailbox, with standard email delivery scanning and classification similar to receiving via SMTP. Does not send a message.
    rpc PostUserIdMessagesImport(PostUserIdMessagesImportRequest) returns (Message) {
      option (google.api.http) = {
        post: "/gmail/v1/users/{userId}/messages/import"
        body: "body"
      };
    }
    // Sends the specified message to the recipients in the To, Cc, and Bcc headers.
    rpc PostUserIdMessagesSend(PostUserIdMessagesSendRequest) returns (Message) {
      option (google.api.http) = {
        post: "/gmail/v1/users/{userId}/messages/send"
        body: "body"
      };
    }
    // Gets the specified message.
    rpc GetUserIdMessagesId(GetUserIdMessagesIdRequest) returns (Message) {
      option (google.api.http) = {
        get: "/gmail/v1/users/{userId}/messages/{id}"
      };
    }
    // Immediately and permanently deletes the specified message. This operation cannot be undone. Prefer messages.trash instead.
    rpc DeleteUserIdMessagesId(DeleteUserIdMessagesIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/gmail/v1/users/{userId}/messages/{id}"
      };
    }
    // Modifies the labels on the specified message.
    rpc PostUserIdMessagesIdModify(PostUserIdMessagesIdModifyRequest) returns (Message) {
      option (google.api.http) = {
        post: "/gmail/v1/users/{userId}/messages/{id}/modify"
        body: "body"
      };
    }
    // Moves the specified message to the trash.
    rpc PostUserIdMessagesIdTrash(PostUserIdMessagesIdTrashRequest) returns (Message) {
      option (google.api.http) = {
        post: "/gmail/v1/users/{userId}/messages/{id}/trash"
      };
    }
    // Removes the specified message from the trash.
    rpc PostUserIdMessagesIdUntrash(PostUserIdMessagesIdUntrashRequest) returns (Message) {
      option (google.api.http) = {
        post: "/gmail/v1/users/{userId}/messages/{id}/untrash"
      };
    }
    // Gets the specified message attachment.
    rpc GetUserIdMessagesMessageIdAttachmentsId(GetUserIdMessagesMessageIdAttachmentsIdRequest) returns (MessagePartBody) {
      option (google.api.http) = {
        get: "/gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}"
      };
    }
    // Gets the current user's Gmail profile.
    rpc GetUserIdProfile(GetUserIdProfileRequest) returns (Profile) {
      option (google.api.http) = {
        get: "/gmail/v1/users/{userId}/profile"
      };
    }
    // Gets the auto-forwarding setting for the specified account.
    rpc GetUserIdSettingsAutoForwarding(GetUserIdSettingsAutoForwardingRequest) returns (AutoForwarding) {
      option (google.api.http) = {
        get: "/gmail/v1/users/{userId}/settings/autoForwarding"
      };
    }
    // Updates the auto-forwarding setting for the specified account. A verified forwarding address must be specified when auto-forwarding is enabled.
    // 
    // This method is only available to service account clients that have been delegated domain-wide authority.
    rpc PutUserIdSettingsAutoForwarding(PutUserIdSettingsAutoForwardingRequest) returns (AutoForwarding) {
      option (google.api.http) = {
        put: "/gmail/v1/users/{userId}/settings/autoForwarding"
        body: "body"
      };
    }
    // Lists the message filters of a Gmail user.
    rpc GetUserIdSettingsFilters(GetUserIdSettingsFiltersRequest) returns (ListFiltersResponse) {
      option (google.api.http) = {
        get: "/gmail/v1/users/{userId}/settings/filters"
      };
    }
    // Creates a filter.
    rpc PostUserIdSettingsFilters(PostUserIdSettingsFiltersRequest) returns (Filter) {
      option (google.api.http) = {
        post: "/gmail/v1/users/{userId}/settings/filters"
        body: "body"
      };
    }
    // Gets a filter.
    rpc GetUserIdSettingsFiltersId(GetUserIdSettingsFiltersIdRequest) returns (Filter) {
      option (google.api.http) = {
        get: "/gmail/v1/users/{userId}/settings/filters/{id}"
      };
    }
    // Deletes a filter.
    rpc DeleteUserIdSettingsFiltersId(DeleteUserIdSettingsFiltersIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/gmail/v1/users/{userId}/settings/filters/{id}"
      };
    }
    // Lists the forwarding addresses for the specified account.
    rpc GetUserIdSettingsForwardingAddresses(GetUserIdSettingsForwardingAddressesRequest) returns (ListForwardingAddressesResponse) {
      option (google.api.http) = {
        get: "/gmail/v1/users/{userId}/settings/forwardingAddresses"
      };
    }
    // Creates a forwarding address. If ownership verification is required, a message will be sent to the recipient and the resource's verification status will be set to pending; otherwise, the resource will be created with verification status set to accepted.
    // 
    // This method is only available to service account clients that have been delegated domain-wide authority.
    rpc PostUserIdSettingsForwardingAddresses(PostUserIdSettingsForwardingAddressesRequest) returns (ForwardingAddress) {
      option (google.api.http) = {
        post: "/gmail/v1/users/{userId}/settings/forwardingAddresses"
        body: "body"
      };
    }
    // Gets the specified forwarding address.
    rpc GetUserIdSettingsForwardingAddressesForwardingEmail(GetUserIdSettingsForwardingAddressesForwardingEmailRequest) returns (ForwardingAddress) {
      option (google.api.http) = {
        get: "/gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}"
      };
    }
    // Deletes the specified forwarding address and revokes any verification that may have been required.
    // 
    // This method is only available to service account clients that have been delegated domain-wide authority.
    rpc DeleteUserIdSettingsForwardingAddressesForwardingEmail(DeleteUserIdSettingsForwardingAddressesForwardingEmailRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}"
      };
    }
    // Gets IMAP settings.
    rpc GetUserIdSettingsImap(GetUserIdSettingsImapRequest) returns (ImapSettings) {
      option (google.api.http) = {
        get: "/gmail/v1/users/{userId}/settings/imap"
      };
    }
    // Updates IMAP settings.
    rpc PutUserIdSettingsImap(PutUserIdSettingsImapRequest) returns (ImapSettings) {
      option (google.api.http) = {
        put: "/gmail/v1/users/{userId}/settings/imap"
        body: "body"
      };
    }
    // Gets POP settings.
    rpc GetUserIdSettingsPop(GetUserIdSettingsPopRequest) returns (PopSettings) {
      option (google.api.http) = {
        get: "/gmail/v1/users/{userId}/settings/pop"
      };
    }
    // Updates POP settings.
    rpc PutUserIdSettingsPop(PutUserIdSettingsPopRequest) returns (PopSettings) {
      option (google.api.http) = {
        put: "/gmail/v1/users/{userId}/settings/pop"
        body: "body"
      };
    }
    // Lists the send-as aliases for the specified account. The result includes the primary send-as address associated with the account as well as any custom "from" aliases.
    rpc GetUserIdSettingsSendAs(GetUserIdSettingsSendAsRequest) returns (ListSendAsResponse) {
      option (google.api.http) = {
        get: "/gmail/v1/users/{userId}/settings/sendAs"
      };
    }
    // Creates a custom "from" send-as alias. If an SMTP MSA is specified, Gmail will attempt to connect to the SMTP service to validate the configuration before creating the alias. If ownership verification is required for the alias, a message will be sent to the email address and the resource's verification status will be set to pending; otherwise, the resource will be created with verification status set to accepted. If a signature is provided, Gmail will sanitize the HTML before saving it with the alias.
    // 
    // This method is only available to service account clients that have been delegated domain-wide authority.
    rpc PostUserIdSettingsSendAs(PostUserIdSettingsSendAsRequest) returns (SendAs) {
      option (google.api.http) = {
        post: "/gmail/v1/users/{userId}/settings/sendAs"
        body: "body"
      };
    }
    // Gets the specified send-as alias. Fails with an HTTP 404 error if the specified address is not a member of the collection.
    rpc GetUserIdSettingsSendAsSendAsEmail(GetUserIdSettingsSendAsSendAsEmailRequest) returns (SendAs) {
      option (google.api.http) = {
        get: "/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}"
      };
    }
    // Updates a send-as alias. If a signature is provided, Gmail will sanitize the HTML before saving it with the alias.
    // 
    // Addresses other than the primary address for the account can only be updated by service account clients that have been delegated domain-wide authority.
    rpc PutUserIdSettingsSendAsSendAsEmail(PutUserIdSettingsSendAsSendAsEmailRequest) returns (SendAs) {
      option (google.api.http) = {
        put: "/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}"
        body: "body"
      };
    }
    // Deletes the specified send-as alias. Revokes any verification that may have been required for using it.
    // 
    // This method is only available to service account clients that have been delegated domain-wide authority.
    rpc DeleteUserIdSettingsSendAsSendAsEmail(DeleteUserIdSettingsSendAsSendAsEmailRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}"
      };
    }
    // Lists S/MIME configs for the specified send-as alias.
    rpc GetUserIdSettingsSendAsSendAsEmailSmimeInfo(GetUserIdSettingsSendAsSendAsEmailSmimeInfoRequest) returns (ListSmimeInfoResponse) {
      option (google.api.http) = {
        get: "/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo"
      };
    }
    // Insert (upload) the given S/MIME config for the specified send-as alias. Note that pkcs12 format is required for the key.
    rpc PostUserIdSettingsSendAsSendAsEmailSmimeInfo(PostUserIdSettingsSendAsSendAsEmailSmimeInfoRequest) returns (SmimeInfo) {
      option (google.api.http) = {
        post: "/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo"
        body: "body"
      };
    }
    // Gets the specified S/MIME config for the specified send-as alias.
    rpc GetUserIdSettingsSendAsSendAsEmailSmimeInfoId(GetUserIdSettingsSendAsSendAsEmailSmimeInfoIdRequest) returns (SmimeInfo) {
      option (google.api.http) = {
        get: "/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}"
      };
    }
    // Deletes the specified S/MIME config for the specified send-as alias.
    rpc DeleteUserIdSettingsSendAsSendAsEmailSmimeInfoId(DeleteUserIdSettingsSendAsSendAsEmailSmimeInfoIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}"
      };
    }
    // Sets the default S/MIME config for the specified send-as alias.
    rpc PostUserIdSettingsSendAsSendAsEmailSmimeInfoIdSetDefault(PostUserIdSettingsSendAsSendAsEmailSmimeInfoIdSetDefaultRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault"
      };
    }
    // Sends a verification email to the specified send-as alias address. The verification status must be pending.
    // 
    // This method is only available to service account clients that have been delegated domain-wide authority.
    rpc PostUserIdSettingsSendAsSendAsEmailVerify(PostUserIdSettingsSendAsSendAsEmailVerifyRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/verify"
      };
    }
    // Gets vacation responder settings.
    rpc GetUserIdSettingsVacation(GetUserIdSettingsVacationRequest) returns (VacationSettings) {
      option (google.api.http) = {
        get: "/gmail/v1/users/{userId}/settings/vacation"
      };
    }
    // Updates vacation responder settings.
    rpc PutUserIdSettingsVacation(PutUserIdSettingsVacationRequest) returns (VacationSettings) {
      option (google.api.http) = {
        put: "/gmail/v1/users/{userId}/settings/vacation"
        body: "body"
      };
    }
    // Stop receiving push notifications for the given user mailbox.
    rpc PostUserIdStop(PostUserIdStopRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/gmail/v1/users/{userId}/stop"
      };
    }
    // Lists the threads in the user's mailbox.
    rpc GetUserIdThreads(GetUserIdThreadsRequest) returns (ListThreadsResponse) {
      option (google.api.http) = {
        get: "/gmail/v1/users/{userId}/threads"
      };
    }
    // Gets the specified thread.
    rpc GetUserIdThreadsId(GetUserIdThreadsIdRequest) returns (Thread) {
      option (google.api.http) = {
        get: "/gmail/v1/users/{userId}/threads/{id}"
      };
    }
    // Immediately and permanently deletes the specified thread. This operation cannot be undone. Prefer threads.trash instead.
    rpc DeleteUserIdThreadsId(DeleteUserIdThreadsIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/gmail/v1/users/{userId}/threads/{id}"
      };
    }
    // Modifies the labels applied to the thread. This applies to all messages in the thread.
    rpc PostUserIdThreadsIdModify(PostUserIdThreadsIdModifyRequest) returns (Thread) {
      option (google.api.http) = {
        post: "/gmail/v1/users/{userId}/threads/{id}/modify"
        body: "body"
      };
    }
    // Moves the specified thread to the trash.
    rpc PostUserIdThreadsIdTrash(PostUserIdThreadsIdTrashRequest) returns (Thread) {
      option (google.api.http) = {
        post: "/gmail/v1/users/{userId}/threads/{id}/trash"
      };
    }
    // Removes the specified thread from the trash.
    rpc PostUserIdThreadsIdUntrash(PostUserIdThreadsIdUntrashRequest) returns (Thread) {
      option (google.api.http) = {
        post: "/gmail/v1/users/{userId}/threads/{id}/untrash"
      };
    }
    // Set up or update a push notification watch on the given user mailbox.
    rpc PostUserIdWatch(PostUserIdWatchRequest) returns (WatchResponse) {
      option (google.api.http) = {
        post: "/gmail/v1/users/{userId}/watch"
        body: "body"
      };
    }
}

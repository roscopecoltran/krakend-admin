syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package googleplaygameservicespublishing;

message GetAchievementsAchievementIdRequest {
    // The ID of the achievement used by this method.
    string achievementId = 1;
    alt alt = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PutAchievementsAchievementIdRequest {
    // The ID of the achievement used by this method.
    string achievementId = 1;
    alt alt = 2;
    AchievementConfiguration body = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message DeleteAchievementsAchievementIdRequest {
    // The ID of the achievement used by this method.
    string achievementId = 1;
    alt alt = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetApplicationsApplicationIdAchievementsRequest {
    alt alt = 1;
    // The application ID from the Google Play developer console.
    string applicationId = 2;
    string fields = 3;
    string key = 4;
    // The maximum number of resource configurations to return in the response, used for paging. For any response, the actual number of resources returned may be less than the specified maxResults.
    int32 maxResults = 5;
    string oauth_token = 6;
    // The token returned by the previous request.
    string pageToken = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostApplicationsApplicationIdAchievementsRequest {
    alt alt = 1;
    // The application ID from the Google Play developer console.
    string applicationId = 2;
    AchievementConfiguration body = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetApplicationsApplicationIdLeaderboardsRequest {
    alt alt = 1;
    // The application ID from the Google Play developer console.
    string applicationId = 2;
    string fields = 3;
    string key = 4;
    // The maximum number of resource configurations to return in the response, used for paging. For any response, the actual number of resources returned may be less than the specified maxResults.
    int32 maxResults = 5;
    string oauth_token = 6;
    // The token returned by the previous request.
    string pageToken = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostApplicationsApplicationIdLeaderboardsRequest {
    alt alt = 1;
    // The application ID from the Google Play developer console.
    string applicationId = 2;
    LeaderboardConfiguration body = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostImagesResourceIdImageTypeImageTypeRequest {
    alt alt = 1;
    string fields = 2;
    // Selects which image in a resource for this method.
    enum PostImagesResourceIdImageTypeImageTypeRequest_ImageType {
        POSTIMAGESRESOURCEIDIMAGETYPEIMAGETYPEREQUEST_IMAGETYPE_ACHIEVEMENT_ICON = 0;
        POSTIMAGESRESOURCEIDIMAGETYPEIMAGETYPEREQUEST_IMAGETYPE_LEADERBOARD_ICON = 1;
    }
    PostImagesResourceIdImageTypeImageTypeRequest_ImageType imageType = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The ID of the resource used by this method.
    string resourceId = 8;
    string userIp = 9;
}

message GetLeaderboardsLeaderboardIdRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // The ID of the leaderboard.
    string leaderboardId = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PutLeaderboardsLeaderboardIdRequest {
    alt alt = 1;
    LeaderboardConfiguration body = 2;
    string fields = 3;
    string key = 4;
    // The ID of the leaderboard.
    string leaderboardId = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message DeleteLeaderboardsLeaderboardIdRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // The ID of the leaderboard.
    string leaderboardId = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message AchievementConfiguration {
    // The type of the achievement.
    // Possible values are:  
    // - "STANDARD" - Achievement is either locked or unlocked. 
    // - "INCREMENTAL" - Achievement is incremental.
    string achievementType = 1;
    // The draft data of the achievement.
    AchievementConfigurationDetail draft = 2;
    // The ID of the achievement.
    string id = 3;
    // The initial state of the achievement.
    // Possible values are:  
    // - "HIDDEN" - Achievement is hidden. 
    // - "REVEALED" - Achievement is revealed. 
    // - "UNLOCKED" - Achievement is unlocked.
    string initialState = 4;
    // Uniquely identifies the type of this resource. Value is always the fixed string gamesConfiguration#achievementConfiguration.
    string kind = 5;
    // The read-only published data of the achievement.
    AchievementConfigurationDetail published = 6;
    // Steps to unlock. Only applicable to incremental achievements.
    int32 stepsToUnlock = 7;
    // The token for this resource.
    string token = 8;
}

message AchievementConfigurationDetail {
    // Localized strings for the achievement description.
    LocalizedStringBundle description = 1;
    // The icon url of this achievement. Writes to this field are ignored.
    string iconUrl = 2;
    // Uniquely identifies the type of this resource. Value is always the fixed string gamesConfiguration#achievementConfigurationDetail.
    string kind = 3;
    // Localized strings for the achievement name.
    LocalizedStringBundle name = 4;
    // Point value for the achievement.
    int32 pointValue = 5;
    // The sort rank of this achievement. Writes to this field are ignored.
    int32 sortRank = 6;
}

message AchievementConfigurationListResponse {
    // The achievement configurations.
    repeated AchievementConfiguration items = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#achievementConfigurationListResponse.
    string kind = 2;
    // The pagination token for the next page of results.
    string nextPageToken = 3;
}

message GamesNumberAffixConfiguration {
    // When the language requires special treatment of "small" numbers (as with 2, 3, and 4 in Czech; or numbers ending 2, 3, or 4 but not 12, 13, or 14 in Polish).
    LocalizedStringBundle few = 1;
    // When the language requires special treatment of "large" numbers (as with numbers ending 11-99 in Maltese).
    LocalizedStringBundle many = 2;
    // When the language requires special treatment of numbers like one (as with the number 1 in English and most other languages; in Russian, any number ending in 1 but not ending in 11 is in this class).
    LocalizedStringBundle one = 3;
    // When the language does not require special treatment of the given quantity (as with all numbers in Chinese, or 42 in English).
    LocalizedStringBundle other = 4;
    // When the language requires special treatment of numbers like two (as with 2 in Welsh, or 102 in Slovenian).
    LocalizedStringBundle two = 5;
    // When the language requires special treatment of the number 0 (as in Arabic).
    LocalizedStringBundle zero = 6;
}

message GamesNumberFormatConfiguration {
    // The curreny code string. Only used for CURRENCY format type.
    string currencyCode = 1;
    // The number of decimal places for number. Only used for NUMERIC format type.
    int32 numDecimalPlaces = 2;
    // The formatting for the number.
    // Possible values are:  
    // - "NUMERIC" - Numbers are formatted to have no digits or a fixed number of digits after the decimal point according to locale. An optional custom unit can be added.
    // - "TIME_DURATION" - Numbers are formatted to hours, minutes and seconds.
    // - "CURRENCY" - Numbers are formatted to currency according to locale.
    string numberFormatType = 3;
    // An optional suffix for the NUMERIC format type. These strings follow the same  plural rules as all Android string resources.
    GamesNumberAffixConfiguration suffix = 4;
}

message ImageConfiguration {
    // The image type for the image.
    string imageType = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string gamesConfiguration#imageConfiguration.
    string kind = 2;
    // The resource ID of resource which the image belongs to.
    string resourceId = 3;
    // The url for this image.
    string url = 4;
}

message LeaderboardConfiguration {
    // The draft data of the leaderboard.
    LeaderboardConfigurationDetail draft = 1;
    // The ID of the leaderboard.
    string id = 2;
    // Uniquely identifies the type of this resource. Value is always the fixed string gamesConfiguration#leaderboardConfiguration.
    string kind = 3;
    // The read-only published data of the leaderboard.
    LeaderboardConfigurationDetail published = 4;
    // Maximum score that can be posted to this leaderboard.
    string scoreMax = 5;
    // Minimum score that can be posted to this leaderboard.
    string scoreMin = 6;
    // The type of the leaderboard.
    // Possible values are:  
    // - "LARGER_IS_BETTER" - Larger scores posted are ranked higher. 
    // - "SMALLER_IS_BETTER" - Smaller scores posted are ranked higher.
    string scoreOrder = 7;
    // The token for this resource.
    string token = 8;
}

message LeaderboardConfigurationDetail {
    // The icon url of this leaderboard. Writes to this field are ignored.
    string iconUrl = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string gamesConfiguration#leaderboardConfigurationDetail.
    string kind = 2;
    // Localized strings for the leaderboard name.
    LocalizedStringBundle name = 3;
    // The score formatting for the leaderboard.
    GamesNumberFormatConfiguration scoreFormat = 4;
    // The sort rank of this leaderboard. Writes to this field are ignored.
    int32 sortRank = 5;
}

message LeaderboardConfigurationListResponse {
    // The leaderboard configurations.
    repeated LeaderboardConfiguration items = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string games#leaderboardConfigurationListResponse.
    string kind = 2;
    // The pagination token for the next page of results.
    string nextPageToken = 3;
}

message LocalizedString {
    // Uniquely identifies the type of this resource. Value is always the fixed string gamesConfiguration#localizedString.
    string kind = 1;
    // The locale string.
    string locale = 2;
    // The string value.
    string value = 3;
}

message LocalizedStringBundle {
    // Uniquely identifies the type of this resource. Value is always the fixed string gamesConfiguration#localizedStringBundle.
    string kind = 1;
    // The locale strings.
    repeated LocalizedString translations = 2;
}

enum Alt {
    JSON = 0;
}

service GooglePlayGameServicesPublishingService {
    // Retrieves the metadata of the achievement configuration with the given ID.
    rpc GetAchievementsAchievementId(GetAchievementsAchievementIdRequest) returns (AchievementConfiguration) {
      option (google.api.http) = {
        get: "/games/v1configuration/achievements/{achievementId}"
      };
    }
    // Update the metadata of the achievement configuration with the given ID.
    rpc PutAchievementsAchievementId(PutAchievementsAchievementIdRequest) returns (AchievementConfiguration) {
      option (google.api.http) = {
        put: "/games/v1configuration/achievements/{achievementId}"
        body: "body"
      };
    }
    // Delete the achievement configuration with the given ID.
    rpc DeleteAchievementsAchievementId(DeleteAchievementsAchievementIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/games/v1configuration/achievements/{achievementId}"
      };
    }
    // Returns a list of the achievement configurations in this application.
    rpc GetApplicationsApplicationIdAchievements(GetApplicationsApplicationIdAchievementsRequest) returns (AchievementConfigurationListResponse) {
      option (google.api.http) = {
        get: "/games/v1configuration/applications/{applicationId}/achievements"
      };
    }
    // Insert a new achievement configuration in this application.
    rpc PostApplicationsApplicationIdAchievements(PostApplicationsApplicationIdAchievementsRequest) returns (AchievementConfiguration) {
      option (google.api.http) = {
        post: "/games/v1configuration/applications/{applicationId}/achievements"
        body: "body"
      };
    }
    // Returns a list of the leaderboard configurations in this application.
    rpc GetApplicationsApplicationIdLeaderboards(GetApplicationsApplicationIdLeaderboardsRequest) returns (LeaderboardConfigurationListResponse) {
      option (google.api.http) = {
        get: "/games/v1configuration/applications/{applicationId}/leaderboards"
      };
    }
    // Insert a new leaderboard configuration in this application.
    rpc PostApplicationsApplicationIdLeaderboards(PostApplicationsApplicationIdLeaderboardsRequest) returns (LeaderboardConfiguration) {
      option (google.api.http) = {
        post: "/games/v1configuration/applications/{applicationId}/leaderboards"
        body: "body"
      };
    }
    // Uploads an image for a resource with the given ID and image type.
    rpc PostImagesResourceIdImageTypeImageType(PostImagesResourceIdImageTypeImageTypeRequest) returns (ImageConfiguration) {
      option (google.api.http) = {
        post: "/games/v1configuration/images/{resourceId}/imageType/{imageType}"
      };
    }
    // Retrieves the metadata of the leaderboard configuration with the given ID.
    rpc GetLeaderboardsLeaderboardId(GetLeaderboardsLeaderboardIdRequest) returns (LeaderboardConfiguration) {
      option (google.api.http) = {
        get: "/games/v1configuration/leaderboards/{leaderboardId}"
      };
    }
    // Update the metadata of the leaderboard configuration with the given ID.
    rpc PutLeaderboardsLeaderboardId(PutLeaderboardsLeaderboardIdRequest) returns (LeaderboardConfiguration) {
      option (google.api.http) = {
        put: "/games/v1configuration/leaderboards/{leaderboardId}"
        body: "body"
      };
    }
    // Delete the leaderboard configuration with the given ID.
    rpc DeleteLeaderboardsLeaderboardId(DeleteLeaderboardsLeaderboardIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/games/v1configuration/leaderboards/{leaderboardId}"
      };
    }
}

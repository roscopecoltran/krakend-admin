syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package blogger;

message GetBlogsByurlRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    // The URL of the blog to retrieve.
    string url = 7;
    string userIp = 8;
    // Access level with which to view the blog. Note that some fields require elevated access.
    enum GetBlogsByurlRequest_View {
        GETBLOGSBYURLREQUEST_VIEW_ADMIN = 0;
        GETBLOGSBYURLREQUEST_VIEW_AUTHOR = 1;
        GETBLOGSBYURLREQUEST_VIEW_READER = 2;
    }
    GetBlogsByurlRequest_View view = 9;
}

message GetBlogsBlogIdRequest {
    alt alt = 1;
    // The ID of the blog to get.
    string blogId = 2;
    string fields = 3;
    string key = 4;
    // Maximum number of posts to pull back with the blog.
    int32 maxPosts = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
    // Access level with which to view the blog. Note that some fields require elevated access.
    enum GetBlogsBlogIdRequest_View {
        GETBLOGSBLOGIDREQUEST_VIEW_ADMIN = 0;
        GETBLOGSBLOGIDREQUEST_VIEW_AUTHOR = 1;
        GETBLOGSBLOGIDREQUEST_VIEW_READER = 2;
    }
    GetBlogsBlogIdRequest_View view = 10;
}

message GetBlogsBlogIdCommentsRequest {
    alt alt = 1;
    // ID of the blog to fetch comments from.
    string blogId = 2;
    // Latest date of comment to fetch, a date-time with RFC 3339 formatting.
    string endDate = 3;
    // Whether the body content of the comments is included.
    bool fetchBodies = 4;
    string fields = 5;
    string key = 6;
    // Maximum number of comments to include in the result.
    int32 maxResults = 7;
    string oauth_token = 8;
    // Continuation token if request is paged.
    string pageToken = 9;
    boolean prettyPrint = 10;
    string quotaUser = 11;
    // Earliest date of comment to fetch, a date-time with RFC 3339 formatting.
    string startDate = 12;
    repeated string status = 13;
    string userIp = 14;
}

message GetBlogsBlogIdPagesRequest {
    alt alt = 1;
    // ID of the blog to fetch Pages from.
    string blogId = 2;
    // Whether to retrieve the Page bodies.
    bool fetchBodies = 3;
    string fields = 4;
    string key = 5;
    // Maximum number of Pages to fetch.
    int32 maxResults = 6;
    string oauth_token = 7;
    // Continuation token if the request is paged.
    string pageToken = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    repeated string status = 11;
    string userIp = 12;
    // Access level with which to view the returned result. Note that some fields require elevated access.
    enum GetBlogsBlogIdPagesRequest_View {
        GETBLOGSBLOGIDPAGESREQUEST_VIEW_ADMIN = 0;
        GETBLOGSBLOGIDPAGESREQUEST_VIEW_AUTHOR = 1;
        GETBLOGSBLOGIDPAGESREQUEST_VIEW_READER = 2;
    }
    GetBlogsBlogIdPagesRequest_View view = 13;
}

message PostBlogsBlogIdPagesRequest {
    alt alt = 1;
    // ID of the blog to add the page to.
    string blogId = 2;
    Page body = 3;
    string fields = 4;
    // Whether to create the page as a draft (default: false).
    bool isDraft = 5;
    string key = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetBlogsBlogIdPagesPageIdRequest {
    alt alt = 1;
    // ID of the blog containing the page.
    string blogId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // The ID of the page to get.
    string pageId = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
    enum GetBlogsBlogIdPagesPageIdRequest_View {
        GETBLOGSBLOGIDPAGESPAGEIDREQUEST_VIEW_ADMIN = 0;
        GETBLOGSBLOGIDPAGESPAGEIDREQUEST_VIEW_AUTHOR = 1;
        GETBLOGSBLOGIDPAGESPAGEIDREQUEST_VIEW_READER = 2;
    }
    GetBlogsBlogIdPagesPageIdRequest_View view = 10;
}

message PutBlogsBlogIdPagesPageIdRequest {
    alt alt = 1;
    // The ID of the Blog.
    string blogId = 2;
    Page body = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    // The ID of the Page.
    string pageId = 7;
    boolean prettyPrint = 8;
    // Whether a publish action should be performed when the page is updated (default: false).
    bool publish = 9;
    string quotaUser = 10;
    // Whether a revert action should be performed when the page is updated (default: false).
    bool revert = 11;
    string userIp = 12;
}

message DeleteBlogsBlogIdPagesPageIdRequest {
    alt alt = 1;
    // The ID of the Blog.
    string blogId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // The ID of the Page.
    string pageId = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostBlogsBlogIdPagesPageIdPublishRequest {
    alt alt = 1;
    // The ID of the blog.
    string blogId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // The ID of the page.
    string pageId = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostBlogsBlogIdPagesPageIdRevertRequest {
    alt alt = 1;
    // The ID of the blog.
    string blogId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // The ID of the page.
    string pageId = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetBlogsBlogIdPageviewsRequest {
    alt alt = 1;
    // The ID of the blog to get.
    string blogId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    repeated string range = 8;
    string userIp = 9;
}

message GetBlogsBlogIdPostsRequest {
    alt alt = 1;
    // ID of the blog to fetch posts from.
    string blogId = 2;
    // Latest post date to fetch, a date-time with RFC 3339 formatting.
    string endDate = 3;
    // Whether the body content of posts is included (default: true). This should be set to false when the post bodies are not required, to help minimize traffic.
    bool fetchBodies = 4;
    // Whether image URL metadata for each post is included.
    bool fetchImages = 5;
    string fields = 6;
    string key = 7;
    // Comma-separated list of labels to search for.
    string labels = 8;
    // Maximum number of posts to fetch.
    int32 maxResults = 9;
    string oauth_token = 10;
    // Sort search results
    enum GetBlogsBlogIdPostsRequest_OrderBy {
        GETBLOGSBLOGIDPOSTSREQUEST_ORDERBY_PUBLISHED = 0;
        GETBLOGSBLOGIDPOSTSREQUEST_ORDERBY_UPDATED = 1;
    }
    GetBlogsBlogIdPostsRequest_OrderBy orderBy = 11;
    // Continuation token if the request is paged.
    string pageToken = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    // Earliest post date to fetch, a date-time with RFC 3339 formatting.
    string startDate = 15;
    // Statuses to include in the results.
    repeated string status = 16;
    string userIp = 17;
    // Access level with which to view the returned result. Note that some fields require escalated access.
    enum GetBlogsBlogIdPostsRequest_View {
        GETBLOGSBLOGIDPOSTSREQUEST_VIEW_ADMIN = 0;
        GETBLOGSBLOGIDPOSTSREQUEST_VIEW_AUTHOR = 1;
        GETBLOGSBLOGIDPOSTSREQUEST_VIEW_READER = 2;
    }
    GetBlogsBlogIdPostsRequest_View view = 18;
}

message PostBlogsBlogIdPostsRequest {
    alt alt = 1;
    // ID of the blog to add the post to.
    string blogId = 2;
    Post body = 3;
    // Whether the body content of the post is included with the result (default: true).
    bool fetchBody = 4;
    // Whether image URL metadata for each post is included in the returned result (default: false).
    bool fetchImages = 5;
    string fields = 6;
    // Whether to create the post as a draft (default: false).
    bool isDraft = 7;
    string key = 8;
    string oauth_token = 9;
    boolean prettyPrint = 10;
    string quotaUser = 11;
    string userIp = 12;
}

message GetBlogsBlogIdPostsBypathRequest {
    alt alt = 1;
    // ID of the blog to fetch the post from.
    string blogId = 2;
    string fields = 3;
    string key = 4;
    // Maximum number of comments to pull back on a post.
    int32 maxComments = 5;
    string oauth_token = 6;
    // Path of the Post to retrieve.
    string path = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
    // Access level with which to view the returned result. Note that some fields require elevated access.
    enum GetBlogsBlogIdPostsBypathRequest_View {
        GETBLOGSBLOGIDPOSTSBYPATHREQUEST_VIEW_ADMIN = 0;
        GETBLOGSBLOGIDPOSTSBYPATHREQUEST_VIEW_AUTHOR = 1;
        GETBLOGSBLOGIDPOSTSBYPATHREQUEST_VIEW_READER = 2;
    }
    GetBlogsBlogIdPostsBypathRequest_View view = 11;
}

message GetBlogsBlogIdPostsSearchRequest {
    alt alt = 1;
    // ID of the blog to fetch the post from.
    string blogId = 2;
    // Whether the body content of posts is included (default: true). This should be set to false when the post bodies are not required, to help minimize traffic.
    bool fetchBodies = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    // Sort search results
    enum GetBlogsBlogIdPostsSearchRequest_OrderBy {
        GETBLOGSBLOGIDPOSTSSEARCHREQUEST_ORDERBY_PUBLISHED = 0;
        GETBLOGSBLOGIDPOSTSSEARCHREQUEST_ORDERBY_UPDATED = 1;
    }
    GetBlogsBlogIdPostsSearchRequest_OrderBy orderBy = 7;
    boolean prettyPrint = 8;
    // Query terms to search this blog for matching posts.
    string q = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message GetBlogsBlogIdPostsPostIdRequest {
    alt alt = 1;
    // ID of the blog to fetch the post from.
    string blogId = 2;
    // Whether the body content of the post is included (default: true). This should be set to false when the post bodies are not required, to help minimize traffic.
    bool fetchBody = 3;
    // Whether image URL metadata for each post is included (default: false).
    bool fetchImages = 4;
    string fields = 5;
    string key = 6;
    // Maximum number of comments to pull back on a post.
    int32 maxComments = 7;
    string oauth_token = 8;
    // The ID of the post
    string postId = 9;
    boolean prettyPrint = 10;
    string quotaUser = 11;
    string userIp = 12;
    // Access level with which to view the returned result. Note that some fields require elevated access.
    enum GetBlogsBlogIdPostsPostIdRequest_View {
        GETBLOGSBLOGIDPOSTSPOSTIDREQUEST_VIEW_ADMIN = 0;
        GETBLOGSBLOGIDPOSTSPOSTIDREQUEST_VIEW_AUTHOR = 1;
        GETBLOGSBLOGIDPOSTSPOSTIDREQUEST_VIEW_READER = 2;
    }
    GetBlogsBlogIdPostsPostIdRequest_View view = 13;
}

message PutBlogsBlogIdPostsPostIdRequest {
    alt alt = 1;
    // The ID of the Blog.
    string blogId = 2;
    Post body = 3;
    // Whether the body content of the post is included with the result (default: true).
    bool fetchBody = 4;
    // Whether image URL metadata for each post is included in the returned result (default: false).
    bool fetchImages = 5;
    string fields = 6;
    string key = 7;
    // Maximum number of comments to retrieve with the returned post.
    int32 maxComments = 8;
    string oauth_token = 9;
    // The ID of the Post.
    string postId = 10;
    boolean prettyPrint = 11;
    // Whether a publish action should be performed when the post is updated (default: false).
    bool publish = 12;
    string quotaUser = 13;
    // Whether a revert action should be performed when the post is updated (default: false).
    bool revert = 14;
    string userIp = 15;
}

message DeleteBlogsBlogIdPostsPostIdRequest {
    alt alt = 1;
    // The ID of the Blog.
    string blogId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // The ID of the Post.
    string postId = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetBlogsBlogIdPostsPostIdCommentsRequest {
    alt alt = 1;
    // ID of the blog to fetch comments from.
    string blogId = 2;
    // Latest date of comment to fetch, a date-time with RFC 3339 formatting.
    string endDate = 3;
    // Whether the body content of the comments is included.
    bool fetchBodies = 4;
    string fields = 5;
    string key = 6;
    // Maximum number of comments to include in the result.
    int32 maxResults = 7;
    string oauth_token = 8;
    // Continuation token if request is paged.
    string pageToken = 9;
    // ID of the post to fetch posts from.
    string postId = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // Earliest date of comment to fetch, a date-time with RFC 3339 formatting.
    string startDate = 13;
    repeated string status = 14;
    string userIp = 15;
    // Access level with which to view the returned result. Note that some fields require elevated access.
    enum GetBlogsBlogIdPostsPostIdCommentsRequest_View {
        GETBLOGSBLOGIDPOSTSPOSTIDCOMMENTSREQUEST_VIEW_ADMIN = 0;
        GETBLOGSBLOGIDPOSTSPOSTIDCOMMENTSREQUEST_VIEW_AUTHOR = 1;
        GETBLOGSBLOGIDPOSTSPOSTIDCOMMENTSREQUEST_VIEW_READER = 2;
    }
    GetBlogsBlogIdPostsPostIdCommentsRequest_View view = 16;
}

message GetBlogsBlogIdPostsPostIdCommentsCommentIdRequest {
    alt alt = 1;
    // ID of the blog to containing the comment.
    string blogId = 2;
    // The ID of the comment to get.
    string commentId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    // ID of the post to fetch posts from.
    string postId = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
    // Access level for the requested comment (default: READER). Note that some comments will require elevated permissions, for example comments where the parent posts which is in a draft state, or comments that are pending moderation.
    enum GetBlogsBlogIdPostsPostIdCommentsCommentIdRequest_View {
        GETBLOGSBLOGIDPOSTSPOSTIDCOMMENTSCOMMENTIDREQUEST_VIEW_ADMIN = 0;
        GETBLOGSBLOGIDPOSTSPOSTIDCOMMENTSCOMMENTIDREQUEST_VIEW_AUTHOR = 1;
        GETBLOGSBLOGIDPOSTSPOSTIDCOMMENTSCOMMENTIDREQUEST_VIEW_READER = 2;
    }
    GetBlogsBlogIdPostsPostIdCommentsCommentIdRequest_View view = 11;
}

message DeleteBlogsBlogIdPostsPostIdCommentsCommentIdRequest {
    alt alt = 1;
    // The ID of the Blog.
    string blogId = 2;
    // The ID of the comment to delete.
    string commentId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    // The ID of the Post.
    string postId = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostBlogsBlogIdPostsPostIdCommentsCommentIdApproveRequest {
    alt alt = 1;
    // The ID of the Blog.
    string blogId = 2;
    // The ID of the comment to mark as not spam.
    string commentId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    // The ID of the Post.
    string postId = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostBlogsBlogIdPostsPostIdCommentsCommentIdRemovecontentRequest {
    alt alt = 1;
    // The ID of the Blog.
    string blogId = 2;
    // The ID of the comment to delete content from.
    string commentId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    // The ID of the Post.
    string postId = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostBlogsBlogIdPostsPostIdCommentsCommentIdSpamRequest {
    alt alt = 1;
    // The ID of the Blog.
    string blogId = 2;
    // The ID of the comment to mark as spam.
    string commentId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    // The ID of the Post.
    string postId = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostBlogsBlogIdPostsPostIdPublishRequest {
    alt alt = 1;
    // The ID of the Blog.
    string blogId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // The ID of the Post.
    string postId = 6;
    boolean prettyPrint = 7;
    // Optional date and time to schedule the publishing of the Blog. If no publishDate parameter is given, the post is either published at the a previously saved schedule date (if present), or the current time. If a future date is given, the post will be scheduled to be published.
    string publishDate = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostBlogsBlogIdPostsPostIdRevertRequest {
    alt alt = 1;
    // The ID of the Blog.
    string blogId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // The ID of the Post.
    string postId = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUsersUserIdRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    // The ID of the user to get.
    string userId = 7;
    string userIp = 8;
}

message GetUsersUserIdBlogsRequest {
    alt alt = 1;
    // Whether the response is a list of blogs with per-user information instead of just blogs.
    bool fetchUserInfo = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // User access types for blogs to include in the results, e.g. AUTHOR will return blogs where the user has author level access. If no roles are specified, defaults to ADMIN and AUTHOR roles.
    repeated string role = 8;
    // Blog statuses to include in the result (default: Live blogs only). Note that ADMIN access is required to view deleted blogs.
    repeated string status = 9;
    // ID of the user whose blogs are to be fetched. Either the word 'self' (sans quote marks) or the user's profile identifier.
    string userId = 10;
    string userIp = 11;
    // Access level with which to view the blogs. Note that some fields require elevated access.
    enum GetUsersUserIdBlogsRequest_View {
        GETUSERSUSERIDBLOGSREQUEST_VIEW_ADMIN = 0;
        GETUSERSUSERIDBLOGSREQUEST_VIEW_AUTHOR = 1;
        GETUSERSUSERIDBLOGSREQUEST_VIEW_READER = 2;
    }
    GetUsersUserIdBlogsRequest_View view = 12;
}

message GetUsersUserIdBlogsBlogIdRequest {
    alt alt = 1;
    // The ID of the blog to get.
    string blogId = 2;
    string fields = 3;
    string key = 4;
    // Maximum number of posts to pull back with the blog.
    int32 maxPosts = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // ID of the user whose blogs are to be fetched. Either the word 'self' (sans quote marks) or the user's profile identifier.
    string userId = 9;
    string userIp = 10;
}

message GetUsersUserIdBlogsBlogIdPostsRequest {
    alt alt = 1;
    // ID of the blog to fetch posts from.
    string blogId = 2;
    // Latest post date to fetch, a date-time with RFC 3339 formatting.
    string endDate = 3;
    // Whether the body content of posts is included. Default is false.
    bool fetchBodies = 4;
    string fields = 5;
    string key = 6;
    // Comma-separated list of labels to search for.
    string labels = 7;
    // Maximum number of posts to fetch.
    int32 maxResults = 8;
    string oauth_token = 9;
    // Sort order applied to search results. Default is published.
    enum GetUsersUserIdBlogsBlogIdPostsRequest_OrderBy {
        GETUSERSUSERIDBLOGSBLOGIDPOSTSREQUEST_ORDERBY_PUBLISHED = 0;
        GETUSERSUSERIDBLOGSBLOGIDPOSTSREQUEST_ORDERBY_UPDATED = 1;
    }
    GetUsersUserIdBlogsBlogIdPostsRequest_OrderBy orderBy = 10;
    // Continuation token if the request is paged.
    string pageToken = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    // Earliest post date to fetch, a date-time with RFC 3339 formatting.
    string startDate = 14;
    repeated string status = 15;
    // ID of the user for the per-user information to be fetched. Either the word 'self' (sans quote marks) or the user's profile identifier.
    string userId = 16;
    string userIp = 17;
    // Access level with which to view the returned result. Note that some fields require elevated access.
    enum GetUsersUserIdBlogsBlogIdPostsRequest_View {
        GETUSERSUSERIDBLOGSBLOGIDPOSTSREQUEST_VIEW_ADMIN = 0;
        GETUSERSUSERIDBLOGSBLOGIDPOSTSREQUEST_VIEW_AUTHOR = 1;
        GETUSERSUSERIDBLOGSBLOGIDPOSTSREQUEST_VIEW_READER = 2;
    }
    GetUsersUserIdBlogsBlogIdPostsRequest_View view = 18;
}

message GetUsersUserIdBlogsBlogIdPostsPostIdRequest {
    alt alt = 1;
    // The ID of the blog.
    string blogId = 2;
    string fields = 3;
    string key = 4;
    // Maximum number of comments to pull back on a post.
    int32 maxComments = 5;
    string oauth_token = 6;
    // The ID of the post to get.
    string postId = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    // ID of the user for the per-user information to be fetched. Either the word 'self' (sans quote marks) or the user's profile identifier.
    string userId = 10;
    string userIp = 11;
}

message Blog {
    // The JSON custom meta-data for the Blog
    string customMetaData = 1;
    // The description of this blog. This is displayed underneath the title.
    string description = 2;
    // The identifier for this resource.
    string id = 3;
    // The kind of this entry. Always blogger#blog
    string kind = 4;
    // The locale this Blog is set to.
    message Locale {
            // The country this blog's locale is set to.
    string country = 1;
            // The language this blog is authored in.
    string language = 2;
            // The language variant this blog is authored in.
    string variant = 3;
    }
    Locale locale = 5;
    // The name of this blog. This is displayed as the title.
    string name = 6;
    // The container of pages in this blog.
    message Pages {
            // The URL of the container for pages in this blog.
    string selfLink = 1;
            // The count of pages in this blog.
    int32 totalItems = 2;
    }
    Pages pages = 7;
    // The container of posts in this blog.
    message Posts {
            // The List of Posts for this Blog.
    repeated Post items = 1;
            // The URL of the container for posts in this blog.
    string selfLink = 2;
            // The count of posts in this blog.
    int32 totalItems = 3;
    }
    Posts posts = 8;
    // RFC 3339 date-time when this blog was published.
    string published = 9;
    // The API REST URL to fetch this resource from.
    string selfLink = 10;
    // The status of the blog.
    string status = 11;
    // RFC 3339 date-time when this blog was last updated.
    string updated = 12;
    // The URL where this blog is published.
    string url = 13;
}

message BlogList {
    // Admin level list of blog per-user information
    repeated BlogUserInfo blogUserInfos = 1;
    // The list of Blogs this user has Authorship or Admin rights over.
    repeated Blog items = 2;
    // The kind of this entity. Always blogger#blogList
    string kind = 3;
}

message BlogPerUserInfo {
    // ID of the Blog resource
    string blogId = 1;
    // True if the user has Admin level access to the blog.
    bool hasAdminAccess = 2;
    // The kind of this entity. Always blogger#blogPerUserInfo
    string kind = 3;
    // The Photo Album Key for the user when adding photos to the blog
    string photosAlbumKey = 4;
    // Access permissions that the user has for the blog (ADMIN, AUTHOR, or READER).
    string role = 5;
    // ID of the User
    string userId = 6;
}

message BlogUserInfo {
    // The Blog resource.
    Blog blog = 1;
    // Information about a User for the Blog.
    BlogPerUserInfo blog_user_info = 2;
    // The kind of this entity. Always blogger#blogUserInfo
    string kind = 3;
}

message Comment {
    // The author of this Comment.
    message Author {
            // The display name.
    string displayName = 1;
            // The identifier of the Comment creator.
    string id = 2;
            // The comment creator's avatar.
    message Image {
                    // The comment creator's avatar URL.
    string url = 1;
        }
        Image image = 3;
            // The URL of the Comment creator's Profile page.
    string url = 4;
    }
    Author author = 1;
    // Data about the blog containing this comment.
    message Blog {
            // The identifier of the blog containing this comment.
    string id = 1;
    }
    Blog blog = 2;
    // The actual content of the comment. May include HTML markup.
    string content = 3;
    // The identifier for this resource.
    string id = 4;
    // Data about the comment this is in reply to.
    message InReplyTo {
            // The identified of the parent of this comment.
    string id = 1;
    }
    InReplyTo inReplyTo = 5;
    // The kind of this entry. Always blogger#comment
    string kind = 6;
    // Data about the post containing this comment.
    message Post {
            // The identifier of the post containing this comment.
    string id = 1;
    }
    Post post = 7;
    // RFC 3339 date-time when this comment was published.
    string published = 8;
    // The API REST URL to fetch this resource from.
    string selfLink = 9;
    // The status of the comment (only populated for admin users)
    string status = 10;
    // RFC 3339 date-time when this comment was last updated.
    string updated = 11;
}

message CommentList {
    // Etag of the response.
    string etag = 1;
    // The List of Comments for a Post.
    repeated Comment items = 2;
    // The kind of this entry. Always blogger#commentList
    string kind = 3;
    // Pagination token to fetch the next page, if one exists.
    string nextPageToken = 4;
    // Pagination token to fetch the previous page, if one exists.
    string prevPageToken = 5;
}

message Page {
    // The author of this Page.
    message Author {
            // The display name.
    string displayName = 1;
            // The identifier of the Page creator.
    string id = 2;
            // The page author's avatar.
    message Image {
                    // The page author's avatar URL.
    string url = 1;
        }
        Image image = 3;
            // The URL of the Page creator's Profile page.
    string url = 4;
    }
    Author author = 1;
    // Data about the blog containing this Page.
    message Blog {
            // The identifier of the blog containing this page.
    string id = 1;
    }
    Blog blog = 2;
    // The body content of this Page, in HTML.
    string content = 3;
    // Etag of the resource.
    string etag = 4;
    // The identifier for this resource.
    string id = 5;
    // The kind of this entity. Always blogger#page
    string kind = 6;
    // RFC 3339 date-time when this Page was published.
    string published = 7;
    // The API REST URL to fetch this resource from.
    string selfLink = 8;
    // The status of the page for admin resources (either LIVE or DRAFT).
    string status = 9;
    // The title of this entity. This is the name displayed in the Admin user interface.
    string title = 10;
    // RFC 3339 date-time when this Page was last updated.
    string updated = 11;
    // The URL that this Page is displayed at.
    string url = 12;
}

message PageList {
    // Etag of the response.
    string etag = 1;
    // The list of Pages for a Blog.
    repeated Page items = 2;
    // The kind of this entity. Always blogger#pageList
    string kind = 3;
    // Pagination token to fetch the next page, if one exists.
    string nextPageToken = 4;
}

message Pageviews {
    // Blog Id
    string blogId = 1;
    // The container of posts in this blog.
    message Count {
            // Count of page views for the given time range
    string count = 1;
            // Time range the given count applies to
    string timeRange = 2;
    }
    repeated Count counts = 2;
    // The kind of this entry. Always blogger#page_views
    string kind = 3;
}

message Post {
    // The author of this Post.
    message Author {
            // The display name.
    string displayName = 1;
            // The identifier of the Post creator.
    string id = 2;
            // The Post author's avatar.
    message Image {
                    // The Post author's avatar URL.
    string url = 1;
        }
        Image image = 3;
            // The URL of the Post creator's Profile page.
    string url = 4;
    }
    Author author = 1;
    // Data about the blog containing this Post.
    message Blog {
            // The identifier of the Blog that contains this Post.
    string id = 1;
    }
    Blog blog = 2;
    // The content of the Post. May contain HTML markup.
    string content = 3;
    // The JSON meta-data for the Post.
    string customMetaData = 4;
    // Etag of the resource.
    string etag = 5;
    // The identifier of this Post.
    string id = 6;
    // Display image for the Post.
    message Image {
        string url = 1;
    }
    repeated Image images = 7;
    // The kind of this entity. Always blogger#post
    string kind = 8;
    // The list of labels this Post was tagged with.
    repeated string labels = 9;
    // The location for geotagged posts.
    message Location {
            // Location's latitude.
    double lat = 1;
            // Location's longitude.
    double lng = 2;
            // Location name.
    string name = 3;
            // Location's viewport span. Can be used when rendering a map preview.
    string span = 4;
    }
    Location location = 10;
    // RFC 3339 date-time when this Post was published.
    string published = 11;
    // Comment control and display setting for readers of this post.
    string readerComments = 12;
    // The container of comments on this Post.
    message Replies {
            // The List of Comments for this Post.
    repeated Comment items = 1;
            // The URL of the comments on this post.
    string selfLink = 2;
            // The count of comments on this post.
    string totalItems = 3;
    }
    Replies replies = 13;
    // The API REST URL to fetch this resource from.
    string selfLink = 14;
    // Status of the post. Only set for admin-level requests
    string status = 15;
    // The title of the Post.
    string title = 16;
    // The title link URL, similar to atom's related link.
    string titleLink = 17;
    // RFC 3339 date-time when this Post was last updated.
    string updated = 18;
    // The URL where this Post is displayed.
    string url = 19;
}

message PostList {
    // Etag of the response.
    string etag = 1;
    // The list of Posts for this Blog.
    repeated Post items = 2;
    // The kind of this entity. Always blogger#postList
    string kind = 3;
    // Pagination token to fetch the next page, if one exists.
    string nextPageToken = 4;
}

message PostPerUserInfo {
    // ID of the Blog that the post resource belongs to.
    string blogId = 1;
    // True if the user has Author level access to the post.
    bool hasEditAccess = 2;
    // The kind of this entity. Always blogger#postPerUserInfo
    string kind = 3;
    // ID of the Post resource.
    string postId = 4;
    // ID of the User.
    string userId = 5;
}

message PostUserInfo {
    // The kind of this entity. Always blogger#postUserInfo
    string kind = 1;
    // The Post resource.
    Post post = 2;
    // Information about a User for the Post.
    PostPerUserInfo post_user_info = 3;
}

message PostUserInfosList {
    // The list of Posts with User information for the post, for this Blog.
    repeated PostUserInfo items = 1;
    // The kind of this entity. Always blogger#postList
    string kind = 2;
    // Pagination token to fetch the next page, if one exists.
    string nextPageToken = 3;
}

message User {
    // Profile summary information.
    string about = 1;
    // The container of blogs for this user.
    message Blogs {
            // The URL of the Blogs for this user.
    string selfLink = 1;
    }
    Blogs blogs = 2;
    // The timestamp of when this profile was created, in seconds since epoch.
    string created = 3;
    // The display name.
    string displayName = 4;
    // The identifier for this User.
    string id = 5;
    // The kind of this entity. Always blogger#user
    string kind = 6;
    // This user's locale
    message Locale {
            // The user's country setting.
    string country = 1;
            // The user's language setting.
    string language = 2;
            // The user's language variant setting.
    string variant = 3;
    }
    Locale locale = 7;
    // The API REST URL to fetch this resource from.
    string selfLink = 8;
    // The user's profile page.
    string url = 9;
}

enum Alt {
    JSON = 0;
}

service BloggerService {
    // Retrieve a Blog by URL.
    rpc GetBlogsByurl(GetBlogsByurlRequest) returns (Blog) {
      option (google.api.http) = {
        get: "/blogger/v3/blogs/byurl"
      };
    }
    // Gets one blog by ID.
    rpc GetBlogsBlogId(GetBlogsBlogIdRequest) returns (Blog) {
      option (google.api.http) = {
        get: "/blogger/v3/blogs/{blogId}"
      };
    }
    // Retrieves the comments for a blog, across all posts, possibly filtered.
    rpc GetBlogsBlogIdComments(GetBlogsBlogIdCommentsRequest) returns (CommentList) {
      option (google.api.http) = {
        get: "/blogger/v3/blogs/{blogId}/comments"
      };
    }
    // Retrieves the pages for a blog, optionally including non-LIVE statuses.
    rpc GetBlogsBlogIdPages(GetBlogsBlogIdPagesRequest) returns (PageList) {
      option (google.api.http) = {
        get: "/blogger/v3/blogs/{blogId}/pages"
      };
    }
    // Add a page.
    rpc PostBlogsBlogIdPages(PostBlogsBlogIdPagesRequest) returns (Page) {
      option (google.api.http) = {
        post: "/blogger/v3/blogs/{blogId}/pages"
        body: "body"
      };
    }
    // Gets one blog page by ID.
    rpc GetBlogsBlogIdPagesPageId(GetBlogsBlogIdPagesPageIdRequest) returns (Page) {
      option (google.api.http) = {
        get: "/blogger/v3/blogs/{blogId}/pages/{pageId}"
      };
    }
    // Update a page.
    rpc PutBlogsBlogIdPagesPageId(PutBlogsBlogIdPagesPageIdRequest) returns (Page) {
      option (google.api.http) = {
        put: "/blogger/v3/blogs/{blogId}/pages/{pageId}"
        body: "body"
      };
    }
    // Delete a page by ID.
    rpc DeleteBlogsBlogIdPagesPageId(DeleteBlogsBlogIdPagesPageIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/blogger/v3/blogs/{blogId}/pages/{pageId}"
      };
    }
    // Publishes a draft page.
    rpc PostBlogsBlogIdPagesPageIdPublish(PostBlogsBlogIdPagesPageIdPublishRequest) returns (Page) {
      option (google.api.http) = {
        post: "/blogger/v3/blogs/{blogId}/pages/{pageId}/publish"
      };
    }
    // Revert a published or scheduled page to draft state.
    rpc PostBlogsBlogIdPagesPageIdRevert(PostBlogsBlogIdPagesPageIdRevertRequest) returns (Page) {
      option (google.api.http) = {
        post: "/blogger/v3/blogs/{blogId}/pages/{pageId}/revert"
      };
    }
    // Retrieve pageview stats for a Blog.
    rpc GetBlogsBlogIdPageviews(GetBlogsBlogIdPageviewsRequest) returns (Pageviews) {
      option (google.api.http) = {
        get: "/blogger/v3/blogs/{blogId}/pageviews"
      };
    }
    // Retrieves a list of posts, possibly filtered.
    rpc GetBlogsBlogIdPosts(GetBlogsBlogIdPostsRequest) returns (PostList) {
      option (google.api.http) = {
        get: "/blogger/v3/blogs/{blogId}/posts"
      };
    }
    // Add a post.
    rpc PostBlogsBlogIdPosts(PostBlogsBlogIdPostsRequest) returns (Post) {
      option (google.api.http) = {
        post: "/blogger/v3/blogs/{blogId}/posts"
        body: "body"
      };
    }
    // Retrieve a Post by Path.
    rpc GetBlogsBlogIdPostsBypath(GetBlogsBlogIdPostsBypathRequest) returns (Post) {
      option (google.api.http) = {
        get: "/blogger/v3/blogs/{blogId}/posts/bypath"
      };
    }
    // Search for a post.
    rpc GetBlogsBlogIdPostsSearch(GetBlogsBlogIdPostsSearchRequest) returns (PostList) {
      option (google.api.http) = {
        get: "/blogger/v3/blogs/{blogId}/posts/search"
      };
    }
    // Get a post by ID.
    rpc GetBlogsBlogIdPostsPostId(GetBlogsBlogIdPostsPostIdRequest) returns (Post) {
      option (google.api.http) = {
        get: "/blogger/v3/blogs/{blogId}/posts/{postId}"
      };
    }
    // Update a post.
    rpc PutBlogsBlogIdPostsPostId(PutBlogsBlogIdPostsPostIdRequest) returns (Post) {
      option (google.api.http) = {
        put: "/blogger/v3/blogs/{blogId}/posts/{postId}"
        body: "body"
      };
    }
    // Delete a post by ID.
    rpc DeleteBlogsBlogIdPostsPostId(DeleteBlogsBlogIdPostsPostIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/blogger/v3/blogs/{blogId}/posts/{postId}"
      };
    }
    // Retrieves the comments for a post, possibly filtered.
    rpc GetBlogsBlogIdPostsPostIdComments(GetBlogsBlogIdPostsPostIdCommentsRequest) returns (CommentList) {
      option (google.api.http) = {
        get: "/blogger/v3/blogs/{blogId}/posts/{postId}/comments"
      };
    }
    // Gets one comment by ID.
    rpc GetBlogsBlogIdPostsPostIdCommentsCommentId(GetBlogsBlogIdPostsPostIdCommentsCommentIdRequest) returns (Comment) {
      option (google.api.http) = {
        get: "/blogger/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}"
      };
    }
    // Delete a comment by ID.
    rpc DeleteBlogsBlogIdPostsPostIdCommentsCommentId(DeleteBlogsBlogIdPostsPostIdCommentsCommentIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/blogger/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}"
      };
    }
    // Marks a comment as not spam.
    rpc PostBlogsBlogIdPostsPostIdCommentsCommentIdApprove(PostBlogsBlogIdPostsPostIdCommentsCommentIdApproveRequest) returns (Comment) {
      option (google.api.http) = {
        post: "/blogger/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/approve"
      };
    }
    // Removes the content of a comment.
    rpc PostBlogsBlogIdPostsPostIdCommentsCommentIdRemovecontent(PostBlogsBlogIdPostsPostIdCommentsCommentIdRemovecontentRequest) returns (Comment) {
      option (google.api.http) = {
        post: "/blogger/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/removecontent"
      };
    }
    // Marks a comment as spam.
    rpc PostBlogsBlogIdPostsPostIdCommentsCommentIdSpam(PostBlogsBlogIdPostsPostIdCommentsCommentIdSpamRequest) returns (Comment) {
      option (google.api.http) = {
        post: "/blogger/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/spam"
      };
    }
    // Publishes a draft post, optionally at the specific time of the given publishDate parameter.
    rpc PostBlogsBlogIdPostsPostIdPublish(PostBlogsBlogIdPostsPostIdPublishRequest) returns (Post) {
      option (google.api.http) = {
        post: "/blogger/v3/blogs/{blogId}/posts/{postId}/publish"
      };
    }
    // Revert a published or scheduled post to draft state.
    rpc PostBlogsBlogIdPostsPostIdRevert(PostBlogsBlogIdPostsPostIdRevertRequest) returns (Post) {
      option (google.api.http) = {
        post: "/blogger/v3/blogs/{blogId}/posts/{postId}/revert"
      };
    }
    // Gets one user by ID.
    rpc GetUsersUserId(GetUsersUserIdRequest) returns (User) {
      option (google.api.http) = {
        get: "/blogger/v3/users/{userId}"
      };
    }
    // Retrieves a list of blogs, possibly filtered.
    rpc GetUsersUserIdBlogs(GetUsersUserIdBlogsRequest) returns (BlogList) {
      option (google.api.http) = {
        get: "/blogger/v3/users/{userId}/blogs"
      };
    }
    // Gets one blog and user info pair by blogId and userId.
    rpc GetUsersUserIdBlogsBlogId(GetUsersUserIdBlogsBlogIdRequest) returns (BlogUserInfo) {
      option (google.api.http) = {
        get: "/blogger/v3/users/{userId}/blogs/{blogId}"
      };
    }
    // Retrieves a list of post and post user info pairs, possibly filtered. The post user info contains per-user information about the post, such as access rights, specific to the user.
    rpc GetUsersUserIdBlogsBlogIdPosts(GetUsersUserIdBlogsBlogIdPostsRequest) returns (PostUserInfosList) {
      option (google.api.http) = {
        get: "/blogger/v3/users/{userId}/blogs/{blogId}/posts"
      };
    }
    // Gets one post and user info pair, by post ID and user ID. The post user info contains per-user information about the post, such as access rights, specific to the user.
    rpc GetUsersUserIdBlogsBlogIdPostsPostId(GetUsersUserIdBlogsBlogIdPostsPostIdRequest) returns (PostUserInfo) {
      option (google.api.http) = {
        get: "/blogger/v3/users/{userId}/blogs/{blogId}/posts/{postId}"
      };
    }
}

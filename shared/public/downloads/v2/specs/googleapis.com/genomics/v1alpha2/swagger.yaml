swagger: '2.0'
schemes:
  - https
host: genomics.googleapis.com
basePath: /
info:
  contact:
    name: Google
    url: 'https://google.com'
  description: 'Upload, process, query, and search Genomics data in the cloud.'
  title: Genomics
  version: v1alpha2
  x-apiClientRegistration:
    url: 'https://console.developers.google.com'
  x-logo:
    url: 'https://api.apis.guru/v2/cache/logo/https_www.google.com_images_branding_googlelogo_2x_googlelogo_color_272x92dp.png'
  x-origin:
    - converter:
        url: 'https://github.com/lucybot/api-spec-converter'
        version: 2.6.0
      format: google
      url: 'https://genomics.googleapis.com/$discovery/rest?version=v1alpha2'
      version: v1
  x-preferred: false
  x-providerName: googleapis.com
  x-serviceName: genomics
externalDocs:
  url: 'https://cloud.google.com/genomics'
securityDefinitions:
  Oauth2:
    authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
    description: Oauth 2.0 authentication
    flow: implicit
    scopes:
      'https://www.googleapis.com/auth/cloud-platform': View and manage your data across Google Cloud Platform services
      'https://www.googleapis.com/auth/compute': View and manage your Google Compute Engine resources
      'https://www.googleapis.com/auth/genomics': View and manage Genomics data
    type: oauth2
parameters:
  $.xgafv:
    description: V1 error format.
    enum:
      - '1'
      - '2'
    in: query
    name: $.xgafv
    type: string
  access_token:
    description: OAuth access token.
    in: query
    name: access_token
    type: string
  alt:
    default: json
    description: Data format for response.
    enum:
      - json
      - media
      - proto
    in: query
    name: alt
    type: string
  bearer_token:
    description: OAuth bearer token.
    in: query
    name: bearer_token
    type: string
  callback:
    description: JSONP
    in: query
    name: callback
    type: string
  fields:
    description: Selector specifying which fields to include in a partial response.
    in: query
    name: fields
    type: string
  key:
    description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
    in: query
    name: key
    type: string
  oauth_token:
    description: OAuth 2.0 token for the current user.
    in: query
    name: oauth_token
    type: string
  pp:
    default: true
    description: Pretty-print response.
    in: query
    name: pp
    type: boolean
  prettyPrint:
    default: true
    description: Returns response with indentations and line breaks.
    in: query
    name: prettyPrint
    type: boolean
  quotaUser:
    description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
    in: query
    name: quotaUser
    type: string
  uploadType:
    description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
    in: query
    name: uploadType
    type: string
  upload_protocol:
    description: 'Upload protocol for media (e.g. "raw", "multipart").'
    in: query
    name: upload_protocol
    type: string
tags:
  - name: operations
  - name: pipelines
paths:
  /v1alpha2/pipelines:
    get:
      description: |-
        Lists pipelines.

        Caller must have READ permission to the project.
      operationId: genomics.pipelines.list
      parameters:
        - description: |-
            Token to use to indicate where to start getting results.
            If unspecified, returns the first page of results.
          in: query
          name: pageToken
          type: string
        - description: |-
            Number of pipelines to return at once. Defaults to 256, and max
            is 2048.
          in: query
          name: pageSize
          type: integer
        - description: |-
            Required. The name of the project to search for pipelines. Caller
            must have READ access to this project.
          in: query
          name: projectId
          type: string
        - description: |-
            Pipelines with names that match this prefix should be
            returned.  If unspecified, all pipelines in the project, up to
            `pageSize`, will be returned.
          in: query
          name: namePrefix
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/ListPipelinesResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/genomics'
      tags:
        - pipelines
    parameters:
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/upload_protocol'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
    post:
      description: |-
        Creates a pipeline that can be run later. Create takes a Pipeline that
        has all fields other than `pipelineId` populated, and then returns
        the same pipeline with `pipelineId` populated. This id can be used
        to run the pipeline.

        Caller must have WRITE permission to the project.
      operationId: genomics.pipelines.create
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Pipeline'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Pipeline'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/genomics'
      tags:
        - pipelines
  '/v1alpha2/pipelines/{pipelineId}':
    delete:
      description: |-
        Deletes a pipeline based on ID.

        Caller must have WRITE permission to the project.
      operationId: genomics.pipelines.delete
      parameters:
        - description: |-
            Caller must have WRITE access to the project in which this pipeline
            is defined.
          in: path
          name: pipelineId
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Empty'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/genomics'
      tags:
        - pipelines
    get:
      description: |-
        Retrieves a pipeline based on ID.

        Caller must have READ permission to the project.
      operationId: genomics.pipelines.get
      parameters:
        - description: |-
            Caller must have READ access to the project in which this pipeline
            is defined.
          in: path
          name: pipelineId
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Pipeline'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/genomics'
      tags:
        - pipelines
    parameters:
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/upload_protocol'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
  '/v1alpha2/pipelines:getControllerConfig':
    get:
      description: |-
        Gets controller configuration information. Should only be called
        by VMs created by the Pipelines Service and not by end users.
      operationId: genomics.pipelines.getControllerConfig
      parameters:
        - description: The operation to retrieve controller configuration for.
          in: query
          name: operationId
          type: string
        - in: query
          name: validationToken
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/ControllerConfig'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/genomics'
      tags:
        - pipelines
    parameters:
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/upload_protocol'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
  '/v1alpha2/pipelines:run':
    parameters:
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/upload_protocol'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
    post:
      description: |-
        Runs a pipeline. If `pipelineId` is specified in the request, then
        run a saved pipeline. If `ephemeralPipeline` is specified, then run
        that pipeline once without saving a copy.

        The caller must have READ permission to the project where the pipeline
        is stored and WRITE permission to the project where the pipeline will be
        run, as VMs will be created and storage will be used.

        If a pipeline operation is still running after 6 days, it will be canceled.
      operationId: genomics.pipelines.run
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/RunPipelineRequest'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Operation'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/compute'
        - Oauth2:
            - 'https://www.googleapis.com/auth/genomics'
      tags:
        - pipelines
  '/v1alpha2/pipelines:setOperationStatus':
    parameters:
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/upload_protocol'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
    put:
      description: |-
        Sets status of a given operation. Any new timestamps (as determined by
        description) are appended to TimestampEvents. Should only be called by VMs
        created by the Pipelines Service and not by end users.
      operationId: genomics.pipelines.setOperationStatus
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/SetOperationStatusRequest'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Empty'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/genomics'
      tags:
        - pipelines
  '/v1alpha2/{name}':
    get:
      description: Lists operations that match the specified filter in the request.
      operationId: genomics.operations.list
      parameters:
        - description: |-
            A string for filtering Operations.
            The following filter fields are supported&#58;

            * projectId&#58; Required. Corresponds to
              OperationMetadata.projectId.
            * createTime&#58; The time this job was created, in seconds from the
              [epoch](http://en.wikipedia.org/wiki/Unix_time). Can use `>=` and/or `<=`
              operators.
            * status&#58; Can be `RUNNING`, `SUCCESS`, `FAILURE`, or `CANCELED`. Only
              one status may be specified.
            * labels.key where key is a label key.

            Examples&#58;

            * `projectId = my-project AND createTime >= 1432140000`
            * `projectId = my-project AND createTime >= 1432140000 AND createTime <= 1432150000 AND status = RUNNING`
            * `projectId = my-project AND labels.color = *`
            * `projectId = my-project AND labels.color = red`
          in: query
          name: filter
          type: string
        - description: The name of the operation's parent resource.
          in: path
          name: name
          required: true
          type: string
          x-reservedExpansion: true
        - description: |-
            The maximum number of results to return. If unspecified, defaults to
            256. The maximum value is 2048.
          in: query
          name: pageSize
          type: integer
        - description: The standard list page token.
          in: query
          name: pageToken
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/ListOperationsResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/genomics'
      tags:
        - operations
    parameters:
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/upload_protocol'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
  '/v1alpha2/{name}:cancel':
    parameters:
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/upload_protocol'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
    post:
      description: 'Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. Clients may use Operations.GetOperation or Operations.ListOperations to check whether the cancellation succeeded or the operation completed despite cancellation.'
      operationId: genomics.operations.cancel
      parameters:
        - description: The name of the operation resource to be cancelled.
          in: path
          name: name
          required: true
          type: string
          x-reservedExpansion: true
        - in: body
          name: body
          schema:
            $ref: '#/definitions/CancelOperationRequest'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Empty'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/genomics'
      tags:
        - operations
definitions:
  CancelOperationRequest:
    description: The request message for Operations.CancelOperation.
    properties: {}
    type: object
  ComputeEngine:
    description: |-
      Describes a Compute Engine resource that is being managed by a running
      pipeline.
    properties:
      diskNames:
        description: The names of the disks that were created for this pipeline.
        items:
          type: string
        type: array
      instanceName:
        description: The instance on which the operation is running.
        type: string
      machineType:
        description: The machine type of the instance.
        type: string
      zone:
        description: The availability zone in which the instance resides.
        type: string
    type: object
  ControllerConfig:
    description: |-
      Stores the information that the controller will fetch from the
      server in order to run. Should only be used by VMs created by the
      Pipelines Service and not by end users.
    properties:
      cmd:
        type: string
      disks:
        additionalProperties:
          type: string
        type: object
      gcsLogPath:
        type: string
      gcsSinks:
        additionalProperties:
          $ref: '#/definitions/RepeatedString'
        type: object
      gcsSources:
        additionalProperties:
          $ref: '#/definitions/RepeatedString'
        type: object
      image:
        type: string
      machineType:
        type: string
      vars:
        additionalProperties:
          type: string
        type: object
    type: object
  Disk:
    description: A Google Compute Engine disk resource specification.
    properties:
      autoDelete:
        description: |-
          Deprecated. Disks created by the Pipelines API will be deleted at the end
          of the pipeline run, regardless of what this field is set to.
        type: boolean
      mountPoint:
        description: |-
          Required at create time and cannot be overridden at run time.
          Specifies the path in the docker container where files on
          this disk should be located. For example, if `mountPoint`
          is `/mnt/disk`, and the parameter has `localPath`
          `inputs/file.txt`, the docker container can access the data at
          `/mnt/disk/inputs/file.txt`.
        type: string
      name:
        description: |-
          Required. The name of the disk that can be used in the pipeline
          parameters. Must be 1 - 63 characters.
          The name "boot" is reserved for system use.
        type: string
      readOnly:
        description: |-
          Specifies how a sourced-base persistent disk will be mounted. See
          https://cloud.google.com/compute/docs/disks/persistent-disks#use_multi_instances
          for more details.
          Can only be set at create time.
        type: boolean
      sizeGb:
        description: |-
          The size of the disk. Defaults to 500 (GB).
          This field is not applicable for local SSD.
        format: int32
        type: integer
      source:
        description: |-
          The full or partial URL of the persistent disk to attach. See
          https://cloud.google.com/compute/docs/reference/latest/instances#resource
          and
          https://cloud.google.com/compute/docs/disks/persistent-disks#snapshots
          for more details.
        type: string
      type:
        description: Required. The type of the disk to create.
        enum:
          - TYPE_UNSPECIFIED
          - PERSISTENT_HDD
          - PERSISTENT_SSD
          - LOCAL_SSD
        type: string
    type: object
  DockerExecutor:
    description: The Docker execuctor specification.
    properties:
      cmd:
        description: |-
          Required. The command or newline delimited script to run. The command
          string will be executed within a bash shell.

          If the command exits with a non-zero exit code, output parameter
          de-localization will be skipped and the pipeline operation's
          `error` field will be populated.

          Maximum command string length is 16384.
        type: string
      imageName:
        description: |-
          Required. Image name from either Docker Hub or Google Container Registry.
          Users that run pipelines must have READ access to the image.
        type: string
    type: object
  Empty:
    description: |-
      A generic empty message that you can re-use to avoid defining duplicated
      empty messages in your APIs. A typical example is to use it as the request
      or the response type of an API method. For instance:

          service Foo {
            rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
          }

      The JSON representation for `Empty` is empty JSON object `{}`.
    properties: {}
    type: object
  ImportReadGroupSetsResponse:
    description: The read group set import response.
    properties:
      readGroupSetIds:
        description: IDs of the read group sets that were created.
        items:
          type: string
        type: array
    type: object
  ImportVariantsResponse:
    description: The variant data import response.
    properties:
      callSetIds:
        description: IDs of the call sets created during the import.
        items:
          type: string
        type: array
    type: object
  ListOperationsResponse:
    description: The response message for Operations.ListOperations.
    properties:
      nextPageToken:
        description: The standard List next-page token.
        type: string
      operations:
        description: A list of operations that matches the specified filter in the request.
        items:
          $ref: '#/definitions/Operation'
        type: array
    type: object
  ListPipelinesResponse:
    description: |-
      The response of ListPipelines. Contains at most `pageSize`
      pipelines. If it contains `pageSize` pipelines, and more pipelines
      exist, then `nextPageToken` will be populated and should be
      used as the `pageToken` argument to a subsequent ListPipelines
      request.
    properties:
      nextPageToken:
        description: The token to use to get the next page of results.
        type: string
      pipelines:
        description: The matched pipelines.
        items:
          $ref: '#/definitions/Pipeline'
        type: array
    type: object
  LocalCopy:
    description: LocalCopy defines how a remote file should be copied to and from the VM.
    properties:
      disk:
        description: |-
          Required. The name of the disk where this parameter is
          located. Can be the name of one of the disks specified in the
          Resources field, or "boot", which represents the Docker
          instance's boot disk and has a mount point of `/`.
        type: string
      path:
        description: |-
          Required. The path within the user's docker container where
          this input should be localized to and from, relative to the specified
          disk's mount point. For example: file.txt,
        type: string
    type: object
  LoggingOptions:
    description: The logging options for the pipeline run.
    properties:
      gcsPath:
        description: |-
          The location in Google Cloud Storage to which the pipeline logs
          will be copied. Can be specified as a fully qualified directory
          path, in which case logs will be output with a unique identifier
          as the filename in that directory, or as a fully specified path,
          which must end in `.log`, in which case that path will be
          used, and the user must ensure that logs are not
          overwritten. Stdout and stderr logs from the run are also
          generated and output as `-stdout.log` and `-stderr.log`.
        type: string
    type: object
  Operation:
    description: |-
      This resource represents a long-running operation that is the result of a
      network API call.
    properties:
      done:
        description: |-
          If the value is `false`, it means the operation is still in progress.
          If `true`, the operation is completed, and either `error` or `response` is
          available.
        type: boolean
      error:
        $ref: '#/definitions/Status'
        description: The error result of the operation in case of failure or cancellation.
      metadata:
        additionalProperties:
          description: Properties of the object. Contains field @type with type URL.
        description: An OperationMetadata object. This will always be returned with the Operation.
        type: object
      name:
        description: 'The server-assigned name, which is only unique within the same service that originally returns it. For example&#58; `operations/CJHU7Oi_ChDrveSpBRjfuL-qzoWAgEw`'
        type: string
      response:
        additionalProperties:
          description: Properties of the object. Contains field @type with type URL.
        description: 'If importing ReadGroupSets, an ImportReadGroupSetsResponse is returned. If importing Variants, an ImportVariantsResponse is returned. For pipelines and exports, an Empty response is returned.'
        type: object
    type: object
  OperationEvent:
    description: An event that occurred during an Operation.
    properties:
      description:
        description: Required description of event.
        type: string
      endTime:
        description: |-
          Optional time of when event finished. An event can have a start time and no
          finish time. If an event has a finish time, there must be a start time.
        format: google-datetime
        type: string
      startTime:
        description: Optional time of when event started.
        format: google-datetime
        type: string
    type: object
  OperationMetadata:
    description: Metadata describing an Operation.
    properties:
      clientId:
        description: |-
          This field is deprecated. Use `labels` instead. Optionally provided by the
          caller when submitting the request that creates the operation.
        type: string
      createTime:
        description: The time at which the job was submitted to the Genomics service.
        format: google-datetime
        type: string
      endTime:
        description: The time at which the job stopped running.
        format: google-datetime
        type: string
      events:
        description: |-
          Optional event messages that were generated during the job's execution.
          This also contains any warnings that were generated during import
          or export.
        items:
          $ref: '#/definitions/OperationEvent'
        type: array
      labels:
        additionalProperties:
          type: string
        description: |-
          Optionally provided by the caller when submitting the request that creates
          the operation.
        type: object
      projectId:
        description: The Google Cloud Project in which the job is scoped.
        type: string
      request:
        additionalProperties:
          description: Properties of the object. Contains field @type with type URL.
        description: |-
          The original request that started the operation. Note that this will be in
          current version of the API. If the operation was started with v1beta2 API
          and a GetOperation is performed on v1 API, a v1 request will be returned.
        type: object
      runtimeMetadata:
        additionalProperties:
          description: Properties of the object. Contains field @type with type URL.
        description: Runtime metadata on this Operation.
        type: object
      startTime:
        description: The time at which the job began to run.
        format: google-datetime
        type: string
    type: object
  Pipeline:
    description: |-
      The pipeline object. Represents a transformation from a set of input
      parameters to a set of output parameters. The transformation is defined
      as a docker image and command to run within that image. Each pipeline
      is run on a Google Compute Engine VM. A pipeline can be created with the
      `create` method and then later run with the `run` method, or a pipeline can
      be defined and run all at once with the `run` method.
    properties:
      description:
        description: User-specified description.
        type: string
      docker:
        $ref: '#/definitions/DockerExecutor'
        description: Specifies the docker run information.
      inputParameters:
        description: Input parameters of the pipeline.
        items:
          $ref: '#/definitions/PipelineParameter'
        type: array
      name:
        description: |-
          Required. A user specified pipeline name that does not have to be unique.
          This name can be used for filtering Pipelines in ListPipelines.
        type: string
      outputParameters:
        description: Output parameters of the pipeline.
        items:
          $ref: '#/definitions/PipelineParameter'
        type: array
      pipelineId:
        description: |-
          Unique pipeline id that is generated by the service when CreatePipeline
          is called. Cannot be specified in the Pipeline used in the
          CreatePipelineRequest, and will be populated in the response to
          CreatePipeline and all subsequent Get and List calls. Indicates that the
          service has registered this pipeline.
        type: string
      projectId:
        description: |-
          Required. The project in which to create the pipeline. The caller must have
          WRITE access.
        type: string
      resources:
        $ref: '#/definitions/PipelineResources'
        description: |-
          Required. Specifies resource requirements for the pipeline run.
          Required fields:

          *
          minimumCpuCores

          *
          minimumRamGb
    type: object
  PipelineParameter:
    description: |-
      Parameters facilitate setting and delivering data into the
      pipeline's execution environment. They are defined at create time,
      with optional defaults, and can be overridden at run time.

      If `localCopy` is unset, then the parameter specifies a string that
      is passed as-is into the pipeline, as the value of the environment
      variable with the given name.  A default value can be optionally
      specified at create time. The default can be overridden at run time
      using the inputs map. If no default is given, a value must be
      supplied at runtime.

      If `localCopy` is defined, then the parameter specifies a data
      source or sink, both in Google Cloud Storage and on the Docker container
      where the pipeline computation is run. The service account associated with
      the Pipeline (by
      default the project's Compute Engine service account) must have access to the
      Google Cloud Storage paths.

      At run time, the Google Cloud Storage paths can be overridden if a default
      was provided at create time, or must be set otherwise. The pipeline runner
      should add a key/value pair to either the inputs or outputs map. The
      indicated data copies will be carried out before/after pipeline execution,
      just as if the corresponding arguments were provided to `gsutil cp`.

      For example: Given the following `PipelineParameter`, specified
      in the `inputParameters` list:

      ```
      {name: "input_file", localCopy: {path: "file.txt", disk: "pd1"}}
      ```

      where `disk` is defined in the `PipelineResources` object as:

      ```
      {name: "pd1", mountPoint: "/mnt/disk/"}
      ```

      We create a disk named `pd1`, mount it on the host VM, and map
      `/mnt/pd1` to `/mnt/disk` in the docker container.  At
      runtime, an entry for `input_file` would be required in the inputs
      map, such as:

      ```
        inputs["input_file"] = "gs://my-bucket/bar.txt"
      ```

      This would generate the following gsutil call:

      ```
        gsutil cp gs://my-bucket/bar.txt /mnt/pd1/file.txt
      ```

      The file `/mnt/pd1/file.txt` maps to `/mnt/disk/file.txt` in the
      Docker container. Acceptable paths are:

      <table>
        <thead>
          <tr><th>Google Cloud storage path</th><th>Local path</th></tr>
        </thead>
        <tbody>
          <tr><td>file</td><td>file</td></tr>
          <tr><td>glob</td><td>directory</td></tr>
        </tbody>
      </table>

      For outputs, the direction of the copy is reversed:

      ```
        gsutil cp /mnt/disk/file.txt gs://my-bucket/bar.txt
      ```

      Acceptable paths are:

      <table>
        <thead>
          <tr><th>Local path</th><th>Google Cloud Storage path</th></tr>
        </thead>
        <tbody>
          <tr><td>file</td><td>file</td></tr>
          <tr>
            <td>file</td>
            <td>directory - directory must already exist</td>
          </tr>
          <tr>
            <td>glob</td>
            <td>directory - directory will be created if it doesn't exist</td></tr>
        </tbody>
      </table>

      One restriction due to docker limitations, is that for outputs that are found
      on the boot disk, the local path cannot be a glob and must be a file.
    properties:
      defaultValue:
        description: |-
          The default value for this parameter. Can be overridden at runtime.
          If `localCopy` is present, then this must be a Google Cloud Storage path
          beginning with `gs://`.
        type: string
      description:
        description: Human-readable description.
        type: string
      localCopy:
        $ref: '#/definitions/LocalCopy'
        description: |-
          If present, this parameter is marked for copying to and from the VM.
          `LocalCopy` indicates where on the VM the file should be. The value
          given to this parameter (either at runtime or using `defaultValue`)
          must be the remote path where the file should be.
      name:
        description: |-
          Required. Name of the parameter - the pipeline runner uses this string
          as the key to the input and output maps in RunPipeline.
        type: string
    type: object
  PipelineResources:
    description: The system resources for the pipeline run.
    properties:
      bootDiskSizeGb:
        description: The size of the boot disk. Defaults to 10 (GB).
        format: int32
        type: integer
      disks:
        description: Disks to attach.
        items:
          $ref: '#/definitions/Disk'
        type: array
      minimumCpuCores:
        description: The minimum number of cores to use. Defaults to 1.
        format: int32
        type: integer
      minimumRamGb:
        description: The minimum amount of RAM to use. Defaults to 3.75 (GB)
        format: double
        type: number
      noAddress:
        description: |-
          Whether to assign an external IP to the instance. This is an experimental
          feature that may go away. Defaults to false.
          Corresponds to `--no_address` flag for [gcloud compute instances create]
          (https://cloud.google.com/sdk/gcloud/reference/compute/instances/create).
          In order to use this, must be true for both create time and run time.
          Cannot be true at run time if false at create time. If you need to ssh into
          a private IP VM for debugging, you can ssh to a public VM and then ssh into
          the private VM's Internal IP.  If noAddress is set, this pipeline run may
          only load docker images from Google Container Registry and not Docker Hub.
          Before using this, you must
          [configure access to Google services from internal IPs](https://cloud.google.com/compute/docs/configure-private-google-access#configuring_access_to_google_services_from_internal_ips).
        type: boolean
      preemptible:
        description: |-
          Whether to use preemptible VMs. Defaults to `false`. In order to use this,
          must be true for both create time and run time. Cannot be true at run time
          if false at create time.
        type: boolean
      zones:
        description: |-
          List of Google Compute Engine availability zones to which resource
          creation will restricted. If empty, any zone may be chosen.
        items:
          type: string
        type: array
    type: object
  RepeatedString:
    properties:
      values:
        items:
          type: string
        type: array
    type: object
  RunPipelineArgs:
    description: The pipeline run arguments.
    properties:
      clientId:
        description: |-
          This field is deprecated. Use `labels` instead. Client-specified pipeline
          operation identifier.
        type: string
      inputs:
        additionalProperties:
          type: string
        description: |-
          Pipeline input arguments; keys are defined in the pipeline documentation.
          All input parameters that do not have default values  must be specified.
          If parameters with defaults are specified here, the defaults will be
          overridden.
        type: object
      keepVmAliveOnFailureDuration:
        description: |-
          How long to keep the VM up after a failure (for example docker command
          failed, copying input or output files failed, etc). While the VM is up, one
          can ssh into the VM to debug. Default is 0; maximum allowed value is 1 day.
        format: google-duration
        type: string
      labels:
        additionalProperties:
          type: string
        description: |-
          Labels to apply to this pipeline run. Labels will also be applied to
          compute resources (VM, disks) created by this pipeline run. When listing
          operations, operations can filtered by labels.
          Label keys may not be empty; label values may be empty. Non-empty labels
          must be 1-63 characters long, and comply with [RFC1035]
          (https://www.ietf.org/rfc/rfc1035.txt).
          Specifically, the name must be 1-63 characters long and match the regular
          expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first
          character must be a lowercase letter, and all following characters must be
          a dash, lowercase letter, or digit, except the last character, which cannot
          be a dash.
        type: object
      logging:
        $ref: '#/definitions/LoggingOptions'
        description: |-
          Required. Logging options. Used by the service to communicate results
          to the user.
      outputs:
        additionalProperties:
          type: string
        description: |-
          Pipeline output arguments; keys are defined in the pipeline
          documentation.  All output parameters of without default values
          must be specified.  If parameters with defaults are specified
          here, the defaults will be overridden.
        type: object
      projectId:
        description: |-
          Required. The project in which to run the pipeline. The caller must have
          WRITER access to all Google Cloud services and resources (e.g. Google
          Compute Engine) will be used.
        type: string
      resources:
        $ref: '#/definitions/PipelineResources'
        description: Specifies resource requirements/overrides for the pipeline run.
      serviceAccount:
        $ref: '#/definitions/ServiceAccount'
        description: |-
          The Google Cloud Service Account that will be used to access data and
          services. By default, the compute service account associated with
          `projectId` is used.
    type: object
  RunPipelineRequest:
    description: |-
      The request to run a pipeline. If `pipelineId` is specified, it
      refers to a saved pipeline created with CreatePipeline and set as
      the `pipelineId` of the returned Pipeline object. If
      `ephemeralPipeline` is specified, that pipeline is run once
      with the given args and not saved. It is an error to specify both
      `pipelineId` and `ephemeralPipeline`. `pipelineArgs`
      must be specified.
    properties:
      ephemeralPipeline:
        $ref: '#/definitions/Pipeline'
        description: A new pipeline object to run once and then delete.
      pipelineArgs:
        $ref: '#/definitions/RunPipelineArgs'
        description: The arguments to use when running this pipeline.
      pipelineId:
        description: The already created pipeline to run.
        type: string
    type: object
  RuntimeMetadata:
    description: |-
      Runtime metadata that will be populated in the
      runtimeMetadata
      field of the Operation associated with a RunPipeline execution.
    properties:
      computeEngine:
        $ref: '#/definitions/ComputeEngine'
        description: Execution information specific to Google Compute Engine.
    type: object
  ServiceAccount:
    description: A Google Cloud Service Account.
    properties:
      email:
        description: |-
          Email address of the service account. Defaults to `default`,
          which uses the compute service account associated with the project.
        type: string
      scopes:
        description: |-
          List of scopes to be enabled for this service account on the VM.
          The following scopes are automatically included:

          * https://www.googleapis.com/auth/compute
          * https://www.googleapis.com/auth/devstorage.full_control
          * https://www.googleapis.com/auth/genomics
          * https://www.googleapis.com/auth/logging.write
          * https://www.googleapis.com/auth/monitoring.write
        items:
          type: string
        type: array
    type: object
  SetOperationStatusRequest:
    description: |-
      Request to set operation status. Should only be used by VMs
      created by the Pipelines Service and not by end users.
    properties:
      errorCode:
        enum:
          - OK
          - CANCELLED
          - UNKNOWN
          - INVALID_ARGUMENT
          - DEADLINE_EXCEEDED
          - NOT_FOUND
          - ALREADY_EXISTS
          - PERMISSION_DENIED
          - UNAUTHENTICATED
          - RESOURCE_EXHAUSTED
          - FAILED_PRECONDITION
          - ABORTED
          - OUT_OF_RANGE
          - UNIMPLEMENTED
          - INTERNAL
          - UNAVAILABLE
          - DATA_LOSS
        type: string
      errorMessage:
        type: string
      operationId:
        type: string
      timestampEvents:
        items:
          $ref: '#/definitions/TimestampEvent'
        type: array
      validationToken:
        format: uint64
        type: string
    type: object
  Status:
    description: |-
      The `Status` type defines a logical error model that is suitable for different
      programming environments, including REST APIs and RPC APIs. It is used by
      [gRPC](https://github.com/grpc). The error model is designed to be:

      - Simple to use and understand for most users
      - Flexible enough to meet unexpected needs

      # Overview

      The `Status` message contains three pieces of data: error code, error message,
      and error details. The error code should be an enum value of
      google.rpc.Code, but it may accept additional error codes if needed.  The
      error message should be a developer-facing English message that helps
      developers *understand* and *resolve* the error. If a localized user-facing
      error message is needed, put the localized message in the error details or
      localize it in the client. The optional error details may contain arbitrary
      information about the error. There is a predefined set of error detail types
      in the package `google.rpc` that can be used for common error conditions.

      # Language mapping

      The `Status` message is the logical representation of the error model, but it
      is not necessarily the actual wire format. When the `Status` message is
      exposed in different client libraries and different wire protocols, it can be
      mapped differently. For example, it will likely be mapped to some exceptions
      in Java, but more likely mapped to some error codes in C.

      # Other uses

      The error model and the `Status` message can be used in a variety of
      environments, either with or without APIs, to provide a
      consistent developer experience across different environments.

      Example uses of this error model include:

      - Partial errors. If a service needs to return partial errors to the client,
          it may embed the `Status` in the normal response to indicate the partial
          errors.

      - Workflow errors. A typical workflow has multiple steps. Each step may
          have a `Status` message for error reporting.

      - Batch operations. If a client uses batch request and batch response, the
          `Status` message should be used directly inside batch response, one for
          each error sub-response.

      - Asynchronous operations. If an API call embeds asynchronous operation
          results in its response, the status of those operations should be
          represented directly using the `Status` message.

      - Logging. If some API errors are stored in logs, the message `Status` could
          be used directly after any stripping needed for security/privacy reasons.
    properties:
      code:
        description: 'The status code, which should be an enum value of google.rpc.Code.'
        format: int32
        type: integer
      details:
        description: |-
          A list of messages that carry the error details.  There is a common set of
          message types for APIs to use.
        items:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          type: object
        type: array
      message:
        description: |-
          A developer-facing error message, which should be in English. Any
          user-facing error message should be localized and sent in the
          google.rpc.Status.details field, or localized by the client.
        type: string
    type: object
  TimestampEvent:
    description: |-
      Stores the list of events and times they occured for major events in job
      execution.
    properties:
      description:
        description: String indicating the type of event
        type: string
      timestamp:
        description: The time this event occured.
        format: google-datetime
        type: string
    type: object

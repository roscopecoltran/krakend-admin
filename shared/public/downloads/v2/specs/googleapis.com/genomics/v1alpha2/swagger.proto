syntax = "proto3";

import "google/api/annotations.proto";

package genomics;

message GetV1alpha2PipelinesRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    // Pipelines with names that match this prefix should be
    // returned.  If unspecified, all pipelines in the project, up to
    // `pageSize`, will be returned.
    string namePrefix = 8;
    string oauth_token = 9;
    // Number of pipelines to return at once. Defaults to 256, and max
    // is 2048.
    int32 pageSize = 10;
    // Token to use to indicate where to start getting results.
    // If unspecified, returns the first page of results.
    string pageToken = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    // Required. The name of the project to search for pipelines. Caller
    // must have READ access to this project.
    string projectId = 14;
    string quotaUser = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

message PostV1alpha2PipelinesRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    Pipeline body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message GetV1alpha2PipelinesPipelineIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    // Caller must have READ access to the project in which this pipeline
    // is defined.
    string pipelineId = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message DeleteV1alpha2PipelinesPipelineIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    // Caller must have WRITE access to the project in which this pipeline
    // is defined.
    string pipelineId = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message GetV1alpha2Pipelines:GetControllerConfigRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    // The operation to retrieve controller configuration for.
    string operationId = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
    string validationToken = 15;
}

message PostV1alpha2Pipelines:RunRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    RunPipelineRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PutV1alpha2Pipelines:SetOperationStatusRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    SetOperationStatusRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message GetV1alpha2NameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // A string for filtering Operations.
    // The following filter fields are supported&#58;
    // 
    // * projectId&#58; Required. Corresponds to
    //   OperationMetadata.projectId.
    // * createTime&#58; The time this job was created, in seconds from the
    //   [epoch](http://en.wikipedia.org/wiki/Unix_time). Can use `>=` and/or `<=`
    //   operators.
    // * status&#58; Can be `RUNNING`, `SUCCESS`, `FAILURE`, or `CANCELED`. Only
    //   one status may be specified.
    // * labels.key where key is a label key.
    // 
    // Examples&#58;
    // 
    // * `projectId = my-project AND createTime >= 1432140000`
    // * `projectId = my-project AND createTime >= 1432140000 AND createTime <= 1432150000 AND status = RUNNING`
    // * `projectId = my-project AND labels.color = *`
    // * `projectId = my-project AND labels.color = red`
    string filter = 7;
    string key = 8;
    // The name of the operation's parent resource.
    string name = 9;
    string oauth_token = 10;
    // The maximum number of results to return. If unspecified, defaults to
    // 256. The maximum value is 2048.
    int32 pageSize = 11;
    // The standard list page token.
    string pageToken = 12;
    boolean pp = 13;
    boolean prettyPrint = 14;
    string quotaUser = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

message PostV1alpha2Name:CancelRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    CancelOperationRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    // The name of the operation resource to be cancelled.
    string name = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

enum $.Xgafv {
    $XGAFV_1 = 0;
    $XGAFV_2 = 1;
}

message CancelOperationRequest {
}

message ComputeEngine {
    // The names of the disks that were created for this pipeline.
    repeated string diskNames = 1;
    // The instance on which the operation is running.
    string instanceName = 2;
    // The machine type of the instance.
    string machineType = 3;
    // The availability zone in which the instance resides.
    string zone = 4;
}

message ControllerConfig {
    string cmd = 1;
    map<string, string> disks = 2;
    string gcsLogPath = 3;
    map<string, RepeatedString> gcsSinks = 4;
    map<string, RepeatedString> gcsSources = 5;
    string image = 6;
    string machineType = 7;
    map<string, string> vars = 8;
}

message Disk {
    // Deprecated. Disks created by the Pipelines API will be deleted at the end
    // of the pipeline run, regardless of what this field is set to.
    bool autoDelete = 1;
    // Required at create time and cannot be overridden at run time.
    // Specifies the path in the docker container where files on
    // this disk should be located. For example, if `mountPoint`
    // is `/mnt/disk`, and the parameter has `localPath`
    // `inputs/file.txt`, the docker container can access the data at
    // `/mnt/disk/inputs/file.txt`.
    string mountPoint = 2;
    // Required. The name of the disk that can be used in the pipeline
    // parameters. Must be 1 - 63 characters.
    // The name "boot" is reserved for system use.
    string name = 3;
    // Specifies how a sourced-base persistent disk will be mounted. See
    // https://cloud.google.com/compute/docs/disks/persistent-disks#use_multi_instances
    // for more details.
    // Can only be set at create time.
    bool readOnly = 4;
    // The size of the disk. Defaults to 500 (GB).
    // This field is not applicable for local SSD.
    int32 sizeGb = 5;
    // The full or partial URL of the persistent disk to attach. See
    // https://cloud.google.com/compute/docs/reference/latest/instances#resource
    // and
    // https://cloud.google.com/compute/docs/disks/persistent-disks#snapshots
    // for more details.
    string source = 6;
    // Required. The type of the disk to create.
    enum Disk_Type {
        DISK_TYPE_TYPE_UNSPECIFIED = 0;
        DISK_TYPE_PERSISTENT_HDD = 1;
        DISK_TYPE_PERSISTENT_SSD = 2;
        DISK_TYPE_LOCAL_SSD = 3;
    }
    Disk_Type type = 7;
}

message DockerExecutor {
    // Required. The command or newline delimited script to run. The command
    // string will be executed within a bash shell.
    // 
    // If the command exits with a non-zero exit code, output parameter
    // de-localization will be skipped and the pipeline operation's
    // `error` field will be populated.
    // 
    // Maximum command string length is 16384.
    string cmd = 1;
    // Required. Image name from either Docker Hub or Google Container Registry.
    // Users that run pipelines must have READ access to the image.
    string imageName = 2;
}

message Empty {
}

message ImportReadGroupSetsResponse {
    // IDs of the read group sets that were created.
    repeated string readGroupSetIds = 1;
}

message ImportVariantsResponse {
    // IDs of the call sets created during the import.
    repeated string callSetIds = 1;
}

message ListOperationsResponse {
    // The standard List next-page token.
    string nextPageToken = 1;
    // A list of operations that matches the specified filter in the request.
    repeated Operation operations = 2;
}

message ListPipelinesResponse {
    // The token to use to get the next page of results.
    string nextPageToken = 1;
    // The matched pipelines.
    repeated Pipeline pipelines = 2;
}

message LocalCopy {
    // Required. The name of the disk where this parameter is
    // located. Can be the name of one of the disks specified in the
    // Resources field, or "boot", which represents the Docker
    // instance's boot disk and has a mount point of `/`.
    string disk = 1;
    // Required. The path within the user's docker container where
    // this input should be localized to and from, relative to the specified
    // disk's mount point. For example: file.txt,
    string path = 2;
}

message LoggingOptions {
    // The location in Google Cloud Storage to which the pipeline logs
    // will be copied. Can be specified as a fully qualified directory
    // path, in which case logs will be output with a unique identifier
    // as the filename in that directory, or as a fully specified path,
    // which must end in `.log`, in which case that path will be
    // used, and the user must ensure that logs are not
    // overwritten. Stdout and stderr logs from the run are also
    // generated and output as `-stdout.log` and `-stderr.log`.
    string gcsPath = 1;
}

message Operation {
    // If the value is `false`, it means the operation is still in progress.
    // If `true`, the operation is completed, and either `error` or `response` is
    // available.
    bool done = 1;
    // The error result of the operation in case of failure or cancellation.
    Status error = 2;
    // An OperationMetadata object. This will always be returned with the Operation.
    map<string, > metadata = 3;
    // The server-assigned name, which is only unique within the same service that originally returns it. For example&#58; `operations/CJHU7Oi_ChDrveSpBRjfuL-qzoWAgEw`
    string name = 4;
    // If importing ReadGroupSets, an ImportReadGroupSetsResponse is returned. If importing Variants, an ImportVariantsResponse is returned. For pipelines and exports, an Empty response is returned.
    map<string, > response = 5;
}

message OperationEvent {
    // Required description of event.
    string description = 1;
    // Optional time of when event finished. An event can have a start time and no
    // finish time. If an event has a finish time, there must be a start time.
    string endTime = 2;
    // Optional time of when event started.
    string startTime = 3;
}

message OperationMetadata {
    // This field is deprecated. Use `labels` instead. Optionally provided by the
    // caller when submitting the request that creates the operation.
    string clientId = 1;
    // The time at which the job was submitted to the Genomics service.
    string createTime = 2;
    // The time at which the job stopped running.
    string endTime = 3;
    // Optional event messages that were generated during the job's execution.
    // This also contains any warnings that were generated during import
    // or export.
    repeated OperationEvent events = 4;
    // Optionally provided by the caller when submitting the request that creates
    // the operation.
    map<string, string> labels = 5;
    // The Google Cloud Project in which the job is scoped.
    string projectId = 6;
    // The original request that started the operation. Note that this will be in
    // current version of the API. If the operation was started with v1beta2 API
    // and a GetOperation is performed on v1 API, a v1 request will be returned.
    map<string, > request = 7;
    // Runtime metadata on this Operation.
    map<string, > runtimeMetadata = 8;
    // The time at which the job began to run.
    string startTime = 9;
}

message Pipeline {
    // User-specified description.
    string description = 1;
    // Specifies the docker run information.
    DockerExecutor docker = 2;
    // Input parameters of the pipeline.
    repeated PipelineParameter inputParameters = 3;
    // Required. A user specified pipeline name that does not have to be unique.
    // This name can be used for filtering Pipelines in ListPipelines.
    string name = 4;
    // Output parameters of the pipeline.
    repeated PipelineParameter outputParameters = 5;
    // Unique pipeline id that is generated by the service when CreatePipeline
    // is called. Cannot be specified in the Pipeline used in the
    // CreatePipelineRequest, and will be populated in the response to
    // CreatePipeline and all subsequent Get and List calls. Indicates that the
    // service has registered this pipeline.
    string pipelineId = 6;
    // Required. The project in which to create the pipeline. The caller must have
    // WRITE access.
    string projectId = 7;
    // Required. Specifies resource requirements for the pipeline run.
    // Required fields:
    // 
    // *
    // minimumCpuCores
    // 
    // *
    // minimumRamGb
    PipelineResources resources = 8;
}

message PipelineParameter {
    // The default value for this parameter. Can be overridden at runtime.
    // If `localCopy` is present, then this must be a Google Cloud Storage path
    // beginning with `gs://`.
    string defaultValue = 1;
    // Human-readable description.
    string description = 2;
    // If present, this parameter is marked for copying to and from the VM.
    // `LocalCopy` indicates where on the VM the file should be. The value
    // given to this parameter (either at runtime or using `defaultValue`)
    // must be the remote path where the file should be.
    LocalCopy localCopy = 3;
    // Required. Name of the parameter - the pipeline runner uses this string
    // as the key to the input and output maps in RunPipeline.
    string name = 4;
}

message PipelineResources {
    // The size of the boot disk. Defaults to 10 (GB).
    int32 bootDiskSizeGb = 1;
    // Disks to attach.
    repeated Disk disks = 2;
    // The minimum number of cores to use. Defaults to 1.
    int32 minimumCpuCores = 3;
    // The minimum amount of RAM to use. Defaults to 3.75 (GB)
    double minimumRamGb = 4;
    // Whether to assign an external IP to the instance. This is an experimental
    // feature that may go away. Defaults to false.
    // Corresponds to `--no_address` flag for [gcloud compute instances create]
    // (https://cloud.google.com/sdk/gcloud/reference/compute/instances/create).
    // In order to use this, must be true for both create time and run time.
    // Cannot be true at run time if false at create time. If you need to ssh into
    // a private IP VM for debugging, you can ssh to a public VM and then ssh into
    // the private VM's Internal IP.  If noAddress is set, this pipeline run may
    // only load docker images from Google Container Registry and not Docker Hub.
    // Before using this, you must
    // [configure access to Google services from internal IPs](https://cloud.google.com/compute/docs/configure-private-google-access#configuring_access_to_google_services_from_internal_ips).
    bool noAddress = 5;
    // Whether to use preemptible VMs. Defaults to `false`. In order to use this,
    // must be true for both create time and run time. Cannot be true at run time
    // if false at create time.
    bool preemptible = 6;
    // List of Google Compute Engine availability zones to which resource
    // creation will restricted. If empty, any zone may be chosen.
    repeated string zones = 7;
}

message RepeatedString {
    repeated string values = 1;
}

message RunPipelineArgs {
    // This field is deprecated. Use `labels` instead. Client-specified pipeline
    // operation identifier.
    string clientId = 1;
    // Pipeline input arguments; keys are defined in the pipeline documentation.
    // All input parameters that do not have default values  must be specified.
    // If parameters with defaults are specified here, the defaults will be
    // overridden.
    map<string, string> inputs = 2;
    // How long to keep the VM up after a failure (for example docker command
    // failed, copying input or output files failed, etc). While the VM is up, one
    // can ssh into the VM to debug. Default is 0; maximum allowed value is 1 day.
    string keepVmAliveOnFailureDuration = 3;
    // Labels to apply to this pipeline run. Labels will also be applied to
    // compute resources (VM, disks) created by this pipeline run. When listing
    // operations, operations can filtered by labels.
    // Label keys may not be empty; label values may be empty. Non-empty labels
    // must be 1-63 characters long, and comply with [RFC1035]
    // (https://www.ietf.org/rfc/rfc1035.txt).
    // Specifically, the name must be 1-63 characters long and match the regular
    // expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first
    // character must be a lowercase letter, and all following characters must be
    // a dash, lowercase letter, or digit, except the last character, which cannot
    // be a dash.
    map<string, string> labels = 4;
    // Required. Logging options. Used by the service to communicate results
    // to the user.
    LoggingOptions logging = 5;
    // Pipeline output arguments; keys are defined in the pipeline
    // documentation.  All output parameters of without default values
    // must be specified.  If parameters with defaults are specified
    // here, the defaults will be overridden.
    map<string, string> outputs = 6;
    // Required. The project in which to run the pipeline. The caller must have
    // WRITER access to all Google Cloud services and resources (e.g. Google
    // Compute Engine) will be used.
    string projectId = 7;
    // Specifies resource requirements/overrides for the pipeline run.
    PipelineResources resources = 8;
    // The Google Cloud Service Account that will be used to access data and
    // services. By default, the compute service account associated with
    // `projectId` is used.
    ServiceAccount serviceAccount = 9;
}

message RunPipelineRequest {
    // A new pipeline object to run once and then delete.
    Pipeline ephemeralPipeline = 1;
    // The arguments to use when running this pipeline.
    RunPipelineArgs pipelineArgs = 2;
    // The already created pipeline to run.
    string pipelineId = 3;
}

message RuntimeMetadata {
    // Execution information specific to Google Compute Engine.
    ComputeEngine computeEngine = 1;
}

message ServiceAccount {
    // Email address of the service account. Defaults to `default`,
    // which uses the compute service account associated with the project.
    string email = 1;
    // List of scopes to be enabled for this service account on the VM.
    // The following scopes are automatically included:
    // 
    // * https://www.googleapis.com/auth/compute
    // * https://www.googleapis.com/auth/devstorage.full_control
    // * https://www.googleapis.com/auth/genomics
    // * https://www.googleapis.com/auth/logging.write
    // * https://www.googleapis.com/auth/monitoring.write
    repeated string scopes = 2;
}

message SetOperationStatusRequest {
    enum SetOperationStatusRequest_ErrorCode {
        SETOPERATIONSTATUSREQUEST_ERRORCODE_OK = 0;
        SETOPERATIONSTATUSREQUEST_ERRORCODE_CANCELLED = 1;
        SETOPERATIONSTATUSREQUEST_ERRORCODE_UNKNOWN = 2;
        SETOPERATIONSTATUSREQUEST_ERRORCODE_INVALID_ARGUMENT = 3;
        SETOPERATIONSTATUSREQUEST_ERRORCODE_DEADLINE_EXCEEDED = 4;
        SETOPERATIONSTATUSREQUEST_ERRORCODE_NOT_FOUND = 5;
        SETOPERATIONSTATUSREQUEST_ERRORCODE_ALREADY_EXISTS = 6;
        SETOPERATIONSTATUSREQUEST_ERRORCODE_PERMISSION_DENIED = 7;
        SETOPERATIONSTATUSREQUEST_ERRORCODE_UNAUTHENTICATED = 8;
        SETOPERATIONSTATUSREQUEST_ERRORCODE_RESOURCE_EXHAUSTED = 9;
        SETOPERATIONSTATUSREQUEST_ERRORCODE_FAILED_PRECONDITION = 10;
        SETOPERATIONSTATUSREQUEST_ERRORCODE_ABORTED = 11;
        SETOPERATIONSTATUSREQUEST_ERRORCODE_OUT_OF_RANGE = 12;
        SETOPERATIONSTATUSREQUEST_ERRORCODE_UNIMPLEMENTED = 13;
        SETOPERATIONSTATUSREQUEST_ERRORCODE_INTERNAL = 14;
        SETOPERATIONSTATUSREQUEST_ERRORCODE_UNAVAILABLE = 15;
        SETOPERATIONSTATUSREQUEST_ERRORCODE_DATA_LOSS = 16;
    }
    SetOperationStatusRequest_ErrorCode errorCode = 1;
    string errorMessage = 2;
    string operationId = 3;
    repeated TimestampEvent timestampEvents = 4;
    string validationToken = 5;
}

message Status {
    // The status code, which should be an enum value of google.rpc.Code.
    int32 code = 1;
    // A list of messages that carry the error details.  There is a common set of
    // message types for APIs to use.
    message Detail {
    }
    repeated Detail details = 2;
    // A developer-facing error message, which should be in English. Any
    // user-facing error message should be localized and sent in the
    // google.rpc.Status.details field, or localized by the client.
    string message = 3;
}

message TimestampEvent {
    // String indicating the type of event
    string description = 1;
    // The time this event occured.
    string timestamp = 2;
}

enum Alt {
    JSON = 0;
    MEDIA = 1;
    PROTO = 2;
}

service GenomicsService {
    // Lists pipelines.
    // 
    // Caller must have READ permission to the project.
    rpc GetV1alpha2Pipelines(GetV1alpha2PipelinesRequest) returns (ListPipelinesResponse) {
      option (google.api.http) = {
        get: "//v1alpha2/pipelines"
      };
    }
    // Creates a pipeline that can be run later. Create takes a Pipeline that
    // has all fields other than `pipelineId` populated, and then returns
    // the same pipeline with `pipelineId` populated. This id can be used
    // to run the pipeline.
    // 
    // Caller must have WRITE permission to the project.
    rpc PostV1alpha2Pipelines(PostV1alpha2PipelinesRequest) returns (Pipeline) {
      option (google.api.http) = {
        post: "//v1alpha2/pipelines"
        body: "body"
      };
    }
    // Retrieves a pipeline based on ID.
    // 
    // Caller must have READ permission to the project.
    rpc GetV1alpha2PipelinesPipelineId(GetV1alpha2PipelinesPipelineIdRequest) returns (Pipeline) {
      option (google.api.http) = {
        get: "//v1alpha2/pipelines/{pipelineId}"
      };
    }
    // Deletes a pipeline based on ID.
    // 
    // Caller must have WRITE permission to the project.
    rpc DeleteV1alpha2PipelinesPipelineId(DeleteV1alpha2PipelinesPipelineIdRequest) returns (Empty) {
      option (google.api.http) = {
        delete: "//v1alpha2/pipelines/{pipelineId}"
      };
    }
    // Gets controller configuration information. Should only be called
    // by VMs created by the Pipelines Service and not by end users.
    rpc GetV1alpha2Pipelines:GetControllerConfig(GetV1alpha2Pipelines:GetControllerConfigRequest) returns (ControllerConfig) {
      option (google.api.http) = {
        get: "//v1alpha2/pipelines:getControllerConfig"
      };
    }
    // Runs a pipeline. If `pipelineId` is specified in the request, then
    // run a saved pipeline. If `ephemeralPipeline` is specified, then run
    // that pipeline once without saving a copy.
    // 
    // The caller must have READ permission to the project where the pipeline
    // is stored and WRITE permission to the project where the pipeline will be
    // run, as VMs will be created and storage will be used.
    // 
    // If a pipeline operation is still running after 6 days, it will be canceled.
    rpc PostV1alpha2Pipelines:Run(PostV1alpha2Pipelines:RunRequest) returns (Operation) {
      option (google.api.http) = {
        post: "//v1alpha2/pipelines:run"
        body: "body"
      };
    }
    // Sets status of a given operation. Any new timestamps (as determined by
    // description) are appended to TimestampEvents. Should only be called by VMs
    // created by the Pipelines Service and not by end users.
    rpc PutV1alpha2Pipelines:SetOperationStatus(PutV1alpha2Pipelines:SetOperationStatusRequest) returns (Empty) {
      option (google.api.http) = {
        put: "//v1alpha2/pipelines:setOperationStatus"
        body: "body"
      };
    }
    // Lists operations that match the specified filter in the request.
    rpc GetV1alpha2Name(GetV1alpha2NameRequest) returns (ListOperationsResponse) {
      option (google.api.http) = {
        get: "//v1alpha2/{name}"
      };
    }
    // Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. Clients may use Operations.GetOperation or Operations.ListOperations to check whether the cancellation succeeded or the operation completed despite cancellation.
    rpc PostV1alpha2Name:Cancel(PostV1alpha2Name:CancelRequest) returns (Empty) {
      option (google.api.http) = {
        post: "//v1alpha2/{name}:cancel"
        body: "body"
      };
    }
}

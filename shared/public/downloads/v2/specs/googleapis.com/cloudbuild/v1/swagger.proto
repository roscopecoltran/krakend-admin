syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package googlecloudcontainerbuilder;

message GetV1ProjectsProjectIdBuildsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // The raw filter text to constrain the results.
    string filter = 7;
    string key = 8;
    string oauth_token = 9;
    // Number of results to return in the list.
    int32 pageSize = 10;
    // Token to provide to skip to a particular spot in the list.
    string pageToken = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    // ID of the project.
    string projectId = 14;
    string quotaUser = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

message PostV1ProjectsProjectIdBuildsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    Build body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    // ID of the project.
    string projectId = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1ProjectsProjectIdBuildsIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // ID of the build.
    string id = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    // ID of the project.
    string projectId = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1ProjectsProjectIdBuildsId:CancelRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    CancelBuildRequest body = 5;
    string callback = 6;
    string fields = 7;
    // ID of the build.
    string id = 8;
    string key = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    // ID of the project.
    string projectId = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message GetV1ProjectsProjectIdTriggersRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    boolean pp = 9;
    boolean prettyPrint = 10;
    // ID of the project for which to list BuildTriggers.
    string projectId = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PostV1ProjectsProjectIdTriggersRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    BuildTrigger body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    // ID of the project for which to configure automatic builds.
    string projectId = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1ProjectsProjectIdTriggersTriggerIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    boolean pp = 9;
    boolean prettyPrint = 10;
    // ID of the project that owns the trigger.
    string projectId = 11;
    string quotaUser = 12;
    // ID of the BuildTrigger to get.
    string triggerId = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message DeleteV1ProjectsProjectIdTriggersTriggerIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    boolean pp = 9;
    boolean prettyPrint = 10;
    // ID of the project that owns the trigger.
    string projectId = 11;
    string quotaUser = 12;
    // ID of the BuildTrigger to delete.
    string triggerId = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1NameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // The standard list filter.
    string filter = 7;
    string key = 8;
    // The name of the operation's parent resource.
    string name = 9;
    string oauth_token = 10;
    // The standard list page size.
    int32 pageSize = 11;
    // The standard list page token.
    string pageToken = 12;
    boolean pp = 13;
    boolean prettyPrint = 14;
    string quotaUser = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

message PostV1Name:CancelRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    CancelOperationRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    // The name of the operation resource to be cancelled.
    string name = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

enum $.Xgafv {
    $XGAFV_1 = 0;
    $XGAFV_2 = 1;
}

message Build {
    // The ID of the BuildTrigger that triggered this build, if it was
    // triggered automatically.
    // @OutputOnly
    string buildTriggerId = 1;
    // Time at which the request to create the build was received.
    // @OutputOnly
    string createTime = 2;
    // Time at which execution of the build was finished.
    // 
    // The difference between finish_time and start_time is the duration of the
    // build's execution.
    // @OutputOnly
    string finishTime = 3;
    // Unique identifier of the build.
    // @OutputOnly
    string id = 4;
    // A list of images to be pushed upon the successful completion of all build
    // steps.
    // 
    // The images will be pushed using the builder service account's credentials.
    // 
    // The digests of the pushed images will be stored in the Build resource's
    // results field.
    // 
    // If any of the images fail to be pushed, the build is marked FAILURE.
    repeated string images = 5;
    // URL to logs for this build in Google Cloud Logging.
    // @OutputOnly
    string logUrl = 6;
    // Google Cloud Storage bucket where logs should be written (see
    // [Bucket Name
    // Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
    // Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
    string logsBucket = 7;
    // Special options for this build.
    BuildOptions options = 8;
    // ID of the project.
    // @OutputOnly.
    string projectId = 9;
    // Results of the build.
    // @OutputOnly
    Results results = 10;
    // Secrets to decrypt using Cloud KMS.
    repeated Secret secrets = 11;
    // Describes where to find the source files to build.
    Source source = 12;
    // A permanent fixed identifier for source.
    // @OutputOnly
    SourceProvenance sourceProvenance = 13;
    // Time at which execution of the build was started.
    // @OutputOnly
    string startTime = 14;
    // Status of the build.
    // @OutputOnly
    enum Build_Statu {
        BUILD_STATU_STATUS_UNKNOWN = 0;
        BUILD_STATU_QUEUED = 1;
        BUILD_STATU_WORKING = 2;
        BUILD_STATU_SUCCESS = 3;
        BUILD_STATU_FAILURE = 4;
        BUILD_STATU_INTERNAL_ERROR = 5;
        BUILD_STATU_TIMEOUT = 6;
        BUILD_STATU_CANCELLED = 7;
    }
    Build_Statu status = 15;
    // Customer-readable message about the current status.
    // @OutputOnly
    string statusDetail = 16;
    // Describes the operations to be performed on the workspace.
    repeated BuildStep steps = 17;
    // Substitutions data for Build resource.
    map<string, string> substitutions = 18;
    // Tags for annotation of a Build. These are not docker tags.
    repeated string tags = 19;
    // Amount of time that this build should be allowed to run, to second
    // granularity. If this amount of time elapses, work on the build will cease
    // and the build status will be TIMEOUT.
    // 
    // Default time is ten minutes.
    string timeout = 20;
}

message BuildOperationMetadata {
    // The build that the operation is tracking.
    Build build = 1;
}

message BuildOptions {
    // Requested verifiability options.
    enum BuildOptions_RequestedVerifyOption {
        BUILDOPTIONS_REQUESTEDVERIFYOPTION_NOT_VERIFIED = 0;
        BUILDOPTIONS_REQUESTEDVERIFYOPTION_VERIFIED = 1;
    }
    BuildOptions_RequestedVerifyOption requestedVerifyOption = 1;
    // Requested hash for SourceProvenance.
    repeated string sourceProvenanceHash = 2;
    // SubstitutionOption to allow unmatch substitutions.
    enum BuildOptions_SubstitutionOption {
        BUILDOPTIONS_SUBSTITUTIONOPTION_MUST_MATCH = 0;
        BUILDOPTIONS_SUBSTITUTIONOPTION_ALLOW_LOOSE = 1;
    }
    BuildOptions_SubstitutionOption substitutionOption = 3;
}

message BuildStep {
    // A list of arguments that will be presented to the step when it is started.
    // 
    // If the image used to run the step's container has an entrypoint, these args
    // will be used as arguments to that entrypoint. If the image does not define
    // an entrypoint, the first element in args will be used as the entrypoint,
    // and the remainder will be used as arguments.
    repeated string args = 1;
    // Working directory (relative to project source root) to use when running
    // this operation's container.
    string dir = 2;
    // Optional entrypoint to be used instead of the build step image's default
    // If unset, the image's default will be used.
    string entrypoint = 3;
    // A list of environment variable definitions to be used when running a step.
    // 
    // The elements are of the form "KEY=VALUE" for the environment variable "KEY"
    // being given the value "VALUE".
    repeated string env = 4;
    // Optional unique identifier for this build step, used in wait_for to
    // reference this build step as a dependency.
    string id = 5;
    // The name of the container image that will run this particular build step.
    // 
    // If the image is already available in the host's Docker daemon's cache, it
    // will be run directly. If not, the host will attempt to pull the image
    // first, using the builder service account's credentials if necessary.
    // 
    // The Docker daemon's cache will already have the latest versions of all of
    // the officially supported build steps
    // ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)).
    // The Docker daemon will also have cached many of the layers for some popular
    // images, like "ubuntu", "debian", but they will be refreshed at the time you
    // attempt to use them.
    // 
    // If you built an image in a previous build step, it will be stored in the
    // host's Docker daemon's cache and is available to use as the name for a
    // later build step.
    string name = 6;
    // A list of environment variables which are encrypted using a Cloud KMS
    // crypto key. These values must be specified in the build's secrets.
    repeated string secretEnv = 7;
    // List of volumes to mount into the build step.
    // 
    // Each volume will be created as an empty volume prior to execution of the
    // build step. Upon completion of the build, volumes and their contents will
    // be discarded.
    // 
    // Using a named volume in only one step is not valid as it is indicative
    // of a mis-configured build request.
    repeated Volume volumes = 8;
    // The ID(s) of the step(s) that this build step depends on.
    // This build step will not start until all the build steps in wait_for
    // have completed successfully. If wait_for is empty, this build step will
    // start when all previous build steps in the Build.Steps list have completed
    // successfully.
    repeated string waitFor = 9;
}

message BuildTrigger {
    // Contents of the build template.
    Build build = 1;
    // Time when the trigger was created.
    // 
    // @OutputOnly
    string createTime = 2;
    // Human-readable description of this trigger.
    string description = 3;
    // If true, the trigger will never result in a build.
    bool disabled = 4;
    // Path, from the source root, to a file whose contents is used for the
    // template.
    string filename = 5;
    // Unique identifier of the trigger.
    // 
    // @OutputOnly
    string id = 6;
    // Substitutions data for Build resource.
    map<string, string> substitutions = 7;
    // Template describing the types of source changes to trigger a build.
    // 
    // Branch and tag names in trigger templates are interpreted as regular
    // expressions. Any branch or tag change that matches that regular expression
    // will trigger a build.
    RepoSource triggerTemplate = 8;
}

message BuiltImage {
    // Docker Registry 2.0 digest.
    string digest = 1;
    // Name used to push the container image to Google Container Registry, as
    // presented to `docker push`.
    string name = 2;
}

message CancelBuildRequest {
}

message CancelOperationRequest {
}

message Empty {
}

message FileHashes {
    // Collection of file hashes.
    repeated Hash fileHash = 1;
}

message Hash {
    // The type of hash that was performed.
    enum Hash_Type {
        HASH_TYPE_NONE = 0;
        HASH_TYPE_SHA256 = 1;
    }
    Hash_Type type = 1;
    // The hash value.
    string value = 2;
}

message ListBuildTriggersResponse {
    // BuildTriggers for the project, sorted by create_time descending.
    repeated BuildTrigger triggers = 1;
}

message ListBuildsResponse {
    // Builds will be sorted by create_time, descending.
    repeated Build builds = 1;
    // Token to receive the next page of results.
    string nextPageToken = 2;
}

message ListOperationsResponse {
    // The standard List next-page token.
    string nextPageToken = 1;
    // A list of operations that matches the specified filter in the request.
    repeated Operation operations = 2;
}

message Operation {
    // If the value is `false`, it means the operation is still in progress.
    // If `true`, the operation is completed, and either `error` or `response` is
    // available.
    bool done = 1;
    // The error result of the operation in case of failure or cancellation.
    Status error = 2;
    // Service-specific metadata associated with the operation.  It typically
    // contains progress information and common metadata such as create time.
    // Some services might not provide such metadata.  Any method that returns a
    // long-running operation should document the metadata type, if any.
    map<string, > metadata = 3;
    // The server-assigned name, which is only unique within the same service that
    // originally returns it. If you use the default HTTP mapping, the
    // `name` should have the format of `operations/some/unique/name`.
    string name = 4;
    // The normal response of the operation in case of success.  If the original
    // method returns no data on success, such as `Delete`, the response is
    // `google.protobuf.Empty`.  If the original method is standard
    // `Get`/`Create`/`Update`, the response should be the resource.  For other
    // methods, the response should have the type `XxxResponse`, where `Xxx`
    // is the original method name.  For example, if the original method name
    // is `TakeSnapshot()`, the inferred response type is
    // `TakeSnapshotResponse`.
    map<string, > response = 5;
}

message RepoSource {
    // Name of the branch to build.
    string branchName = 1;
    // Explicit commit SHA to build.
    string commitSha = 2;
    // ID of the project that owns the repo. If omitted, the project ID requesting
    // the build is assumed.
    string projectId = 3;
    // Name of the repo. If omitted, the name "default" is assumed.
    string repoName = 4;
    // Name of the tag to build.
    string tagName = 5;
}

message Results {
    // List of build step digests, in order corresponding to build step indices.
    repeated string buildStepImages = 1;
    // Images that were built as a part of the build.
    repeated BuiltImage images = 2;
}

message Secret {
    // Cloud KMS key name to use to decrypt these envs.
    string kmsKeyName = 1;
    // Map of environment variable name to its encrypted value.
    // 
    // Secret environment variables must be unique across all of a build's
    // secrets, and must be used by at least one build step. Values can be at most
    // 1 KB in size. There can be at most ten secret values across all of a
    // build's secrets.
    map<string, string> secretEnv = 2;
}

message Source {
    // If provided, get source from this location in a Cloud Repo.
    RepoSource repoSource = 1;
    // If provided, get the source from this location in Google Cloud Storage.
    StorageSource storageSource = 2;
}

message SourceProvenance {
    // Hash(es) of the build source, which can be used to verify that the original
    // source integrity was maintained in the build. Note that FileHashes will
    // only be populated if BuildOptions has requested a SourceProvenanceHash.
    // 
    // The keys to this map are file paths used as build source and the values
    // contain the hash values for those files.
    // 
    // If the build source came in a single package such as a gzipped tarfile
    // (.tar.gz), the FileHash will be for the single path to that file.
    // @OutputOnly
    map<string, FileHashes> fileHashes = 1;
    // A copy of the build's source.repo_source, if exists, with any
    // revisions resolved.
    RepoSource resolvedRepoSource = 2;
    // A copy of the build's source.storage_source, if exists, with any
    // generations resolved.
    StorageSource resolvedStorageSource = 3;
}

message Status {
    // The status code, which should be an enum value of google.rpc.Code.
    int32 code = 1;
    // A list of messages that carry the error details.  There is a common set of
    // message types for APIs to use.
    message Detail {
    }
    repeated Detail details = 2;
    // A developer-facing error message, which should be in English. Any
    // user-facing error message should be localized and sent in the
    // google.rpc.Status.details field, or localized by the client.
    string message = 3;
}

message StorageSource {
    // Google Cloud Storage bucket containing source (see
    // [Bucket Name
    // Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
    string bucket = 1;
    // Google Cloud Storage generation for the object. If the generation is
    // omitted, the latest generation will be used.
    string generation = 2;
    // Google Cloud Storage object containing source.
    // 
    // This object must be a gzipped archive file (.tar.gz) containing source to
    // build.
    string object = 3;
}

message Volume {
    // Name of the volume to mount.
    // 
    // Volume names must be unique per build step and must be valid names for
    // Docker volumes. Each named volume must be used by at least two build steps.
    string name = 1;
    // Path at which to mount the volume.
    // 
    // Paths must be absolute and cannot conflict with other volume paths on the
    // same build step or with certain reserved volume paths.
    string path = 2;
}

enum Alt {
    JSON = 0;
    MEDIA = 1;
    PROTO = 2;
}

service GoogleCloudContainerBuilderService {
    // Lists previously requested builds.
    // 
    // Previously requested builds may still be in-progress, or may have finished
    // successfully or unsuccessfully.
    rpc GetV1ProjectsProjectIdBuilds(GetV1ProjectsProjectIdBuildsRequest) returns (ListBuildsResponse) {
      option (google.api.http) = {
        get: "//v1/projects/{projectId}/builds"
      };
    }
    // Starts a build with the specified configuration.
    // 
    // The long-running Operation returned by this method will include the ID of
    // the build, which can be passed to GetBuild to determine its status (e.g.,
    // success or failure).
    rpc PostV1ProjectsProjectIdBuilds(PostV1ProjectsProjectIdBuildsRequest) returns (Operation) {
      option (google.api.http) = {
        post: "//v1/projects/{projectId}/builds"
        body: "body"
      };
    }
    // Returns information about a previously requested build.
    // 
    // The Build that is returned includes its status (e.g., success or failure,
    // or in-progress), and timing information.
    rpc GetV1ProjectsProjectIdBuildsId(GetV1ProjectsProjectIdBuildsIdRequest) returns (Build) {
      option (google.api.http) = {
        get: "//v1/projects/{projectId}/builds/{id}"
      };
    }
    // Cancels a requested build in progress.
    rpc PostV1ProjectsProjectIdBuildsId:Cancel(PostV1ProjectsProjectIdBuildsId:CancelRequest) returns (Build) {
      option (google.api.http) = {
        post: "//v1/projects/{projectId}/builds/{id}:cancel"
        body: "body"
      };
    }
    // Lists existing BuildTrigger.
    // 
    // This API is experimental.
    rpc GetV1ProjectsProjectIdTriggers(GetV1ProjectsProjectIdTriggersRequest) returns (ListBuildTriggersResponse) {
      option (google.api.http) = {
        get: "//v1/projects/{projectId}/triggers"
      };
    }
    // Creates a new BuildTrigger.
    // 
    // This API is experimental.
    rpc PostV1ProjectsProjectIdTriggers(PostV1ProjectsProjectIdTriggersRequest) returns (BuildTrigger) {
      option (google.api.http) = {
        post: "//v1/projects/{projectId}/triggers"
        body: "body"
      };
    }
    // Gets information about a BuildTrigger.
    // 
    // This API is experimental.
    rpc GetV1ProjectsProjectIdTriggersTriggerId(GetV1ProjectsProjectIdTriggersTriggerIdRequest) returns (BuildTrigger) {
      option (google.api.http) = {
        get: "//v1/projects/{projectId}/triggers/{triggerId}"
      };
    }
    // Deletes an BuildTrigger by its project ID and trigger ID.
    // 
    // This API is experimental.
    rpc DeleteV1ProjectsProjectIdTriggersTriggerId(DeleteV1ProjectsProjectIdTriggersTriggerIdRequest) returns (Empty) {
      option (google.api.http) = {
        delete: "//v1/projects/{projectId}/triggers/{triggerId}"
      };
    }
    // Lists operations that match the specified filter in the request. If the
    // server doesn't support this method, it returns `UNIMPLEMENTED`.
    // 
    // NOTE: the `name` binding allows API services to override the binding
    // to use different resource name schemes, such as `users/*/operations`. To
    // override the binding, API services can add a binding such as
    // `"/v1/{name=users/*}/operations"` to their service configuration.
    // For backwards compatibility, the default name includes the operations
    // collection id, however overriding users must ensure the name binding
    // is the parent resource, without the operations collection id.
    rpc GetV1Name(GetV1NameRequest) returns (ListOperationsResponse) {
      option (google.api.http) = {
        get: "//v1/{name}"
      };
    }
    // Starts asynchronous cancellation on a long-running operation.  The server
    // makes a best effort to cancel the operation, but success is not
    // guaranteed.  If the server doesn't support this method, it returns
    // `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
    // Operations.GetOperation or
    // other methods to check whether the cancellation succeeded or whether the
    // operation completed despite cancellation. On successful cancellation,
    // the operation is not deleted; instead, it becomes an operation with
    // an Operation.error value with a google.rpc.Status.code of 1,
    // corresponding to `Code.CANCELLED`.
    rpc PostV1Name:Cancel(PostV1Name:CancelRequest) returns (Empty) {
      option (google.api.http) = {
        post: "//v1/{name}:cancel"
        body: "body"
      };
    }
}

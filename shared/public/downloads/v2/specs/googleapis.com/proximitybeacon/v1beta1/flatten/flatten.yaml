basePath: /
definitions.AdvertisedId.description: Defines a unique identifier of a beacon as broadcast
  by the device.
definitions.AdvertisedId.properties.id.description: |-
  The actual beacon identifier, as broadcast by the beacon hardware. Must be
  [base64](http://tools.ietf.org/html/rfc4648#section-4) encoded in HTTP
  requests, and will be so encoded (with padding) in responses. The base64
  encoding should be of the binary byte-stream and not any textual (such as
  hex) representation thereof.
  Required.
definitions.AdvertisedId.properties.id.format: byte
definitions.AdvertisedId.properties.id.type: string
definitions.AdvertisedId.properties.type.description: |-
  Specifies the identifier type.
  Required.
definitions.AdvertisedId.properties.type.enum.length: 5
definitions.AdvertisedId.properties.type.enum[0]: TYPE_UNSPECIFIED
definitions.AdvertisedId.properties.type.enum[1]: EDDYSTONE
definitions.AdvertisedId.properties.type.enum[2]: IBEACON
definitions.AdvertisedId.properties.type.enum[3]: ALTBEACON
definitions.AdvertisedId.properties.type.enum[4]: EDDYSTONE_EID
definitions.AdvertisedId.properties.type.type: string
definitions.AdvertisedId.type: object
definitions.AttachmentInfo.description: |-
  A subset of attachment information served via the
  `beaconinfo.getforobserved` method, used when your users encounter your
  beacons.
definitions.AttachmentInfo.properties.data.description: An opaque data container for
  client-provided data.
definitions.AttachmentInfo.properties.data.format: byte
definitions.AttachmentInfo.properties.data.type: string
definitions.AttachmentInfo.properties.namespacedType.description: |-
  Specifies what kind of attachment this is. Tells a client how to
  interpret the `data` field. Format is <var>namespace/type</var>, for
  example <code>scrupulous-wombat-12345/welcome-message</code>
definitions.AttachmentInfo.properties.namespacedType.type: string
definitions.AttachmentInfo.type: object
definitions.Beacon.description: Details of a beacon device.
definitions.Beacon.properties.advertisedId.$ref: '#/definitions/AdvertisedId'
definitions.Beacon.properties.advertisedId.description: |-
  The identifier of a beacon as advertised by it. This field must be
  populated when registering. It may be empty when updating a beacon
  record because it is ignored in updates.

  When registering a beacon that broadcasts Eddystone-EID, this field
  should contain a "stable" Eddystone-UID that identifies the beacon and
  links it to its attachments. The stable Eddystone-UID is only used for
  administering the beacon.
definitions.Beacon.properties.beaconName.description: |-
  Resource name of this beacon. A beacon name has the format
  "beacons/N!beaconId" where the beaconId is the base16 ID broadcast by
  the beacon and N is a code for the beacon's type. Possible values are
  `3` for Eddystone, `1` for iBeacon, or `5` for AltBeacon.

  This field must be left empty when registering. After reading a beacon,
  clients can use the name for future operations.
definitions.Beacon.properties.beaconName.type: string
definitions.Beacon.properties.description.description: |-
  Free text used to identify and describe the beacon. Maximum length 140
  characters.
  Optional.
definitions.Beacon.properties.description.type: string
definitions.Beacon.properties.ephemeralIdRegistration.$ref: '#/definitions/EphemeralIdRegistration'
definitions.Beacon.properties.ephemeralIdRegistration.description: |-
  Write-only registration parameters for beacons using Eddystone-EID
  (remotely resolved ephemeral ID) format. This information will not be
  populated in API responses. When submitting this data, the `advertised_id`
  field must contain an ID of type Eddystone-UID. Any other ID type will
  result in an error.
definitions.Beacon.properties.expectedStability.description: |-
  Expected location stability. This is set when the beacon is registered or
  updated, not automatically detected in any way.
  Optional.
definitions.Beacon.properties.expectedStability.enum.length: 5
definitions.Beacon.properties.expectedStability.enum[0]: STABILITY_UNSPECIFIED
definitions.Beacon.properties.expectedStability.enum[1]: STABLE
definitions.Beacon.properties.expectedStability.enum[2]: PORTABLE
definitions.Beacon.properties.expectedStability.enum[3]: MOBILE
definitions.Beacon.properties.expectedStability.enum[4]: ROVING
definitions.Beacon.properties.expectedStability.type: string
definitions.Beacon.properties.indoorLevel.$ref: '#/definitions/IndoorLevel'
definitions.Beacon.properties.indoorLevel.description: |-
  The indoor level information for this beacon, if known. As returned by the
  Google Maps API.
  Optional.
definitions.Beacon.properties.latLng.$ref: '#/definitions/LatLng'
definitions.Beacon.properties.latLng.description: |-
  The location of the beacon, expressed as a latitude and longitude pair.
  This location is given when the beacon is registered or updated. It does
  not necessarily indicate the actual current location of the beacon.
  Optional.
definitions.Beacon.properties.placeId.description: |-
  The [Google Places API](/places/place-id) Place ID of the place where
  the beacon is deployed. This is given when the beacon is registered or
  updated, not automatically detected in any way.
  Optional.
definitions.Beacon.properties.placeId.type: string
definitions.Beacon.properties.properties.additionalProperties.type: string
definitions.Beacon.properties.properties.description: |-
  Properties of the beacon device, for example battery type or firmware
  version.
  Optional.
definitions.Beacon.properties.properties.type: object
definitions.Beacon.properties.provisioningKey.description: |-
  Some beacons may require a user to provide an authorization key before
  changing any of its configuration (e.g. broadcast frames, transmit power).
  This field provides a place to store and control access to that key.
  This field is populated in responses to `GET /v1beta1/beacons/3!beaconId`
  from users with write access to the given beacon. That is to say: If the
  user is authorized to write the beacon's confidential data in the service,
  the service considers them authorized to configure the beacon. Note
  that this key grants nothing on the service, only on the beacon itself.
definitions.Beacon.properties.provisioningKey.format: byte
definitions.Beacon.properties.provisioningKey.type: string
definitions.Beacon.properties.status.description: |-
  Current status of the beacon.
  Required.
definitions.Beacon.properties.status.enum.length: 4
definitions.Beacon.properties.status.enum[0]: STATUS_UNSPECIFIED
definitions.Beacon.properties.status.enum[1]: ACTIVE
definitions.Beacon.properties.status.enum[2]: DECOMMISSIONED
definitions.Beacon.properties.status.enum[3]: INACTIVE
definitions.Beacon.properties.status.type: string
definitions.Beacon.type: object
definitions.BeaconAttachment.description: Project-specific data associated with a
  beacon.
definitions.BeaconAttachment.properties.attachmentName.description: |-
  Resource name of this attachment. Attachment names have the format:
  <code>beacons/<var>beacon_id</var>/attachments/<var>attachment_id</var></code>.
  Leave this empty on creation.
definitions.BeaconAttachment.properties.attachmentName.type: string
definitions.BeaconAttachment.properties.creationTimeMs.description: |-
  The UTC time when this attachment was created, in milliseconds since the
  UNIX epoch.
definitions.BeaconAttachment.properties.creationTimeMs.format: google-datetime
definitions.BeaconAttachment.properties.creationTimeMs.type: string
definitions.BeaconAttachment.properties.data.description: |-
  An opaque data container for client-provided data. Must be
  [base64](http://tools.ietf.org/html/rfc4648#section-4) encoded in HTTP
  requests, and will be so encoded (with padding) in responses.
  Required.
definitions.BeaconAttachment.properties.data.format: byte
definitions.BeaconAttachment.properties.data.type: string
definitions.BeaconAttachment.properties.maxDistanceMeters.description: |-
  The distance away from the beacon at which this attachment should be
  delivered to a mobile app.

  Setting this to a value greater than zero indicates that the app should
  behave as if the beacon is "seen" when the mobile device is less than this
  distance away from the beacon.

  Different attachments on the same beacon can have different max distances.

  Note that even though this value is expressed with fractional meter
  precision, real-world behavior is likley to be much less precise than one
  meter, due to the nature of current Bluetooth radio technology.

  Optional. When not set or zero, the attachment should be delivered at the
  beacon's outer limit of detection.

  Negative values are invalid and return an error.
definitions.BeaconAttachment.properties.maxDistanceMeters.format: double
definitions.BeaconAttachment.properties.maxDistanceMeters.type: number
definitions.BeaconAttachment.properties.namespacedType.description: |-
  Specifies what kind of attachment this is. Tells a client how to
  interpret the `data` field. Format is <var>namespace/type</var>. Namespace
  provides type separation between clients. Type describes the type of
  `data`, for use by the client when parsing the `data` field.
  Required.
definitions.BeaconAttachment.properties.namespacedType.type: string
definitions.BeaconAttachment.type: object
definitions.BeaconInfo.description: |-
  A subset of beacon information served via the `beaconinfo.getforobserved`
  method, which you call when users of your app encounter your beacons.
definitions.BeaconInfo.properties.advertisedId.$ref: '#/definitions/AdvertisedId'
definitions.BeaconInfo.properties.advertisedId.description: The ID advertised by the
  beacon.
definitions.BeaconInfo.properties.attachments.description: |-
  Attachments matching the type(s) requested.
  May be empty if no attachment types were requested.
definitions.BeaconInfo.properties.attachments.items.$ref: '#/definitions/AttachmentInfo'
definitions.BeaconInfo.properties.attachments.type: array
definitions.BeaconInfo.properties.beaconName.description: The name under which the
  beacon is registered.
definitions.BeaconInfo.properties.beaconName.type: string
definitions.BeaconInfo.type: object
definitions.Date.description: |-
  Represents a whole calendar date, e.g. date of birth. The time of day and
  time zone are either specified elsewhere or are not significant. The date
  is relative to the Proleptic Gregorian Calendar. The day may be 0 to
  represent a year and month where the day is not significant, e.g. credit card
  expiration date. The year may be 0 to represent a month and day independent
  of year, e.g. anniversary date. Related types are google.type.TimeOfDay
  and `google.protobuf.Timestamp`.
definitions.Date.properties.day.description: |-
  Day of month. Must be from 1 to 31 and valid for the year and month, or 0
  if specifying a year/month where the day is not significant.
definitions.Date.properties.day.format: int32
definitions.Date.properties.day.type: integer
definitions.Date.properties.month.description: Month of year. Must be from 1 to 12.
definitions.Date.properties.month.format: int32
definitions.Date.properties.month.type: integer
definitions.Date.properties.year.description: |-
  Year of date. Must be from 1 to 9999, or 0 if specifying a date without
  a year.
definitions.Date.properties.year.format: int32
definitions.Date.properties.year.type: integer
definitions.Date.type: object
definitions.DeleteAttachmentsResponse.description: Response for a request to delete
  attachments.
definitions.DeleteAttachmentsResponse.properties.numDeleted.description: The number
  of attachments that were deleted.
definitions.DeleteAttachmentsResponse.properties.numDeleted.format: int32
definitions.DeleteAttachmentsResponse.properties.numDeleted.type: integer
definitions.DeleteAttachmentsResponse.type: object
definitions.Diagnostics.description: Diagnostics for a single beacon.
definitions.Diagnostics.properties.alerts.description: An unordered list of Alerts
  that the beacon has.
definitions.Diagnostics.properties.alerts.items.enum.length: 3
definitions.Diagnostics.properties.alerts.items.enum[0]: ALERT_UNSPECIFIED
definitions.Diagnostics.properties.alerts.items.enum[1]: WRONG_LOCATION
definitions.Diagnostics.properties.alerts.items.enum[2]: LOW_BATTERY
definitions.Diagnostics.properties.alerts.items.type: string
definitions.Diagnostics.properties.alerts.type: array
definitions.Diagnostics.properties.beaconName.description: |-
  Resource name of the beacon. For Eddystone-EID beacons, this may
  be the beacon's current EID, or the beacon's "stable" Eddystone-UID.
definitions.Diagnostics.properties.beaconName.type: string
definitions.Diagnostics.properties.estimatedLowBatteryDate.$ref: '#/definitions/Date'
definitions.Diagnostics.properties.estimatedLowBatteryDate.description: |-
  The date when the battery is expected to be low. If the value is missing
  then there is no estimate for when the battery will be low.
  This value is only an estimate, not an exact date.
definitions.Diagnostics.type: object
definitions.Empty.description: |-
  A generic empty message that you can re-use to avoid defining duplicated
  empty messages in your APIs. A typical example is to use it as the request
  or the response type of an API method. For instance:

      service Foo {
        rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
      }

  The JSON representation for `Empty` is empty JSON object `{}`.
definitions.Empty.type: object
definitions.EphemeralIdRegistration.description: |-
  Write-only registration parameters for beacons using Eddystone-EID format.
  Two ways of securely registering an Eddystone-EID beacon with the service
  are supported:

  1. Perform an ECDH key exchange via this API, including a previous call
     to `GET /v1beta1/eidparams`. In this case the fields
     `beacon_ecdh_public_key` and `service_ecdh_public_key` should be
     populated and `beacon_identity_key` should not be populated. This
     method ensures that only the two parties in the ECDH key exchange can
     compute the identity key, which becomes a secret between them.
  2. Derive or obtain the beacon's identity key via other secure means
     (perhaps an ECDH key exchange between the beacon and a mobile device
     or any other secure method), and then submit the resulting identity key
     to the service. In this case `beacon_identity_key` field should be
     populated, and neither of `beacon_ecdh_public_key` nor
     `service_ecdh_public_key` fields should be. The security of this method
     depends on how securely the parties involved (in particular the
     bluetooth client) handle the identity key, and obviously on how
     securely the identity key was generated.

  See [the Eddystone specification](https://github.com/google/eddystone/tree/master/eddystone-eid) at GitHub.
definitions.EphemeralIdRegistration.properties.beaconEcdhPublicKey.description: |-
  The beacon's public key used for the Elliptic curve Diffie-Hellman
  key exchange. When this field is populated, `service_ecdh_public_key`
  must also be populated, and `beacon_identity_key` must not be.
definitions.EphemeralIdRegistration.properties.beaconEcdhPublicKey.format: byte
definitions.EphemeralIdRegistration.properties.beaconEcdhPublicKey.type: string
definitions.EphemeralIdRegistration.properties.beaconIdentityKey.description: |-
  The private key of the beacon. If this field is populated,
  `beacon_ecdh_public_key` and `service_ecdh_public_key` must not be
  populated.
definitions.EphemeralIdRegistration.properties.beaconIdentityKey.format: byte
definitions.EphemeralIdRegistration.properties.beaconIdentityKey.type: string
definitions.EphemeralIdRegistration.properties.initialClockValue.description: |-
  The initial clock value of the beacon. The beacon's clock must have
  begun counting at this value immediately prior to transmitting this
  value to the resolving service. Significant delay in transmitting this
  value to the service risks registration or resolution failures. If a
  value is not provided, the default is zero.
definitions.EphemeralIdRegistration.properties.initialClockValue.format: uint64
definitions.EphemeralIdRegistration.properties.initialClockValue.type: string
definitions.EphemeralIdRegistration.properties.initialEid.description: |-
  An initial ephemeral ID calculated using the clock value submitted as
  `initial_clock_value`, and the secret key generated by the
  Diffie-Hellman key exchange using `service_ecdh_public_key` and
  `service_ecdh_public_key`. This initial EID value will be used by the
  service to confirm that the key exchange process was successful.
definitions.EphemeralIdRegistration.properties.initialEid.format: byte
definitions.EphemeralIdRegistration.properties.initialEid.type: string
definitions.EphemeralIdRegistration.properties.rotationPeriodExponent.description: |-
  Indicates the nominal period between each rotation of the beacon's
  ephemeral ID. "Nominal" because the beacon should randomize the
  actual interval. See [the spec at github](https://github.com/google/eddystone/tree/master/eddystone-eid)
  for details. This value corresponds to a power-of-two scaler on the
  beacon's clock: when the scaler value is K, the beacon will begin
  broadcasting a new ephemeral ID on average every 2^K seconds.
definitions.EphemeralIdRegistration.properties.rotationPeriodExponent.format: uint32
definitions.EphemeralIdRegistration.properties.rotationPeriodExponent.type: integer
definitions.EphemeralIdRegistration.properties.serviceEcdhPublicKey.description: |-
  The service's public key used for the Elliptic curve Diffie-Hellman
  key exchange. When this field is populated, `beacon_ecdh_public_key`
  must also be populated, and `beacon_identity_key` must not be.
definitions.EphemeralIdRegistration.properties.serviceEcdhPublicKey.format: byte
definitions.EphemeralIdRegistration.properties.serviceEcdhPublicKey.type: string
definitions.EphemeralIdRegistration.type: object
definitions.EphemeralIdRegistrationParams.description: |-
  Information a client needs to provision and register beacons that
  broadcast Eddystone-EID format beacon IDs, using Elliptic curve
  Diffie-Hellman key exchange. See
  [the Eddystone specification](https://github.com/google/eddystone/tree/master/eddystone-eid) at GitHub.
definitions.EphemeralIdRegistrationParams.properties.maxRotationPeriodExponent.description: |-
  Indicates the maximum rotation period supported by the service.
  See EddystoneEidRegistration.rotation_period_exponent
definitions.EphemeralIdRegistrationParams.properties.maxRotationPeriodExponent.format: uint32
definitions.EphemeralIdRegistrationParams.properties.maxRotationPeriodExponent.type: integer
definitions.EphemeralIdRegistrationParams.properties.minRotationPeriodExponent.description: |-
  Indicates the minimum rotation period supported by the service.
  See EddystoneEidRegistration.rotation_period_exponent
definitions.EphemeralIdRegistrationParams.properties.minRotationPeriodExponent.format: uint32
definitions.EphemeralIdRegistrationParams.properties.minRotationPeriodExponent.type: integer
definitions.EphemeralIdRegistrationParams.properties.serviceEcdhPublicKey.description: |-
  The beacon service's public key for use by a beacon to derive its
  Identity Key using Elliptic Curve Diffie-Hellman key exchange.
definitions.EphemeralIdRegistrationParams.properties.serviceEcdhPublicKey.format: byte
definitions.EphemeralIdRegistrationParams.properties.serviceEcdhPublicKey.type: string
definitions.EphemeralIdRegistrationParams.type: object
definitions.GetInfoForObservedBeaconsRequest.description: |-
  Request for beacon and attachment information about beacons that
  a mobile client has encountered "in the wild".
definitions.GetInfoForObservedBeaconsRequest.properties.namespacedTypes.description: |-
  Specifies what kind of attachments to include in the response.
  When given, the response will include only attachments of the given types.
  When empty, no attachments will be returned. Must be in the format
  <var>namespace/type</var>. Accepts `*` to specify all types in
  all namespaces owned by the client.
  Optional.
definitions.GetInfoForObservedBeaconsRequest.properties.namespacedTypes.items.type: string
definitions.GetInfoForObservedBeaconsRequest.properties.namespacedTypes.type: array
definitions.GetInfoForObservedBeaconsRequest.properties.observations.description: |-
  The beacons that the client has encountered.
  At least one must be given.
definitions.GetInfoForObservedBeaconsRequest.properties.observations.items.$ref: '#/definitions/Observation'
definitions.GetInfoForObservedBeaconsRequest.properties.observations.type: array
definitions.GetInfoForObservedBeaconsRequest.type: object
definitions.GetInfoForObservedBeaconsResponse.description: |-
  Information about the requested beacons, optionally including attachment
  data.
definitions.GetInfoForObservedBeaconsResponse.properties.beacons.description: |-
  Public information about beacons.
  May be empty if the request matched no beacons.
definitions.GetInfoForObservedBeaconsResponse.properties.beacons.items.$ref: '#/definitions/BeaconInfo'
definitions.GetInfoForObservedBeaconsResponse.properties.beacons.type: array
definitions.GetInfoForObservedBeaconsResponse.type: object
definitions.IndoorLevel.description: |-
  Indoor level, a human-readable string as returned by Google Maps APIs,
  useful to indicate which floor of a building a beacon is located on.
definitions.IndoorLevel.properties.name.description: The name of this level.
definitions.IndoorLevel.properties.name.type: string
definitions.IndoorLevel.type: object
definitions.LatLng.description: |-
  An object representing a latitude/longitude pair. This is expressed as a pair
  of doubles representing degrees latitude and degrees longitude. Unless
  specified otherwise, this must conform to the
  <a href="http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf">WGS84
  standard</a>. Values must be within normalized ranges.

  Example of normalization code in Python:

      def NormalizeLongitude(longitude):
        """Wraps decimal degrees longitude to [-180.0, 180.0]."""
        q, r = divmod(longitude, 360.0)
        if r > 180.0 or (r == 180.0 and q <= -1.0):
          return r - 360.0
        return r

      def NormalizeLatLng(latitude, longitude):
        """Wraps decimal degrees latitude and longitude to
        [-90.0, 90.0] and [-180.0, 180.0], respectively."""
        r = latitude % 360.0
        if r <= 90.0:
          return r, NormalizeLongitude(longitude)
        elif r >= 270.0:
          return r - 360, NormalizeLongitude(longitude)
        else:
          return 180 - r, NormalizeLongitude(longitude + 180.0)

      assert 180.0 == NormalizeLongitude(180.0)
      assert -180.0 == NormalizeLongitude(-180.0)
      assert -179.0 == NormalizeLongitude(181.0)
      assert (0.0, 0.0) == NormalizeLatLng(360.0, 0.0)
      assert (0.0, 0.0) == NormalizeLatLng(-360.0, 0.0)
      assert (85.0, 180.0) == NormalizeLatLng(95.0, 0.0)
      assert (-85.0, -170.0) == NormalizeLatLng(-95.0, 10.0)
      assert (90.0, 10.0) == NormalizeLatLng(90.0, 10.0)
      assert (-90.0, -10.0) == NormalizeLatLng(-90.0, -10.0)
      assert (0.0, -170.0) == NormalizeLatLng(-180.0, 10.0)
      assert (0.0, -170.0) == NormalizeLatLng(180.0, 10.0)
      assert (-90.0, 10.0) == NormalizeLatLng(270.0, 10.0)
      assert (90.0, 10.0) == NormalizeLatLng(-270.0, 10.0)
definitions.LatLng.properties.latitude.description: The latitude in degrees. It must
  be in the range [-90.0, +90.0].
definitions.LatLng.properties.latitude.format: double
definitions.LatLng.properties.latitude.type: number
definitions.LatLng.properties.longitude.description: The longitude in degrees. It
  must be in the range [-180.0, +180.0].
definitions.LatLng.properties.longitude.format: double
definitions.LatLng.properties.longitude.type: number
definitions.LatLng.type: object
definitions.ListBeaconAttachmentsResponse.description: Response to `ListBeaconAttachments`
  that contains the requested attachments.
definitions.ListBeaconAttachmentsResponse.properties.attachments.description: The
  attachments that corresponded to the request params.
definitions.ListBeaconAttachmentsResponse.properties.attachments.items.$ref: '#/definitions/BeaconAttachment'
definitions.ListBeaconAttachmentsResponse.properties.attachments.type: array
definitions.ListBeaconAttachmentsResponse.type: object
definitions.ListBeaconsResponse.description: Response that contains list beacon results
  and pagination help.
definitions.ListBeaconsResponse.properties.beacons.description: The beacons that matched
  the search criteria.
definitions.ListBeaconsResponse.properties.beacons.items.$ref: '#/definitions/Beacon'
definitions.ListBeaconsResponse.properties.beacons.type: array
definitions.ListBeaconsResponse.properties.nextPageToken.description: |-
  An opaque pagination token that the client may provide in their next
  request to retrieve the next page of results.
definitions.ListBeaconsResponse.properties.nextPageToken.type: string
definitions.ListBeaconsResponse.properties.totalCount.description: |-
  Estimate of the total number of beacons matched by the query. Higher
  values may be less accurate.
definitions.ListBeaconsResponse.properties.totalCount.format: int64
definitions.ListBeaconsResponse.properties.totalCount.type: string
definitions.ListBeaconsResponse.type: object
definitions.ListDiagnosticsResponse.description: Response that contains the requested
  diagnostics.
definitions.ListDiagnosticsResponse.properties.diagnostics.description: The diagnostics
  matching the given request.
definitions.ListDiagnosticsResponse.properties.diagnostics.items.$ref: '#/definitions/Diagnostics'
definitions.ListDiagnosticsResponse.properties.diagnostics.type: array
definitions.ListDiagnosticsResponse.properties.nextPageToken.description: |-
  Token that can be used for pagination. Returned only if the
  request matches more beacons than can be returned in this response.
definitions.ListDiagnosticsResponse.properties.nextPageToken.type: string
definitions.ListDiagnosticsResponse.type: object
definitions.ListNamespacesResponse.description: Response to ListNamespacesRequest
  that contains all the project's namespaces.
definitions.ListNamespacesResponse.properties.namespaces.description: The attachments
  that corresponded to the request params.
definitions.ListNamespacesResponse.properties.namespaces.items.$ref: '#/definitions/Namespace'
definitions.ListNamespacesResponse.properties.namespaces.type: array
definitions.ListNamespacesResponse.type: object
definitions.Namespace.description: |-
  An attachment namespace defines read and write access for all the attachments
  created under it. Each namespace is globally unique, and owned by one
  project which is the only project that can create attachments under it.
definitions.Namespace.properties.namespaceName.description: |-
  Resource name of this namespace. Namespaces names have the format:
  <code>namespaces/<var>namespace</var></code>.
definitions.Namespace.properties.namespaceName.type: string
definitions.Namespace.properties.servingVisibility.description: |-
  Specifies what clients may receive attachments under this namespace
  via `beaconinfo.getforobserved`.
definitions.Namespace.properties.servingVisibility.enum.length: 3
definitions.Namespace.properties.servingVisibility.enum[0]: VISIBILITY_UNSPECIFIED
definitions.Namespace.properties.servingVisibility.enum[1]: UNLISTED
definitions.Namespace.properties.servingVisibility.enum[2]: PUBLIC
definitions.Namespace.properties.servingVisibility.type: string
definitions.Namespace.type: object
definitions.Observation.description: Represents one beacon observed once.
definitions.Observation.properties.advertisedId.$ref: '#/definitions/AdvertisedId'
definitions.Observation.properties.advertisedId.description: |-
  The ID advertised by the beacon the client has encountered.

  If the submitted `advertised_id` type is Eddystone-EID, then the client
  must be authorized to resolve the given beacon. Otherwise no data will be
  returned for that beacon.
  Required.
definitions.Observation.properties.telemetry.description: |-
  The array of telemetry bytes received from the beacon. The server is
  responsible for parsing it. This field may frequently be empty, as
  with a beacon that transmits telemetry only occasionally.
definitions.Observation.properties.telemetry.format: byte
definitions.Observation.properties.telemetry.type: string
definitions.Observation.properties.timestampMs.description: Time when the beacon was
  observed.
definitions.Observation.properties.timestampMs.format: google-datetime
definitions.Observation.properties.timestampMs.type: string
definitions.Observation.type: object
externalDocs.url: https://developers.google.com/beacons/proximity/
host: proximitybeacon.googleapis.com
info.contact.name: Google
info.contact.url: https://google.com
info.description: Registers, manages, indexes, and searches beacons.
info.title: Google Proximity Beacon
info.version: v1beta1
info.x-apiClientRegistration.url: https://console.developers.google.com
info.x-logo.url: https://api.apis.guru/v2/cache/logo/https_www.google.com_images_branding_googlelogo_2x_googlelogo_color_272x92dp.png
info.x-origin.length: 1
info.x-origin[0].converter.url: https://github.com/lucybot/api-spec-converter
info.x-origin[0].converter.version: 2.6.0
info.x-origin[0].format: google
info.x-origin[0].url: https://proximitybeacon.googleapis.com/$discovery/rest?version=v1beta1
info.x-origin[0].version: v1
info.x-preferred: true
info.x-providerName: googleapis.com
info.x-serviceName: proximitybeacon
parameters.$.xgafv.description: V1 error format.
parameters.$.xgafv.enum.length: 2
parameters.$.xgafv.enum[0]: "1"
parameters.$.xgafv.enum[1]: "2"
parameters.$.xgafv.in: query
parameters.$.xgafv.name: $.xgafv
parameters.$.xgafv.type: string
parameters.access_token.description: OAuth access token.
parameters.access_token.in: query
parameters.access_token.name: access_token
parameters.access_token.type: string
parameters.alt.default: json
parameters.alt.description: Data format for response.
parameters.alt.enum.length: 3
parameters.alt.enum[0]: json
parameters.alt.enum[1]: media
parameters.alt.enum[2]: proto
parameters.alt.in: query
parameters.alt.name: alt
parameters.alt.type: string
parameters.bearer_token.description: OAuth bearer token.
parameters.bearer_token.in: query
parameters.bearer_token.name: bearer_token
parameters.bearer_token.type: string
parameters.callback.description: JSONP
parameters.callback.in: query
parameters.callback.name: callback
parameters.callback.type: string
parameters.fields.description: Selector specifying which fields to include in a partial
  response.
parameters.fields.in: query
parameters.fields.name: fields
parameters.fields.type: string
parameters.key.description: API key. Your API key identifies your project and provides
  you with API access, quota, and reports. Required unless you provide an OAuth 2.0
  token.
parameters.key.in: query
parameters.key.name: key
parameters.key.type: string
parameters.oauth_token.description: OAuth 2.0 token for the current user.
parameters.oauth_token.in: query
parameters.oauth_token.name: oauth_token
parameters.oauth_token.type: string
parameters.pp.default: true
parameters.pp.description: Pretty-print response.
parameters.pp.in: query
parameters.pp.name: pp
parameters.pp.type: boolean
parameters.prettyPrint.default: true
parameters.prettyPrint.description: Returns response with indentations and line breaks.
parameters.prettyPrint.in: query
parameters.prettyPrint.name: prettyPrint
parameters.prettyPrint.type: boolean
parameters.quotaUser.description: Available to use for quota purposes for server-side
  applications. Can be any arbitrary string assigned to a user, but should not exceed
  40 characters.
parameters.quotaUser.in: query
parameters.quotaUser.name: quotaUser
parameters.quotaUser.type: string
parameters.upload_protocol.description: Upload protocol for media (e.g. "raw", "multipart").
parameters.upload_protocol.in: query
parameters.upload_protocol.name: upload_protocol
parameters.upload_protocol.type: string
parameters.uploadType.description: Legacy upload protocol for media (e.g. "media",
  "multipart").
parameters.uploadType.in: query
parameters.uploadType.name: uploadType
parameters.uploadType.type: string
paths./v1beta1/{attachmentName}.delete.description: |-
  Deletes the specified attachment for the given beacon. Each attachment has
  a unique attachment name (`attachmentName`) which is returned when you
  fetch the attachment data via this API. You specify this with the delete
  request to control which attachment is removed. This operation cannot be
  undone.

  Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2)
  from a signed-in user with **Is owner** or **Can edit** permissions in the
  Google Developers Console project.
paths./v1beta1/{attachmentName}.delete.operationId: proximitybeacon.beacons.attachments.delete
paths./v1beta1/{attachmentName}.delete.parameters.length: 2
paths./v1beta1/{attachmentName}.delete.parameters[0].description: |-
  The attachment name (`attachmentName`) of
  the attachment to remove. For example:
  `beacons/3!893737abc9/attachments/c5e937-af0-494-959-ec49d12738`. For
  Eddystone-EID beacons, the beacon ID portion (`3!893737abc9`) may be the
  beacon's current EID, or its "stable" Eddystone-UID.
  Required.
paths./v1beta1/{attachmentName}.delete.parameters[0].in: path
paths./v1beta1/{attachmentName}.delete.parameters[0].name: attachmentName
paths./v1beta1/{attachmentName}.delete.parameters[0].required: true
paths./v1beta1/{attachmentName}.delete.parameters[0].type: string
paths./v1beta1/{attachmentName}.delete.parameters[0].x-reservedExpansion: true
paths./v1beta1/{attachmentName}.delete.parameters[1].description: |-
  The project id of the attachment to delete. If not provided, the project
  that is making the request is used.
  Optional.
paths./v1beta1/{attachmentName}.delete.parameters[1].in: query
paths./v1beta1/{attachmentName}.delete.parameters[1].name: projectId
paths./v1beta1/{attachmentName}.delete.parameters[1].type: string
paths./v1beta1/{attachmentName}.delete.responses.200.description: Successful response
paths./v1beta1/{attachmentName}.delete.responses.200.schema.$ref: '#/definitions/Empty'
paths./v1beta1/{attachmentName}.delete.security.length: 1
paths./v1beta1/{attachmentName}.delete.security[0].Oauth2.length: 1
paths./v1beta1/{attachmentName}.delete.security[0].Oauth2[0]: https://www.googleapis.com/auth/userlocation.beacon.registry
paths./v1beta1/{attachmentName}.delete.tags.length: 1
paths./v1beta1/{attachmentName}.delete.tags[0]: beacons
paths./v1beta1/{attachmentName}.parameters.length: 13
paths./v1beta1/{attachmentName}.parameters[0].$ref: '#/parameters/upload_protocol'
paths./v1beta1/{attachmentName}.parameters[1].$ref: '#/parameters/prettyPrint'
paths./v1beta1/{attachmentName}.parameters[2].$ref: '#/parameters/fields'
paths./v1beta1/{attachmentName}.parameters[3].$ref: '#/parameters/uploadType'
paths./v1beta1/{attachmentName}.parameters[4].$ref: '#/parameters/callback'
paths./v1beta1/{attachmentName}.parameters[5].$ref: '#/parameters/$.xgafv'
paths./v1beta1/{attachmentName}.parameters[6].$ref: '#/parameters/alt'
paths./v1beta1/{attachmentName}.parameters[7].$ref: '#/parameters/access_token'
paths./v1beta1/{attachmentName}.parameters[8].$ref: '#/parameters/key'
paths./v1beta1/{attachmentName}.parameters[9].$ref: '#/parameters/quotaUser'
paths./v1beta1/{attachmentName}.parameters[10].$ref: '#/parameters/pp'
paths./v1beta1/{attachmentName}.parameters[11].$ref: '#/parameters/bearer_token'
paths./v1beta1/{attachmentName}.parameters[12].$ref: '#/parameters/oauth_token'
paths./v1beta1/{beaconName}.delete.description: |-
  Deletes the specified beacon including all diagnostics data for the beacon
  as well as any attachments on the beacon (including those belonging to
  other projects). This operation cannot be undone.

  Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2)
  from a signed-in user with **Is owner** or **Can edit** permissions in the
  Google Developers Console project.
paths./v1beta1/{beaconName}.delete.operationId: proximitybeacon.beacons.delete
paths./v1beta1/{beaconName}.delete.parameters.length: 2
paths./v1beta1/{beaconName}.delete.parameters[0].description: |-
  Beacon that should be deleted. A beacon name has the format
  "beacons/N!beaconId" where the beaconId is the base16 ID broadcast by
  the beacon and N is a code for the beacon's type. Possible values are
  `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
  for AltBeacon. For Eddystone-EID beacons, you may use either the
  current EID or the beacon's "stable" UID.
  Required.
paths./v1beta1/{beaconName}.delete.parameters[0].in: path
paths./v1beta1/{beaconName}.delete.parameters[0].name: beaconName
paths./v1beta1/{beaconName}.delete.parameters[0].required: true
paths./v1beta1/{beaconName}.delete.parameters[0].type: string
paths./v1beta1/{beaconName}.delete.parameters[0].x-reservedExpansion: true
paths./v1beta1/{beaconName}.delete.parameters[1].description: |-
  The project id of the beacon to delete. If not provided, the project
  that is making the request is used.
  Optional.
paths./v1beta1/{beaconName}.delete.parameters[1].in: query
paths./v1beta1/{beaconName}.delete.parameters[1].name: projectId
paths./v1beta1/{beaconName}.delete.parameters[1].type: string
paths./v1beta1/{beaconName}.delete.responses.200.description: Successful response
paths./v1beta1/{beaconName}.delete.responses.200.schema.$ref: '#/definitions/Empty'
paths./v1beta1/{beaconName}.delete.security.length: 1
paths./v1beta1/{beaconName}.delete.security[0].Oauth2.length: 1
paths./v1beta1/{beaconName}.delete.security[0].Oauth2[0]: https://www.googleapis.com/auth/userlocation.beacon.registry
paths./v1beta1/{beaconName}.delete.tags.length: 1
paths./v1beta1/{beaconName}.delete.tags[0]: beacons
paths./v1beta1/{beaconName}.get.description: |-
  Returns detailed information about the specified beacon.

  Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2)
  from a signed-in user with **viewer**, **Is owner** or **Can edit**
  permissions in the Google Developers Console project.

  Requests may supply an Eddystone-EID beacon name in the form:
  `beacons/4!beaconId` where the `beaconId` is the base16 ephemeral ID
  broadcast by the beacon. The returned `Beacon` object will contain the
  beacon's stable Eddystone-UID. Clients not authorized to resolve the
  beacon's ephemeral Eddystone-EID broadcast will receive an error.
paths./v1beta1/{beaconName}.get.operationId: proximitybeacon.beacons.get
paths./v1beta1/{beaconName}.get.parameters.length: 2
paths./v1beta1/{beaconName}.get.parameters[0].description: |-
  Resource name of this beacon. A beacon name has the format
  "beacons/N!beaconId" where the beaconId is the base16 ID broadcast by
  the beacon and N is a code for the beacon's type. Possible values are
  `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
  for AltBeacon. For Eddystone-EID beacons, you may use either the
  current EID or the beacon's "stable" UID.
  Required.
paths./v1beta1/{beaconName}.get.parameters[0].in: path
paths./v1beta1/{beaconName}.get.parameters[0].name: beaconName
paths./v1beta1/{beaconName}.get.parameters[0].required: true
paths./v1beta1/{beaconName}.get.parameters[0].type: string
paths./v1beta1/{beaconName}.get.parameters[0].x-reservedExpansion: true
paths./v1beta1/{beaconName}.get.parameters[1].description: |-
  The project id of the beacon to request. If the project id is not specified
  then the project making the request is used. The project id must match the
  project that owns the beacon.
  Optional.
paths./v1beta1/{beaconName}.get.parameters[1].in: query
paths./v1beta1/{beaconName}.get.parameters[1].name: projectId
paths./v1beta1/{beaconName}.get.parameters[1].type: string
paths./v1beta1/{beaconName}.get.responses.200.description: Successful response
paths./v1beta1/{beaconName}.get.responses.200.schema.$ref: '#/definitions/Beacon'
paths./v1beta1/{beaconName}.get.security.length: 1
paths./v1beta1/{beaconName}.get.security[0].Oauth2.length: 1
paths./v1beta1/{beaconName}.get.security[0].Oauth2[0]: https://www.googleapis.com/auth/userlocation.beacon.registry
paths./v1beta1/{beaconName}.get.tags.length: 1
paths./v1beta1/{beaconName}.get.tags[0]: beacons
paths./v1beta1/{beaconName}.parameters.length: 13
paths./v1beta1/{beaconName}.parameters[0].$ref: '#/parameters/upload_protocol'
paths./v1beta1/{beaconName}.parameters[1].$ref: '#/parameters/prettyPrint'
paths./v1beta1/{beaconName}.parameters[2].$ref: '#/parameters/fields'
paths./v1beta1/{beaconName}.parameters[3].$ref: '#/parameters/uploadType'
paths./v1beta1/{beaconName}.parameters[4].$ref: '#/parameters/callback'
paths./v1beta1/{beaconName}.parameters[5].$ref: '#/parameters/$.xgafv'
paths./v1beta1/{beaconName}.parameters[6].$ref: '#/parameters/alt'
paths./v1beta1/{beaconName}.parameters[7].$ref: '#/parameters/access_token'
paths./v1beta1/{beaconName}.parameters[8].$ref: '#/parameters/key'
paths./v1beta1/{beaconName}.parameters[9].$ref: '#/parameters/quotaUser'
paths./v1beta1/{beaconName}.parameters[10].$ref: '#/parameters/pp'
paths./v1beta1/{beaconName}.parameters[11].$ref: '#/parameters/bearer_token'
paths./v1beta1/{beaconName}.parameters[12].$ref: '#/parameters/oauth_token'
paths./v1beta1/{beaconName}.put.description: |-
  Updates the information about the specified beacon. **Any field that you do
  not populate in the submitted beacon will be permanently erased**, so you
  should follow the "read, modify, write" pattern to avoid inadvertently
  destroying data.

  Changes to the beacon status via this method will be  silently ignored.
  To update beacon status, use the separate methods on this API for
  activation, deactivation, and decommissioning.
  Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2)
  from a signed-in user with **Is owner** or **Can edit** permissions in the
  Google Developers Console project.
paths./v1beta1/{beaconName}.put.operationId: proximitybeacon.beacons.update
paths./v1beta1/{beaconName}.put.parameters.length: 3
paths./v1beta1/{beaconName}.put.parameters[0].description: |-
  Resource name of this beacon. A beacon name has the format
  "beacons/N!beaconId" where the beaconId is the base16 ID broadcast by
  the beacon and N is a code for the beacon's type. Possible values are
  `3` for Eddystone, `1` for iBeacon, or `5` for AltBeacon.

  This field must be left empty when registering. After reading a beacon,
  clients can use the name for future operations.
paths./v1beta1/{beaconName}.put.parameters[0].in: path
paths./v1beta1/{beaconName}.put.parameters[0].name: beaconName
paths./v1beta1/{beaconName}.put.parameters[0].required: true
paths./v1beta1/{beaconName}.put.parameters[0].type: string
paths./v1beta1/{beaconName}.put.parameters[0].x-reservedExpansion: true
paths./v1beta1/{beaconName}.put.parameters[1].description: |-
  The project id of the beacon to update. If the project id is not
  specified then the project making the request is used. The project id
  must match the project that owns the beacon.
  Optional.
paths./v1beta1/{beaconName}.put.parameters[1].in: query
paths./v1beta1/{beaconName}.put.parameters[1].name: projectId
paths./v1beta1/{beaconName}.put.parameters[1].type: string
paths./v1beta1/{beaconName}.put.parameters[2].in: body
paths./v1beta1/{beaconName}.put.parameters[2].name: body
paths./v1beta1/{beaconName}.put.parameters[2].schema.$ref: '#/definitions/Beacon'
paths./v1beta1/{beaconName}.put.responses.200.description: Successful response
paths./v1beta1/{beaconName}.put.responses.200.schema.$ref: '#/definitions/Beacon'
paths./v1beta1/{beaconName}.put.security.length: 1
paths./v1beta1/{beaconName}.put.security[0].Oauth2.length: 1
paths./v1beta1/{beaconName}.put.security[0].Oauth2[0]: https://www.googleapis.com/auth/userlocation.beacon.registry
paths./v1beta1/{beaconName}.put.tags.length: 1
paths./v1beta1/{beaconName}.put.tags[0]: beacons
paths./v1beta1/{beaconName}/attachments.get.description: |-
  Returns the attachments for the specified beacon that match the specified
  namespaced-type pattern.

  To control which namespaced types are returned, you add the
  `namespacedType` query parameter to the request. You must either use
  `*/*`, to return all attachments, or the namespace must be one of
  the ones returned from the  `namespaces` endpoint.

  Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2)
  from a signed-in user with **viewer**, **Is owner** or **Can edit**
  permissions in the Google Developers Console project.
paths./v1beta1/{beaconName}/attachments.get.operationId: proximitybeacon.beacons.attachments.list
paths./v1beta1/{beaconName}/attachments.get.parameters.length: 3
paths./v1beta1/{beaconName}/attachments.get.parameters[0].description: |-
  Beacon whose attachments should be fetched. A beacon name has the
  format "beacons/N!beaconId" where the beaconId is the base16 ID broadcast
  by the beacon and N is a code for the beacon's type. Possible values are
  `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
  for AltBeacon. For Eddystone-EID beacons, you may use either the
  current EID or the beacon's "stable" UID.
  Required.
paths./v1beta1/{beaconName}/attachments.get.parameters[0].in: path
paths./v1beta1/{beaconName}/attachments.get.parameters[0].name: beaconName
paths./v1beta1/{beaconName}/attachments.get.parameters[0].required: true
paths./v1beta1/{beaconName}/attachments.get.parameters[0].type: string
paths./v1beta1/{beaconName}/attachments.get.parameters[0].x-reservedExpansion: true
paths./v1beta1/{beaconName}/attachments.get.parameters[1].description: |-
  Specifies the namespace and type of attachment to include in response in
  <var>namespace/type</var> format. Accepts `*/*` to specify
  "all types in all namespaces".
paths./v1beta1/{beaconName}/attachments.get.parameters[1].in: query
paths./v1beta1/{beaconName}/attachments.get.parameters[1].name: namespacedType
paths./v1beta1/{beaconName}/attachments.get.parameters[1].type: string
paths./v1beta1/{beaconName}/attachments.get.parameters[2].description: |-
  The project id to list beacon attachments under. This field can be
  used when "*" is specified to mean all attachment namespaces. Projects
  may have multiple attachments with multiple namespaces. If "*" is
  specified and the projectId string is empty, then the project
  making the request is used.
  Optional.
paths./v1beta1/{beaconName}/attachments.get.parameters[2].in: query
paths./v1beta1/{beaconName}/attachments.get.parameters[2].name: projectId
paths./v1beta1/{beaconName}/attachments.get.parameters[2].type: string
paths./v1beta1/{beaconName}/attachments.get.responses.200.description: Successful
  response
paths./v1beta1/{beaconName}/attachments.get.responses.200.schema.$ref: '#/definitions/ListBeaconAttachmentsResponse'
paths./v1beta1/{beaconName}/attachments.get.security.length: 1
paths./v1beta1/{beaconName}/attachments.get.security[0].Oauth2.length: 1
paths./v1beta1/{beaconName}/attachments.get.security[0].Oauth2[0]: https://www.googleapis.com/auth/userlocation.beacon.registry
paths./v1beta1/{beaconName}/attachments.get.tags.length: 1
paths./v1beta1/{beaconName}/attachments.get.tags[0]: beacons
paths./v1beta1/{beaconName}/attachments.parameters.length: 13
paths./v1beta1/{beaconName}/attachments.parameters[0].$ref: '#/parameters/upload_protocol'
paths./v1beta1/{beaconName}/attachments.parameters[1].$ref: '#/parameters/prettyPrint'
paths./v1beta1/{beaconName}/attachments.parameters[2].$ref: '#/parameters/fields'
paths./v1beta1/{beaconName}/attachments.parameters[3].$ref: '#/parameters/uploadType'
paths./v1beta1/{beaconName}/attachments.parameters[4].$ref: '#/parameters/callback'
paths./v1beta1/{beaconName}/attachments.parameters[5].$ref: '#/parameters/$.xgafv'
paths./v1beta1/{beaconName}/attachments.parameters[6].$ref: '#/parameters/alt'
paths./v1beta1/{beaconName}/attachments.parameters[7].$ref: '#/parameters/access_token'
paths./v1beta1/{beaconName}/attachments.parameters[8].$ref: '#/parameters/key'
paths./v1beta1/{beaconName}/attachments.parameters[9].$ref: '#/parameters/quotaUser'
paths./v1beta1/{beaconName}/attachments.parameters[10].$ref: '#/parameters/pp'
paths./v1beta1/{beaconName}/attachments.parameters[11].$ref: '#/parameters/bearer_token'
paths./v1beta1/{beaconName}/attachments.parameters[12].$ref: '#/parameters/oauth_token'
paths./v1beta1/{beaconName}/attachments.post.description: |-
  Associates the given data with the specified beacon. Attachment data must
  contain two parts:
  <ul>
  <li>A namespaced type.</li>
  <li>The actual attachment data itself.</li>
  </ul>
  The namespaced type consists of two parts, the namespace and the type.
  The namespace must be one of the values returned by the `namespaces`
  endpoint, while the type can be a string of any characters except for the
  forward slash (`/`) up to 100 characters in length.

  Attachment data can be up to 1024 bytes long.

  Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2)
  from a signed-in user with **Is owner** or **Can edit** permissions in the
  Google Developers Console project.
paths./v1beta1/{beaconName}/attachments.post.operationId: proximitybeacon.beacons.attachments.create
paths./v1beta1/{beaconName}/attachments.post.parameters.length: 3
paths./v1beta1/{beaconName}/attachments.post.parameters[0].description: |-
  Beacon on which the attachment should be created. A beacon name has the
  format "beacons/N!beaconId" where the beaconId is the base16 ID broadcast
  by the beacon and N is a code for the beacon's type. Possible values are
  `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
  for AltBeacon. For Eddystone-EID beacons, you may use either the
  current EID or the beacon's "stable" UID.
  Required.
paths./v1beta1/{beaconName}/attachments.post.parameters[0].in: path
paths./v1beta1/{beaconName}/attachments.post.parameters[0].name: beaconName
paths./v1beta1/{beaconName}/attachments.post.parameters[0].required: true
paths./v1beta1/{beaconName}/attachments.post.parameters[0].type: string
paths./v1beta1/{beaconName}/attachments.post.parameters[0].x-reservedExpansion: true
paths./v1beta1/{beaconName}/attachments.post.parameters[1].description: |-
  The project id of the project the attachment will belong to. If
  the project id is not specified then the project making the request
  is used.
  Optional.
paths./v1beta1/{beaconName}/attachments.post.parameters[1].in: query
paths./v1beta1/{beaconName}/attachments.post.parameters[1].name: projectId
paths./v1beta1/{beaconName}/attachments.post.parameters[1].type: string
paths./v1beta1/{beaconName}/attachments.post.parameters[2].in: body
paths./v1beta1/{beaconName}/attachments.post.parameters[2].name: body
paths./v1beta1/{beaconName}/attachments.post.parameters[2].schema.$ref: '#/definitions/BeaconAttachment'
paths./v1beta1/{beaconName}/attachments.post.responses.200.description: Successful
  response
paths./v1beta1/{beaconName}/attachments.post.responses.200.schema.$ref: '#/definitions/BeaconAttachment'
paths./v1beta1/{beaconName}/attachments.post.security.length: 1
paths./v1beta1/{beaconName}/attachments.post.security[0].Oauth2.length: 1
paths./v1beta1/{beaconName}/attachments.post.security[0].Oauth2[0]: https://www.googleapis.com/auth/userlocation.beacon.registry
paths./v1beta1/{beaconName}/attachments.post.tags.length: 1
paths./v1beta1/{beaconName}/attachments.post.tags[0]: beacons
paths./v1beta1/{beaconName}/attachments:batchDelete.parameters.length: 13
paths./v1beta1/{beaconName}/attachments:batchDelete.parameters[0].$ref: '#/parameters/upload_protocol'
paths./v1beta1/{beaconName}/attachments:batchDelete.parameters[1].$ref: '#/parameters/prettyPrint'
paths./v1beta1/{beaconName}/attachments:batchDelete.parameters[2].$ref: '#/parameters/fields'
paths./v1beta1/{beaconName}/attachments:batchDelete.parameters[3].$ref: '#/parameters/uploadType'
paths./v1beta1/{beaconName}/attachments:batchDelete.parameters[4].$ref: '#/parameters/callback'
paths./v1beta1/{beaconName}/attachments:batchDelete.parameters[5].$ref: '#/parameters/$.xgafv'
paths./v1beta1/{beaconName}/attachments:batchDelete.parameters[6].$ref: '#/parameters/alt'
paths./v1beta1/{beaconName}/attachments:batchDelete.parameters[7].$ref: '#/parameters/access_token'
paths./v1beta1/{beaconName}/attachments:batchDelete.parameters[8].$ref: '#/parameters/key'
paths./v1beta1/{beaconName}/attachments:batchDelete.parameters[9].$ref: '#/parameters/quotaUser'
paths./v1beta1/{beaconName}/attachments:batchDelete.parameters[10].$ref: '#/parameters/pp'
paths./v1beta1/{beaconName}/attachments:batchDelete.parameters[11].$ref: '#/parameters/bearer_token'
paths./v1beta1/{beaconName}/attachments:batchDelete.parameters[12].$ref: '#/parameters/oauth_token'
paths./v1beta1/{beaconName}/attachments:batchDelete.post.description: |-
  Deletes multiple attachments on a given beacon. This operation is
  permanent and cannot be undone.

  You can optionally specify `namespacedType` to choose which attachments
  should be deleted. If you do not specify `namespacedType`,  all your
  attachments on the given beacon will be deleted. You also may explicitly
  specify `*/*` to delete all.

  Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2)
  from a signed-in user with **Is owner** or **Can edit** permissions in the
  Google Developers Console project.
paths./v1beta1/{beaconName}/attachments:batchDelete.post.operationId: proximitybeacon.beacons.attachments.batchDelete
paths./v1beta1/{beaconName}/attachments:batchDelete.post.parameters.length: 3
paths./v1beta1/{beaconName}/attachments:batchDelete.post.parameters[0].description: |-
  The beacon whose attachments should be deleted. A beacon name has the
  format "beacons/N!beaconId" where the beaconId is the base16 ID broadcast
  by the beacon and N is a code for the beacon's type. Possible values are
  `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
  for AltBeacon. For Eddystone-EID beacons, you may use either the
  current EID or the beacon's "stable" UID.
  Required.
paths./v1beta1/{beaconName}/attachments:batchDelete.post.parameters[0].in: path
paths./v1beta1/{beaconName}/attachments:batchDelete.post.parameters[0].name: beaconName
paths./v1beta1/{beaconName}/attachments:batchDelete.post.parameters[0].required: true
paths./v1beta1/{beaconName}/attachments:batchDelete.post.parameters[0].type: string
paths./v1beta1/{beaconName}/attachments:batchDelete.post.parameters[0].x-reservedExpansion: true
paths./v1beta1/{beaconName}/attachments:batchDelete.post.parameters[1].description: |-
  Specifies the namespace and type of attachments to delete in
  `namespace/type` format. Accepts `*/*` to specify
  "all types in all namespaces".
  Optional.
paths./v1beta1/{beaconName}/attachments:batchDelete.post.parameters[1].in: query
paths./v1beta1/{beaconName}/attachments:batchDelete.post.parameters[1].name: namespacedType
paths./v1beta1/{beaconName}/attachments:batchDelete.post.parameters[1].type: string
paths./v1beta1/{beaconName}/attachments:batchDelete.post.parameters[2].description: |-
  The project id to delete beacon attachments under. This field can be
  used when "*" is specified to mean all attachment namespaces. Projects
  may have multiple attachments with multiple namespaces. If "*" is
  specified and the projectId string is empty, then the project
  making the request is used.
  Optional.
paths./v1beta1/{beaconName}/attachments:batchDelete.post.parameters[2].in: query
paths./v1beta1/{beaconName}/attachments:batchDelete.post.parameters[2].name: projectId
paths./v1beta1/{beaconName}/attachments:batchDelete.post.parameters[2].type: string
paths./v1beta1/{beaconName}/attachments:batchDelete.post.responses.200.description: Successful
  response
paths./v1beta1/{beaconName}/attachments:batchDelete.post.responses.200.schema.$ref: '#/definitions/DeleteAttachmentsResponse'
paths./v1beta1/{beaconName}/attachments:batchDelete.post.security.length: 1
paths./v1beta1/{beaconName}/attachments:batchDelete.post.security[0].Oauth2.length: 1
paths./v1beta1/{beaconName}/attachments:batchDelete.post.security[0].Oauth2[0]: https://www.googleapis.com/auth/userlocation.beacon.registry
paths./v1beta1/{beaconName}/attachments:batchDelete.post.tags.length: 1
paths./v1beta1/{beaconName}/attachments:batchDelete.post.tags[0]: beacons
paths./v1beta1/{beaconName}/diagnostics.get.description: |-
  List the diagnostics for a single beacon. You can also list diagnostics for
  all the beacons owned by your Google Developers Console project by using
  the beacon name `beacons/-`.

  Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2)
  from a signed-in user with **viewer**, **Is owner** or **Can edit**
  permissions in the Google Developers Console project.
paths./v1beta1/{beaconName}/diagnostics.get.operationId: proximitybeacon.beacons.diagnostics.list
paths./v1beta1/{beaconName}/diagnostics.get.parameters.length: 5
paths./v1beta1/{beaconName}/diagnostics.get.parameters[0].description: Beacon that
  the diagnostics are for.
paths./v1beta1/{beaconName}/diagnostics.get.parameters[0].in: path
paths./v1beta1/{beaconName}/diagnostics.get.parameters[0].name: beaconName
paths./v1beta1/{beaconName}/diagnostics.get.parameters[0].required: true
paths./v1beta1/{beaconName}/diagnostics.get.parameters[0].type: string
paths./v1beta1/{beaconName}/diagnostics.get.parameters[0].x-reservedExpansion: true
paths./v1beta1/{beaconName}/diagnostics.get.parameters[1].description: |-
  Requests results that occur after the `page_token`, obtained from the
  response to a previous request. Optional.
paths./v1beta1/{beaconName}/diagnostics.get.parameters[1].in: query
paths./v1beta1/{beaconName}/diagnostics.get.parameters[1].name: pageToken
paths./v1beta1/{beaconName}/diagnostics.get.parameters[1].type: string
paths./v1beta1/{beaconName}/diagnostics.get.parameters[2].description: |-
  Specifies the maximum number of results to return. Defaults to
  10. Maximum 1000. Optional.
paths./v1beta1/{beaconName}/diagnostics.get.parameters[2].in: query
paths./v1beta1/{beaconName}/diagnostics.get.parameters[2].name: pageSize
paths./v1beta1/{beaconName}/diagnostics.get.parameters[2].type: integer
paths./v1beta1/{beaconName}/diagnostics.get.parameters[3].description: |-
  Requests only beacons that have the given alert. For example, to find
  beacons that have low batteries use `alert_filter=LOW_BATTERY`.
paths./v1beta1/{beaconName}/diagnostics.get.parameters[3].enum.length: 3
paths./v1beta1/{beaconName}/diagnostics.get.parameters[3].enum[0]: ALERT_UNSPECIFIED
paths./v1beta1/{beaconName}/diagnostics.get.parameters[3].enum[1]: WRONG_LOCATION
paths./v1beta1/{beaconName}/diagnostics.get.parameters[3].enum[2]: LOW_BATTERY
paths./v1beta1/{beaconName}/diagnostics.get.parameters[3].in: query
paths./v1beta1/{beaconName}/diagnostics.get.parameters[3].name: alertFilter
paths./v1beta1/{beaconName}/diagnostics.get.parameters[3].type: string
paths./v1beta1/{beaconName}/diagnostics.get.parameters[4].description: |-
  Requests only diagnostic records for the given project id. If not set,
  then the project making the request will be used for looking up
  diagnostic records. Optional.
paths./v1beta1/{beaconName}/diagnostics.get.parameters[4].in: query
paths./v1beta1/{beaconName}/diagnostics.get.parameters[4].name: projectId
paths./v1beta1/{beaconName}/diagnostics.get.parameters[4].type: string
paths./v1beta1/{beaconName}/diagnostics.get.responses.200.description: Successful
  response
paths./v1beta1/{beaconName}/diagnostics.get.responses.200.schema.$ref: '#/definitions/ListDiagnosticsResponse'
paths./v1beta1/{beaconName}/diagnostics.get.security.length: 1
paths./v1beta1/{beaconName}/diagnostics.get.security[0].Oauth2.length: 1
paths./v1beta1/{beaconName}/diagnostics.get.security[0].Oauth2[0]: https://www.googleapis.com/auth/userlocation.beacon.registry
paths./v1beta1/{beaconName}/diagnostics.get.tags.length: 1
paths./v1beta1/{beaconName}/diagnostics.get.tags[0]: beacons
paths./v1beta1/{beaconName}/diagnostics.parameters.length: 13
paths./v1beta1/{beaconName}/diagnostics.parameters[0].$ref: '#/parameters/upload_protocol'
paths./v1beta1/{beaconName}/diagnostics.parameters[1].$ref: '#/parameters/prettyPrint'
paths./v1beta1/{beaconName}/diagnostics.parameters[2].$ref: '#/parameters/fields'
paths./v1beta1/{beaconName}/diagnostics.parameters[3].$ref: '#/parameters/uploadType'
paths./v1beta1/{beaconName}/diagnostics.parameters[4].$ref: '#/parameters/callback'
paths./v1beta1/{beaconName}/diagnostics.parameters[5].$ref: '#/parameters/$.xgafv'
paths./v1beta1/{beaconName}/diagnostics.parameters[6].$ref: '#/parameters/alt'
paths./v1beta1/{beaconName}/diagnostics.parameters[7].$ref: '#/parameters/access_token'
paths./v1beta1/{beaconName}/diagnostics.parameters[8].$ref: '#/parameters/key'
paths./v1beta1/{beaconName}/diagnostics.parameters[9].$ref: '#/parameters/quotaUser'
paths./v1beta1/{beaconName}/diagnostics.parameters[10].$ref: '#/parameters/pp'
paths./v1beta1/{beaconName}/diagnostics.parameters[11].$ref: '#/parameters/bearer_token'
paths./v1beta1/{beaconName}/diagnostics.parameters[12].$ref: '#/parameters/oauth_token'
paths./v1beta1/{beaconName}:activate.parameters.length: 13
paths./v1beta1/{beaconName}:activate.parameters[0].$ref: '#/parameters/upload_protocol'
paths./v1beta1/{beaconName}:activate.parameters[1].$ref: '#/parameters/prettyPrint'
paths./v1beta1/{beaconName}:activate.parameters[2].$ref: '#/parameters/fields'
paths./v1beta1/{beaconName}:activate.parameters[3].$ref: '#/parameters/uploadType'
paths./v1beta1/{beaconName}:activate.parameters[4].$ref: '#/parameters/callback'
paths./v1beta1/{beaconName}:activate.parameters[5].$ref: '#/parameters/$.xgafv'
paths./v1beta1/{beaconName}:activate.parameters[6].$ref: '#/parameters/alt'
paths./v1beta1/{beaconName}:activate.parameters[7].$ref: '#/parameters/access_token'
paths./v1beta1/{beaconName}:activate.parameters[8].$ref: '#/parameters/key'
paths./v1beta1/{beaconName}:activate.parameters[9].$ref: '#/parameters/quotaUser'
paths./v1beta1/{beaconName}:activate.parameters[10].$ref: '#/parameters/pp'
paths./v1beta1/{beaconName}:activate.parameters[11].$ref: '#/parameters/bearer_token'
paths./v1beta1/{beaconName}:activate.parameters[12].$ref: '#/parameters/oauth_token'
paths./v1beta1/{beaconName}:activate.post.description: |-
  Activates a beacon. A beacon that is active will return information
  and attachment data when queried via `beaconinfo.getforobserved`.
  Calling this method on an already active beacon will do nothing (but
  will return a successful response code).

  Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2)
  from a signed-in user with **Is owner** or **Can edit** permissions in the
  Google Developers Console project.
paths./v1beta1/{beaconName}:activate.post.operationId: proximitybeacon.beacons.activate
paths./v1beta1/{beaconName}:activate.post.parameters.length: 2
paths./v1beta1/{beaconName}:activate.post.parameters[0].description: |-
  Beacon that should be activated. A beacon name has the format
  "beacons/N!beaconId" where the beaconId is the base16 ID broadcast by
  the beacon and N is a code for the beacon's type. Possible values are
  `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
  for AltBeacon. For Eddystone-EID beacons, you may use either the
  current EID or the beacon's "stable" UID.
  Required.
paths./v1beta1/{beaconName}:activate.post.parameters[0].in: path
paths./v1beta1/{beaconName}:activate.post.parameters[0].name: beaconName
paths./v1beta1/{beaconName}:activate.post.parameters[0].required: true
paths./v1beta1/{beaconName}:activate.post.parameters[0].type: string
paths./v1beta1/{beaconName}:activate.post.parameters[0].x-reservedExpansion: true
paths./v1beta1/{beaconName}:activate.post.parameters[1].description: |-
  The project id of the beacon to activate. If the project id is not
  specified then the project making the request is used. The project id
  must match the project that owns the beacon.
  Optional.
paths./v1beta1/{beaconName}:activate.post.parameters[1].in: query
paths./v1beta1/{beaconName}:activate.post.parameters[1].name: projectId
paths./v1beta1/{beaconName}:activate.post.parameters[1].type: string
paths./v1beta1/{beaconName}:activate.post.responses.200.description: Successful response
paths./v1beta1/{beaconName}:activate.post.responses.200.schema.$ref: '#/definitions/Empty'
paths./v1beta1/{beaconName}:activate.post.security.length: 1
paths./v1beta1/{beaconName}:activate.post.security[0].Oauth2.length: 1
paths./v1beta1/{beaconName}:activate.post.security[0].Oauth2[0]: https://www.googleapis.com/auth/userlocation.beacon.registry
paths./v1beta1/{beaconName}:activate.post.tags.length: 1
paths./v1beta1/{beaconName}:activate.post.tags[0]: beacons
paths./v1beta1/{beaconName}:deactivate.parameters.length: 13
paths./v1beta1/{beaconName}:deactivate.parameters[0].$ref: '#/parameters/upload_protocol'
paths./v1beta1/{beaconName}:deactivate.parameters[1].$ref: '#/parameters/prettyPrint'
paths./v1beta1/{beaconName}:deactivate.parameters[2].$ref: '#/parameters/fields'
paths./v1beta1/{beaconName}:deactivate.parameters[3].$ref: '#/parameters/uploadType'
paths./v1beta1/{beaconName}:deactivate.parameters[4].$ref: '#/parameters/callback'
paths./v1beta1/{beaconName}:deactivate.parameters[5].$ref: '#/parameters/$.xgafv'
paths./v1beta1/{beaconName}:deactivate.parameters[6].$ref: '#/parameters/alt'
paths./v1beta1/{beaconName}:deactivate.parameters[7].$ref: '#/parameters/access_token'
paths./v1beta1/{beaconName}:deactivate.parameters[8].$ref: '#/parameters/key'
paths./v1beta1/{beaconName}:deactivate.parameters[9].$ref: '#/parameters/quotaUser'
paths./v1beta1/{beaconName}:deactivate.parameters[10].$ref: '#/parameters/pp'
paths./v1beta1/{beaconName}:deactivate.parameters[11].$ref: '#/parameters/bearer_token'
paths./v1beta1/{beaconName}:deactivate.parameters[12].$ref: '#/parameters/oauth_token'
paths./v1beta1/{beaconName}:deactivate.post.description: |-
  Deactivates a beacon. Once deactivated, the API will not return
  information nor attachment data for the beacon when queried via
  `beaconinfo.getforobserved`. Calling this method on an already inactive
  beacon will do nothing (but will return a successful response code).

  Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2)
  from a signed-in user with **Is owner** or **Can edit** permissions in the
  Google Developers Console project.
paths./v1beta1/{beaconName}:deactivate.post.operationId: proximitybeacon.beacons.deactivate
paths./v1beta1/{beaconName}:deactivate.post.parameters.length: 2
paths./v1beta1/{beaconName}:deactivate.post.parameters[0].description: |-
  Beacon that should be deactivated. A beacon name has the format
  "beacons/N!beaconId" where the beaconId is the base16 ID broadcast by
  the beacon and N is a code for the beacon's type. Possible values are
  `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
  for AltBeacon. For Eddystone-EID beacons, you may use either the
  current EID or the beacon's "stable" UID.
  Required.
paths./v1beta1/{beaconName}:deactivate.post.parameters[0].in: path
paths./v1beta1/{beaconName}:deactivate.post.parameters[0].name: beaconName
paths./v1beta1/{beaconName}:deactivate.post.parameters[0].required: true
paths./v1beta1/{beaconName}:deactivate.post.parameters[0].type: string
paths./v1beta1/{beaconName}:deactivate.post.parameters[0].x-reservedExpansion: true
paths./v1beta1/{beaconName}:deactivate.post.parameters[1].description: |-
  The project id of the beacon to deactivate. If the project id is not
  specified then the project making the request is used. The project id must
  match the project that owns the beacon.
  Optional.
paths./v1beta1/{beaconName}:deactivate.post.parameters[1].in: query
paths./v1beta1/{beaconName}:deactivate.post.parameters[1].name: projectId
paths./v1beta1/{beaconName}:deactivate.post.parameters[1].type: string
paths./v1beta1/{beaconName}:deactivate.post.responses.200.description: Successful
  response
paths./v1beta1/{beaconName}:deactivate.post.responses.200.schema.$ref: '#/definitions/Empty'
paths./v1beta1/{beaconName}:deactivate.post.security.length: 1
paths./v1beta1/{beaconName}:deactivate.post.security[0].Oauth2.length: 1
paths./v1beta1/{beaconName}:deactivate.post.security[0].Oauth2[0]: https://www.googleapis.com/auth/userlocation.beacon.registry
paths./v1beta1/{beaconName}:deactivate.post.tags.length: 1
paths./v1beta1/{beaconName}:deactivate.post.tags[0]: beacons
paths./v1beta1/{beaconName}:decommission.parameters.length: 13
paths./v1beta1/{beaconName}:decommission.parameters[0].$ref: '#/parameters/upload_protocol'
paths./v1beta1/{beaconName}:decommission.parameters[1].$ref: '#/parameters/prettyPrint'
paths./v1beta1/{beaconName}:decommission.parameters[2].$ref: '#/parameters/fields'
paths./v1beta1/{beaconName}:decommission.parameters[3].$ref: '#/parameters/uploadType'
paths./v1beta1/{beaconName}:decommission.parameters[4].$ref: '#/parameters/callback'
paths./v1beta1/{beaconName}:decommission.parameters[5].$ref: '#/parameters/$.xgafv'
paths./v1beta1/{beaconName}:decommission.parameters[6].$ref: '#/parameters/alt'
paths./v1beta1/{beaconName}:decommission.parameters[7].$ref: '#/parameters/access_token'
paths./v1beta1/{beaconName}:decommission.parameters[8].$ref: '#/parameters/key'
paths./v1beta1/{beaconName}:decommission.parameters[9].$ref: '#/parameters/quotaUser'
paths./v1beta1/{beaconName}:decommission.parameters[10].$ref: '#/parameters/pp'
paths./v1beta1/{beaconName}:decommission.parameters[11].$ref: '#/parameters/bearer_token'
paths./v1beta1/{beaconName}:decommission.parameters[12].$ref: '#/parameters/oauth_token'
paths./v1beta1/{beaconName}:decommission.post.description: |-
  Decommissions the specified beacon in the service. This beacon will no
  longer be returned from `beaconinfo.getforobserved`. This operation is
  permanent -- you will not be able to re-register a beacon with this ID
  again.

  Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2)
  from a signed-in user with **Is owner** or **Can edit** permissions in the
  Google Developers Console project.
paths./v1beta1/{beaconName}:decommission.post.operationId: proximitybeacon.beacons.decommission
paths./v1beta1/{beaconName}:decommission.post.parameters.length: 2
paths./v1beta1/{beaconName}:decommission.post.parameters[0].description: |-
  Beacon that should be decommissioned. A beacon name has the format
  "beacons/N!beaconId" where the beaconId is the base16 ID broadcast by
  the beacon and N is a code for the beacon's type. Possible values are
  `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
  for AltBeacon. For Eddystone-EID beacons, you may use either the
  current EID of the beacon's "stable" UID.
  Required.
paths./v1beta1/{beaconName}:decommission.post.parameters[0].in: path
paths./v1beta1/{beaconName}:decommission.post.parameters[0].name: beaconName
paths./v1beta1/{beaconName}:decommission.post.parameters[0].required: true
paths./v1beta1/{beaconName}:decommission.post.parameters[0].type: string
paths./v1beta1/{beaconName}:decommission.post.parameters[0].x-reservedExpansion: true
paths./v1beta1/{beaconName}:decommission.post.parameters[1].description: |-
  The project id of the beacon to decommission. If the project id is not
  specified then the project making the request is used. The project id
  must match the project that owns the beacon.
  Optional.
paths./v1beta1/{beaconName}:decommission.post.parameters[1].in: query
paths./v1beta1/{beaconName}:decommission.post.parameters[1].name: projectId
paths./v1beta1/{beaconName}:decommission.post.parameters[1].type: string
paths./v1beta1/{beaconName}:decommission.post.responses.200.description: Successful
  response
paths./v1beta1/{beaconName}:decommission.post.responses.200.schema.$ref: '#/definitions/Empty'
paths./v1beta1/{beaconName}:decommission.post.security.length: 1
paths./v1beta1/{beaconName}:decommission.post.security[0].Oauth2.length: 1
paths./v1beta1/{beaconName}:decommission.post.security[0].Oauth2[0]: https://www.googleapis.com/auth/userlocation.beacon.registry
paths./v1beta1/{beaconName}:decommission.post.tags.length: 1
paths./v1beta1/{beaconName}:decommission.post.tags[0]: beacons
paths./v1beta1/{namespaceName}.parameters.length: 13
paths./v1beta1/{namespaceName}.parameters[0].$ref: '#/parameters/upload_protocol'
paths./v1beta1/{namespaceName}.parameters[1].$ref: '#/parameters/prettyPrint'
paths./v1beta1/{namespaceName}.parameters[2].$ref: '#/parameters/fields'
paths./v1beta1/{namespaceName}.parameters[3].$ref: '#/parameters/uploadType'
paths./v1beta1/{namespaceName}.parameters[4].$ref: '#/parameters/callback'
paths./v1beta1/{namespaceName}.parameters[5].$ref: '#/parameters/$.xgafv'
paths./v1beta1/{namespaceName}.parameters[6].$ref: '#/parameters/alt'
paths./v1beta1/{namespaceName}.parameters[7].$ref: '#/parameters/access_token'
paths./v1beta1/{namespaceName}.parameters[8].$ref: '#/parameters/key'
paths./v1beta1/{namespaceName}.parameters[9].$ref: '#/parameters/quotaUser'
paths./v1beta1/{namespaceName}.parameters[10].$ref: '#/parameters/pp'
paths./v1beta1/{namespaceName}.parameters[11].$ref: '#/parameters/bearer_token'
paths./v1beta1/{namespaceName}.parameters[12].$ref: '#/parameters/oauth_token'
paths./v1beta1/{namespaceName}.put.description: |-
  Updates the information about the specified namespace. Only the namespace
  visibility can be updated.
paths./v1beta1/{namespaceName}.put.operationId: proximitybeacon.namespaces.update
paths./v1beta1/{namespaceName}.put.parameters.length: 3
paths./v1beta1/{namespaceName}.put.parameters[0].description: |-
  Resource name of this namespace. Namespaces names have the format:
  <code>namespaces/<var>namespace</var></code>.
paths./v1beta1/{namespaceName}.put.parameters[0].in: path
paths./v1beta1/{namespaceName}.put.parameters[0].name: namespaceName
paths./v1beta1/{namespaceName}.put.parameters[0].required: true
paths./v1beta1/{namespaceName}.put.parameters[0].type: string
paths./v1beta1/{namespaceName}.put.parameters[0].x-reservedExpansion: true
paths./v1beta1/{namespaceName}.put.parameters[1].description: |-
  The project id of the namespace to update. If the project id is not
  specified then the project making the request is used. The project id
  must match the project that owns the beacon.
  Optional.
paths./v1beta1/{namespaceName}.put.parameters[1].in: query
paths./v1beta1/{namespaceName}.put.parameters[1].name: projectId
paths./v1beta1/{namespaceName}.put.parameters[1].type: string
paths./v1beta1/{namespaceName}.put.parameters[2].in: body
paths./v1beta1/{namespaceName}.put.parameters[2].name: body
paths./v1beta1/{namespaceName}.put.parameters[2].schema.$ref: '#/definitions/Namespace'
paths./v1beta1/{namespaceName}.put.responses.200.description: Successful response
paths./v1beta1/{namespaceName}.put.responses.200.schema.$ref: '#/definitions/Namespace'
paths./v1beta1/{namespaceName}.put.security.length: 1
paths./v1beta1/{namespaceName}.put.security[0].Oauth2.length: 1
paths./v1beta1/{namespaceName}.put.security[0].Oauth2[0]: https://www.googleapis.com/auth/userlocation.beacon.registry
paths./v1beta1/{namespaceName}.put.tags.length: 1
paths./v1beta1/{namespaceName}.put.tags[0]: namespaces
paths./v1beta1/beaconinfo:getforobserved.parameters.length: 13
paths./v1beta1/beaconinfo:getforobserved.parameters[0].$ref: '#/parameters/upload_protocol'
paths./v1beta1/beaconinfo:getforobserved.parameters[1].$ref: '#/parameters/prettyPrint'
paths./v1beta1/beaconinfo:getforobserved.parameters[2].$ref: '#/parameters/fields'
paths./v1beta1/beaconinfo:getforobserved.parameters[3].$ref: '#/parameters/uploadType'
paths./v1beta1/beaconinfo:getforobserved.parameters[4].$ref: '#/parameters/callback'
paths./v1beta1/beaconinfo:getforobserved.parameters[5].$ref: '#/parameters/$.xgafv'
paths./v1beta1/beaconinfo:getforobserved.parameters[6].$ref: '#/parameters/alt'
paths./v1beta1/beaconinfo:getforobserved.parameters[7].$ref: '#/parameters/access_token'
paths./v1beta1/beaconinfo:getforobserved.parameters[8].$ref: '#/parameters/key'
paths./v1beta1/beaconinfo:getforobserved.parameters[9].$ref: '#/parameters/quotaUser'
paths./v1beta1/beaconinfo:getforobserved.parameters[10].$ref: '#/parameters/pp'
paths./v1beta1/beaconinfo:getforobserved.parameters[11].$ref: '#/parameters/bearer_token'
paths./v1beta1/beaconinfo:getforobserved.parameters[12].$ref: '#/parameters/oauth_token'
paths./v1beta1/beaconinfo:getforobserved.post.description: |-
  Given one or more beacon observations, returns any beacon information
  and attachments accessible to your application. Authorize by using the
  [API key](https://developers.google.com/beacons/proximity/get-started#request_a_browser_api_key)
  for the application.
paths./v1beta1/beaconinfo:getforobserved.post.operationId: proximitybeacon.beaconinfo.getforobserved
paths./v1beta1/beaconinfo:getforobserved.post.parameters.length: 1
paths./v1beta1/beaconinfo:getforobserved.post.parameters[0].in: body
paths./v1beta1/beaconinfo:getforobserved.post.parameters[0].name: body
paths./v1beta1/beaconinfo:getforobserved.post.parameters[0].schema.$ref: '#/definitions/GetInfoForObservedBeaconsRequest'
paths./v1beta1/beaconinfo:getforobserved.post.responses.200.description: Successful
  response
paths./v1beta1/beaconinfo:getforobserved.post.responses.200.schema.$ref: '#/definitions/GetInfoForObservedBeaconsResponse'
paths./v1beta1/beaconinfo:getforobserved.post.tags.length: 1
paths./v1beta1/beaconinfo:getforobserved.post.tags[0]: beaconinfo
paths./v1beta1/beacons.get.description: |-
  Searches the beacon registry for beacons that match the given search
  criteria. Only those beacons that the client has permission to list
  will be returned.

  Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2)
  from a signed-in user with **viewer**, **Is owner** or **Can edit**
  permissions in the Google Developers Console project.
paths./v1beta1/beacons.get.operationId: proximitybeacon.beacons.list
paths./v1beta1/beacons.get.parameters.length: 4
paths./v1beta1/beacons.get.parameters[0].description: |-
  The project id to list beacons under. If not present then the project
  credential that made the request is used as the project.
  Optional.
paths./v1beta1/beacons.get.parameters[0].in: query
paths./v1beta1/beacons.get.parameters[0].name: projectId
paths./v1beta1/beacons.get.parameters[0].type: string
paths./v1beta1/beacons.get.parameters[1].description: A pagination token obtained
  from a previous request to list beacons.
paths./v1beta1/beacons.get.parameters[1].in: query
paths./v1beta1/beacons.get.parameters[1].name: pageToken
paths./v1beta1/beacons.get.parameters[1].type: string
paths./v1beta1/beacons.get.parameters[2].description: |-
  Filter query string that supports the following field filters:

  * **description:`"<string>"`**
    For example: **description:"Room 3"**
    Returns beacons whose description matches tokens in the string "Room 3"
    (not necessarily that exact string).
    The string must be double-quoted.
  * **status:`<enum>`**
    For example: **status:active**
    Returns beacons whose status matches the given value. Values must be
    one of the Beacon.Status enum values (case insensitive). Accepts
    multiple filters which will be combined with OR logic.
  * **stability:`<enum>`**
    For example: **stability:mobile**
    Returns beacons whose expected stability matches the given value.
    Values must be one of the Beacon.Stability enum values (case
    insensitive). Accepts multiple filters which will be combined with
    OR logic.
  * **place\_id:`"<string>"`**
    For example: **place\_id:"ChIJVSZzVR8FdkgRXGmmm6SslKw="**
    Returns beacons explicitly registered at the given place, expressed as
    a Place ID obtained from [Google Places API](/places/place-id). Does not
    match places inside the given place. Does not consider the beacon's
    actual location (which may be different from its registered place).
    Accepts multiple filters that will be combined with OR logic. The place
    ID must be double-quoted.
  * **registration\_time`[<|>|<=|>=]<integer>`**
    For example: **registration\_time>=1433116800**
    Returns beacons whose registration time matches the given filter.
    Supports the operators: <, >, <=, and >=. Timestamp must be expressed as
    an integer number of seconds since midnight January 1, 1970 UTC. Accepts
    at most two filters that will be combined with AND logic, to support
    "between" semantics. If more than two are supplied, the latter ones are
    ignored.
  * **lat:`<double> lng:<double> radius:<integer>`**
    For example: **lat:51.1232343 lng:-1.093852 radius:1000**
    Returns beacons whose registered location is within the given circle.
    When any of these fields are given, all are required. Latitude and
    longitude must be decimal degrees between -90.0 and 90.0 and between
    -180.0 and 180.0 respectively. Radius must be an integer number of
    meters between 10 and 1,000,000 (1000 km).
  * **property:`"<string>=<string>"`**
    For example: **property:"battery-type=CR2032"**
    Returns beacons which have a property of the given name and value.
    Supports multiple filters which will be combined with OR logic.
    The entire name=value string must be double-quoted as one string.
  * **attachment\_type:`"<string>"`**
    For example: **attachment_type:"my-namespace/my-type"**
    Returns beacons having at least one attachment of the given namespaced
    type. Supports "any within this namespace" via the partial wildcard
    syntax: "my-namespace/*". Supports multiple filters which will be
    combined with OR logic. The string must be double-quoted.
  * **indoor\_level:`"<string>"`**
    For example: **indoor\_level:"1"**
    Returns beacons which are located on the given indoor level. Accepts
    multiple filters that will be combined with OR logic.

  Multiple filters on the same field are combined with OR logic (except
  registration_time which is combined with AND logic).
  Multiple filters on different fields are combined with AND logic.
  Filters should be separated by spaces.

  As with any HTTP query string parameter, the whole filter expression must
  be URL-encoded.

  Example REST request:
  `GET /v1beta1/beacons?q=status:active%20lat:51.123%20lng:-1.095%20radius:1000`
paths./v1beta1/beacons.get.parameters[2].in: query
paths./v1beta1/beacons.get.parameters[2].name: q
paths./v1beta1/beacons.get.parameters[2].type: string
paths./v1beta1/beacons.get.parameters[3].description: |-
  The maximum number of records to return for this request, up to a
  server-defined upper limit.
paths./v1beta1/beacons.get.parameters[3].in: query
paths./v1beta1/beacons.get.parameters[3].name: pageSize
paths./v1beta1/beacons.get.parameters[3].type: integer
paths./v1beta1/beacons.get.responses.200.description: Successful response
paths./v1beta1/beacons.get.responses.200.schema.$ref: '#/definitions/ListBeaconsResponse'
paths./v1beta1/beacons.get.security.length: 1
paths./v1beta1/beacons.get.security[0].Oauth2.length: 1
paths./v1beta1/beacons.get.security[0].Oauth2[0]: https://www.googleapis.com/auth/userlocation.beacon.registry
paths./v1beta1/beacons.get.tags.length: 1
paths./v1beta1/beacons.get.tags[0]: beacons
paths./v1beta1/beacons.parameters.length: 13
paths./v1beta1/beacons.parameters[0].$ref: '#/parameters/upload_protocol'
paths./v1beta1/beacons.parameters[1].$ref: '#/parameters/prettyPrint'
paths./v1beta1/beacons.parameters[2].$ref: '#/parameters/fields'
paths./v1beta1/beacons.parameters[3].$ref: '#/parameters/uploadType'
paths./v1beta1/beacons.parameters[4].$ref: '#/parameters/callback'
paths./v1beta1/beacons.parameters[5].$ref: '#/parameters/$.xgafv'
paths./v1beta1/beacons.parameters[6].$ref: '#/parameters/alt'
paths./v1beta1/beacons.parameters[7].$ref: '#/parameters/access_token'
paths./v1beta1/beacons.parameters[8].$ref: '#/parameters/key'
paths./v1beta1/beacons.parameters[9].$ref: '#/parameters/quotaUser'
paths./v1beta1/beacons.parameters[10].$ref: '#/parameters/pp'
paths./v1beta1/beacons.parameters[11].$ref: '#/parameters/bearer_token'
paths./v1beta1/beacons.parameters[12].$ref: '#/parameters/oauth_token'
paths./v1beta1/beacons:register.parameters.length: 13
paths./v1beta1/beacons:register.parameters[0].$ref: '#/parameters/upload_protocol'
paths./v1beta1/beacons:register.parameters[1].$ref: '#/parameters/prettyPrint'
paths./v1beta1/beacons:register.parameters[2].$ref: '#/parameters/fields'
paths./v1beta1/beacons:register.parameters[3].$ref: '#/parameters/uploadType'
paths./v1beta1/beacons:register.parameters[4].$ref: '#/parameters/callback'
paths./v1beta1/beacons:register.parameters[5].$ref: '#/parameters/$.xgafv'
paths./v1beta1/beacons:register.parameters[6].$ref: '#/parameters/alt'
paths./v1beta1/beacons:register.parameters[7].$ref: '#/parameters/access_token'
paths./v1beta1/beacons:register.parameters[8].$ref: '#/parameters/key'
paths./v1beta1/beacons:register.parameters[9].$ref: '#/parameters/quotaUser'
paths./v1beta1/beacons:register.parameters[10].$ref: '#/parameters/pp'
paths./v1beta1/beacons:register.parameters[11].$ref: '#/parameters/bearer_token'
paths./v1beta1/beacons:register.parameters[12].$ref: '#/parameters/oauth_token'
paths./v1beta1/beacons:register.post.description: |-
  Registers a previously unregistered beacon given its `advertisedId`.
  These IDs are unique within the system. An ID can be registered only once.

  Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2)
  from a signed-in user with **Is owner** or **Can edit** permissions in the
  Google Developers Console project.
paths./v1beta1/beacons:register.post.operationId: proximitybeacon.beacons.register
paths./v1beta1/beacons:register.post.parameters.length: 2
paths./v1beta1/beacons:register.post.parameters[0].description: |-
  The project id of the project the beacon will be registered to. If
  the project id is not specified then the project making the request
  is used.
  Optional.
paths./v1beta1/beacons:register.post.parameters[0].in: query
paths./v1beta1/beacons:register.post.parameters[0].name: projectId
paths./v1beta1/beacons:register.post.parameters[0].type: string
paths./v1beta1/beacons:register.post.parameters[1].in: body
paths./v1beta1/beacons:register.post.parameters[1].name: body
paths./v1beta1/beacons:register.post.parameters[1].schema.$ref: '#/definitions/Beacon'
paths./v1beta1/beacons:register.post.responses.200.description: Successful response
paths./v1beta1/beacons:register.post.responses.200.schema.$ref: '#/definitions/Beacon'
paths./v1beta1/beacons:register.post.security.length: 1
paths./v1beta1/beacons:register.post.security[0].Oauth2.length: 1
paths./v1beta1/beacons:register.post.security[0].Oauth2[0]: https://www.googleapis.com/auth/userlocation.beacon.registry
paths./v1beta1/beacons:register.post.tags.length: 1
paths./v1beta1/beacons:register.post.tags[0]: beacons
paths./v1beta1/eidparams.get.description: |-
  Gets the Proximity Beacon API's current public key and associated
  parameters used to initiate the Diffie-Hellman key exchange required to
  register a beacon that broadcasts the Eddystone-EID format. This key
  changes periodically; clients may cache it and re-use the same public key
  to provision and register multiple beacons. However, clients should be
  prepared to refresh this key when they encounter an error registering an
  Eddystone-EID beacon.
paths./v1beta1/eidparams.get.operationId: proximitybeacon.getEidparams
paths./v1beta1/eidparams.get.responses.200.description: Successful response
paths./v1beta1/eidparams.get.responses.200.schema.$ref: '#/definitions/EphemeralIdRegistrationParams'
paths./v1beta1/eidparams.get.security.length: 1
paths./v1beta1/eidparams.get.security[0].Oauth2.length: 1
paths./v1beta1/eidparams.get.security[0].Oauth2[0]: https://www.googleapis.com/auth/userlocation.beacon.registry
paths./v1beta1/eidparams.get.tags.length: 1
paths./v1beta1/eidparams.get.tags[0]: v1beta1
paths./v1beta1/eidparams.parameters.length: 13
paths./v1beta1/eidparams.parameters[0].$ref: '#/parameters/upload_protocol'
paths./v1beta1/eidparams.parameters[1].$ref: '#/parameters/prettyPrint'
paths./v1beta1/eidparams.parameters[2].$ref: '#/parameters/fields'
paths./v1beta1/eidparams.parameters[3].$ref: '#/parameters/uploadType'
paths./v1beta1/eidparams.parameters[4].$ref: '#/parameters/callback'
paths./v1beta1/eidparams.parameters[5].$ref: '#/parameters/$.xgafv'
paths./v1beta1/eidparams.parameters[6].$ref: '#/parameters/alt'
paths./v1beta1/eidparams.parameters[7].$ref: '#/parameters/access_token'
paths./v1beta1/eidparams.parameters[8].$ref: '#/parameters/key'
paths./v1beta1/eidparams.parameters[9].$ref: '#/parameters/quotaUser'
paths./v1beta1/eidparams.parameters[10].$ref: '#/parameters/pp'
paths./v1beta1/eidparams.parameters[11].$ref: '#/parameters/bearer_token'
paths./v1beta1/eidparams.parameters[12].$ref: '#/parameters/oauth_token'
paths./v1beta1/namespaces.get.description: |-
  Lists all attachment namespaces owned by your Google Developers Console
  project. Attachment data associated with a beacon must include a
  namespaced type, and the namespace must be owned by your project.

  Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2)
  from a signed-in user with **viewer**, **Is owner** or **Can edit**
  permissions in the Google Developers Console project.
paths./v1beta1/namespaces.get.operationId: proximitybeacon.namespaces.list
paths./v1beta1/namespaces.get.parameters.length: 1
paths./v1beta1/namespaces.get.parameters[0].description: |-
  The project id to list namespaces under.
  Optional.
paths./v1beta1/namespaces.get.parameters[0].in: query
paths./v1beta1/namespaces.get.parameters[0].name: projectId
paths./v1beta1/namespaces.get.parameters[0].type: string
paths./v1beta1/namespaces.get.responses.200.description: Successful response
paths./v1beta1/namespaces.get.responses.200.schema.$ref: '#/definitions/ListNamespacesResponse'
paths./v1beta1/namespaces.get.security.length: 1
paths./v1beta1/namespaces.get.security[0].Oauth2.length: 1
paths./v1beta1/namespaces.get.security[0].Oauth2[0]: https://www.googleapis.com/auth/userlocation.beacon.registry
paths./v1beta1/namespaces.get.tags.length: 1
paths./v1beta1/namespaces.get.tags[0]: namespaces
paths./v1beta1/namespaces.parameters.length: 13
paths./v1beta1/namespaces.parameters[0].$ref: '#/parameters/upload_protocol'
paths./v1beta1/namespaces.parameters[1].$ref: '#/parameters/prettyPrint'
paths./v1beta1/namespaces.parameters[2].$ref: '#/parameters/fields'
paths./v1beta1/namespaces.parameters[3].$ref: '#/parameters/uploadType'
paths./v1beta1/namespaces.parameters[4].$ref: '#/parameters/callback'
paths./v1beta1/namespaces.parameters[5].$ref: '#/parameters/$.xgafv'
paths./v1beta1/namespaces.parameters[6].$ref: '#/parameters/alt'
paths./v1beta1/namespaces.parameters[7].$ref: '#/parameters/access_token'
paths./v1beta1/namespaces.parameters[8].$ref: '#/parameters/key'
paths./v1beta1/namespaces.parameters[9].$ref: '#/parameters/quotaUser'
paths./v1beta1/namespaces.parameters[10].$ref: '#/parameters/pp'
paths./v1beta1/namespaces.parameters[11].$ref: '#/parameters/bearer_token'
paths./v1beta1/namespaces.parameters[12].$ref: '#/parameters/oauth_token'
schemes.length: 1
schemes[0]: https
securityDefinitions.Oauth2.authorizationUrl: https://accounts.google.com/o/oauth2/auth
securityDefinitions.Oauth2.description: Oauth 2.0 authentication
securityDefinitions.Oauth2.flow: implicit
securityDefinitions.Oauth2.scopes.https://www.googleapis.com/auth/userlocation.beacon.registry: View
  and modify your beacons
securityDefinitions.Oauth2.type: oauth2
swagger: "2.0"
tags.length: 4
tags[0].name: beaconinfo
tags[1].name: beacons
tags[2].name: namespaces
tags[3].name: v1beta1
x-hasEquivalentPaths: true

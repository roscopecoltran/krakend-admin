syntax = "proto3";

import "google/api/annotations.proto";

package googleproximitybeacon;

message PostV1beta1Beaconinfo:GetforobservedRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    GetInfoForObservedBeaconsRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message GetV1beta1BeaconsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    // The maximum number of records to return for this request, up to a
    // server-defined upper limit.
    int32 pageSize = 9;
    // A pagination token obtained from a previous request to list beacons.
    string pageToken = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    // The project id to list beacons under. If not present then the project
    // credential that made the request is used as the project.
    // Optional.
    string projectId = 13;
    // Filter query string that supports the following field filters:
    // 
    // * **description:`"<string>"`**
    //   For example: **description:"Room 3"**
    //   Returns beacons whose description matches tokens in the string "Room 3"
    //   (not necessarily that exact string).
    //   The string must be double-quoted.
    // * **status:`<enum>`**
    //   For example: **status:active**
    //   Returns beacons whose status matches the given value. Values must be
    //   one of the Beacon.Status enum values (case insensitive). Accepts
    //   multiple filters which will be combined with OR logic.
    // * **stability:`<enum>`**
    //   For example: **stability:mobile**
    //   Returns beacons whose expected stability matches the given value.
    //   Values must be one of the Beacon.Stability enum values (case
    //   insensitive). Accepts multiple filters which will be combined with
    //   OR logic.
    // * **place\_id:`"<string>"`**
    //   For example: **place\_id:"ChIJVSZzVR8FdkgRXGmmm6SslKw="**
    //   Returns beacons explicitly registered at the given place, expressed as
    //   a Place ID obtained from [Google Places API](/places/place-id). Does not
    //   match places inside the given place. Does not consider the beacon's
    //   actual location (which may be different from its registered place).
    //   Accepts multiple filters that will be combined with OR logic. The place
    //   ID must be double-quoted.
    // * **registration\_time`[<|>|<=|>=]<integer>`**
    //   For example: **registration\_time>=1433116800**
    //   Returns beacons whose registration time matches the given filter.
    //   Supports the operators: <, >, <=, and >=. Timestamp must be expressed as
    //   an integer number of seconds since midnight January 1, 1970 UTC. Accepts
    //   at most two filters that will be combined with AND logic, to support
    //   "between" semantics. If more than two are supplied, the latter ones are
    //   ignored.
    // * **lat:`<double> lng:<double> radius:<integer>`**
    //   For example: **lat:51.1232343 lng:-1.093852 radius:1000**
    //   Returns beacons whose registered location is within the given circle.
    //   When any of these fields are given, all are required. Latitude and
    //   longitude must be decimal degrees between -90.0 and 90.0 and between
    //   -180.0 and 180.0 respectively. Radius must be an integer number of
    //   meters between 10 and 1,000,000 (1000 km).
    // * **property:`"<string>=<string>"`**
    //   For example: **property:"battery-type=CR2032"**
    //   Returns beacons which have a property of the given name and value.
    //   Supports multiple filters which will be combined with OR logic.
    //   The entire name=value string must be double-quoted as one string.
    // * **attachment\_type:`"<string>"`**
    //   For example: **attachment_type:"my-namespace/my-type"**
    //   Returns beacons having at least one attachment of the given namespaced
    //   type. Supports "any within this namespace" via the partial wildcard
    //   syntax: "my-namespace/*". Supports multiple filters which will be
    //   combined with OR logic. The string must be double-quoted.
    // * **indoor\_level:`"<string>"`**
    //   For example: **indoor\_level:"1"**
    //   Returns beacons which are located on the given indoor level. Accepts
    //   multiple filters that will be combined with OR logic.
    // 
    // Multiple filters on the same field are combined with OR logic (except
    // registration_time which is combined with AND logic).
    // Multiple filters on different fields are combined with AND logic.
    // Filters should be separated by spaces.
    // 
    // As with any HTTP query string parameter, the whole filter expression must
    // be URL-encoded.
    // 
    // Example REST request:
    // `GET /v1beta1/beacons?q=status:active%20lat:51.123%20lng:-1.095%20radius:1000`
    string q = 14;
    string quotaUser = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

message PostV1beta1Beacons:RegisterRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    Beacon body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    // The project id of the project the beacon will be registered to. If
    // the project id is not specified then the project making the request
    // is used.
    // Optional.
    string projectId = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1beta1EidparamsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    boolean pp = 9;
    boolean prettyPrint = 10;
    string quotaUser = 11;
    string uploadType = 12;
    string upload_protocol = 13;
}

message GetV1beta1NamespacesRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    boolean pp = 9;
    boolean prettyPrint = 10;
    // The project id to list namespaces under.
    // Optional.
    string projectId = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message DeleteV1beta1AttachmentNameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    // The attachment name (`attachmentName`) of
    // the attachment to remove. For example:
    // `beacons/3!893737abc9/attachments/c5e937-af0-494-959-ec49d12738`. For
    // Eddystone-EID beacons, the beacon ID portion (`3!893737abc9`) may be the
    // beacon's current EID, or its "stable" Eddystone-UID.
    // Required.
    string attachmentName = 4;
    string bearer_token = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    // The project id of the attachment to delete. If not provided, the project
    // that is making the request is used.
    // Optional.
    string projectId = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1beta1BeaconNameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    // Resource name of this beacon. A beacon name has the format
    // "beacons/N!beaconId" where the beaconId is the base16 ID broadcast by
    // the beacon and N is a code for the beacon's type. Possible values are
    // `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
    // for AltBeacon. For Eddystone-EID beacons, you may use either the
    // current EID or the beacon's "stable" UID.
    // Required.
    string beaconName = 4;
    string bearer_token = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    // The project id of the beacon to request. If the project id is not specified
    // then the project making the request is used. The project id must match the
    // project that owns the beacon.
    // Optional.
    string projectId = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PutV1beta1BeaconNameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    // Resource name of this beacon. A beacon name has the format
    // "beacons/N!beaconId" where the beaconId is the base16 ID broadcast by
    // the beacon and N is a code for the beacon's type. Possible values are
    // `3` for Eddystone, `1` for iBeacon, or `5` for AltBeacon.
    // 
    // This field must be left empty when registering. After reading a beacon,
    // clients can use the name for future operations.
    string beaconName = 4;
    string bearer_token = 5;
    Beacon body = 6;
    string callback = 7;
    string fields = 8;
    string key = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    // The project id of the beacon to update. If the project id is not
    // specified then the project making the request is used. The project id
    // must match the project that owns the beacon.
    // Optional.
    string projectId = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message DeleteV1beta1BeaconNameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    // Beacon that should be deleted. A beacon name has the format
    // "beacons/N!beaconId" where the beaconId is the base16 ID broadcast by
    // the beacon and N is a code for the beacon's type. Possible values are
    // `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
    // for AltBeacon. For Eddystone-EID beacons, you may use either the
    // current EID or the beacon's "stable" UID.
    // Required.
    string beaconName = 4;
    string bearer_token = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    // The project id of the beacon to delete. If not provided, the project
    // that is making the request is used.
    // Optional.
    string projectId = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1beta1BeaconNameAttachmentsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    // Beacon whose attachments should be fetched. A beacon name has the
    // format "beacons/N!beaconId" where the beaconId is the base16 ID broadcast
    // by the beacon and N is a code for the beacon's type. Possible values are
    // `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
    // for AltBeacon. For Eddystone-EID beacons, you may use either the
    // current EID or the beacon's "stable" UID.
    // Required.
    string beaconName = 4;
    string bearer_token = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    // Specifies the namespace and type of attachment to include in response in
    // <var>namespace/type</var> format. Accepts `*/*` to specify
    // "all types in all namespaces".
    string namespacedType = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    // The project id to list beacon attachments under. This field can be
    // used when "*" is specified to mean all attachment namespaces. Projects
    // may have multiple attachments with multiple namespaces. If "*" is
    // specified and the projectId string is empty, then the project
    // making the request is used.
    // Optional.
    string projectId = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message PostV1beta1BeaconNameAttachmentsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    // Beacon on which the attachment should be created. A beacon name has the
    // format "beacons/N!beaconId" where the beaconId is the base16 ID broadcast
    // by the beacon and N is a code for the beacon's type. Possible values are
    // `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
    // for AltBeacon. For Eddystone-EID beacons, you may use either the
    // current EID or the beacon's "stable" UID.
    // Required.
    string beaconName = 4;
    string bearer_token = 5;
    BeaconAttachment body = 6;
    string callback = 7;
    string fields = 8;
    string key = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    // The project id of the project the attachment will belong to. If
    // the project id is not specified then the project making the request
    // is used.
    // Optional.
    string projectId = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message PostV1beta1BeaconNameAttachments:BatchDeleteRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    // The beacon whose attachments should be deleted. A beacon name has the
    // format "beacons/N!beaconId" where the beaconId is the base16 ID broadcast
    // by the beacon and N is a code for the beacon's type. Possible values are
    // `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
    // for AltBeacon. For Eddystone-EID beacons, you may use either the
    // current EID or the beacon's "stable" UID.
    // Required.
    string beaconName = 4;
    string bearer_token = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    // Specifies the namespace and type of attachments to delete in
    // `namespace/type` format. Accepts `*/*` to specify
    // "all types in all namespaces".
    // Optional.
    string namespacedType = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    // The project id to delete beacon attachments under. This field can be
    // used when "*" is specified to mean all attachment namespaces. Projects
    // may have multiple attachments with multiple namespaces. If "*" is
    // specified and the projectId string is empty, then the project
    // making the request is used.
    // Optional.
    string projectId = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message GetV1beta1BeaconNameDiagnosticsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // Requests only beacons that have the given alert. For example, to find
    // beacons that have low batteries use `alert_filter=LOW_BATTERY`.
    enum GetV1beta1BeaconNameDiagnosticsRequest_AlertFilter {
        GETV1BETA1BEACONNAMEDIAGNOSTICSREQUEST_ALERTFILTER_ALERT_UNSPECIFIED = 0;
        GETV1BETA1BEACONNAMEDIAGNOSTICSREQUEST_ALERTFILTER_WRONG_LOCATION = 1;
        GETV1BETA1BEACONNAMEDIAGNOSTICSREQUEST_ALERTFILTER_LOW_BATTERY = 2;
    }
    GetV1beta1BeaconNameDiagnosticsRequest_AlertFilter alertFilter = 3;
    alt alt = 4;
    // Beacon that the diagnostics are for.
    string beaconName = 5;
    string bearer_token = 6;
    string callback = 7;
    string fields = 8;
    string key = 9;
    string oauth_token = 10;
    // Specifies the maximum number of results to return. Defaults to
    // 10. Maximum 1000. Optional.
    int32 pageSize = 11;
    // Requests results that occur after the `page_token`, obtained from the
    // response to a previous request. Optional.
    string pageToken = 12;
    boolean pp = 13;
    boolean prettyPrint = 14;
    // Requests only diagnostic records for the given project id. If not set,
    // then the project making the request will be used for looking up
    // diagnostic records. Optional.
    string projectId = 15;
    string quotaUser = 16;
    string uploadType = 17;
    string upload_protocol = 18;
}

message PostV1beta1BeaconName:ActivateRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    // Beacon that should be activated. A beacon name has the format
    // "beacons/N!beaconId" where the beaconId is the base16 ID broadcast by
    // the beacon and N is a code for the beacon's type. Possible values are
    // `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
    // for AltBeacon. For Eddystone-EID beacons, you may use either the
    // current EID or the beacon's "stable" UID.
    // Required.
    string beaconName = 4;
    string bearer_token = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    // The project id of the beacon to activate. If the project id is not
    // specified then the project making the request is used. The project id
    // must match the project that owns the beacon.
    // Optional.
    string projectId = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1beta1BeaconName:DeactivateRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    // Beacon that should be deactivated. A beacon name has the format
    // "beacons/N!beaconId" where the beaconId is the base16 ID broadcast by
    // the beacon and N is a code for the beacon's type. Possible values are
    // `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
    // for AltBeacon. For Eddystone-EID beacons, you may use either the
    // current EID or the beacon's "stable" UID.
    // Required.
    string beaconName = 4;
    string bearer_token = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    // The project id of the beacon to deactivate. If the project id is not
    // specified then the project making the request is used. The project id must
    // match the project that owns the beacon.
    // Optional.
    string projectId = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1beta1BeaconName:DecommissionRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    // Beacon that should be decommissioned. A beacon name has the format
    // "beacons/N!beaconId" where the beaconId is the base16 ID broadcast by
    // the beacon and N is a code for the beacon's type. Possible values are
    // `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
    // for AltBeacon. For Eddystone-EID beacons, you may use either the
    // current EID of the beacon's "stable" UID.
    // Required.
    string beaconName = 4;
    string bearer_token = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    // The project id of the beacon to decommission. If the project id is not
    // specified then the project making the request is used. The project id
    // must match the project that owns the beacon.
    // Optional.
    string projectId = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PutV1beta1NamespaceNameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    Namespace body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    // Resource name of this namespace. Namespaces names have the format:
    // <code>namespaces/<var>namespace</var></code>.
    string namespaceName = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    // The project id of the namespace to update. If the project id is not
    // specified then the project making the request is used. The project id
    // must match the project that owns the beacon.
    // Optional.
    string projectId = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

enum $.Xgafv {
    $XGAFV_1 = 0;
    $XGAFV_2 = 1;
}

message AdvertisedId {
    // The actual beacon identifier, as broadcast by the beacon hardware. Must be
    // [base64](http://tools.ietf.org/html/rfc4648#section-4) encoded in HTTP
    // requests, and will be so encoded (with padding) in responses. The base64
    // encoding should be of the binary byte-stream and not any textual (such as
    // hex) representation thereof.
    // Required.
    string id = 1;
    // Specifies the identifier type.
    // Required.
    enum AdvertisedId_Type {
        ADVERTISEDID_TYPE_TYPE_UNSPECIFIED = 0;
        ADVERTISEDID_TYPE_EDDYSTONE = 1;
        ADVERTISEDID_TYPE_IBEACON = 2;
        ADVERTISEDID_TYPE_ALTBEACON = 3;
        ADVERTISEDID_TYPE_EDDYSTONE_EID = 4;
    }
    AdvertisedId_Type type = 2;
}

message AttachmentInfo {
    // An opaque data container for client-provided data.
    string data = 1;
    // Specifies what kind of attachment this is. Tells a client how to
    // interpret the `data` field. Format is <var>namespace/type</var>, for
    // example <code>scrupulous-wombat-12345/welcome-message</code>
    string namespacedType = 2;
}

message Beacon {
    // The identifier of a beacon as advertised by it. This field must be
    // populated when registering. It may be empty when updating a beacon
    // record because it is ignored in updates.
    // 
    // When registering a beacon that broadcasts Eddystone-EID, this field
    // should contain a "stable" Eddystone-UID that identifies the beacon and
    // links it to its attachments. The stable Eddystone-UID is only used for
    // administering the beacon.
    AdvertisedId advertisedId = 1;
    // Resource name of this beacon. A beacon name has the format
    // "beacons/N!beaconId" where the beaconId is the base16 ID broadcast by
    // the beacon and N is a code for the beacon's type. Possible values are
    // `3` for Eddystone, `1` for iBeacon, or `5` for AltBeacon.
    // 
    // This field must be left empty when registering. After reading a beacon,
    // clients can use the name for future operations.
    string beaconName = 2;
    // Free text used to identify and describe the beacon. Maximum length 140
    // characters.
    // Optional.
    string description = 3;
    // Write-only registration parameters for beacons using Eddystone-EID
    // (remotely resolved ephemeral ID) format. This information will not be
    // populated in API responses. When submitting this data, the `advertised_id`
    // field must contain an ID of type Eddystone-UID. Any other ID type will
    // result in an error.
    EphemeralIdRegistration ephemeralIdRegistration = 4;
    // Expected location stability. This is set when the beacon is registered or
    // updated, not automatically detected in any way.
    // Optional.
    enum Beacon_ExpectedStability {
        BEACON_EXPECTEDSTABILITY_STABILITY_UNSPECIFIED = 0;
        BEACON_EXPECTEDSTABILITY_STABLE = 1;
        BEACON_EXPECTEDSTABILITY_PORTABLE = 2;
        BEACON_EXPECTEDSTABILITY_MOBILE = 3;
        BEACON_EXPECTEDSTABILITY_ROVING = 4;
    }
    Beacon_ExpectedStability expectedStability = 5;
    // The indoor level information for this beacon, if known. As returned by the
    // Google Maps API.
    // Optional.
    IndoorLevel indoorLevel = 6;
    // The location of the beacon, expressed as a latitude and longitude pair.
    // This location is given when the beacon is registered or updated. It does
    // not necessarily indicate the actual current location of the beacon.
    // Optional.
    LatLng latLng = 7;
    // The [Google Places API](/places/place-id) Place ID of the place where
    // the beacon is deployed. This is given when the beacon is registered or
    // updated, not automatically detected in any way.
    // Optional.
    string placeId = 8;
    // Properties of the beacon device, for example battery type or firmware
    // version.
    // Optional.
    map<string, string> properties = 9;
    // Some beacons may require a user to provide an authorization key before
    // changing any of its configuration (e.g. broadcast frames, transmit power).
    // This field provides a place to store and control access to that key.
    // This field is populated in responses to `GET /v1beta1/beacons/3!beaconId`
    // from users with write access to the given beacon. That is to say: If the
    // user is authorized to write the beacon's confidential data in the service,
    // the service considers them authorized to configure the beacon. Note
    // that this key grants nothing on the service, only on the beacon itself.
    string provisioningKey = 10;
    // Current status of the beacon.
    // Required.
    enum Beacon_Statu {
        BEACON_STATU_STATUS_UNSPECIFIED = 0;
        BEACON_STATU_ACTIVE = 1;
        BEACON_STATU_DECOMMISSIONED = 2;
        BEACON_STATU_INACTIVE = 3;
    }
    Beacon_Statu status = 11;
}

message BeaconAttachment {
    // Resource name of this attachment. Attachment names have the format:
    // <code>beacons/<var>beacon_id</var>/attachments/<var>attachment_id</var></code>.
    // Leave this empty on creation.
    string attachmentName = 1;
    // The UTC time when this attachment was created, in milliseconds since the
    // UNIX epoch.
    string creationTimeMs = 2;
    // An opaque data container for client-provided data. Must be
    // [base64](http://tools.ietf.org/html/rfc4648#section-4) encoded in HTTP
    // requests, and will be so encoded (with padding) in responses.
    // Required.
    string data = 3;
    // The distance away from the beacon at which this attachment should be
    // delivered to a mobile app.
    // 
    // Setting this to a value greater than zero indicates that the app should
    // behave as if the beacon is "seen" when the mobile device is less than this
    // distance away from the beacon.
    // 
    // Different attachments on the same beacon can have different max distances.
    // 
    // Note that even though this value is expressed with fractional meter
    // precision, real-world behavior is likley to be much less precise than one
    // meter, due to the nature of current Bluetooth radio technology.
    // 
    // Optional. When not set or zero, the attachment should be delivered at the
    // beacon's outer limit of detection.
    // 
    // Negative values are invalid and return an error.
    double maxDistanceMeters = 4;
    // Specifies what kind of attachment this is. Tells a client how to
    // interpret the `data` field. Format is <var>namespace/type</var>. Namespace
    // provides type separation between clients. Type describes the type of
    // `data`, for use by the client when parsing the `data` field.
    // Required.
    string namespacedType = 5;
}

message BeaconInfo {
    // The ID advertised by the beacon.
    AdvertisedId advertisedId = 1;
    // Attachments matching the type(s) requested.
    // May be empty if no attachment types were requested.
    repeated AttachmentInfo attachments = 2;
    // The name under which the beacon is registered.
    string beaconName = 3;
}

message Date {
    // Day of month. Must be from 1 to 31 and valid for the year and month, or 0
    // if specifying a year/month where the day is not significant.
    int32 day = 1;
    // Month of year. Must be from 1 to 12.
    int32 month = 2;
    // Year of date. Must be from 1 to 9999, or 0 if specifying a date without
    // a year.
    int32 year = 3;
}

message DeleteAttachmentsResponse {
    // The number of attachments that were deleted.
    int32 numDeleted = 1;
}

message Diagnostics {
    // An unordered list of Alerts that the beacon has.
    repeated string alerts = 1;
    // Resource name of the beacon. For Eddystone-EID beacons, this may
    // be the beacon's current EID, or the beacon's "stable" Eddystone-UID.
    string beaconName = 2;
    // The date when the battery is expected to be low. If the value is missing
    // then there is no estimate for when the battery will be low.
    // This value is only an estimate, not an exact date.
    Date estimatedLowBatteryDate = 3;
}

message Empty {
}

message EphemeralIdRegistration {
    // The beacon's public key used for the Elliptic curve Diffie-Hellman
    // key exchange. When this field is populated, `service_ecdh_public_key`
    // must also be populated, and `beacon_identity_key` must not be.
    string beaconEcdhPublicKey = 1;
    // The private key of the beacon. If this field is populated,
    // `beacon_ecdh_public_key` and `service_ecdh_public_key` must not be
    // populated.
    string beaconIdentityKey = 2;
    // The initial clock value of the beacon. The beacon's clock must have
    // begun counting at this value immediately prior to transmitting this
    // value to the resolving service. Significant delay in transmitting this
    // value to the service risks registration or resolution failures. If a
    // value is not provided, the default is zero.
    string initialClockValue = 3;
    // An initial ephemeral ID calculated using the clock value submitted as
    // `initial_clock_value`, and the secret key generated by the
    // Diffie-Hellman key exchange using `service_ecdh_public_key` and
    // `service_ecdh_public_key`. This initial EID value will be used by the
    // service to confirm that the key exchange process was successful.
    string initialEid = 4;
    // Indicates the nominal period between each rotation of the beacon's
    // ephemeral ID. "Nominal" because the beacon should randomize the
    // actual interval. See [the spec at github](https://github.com/google/eddystone/tree/master/eddystone-eid)
    // for details. This value corresponds to a power-of-two scaler on the
    // beacon's clock: when the scaler value is K, the beacon will begin
    // broadcasting a new ephemeral ID on average every 2^K seconds.
    uint32 rotationPeriodExponent = 5;
    // The service's public key used for the Elliptic curve Diffie-Hellman
    // key exchange. When this field is populated, `beacon_ecdh_public_key`
    // must also be populated, and `beacon_identity_key` must not be.
    string serviceEcdhPublicKey = 6;
}

message EphemeralIdRegistrationParams {
    // Indicates the maximum rotation period supported by the service.
    // See EddystoneEidRegistration.rotation_period_exponent
    uint32 maxRotationPeriodExponent = 1;
    // Indicates the minimum rotation period supported by the service.
    // See EddystoneEidRegistration.rotation_period_exponent
    uint32 minRotationPeriodExponent = 2;
    // The beacon service's public key for use by a beacon to derive its
    // Identity Key using Elliptic Curve Diffie-Hellman key exchange.
    string serviceEcdhPublicKey = 3;
}

message GetInfoForObservedBeaconsRequest {
    // Specifies what kind of attachments to include in the response.
    // When given, the response will include only attachments of the given types.
    // When empty, no attachments will be returned. Must be in the format
    // <var>namespace/type</var>. Accepts `*` to specify all types in
    // all namespaces owned by the client.
    // Optional.
    repeated string namespacedTypes = 1;
    // The beacons that the client has encountered.
    // At least one must be given.
    repeated Observation observations = 2;
}

message GetInfoForObservedBeaconsResponse {
    // Public information about beacons.
    // May be empty if the request matched no beacons.
    repeated BeaconInfo beacons = 1;
}

message IndoorLevel {
    // The name of this level.
    string name = 1;
}

message LatLng {
    // The latitude in degrees. It must be in the range [-90.0, +90.0].
    double latitude = 1;
    // The longitude in degrees. It must be in the range [-180.0, +180.0].
    double longitude = 2;
}

message ListBeaconAttachmentsResponse {
    // The attachments that corresponded to the request params.
    repeated BeaconAttachment attachments = 1;
}

message ListBeaconsResponse {
    // The beacons that matched the search criteria.
    repeated Beacon beacons = 1;
    // An opaque pagination token that the client may provide in their next
    // request to retrieve the next page of results.
    string nextPageToken = 2;
    // Estimate of the total number of beacons matched by the query. Higher
    // values may be less accurate.
    string totalCount = 3;
}

message ListDiagnosticsResponse {
    // The diagnostics matching the given request.
    repeated Diagnostics diagnostics = 1;
    // Token that can be used for pagination. Returned only if the
    // request matches more beacons than can be returned in this response.
    string nextPageToken = 2;
}

message ListNamespacesResponse {
    // The attachments that corresponded to the request params.
    repeated Namespace namespaces = 1;
}

message Namespace {
    // Resource name of this namespace. Namespaces names have the format:
    // <code>namespaces/<var>namespace</var></code>.
    string namespaceName = 1;
    // Specifies what clients may receive attachments under this namespace
    // via `beaconinfo.getforobserved`.
    enum Namespace_ServingVisibility {
        NAMESPACE_SERVINGVISIBILITY_VISIBILITY_UNSPECIFIED = 0;
        NAMESPACE_SERVINGVISIBILITY_UNLISTED = 1;
        NAMESPACE_SERVINGVISIBILITY_PUBLIC = 2;
    }
    Namespace_ServingVisibility servingVisibility = 2;
}

message Observation {
    // The ID advertised by the beacon the client has encountered.
    // 
    // If the submitted `advertised_id` type is Eddystone-EID, then the client
    // must be authorized to resolve the given beacon. Otherwise no data will be
    // returned for that beacon.
    // Required.
    AdvertisedId advertisedId = 1;
    // The array of telemetry bytes received from the beacon. The server is
    // responsible for parsing it. This field may frequently be empty, as
    // with a beacon that transmits telemetry only occasionally.
    string telemetry = 2;
    // Time when the beacon was observed.
    string timestampMs = 3;
}

enum Alt {
    JSON = 0;
    MEDIA = 1;
    PROTO = 2;
}

service GoogleProximityBeaconService {
    // Given one or more beacon observations, returns any beacon information
    // and attachments accessible to your application. Authorize by using the
    // [API key](https://developers.google.com/beacons/proximity/get-started#request_a_browser_api_key)
    // for the application.
    rpc PostV1beta1Beaconinfo:Getforobserved(PostV1beta1Beaconinfo:GetforobservedRequest) returns (GetInfoForObservedBeaconsResponse) {
      option (google.api.http) = {
        post: "//v1beta1/beaconinfo:getforobserved"
        body: "body"
      };
    }
    // Searches the beacon registry for beacons that match the given search
    // criteria. Only those beacons that the client has permission to list
    // will be returned.
    // 
    // Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2)
    // from a signed-in user with **viewer**, **Is owner** or **Can edit**
    // permissions in the Google Developers Console project.
    rpc GetV1beta1Beacons(GetV1beta1BeaconsRequest) returns (ListBeaconsResponse) {
      option (google.api.http) = {
        get: "//v1beta1/beacons"
      };
    }
    // Registers a previously unregistered beacon given its `advertisedId`.
    // These IDs are unique within the system. An ID can be registered only once.
    // 
    // Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2)
    // from a signed-in user with **Is owner** or **Can edit** permissions in the
    // Google Developers Console project.
    rpc PostV1beta1Beacons:Register(PostV1beta1Beacons:RegisterRequest) returns (Beacon) {
      option (google.api.http) = {
        post: "//v1beta1/beacons:register"
        body: "body"
      };
    }
    // Gets the Proximity Beacon API's current public key and associated
    // parameters used to initiate the Diffie-Hellman key exchange required to
    // register a beacon that broadcasts the Eddystone-EID format. This key
    // changes periodically; clients may cache it and re-use the same public key
    // to provision and register multiple beacons. However, clients should be
    // prepared to refresh this key when they encounter an error registering an
    // Eddystone-EID beacon.
    rpc GetV1beta1Eidparams(GetV1beta1EidparamsRequest) returns (EphemeralIdRegistrationParams) {
      option (google.api.http) = {
        get: "//v1beta1/eidparams"
      };
    }
    // Lists all attachment namespaces owned by your Google Developers Console
    // project. Attachment data associated with a beacon must include a
    // namespaced type, and the namespace must be owned by your project.
    // 
    // Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2)
    // from a signed-in user with **viewer**, **Is owner** or **Can edit**
    // permissions in the Google Developers Console project.
    rpc GetV1beta1Namespaces(GetV1beta1NamespacesRequest) returns (ListNamespacesResponse) {
      option (google.api.http) = {
        get: "//v1beta1/namespaces"
      };
    }
    // Deletes the specified attachment for the given beacon. Each attachment has
    // a unique attachment name (`attachmentName`) which is returned when you
    // fetch the attachment data via this API. You specify this with the delete
    // request to control which attachment is removed. This operation cannot be
    // undone.
    // 
    // Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2)
    // from a signed-in user with **Is owner** or **Can edit** permissions in the
    // Google Developers Console project.
    rpc DeleteV1beta1AttachmentName(DeleteV1beta1AttachmentNameRequest) returns (Empty) {
      option (google.api.http) = {
        delete: "//v1beta1/{attachmentName}"
      };
    }
    // Returns detailed information about the specified beacon.
    // 
    // Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2)
    // from a signed-in user with **viewer**, **Is owner** or **Can edit**
    // permissions in the Google Developers Console project.
    // 
    // Requests may supply an Eddystone-EID beacon name in the form:
    // `beacons/4!beaconId` where the `beaconId` is the base16 ephemeral ID
    // broadcast by the beacon. The returned `Beacon` object will contain the
    // beacon's stable Eddystone-UID. Clients not authorized to resolve the
    // beacon's ephemeral Eddystone-EID broadcast will receive an error.
    rpc GetV1beta1BeaconName(GetV1beta1BeaconNameRequest) returns (Beacon) {
      option (google.api.http) = {
        get: "//v1beta1/{beaconName}"
      };
    }
    // Updates the information about the specified beacon. **Any field that you do
    // not populate in the submitted beacon will be permanently erased**, so you
    // should follow the "read, modify, write" pattern to avoid inadvertently
    // destroying data.
    // 
    // Changes to the beacon status via this method will be  silently ignored.
    // To update beacon status, use the separate methods on this API for
    // activation, deactivation, and decommissioning.
    // Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2)
    // from a signed-in user with **Is owner** or **Can edit** permissions in the
    // Google Developers Console project.
    rpc PutV1beta1BeaconName(PutV1beta1BeaconNameRequest) returns (Beacon) {
      option (google.api.http) = {
        put: "//v1beta1/{beaconName}"
        body: "body"
      };
    }
    // Deletes the specified beacon including all diagnostics data for the beacon
    // as well as any attachments on the beacon (including those belonging to
    // other projects). This operation cannot be undone.
    // 
    // Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2)
    // from a signed-in user with **Is owner** or **Can edit** permissions in the
    // Google Developers Console project.
    rpc DeleteV1beta1BeaconName(DeleteV1beta1BeaconNameRequest) returns (Empty) {
      option (google.api.http) = {
        delete: "//v1beta1/{beaconName}"
      };
    }
    // Returns the attachments for the specified beacon that match the specified
    // namespaced-type pattern.
    // 
    // To control which namespaced types are returned, you add the
    // `namespacedType` query parameter to the request. You must either use
    // `*/*`, to return all attachments, or the namespace must be one of
    // the ones returned from the  `namespaces` endpoint.
    // 
    // Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2)
    // from a signed-in user with **viewer**, **Is owner** or **Can edit**
    // permissions in the Google Developers Console project.
    rpc GetV1beta1BeaconNameAttachments(GetV1beta1BeaconNameAttachmentsRequest) returns (ListBeaconAttachmentsResponse) {
      option (google.api.http) = {
        get: "//v1beta1/{beaconName}/attachments"
      };
    }
    // Associates the given data with the specified beacon. Attachment data must
    // contain two parts:
    // <ul>
    // <li>A namespaced type.</li>
    // <li>The actual attachment data itself.</li>
    // </ul>
    // The namespaced type consists of two parts, the namespace and the type.
    // The namespace must be one of the values returned by the `namespaces`
    // endpoint, while the type can be a string of any characters except for the
    // forward slash (`/`) up to 100 characters in length.
    // 
    // Attachment data can be up to 1024 bytes long.
    // 
    // Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2)
    // from a signed-in user with **Is owner** or **Can edit** permissions in the
    // Google Developers Console project.
    rpc PostV1beta1BeaconNameAttachments(PostV1beta1BeaconNameAttachmentsRequest) returns (BeaconAttachment) {
      option (google.api.http) = {
        post: "//v1beta1/{beaconName}/attachments"
        body: "body"
      };
    }
    // Deletes multiple attachments on a given beacon. This operation is
    // permanent and cannot be undone.
    // 
    // You can optionally specify `namespacedType` to choose which attachments
    // should be deleted. If you do not specify `namespacedType`,  all your
    // attachments on the given beacon will be deleted. You also may explicitly
    // specify `*/*` to delete all.
    // 
    // Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2)
    // from a signed-in user with **Is owner** or **Can edit** permissions in the
    // Google Developers Console project.
    rpc PostV1beta1BeaconNameAttachments:BatchDelete(PostV1beta1BeaconNameAttachments:BatchDeleteRequest) returns (DeleteAttachmentsResponse) {
      option (google.api.http) = {
        post: "//v1beta1/{beaconName}/attachments:batchDelete"
      };
    }
    // List the diagnostics for a single beacon. You can also list diagnostics for
    // all the beacons owned by your Google Developers Console project by using
    // the beacon name `beacons/-`.
    // 
    // Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2)
    // from a signed-in user with **viewer**, **Is owner** or **Can edit**
    // permissions in the Google Developers Console project.
    rpc GetV1beta1BeaconNameDiagnostics(GetV1beta1BeaconNameDiagnosticsRequest) returns (ListDiagnosticsResponse) {
      option (google.api.http) = {
        get: "//v1beta1/{beaconName}/diagnostics"
      };
    }
    // Activates a beacon. A beacon that is active will return information
    // and attachment data when queried via `beaconinfo.getforobserved`.
    // Calling this method on an already active beacon will do nothing (but
    // will return a successful response code).
    // 
    // Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2)
    // from a signed-in user with **Is owner** or **Can edit** permissions in the
    // Google Developers Console project.
    rpc PostV1beta1BeaconName:Activate(PostV1beta1BeaconName:ActivateRequest) returns (Empty) {
      option (google.api.http) = {
        post: "//v1beta1/{beaconName}:activate"
      };
    }
    // Deactivates a beacon. Once deactivated, the API will not return
    // information nor attachment data for the beacon when queried via
    // `beaconinfo.getforobserved`. Calling this method on an already inactive
    // beacon will do nothing (but will return a successful response code).
    // 
    // Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2)
    // from a signed-in user with **Is owner** or **Can edit** permissions in the
    // Google Developers Console project.
    rpc PostV1beta1BeaconName:Deactivate(PostV1beta1BeaconName:DeactivateRequest) returns (Empty) {
      option (google.api.http) = {
        post: "//v1beta1/{beaconName}:deactivate"
      };
    }
    // Decommissions the specified beacon in the service. This beacon will no
    // longer be returned from `beaconinfo.getforobserved`. This operation is
    // permanent -- you will not be able to re-register a beacon with this ID
    // again.
    // 
    // Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2)
    // from a signed-in user with **Is owner** or **Can edit** permissions in the
    // Google Developers Console project.
    rpc PostV1beta1BeaconName:Decommission(PostV1beta1BeaconName:DecommissionRequest) returns (Empty) {
      option (google.api.http) = {
        post: "//v1beta1/{beaconName}:decommission"
      };
    }
    // Updates the information about the specified namespace. Only the namespace
    // visibility can be updated.
    rpc PutV1beta1NamespaceName(PutV1beta1NamespaceNameRequest) returns (Namespace) {
      option (google.api.http) = {
        put: "//v1beta1/{namespaceName}"
        body: "body"
      };
    }
}

syntax = "proto3";

import "google/api/annotations.proto";

package cloudsqladministration;

message GetFlagsRequest {
    alt alt = 1;
    // Database version for flag retrieval. Flags are specific to the database version.
    string databaseVersion = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetProjectsProjectInstancesRequest {
    alt alt = 1;
    string fields = 2;
    // An expression for filtering the results of the request, such as by name or label.
    string filter = 3;
    string key = 4;
    // The maximum number of results to return per response.
    int32 maxResults = 5;
    string oauth_token = 6;
    // A previously-returned page token representing part of the larger set of results to view.
    string pageToken = 7;
    boolean prettyPrint = 8;
    // Project ID of the project for which to list Cloud SQL instances.
    string project = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message PostProjectsProjectInstancesRequest {
    alt alt = 1;
    DatabaseInstance body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // Project ID of the project to which the newly created Cloud SQL instances should belong.
    string project = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetProjectsProjectInstancesInstanceRequest {
    alt alt = 1;
    string fields = 2;
    // Database instance ID. This does not include the project ID.
    string instance = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // Project ID of the project that contains the instance.
    string project = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PutProjectsProjectInstancesInstanceRequest {
    alt alt = 1;
    DatabaseInstance body = 2;
    string fields = 3;
    // Cloud SQL instance ID. This does not include the project ID.
    string instance = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // Project ID of the project that contains the instance.
    string project = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message DeleteProjectsProjectInstancesInstanceRequest {
    alt alt = 1;
    string fields = 2;
    // Cloud SQL instance ID. This does not include the project ID.
    string instance = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // Project ID of the project that contains the instance to be deleted.
    string project = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetProjectsProjectInstancesInstanceBackupRunsRequest {
    alt alt = 1;
    string fields = 2;
    // Cloud SQL instance ID. This does not include the project ID.
    string instance = 3;
    string key = 4;
    // Maximum number of backup runs per response.
    int32 maxResults = 5;
    string oauth_token = 6;
    // A previously-returned page token representing part of the larger set of results to view.
    string pageToken = 7;
    boolean prettyPrint = 8;
    // Project ID of the project that contains the instance.
    string project = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message PostProjectsProjectInstancesInstanceBackupRunsRequest {
    alt alt = 1;
    BackupRun body = 2;
    string fields = 3;
    // Cloud SQL instance ID. This does not include the project ID.
    string instance = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // Project ID of the project that contains the instance.
    string project = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetProjectsProjectInstancesInstanceBackupRunsIdRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of this Backup Run.
    string id = 3;
    // Cloud SQL instance ID. This does not include the project ID.
    string instance = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // Project ID of the project that contains the instance.
    string project = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message DeleteProjectsProjectInstancesInstanceBackupRunsIdRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the Backup Run to delete. To find a Backup Run ID, use the list method.
    string id = 3;
    // Cloud SQL instance ID. This does not include the project ID.
    string instance = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // Project ID of the project that contains the instance.
    string project = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostProjectsProjectInstancesInstanceCloneRequest {
    alt alt = 1;
    InstancesCloneRequest body = 2;
    string fields = 3;
    // The ID of the Cloud SQL instance to be cloned (source). This does not include the project ID.
    string instance = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // Project ID of the source as well as the clone Cloud SQL instance.
    string project = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostProjectsProjectInstancesInstanceCreateEphemeralRequest {
    alt alt = 1;
    SslCertsCreateEphemeralRequest body = 2;
    string fields = 3;
    // Cloud SQL instance ID. This does not include the project ID.
    string instance = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // Project ID of the Cloud SQL project.
    string project = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetProjectsProjectInstancesInstanceDatabasesRequest {
    alt alt = 1;
    string fields = 2;
    // Cloud SQL instance ID. This does not include the project ID.
    string instance = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // Project ID of the project for which to list Cloud SQL instances.
    string project = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostProjectsProjectInstancesInstanceDatabasesRequest {
    alt alt = 1;
    Database body = 2;
    string fields = 3;
    // Database instance ID. This does not include the project ID.
    string instance = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // Project ID of the project that contains the instance.
    string project = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetProjectsProjectInstancesInstanceDatabasesDatabaseRequest {
    alt alt = 1;
    // Name of the database in the instance.
    string database = 2;
    string fields = 3;
    // Database instance ID. This does not include the project ID.
    string instance = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // Project ID of the project that contains the instance.
    string project = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PutProjectsProjectInstancesInstanceDatabasesDatabaseRequest {
    alt alt = 1;
    Database body = 2;
    // Name of the database to be updated in the instance.
    string database = 3;
    string fields = 4;
    // Database instance ID. This does not include the project ID.
    string instance = 5;
    string key = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    // Project ID of the project that contains the instance.
    string project = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message DeleteProjectsProjectInstancesInstanceDatabasesDatabaseRequest {
    alt alt = 1;
    // Name of the database to be deleted in the instance.
    string database = 2;
    string fields = 3;
    // Database instance ID. This does not include the project ID.
    string instance = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // Project ID of the project that contains the instance.
    string project = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostProjectsProjectInstancesInstanceExportRequest {
    alt alt = 1;
    InstancesExportRequest body = 2;
    string fields = 3;
    // Cloud SQL instance ID. This does not include the project ID.
    string instance = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // Project ID of the project that contains the instance to be exported.
    string project = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostProjectsProjectInstancesInstanceFailoverRequest {
    alt alt = 1;
    InstancesFailoverRequest body = 2;
    string fields = 3;
    // Cloud SQL instance ID. This does not include the project ID.
    string instance = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // ID of the project that contains the read replica.
    string project = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostProjectsProjectInstancesInstanceImportRequest {
    alt alt = 1;
    InstancesImportRequest body = 2;
    string fields = 3;
    // Cloud SQL instance ID. This does not include the project ID.
    string instance = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // Project ID of the project that contains the instance.
    string project = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostProjectsProjectInstancesInstancePromoteReplicaRequest {
    alt alt = 1;
    string fields = 2;
    // Cloud SQL read replica instance name.
    string instance = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // ID of the project that contains the read replica.
    string project = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostProjectsProjectInstancesInstanceResetSslConfigRequest {
    alt alt = 1;
    string fields = 2;
    // Cloud SQL instance ID. This does not include the project ID.
    string instance = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // Project ID of the project that contains the instance.
    string project = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostProjectsProjectInstancesInstanceRestartRequest {
    alt alt = 1;
    string fields = 2;
    // Cloud SQL instance ID. This does not include the project ID.
    string instance = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // Project ID of the project that contains the instance to be restarted.
    string project = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostProjectsProjectInstancesInstanceRestoreBackupRequest {
    alt alt = 1;
    InstancesRestoreBackupRequest body = 2;
    string fields = 3;
    // Cloud SQL instance ID. This does not include the project ID.
    string instance = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // Project ID of the project that contains the instance.
    string project = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetProjectsProjectInstancesInstanceSslCertsRequest {
    alt alt = 1;
    string fields = 2;
    // Cloud SQL instance ID. This does not include the project ID.
    string instance = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // Project ID of the project for which to list Cloud SQL instances.
    string project = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostProjectsProjectInstancesInstanceSslCertsRequest {
    alt alt = 1;
    SslCertsInsertRequest body = 2;
    string fields = 3;
    // Cloud SQL instance ID. This does not include the project ID.
    string instance = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // Project ID of the project to which the newly created Cloud SQL instances should belong.
    string project = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetProjectsProjectInstancesInstanceSslCertsSha1FingerprintRequest {
    alt alt = 1;
    string fields = 2;
    // Cloud SQL instance ID. This does not include the project ID.
    string instance = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // Project ID of the project that contains the instance.
    string project = 7;
    string quotaUser = 8;
    // Sha1 FingerPrint.
    string sha1Fingerprint = 9;
    string userIp = 10;
}

message DeleteProjectsProjectInstancesInstanceSslCertsSha1FingerprintRequest {
    alt alt = 1;
    string fields = 2;
    // Cloud SQL instance ID. This does not include the project ID.
    string instance = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // Project ID of the project that contains the instance to be deleted.
    string project = 7;
    string quotaUser = 8;
    // Sha1 FingerPrint.
    string sha1Fingerprint = 9;
    string userIp = 10;
}

message PostProjectsProjectInstancesInstanceStartReplicaRequest {
    alt alt = 1;
    string fields = 2;
    // Cloud SQL read replica instance name.
    string instance = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // ID of the project that contains the read replica.
    string project = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostProjectsProjectInstancesInstanceStopReplicaRequest {
    alt alt = 1;
    string fields = 2;
    // Cloud SQL read replica instance name.
    string instance = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // ID of the project that contains the read replica.
    string project = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostProjectsProjectInstancesInstanceTruncateLogRequest {
    alt alt = 1;
    InstancesTruncateLogRequest body = 2;
    string fields = 3;
    // Cloud SQL instance ID. This does not include the project ID.
    string instance = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // Project ID of the Cloud SQL project.
    string project = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetProjectsProjectInstancesInstanceUsersRequest {
    alt alt = 1;
    string fields = 2;
    // Database instance ID. This does not include the project ID.
    string instance = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // Project ID of the project that contains the instance.
    string project = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PutProjectsProjectInstancesInstanceUsersRequest {
    alt alt = 1;
    User body = 2;
    string fields = 3;
    // Host of the user in the instance.
    string host = 4;
    // Database instance ID. This does not include the project ID.
    string instance = 5;
    string key = 6;
    // Name of the user in the instance.
    string name = 7;
    string oauth_token = 8;
    boolean prettyPrint = 9;
    // Project ID of the project that contains the instance.
    string project = 10;
    string quotaUser = 11;
    string userIp = 12;
}

message PostProjectsProjectInstancesInstanceUsersRequest {
    alt alt = 1;
    User body = 2;
    string fields = 3;
    // Database instance ID. This does not include the project ID.
    string instance = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // Project ID of the project that contains the instance.
    string project = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message DeleteProjectsProjectInstancesInstanceUsersRequest {
    alt alt = 1;
    string fields = 2;
    // Host of the user in the instance.
    string host = 3;
    // Database instance ID. This does not include the project ID.
    string instance = 4;
    string key = 5;
    // Name of the user in the instance.
    string name = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    // Project ID of the project that contains the instance.
    string project = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message GetProjectsProjectOperationsRequest {
    alt alt = 1;
    string fields = 2;
    // Cloud SQL instance ID. This does not include the project ID.
    string instance = 3;
    string key = 4;
    // Maximum number of operations per response.
    int32 maxResults = 5;
    string oauth_token = 6;
    // A previously-returned page token representing part of the larger set of results to view.
    string pageToken = 7;
    boolean prettyPrint = 8;
    // Project ID of the project that contains the instance.
    string project = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message GetProjectsProjectOperationsOperationRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    // Instance operation ID.
    string operation = 5;
    boolean prettyPrint = 6;
    // Project ID of the project that contains the instance.
    string project = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetProjectsProjectTiersRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    // Project ID of the project for which to list tiers.
    string project = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message AclEntry {
    // The time when this access control entry expires in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
    string expirationTime = 1;
    // This is always sql#aclEntry.
    string kind = 2;
    // An optional label to identify this entry.
    string name = 3;
    // The whitelisted value for the access control list.
    string value = 4;
}

message BackupConfiguration {
    // Whether binary log is enabled. If backup configuration is disabled, binary log must be disabled as well.
    bool binaryLogEnabled = 1;
    // Whether this configuration is enabled.
    bool enabled = 2;
    // This is always sql#backupConfiguration.
    string kind = 3;
    // Start time for the daily backup configuration in UTC timezone in the 24 hour format - HH:MM.
    string startTime = 4;
}

message BackupRun {
    // The description of this run, only applicable to on-demand backups.
    string description = 1;
    // The time the backup operation completed in UTC timezone in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
    string endTime = 2;
    // The time the run was enqueued in UTC timezone in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
    string enqueuedTime = 3;
    // Information about why the backup operation failed. This is only present if the run has the FAILED status.
    OperationError error = 4;
    // A unique identifier for this backup run. Note that this is unique only within the scope of a particular Cloud SQL instance.
    string id = 5;
    // Name of the database instance.
    string instance = 6;
    // This is always sql#backupRun.
    string kind = 7;
    // The URI of this resource.
    string selfLink = 8;
    // The time the backup operation actually started in UTC timezone in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
    string startTime = 9;
    // The status of this run.
    string status = 10;
    // The type of this run; can be either "AUTOMATED" or "ON_DEMAND".
    string type = 11;
    // The start time of the backup window during which this the backup was attempted in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
    string windowStartTime = 12;
}

message BackupRunsListResponse {
    // A list of backup runs in reverse chronological order of the enqueued time.
    repeated BackupRun items = 1;
    // This is always sql#backupRunsList.
    string kind = 2;
    // The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.
    string nextPageToken = 3;
}

message BinLogCoordinates {
    // Name of the binary log file for a Cloud SQL instance.
    string binLogFileName = 1;
    // Position (offset) within the binary log file.
    string binLogPosition = 2;
    // This is always sql#binLogCoordinates.
    string kind = 3;
}

message CloneContext {
    // Binary log coordinates, if specified, indentify the the position up to which the source instance should be cloned. If not specified, the source instance is cloned up to the most recent binary log coordintes.
    BinLogCoordinates binLogCoordinates = 1;
    // Name of the Cloud SQL instance to be created as a clone.
    string destinationInstanceName = 2;
    // This is always sql#cloneContext.
    string kind = 3;
}

message Database {
    // The MySQL charset value.
    string charset = 1;
    // The MySQL collation value.
    string collation = 2;
    // HTTP 1.1 Entity tag for the resource.
    string etag = 3;
    // The name of the Cloud SQL instance. This does not include the project ID.
    string instance = 4;
    // This is always sql#database.
    string kind = 5;
    // The name of the database in the Cloud SQL instance. This does not include the project ID or instance name.
    string name = 6;
    // The project ID of the project containing the Cloud SQL database. The Google apps domain is prefixed if applicable.
    string project = 7;
    // The URI of this resource.
    string selfLink = 8;
}

message DatabaseFlags {
    // The name of the flag. These flags are passed at instance startup, so include both MySQL server options and MySQL system variables. Flags should be specified with underscores, not hyphens. For more information, see Configuring MySQL Flags in the Google Cloud SQL documentation, as well as the official MySQL documentation for server options and system variables.
    string name = 1;
    // The value of the flag. Booleans should be set to on for true and off for false. This field must be omitted if the flag doesn't take a value.
    string value = 2;
}

message DatabaseInstance {
    // FIRST_GEN: Basic Cloud SQL instance that runs in a Google-managed container.
    // SECOND_GEN: A newer Cloud SQL backend that runs in a Compute Engine VM.
    // EXTERNAL: A MySQL server that is not managed by Google.
    string backendType = 1;
    // Connection name of the Cloud SQL instance used in connection strings.
    string connectionName = 2;
    // The current disk usage of the instance in bytes. This property has been deprecated. Users should use the "cloudsql.googleapis.com/database/disk/bytes_used" metric in Cloud Monitoring API instead. Please see https://groups.google.com/d/msg/google-cloud-sql-announce/I_7-F9EBhT0/BtvFtdFeAgAJ for details.
    string currentDiskSize = 3;
    // The database engine type and version. The databaseVersion field can not be changed after instance creation. MySQL Second Generation instances: MYSQL_5_7 (default) or MYSQL_5_6. PostgreSQL instances: POSTGRES_9_6 MySQL First Generation instances: MYSQL_5_6 (default) or MYSQL_5_5
    string databaseVersion = 4;
    // HTTP 1.1 Entity tag for the resource.
    string etag = 5;
    // The name and status of the failover replica. This property is applicable only to Second Generation instances.
    message FailoverReplica {
            // The availability status of the failover replica. A false status indicates that the failover replica is out of sync. The master can only failover to the falover replica when the status is true.
    bool available = 1;
            // The name of the failover replica. If specified at instance creation, a failover replica is created for the instance. The name doesn't include the project ID. This property is applicable only to Second Generation instances.
    string name = 2;
    }
    FailoverReplica failoverReplica = 6;
    // The GCE zone that the instance is serving from. In case when the instance is failed over to standby zone, this value may be different with what user specified in the settings.
    string gceZone = 7;
    // The instance type. This can be one of the following.
    // CLOUD_SQL_INSTANCE: A Cloud SQL instance that is not replicating from a master.
    // ON_PREMISES_INSTANCE: An instance running on the customer's premises.
    // READ_REPLICA_INSTANCE: A Cloud SQL instance configured as a read-replica.
    string instanceType = 8;
    // The assigned IP addresses for the instance.
    repeated IpMapping ipAddresses = 9;
    // The IPv6 address assigned to the instance. This property is applicable only to First Generation instances.
    string ipv6Address = 10;
    // This is always sql#instance.
    string kind = 11;
    // The name of the instance which will act as master in the replication setup.
    string masterInstanceName = 12;
    // The maximum disk size of the instance in bytes.
    string maxDiskSize = 13;
    // Name of the Cloud SQL instance. This does not include the project ID.
    string name = 14;
    // Configuration specific to on-premises instances.
    OnPremisesConfiguration onPremisesConfiguration = 15;
    // The project ID of the project containing the Cloud SQL instance. The Google apps domain is prefixed if applicable.
    string project = 16;
    // The geographical region. Can be us-central (FIRST_GEN instances only), us-central1 (SECOND_GEN instances only), asia-east1 or europe-west1. Defaults to us-central or us-central1 depending on the instance type (First Generation or Second Generation). The region can not be changed after instance creation.
    string region = 17;
    // Configuration specific to read-replicas replicating from on-premises masters.
    ReplicaConfiguration replicaConfiguration = 18;
    // The replicas of the instance.
    repeated string replicaNames = 19;
    // The URI of this resource.
    string selfLink = 20;
    // SSL configuration.
    SslCert serverCaCert = 21;
    // The service account email address assigned to the instance. This property is applicable only to Second Generation instances.
    string serviceAccountEmailAddress = 22;
    // The user settings.
    Settings settings = 23;
    // The current serving state of the Cloud SQL instance. This can be one of the following.
    // RUNNABLE: The instance is running, or is ready to run when accessed.
    // SUSPENDED: The instance is not available, for example due to problems with billing.
    // PENDING_CREATE: The instance is being created.
    // MAINTENANCE: The instance is down for maintenance.
    // FAILED: The instance creation failed.
    // UNKNOWN_STATE: The state of the instance is unknown.
    string state = 24;
    // If the instance state is SUSPENDED, the reason for the suspension.
    repeated string suspensionReason = 25;
}

message DatabasesListResponse {
    // List of database resources in the instance.
    repeated Database items = 1;
    // This is always sql#databasesList.
    string kind = 2;
}

message ExportContext {
    // Options for exporting data as CSV.
    message CsvExportOptions {
            // The select query used to extract the data.
    string selectQuery = 1;
    }
    CsvExportOptions csvExportOptions = 1;
    // Databases (for example, guestbook) from which the export is made. If fileType is SQL and no database is specified, all databases are exported. If fileType is CSV, you can optionally specify at most one database to export. If csvExportOptions.selectQuery also specifies the database, this field will be ignored.
    repeated string databases = 2;
    // The file type for the specified uri.
    // SQL: The file contains SQL statements.
    // CSV: The file contains CSV data.
    string fileType = 3;
    // This is always sql#exportContext.
    string kind = 4;
    // Options for exporting data as SQL statements.
    message SqlExportOptions {
            // Export only schemas.
    bool schemaOnly = 1;
            // Tables to export, or that were exported, from the specified database. If you specify tables, specify one and only one database.
    repeated string tables = 2;
    }
    SqlExportOptions sqlExportOptions = 5;
    // The path to the file in Google Cloud Storage where the export will be stored. The URI is in the form gs://bucketName/fileName. If the file already exists, the operation fails. If fileType is SQL and the filename ends with .gz, the contents are compressed.
    string uri = 6;
}

message FailoverContext {
    // This is always sql#failoverContext.
    string kind = 1;
    // The current settings version of this instance. Request will be rejected if this version doesn't match the current settings version.
    string settingsVersion = 2;
}

message Flag {
    // For STRING flags, a list of strings that the value can be set to.
    repeated string allowedStringValues = 1;
    // The database version this flag applies to. Can be MYSQL_5_5, MYSQL_5_6, or MYSQL_5_7. MYSQL_5_7 is applicable only to Second Generation instances.
    repeated string appliesTo = 2;
    // This is always sql#flag.
    string kind = 3;
    // For INTEGER flags, the maximum allowed value.
    string maxValue = 4;
    // For INTEGER flags, the minimum allowed value.
    string minValue = 5;
    // This is the name of the flag. Flag names always use underscores, not hyphens, e.g. max_allowed_packet
    string name = 6;
    // Indicates whether changing this flag will trigger a database restart. Only applicable to Second Generation instances.
    bool requiresRestart = 7;
    // The type of the flag. Flags are typed to being BOOLEAN, STRING, INTEGER or NONE. NONE is used for flags which do not take a value, such as skip_grant_tables.
    string type = 8;
}

message FlagsListResponse {
    // List of flags.
    repeated Flag items = 1;
    // This is always sql#flagsList.
    string kind = 2;
}

message ImportContext {
    // Options for importing data as CSV.
    message CsvImportOptions {
            // The columns to which CSV data is imported. If not specified, all columns of the database table are loaded with CSV data.
    repeated string columns = 1;
            // The table to which CSV data is imported.
    string table = 2;
    }
    CsvImportOptions csvImportOptions = 1;
    // The database (for example, guestbook) to which the import is made. If fileType is SQL and no database is specified, it is assumed that the database is specified in the file to be imported. If fileType is CSV, it must be specified.
    string database = 2;
    // The file type for the specified uri.
    // SQL: The file contains SQL statements.
    // CSV: The file contains CSV data.
    string fileType = 3;
    // The PostgreSQL user for this import operation. Defaults to cloudsqlsuperuser. Used only for PostgreSQL instances.
    string importUser = 4;
    // This is always sql#importContext.
    string kind = 5;
    // A path to the file in Google Cloud Storage from which the import is made. The URI is in the form gs://bucketName/fileName. Compressed gzip files (.gz) are supported when fileType is SQL.
    string uri = 6;
}

message InstancesCloneRequest {
    // Contains details about the clone operation.
    CloneContext cloneContext = 1;
}

message InstancesExportRequest {
    // Contains details about the export operation.
    ExportContext exportContext = 1;
}

message InstancesFailoverRequest {
    // Failover Context.
    FailoverContext failoverContext = 1;
}

message InstancesImportRequest {
    // Contains details about the import operation.
    ImportContext importContext = 1;
}

message InstancesListResponse {
    // List of database instance resources.
    repeated DatabaseInstance items = 1;
    // This is always sql#instancesList.
    string kind = 2;
    // The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.
    string nextPageToken = 3;
}

message InstancesRestoreBackupRequest {
    // Parameters required to perform the restore backup operation.
    RestoreBackupContext restoreBackupContext = 1;
}

message InstancesTruncateLogRequest {
    // Contains details about the truncate log operation.
    TruncateLogContext truncateLogContext = 1;
}

message IpConfiguration {
    // The list of external networks that are allowed to connect to the instance using the IP. In CIDR notation, also known as 'slash' notation (e.g. 192.168.100.0/24).
    repeated AclEntry authorizedNetworks = 1;
    // Whether the instance should be assigned an IP address or not.
    bool ipv4Enabled = 2;
    // Whether SSL connections over IP should be enforced or not.
    bool requireSsl = 3;
}

message IpMapping {
    // The IP address assigned.
    string ipAddress = 1;
    // The due time for this IP to be retired in RFC 3339 format, for example 2012-11-15T16:19:00.094Z. This field is only available when the IP is scheduled to be retired.
    string timeToRetire = 2;
    // The type of this IP address. A PRIMARY address is an address that can accept incoming connections. An OUTGOING address is the source address of connections originating from the instance, if supported.
    string type = 3;
}

message LocationPreference {
    // The AppEngine application to follow, it must be in the same region as the Cloud SQL instance.
    string followGaeApplication = 1;
    // This is always sql#locationPreference.
    string kind = 2;
    // The preferred Compute Engine zone (e.g. us-centra1-a, us-central1-b, etc.).
    string zone = 3;
}

message MaintenanceWindow {
    // day of week (1-7), starting on Monday.
    int32 day = 1;
    // hour of day - 0 to 23.
    int32 hour = 2;
    // This is always sql#maintenanceWindow.
    string kind = 3;
    string updateTrack = 4;
}

message MySqlReplicaConfiguration {
    // PEM representation of the trusted CA's x509 certificate.
    string caCertificate = 1;
    // PEM representation of the slave's x509 certificate.
    string clientCertificate = 2;
    // PEM representation of the slave's private key. The corresponsing public key is encoded in the client's certificate.
    string clientKey = 3;
    // Seconds to wait between connect retries. MySQL's default is 60 seconds.
    int32 connectRetryInterval = 4;
    // Path to a SQL dump file in Google Cloud Storage from which the slave instance is to be created. The URI is in the form gs://bucketName/fileName. Compressed gzip files (.gz) are also supported. Dumps should have the binlog co-ordinates from which replication should begin. This can be accomplished by setting --master-data to 1 when using mysqldump.
    string dumpFilePath = 5;
    // This is always sql#mysqlReplicaConfiguration.
    string kind = 6;
    // Interval in milliseconds between replication heartbeats.
    string masterHeartbeatPeriod = 7;
    // The password for the replication connection.
    string password = 8;
    // A list of permissible ciphers to use for SSL encryption.
    string sslCipher = 9;
    // The username for the replication connection.
    string username = 10;
    // Whether or not to check the master's Common Name value in the certificate that it sends during the SSL handshake.
    bool verifyServerCertificate = 11;
}

message OnPremisesConfiguration {
    // The host and port of the on-premises instance in host:port format
    string hostPort = 1;
    // This is always sql#onPremisesConfiguration.
    string kind = 2;
}

message Operation {
    // The time this operation finished in UTC timezone in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
    string endTime = 1;
    // If errors occurred during processing of this operation, this field will be populated.
    OperationErrors error = 2;
    // The context for export operation, if applicable.
    ExportContext exportContext = 3;
    // The context for import operation, if applicable.
    ImportContext importContext = 4;
    // The time this operation was enqueued in UTC timezone in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
    string insertTime = 5;
    // This is always sql#operation.
    string kind = 6;
    // An identifier that uniquely identifies the operation. You can use this identifier to retrieve the Operations resource that has information about the operation.
    string name = 7;
    // The type of the operation. Valid values are CREATE, DELETE, UPDATE, RESTART, IMPORT, EXPORT, BACKUP_VOLUME, RESTORE_VOLUME, CREATE_USER, DELETE_USER, CREATE_DATABASE, DELETE_DATABASE .
    string operationType = 8;
    // The URI of this resource.
    string selfLink = 9;
    // The time this operation actually started in UTC timezone in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
    string startTime = 10;
    // The status of an operation. Valid values are PENDING, RUNNING, DONE, UNKNOWN.
    string status = 11;
    // Name of the database instance related to this operation.
    string targetId = 12;
    string targetLink = 13;
    // The project ID of the target instance related to this operation.
    string targetProject = 14;
    // The email address of the user who initiated this operation.
    string user = 15;
}

message OperationError {
    // Identifies the specific error that occurred.
    string code = 1;
    // This is always sql#operationError.
    string kind = 2;
    // Additional information about the error encountered.
    string message = 3;
}

message OperationErrors {
    // The list of errors encountered while processing this operation.
    repeated OperationError errors = 1;
    // This is always sql#operationErrors.
    string kind = 2;
}

message OperationsListResponse {
    // List of operation resources.
    repeated Operation items = 1;
    // This is always sql#operationsList.
    string kind = 2;
    // The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.
    string nextPageToken = 3;
}

message ReplicaConfiguration {
    // Specifies if the replica is the failover target. If the field is set to true the replica will be designated as a failover replica. In case the master instance fails, the replica instance will be promoted as the new master instance.
    // Only one replica can be specified as failover target, and the replica has to be in different zone with the master instance.
    bool failoverTarget = 1;
    // This is always sql#replicaConfiguration.
    string kind = 2;
    // MySQL specific configuration when replicating from a MySQL on-premises master. Replication configuration information such as the username, password, certificates, and keys are not stored in the instance metadata. The configuration information is used only to set up the replication connection and is stored by MySQL in a file named master.info in the data directory.
    MySqlReplicaConfiguration mysqlReplicaConfiguration = 3;
}

message RestoreBackupContext {
    // The ID of the backup run to restore from.
    string backupRunId = 1;
    // The ID of the instance that the backup was taken from.
    string instanceId = 2;
    // This is always sql#restoreBackupContext.
    string kind = 3;
}

message Settings {
    // The activation policy specifies when the instance is activated; it is applicable only when the instance state is RUNNABLE. The activation policy cannot be updated together with other settings for Second Generation instances. Valid values:
    // ALWAYS: The instance is on; it is not deactivated by inactivity.
    // NEVER: The instance is off; it is not activated, even if a connection request arrives.
    // ON_DEMAND: The instance responds to incoming requests, and turns itself off when not in use. Instances with PER_USE pricing turn off after 15 minutes of inactivity. Instances with PER_PACKAGE pricing turn off after 12 hours of inactivity.
    string activationPolicy = 1;
    // The App Engine app IDs that can access this instance. This property is only applicable to First Generation instances.
    repeated string authorizedGaeApplications = 2;
    // Reserved for future use.
    string availabilityType = 3;
    // The daily backup configuration for the instance.
    BackupConfiguration backupConfiguration = 4;
    // Configuration specific to read replica instances. Indicates whether database flags for crash-safe replication are enabled. This property is only applicable to First Generation instances.
    bool crashSafeReplicationEnabled = 5;
    // The size of data disk, in GB. The data disk size minimum is 10GB. Applies only to Second Generation instances.
    string dataDiskSizeGb = 6;
    // The type of data disk. Only supported for Second Generation instances. The default type is PD_SSD. Applies only to Second Generation instances.
    string dataDiskType = 7;
    // The database flags passed to the instance at startup.
    repeated DatabaseFlags databaseFlags = 8;
    // Configuration specific to read replica instances. Indicates whether replication is enabled or not.
    bool databaseReplicationEnabled = 9;
    // The settings for IP Management. This allows to enable or disable the instance IP and manage which external networks can connect to the instance. The IPv4 address cannot be disabled for Second Generation instances.
    IpConfiguration ipConfiguration = 10;
    // This is always sql#settings.
    string kind = 11;
    // The location preference settings. This allows the instance to be located as near as possible to either an App Engine app or GCE zone for better performance. App Engine co-location is only applicable to First Generation instances.
    LocationPreference locationPreference = 12;
    // The maintenance window for this instance. This specifies when the instance may be restarted for maintenance purposes. Applies only to Second Generation instances.
    MaintenanceWindow maintenanceWindow = 13;
    // The pricing plan for this instance. This can be either PER_USE or PACKAGE. Only PER_USE is supported for Second Generation instances.
    string pricingPlan = 14;
    // The type of replication this instance uses. This can be either ASYNCHRONOUS or SYNCHRONOUS. This property is only applicable to First Generation instances.
    string replicationType = 15;
    // The version of instance settings. This is a required field for update method to make sure concurrent updates are handled properly. During update, use the most recent settingsVersion value for this instance and do not try to update this value.
    string settingsVersion = 16;
    // Configuration to increase storage size automatically. The default value is true. Applies only to Second Generation instances.
    bool storageAutoResize = 17;
    // The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit. Applies only to Second Generation instances.
    string storageAutoResizeLimit = 18;
    // The tier of service for this instance, for example D1, D2. For more information, see pricing.
    string tier = 19;
    // User-provided labels, represented as a dictionary where each label is a single key value pair.
    map<string, string> userLabels = 20;
}

message SslCert {
    // PEM representation.
    string cert = 1;
    // Serial number, as extracted from the certificate.
    string certSerialNumber = 2;
    // User supplied name. Constrained to [a-zA-Z.-_ ]+.
    string commonName = 3;
    // The time when the certificate was created in RFC 3339 format, for example 2012-11-15T16:19:00.094Z
    string createTime = 4;
    // The time when the certificate expires in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
    string expirationTime = 5;
    // Name of the database instance.
    string instance = 6;
    // This is always sql#sslCert.
    string kind = 7;
    // The URI of this resource.
    string selfLink = 8;
    // Sha1 Fingerprint.
    string sha1Fingerprint = 9;
}

message SslCertDetail {
    // The public information about the cert.
    SslCert certInfo = 1;
    // The private key for the client cert, in pem format. Keep private in order to protect your security.
    string certPrivateKey = 2;
}

message SslCertsCreateEphemeralRequest {
    // PEM encoded public key to include in the signed certificate.
    string public_key = 1;
}

message SslCertsInsertRequest {
    // User supplied name. Must be a distinct name from the other certificates for this instance. New certificates will not be usable until the instance is restarted.
    string commonName = 1;
}

message SslCertsInsertResponse {
    // The new client certificate and private key. The new certificate will not work until the instance is restarted for First Generation instances.
    SslCertDetail clientCert = 1;
    // This is always sql#sslCertsInsert.
    string kind = 2;
    // The operation to track the ssl certs insert request.
    Operation operation = 3;
    // The server Certificate Authority's certificate. If this is missing you can force a new one to be generated by calling resetSslConfig method on instances resource.
    SslCert serverCaCert = 4;
}

message SslCertsListResponse {
    // List of client certificates for the instance.
    repeated SslCert items = 1;
    // This is always sql#sslCertsList.
    string kind = 2;
}

message Tier {
    // The maximum disk size of this tier in bytes.
    string DiskQuota = 1;
    // The maximum RAM usage of this tier in bytes.
    string RAM = 2;
    // This is always sql#tier.
    string kind = 3;
    // The applicable regions for this tier.
    repeated string region = 4;
    // An identifier for the service tier, for example D1, D2 etc. For related information, see Pricing.
    string tier = 5;
}

message TiersListResponse {
    // List of tiers.
    repeated Tier items = 1;
    // This is always sql#tiersList.
    string kind = 2;
}

message TruncateLogContext {
    // This is always sql#truncateLogContext.
    string kind = 1;
    // The type of log to truncate. Valid values are MYSQL_GENERAL_TABLE and MYSQL_SLOW_TABLE.
    string logType = 2;
}

message User {
    // HTTP 1.1 Entity tag for the resource.
    string etag = 1;
    // The host name from which the user can connect. For insert operations, host defaults to an empty string. For update operations, host is specified as part of the request URL. The host name cannot be updated after insertion.
    string host = 2;
    // The name of the Cloud SQL instance. This does not include the project ID. Can be omitted for update since it is already specified on the URL.
    string instance = 3;
    // This is always sql#user.
    string kind = 4;
    // The name of the user in the Cloud SQL instance. Can be omitted for update since it is already specified on the URL.
    string name = 5;
    // The password for the user.
    string password = 6;
    // The project ID of the project containing the Cloud SQL database. The Google apps domain is prefixed if applicable. Can be omitted for update since it is already specified on the URL.
    string project = 7;
}

message UsersListResponse {
    // List of user resources in the instance.
    repeated User items = 1;
    // This is always sql#usersList.
    string kind = 2;
    // An identifier that uniquely identifies the operation. You can use this identifier to retrieve the Operations resource that has information about the operation.
    string nextPageToken = 3;
}

enum Alt {
    JSON = 0;
}

service CloudSQLAdministrationService {
    // List all available database flags for Google Cloud SQL instances.
    rpc GetFlags(GetFlagsRequest) returns (FlagsListResponse) {
      option (google.api.http) = {
        get: "/sql/v1beta4/flags"
      };
    }
    // Lists instances under a given project in the alphabetical order of the instance name.
    rpc GetProjectsProjectInstances(GetProjectsProjectInstancesRequest) returns (InstancesListResponse) {
      option (google.api.http) = {
        get: "/sql/v1beta4/projects/{project}/instances"
      };
    }
    // Creates a new Cloud SQL instance.
    rpc PostProjectsProjectInstances(PostProjectsProjectInstancesRequest) returns (Operation) {
      option (google.api.http) = {
        post: "/sql/v1beta4/projects/{project}/instances"
        body: "body"
      };
    }
    // Retrieves a resource containing information about a Cloud SQL instance.
    rpc GetProjectsProjectInstancesInstance(GetProjectsProjectInstancesInstanceRequest) returns (DatabaseInstance) {
      option (google.api.http) = {
        get: "/sql/v1beta4/projects/{project}/instances/{instance}"
      };
    }
    // Updates settings of a Cloud SQL instance. Caution: This is not a partial update, so you must include values for all the settings that you want to retain. For partial updates, use patch.
    rpc PutProjectsProjectInstancesInstance(PutProjectsProjectInstancesInstanceRequest) returns (Operation) {
      option (google.api.http) = {
        put: "/sql/v1beta4/projects/{project}/instances/{instance}"
        body: "body"
      };
    }
    // Deletes a Cloud SQL instance.
    rpc DeleteProjectsProjectInstancesInstance(DeleteProjectsProjectInstancesInstanceRequest) returns (Operation) {
      option (google.api.http) = {
        delete: "/sql/v1beta4/projects/{project}/instances/{instance}"
      };
    }
    // Lists all backup runs associated with a given instance and configuration in the reverse chronological order of the enqueued time.
    rpc GetProjectsProjectInstancesInstanceBackupRuns(GetProjectsProjectInstancesInstanceBackupRunsRequest) returns (BackupRunsListResponse) {
      option (google.api.http) = {
        get: "/sql/v1beta4/projects/{project}/instances/{instance}/backupRuns"
      };
    }
    // Creates a new backup run on demand. This method is applicable only to Second Generation instances.
    rpc PostProjectsProjectInstancesInstanceBackupRuns(PostProjectsProjectInstancesInstanceBackupRunsRequest) returns (Operation) {
      option (google.api.http) = {
        post: "/sql/v1beta4/projects/{project}/instances/{instance}/backupRuns"
        body: "body"
      };
    }
    // Retrieves a resource containing information about a backup run.
    rpc GetProjectsProjectInstancesInstanceBackupRunsId(GetProjectsProjectInstancesInstanceBackupRunsIdRequest) returns (BackupRun) {
      option (google.api.http) = {
        get: "/sql/v1beta4/projects/{project}/instances/{instance}/backupRuns/{id}"
      };
    }
    // Deletes the backup taken by a backup run.
    rpc DeleteProjectsProjectInstancesInstanceBackupRunsId(DeleteProjectsProjectInstancesInstanceBackupRunsIdRequest) returns (Operation) {
      option (google.api.http) = {
        delete: "/sql/v1beta4/projects/{project}/instances/{instance}/backupRuns/{id}"
      };
    }
    // Creates a Cloud SQL instance as a clone of the source instance. The API is not ready for Second Generation instances yet.
    rpc PostProjectsProjectInstancesInstanceClone(PostProjectsProjectInstancesInstanceCloneRequest) returns (Operation) {
      option (google.api.http) = {
        post: "/sql/v1beta4/projects/{project}/instances/{instance}/clone"
        body: "body"
      };
    }
    // Generates a short-lived X509 certificate containing the provided public key and signed by a private key specific to the target instance. Users may use the certificate to authenticate as themselves when connecting to the database.
    rpc PostProjectsProjectInstancesInstanceCreateEphemeral(PostProjectsProjectInstancesInstanceCreateEphemeralRequest) returns (SslCert) {
      option (google.api.http) = {
        post: "/sql/v1beta4/projects/{project}/instances/{instance}/createEphemeral"
        body: "body"
      };
    }
    // Lists databases in the specified Cloud SQL instance.
    rpc GetProjectsProjectInstancesInstanceDatabases(GetProjectsProjectInstancesInstanceDatabasesRequest) returns (DatabasesListResponse) {
      option (google.api.http) = {
        get: "/sql/v1beta4/projects/{project}/instances/{instance}/databases"
      };
    }
    // Inserts a resource containing information about a database inside a Cloud SQL instance.
    rpc PostProjectsProjectInstancesInstanceDatabases(PostProjectsProjectInstancesInstanceDatabasesRequest) returns (Operation) {
      option (google.api.http) = {
        post: "/sql/v1beta4/projects/{project}/instances/{instance}/databases"
        body: "body"
      };
    }
    // Retrieves a resource containing information about a database inside a Cloud SQL instance.
    rpc GetProjectsProjectInstancesInstanceDatabasesDatabase(GetProjectsProjectInstancesInstanceDatabasesDatabaseRequest) returns (Database) {
      option (google.api.http) = {
        get: "/sql/v1beta4/projects/{project}/instances/{instance}/databases/{database}"
      };
    }
    // Updates a resource containing information about a database inside a Cloud SQL instance.
    rpc PutProjectsProjectInstancesInstanceDatabasesDatabase(PutProjectsProjectInstancesInstanceDatabasesDatabaseRequest) returns (Operation) {
      option (google.api.http) = {
        put: "/sql/v1beta4/projects/{project}/instances/{instance}/databases/{database}"
        body: "body"
      };
    }
    // Deletes a database from a Cloud SQL instance.
    rpc DeleteProjectsProjectInstancesInstanceDatabasesDatabase(DeleteProjectsProjectInstancesInstanceDatabasesDatabaseRequest) returns (Operation) {
      option (google.api.http) = {
        delete: "/sql/v1beta4/projects/{project}/instances/{instance}/databases/{database}"
      };
    }
    // Exports data from a Cloud SQL instance to a Google Cloud Storage bucket as a MySQL dump file.
    rpc PostProjectsProjectInstancesInstanceExport(PostProjectsProjectInstancesInstanceExportRequest) returns (Operation) {
      option (google.api.http) = {
        post: "/sql/v1beta4/projects/{project}/instances/{instance}/export"
        body: "body"
      };
    }
    // Failover the instance to its failover replica instance.
    rpc PostProjectsProjectInstancesInstanceFailover(PostProjectsProjectInstancesInstanceFailoverRequest) returns (Operation) {
      option (google.api.http) = {
        post: "/sql/v1beta4/projects/{project}/instances/{instance}/failover"
        body: "body"
      };
    }
    // Imports data into a Cloud SQL instance from a MySQL dump file in Google Cloud Storage.
    rpc PostProjectsProjectInstancesInstanceImport(PostProjectsProjectInstancesInstanceImportRequest) returns (Operation) {
      option (google.api.http) = {
        post: "/sql/v1beta4/projects/{project}/instances/{instance}/import"
        body: "body"
      };
    }
    // Promotes the read replica instance to be a stand-alone Cloud SQL instance.
    rpc PostProjectsProjectInstancesInstancePromoteReplica(PostProjectsProjectInstancesInstancePromoteReplicaRequest) returns (Operation) {
      option (google.api.http) = {
        post: "/sql/v1beta4/projects/{project}/instances/{instance}/promoteReplica"
      };
    }
    // Deletes all client certificates and generates a new server SSL certificate for the instance. The changes will not take effect until the instance is restarted. Existing instances without a server certificate will need to call this once to set a server certificate.
    rpc PostProjectsProjectInstancesInstanceResetSslConfig(PostProjectsProjectInstancesInstanceResetSslConfigRequest) returns (Operation) {
      option (google.api.http) = {
        post: "/sql/v1beta4/projects/{project}/instances/{instance}/resetSslConfig"
      };
    }
    // Restarts a Cloud SQL instance.
    rpc PostProjectsProjectInstancesInstanceRestart(PostProjectsProjectInstancesInstanceRestartRequest) returns (Operation) {
      option (google.api.http) = {
        post: "/sql/v1beta4/projects/{project}/instances/{instance}/restart"
      };
    }
    // Restores a backup of a Cloud SQL instance.
    rpc PostProjectsProjectInstancesInstanceRestoreBackup(PostProjectsProjectInstancesInstanceRestoreBackupRequest) returns (Operation) {
      option (google.api.http) = {
        post: "/sql/v1beta4/projects/{project}/instances/{instance}/restoreBackup"
        body: "body"
      };
    }
    // Lists all of the current SSL certificates for the instance.
    rpc GetProjectsProjectInstancesInstanceSslCerts(GetProjectsProjectInstancesInstanceSslCertsRequest) returns (SslCertsListResponse) {
      option (google.api.http) = {
        get: "/sql/v1beta4/projects/{project}/instances/{instance}/sslCerts"
      };
    }
    // Creates an SSL certificate and returns it along with the private key and server certificate authority. The new certificate will not be usable until the instance is restarted.
    rpc PostProjectsProjectInstancesInstanceSslCerts(PostProjectsProjectInstancesInstanceSslCertsRequest) returns (SslCertsInsertResponse) {
      option (google.api.http) = {
        post: "/sql/v1beta4/projects/{project}/instances/{instance}/sslCerts"
        body: "body"
      };
    }
    // Retrieves a particular SSL certificate. Does not include the private key (required for usage). The private key must be saved from the response to initial creation.
    rpc GetProjectsProjectInstancesInstanceSslCertsSha1Fingerprint(GetProjectsProjectInstancesInstanceSslCertsSha1FingerprintRequest) returns (SslCert) {
      option (google.api.http) = {
        get: "/sql/v1beta4/projects/{project}/instances/{instance}/sslCerts/{sha1Fingerprint}"
      };
    }
    // Deletes the SSL certificate. The change will not take effect until the instance is restarted.
    rpc DeleteProjectsProjectInstancesInstanceSslCertsSha1Fingerprint(DeleteProjectsProjectInstancesInstanceSslCertsSha1FingerprintRequest) returns (Operation) {
      option (google.api.http) = {
        delete: "/sql/v1beta4/projects/{project}/instances/{instance}/sslCerts/{sha1Fingerprint}"
      };
    }
    // Starts the replication in the read replica instance.
    rpc PostProjectsProjectInstancesInstanceStartReplica(PostProjectsProjectInstancesInstanceStartReplicaRequest) returns (Operation) {
      option (google.api.http) = {
        post: "/sql/v1beta4/projects/{project}/instances/{instance}/startReplica"
      };
    }
    // Stops the replication in the read replica instance.
    rpc PostProjectsProjectInstancesInstanceStopReplica(PostProjectsProjectInstancesInstanceStopReplicaRequest) returns (Operation) {
      option (google.api.http) = {
        post: "/sql/v1beta4/projects/{project}/instances/{instance}/stopReplica"
      };
    }
    // Truncate MySQL general and slow query log tables
    rpc PostProjectsProjectInstancesInstanceTruncateLog(PostProjectsProjectInstancesInstanceTruncateLogRequest) returns (Operation) {
      option (google.api.http) = {
        post: "/sql/v1beta4/projects/{project}/instances/{instance}/truncateLog"
        body: "body"
      };
    }
    // Lists users in the specified Cloud SQL instance.
    rpc GetProjectsProjectInstancesInstanceUsers(GetProjectsProjectInstancesInstanceUsersRequest) returns (UsersListResponse) {
      option (google.api.http) = {
        get: "/sql/v1beta4/projects/{project}/instances/{instance}/users"
      };
    }
    // Updates an existing user in a Cloud SQL instance.
    rpc PutProjectsProjectInstancesInstanceUsers(PutProjectsProjectInstancesInstanceUsersRequest) returns (Operation) {
      option (google.api.http) = {
        put: "/sql/v1beta4/projects/{project}/instances/{instance}/users"
        body: "body"
      };
    }
    // Creates a new user in a Cloud SQL instance.
    rpc PostProjectsProjectInstancesInstanceUsers(PostProjectsProjectInstancesInstanceUsersRequest) returns (Operation) {
      option (google.api.http) = {
        post: "/sql/v1beta4/projects/{project}/instances/{instance}/users"
        body: "body"
      };
    }
    // Deletes a user from a Cloud SQL instance.
    rpc DeleteProjectsProjectInstancesInstanceUsers(DeleteProjectsProjectInstancesInstanceUsersRequest) returns (Operation) {
      option (google.api.http) = {
        delete: "/sql/v1beta4/projects/{project}/instances/{instance}/users"
      };
    }
    // Lists all instance operations that have been performed on the given Cloud SQL instance in the reverse chronological order of the start time.
    rpc GetProjectsProjectOperations(GetProjectsProjectOperationsRequest) returns (OperationsListResponse) {
      option (google.api.http) = {
        get: "/sql/v1beta4/projects/{project}/operations"
      };
    }
    // Retrieves an instance operation that has been performed on an instance.
    rpc GetProjectsProjectOperationsOperation(GetProjectsProjectOperationsOperationRequest) returns (Operation) {
      option (google.api.http) = {
        get: "/sql/v1beta4/projects/{project}/operations/{operation}"
      };
    }
    // Lists all available service tiers for Google Cloud SQL, for example D1, D2. For related information, see Pricing.
    rpc GetProjectsProjectTiers(GetProjectsProjectTiersRequest) returns (TiersListResponse) {
      option (google.api.http) = {
        get: "/sql/v1beta4/projects/{project}/tiers"
      };
    }
}

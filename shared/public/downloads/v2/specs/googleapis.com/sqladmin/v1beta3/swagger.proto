syntax = "proto3";

import "google/api/annotations.proto";

package cloudsqladministration;

message GetFlagsRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    string userIp = 7;
}

message GetProjectsProjectInstancesRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // The maximum number of results to return per response.
    int32 maxResults = 4;
    string oauth_token = 5;
    // A previously-returned page token representing part of the larger set of results to view.
    string pageToken = 6;
    boolean prettyPrint = 7;
    // Project ID of the project for which to list Cloud SQL instances.
    string project = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostProjectsProjectInstancesRequest {
    alt alt = 1;
    DatabaseInstance body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // Project ID of the project to which the newly created Cloud SQL instances should belong.
    string project = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostProjectsProjectInstancesCloneRequest {
    alt alt = 1;
    InstancesCloneRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // Project ID of the source as well as the clone Cloud SQL instance.
    string project = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetProjectsProjectInstancesInstanceRequest {
    alt alt = 1;
    string fields = 2;
    // Database instance ID. This does not include the project ID.
    string instance = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // Project ID of the project that contains the instance.
    string project = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PutProjectsProjectInstancesInstanceRequest {
    alt alt = 1;
    DatabaseInstance body = 2;
    string fields = 3;
    // Cloud SQL instance ID. This does not include the project ID.
    string instance = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // Project ID of the project that contains the instance.
    string project = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message DeleteProjectsProjectInstancesInstanceRequest {
    alt alt = 1;
    string fields = 2;
    // Cloud SQL instance ID. This does not include the project ID.
    string instance = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // Project ID of the project that contains the instance to be deleted.
    string project = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetProjectsProjectInstancesInstanceBackupRunsRequest {
    alt alt = 1;
    // Identifier for the backup configuration. This gets generated automatically when a backup configuration is created.
    string backupConfiguration = 2;
    string fields = 3;
    // Cloud SQL instance ID. This does not include the project ID.
    string instance = 4;
    string key = 5;
    // Maximum number of backup runs per response.
    int32 maxResults = 6;
    string oauth_token = 7;
    // A previously-returned page token representing part of the larger set of results to view.
    string pageToken = 8;
    boolean prettyPrint = 9;
    // Project ID of the project that contains the instance.
    string project = 10;
    string quotaUser = 11;
    string userIp = 12;
}

message GetProjectsProjectInstancesInstanceBackupRunsBackupConfigurationRequest {
    alt alt = 1;
    // Identifier for the backup configuration. This gets generated automatically when a backup configuration is created.
    string backupConfiguration = 2;
    // The start time of the four-hour backup window. The backup can occur any time in the window. The time is in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
    string dueTime = 3;
    string fields = 4;
    // Cloud SQL instance ID. This does not include the project ID.
    string instance = 5;
    string key = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    // Project ID of the project that contains the instance.
    string project = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message PostProjectsProjectInstancesInstanceExportRequest {
    alt alt = 1;
    InstancesExportRequest body = 2;
    string fields = 3;
    // Cloud SQL instance ID. This does not include the project ID.
    string instance = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // Project ID of the project that contains the instance to be exported.
    string project = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostProjectsProjectInstancesInstanceImportRequest {
    alt alt = 1;
    InstancesImportRequest body = 2;
    string fields = 3;
    // Cloud SQL instance ID. This does not include the project ID.
    string instance = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // Project ID of the project that contains the instance.
    string project = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetProjectsProjectInstancesInstanceOperationsRequest {
    alt alt = 1;
    string fields = 2;
    // Cloud SQL instance ID. This does not include the project ID.
    string instance = 3;
    string key = 4;
    // Maximum number of operations per response.
    int32 maxResults = 5;
    string oauth_token = 6;
    // A previously-returned page token representing part of the larger set of results to view.
    string pageToken = 7;
    boolean prettyPrint = 8;
    // Project ID of the project that contains the instance.
    string project = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message GetProjectsProjectInstancesInstanceOperationsOperationRequest {
    alt alt = 1;
    string fields = 2;
    // Cloud SQL instance ID. This does not include the project ID.
    string instance = 3;
    string key = 4;
    string oauth_token = 5;
    // Instance operation ID.
    string operation = 6;
    boolean prettyPrint = 7;
    // Project ID of the project that contains the instance.
    string project = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostProjectsProjectInstancesInstancePromoteReplicaRequest {
    alt alt = 1;
    string fields = 2;
    // Cloud SQL read replica instance name.
    string instance = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // ID of the project that contains the read replica.
    string project = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostProjectsProjectInstancesInstanceResetSslConfigRequest {
    alt alt = 1;
    string fields = 2;
    // Cloud SQL instance ID. This does not include the project ID.
    string instance = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // Project ID of the project that contains the instance.
    string project = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostProjectsProjectInstancesInstanceRestartRequest {
    alt alt = 1;
    string fields = 2;
    // Cloud SQL instance ID. This does not include the project ID.
    string instance = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // Project ID of the project that contains the instance to be restarted.
    string project = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostProjectsProjectInstancesInstanceRestoreBackupRequest {
    alt alt = 1;
    // The identifier of the backup configuration. This gets generated automatically when a backup configuration is created.
    string backupConfiguration = 2;
    // The start time of the four-hour backup window. The backup can occur any time in the window. The time is in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
    string dueTime = 3;
    string fields = 4;
    // Cloud SQL instance ID. This does not include the project ID.
    string instance = 5;
    string key = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    // Project ID of the project that contains the instance.
    string project = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message PostProjectsProjectInstancesInstanceSetRootPasswordRequest {
    alt alt = 1;
    InstanceSetRootPasswordRequest body = 2;
    string fields = 3;
    // Cloud SQL instance ID. This does not include the project ID.
    string instance = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // Project ID of the project that contains the instance.
    string project = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetProjectsProjectInstancesInstanceSslCertsRequest {
    alt alt = 1;
    string fields = 2;
    // Cloud SQL instance ID. This does not include the project ID.
    string instance = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // Project ID of the project for which to list Cloud SQL instances.
    string project = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostProjectsProjectInstancesInstanceSslCertsRequest {
    alt alt = 1;
    SslCertsInsertRequest body = 2;
    string fields = 3;
    // Cloud SQL instance ID. This does not include the project ID.
    string instance = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // Project ID of the project to which the newly created Cloud SQL instances should belong.
    string project = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetProjectsProjectInstancesInstanceSslCertsSha1FingerprintRequest {
    alt alt = 1;
    string fields = 2;
    // Cloud SQL instance ID. This does not include the project ID.
    string instance = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // Project ID of the project that contains the instance.
    string project = 7;
    string quotaUser = 8;
    // Sha1 FingerPrint.
    string sha1Fingerprint = 9;
    string userIp = 10;
}

message DeleteProjectsProjectInstancesInstanceSslCertsSha1FingerprintRequest {
    alt alt = 1;
    string fields = 2;
    // Cloud SQL instance ID. This does not include the project ID.
    string instance = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // Project ID of the project that contains the instance to be deleted.
    string project = 7;
    string quotaUser = 8;
    // Sha1 FingerPrint.
    string sha1Fingerprint = 9;
    string userIp = 10;
}

message GetProjectsProjectTiersRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    // Project ID of the project for which to list tiers.
    string project = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message BackupConfiguration {
    // Whether binary log is enabled. If backup configuration is disabled, binary log must be disabled as well.
    bool binaryLogEnabled = 1;
    // Whether this configuration is enabled.
    bool enabled = 2;
    // Identifier for this configuration. This gets generated automatically when a backup configuration is created.
    string id = 3;
    // This is always sql#backupConfiguration.
    string kind = 4;
    // Start time for the daily backup configuration in UTC timezone in the 24 hour format - HH:MM.
    string startTime = 5;
}

message BackupRun {
    // Backup Configuration identifier.
    string backupConfiguration = 1;
    // The due time of this run in UTC timezone in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
    string dueTime = 2;
    // The time the backup operation completed in UTC timezone in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
    string endTime = 3;
    // The time the run was enqueued in UTC timezone in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
    string enqueuedTime = 4;
    // Information about why the backup operation failed. This is only present if the run has the FAILED status.
    OperationError error = 5;
    // Name of the database instance.
    string instance = 6;
    // This is always sql#backupRun.
    string kind = 7;
    // The time the backup operation actually started in UTC timezone in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
    string startTime = 8;
    // The status of this run.
    string status = 9;
}

message BackupRunsListResponse {
    // A list of backup runs in reverse chronological order of the enqueued time.
    repeated BackupRun items = 1;
    // This is always sql#backupRunsList.
    string kind = 2;
    // The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.
    string nextPageToken = 3;
}

message BinLogCoordinates {
    // Name of the binary log file for a Cloud SQL instance.
    string binLogFileName = 1;
    // Position (offset) within the binary log file.
    string binLogPosition = 2;
    // This is always sql#binLogCoordinates.
    string kind = 3;
}

message CloneContext {
    // Binary log coordinates, if specified, indentify the position up to which the source instance should be cloned. If not specified, the source instance is cloned up to the most recent binary log coordinates.
    BinLogCoordinates binLogCoordinates = 1;
    // Name of the Cloud SQL instance to be created as a clone.
    string destinationInstanceName = 2;
    // This is always sql#cloneContext.
    string kind = 3;
    // Name of the Cloud SQL instance to be cloned.
    string sourceInstanceName = 4;
}

message DatabaseFlags {
    // The name of the flag. These flags are passed at instance startup, so include both MySQL server options and MySQL system variables. Flags should be specified with underscores, not hyphens. For more information, see Configuring MySQL Flags in the Google Cloud SQL documentation, as well as the official MySQL documentation for server options and system variables.
    string name = 1;
    // The value of the flag. Booleans should be set to on for true and off for false. This field must be omitted if the flag doesn't take a value.
    string value = 2;
}

message DatabaseInstance {
    // Connection name of the Cloud SQL instance used in connection strings.
    string connectionName = 1;
    // The current disk usage of the instance in bytes.
    string currentDiskSize = 2;
    // The database engine type and version. Can be MYSQL_5_5 or MYSQL_5_6. Defaults to MYSQL_5_5. The databaseVersion cannot be changed after instance creation.
    string databaseVersion = 3;
    // HTTP 1.1 Entity tag for the resource.
    string etag = 4;
    // Name of the Cloud SQL instance. This does not include the project ID.
    string instance = 5;
    // The instance type. This can be one of the following.
    // CLOUD_SQL_INSTANCE: Regular Cloud SQL instance.
    // READ_REPLICA_INSTANCE: Cloud SQL instance acting as a read-replica.
    string instanceType = 6;
    // The assigned IP addresses for the instance.
    repeated IpMapping ipAddresses = 7;
    // The IPv6 address assigned to the instance.
    string ipv6Address = 8;
    // This is always sql#instance.
    string kind = 9;
    // The name of the instance which will act as master in the replication setup.
    string masterInstanceName = 10;
    // The maximum disk size of the instance in bytes.
    string maxDiskSize = 11;
    // The project ID of the project containing the Cloud SQL instance. The Google apps domain is prefixed if applicable.
    string project = 12;
    // The geographical region. Can be us-central, asia-east1 or europe-west1. Defaults to us-central. The region can not be changed after instance creation.
    string region = 13;
    // The replicas of the instance.
    repeated string replicaNames = 14;
    // SSL configuration.
    SslCert serverCaCert = 15;
    // The service account email address assigned to the instance.
    string serviceAccountEmailAddress = 16;
    // The user settings.
    Settings settings = 17;
    // The current serving state of the Cloud SQL instance. This can be one of the following.
    // RUNNABLE: The instance is running, or is ready to run when accessed.
    // SUSPENDED: The instance is not available, for example due to problems with billing.
    // PENDING_CREATE: The instance is being created.
    // MAINTENANCE: The instance is down for maintenance.
    // UNKNOWN_STATE: The state of the instance is unknown.
    string state = 18;
}

message ExportContext {
    // Databases (for example, guestbook) from which the export is made. If unspecified, all databases are exported.
    repeated string database = 1;
    // This is always sql#exportContext.
    string kind = 2;
    // Tables to export, or that were exported, from the specified database. If you specify tables, specify one and only one database.
    repeated string table = 3;
    // The path to the file in Google Cloud Storage where the export will be stored, or where it was already stored. The URI is in the form gs://bucketName/fileName. If the file already exists, the operation fails. If the filename ends with .gz, the contents are compressed.
    string uri = 4;
}

message Flag {
    // For STRING flags, a list of strings that the value can be set to.
    repeated string allowedStringValues = 1;
    // The database version this flag applies to. Currently this can only be [MYSQL_5_5].
    repeated string appliesTo = 2;
    // This is always sql#flag.
    string kind = 3;
    // For INTEGER flags, the maximum allowed value.
    string maxValue = 4;
    // For INTEGER flags, the minimum allowed value.
    string minValue = 5;
    // This is the name of the flag. Flag names always use underscores, not hyphens, e.g. max_allowed_packet
    string name = 6;
    // The type of the flag. Flags are typed to being BOOLEAN, STRING, INTEGER or NONE. NONE is used for flags which do not take a value, such as skip_grant_tables.
    string type = 7;
}

message FlagsListResponse {
    // List of flags.
    repeated Flag items = 1;
    // This is always sql#flagsList.
    string kind = 2;
}

message ImportContext {
    // The database (for example, guestbook) to which the import is made. If not set, it is assumed that the database is specified in the file to be imported.
    string database = 1;
    // This is always sql#importContext.
    string kind = 2;
    // A path to the MySQL dump file in Google Cloud Storage from which the import is made. The URI is in the form gs://bucketName/fileName. Compressed gzip files (.gz) are also supported.
    repeated string uri = 3;
}

message InstanceOperation {
    // The time this operation finished in UTC timezone in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
    string endTime = 1;
    // The time this operation was enqueued in UTC timezone in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
    string enqueuedTime = 2;
    // The error(s) encountered by this operation. Only set if the operation results in an error.
    repeated OperationError error = 3;
    // The context for export operation, if applicable.
    ExportContext exportContext = 4;
    // The context for import operation, if applicable.
    ImportContext importContext = 5;
    // Name of the database instance.
    string instance = 6;
    // This is always sql#instanceOperation.
    string kind = 7;
    // An identifier that uniquely identifies the operation. You can use this identifier to retrieve the Operations resource that has information about the operation.
    string operation = 8;
    // The type of the operation. Valid values are CREATE, DELETE, UPDATE, RESTART, IMPORT, EXPORT, BACKUP_VOLUME, RESTORE_VOLUME.
    string operationType = 9;
    // The time this operation actually started in UTC timezone in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
    string startTime = 10;
    // The state of an operation. Valid values are PENDING, RUNNING, DONE, UNKNOWN.
    string state = 11;
    // The email address of the user who initiated this operation.
    string userEmailAddress = 12;
}

message InstanceSetRootPasswordRequest {
    // Set Root Password Context.
    SetRootPasswordContext setRootPasswordContext = 1;
}

message InstancesCloneRequest {
    // Contains details about the clone operation.
    CloneContext cloneContext = 1;
}

message InstancesCloneResponse {
    // This is always sql#instancesClone.
    string kind = 1;
    // An unique identifier for the operation associated with the cloned instance. You can use this identifier to retrieve the Operations resource, which has information about the operation.
    string operation = 2;
}

message InstancesDeleteResponse {
    // This is always sql#instancesDelete.
    string kind = 1;
    // An identifier that uniquely identifies the operation. You can use this identifier to retrieve the Operations resource that has information about the operation.
    string operation = 2;
}

message InstancesExportRequest {
    // Contains details about the export operation.
    ExportContext exportContext = 1;
}

message InstancesExportResponse {
    // This is always sql#instancesExport.
    string kind = 1;
    // An identifier that uniquely identifies the operation. You can use this identifier to retrieve the Operations resource that has information about the operation.
    string operation = 2;
}

message InstancesImportRequest {
    // Contains details about the import operation.
    ImportContext importContext = 1;
}

message InstancesImportResponse {
    // This is always sql#instancesImport.
    string kind = 1;
    // An identifier that uniquely identifies the operation. You can use this identifier to retrieve the Operations resource that has information about the operation.
    string operation = 2;
}

message InstancesInsertResponse {
    // This is always sql#instancesInsert.
    string kind = 1;
    // An identifier that uniquely identifies the operation. You can use this identifier to retrieve the Operations resource that has information about the operation.
    string operation = 2;
}

message InstancesListResponse {
    // List of database instance resources.
    repeated DatabaseInstance items = 1;
    // This is always sql#instancesList.
    string kind = 2;
    // The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.
    string nextPageToken = 3;
}

message InstancesPromoteReplicaResponse {
    // This is always sql#instancesPromoteReplica.
    string kind = 1;
    // An identifier that uniquely identifies the operation. You can use this identifier to retrieve the Operations resource that has information about the operation.
    string operation = 2;
}

message InstancesResetSslConfigResponse {
    // This is always sql#instancesResetSslConfig.
    string kind = 1;
    // An identifier that uniquely identifies the operation. You can use this identifier to retrieve the Operations resource that has information about the operation. All ssl client certificates will be deleted and a new server certificate will be created. Does not take effect until the next instance restart.
    string operation = 2;
}

message InstancesRestartResponse {
    // This is always sql#instancesRestart.
    string kind = 1;
    // An identifier that uniquely identifies the operation. You can use this identifier to retrieve the Operations resource that has information about the operation.
    string operation = 2;
}

message InstancesRestoreBackupResponse {
    // This is always sql#instancesRestoreBackup.
    string kind = 1;
    // An identifier that uniquely identifies the operation. You can use this identifier to retrieve the Operations resource that has information about the operation.
    string operation = 2;
}

message InstancesSetRootPasswordResponse {
    // This is always sql#instancesSetRootPassword.
    string kind = 1;
    // An identifier that uniquely identifies the operation. You can use this identifier to retrieve the Operations resource that has information about the operation.
    string operation = 2;
}

message InstancesUpdateResponse {
    // This is always sql#instancesUpdate.
    string kind = 1;
    // An identifier that uniquely identifies the operation. You can use this identifier to retrieve information about the operation.
    string operation = 2;
}

message IpConfiguration {
    // The list of external networks that are allowed to connect to the instance using the IP. In CIDR notation, also known as 'slash' notation (e.g. 192.168.100.0/24).
    repeated string authorizedNetworks = 1;
    // Whether the instance should be assigned an IP address or not.
    bool enabled = 2;
    // This is always sql#ipConfiguration.
    string kind = 3;
    // Whether SSL connections over IP should be enforced or not.
    bool requireSsl = 4;
}

message IpMapping {
    // The IP address assigned.
    string ipAddress = 1;
    // The due time for this IP to be retired in RFC 3339 format, for example 2012-11-15T16:19:00.094Z. This field is only available when the IP is scheduled to be retired.
    string timeToRetire = 2;
}

message LocationPreference {
    // The App Engine application to follow, it must be in the same region as the Cloud SQL instance.
    string followGaeApplication = 1;
    // This is always sql#locationPreference.
    string kind = 2;
    // The preferred Compute Engine zone (e.g. us-centra1-a, us-central1-b, etc.).
    string zone = 3;
}

message OperationError {
    // Identifies the specific error that occurred.
    string code = 1;
    // This is always sql#operationError.
    string kind = 2;
}

message OperationsListResponse {
    // List of operation resources.
    repeated InstanceOperation items = 1;
    // This is always sql#operationsList.
    string kind = 2;
    // The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.
    string nextPageToken = 3;
}

message SetRootPasswordContext {
    // This is always sql#setRootUserContext.
    string kind = 1;
    // The password for the root user.
    string password = 2;
}

message Settings {
    // The activation policy for this instance. This specifies when the instance should be activated and is applicable only when the instance state is RUNNABLE. This can be one of the following.
    // ALWAYS: The instance should always be active.
    // NEVER: The instance should never be activated.
    // ON_DEMAND: The instance is activated upon receiving requests.
    string activationPolicy = 1;
    // The App Engine app IDs that can access this instance.
    repeated string authorizedGaeApplications = 2;
    // The daily backup configuration for the instance.
    repeated BackupConfiguration backupConfiguration = 3;
    // The database flags passed to the instance at startup.
    repeated DatabaseFlags databaseFlags = 4;
    // Configuration specific to read replica instance. Indicates whether replication is enabled or not.
    bool databaseReplicationEnabled = 5;
    // The settings for IP Management. This allows to enable or disable the instance IP and manage which external networks can connect to the instance.
    IpConfiguration ipConfiguration = 6;
    // This is always sql#settings.
    string kind = 7;
    // The location preference settings. This allows the instance to be located as near as possible to either an App Engine app or GCE zone for better performance.
    LocationPreference locationPreference = 8;
    // The pricing plan for this instance. This can be either PER_USE or PACKAGE.
    string pricingPlan = 9;
    // The type of replication this instance uses. This can be either ASYNCHRONOUS or SYNCHRONOUS.
    string replicationType = 10;
    // The version of instance settings. This is a required field for update method to make sure concurrent updates are handled properly. During update, use the most recent settingsVersion value for this instance and do not try to update this value.
    string settingsVersion = 11;
    // The tier of service for this instance, for example D1, D2. For more information, see pricing.
    string tier = 12;
}

message SslCert {
    // PEM representation.
    string cert = 1;
    // Serial number, as extracted from the certificate.
    string certSerialNumber = 2;
    // User supplied name. Constrained to [a-zA-Z.-_ ]+.
    string commonName = 3;
    // Time when the certificate was created.
    string createTime = 4;
    // Time when the certificate expires.
    string expirationTime = 5;
    // Name of the database instance.
    string instance = 6;
    // This is always sql#sslCert.
    string kind = 7;
    // Sha1 Fingerprint.
    string sha1Fingerprint = 8;
}

message SslCertDetail {
    // The public information about the cert.
    SslCert certInfo = 1;
    // The private key for the client cert, in pem format. Keep private in order to protect your security.
    string certPrivateKey = 2;
}

message SslCertsDeleteResponse {
    // This is always sql#sslCertsDelete.
    string kind = 1;
    // An identifier that uniquely identifies the operation. You can use this identifier to retrieve the Operations resource that has information about the operation.
    string operation = 2;
}

message SslCertsInsertRequest {
    // User supplied name. Must be a distinct name from the other certificates for this instance. New certificates will not be usable until the instance is restarted.
    string commonName = 1;
}

message SslCertsInsertResponse {
    // The new client certificate and private key. The new certificate will not work until the instance is restarted.
    SslCertDetail clientCert = 1;
    // This is always sql#sslCertsInsert.
    string kind = 2;
    // The server Certificate Authority's certificate. If this is missing you can force a new one to be generated by calling resetSslConfig method on instances resource..
    SslCert serverCaCert = 3;
}

message SslCertsListResponse {
    // List of client certificates for the instance.
    repeated SslCert items = 1;
    // This is always sql#sslCertsList.
    string kind = 2;
}

message Tier {
    // The maximum disk size of this tier in bytes.
    string DiskQuota = 1;
    // The maximum RAM usage of this tier in bytes.
    string RAM = 2;
    // This is always sql#tier.
    string kind = 3;
    // The applicable regions for this tier.
    repeated string region = 4;
    // An identifier for the service tier, for example D1, D2 etc. For related information, see Pricing.
    string tier = 5;
}

message TiersListResponse {
    // List of tiers.
    repeated Tier items = 1;
    // This is always sql#tiersList.
    string kind = 2;
}

enum Alt {
    JSON = 0;
}

service CloudSQLAdministrationService {
    // Lists all database flags that can be set for Google Cloud SQL instances.
    rpc GetFlags(GetFlagsRequest) returns (FlagsListResponse) {
      option (google.api.http) = {
        get: "/sql/v1beta3/flags"
      };
    }
    // Lists instances for a given project, in alphabetical order by instance name.
    rpc GetProjectsProjectInstances(GetProjectsProjectInstancesRequest) returns (InstancesListResponse) {
      option (google.api.http) = {
        get: "/sql/v1beta3/projects/{project}/instances"
      };
    }
    // Creates a new Cloud SQL instance.
    rpc PostProjectsProjectInstances(PostProjectsProjectInstancesRequest) returns (InstancesInsertResponse) {
      option (google.api.http) = {
        post: "/sql/v1beta3/projects/{project}/instances"
        body: "body"
      };
    }
    // Creates a Cloud SQL instance as a clone of a source instance.
    rpc PostProjectsProjectInstancesClone(PostProjectsProjectInstancesCloneRequest) returns (InstancesCloneResponse) {
      option (google.api.http) = {
        post: "/sql/v1beta3/projects/{project}/instances/clone"
        body: "body"
      };
    }
    // Retrieves information about a Cloud SQL instance.
    rpc GetProjectsProjectInstancesInstance(GetProjectsProjectInstancesInstanceRequest) returns (DatabaseInstance) {
      option (google.api.http) = {
        get: "/sql/v1beta3/projects/{project}/instances/{instance}"
      };
    }
    // Updates the settings of a Cloud SQL instance.
    rpc PutProjectsProjectInstancesInstance(PutProjectsProjectInstancesInstanceRequest) returns (InstancesUpdateResponse) {
      option (google.api.http) = {
        put: "/sql/v1beta3/projects/{project}/instances/{instance}"
        body: "body"
      };
    }
    // Deletes a Cloud SQL instance.
    rpc DeleteProjectsProjectInstancesInstance(DeleteProjectsProjectInstancesInstanceRequest) returns (InstancesDeleteResponse) {
      option (google.api.http) = {
        delete: "/sql/v1beta3/projects/{project}/instances/{instance}"
      };
    }
    // Lists all backup runs associated with a Cloud SQL instance.
    rpc GetProjectsProjectInstancesInstanceBackupRuns(GetProjectsProjectInstancesInstanceBackupRunsRequest) returns (BackupRunsListResponse) {
      option (google.api.http) = {
        get: "/sql/v1beta3/projects/{project}/instances/{instance}/backupRuns"
      };
    }
    // Retrieves information about a specified backup run for a Cloud SQL instance.
    rpc GetProjectsProjectInstancesInstanceBackupRunsBackupConfiguration(GetProjectsProjectInstancesInstanceBackupRunsBackupConfigurationRequest) returns (BackupRun) {
      option (google.api.http) = {
        get: "/sql/v1beta3/projects/{project}/instances/{instance}/backupRuns/{backupConfiguration}"
      };
    }
    // Exports data from a Cloud SQL instance to a Google Cloud Storage bucket as a MySQL dump file.
    rpc PostProjectsProjectInstancesInstanceExport(PostProjectsProjectInstancesInstanceExportRequest) returns (InstancesExportResponse) {
      option (google.api.http) = {
        post: "/sql/v1beta3/projects/{project}/instances/{instance}/export"
        body: "body"
      };
    }
    // Imports data into a Cloud SQL instance from a MySQL dump file stored in a Google Cloud Storage bucket.
    rpc PostProjectsProjectInstancesInstanceImport(PostProjectsProjectInstancesInstanceImportRequest) returns (InstancesImportResponse) {
      option (google.api.http) = {
        post: "/sql/v1beta3/projects/{project}/instances/{instance}/import"
        body: "body"
      };
    }
    // Lists all operations that have been performed on a Cloud SQL instance.
    rpc GetProjectsProjectInstancesInstanceOperations(GetProjectsProjectInstancesInstanceOperationsRequest) returns (OperationsListResponse) {
      option (google.api.http) = {
        get: "/sql/v1beta3/projects/{project}/instances/{instance}/operations"
      };
    }
    // Retrieves information about a specific operation that was performed on a Cloud SQL instance.
    rpc GetProjectsProjectInstancesInstanceOperationsOperation(GetProjectsProjectInstancesInstanceOperationsOperationRequest) returns (InstanceOperation) {
      option (google.api.http) = {
        get: "/sql/v1beta3/projects/{project}/instances/{instance}/operations/{operation}"
      };
    }
    // Promotes the read replica instance to be a stand-alone Cloud SQL instance.
    rpc PostProjectsProjectInstancesInstancePromoteReplica(PostProjectsProjectInstancesInstancePromoteReplicaRequest) returns (InstancesPromoteReplicaResponse) {
      option (google.api.http) = {
        post: "/sql/v1beta3/projects/{project}/instances/{instance}/promoteReplica"
      };
    }
    // Deletes all client certificates and generates a new server SSL certificate for a Cloud SQL instance.
    rpc PostProjectsProjectInstancesInstanceResetSslConfig(PostProjectsProjectInstancesInstanceResetSslConfigRequest) returns (InstancesResetSslConfigResponse) {
      option (google.api.http) = {
        post: "/sql/v1beta3/projects/{project}/instances/{instance}/resetSslConfig"
      };
    }
    // Restarts a Cloud SQL instance.
    rpc PostProjectsProjectInstancesInstanceRestart(PostProjectsProjectInstancesInstanceRestartRequest) returns (InstancesRestartResponse) {
      option (google.api.http) = {
        post: "/sql/v1beta3/projects/{project}/instances/{instance}/restart"
      };
    }
    // Restores a backup of a Cloud SQL instance.
    rpc PostProjectsProjectInstancesInstanceRestoreBackup(PostProjectsProjectInstancesInstanceRestoreBackupRequest) returns (InstancesRestoreBackupResponse) {
      option (google.api.http) = {
        post: "/sql/v1beta3/projects/{project}/instances/{instance}/restoreBackup"
      };
    }
    // Sets the password for the root user of the specified Cloud SQL instance.
    rpc PostProjectsProjectInstancesInstanceSetRootPassword(PostProjectsProjectInstancesInstanceSetRootPasswordRequest) returns (InstancesSetRootPasswordResponse) {
      option (google.api.http) = {
        post: "/sql/v1beta3/projects/{project}/instances/{instance}/setRootPassword"
        body: "body"
      };
    }
    // Lists all of the current SSL certificates defined for a Cloud SQL instance.
    rpc GetProjectsProjectInstancesInstanceSslCerts(GetProjectsProjectInstancesInstanceSslCertsRequest) returns (SslCertsListResponse) {
      option (google.api.http) = {
        get: "/sql/v1beta3/projects/{project}/instances/{instance}/sslCerts"
      };
    }
    // Creates an SSL certificate and returns the certificate, the associated private key, and the server certificate authority.
    rpc PostProjectsProjectInstancesInstanceSslCerts(PostProjectsProjectInstancesInstanceSslCertsRequest) returns (SslCertsInsertResponse) {
      option (google.api.http) = {
        post: "/sql/v1beta3/projects/{project}/instances/{instance}/sslCerts"
        body: "body"
      };
    }
    // Retrieves an SSL certificate as specified by its SHA-1 fingerprint.
    rpc GetProjectsProjectInstancesInstanceSslCertsSha1Fingerprint(GetProjectsProjectInstancesInstanceSslCertsSha1FingerprintRequest) returns (SslCert) {
      option (google.api.http) = {
        get: "/sql/v1beta3/projects/{project}/instances/{instance}/sslCerts/{sha1Fingerprint}"
      };
    }
    // Deletes an SSL certificate from a Cloud SQL instance.
    rpc DeleteProjectsProjectInstancesInstanceSslCertsSha1Fingerprint(DeleteProjectsProjectInstancesInstanceSslCertsSha1FingerprintRequest) returns (SslCertsDeleteResponse) {
      option (google.api.http) = {
        delete: "/sql/v1beta3/projects/{project}/instances/{instance}/sslCerts/{sha1Fingerprint}"
      };
    }
    // Lists service tiers that can be used to create Google Cloud SQL instances.
    rpc GetProjectsProjectTiers(GetProjectsProjectTiersRequest) returns (TiersListResponse) {
      option (google.api.http) = {
        get: "/sql/v1beta3/projects/{project}/tiers"
      };
    }
}

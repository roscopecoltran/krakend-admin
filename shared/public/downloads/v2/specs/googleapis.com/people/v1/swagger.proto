syntax = "proto3";

import "google/api/annotations.proto";

package googlepeople;

message GetV1ContactGroupsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    // The maximum number of resources to return.
    int32 pageSize = 9;
    // The next_page_token value returned from a previous call to
    // [ListContactGroups](/people/api/rest/v1/contactgroups/list).
    // Requests the next page of resources.
    string pageToken = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    // A sync token, returned by a previous call to `contactgroups.list`.
    // Only resources changed since the sync token was created will be returned.
    string syncToken = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message PostV1ContactGroupsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    CreateContactGroupRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message GetV1ContactGroups:BatchGetRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    // Specifies the maximum number of members to return for each group.
    int32 maxMembers = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // The resource names of the contact groups to get.
    repeated string resourceNames = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1People:BatchGetRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    // **Required.** A field mask to restrict which fields on each person are
    // returned. Valid values are:
    // 
    // * addresses
    // * ageRanges
    // * biographies
    // * birthdays
    // * braggingRights
    // * coverPhotos
    // * emailAddresses
    // * events
    // * genders
    // * imClients
    // * interests
    // * locales
    // * memberships
    // * metadata
    // * names
    // * nicknames
    // * occupations
    // * organizations
    // * phoneNumbers
    // * photos
    // * relations
    // * relationshipInterests
    // * relationshipStatuses
    // * residences
    // * skills
    // * taglines
    // * urls
    string personFields = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // **Required.** Comma-separated list of person fields to be included in the
    // response. Each path should start with `person.`: for example,
    // `person.names` or `person.photos`.
    string requestMask.includeField = 13;
    // The resource names of the people to provide information about.
    // 
    // - To get information about the authenticated user, specify `people/me`.
    // - To get information about a google account, specify
    //   `people/`<var>account_id</var>.
    // - To get information about a contact, specify the resource name that
    //   identifies the contact as returned by
    // [`people.connections.list`](/people/api/rest/v1/people.connections/list).
    // 
    // You can include up to 50 resource names in one request.
    repeated string resourceNames = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message PostV1People:CreateContactRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    Person body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    // The resource name of the owning person resource.
    string parent = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1ResourceNameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    // Specifies the maximum number of members to return.
    int32 maxMembers = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // **Required.** Comma-separated list of person fields to be included in the
    // response. Each path should start with `person.`: for example,
    // `person.names` or `person.photos`.
    string requestMask.includeField = 13;
    // The resource name of the contact group to get.
    string resourceName = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message PutV1ResourceNameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    UpdateContactGroupRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // The resource name for the contact group, assigned by the server. An ASCII
    // string, in the form of `contactGroups/`<var>contact_group_id</var>.
    string resourceName = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message DeleteV1ResourceNameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    // Set to true to also delete the contacts in the specified group.
    bool deleteContacts = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // The resource name of the contact group to delete.
    string resourceName = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1ResourceNameConnectionsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    // The number of connections to include in the response. Valid values are
    // between 1 and 2000, inclusive. Defaults to 100.
    int32 pageSize = 9;
    // The token of the page to be returned.
    string pageToken = 10;
    // **Required.** A field mask to restrict which fields on each person are
    // returned. Valid values are:
    // 
    // * addresses
    // * ageRanges
    // * biographies
    // * birthdays
    // * braggingRights
    // * coverPhotos
    // * emailAddresses
    // * events
    // * genders
    // * imClients
    // * interests
    // * locales
    // * memberships
    // * metadata
    // * names
    // * nicknames
    // * occupations
    // * organizations
    // * phoneNumbers
    // * photos
    // * relations
    // * relationshipInterests
    // * relationshipStatuses
    // * residences
    // * skills
    // * taglines
    // * urls
    string personFields = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    // **Required.** Comma-separated list of person fields to be included in the
    // response. Each path should start with `person.`: for example,
    // `person.names` or `person.photos`.
    string requestMask.includeField = 15;
    // Whether the response should include a sync token, which can be used to get
    // all changes since the last request.
    bool requestSyncToken = 16;
    // The resource name to return connections for. Only `people/me` is valid.
    string resourceName = 17;
    // The order in which the connections should be sorted. Defaults to
    // `LAST_MODIFIED_ASCENDING`.
    enum GetV1ResourceNameConnectionsRequest_SortOrder {
        GETV1RESOURCENAMECONNECTIONSREQUEST_SORTORDER_LAST_MODIFIED_ASCENDING = 0;
        GETV1RESOURCENAMECONNECTIONSREQUEST_SORTORDER_FIRST_NAME_ASCENDING = 1;
        GETV1RESOURCENAMECONNECTIONSREQUEST_SORTORDER_LAST_NAME_ASCENDING = 2;
    }
    GetV1ResourceNameConnectionsRequest_SortOrder sortOrder = 18;
    // A sync token, returned by a previous call to `people.connections.list`.
    // Only resources changed since the sync token was created will be returned.
    string syncToken = 19;
    string uploadType = 20;
    string upload_protocol = 21;
}

message PostV1ResourceNameMembers:ModifyRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    ModifyContactGroupMembersRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // The resource name of the contact group to modify.
    string resourceName = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message DeleteV1ResourceName:DeleteContactRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    boolean pp = 9;
    boolean prettyPrint = 10;
    string quotaUser = 11;
    // The resource name of the contact to delete.
    string resourceName = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

enum $.Xgafv {
    $XGAFV_1 = 0;
    $XGAFV_2 = 1;
}

message Address {
    // The city of the address.
    string city = 1;
    // The country of the address.
    string country = 2;
    // The [ISO 3166-1 alpha-2](http://www.iso.org/iso/country_codes.htm) country
    // code of the address.
    string countryCode = 3;
    // The extended address of the address; for example, the apartment number.
    string extendedAddress = 4;
    // The read-only type of the address translated and formatted in the viewer's
    // account locale or the `Accept-Language` HTTP header locale.
    string formattedType = 5;
    // The unstructured value of the address. If this is not set by the user it
    // will be automatically constructed from structured values.
    string formattedValue = 6;
    // Metadata about the address.
    FieldMetadata metadata = 7;
    // The P.O. box of the address.
    string poBox = 8;
    // The postal code of the address.
    string postalCode = 9;
    // The region of the address; for example, the state or province.
    string region = 10;
    // The street address.
    string streetAddress = 11;
    // The type of the address. The type can be custom or predefined.
    // Possible values include, but are not limited to, the following:
    // 
    // * `home`
    // * `work`
    // * `other`
    string type = 12;
}

message AgeRangeType {
    // The age range.
    enum AgeRangeType_AgeRange {
        AGERANGETYPE_AGERANGE_AGE_RANGE_UNSPECIFIED = 0;
        AGERANGETYPE_AGERANGE_LESS_THAN_EIGHTEEN = 1;
        AGERANGETYPE_AGERANGE_EIGHTEEN_TO_TWENTY = 2;
        AGERANGETYPE_AGERANGE_TWENTY_ONE_OR_OLDER = 3;
    }
    AgeRangeType_AgeRange ageRange = 1;
    // Metadata about the age range.
    FieldMetadata metadata = 2;
}

message BatchGetContactGroupsResponse {
    // The list of responses for each requested contact group resource.
    repeated ContactGroupResponse responses = 1;
}

message Biography {
    // The content type of the biography.
    enum Biography_ContentType {
        BIOGRAPHY_CONTENTTYPE_CONTENT_TYPE_UNSPECIFIED = 0;
        BIOGRAPHY_CONTENTTYPE_TEXT_PLAIN = 1;
        BIOGRAPHY_CONTENTTYPE_TEXT_HTML = 2;
    }
    Biography_ContentType contentType = 1;
    // Metadata about the biography.
    FieldMetadata metadata = 2;
    // The short biography.
    string value = 3;
}

message Birthday {
    // The date of the birthday.
    Date date = 1;
    // Metadata about the birthday.
    FieldMetadata metadata = 2;
    // A free-form string representing the user's birthday.
    string text = 3;
}

message BraggingRights {
    // Metadata about the bragging rights.
    FieldMetadata metadata = 1;
    // The bragging rights; for example, `climbed mount everest`.
    string value = 2;
}

message ContactGroup {
    // The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the
    // resource. Used for web cache validation.
    string etag = 1;
    // The read-only name translated and formatted in the viewer's account locale
    // or the `Accept-Language` HTTP header locale for system groups names.
    // Group names set by the owner are the same as name.
    string formattedName = 2;
    // The read-only contact group type.
    enum ContactGroup_GroupType {
        CONTACTGROUP_GROUPTYPE_GROUP_TYPE_UNSPECIFIED = 0;
        CONTACTGROUP_GROUPTYPE_USER_CONTACT_GROUP = 1;
        CONTACTGROUP_GROUPTYPE_SYSTEM_CONTACT_GROUP = 2;
    }
    ContactGroup_GroupType groupType = 3;
    // The total number of contacts in the group irrespective of max members in
    // specified in the request.
    int32 memberCount = 4;
    // The list of contact person resource names that are members of the contact
    // group. The field is not populated for LIST requests and can only be updated
    // through the
    // [ModifyContactGroupMembers](/people/api/rest/v1/contactgroups/members/modify).
    repeated string memberResourceNames = 5;
    // Metadata about the contact group.
    ContactGroupMetadata metadata = 6;
    // The contact group name set by the group owner or a system provided name
    // for system groups.
    string name = 7;
    // The resource name for the contact group, assigned by the server. An ASCII
    // string, in the form of `contactGroups/`<var>contact_group_id</var>.
    string resourceName = 8;
}

message ContactGroupMembership {
    // The contact group ID for the contact group membership. The contact group
    // ID can be custom or predefined. Possible values include, but are not
    // limited to, the following:
    // 
    // *  `myContacts`
    // *  `starred`
    // *  A numerical ID for user-created groups.
    string contactGroupId = 1;
}

message ContactGroupMetadata {
    // True if the contact group resource has been deleted. Populated only for
    // [`ListContactGroups`](/people/api/rest/v1/contactgroups/list) requests
    // that include a sync token.
    bool deleted = 1;
    // The time the group was last updated.
    string updateTime = 2;
}

message ContactGroupResponse {
    // The contact group.
    ContactGroup contactGroup = 1;
    // The original requested resource name.
    string requestedResourceName = 2;
    // The status of the response.
    Status status = 3;
}

message CoverPhoto {
    // True if the cover photo is the default cover photo;
    // false if the cover photo is a user-provided cover photo.
    bool default = 1;
    // Metadata about the cover photo.
    FieldMetadata metadata = 2;
    // The URL of the cover photo.
    string url = 3;
}

message CreateContactGroupRequest {
    // The contact group to create.
    ContactGroup contactGroup = 1;
}

message Date {
    // Day of month. Must be from 1 to 31 and valid for the year and month, or 0
    // if specifying a year/month where the day is not significant.
    int32 day = 1;
    // Month of year. Must be from 1 to 12.
    int32 month = 2;
    // Year of date. Must be from 1 to 9999, or 0 if specifying a date without
    // a year.
    int32 year = 3;
}

message DomainMembership {
    // True if the person is in the viewer's Google Apps domain.
    bool inViewerDomain = 1;
}

message EmailAddress {
    // The display name of the email.
    string displayName = 1;
    // The read-only type of the email address translated and formatted in the
    // viewer's account locale or the `Accept-Language` HTTP header locale.
    string formattedType = 2;
    // Metadata about the email address.
    FieldMetadata metadata = 3;
    // The type of the email address. The type can be custom or predefined.
    // Possible values include, but are not limited to, the following:
    // 
    // * `home`
    // * `work`
    // * `other`
    string type = 4;
    // The email address.
    string value = 5;
}

message Empty {
}

message Event {
    // The date of the event.
    Date date = 1;
    // The read-only type of the event translated and formatted in the
    // viewer's account locale or the `Accept-Language` HTTP header locale.
    string formattedType = 2;
    // Metadata about the event.
    FieldMetadata metadata = 3;
    // The type of the event. The type can be custom or predefined.
    // Possible values include, but are not limited to, the following:
    // 
    // * `anniversary`
    // * `other`
    string type = 4;
}

message FieldMetadata {
    // True if the field is the primary field; false if the field is a secondary
    // field.
    bool primary = 1;
    // The source of the field.
    Source source = 2;
    // True if the field is verified; false if the field is unverified. A
    // verified field is typically a name, email address, phone number, or
    // website that has been confirmed to be owned by the person.
    bool verified = 3;
}

message Gender {
    // The read-only value of the gender translated and formatted in the viewer's
    // account locale or the `Accept-Language` HTTP header locale.
    string formattedValue = 1;
    // Metadata about the gender.
    FieldMetadata metadata = 2;
    // The gender for the person. The gender can be custom or predefined.
    // Possible values include, but are not limited to, the
    // following:
    // 
    // * `male`
    // * `female`
    // * `other`
    // * `unknown`
    string value = 3;
}

message GetPeopleResponse {
    // The response for each requested resource name.
    repeated PersonResponse responses = 1;
}

message ImClient {
    // The read-only protocol of the IM client formatted in the viewer's account
    // locale or the `Accept-Language` HTTP header locale.
    string formattedProtocol = 1;
    // The read-only type of the IM client translated and formatted in the
    // viewer's account locale or the `Accept-Language` HTTP header locale.
    string formattedType = 2;
    // Metadata about the IM client.
    FieldMetadata metadata = 3;
    // The protocol of the IM client. The protocol can be custom or predefined.
    // Possible values include, but are not limited to, the following:
    // 
    // * `aim`
    // * `msn`
    // * `yahoo`
    // * `skype`
    // * `qq`
    // * `googleTalk`
    // * `icq`
    // * `jabber`
    // * `netMeeting`
    string protocol = 4;
    // The type of the IM client. The type can be custom or predefined.
    // Possible values include, but are not limited to, the following:
    // 
    // * `home`
    // * `work`
    // * `other`
    string type = 5;
    // The user name used in the IM client.
    string username = 6;
}

message Interest {
    // Metadata about the interest.
    FieldMetadata metadata = 1;
    // The interest; for example, `stargazing`.
    string value = 2;
}

message ListConnectionsResponse {
    // The list of people that the requestor is connected to.
    repeated Person connections = 1;
    // The token that can be used to retrieve the next page of results.
    string nextPageToken = 2;
    // The token that can be used to retrieve changes since the last request.
    string nextSyncToken = 3;
    // The total number of items in the list without pagination.
    int32 totalItems = 4;
    // **DEPRECATED** (Please use totalItems)
    // The total number of people in the list without pagination.
    int32 totalPeople = 5;
}

message ListContactGroupsResponse {
    // The list of contact groups. Members of the contact groups are not
    // populated.
    repeated ContactGroup contactGroups = 1;
    // The token that can be used to retrieve the next page of results.
    string nextPageToken = 2;
    // The token that can be used to retrieve changes since the last request.
    string nextSyncToken = 3;
    // The total number of items in the list without pagination.
    int32 totalItems = 4;
}

message Locale {
    // Metadata about the locale.
    FieldMetadata metadata = 1;
    // The well-formed [IETF BCP 47](https://tools.ietf.org/html/bcp47)
    // language tag representing the locale.
    string value = 2;
}

message Membership {
    // The contact group membership.
    ContactGroupMembership contactGroupMembership = 1;
    // The domain membership.
    DomainMembership domainMembership = 2;
    // Metadata about the membership.
    FieldMetadata metadata = 3;
}

message ModifyContactGroupMembersRequest {
    // The resource names of the contact people to add in the form of in the form
    // `people/`<var>person_id</var>.
    repeated string resourceNamesToAdd = 1;
    // The resource names of the contact people to remove in the form of in the
    // form of `people/`<var>person_id</var>.
    repeated string resourceNamesToRemove = 2;
}

message ModifyContactGroupMembersResponse {
    // The contact people resource names that were not found.
    repeated string notFoundResourceNames = 1;
}

message Name {
    // The read-only display name formatted according to the locale specified by
    // the viewer's account or the `Accept-Language` HTTP header.
    string displayName = 1;
    // The read-only display name with the last name first formatted according to
    // the locale specified by the viewer's account or the
    // `Accept-Language` HTTP header.
    string displayNameLastFirst = 2;
    // The family name.
    string familyName = 3;
    // The given name.
    string givenName = 4;
    // The honorific prefixes, such as `Mrs.` or `Dr.`
    string honorificPrefix = 5;
    // The honorific suffixes, such as `Jr.`
    string honorificSuffix = 6;
    // Metadata about the name.
    FieldMetadata metadata = 7;
    // The middle name(s).
    string middleName = 8;
    // The family name spelled as it sounds.
    string phoneticFamilyName = 9;
    // The full name spelled as it sounds.
    string phoneticFullName = 10;
    // The given name spelled as it sounds.
    string phoneticGivenName = 11;
    // The honorific prefixes spelled as they sound.
    string phoneticHonorificPrefix = 12;
    // The honorific suffixes spelled as they sound.
    string phoneticHonorificSuffix = 13;
    // The middle name(s) spelled as they sound.
    string phoneticMiddleName = 14;
}

message Nickname {
    // Metadata about the nickname.
    FieldMetadata metadata = 1;
    // The type of the nickname.
    enum Nickname_Type {
        NICKNAME_TYPE_DEFAULT = 0;
        NICKNAME_TYPE_MAIDEN_NAME = 1;
        NICKNAME_TYPE_INITIALS = 2;
        NICKNAME_TYPE_GPLUS = 3;
        NICKNAME_TYPE_OTHER_NAME = 4;
    }
    Nickname_Type type = 2;
    // The nickname.
    string value = 3;
}

message Occupation {
    // Metadata about the occupation.
    FieldMetadata metadata = 1;
    // The occupation; for example, `carpenter`.
    string value = 2;
}

message Organization {
    // True if the organization is the person's current organization;
    // false if the organization is a past organization.
    bool current = 1;
    // The person's department at the organization.
    string department = 2;
    // The domain name associated with the organization; for example, `google.com`.
    string domain = 3;
    // The end date when the person left the organization.
    Date endDate = 4;
    // The read-only type of the organization translated and formatted in the
    // viewer's account locale or the `Accept-Language` HTTP header locale.
    string formattedType = 5;
    // The person's job description at the organization.
    string jobDescription = 6;
    // The location of the organization office the person works at.
    string location = 7;
    // Metadata about the organization.
    FieldMetadata metadata = 8;
    // The name of the organization.
    string name = 9;
    // The phonetic name of the organization.
    string phoneticName = 10;
    // The start date when the person joined the organization.
    Date startDate = 11;
    // The symbol associated with the organization; for example, a stock ticker
    // symbol, abbreviation, or acronym.
    string symbol = 12;
    // The person's job title at the organization.
    string title = 13;
    // The type of the organization. The type can be custom or predefined.
    // Possible values include, but are not limited to, the following:
    // 
    // * `work`
    // * `school`
    string type = 14;
}

message Person {
    // The person's street addresses.
    repeated Address addresses = 1;
    // **DEPRECATED** (Please use `person.ageRanges` instead)**
    // 
    // The person's read-only age range.
    enum Person_AgeRange {
        PERSON_AGERANGE_AGE_RANGE_UNSPECIFIED = 0;
        PERSON_AGERANGE_LESS_THAN_EIGHTEEN = 1;
        PERSON_AGERANGE_EIGHTEEN_TO_TWENTY = 2;
        PERSON_AGERANGE_TWENTY_ONE_OR_OLDER = 3;
    }
    Person_AgeRange ageRange = 2;
    // The person's read-only age ranges.
    repeated AgeRangeType ageRanges = 3;
    // The person's biographies.
    repeated Biography biographies = 4;
    // The person's birthdays.
    repeated Birthday birthdays = 5;
    // The person's bragging rights.
    repeated BraggingRights braggingRights = 6;
    // The person's read-only cover photos.
    repeated CoverPhoto coverPhotos = 7;
    // The person's email addresses.
    repeated EmailAddress emailAddresses = 8;
    // The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the
    // resource. Used for web cache validation.
    string etag = 9;
    // The person's events.
    repeated Event events = 10;
    // The person's genders.
    repeated Gender genders = 11;
    // The person's instant messaging clients.
    repeated ImClient imClients = 12;
    // The person's interests.
    repeated Interest interests = 13;
    // The person's locale preferences.
    repeated Locale locales = 14;
    // The person's read-only group memberships.
    repeated Membership memberships = 15;
    // Read-only metadata about the person.
    PersonMetadata metadata = 16;
    // The person's names.
    repeated Name names = 17;
    // The person's nicknames.
    repeated Nickname nicknames = 18;
    // The person's occupations.
    repeated Occupation occupations = 19;
    // The person's past or current organizations.
    repeated Organization organizations = 20;
    // The person's phone numbers.
    repeated PhoneNumber phoneNumbers = 21;
    // The person's read-only photos.
    repeated Photo photos = 22;
    // The person's relations.
    repeated Relation relations = 23;
    // The person's read-only relationship interests.
    repeated RelationshipInterest relationshipInterests = 24;
    // The person's read-only relationship statuses.
    repeated RelationshipStatus relationshipStatuses = 25;
    // The person's residences.
    repeated Residence residences = 26;
    // The resource name for the person, assigned by the server. An ASCII string
    // with a max length of 27 characters, in the form of
    // `people/`<var>person_id</var>.
    string resourceName = 27;
    // The person's skills.
    repeated Skill skills = 28;
    // The person's read-only taglines.
    repeated Tagline taglines = 29;
    // The person's associated URLs.
    repeated Url urls = 30;
    // The person's user defined data.
    repeated UserDefined userDefined = 31;
}

message PersonMetadata {
    // True if the person resource has been deleted. Populated only for
    // [`connections.list`](/people/api/rest/v1/people.connections/list) requests
    // that include a sync token.
    bool deleted = 1;
    // Resource names of people linked to this resource.
    repeated string linkedPeopleResourceNames = 2;
    // **DEPRECATED** (Please use
    // `person.metadata.sources.profileMetadata.objectType` instead)
    // 
    // The type of the person object.
    enum PersonMetadata_ObjectType {
        PERSONMETADATA_OBJECTTYPE_OBJECT_TYPE_UNSPECIFIED = 0;
        PERSONMETADATA_OBJECTTYPE_PERSON = 1;
        PERSONMETADATA_OBJECTTYPE_PAGE = 2;
    }
    PersonMetadata_ObjectType objectType = 3;
    // Any former resource names this person has had. Populated only for
    // [`connections.list`](/people/api/rest/v1/people.connections/list) requests
    // that include a sync token.
    // 
    // The resource name may change when adding or removing fields that link a
    // contact and profile such as a verified email, verified phone number, or
    // profile URL.
    repeated string previousResourceNames = 4;
    // The sources of data for the person.
    repeated Source sources = 5;
}

message PersonResponse {
    // **DEPRECATED** (Please use status instead)
    // 
    // [HTTP 1.1 status code]
    // (http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).
    int32 httpStatusCode = 1;
    // The person.
    Person person = 2;
    // The original requested resource name. May be different than the resource
    // name on the returned person.
    // 
    // The resource name can change when adding or removing fields that link a
    // contact and profile such as a verified email, verified phone number, or a
    // profile URL.
    string requestedResourceName = 3;
    // The status of the response.
    Status status = 4;
}

message PhoneNumber {
    // The read-only canonicalized [ITU-T E.164](https://law.resource.org/pub/us/cfr/ibr/004/itu-t.E.164.1.2008.pdf)
    // form of the phone number.
    string canonicalForm = 1;
    // The read-only type of the phone number translated and formatted in the
    // viewer's account locale or the `Accept-Language` HTTP header locale.
    string formattedType = 2;
    // Metadata about the phone number.
    FieldMetadata metadata = 3;
    // The type of the phone number. The type can be custom or predefined.
    // Possible values include, but are not limited to, the following:
    // 
    // * `home`
    // * `work`
    // * `mobile`
    // * `homeFax`
    // * `workFax`
    // * `otherFax`
    // * `pager`
    // * `workMobile`
    // * `workPager`
    // * `main`
    // * `googleVoice`
    // * `other`
    string type = 4;
    // The phone number.
    string value = 5;
}

message Photo {
    // True if the photo is a default photo;
    // false if the photo is a user-provided photo.
    bool default = 1;
    // Metadata about the photo.
    FieldMetadata metadata = 2;
    // The URL of the photo. You can change the desired size by appending a query
    // parameter `sz=`<var>size</var> at the end of the url. Example:
    // `https://lh3.googleusercontent.com/-T_wVWLlmg7w/AAAAAAAAAAI/AAAAAAAABa8/00gzXvDBYqw/s100/photo.jpg?sz=50`
    string url = 3;
}

message ProfileMetadata {
    // The profile object type.
    enum ProfileMetadata_ObjectType {
        PROFILEMETADATA_OBJECTTYPE_OBJECT_TYPE_UNSPECIFIED = 0;
        PROFILEMETADATA_OBJECTTYPE_PERSON = 1;
        PROFILEMETADATA_OBJECTTYPE_PAGE = 2;
    }
    ProfileMetadata_ObjectType objectType = 1;
    // The user types.
    repeated string userTypes = 2;
}

message Relation {
    // The type of the relation translated and formatted in the viewer's account
    // locale or the locale specified in the Accept-Language HTTP header.
    string formattedType = 1;
    // Metadata about the relation.
    FieldMetadata metadata = 2;
    // The name of the other person this relation refers to.
    string person = 3;
    // The person's relation to the other person. The type can be custom or predefined.
    // Possible values include, but are not limited to, the following values:
    // 
    // * `spouse`
    // * `child`
    // * `mother`
    // * `father`
    // * `parent`
    // * `brother`
    // * `sister`
    // * `friend`
    // * `relative`
    // * `domesticPartner`
    // * `manager`
    // * `assistant`
    // * `referredBy`
    // * `partner`
    string type = 4;
}

message RelationshipInterest {
    // The value of the relationship interest translated and formatted in the
    // viewer's account locale or the locale specified in the Accept-Language
    // HTTP header.
    string formattedValue = 1;
    // Metadata about the relationship interest.
    FieldMetadata metadata = 2;
    // The kind of relationship the person is looking for. The value can be custom
    // or predefined. Possible values include, but are not limited to, the
    // following values:
    // 
    // * `friend`
    // * `date`
    // * `relationship`
    // * `networking`
    string value = 3;
}

message RelationshipStatus {
    // The read-only value of the relationship status translated and formatted in
    // the viewer's account locale or the `Accept-Language` HTTP header locale.
    string formattedValue = 1;
    // Metadata about the relationship status.
    FieldMetadata metadata = 2;
    // The relationship status. The value can be custom or predefined.
    // Possible values include, but are not limited to, the following:
    // 
    // * `single`
    // * `inARelationship`
    // * `engaged`
    // * `married`
    // * `itsComplicated`
    // * `openRelationship`
    // * `widowed`
    // * `inDomesticPartnership`
    // * `inCivilUnion`
    string value = 3;
}

message Residence {
    // True if the residence is the person's current residence;
    // false if the residence is a past residence.
    bool current = 1;
    // Metadata about the residence.
    FieldMetadata metadata = 2;
    // The address of the residence.
    string value = 3;
}

message Skill {
    // Metadata about the skill.
    FieldMetadata metadata = 1;
    // The skill; for example, `underwater basket weaving`.
    string value = 2;
}

message Source {
    // **Only populated in `person.metadata.sources`.**
    // 
    // The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the
    // source. Used for web cache validation.
    string etag = 1;
    // The unique identifier within the source type generated by the server.
    string id = 2;
    // **Only populated in `person.metadata.sources`.**
    // 
    // Metadata about a source of type PROFILE.
    ProfileMetadata profileMetadata = 3;
    // The source type.
    enum Source_Type {
        SOURCE_TYPE_SOURCE_TYPE_UNSPECIFIED = 0;
        SOURCE_TYPE_ACCOUNT = 1;
        SOURCE_TYPE_PROFILE = 2;
        SOURCE_TYPE_DOMAIN_PROFILE = 3;
        SOURCE_TYPE_CONTACT = 4;
    }
    Source_Type type = 4;
    // **Only populated in `person.metadata.sources`.**
    // 
    // Last update timestamp of this source.
    string updateTime = 5;
}

message Status {
    // The status code, which should be an enum value of google.rpc.Code.
    int32 code = 1;
    // A list of messages that carry the error details.  There is a common set of
    // message types for APIs to use.
    message Detail {
    }
    repeated Detail details = 2;
    // A developer-facing error message, which should be in English. Any
    // user-facing error message should be localized and sent in the
    // google.rpc.Status.details field, or localized by the client.
    string message = 3;
}

message Tagline {
    // Metadata about the tagline.
    FieldMetadata metadata = 1;
    // The tagline.
    string value = 2;
}

message UpdateContactGroupRequest {
    // The contact group to update.
    ContactGroup contactGroup = 1;
}

message Url {
    // The read-only type of the URL translated and formatted in the viewer's
    // account locale or the `Accept-Language` HTTP header locale.
    string formattedType = 1;
    // Metadata about the URL.
    FieldMetadata metadata = 2;
    // The type of the URL. The type can be custom or predefined.
    // Possible values include, but are not limited to, the following:
    // 
    // * `home`
    // * `work`
    // * `blog`
    // * `profile`
    // * `homePage`
    // * `ftp`
    // * `reservations`
    // * `appInstallPage`: website for a Google+ application.
    // * `other`
    string type = 3;
    // The URL.
    string value = 4;
}

message UserDefined {
    // The end user specified key of the user defined data.
    string key = 1;
    // Metadata about the user defined data.
    FieldMetadata metadata = 2;
    // The end user specified value of the user defined data.
    string value = 3;
}

enum Alt {
    JSON = 0;
    MEDIA = 1;
    PROTO = 2;
}

service GooglePeopleService {
    // List all contact groups owned by the authenticated user. Members of the
    // contact groups are not populated.
    rpc GetV1ContactGroups(GetV1ContactGroupsRequest) returns (ListContactGroupsResponse) {
      option (google.api.http) = {
        get: "//v1/contactGroups"
      };
    }
    // Create a new contact group owned by the authenticated user.
    rpc PostV1ContactGroups(PostV1ContactGroupsRequest) returns (ContactGroup) {
      option (google.api.http) = {
        post: "//v1/contactGroups"
        body: "body"
      };
    }
    // Get a list of contact groups owned by the authenticated user by specifying
    // a list of contact group resource names.
    rpc GetV1ContactGroups:BatchGet(GetV1ContactGroups:BatchGetRequest) returns (BatchGetContactGroupsResponse) {
      option (google.api.http) = {
        get: "//v1/contactGroups:batchGet"
      };
    }
    // Provides information about a list of specific people by specifying a list
    // of requested resource names. Use `people/me` to indicate the authenticated
    // user.
    // <br>
    // The request throws a 400 error if 'personFields' is not specified.
    rpc GetV1People:BatchGet(GetV1People:BatchGetRequest) returns (GetPeopleResponse) {
      option (google.api.http) = {
        get: "//v1/people:batchGet"
      };
    }
    // Create a new contact and return the person resource for that contact.
    rpc PostV1People:CreateContact(PostV1People:CreateContactRequest) returns (Person) {
      option (google.api.http) = {
        post: "//v1/people:createContact"
        body: "body"
      };
    }
    // Get a specific contact group owned by the authenticated user by specifying
    // a contact group resource name.
    rpc GetV1ResourceName(GetV1ResourceNameRequest) returns (ContactGroup) {
      option (google.api.http) = {
        get: "//v1/{resourceName}"
      };
    }
    // Update the name of an existing contact group owned by the authenticated
    // user.
    rpc PutV1ResourceName(PutV1ResourceNameRequest) returns (ContactGroup) {
      option (google.api.http) = {
        put: "//v1/{resourceName}"
        body: "body"
      };
    }
    // Delete an existing contact group owned by the authenticated user by
    // specifying a contact group resource name.
    rpc DeleteV1ResourceName(DeleteV1ResourceNameRequest) returns (Empty) {
      option (google.api.http) = {
        delete: "//v1/{resourceName}"
      };
    }
    // Provides a list of the authenticated user's contacts merged with any
    // connected profiles.
    // <br>
    // The request throws a 400 error if 'personFields' is not specified.
    rpc GetV1ResourceNameConnections(GetV1ResourceNameConnectionsRequest) returns (ListConnectionsResponse) {
      option (google.api.http) = {
        get: "//v1/{resourceName}/connections"
      };
    }
    // Modify the members of a contact group owned by the authenticated user.
    rpc PostV1ResourceNameMembers:Modify(PostV1ResourceNameMembers:ModifyRequest) returns (ModifyContactGroupMembersResponse) {
      option (google.api.http) = {
        post: "//v1/{resourceName}/members:modify"
        body: "body"
      };
    }
    // Delete a contact person. Any non-contact data will not be deleted.
    rpc DeleteV1ResourceName:DeleteContact(DeleteV1ResourceName:DeleteContactRequest) returns (Empty) {
      option (google.api.http) = {
        delete: "//v1/{resourceName}:deleteContact"
      };
    }

}

syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package googleappstate;

message GetStatesRequest {
    alt alt = 1;
    string fields = 2;
    // Whether to include the full data in addition to the version number
    bool includeData = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetStatesStateKeyRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    // The key for the data to be retrieved.
    int32 stateKey = 7;
    string userIp = 8;
}

message PutStatesStateKeyRequest {
    alt alt = 1;
    UpdateRequest body = 2;
    // The version of the app state your application is attempting to update. If this does not match the current version, this method will return a conflict error. If there is no data stored on the server for this key, the update will succeed irrespective of the value of this parameter.
    string currentStateVersion = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // The key for the data to be retrieved.
    int32 stateKey = 9;
    string userIp = 10;
}

message DeleteStatesStateKeyRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    // The key for the data to be retrieved.
    int32 stateKey = 7;
    string userIp = 8;
}

message PostStatesStateKeyClearRequest {
    alt alt = 1;
    // The version of the data to be cleared. Version strings are returned by the server.
    string currentDataVersion = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The key for the data to be retrieved.
    int32 stateKey = 8;
    string userIp = 9;
}

message GetResponse {
    // The current app state version.
    string currentStateVersion = 1;
    // The requested data.
    string data = 2;
    // Uniquely identifies the type of this resource. Value is always the fixed string appstate#getResponse.
    string kind = 3;
    // The key for the data.
    int32 stateKey = 4;
}

message ListResponse {
    // The app state data.
    repeated GetResponse items = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string appstate#listResponse.
    string kind = 2;
    // The maximum number of keys allowed for this user.
    int32 maximumKeyCount = 3;
}

message UpdateRequest {
    // The new app state data that your application is trying to update with.
    string data = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string appstate#updateRequest.
    string kind = 2;
}

message WriteResult {
    // The version of the data for this key on the server.
    string currentStateVersion = 1;
    // Uniquely identifies the type of this resource. Value is always the fixed string appstate#writeResult.
    string kind = 2;
    // The written key.
    int32 stateKey = 3;
}

enum Alt {
    JSON = 0;
}

service GoogleAppStateService {
    // Lists all the states keys, and optionally the state data.
    rpc GetStates(GetStatesRequest) returns (ListResponse) {
      option (google.api.http) = {
        get: "/appstate/v1/states"
      };
    }
    // Retrieves the data corresponding to the passed key. If the key does not exist on the server, an HTTP 404 will be returned.
    rpc GetStatesStateKey(GetStatesStateKeyRequest) returns (GetResponse) {
      option (google.api.http) = {
        get: "/appstate/v1/states/{stateKey}"
      };
    }
    // Update the data associated with the input key if and only if the passed version matches the currently stored version. This method is safe in the face of concurrent writes. Maximum per-key size is 128KB.
    rpc PutStatesStateKey(PutStatesStateKeyRequest) returns (WriteResult) {
      option (google.api.http) = {
        put: "/appstate/v1/states/{stateKey}"
        body: "body"
      };
    }
    // Deletes a key and the data associated with it. The key is removed and no longer counts against the key quota. Note that since this method is not safe in the face of concurrent modifications, it should only be used for development and testing purposes. Invoking this method in shipping code can result in data loss and data corruption.
    rpc DeleteStatesStateKey(DeleteStatesStateKeyRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/appstate/v1/states/{stateKey}"
      };
    }
    // Clears (sets to empty) the data for the passed key if and only if the passed version matches the currently stored version. This method results in a conflict error on version mismatch.
    rpc PostStatesStateKeyClear(PostStatesStateKeyClearRequest) returns (WriteResult) {
      option (google.api.http) = {
        post: "/appstate/v1/states/{stateKey}/clear"
      };
    }
}

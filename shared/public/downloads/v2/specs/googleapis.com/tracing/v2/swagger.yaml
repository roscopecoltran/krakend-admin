swagger: '2.0'
schemes:
  - https
host: cloudtrace.googleapis.com
basePath: /
info:
  contact:
    name: Google
    url: 'https://google.com'
  description: |
    Send and retrieve trace data from Stackdriver Trace. Data is generated and available by default for all App Engine applications. Data from other applications can be written to Stackdriver Trace for display, reporting, and analysis.
  license:
    name: Creative Commons Attribution 3.0
    url: 'http://creativecommons.org/licenses/by/3.0/'
  termsOfService: 'https://developers.google.com/terms/'
  title: Stackdriver Trace
  version: v2
  x-apiClientRegistration:
    url: 'https://console.developers.google.com'
  x-logo:
    url: 'https://api.apis.guru/v2/cache/logo/https_www.google.com_images_branding_googlelogo_2x_googlelogo_color_272x92dp.png'
  x-origin:
    - converter:
        url: 'https://github.com/lucybot/api-spec-converter'
        version: 2.0.1
      format: google
      url: 'https://tracing.googleapis.com/$discovery/rest?version=v2'
      version: v1
  x-preferred: true
  x-providerName: googleapis.com
  x-serviceName: tracing
externalDocs:
  url: 'https://cloud.google.com/trace'
securityDefinitions:
  Oauth2:
    authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
    description: Oauth 2.0 implicit authentication
    flow: implicit
    scopes:
      'https://www.googleapis.com/auth/cloud-platform': View and manage your data across Google Cloud Platform services
      'https://www.googleapis.com/auth/trace.append': Write Trace data for a project or application
      'https://www.googleapis.com/auth/trace.readonly': Read Trace data for a project or application
    type: oauth2
  Oauth2c:
    authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
    description: Oauth 2.0 accessCode authentication
    flow: accessCode
    scopes:
      'https://www.googleapis.com/auth/cloud-platform': View and manage your data across Google Cloud Platform services
      'https://www.googleapis.com/auth/trace.append': Write Trace data for a project or application
      'https://www.googleapis.com/auth/trace.readonly': Read Trace data for a project or application
    tokenUrl: 'https://accounts.google.com/o/oauth2/token'
    type: oauth2
parameters:
  $.xgafv:
    description: V1 error format.
    enum:
      - '1'
      - '2'
    in: query
    name: $.xgafv
    type: string
  access_token:
    description: OAuth access token.
    in: query
    name: access_token
    type: string
  alt:
    default: json
    description: Data format for response.
    enum:
      - json
      - media
      - proto
    in: query
    name: alt
    type: string
  bearer_token:
    description: OAuth bearer token.
    in: query
    name: bearer_token
    type: string
  callback:
    description: JSONP
    in: query
    name: callback
    type: string
  fields:
    description: Selector specifying which fields to include in a partial response.
    in: query
    name: fields
    type: string
  key:
    description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
    in: query
    name: key
    type: string
  oauth_token:
    description: OAuth 2.0 token for the current user.
    in: query
    name: oauth_token
    type: string
  pp:
    default: true
    description: Pretty-print response.
    in: query
    name: pp
    type: boolean
  prettyPrint:
    default: true
    description: Returns response with indentations and line breaks.
    in: query
    name: prettyPrint
    type: boolean
  quotaUser:
    description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
    in: query
    name: quotaUser
    type: string
  uploadType:
    description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
    in: query
    name: uploadType
    type: string
  upload_protocol:
    description: 'Upload protocol for media (e.g. "raw", "multipart").'
    in: query
    name: upload_protocol
    type: string
tags:
  - name: projects
paths:
  '/v2/{name}':
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
    put:
      description: Creates a new Span.
      operationId: cloudtrace.projects.traces.spans.create
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Span'
        - description: |-
            The resource name of the span in the following format:

                projects/[PROJECT_ID]traces/[TRACE_ID]/spans/SPAN_ID is a unique identifier for a trace within a project.
            [SPAN_ID] is a unique identifier for a span within a trace,
            assigned when the span is created.
          in: path
          name: name
          required: true
          type: string
          x-reservedExpansion: true
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Span'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/trace.append'
          Oauth2c:
            - 'https://www.googleapis.com/auth/trace.append'
      tags:
        - projects
  '/v2/{name}/traces:batchWrite':
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
    post:
      description: |-
        Sends new spans to Stackdriver Trace or updates existing traces. If the
        name of a trace that you send matches that of an existing trace, new spans
        are added to the existing trace. Attempt to update existing spans results
        undefined behavior. If the name does not match, a new trace is created
        with given set of spans.
      operationId: cloudtrace.projects.traces.batchWrite
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/BatchWriteSpansRequest'
        - description: |-
            Required. Name of the project where the spans belong. The format is
            `projects/PROJECT_ID`.
          in: path
          name: name
          required: true
          type: string
          x-reservedExpansion: true
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Empty'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/trace.append'
          Oauth2c:
            - 'https://www.googleapis.com/auth/trace.append'
      tags:
        - projects
  '/v2/{parent}/traces':
    get:
      description: Returns of a list of traces that match the specified filter conditions.
      operationId: cloudtrace.projects.traces.list
      parameters:
        - description: Optional. Do not return traces whose start time is later than this time.
          in: query
          name: endTime
          type: string
        - description: |-
            Opional. Return only traces that match this
            [trace filter](/trace/docs/trace-filters). Example:

                "label:/http/url root:/_ah/background my_label:17"
          in: query
          name: filter
          type: string
        - description: |-
            Optional. A single field used to sort the returned traces.
            Only the following field names can be used:

            *   `trace_id`: the trace's ID field
            *   `name`:  the root span's resource name
            *   `duration`: the difference between the root span's start time and end time
            *   `start`:  the start time of the root span

            Sorting is in ascending order unless `desc` is appended to the sort field name.
            Example: `"name desc"`).
          in: query
          name: orderBy
          type: string
        - description: |-
            Optional. The maximum number of results to return from this request.
            Non-positive values are ignored. The presence of `next_page_token` in the
            response indicates that more results might be available, even if fewer than
            the maximum number of results is returned by this request.
          in: query
          name: pageSize
          type: integer
        - description: |-
            Optional. If present, then retrieve the next batch of results from the
            preceding call to this method.  `page_token` must be the value of
            `next_page_token` from the previous response.  The values of other method
            parameters should be identical to those in the previous call.
          in: query
          name: pageToken
          type: string
        - description: |-
            Required. The project where the trace data is stored. The format
            is `projects/PROJECT_ID`.
          in: path
          name: parent
          required: true
          type: string
          x-reservedExpansion: true
        - description: Optional. Do not return traces whose end time is earlier than this time.
          in: query
          name: startTime
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/ListTracesResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/trace.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/trace.readonly'
      tags:
        - projects
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
  '/v2/{parent}:listSpans':
    get:
      description: Returns a list of spans within a trace.
      operationId: cloudtrace.projects.traces.listSpans
      parameters:
        - description: |-
            Optional. If present, then retrieve the next batch of results from the
            preceding call to this method. `page_token` must be the value of
            `next_page_token` from the previous response. The values of other method
            parameters should be identical to those in the previous call.
          in: query
          name: pageToken
          type: string
        - description: |-
            Required: The resource name of the trace containing the spans to list.
            The format is `projects/PROJECT_ID/traces/TRACE_ID`.
          in: path
          name: parent
          required: true
          type: string
          x-reservedExpansion: true
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/ListSpansResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/trace.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/trace.readonly'
      tags:
        - projects
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
definitions:
  Annotation:
    description: Text annotation with a set of attributes.
    properties:
      attributes:
        $ref: '#/definitions/Attributes'
        description: |-
          A set of attributes on the annotation. There is a limit of 4 attributes
          per Annotation.
      description:
        $ref: '#/definitions/TruncatableString'
        description: |-
          A user-supplied message describing the event. The maximum length for
          the description is 256 bytes.
    type: object
  AttributeValue:
    description: 'The allowed types for [VALUE] in a `[KEY]:[VALUE]` attribute.'
    properties:
      boolValue:
        description: A Boolean value represented by `true` or `false`.
        type: boolean
      intValue:
        description: A 64-bit signed integer.
        format: int64
        type: string
      stringValue:
        $ref: '#/definitions/TruncatableString'
        description: A string up to 256 bytes long.
    type: object
  Attributes:
    description: 'A set of attributes, each in the format `[KEY]:[VALUE]`.'
    properties:
      attributeMap:
        additionalProperties:
          $ref: '#/definitions/AttributeValue'
        description: |-
          The set of attributes. Each attribute's key can be up to 128 bytes
          long. The value can be a string up to 256 bytes, an integer, or the
          Boolean values `true` and `false`. For example:

              "/instance_id": "my-instance"
              "/http/user_agent": ""
              "/http/request_bytes": 300
              "abc.com/myattribute": true
        type: object
      droppedAttributesCount:
        description: |-
          The number of attributes that were discarded. Attributes can be discarded
          because their keys are too long or because there are too many attributes.
          If this value is 0 then all attributes are valid.
        format: int32
        type: integer
    type: object
  BatchWriteSpansRequest:
    description: The request message for the `BatchWriteSpans` method.
    properties:
      spans:
        description: A collection of spans.
        items:
          $ref: '#/definitions/Span'
        type: array
    type: object
  Empty:
    description: |-
      A generic empty message that you can re-use to avoid defining duplicated
      empty messages in your APIs. A typical example is to use it as the request
      or the response type of an API method. For instance:

          service Foo {
            rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
          }

      The JSON representation for `Empty` is empty JSON object `{}`.
    properties: {}
    type: object
  Link:
    description: |-
      A pointer from the current span to another span in the same trace or in a
      different trace. For example, this can be used in batching operations,
      where a single batch handler processes multiple requests from different
      traces or when the handler receives a request from a different project.
    properties:
      attributes:
        $ref: '#/definitions/Attributes'
        description: |-
          A set of attributes on the link. There is a limit of 32 attributes per
          link.
      spanId:
        description: '`SPAN_ID` identifies a span within a trace.'
        type: string
      traceId:
        description: '`TRACE_ID` identifies a trace within a project.'
        type: string
      type:
        description: The relationship of the current span relative to the linked span.
        enum:
          - TYPE_UNSPECIFIED
          - CHILD_LINKED_SPAN
          - PARENT_LINKED_SPAN
        type: string
    type: object
  Links:
    description: |-
      A collection of links, which are references from this span to a span
      in the same or different trace.
    properties:
      droppedLinksCount:
        description: |-
          The number of dropped links after the maximum size was enforced. If
          this value is 0, then no links were dropped.
        format: int32
        type: integer
      link:
        description: A collection of links.
        items:
          $ref: '#/definitions/Link'
        type: array
    type: object
  ListSpansResponse:
    description: The response message for the `ListSpans` method.
    properties:
      nextPageToken:
        description: |-
          If defined, indicates that there might be more spans that match the
          request. Pass this as the value of `pageToken` in a subsequent request to
          retrieve additional spans.
        type: string
      spans:
        description: 'The requested spans, if there are any in the specified trace.'
        items:
          $ref: '#/definitions/Span'
        type: array
    type: object
  ListTracesResponse:
    description: The response message for the `ListTraces` method.
    properties:
      nextPageToken:
        description: |-
          If there might be more results than those appearing in this response, then
          `next_page_token` is included.  To get the next set of results, call this
          method again using the value of `next_page_token` as `page_token`.
        type: string
      traces:
        description: List of trace records returned.
        items:
          $ref: '#/definitions/Trace'
        type: array
    type: object
  Module:
    description: Binary module.
    properties:
      buildId:
        $ref: '#/definitions/TruncatableString'
        description: |-
          A unique identifier for the module, usually a hash of its
          contents (up to 128 bytes).
      module:
        $ref: '#/definitions/TruncatableString'
        description: |-
          For example: main binary, kernel modules, and dynamic libraries
          such as libc.so, sharedlib.so (up to 256 bytes).
    type: object
  NetworkEvent:
    description: An event describing an RPC message sent or received on the network.
    properties:
      messageId:
        description: 'An identifier for the message, which must be unique in this span.'
        format: uint64
        type: string
      messageSize:
        description: The number of bytes sent or received.
        format: uint64
        type: string
      time:
        description: |-
          For sent messages, this is the time at which the first bit was sent.
          For received messages, this is the time at which the last bit was
          received.
        format: google-datetime
        type: string
      type:
        description: |-
          Type of NetworkEvent. Indicates whether the RPC message was sent or
          received.
        enum:
          - TYPE_UNSPECIFIED
          - SENT
          - RECV
        type: string
    type: object
  Span:
    description: |-
      A span represents a single operation within a trace. Spans can be
      nested to form a trace tree. Often, a trace contains a root span
      that describes the end-to-end latency, and one or more subspans for
      its sub-operations. A trace can also contain multiple root spans,
      or none at all. Spans do not need to be contiguous&mdash;there may be
      gaps or overlaps between spans in a trace.
    properties:
      attributes:
        $ref: '#/definitions/Attributes'
        description: |-
          A set of attributes on the span. There is a limit of 32 attributes per
          span.
      childSpanCount:
        description: |-
          An optional number of child spans that were generated while this span
          was active. If set, allows implementation to detect missing child spans.
        format: uint32
        type: integer
      displayName:
        $ref: '#/definitions/TruncatableString'
        description: |-
          A description of the span's operation (up to 128 bytes).
          Stackdriver Trace displays the description in the
          {% dynamic print site_values.console_name %}.
          For example, the display name can be a qualified method name or a file name
          and a line number where the operation is called. A best practice is to use
          the same display name within an application and at the same call point.
          This makes it easier to correlate spans in different traces.
      endTime:
        description: |-
          The end time of the span. On the client side, this is the time kept by
          the local machine where the span execution ends. On the server side, this
          is the time when the server application handler stops running.
        format: google-datetime
        type: string
      links:
        $ref: '#/definitions/Links'
        description: A maximum of 128 links are allowed per Span.
      name:
        description: |-
          The resource name of the span in the following format:

              projects/[PROJECT_ID]traces/[TRACE_ID]/spans/SPAN_ID is a unique identifier for a trace within a project.
          [SPAN_ID] is a unique identifier for a span within a trace,
          assigned when the span is created.
        type: string
      parentSpanId:
        description: |-
          The [SPAN_ID] of this span's parent span. If this is a root span,
          then this field must be empty.
        type: string
      sameProcessAsParentSpan:
        description: |-
          A highly recommended but not required flag that identifies when a trace
          crosses a process boundary. True when the parent_span belongs to the
          same process as the current span.
        type: boolean
      spanId:
        description: 'The [SPAN_ID] portion of the span''s resource name.'
        type: string
      stackTrace:
        $ref: '#/definitions/StackTrace'
        description: Stack trace captured at the start of the span.
      startTime:
        description: |-
          The start time of the span. On the client side, this is the time kept by
          the local machine where the span execution starts. On the server side, this
          is the time when the server's application handler starts running.
        format: google-datetime
        type: string
      status:
        $ref: '#/definitions/Status'
        description: An optional final status for this span.
      timeEvents:
        $ref: '#/definitions/TimeEvents'
        description: |-
          The included time events. There can be up to 32 annotations and 128 network
          events per span.
    type: object
  StackFrame:
    description: Represents a single stack frame in a stack trace.
    properties:
      columnNumber:
        description: |-
          The column number where the function call appears, if available.
          This is important in JavaScript because of its anonymous functions.
        format: int64
        type: string
      fileName:
        $ref: '#/definitions/TruncatableString'
        description: |-
          The name of the source file where the function call appears (up to 256
          bytes).
      functionName:
        $ref: '#/definitions/TruncatableString'
        description: |-
          The fully-qualified name that uniquely identifies the function or
          method that is active in this frame (up to 1024 bytes).
      lineNumber:
        description: The line number in `file_name` where the function call appears.
        format: int64
        type: string
      loadModule:
        $ref: '#/definitions/Module'
        description: The binary module from where the code was loaded.
      originalFunctionName:
        $ref: '#/definitions/TruncatableString'
        description: |-
          An un-mangled function name, if `function_name` is
          [mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can
          be fully-qualified (up to 1024 bytes).
      sourceVersion:
        $ref: '#/definitions/TruncatableString'
        description: The version of the deployed source code (up to 128 bytes).
    type: object
  StackFrames:
    description: 'A collection of stack frames, which can be truncated.'
    properties:
      droppedFramesCount:
        description: |-
          The number of stack frames that were dropped because there
          were too many stack frames.
          If this value is 0, then no stack frames were dropped.
        format: int32
        type: integer
      frame:
        description: Stack frames in this call stack.
        items:
          $ref: '#/definitions/StackFrame'
        type: array
    type: object
  StackTrace:
    description: A call stack appearing in a trace.
    properties:
      stackFrames:
        $ref: '#/definitions/StackFrames'
        description: Stack frames in this stack trace. A maximum of 128 frames are allowed.
      stackTraceHashId:
        description: |-
          The hash ID is used to conserve network bandwidth for duplicate
          stack traces within a single trace.

          Often multiple spans will have identical stack traces.
          The first occurrence of a stack trace should contain both the
          `stackFrame` content and a value in `stackTraceHashId`.

          Subsequent spans within the same request can refer
          to that stack trace by only setting `stackTraceHashId`.
        format: uint64
        type: string
    type: object
  Status:
    description: |-
      The `Status` type defines a logical error model that is suitable for different
      programming environments, including REST APIs and RPC APIs. It is used by
      [gRPC](https://github.com/grpc). The error model is designed to be:

      - Simple to use and understand for most users
      - Flexible enough to meet unexpected needs

      # Overview

      The `Status` message contains three pieces of data: error code, error message,
      and error details. The error code should be an enum value of
      google.rpc.Code, but it may accept additional error codes if needed.  The
      error message should be a developer-facing English message that helps
      developers *understand* and *resolve* the error. If a localized user-facing
      error message is needed, put the localized message in the error details or
      localize it in the client. The optional error details may contain arbitrary
      information about the error. There is a predefined set of error detail types
      in the package `google.rpc` that can be used for common error conditions.

      # Language mapping

      The `Status` message is the logical representation of the error model, but it
      is not necessarily the actual wire format. When the `Status` message is
      exposed in different client libraries and different wire protocols, it can be
      mapped differently. For example, it will likely be mapped to some exceptions
      in Java, but more likely mapped to some error codes in C.

      # Other uses

      The error model and the `Status` message can be used in a variety of
      environments, either with or without APIs, to provide a
      consistent developer experience across different environments.

      Example uses of this error model include:

      - Partial errors. If a service needs to return partial errors to the client,
          it may embed the `Status` in the normal response to indicate the partial
          errors.

      - Workflow errors. A typical workflow has multiple steps. Each step may
          have a `Status` message for error reporting.

      - Batch operations. If a client uses batch request and batch response, the
          `Status` message should be used directly inside batch response, one for
          each error sub-response.

      - Asynchronous operations. If an API call embeds asynchronous operation
          results in its response, the status of those operations should be
          represented directly using the `Status` message.

      - Logging. If some API errors are stored in logs, the message `Status` could
          be used directly after any stripping needed for security/privacy reasons.
    properties:
      code:
        description: 'The status code, which should be an enum value of google.rpc.Code.'
        format: int32
        type: integer
      details:
        description: |-
          A list of messages that carry the error details.  There will be a
          common set of message types for APIs to use.
        items:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          type: object
        type: array
      message:
        description: |-
          A developer-facing error message, which should be in English. Any
          user-facing error message should be localized and sent in the
          google.rpc.Status.details field, or localized by the client.
        type: string
    type: object
  TimeEvent:
    description: A time-stamped annotation or network event in the Span.
    properties:
      annotation:
        $ref: '#/definitions/Annotation'
        description: 'One or more key:value pairs.'
      networkEvent:
        $ref: '#/definitions/NetworkEvent'
        description: An event describing an RPC message sent/received on the network.
      time:
        description: The timestamp indicating the time the event occurred.
        format: google-datetime
        type: string
    type: object
  TimeEvents:
    description: |-
      A collection of `TimeEvent`s. A `TimeEvent` is a time-stamped annotation
      on the span, consisting of either user-supplied key:value pairs, or
      details of an RPC message sent/received on the network.
    properties:
      droppedAnnotationsCount:
        description: |-
          The number of dropped annotations in all the included time events.
          If the value is 0, then no annotations were dropped.
        format: int32
        type: integer
      droppedNetworkEventsCount:
        description: |-
          The number of dropped network events in all the included time events.
          If the value is 0, then no network events were dropped.
        format: int32
        type: integer
      timeEvent:
        description: A collection of `TimeEvent`s.
        items:
          $ref: '#/definitions/TimeEvent'
        type: array
    type: object
  Trace:
    description: |-
      A trace describes how long it takes for an application to perform some
      operations. It consists of a set of spans, each representing
      an operation and including time information and operation details.
    properties:
      name:
        description: |-
          The resource name of the trace in the following format:

              projects/[PROJECT_ID]/traces/TRACE_ID is a unique identifier for a trace within a project.
          The ID is assigned when the trace is created.
        type: string
    type: object
  TruncatableString:
    description: Represents a string that might be shortened to a specified length.
    properties:
      truncatedByteCount:
        description: |-
          The number of bytes removed from the original string. If this
          value is 0, then the string was not shortened.
        format: int32
        type: integer
      value:
        description: |-
          The shortened string. For example, if the original string was 500
          bytes long and the limit of the string was 128 bytes, then this
          value contains the first 128 bytes of the 500-byte string. Note that
          truncation always happens on the character boundary, to ensure that
          truncated string is still valid UTF8. In case of multi-byte characters,
          size of truncated string can be less than truncation limit.
        type: string
    type: object

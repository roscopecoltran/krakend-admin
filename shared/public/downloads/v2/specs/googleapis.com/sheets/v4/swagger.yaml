swagger: '2.0'
schemes:
  - https
host: sheets.googleapis.com
basePath: /
info:
  contact:
    name: Google
    url: 'https://google.com'
  description: Reads and writes Google Sheets.
  title: Google Sheets
  version: v4
  x-apiClientRegistration:
    url: 'https://console.developers.google.com'
  x-logo:
    url: 'https://api.apis.guru/v2/cache/logo/https_www.google.com_images_branding_googlelogo_2x_googlelogo_color_272x92dp.png'
  x-origin:
    - converter:
        url: 'https://github.com/lucybot/api-spec-converter'
        version: 2.6.0
      format: google
      url: 'https://sheets.googleapis.com/$discovery/rest?version=v4'
      version: v1
  x-preferred: true
  x-providerName: googleapis.com
  x-serviceName: sheets
externalDocs:
  url: 'https://developers.google.com/sheets/'
securityDefinitions:
  Oauth2:
    authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
    description: Oauth 2.0 authentication
    flow: implicit
    scopes:
      'https://www.googleapis.com/auth/drive': View and manage the files in your Google Drive
      'https://www.googleapis.com/auth/drive.file': View and manage Google Drive files and folders that you have opened or created with this app
      'https://www.googleapis.com/auth/drive.readonly': View the files in your Google Drive
      'https://www.googleapis.com/auth/spreadsheets': View and manage your spreadsheets in Google Drive
      'https://www.googleapis.com/auth/spreadsheets.readonly': View your Google Spreadsheets
    type: oauth2
parameters:
  $.xgafv:
    description: V1 error format.
    enum:
      - '1'
      - '2'
    in: query
    name: $.xgafv
    type: string
  access_token:
    description: OAuth access token.
    in: query
    name: access_token
    type: string
  alt:
    default: json
    description: Data format for response.
    enum:
      - json
      - media
      - proto
    in: query
    name: alt
    type: string
  bearer_token:
    description: OAuth bearer token.
    in: query
    name: bearer_token
    type: string
  callback:
    description: JSONP
    in: query
    name: callback
    type: string
  fields:
    description: Selector specifying which fields to include in a partial response.
    in: query
    name: fields
    type: string
  key:
    description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
    in: query
    name: key
    type: string
  oauth_token:
    description: OAuth 2.0 token for the current user.
    in: query
    name: oauth_token
    type: string
  pp:
    default: true
    description: Pretty-print response.
    in: query
    name: pp
    type: boolean
  prettyPrint:
    default: true
    description: Returns response with indentations and line breaks.
    in: query
    name: prettyPrint
    type: boolean
  quotaUser:
    description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
    in: query
    name: quotaUser
    type: string
  uploadType:
    description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
    in: query
    name: uploadType
    type: string
  upload_protocol:
    description: 'Upload protocol for media (e.g. "raw", "multipart").'
    in: query
    name: upload_protocol
    type: string
tags:
  - name: spreadsheets
paths:
  /v4/spreadsheets:
    parameters:
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/upload_protocol'
    post:
      description: 'Creates a spreadsheet, returning the newly created spreadsheet.'
      operationId: sheets.spreadsheets.create
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Spreadsheet'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Spreadsheet'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive'
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive.file'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spreadsheets'
      tags:
        - spreadsheets
  '/v4/spreadsheets/{spreadsheetId}':
    get:
      description: |-
        Returns the spreadsheet at the given ID.
        The caller must specify the spreadsheet ID.

        By default, data within grids will not be returned.
        You can include grid data one of two ways:

        * Specify a field mask listing your desired fields using the `fields` URL
        parameter in HTTP

        * Set the includeGridData
        URL parameter to true.  If a field mask is set, the `includeGridData`
        parameter is ignored

        For large spreadsheets, it is recommended to retrieve only the specific
        fields of the spreadsheet that you want.

        To retrieve only subsets of the spreadsheet, use the
        ranges URL parameter.
        Multiple ranges can be specified.  Limiting the range will
        return only the portions of the spreadsheet that intersect the requested
        ranges. Ranges are specified using A1 notation.
      operationId: sheets.spreadsheets.get
      parameters:
        - description: The spreadsheet to request.
          in: path
          name: spreadsheetId
          required: true
          type: string
        - collectionFormat: multi
          description: The ranges to retrieve from the spreadsheet.
          in: query
          items:
            type: string
          name: ranges
          type: array
        - description: |-
            True if grid data should be returned.
            This parameter is ignored if a field mask was set in the request.
          in: query
          name: includeGridData
          type: boolean
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Spreadsheet'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive'
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive.file'
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spreadsheets'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spreadsheets.readonly'
      tags:
        - spreadsheets
    parameters:
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/upload_protocol'
  '/v4/spreadsheets/{spreadsheetId}/developerMetadata/{metadataId}':
    get:
      description: |-
        Returns the developer metadata with the specified ID.
        The caller must specify the spreadsheet ID and the developer metadata's
        unique metadataId.
      operationId: sheets.spreadsheets.developerMetadata.get
      parameters:
        - description: The ID of the developer metadata to retrieve.
          in: path
          name: metadataId
          required: true
          type: integer
        - description: The ID of the spreadsheet to retrieve metadata from.
          in: path
          name: spreadsheetId
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/DeveloperMetadata'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive'
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive.file'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spreadsheets'
      tags:
        - spreadsheets
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
  '/v4/spreadsheets/{spreadsheetId}/developerMetadata:search':
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
    post:
      description: |-
        Returns all developer metadata matching the specified DataFilter.
        If the provided DataFilter represents a DeveloperMetadataLookup object,
        this will return all DeveloperMetadata entries selected by it. If the
        DataFilter represents a location in a spreadsheet, this will return all
        developer metadata associated with locations intersecting that region.
      operationId: sheets.spreadsheets.developerMetadata.search
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/SearchDeveloperMetadataRequest'
        - description: The ID of the spreadsheet to retrieve metadata from.
          in: path
          name: spreadsheetId
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/SearchDeveloperMetadataResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive'
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive.file'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spreadsheets'
      tags:
        - spreadsheets
  '/v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo':
    parameters:
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/upload_protocol'
    post:
      description: |-
        Copies a single sheet from a spreadsheet to another spreadsheet.
        Returns the properties of the newly created sheet.
      operationId: sheets.spreadsheets.sheets.copyTo
      parameters:
        - description: The ID of the spreadsheet containing the sheet to copy.
          in: path
          name: spreadsheetId
          required: true
          type: string
        - description: The ID of the sheet to copy.
          in: path
          name: sheetId
          required: true
          type: integer
        - in: body
          name: body
          schema:
            $ref: '#/definitions/CopySheetToAnotherSpreadsheetRequest'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/SheetProperties'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive'
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive.file'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spreadsheets'
      tags:
        - spreadsheets
  '/v4/spreadsheets/{spreadsheetId}/values/{range}':
    get:
      description: |-
        Returns a range of values from a spreadsheet.
        The caller must specify the spreadsheet ID and a range.
      operationId: sheets.spreadsheets.values.get
      parameters:
        - description: The ID of the spreadsheet to retrieve data from.
          in: path
          name: spreadsheetId
          required: true
          type: string
        - description: The A1 notation of the values to retrieve.
          in: path
          name: range
          required: true
          type: string
        - description: |-
            The major dimension that results should use.

            For example, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`,
            then requesting `range=A1:B2,majorDimension=ROWS` will return
            `[[1,2],[3,4]]`,
            whereas requesting `range=A1:B2,majorDimension=COLUMNS` will return
            `[[1,3],[2,4]]`.
          enum:
            - DIMENSION_UNSPECIFIED
            - ROWS
            - COLUMNS
          in: query
          name: majorDimension
          type: string
        - description: |-
            How values should be represented in the output.
            The default render option is ValueRenderOption.FORMATTED_VALUE.
          enum:
            - FORMATTED_VALUE
            - UNFORMATTED_VALUE
            - FORMULA
          in: query
          name: valueRenderOption
          type: string
        - description: |-
            How dates, times, and durations should be represented in the output.
            This is ignored if value_render_option is
            FORMATTED_VALUE.
            The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].
          enum:
            - SERIAL_NUMBER
            - FORMATTED_STRING
          in: query
          name: dateTimeRenderOption
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/ValueRange'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive'
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive.file'
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spreadsheets'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spreadsheets.readonly'
      tags:
        - spreadsheets
    parameters:
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/upload_protocol'
    put:
      description: |-
        Sets values in a range of a spreadsheet.
        The caller must specify the spreadsheet ID, range, and
        a valueInputOption.
      operationId: sheets.spreadsheets.values.update
      parameters:
        - description: The ID of the spreadsheet to update.
          in: path
          name: spreadsheetId
          required: true
          type: string
        - description: The A1 notation of the values to update.
          in: path
          name: range
          required: true
          type: string
        - description: |-
            Determines how values in the response should be rendered.
            The default render option is ValueRenderOption.FORMATTED_VALUE.
          enum:
            - FORMATTED_VALUE
            - UNFORMATTED_VALUE
            - FORMULA
          in: query
          name: responseValueRenderOption
          type: string
        - description: How the input data should be interpreted.
          enum:
            - INPUT_VALUE_OPTION_UNSPECIFIED
            - RAW
            - USER_ENTERED
          in: query
          name: valueInputOption
          type: string
        - description: |-
            Determines how dates, times, and durations in the response should be
            rendered. This is ignored if response_value_render_option is
            FORMATTED_VALUE.
            The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].
          enum:
            - SERIAL_NUMBER
            - FORMATTED_STRING
          in: query
          name: responseDateTimeRenderOption
          type: string
        - description: |-
            Determines if the update response should include the values
            of the cells that were updated. By default, responses
            do not include the updated values.
            If the range to write was larger than than the range actually written,
            the response will include all values in the requested range (excluding
            trailing empty rows and columns).
          in: query
          name: includeValuesInResponse
          type: boolean
        - in: body
          name: body
          schema:
            $ref: '#/definitions/ValueRange'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/UpdateValuesResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive'
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive.file'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spreadsheets'
      tags:
        - spreadsheets
  '/v4/spreadsheets/{spreadsheetId}/values/{range}:append':
    parameters:
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/upload_protocol'
    post:
      description: |-
        Appends values to a spreadsheet. The input range is used to search for
        existing data and find a "table" within that range. Values will be
        appended to the next row of the table, starting with the first column of
        the table. See the
        [guide](/sheets/api/guides/values#appending_values)
        and
        [sample code](/sheets/api/samples/writing#append_values)
        for specific details of how tables are detected and data is appended.

        The caller must specify the spreadsheet ID, range, and
        a valueInputOption.  The `valueInputOption` only
        controls how the input data will be added to the sheet (column-wise or
        row-wise), it does not influence what cell the data starts being written
        to.
      operationId: sheets.spreadsheets.values.append
      parameters:
        - description: The ID of the spreadsheet to update.
          in: path
          name: spreadsheetId
          required: true
          type: string
        - description: |-
            The A1 notation of a range to search for a logical table of data.
            Values will be appended after the last row of the table.
          in: path
          name: range
          required: true
          type: string
        - description: |-
            Determines if the update response should include the values
            of the cells that were appended. By default, responses
            do not include the updated values.
          in: query
          name: includeValuesInResponse
          type: boolean
        - description: |-
            Determines how values in the response should be rendered.
            The default render option is ValueRenderOption.FORMATTED_VALUE.
          enum:
            - FORMATTED_VALUE
            - UNFORMATTED_VALUE
            - FORMULA
          in: query
          name: responseValueRenderOption
          type: string
        - description: How the input data should be inserted.
          enum:
            - OVERWRITE
            - INSERT_ROWS
          in: query
          name: insertDataOption
          type: string
        - description: How the input data should be interpreted.
          enum:
            - INPUT_VALUE_OPTION_UNSPECIFIED
            - RAW
            - USER_ENTERED
          in: query
          name: valueInputOption
          type: string
        - description: |-
            Determines how dates, times, and durations in the response should be
            rendered. This is ignored if response_value_render_option is
            FORMATTED_VALUE.
            The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].
          enum:
            - SERIAL_NUMBER
            - FORMATTED_STRING
          in: query
          name: responseDateTimeRenderOption
          type: string
        - in: body
          name: body
          schema:
            $ref: '#/definitions/ValueRange'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/AppendValuesResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive'
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive.file'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spreadsheets'
      tags:
        - spreadsheets
  '/v4/spreadsheets/{spreadsheetId}/values/{range}:clear':
    parameters:
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/upload_protocol'
    post:
      description: |-
        Clears values from a spreadsheet.
        The caller must specify the spreadsheet ID and range.
        Only values are cleared -- all other properties of the cell (such as
        formatting, data validation, etc..) are kept.
      operationId: sheets.spreadsheets.values.clear
      parameters:
        - description: The ID of the spreadsheet to update.
          in: path
          name: spreadsheetId
          required: true
          type: string
        - description: The A1 notation of the values to clear.
          in: path
          name: range
          required: true
          type: string
        - in: body
          name: body
          schema:
            $ref: '#/definitions/ClearValuesRequest'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/ClearValuesResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive'
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive.file'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spreadsheets'
      tags:
        - spreadsheets
  '/v4/spreadsheets/{spreadsheetId}/values:batchClear':
    parameters:
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/upload_protocol'
    post:
      description: |-
        Clears one or more ranges of values from a spreadsheet.
        The caller must specify the spreadsheet ID and one or more ranges.
        Only values are cleared -- all other properties of the cell (such as
        formatting, data validation, etc..) are kept.
      operationId: sheets.spreadsheets.values.batchClear
      parameters:
        - description: The ID of the spreadsheet to update.
          in: path
          name: spreadsheetId
          required: true
          type: string
        - in: body
          name: body
          schema:
            $ref: '#/definitions/BatchClearValuesRequest'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/BatchClearValuesResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive'
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive.file'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spreadsheets'
      tags:
        - spreadsheets
  '/v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter':
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
    post:
      description: |-
        Clears one or more ranges of values from a spreadsheet.
        The caller must specify the spreadsheet ID and one or more
        DataFilters. Ranges matching any of the specified data
        filters will be cleared.  Only values are cleared -- all other properties
        of the cell (such as formatting, data validation, etc..) are kept.
      operationId: sheets.spreadsheets.values.batchClearByDataFilter
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/BatchClearValuesByDataFilterRequest'
        - description: The ID of the spreadsheet to update.
          in: path
          name: spreadsheetId
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/BatchClearValuesByDataFilterResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive'
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive.file'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spreadsheets'
      tags:
        - spreadsheets
  '/v4/spreadsheets/{spreadsheetId}/values:batchGet':
    get:
      description: |-
        Returns one or more ranges of values from a spreadsheet.
        The caller must specify the spreadsheet ID and one or more ranges.
      operationId: sheets.spreadsheets.values.batchGet
      parameters:
        - description: The ID of the spreadsheet to retrieve data from.
          in: path
          name: spreadsheetId
          required: true
          type: string
        - description: |-
            How values should be represented in the output.
            The default render option is ValueRenderOption.FORMATTED_VALUE.
          enum:
            - FORMATTED_VALUE
            - UNFORMATTED_VALUE
            - FORMULA
          in: query
          name: valueRenderOption
          type: string
        - description: |-
            How dates, times, and durations should be represented in the output.
            This is ignored if value_render_option is
            FORMATTED_VALUE.
            The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].
          enum:
            - SERIAL_NUMBER
            - FORMATTED_STRING
          in: query
          name: dateTimeRenderOption
          type: string
        - collectionFormat: multi
          description: The A1 notation of the values to retrieve.
          in: query
          items:
            type: string
          name: ranges
          type: array
        - description: |-
            The major dimension that results should use.

            For example, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`,
            then requesting `range=A1:B2,majorDimension=ROWS` will return
            `[[1,2],[3,4]]`,
            whereas requesting `range=A1:B2,majorDimension=COLUMNS` will return
            `[[1,3],[2,4]]`.
          enum:
            - DIMENSION_UNSPECIFIED
            - ROWS
            - COLUMNS
          in: query
          name: majorDimension
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/BatchGetValuesResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive'
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive.file'
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spreadsheets'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spreadsheets.readonly'
      tags:
        - spreadsheets
    parameters:
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/upload_protocol'
  '/v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter':
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
    post:
      description: |-
        Returns one or more ranges of values that match the specified data filters.
        The caller must specify the spreadsheet ID and one or more
        DataFilters.  Ranges that match any of the data filters in
        the request will be returned.
      operationId: sheets.spreadsheets.values.batchGetByDataFilter
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/BatchGetValuesByDataFilterRequest'
        - description: The ID of the spreadsheet to retrieve data from.
          in: path
          name: spreadsheetId
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/BatchGetValuesByDataFilterResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive'
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive.file'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spreadsheets'
      tags:
        - spreadsheets
  '/v4/spreadsheets/{spreadsheetId}/values:batchUpdate':
    parameters:
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/upload_protocol'
    post:
      description: |-
        Sets values in one or more ranges of a spreadsheet.
        The caller must specify the spreadsheet ID,
        a valueInputOption, and one or more
        ValueRanges.
      operationId: sheets.spreadsheets.values.batchUpdate
      parameters:
        - description: The ID of the spreadsheet to update.
          in: path
          name: spreadsheetId
          required: true
          type: string
        - in: body
          name: body
          schema:
            $ref: '#/definitions/BatchUpdateValuesRequest'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/BatchUpdateValuesResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive'
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive.file'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spreadsheets'
      tags:
        - spreadsheets
  '/v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter':
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
    post:
      description: |-
        Sets values in one or more ranges of a spreadsheet.
        The caller must specify the spreadsheet ID,
        a valueInputOption, and one or more
        DataFilterValueRanges.
      operationId: sheets.spreadsheets.values.batchUpdateByDataFilter
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/BatchUpdateValuesByDataFilterRequest'
        - description: The ID of the spreadsheet to update.
          in: path
          name: spreadsheetId
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/BatchUpdateValuesByDataFilterResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive'
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive.file'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spreadsheets'
      tags:
        - spreadsheets
  '/v4/spreadsheets/{spreadsheetId}:batchUpdate':
    parameters:
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/upload_protocol'
    post:
      description: |-
        Applies one or more updates to the spreadsheet.

        Each request is validated before
        being applied. If any request is not valid then the entire request will
        fail and nothing will be applied.

        Some requests have replies to
        give you some information about how
        they are applied. The replies will mirror the requests.  For example,
        if you applied 4 updates and the 3rd one had a reply, then the
        response will have 2 empty replies, the actual reply, and another empty
        reply, in that order.

        Due to the collaborative nature of spreadsheets, it is not guaranteed that
        the spreadsheet will reflect exactly your changes after this completes,
        however it is guaranteed that the updates in the request will be
        applied together atomically. Your changes may be altered with respect to
        collaborator changes. If there are no collaborators, the spreadsheet
        should reflect your changes.
      operationId: sheets.spreadsheets.batchUpdate
      parameters:
        - description: The spreadsheet to apply the updates to.
          in: path
          name: spreadsheetId
          required: true
          type: string
        - in: body
          name: body
          schema:
            $ref: '#/definitions/BatchUpdateSpreadsheetRequest'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/BatchUpdateSpreadsheetResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive'
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive.file'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spreadsheets'
      tags:
        - spreadsheets
  '/v4/spreadsheets/{spreadsheetId}:getByDataFilter':
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
    post:
      description: |-
        Returns the spreadsheet at the given ID.
        The caller must specify the spreadsheet ID.

        This method differs from GetSpreadsheet in that it allows selecting
        which subsets of spreadsheet data to return by specifying a
        dataFilters parameter.
        Multiple DataFilters can be specified.  Specifying one or
        more data filters will return the portions of the spreadsheet that
        intersect ranges matched by any of the filters.

        By default, data within grids will not be returned.
        You can include grid data one of two ways:

        * Specify a field mask listing your desired fields using the `fields` URL
        parameter in HTTP

        * Set the includeGridData
        parameter to true.  If a field mask is set, the `includeGridData`
        parameter is ignored

        For large spreadsheets, it is recommended to retrieve only the specific
        fields of the spreadsheet that you want.
      operationId: sheets.spreadsheets.getByDataFilter
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/GetSpreadsheetByDataFilterRequest'
        - description: The spreadsheet to request.
          in: path
          name: spreadsheetId
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Spreadsheet'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive'
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive.file'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spreadsheets'
      tags:
        - spreadsheets
definitions:
  AddBandingRequest:
    description: Adds a new banded range to the spreadsheet.
    properties:
      bandedRange:
        $ref: '#/definitions/BandedRange'
        description: |-
          The banded range to add. The bandedRangeId
          field is optional; if one is not set, an id will be randomly generated. (It
          is an error to specify the ID of a range that already exists.)
    type: object
  AddBandingResponse:
    description: The result of adding a banded range.
    properties:
      bandedRange:
        $ref: '#/definitions/BandedRange'
        description: The banded range that was added.
    type: object
  AddChartRequest:
    description: Adds a chart to a sheet in the spreadsheet.
    properties:
      chart:
        $ref: '#/definitions/EmbeddedChart'
        description: |-
          The chart that should be added to the spreadsheet, including the position
          where it should be placed. The chartId
          field is optional; if one is not set, an id will be randomly generated. (It
          is an error to specify the ID of a chart that already exists.)
    type: object
  AddChartResponse:
    description: The result of adding a chart to a spreadsheet.
    properties:
      chart:
        $ref: '#/definitions/EmbeddedChart'
        description: The newly added chart.
    type: object
  AddConditionalFormatRuleRequest:
    description: |-
      Adds a new conditional format rule at the given index.
      All subsequent rules' indexes are incremented.
    properties:
      index:
        description: The zero-based index where the rule should be inserted.
        format: int32
        type: integer
      rule:
        $ref: '#/definitions/ConditionalFormatRule'
        description: The rule to add.
    type: object
  AddFilterViewRequest:
    description: Adds a filter view.
    properties:
      filter:
        $ref: '#/definitions/FilterView'
        description: |-
          The filter to add. The filterViewId
          field is optional; if one is not set, an id will be randomly generated. (It
          is an error to specify the ID of a filter that already exists.)
    type: object
  AddFilterViewResponse:
    description: The result of adding a filter view.
    properties:
      filter:
        $ref: '#/definitions/FilterView'
        description: The newly added filter view.
    type: object
  AddNamedRangeRequest:
    description: Adds a named range to the spreadsheet.
    properties:
      namedRange:
        $ref: '#/definitions/NamedRange'
        description: |-
          The named range to add. The namedRangeId
          field is optional; if one is not set, an id will be randomly generated. (It
          is an error to specify the ID of a range that already exists.)
    type: object
  AddNamedRangeResponse:
    description: The result of adding a named range.
    properties:
      namedRange:
        $ref: '#/definitions/NamedRange'
        description: The named range to add.
    type: object
  AddProtectedRangeRequest:
    description: Adds a new protected range.
    properties:
      protectedRange:
        $ref: '#/definitions/ProtectedRange'
        description: |-
          The protected range to be added. The
          protectedRangeId field is optional; if
          one is not set, an id will be randomly generated. (It is an error to
          specify the ID of a range that already exists.)
    type: object
  AddProtectedRangeResponse:
    description: The result of adding a new protected range.
    properties:
      protectedRange:
        $ref: '#/definitions/ProtectedRange'
        description: The newly added protected range.
    type: object
  AddSheetRequest:
    description: |-
      Adds a new sheet.
      When a sheet is added at a given index,
      all subsequent sheets' indexes are incremented.
      To add an object sheet, use AddChartRequest instead and specify
      EmbeddedObjectPosition.sheetId or
      EmbeddedObjectPosition.newSheet.
    properties:
      properties:
        $ref: '#/definitions/SheetProperties'
        description: |-
          The properties the new sheet should have.
          All properties are optional.
          The sheetId field is optional; if one is not
          set, an id will be randomly generated. (It is an error to specify the ID
          of a sheet that already exists.)
    type: object
  AddSheetResponse:
    description: The result of adding a sheet.
    properties:
      properties:
        $ref: '#/definitions/SheetProperties'
        description: The properties of the newly added sheet.
    type: object
  AppendCellsRequest:
    description: |-
      Adds new cells after the last row with data in a sheet,
      inserting new rows into the sheet if necessary.
    properties:
      fields:
        description: |-
          The fields of CellData that should be updated.
          At least one field must be specified.
          The root is the CellData; 'row.values.' should not be specified.
          A single `"*"` can be used as short-hand for listing every field.
        format: google-fieldmask
        type: string
      rows:
        description: The data to append.
        items:
          $ref: '#/definitions/RowData'
        type: array
      sheetId:
        description: The sheet ID to append the data to.
        format: int32
        type: integer
    type: object
  AppendDimensionRequest:
    description: Appends rows or columns to the end of a sheet.
    properties:
      dimension:
        description: Whether rows or columns should be appended.
        enum:
          - DIMENSION_UNSPECIFIED
          - ROWS
          - COLUMNS
        type: string
      length:
        description: The number of rows or columns to append.
        format: int32
        type: integer
      sheetId:
        description: The sheet to append rows or columns to.
        format: int32
        type: integer
    type: object
  AppendValuesResponse:
    description: The response when updating a range of values in a spreadsheet.
    properties:
      spreadsheetId:
        description: The spreadsheet the updates were applied to.
        type: string
      tableRange:
        description: |-
          The range (in A1 notation) of the table that values are being appended to
          (before the values were appended).
          Empty if no table was found.
        type: string
      updates:
        $ref: '#/definitions/UpdateValuesResponse'
        description: Information about the updates that were applied.
    type: object
  AutoFillRequest:
    description: Fills in more data based on existing data.
    properties:
      range:
        $ref: '#/definitions/GridRange'
        description: |-
          The range to autofill. This will examine the range and detect
          the location that has data and automatically fill that data
          in to the rest of the range.
      sourceAndDestination:
        $ref: '#/definitions/SourceAndDestination'
        description: |-
          The source and destination areas to autofill.
          This explicitly lists the source of the autofill and where to
          extend that data.
      useAlternateSeries:
        description: |-
          True if we should generate data with the "alternate" series.
          This differs based on the type and amount of source data.
        type: boolean
    type: object
  AutoResizeDimensionsRequest:
    description: |-
      Automatically resizes one or more dimensions based on the contents
      of the cells in that dimension.
    properties:
      dimensions:
        $ref: '#/definitions/DimensionRange'
        description: The dimensions to automatically resize.
    type: object
  BandedRange:
    description: A banded (alternating colors) range in a sheet.
    properties:
      bandedRangeId:
        description: The id of the banded range.
        format: int32
        type: integer
      columnProperties:
        $ref: '#/definitions/BandingProperties'
        description: |-
          Properties for column bands. These properties will be applied on a column-
          by-column basis throughout all the columns in the range. At least one of
          row_properties or column_properties must be specified.
      range:
        $ref: '#/definitions/GridRange'
        description: The range over which these properties are applied.
      rowProperties:
        $ref: '#/definitions/BandingProperties'
        description: |-
          Properties for row bands. These properties will be applied on a row-by-row
          basis throughout all the rows in the range. At least one of
          row_properties or column_properties must be specified.
    type: object
  BandingProperties:
    description: |-
      Properties referring a single dimension (either row or column). If both
      BandedRange.row_properties and BandedRange.column_properties are
      set, the fill colors are applied to cells according to the following rules:

      * header_color and footer_color take priority over band colors.
      * first_band_color takes priority over second_band_color.
      * row_properties takes priority over column_properties.

      For example, the first row color takes priority over the first column
      color, but the first column color takes priority over the second row color.
      Similarly, the row header takes priority over the column header in the
      top left cell, but the column header takes priority over the first row
      color if the row header is not set.
    properties:
      firstBandColor:
        $ref: '#/definitions/Color'
        description: The first color that is alternating. (Required)
      footerColor:
        $ref: '#/definitions/Color'
        description: |-
          The color of the last row or column. If this field is not set, the last
          row or column will be filled with either first_band_color or
          second_band_color, depending on the color of the previous row or
          column.
      headerColor:
        $ref: '#/definitions/Color'
        description: |-
          The color of the first row or column. If this field is set, the first
          row or column will be filled with this color and the colors will
          alternate between first_band_color and second_band_color starting
          from the second row or column. Otherwise, the first row or column will be
          filled with first_band_color and the colors will proceed to alternate
          as they normally would.
      secondBandColor:
        $ref: '#/definitions/Color'
        description: The second color that is alternating. (Required)
    type: object
  BasicChartAxis:
    description: |-
      An axis of the chart.
      A chart may not have more than one axis per
      axis position.
    properties:
      format:
        $ref: '#/definitions/TextFormat'
        description: |-
          The format of the title.
          Only valid if the axis is not associated with the domain.
      position:
        description: The position of this axis.
        enum:
          - BASIC_CHART_AXIS_POSITION_UNSPECIFIED
          - BOTTOM_AXIS
          - LEFT_AXIS
          - RIGHT_AXIS
        type: string
      title:
        description: |-
          The title of this axis. If set, this overrides any title inferred
          from headers of the data.
        type: string
      titleTextPosition:
        $ref: '#/definitions/TextPosition'
        description: The axis title text position.
    type: object
  BasicChartDomain:
    description: |-
      The domain of a chart.
      For example, if charting stock prices over time, this would be the date.
    properties:
      domain:
        $ref: '#/definitions/ChartData'
        description: |-
          The data of the domain. For example, if charting stock prices over time,
          this is the data representing the dates.
      reversed:
        description: True to reverse the order of the domain values (horizontal axis).
        type: boolean
    type: object
  BasicChartSeries:
    description: |-
      A single series of data in a chart.
      For example, if charting stock prices over time, multiple series may exist,
      one for the "Open Price", "High Price", "Low Price" and "Close Price".
    properties:
      series:
        $ref: '#/definitions/ChartData'
        description: The data being visualized in this chart series.
      targetAxis:
        description: |-
          The minor axis that will specify the range of values for this series.
          For example, if charting stocks over time, the "Volume" series
          may want to be pinned to the right with the prices pinned to the left,
          because the scale of trading volume is different than the scale of
          prices.
          It is an error to specify an axis that isn't a valid minor axis
          for the chart's type.
        enum:
          - BASIC_CHART_AXIS_POSITION_UNSPECIFIED
          - BOTTOM_AXIS
          - LEFT_AXIS
          - RIGHT_AXIS
        type: string
      type:
        description: |-
          The type of this series. Valid only if the
          chartType is
          COMBO.
          Different types will change the way the series is visualized.
          Only LINE, AREA,
          and COLUMN are supported.
        enum:
          - BASIC_CHART_TYPE_UNSPECIFIED
          - BAR
          - LINE
          - AREA
          - COLUMN
          - SCATTER
          - COMBO
          - STEPPED_AREA
        type: string
    type: object
  BasicChartSpec:
    description: |-
      The specification for a basic chart.  See BasicChartType for the list
      of charts this supports.
    properties:
      axis:
        description: The axis on the chart.
        items:
          $ref: '#/definitions/BasicChartAxis'
        type: array
      chartType:
        description: The type of the chart.
        enum:
          - BASIC_CHART_TYPE_UNSPECIFIED
          - BAR
          - LINE
          - AREA
          - COLUMN
          - SCATTER
          - COMBO
          - STEPPED_AREA
        type: string
      compareMode:
        description: |-
          The behavior of tooltips and data highlighting when hovering on data and
          chart area.
        enum:
          - BASIC_CHART_COMPARE_MODE_UNSPECIFIED
          - DATUM
          - CATEGORY
        type: string
      domains:
        description: |-
          The domain of data this is charting.
          Only a single domain is supported.
        items:
          $ref: '#/definitions/BasicChartDomain'
        type: array
      headerCount:
        description: |-
          The number of rows or columns in the data that are "headers".
          If not set, Google Sheets will guess how many rows are headers based
          on the data.

          (Note that BasicChartAxis.title may override the axis title
           inferred from the header values.)
        format: int32
        type: integer
      interpolateNulls:
        description: |-
          If some values in a series are missing, gaps may appear in the chart (e.g,
          segments of lines in a line chart will be missing).  To eliminate these
          gaps set this to true.
          Applies to Line, Area, and Combo charts.
        type: boolean
      legendPosition:
        description: The position of the chart legend.
        enum:
          - BASIC_CHART_LEGEND_POSITION_UNSPECIFIED
          - BOTTOM_LEGEND
          - LEFT_LEGEND
          - RIGHT_LEGEND
          - TOP_LEGEND
          - NO_LEGEND
        type: string
      lineSmoothing:
        description: |-
          Gets whether all lines should be rendered smooth or straight by default.
          Applies to Line charts.
        type: boolean
      series:
        description: The data this chart is visualizing.
        items:
          $ref: '#/definitions/BasicChartSeries'
        type: array
      stackedType:
        description: |-
          The stacked type for charts that support vertical stacking.
          Applies to Area, Bar, Column, and Stepped Area charts.
        enum:
          - BASIC_CHART_STACKED_TYPE_UNSPECIFIED
          - NOT_STACKED
          - STACKED
          - PERCENT_STACKED
        type: string
      threeDimensional:
        description: |-
          True to make the chart 3D.
          Applies to Bar and Column charts.
        type: boolean
    type: object
  BasicFilter:
    description: The default filter associated with a sheet.
    properties:
      criteria:
        additionalProperties:
          $ref: '#/definitions/FilterCriteria'
        description: |-
          The criteria for showing/hiding values per column.
          The map's key is the column index, and the value is the criteria for
          that column.
        type: object
      range:
        $ref: '#/definitions/GridRange'
        description: The range the filter covers.
      sortSpecs:
        description: |-
          The sort order per column. Later specifications are used when values
          are equal in the earlier specifications.
        items:
          $ref: '#/definitions/SortSpec'
        type: array
    type: object
  BatchClearValuesByDataFilterRequest:
    description: |-
      The request for clearing more than one range selected by a
      DataFilter in a spreadsheet.
    properties:
      dataFilters:
        description: The DataFilters used to determine which ranges to clear.
        items:
          $ref: '#/definitions/DataFilter'
        type: array
    type: object
  BatchClearValuesByDataFilterResponse:
    description: |-
      The response when clearing a range of values selected with
      DataFilters in a spreadsheet.
    properties:
      clearedRanges:
        description: |-
          The ranges that were cleared, in A1 notation.
          (If the requests were for an unbounded range or a ranger larger
           than the bounds of the sheet, this will be the actual ranges
           that were cleared, bounded to the sheet's limits.)
        items:
          type: string
        type: array
      spreadsheetId:
        description: The spreadsheet the updates were applied to.
        type: string
    type: object
  BatchClearValuesRequest:
    description: The request for clearing more than one range of values in a spreadsheet.
    properties:
      ranges:
        description: 'The ranges to clear, in A1 notation.'
        items:
          type: string
        type: array
    type: object
  BatchClearValuesResponse:
    description: The response when clearing a range of values in a spreadsheet.
    properties:
      clearedRanges:
        description: |-
          The ranges that were cleared, in A1 notation.
          (If the requests were for an unbounded range or a ranger larger
           than the bounds of the sheet, this will be the actual ranges
           that were cleared, bounded to the sheet's limits.)
        items:
          type: string
        type: array
      spreadsheetId:
        description: The spreadsheet the updates were applied to.
        type: string
    type: object
  BatchGetValuesByDataFilterRequest:
    description: |-
      The request for retrieving a range of values in a spreadsheet selected by a
      set of DataFilters.
    properties:
      dataFilters:
        description: |-
          The data filters used to match the ranges of values to retrieve.  Ranges
          that match any of the specified data filters will be included in the
          response.
        items:
          $ref: '#/definitions/DataFilter'
        type: array
      dateTimeRenderOption:
        description: |-
          How dates, times, and durations should be represented in the output.
          This is ignored if value_render_option is
          FORMATTED_VALUE.
          The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].
        enum:
          - SERIAL_NUMBER
          - FORMATTED_STRING
        type: string
      majorDimension:
        description: |-
          The major dimension that results should use.

          For example, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`,
          then a request that selects that range and sets `majorDimension=ROWS` will
          return `[[1,2],[3,4]]`,
          whereas a request that sets `majorDimension=COLUMNS` will return
          `[[1,3],[2,4]]`.
        enum:
          - DIMENSION_UNSPECIFIED
          - ROWS
          - COLUMNS
        type: string
      valueRenderOption:
        description: |-
          How values should be represented in the output.
          The default render option is ValueRenderOption.FORMATTED_VALUE.
        enum:
          - FORMATTED_VALUE
          - UNFORMATTED_VALUE
          - FORMULA
        type: string
    type: object
  BatchGetValuesByDataFilterResponse:
    description: |-
      The response when retrieving more than one range of values in a spreadsheet
      selected by DataFilters.
    properties:
      spreadsheetId:
        description: The ID of the spreadsheet the data was retrieved from.
        type: string
      valueRanges:
        description: The requested values with the list of data filters that matched them.
        items:
          $ref: '#/definitions/MatchedValueRange'
        type: array
    type: object
  BatchGetValuesResponse:
    description: The response when retrieving more than one range of values in a spreadsheet.
    properties:
      spreadsheetId:
        description: The ID of the spreadsheet the data was retrieved from.
        type: string
      valueRanges:
        description: |-
          The requested values. The order of the ValueRanges is the same as the
          order of the requested ranges.
        items:
          $ref: '#/definitions/ValueRange'
        type: array
    type: object
  BatchUpdateSpreadsheetRequest:
    description: The request for updating any aspect of a spreadsheet.
    properties:
      includeSpreadsheetInResponse:
        description: |-
          Determines if the update response should include the spreadsheet
          resource.
        type: boolean
      requests:
        description: |-
          A list of updates to apply to the spreadsheet.
          Requests will be applied in the order they are specified.
          If any request is not valid, no requests will be applied.
        items:
          $ref: '#/definitions/Request'
        type: array
      responseIncludeGridData:
        description: |-
          True if grid data should be returned. Meaningful only if
          if include_spreadsheet_response is 'true'.
          This parameter is ignored if a field mask was set in the request.
        type: boolean
      responseRanges:
        description: |-
          Limits the ranges included in the response spreadsheet.
          Meaningful only if include_spreadsheet_response is 'true'.
        items:
          type: string
        type: array
    type: object
  BatchUpdateSpreadsheetResponse:
    description: The reply for batch updating a spreadsheet.
    properties:
      replies:
        description: |-
          The reply of the updates.  This maps 1:1 with the updates, although
          replies to some requests may be empty.
        items:
          $ref: '#/definitions/Response'
        type: array
      spreadsheetId:
        description: The spreadsheet the updates were applied to.
        type: string
      updatedSpreadsheet:
        $ref: '#/definitions/Spreadsheet'
        description: |-
          The spreadsheet after updates were applied. This is only set if
          [BatchUpdateSpreadsheetRequest.include_spreadsheet_in_response] is `true`.
    type: object
  BatchUpdateValuesByDataFilterRequest:
    description: The request for updating more than one range of values in a spreadsheet.
    properties:
      data:
        description: |-
          The new values to apply to the spreadsheet.  If more than one range is
          matched by the specified DataFilter the specified values will be
          applied to all of those ranges.
        items:
          $ref: '#/definitions/DataFilterValueRange'
        type: array
      includeValuesInResponse:
        description: |-
          Determines if the update response should include the values
          of the cells that were updated. By default, responses
          do not include the updated values. The `updatedData` field within
          each of the BatchUpdateValuesResponse.responses will contain
          the updated values. If the range to write was larger than than the range
          actually written, the response will include all values in the requested
          range (excluding trailing empty rows and columns).
        type: boolean
      responseDateTimeRenderOption:
        description: |-
          Determines how dates, times, and durations in the response should be
          rendered. This is ignored if response_value_render_option is
          FORMATTED_VALUE.
          The default dateTime render option is
          DateTimeRenderOption.SERIAL_NUMBER.
        enum:
          - SERIAL_NUMBER
          - FORMATTED_STRING
        type: string
      responseValueRenderOption:
        description: |-
          Determines how values in the response should be rendered.
          The default render option is ValueRenderOption.FORMATTED_VALUE.
        enum:
          - FORMATTED_VALUE
          - UNFORMATTED_VALUE
          - FORMULA
        type: string
      valueInputOption:
        description: How the input data should be interpreted.
        enum:
          - INPUT_VALUE_OPTION_UNSPECIFIED
          - RAW
          - USER_ENTERED
        type: string
    type: object
  BatchUpdateValuesByDataFilterResponse:
    description: The response when updating a range of values in a spreadsheet.
    properties:
      responses:
        description: The response for each range updated.
        items:
          $ref: '#/definitions/UpdateValuesByDataFilterResponse'
        type: array
      spreadsheetId:
        description: The spreadsheet the updates were applied to.
        type: string
      totalUpdatedCells:
        description: The total number of cells updated.
        format: int32
        type: integer
      totalUpdatedColumns:
        description: |-
          The total number of columns where at least one cell in the column was
          updated.
        format: int32
        type: integer
      totalUpdatedRows:
        description: The total number of rows where at least one cell in the row was updated.
        format: int32
        type: integer
      totalUpdatedSheets:
        description: |-
          The total number of sheets where at least one cell in the sheet was
          updated.
        format: int32
        type: integer
    type: object
  BatchUpdateValuesRequest:
    description: The request for updating more than one range of values in a spreadsheet.
    properties:
      data:
        description: The new values to apply to the spreadsheet.
        items:
          $ref: '#/definitions/ValueRange'
        type: array
      includeValuesInResponse:
        description: |-
          Determines if the update response should include the values
          of the cells that were updated. By default, responses
          do not include the updated values. The `updatedData` field within
          each of the BatchUpdateValuesResponse.responses will contain
          the updated values. If the range to write was larger than than the range
          actually written, the response will include all values in the requested
          range (excluding trailing empty rows and columns).
        type: boolean
      responseDateTimeRenderOption:
        description: |-
          Determines how dates, times, and durations in the response should be
          rendered. This is ignored if response_value_render_option is
          FORMATTED_VALUE.
          The default dateTime render option is
          DateTimeRenderOption.SERIAL_NUMBER.
        enum:
          - SERIAL_NUMBER
          - FORMATTED_STRING
        type: string
      responseValueRenderOption:
        description: |-
          Determines how values in the response should be rendered.
          The default render option is ValueRenderOption.FORMATTED_VALUE.
        enum:
          - FORMATTED_VALUE
          - UNFORMATTED_VALUE
          - FORMULA
        type: string
      valueInputOption:
        description: How the input data should be interpreted.
        enum:
          - INPUT_VALUE_OPTION_UNSPECIFIED
          - RAW
          - USER_ENTERED
        type: string
    type: object
  BatchUpdateValuesResponse:
    description: The response when updating a range of values in a spreadsheet.
    properties:
      responses:
        description: |-
          One UpdateValuesResponse per requested range, in the same order as
          the requests appeared.
        items:
          $ref: '#/definitions/UpdateValuesResponse'
        type: array
      spreadsheetId:
        description: The spreadsheet the updates were applied to.
        type: string
      totalUpdatedCells:
        description: The total number of cells updated.
        format: int32
        type: integer
      totalUpdatedColumns:
        description: |-
          The total number of columns where at least one cell in the column was
          updated.
        format: int32
        type: integer
      totalUpdatedRows:
        description: The total number of rows where at least one cell in the row was updated.
        format: int32
        type: integer
      totalUpdatedSheets:
        description: |-
          The total number of sheets where at least one cell in the sheet was
          updated.
        format: int32
        type: integer
    type: object
  BooleanCondition:
    description: |-
      A condition that can evaluate to true or false.
      BooleanConditions are used by conditional formatting,
      data validation, and the criteria in filters.
    properties:
      type:
        description: The type of condition.
        enum:
          - CONDITION_TYPE_UNSPECIFIED
          - NUMBER_GREATER
          - NUMBER_GREATER_THAN_EQ
          - NUMBER_LESS
          - NUMBER_LESS_THAN_EQ
          - NUMBER_EQ
          - NUMBER_NOT_EQ
          - NUMBER_BETWEEN
          - NUMBER_NOT_BETWEEN
          - TEXT_CONTAINS
          - TEXT_NOT_CONTAINS
          - TEXT_STARTS_WITH
          - TEXT_ENDS_WITH
          - TEXT_EQ
          - TEXT_IS_EMAIL
          - TEXT_IS_URL
          - DATE_EQ
          - DATE_BEFORE
          - DATE_AFTER
          - DATE_ON_OR_BEFORE
          - DATE_ON_OR_AFTER
          - DATE_BETWEEN
          - DATE_NOT_BETWEEN
          - DATE_IS_VALID
          - ONE_OF_RANGE
          - ONE_OF_LIST
          - BLANK
          - NOT_BLANK
          - CUSTOM_FORMULA
        type: string
      values:
        description: |-
          The values of the condition. The number of supported values depends
          on the condition type.  Some support zero values,
          others one or two values,
          and ConditionType.ONE_OF_LIST supports an arbitrary number of values.
        items:
          $ref: '#/definitions/ConditionValue'
        type: array
    type: object
  BooleanRule:
    description: 'A rule that may or may not match, depending on the condition.'
    properties:
      condition:
        $ref: '#/definitions/BooleanCondition'
        description: |-
          The condition of the rule. If the condition evaluates to true,
          the format will be applied.
      format:
        $ref: '#/definitions/CellFormat'
        description: |-
          The format to apply.
          Conditional formatting can only apply a subset of formatting:
          bold, italic,
          strikethrough,
          foreground color &
          background color.
    type: object
  Border:
    description: A border along a cell.
    properties:
      color:
        $ref: '#/definitions/Color'
        description: The color of the border.
      style:
        description: The style of the border.
        enum:
          - STYLE_UNSPECIFIED
          - DOTTED
          - DASHED
          - SOLID
          - SOLID_MEDIUM
          - SOLID_THICK
          - NONE
          - DOUBLE
        type: string
      width:
        description: |-
          The width of the border, in pixels.
          Deprecated; the width is determined by the "style" field.
        format: int32
        type: integer
    type: object
  Borders:
    description: The borders of the cell.
    properties:
      bottom:
        $ref: '#/definitions/Border'
        description: The bottom border of the cell.
      left:
        $ref: '#/definitions/Border'
        description: The left border of the cell.
      right:
        $ref: '#/definitions/Border'
        description: The right border of the cell.
      top:
        $ref: '#/definitions/Border'
        description: The top border of the cell.
    type: object
  BubbleChartSpec:
    description: A <a href="/chart/interactive/docs/gallery/bubblechart">bubble chart</a>.
    properties:
      bubbleBorderColor:
        $ref: '#/definitions/Color'
        description: The bubble border color.
      bubbleLabels:
        $ref: '#/definitions/ChartData'
        description: The data containing the bubble labels.  These do not need to be unique.
      bubbleMaxRadiusSize:
        description: |-
          The max radius size of the bubbles, in pixels.
          If specified, the field must be a positive value.
        format: int32
        type: integer
      bubbleMinRadiusSize:
        description: |-
          The minimum radius size of the bubbles, in pixels.
          If specific, the field must be a positive value.
        format: int32
        type: integer
      bubbleOpacity:
        description: |-
          The opacity of the bubbles between 0 and 1.0.
          0 is fully transparent and 1 is fully opaque.
        format: float
        type: number
      bubbleSizes:
        $ref: '#/definitions/ChartData'
        description: |-
          The data contianing the bubble sizes.  Bubble sizes are used to draw
          the bubbles at different sizes relative to each other.
          If specified, group_ids must also be specified.  This field is
          optional.
      bubbleTextStyle:
        $ref: '#/definitions/TextFormat'
        description: |-
          The format of the text inside the bubbles.
          Underline and Strikethrough are not supported.
      domain:
        $ref: '#/definitions/ChartData'
        description: |-
          The data containing the bubble x-values.  These values locate the bubbles
          in the chart horizontally.
      groupIds:
        $ref: '#/definitions/ChartData'
        description: |-
          The data containing the bubble group IDs. All bubbles with the same group
          ID will be drawn in the same color. If bubble_sizes is specified then
          this field must also be specified but may contain blank values.
          This field is optional.
      legendPosition:
        description: Where the legend of the chart should be drawn.
        enum:
          - BUBBLE_CHART_LEGEND_POSITION_UNSPECIFIED
          - BOTTOM_LEGEND
          - LEFT_LEGEND
          - RIGHT_LEGEND
          - TOP_LEGEND
          - NO_LEGEND
          - INSIDE_LEGEND
        type: string
      series:
        $ref: '#/definitions/ChartData'
        description: |-
          The data contianing the bubble y-values.  These values locate the bubbles
          in the chart vertically.
    type: object
  CandlestickChartSpec:
    description: A <a href="/chart/interactive/docs/gallery/candlestickchart">candlestick chart</a>.
    properties:
      data:
        description: |-
          The Candlestick chart data.
          Only one CandlestickData is supported.
        items:
          $ref: '#/definitions/CandlestickData'
        type: array
      domain:
        $ref: '#/definitions/CandlestickDomain'
        description: |-
          The domain data (horizontal axis) for the candlestick chart.  String data
          will be treated as discrete labels, other data will be treated as
          continuous values.
    type: object
  CandlestickData:
    description: |-
      The Candlestick chart data, each containing the low, open, close, and high
      values for a series.
    properties:
      closeSeries:
        $ref: '#/definitions/CandlestickSeries'
        description: |-
          The range data (vertical axis) for the close/final value for each candle.
          This is the top of the candle body.  If greater than the open value the
          candle will be filled.  Otherwise the candle will be hollow.
      highSeries:
        $ref: '#/definitions/CandlestickSeries'
        description: |-
          The range data (vertical axis) for the high/maximum value for each
          candle. This is the top of the candle's center line.
      lowSeries:
        $ref: '#/definitions/CandlestickSeries'
        description: |-
          The range data (vertical axis) for the low/minimum value for each candle.
          This is the bottom of the candle's center line.
      openSeries:
        $ref: '#/definitions/CandlestickSeries'
        description: |-
          The range data (vertical axis) for the open/initial value for each
          candle. This is the bottom of the candle body.  If less than the close
          value the candle will be filled.  Otherwise the candle will be hollow.
    type: object
  CandlestickDomain:
    description: The domain of a CandlestickChart.
    properties:
      data:
        $ref: '#/definitions/ChartData'
        description: The data of the CandlestickDomain.
      reversed:
        description: True to reverse the order of the domain values (horizontal axis).
        type: boolean
    type: object
  CandlestickSeries:
    description: The series of a CandlestickData.
    properties:
      data:
        $ref: '#/definitions/ChartData'
        description: The data of the CandlestickSeries.
    type: object
  CellData:
    description: Data about a specific cell.
    properties:
      dataValidation:
        $ref: '#/definitions/DataValidationRule'
        description: |-
          A data validation rule on the cell, if any.

          When writing, the new data validation rule will overwrite any prior rule.
      effectiveFormat:
        $ref: '#/definitions/CellFormat'
        description: |-
          The effective format being used by the cell.
          This includes the results of applying any conditional formatting and,
          if the cell contains a formula, the computed number format.
          If the effective format is the default format, effective format will
          not be written.
          This field is read-only.
      effectiveValue:
        $ref: '#/definitions/ExtendedValue'
        description: |-
          The effective value of the cell. For cells with formulas, this will be
          the calculated value.  For cells with literals, this will be
          the same as the user_entered_value.
          This field is read-only.
      formattedValue:
        description: |-
          The formatted value of the cell.
          This is the value as it's shown to the user.
          This field is read-only.
        type: string
      hyperlink:
        description: |-
          A hyperlink this cell points to, if any.
          This field is read-only.  (To set it, use a `=HYPERLINK` formula
          in the userEnteredValue.formulaValue
          field.)
        type: string
      note:
        description: Any note on the cell.
        type: string
      pivotTable:
        $ref: '#/definitions/PivotTable'
        description: |-
          A pivot table anchored at this cell. The size of pivot table itself
          is computed dynamically based on its data, grouping, filters, values,
          etc. Only the top-left cell of the pivot table contains the pivot table
          definition. The other cells will contain the calculated values of the
          results of the pivot in their effective_value fields.
      textFormatRuns:
        description: |-
          Runs of rich text applied to subsections of the cell.  Runs are only valid
          on user entered strings, not formulas, bools, or numbers.
          Runs start at specific indexes in the text and continue until the next
          run. Properties of a run will continue unless explicitly changed
          in a subsequent run (and properties of the first run will continue
          the properties of the cell unless explicitly changed).

          When writing, the new runs will overwrite any prior runs.  When writing a
          new user_entered_value, previous runs will be erased.
        items:
          $ref: '#/definitions/TextFormatRun'
        type: array
      userEnteredFormat:
        $ref: '#/definitions/CellFormat'
        description: |-
          The format the user entered for the cell.

          When writing, the new format will be merged with the existing format.
      userEnteredValue:
        $ref: '#/definitions/ExtendedValue'
        description: |-
          The value the user entered in the cell. e.g, `1234`, `'Hello'`, or `=NOW()`
          Note: Dates, Times and DateTimes are represented as doubles in
          serial number format.
    type: object
  CellFormat:
    description: The format of a cell.
    properties:
      backgroundColor:
        $ref: '#/definitions/Color'
        description: The background color of the cell.
      borders:
        $ref: '#/definitions/Borders'
        description: The borders of the cell.
      horizontalAlignment:
        description: The horizontal alignment of the value in the cell.
        enum:
          - HORIZONTAL_ALIGN_UNSPECIFIED
          - LEFT
          - CENTER
          - RIGHT
        type: string
      hyperlinkDisplayType:
        description: 'How a hyperlink, if it exists, should be displayed in the cell.'
        enum:
          - HYPERLINK_DISPLAY_TYPE_UNSPECIFIED
          - LINKED
          - PLAIN_TEXT
        type: string
      numberFormat:
        $ref: '#/definitions/NumberFormat'
        description: A format describing how number values should be represented to the user.
      padding:
        $ref: '#/definitions/Padding'
        description: The padding of the cell.
      textDirection:
        description: The direction of the text in the cell.
        enum:
          - TEXT_DIRECTION_UNSPECIFIED
          - LEFT_TO_RIGHT
          - RIGHT_TO_LEFT
        type: string
      textFormat:
        $ref: '#/definitions/TextFormat'
        description: The format of the text in the cell (unless overridden by a format run).
      textRotation:
        $ref: '#/definitions/TextRotation'
        description: The rotation applied to text in a cell
      verticalAlignment:
        description: The vertical alignment of the value in the cell.
        enum:
          - VERTICAL_ALIGN_UNSPECIFIED
          - TOP
          - MIDDLE
          - BOTTOM
        type: string
      wrapStrategy:
        description: The wrap strategy for the value in the cell.
        enum:
          - WRAP_STRATEGY_UNSPECIFIED
          - OVERFLOW_CELL
          - LEGACY_WRAP
          - CLIP
          - WRAP
        type: string
    type: object
  ChartData:
    description: The data included in a domain or series.
    properties:
      sourceRange:
        $ref: '#/definitions/ChartSourceRange'
        description: The source ranges of the data.
    type: object
  ChartSourceRange:
    description: Source ranges for a chart.
    properties:
      sources:
        description: |-
          The ranges of data for a series or domain.
          Exactly one dimension must have a length of 1,
          and all sources in the list must have the same dimension
          with length 1.
          The domain (if it exists) & all series must have the same number
          of source ranges. If using more than one source range, then the source
          range at a given offset must be contiguous across the domain and series.

          For example, these are valid configurations:

              domain sources: A1:A5
              series1 sources: B1:B5
              series2 sources: D6:D10

              domain sources: A1:A5, C10:C12
              series1 sources: B1:B5, D10:D12
              series2 sources: C1:C5, E10:E12
        items:
          $ref: '#/definitions/GridRange'
        type: array
    type: object
  ChartSpec:
    description: The specifications of a chart.
    properties:
      altText:
        description: |-
          The alternative text that describes the chart.  This is often used
          for accessibility.
        type: string
      backgroundColor:
        $ref: '#/definitions/Color'
        description: |-
          The background color of the entire chart.
          Not applicable to Org charts.
      basicChart:
        $ref: '#/definitions/BasicChartSpec'
        description: |-
          A basic chart specification, can be one of many kinds of charts.
          See BasicChartType for the list of all
          charts this supports.
      bubbleChart:
        $ref: '#/definitions/BubbleChartSpec'
        description: A bubble chart specification.
      candlestickChart:
        $ref: '#/definitions/CandlestickChartSpec'
        description: A candlestick chart specification.
      fontName:
        description: |-
          The name of the font to use by default for all chart text (e.g. title,
          axis labels, legend).  If a font is specified for a specific part of the
          chart it will override this font name.
        type: string
      hiddenDimensionStrategy:
        description: Determines how the charts will use hidden rows or columns.
        enum:
          - CHART_HIDDEN_DIMENSION_STRATEGY_UNSPECIFIED
          - SKIP_HIDDEN_ROWS_AND_COLUMNS
          - SKIP_HIDDEN_ROWS
          - SKIP_HIDDEN_COLUMNS
          - SHOW_ALL
        type: string
      histogramChart:
        $ref: '#/definitions/HistogramChartSpec'
        description: A histogram chart specification.
      maximized:
        description: |-
          True to make a chart fill the entire space in which it's rendered with
          minimum padding.  False to use the default padding.
          (Not applicable to Geo and Org charts.)
        type: boolean
      orgChart:
        $ref: '#/definitions/OrgChartSpec'
        description: An org chart specification.
      pieChart:
        $ref: '#/definitions/PieChartSpec'
        description: A pie chart specification.
      subtitle:
        description: The subtitle of the chart.
        type: string
      subtitleTextFormat:
        $ref: '#/definitions/TextFormat'
        description: |-
          The subtitle text format.
          Strikethrough and underline are not supported.
      subtitleTextPosition:
        $ref: '#/definitions/TextPosition'
        description: |-
          The subtitle text position.
          This field is optional.
      title:
        description: The title of the chart.
        type: string
      titleTextFormat:
        $ref: '#/definitions/TextFormat'
        description: |-
          The title text format.
          Strikethrough and underline are not supported.
      titleTextPosition:
        $ref: '#/definitions/TextPosition'
        description: |-
          The title text position.
          This field is optional.
    type: object
  ClearBasicFilterRequest:
    description: 'Clears the basic filter, if any exists on the sheet.'
    properties:
      sheetId:
        description: The sheet ID on which the basic filter should be cleared.
        format: int32
        type: integer
    type: object
  ClearValuesRequest:
    description: The request for clearing a range of values in a spreadsheet.
    properties: {}
    type: object
  ClearValuesResponse:
    description: The response when clearing a range of values in a spreadsheet.
    properties:
      clearedRange:
        description: |-
          The range (in A1 notation) that was cleared.
          (If the request was for an unbounded range or a ranger larger
           than the bounds of the sheet, this will be the actual range
           that was cleared, bounded to the sheet's limits.)
        type: string
      spreadsheetId:
        description: The spreadsheet the updates were applied to.
        type: string
    type: object
  Color:
    description: |-
      Represents a color in the RGBA color space. This representation is designed
      for simplicity of conversion to/from color representations in various
      languages over compactness; for example, the fields of this representation
      can be trivially provided to the constructor of "java.awt.Color" in Java; it
      can also be trivially provided to UIColor's "+colorWithRed:green:blue:alpha"
      method in iOS; and, with just a little work, it can be easily formatted into
      a CSS "rgba()" string in JavaScript, as well. Here are some examples:

      Example (Java):

           import com.google.type.Color;

           // ...
           public static java.awt.Color fromProto(Color protocolor) {
             float alpha = protocolor.hasAlpha()
                 ? protocolor.getAlpha().getValue()
                 : 1.0;

             return new java.awt.Color(
                 protocolor.getRed(),
                 protocolor.getGreen(),
                 protocolor.getBlue(),
                 alpha);
           }

           public static Color toProto(java.awt.Color color) {
             float red = (float) color.getRed();
             float green = (float) color.getGreen();
             float blue = (float) color.getBlue();
             float denominator = 255.0;
             Color.Builder resultBuilder =
                 Color
                     .newBuilder()
                     .setRed(red / denominator)
                     .setGreen(green / denominator)
                     .setBlue(blue / denominator);
             int alpha = color.getAlpha();
             if (alpha != 255) {
               result.setAlpha(
                   FloatValue
                       .newBuilder()
                       .setValue(((float) alpha) / denominator)
                       .build());
             }
             return resultBuilder.build();
           }
           // ...

      Example (iOS / Obj-C):

           // ...
           static UIColor* fromProto(Color* protocolor) {
              float red = [protocolor red];
              float green = [protocolor green];
              float blue = [protocolor blue];
              FloatValue* alpha_wrapper = [protocolor alpha];
              float alpha = 1.0;
              if (alpha_wrapper != nil) {
                alpha = [alpha_wrapper value];
              }
              return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];
           }

           static Color* toProto(UIColor* color) {
               CGFloat red, green, blue, alpha;
               if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {
                 return nil;
               }
               Color* result = [Color alloc] init];
               [result setRed:red];
               [result setGreen:green];
               [result setBlue:blue];
               if (alpha <= 0.9999) {
                 [result setAlpha:floatWrapperWithValue(alpha)];
               }
               [result autorelease];
               return result;
          }
          // ...

       Example (JavaScript):

          // ...

          var protoToCssColor = function(rgb_color) {
             var redFrac = rgb_color.red || 0.0;
             var greenFrac = rgb_color.green || 0.0;
             var blueFrac = rgb_color.blue || 0.0;
             var red = Math.floor(redFrac * 255);
             var green = Math.floor(greenFrac * 255);
             var blue = Math.floor(blueFrac * 255);

             if (!('alpha' in rgb_color)) {
                return rgbToCssColor_(red, green, blue);
             }

             var alphaFrac = rgb_color.alpha.value || 0.0;
             var rgbParams = [red, green, blue].join(',');
             return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');
          };

          var rgbToCssColor_ = function(red, green, blue) {
            var rgbNumber = new Number((red << 16) | (green << 8) | blue);
            var hexString = rgbNumber.toString(16);
            var missingZeros = 6 - hexString.length;
            var resultBuilder = ['#'];
            for (var i = 0; i < missingZeros; i++) {
               resultBuilder.push('0');
            }
            resultBuilder.push(hexString);
            return resultBuilder.join('');
          };

          // ...
    properties:
      alpha:
        description: |-
          The fraction of this color that should be applied to the pixel. That is,
          the final pixel color is defined by the equation:

            pixel color = alpha * (this color) + (1.0 - alpha) * (background color)

          This means that a value of 1.0 corresponds to a solid color, whereas
          a value of 0.0 corresponds to a completely transparent color. This
          uses a wrapper message rather than a simple float scalar so that it is
          possible to distinguish between a default value and the value being unset.
          If omitted, this color object is to be rendered as a solid color
          (as if the alpha value had been explicitly given with a value of 1.0).
        format: float
        type: number
      blue:
        description: 'The amount of blue in the color as a value in the interval [0, 1].'
        format: float
        type: number
      green:
        description: 'The amount of green in the color as a value in the interval [0, 1].'
        format: float
        type: number
      red:
        description: 'The amount of red in the color as a value in the interval [0, 1].'
        format: float
        type: number
    type: object
  ConditionValue:
    description: The value of the condition.
    properties:
      relativeDate:
        description: |-
          A relative date (based on the current date).
          Valid only if the type is
          DATE_BEFORE,
          DATE_AFTER,
          DATE_ON_OR_BEFORE or
          DATE_ON_OR_AFTER.

          Relative dates are not supported in data validation.
          They are supported only in conditional formatting and
          conditional filters.
        enum:
          - RELATIVE_DATE_UNSPECIFIED
          - PAST_YEAR
          - PAST_MONTH
          - PAST_WEEK
          - YESTERDAY
          - TODAY
          - TOMORROW
        type: string
      userEnteredValue:
        description: |-
          A value the condition is based on.
          The value will be parsed as if the user typed into a cell.
          Formulas are supported (and must begin with an `=`).
        type: string
    type: object
  ConditionalFormatRule:
    description: A rule describing a conditional format.
    properties:
      booleanRule:
        $ref: '#/definitions/BooleanRule'
        description: The formatting is either "on" or "off" according to the rule.
      gradientRule:
        $ref: '#/definitions/GradientRule'
        description: The formatting will vary based on the gradients in the rule.
      ranges:
        description: |-
          The ranges that will be formatted if the condition is true.
          All the ranges must be on the same grid.
        items:
          $ref: '#/definitions/GridRange'
        type: array
    type: object
  CopyPasteRequest:
    description: Copies data from the source to the destination.
    properties:
      destination:
        $ref: '#/definitions/GridRange'
        description: |-
          The location to paste to. If the range covers a span that's
          a multiple of the source's height or width, then the
          data will be repeated to fill in the destination range.
          If the range is smaller than the source range, the entire
          source data will still be copied (beyond the end of the destination range).
      pasteOrientation:
        description: How that data should be oriented when pasting.
        enum:
          - NORMAL
          - TRANSPOSE
        type: string
      pasteType:
        description: What kind of data to paste.
        enum:
          - PASTE_NORMAL
          - PASTE_VALUES
          - PASTE_FORMAT
          - PASTE_NO_BORDERS
          - PASTE_FORMULA
          - PASTE_DATA_VALIDATION
          - PASTE_CONDITIONAL_FORMATTING
        type: string
      source:
        $ref: '#/definitions/GridRange'
        description: The source range to copy.
    type: object
  CopySheetToAnotherSpreadsheetRequest:
    description: The request to copy a sheet across spreadsheets.
    properties:
      destinationSpreadsheetId:
        description: The ID of the spreadsheet to copy the sheet to.
        type: string
    type: object
  CreateDeveloperMetadataRequest:
    description: A request to create developer metadata.
    properties:
      developerMetadata:
        $ref: '#/definitions/DeveloperMetadata'
        description: The developer metadata to create.
    type: object
  CreateDeveloperMetadataResponse:
    description: The response from creating developer metadata.
    properties:
      developerMetadata:
        $ref: '#/definitions/DeveloperMetadata'
        description: The developer metadata that was created.
    type: object
  CutPasteRequest:
    description: Moves data from the source to the destination.
    properties:
      destination:
        $ref: '#/definitions/GridCoordinate'
        description: The top-left coordinate where the data should be pasted.
      pasteType:
        description: |-
          What kind of data to paste.  All the source data will be cut, regardless
          of what is pasted.
        enum:
          - PASTE_NORMAL
          - PASTE_VALUES
          - PASTE_FORMAT
          - PASTE_NO_BORDERS
          - PASTE_FORMULA
          - PASTE_DATA_VALIDATION
          - PASTE_CONDITIONAL_FORMATTING
        type: string
      source:
        $ref: '#/definitions/GridRange'
        description: The source data to cut.
    type: object
  DataFilter:
    description: |-
      Filter that describes what data should be selected or returned from a
      request.
    properties:
      a1Range:
        description: Selects data that matches the specified A1 range.
        type: string
      developerMetadataLookup:
        $ref: '#/definitions/DeveloperMetadataLookup'
        description: |-
          Selects data associated with the developer metadata matching the criteria
          described by this DeveloperMetadataLookup.
      gridRange:
        $ref: '#/definitions/GridRange'
        description: Selects data that matches the range described by the GridRange.
    type: object
  DataFilterValueRange:
    description: A range of values whose location is specified by a DataFilter.
    properties:
      dataFilter:
        $ref: '#/definitions/DataFilter'
        description: The data filter describing the location of the values in the spreadsheet.
      majorDimension:
        description: The major dimension of the values.
        enum:
          - DIMENSION_UNSPECIFIED
          - ROWS
          - COLUMNS
        type: string
      values:
        description: |-
          The data to be written.  If the provided values exceed any of the ranges
          matched by the data filter then the request will fail.  If the provided
          values are less than the matched ranges only the specified values will be
          written, existing values in the matched ranges will remain unaffected.
        items:
          items: {}
          type: array
        type: array
    type: object
  DataValidationRule:
    description: A data validation rule.
    properties:
      condition:
        $ref: '#/definitions/BooleanCondition'
        description: The condition that data in the cell must match.
      inputMessage:
        description: A message to show the user when adding data to the cell.
        type: string
      showCustomUi:
        description: |-
          True if the UI should be customized based on the kind of condition.
          If true, "List" conditions will show a dropdown.
        type: boolean
      strict:
        description: True if invalid data should be rejected.
        type: boolean
    type: object
  DeleteBandingRequest:
    description: Removes the banded range with the given ID from the spreadsheet.
    properties:
      bandedRangeId:
        description: The ID of the banded range to delete.
        format: int32
        type: integer
    type: object
  DeleteConditionalFormatRuleRequest:
    description: |-
      Deletes a conditional format rule at the given index.
      All subsequent rules' indexes are decremented.
    properties:
      index:
        description: The zero-based index of the rule to be deleted.
        format: int32
        type: integer
      sheetId:
        description: The sheet the rule is being deleted from.
        format: int32
        type: integer
    type: object
  DeleteConditionalFormatRuleResponse:
    description: The result of deleting a conditional format rule.
    properties:
      rule:
        $ref: '#/definitions/ConditionalFormatRule'
        description: The rule that was deleted.
    type: object
  DeleteDeveloperMetadataRequest:
    description: A request to delete developer metadata.
    properties:
      dataFilter:
        $ref: '#/definitions/DataFilter'
        description: |-
          The data filter describing the criteria used to select which developer
          metadata entry to delete.
    type: object
  DeleteDeveloperMetadataResponse:
    description: The response from deleting developer metadata.
    properties:
      deletedDeveloperMetadata:
        description: The metadata that was deleted.
        items:
          $ref: '#/definitions/DeveloperMetadata'
        type: array
    type: object
  DeleteDimensionRequest:
    description: Deletes the dimensions from the sheet.
    properties:
      range:
        $ref: '#/definitions/DimensionRange'
        description: The dimensions to delete from the sheet.
    type: object
  DeleteEmbeddedObjectRequest:
    description: Deletes the embedded object with the given ID.
    properties:
      objectId:
        description: The ID of the embedded object to delete.
        format: int32
        type: integer
    type: object
  DeleteFilterViewRequest:
    description: Deletes a particular filter view.
    properties:
      filterId:
        description: The ID of the filter to delete.
        format: int32
        type: integer
    type: object
  DeleteNamedRangeRequest:
    description: Removes the named range with the given ID from the spreadsheet.
    properties:
      namedRangeId:
        description: The ID of the named range to delete.
        type: string
    type: object
  DeleteProtectedRangeRequest:
    description: Deletes the protected range with the given ID.
    properties:
      protectedRangeId:
        description: The ID of the protected range to delete.
        format: int32
        type: integer
    type: object
  DeleteRangeRequest:
    description: 'Deletes a range of cells, shifting other cells into the deleted area.'
    properties:
      range:
        $ref: '#/definitions/GridRange'
        description: The range of cells to delete.
      shiftDimension:
        description: |-
          The dimension from which deleted cells will be replaced with.
          If ROWS, existing cells will be shifted upward to
          replace the deleted cells. If COLUMNS, existing cells
          will be shifted left to replace the deleted cells.
        enum:
          - DIMENSION_UNSPECIFIED
          - ROWS
          - COLUMNS
        type: string
    type: object
  DeleteSheetRequest:
    description: Deletes the requested sheet.
    properties:
      sheetId:
        description: The ID of the sheet to delete.
        format: int32
        type: integer
    type: object
  DeveloperMetadata:
    description: |-
      Developer metadata associated with a location or object in a spreadsheet.
      Developer metadata may be used to associate arbitrary data with various
      parts of a spreadsheet and will remain associated at those locations as they
      move around and the spreadsheet is edited.  For example, if developer
      metadata is associated with row 5 and another row is then subsequently
      inserted above row 5, that original metadata will still be associated with
      the row it was first associated with (what is now row 6). If the associated
      object is deleted its metadata will be deleted too.
    properties:
      location:
        $ref: '#/definitions/DeveloperMetadataLocation'
        description: The location where the metadata is associated.
      metadataId:
        description: |-
          The spreadsheet-scoped unique ID that identifies the metadata. IDs may be
          specified when metadata is created, otherwise one will be randomly
          generated and assigned. Must be positive.
        format: int32
        type: integer
      metadataKey:
        description: |-
          The metadata key. There may be multiple metadata in a spreadsheet with the
          same key.  Developer metadata must always have a key specified.
        type: string
      metadataValue:
        description: Data associated with the metadata's key.
        type: string
      visibility:
        description: |-
          The metadata visibility.  Developer metadata must always have a visibility
          specified.
        enum:
          - DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED
          - DOCUMENT
          - PROJECT
        type: string
    type: object
  DeveloperMetadataLocation:
    description: A location where metadata may be associated in a spreadsheet.
    properties:
      dimensionRange:
        $ref: '#/definitions/DimensionRange'
        description: |-
          Represents the row or column when metadata is associated with
          a dimension. The specified DimensionRange must represent a single row
          or column; it cannot be unbounded or span multiple rows or columns.
      locationType:
        description: The type of location this object represents.  This field is read-only.
        enum:
          - DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED
          - ROW
          - COLUMN
          - SHEET
          - SPREADSHEET
        type: string
      sheetId:
        description: The ID of the sheet when metadata is associated with an entire sheet.
        format: int32
        type: integer
      spreadsheet:
        description: True when metadata is associated with an entire spreadsheet.
        type: boolean
    type: object
  DeveloperMetadataLookup:
    description: |-
      Selects DeveloperMetadata that matches all of the specified fields.  For
      example, if only a metadata ID is specified this considers the
      DeveloperMetadata with that particular unique ID. If a metadata key is
      specified, this considers all developer metadata with that key.  If a
      key, visibility, and location type are all specified, this considers all
      developer metadata with that key and visibility that are associated with a
      location of that type.  In general, this
      selects all DeveloperMetadata that matches the intersection of all the
      specified fields; any field or combination of fields may be specified.
    properties:
      locationMatchingStrategy:
        description: |-
          Determines how this lookup matches the location.  If this field is
          specified as EXACT, only developer metadata associated on the exact
          location specified is matched.  If this field is specified to INTERSECTING,
          developer metadata associated on intersecting locations is also
          matched.  If left unspecified, this field assumes a default value of
          INTERSECTING.
          If this field is specified, a metadataLocation
          must also be specified.
        enum:
          - DEVELOPER_METADATA_LOCATION_MATCHING_STRATEGY_UNSPECIFIED
          - EXACT_LOCATION
          - INTERSECTING_LOCATION
        type: string
      locationType:
        description: |-
          Limits the selected developer metadata to those entries which are
          associated with locations of the specified type.  For example, when this
          field is specified as ROW this lookup
          only considers developer metadata associated on rows.  If the field is left
          unspecified, all location types are considered.  This field cannot be
          specified as SPREADSHEET when
          the locationMatchingStrategy
          is specified as INTERSECTING or when the
          metadataLocation is specified as a
          non-spreadsheet location: spreadsheet metadata cannot intersect any other
          developer metadata location.  This field also must be left unspecified when
          the locationMatchingStrategy
          is specified as EXACT.
        enum:
          - DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED
          - ROW
          - COLUMN
          - SHEET
          - SPREADSHEET
        type: string
      metadataId:
        description: |-
          Limits the selected developer metadata to that which has a matching
          DeveloperMetadata.metadata_id.
        format: int32
        type: integer
      metadataKey:
        description: |-
          Limits the selected developer metadata to that which has a matching
          DeveloperMetadata.metadata_key.
        type: string
      metadataLocation:
        $ref: '#/definitions/DeveloperMetadataLocation'
        description: |-
          Limits the selected developer metadata to those entries associated with
          the specified location.  This field either matches exact locations or all
          intersecting locations according the specified
          locationMatchingStrategy.
      metadataValue:
        description: |-
          Limits the selected developer metadata to that which has a matching
          DeveloperMetadata.metadata_value.
        type: string
      visibility:
        description: |-
          Limits the selected developer metadata to that which has a matching
          DeveloperMetadata.visibility.  If left unspecified, all developer
          metadata visibile to the requesting project is considered.
        enum:
          - DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED
          - DOCUMENT
          - PROJECT
        type: string
    type: object
  DimensionProperties:
    description: Properties about a dimension.
    properties:
      developerMetadata:
        description: The developer metadata associated with a single row or column.
        items:
          $ref: '#/definitions/DeveloperMetadata'
        type: array
      hiddenByFilter:
        description: |-
          True if this dimension is being filtered.
          This field is read-only.
        type: boolean
      hiddenByUser:
        description: True if this dimension is explicitly hidden.
        type: boolean
      pixelSize:
        description: The height (if a row) or width (if a column) of the dimension in pixels.
        format: int32
        type: integer
    type: object
  DimensionRange:
    description: |-
      A range along a single dimension on a sheet.
      All indexes are zero-based.
      Indexes are half open: the start index is inclusive
      and the end index is exclusive.
      Missing indexes indicate the range is unbounded on that side.
    properties:
      dimension:
        description: The dimension of the span.
        enum:
          - DIMENSION_UNSPECIFIED
          - ROWS
          - COLUMNS
        type: string
      endIndex:
        description: 'The end (exclusive) of the span, or not set if unbounded.'
        format: int32
        type: integer
      sheetId:
        description: The sheet this span is on.
        format: int32
        type: integer
      startIndex:
        description: 'The start (inclusive) of the span, or not set if unbounded.'
        format: int32
        type: integer
    type: object
  DuplicateFilterViewRequest:
    description: Duplicates a particular filter view.
    properties:
      filterId:
        description: The ID of the filter being duplicated.
        format: int32
        type: integer
    type: object
  DuplicateFilterViewResponse:
    description: The result of a filter view being duplicated.
    properties:
      filter:
        $ref: '#/definitions/FilterView'
        description: The newly created filter.
    type: object
  DuplicateSheetRequest:
    description: Duplicates the contents of a sheet.
    properties:
      insertSheetIndex:
        description: |-
          The zero-based index where the new sheet should be inserted.
          The index of all sheets after this are incremented.
        format: int32
        type: integer
      newSheetId:
        description: |-
          If set, the ID of the new sheet. If not set, an ID is chosen.
          If set, the ID must not conflict with any existing sheet ID.
          If set, it must be non-negative.
        format: int32
        type: integer
      newSheetName:
        description: 'The name of the new sheet.  If empty, a new name is chosen for you.'
        type: string
      sourceSheetId:
        description: The sheet to duplicate.
        format: int32
        type: integer
    type: object
  DuplicateSheetResponse:
    description: The result of duplicating a sheet.
    properties:
      properties:
        $ref: '#/definitions/SheetProperties'
        description: The properties of the duplicate sheet.
    type: object
  Editors:
    description: The editors of a protected range.
    properties:
      domainUsersCanEdit:
        description: |-
          True if anyone in the document's domain has edit access to the protected
          range.  Domain protection is only supported on documents within a domain.
        type: boolean
      groups:
        description: The email addresses of groups with edit access to the protected range.
        items:
          type: string
        type: array
      users:
        description: The email addresses of users with edit access to the protected range.
        items:
          type: string
        type: array
    type: object
  EmbeddedChart:
    description: A chart embedded in a sheet.
    properties:
      chartId:
        description: The ID of the chart.
        format: int32
        type: integer
      position:
        $ref: '#/definitions/EmbeddedObjectPosition'
        description: The position of the chart.
      spec:
        $ref: '#/definitions/ChartSpec'
        description: The specification of the chart.
    type: object
  EmbeddedObjectPosition:
    description: The position of an embedded object such as a chart.
    properties:
      newSheet:
        description: |-
          If true, the embedded object will be put on a new sheet whose ID
          is chosen for you. Used only when writing.
        type: boolean
      overlayPosition:
        $ref: '#/definitions/OverlayPosition'
        description: The position at which the object is overlaid on top of a grid.
      sheetId:
        description: |-
          The sheet this is on. Set only if the embedded object
          is on its own sheet. Must be non-negative.
        format: int32
        type: integer
    type: object
  ErrorValue:
    description: An error in a cell.
    properties:
      message:
        description: |-
          A message with more information about the error
          (in the spreadsheet's locale).
        type: string
      type:
        description: The type of error.
        enum:
          - ERROR_TYPE_UNSPECIFIED
          - ERROR
          - NULL_VALUE
          - DIVIDE_BY_ZERO
          - VALUE
          - REF
          - NAME
          - NUM
          - N_A
          - LOADING
        type: string
    type: object
  ExtendedValue:
    description: The kinds of value that a cell in a spreadsheet can have.
    properties:
      boolValue:
        description: Represents a boolean value.
        type: boolean
      errorValue:
        $ref: '#/definitions/ErrorValue'
        description: |-
          Represents an error.
          This field is read-only.
      formulaValue:
        description: Represents a formula.
        type: string
      numberValue:
        description: |-
          Represents a double value.
          Note: Dates, Times and DateTimes are represented as doubles in
          "serial number" format.
        format: double
        type: number
      stringValue:
        description: |-
          Represents a string value.
          Leading single quotes are not included. For example, if the user typed
          `'123` into the UI, this would be represented as a `stringValue` of
          `"123"`.
        type: string
    type: object
  FilterCriteria:
    description: Criteria for showing/hiding rows in a filter or filter view.
    properties:
      condition:
        $ref: '#/definitions/BooleanCondition'
        description: |-
          A condition that must be true for values to be shown.
          (This does not override hiddenValues -- if a value is listed there,
           it will still be hidden.)
      hiddenValues:
        description: Values that should be hidden.
        items:
          type: string
        type: array
    type: object
  FilterView:
    description: A filter view.
    properties:
      criteria:
        additionalProperties:
          $ref: '#/definitions/FilterCriteria'
        description: |-
          The criteria for showing/hiding values per column.
          The map's key is the column index, and the value is the criteria for
          that column.
        type: object
      filterViewId:
        description: The ID of the filter view.
        format: int32
        type: integer
      namedRangeId:
        description: |-
          The named range this filter view is backed by, if any.

          When writing, only one of range or named_range_id
          may be set.
        type: string
      range:
        $ref: '#/definitions/GridRange'
        description: |-
          The range this filter view covers.

          When writing, only one of range or named_range_id
          may be set.
      sortSpecs:
        description: |-
          The sort order per column. Later specifications are used when values
          are equal in the earlier specifications.
        items:
          $ref: '#/definitions/SortSpec'
        type: array
      title:
        description: The name of the filter view.
        type: string
    type: object
  FindReplaceRequest:
    description: 'Finds and replaces data in cells over a range, sheet, or all sheets.'
    properties:
      allSheets:
        description: True to find/replace over all sheets.
        type: boolean
      find:
        description: The value to search.
        type: string
      includeFormulas:
        description: |-
          True if the search should include cells with formulas.
          False to skip cells with formulas.
        type: boolean
      matchCase:
        description: True if the search is case sensitive.
        type: boolean
      matchEntireCell:
        description: True if the find value should match the entire cell.
        type: boolean
      range:
        $ref: '#/definitions/GridRange'
        description: The range to find/replace over.
      replacement:
        description: The value to use as the replacement.
        type: string
      searchByRegex:
        description: |-
          True if the find value is a regex.
          The regular expression and replacement should follow Java regex rules
          at https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html.
          The replacement string is allowed to refer to capturing groups.
          For example, if one cell has the contents `"Google Sheets"` and another
          has `"Google Docs"`, then searching for `"o.* (.*)"` with a replacement of
          `"$1 Rocks"` would change the contents of the cells to
          `"GSheets Rocks"` and `"GDocs Rocks"` respectively.
        type: boolean
      sheetId:
        description: The sheet to find/replace over.
        format: int32
        type: integer
    type: object
  FindReplaceResponse:
    description: The result of the find/replace.
    properties:
      formulasChanged:
        description: The number of formula cells changed.
        format: int32
        type: integer
      occurrencesChanged:
        description: |-
          The number of occurrences (possibly multiple within a cell) changed.
          For example, if replacing `"e"` with `"o"` in `"Google Sheets"`, this would
          be `"3"` because `"Google Sheets"` -> `"Googlo Shoots"`.
        format: int32
        type: integer
      rowsChanged:
        description: The number of rows changed.
        format: int32
        type: integer
      sheetsChanged:
        description: The number of sheets changed.
        format: int32
        type: integer
      valuesChanged:
        description: The number of non-formula cells changed.
        format: int32
        type: integer
    type: object
  GetSpreadsheetByDataFilterRequest:
    description: The request for retrieving a Spreadsheet.
    properties:
      dataFilters:
        description: |-
          The DataFilters used to select which ranges to retrieve from
          the spreadsheet.
        items:
          $ref: '#/definitions/DataFilter'
        type: array
      includeGridData:
        description: |-
          True if grid data should be returned.
          This parameter is ignored if a field mask was set in the request.
        type: boolean
    type: object
  GradientRule:
    description: |-
      A rule that applies a gradient color scale format, based on
      the interpolation points listed. The format of a cell will vary
      based on its contents as compared to the values of the interpolation
      points.
    properties:
      maxpoint:
        $ref: '#/definitions/InterpolationPoint'
        description: The final interpolation point.
      midpoint:
        $ref: '#/definitions/InterpolationPoint'
        description: An optional midway interpolation point.
      minpoint:
        $ref: '#/definitions/InterpolationPoint'
        description: The starting interpolation point.
    type: object
  GridCoordinate:
    description: |-
      A coordinate in a sheet.
      All indexes are zero-based.
    properties:
      columnIndex:
        description: The column index of the coordinate.
        format: int32
        type: integer
      rowIndex:
        description: The row index of the coordinate.
        format: int32
        type: integer
      sheetId:
        description: The sheet this coordinate is on.
        format: int32
        type: integer
    type: object
  GridData:
    description: 'Data in the grid, as well as metadata about the dimensions.'
    properties:
      columnMetadata:
        description: |-
          Metadata about the requested columns in the grid, starting with the column
          in start_column.
        items:
          $ref: '#/definitions/DimensionProperties'
        type: array
      rowData:
        description: |-
          The data in the grid, one entry per row,
          starting with the row in startRow.
          The values in RowData will correspond to columns starting
          at start_column.
        items:
          $ref: '#/definitions/RowData'
        type: array
      rowMetadata:
        description: |-
          Metadata about the requested rows in the grid, starting with the row
          in start_row.
        items:
          $ref: '#/definitions/DimensionProperties'
        type: array
      startColumn:
        description: 'The first column this GridData refers to, zero-based.'
        format: int32
        type: integer
      startRow:
        description: 'The first row this GridData refers to, zero-based.'
        format: int32
        type: integer
    type: object
  GridProperties:
    description: Properties of a grid.
    properties:
      columnCount:
        description: The number of columns in the grid.
        format: int32
        type: integer
      frozenColumnCount:
        description: The number of columns that are frozen in the grid.
        format: int32
        type: integer
      frozenRowCount:
        description: The number of rows that are frozen in the grid.
        format: int32
        type: integer
      hideGridlines:
        description: True if the grid isn't showing gridlines in the UI.
        type: boolean
      rowCount:
        description: The number of rows in the grid.
        format: int32
        type: integer
    type: object
  GridRange:
    description: |-
      A range on a sheet.
      All indexes are zero-based.
      Indexes are half open, e.g the start index is inclusive
      and the end index is exclusive -- [start_index, end_index).
      Missing indexes indicate the range is unbounded on that side.

      For example, if `"Sheet1"` is sheet ID 0, then:

        `Sheet1!A1:A1 == sheet_id: 0,
                        start_row_index: 0, end_row_index: 1,
                        start_column_index: 0, end_column_index: 1`

        `Sheet1!A3:B4 == sheet_id: 0,
                        start_row_index: 2, end_row_index: 4,
                        start_column_index: 0, end_column_index: 2`

        `Sheet1!A:B == sheet_id: 0,
                      start_column_index: 0, end_column_index: 2`

        `Sheet1!A5:B == sheet_id: 0,
                       start_row_index: 4,
                       start_column_index: 0, end_column_index: 2`

        `Sheet1 == sheet_id:0`

      The start index must always be less than or equal to the end index.
      If the start index equals the end index, then the range is empty.
      Empty ranges are typically not meaningful and are usually rendered in the
      UI as `#REF!`.
    properties:
      endColumnIndex:
        description: 'The end column (exclusive) of the range, or not set if unbounded.'
        format: int32
        type: integer
      endRowIndex:
        description: 'The end row (exclusive) of the range, or not set if unbounded.'
        format: int32
        type: integer
      sheetId:
        description: The sheet this range is on.
        format: int32
        type: integer
      startColumnIndex:
        description: 'The start column (inclusive) of the range, or not set if unbounded.'
        format: int32
        type: integer
      startRowIndex:
        description: 'The start row (inclusive) of the range, or not set if unbounded.'
        format: int32
        type: integer
    type: object
  HistogramChartSpec:
    description: |-
      A <a href="/chart/interactive/docs/gallery/histogram">histogram chart</a>.
      A histogram chart groups data items into bins, displaying each bin as a
      column of stacked items.  Histograms are used to display the distribution
      of a dataset.  Each column of items represents a range into which those
      items fall.  The number of bins can be chosen automatically or specified
      explicitly.
    properties:
      bucketSize:
        description: |-
          By default the bucket size (the range of values stacked in a single
          column) is chosen automatically, but it may be overridden here.
          E.g., A bucket size of 1.5 results in buckets from 0 - 1.5, 1.5 - 3.0, etc.
          Cannot be negative.
          This field is optional.
        format: double
        type: number
      legendPosition:
        description: The position of the chart legend.
        enum:
          - HISTOGRAM_CHART_LEGEND_POSITION_UNSPECIFIED
          - BOTTOM_LEGEND
          - LEFT_LEGEND
          - RIGHT_LEGEND
          - TOP_LEGEND
          - NO_LEGEND
          - INSIDE_LEGEND
        type: string
      outlierPercentile:
        description: |-
          The outlier percentile is used to ensure that outliers do not adversely
          affect the calculation of bucket sizes.  For example, setting an outlier
          percentile of 0.05 indicates that the top and bottom 5% of values when
          calculating buckets.  The values are still included in the chart, they will
          be added to the first or last buckets instead of their own buckets.
          Must be between 0.0 and 0.5.
        format: double
        type: number
      series:
        description: |-
          The series for a histogram may be either a single series of values to be
          bucketed or multiple series, each of the same length, containing the name
          of the series followed by the values to be bucketed for that series.
        items:
          $ref: '#/definitions/HistogramSeries'
        type: array
      showItemDividers:
        description: |-
          Whether horizontal divider lines should be displayed between items in each
          column.
        type: boolean
    type: object
  HistogramSeries:
    description: A histogram series containing the series color and data.
    properties:
      barColor:
        $ref: '#/definitions/Color'
        description: |-
          The color of the column representing this series in each bucket.
          This field is optional.
      data:
        $ref: '#/definitions/ChartData'
        description: The data for this histogram series.
    type: object
  InsertDimensionRequest:
    description: Inserts rows or columns in a sheet at a particular index.
    properties:
      inheritFromBefore:
        description: |-
          Whether dimension properties should be extended from the dimensions
          before or after the newly inserted dimensions.
          True to inherit from the dimensions before (in which case the start
          index must be greater than 0), and false to inherit from the dimensions
          after.

          For example, if row index 0 has red background and row index 1
          has a green background, then inserting 2 rows at index 1 can inherit
          either the green or red background.  If `inheritFromBefore` is true,
          the two new rows will be red (because the row before the insertion point
          was red), whereas if `inheritFromBefore` is false, the two new rows will
          be green (because the row after the insertion point was green).
        type: boolean
      range:
        $ref: '#/definitions/DimensionRange'
        description: The dimensions to insert.  Both the start and end indexes must be bounded.
    type: object
  InsertRangeRequest:
    description: 'Inserts cells into a range, shifting the existing cells over or down.'
    properties:
      range:
        $ref: '#/definitions/GridRange'
        description: The range to insert new cells into.
      shiftDimension:
        description: |-
          The dimension which will be shifted when inserting cells.
          If ROWS, existing cells will be shifted down.
          If COLUMNS, existing cells will be shifted right.
        enum:
          - DIMENSION_UNSPECIFIED
          - ROWS
          - COLUMNS
        type: string
    type: object
  InterpolationPoint:
    description: |-
      A single interpolation point on a gradient conditional format.
      These pin the gradient color scale according to the color,
      type and value chosen.
    properties:
      color:
        $ref: '#/definitions/Color'
        description: The color this interpolation point should use.
      type:
        description: How the value should be interpreted.
        enum:
          - INTERPOLATION_POINT_TYPE_UNSPECIFIED
          - MIN
          - MAX
          - NUMBER
          - PERCENT
          - PERCENTILE
        type: string
      value:
        description: |-
          The value this interpolation point uses.  May be a formula.
          Unused if type is MIN or
          MAX.
        type: string
    type: object
  IterativeCalculationSettings:
    description: |-
      Settings to control how circular dependencies are resolved with iterative
      calculation.
    properties:
      convergenceThreshold:
        description: |-
          When iterative calculation is enabled and successive results differ by
          less than this threshold value, the calculation rounds stop.
        format: double
        type: number
      maxIterations:
        description: |-
          When iterative calculation is enabled, the maximum number of calculation
          rounds to perform.
        format: int32
        type: integer
    type: object
  MatchedDeveloperMetadata:
    description: |-
      A developer metadata entry and the data filters specified in the original
      request that matched it.
    properties:
      dataFilters:
        description: All filters matching the returned developer metadata.
        items:
          $ref: '#/definitions/DataFilter'
        type: array
      developerMetadata:
        $ref: '#/definitions/DeveloperMetadata'
        description: The developer metadata matching the specified filters.
    type: object
  MatchedValueRange:
    description: A value range that was matched by one or more data filers.
    properties:
      dataFilters:
        description: |-
          The DataFilters from the request that matched the range of
          values.
        items:
          $ref: '#/definitions/DataFilter'
        type: array
      valueRange:
        $ref: '#/definitions/ValueRange'
        description: The values matched by the DataFilter.
    type: object
  MergeCellsRequest:
    description: Merges all cells in the range.
    properties:
      mergeType:
        description: How the cells should be merged.
        enum:
          - MERGE_ALL
          - MERGE_COLUMNS
          - MERGE_ROWS
        type: string
      range:
        $ref: '#/definitions/GridRange'
        description: The range of cells to merge.
    type: object
  MoveDimensionRequest:
    description: Moves one or more rows or columns.
    properties:
      destinationIndex:
        description: |-
          The zero-based start index of where to move the source data to,
          based on the coordinates *before* the source data is removed
          from the grid.  Existing data will be shifted down or right
          (depending on the dimension) to make room for the moved dimensions.
          The source dimensions are removed from the grid, so the
          the data may end up in a different index than specified.

          For example, given `A1..A5` of `0, 1, 2, 3, 4` and wanting to move
          `"1"` and `"2"` to between `"3"` and `"4"`, the source would be
          `ROWS [1..3)`,and the destination index would be `"4"`
          (the zero-based index of row 5).
          The end result would be `A1..A5` of `0, 3, 1, 2, 4`.
        format: int32
        type: integer
      source:
        $ref: '#/definitions/DimensionRange'
        description: The source dimensions to move.
    type: object
  NamedRange:
    description: A named range.
    properties:
      name:
        description: The name of the named range.
        type: string
      namedRangeId:
        description: The ID of the named range.
        type: string
      range:
        $ref: '#/definitions/GridRange'
        description: The range this represents.
    type: object
  NumberFormat:
    description: The number format of a cell.
    properties:
      pattern:
        description: |-
          Pattern string used for formatting.  If not set, a default pattern based on
          the user's locale will be used if necessary for the given type.
          See the [Date and Number Formats guide](/sheets/api/guides/formats) for more
          information about the supported patterns.
        type: string
      type:
        description: |-
          The type of the number format.
          When writing, this field must be set.
        enum:
          - NUMBER_FORMAT_TYPE_UNSPECIFIED
          - TEXT
          - NUMBER
          - PERCENT
          - CURRENCY
          - DATE
          - TIME
          - DATE_TIME
          - SCIENTIFIC
        type: string
    type: object
  OrgChartSpec:
    description: |-
      An <a href="/chart/interactive/docs/gallery/orgchart">org chart</a>.
      Org charts require a unique set of labels in labels and may
      optionally include parent_labels and tooltips.
      parent_labels contain, for each node, the label identifying the parent
      node.  tooltips contain, for each node, an optional tooltip.

      For example, to describe an OrgChart with Alice as the CEO, Bob as the
      President (reporting to Alice) and Cathy as VP of Sales (also reporting to
      Alice), have labels contain "Alice", "Bob", "Cathy",
      parent_labels contain "", "Alice", "Alice" and tooltips contain
      "CEO", "President", "VP Sales".
    properties:
      labels:
        $ref: '#/definitions/ChartData'
        description: |-
          The data containing the labels for all the nodes in the chart.  Labels
          must be unique.
      nodeColor:
        $ref: '#/definitions/Color'
        description: The color of the org chart nodes.
      nodeSize:
        description: The size of the org chart nodes.
        enum:
          - ORG_CHART_LABEL_SIZE_UNSPECIFIED
          - SMALL
          - MEDIUM
          - LARGE
        type: string
      parentLabels:
        $ref: '#/definitions/ChartData'
        description: |-
          The data containing the label of the parent for the corresponding node.
          A blank value indicates that the node has no parent and is a top-level
          node.
          This field is optional.
      selectedNodeColor:
        $ref: '#/definitions/Color'
        description: The color of the selected org chart nodes.
      tooltips:
        $ref: '#/definitions/ChartData'
        description: |-
          The data containing the tooltip for the corresponding node.  A blank value
          results in no tooltip being displayed for the node.
          This field is optional.
    type: object
  OverlayPosition:
    description: The location an object is overlaid on top of a grid.
    properties:
      anchorCell:
        $ref: '#/definitions/GridCoordinate'
        description: The cell the object is anchored to.
      heightPixels:
        description: 'The height of the object, in pixels. Defaults to 371.'
        format: int32
        type: integer
      offsetXPixels:
        description: |-
          The horizontal offset, in pixels, that the object is offset
          from the anchor cell.
        format: int32
        type: integer
      offsetYPixels:
        description: |-
          The vertical offset, in pixels, that the object is offset
          from the anchor cell.
        format: int32
        type: integer
      widthPixels:
        description: 'The width of the object, in pixels. Defaults to 600.'
        format: int32
        type: integer
    type: object
  Padding:
    description: |-
      The amount of padding around the cell, in pixels.
      When updating padding, every field must be specified.
    properties:
      bottom:
        description: The bottom padding of the cell.
        format: int32
        type: integer
      left:
        description: The left padding of the cell.
        format: int32
        type: integer
      right:
        description: The right padding of the cell.
        format: int32
        type: integer
      top:
        description: The top padding of the cell.
        format: int32
        type: integer
    type: object
  PasteDataRequest:
    description: Inserts data into the spreadsheet starting at the specified coordinate.
    properties:
      coordinate:
        $ref: '#/definitions/GridCoordinate'
        description: The coordinate at which the data should start being inserted.
      data:
        description: The data to insert.
        type: string
      delimiter:
        description: The delimiter in the data.
        type: string
      html:
        description: True if the data is HTML.
        type: boolean
      type:
        description: How the data should be pasted.
        enum:
          - PASTE_NORMAL
          - PASTE_VALUES
          - PASTE_FORMAT
          - PASTE_NO_BORDERS
          - PASTE_FORMULA
          - PASTE_DATA_VALIDATION
          - PASTE_CONDITIONAL_FORMATTING
        type: string
    type: object
  PieChartSpec:
    description: A <a href="/chart/interactive/docs/gallery/piechart">pie chart</a>.
    properties:
      domain:
        $ref: '#/definitions/ChartData'
        description: The data that covers the domain of the pie chart.
      legendPosition:
        description: Where the legend of the pie chart should be drawn.
        enum:
          - PIE_CHART_LEGEND_POSITION_UNSPECIFIED
          - BOTTOM_LEGEND
          - LEFT_LEGEND
          - RIGHT_LEGEND
          - TOP_LEGEND
          - NO_LEGEND
          - LABELED_LEGEND
        type: string
      pieHole:
        description: The size of the hole in the pie chart.
        format: double
        type: number
      series:
        $ref: '#/definitions/ChartData'
        description: The data that covers the one and only series of the pie chart.
      threeDimensional:
        description: True if the pie is three dimensional.
        type: boolean
    type: object
  PivotFilterCriteria:
    description: Criteria for showing/hiding rows in a pivot table.
    properties:
      visibleValues:
        description: Values that should be included.  Values not listed here are excluded.
        items:
          type: string
        type: array
    type: object
  PivotGroup:
    description: A single grouping (either row or column) in a pivot table.
    properties:
      showTotals:
        description: True if the pivot table should include the totals for this grouping.
        type: boolean
      sortOrder:
        description: The order the values in this group should be sorted.
        enum:
          - SORT_ORDER_UNSPECIFIED
          - ASCENDING
          - DESCENDING
        type: string
      sourceColumnOffset:
        description: |-
          The column offset of the source range that this grouping is based on.

          For example, if the source was `C10:E15`, a `sourceColumnOffset` of `0`
          means this group refers to column `C`, whereas the offset `1` would refer
          to column `D`.
        format: int32
        type: integer
      valueBucket:
        $ref: '#/definitions/PivotGroupSortValueBucket'
        description: |-
          The bucket of the opposite pivot group to sort by.
          If not specified, sorting is alphabetical by this group's values.
      valueMetadata:
        description: Metadata about values in the grouping.
        items:
          $ref: '#/definitions/PivotGroupValueMetadata'
        type: array
    type: object
  PivotGroupSortValueBucket:
    description: Information about which values in a pivot group should be used for sorting.
    properties:
      buckets:
        description: |-
          Determines the bucket from which values are chosen to sort.

          For example, in a pivot table with one row group & two column groups,
          the row group can list up to two values. The first value corresponds
          to a value within the first column group, and the second value
          corresponds to a value in the second column group.  If no values
          are listed, this would indicate that the row should be sorted according
          to the "Grand Total" over the column groups. If a single value is listed,
          this would correspond to using the "Total" of that bucket.
        items:
          $ref: '#/definitions/ExtendedValue'
        type: array
      valuesIndex:
        description: |-
          The offset in the PivotTable.values list which the values in this
          grouping should be sorted by.
        format: int32
        type: integer
    type: object
  PivotGroupValueMetadata:
    description: Metadata about a value in a pivot grouping.
    properties:
      collapsed:
        description: True if the data corresponding to the value is collapsed.
        type: boolean
      value:
        $ref: '#/definitions/ExtendedValue'
        description: |-
          The calculated value the metadata corresponds to.
          (Note that formulaValue is not valid,
           because the values will be calculated.)
    type: object
  PivotTable:
    description: A pivot table.
    properties:
      columns:
        description: Each column grouping in the pivot table.
        items:
          $ref: '#/definitions/PivotGroup'
        type: array
      criteria:
        additionalProperties:
          $ref: '#/definitions/PivotFilterCriteria'
        description: |-
          An optional mapping of filters per source column offset.

          The filters will be applied before aggregating data into the pivot table.
          The map's key is the column offset of the source range that you want to
          filter, and the value is the criteria for that column.

          For example, if the source was `C10:E15`, a key of `0` will have the filter
          for column `C`, whereas the key `1` is for column `D`.
        type: object
      rows:
        description: Each row grouping in the pivot table.
        items:
          $ref: '#/definitions/PivotGroup'
        type: array
      source:
        $ref: '#/definitions/GridRange'
        description: The range the pivot table is reading data from.
      valueLayout:
        description: |-
          Whether values should be listed horizontally (as columns)
          or vertically (as rows).
        enum:
          - HORIZONTAL
          - VERTICAL
        type: string
      values:
        description: A list of values to include in the pivot table.
        items:
          $ref: '#/definitions/PivotValue'
        type: array
    type: object
  PivotValue:
    description: The definition of how a value in a pivot table should be calculated.
    properties:
      formula:
        description: |-
          A custom formula to calculate the value.  The formula must start
          with an `=` character.
        type: string
      name:
        description: |-
          A name to use for the value. This is only used if formula was set.
          Otherwise, the column name is used.
        type: string
      sourceColumnOffset:
        description: |-
          The column offset of the source range that this value reads from.

          For example, if the source was `C10:E15`, a `sourceColumnOffset` of `0`
          means this value refers to column `C`, whereas the offset `1` would
          refer to column `D`.
        format: int32
        type: integer
      summarizeFunction:
        description: |-
          A function to summarize the value.
          If formula is set, the only supported values are
          SUM and
          CUSTOM.
          If sourceColumnOffset is set, then `CUSTOM`
          is not supported.
        enum:
          - PIVOT_STANDARD_VALUE_FUNCTION_UNSPECIFIED
          - SUM
          - COUNTA
          - COUNT
          - COUNTUNIQUE
          - AVERAGE
          - MAX
          - MIN
          - MEDIAN
          - PRODUCT
          - STDEV
          - STDEVP
          - VAR
          - VARP
          - CUSTOM
        type: string
    type: object
  ProtectedRange:
    description: A protected range.
    properties:
      description:
        description: The description of this protected range.
        type: string
      editors:
        $ref: '#/definitions/Editors'
        description: |-
          The users and groups with edit access to the protected range.
          This field is only visible to users with edit access to the protected
          range and the document.
          Editors are not supported with warning_only protection.
      namedRangeId:
        description: |-
          The named range this protected range is backed by, if any.

          When writing, only one of range or named_range_id
          may be set.
        type: string
      protectedRangeId:
        description: |-
          The ID of the protected range.
          This field is read-only.
        format: int32
        type: integer
      range:
        $ref: '#/definitions/GridRange'
        description: |-
          The range that is being protected.
          The range may be fully unbounded, in which case this is considered
          a protected sheet.

          When writing, only one of range or named_range_id
          may be set.
      requestingUserCanEdit:
        description: |-
          True if the user who requested this protected range can edit the
          protected area.
          This field is read-only.
        type: boolean
      unprotectedRanges:
        description: |-
          The list of unprotected ranges within a protected sheet.
          Unprotected ranges are only supported on protected sheets.
        items:
          $ref: '#/definitions/GridRange'
        type: array
      warningOnly:
        description: |-
          True if this protected range will show a warning when editing.
          Warning-based protection means that every user can edit data in the
          protected range, except editing will prompt a warning asking the user
          to confirm the edit.

          When writing: if this field is true, then editors is ignored.
          Additionally, if this field is changed from true to false and the
          `editors` field is not set (nor included in the field mask), then
          the editors will be set to all the editors in the document.
        type: boolean
    type: object
  RandomizeRangeRequest:
    description: Randomizes the order of the rows in a range.
    properties:
      range:
        $ref: '#/definitions/GridRange'
        description: The range to randomize.
    type: object
  RepeatCellRequest:
    description: |-
      Updates all cells in the range to the values in the given Cell object.
      Only the fields listed in the fields field are updated; others are
      unchanged.

      If writing a cell with a formula, the formula's ranges will automatically
      increment for each field in the range.
      For example, if writing a cell with formula `=A1` into range B2:C4,
      B2 would be `=A1`, B3 would be `=A2`, B4 would be `=A3`,
      C2 would be `=B1`, C3 would be `=B2`, C4 would be `=B3`.

      To keep the formula's ranges static, use the `$` indicator.
      For example, use the formula `=$A$1` to prevent both the row and the
      column from incrementing.
    properties:
      cell:
        $ref: '#/definitions/CellData'
        description: The data to write.
      fields:
        description: |-
          The fields that should be updated.  At least one field must be specified.
          The root `cell` is implied and should not be specified.
          A single `"*"` can be used as short-hand for listing every field.
        format: google-fieldmask
        type: string
      range:
        $ref: '#/definitions/GridRange'
        description: The range to repeat the cell in.
    type: object
  Request:
    description: A single kind of update to apply to a spreadsheet.
    properties:
      addBanding:
        $ref: '#/definitions/AddBandingRequest'
        description: Adds a new banded range
      addChart:
        $ref: '#/definitions/AddChartRequest'
        description: Adds a chart.
      addConditionalFormatRule:
        $ref: '#/definitions/AddConditionalFormatRuleRequest'
        description: Adds a new conditional format rule.
      addFilterView:
        $ref: '#/definitions/AddFilterViewRequest'
        description: Adds a filter view.
      addNamedRange:
        $ref: '#/definitions/AddNamedRangeRequest'
        description: Adds a named range.
      addProtectedRange:
        $ref: '#/definitions/AddProtectedRangeRequest'
        description: Adds a protected range.
      addSheet:
        $ref: '#/definitions/AddSheetRequest'
        description: Adds a sheet.
      appendCells:
        $ref: '#/definitions/AppendCellsRequest'
        description: Appends cells after the last row with data in a sheet.
      appendDimension:
        $ref: '#/definitions/AppendDimensionRequest'
        description: Appends dimensions to the end of a sheet.
      autoFill:
        $ref: '#/definitions/AutoFillRequest'
        description: Automatically fills in more data based on existing data.
      autoResizeDimensions:
        $ref: '#/definitions/AutoResizeDimensionsRequest'
        description: |-
          Automatically resizes one or more dimensions based on the contents
          of the cells in that dimension.
      clearBasicFilter:
        $ref: '#/definitions/ClearBasicFilterRequest'
        description: Clears the basic filter on a sheet.
      copyPaste:
        $ref: '#/definitions/CopyPasteRequest'
        description: Copies data from one area and pastes it to another.
      createDeveloperMetadata:
        $ref: '#/definitions/CreateDeveloperMetadataRequest'
        description: Creates new developer metadata
      cutPaste:
        $ref: '#/definitions/CutPasteRequest'
        description: Cuts data from one area and pastes it to another.
      deleteBanding:
        $ref: '#/definitions/DeleteBandingRequest'
        description: Removes a banded range
      deleteConditionalFormatRule:
        $ref: '#/definitions/DeleteConditionalFormatRuleRequest'
        description: Deletes an existing conditional format rule.
      deleteDeveloperMetadata:
        $ref: '#/definitions/DeleteDeveloperMetadataRequest'
        description: Deletes developer metadata
      deleteDimension:
        $ref: '#/definitions/DeleteDimensionRequest'
        description: Deletes rows or columns in a sheet.
      deleteEmbeddedObject:
        $ref: '#/definitions/DeleteEmbeddedObjectRequest'
        description: 'Deletes an embedded object (e.g, chart, image) in a sheet.'
      deleteFilterView:
        $ref: '#/definitions/DeleteFilterViewRequest'
        description: Deletes a filter view from a sheet.
      deleteNamedRange:
        $ref: '#/definitions/DeleteNamedRangeRequest'
        description: Deletes a named range.
      deleteProtectedRange:
        $ref: '#/definitions/DeleteProtectedRangeRequest'
        description: Deletes a protected range.
      deleteRange:
        $ref: '#/definitions/DeleteRangeRequest'
        description: 'Deletes a range of cells from a sheet, shifting the remaining cells.'
      deleteSheet:
        $ref: '#/definitions/DeleteSheetRequest'
        description: Deletes a sheet.
      duplicateFilterView:
        $ref: '#/definitions/DuplicateFilterViewRequest'
        description: Duplicates a filter view.
      duplicateSheet:
        $ref: '#/definitions/DuplicateSheetRequest'
        description: Duplicates a sheet.
      findReplace:
        $ref: '#/definitions/FindReplaceRequest'
        description: Finds and replaces occurrences of some text with other text.
      insertDimension:
        $ref: '#/definitions/InsertDimensionRequest'
        description: Inserts new rows or columns in a sheet.
      insertRange:
        $ref: '#/definitions/InsertRangeRequest'
        description: 'Inserts new cells in a sheet, shifting the existing cells.'
      mergeCells:
        $ref: '#/definitions/MergeCellsRequest'
        description: Merges cells together.
      moveDimension:
        $ref: '#/definitions/MoveDimensionRequest'
        description: Moves rows or columns to another location in a sheet.
      pasteData:
        $ref: '#/definitions/PasteDataRequest'
        description: Pastes data (HTML or delimited) into a sheet.
      randomizeRange:
        $ref: '#/definitions/RandomizeRangeRequest'
        description: Randomizes the order of the rows in a range.
      repeatCell:
        $ref: '#/definitions/RepeatCellRequest'
        description: Repeats a single cell across a range.
      setBasicFilter:
        $ref: '#/definitions/SetBasicFilterRequest'
        description: Sets the basic filter on a sheet.
      setDataValidation:
        $ref: '#/definitions/SetDataValidationRequest'
        description: Sets data validation for one or more cells.
      sortRange:
        $ref: '#/definitions/SortRangeRequest'
        description: Sorts data in a range.
      textToColumns:
        $ref: '#/definitions/TextToColumnsRequest'
        description: Converts a column of text into many columns of text.
      unmergeCells:
        $ref: '#/definitions/UnmergeCellsRequest'
        description: Unmerges merged cells.
      updateBanding:
        $ref: '#/definitions/UpdateBandingRequest'
        description: Updates a banded range
      updateBorders:
        $ref: '#/definitions/UpdateBordersRequest'
        description: Updates the borders in a range of cells.
      updateCells:
        $ref: '#/definitions/UpdateCellsRequest'
        description: Updates many cells at once.
      updateChartSpec:
        $ref: '#/definitions/UpdateChartSpecRequest'
        description: Updates a chart's specifications.
      updateConditionalFormatRule:
        $ref: '#/definitions/UpdateConditionalFormatRuleRequest'
        description: Updates an existing conditional format rule.
      updateDeveloperMetadata:
        $ref: '#/definitions/UpdateDeveloperMetadataRequest'
        description: Updates an existing developer metadata entry
      updateDimensionProperties:
        $ref: '#/definitions/UpdateDimensionPropertiesRequest'
        description: Updates dimensions' properties.
      updateEmbeddedObjectPosition:
        $ref: '#/definitions/UpdateEmbeddedObjectPositionRequest'
        description: 'Updates an embedded object''s (e.g. chart, image) position.'
      updateFilterView:
        $ref: '#/definitions/UpdateFilterViewRequest'
        description: Updates the properties of a filter view.
      updateNamedRange:
        $ref: '#/definitions/UpdateNamedRangeRequest'
        description: Updates a named range.
      updateProtectedRange:
        $ref: '#/definitions/UpdateProtectedRangeRequest'
        description: Updates a protected range.
      updateSheetProperties:
        $ref: '#/definitions/UpdateSheetPropertiesRequest'
        description: Updates a sheet's properties.
      updateSpreadsheetProperties:
        $ref: '#/definitions/UpdateSpreadsheetPropertiesRequest'
        description: Updates the spreadsheet's properties.
    type: object
  Response:
    description: A single response from an update.
    properties:
      addBanding:
        $ref: '#/definitions/AddBandingResponse'
        description: A reply from adding a banded range.
      addChart:
        $ref: '#/definitions/AddChartResponse'
        description: A reply from adding a chart.
      addFilterView:
        $ref: '#/definitions/AddFilterViewResponse'
        description: A reply from adding a filter view.
      addNamedRange:
        $ref: '#/definitions/AddNamedRangeResponse'
        description: A reply from adding a named range.
      addProtectedRange:
        $ref: '#/definitions/AddProtectedRangeResponse'
        description: A reply from adding a protected range.
      addSheet:
        $ref: '#/definitions/AddSheetResponse'
        description: A reply from adding a sheet.
      createDeveloperMetadata:
        $ref: '#/definitions/CreateDeveloperMetadataResponse'
        description: A reply from creating a developer metadata entry.
      deleteConditionalFormatRule:
        $ref: '#/definitions/DeleteConditionalFormatRuleResponse'
        description: A reply from deleting a conditional format rule.
      deleteDeveloperMetadata:
        $ref: '#/definitions/DeleteDeveloperMetadataResponse'
        description: A reply from deleting a developer metadata entry.
      duplicateFilterView:
        $ref: '#/definitions/DuplicateFilterViewResponse'
        description: A reply from duplicating a filter view.
      duplicateSheet:
        $ref: '#/definitions/DuplicateSheetResponse'
        description: A reply from duplicating a sheet.
      findReplace:
        $ref: '#/definitions/FindReplaceResponse'
        description: A reply from doing a find/replace.
      updateConditionalFormatRule:
        $ref: '#/definitions/UpdateConditionalFormatRuleResponse'
        description: A reply from updating a conditional format rule.
      updateDeveloperMetadata:
        $ref: '#/definitions/UpdateDeveloperMetadataResponse'
        description: A reply from updating a developer metadata entry.
      updateEmbeddedObjectPosition:
        $ref: '#/definitions/UpdateEmbeddedObjectPositionResponse'
        description: A reply from updating an embedded object's position.
    type: object
  RowData:
    description: Data about each cell in a row.
    properties:
      values:
        description: 'The values in the row, one per column.'
        items:
          $ref: '#/definitions/CellData'
        type: array
    type: object
  SearchDeveloperMetadataRequest:
    description: |-
      A request to retrieve all developer metadata matching the set of specified
      criteria.
    properties:
      dataFilters:
        description: |-
          The data filters describing the criteria used to determine which
          DeveloperMetadata entries to return.  DeveloperMetadata matching any of the
          specified filters will be included in the response.
        items:
          $ref: '#/definitions/DataFilter'
        type: array
    type: object
  SearchDeveloperMetadataResponse:
    description: A reply to a developer metadata search request.
    properties:
      matchedDeveloperMetadata:
        description: The metadata matching the criteria of the search request.
        items:
          $ref: '#/definitions/MatchedDeveloperMetadata'
        type: array
    type: object
  SetBasicFilterRequest:
    description: Sets the basic filter associated with a sheet.
    properties:
      filter:
        $ref: '#/definitions/BasicFilter'
        description: The filter to set.
    type: object
  SetDataValidationRequest:
    description: |-
      Sets a data validation rule to every cell in the range.
      To clear validation in a range, call this with no rule specified.
    properties:
      range:
        $ref: '#/definitions/GridRange'
        description: The range the data validation rule should apply to.
      rule:
        $ref: '#/definitions/DataValidationRule'
        description: |-
          The data validation rule to set on each cell in the range,
          or empty to clear the data validation in the range.
    type: object
  Sheet:
    description: A sheet in a spreadsheet.
    properties:
      bandedRanges:
        description: The banded (i.e. alternating colors) ranges on this sheet.
        items:
          $ref: '#/definitions/BandedRange'
        type: array
      basicFilter:
        $ref: '#/definitions/BasicFilter'
        description: 'The filter on this sheet, if any.'
      charts:
        description: The specifications of every chart on this sheet.
        items:
          $ref: '#/definitions/EmbeddedChart'
        type: array
      conditionalFormats:
        description: The conditional format rules in this sheet.
        items:
          $ref: '#/definitions/ConditionalFormatRule'
        type: array
      data:
        description: |-
          Data in the grid, if this is a grid sheet.
          The number of GridData objects returned is dependent on the number of
          ranges requested on this sheet. For example, if this is representing
          `Sheet1`, and the spreadsheet was requested with ranges
          `Sheet1!A1:C10` and `Sheet1!D15:E20`, then the first GridData will have a
          startRow/startColumn of `0`,
          while the second one will have `startRow 14` (zero-based row 15),
          and `startColumn 3` (zero-based column D).
        items:
          $ref: '#/definitions/GridData'
        type: array
      developerMetadata:
        description: The developer metadata associated with a sheet.
        items:
          $ref: '#/definitions/DeveloperMetadata'
        type: array
      filterViews:
        description: The filter views in this sheet.
        items:
          $ref: '#/definitions/FilterView'
        type: array
      merges:
        description: The ranges that are merged together.
        items:
          $ref: '#/definitions/GridRange'
        type: array
      properties:
        $ref: '#/definitions/SheetProperties'
        description: The properties of the sheet.
      protectedRanges:
        description: The protected ranges in this sheet.
        items:
          $ref: '#/definitions/ProtectedRange'
        type: array
    type: object
  SheetProperties:
    description: Properties of a sheet.
    properties:
      gridProperties:
        $ref: '#/definitions/GridProperties'
        description: |-
          Additional properties of the sheet if this sheet is a grid.
          (If the sheet is an object sheet, containing a chart or image, then
          this field will be absent.)
          When writing it is an error to set any grid properties on non-grid sheets.
      hidden:
        description: 'True if the sheet is hidden in the UI, false if it''s visible.'
        type: boolean
      index:
        description: |-
          The index of the sheet within the spreadsheet.
          When adding or updating sheet properties, if this field
          is excluded then the sheet will be added or moved to the end
          of the sheet list. When updating sheet indices or inserting
          sheets, movement is considered in "before the move" indexes.
          For example, if there were 3 sheets (S1, S2, S3) in order to
          move S1 ahead of S2 the index would have to be set to 2. A sheet
          index update request will be ignored if the requested index is
          identical to the sheets current index or if the requested new
          index is equal to the current sheet index + 1.
        format: int32
        type: integer
      rightToLeft:
        description: True if the sheet is an RTL sheet instead of an LTR sheet.
        type: boolean
      sheetId:
        description: |-
          The ID of the sheet. Must be non-negative.
          This field cannot be changed once set.
        format: int32
        type: integer
      sheetType:
        description: |-
          The type of sheet. Defaults to GRID.
          This field cannot be changed once set.
        enum:
          - SHEET_TYPE_UNSPECIFIED
          - GRID
          - OBJECT
        type: string
      tabColor:
        $ref: '#/definitions/Color'
        description: The color of the tab in the UI.
      title:
        description: The name of the sheet.
        type: string
    type: object
  SortRangeRequest:
    description: Sorts data in rows based on a sort order per column.
    properties:
      range:
        $ref: '#/definitions/GridRange'
        description: The range to sort.
      sortSpecs:
        description: |-
          The sort order per column. Later specifications are used when values
          are equal in the earlier specifications.
        items:
          $ref: '#/definitions/SortSpec'
        type: array
    type: object
  SortSpec:
    description: A sort order associated with a specific column or row.
    properties:
      dimensionIndex:
        description: The dimension the sort should be applied to.
        format: int32
        type: integer
      sortOrder:
        description: The order data should be sorted.
        enum:
          - SORT_ORDER_UNSPECIFIED
          - ASCENDING
          - DESCENDING
        type: string
    type: object
  SourceAndDestination:
    description: A combination of a source range and how to extend that source.
    properties:
      dimension:
        description: The dimension that data should be filled into.
        enum:
          - DIMENSION_UNSPECIFIED
          - ROWS
          - COLUMNS
        type: string
      fillLength:
        description: |-
          The number of rows or columns that data should be filled into.
          Positive numbers expand beyond the last row or last column
          of the source.  Negative numbers expand before the first row
          or first column of the source.
        format: int32
        type: integer
      source:
        $ref: '#/definitions/GridRange'
        description: The location of the data to use as the source of the autofill.
    type: object
  Spreadsheet:
    description: Resource that represents a spreadsheet.
    properties:
      developerMetadata:
        description: The developer metadata associated with a spreadsheet.
        items:
          $ref: '#/definitions/DeveloperMetadata'
        type: array
      namedRanges:
        description: The named ranges defined in a spreadsheet.
        items:
          $ref: '#/definitions/NamedRange'
        type: array
      properties:
        $ref: '#/definitions/SpreadsheetProperties'
        description: Overall properties of a spreadsheet.
      sheets:
        description: The sheets that are part of a spreadsheet.
        items:
          $ref: '#/definitions/Sheet'
        type: array
      spreadsheetId:
        description: |-
          The ID of the spreadsheet.
          This field is read-only.
        type: string
      spreadsheetUrl:
        description: |-
          The url of the spreadsheet.
          This field is read-only.
        type: string
    type: object
  SpreadsheetProperties:
    description: Properties of a spreadsheet.
    properties:
      autoRecalc:
        description: The amount of time to wait before volatile functions are recalculated.
        enum:
          - RECALCULATION_INTERVAL_UNSPECIFIED
          - ON_CHANGE
          - MINUTE
          - HOUR
        type: string
      defaultFormat:
        $ref: '#/definitions/CellFormat'
        description: |-
          The default format of all cells in the spreadsheet.
          CellData.effectiveFormat will not be set if the
          cell's format is equal to this default format.
          This field is read-only.
      iterativeCalculationSettings:
        $ref: '#/definitions/IterativeCalculationSettings'
        description: |-
          Determines whether and how circular references are resolved with iterative
          calculation.  Absence of this field means that circular references will
          result in calculation errors.
      locale:
        description: |-
          The locale of the spreadsheet in one of the following formats:

          * an ISO 639-1 language code such as `en`

          * an ISO 639-2 language code such as `fil`, if no 639-1 code exists

          * a combination of the ISO language code and country code, such as `en_US`

          Note: when updating this field, not all locales/languages are supported.
        type: string
      timeZone:
        description: |-
          The time zone of the spreadsheet, in CLDR format such as
          `America/New_York`. If the time zone isn't recognized, this may
          be a custom time zone such as `GMT-07:00`.
        type: string
      title:
        description: The title of the spreadsheet.
        type: string
    type: object
  TextFormat:
    description: |-
      The format of a run of text in a cell.
      Absent values indicate that the field isn't specified.
    properties:
      bold:
        description: True if the text is bold.
        type: boolean
      fontFamily:
        description: The font family.
        type: string
      fontSize:
        description: The size of the font.
        format: int32
        type: integer
      foregroundColor:
        $ref: '#/definitions/Color'
        description: The foreground color of the text.
      italic:
        description: True if the text is italicized.
        type: boolean
      strikethrough:
        description: True if the text has a strikethrough.
        type: boolean
      underline:
        description: True if the text is underlined.
        type: boolean
    type: object
  TextFormatRun:
    description: |-
      A run of a text format. The format of this run continues until the start
      index of the next run.
      When updating, all fields must be set.
    properties:
      format:
        $ref: '#/definitions/TextFormat'
        description: The format of this run.  Absent values inherit the cell's format.
      startIndex:
        description: The character index where this run starts.
        format: int32
        type: integer
    type: object
  TextPosition:
    description: Position settings for text.
    properties:
      horizontalAlignment:
        description: Horizontal alignment setting for the piece of text.
        enum:
          - HORIZONTAL_ALIGN_UNSPECIFIED
          - LEFT
          - CENTER
          - RIGHT
        type: string
    type: object
  TextRotation:
    description: The rotation applied to text in a cell.
    properties:
      angle:
        description: |-
          The angle between the standard orientation and the desired orientation.
          Measured in degrees. Valid values are between -90 and 90. Positive
          angles are angled upwards, negative are angled downwards.

          Note: For LTR text direction positive angles are in the counterclockwise
          direction, whereas for RTL they are in the clockwise direction
        format: int32
        type: integer
      vertical:
        description: |-
          If true, text reads top to bottom, but the orientation of individual
          characters is unchanged.
          For example:

              | V |
              | e |
              | r |
              | t |
              | i |
              | c |
              | a |
              | l |
        type: boolean
    type: object
  TextToColumnsRequest:
    description: |-
      Splits a column of text into multiple columns,
      based on a delimiter in each cell.
    properties:
      delimiter:
        description: |-
          The delimiter to use. Used only if delimiterType is
          CUSTOM.
        type: string
      delimiterType:
        description: The delimiter type to use.
        enum:
          - DELIMITER_TYPE_UNSPECIFIED
          - COMMA
          - SEMICOLON
          - PERIOD
          - SPACE
          - CUSTOM
        type: string
      source:
        $ref: '#/definitions/GridRange'
        description: The source data range.  This must span exactly one column.
    type: object
  UnmergeCellsRequest:
    description: Unmerges cells in the given range.
    properties:
      range:
        $ref: '#/definitions/GridRange'
        description: |-
          The range within which all cells should be unmerged.
          If the range spans multiple merges, all will be unmerged.
          The range must not partially span any merge.
    type: object
  UpdateBandingRequest:
    description: Updates properties of the supplied banded range.
    properties:
      bandedRange:
        $ref: '#/definitions/BandedRange'
        description: The banded range to update with the new properties.
      fields:
        description: |-
          The fields that should be updated.  At least one field must be specified.
          The root `bandedRange` is implied and should not be specified.
          A single `"*"` can be used as short-hand for listing every field.
        format: google-fieldmask
        type: string
    type: object
  UpdateBordersRequest:
    description: |-
      Updates the borders of a range.
      If a field is not set in the request, that means the border remains as-is.
      For example, with two subsequent UpdateBordersRequest:

       1. range: A1:A5 `{ top: RED, bottom: WHITE }`
       2. range: A1:A5 `{ left: BLUE }`

      That would result in A1:A5 having a borders of
      `{ top: RED, bottom: WHITE, left: BLUE }`.
      If you want to clear a border, explicitly set the style to
      NONE.
    properties:
      bottom:
        $ref: '#/definitions/Border'
        description: The border to put at the bottom of the range.
      innerHorizontal:
        $ref: '#/definitions/Border'
        description: The horizontal border to put within the range.
      innerVertical:
        $ref: '#/definitions/Border'
        description: The vertical border to put within the range.
      left:
        $ref: '#/definitions/Border'
        description: The border to put at the left of the range.
      range:
        $ref: '#/definitions/GridRange'
        description: The range whose borders should be updated.
      right:
        $ref: '#/definitions/Border'
        description: The border to put at the right of the range.
      top:
        $ref: '#/definitions/Border'
        description: The border to put at the top of the range.
    type: object
  UpdateCellsRequest:
    description: Updates all cells in a range with new data.
    properties:
      fields:
        description: |-
          The fields of CellData that should be updated.
          At least one field must be specified.
          The root is the CellData; 'row.values.' should not be specified.
          A single `"*"` can be used as short-hand for listing every field.
        format: google-fieldmask
        type: string
      range:
        $ref: '#/definitions/GridRange'
        description: |-
          The range to write data to.

          If the data in rows does not cover the entire requested range,
          the fields matching those set in fields will be cleared.
      rows:
        description: The data to write.
        items:
          $ref: '#/definitions/RowData'
        type: array
      start:
        $ref: '#/definitions/GridCoordinate'
        description: |-
          The coordinate to start writing data at.
          Any number of rows and columns (including a different number of
          columns per row) may be written.
    type: object
  UpdateChartSpecRequest:
    description: |-
      Updates a chart's specifications.
      (This does not move or resize a chart. To move or resize a chart, use
       UpdateEmbeddedObjectPositionRequest.)
    properties:
      chartId:
        description: The ID of the chart to update.
        format: int32
        type: integer
      spec:
        $ref: '#/definitions/ChartSpec'
        description: The specification to apply to the chart.
    type: object
  UpdateConditionalFormatRuleRequest:
    description: |-
      Updates a conditional format rule at the given index,
      or moves a conditional format rule to another index.
    properties:
      index:
        description: The zero-based index of the rule that should be replaced or moved.
        format: int32
        type: integer
      newIndex:
        description: The zero-based new index the rule should end up at.
        format: int32
        type: integer
      rule:
        $ref: '#/definitions/ConditionalFormatRule'
        description: The rule that should replace the rule at the given index.
      sheetId:
        description: |-
          The sheet of the rule to move.  Required if new_index is set,
          unused otherwise.
        format: int32
        type: integer
    type: object
  UpdateConditionalFormatRuleResponse:
    description: The result of updating a conditional format rule.
    properties:
      newIndex:
        description: The index of the new rule.
        format: int32
        type: integer
      newRule:
        $ref: '#/definitions/ConditionalFormatRule'
        description: |-
          The new rule that replaced the old rule (if replacing),
          or the rule that was moved (if moved)
      oldIndex:
        description: |-
          The old index of the rule. Not set if a rule was replaced
          (because it is the same as new_index).
        format: int32
        type: integer
      oldRule:
        $ref: '#/definitions/ConditionalFormatRule'
        description: |-
          The old (deleted) rule. Not set if a rule was moved
          (because it is the same as new_rule).
    type: object
  UpdateDeveloperMetadataRequest:
    description: |-
      A request to update properties of developer metadata.
      Updates the properties of the developer metadata selected by the filters to
      the values provided in the DeveloperMetadata resource.  Callers must
      specify the properties they wish to update in the fields parameter, as well
      as specify at least one DataFilter matching the metadata they wish to
      update.
    properties:
      dataFilters:
        description: The filters matching the developer metadata entries to update.
        items:
          $ref: '#/definitions/DataFilter'
        type: array
      developerMetadata:
        $ref: '#/definitions/DeveloperMetadata'
        description: The value that all metadata matched by the data filters will be updated to.
      fields:
        description: |-
          The fields that should be updated.  At least one field must be specified.
          The root `developerMetadata` is implied and should not be specified.
          A single `"*"` can be used as short-hand for listing every field.
        format: google-fieldmask
        type: string
    type: object
  UpdateDeveloperMetadataResponse:
    description: The response from updating developer metadata.
    properties:
      developerMetadata:
        description: The updated developer metadata.
        items:
          $ref: '#/definitions/DeveloperMetadata'
        type: array
    type: object
  UpdateDimensionPropertiesRequest:
    description: Updates properties of dimensions within the specified range.
    properties:
      fields:
        description: |-
          The fields that should be updated.  At least one field must be specified.
          The root `properties` is implied and should not be specified.
          A single `"*"` can be used as short-hand for listing every field.
        format: google-fieldmask
        type: string
      properties:
        $ref: '#/definitions/DimensionProperties'
        description: Properties to update.
      range:
        $ref: '#/definitions/DimensionRange'
        description: The rows or columns to update.
    type: object
  UpdateEmbeddedObjectPositionRequest:
    description: |-
      Update an embedded object's position (such as a moving or resizing a
      chart or image).
    properties:
      fields:
        description: |-
          The fields of OverlayPosition
          that should be updated when setting a new position. Used only if
          newPosition.overlayPosition
          is set, in which case at least one field must
          be specified.  The root `newPosition.overlayPosition` is implied and
          should not be specified.
          A single `"*"` can be used as short-hand for listing every field.
        format: google-fieldmask
        type: string
      newPosition:
        $ref: '#/definitions/EmbeddedObjectPosition'
        description: |-
          An explicit position to move the embedded object to.
          If newPosition.sheetId is set,
          a new sheet with that ID will be created.
          If newPosition.newSheet is set to true,
          a new sheet will be created with an ID that will be chosen for you.
      objectId:
        description: The ID of the object to moved.
        format: int32
        type: integer
    type: object
  UpdateEmbeddedObjectPositionResponse:
    description: The result of updating an embedded object's position.
    properties:
      position:
        $ref: '#/definitions/EmbeddedObjectPosition'
        description: The new position of the embedded object.
    type: object
  UpdateFilterViewRequest:
    description: Updates properties of the filter view.
    properties:
      fields:
        description: |-
          The fields that should be updated.  At least one field must be specified.
          The root `filter` is implied and should not be specified.
          A single `"*"` can be used as short-hand for listing every field.
        format: google-fieldmask
        type: string
      filter:
        $ref: '#/definitions/FilterView'
        description: The new properties of the filter view.
    type: object
  UpdateNamedRangeRequest:
    description: |-
      Updates properties of the named range with the specified
      namedRangeId.
    properties:
      fields:
        description: |-
          The fields that should be updated.  At least one field must be specified.
          The root `namedRange` is implied and should not be specified.
          A single `"*"` can be used as short-hand for listing every field.
        format: google-fieldmask
        type: string
      namedRange:
        $ref: '#/definitions/NamedRange'
        description: The named range to update with the new properties.
    type: object
  UpdateProtectedRangeRequest:
    description: |-
      Updates an existing protected range with the specified
      protectedRangeId.
    properties:
      fields:
        description: |-
          The fields that should be updated.  At least one field must be specified.
          The root `protectedRange` is implied and should not be specified.
          A single `"*"` can be used as short-hand for listing every field.
        format: google-fieldmask
        type: string
      protectedRange:
        $ref: '#/definitions/ProtectedRange'
        description: The protected range to update with the new properties.
    type: object
  UpdateSheetPropertiesRequest:
    description: |-
      Updates properties of the sheet with the specified
      sheetId.
    properties:
      fields:
        description: |-
          The fields that should be updated.  At least one field must be specified.
          The root `properties` is implied and should not be specified.
          A single `"*"` can be used as short-hand for listing every field.
        format: google-fieldmask
        type: string
      properties:
        $ref: '#/definitions/SheetProperties'
        description: The properties to update.
    type: object
  UpdateSpreadsheetPropertiesRequest:
    description: Updates properties of a spreadsheet.
    properties:
      fields:
        description: |-
          The fields that should be updated.  At least one field must be specified.
          The root 'properties' is implied and should not be specified.
          A single `"*"` can be used as short-hand for listing every field.
        format: google-fieldmask
        type: string
      properties:
        $ref: '#/definitions/SpreadsheetProperties'
        description: The properties to update.
    type: object
  UpdateValuesByDataFilterResponse:
    description: |-
      The response when updating a range of values by a data filter in a
      spreadsheet.
    properties:
      dataFilter:
        $ref: '#/definitions/DataFilter'
        description: The data filter that selected the range that was updated.
      updatedCells:
        description: The number of cells updated.
        format: int32
        type: integer
      updatedColumns:
        description: The number of columns where at least one cell in the column was updated.
        format: int32
        type: integer
      updatedData:
        $ref: '#/definitions/ValueRange'
        description: |-
          The values of the cells in the range matched by the dataFilter after all
          updates were applied. This is only included if the request's
          `includeValuesInResponse` field was `true`.
      updatedRange:
        description: The range (in A1 notation) that updates were applied to.
        type: string
      updatedRows:
        description: The number of rows where at least one cell in the row was updated.
        format: int32
        type: integer
    type: object
  UpdateValuesResponse:
    description: The response when updating a range of values in a spreadsheet.
    properties:
      spreadsheetId:
        description: The spreadsheet the updates were applied to.
        type: string
      updatedCells:
        description: The number of cells updated.
        format: int32
        type: integer
      updatedColumns:
        description: The number of columns where at least one cell in the column was updated.
        format: int32
        type: integer
      updatedData:
        $ref: '#/definitions/ValueRange'
        description: |-
          The values of the cells after updates were applied.
          This is only included if the request's `includeValuesInResponse` field
          was `true`.
      updatedRange:
        description: The range (in A1 notation) that updates were applied to.
        type: string
      updatedRows:
        description: The number of rows where at least one cell in the row was updated.
        format: int32
        type: integer
    type: object
  ValueRange:
    description: Data within a range of the spreadsheet.
    properties:
      majorDimension:
        description: |-
          The major dimension of the values.

          For output, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`,
          then requesting `range=A1:B2,majorDimension=ROWS` will return
          `[[1,2],[3,4]]`,
          whereas requesting `range=A1:B2,majorDimension=COLUMNS` will return
          `[[1,3],[2,4]]`.

          For input, with `range=A1:B2,majorDimension=ROWS` then `[[1,2],[3,4]]`
          will set `A1=1,B1=2,A2=3,B2=4`. With `range=A1:B2,majorDimension=COLUMNS`
          then `[[1,2],[3,4]]` will set `A1=1,B1=3,A2=2,B2=4`.

          When writing, if this field is not set, it defaults to ROWS.
        enum:
          - DIMENSION_UNSPECIFIED
          - ROWS
          - COLUMNS
        type: string
      range:
        description: |-
          The range the values cover, in A1 notation.
          For output, this range indicates the entire requested range,
          even though the values will exclude trailing rows and columns.
          When appending values, this field represents the range to search for a
          table, after which values will be appended.
        type: string
      values:
        description: |-
          The data that was read or to be written.  This is an array of arrays,
          the outer array representing all the data and each inner array
          representing a major dimension. Each item in the inner array
          corresponds with one cell.

          For output, empty trailing rows and columns will not be included.

          For input, supported value types are: bool, string, and double.
          Null values will be skipped.
          To set a cell to an empty value, set the string value to an empty string.
        items:
          items: {}
          type: array
        type: array
    type: object

syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package replicapool;

message GetProjectNameZonesZonePoolsRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // Maximum count of results to be returned. Acceptable values are 0 to 100, inclusive. (Default: 50)
    int32 maxResults = 4;
    string oauth_token = 5;
    // Set this to the nextPageToken value returned by a previous list request to obtain the next page of results from the previous list request.
    string pageToken = 6;
    boolean prettyPrint = 7;
    // The project ID for this request.
    string projectName = 8;
    string quotaUser = 9;
    string userIp = 10;
    // The zone for this replica pool.
    string zone = 11;
}

message PostProjectNameZonesZonePoolsRequest {
    alt alt = 1;
    Pool body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // The project ID for this replica pool.
    string projectName = 7;
    string quotaUser = 8;
    string userIp = 9;
    // The zone for this replica pool.
    string zone = 10;
}

message GetProjectNameZonesZonePoolsPoolNameRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    // The name of the replica pool for this request.
    string poolName = 5;
    boolean prettyPrint = 6;
    // The project ID for this replica pool.
    string projectName = 7;
    string quotaUser = 8;
    string userIp = 9;
    // The zone for this replica pool.
    string zone = 10;
}

message PostProjectNameZonesZonePoolsPoolNameRequest {
    alt alt = 1;
    PoolsDeleteRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // The name of the replica pool for this request.
    string poolName = 6;
    boolean prettyPrint = 7;
    // The project ID for this replica pool.
    string projectName = 8;
    string quotaUser = 9;
    string userIp = 10;
    // The zone for this replica pool.
    string zone = 11;
}

message GetProjectNameZonesZonePoolsPoolNameReplicasRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // Maximum count of results to be returned. Acceptable values are 0 to 100, inclusive. (Default: 50)
    int32 maxResults = 4;
    string oauth_token = 5;
    // Set this to the nextPageToken value returned by a previous list request to obtain the next page of results from the previous list request.
    string pageToken = 6;
    // The replica pool name for this request.
    string poolName = 7;
    boolean prettyPrint = 8;
    // The project ID for this request.
    string projectName = 9;
    string quotaUser = 10;
    string userIp = 11;
    // The zone where the replica pool lives.
    string zone = 12;
}

message GetProjectNameZonesZonePoolsPoolNameReplicasReplicaNameRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    // The replica pool name for this request.
    string poolName = 5;
    boolean prettyPrint = 6;
    // The project ID for this request.
    string projectName = 7;
    string quotaUser = 8;
    // The name of the replica for this request.
    string replicaName = 9;
    string userIp = 10;
    // The zone where the replica lives.
    string zone = 11;
}

message PostProjectNameZonesZonePoolsPoolNameReplicasReplicaNameRequest {
    alt alt = 1;
    ReplicasDeleteRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // The replica pool name for this request.
    string poolName = 6;
    boolean prettyPrint = 7;
    // The project ID for this request.
    string projectName = 8;
    string quotaUser = 9;
    // The name of the replica for this request.
    string replicaName = 10;
    string userIp = 11;
    // The zone where the replica lives.
    string zone = 12;
}

message PostProjectNameZonesZonePoolsPoolNameReplicasReplicaNameRestartRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    // The replica pool name for this request.
    string poolName = 5;
    boolean prettyPrint = 6;
    // The project ID for this request.
    string projectName = 7;
    string quotaUser = 8;
    // The name of the replica for this request.
    string replicaName = 9;
    string userIp = 10;
    // The zone where the replica lives.
    string zone = 11;
}

message PostProjectNameZonesZonePoolsPoolNameResizeRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // The desired number of replicas to resize to. If this number is larger than the existing number of replicas, new replicas will be added. If the number is smaller, then existing replicas will be deleted.
    int32 numReplicas = 4;
    string oauth_token = 5;
    // The name of the replica pool for this request.
    string poolName = 6;
    boolean prettyPrint = 7;
    // The project ID for this replica pool.
    string projectName = 8;
    string quotaUser = 9;
    string userIp = 10;
    // The zone for this replica pool.
    string zone = 11;
}

message PostProjectNameZonesZonePoolsPoolNameUpdateTemplateRequest {
    alt alt = 1;
    Template body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // The name of the replica pool for this request.
    string poolName = 6;
    boolean prettyPrint = 7;
    // The project ID for this replica pool.
    string projectName = 8;
    string quotaUser = 9;
    string userIp = 10;
    // The zone for this replica pool.
    string zone = 11;
}

message AccessConfig {
    // Name of this access configuration.
    string name = 1;
    // An external IP address associated with this instance.
    string natIp = 2;
    // Type of this access configuration file. Currently only ONE_TO_ONE_NAT is supported.
    string type = 3;
}

message Action {
    // A list of commands to run, one per line. If any command fails, the whole action is considered a failure and no further actions are run. This also marks the virtual machine or replica as a failure.
    repeated string commands = 1;
    // A list of environment variables to use for the commands in this action.
    repeated EnvVariable envVariables = 2;
    // If an action's commands on a particular replica do not finish in the specified timeoutMilliSeconds, the replica is considered to be in a FAILING state. No efforts are made to stop any processes that were spawned or created as the result of running the action's commands. The default is the max allowed value, 1 hour (i.e. 3600000 milliseconds).
    int32 timeoutMilliSeconds = 3;
}

message DiskAttachment {
    // The device name of this disk.
    string deviceName = 1;
    // A zero-based index to assign to this disk, where 0 is reserved for the boot disk. If not specified, this is assigned by the server.
    uint32 index = 2;
}

message EnvVariable {
    // Deprecated, do not use.
    bool hidden = 1;
    // The name of the environment variable.
    string name = 2;
    // The value of the variable.
    string value = 3;
}

message ExistingDisk {
    // How the disk will be attached to the Replica.
    DiskAttachment attachment = 1;
    // The name of the Persistent Disk resource. The Persistent Disk resource must be in the same zone as the Pool.
    string source = 2;
}

message HealthCheck {
    // How often (in seconds) to make HTTP requests for this healthcheck. The default value is 5 seconds.
    int32 checkIntervalSec = 1;
    // The description for this health check.
    string description = 2;
    // The number of consecutive health check requests that need to succeed before the replica is considered healthy again. The default value is 2.
    int32 healthyThreshold = 3;
    // The value of the host header in the HTTP health check request. If left empty (default value), the localhost IP 127.0.0.1 will be used.
    string host = 4;
    // The name of this health check.
    string name = 5;
    // The localhost request path to send this health check, in the format /path/to/use. For example, /healthcheck.
    string path = 6;
    // The TCP port for the health check requests.
    int32 port = 7;
    // How long (in seconds) to wait before a timeout failure for this healthcheck. The default value is 5 seconds.
    int32 timeoutSec = 8;
    // The number of consecutive health check requests that need to fail in order to consider the replica unhealthy. The default value is 2.
    int32 unhealthyThreshold = 9;
}

message Label {
    // The key for this label.
    string key = 1;
    // The value of this label.
    string value = 2;
}

message Metadata {
    // The fingerprint of the metadata. Required for updating the metadata entries for this instance.
    string fingerPrint = 1;
    // A list of metadata items.
    repeated MetadataItem items = 2;
}

message MetadataItem {
    // A metadata key.
    string key = 1;
    // A metadata value.
    string value = 2;
}

message NetworkInterface {
    // An array of configurations for this interface. This specifies how this interface is configured to interact with other network services.
    repeated AccessConfig accessConfigs = 1;
    // Name the Network resource to which this interface applies.
    string network = 2;
    // An optional IPV4 internal network address to assign to the instance for this network interface.
    string networkIp = 3;
}

message NewDisk {
    // How the disk will be attached to the Replica.
    DiskAttachment attachment = 1;
    // If true, then this disk will be deleted when the instance is deleted. The default value is true.
    bool autoDelete = 2;
    // If true, indicates that this is the root persistent disk.
    bool boot = 3;
    // Create the new disk using these parameters. The name of the disk will be <instance_name>-<four_random_charactersgt;.
    NewDiskInitializeParams initializeParams = 4;
}

message NewDiskInitializeParams {
    // The size of the created disk in gigabytes.
    string diskSizeGb = 1;
    // Name of the disk type resource describing which disk type to use to create the disk. For example 'pd-ssd' or 'pd-standard'. Default is 'pd-standard'
    string diskType = 2;
    // The name or fully-qualified URL of a source image to use to create this disk. If you provide a name of the source image, Replica Pool will look for an image with that name in your project. If you are specifying an image provided by Compute Engine, you will need to provide the full URL with the correct project, such as:
    // http://www.googleapis.com/compute/v1/projects/debian-cloud/ global/images/debian-wheezy-7-vYYYYMMDD
    string sourceImage = 3;
}

message Pool {
    // Whether replicas in this pool should be restarted if they experience a failure. The default value is true.
    bool autoRestart = 1;
    // The base instance name to use for the replicas in this pool. This must match the regex [a-z]([-a-z0-9]*[a-z0-9])?. If specified, the instances in this replica pool will be named in the format <base-instance-name>-<ID>. The <ID> postfix will be a four character alphanumeric identifier generated by the service.
    // 
    // If this is not specified by the user, a random base instance name is generated by the service.
    string baseInstanceName = 2;
    // [Output Only] The current number of replicas in the pool.
    int32 currentNumReplicas = 3;
    // An optional description of the replica pool.
    string description = 4;
    // Deprecated. Please use template[].healthChecks instead.
    repeated HealthCheck healthChecks = 5;
    // The initial number of replicas this pool should have. You must provide a value greater than or equal to 0.
    int32 initialNumReplicas = 6;
    // A list of labels to attach to this replica pool and all created virtual machines in this replica pool.
    repeated Label labels = 7;
    // The name of the replica pool. Must follow the regex [a-z]([-a-z0-9]*[a-z0-9])? and be 1-28 characters long.
    string name = 8;
    // Deprecated! Use initial_num_replicas instead.
    int32 numReplicas = 9;
    // The list of resource views that should be updated with all the replicas that are managed by this pool.
    repeated string resourceViews = 10;
    // [Output Only] A self-link to the replica pool.
    string selfLink = 11;
    // Deprecated, please use target_pools instead.
    string targetPool = 12;
    // A list of target pools to update with the replicas that are managed by this pool. If specified, the replicas in this replica pool will be added to the specified target pools for load balancing purposes. The replica pool must live in the same region as the specified target pools. These values must be the target pool resource names, and not fully qualified URLs.
    repeated string targetPools = 13;
    // The template to use when creating replicas in this pool. This template is used during initial instance creation of the pool, when growing the pool in size, or when a replica restarts.
    Template template = 14;
    // Deprecated! Do not set.
    string type = 15;
}

message PoolsDeleteRequest {
    // If there are instances you would like to keep, you can specify them here. These instances won't be deleted, but the associated replica objects will be removed.
    repeated string abandonInstances = 1;
}

message PoolsListResponse {
    string nextPageToken = 1;
    repeated Pool resources = 2;
}

message Replica {
    // [Output Only] The name of the Replica object.
    string name = 1;
    // [Output Only] The self-link of the Replica.
    string selfLink = 2;
    // [Output Only] Last known status of the Replica.
    ReplicaStatus status = 3;
}

message ReplicaStatus {
    // [Output Only] Human-readable details about the current state of the replica
    string details = 1;
    // [Output Only] The state of the Replica.
    string state = 2;
    // [Output Only] The template used to build the replica.
    string templateVersion = 3;
    // [Output Only] Link to the virtual machine that this Replica represents.
    string vmLink = 4;
    // [Output Only] The time that this Replica got to the RUNNING state, in RFC 3339 format. If the start time is unknown, UNKNOWN is returned.
    string vmStartTime = 5;
}

message ReplicasDeleteRequest {
    // Whether the instance resource represented by this replica should be deleted or abandoned. If abandoned, the replica will be deleted but the virtual machine instance will remain. By default, this is set to false and the instance will be deleted along with the replica.
    bool abandonInstance = 1;
}

message ReplicasListResponse {
    string nextPageToken = 1;
    repeated Replica resources = 2;
}

message ServiceAccount {
    // The service account email address, for example: 123845678986@project.gserviceaccount.com
    string email = 1;
    // The list of OAuth2 scopes to obtain for the service account, for example: https://www.googleapis.com/auth/devstorage.full_control
    repeated string scopes = 2;
}

message Tag {
    // The fingerprint of the tag. Required for updating the list of tags.
    string fingerPrint = 1;
    // Items contained in this tag.
    repeated string items = 2;
}

message Template {
    // An action to run during initialization of your replicas. An action is run as shell commands which are executed one after the other in the same bash shell, so any state established by one command is inherited by later commands.
    Action action = 1;
    // A list of HTTP Health Checks to configure for this replica pool and all virtual machines in this replica pool.
    repeated HealthCheck healthChecks = 2;
    // A free-form string describing the version of this template. You can provide any versioning string you would like. For example, version1 or template-v1.
    string version = 3;
    // The virtual machine parameters to use for creating replicas. You can define settings such as the machine type and the image of replicas in this pool. This is required if replica type is SMART_VM.
    VmParams vmParams = 4;
}

message VmParams {
    // Deprecated. Please use baseInstanceName instead.
    string baseInstanceName = 1;
    // Enables IP Forwarding, which allows this instance to receive packets destined for a different IP address, and send packets with a different source IP. See IP Forwarding for more information.
    bool canIpForward = 2;
    // An optional textual description of the instance.
    string description = 3;
    // A list of existing Persistent Disk resources to attach to each replica in the pool. Each disk will be attached in read-only mode to every replica.
    repeated ExistingDisk disksToAttach = 4;
    // A list of Disk resources to create and attach to each Replica in the Pool. Currently, you can only define one disk and it must be a root persistent disk. Note that Replica Pool will create a root persistent disk for each replica.
    repeated NewDisk disksToCreate = 5;
    // The machine type for this instance. The resource name (e.g. n1-standard-1).
    string machineType = 6;
    // The metadata key/value pairs assigned to this instance.
    Metadata metadata = 7;
    // A list of network interfaces for the instance. Currently only one interface is supported by Google Compute Engine, ONE_TO_ONE_NAT.
    repeated NetworkInterface networkInterfaces = 8;
    string onHostMaintenance = 9;
    // A list of Service Accounts to enable for this instance.
    repeated ServiceAccount serviceAccounts = 10;
    // A list of tags to apply to the Google Compute Engine instance to identify resources.
    Tag tags = 11;
}

enum Alt {
    JSON = 0;
}

service ReplicaPoolService {
    // List all replica pools.
    rpc GetProjectNameZonesZonePools(GetProjectNameZonesZonePoolsRequest) returns (PoolsListResponse) {
      option (google.api.http) = {
        get: "/replicapool/v1beta1/projects/{projectName}/zones/{zone}/pools"
      };
    }
    // Inserts a new replica pool.
    rpc PostProjectNameZonesZonePools(PostProjectNameZonesZonePoolsRequest) returns (Pool) {
      option (google.api.http) = {
        post: "/replicapool/v1beta1/projects/{projectName}/zones/{zone}/pools"
        body: "body"
      };
    }
    // Gets information about a single replica pool.
    rpc GetProjectNameZonesZonePoolsPoolName(GetProjectNameZonesZonePoolsPoolNameRequest) returns (Pool) {
      option (google.api.http) = {
        get: "/replicapool/v1beta1/projects/{projectName}/zones/{zone}/pools/{poolName}"
      };
    }
    // Deletes a replica pool.
    rpc PostProjectNameZonesZonePoolsPoolName(PostProjectNameZonesZonePoolsPoolNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/replicapool/v1beta1/projects/{projectName}/zones/{zone}/pools/{poolName}"
        body: "body"
      };
    }
    // Lists all replicas in a pool.
    rpc GetProjectNameZonesZonePoolsPoolNameReplicas(GetProjectNameZonesZonePoolsPoolNameReplicasRequest) returns (ReplicasListResponse) {
      option (google.api.http) = {
        get: "/replicapool/v1beta1/projects/{projectName}/zones/{zone}/pools/{poolName}/replicas"
      };
    }
    // Gets information about a specific replica.
    rpc GetProjectNameZonesZonePoolsPoolNameReplicasReplicaName(GetProjectNameZonesZonePoolsPoolNameReplicasReplicaNameRequest) returns (Replica) {
      option (google.api.http) = {
        get: "/replicapool/v1beta1/projects/{projectName}/zones/{zone}/pools/{poolName}/replicas/{replicaName}"
      };
    }
    // Deletes a replica from the pool.
    rpc PostProjectNameZonesZonePoolsPoolNameReplicasReplicaName(PostProjectNameZonesZonePoolsPoolNameReplicasReplicaNameRequest) returns (Replica) {
      option (google.api.http) = {
        post: "/replicapool/v1beta1/projects/{projectName}/zones/{zone}/pools/{poolName}/replicas/{replicaName}"
        body: "body"
      };
    }
    // Restarts a replica in a pool.
    rpc PostProjectNameZonesZonePoolsPoolNameReplicasReplicaNameRestart(PostProjectNameZonesZonePoolsPoolNameReplicasReplicaNameRestartRequest) returns (Replica) {
      option (google.api.http) = {
        post: "/replicapool/v1beta1/projects/{projectName}/zones/{zone}/pools/{poolName}/replicas/{replicaName}/restart"
      };
    }
    // Resize a pool. This is an asynchronous operation, and multiple overlapping resize requests can be made. Replica Pools will use the information from the last resize request.
    rpc PostProjectNameZonesZonePoolsPoolNameResize(PostProjectNameZonesZonePoolsPoolNameResizeRequest) returns (Pool) {
      option (google.api.http) = {
        post: "/replicapool/v1beta1/projects/{projectName}/zones/{zone}/pools/{poolName}/resize"
      };
    }
    // Update the template used by the pool.
    rpc PostProjectNameZonesZonePoolsPoolNameUpdateTemplate(PostProjectNameZonesZonePoolsPoolNameUpdateTemplateRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/replicapool/v1beta1/projects/{projectName}/zones/{zone}/pools/{poolName}/updateTemplate"
        body: "body"
      };
    }
}

syntax = "proto3";

import "google/api/annotations.proto";

package qpxexpress;

message PostSearchRequest {
    alt alt = 1;
    TripsSearchRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message AircraftData {
    // The aircraft code. For example, for a Boeing 777 the code would be 777.
    string code = 1;
    // Identifies this as an aircraftData object. Value: the fixed string qpxexpress#aircraftData
    string kind = 2;
    // The name of an aircraft, for example Boeing 777.
    string name = 3;
}

message AirportData {
    // The city code an airport is located in. For example, for JFK airport, this is NYC.
    string city = 1;
    // An airport's code. For example, for Boston Logan airport, this is BOS.
    string code = 2;
    // Identifies this as an airport object. Value: the fixed string qpxexpress#airportData.
    string kind = 3;
    // The name of an airport. For example, for airport BOS the name is "Boston Logan International".
    string name = 4;
}

message BagDescriptor {
    // Provides the commercial name for an optional service.
    string commercialName = 1;
    // How many of this type of bag will be checked on this flight.
    int32 count = 2;
    // A description of the baggage.
    repeated string description = 3;
    // Identifies this as a baggage object. Value: the fixed string qpxexpress#bagDescriptor.
    string kind = 4;
    // The standard IATA subcode used to identify this optional service.
    string subcode = 5;
}

message CarrierData {
    // The IATA designator of a carrier (airline, etc). For example, for American Airlines, the code is AA.
    string code = 1;
    // Identifies this as a kind of carrier (ie. an airline, bus line, railroad, etc). Value: the fixed string qpxexpress#carrierData.
    string kind = 2;
    // The long, full name of a carrier. For example: American Airlines.
    string name = 3;
}

message CityData {
    // The IATA character ID of a city. For example, for Boston this is BOS.
    string code = 1;
    // The two-character country code of the country the city is located in. For example, US for the United States of America.
    string country = 2;
    // Identifies this as a city, typically with one or more airports. Value: the fixed string qpxexpress#cityData.
    string kind = 3;
    // The full name of a city. An example would be: New York.
    string name = 4;
}

message Data {
    // The aircraft that is flying between an origin and destination.
    repeated AircraftData aircraft = 1;
    // The airport of an origin or destination.
    repeated AirportData airport = 2;
    // The airline carrier of the aircraft flying between an origin and destination. Allowed values are IATA carrier codes.
    repeated CarrierData carrier = 3;
    // The city that is either the origin or destination of part of a trip.
    repeated CityData city = 4;
    // Identifies this as QPX Express response resource, including a trip's airport, city, taxes, airline, and aircraft. Value: the fixed string qpxexpress#data.
    string kind = 5;
    // The taxes due for flying between an origin and a destination.
    repeated TaxData tax = 6;
}

message FareInfo {
    string basisCode = 1;
    // The carrier of the aircraft or other vehicle commuting between two points.
    string carrier = 2;
    // The city code of the city the trip ends at.
    string destination = 3;
    // A unique identifier of the fare.
    string id = 4;
    // Identifies this as a fare object. Value: the fixed string qpxexpress#fareInfo.
    string kind = 5;
    // The city code of the city the trip begins at.
    string origin = 6;
    // Whether this is a private fare, for example one offered only to select customers rather than the general public.
    bool private = 7;
}

message FlightInfo {
    string carrier = 1;
    // The flight number.
    string number = 2;
}

message FreeBaggageAllowance {
    // A representation of a type of bag, such as an ATPCo subcode, Commercial Name, or other description.
    repeated BagDescriptor bagDescriptor = 1;
    // The maximum number of kilos all the free baggage together may weigh.
    int32 kilos = 2;
    // The maximum number of kilos any one piece of baggage may weigh.
    int32 kilosPerPiece = 3;
    // Identifies this as free baggage object, allowed on one segment of a trip. Value: the fixed string qpxexpress#freeBaggageAllowance.
    string kind = 4;
    // The number of free pieces of baggage allowed.
    int32 pieces = 5;
    // The number of pounds of free baggage allowed.
    int32 pounds = 6;
}

message LegInfo {
    // The aircraft (or bus, ferry, railcar, etc) travelling between the two points of this leg.
    string aircraft = 1;
    // The scheduled time of arrival at the destination of the leg, local to the point of arrival.
    string arrivalTime = 2;
    // Whether you have to change planes following this leg. Only applies to the next leg.
    bool changePlane = 3;
    // Duration of a connection following this leg, in minutes.
    int32 connectionDuration = 4;
    // The scheduled departure time of the leg, local to the point of departure.
    string departureTime = 5;
    // The leg destination as a city and airport.
    string destination = 6;
    // The terminal the flight is scheduled to arrive at.
    string destinationTerminal = 7;
    // The scheduled travelling time from the origin to the destination.
    int32 duration = 8;
    // An identifier that uniquely identifies this leg in the solution.
    string id = 9;
    // Identifies this as a leg object. A leg is the smallest unit of travel, in the case of a flight a takeoff immediately followed by a landing at two set points on a particular carrier with a particular flight number. Value: the fixed string qpxexpress#legInfo.
    string kind = 10;
    // A simple, general description of the meal(s) served on the flight, for example: "Hot meal".
    string meal = 11;
    // The number of miles in this leg.
    int32 mileage = 12;
    // In percent, the published on time performance on this leg.
    int32 onTimePerformance = 13;
    // Department of Transportation disclosure information on the actual operator of a flight in a code share. (A code share refers to a marketing agreement between two carriers, where one carrier will list in its schedules (and take bookings for) flights that are actually operated by another carrier.)
    string operatingDisclosure = 14;
    // The leg origin as a city and airport.
    string origin = 15;
    // The terminal the flight is scheduled to depart from.
    string originTerminal = 16;
    // Whether passenger information must be furnished to the United States Transportation Security Administration (TSA) prior to departure.
    bool secure = 17;
}

message PassengerCounts {
    // The number of passengers that are adults.
    int32 adultCount = 1;
    // The number of passengers that are children.
    int32 childCount = 2;
    // The number of passengers that are infants travelling in the lap of an adult.
    int32 infantInLapCount = 3;
    // The number of passengers that are infants each assigned a seat.
    int32 infantInSeatCount = 4;
    // Identifies this as a passenger count object, representing the number of passengers. Value: the fixed string qpxexpress#passengerCounts.
    string kind = 5;
    // The number of passengers that are senior citizens.
    int32 seniorCount = 6;
}

message PricingInfo {
    // The total fare in the base fare currency (the currency of the country of origin). This element is only present when the sales currency and the currency of the country of commencement are different.
    string baseFareTotal = 1;
    // The fare used to price one or more segments.
    repeated FareInfo fare = 2;
    // The horizontal fare calculation. This is a field on a ticket that displays all of the relevant items that go into the calculation of the fare.
    string fareCalculation = 3;
    // Identifies this as a pricing object, representing the price of one or more travel segments. Value: the fixed string qpxexpress#pricingInfo.
    string kind = 4;
    // The latest ticketing time for this pricing assuming the reservation occurs at ticketing time and there is no change in fares/rules. The time is local to the point of sale (POS).
    string latestTicketingTime = 5;
    // The number of passengers to which this price applies.
    PassengerCounts passengers = 6;
    // The passenger type code for this pricing. An alphanumeric code used by a carrier to restrict fares to certain categories of passenger. For instance, a fare might be valid only for senior citizens.
    string ptc = 7;
    // Whether the fares on this pricing are refundable.
    bool refundable = 8;
    // The total fare in the sale or equivalent currency.
    string saleFareTotal = 9;
    // The taxes in the sale or equivalent currency.
    string saleTaxTotal = 10;
    // Total per-passenger price (fare and tax) in the sale or equivalent currency.
    string saleTotal = 11;
    // The per-segment price and baggage information.
    repeated SegmentPricing segmentPricing = 12;
    // The taxes used to calculate the tax total per ticket.
    repeated TaxInfo tax = 13;
}

message SegmentInfo {
    // The booking code or class for this segment.
    string bookingCode = 1;
    // The number of seats available in this booking code on this segment.
    int32 bookingCodeCount = 2;
    // The cabin booked for this segment.
    string cabin = 3;
    // In minutes, the duration of the connection following this segment.
    int32 connectionDuration = 4;
    // The duration of the flight segment in minutes.
    int32 duration = 5;
    // The flight this is a segment of.
    FlightInfo flight = 6;
    // An id uniquely identifying the segment in the solution.
    string id = 7;
    // Identifies this as a segment object. A segment is one or more consecutive legs on the same flight. For example a hypothetical flight ZZ001, from DFW to OGG, could have one segment with two legs: DFW to HNL (leg 1), HNL to OGG (leg 2). Value: the fixed string qpxexpress#segmentInfo.
    string kind = 8;
    // The legs composing this segment.
    repeated LegInfo leg = 9;
    // The solution-based index of a segment in a married segment group. Married segments can only be booked together. For example, an airline might report a certain booking code as sold out from Boston to Pittsburgh, but as available as part of two married segments Boston to Chicago connecting through Pittsburgh. For example content of this field, consider the round-trip flight ZZ1 PHX-PHL ZZ2 PHL-CLT ZZ3 CLT-PHX. This has three segments, with the two outbound ones (ZZ1 ZZ2) married. In this case, the two outbound segments belong to married segment group 0, and the return segment belongs to married segment group 1.
    string marriedSegmentGroup = 10;
    // Whether the operation of this segment remains subject to government approval.
    bool subjectToGovernmentApproval = 11;
}

message SegmentPricing {
    // A segment identifier unique within a single solution. It is used to refer to different parts of the same solution.
    string fareId = 1;
    // Details of the free baggage allowance on this segment.
    repeated FreeBaggageAllowance freeBaggageOption = 2;
    // Identifies this as a segment pricing object, representing the price of this segment. Value: the fixed string qpxexpress#segmentPricing.
    string kind = 3;
    // Unique identifier in the response of this segment.
    string segmentId = 4;
}

message SliceInfo {
    // The duration of the slice in minutes.
    int32 duration = 1;
    // Identifies this as a slice object. A slice represents a traveller's intent, the portion of a low-fare search corresponding to a traveler's request to get between two points. One-way journeys are generally expressed using 1 slice, round-trips using 2. Value: the fixed string qpxexpress#sliceInfo.
    string kind = 2;
    // The segment(s) constituting the slice.
    repeated SegmentInfo segment = 3;
}

message SliceInput {
    // Slices with only the carriers in this alliance should be returned; do not use this field with permittedCarrier. Allowed values are ONEWORLD, SKYTEAM, and STAR.
    string alliance = 1;
    // Departure date in YYYY-MM-DD format.
    string date = 2;
    // Airport or city IATA designator of the destination.
    string destination = 3;
    // Identifies this as a slice input object, representing the criteria a desired slice must satisfy. Value: the fixed string qpxexpress#sliceInput.
    string kind = 4;
    // The longest connection between two legs, in minutes, you are willing to accept.
    int32 maxConnectionDuration = 5;
    // The maximum number of stops you are willing to accept in this slice.
    int32 maxStops = 6;
    // Airport or city IATA designator of the origin.
    string origin = 7;
    // A list of 2-letter IATA airline designators. Slices with only these carriers should be returned.
    repeated string permittedCarrier = 8;
    // Slices must depart in this time of day range, local to the point of departure.
    TimeOfDayRange permittedDepartureTime = 9;
    // Prefer solutions that book in this cabin for this slice. Allowed values are COACH, PREMIUM_COACH, BUSINESS, and FIRST.
    string preferredCabin = 10;
    // A list of 2-letter IATA airline designators. Exclude slices that use these carriers.
    repeated string prohibitedCarrier = 11;
}

message TaxData {
    // An identifier uniquely identifying a tax in a response.
    string id = 1;
    // Identifies this as a tax data object, representing some tax. Value: the fixed string qpxexpress#taxData.
    string kind = 2;
    // The name of a tax.
    string name = 3;
}

message TaxInfo {
    // Whether this is a government charge or a carrier surcharge.
    string chargeType = 1;
    // The code to enter in the ticket's tax box.
    string code = 2;
    // For government charges, the country levying the charge.
    string country = 3;
    // Identifier uniquely identifying this tax in a response. Not present for unnamed carrier surcharges.
    string id = 4;
    // Identifies this as a tax information object. Value: the fixed string qpxexpress#taxInfo.
    string kind = 5;
    // The price of the tax in the sales or equivalent currency.
    string salePrice = 6;
}

message TimeOfDayRange {
    // The earliest time of day in HH:MM format.
    string earliestTime = 1;
    // Identifies this as a time of day range object, representing two times in a single day defining a time range. Value: the fixed string qpxexpress#timeOfDayRange.
    string kind = 2;
    // The latest time of day in HH:MM format.
    string latestTime = 3;
}

message TripOption {
    // Identifier uniquely identifying this trip in a response.
    string id = 1;
    // Identifies this as a trip information object. Value: the fixed string qpxexpress#tripOption.
    string kind = 2;
    // Per passenger pricing information.
    repeated PricingInfo pricing = 3;
    // The total price for all passengers on the trip, in the form of a currency followed by an amount, e.g. USD253.35.
    string saleTotal = 4;
    // The slices that make up this trip's itinerary.
    repeated SliceInfo slice = 5;
}

message TripOptionsRequest {
    // Do not return solutions that cost more than this price. The alphabetical part of the price is in ISO 4217. The format, in regex, is [A-Z]{3}\d+(\.\d+)? Example: $102.07
    string maxPrice = 1;
    // Counts for each passenger type in the request.
    PassengerCounts passengers = 2;
    // Return only solutions with refundable fares.
    bool refundable = 3;
    // IATA country code representing the point of sale. This determines the "equivalent amount paid" currency for the ticket.
    string saleCountry = 4;
    // The slices that make up the itinerary of this trip. A slice represents a traveler's intent, the portion of a low-fare search corresponding to a traveler's request to get between two points. One-way journeys are generally expressed using one slice, round-trips using two. An example of a one slice trip with three segments might be BOS-SYD, SYD-LAX, LAX-BOS if the traveler only stopped in SYD and LAX just long enough to change planes.
    repeated SliceInput slice = 5;
    // The number of solutions to return, maximum 500.
    int32 solutions = 6;
    // IATA country code representing the point of ticketing.
    string ticketingCountry = 7;
}

message TripOptionsResponse {
    // Informational data global to list of solutions.
    Data data = 1;
    // Identifies this as a QPX Express trip response object, which consists of zero or more solutions. Value: the fixed string qpxexpress#tripOptions.
    string kind = 2;
    // An identifier uniquely identifying this response.
    string requestId = 3;
    // A list of priced itinerary solutions to the QPX Express query.
    repeated TripOption tripOption = 4;
}

message TripsSearchRequest {
    // A QPX Express search request. Required values are at least one adult or senior passenger, an origin, a destination, and a date.
    TripOptionsRequest request = 1;
}

message TripsSearchResponse {
    // Identifies this as a QPX Express API search response resource. Value: the fixed string qpxExpress#tripsSearch.
    string kind = 1;
    // All possible solutions to the QPX Express search request.
    TripOptionsResponse trips = 2;
}

enum Alt {
    JSON = 0;
}

service QPXExpressService {
    // Returns a list of flights.
    rpc PostSearch(PostSearchRequest) returns (TripsSearchResponse) {
      option (google.api.http) = {
        post: "/qpxExpress/v1/trips/search"
        body: "body"
      };
    }
}

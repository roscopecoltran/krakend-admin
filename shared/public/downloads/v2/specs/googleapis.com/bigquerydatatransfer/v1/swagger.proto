syntax = "proto3";

import "google/api/annotations.proto";

package bigquerydatatransfer;

message GetV1NameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    // The field will contain name of the resource requested, for example:
    // `projects/{project_id}/dataSources/{data_source_id}`
    string name = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message DeleteV1NameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    // The field will contain name of the resource requested, for example:
    // `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}`
    string name = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message GetV1NameLocationsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // The standard list filter.
    string filter = 7;
    string key = 8;
    // The resource that owns the locations collection, if applicable.
    string name = 9;
    string oauth_token = 10;
    // The standard list page size.
    int32 pageSize = 11;
    // The standard list page token.
    string pageToken = 12;
    boolean pp = 13;
    boolean prettyPrint = 14;
    string quotaUser = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

message PostV1Name:CheckValidCredsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    CheckValidCredsRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    // The data source in the form:
    // `projects/{project_id}/dataSources/{data_source_id}`
    string name = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1ParentDataSourcesRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    // Page size. The default page size is the maximum value of 1000 results.
    int32 pageSize = 9;
    // Pagination token, which can be used to request a specific page
    // of `ListDataSourcesRequest` list results. For multiple-page
    // results, `ListDataSourcesResponse` outputs
    // a `next_page` token, which can be used as the
    // `page_token` value to request the next page of list results.
    string pageToken = 10;
    // The BigQuery project id for which data sources should be returned.
    // Must be in the form: `projects/{project_id}`
    string parent = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message GetV1ParentRunsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    // Page size. The default page size is the maximum value of 1000 results.
    int32 pageSize = 9;
    // Pagination token, which can be used to request a specific page
    // of `ListTransferRunsRequest` list results. For multiple-page
    // results, `ListTransferRunsResponse` outputs
    // a `next_page` token, which can be used as the
    // `page_token` value to request the next page of list results.
    string pageToken = 10;
    // Name of transfer configuration for which transfer runs should be retrieved.
    // Format of transfer configuration resource name is:
    // `projects/{project_id}/transferConfigs/{config_id}`.
    string parent = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    // Indicates how run attempts are to be pulled.
    enum GetV1ParentRunsRequest_RunAttempt {
        GETV1PARENTRUNSREQUEST_RUNATTEMPT_RUN_ATTEMPT_UNSPECIFIED = 0;
        GETV1PARENTRUNSREQUEST_RUNATTEMPT_LATEST = 1;
    }
    GetV1ParentRunsRequest_RunAttempt runAttempt = 15;
    // When specified, only transfer runs with requested states are returned.
    repeated string states = 16;
    string uploadType = 17;
    string upload_protocol = 18;
}

message GetV1ParentTransferConfigsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    // When specified, only configurations of requested data sources are returned.
    repeated string dataSourceIds = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    // Page size. The default page size is the maximum value of 1000 results.
    int32 pageSize = 10;
    // Pagination token, which can be used to request a specific page
    // of `ListTransfersRequest` list results. For multiple-page
    // results, `ListTransfersResponse` outputs
    // a `next_page` token, which can be used as the
    // `page_token` value to request the next page of list results.
    string pageToken = 11;
    // The BigQuery project id for which data sources
    // should be returned: `projects/{project_id}`.
    string parent = 12;
    boolean pp = 13;
    boolean prettyPrint = 14;
    string quotaUser = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

message PostV1ParentTransferConfigsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    // Optional OAuth2 authorization code to use with this transfer configuration.
    // This is required if new credentials are needed, as indicated by
    // `CheckValidCreds`.
    // In order to obtain authorization_code, please make a
    // request to
    // https://www.gstatic.com/bigquerydatatransfer/oauthz/auth?client_id=<datatransferapiclientid>&scope=<data_source_scopes>&redirect_uri=<redirect_uri>
    // 
    // * client_id should be OAuth client_id of BigQuery DTS API for the given
    //   data source returned by ListDataSources method.
    // * data_source_scopes are the scopes returned by ListDataSources method.
    // * redirect_uri is an optional parameter. If not specified, then
    //   authorization code is posted to the opener of authorization flow window.
    //   Otherwise it will be sent to the redirect uri. A special value of
    //   urn:ietf:wg:oauth:2.0:oob means that authorization code should be
    //   returned in the title bar of the browser, with the page text prompting
    //   the user to copy the code and paste it in the application.
    string authorizationCode = 4;
    string bearer_token = 5;
    TransferConfig body = 6;
    string callback = 7;
    string fields = 8;
    string key = 9;
    string oauth_token = 10;
    // The BigQuery project id where the transfer configuration should be created.
    // Must be in the format /projects/{project_id}/locations/{location_id}
    // or
    // /projects/{project_id}/locations/-
    // In case when '-' is specified as location_id, location is infered from
    // the destination dataset region.
    string parent = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message GetV1ParentTransferLogsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    // Message types to return. If not populated - INFO, WARNING and ERROR
    // messages are returned.
    repeated string messageTypes = 8;
    string oauth_token = 9;
    // Page size. The default page size is the maximum value of 1000 results.
    int32 pageSize = 10;
    // Pagination token, which can be used to request a specific page
    // of `ListTransferLogsRequest` list results. For multiple-page
    // results, `ListTransferLogsResponse` outputs
    // a `next_page` token, which can be used as the
    // `page_token` value to request the next page of list results.
    string pageToken = 11;
    // Transfer run name in the form:
    // `projects/{project_id}/transferConfigs/{config_Id}/runs/{run_id}`.
    string parent = 12;
    boolean pp = 13;
    boolean prettyPrint = 14;
    string quotaUser = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

message PostV1Parent:ScheduleRunsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    ScheduleTransferRunsRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    // Transfer configuration name in the form:
    // `projects/{project_id}/transferConfigs/{config_id}`.
    string parent = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

enum $.Xgafv {
    $XGAFV_1 = 0;
    $XGAFV_2 = 1;
}

message CheckValidCredsRequest {
}

message CheckValidCredsResponse {
    // If set to `true`, the credentials exist and are valid.
    bool hasValidCreds = 1;
}

message DataSource {
    // Indicates the type of authorization.
    enum DataSource_AuthorizationType {
        DATASOURCE_AUTHORIZATIONTYPE_AUTHORIZATION_TYPE_UNSPECIFIED = 0;
        DATASOURCE_AUTHORIZATIONTYPE_AUTHORIZATION_CODE = 1;
        DATASOURCE_AUTHORIZATIONTYPE_GOOGLE_PLUS_AUTHORIZATION_CODE = 2;
    }
    DataSource_AuthorizationType authorizationType = 1;
    // Data source client id which should be used to receive refresh token.
    // When not supplied, no offline credentials are populated for data transfer.
    string clientId = 2;
    // Specifies whether the data source supports automatic data refresh for the
    // past few days, and how it's supported.
    // For some data sources, data might not be complete until a few days later,
    // so it's useful to refresh data automatically.
    enum DataSource_DataRefreshType {
        DATASOURCE_DATAREFRESHTYPE_DATA_REFRESH_TYPE_UNSPECIFIED = 0;
        DATASOURCE_DATAREFRESHTYPE_SLIDING_WINDOW = 1;
        DATASOURCE_DATAREFRESHTYPE_CUSTOM_SLIDING_WINDOW = 2;
    }
    DataSource_DataRefreshType dataRefreshType = 3;
    // Data source id.
    string dataSourceId = 4;
    // Default data refresh window on days.
    // Only meaningful when `data_refresh_type` = `SLIDING_WINDOW`.
    int32 defaultDataRefreshWindowDays = 5;
    // Default data transfer schedule.
    // Examples of valid schedules include:
    // `1st,3rd monday of month 15:30`,
    // `every wed,fri of jan,jun 13:15`, and
    // `first sunday of quarter 00:00`.
    string defaultSchedule = 6;
    // User friendly data source description string.
    string description = 7;
    // User friendly data source name.
    string displayName = 8;
    // Url for the help document for this data source.
    string helpUrl = 9;
    // Disables backfilling and manual run scheduling
    // for the data source.
    bool manualRunsDisabled = 10;
    // The minimum interval between two consecutive scheduled runs.
    string minimumScheduleInterval = 11;
    // Data source resource name.
    string name = 12;
    // Data source parameters.
    repeated DataSourceParameter parameters = 13;
    // Api auth scopes for which refresh token needs to be obtained. Only valid
    // when `client_id` is specified. Ignored otherwise. These are scopes needed
    // by a data source to prepare data and ingest them into BigQuery,
    // e.g., https://www.googleapis.com/auth/bigquery
    repeated string scopes = 14;
    // Specifies whether the data source supports a user defined schedule, or
    // operates on the default schedule.
    // When set to `true`, user can override default schedule.
    bool supportsCustomSchedule = 15;
    // Indicates whether the data source supports multiple transfers
    // to different BigQuery targets.
    bool supportsMultipleTransfers = 16;
    // Transfer type. Currently supports only batch transfers,
    // which are transfers that use the BigQuery batch APIs (load or
    // query) to ingest the data.
    enum DataSource_TransferType {
        DATASOURCE_TRANSFERTYPE_TRANSFER_TYPE_UNSPECIFIED = 0;
        DATASOURCE_TRANSFERTYPE_BATCH = 1;
        DATASOURCE_TRANSFERTYPE_STREAMING = 2;
    }
    DataSource_TransferType transferType = 17;
    // The number of seconds to wait for an update from the data source
    // before BigQuery marks the transfer as failed.
    int32 updateDeadlineSeconds = 18;
}

message DataSourceParameter {
    // All possible values for the parameter.
    repeated string allowedValues = 1;
    // Parameter description.
    string description = 2;
    // Parameter display name in the user interface.
    string displayName = 3;
    // When parameter is a record, describes child fields.
    repeated DataSourceParameter fields = 4;
    // Cannot be changed after initial creation.
    bool immutable = 5;
    // For integer and double values specifies maxminum allowed value.
    double maxValue = 6;
    // For integer and double values specifies minimum allowed value.
    double minValue = 7;
    // Parameter identifier.
    string paramId = 8;
    // If set to true, schema should be taken from the parent with the same
    // parameter_id. Only applicable when parameter type is RECORD.
    bool recurse = 9;
    // Can parameter have multiple values.
    bool repeated = 10;
    // Is parameter required.
    bool required = 11;
    // Parameter type.
    enum DataSourceParameter_Type {
        DATASOURCEPARAMETER_TYPE_TYPE_UNSPECIFIED = 0;
        DATASOURCEPARAMETER_TYPE_STRING = 1;
        DATASOURCEPARAMETER_TYPE_INTEGER = 2;
        DATASOURCEPARAMETER_TYPE_DOUBLE = 3;
        DATASOURCEPARAMETER_TYPE_BOOLEAN = 4;
        DATASOURCEPARAMETER_TYPE_RECORD = 5;
        DATASOURCEPARAMETER_TYPE_PLUS_PAGE = 6;
    }
    DataSourceParameter_Type type = 12;
    // Description of the requirements for this field, in case the user input does
    // not fulfill the regex pattern or min/max values.
    string validationDescription = 13;
    // URL to a help document to further explain the naming requirements.
    string validationHelpUrl = 14;
    // Regular expression which can be used for parameter validation.
    string validationRegex = 15;
}

message Empty {
}

message ListDataSourcesResponse {
    // List of supported data sources and their transfer settings.
    repeated DataSource dataSources = 1;
    // Output only. The next-pagination token. For multiple-page list results,
    // this token can be used as the
    // `ListDataSourcesRequest.page_token`
    // to request the next page of list results.
    string nextPageToken = 2;
}

message ListLocationsResponse {
    // A list of locations that matches the specified filter in the request.
    repeated Location locations = 1;
    // The standard List next-page token.
    string nextPageToken = 2;
}

message ListTransferConfigsResponse {
    // Output only. The next-pagination token. For multiple-page list results,
    // this token can be used as the
    // `ListTransferConfigsRequest.page_token`
    // to request the next page of list results.
    string nextPageToken = 1;
    // Output only. The stored pipeline transfer configurations.
    repeated TransferConfig transferConfigs = 2;
}

message ListTransferLogsResponse {
    // Output only. The next-pagination token. For multiple-page list results,
    // this token can be used as the
    // `GetTransferRunLogRequest.page_token`
    // to request the next page of list results.
    string nextPageToken = 1;
    // Output only. The stored pipeline transfer messages.
    repeated TransferMessage transferMessages = 2;
}

message ListTransferRunsResponse {
    // Output only. The next-pagination token. For multiple-page list results,
    // this token can be used as the
    // `ListTransferRunsRequest.page_token`
    // to request the next page of list results.
    string nextPageToken = 1;
    // Output only. The stored pipeline transfer runs.
    repeated TransferRun transferRuns = 2;
}

message Location {
    // Cross-service attributes for the location. For example
    // 
    //     {"cloud.googleapis.com/region": "us-east1"}
    map<string, string> labels = 1;
    // The canonical id for this location. For example: `"us-east1"`.
    string locationId = 2;
    // Service-specific metadata. For example the available capacity at the given
    // location.
    map<string, > metadata = 3;
    // Resource name for the location, which may vary between implementations.
    // For example: `"projects/example-project/locations/us-east1"`
    string name = 4;
}

message ScheduleTransferRunsRequest {
    // End time of the range of transfer runs. For example,
    // `"2017-05-30T00:00:00+00:00"`.
    string endTime = 1;
    // Start time of the range of transfer runs. For example,
    // `"2017-05-25T00:00:00+00:00"`.
    string startTime = 2;
}

message ScheduleTransferRunsResponse {
    // The transfer runs that were scheduled.
    repeated TransferRun runs = 1;
}

message TransferConfig {
    // The number of days to look back to automatically refresh the data.
    // For example, if `data_refresh_window_days = 10`, then every day
    // BigQuery reingests data for [today-10, today-1], rather than ingesting data
    // for just [today-1].
    // Only valid if the data source supports the feature. Set the value to  0
    // to use the default value.
    int32 dataRefreshWindowDays = 1;
    // Data source id. Cannot be changed once data transfer is created.
    string dataSourceId = 2;
    // Output only. Region in which BigQuery dataset is located.
    string datasetRegion = 3;
    // The BigQuery target dataset id.
    string destinationDatasetId = 4;
    // Is this config disabled. When set to true, no runs are scheduled
    // for a given transfer.
    bool disabled = 5;
    // User specified display name for the data transfer.
    string displayName = 6;
    // The resource name of the transfer config.
    // Transfer config names have the form
    // `projects/{project_id}/transferConfigs/{config_id}`.
    // Where `config_id` is usually a uuid, even though it is not
    // guaranteed or required. The name is ignored when creating a transfer
    // config.
    string name = 7;
    // Output only. Next time when data transfer will run.
    string nextRunTime = 8;
    // Data transfer specific parameters.
    map<string, > params = 9;
    // Data transfer schedule.
    // If the data source does not support a custom schedule, this should be
    // empty. If it is empty, the default value for the data source will be
    // used.
    // The specified times are in UTC.
    // Examples of valid format:
    // `1st,3rd monday of month 15:30`,
    // `every wed,fri of jan,jun 13:15`, and
    // `first sunday of quarter 00:00`.
    // See more explanation about the format here:
    // https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#the_schedule_format
    // NOTE: the granularity should be at least 8 hours, or less frequent.
    string schedule = 10;
    // Output only. State of the most recently updated transfer run.
    enum TransferConfig_State {
        TRANSFERCONFIG_STATE_TRANSFER_STATE_UNSPECIFIED = 0;
        TRANSFERCONFIG_STATE_INACTIVE = 1;
        TRANSFERCONFIG_STATE_PENDING = 2;
        TRANSFERCONFIG_STATE_RUNNING = 3;
        TRANSFERCONFIG_STATE_SUCCEEDED = 4;
        TRANSFERCONFIG_STATE_FAILED = 5;
        TRANSFERCONFIG_STATE_CANCELLED = 6;
    }
    TransferConfig_State state = 11;
    // Output only. Data transfer modification time. Ignored by server on input.
    string updateTime = 12;
    // Output only. Unique ID of the user on whose behalf transfer is done.
    // Applicable only to data sources that do not support service accounts.
    // When set to 0, the data source service account credentials are used.
    string userId = 13;
}

message TransferMessage {
    // Message text.
    string messageText = 1;
    // Time when message was logged.
    string messageTime = 2;
    // Message severity.
    enum TransferMessage_Severity {
        TRANSFERMESSAGE_SEVERITY_MESSAGE_SEVERITY_UNSPECIFIED = 0;
        TRANSFERMESSAGE_SEVERITY_INFO = 1;
        TRANSFERMESSAGE_SEVERITY_WARNING = 2;
        TRANSFERMESSAGE_SEVERITY_ERROR = 3;
    }
    TransferMessage_Severity severity = 3;
}

message TransferRun {
    // Output only. Data source id.
    string dataSourceId = 1;
    // Output only. Region in which BigQuery dataset is located.
    string datasetRegion = 2;
    // The BigQuery target dataset id.
    string destinationDatasetId = 3;
    // Output only. Time when transfer run ended.
    // Parameter ignored by server for input requests.
    string endTime = 4;
    // The resource name of the transfer run.
    // Transfer run names have the form
    // `projects/{project_id}/locations/{location}/transferConfigs/{config_id}/runs/{run_id}`.
    // The name is ignored when creating a transfer run.
    string name = 5;
    // Data transfer specific parameters.
    map<string, > params = 6;
    // For batch transfer runs, specifies the date and time that
    // data should be ingested.
    string runTime = 7;
    // Output only. Describes the schedule of this transfer run if it was
    // created as part of a regular schedule. For batch transfer runs that are
    // scheduled manually, this is empty.
    // NOTE: the system might choose to delay the schedule depending on the
    // current load, so `schedule_time` doesn't always matches this.
    string schedule = 8;
    // Minimum time after which a transfer run can be started.
    string scheduleTime = 9;
    // Output only. Time when transfer run was started.
    // Parameter ignored by server for input requests.
    string startTime = 10;
    // Output only. Data transfer run state. Ignored for input requests.
    enum TransferRun_State {
        TRANSFERRUN_STATE_TRANSFER_STATE_UNSPECIFIED = 0;
        TRANSFERRUN_STATE_INACTIVE = 1;
        TRANSFERRUN_STATE_PENDING = 2;
        TRANSFERRUN_STATE_RUNNING = 3;
        TRANSFERRUN_STATE_SUCCEEDED = 4;
        TRANSFERRUN_STATE_FAILED = 5;
        TRANSFERRUN_STATE_CANCELLED = 6;
    }
    TransferRun_State state = 11;
    // Output only. Last time the data transfer run state was updated.
    string updateTime = 12;
    // Output only. Unique ID of the user on whose behalf transfer is done.
    // Applicable only to data sources that do not support service accounts.
    // When set to 0, the data source service account credentials are used.
    string userId = 13;
}

enum Alt {
    JSON = 0;
    MEDIA = 1;
    PROTO = 2;
}

service BigQueryDataTransferService {
    // Retrieves a supported data source and returns its settings,
    // which can be used for UI rendering.
    rpc GetV1Name(GetV1NameRequest) returns (DataSource) {
      option (google.api.http) = {
        get: "//v1/{name}"
      };
    }
    // Deletes the specified transfer run.
    rpc DeleteV1Name(DeleteV1NameRequest) returns (Empty) {
      option (google.api.http) = {
        delete: "//v1/{name}"
      };
    }
    // Lists information about the supported locations for this service.
    rpc GetV1NameLocations(GetV1NameLocationsRequest) returns (ListLocationsResponse) {
      option (google.api.http) = {
        get: "//v1/{name}/locations"
      };
    }
    // Returns true if valid credentials exist for the given data source and
    // requesting user.
    // Some data sources doesn't support service account, so we need to talk to
    // them on behalf of the end user. This API just checks whether we have OAuth
    // token for the particular user, which is a pre-requisite before user can
    // create a transfer config.
    rpc PostV1Name:CheckValidCreds(PostV1Name:CheckValidCredsRequest) returns (CheckValidCredsResponse) {
      option (google.api.http) = {
        post: "//v1/{name}:checkValidCreds"
        body: "body"
      };
    }
    // Lists supported data sources and returns their settings,
    // which can be used for UI rendering.
    rpc GetV1ParentDataSources(GetV1ParentDataSourcesRequest) returns (ListDataSourcesResponse) {
      option (google.api.http) = {
        get: "//v1/{parent}/dataSources"
      };
    }
    // Returns information about running and completed jobs.
    rpc GetV1ParentRuns(GetV1ParentRunsRequest) returns (ListTransferRunsResponse) {
      option (google.api.http) = {
        get: "//v1/{parent}/runs"
      };
    }
    // Returns information about all data transfers in the project.
    rpc GetV1ParentTransferConfigs(GetV1ParentTransferConfigsRequest) returns (ListTransferConfigsResponse) {
      option (google.api.http) = {
        get: "//v1/{parent}/transferConfigs"
      };
    }
    // Creates a new data transfer configuration.
    rpc PostV1ParentTransferConfigs(PostV1ParentTransferConfigsRequest) returns (TransferConfig) {
      option (google.api.http) = {
        post: "//v1/{parent}/transferConfigs"
        body: "body"
      };
    }
    // Returns user facing log messages for the data transfer run.
    rpc GetV1ParentTransferLogs(GetV1ParentTransferLogsRequest) returns (ListTransferLogsResponse) {
      option (google.api.http) = {
        get: "//v1/{parent}/transferLogs"
      };
    }
    // Creates transfer runs for a time range [range_start_time, range_end_time].
    // For each date - or whatever granularity the data source supports - in the
    // range, one transfer run is created.
    // Note that runs are created per UTC time in the time range.
    rpc PostV1Parent:ScheduleRuns(PostV1Parent:ScheduleRunsRequest) returns (ScheduleTransferRunsResponse) {
      option (google.api.http) = {
        post: "//v1/{parent}:scheduleRuns"
        body: "body"
      };
    }
}

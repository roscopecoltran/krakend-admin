swagger: '2.0'
schemes:
  - https
host: analyticsreporting.googleapis.com
basePath: /
info:
  contact:
    name: Google
    url: 'https://google.com'
  description: Accesses Analytics report data.
  title: Google Analytics Reporting
  version: v4
  x-apiClientRegistration:
    url: 'https://console.developers.google.com'
  x-apisguru-categories:
    - analytics
  x-logo:
    url: 'https://api.apis.guru/v2/cache/logo/https_www.google.com_images_branding_googlelogo_2x_googlelogo_color_272x92dp.png'
  x-origin:
    - converter:
        url: 'https://github.com/lucybot/api-spec-converter'
        version: 2.6.0
      format: google
      url: 'https://analyticsreporting.googleapis.com/$discovery/rest?version=v4'
      version: v1
  x-preferred: true
  x-providerName: googleapis.com
  x-serviceName: analyticsreporting
externalDocs:
  url: 'https://developers.google.com/analytics/devguides/reporting/core/v4/'
securityDefinitions:
  Oauth2:
    authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
    description: Oauth 2.0 authentication
    flow: implicit
    scopes:
      'https://www.googleapis.com/auth/analytics': View and manage your Google Analytics data
      'https://www.googleapis.com/auth/analytics.readonly': View your Google Analytics data
    type: oauth2
parameters:
  $.xgafv:
    description: V1 error format.
    enum:
      - '1'
      - '2'
    in: query
    name: $.xgafv
    type: string
  access_token:
    description: OAuth access token.
    in: query
    name: access_token
    type: string
  alt:
    default: json
    description: Data format for response.
    enum:
      - json
      - media
      - proto
    in: query
    name: alt
    type: string
  bearer_token:
    description: OAuth bearer token.
    in: query
    name: bearer_token
    type: string
  callback:
    description: JSONP
    in: query
    name: callback
    type: string
  fields:
    description: Selector specifying which fields to include in a partial response.
    in: query
    name: fields
    type: string
  key:
    description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
    in: query
    name: key
    type: string
  oauth_token:
    description: OAuth 2.0 token for the current user.
    in: query
    name: oauth_token
    type: string
  pp:
    default: true
    description: Pretty-print response.
    in: query
    name: pp
    type: boolean
  prettyPrint:
    default: true
    description: Returns response with indentations and line breaks.
    in: query
    name: prettyPrint
    type: boolean
  quotaUser:
    description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
    in: query
    name: quotaUser
    type: string
  uploadType:
    description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
    in: query
    name: uploadType
    type: string
  upload_protocol:
    description: 'Upload protocol for media (e.g. "raw", "multipart").'
    in: query
    name: upload_protocol
    type: string
tags:
  - name: reports
paths:
  '/v4/reports:batchGet':
    parameters:
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/upload_protocol'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/key'
    post:
      description: Returns the Analytics data.
      operationId: analyticsreporting.reports.batchGet
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/GetReportsRequest'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/GetReportsResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/analytics'
        - Oauth2:
            - 'https://www.googleapis.com/auth/analytics.readonly'
      tags:
        - reports
definitions:
  Cohort:
    description: |-
      Defines a cohort. A cohort is a group of users who share a common
      characteristic. For example, all users with the same acquisition date
      belong to the same cohort.
    properties:
      dateRange:
        $ref: '#/definitions/DateRange'
        description: |-
          This is used for `FIRST_VISIT_DATE` cohort, the cohort selects users
          whose first visit date is between start date and end date defined in the
          DateRange. The date ranges should be aligned for cohort requests. If the
          request contains `ga:cohortNthDay` it should be exactly one day long,
          if `ga:cohortNthWeek` it should be aligned to the week boundary (starting
          at Sunday and ending Saturday), and for `ga:cohortNthMonth` the date range
          should be aligned to the month (starting at the first and ending on the
          last day of the month).
          For LTV requests there are no such restrictions.
          You do not need to supply a date range for the
          `reportsRequest.dateRanges` field.
      name:
        description: |-
          A unique name for the cohort. If not defined name will be auto-generated
          with values cohort_[1234...].
        type: string
      type:
        description: |-
          Type of the cohort. The only supported type as of now is
          `FIRST_VISIT_DATE`. If this field is unspecified the cohort is treated
          as `FIRST_VISIT_DATE` type cohort.
        enum:
          - UNSPECIFIED_COHORT_TYPE
          - FIRST_VISIT_DATE
        type: string
    type: object
  CohortGroup:
    description: |-
      Defines a cohort group.
      For example:

          "cohortGroup": {
            "cohorts": [{
              "name": "cohort 1",
              "type": "FIRST_VISIT_DATE",
              "dateRange": { "startDate": "2015-08-01", "endDate": "2015-08-01" }
            },{
              "name": "cohort 2"
               "type": "FIRST_VISIT_DATE"
               "dateRange": { "startDate": "2015-07-01", "endDate": "2015-07-01" }
            }]
          }
    properties:
      cohorts:
        description: The definition for the cohort.
        items:
          $ref: '#/definitions/Cohort'
        type: array
      lifetimeValue:
        description: |-
          Enable Life Time Value (LTV).  LTV measures lifetime value for users
          acquired through different channels.
          Please see:
          [Cohort Analysis](https://support.google.com/analytics/answer/6074676) and
          [Lifetime Value](https://support.google.com/analytics/answer/6182550)
          If the value of lifetimeValue is false:

          - The metric values are similar to the values in the web interface cohort
            report.
          - The cohort definition date ranges must be aligned to the calendar week
            and month. i.e. while requesting `ga:cohortNthWeek` the `startDate` in
            the cohort definition should be a Sunday and the `endDate` should be the
            following Saturday, and for `ga:cohortNthMonth`, the `startDate`
            should be the 1st of the month and `endDate` should be the last day
            of the month.

          When the lifetimeValue is true:

          - The metric values will correspond to the values in the web interface
            LifeTime value report.
          - The Lifetime Value report shows you how user value (Revenue) and
            engagement (Appviews, Goal Completions, Sessions, and Session Duration)
            grow during the 90 days after a user is acquired.
          - The metrics are calculated as a cumulative average per user per the time
            increment.
          - The cohort definition date ranges need not be aligned to the calendar
            week and month boundaries.
          - The `viewId` must be an
            [app view ID](https://support.google.com/analytics/answer/2649553#WebVersusAppViews)
        type: boolean
    type: object
  ColumnHeader:
    description: Column headers.
    properties:
      dimensions:
        description: The dimension names in the response.
        items:
          type: string
        type: array
      metricHeader:
        $ref: '#/definitions/MetricHeader'
        description: Metric headers for the metrics in the response.
    type: object
  DateRange:
    description: |-
      A contiguous set of days: startDate, startDate + 1 day, ..., endDate.
      The start and end dates are specified in
      [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) date format `YYYY-MM-DD`.
    properties:
      endDate:
        description: The end date for the query in the format `YYYY-MM-DD`.
        type: string
      startDate:
        description: The start date for the query in the format `YYYY-MM-DD`.
        type: string
    type: object
  DateRangeValues:
    description: |-
      Used to return a list of metrics for a single DateRange / dimension
      combination
    properties:
      pivotValueRegions:
        description: The values of each pivot region.
        items:
          $ref: '#/definitions/PivotValueRegion'
        type: array
      values:
        description: Each value corresponds to each Metric in the request.
        items:
          type: string
        type: array
    type: object
  Dimension:
    description: |-
      [Dimensions](https://support.google.com/analytics/answer/1033861)
      are attributes of your data. For example, the dimension `ga:city`
      indicates the city, for example, "Paris" or "New York", from which
      a session originates.
    properties:
      histogramBuckets:
        description: |-
          If non-empty, we place dimension values into buckets after string to
          int64. Dimension values that are not the string representation of an
          integral value will be converted to zero.  The bucket values have to be in
          increasing order.  Each bucket is closed on the lower end, and open on the
          upper end. The "first" bucket includes all values less than the first
          boundary, the "last" bucket includes all values up to infinity. Dimension
          values that fall in a bucket get transformed to a new dimension value. For
          example, if one gives a list of "0, 1, 3, 4, 7", then we return the
          following buckets:

          - bucket #1: values < 0, dimension value "<0"
          - bucket #2: values in [0,1), dimension value "0"
          - bucket #3: values in [1,3), dimension value "1-2"
          - bucket #4: values in [3,4), dimension value "3"
          - bucket #5: values in [4,7), dimension value "4-6"
          - bucket #6: values >= 7, dimension value "7+"

          NOTE: If you are applying histogram mutation on any dimension, and using
          that dimension in sort, you will want to use the sort type
          `HISTOGRAM_BUCKET` for that purpose. Without that the dimension values
          will be sorted according to dictionary
          (lexicographic) order. For example the ascending dictionary order is:

             "<50", "1001+", "121-1000", "50-120"

          And the ascending `HISTOGRAM_BUCKET` order is:

             "<50", "50-120", "121-1000", "1001+"

          The client has to explicitly request `"orderType": "HISTOGRAM_BUCKET"`
          for a histogram-mutated dimension.
        items:
          format: int64
          type: string
        type: array
      name:
        description: 'Name of the dimension to fetch, for example `ga:browser`.'
        type: string
    type: object
  DimensionFilter:
    description: Dimension filter specifies the filtering options on a dimension.
    properties:
      caseSensitive:
        description: Should the match be case sensitive? Default is false.
        type: boolean
      dimensionName:
        description: The dimension to filter on. A DimensionFilter must contain a dimension.
        type: string
      expressions:
        description: |-
          Strings or regular expression to match against. Only the first value of
          the list is used for comparison unless the operator is `IN_LIST`.
          If `IN_LIST` operator, then the entire list is used to filter the
          dimensions as explained in the description of the `IN_LIST` operator.
        items:
          type: string
        type: array
      not:
        description: |-
          Logical `NOT` operator. If this boolean is set to true, then the matching
          dimension values will be excluded in the report. The default is false.
        type: boolean
      operator:
        description: How to match the dimension to the expression. The default is REGEXP.
        enum:
          - OPERATOR_UNSPECIFIED
          - REGEXP
          - BEGINS_WITH
          - ENDS_WITH
          - PARTIAL
          - EXACT
          - NUMERIC_EQUAL
          - NUMERIC_GREATER_THAN
          - NUMERIC_LESS_THAN
          - IN_LIST
        type: string
    type: object
  DimensionFilterClause:
    description: |-
      A group of dimension filters. Set the operator value to specify how
      the filters are logically combined.
    properties:
      filters:
        description: |-
          The repeated set of filters. They are logically combined based on the
          operator specified.
        items:
          $ref: '#/definitions/DimensionFilter'
        type: array
      operator:
        description: |-
          The operator for combining multiple dimension filters. If unspecified, it
          is treated as an `OR`.
        enum:
          - OPERATOR_UNSPECIFIED
          - OR
          - AND
        type: string
    type: object
  DynamicSegment:
    description: |-
      Dynamic segment definition for defining the segment within the request.
      A segment can select users, sessions or both.
    properties:
      name:
        description: The name of the dynamic segment.
        type: string
      sessionSegment:
        $ref: '#/definitions/SegmentDefinition'
        description: Session Segment to select sessions to include in the segment.
      userSegment:
        $ref: '#/definitions/SegmentDefinition'
        description: User Segment to select users to include in the segment.
    type: object
  GetReportsRequest:
    description: The batch request containing multiple report request.
    properties:
      reportRequests:
        description: |-
          Requests, each request will have a separate response.
          There can be a maximum of 5 requests. All requests should have the same
          `dateRanges`, `viewId`, `segments`, `samplingLevel`, and `cohortGroup`.
        items:
          $ref: '#/definitions/ReportRequest'
        type: array
    type: object
  GetReportsResponse:
    description: |-
      The main response class which holds the reports from the Reporting API
      `batchGet` call.
    properties:
      reports:
        description: Responses corresponding to each of the request.
        items:
          $ref: '#/definitions/Report'
        type: array
    type: object
  Metric:
    description: |-
      [Metrics](https://support.google.com/analytics/answer/1033861)
      are the quantitative measurements. For example, the metric `ga:users`
      indicates the total number of users for the requested time period.
    properties:
      alias:
        description: |-
          An alias for the metric expression is an alternate name for the
          expression. The alias can be used for filtering and sorting. This field
          is optional and is useful if the expression is not a single metric but
          a complex expression which cannot be used in filtering and sorting.
          The alias is also used in the response column header.
        type: string
      expression:
        description: |-
          A metric expression in the request. An expression is constructed from one
          or more metrics and numbers. Accepted operators include: Plus (+), Minus
          (-), Negation (Unary -), Divided by (/), Multiplied by (*), Parenthesis,
          Positive cardinal numbers (0-9), can include decimals and is limited to
          1024 characters. Example `ga:totalRefunds/ga:users`, in most cases the
          metric expression is just a single metric name like `ga:users`.
          Adding mixed `MetricType` (E.g., `CURRENCY` + `PERCENTAGE`) metrics
          will result in unexpected results.
        type: string
      formattingType:
        description: |-
          Specifies how the metric expression should be formatted, for example
          `INTEGER`.
        enum:
          - METRIC_TYPE_UNSPECIFIED
          - INTEGER
          - FLOAT
          - CURRENCY
          - PERCENT
          - TIME
        type: string
    type: object
  MetricFilter:
    description: MetricFilter specifies the filter on a metric.
    properties:
      comparisonValue:
        description: The value to compare against.
        type: string
      metricName:
        description: |-
          The metric that will be filtered on. A metricFilter must contain a metric
          name. A metric name can be an alias earlier defined as a metric or it can
          also be a metric expression.
        type: string
      not:
        description: |-
          Logical `NOT` operator. If this boolean is set to true, then the matching
          metric values will be excluded in the report. The default is false.
        type: boolean
      operator:
        description: |-
          Is the metric `EQUAL`, `LESS_THAN` or `GREATER_THAN` the
          comparisonValue, the default is `EQUAL`. If the operator is
          `IS_MISSING`, checks if the metric is missing and would ignore the
          comparisonValue.
        enum:
          - OPERATOR_UNSPECIFIED
          - EQUAL
          - LESS_THAN
          - GREATER_THAN
          - IS_MISSING
        type: string
    type: object
  MetricFilterClause:
    description: |-
      Represents a group of metric filters.
      Set the operator value to specify how the filters are logically combined.
    properties:
      filters:
        description: |-
          The repeated set of filters. They are logically combined based on the
          operator specified.
        items:
          $ref: '#/definitions/MetricFilter'
        type: array
      operator:
        description: |-
          The operator for combining multiple metric filters. If unspecified, it is
          treated as an `OR`.
        enum:
          - OPERATOR_UNSPECIFIED
          - OR
          - AND
        type: string
    type: object
  MetricHeader:
    description: The headers for the metrics.
    properties:
      metricHeaderEntries:
        description: Headers for the metrics in the response.
        items:
          $ref: '#/definitions/MetricHeaderEntry'
        type: array
      pivotHeaders:
        description: Headers for the pivots in the response.
        items:
          $ref: '#/definitions/PivotHeader'
        type: array
    type: object
  MetricHeaderEntry:
    description: Header for the metrics.
    properties:
      name:
        description: The name of the header.
        type: string
      type:
        description: 'The type of the metric, for example `INTEGER`.'
        enum:
          - METRIC_TYPE_UNSPECIFIED
          - INTEGER
          - FLOAT
          - CURRENCY
          - PERCENT
          - TIME
        type: string
    type: object
  OrFiltersForSegment:
    description: |-
      A list of segment filters in the `OR` group are combined with the logical OR
      operator.
    properties:
      segmentFilterClauses:
        description: List of segment filters to be combined with a `OR` operator.
        items:
          $ref: '#/definitions/SegmentFilterClause'
        type: array
    type: object
  OrderBy:
    description: Specifies the sorting options.
    properties:
      fieldName:
        description: |-
          The field which to sort by. The default sort order is ascending. Example:
          `ga:browser`.
          Note, that you can only specify one field for sort here. For example,
          `ga:browser, ga:city` is not valid.
        type: string
      orderType:
        description: The order type. The default orderType is `VALUE`.
        enum:
          - ORDER_TYPE_UNSPECIFIED
          - VALUE
          - DELTA
          - SMART
          - HISTOGRAM_BUCKET
          - DIMENSION_AS_INTEGER
        type: string
      sortOrder:
        description: The sorting order for the field.
        enum:
          - SORT_ORDER_UNSPECIFIED
          - ASCENDING
          - DESCENDING
        type: string
    type: object
  Pivot:
    description: |-
      The Pivot describes the pivot section in the request.
      The Pivot helps rearrange the information in the table for certain reports
      by pivoting your data on a second dimension.
    properties:
      dimensionFilterClauses:
        description: |-
          DimensionFilterClauses are logically combined with an `AND` operator: only
          data that is included by all these DimensionFilterClauses contributes to
          the values in this pivot region. Dimension filters can be used to restrict
          the columns shown in the pivot region. For example if you have
          `ga:browser` as the requested dimension in the pivot region, and you
          specify key filters to restrict `ga:browser` to only "IE" or "Firefox",
          then only those two browsers would show up as columns.
        items:
          $ref: '#/definitions/DimensionFilterClause'
        type: array
      dimensions:
        description: |-
          A list of dimensions to show as pivot columns. A Pivot can have a maximum
          of 4 dimensions. Pivot dimensions are part of the restriction on the
          total number of dimensions allowed in the request.
        items:
          $ref: '#/definitions/Dimension'
        type: array
      maxGroupCount:
        description: |-
          Specifies the maximum number of groups to return.
          The default value is 10, also the maximum value is 1,000.
        format: int32
        type: integer
      metrics:
        description: |-
          The pivot metrics. Pivot metrics are part of the
          restriction on total number of metrics allowed in the request.
        items:
          $ref: '#/definitions/Metric'
        type: array
      startGroup:
        description: |-
          If k metrics were requested, then the response will contain some
          data-dependent multiple of k columns in the report.  E.g., if you pivoted
          on the dimension `ga:browser` then you'd get k columns for "Firefox", k
          columns for "IE", k columns for "Chrome", etc. The ordering of the groups
          of columns is determined by descending order of "total" for the first of
          the k values.  Ties are broken by lexicographic ordering of the first
          pivot dimension, then lexicographic ordering of the second pivot
          dimension, and so on.  E.g., if the totals for the first value for
          Firefox, IE, and Chrome were 8, 2, 8, respectively, the order of columns
          would be Chrome, Firefox, IE.

          The following let you choose which of the groups of k columns are
          included in the response.
        format: int32
        type: integer
    type: object
  PivotHeader:
    description: The headers for each of the pivot sections defined in the request.
    properties:
      pivotHeaderEntries:
        description: A single pivot section header.
        items:
          $ref: '#/definitions/PivotHeaderEntry'
        type: array
      totalPivotGroupsCount:
        description: The total number of groups for this pivot.
        format: int32
        type: integer
    type: object
  PivotHeaderEntry:
    description: |-
      The headers for the each of the metric column corresponding to the metrics
      requested in the pivots section of the response.
    properties:
      dimensionNames:
        description: The name of the dimensions in the pivot response.
        items:
          type: string
        type: array
      dimensionValues:
        description: The values for the dimensions in the pivot.
        items:
          type: string
        type: array
      metric:
        $ref: '#/definitions/MetricHeaderEntry'
        description: The metric header for the metric in the pivot.
    type: object
  PivotValueRegion:
    description: The metric values in the pivot region.
    properties:
      values:
        description: The values of the metrics in each of the pivot regions.
        items:
          type: string
        type: array
    type: object
  Report:
    description: The data response corresponding to the request.
    properties:
      columnHeader:
        $ref: '#/definitions/ColumnHeader'
        description: The column headers.
      data:
        $ref: '#/definitions/ReportData'
        description: Response data.
      nextPageToken:
        description: Page token to retrieve the next page of results in the list.
        type: string
    type: object
  ReportData:
    description: The data part of the report.
    properties:
      dataLastRefreshed:
        description: |-
          The last time the data in the report was refreshed. All the hits received
          before this timestamp are included in the calculation of the report.
        format: google-datetime
        type: string
      isDataGolden:
        description: |-
          Indicates if response to this request is golden or not. Data is
          golden when the exact same request will not produce any new results if
          asked at a later point in time.
        type: boolean
      maximums:
        description: |-
          Minimum and maximum values seen over all matching rows. These are both
          empty when `hideValueRanges` in the request is false, or when
          rowCount is zero.
        items:
          $ref: '#/definitions/DateRangeValues'
        type: array
      minimums:
        description: |-
          Minimum and maximum values seen over all matching rows. These are both
          empty when `hideValueRanges` in the request is false, or when
          rowCount is zero.
        items:
          $ref: '#/definitions/DateRangeValues'
        type: array
      rowCount:
        description: Total number of matching rows for this query.
        format: int32
        type: integer
      rows:
        description: There's one ReportRow for every unique combination of dimensions.
        items:
          $ref: '#/definitions/ReportRow'
        type: array
      samplesReadCounts:
        description: |-
          If the results are
          [sampled](https://support.google.com/analytics/answer/2637192),
          this returns the total number of samples read, one entry per date range.
          If the results are not sampled this field will not be defined. See
          [developer guide](/analytics/devguides/reporting/core/v4/basics#sampling)
          for details.
        items:
          format: int64
          type: string
        type: array
      samplingSpaceSizes:
        description: |-
          If the results are
          [sampled](https://support.google.com/analytics/answer/2637192),
          this returns the total number of
          samples present, one entry per date range. If the results are not sampled
          this field will not be defined. See
          [developer guide](/analytics/devguides/reporting/core/v4/basics#sampling)
          for details.
        items:
          format: int64
          type: string
        type: array
      totals:
        description: |-
          For each requested date range, for the set of all rows that match
          the query, every requested value format gets a total. The total
          for a value format is computed by first totaling the metrics
          mentioned in the value format and then evaluating the value
          format as a scalar expression.  E.g., The "totals" for
          `3 / (ga:sessions + 2)` we compute
          `3 / ((sum of all relevant ga:sessions) + 2)`.
          Totals are computed before pagination.
        items:
          $ref: '#/definitions/DateRangeValues'
        type: array
    type: object
  ReportRequest:
    description: The main request class which specifies the Reporting API request.
    properties:
      cohortGroup:
        $ref: '#/definitions/CohortGroup'
        description: |-
          Cohort group associated with this request. If there is a cohort group
          in the request the `ga:cohort` dimension must be present.
          Every [ReportRequest](#ReportRequest) within a `batchGet` method must
          contain the same `cohortGroup` definition.
      dateRanges:
        description: |-
          Date ranges in the request. The request can have a maximum of 2 date
          ranges. The response will contain a set of metric values for each
          combination of the dimensions for each date range in the request. So, if
          there are two date ranges, there will be two set of metric values, one for
          the original date range and one for the second date range.
          The `reportRequest.dateRanges` field should not be specified for cohorts
          or Lifetime value requests.
          If a date range is not provided, the default date range is (startDate:
          current date - 7 days, endDate: current date - 1 day). Every
          [ReportRequest](#ReportRequest) within a `batchGet` method must
          contain the same `dateRanges` definition.
        items:
          $ref: '#/definitions/DateRange'
        type: array
      dimensionFilterClauses:
        description: |-
          The dimension filter clauses for filtering Dimension Values. They are
          logically combined with the `AND` operator. Note that filtering occurs
          before any dimensions are aggregated, so that the returned metrics
          represent the total for only the relevant dimensions.
        items:
          $ref: '#/definitions/DimensionFilterClause'
        type: array
      dimensions:
        description: |-
          The dimensions requested.
          Requests can have a total of 7 dimensions.
        items:
          $ref: '#/definitions/Dimension'
        type: array
      filtersExpression:
        description: |-
          Dimension or metric filters that restrict the data returned for your
          request. To use the `filtersExpression`, supply a dimension or metric on
          which to filter, followed by the filter expression. For example, the
          following expression selects `ga:browser` dimension which starts with
          Firefox; `ga:browser=~^Firefox`. For more information on dimensions
          and metric filters, see
          [Filters reference](https://developers.google.com/analytics/devguides/reporting/core/v3/reference#filters).
        type: string
      hideTotals:
        description: |-
          If set to true, hides the total of all metrics for all the matching rows,
          for every date range. The default false and will return the totals.
        type: boolean
      hideValueRanges:
        description: |-
          If set to true, hides the minimum and maximum across all matching rows.
          The default is false and the value ranges are returned.
        type: boolean
      includeEmptyRows:
        description: |-
          If set to false, the response does not include rows if all the retrieved
          metrics are equal to zero. The default is false which will exclude these
          rows.
        type: boolean
      metricFilterClauses:
        description: |-
          The metric filter clauses. They are logically combined with the `AND`
          operator.  Metric filters look at only the first date range and not the
          comparing date range. Note that filtering on metrics occurs after the
          metrics are aggregated.
        items:
          $ref: '#/definitions/MetricFilterClause'
        type: array
      metrics:
        description: |-
          The metrics requested.
          Requests must specify at least one metric. Requests can have a
          total of 10 metrics.
        items:
          $ref: '#/definitions/Metric'
        type: array
      orderBys:
        description: |-
          Sort order on output rows. To compare two rows, the elements of the
          following are applied in order until a difference is found.  All date
          ranges in the output get the same row order.
        items:
          $ref: '#/definitions/OrderBy'
        type: array
      pageSize:
        description: |-
          Page size is for paging and specifies the maximum number of returned rows.
          Page size should be >= 0. A query returns the default of 1,000 rows.
          The Analytics Core Reporting API returns a maximum of 10,000 rows per
          request, no matter how many you ask for. It can also return fewer rows
          than requested, if there aren't as many dimension segments as you expect.
          For instance, there are fewer than 300 possible values for `ga:country`,
          so when segmenting only by country, you can't get more than 300 rows,
          even if you set `pageSize` to a higher value.
        format: int32
        type: integer
      pageToken:
        description: |-
          A continuation token to get the next page of the results. Adding this to
          the request will return the rows after the pageToken. The pageToken should
          be the value returned in the nextPageToken parameter in the response to
          the GetReports request.
        type: string
      pivots:
        description: The pivot definitions. Requests can have a maximum of 2 pivots.
        items:
          $ref: '#/definitions/Pivot'
        type: array
      samplingLevel:
        description: |-
          The desired report
          [sample](https://support.google.com/analytics/answer/2637192) size.
          If the the `samplingLevel` field is unspecified the `DEFAULT` sampling
          level is used. Every [ReportRequest](#ReportRequest) within a
          `batchGet` method must contain the same `samplingLevel` definition. See
          [developer guide](/analytics/devguides/reporting/core/v4/basics#sampling)
           for details.
        enum:
          - SAMPLING_UNSPECIFIED
          - DEFAULT
          - SMALL
          - LARGE
        type: string
      segments:
        description: |-
          Segment the data returned for the request. A segment definition helps look
          at a subset of the segment request. A request can contain up to four
          segments. Every [ReportRequest](#ReportRequest) within a
          `batchGet` method must contain the same `segments` definition. Requests
          with segments must have the `ga:segment` dimension.
        items:
          $ref: '#/definitions/Segment'
        type: array
      viewId:
        description: |-
          The Analytics
          [view ID](https://support.google.com/analytics/answer/1009618)
          from which to retrieve data. Every [ReportRequest](#ReportRequest)
          within a `batchGet` method must contain the same `viewId`.
        type: string
    type: object
  ReportRow:
    description: A row in the report.
    properties:
      dimensions:
        description: List of requested dimensions.
        items:
          type: string
        type: array
      metrics:
        description: List of metrics for each requested DateRange.
        items:
          $ref: '#/definitions/DateRangeValues'
        type: array
    type: object
  Segment:
    description: |-
      The segment definition, if the report needs to be segmented.
      A Segment is a subset of the Analytics data. For example, of the entire
      set of users, one Segment might be users from a particular country or city.
    properties:
      dynamicSegment:
        $ref: '#/definitions/DynamicSegment'
        description: A dynamic segment definition in the request.
      segmentId:
        description: 'The segment ID of a built-in or custom segment, for example `gaid::-3`.'
        type: string
    type: object
  SegmentDefinition:
    description: |-
      SegmentDefinition defines the segment to be a set of SegmentFilters which
      are combined together with a logical `AND` operation.
    properties:
      segmentFilters:
        description: |-
          A segment is defined by a set of segment filters which are combined
          together with a logical `AND` operation.
        items:
          $ref: '#/definitions/SegmentFilter'
        type: array
    type: object
  SegmentDimensionFilter:
    description: Dimension filter specifies the filtering options on a dimension.
    properties:
      caseSensitive:
        description: 'Should the match be case sensitive, ignored for `IN_LIST` operator.'
        type: boolean
      dimensionName:
        description: Name of the dimension for which the filter is being applied.
        type: string
      expressions:
        description: 'The list of expressions, only the first element is used for all operators'
        items:
          type: string
        type: array
      maxComparisonValue:
        description: Maximum comparison values for `BETWEEN` match type.
        type: string
      minComparisonValue:
        description: Minimum comparison values for `BETWEEN` match type.
        type: string
      operator:
        description: The operator to use to match the dimension with the expressions.
        enum:
          - OPERATOR_UNSPECIFIED
          - REGEXP
          - BEGINS_WITH
          - ENDS_WITH
          - PARTIAL
          - EXACT
          - IN_LIST
          - NUMERIC_LESS_THAN
          - NUMERIC_GREATER_THAN
          - NUMERIC_BETWEEN
        type: string
    type: object
  SegmentFilter:
    description: |-
      SegmentFilter defines the segment to be either a simple or a sequence
      segment. A simple segment condition contains dimension and metric conditions
      to select the sessions or users. A sequence segment condition can be used to
      select users or sessions based on sequential conditions.
    properties:
      not:
        description: |-
          If true, match the complement of simple or sequence segment.
          For example, to match all visits not from "New York", we can define the
          segment as follows:

                "sessionSegment": {
                  "segmentFilters": [{
                    "simpleSegment" :{
                      "orFiltersForSegment": [{
                        "segmentFilterClauses":[{
                          "dimensionFilter": {
                            "dimensionName": "ga:city",
                            "expressions": ["New York"]
                          }
                        }]
                      }]
                    },
                    "not": "True"
                  }]
                },
        type: boolean
      sequenceSegment:
        $ref: '#/definitions/SequenceSegment'
        description: |-
          Sequence conditions consist of one or more steps, where each step is
          defined by one or more dimension/metric conditions. Multiple steps can
          be combined with special sequence operators.
      simpleSegment:
        $ref: '#/definitions/SimpleSegment'
        description: |-
          A Simple segment conditions consist of one or more dimension/metric
          conditions that can be combined
    type: object
  SegmentFilterClause:
    description: |-
      Filter Clause to be used in a segment definition, can be wither a metric or
      a dimension filter.
    properties:
      dimensionFilter:
        $ref: '#/definitions/SegmentDimensionFilter'
        description: Dimension Filter for the segment definition.
      metricFilter:
        $ref: '#/definitions/SegmentMetricFilter'
        description: Metric Filter for the segment definition.
      not:
        description: Matches the complement (`!`) of the filter.
        type: boolean
    type: object
  SegmentMetricFilter:
    description: Metric filter to be used in a segment filter clause.
    properties:
      comparisonValue:
        description: |-
          The value to compare against. If the operator is `BETWEEN`, this value is
          treated as minimum comparison value.
        type: string
      maxComparisonValue:
        description: Max comparison value is only used for `BETWEEN` operator.
        type: string
      metricName:
        description: |-
          The metric that will be filtered on. A `metricFilter` must contain a
          metric name.
        type: string
      operator:
        description: |-
          Specifies is the operation to perform to compare the metric. The default
          is `EQUAL`.
        enum:
          - UNSPECIFIED_OPERATOR
          - LESS_THAN
          - GREATER_THAN
          - EQUAL
          - BETWEEN
        type: string
      scope:
        description: |-
          Scope for a metric defines the level at which that metric is defined.  The
          specified metric scope must be equal to or greater than its primary scope
          as defined in the data model. The primary scope is defined by if the
          segment is selecting users or sessions.
        enum:
          - UNSPECIFIED_SCOPE
          - PRODUCT
          - HIT
          - SESSION
          - USER
        type: string
    type: object
  SegmentSequenceStep:
    description: A segment sequence definition.
    properties:
      matchType:
        description: |-
          Specifies if the step immediately precedes or can be any time before the
          next step.
        enum:
          - UNSPECIFIED_MATCH_TYPE
          - PRECEDES
          - IMMEDIATELY_PRECEDES
        type: string
      orFiltersForSegment:
        description: |-
          A sequence is specified with a list of Or grouped filters which are
          combined with `AND` operator.
        items:
          $ref: '#/definitions/OrFiltersForSegment'
        type: array
    type: object
  SequenceSegment:
    description: |-
      Sequence conditions consist of one or more steps, where each step is defined
      by one or more dimension/metric conditions. Multiple steps can be combined
      with special sequence operators.
    properties:
      firstStepShouldMatchFirstHit:
        description: |-
          If set, first step condition must match the first hit of the visitor (in
          the date range).
        type: boolean
      segmentSequenceSteps:
        description: The list of steps in the sequence.
        items:
          $ref: '#/definitions/SegmentSequenceStep'
        type: array
    type: object
  SimpleSegment:
    description: |-
      A Simple segment conditions consist of one or more dimension/metric
      conditions that can be combined.
    properties:
      orFiltersForSegment:
        description: |-
          A list of segment filters groups which are combined with logical `AND`
          operator.
        items:
          $ref: '#/definitions/OrFiltersForSegment'
        type: array
    type: object

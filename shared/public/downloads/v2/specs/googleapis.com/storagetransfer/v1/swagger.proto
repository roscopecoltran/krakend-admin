syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package googlestoragetransfer;

message GetV1GoogleServiceAccountsProjectIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    boolean pp = 9;
    boolean prettyPrint = 10;
    // The ID of the Google Cloud Platform Console project that the Google service
    // account is associated with.
    // Required.
    string projectId = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message GetV1TransferJobsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // A list of query parameters specified as JSON text in the form of
    // {"project_id":"my_project_id",
    // "job_names":["jobid1","jobid2",...],
    // "job_statuses":["status1","status2",...]}.
    // Since `job_names` and `job_statuses` support multiple values, their values
    // must be specified with array notation. `project_id` is required. `job_names`
    // and `job_statuses` are optional.  The valid values for `job_statuses` are
    // case-insensitive: `ENABLED`, `DISABLED`, and `DELETED`.
    string filter = 7;
    string key = 8;
    string oauth_token = 9;
    // The list page size. The max allowed value is 256.
    int32 pageSize = 10;
    // The list page token.
    string pageToken = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message PostV1TransferJobsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    TransferJob body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message GetV1JobNameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // The job to get.
    // Required.
    string jobName = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    // The ID of the Google Cloud Platform Console project that owns the job.
    // Required.
    string projectId = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1NameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    // The name of the operation resource.
    string name = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message DeleteV1NameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    // The name of the operation resource to be deleted.
    string name = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PostV1Name:CancelRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    // The name of the operation resource to be cancelled.
    string name = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PostV1Name:PauseRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    PauseTransferOperationRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    // The name of the transfer operation.
    // Required.
    string name = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1Name:ResumeRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    ResumeTransferOperationRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    // The name of the transfer operation.
    // Required.
    string name = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

enum $.Xgafv {
    $XGAFV_1 = 0;
    $XGAFV_2 = 1;
}

message AwsAccessKey {
    // AWS access key ID.
    // Required.
    string accessKeyId = 1;
    // AWS secret access key. This field is not returned in RPC responses.
    // Required.
    string secretAccessKey = 2;
}

message AwsS3Data {
    // AWS access key used to sign the API requests to the AWS S3 bucket.
    // Permissions on the bucket must be granted to the access ID of the
    // AWS access key.
    // Required.
    AwsAccessKey awsAccessKey = 1;
    // S3 Bucket name (see
    // [Creating a bucket](http://docs.aws.amazon.com/AmazonS3/latest/dev/create-bucket-get-location-example.html)).
    // Required.
    string bucketName = 2;
}

message Date {
    // Day of month. Must be from 1 to 31 and valid for the year and month, or 0
    // if specifying a year/month where the day is not significant.
    int32 day = 1;
    // Month of year. Must be from 1 to 12.
    int32 month = 2;
    // Year of date. Must be from 1 to 9999, or 0 if specifying a date without
    // a year.
    int32 year = 3;
}

message Empty {
}

message ErrorLogEntry {
    // A list of messages that carry the error details.
    repeated string errorDetails = 1;
    // A URL that refers to the target (a data source, a data sink,
    // or an object) with which the error is associated.
    // Required.
    string url = 2;
}

message ErrorSummary {
    // Required.
    enum ErrorSummary_ErrorCode {
        ERRORSUMMARY_ERRORCODE_OK = 0;
        ERRORSUMMARY_ERRORCODE_CANCELLED = 1;
        ERRORSUMMARY_ERRORCODE_UNKNOWN = 2;
        ERRORSUMMARY_ERRORCODE_INVALID_ARGUMENT = 3;
        ERRORSUMMARY_ERRORCODE_DEADLINE_EXCEEDED = 4;
        ERRORSUMMARY_ERRORCODE_NOT_FOUND = 5;
        ERRORSUMMARY_ERRORCODE_ALREADY_EXISTS = 6;
        ERRORSUMMARY_ERRORCODE_PERMISSION_DENIED = 7;
        ERRORSUMMARY_ERRORCODE_UNAUTHENTICATED = 8;
        ERRORSUMMARY_ERRORCODE_RESOURCE_EXHAUSTED = 9;
        ERRORSUMMARY_ERRORCODE_FAILED_PRECONDITION = 10;
        ERRORSUMMARY_ERRORCODE_ABORTED = 11;
        ERRORSUMMARY_ERRORCODE_OUT_OF_RANGE = 12;
        ERRORSUMMARY_ERRORCODE_UNIMPLEMENTED = 13;
        ERRORSUMMARY_ERRORCODE_INTERNAL = 14;
        ERRORSUMMARY_ERRORCODE_UNAVAILABLE = 15;
        ERRORSUMMARY_ERRORCODE_DATA_LOSS = 16;
    }
    ErrorSummary_ErrorCode errorCode = 1;
    // Count of this type of error.
    // Required.
    string errorCount = 2;
    // Error samples.
    repeated ErrorLogEntry errorLogEntries = 3;
}

message GcsData {
    // Google Cloud Storage bucket name (see
    // [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
    // Required.
    string bucketName = 1;
}

message GoogleServiceAccount {
    // Required.
    string accountEmail = 1;
}

message HttpData {
    // The URL that points to the file that stores the object list entries.
    // This file must allow public access.  Currently, only URLs with HTTP and
    // HTTPS schemes are supported.
    // Required.
    string listUrl = 1;
}

message ListOperationsResponse {
    // The standard List next-page token.
    string nextPageToken = 1;
    // A list of operations that matches the specified filter in the request.
    repeated Operation operations = 2;
}

message ListTransferJobsResponse {
    // The list next page token.
    string nextPageToken = 1;
    // A list of transfer jobs.
    repeated TransferJob transferJobs = 2;
}

message ObjectConditions {
    // `excludePrefixes` must follow the requirements described for
    // `includePrefixes`.
    // 
    // The max size of `excludePrefixes` is 1000.
    repeated string excludePrefixes = 1;
    // If `includePrefixes` is specified, objects that satisfy the object
    // conditions must have names that start with one of the `includePrefixes`
    // and that do not start with any of the `excludePrefixes`. If `includePrefixes`
    // is not specified, all objects except those that have names starting with
    // one of the `excludePrefixes` must satisfy the object conditions.
    // 
    // Requirements:
    // 
    //   * Each include-prefix and exclude-prefix can contain any sequence of
    //     Unicode characters, of max length 1024 bytes when UTF8-encoded, and
    //     must not contain Carriage Return or Line Feed characters.  Wildcard
    //     matching and regular expression matching are not supported.
    // 
    //   * Each include-prefix and exclude-prefix must omit the leading slash.
    //     For example, to include the `requests.gz` object in a transfer from
    //     `s3://my-aws-bucket/logs/y=2015/requests.gz`, specify the include
    //     prefix as `logs/y=2015/requests.gz`.
    // 
    //   * None of the include-prefix or the exclude-prefix values can be empty,
    //     if specified.
    // 
    //   * Each include-prefix must include a distinct portion of the object
    //     namespace, i.e., no include-prefix may be a prefix of another
    //     include-prefix.
    // 
    //   * Each exclude-prefix must exclude a distinct portion of the object
    //     namespace, i.e., no exclude-prefix may be a prefix of another
    //     exclude-prefix.
    // 
    //   * If `includePrefixes` is specified, then each exclude-prefix must start
    //     with the value of a path explicitly included by `includePrefixes`.
    // 
    // The max size of `includePrefixes` is 1000.
    repeated string includePrefixes = 2;
    // `maxTimeElapsedSinceLastModification` is the complement to
    // `minTimeElapsedSinceLastModification`.
    string maxTimeElapsedSinceLastModification = 3;
    // If unspecified, `minTimeElapsedSinceLastModification` takes a zero value
    // and `maxTimeElapsedSinceLastModification` takes the maximum possible
    // value of Duration. Objects that satisfy the object conditions
    // must either have a `lastModificationTime` greater or equal to
    // `NOW` - `maxTimeElapsedSinceLastModification` and less than
    // `NOW` - `minTimeElapsedSinceLastModification`, or not have a
    // `lastModificationTime`.
    string minTimeElapsedSinceLastModification = 4;
}

message Operation {
    // If the value is `false`, it means the operation is still in progress.
    // If `true`, the operation is completed, and either `error` or `response` is
    // available.
    bool done = 1;
    // The error result of the operation in case of failure or cancellation.
    Status error = 2;
    // Represents the transfer operation object.
    map<string, > metadata = 3;
    // The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should have the format of `transferOperations/some/unique/name`.
    string name = 4;
    // The normal response of the operation in case of success.  If the original
    // method returns no data on success, such as `Delete`, the response is
    // `google.protobuf.Empty`.  If the original method is standard
    // `Get`/`Create`/`Update`, the response should be the resource.  For other
    // methods, the response should have the type `XxxResponse`, where `Xxx`
    // is the original method name.  For example, if the original method name
    // is `TakeSnapshot()`, the inferred response type is
    // `TakeSnapshotResponse`.
    map<string, > response = 5;
}

message PauseTransferOperationRequest {
}

message ResumeTransferOperationRequest {
}

message Schedule {
    // The last day the recurring transfer will be run. If `scheduleEndDate`
    // is the same as `scheduleStartDate`, the transfer will be executed only
    // once.
    Date scheduleEndDate = 1;
    // The first day the recurring transfer is scheduled to run. If
    // `scheduleStartDate` is in the past, the transfer will run for the first
    // time on the following day.
    // Required.
    Date scheduleStartDate = 2;
    // The time in UTC at which the transfer will be scheduled to start in a day.
    // Transfers may start later than this time. If not specified, recurring and
    // one-time transfers that are scheduled to run today will run immediately;
    // recurring transfers that are scheduled to run on a future date will start
    // at approximately midnight UTC on that date. Note that when configuring a
    // transfer with the Cloud Platform Console, the transfer's start time in a
    // day is specified in your local timezone.
    TimeOfDay startTimeOfDay = 3;
}

message Status {
    // The status code, which should be an enum value of google.rpc.Code.
    int32 code = 1;
    // A list of messages that carry the error details.  There is a common set of
    // message types for APIs to use.
    message Detail {
    }
    repeated Detail details = 2;
    // A developer-facing error message, which should be in English. Any
    // user-facing error message should be localized and sent in the
    // google.rpc.Status.details field, or localized by the client.
    string message = 3;
}

message TimeOfDay {
    // Hours of day in 24 hour format. Should be from 0 to 23. An API may choose
    // to allow the value "24:00:00" for scenarios like business closing time.
    int32 hours = 1;
    // Minutes of hour of day. Must be from 0 to 59.
    int32 minutes = 2;
    // Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
    int32 nanos = 3;
    // Seconds of minutes of the time. Must normally be from 0 to 59. An API may
    // allow the value 60 if it allows leap-seconds.
    int32 seconds = 4;
}

message TransferCounters {
    // Bytes that are copied to the data sink.
    string bytesCopiedToSink = 1;
    // Bytes that are deleted from the data sink.
    string bytesDeletedFromSink = 2;
    // Bytes that are deleted from the data source.
    string bytesDeletedFromSource = 3;
    // Bytes that failed to be deleted from the data sink.
    string bytesFailedToDeleteFromSink = 4;
    // Bytes found in the data source that are scheduled to be transferred,
    // which will be copied, excluded based on conditions, or skipped due to
    // failures.
    string bytesFoundFromSource = 5;
    // Bytes found only in the data sink that are scheduled to be deleted.
    string bytesFoundOnlyFromSink = 6;
    // Bytes in the data source that failed during the transfer.
    string bytesFromSourceFailed = 7;
    // Bytes in the data source that are not transferred because they already
    // exist in the data sink.
    string bytesFromSourceSkippedBySync = 8;
    // Objects that are copied to the data sink.
    string objectsCopiedToSink = 9;
    // Objects that are deleted from the data sink.
    string objectsDeletedFromSink = 10;
    // Objects that are deleted from the data source.
    string objectsDeletedFromSource = 11;
    // Objects that failed to be deleted from the data sink.
    string objectsFailedToDeleteFromSink = 12;
    // Objects found in the data source that are scheduled to be transferred,
    // which will be copied, excluded based on conditions, or skipped due to
    // failures.
    string objectsFoundFromSource = 13;
    // Objects found only in the data sink that are scheduled to be deleted.
    string objectsFoundOnlyFromSink = 14;
    // Objects in the data source that failed during the transfer.
    string objectsFromSourceFailed = 15;
    // Objects in the data source that are not transferred because they already
    // exist in the data sink.
    string objectsFromSourceSkippedBySync = 16;
}

message TransferJob {
    // This field cannot be changed by user requests.
    string creationTime = 1;
    // This field cannot be changed by user requests.
    string deletionTime = 2;
    // A description provided by the user for the job. Its max length is 1024
    // bytes when Unicode-encoded.
    string description = 3;
    // This field cannot be changed by user requests.
    string lastModificationTime = 4;
    // A globally unique name assigned by Storage Transfer Service when the
    // job is created. This field should be left empty in requests to create a new
    // transfer job; otherwise, the requests result in an `INVALID_ARGUMENT`
    // error.
    string name = 5;
    // The ID of the Google Cloud Platform Console project that owns the job.
    string projectId = 6;
    // Schedule specification.
    Schedule schedule = 7;
    // Status of the job. This value MUST be specified for
    // `CreateTransferJobRequests`.
    // 
    // NOTE: The effect of the new job status takes place during a subsequent job
    // run. For example, if you change the job status from `ENABLED` to
    // `DISABLED`, and an operation spawned by the transfer is running, the status
    // change would not affect the current operation.
    enum TransferJob_Statu {
        TRANSFERJOB_STATU_STATUS_UNSPECIFIED = 0;
        TRANSFERJOB_STATU_ENABLED = 1;
        TRANSFERJOB_STATU_DISABLED = 2;
        TRANSFERJOB_STATU_DELETED = 3;
    }
    TransferJob_Statu status = 8;
    // Transfer specification.
    TransferSpec transferSpec = 9;
}

message TransferOperation {
    // Information about the progress of the transfer operation.
    TransferCounters counters = 1;
    // End time of this transfer execution.
    string endTime = 2;
    // Summarizes errors encountered with sample error log entries.
    repeated ErrorSummary errorBreakdowns = 3;
    // A globally unique ID assigned by the system.
    string name = 4;
    // The ID of the Google Cloud Platform Console project that owns the operation.
    // Required.
    string projectId = 5;
    // Start time of this transfer execution.
    string startTime = 6;
    // Status of the transfer operation.
    enum TransferOperation_Statu {
        TRANSFEROPERATION_STATU_STATUS_UNSPECIFIED = 0;
        TRANSFEROPERATION_STATU_IN_PROGRESS = 1;
        TRANSFEROPERATION_STATU_PAUSED = 2;
        TRANSFEROPERATION_STATU_SUCCESS = 3;
        TRANSFEROPERATION_STATU_FAILED = 4;
        TRANSFEROPERATION_STATU_ABORTED = 5;
    }
    TransferOperation_Statu status = 7;
    // The name of the transfer job that triggers this transfer operation.
    string transferJobName = 8;
    // Transfer specification.
    // Required.
    TransferSpec transferSpec = 9;
}

message TransferOptions {
    // Whether objects should be deleted from the source after they are
    // transferred to the sink.  Note that this option and
    // `deleteObjectsUniqueInSink` are mutually exclusive.
    bool deleteObjectsFromSourceAfterTransfer = 1;
    // Whether objects that exist only in the sink should be deleted.  Note that
    // this option and `deleteObjectsFromSourceAfterTransfer` are mutually
    // exclusive.
    bool deleteObjectsUniqueInSink = 2;
    // Whether overwriting objects that already exist in the sink is allowed.
    bool overwriteObjectsAlreadyExistingInSink = 3;
}

message TransferSpec {
    // An AWS S3 data source.
    AwsS3Data awsS3DataSource = 1;
    // A Google Cloud Storage data sink.
    GcsData gcsDataSink = 2;
    // A Google Cloud Storage data source.
    GcsData gcsDataSource = 3;
    // An HTTP URL data source.
    HttpData httpDataSource = 4;
    // Only objects that satisfy these object conditions are included in the set
    // of data source and data sink objects.  Object conditions based on
    // objects' `lastModificationTime` do not exclude objects in a data sink.
    ObjectConditions objectConditions = 5;
    // If the option `deleteObjectsUniqueInSink` is `true`, object conditions
    // based on objects' `lastModificationTime` are ignored and do not exclude
    // objects in a data source or a data sink.
    TransferOptions transferOptions = 6;
}

message UpdateTransferJobRequest {
    // The ID of the Google Cloud Platform Console project that owns the job.
    // Required.
    string projectId = 1;
    // The job to update. `transferJob` is expected to specify only three fields:
    // `description`, `transferSpec`, and `status`.  An UpdateTransferJobRequest
    // that specifies other fields will be rejected with an error
    // `INVALID_ARGUMENT`.
    // Required.
    TransferJob transferJob = 2;
    // The field mask of the fields in `transferJob` that are to be updated in
    // this request.  Fields in `transferJob` that can be updated are:
    // `description`, `transferSpec`, and `status`.  To update the `transferSpec`
    // of the job, a complete transfer specification has to be provided. An
    // incomplete specification which misses any required fields will be rejected
    // with the error `INVALID_ARGUMENT`.
    string updateTransferJobFieldMask = 3;
}

enum Alt {
    JSON = 0;
    MEDIA = 1;
    PROTO = 2;
}

service GoogleStorageTransferService {
    // Returns the Google service account that is used by Storage Transfer
    // Service to access buckets in the project where transfers
    // run or in other projects. Each Google service account is associated
    // with one Google Cloud Platform Console project. Users
    // should add this service account to the Google Cloud Storage bucket
    // ACLs to grant access to Storage Transfer Service. This service
    // account is created and owned by Storage Transfer Service and can
    // only be used by Storage Transfer Service.
    rpc GetV1GoogleServiceAccountsProjectId(GetV1GoogleServiceAccountsProjectIdRequest) returns (GoogleServiceAccount) {
      option (google.api.http) = {
        get: "//v1/googleServiceAccounts/{projectId}"
      };
    }
    // Lists transfer jobs.
    rpc GetV1TransferJobs(GetV1TransferJobsRequest) returns (ListTransferJobsResponse) {
      option (google.api.http) = {
        get: "//v1/transferJobs"
      };
    }
    // Creates a transfer job that runs periodically.
    rpc PostV1TransferJobs(PostV1TransferJobsRequest) returns (TransferJob) {
      option (google.api.http) = {
        post: "//v1/transferJobs"
        body: "body"
      };
    }
    // Gets a transfer job.
    rpc GetV1JobName(GetV1JobNameRequest) returns (TransferJob) {
      option (google.api.http) = {
        get: "//v1/{jobName}"
      };
    }
    // Gets the latest state of a long-running operation.  Clients can use this
    // method to poll the operation result at intervals as recommended by the API
    // service.
    rpc GetV1Name(GetV1NameRequest) returns (Operation) {
      option (google.api.http) = {
        get: "//v1/{name}"
      };
    }
    // This method is not supported and the server returns `UNIMPLEMENTED`.
    rpc DeleteV1Name(DeleteV1NameRequest) returns (Empty) {
      option (google.api.http) = {
        delete: "//v1/{name}"
      };
    }
    // Cancels a transfer. Use the get method to check whether the cancellation succeeded or whether the operation completed despite cancellation.
    rpc PostV1Name:Cancel(PostV1Name:CancelRequest) returns (Empty) {
      option (google.api.http) = {
        post: "//v1/{name}:cancel"
      };
    }
    // Pauses a transfer operation.
    rpc PostV1Name:Pause(PostV1Name:PauseRequest) returns (Empty) {
      option (google.api.http) = {
        post: "//v1/{name}:pause"
        body: "body"
      };
    }
    // Resumes a transfer operation that is paused.
    rpc PostV1Name:Resume(PostV1Name:ResumeRequest) returns (Empty) {
      option (google.api.http) = {
        post: "//v1/{name}:resume"
        body: "body"
      };
    }
}

syntax = "proto3";

import "google/api/annotations.proto";

package googleappsscriptexecution;

message PostV1ScriptsScriptId:RunRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    ExecutionRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // The script ID of the script to be executed. To find the script ID, open
    // the project in the script editor and select **File > Project properties**.
    string scriptId = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

enum $.Xgafv {
    $XGAFV_1 = 0;
    $XGAFV_2 = 1;
}

message ExecutionError {
    // The error message thrown by Apps Script, usually localized into the user's
    // language.
    string errorMessage = 1;
    // The error type, for example `TypeError` or `ReferenceError`. If the error
    // type is unavailable, this field is not included.
    string errorType = 2;
    // An array of objects that provide a stack trace through the script to show
    // where the execution failed, with the deepest call first.
    repeated ScriptStackTraceElement scriptStackTraceElements = 3;
}

message ExecutionRequest {
    // If `true` and the user is an owner of the script, the script runs at the
    // most recently saved version rather than the version deployed for use with
    // the Execution API. Optional; default is `false`.
    bool devMode = 1;
    // The name of the function to execute in the given script. The name does not
    // include parentheses or parameters.
    string function = 2;
    // The parameters to be passed to the function being executed. The object type
    // for each parameter should match the expected type in Apps Script.
    // Parameters cannot be Apps Script-specific object types (such as a
    // `Document` or a `Calendar`); they can only be primitive types such as
    // `string`, `number`, `array`, `object`, or `boolean`. Optional.
    message Parameter {
    }
    repeated Parameter parameters = 3;
    // For Android add-ons only. An ID that represents the user's current session
    // in the Android app for Google Docs or Sheets, included as extra data in the
    // [`Intent`](https://developer.android.com/guide/components/intents-filters.html)
    // that launches the add-on. When an Android add-on is run with a session
    // state, it gains the privileges of a
    // [bound](https://developers.google.com/apps-script/guides/bound) script &mdash;
    // that is, it can access information like the user's current cursor position
    // (in Docs) or selected cell (in Sheets). To retrieve the state, call
    // `Intent.getStringExtra("com.google.android.apps.docs.addons.SessionState")`.
    // Optional.
    string sessionState = 4;
}

message ExecutionResponse {
    // The return value of the script function. The type matches the object type
    // returned in Apps Script. Functions called through the Execution API cannot
    // return Apps Script-specific objects (such as a `Document` or a `Calendar`);
    // they can only return primitive types such as a `string`, `number`, `array`,
    // `object`, or `boolean`.
    ;
}

message Operation {
    // This field is only used with asynchronous executions and indicates whether or not the script execution has completed. A completed execution has a populated response field containing the `ExecutionResponse` from function that was executed.
    bool done = 1;
    // If a `run` call succeeds but the script function (or Apps Script itself) throws an exception, this field will contain a `Status` object. The `Status` object's `details` field will contain an array with a single `ExecutionError` object that provides information about the nature of the error.
    Status error = 2;
    // This field is not used.
    map<string, > metadata = 3;
    // If the script function returns successfully, this field will contain an `ExecutionResponse` object with the function's return value as the object's `result` field.
    map<string, > response = 4;
}

message ScriptStackTraceElement {
    // The name of the function that failed.
    string function = 1;
    // The line number where the script failed.
    int32 lineNumber = 2;
}

message Status {
    // The status code. For this API, this value will always be 3, corresponding to an <code>INVALID_ARGUMENT</code> error.
    int32 code = 1;
    // An array that contains a single `ExecutionError` object that provides information about the nature of the error.
    message Detail {
    }
    repeated Detail details = 2;
    // A developer-facing error message, which is in English. Any user-facing error message is localized and sent in the [`google.rpc.Status.details`](google.rpc.Status.details) field, or localized by the client.
    string message = 3;
}

enum Alt {
    JSON = 0;
    MEDIA = 1;
    PROTO = 2;
}

service GoogleAppsScriptExecutionService {
    // Runs a function in an Apps Script project. The project must be deployed
    // for use with the Apps Script Execution API.
    // 
    // This method requires authorization with an OAuth 2.0 token that includes at
    // least one of the scopes listed in the [Authorization](#authorization)
    // section; script projects that do not require authorization cannot be
    // executed through this API. To find the correct scopes to include in the
    // authentication token, open the project in the script editor, then select
    // **File > Project properties** and click the **Scopes** tab.
    rpc PostV1ScriptsScriptId:Run(PostV1ScriptsScriptId:RunRequest) returns (Operation) {
      option (google.api.http) = {
        post: "//v1/scripts/{scriptId}:run"
        body: "body"
      };
    }
}

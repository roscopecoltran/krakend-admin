syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package googlecloudruntimeconfiguration;

message GetV1beta1NameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    // The name of the operation resource.
    string name = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PutV1beta1NameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    Variable body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    // The name of the variable to update, in the format:
    // 
    // `projects/[PROJECT_ID]/configs/[CONFIG_NAME]/variables/[VARIABLE_NAME]`
    string name = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message DeleteV1beta1NameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    // The Waiter resource to delete, in the format:
    // 
    //  `projects/[PROJECT_ID]/configs/[CONFIG_NAME]/waiters/[WAITER_NAME]`
    string name = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // Set to `true` to recursively delete multiple variables with the same
    // prefix.
    bool recursive = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1beta1Name:WatchRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    WatchVariableRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    // The name of the variable to watch, in the format:
    // 
    // `projects/[PROJECT_ID]/configs/[CONFIG_NAME]`
    string name = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1beta1ParentConfigsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    // Specifies the number of results to return per page. If there are fewer
    // elements than the specified number, returns all elements.
    int32 pageSize = 9;
    // Specifies a page token to use. Set `pageToken` to a `nextPageToken`
    // returned by a previous list request to get the next page of results.
    string pageToken = 10;
    // The [project ID](https://support.google.com/cloud/answer/6158840?hl=en&ref_topic=6158848)
    // for this request, in the format `projects/[PROJECT_ID]`.
    string parent = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message PostV1beta1ParentConfigsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    RuntimeConfig body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    // The [project ID](https://support.google.com/cloud/answer/6158840?hl=en&ref_topic=6158848)
    // for this request, in the format `projects/[PROJECT_ID]`.
    string parent = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    // An optional but recommended unique `request_id`. If the server
    // receives two `create()` requests  with the same
    // `request_id`, then the second request will be ignored and the
    // first resource created and stored in the backend is returned.
    // Empty `request_id` fields are ignored.
    // 
    // It is responsibility of the client to ensure uniqueness of the
    // `request_id` strings.
    // 
    // `request_id` strings are limited to 64 characters.
    string requestId = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message GetV1beta1ParentVariablesRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // Filters variables by matching the specified filter. For example:
    // 
    // `projects/example-project/config/[CONFIG_NAME]/variables/example-variable`.
    string filter = 7;
    string key = 8;
    string oauth_token = 9;
    // Specifies the number of results to return per page. If there are fewer
    // elements than the specified number, returns all elements.
    int32 pageSize = 10;
    // Specifies a page token to use. Set `pageToken` to a `nextPageToken`
    // returned by a previous list request to get the next page of results.
    string pageToken = 11;
    // The path to the RuntimeConfig resource for which you want to list variables.
    // The configuration must exist beforehand; the path must be in the format:
    // 
    // `projects/[PROJECT_ID]/configs/[CONFIG_NAME]`
    string parent = 12;
    boolean pp = 13;
    boolean prettyPrint = 14;
    string quotaUser = 15;
    // The flag indicates whether the user wants to return values of variables.
    // If true, then only those variables that user has IAM GetVariable permission
    // will be returned along with their values.
    bool returnValues = 16;
    string uploadType = 17;
    string upload_protocol = 18;
}

message PostV1beta1ParentVariablesRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    Variable body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    // The path to the RutimeConfig resource that this variable should belong to.
    // The configuration must exist beforehand; the path must be in the format:
    // 
    // `projects/[PROJECT_ID]/configs/[CONFIG_NAME]`
    string parent = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    // An optional but recommended unique `request_id`. If the server
    // receives two `create()` requests  with the same
    // `request_id`, then the second request will be ignored and the
    // first resource created and stored in the backend is returned.
    // Empty `request_id` fields are ignored.
    // 
    // It is responsibility of the client to ensure uniqueness of the
    // `request_id` strings.
    // 
    // `request_id` strings are limited to 64 characters.
    string requestId = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message GetV1beta1ParentWaitersRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    // Specifies the number of results to return per page. If there are fewer
    // elements than the specified number, returns all elements.
    int32 pageSize = 9;
    // Specifies a page token to use. Set `pageToken` to a `nextPageToken`
    // returned by a previous list request to get the next page of results.
    string pageToken = 10;
    // The path to the configuration for which you want to get a list of waiters.
    // The configuration must exist beforehand; the path must be in the format:
    // 
    // `projects/[PROJECT_ID]/configs/[CONFIG_NAME]`
    string parent = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message PostV1beta1ParentWaitersRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    Waiter body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    // The path to the configuration that will own the waiter.
    // The configuration must exist beforehand; the path must be in the format:
    // 
    // `projects/[PROJECT_ID]/configs/[CONFIG_NAME]`.
    string parent = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    // An optional but recommended unique `request_id`. If the server
    // receives two `create()` requests  with the same
    // `request_id`, then the second request will be ignored and the
    // first resource created and stored in the backend is returned.
    // Empty `request_id` fields are ignored.
    // 
    // It is responsibility of the client to ensure uniqueness of the
    // `request_id` strings.
    // 
    // `request_id` strings are limited to 64 characters.
    string requestId = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message GetV1beta1Resource:GetIamPolicyRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    boolean pp = 9;
    boolean prettyPrint = 10;
    string quotaUser = 11;
    // REQUIRED: The resource for which the policy is being requested.
    // See the operation documentation for the appropriate value for this field.
    string resource = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PostV1beta1Resource:SetIamPolicyRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    SetIamPolicyRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // REQUIRED: The resource for which the policy is being specified.
    // See the operation documentation for the appropriate value for this field.
    string resource = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PostV1beta1Resource:TestIamPermissionsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    TestIamPermissionsRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // REQUIRED: The resource for which the policy detail is being requested.
    // See the operation documentation for the appropriate value for this field.
    string resource = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

enum $.Xgafv {
    $XGAFV_1 = 0;
    $XGAFV_2 = 1;
}

message Binding {
    // Specifies the identities requesting access for a Cloud Platform resource.
    // `members` can have the following values:
    // 
    // * `allUsers`: A special identifier that represents anyone who is
    //    on the internet; with or without a Google account.
    // 
    // * `allAuthenticatedUsers`: A special identifier that represents anyone
    //    who is authenticated with a Google account or a service account.
    // 
    // * `user:{emailid}`: An email address that represents a specific Google
    //    account. For example, `alice@gmail.com` or `joe@example.com`.
    // 
    // 
    // * `serviceAccount:{emailid}`: An email address that represents a service
    //    account. For example, `my-other-app@appspot.gserviceaccount.com`.
    // 
    // * `group:{emailid}`: An email address that represents a Google group.
    //    For example, `admins@example.com`.
    // 
    // 
    // * `domain:{domain}`: A Google Apps domain name that represents all the
    //    users of that domain. For example, `google.com` or `example.com`.
    // 
    repeated string members = 1;
    // Role that is assigned to `members`.
    // For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
    // Required
    string role = 2;
}

message Cardinality {
    // The number variables under the `path` that must exist to meet this
    // condition. Defaults to 1 if not specified.
    int32 number = 1;
    // The root of the variable subtree to monitor. For example, `/foo`.
    string path = 2;
}

message Empty {
}

message EndCondition {
    // The cardinality of the `EndCondition`.
    Cardinality cardinality = 1;
}

message ListConfigsResponse {
    // A list of the configurations in the project. The order of returned
    // objects is arbitrary; that is, it is not ordered in any particular way.
    repeated RuntimeConfig configs = 1;
    // This token allows you to get the next page of results for list requests.
    // If the number of results is larger than `pageSize`, use the `nextPageToken`
    // as a value for the query parameter `pageToken` in the next list request.
    // Subsequent list requests will have their own `nextPageToken` to continue
    // paging through the results
    string nextPageToken = 2;
}

message ListVariablesResponse {
    // This token allows you to get the next page of results for list requests.
    // If the number of results is larger than `pageSize`, use the `nextPageToken`
    // as a value for the query parameter `pageToken` in the next list request.
    // Subsequent list requests will have their own `nextPageToken` to continue
    // paging through the results
    string nextPageToken = 1;
    // A list of variables and their values. The order of returned variable
    // objects is arbitrary.
    repeated Variable variables = 2;
}

message ListWaitersResponse {
    // This token allows you to get the next page of results for list requests.
    // If the number of results is larger than `pageSize`, use the `nextPageToken`
    // as a value for the query parameter `pageToken` in the next list request.
    // Subsequent list requests will have their own `nextPageToken` to continue
    // paging through the results
    string nextPageToken = 1;
    // Found waiters in the project.
    repeated Waiter waiters = 2;
}

message Operation {
    // If the value is `false`, it means the operation is still in progress.
    // If `true`, the operation is completed, and either `error` or `response` is
    // available.
    bool done = 1;
    // The error result of the operation in case of failure or cancellation.
    Status error = 2;
    // Service-specific metadata associated with the operation.  It typically
    // contains progress information and common metadata such as create time.
    // Some services might not provide such metadata.  Any method that returns a
    // long-running operation should document the metadata type, if any.
    map<string, > metadata = 3;
    // The server-assigned name, which is only unique within the same service that
    // originally returns it. If you use the default HTTP mapping, the
    // `name` should have the format of `operations/some/unique/name`.
    string name = 4;
    // The normal response of the operation in case of success.  If the original
    // method returns no data on success, such as `Delete`, the response is
    // `google.protobuf.Empty`.  If the original method is standard
    // `Get`/`Create`/`Update`, the response should be the resource.  For other
    // methods, the response should have the type `XxxResponse`, where `Xxx`
    // is the original method name.  For example, if the original method name
    // is `TakeSnapshot()`, the inferred response type is
    // `TakeSnapshotResponse`.
    map<string, > response = 5;
}

message Policy {
    // Associates a list of `members` to a `role`.
    // `bindings` with no members will result in an error.
    repeated Binding bindings = 1;
    // `etag` is used for optimistic concurrency control as a way to help
    // prevent simultaneous updates of a policy from overwriting each other.
    // It is strongly suggested that systems make use of the `etag` in the
    // read-modify-write cycle to perform policy updates in order to avoid race
    // conditions: An `etag` is returned in the response to `getIamPolicy`, and
    // systems are expected to put that etag in the request to `setIamPolicy` to
    // ensure that their change will be applied to the same version of the policy.
    // 
    // If no `etag` is provided in the call to `setIamPolicy`, then the existing
    // policy is overwritten blindly.
    string etag = 2;
    // Version of the `Policy`. The default version is 0.
    int32 version = 3;
}

message RuntimeConfig {
    // An optional description of the RuntimeConfig object.
    string description = 1;
    // The resource name of a runtime config. The name must have the format:
    // 
    //     projects/[PROJECT_ID]/configs/[CONFIG_NAME]
    // 
    // The `[PROJECT_ID]` must be a valid project ID, and `[CONFIG_NAME]` is an
    // arbitrary name that matches RFC 1035 segment specification. The length of
    // `[CONFIG_NAME]` must be less than 64 bytes.
    // 
    // You pick the RuntimeConfig resource name, but the server will validate that
    // the name adheres to this format. After you create the resource, you cannot
    // change the resource's name.
    string name = 2;
}

message SetIamPolicyRequest {
    // REQUIRED: The complete policy to be applied to the `resource`. The size of
    // the policy is limited to a few 10s of KB. An empty policy is a
    // valid policy but certain Cloud Platform services (such as Projects)
    // might reject them.
    Policy policy = 1;
}

message Status {
    // The status code, which should be an enum value of google.rpc.Code.
    int32 code = 1;
    // A list of messages that carry the error details.  There is a common set of
    // message types for APIs to use.
    message Detail {
    }
    repeated Detail details = 2;
    // A developer-facing error message, which should be in English. Any
    // user-facing error message should be localized and sent in the
    // google.rpc.Status.details field, or localized by the client.
    string message = 3;
}

message TestIamPermissionsRequest {
    // The set of permissions to check for the `resource`. Permissions with
    // wildcards (such as '*' or 'storage.*') are not allowed. For more
    // information see
    // [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
    repeated string permissions = 1;
}

message TestIamPermissionsResponse {
    // A subset of `TestPermissionsRequest.permissions` that the caller is
    // allowed.
    repeated string permissions = 1;
}

message Variable {
    // The name of the variable resource, in the format:
    // 
    //     projects/[PROJECT_ID]/configs/[CONFIG_NAME]/variables/[VARIABLE_NAME]
    // 
    // The `[PROJECT_ID]` must be a valid project ID, `[CONFIG_NAME]` must be a
    // valid RuntimeConfig reource and `[VARIABLE_NAME]` follows Unix file system
    // file path naming.
    // 
    // The `[VARIABLE_NAME]` can contain ASCII letters, numbers, slashes and
    // dashes. Slashes are used as path element separators and are not part of the
    // `[VARIABLE_NAME]` itself, so `[VARIABLE_NAME]` must contain at least one
    // non-slash character. Multiple slashes are coalesced into single slash
    // character. Each path segment should follow RFC 1035 segment specification.
    // The length of a `[VARIABLE_NAME]` must be less than 256 bytes.
    // 
    // Once you create a variable, you cannot change the variable name.
    string name = 1;
    // [Ouput only] The current state of the variable. The variable state indicates
    // the outcome of the `variables().watch` call and is visible through the
    // `get` and `list` calls.
    enum Variable_State {
        VARIABLE_STATE_VARIABLE_STATE_UNSPECIFIED = 0;
        VARIABLE_STATE_UPDATED = 1;
        VARIABLE_STATE_DELETED = 2;
    }
    Variable_State state = 2;
    // The string value of the variable. The length of the value must be less
    // than 4096 bytes. Empty values are also accepted. For example,
    // `text: "my text value"`. The string must be valid UTF-8.
    string text = 3;
    // [Output Only] The time of the last variable update.
    string updateTime = 4;
    // The binary value of the variable. The length of the value must be less
    // than 4096 bytes. Empty values are also accepted. The value must be
    // base64 encoded. Only one of `value` or `text` can be set.
    string value = 5;
}

message Waiter {
    // [Output Only] The instant at which this Waiter resource was created. Adding
    // the value of `timeout` to this instant yields the timeout deadline for the
    // waiter.
    string createTime = 1;
    // [Output Only] If the value is `false`, it means the waiter is still waiting
    // for one of its conditions to be met.
    // 
    // If true, the waiter has finished. If the waiter finished due to a timeout
    // or failure, `error` will be set.
    bool done = 2;
    // [Output Only] If the waiter ended due to a failure or timeout, this value
    // will be set.
    Status error = 3;
    // [Optional] The failure condition of this waiter. If this condition is met,
    // `done` will be set to `true` and the `error` code will be set to `ABORTED`.
    // The failure condition takes precedence over the success condition. If both
    // conditions are met, a failure will be indicated. This value is optional; if
    // no failure condition is set, the only failure scenario will be a timeout.
    EndCondition failure = 4;
    // The name of the Waiter resource, in the format:
    // 
    //     projects/[PROJECT_ID]/configs/[CONFIG_NAME]/waiters/[WAITER_NAME]
    // 
    // The `[PROJECT_ID]` must be a valid Google Cloud project ID,
    // the `[CONFIG_NAME]` must be a valid RuntimeConfig resource, the
    // `[WAITER_NAME]` must match RFC 1035 segment specification, and the length
    // of `[WAITER_NAME]` must be less than 64 bytes.
    // 
    // After you create a Waiter resource, you cannot change the resource name.
    string name = 5;
    // [Required] The success condition. If this condition is met, `done` will be
    // set to `true` and the `error` value will remain unset. The failure condition
    // takes precedence over the success condition. If both conditions are met, a
    // failure will be indicated.
    EndCondition success = 6;
    // [Required] Specifies the timeout of the waiter in seconds, beginning from
    // the instant that `waiters().create` method is called. If this time elapses
    // before the success or failure conditions are met, the waiter fails and sets
    // the `error` code to `DEADLINE_EXCEEDED`.
    string timeout = 7;
}

message WatchVariableRequest {
    // If specified, checks the current timestamp of the variable and if the
    // current timestamp is newer than `newerThan` timestamp, the method returns
    // immediately.
    // 
    // If not specified or the variable has an older timestamp, the watcher waits
    // for a the value to change before returning.
    string newerThan = 1;
}

enum Alt {
    JSON = 0;
    MEDIA = 1;
    PROTO = 2;
}

service GoogleCloudRuntimeConfigurationService {
    // Gets the latest state of a long-running operation.  Clients can use this
    // method to poll the operation result at intervals as recommended by the API
    // service.
    rpc GetV1beta1Name(GetV1beta1NameRequest) returns (Operation) {
      option (google.api.http) = {
        get: "//v1beta1/{name}"
      };
    }
    // Updates an existing variable with a new value.
    rpc PutV1beta1Name(PutV1beta1NameRequest) returns (Variable) {
      option (google.api.http) = {
        put: "//v1beta1/{name}"
        body: "body"
      };
    }
    // Deletes the waiter with the specified name.
    rpc DeleteV1beta1Name(DeleteV1beta1NameRequest) returns (Empty) {
      option (google.api.http) = {
        delete: "//v1beta1/{name}"
      };
    }
    // Watches a specific variable and waits for a change in the variable's value.
    // When there is a change, this method returns the new value or times out.
    // 
    // If a variable is deleted while being watched, the `variableState` state is
    // set to `DELETED` and the method returns the last known variable `value`.
    // 
    // If you set the deadline for watching to a larger value than internal timeout
    // (60 seconds), the current variable value is returned and the `variableState`
    // will be `VARIABLE_STATE_UNSPECIFIED`.
    // 
    // To learn more about creating a watcher, read the
    // [Watching a Variable for Changes](/deployment-manager/runtime-configurator/watching-a-variable)
    // documentation.
    rpc PostV1beta1Name:Watch(PostV1beta1Name:WatchRequest) returns (Variable) {
      option (google.api.http) = {
        post: "//v1beta1/{name}:watch"
        body: "body"
      };
    }
    // Lists all the RuntimeConfig resources within project.
    rpc GetV1beta1ParentConfigs(GetV1beta1ParentConfigsRequest) returns (ListConfigsResponse) {
      option (google.api.http) = {
        get: "//v1beta1/{parent}/configs"
      };
    }
    // Creates a new RuntimeConfig resource. The configuration name must be
    // unique within project.
    rpc PostV1beta1ParentConfigs(PostV1beta1ParentConfigsRequest) returns (RuntimeConfig) {
      option (google.api.http) = {
        post: "//v1beta1/{parent}/configs"
        body: "body"
      };
    }
    // Lists variables within given a configuration, matching any provided filters.
    // This only lists variable names, not the values, unless `return_values` is
    // true, in which case only variables that user has IAM permission to GetVariable
    // will be returned.
    rpc GetV1beta1ParentVariables(GetV1beta1ParentVariablesRequest) returns (ListVariablesResponse) {
      option (google.api.http) = {
        get: "//v1beta1/{parent}/variables"
      };
    }
    // Creates a variable within the given configuration. You cannot create
    // a variable with a name that is a prefix of an existing variable name, or a
    // name that has an existing variable name as a prefix.
    // 
    // To learn more about creating a variable, read the
    // [Setting and Getting Data](/deployment-manager/runtime-configurator/set-and-get-variables)
    // documentation.
    rpc PostV1beta1ParentVariables(PostV1beta1ParentVariablesRequest) returns (Variable) {
      option (google.api.http) = {
        post: "//v1beta1/{parent}/variables"
        body: "body"
      };
    }
    // List waiters within the given configuration.
    rpc GetV1beta1ParentWaiters(GetV1beta1ParentWaitersRequest) returns (ListWaitersResponse) {
      option (google.api.http) = {
        get: "//v1beta1/{parent}/waiters"
      };
    }
    // Creates a Waiter resource. This operation returns a long-running Operation
    // resource which can be polled for completion. However, a waiter with the
    // given name will exist (and can be retrieved) prior to the operation
    // completing. If the operation fails, the failed Waiter resource will
    // still exist and must be deleted prior to subsequent creation attempts.
    rpc PostV1beta1ParentWaiters(PostV1beta1ParentWaitersRequest) returns (Operation) {
      option (google.api.http) = {
        post: "//v1beta1/{parent}/waiters"
        body: "body"
      };
    }
    // Gets the access control policy for a resource.
    // Returns an empty policy if the resource exists and does not have a policy
    // set.
    rpc GetV1beta1Resource:GetIamPolicy(GetV1beta1Resource:GetIamPolicyRequest) returns (Policy) {
      option (google.api.http) = {
        get: "//v1beta1/{resource}:getIamPolicy"
      };
    }
    // Sets the access control policy on the specified resource. Replaces any
    // existing policy.
    rpc PostV1beta1Resource:SetIamPolicy(PostV1beta1Resource:SetIamPolicyRequest) returns (Policy) {
      option (google.api.http) = {
        post: "//v1beta1/{resource}:setIamPolicy"
        body: "body"
      };
    }
    // Returns permissions that a caller has on the specified resource.
    // If the resource does not exist, this will return an empty set of
    // permissions, not a NOT_FOUND error.
    // 
    // Note: This operation is designed to be used for building permission-aware
    // UIs and command-line tools, not for authorization checking. This operation
    // may "fail open" without warning.
    rpc PostV1beta1Resource:TestIamPermissions(PostV1beta1Resource:TestIamPermissionsRequest) returns (TestIamPermissionsResponse) {
      option (google.api.http) = {
        post: "//v1beta1/{resource}:testIamPermissions"
        body: "body"
      };
    }
}

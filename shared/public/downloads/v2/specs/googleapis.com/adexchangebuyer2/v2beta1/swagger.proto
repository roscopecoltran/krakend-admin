syntax = "proto3";

import "google/api/annotations.proto";

package adexchangebuyerapiii;

message GetV2beta1AccountsAccountIdClientsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // Unique numerical account ID of the sponsor buyer to list the clients for.
    string accountId = 3;
    alt alt = 4;
    string bearer_token = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    // Requested page size. The server may return fewer clients than requested.
    // If unspecified, the server will pick an appropriate default.
    int32 pageSize = 10;
    // A token identifying a page of results the server should return.
    // Typically, this is the value of
    // ListClientsResponse.nextPageToken
    // returned from the previous call to the
    // accounts.clients.list method.
    string pageToken = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message PostV2beta1AccountsAccountIdClientsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // Unique numerical account ID for the buyer of which the client buyer
    // is a customer; the sponsor buyer to create a client for. (required)
    string accountId = 3;
    alt alt = 4;
    string bearer_token = 5;
    Client body = 6;
    string callback = 7;
    string fields = 8;
    string key = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV2beta1AccountsAccountIdClientsClientAccountIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // Numerical account ID of the client's sponsor buyer. (required)
    string accountId = 3;
    alt alt = 4;
    string bearer_token = 5;
    string callback = 6;
    // Numerical account ID of the client buyer to retrieve. (required)
    string clientAccountId = 7;
    string fields = 8;
    string key = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PutV2beta1AccountsAccountIdClientsClientAccountIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // Unique numerical account ID for the buyer of which the client buyer
    // is a customer; the sponsor buyer to update a client for. (required)
    string accountId = 3;
    alt alt = 4;
    string bearer_token = 5;
    Client body = 6;
    string callback = 7;
    // Unique numerical account ID of the client to update. (required)
    string clientAccountId = 8;
    string fields = 9;
    string key = 10;
    string oauth_token = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message GetV2beta1AccountsAccountIdClientsClientAccountIdInvitationsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // Numerical account ID of the client's sponsor buyer. (required)
    string accountId = 3;
    alt alt = 4;
    string bearer_token = 5;
    string callback = 6;
    // Numerical account ID of the client buyer to list invitations for.
    // (required)
    // You must either specify a string representation of a
    // numerical account identifier or the `-` character
    // to list all the invitations for all the clients
    // of a given sponsor buyer.
    string clientAccountId = 7;
    string fields = 8;
    string key = 9;
    string oauth_token = 10;
    // Requested page size. Server may return fewer clients than requested.
    // If unspecified, server will pick an appropriate default.
    int32 pageSize = 11;
    // A token identifying a page of results the server should return.
    // Typically, this is the value of
    // ListClientUserInvitationsResponse.nextPageToken
    // returned from the previous call to the
    // clients.invitations.list
    // method.
    string pageToken = 12;
    boolean pp = 13;
    boolean prettyPrint = 14;
    string quotaUser = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

message PostV2beta1AccountsAccountIdClientsClientAccountIdInvitationsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // Numerical account ID of the client's sponsor buyer. (required)
    string accountId = 3;
    alt alt = 4;
    string bearer_token = 5;
    ClientUserInvitation body = 6;
    string callback = 7;
    // Numerical account ID of the client buyer that the user
    // should be associated with. (required)
    string clientAccountId = 8;
    string fields = 9;
    string key = 10;
    string oauth_token = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message GetV2beta1AccountsAccountIdClientsClientAccountIdInvitationsInvitationIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // Numerical account ID of the client's sponsor buyer. (required)
    string accountId = 3;
    alt alt = 4;
    string bearer_token = 5;
    string callback = 6;
    // Numerical account ID of the client buyer that the user invitation
    // to be retrieved is associated with. (required)
    string clientAccountId = 7;
    string fields = 8;
    // Numerical identifier of the user invitation to retrieve. (required)
    string invitationId = 9;
    string key = 10;
    string oauth_token = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message GetV2beta1AccountsAccountIdClientsClientAccountIdUsersRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // Numerical account ID of the sponsor buyer of the client to list users for.
    // (required)
    string accountId = 3;
    alt alt = 4;
    string bearer_token = 5;
    string callback = 6;
    // The account ID of the client buyer to list users for. (required)
    // You must specify either a string representation of a
    // numerical account identifier or the `-` character
    // to list all the client users for all the clients
    // of a given sponsor buyer.
    string clientAccountId = 7;
    string fields = 8;
    string key = 9;
    string oauth_token = 10;
    // Requested page size. The server may return fewer clients than requested.
    // If unspecified, the server will pick an appropriate default.
    int32 pageSize = 11;
    // A token identifying a page of results the server should return.
    // Typically, this is the value of
    // ListClientUsersResponse.nextPageToken
    // returned from the previous call to the
    // accounts.clients.users.list method.
    string pageToken = 12;
    boolean pp = 13;
    boolean prettyPrint = 14;
    string quotaUser = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

message GetV2beta1AccountsAccountIdClientsClientAccountIdUsersUserIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // Numerical account ID of the client's sponsor buyer. (required)
    string accountId = 3;
    alt alt = 4;
    string bearer_token = 5;
    string callback = 6;
    // Numerical account ID of the client buyer
    // that the user to be retrieved is associated with. (required)
    string clientAccountId = 7;
    string fields = 8;
    string key = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
    // Numerical identifier of the user to retrieve. (required)
    string userId = 16;
}

message PutV2beta1AccountsAccountIdClientsClientAccountIdUsersUserIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // Numerical account ID of the client's sponsor buyer. (required)
    string accountId = 3;
    alt alt = 4;
    string bearer_token = 5;
    ClientUser body = 6;
    string callback = 7;
    // Numerical account ID of the client buyer that the user to be retrieved
    // is associated with. (required)
    string clientAccountId = 8;
    string fields = 9;
    string key = 10;
    string oauth_token = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
    // Numerical identifier of the user to retrieve. (required)
    string userId = 17;
}

message GetV2beta1AccountsAccountIdCreativesRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // The account to list the creatives from.
    // Specify "-" to list all creatives the current user has access to.
    string accountId = 3;
    alt alt = 4;
    string bearer_token = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    // Requested page size. The server may return fewer creatives than requested
    // (due to timeout constraint) even if more are available via another call.
    // If unspecified, server will pick an appropriate default.
    // Acceptable values are 1 to 1000, inclusive.
    int32 pageSize = 10;
    // A token identifying a page of results the server should return.
    // Typically, this is the value of
    // ListCreativesResponse.next_page_token
    // returned from the previous call to 'ListCreatives' method.
    string pageToken = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    // An optional query string to filter creatives. If no filter is specified,
    // all active creatives will be returned.
    // Supported queries are:
    // <ul>
    // <li>accountId=<i>account_id_string</i>
    // <li>creativeId=<i>creative_id_string</i>
    // <li>dealsStatus: {approved, conditionally_approved, disapproved,
    //                    not_checked}
    // <li>openAuctionStatus: {approved, conditionally_approved, disapproved,
    //                           not_checked}
    // <li>attribute: {a numeric attribute from the list of attributes}
    // <li>disapprovalReason: {a reason from
    // DisapprovalReason
    // </ul>
    // Example: 'accountId=12345 AND (dealsStatus:disapproved AND
    // disapprovalReason:unacceptable_content) OR attribute:47'
    string query = 14;
    string quotaUser = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

message PostV2beta1AccountsAccountIdCreativesRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // The account that this creative belongs to.
    // Can be used to filter the response of the
    // creatives.list
    // method.
    string accountId = 3;
    alt alt = 4;
    string bearer_token = 5;
    Creative body = 6;
    string callback = 7;
    // Indicates if multiple creatives can share an ID or not. Default is
    // NO_DUPLICATES (one ID per creative).
    enum PostV2beta1AccountsAccountIdCreativesRequest_DuplicateIdMode {
        POSTV2BETA1ACCOUNTSACCOUNTIDCREATIVESREQUEST_DUPLICATEIDMODE_NO_DUPLICATES = 0;
        POSTV2BETA1ACCOUNTSACCOUNTIDCREATIVESREQUEST_DUPLICATEIDMODE_FORCE_ENABLE_DUPLICATE_IDS = 1;
    }
    PostV2beta1AccountsAccountIdCreativesRequest_DuplicateIdMode duplicateIdMode = 8;
    string fields = 9;
    string key = 10;
    string oauth_token = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message GetV2beta1AccountsAccountIdCreativesCreativeIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // The account the creative belongs to.
    string accountId = 3;
    alt alt = 4;
    string bearer_token = 5;
    string callback = 6;
    // The ID of the creative to retrieve.
    string creativeId = 7;
    string fields = 8;
    string key = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message PutV2beta1AccountsAccountIdCreativesCreativeIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // The account that this creative belongs to.
    // Can be used to filter the response of the
    // creatives.list
    // method.
    string accountId = 3;
    alt alt = 4;
    string bearer_token = 5;
    Creative body = 6;
    string callback = 7;
    // The buyer-defined creative ID of this creative.
    // Can be used to filter the response of the
    // creatives.list
    // method.
    string creativeId = 8;
    string fields = 9;
    string key = 10;
    string oauth_token = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message GetV2beta1AccountsAccountIdCreativesCreativeIdDealAssociationsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // The account to list the associations from.
    // Specify "-" to list all creatives the current user has access to.
    string accountId = 3;
    alt alt = 4;
    string bearer_token = 5;
    string callback = 6;
    // The creative ID to list the associations from.
    // Specify "-" to list all creatives under the above account.
    string creativeId = 7;
    string fields = 8;
    string key = 9;
    string oauth_token = 10;
    // Requested page size. Server may return fewer associations than requested.
    // If unspecified, server will pick an appropriate default.
    int32 pageSize = 11;
    // A token identifying a page of results the server should return.
    // Typically, this is the value of
    // ListDealAssociationsResponse.next_page_token
    // returned from the previous call to 'ListDealAssociations' method.
    string pageToken = 12;
    boolean pp = 13;
    boolean prettyPrint = 14;
    // An optional query string to filter deal associations. If no filter is
    // specified, all associations will be returned.
    // Supported queries are:
    // <ul>
    // <li>accountId=<i>account_id_string</i>
    // <li>creativeId=<i>creative_id_string</i>
    // <li>dealsId=<i>deals_id_string</i>
    // <li>dealsStatus:{approved, conditionally_approved, disapproved,
    //                   not_checked}
    // <li>openAuctionStatus:{approved, conditionally_approved, disapproved,
    //                          not_checked}
    // </ul>
    // Example: 'dealsId=12345 AND dealsStatus:disapproved'
    string query = 15;
    string quotaUser = 16;
    string uploadType = 17;
    string upload_protocol = 18;
}

message PostV2beta1AccountsAccountIdCreativesCreativeIdDealAssociations:AddRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // The account the creative belongs to.
    string accountId = 3;
    alt alt = 4;
    string bearer_token = 5;
    AddDealAssociationRequest body = 6;
    string callback = 7;
    // The ID of the creative associated with the deal.
    string creativeId = 8;
    string fields = 9;
    string key = 10;
    string oauth_token = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message PostV2beta1AccountsAccountIdCreativesCreativeIdDealAssociations:RemoveRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // The account the creative belongs to.
    string accountId = 3;
    alt alt = 4;
    string bearer_token = 5;
    RemoveDealAssociationRequest body = 6;
    string callback = 7;
    // The ID of the creative associated with the deal.
    string creativeId = 8;
    string fields = 9;
    string key = 10;
    string oauth_token = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message PostV2beta1AccountsAccountIdCreativesCreativeId:StopWatchingRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // The account of the creative to stop notifications for.
    string accountId = 3;
    alt alt = 4;
    string bearer_token = 5;
    StopWatchingCreativeRequest body = 6;
    string callback = 7;
    // The creative ID of the creative to stop notifications for.
    // Specify "-" to specify stopping account level notifications.
    string creativeId = 8;
    string fields = 9;
    string key = 10;
    string oauth_token = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message PostV2beta1AccountsAccountIdCreativesCreativeId:WatchRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // The account of the creative to watch.
    string accountId = 3;
    alt alt = 4;
    string bearer_token = 5;
    WatchCreativeRequest body = 6;
    string callback = 7;
    // The creative ID to watch for status changes.
    // Specify "-" to watch all creatives under the above account.
    // If both creative-level and account-level notifications are
    // sent, only a single notification will be sent to the
    // creative-level notification topic.
    string creativeId = 8;
    string fields = 9;
    string key = 10;
    string oauth_token = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message GetV2beta1AccountsAccountIdFilterSetsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // Account ID of the buyer.
    string accountId = 3;
    alt alt = 4;
    string bearer_token = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    // Requested page size. The server may return fewer results than requested.
    // If unspecified, the server will pick an appropriate default.
    int32 pageSize = 10;
    // A token identifying a page of results the server should return.
    // Typically, this is the value of
    // ListFilterSetsResponse.nextPageToken
    // returned from the previous call to the
    // accounts.filterSets.list
    // method.
    string pageToken = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message PostV2beta1AccountsAccountIdFilterSetsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // Account ID of the buyer.
    string accountId = 3;
    alt alt = 4;
    string bearer_token = 5;
    FilterSet body = 6;
    string callback = 7;
    string fields = 8;
    // Whether the filter set is transient, or should be persisted indefinitely.
    // By default, filter sets are not transient.
    // If transient, it will be available for at least 1 hour after creation.
    bool isTransient = 9;
    string key = 10;
    string oauth_token = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message GetV2beta1AccountsAccountIdFilterSetsFilterSetIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // Account ID of the buyer.
    string accountId = 3;
    alt alt = 4;
    string bearer_token = 5;
    string callback = 6;
    string fields = 7;
    // The ID of the filter set to get.
    string filterSetId = 8;
    string key = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message DeleteV2beta1AccountsAccountIdFilterSetsFilterSetIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // Account ID of the buyer.
    string accountId = 3;
    alt alt = 4;
    string bearer_token = 5;
    string callback = 6;
    string fields = 7;
    // The ID of the filter set to delete.
    string filterSetId = 8;
    string key = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV2beta1AccountsAccountIdFilterSetsFilterSetIdBidMetricsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // Account ID of the buyer.
    string accountId = 3;
    alt alt = 4;
    string bearer_token = 5;
    string callback = 6;
    string fields = 7;
    // The ID of the filter set to apply.
    string filterSetId = 8;
    string key = 9;
    string oauth_token = 10;
    // Requested page size. The server may return fewer results than requested.
    // If unspecified, the server will pick an appropriate default.
    int32 pageSize = 11;
    // A token identifying a page of results the server should return.
    // Typically, this is the value of
    // ListBidMetricsResponse.nextPageToken
    // returned from the previous call to the
    // accounts.filterSets.bidMetrics.list
    // method.
    string pageToken = 12;
    boolean pp = 13;
    boolean prettyPrint = 14;
    string quotaUser = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

message GetV2beta1AccountsAccountIdFilterSetsFilterSetIdBidResponseErrorsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // Account ID of the buyer.
    string accountId = 3;
    alt alt = 4;
    string bearer_token = 5;
    string callback = 6;
    string fields = 7;
    // The ID of the filter set to apply.
    string filterSetId = 8;
    string key = 9;
    string oauth_token = 10;
    // Requested page size. The server may return fewer results than requested.
    // If unspecified, the server will pick an appropriate default.
    int32 pageSize = 11;
    // A token identifying a page of results the server should return.
    // Typically, this is the value of
    // ListBidResponseErrorsResponse.nextPageToken
    // returned from the previous call to the
    // accounts.filterSets.bidResponseErrors.list
    // method.
    string pageToken = 12;
    boolean pp = 13;
    boolean prettyPrint = 14;
    string quotaUser = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

message GetV2beta1AccountsAccountIdFilterSetsFilterSetIdBidResponsesWithoutBidsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // Account ID of the buyer.
    string accountId = 3;
    alt alt = 4;
    string bearer_token = 5;
    string callback = 6;
    string fields = 7;
    // The ID of the filter set to apply.
    string filterSetId = 8;
    string key = 9;
    string oauth_token = 10;
    // Requested page size. The server may return fewer results than requested.
    // If unspecified, the server will pick an appropriate default.
    int32 pageSize = 11;
    // A token identifying a page of results the server should return.
    // Typically, this is the value of
    // ListBidResponsesWithoutBidsResponse.nextPageToken
    // returned from the previous call to the
    // accounts.filterSets.bidResponsesWithoutBids.list
    // method.
    string pageToken = 12;
    boolean pp = 13;
    boolean prettyPrint = 14;
    string quotaUser = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

message GetV2beta1AccountsAccountIdFilterSetsFilterSetIdFilteredBidRequestsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // Account ID of the buyer.
    string accountId = 3;
    alt alt = 4;
    string bearer_token = 5;
    string callback = 6;
    string fields = 7;
    // The ID of the filter set to apply.
    string filterSetId = 8;
    string key = 9;
    string oauth_token = 10;
    // Requested page size. The server may return fewer results than requested.
    // If unspecified, the server will pick an appropriate default.
    int32 pageSize = 11;
    // A token identifying a page of results the server should return.
    // Typically, this is the value of
    // ListFilteredBidRequestsResponse.nextPageToken
    // returned from the previous call to the
    // accounts.filterSets.filteredBidRequests.list
    // method.
    string pageToken = 12;
    boolean pp = 13;
    boolean prettyPrint = 14;
    string quotaUser = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

message GetV2beta1AccountsAccountIdFilterSetsFilterSetIdFilteredBidsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // Account ID of the buyer.
    string accountId = 3;
    alt alt = 4;
    string bearer_token = 5;
    string callback = 6;
    string fields = 7;
    // The ID of the filter set to apply.
    string filterSetId = 8;
    string key = 9;
    string oauth_token = 10;
    // Requested page size. The server may return fewer results than requested.
    // If unspecified, the server will pick an appropriate default.
    int32 pageSize = 11;
    // A token identifying a page of results the server should return.
    // Typically, this is the value of
    // ListFilteredBidsResponse.nextPageToken
    // returned from the previous call to the
    // accounts.filterSets.filteredBids.list
    // method.
    string pageToken = 12;
    boolean pp = 13;
    boolean prettyPrint = 14;
    string quotaUser = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

message GetV2beta1AccountsAccountIdFilterSetsFilterSetIdFilteredBidsCreativeStatusIdCreativesRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // Account ID of the buyer.
    string accountId = 3;
    alt alt = 4;
    string bearer_token = 5;
    string callback = 6;
    // The ID of the creative status for which to retrieve a breakdown by
    // creative.
    // See
    // [creative-status-codes](https://developers.google.com/ad-exchange/rtb/downloads/creative-status-codes).
    int32 creativeStatusId = 7;
    string fields = 8;
    // The ID of the filter set to apply.
    string filterSetId = 9;
    string key = 10;
    string oauth_token = 11;
    // Requested page size. The server may return fewer results than requested.
    // If unspecified, the server will pick an appropriate default.
    int32 pageSize = 12;
    // A token identifying a page of results the server should return.
    // Typically, this is the value of
    // ListCreativeStatusBreakdownByCreativeResponse.nextPageToken
    // returned from the previous call to the
    // accounts.filterSets.filteredBids.creatives.list
    // method.
    string pageToken = 13;
    boolean pp = 14;
    boolean prettyPrint = 15;
    string quotaUser = 16;
    string uploadType = 17;
    string upload_protocol = 18;
}

message GetV2beta1AccountsAccountIdFilterSetsFilterSetIdFilteredBidsCreativeStatusIdDetailsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // Account ID of the buyer.
    string accountId = 3;
    alt alt = 4;
    string bearer_token = 5;
    string callback = 6;
    // The ID of the creative status for which to retrieve a breakdown by detail.
    // See
    // [creative-status-codes](https://developers.google.com/ad-exchange/rtb/downloads/creative-status-codes).
    // Details are only available for statuses 10, 14, 15, 17, 18, 19, 86, and 87.
    int32 creativeStatusId = 7;
    string fields = 8;
    // The ID of the filter set to apply.
    string filterSetId = 9;
    string key = 10;
    string oauth_token = 11;
    // Requested page size. The server may return fewer results than requested.
    // If unspecified, the server will pick an appropriate default.
    int32 pageSize = 12;
    // A token identifying a page of results the server should return.
    // Typically, this is the value of
    // ListCreativeStatusBreakdownByDetailResponse.nextPageToken
    // returned from the previous call to the
    // accounts.filterSets.filteredBids.details.list
    // method.
    string pageToken = 13;
    boolean pp = 14;
    boolean prettyPrint = 15;
    string quotaUser = 16;
    string uploadType = 17;
    string upload_protocol = 18;
}

message GetV2beta1AccountsAccountIdFilterSetsFilterSetIdImpressionMetricsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // Account ID of the buyer.
    string accountId = 3;
    alt alt = 4;
    string bearer_token = 5;
    string callback = 6;
    string fields = 7;
    // The ID of the filter set to apply.
    string filterSetId = 8;
    string key = 9;
    string oauth_token = 10;
    // Requested page size. The server may return fewer results than requested.
    // If unspecified, the server will pick an appropriate default.
    int32 pageSize = 11;
    // A token identifying a page of results the server should return.
    // Typically, this is the value of
    // ListImpressionMetricsResponse.nextPageToken
    // returned from the previous call to the
    // accounts.filterSets.impressionMetrics.list
    // method.
    string pageToken = 12;
    boolean pp = 13;
    boolean prettyPrint = 14;
    string quotaUser = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

message GetV2beta1AccountsAccountIdFilterSetsFilterSetIdLosingBidsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // Account ID of the buyer.
    string accountId = 3;
    alt alt = 4;
    string bearer_token = 5;
    string callback = 6;
    string fields = 7;
    // The ID of the filter set to apply.
    string filterSetId = 8;
    string key = 9;
    string oauth_token = 10;
    // Requested page size. The server may return fewer results than requested.
    // If unspecified, the server will pick an appropriate default.
    int32 pageSize = 11;
    // A token identifying a page of results the server should return.
    // Typically, this is the value of
    // ListLosingBidsResponse.nextPageToken
    // returned from the previous call to the
    // accounts.filterSets.losingBids.list
    // method.
    string pageToken = 12;
    boolean pp = 13;
    boolean prettyPrint = 14;
    string quotaUser = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

message GetV2beta1AccountsAccountIdFilterSetsFilterSetIdNonBillableWinningBidsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // Account ID of the buyer.
    string accountId = 3;
    alt alt = 4;
    string bearer_token = 5;
    string callback = 6;
    string fields = 7;
    // The ID of the filter set to apply.
    string filterSetId = 8;
    string key = 9;
    string oauth_token = 10;
    // Requested page size. The server may return fewer results than requested.
    // If unspecified, the server will pick an appropriate default.
    int32 pageSize = 11;
    // A token identifying a page of results the server should return.
    // Typically, this is the value of
    // ListNonBillableWinningBidsResponse.nextPageToken
    // returned from the previous call to the
    // accounts.filterSets.nonBillableWinningBids.list
    // method.
    string pageToken = 12;
    boolean pp = 13;
    boolean prettyPrint = 14;
    string quotaUser = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

enum $.Xgafv {
    $XGAFV_1 = 0;
    $XGAFV_2 = 1;
}

message AbsoluteDateRange {
    // The end date of the range (inclusive).
    // Must be within the 30 days leading up to current date, and must be equal to
    // or after start_date.
    Date endDate = 1;
    // The start date of the range (inclusive).
    // Must be within the 30 days leading up to current date, and must be equal to
    // or before end_date.
    Date startDate = 2;
}

message AddDealAssociationRequest {
    // The association between a creative and a deal that should be added.
    CreativeDealAssociation association = 1;
}

message AppContext {
    // The app types this restriction applies to.
    repeated string appTypes = 1;
}

message AuctionContext {
    // The auction types this restriction applies to.
    repeated string auctionTypes = 1;
}

message BidMetricsRow {
    // The number of bids that Ad Exchange received from the buyer.
    MetricValue bids = 1;
    // The number of bids that were permitted to compete in the auction.
    MetricValue bidsInAuction = 2;
    // The number of bids for which the buyer was billed.
    MetricValue billedImpressions = 3;
    // The number of bids that won an impression.
    MetricValue impressionsWon = 4;
    // The number of bids for which the corresponding impression was measurable
    // for viewability (as defined by Active View).
    MetricValue measurableImpressions = 5;
    // The values of all dimensions associated with metric values in this row.
    RowDimensions rowDimensions = 6;
    // The number of bids for which the corresponding impression was viewable (as
    // defined by Active View).
    MetricValue viewableImpressions = 7;
}

message BidResponseWithoutBidsStatusRow {
    // The number of impressions for which there was a bid response with the
    // specified status.
    MetricValue impressionCount = 1;
    // The values of all dimensions associated with metric values in this row.
    RowDimensions rowDimensions = 2;
    // The status specifying why the bid responses were considered to have no
    // applicable bids.
    enum BidResponseWithoutBidsStatusRow_Statu {
        BIDRESPONSEWITHOUTBIDSSTATUSROW_STATU_STATUS_UNSPECIFIED = 0;
        BIDRESPONSEWITHOUTBIDSSTATUSROW_STATU_RESPONSES_WITHOUT_BIDS = 1;
        BIDRESPONSEWITHOUTBIDSSTATUSROW_STATU_RESPONSES_WITHOUT_BIDS_FOR_ACCOUNT = 2;
        BIDRESPONSEWITHOUTBIDSSTATUSROW_STATU_RESPONSES_WITHOUT_BIDS_FOR_DEAL = 3;
    }
    BidResponseWithoutBidsStatusRow_Statu status = 3;
}

message CalloutStatusRow {
    // The ID of the callout status.
    // See [callout-status-codes](https://developers.google.com/ad-exchange/rtb/downloads/callout-status-codes).
    int32 calloutStatusId = 1;
    // The number of impressions for which there was a bid request or bid response
    // with the specified callout status.
    MetricValue impressionCount = 2;
    // The values of all dimensions associated with metric values in this row.
    RowDimensions rowDimensions = 3;
}

message Client {
    // The globally-unique numerical ID of the client.
    // The value of this field is ignored in create and update operations.
    string clientAccountId = 1;
    // Name used to represent this client to publishers.
    // You may have multiple clients that map to the same entity,
    // but for each client the combination of `clientName` and entity
    // must be unique.
    // You can specify this field as empty.
    string clientName = 2;
    // Numerical identifier of the client entity.
    // The entity can be an advertiser, a brand, or an agency.
    // This identifier is unique among all the entities with the same type.
    // 
    // A list of all known advertisers with their identifiers is available in the
    // [advertisers.txt](https://storage.googleapis.com/adx-rtb-dictionaries/advertisers.txt)
    // file.
    // 
    // A list of all known brands with their identifiers is available in the
    // [brands.txt](https://storage.googleapis.com/adx-rtb-dictionaries/brands.txt)
    // file.
    // 
    // A list of all known agencies with their identifiers is available in the
    // [agencies.txt](https://storage.googleapis.com/adx-rtb-dictionaries/agencies.txt)
    // file.
    string entityId = 3;
    // The name of the entity. This field is automatically fetched based on
    // the type and ID.
    // The value of this field is ignored in create and update operations.
    string entityName = 4;
    // The type of the client entity: `ADVERTISER`, `BRAND`, or `AGENCY`.
    enum Client_EntityType {
        CLIENT_ENTITYTYPE_ENTITY_TYPE_UNSPECIFIED = 0;
        CLIENT_ENTITYTYPE_ADVERTISER = 1;
        CLIENT_ENTITYTYPE_BRAND = 2;
        CLIENT_ENTITYTYPE_AGENCY = 3;
    }
    Client_EntityType entityType = 5;
    // The role which is assigned to the client buyer. Each role implies a set of
    // permissions granted to the client. Must be one of `CLIENT_DEAL_VIEWER`,
    // `CLIENT_DEAL_NEGOTIATOR` or `CLIENT_DEAL_APPROVER`.
    enum Client_Role {
        CLIENT_ROLE_CLIENT_ROLE_UNSPECIFIED = 0;
        CLIENT_ROLE_CLIENT_DEAL_VIEWER = 1;
        CLIENT_ROLE_CLIENT_DEAL_NEGOTIATOR = 2;
        CLIENT_ROLE_CLIENT_DEAL_APPROVER = 3;
    }
    Client_Role role = 6;
    // The status of the client buyer.
    enum Client_Statu {
        CLIENT_STATU_CLIENT_STATUS_UNSPECIFIED = 0;
        CLIENT_STATU_DISABLED = 1;
        CLIENT_STATU_ACTIVE = 2;
    }
    Client_Statu status = 7;
    // Whether the client buyer will be visible to sellers.
    bool visibleToSeller = 8;
}

message ClientUser {
    // Numerical account ID of the client buyer
    // with which the user is associated; the
    // buyer must be a client of the current sponsor buyer.
    // The value of this field is ignored in an update operation.
    string clientAccountId = 1;
    // User's email address. The value of this field
    // is ignored in an update operation.
    string email = 2;
    // The status of the client user.
    enum ClientUser_Statu {
        CLIENTUSER_STATU_USER_STATUS_UNSPECIFIED = 0;
        CLIENTUSER_STATU_PENDING = 1;
        CLIENTUSER_STATU_ACTIVE = 2;
        CLIENTUSER_STATU_DISABLED = 3;
    }
    ClientUser_Statu status = 3;
    // The unique numerical ID of the client user
    // that has accepted an invitation.
    // The value of this field is ignored in an update operation.
    string userId = 4;
}

message ClientUserInvitation {
    // Numerical account ID of the client buyer
    // that the invited user is associated with.
    // The value of this field is ignored in create operations.
    string clientAccountId = 1;
    // The email address to which the invitation is sent. Email
    // addresses should be unique among all client users under each sponsor
    // buyer.
    string email = 2;
    // The unique numerical ID of the invitation that is sent to the user.
    // The value of this field is ignored in create operations.
    string invitationId = 3;
}

message Correction {
    // The contexts for the correction.
    repeated ServingContext contexts = 1;
    // Additional details about what was corrected.
    repeated string details = 2;
    // The type of correction that was applied to the creative.
    enum Correction_Type {
        CORRECTION_TYPE_CORRECTION_TYPE_UNSPECIFIED = 0;
        CORRECTION_TYPE_VENDOR_IDS_ADDED = 1;
        CORRECTION_TYPE_SSL_ATTRIBUTE_REMOVED = 2;
        CORRECTION_TYPE_FLASH_FREE_ATTRIBUTE_REMOVED = 3;
        CORRECTION_TYPE_FLASH_FREE_ATTRIBUTE_ADDED = 4;
        CORRECTION_TYPE_REQUIRED_ATTRIBUTE_ADDED = 5;
        CORRECTION_TYPE_REQUIRED_VENDOR_ADDED = 6;
        CORRECTION_TYPE_SSL_ATTRIBUTE_ADDED = 7;
        CORRECTION_TYPE_IN_BANNER_VIDEO_ATTRIBUTE_ADDED = 8;
        CORRECTION_TYPE_MRAID_ATTRIBUTE_ADDED = 9;
        CORRECTION_TYPE_FLASH_ATTRIBUTE_REMOVED = 10;
        CORRECTION_TYPE_VIDEO_IN_SNIPPET_ATTRIBUTE_ADDED = 11;
    }
    Correction_Type type = 3;
}

message Creative {
    // The account that this creative belongs to.
    // Can be used to filter the response of the
    // creatives.list
    // method.
    string accountId = 1;
    // The link to AdChoices destination page.
    string adChoicesDestinationUrl = 2;
    // The name of the company being advertised in the creative.
    string advertiserName = 3;
    // The agency ID for this creative.
    string agencyId = 4;
    // @OutputOnly The last update timestamp of the creative via API.
    string apiUpdateTime = 5;
    // All attributes for the ads that may be shown from this creative.
    // Can be used to filter the response of the
    // creatives.list
    // method.
    repeated string attributes = 6;
    // The set of destination URLs for the creative.
    repeated string clickThroughUrls = 7;
    // @OutputOnly Shows any corrections that were applied to this creative.
    repeated Correction corrections = 8;
    // The buyer-defined creative ID of this creative.
    // Can be used to filter the response of the
    // creatives.list
    // method.
    string creativeId = 9;
    // @OutputOnly The top-level deals status of this creative.
    // If disapproved, an entry for 'auctionType=DIRECT_DEALS' (or 'ALL') in
    // serving_restrictions will also exist. Note
    // that this may be nuanced with other contextual restrictions, in which case,
    // it may be preferable to read from serving_restrictions directly.
    // Can be used to filter the response of the
    // creatives.list
    // method.
    enum Creative_DealsStatu {
        CREATIVE_DEALSSTATU_STATUS_UNSPECIFIED = 0;
        CREATIVE_DEALSSTATU_NOT_CHECKED = 1;
        CREATIVE_DEALSSTATU_CONDITIONALLY_APPROVED = 2;
        CREATIVE_DEALSSTATU_APPROVED = 3;
        CREATIVE_DEALSSTATU_DISAPPROVED = 4;
    }
    Creative_DealsStatu dealsStatus = 10;
    // @OutputOnly Detected advertiser IDs, if any.
    repeated string detectedAdvertiserIds = 11;
    // @OutputOnly
    // The detected domains for this creative.
    repeated string detectedDomains = 12;
    // @OutputOnly
    // The detected languages for this creative. The order is arbitrary. The codes
    // are 2 or 5 characters and are documented at
    // https://developers.google.com/adwords/api/docs/appendix/languagecodes.
    repeated string detectedLanguages = 13;
    // @OutputOnly Detected product categories, if any.
    // See the ad-product-categories.txt file in the technical documentation
    // for a list of IDs.
    repeated int32 detectedProductCategories = 14;
    // @OutputOnly Detected sensitive categories, if any.
    // See the ad-sensitive-categories.txt file in the technical documentation for
    // a list of IDs. You should use these IDs along with the
    // excluded-sensitive-category field in the bid request to filter your bids.
    repeated int32 detectedSensitiveCategories = 15;
    // @OutputOnly The filtering stats for this creative.
    FilteringStats filteringStats = 16;
    // An HTML creative.
    HtmlContent html = 17;
    // The set of URLs to be called to record an impression.
    repeated string impressionTrackingUrls = 18;
    // A native creative.
    NativeContent native = 19;
    // @OutputOnly The top-level open auction status of this creative.
    // If disapproved, an entry for 'auctionType = OPEN_AUCTION' (or 'ALL') in
    // serving_restrictions will also exist. Note
    // that this may be nuanced with other contextual restrictions, in which case,
    // it may be preferable to read from serving_restrictions directly.
    // Can be used to filter the response of the
    // creatives.list
    // method.
    enum Creative_OpenAuctionStatu {
        CREATIVE_OPENAUCTIONSTATU_STATUS_UNSPECIFIED = 0;
        CREATIVE_OPENAUCTIONSTATU_NOT_CHECKED = 1;
        CREATIVE_OPENAUCTIONSTATU_CONDITIONALLY_APPROVED = 2;
        CREATIVE_OPENAUCTIONSTATU_APPROVED = 3;
        CREATIVE_OPENAUCTIONSTATU_DISAPPROVED = 4;
    }
    Creative_OpenAuctionStatu openAuctionStatus = 20;
    // All restricted categories for the ads that may be shown from this creative.
    repeated string restrictedCategories = 21;
    // @OutputOnly The granular status of this ad in specific contexts.
    // A context here relates to where something ultimately serves (for example,
    // a physical location, a platform, an HTTPS vs HTTP request, or the type
    // of auction).
    repeated ServingRestriction servingRestrictions = 22;
    // All vendor IDs for the ads that may be shown from this creative.
    // See https://storage.googleapis.com/adx-rtb-dictionaries/vendors.txt
    // for possible values.
    repeated int32 vendorIds = 23;
    // @OutputOnly The version of this creative.
    int32 version = 24;
    // A video creative.
    VideoContent video = 25;
}

message CreativeDealAssociation {
    // The account the creative belongs to.
    string accountId = 1;
    // The ID of the creative associated with the deal.
    string creativeId = 2;
    // The externalDealId for the deal associated with the creative.
    string dealsId = 3;
}

message CreativeStatusRow {
    // The number of bids with the specified status.
    MetricValue bidCount = 1;
    // The ID of the creative status.
    // See [creative-status-codes](https://developers.google.com/ad-exchange/rtb/downloads/creative-status-codes).
    int32 creativeStatusId = 2;
    // The values of all dimensions associated with metric values in this row.
    RowDimensions rowDimensions = 3;
}

message Date {
    // Day of month. Must be from 1 to 31 and valid for the year and month, or 0
    // if specifying a year/month where the day is not significant.
    int32 day = 1;
    // Month of year. Must be from 1 to 12.
    int32 month = 2;
    // Year of date. Must be from 1 to 9999, or 0 if specifying a date without
    // a year.
    int32 year = 3;
}

message Disapproval {
    // Additional details about the reason for disapproval.
    repeated string details = 1;
    // The categorized reason for disapproval.
    enum Disapproval_Reason {
        DISAPPROVAL_REASON_LENGTH_OF_IMAGE_ANIMATION = 0;
        DISAPPROVAL_REASON_BROKEN_URL = 1;
        DISAPPROVAL_REASON_MEDIA_NOT_FUNCTIONAL = 2;
        DISAPPROVAL_REASON_INVALID_FOURTH_PARTY_CALL = 3;
        DISAPPROVAL_REASON_INCORRECT_REMARKETING_DECLARATION = 4;
        DISAPPROVAL_REASON_LANDING_PAGE_ERROR = 5;
        DISAPPROVAL_REASON_AD_SIZE_DOES_NOT_MATCH_AD_SLOT = 6;
        DISAPPROVAL_REASON_NO_BORDER = 7;
        DISAPPROVAL_REASON_FOURTH_PARTY_BROWSER_COOKIES = 8;
        DISAPPROVAL_REASON_LSO_OBJECTS = 9;
        DISAPPROVAL_REASON_BLANK_CREATIVE = 10;
        DISAPPROVAL_REASON_DESTINATION_URLS_UNDECLARED = 11;
        DISAPPROVAL_REASON_PROBLEM_WITH_CLICK_MACRO = 12;
        DISAPPROVAL_REASON_INCORRECT_AD_TECHNOLOGY_DECLARATION = 13;
        DISAPPROVAL_REASON_INCORRECT_DESTINATION_URL_DECLARATION = 14;
        DISAPPROVAL_REASON_EXPANDABLE_INCORRECT_DIRECTION = 15;
        DISAPPROVAL_REASON_EXPANDABLE_DIRECTION_NOT_SUPPORTED = 16;
        DISAPPROVAL_REASON_EXPANDABLE_INVALID_VENDOR = 17;
        DISAPPROVAL_REASON_EXPANDABLE_FUNCTIONALITY = 18;
        DISAPPROVAL_REASON_VIDEO_INVALID_VENDOR = 19;
        DISAPPROVAL_REASON_VIDEO_UNSUPPORTED_LENGTH = 20;
        DISAPPROVAL_REASON_VIDEO_UNSUPPORTED_FORMAT = 21;
        DISAPPROVAL_REASON_VIDEO_FUNCTIONALITY = 22;
        DISAPPROVAL_REASON_LANDING_PAGE_DISABLED = 23;
        DISAPPROVAL_REASON_MALWARE_SUSPECTED = 24;
        DISAPPROVAL_REASON_ADULT_IMAGE_OR_VIDEO = 25;
        DISAPPROVAL_REASON_INACCURATE_AD_TEXT = 26;
        DISAPPROVAL_REASON_COUNTERFEIT_DESIGNER_GOODS = 27;
        DISAPPROVAL_REASON_POP_UP = 28;
        DISAPPROVAL_REASON_INVALID_RTB_PROTOCOL_USAGE = 29;
        DISAPPROVAL_REASON_RAW_IP_ADDRESS_IN_SNIPPET = 30;
        DISAPPROVAL_REASON_UNACCEPTABLE_CONTENT_SOFTWARE = 31;
        DISAPPROVAL_REASON_UNAUTHORIZED_COOKIE_ON_GOOGLE_DOMAIN = 32;
        DISAPPROVAL_REASON_UNDECLARED_FLASH_OBJECTS = 33;
        DISAPPROVAL_REASON_INVALID_SSL_DECLARATION = 34;
        DISAPPROVAL_REASON_DIRECT_DOWNLOAD_IN_AD = 35;
        DISAPPROVAL_REASON_MAXIMUM_DOWNLOAD_SIZE_EXCEEDED = 36;
        DISAPPROVAL_REASON_DESTINATION_URL_SITE_NOT_CRAWLABLE = 37;
        DISAPPROVAL_REASON_BAD_URL_LEGAL_DISAPPROVAL = 38;
        DISAPPROVAL_REASON_PHARMA_GAMBLING_ALCOHOL_NOT_ALLOWED = 39;
        DISAPPROVAL_REASON_DYNAMIC_DNS_AT_DESTINATION_URL = 40;
        DISAPPROVAL_REASON_POOR_IMAGE_OR_VIDEO_QUALITY = 41;
        DISAPPROVAL_REASON_UNACCEPTABLE_IMAGE_CONTENT = 42;
        DISAPPROVAL_REASON_INCORRECT_IMAGE_LAYOUT = 43;
        DISAPPROVAL_REASON_IRRELEVANT_IMAGE_OR_VIDEO = 44;
        DISAPPROVAL_REASON_DESTINATION_SITE_DOES_NOT_ALLOW_GOING_BACK = 45;
        DISAPPROVAL_REASON_MISLEADING_CLAIMS_IN_AD = 46;
        DISAPPROVAL_REASON_RESTRICTED_PRODUCTS = 47;
        DISAPPROVAL_REASON_UNACCEPTABLE_CONTENT = 48;
        DISAPPROVAL_REASON_AUTOMATED_AD_CLICKING = 49;
        DISAPPROVAL_REASON_INVALID_URL_PROTOCOL = 50;
        DISAPPROVAL_REASON_UNDECLARED_RESTRICTED_CONTENT = 51;
        DISAPPROVAL_REASON_INVALID_REMARKETING_LIST_USAGE = 52;
        DISAPPROVAL_REASON_DESTINATION_SITE_NOT_CRAWLABLE_ROBOTS_TXT = 53;
        DISAPPROVAL_REASON_CLICK_TO_DOWNLOAD_NOT_AN_APP = 54;
        DISAPPROVAL_REASON_INACCURATE_REVIEW_EXTENSION = 55;
        DISAPPROVAL_REASON_SEXUALLY_EXPLICIT_CONTENT = 56;
        DISAPPROVAL_REASON_GAINING_AN_UNFAIR_ADVANTAGE = 57;
        DISAPPROVAL_REASON_GAMING_THE_GOOGLE_NETWORK = 58;
        DISAPPROVAL_REASON_DANGEROUS_PRODUCTS_KNIVES = 59;
        DISAPPROVAL_REASON_DANGEROUS_PRODUCTS_EXPLOSIVES = 60;
        DISAPPROVAL_REASON_DANGEROUS_PRODUCTS_GUNS = 61;
        DISAPPROVAL_REASON_DANGEROUS_PRODUCTS_DRUGS = 62;
        DISAPPROVAL_REASON_DANGEROUS_PRODUCTS_TOBACCO = 63;
        DISAPPROVAL_REASON_DANGEROUS_PRODUCTS_WEAPONS = 64;
        DISAPPROVAL_REASON_UNCLEAR_OR_IRRELEVANT_AD = 65;
        DISAPPROVAL_REASON_PROFESSIONAL_STANDARDS = 66;
        DISAPPROVAL_REASON_DYSFUNCTIONAL_PROMOTION = 67;
        DISAPPROVAL_REASON_INVALID_INTEREST_BASED_AD = 68;
        DISAPPROVAL_REASON_MISUSE_OF_PERSONAL_INFORMATION = 69;
        DISAPPROVAL_REASON_OMISSION_OF_RELEVANT_INFORMATION = 70;
        DISAPPROVAL_REASON_UNAVAILABLE_PROMOTIONS = 71;
        DISAPPROVAL_REASON_MISLEADING_PROMOTIONS = 72;
        DISAPPROVAL_REASON_INAPPROPRIATE_CONTENT = 73;
        DISAPPROVAL_REASON_SENSITIVE_EVENTS = 74;
        DISAPPROVAL_REASON_SHOCKING_CONTENT = 75;
        DISAPPROVAL_REASON_ENABLING_DISHONEST_BEHAVIOR = 76;
        DISAPPROVAL_REASON_TECHNICAL_REQUIREMENTS = 77;
        DISAPPROVAL_REASON_RESTRICTED_POLITICAL_CONTENT = 78;
        DISAPPROVAL_REASON_UNSUPPORTED_CONTENT = 79;
        DISAPPROVAL_REASON_INVALID_BIDDING_METHOD = 80;
        DISAPPROVAL_REASON_VIDEO_TOO_LONG = 81;
        DISAPPROVAL_REASON_VIOLATES_JAPANESE_PHARMACY_LAW = 82;
        DISAPPROVAL_REASON_UNACCREDITED_PET_PHARMACY = 83;
        DISAPPROVAL_REASON_ABORTION = 84;
        DISAPPROVAL_REASON_CONTRACEPTIVES = 85;
        DISAPPROVAL_REASON_NEED_CERTIFICATES_TO_ADVERTISE_IN_CHINA = 86;
        DISAPPROVAL_REASON_KCDSP_REGISTRATION = 87;
        DISAPPROVAL_REASON_NOT_FAMILY_SAFE = 88;
        DISAPPROVAL_REASON_CLINICAL_TRIAL_RECRUITMENT = 89;
        DISAPPROVAL_REASON_MAXIMUM_NUMBER_OF_HTTP_CALLS_EXCEEDED = 90;
        DISAPPROVAL_REASON_MAXIMUM_NUMBER_OF_COOKIES_EXCEEDED = 91;
        DISAPPROVAL_REASON_PERSONAL_LOANS = 92;
        DISAPPROVAL_REASON_UNSUPPORTED_FLASH_CONTENT = 93;
    }
    Disapproval_Reason reason = 2;
}

message Empty {
}

message FilterSet {
    // An absolute date range, defined by a start date and an end date.
    // Interpreted relative to Pacific time zone.
    AbsoluteDateRange absoluteDateRange = 1;
    // The ID of the buyer account on which to filter; optional.
    string buyerAccountId = 2;
    // The ID of the creative on which to filter; optional.
    string creativeId = 3;
    // The ID of the deal on which to filter; optional.
    string dealId = 4;
    // The environment on which to filter; optional.
    enum FilterSet_Environment {
        FILTERSET_ENVIRONMENT_ENVIRONMENT_UNSPECIFIED = 0;
        FILTERSET_ENVIRONMENT_WEB = 1;
        FILTERSET_ENVIRONMENT_APP = 2;
    }
    FilterSet_Environment environment = 5;
    // The ID of the filter set; unique within the account of the filter set
    // owner.
    // The value of this field is ignored in create operations.
    string filterSetId = 6;
    // The format on which to filter; optional.
    enum FilterSet_Format {
        FILTERSET_FORMAT_FORMAT_UNSPECIFIED = 0;
        FILTERSET_FORMAT_DISPLAY = 1;
        FILTERSET_FORMAT_VIDEO = 2;
    }
    FilterSet_Format format = 7;
    // The account ID of the buyer who owns this filter set.
    // The value of this field is ignored in create operations.
    string ownerAccountId = 8;
    // The list of platforms on which to filter; may be empty. The filters
    // represented by multiple platforms are ORed together (i.e. if non-empty,
    // results must match any one of the platforms).
    repeated string platforms = 9;
    // An open-ended realtime time range, defined by the aggregation start
    // timestamp.
    RealtimeTimeRange realtimeTimeRange = 10;
    // A relative date range, defined by an offset from today and a duration.
    // Interpreted relative to Pacific time zone.
    RelativeDateRange relativeDateRange = 11;
    // The list of IDs of the seller (publisher) networks on which to filter;
    // may be empty. The filters represented by multiple seller network IDs are
    // ORed together (i.e. if non-empty, results must match any one of the
    // publisher networks).
    // See [seller-network-ids](https://developers.google.com/ad-exchange/rtb/downloads/seller-network-ids)
    // file for the set of existing seller network IDs.
    repeated int32 sellerNetworkIds = 12;
    // The granularity of time intervals if a time series breakdown is desired;
    // optional.
    enum FilterSet_TimeSeriesGranularity {
        FILTERSET_TIMESERIESGRANULARITY_TIME_SERIES_GRANULARITY_UNSPECIFIED = 0;
        FILTERSET_TIMESERIESGRANULARITY_HOURLY = 1;
        FILTERSET_TIMESERIESGRANULARITY_DAILY = 2;
    }
    FilterSet_TimeSeriesGranularity timeSeriesGranularity = 13;
}

message FilteredBidCreativeRow {
    // The number of bids with the specified creative.
    MetricValue bidCount = 1;
    // The ID of the creative.
    string creativeId = 2;
    // The values of all dimensions associated with metric values in this row.
    RowDimensions rowDimensions = 3;
}

message FilteredBidDetailRow {
    // The number of bids with the specified detail.
    MetricValue bidCount = 1;
    // The ID of the detail. The associated value can be looked up in the
    // dictionary file corresponding to the DetailType in the response message.
    int32 detailId = 2;
    // The values of all dimensions associated with metric values in this row.
    RowDimensions rowDimensions = 3;
}

message FilteringStats {
    // The day during which the data was collected.
    // The data is collected from 00:00:00 to 23:59:59 PT.
    // During switches from PST to PDT and back, the day may
    // contain 23 or 25 hours of data instead of the usual 24.
    Date date = 1;
    // The set of filtering reasons for this date.
    repeated Reason reasons = 2;
}

message HtmlContent {
    // The height of the HTML snippet in pixels.
    int32 height = 1;
    // The HTML snippet that displays the ad when inserted in the web page.
    string snippet = 2;
    // The width of the HTML snippet in pixels.
    int32 width = 3;
}

message Image {
    // Image height in pixels.
    int32 height = 1;
    // The URL of the image.
    string url = 2;
    // Image width in pixels.
    int32 width = 3;
}

message ImpressionMetricsRow {
    // The number of impressions available to the buyer on Ad Exchange.
    // In some cases this value may be unavailable.
    MetricValue availableImpressions = 1;
    // The number of impressions for which Ad Exchange sent the buyer a bid
    // request.
    MetricValue bidRequests = 2;
    // The number of impressions that match the buyer's inventory pretargeting.
    MetricValue inventoryMatches = 3;
    // The number of impressions for which Ad Exchange received a response from
    // the buyer that contained at least one applicable bid.
    MetricValue responsesWithBids = 4;
    // The values of all dimensions associated with metric values in this row.
    RowDimensions rowDimensions = 5;
    // The number of impressions for which the buyer successfully sent a response
    // to Ad Exchange.
    MetricValue successfulResponses = 6;
}

message ListBidMetricsResponse {
    // List of rows, each containing a set of bid metrics.
    repeated BidMetricsRow bidMetricsRows = 1;
    // A token to retrieve the next page of results.
    // Pass this value in the
    // ListBidMetricsRequest.pageToken
    // field in the subsequent call to the
    // accounts.filterSets.bidMetrics.list
    // method to retrieve the next page of results.
    string nextPageToken = 2;
}

message ListBidResponseErrorsResponse {
    // List of rows, with counts of bid responses aggregated by callout status.
    repeated CalloutStatusRow calloutStatusRows = 1;
    // A token to retrieve the next page of results.
    // Pass this value in the
    // ListBidResponseErrorsRequest.pageToken
    // field in the subsequent call to the
    // accounts.filterSets.bidResponseErrors.list
    // method to retrieve the next page of results.
    string nextPageToken = 2;
}

message ListBidResponsesWithoutBidsResponse {
    // List of rows, with counts of bid responses without bids aggregated by
    // status.
    repeated BidResponseWithoutBidsStatusRow bidResponseWithoutBidsStatusRows = 1;
    // A token to retrieve the next page of results.
    // Pass this value in the
    // ListBidResponsesWithoutBidsRequest.pageToken
    // field in the subsequent call to the
    // accounts.filterSets.bidResponsesWithoutBids.list
    // method to retrieve the next page of results.
    string nextPageToken = 2;
}

message ListClientUserInvitationsResponse {
    // The returned list of client users.
    repeated ClientUserInvitation invitations = 1;
    // A token to retrieve the next page of results.
    // Pass this value in the
    // ListClientUserInvitationsRequest.pageToken
    // field in the subsequent call to the
    // clients.invitations.list
    // method to retrieve the next
    // page of results.
    string nextPageToken = 2;
}

message ListClientUsersResponse {
    // A token to retrieve the next page of results.
    // Pass this value in the
    // ListClientUsersRequest.pageToken
    // field in the subsequent call to the
    // clients.invitations.list
    // method to retrieve the next
    // page of results.
    string nextPageToken = 1;
    // The returned list of client users.
    repeated ClientUser users = 2;
}

message ListClientsResponse {
    // The returned list of clients.
    repeated Client clients = 1;
    // A token to retrieve the next page of results.
    // Pass this value in the
    // ListClientsRequest.pageToken
    // field in the subsequent call to the
    // accounts.clients.list method
    // to retrieve the next page of results.
    string nextPageToken = 2;
}

message ListCreativeStatusBreakdownByCreativeResponse {
    // List of rows, with counts of bids with a given creative status aggregated
    // by creative.
    repeated FilteredBidCreativeRow filteredBidCreativeRows = 1;
    // A token to retrieve the next page of results.
    // Pass this value in the
    // ListCreativeStatusBreakdownByCreativeRequest.pageToken
    // field in the subsequent call to the
    // accounts.filterSets.filteredBids.creatives.list
    // method to retrieve the next page of results.
    string nextPageToken = 2;
}

message ListCreativeStatusBreakdownByDetailResponse {
    // The type of detail that the detail IDs represent.
    enum ListCreativeStatusBreakdownByDetailResponse_DetailType {
        LISTCREATIVESTATUSBREAKDOWNBYDETAILRESPONSE_DETAILTYPE_DETAIL_TYPE_UNSPECIFIED = 0;
        LISTCREATIVESTATUSBREAKDOWNBYDETAILRESPONSE_DETAILTYPE_CREATIVE_ATTRIBUTE = 1;
        LISTCREATIVESTATUSBREAKDOWNBYDETAILRESPONSE_DETAILTYPE_VENDOR = 2;
        LISTCREATIVESTATUSBREAKDOWNBYDETAILRESPONSE_DETAILTYPE_SENSITIVE_CATEGORY = 3;
        LISTCREATIVESTATUSBREAKDOWNBYDETAILRESPONSE_DETAILTYPE_PRODUCT_CATEGORY = 4;
        LISTCREATIVESTATUSBREAKDOWNBYDETAILRESPONSE_DETAILTYPE_DISAPPROVAL_REASON = 5;
    }
    ListCreativeStatusBreakdownByDetailResponse_DetailType detailType = 1;
    // List of rows, with counts of bids with a given creative status aggregated
    // by detail.
    repeated FilteredBidDetailRow filteredBidDetailRows = 2;
    // A token to retrieve the next page of results.
    // Pass this value in the
    // ListCreativeStatusBreakdownByDetailRequest.pageToken
    // field in the subsequent call to the
    // accounts.filterSets.filteredBids.details.list
    // method to retrieve the next page of results.
    string nextPageToken = 3;
}

message ListCreativesResponse {
    // The list of creatives.
    repeated Creative creatives = 1;
    // A token to retrieve the next page of results.
    // Pass this value in the
    // ListCreativesRequest.page_token
    // field in the subsequent call to `ListCreatives` method to retrieve the next
    // page of results.
    string nextPageToken = 2;
}

message ListDealAssociationsResponse {
    // The list of associations.
    repeated CreativeDealAssociation associations = 1;
    // A token to retrieve the next page of results.
    // Pass this value in the
    // ListDealAssociationsRequest.page_token
    // field in the subsequent call to 'ListDealAssociation' method to retrieve
    // the next page of results.
    string nextPageToken = 2;
}

message ListFilterSetsResponse {
    // The filter sets belonging to the buyer.
    repeated FilterSet filterSets = 1;
    // A token to retrieve the next page of results.
    // Pass this value in the
    // ListFilterSetsRequest.pageToken
    // field in the subsequent call to the
    // accounts.filterSets.list
    // method to retrieve the next page of results.
    string nextPageToken = 2;
}

message ListFilteredBidRequestsResponse {
    // List of rows, with counts of filtered bid requests aggregated by callout
    // status.
    repeated CalloutStatusRow calloutStatusRows = 1;
    // A token to retrieve the next page of results.
    // Pass this value in the
    // ListFilteredBidRequestsRequest.pageToken
    // field in the subsequent call to the
    // accounts.filterSets.filteredBidRequests.list
    // method to retrieve the next page of results.
    string nextPageToken = 2;
}

message ListFilteredBidsResponse {
    // List of rows, with counts of filtered bids aggregated by filtering reason
    // (i.e. creative status).
    repeated CreativeStatusRow creativeStatusRows = 1;
    // A token to retrieve the next page of results.
    // Pass this value in the
    // ListFilteredBidsRequest.pageToken
    // field in the subsequent call to the
    // accounts.filterSets.filteredBids.list
    // method to retrieve the next page of results.
    string nextPageToken = 2;
}

message ListImpressionMetricsResponse {
    // List of rows, each containing a set of impression metrics.
    repeated ImpressionMetricsRow impressionMetricsRows = 1;
    // A token to retrieve the next page of results.
    // Pass this value in the
    // ListImpressionMetricsRequest.pageToken
    // field in the subsequent call to the
    // accounts.filterSets.impressionMetrics.list
    // method to retrieve the next page of results.
    string nextPageToken = 2;
}

message ListLosingBidsResponse {
    // List of rows, with counts of losing bids aggregated by loss reason (i.e.
    // creative status).
    repeated CreativeStatusRow creativeStatusRows = 1;
    // A token to retrieve the next page of results.
    // Pass this value in the
    // ListLosingBidsRequest.pageToken
    // field in the subsequent call to the
    // accounts.filterSets.losingBids.list
    // method to retrieve the next page of results.
    string nextPageToken = 2;
}

message ListNonBillableWinningBidsResponse {
    // A token to retrieve the next page of results.
    // Pass this value in the
    // ListNonBillableWinningBidsRequest.pageToken
    // field in the subsequent call to the
    // accounts.filterSets.nonBillableWinningBids.list
    // method to retrieve the next page of results.
    string nextPageToken = 1;
    // List of rows, with counts of bids not billed aggregated by reason.
    repeated NonBillableWinningBidStatusRow nonBillableWinningBidStatusRows = 2;
}

message LocationContext {
    // IDs representing the geo location for this context.
    // Please refer to the
    // [geo-table.csv](https://storage.googleapis.com/adx-rtb-dictionaries/geo-table.csv)
    // file for different geo criteria IDs.
    repeated int32 geoCriteriaIds = 1;
}

message MetricValue {
    // The expected value of the metric.
    string value = 1;
    // The variance (i.e. square of the standard deviation) of the metric value.
    // If value is exact, variance is 0.
    // Can be used to calculate margin of error as a percentage of value, using
    // the following formula, where Z is the standard constant that depends on the
    // desired size of the confidence interval (e.g. for 90% confidence interval,
    // use Z = 1.645):
    // 
    //   marginOfError = 100 * Z * sqrt(variance) / value
    string variance = 2;
}

message NativeContent {
    // The name of the advertiser or sponsor, to be displayed in the ad creative.
    string advertiserName = 1;
    // The app icon, for app download ads.
    Image appIcon = 2;
    // A long description of the ad.
    string body = 3;
    // A label for the button that the user is supposed to click.
    string callToAction = 4;
    // The URL that the browser/SDK will load when the user clicks the ad.
    string clickLinkUrl = 5;
    // The URL to use for click tracking.
    string clickTrackingUrl = 6;
    // A short title for the ad.
    string headline = 7;
    // A large image.
    Image image = 8;
    // A smaller image, for the advertiser's logo.
    Image logo = 9;
    // The price of the promoted app including currency info.
    string priceDisplayText = 10;
    // The app rating in the app store. Must be in the range [0-5].
    double starRating = 11;
    // The URL to the app store to purchase/download the promoted app.
    string storeUrl = 12;
    // The URL to fetch a native video ad.
    string videoUrl = 13;
}

message NonBillableWinningBidStatusRow {
    // The number of bids with the specified status.
    MetricValue bidCount = 1;
    // The values of all dimensions associated with metric values in this row.
    RowDimensions rowDimensions = 2;
    // The status specifying why the winning bids were not billed.
    enum NonBillableWinningBidStatusRow_Statu {
        NONBILLABLEWINNINGBIDSTATUSROW_STATU_STATUS_UNSPECIFIED = 0;
        NONBILLABLEWINNINGBIDSTATUSROW_STATU_AD_NOT_RENDERED = 1;
        NONBILLABLEWINNINGBIDSTATUSROW_STATU_INVALID_IMPRESSION = 2;
    }
    NonBillableWinningBidStatusRow_Statu status = 3;
}

message PlatformContext {
    // The platforms this restriction applies to.
    repeated string platforms = 1;
}

message RealtimeTimeRange {
    // The start timestamp of the real-time RTB metrics aggregation.
    string startTimestamp = 1;
}

message Reason {
    // The number of times the creative was filtered for the status. The
    // count is aggregated across all publishers on the exchange.
    string count = 1;
    // The filtering status code. Please refer to the
    // [creative-status-codes.txt](https://storage.googleapis.com/adx-rtb-dictionaries/creative-status-codes.txt)
    // file for different statuses.
    int32 status = 2;
}

message RelativeDateRange {
    // The number of days in the requested date range. E.g. for a range spanning
    // today, 1. For a range spanning the last 7 days, 7.
    int32 durationDays = 1;
    // The end date of the filter set, specified as the number of days before
    // today. E.g. for a range where the last date is today, 0.
    int32 offsetDays = 2;
}

message RemoveDealAssociationRequest {
    // The association between a creative and a deal that should be removed.
    CreativeDealAssociation association = 1;
}

message RowDimensions {
    // The time interval that this row represents.
    TimeInterval timeInterval = 1;
}

message SecurityContext {
    // The security types in this context.
    repeated string securities = 1;
}

message ServingContext {
    // Matches all contexts.
    enum ServingContext_All {
        SERVINGCONTEXT_ALL_SIMPLE_CONTEXT = 0;
    }
    ServingContext_All all = 1;
    // Matches impressions for a particular app type.
    AppContext appType = 2;
    // Matches impressions for a particular auction type.
    AuctionContext auctionType = 3;
    // Matches impressions coming from users *or* publishers in a specific
    // location.
    LocationContext location = 4;
    // Matches impressions coming from a particular platform.
    PlatformContext platform = 5;
    // Matches impressions for a particular security type.
    SecurityContext securityType = 6;
}

message ServingRestriction {
    // The contexts for the restriction.
    repeated ServingContext contexts = 1;
    // Any disapprovals bound to this restriction.
    // Only present if status=DISAPPROVED.
    // Can be used to filter the response of the
    // creatives.list
    // method.
    repeated Disapproval disapprovalReasons = 2;
    // The status of the creative in this context (for example, it has been
    // explicitly disapproved or is pending review).
    enum ServingRestriction_Statu {
        SERVINGRESTRICTION_STATU_STATUS_UNSPECIFIED = 0;
        SERVINGRESTRICTION_STATU_DISAPPROVAL = 1;
        SERVINGRESTRICTION_STATU_PENDING_REVIEW = 2;
    }
    ServingRestriction_Statu status = 3;
}

message StopWatchingCreativeRequest {
}

message TimeInterval {
    // The timestamp marking the end of the range (exclusive) for which data is
    // included.
    string endTime = 1;
    // The timestamp marking the start of the range (inclusive) for which data is
    // included.
    string startTime = 2;
}

message VideoContent {
    // The URL to fetch a video ad.
    string videoUrl = 1;
}

message WatchCreativeRequest {
    // The Pub/Sub topic to publish notifications to.
    // This topic must already exist and must give permission to
    // ad-exchange-buyside-reports@google.com to write to the topic.
    // This should be the full resource name in
    // "projects/{project_id}/topics/{topic_id}" format.
    string topic = 1;
}

enum Alt {
    JSON = 0;
    MEDIA = 1;
    PROTO = 2;
}

service AdExchangeBuyerAPIIIService {
    // Lists all the clients for the current sponsor buyer.
    rpc GetV2beta1AccountsAccountIdClients(GetV2beta1AccountsAccountIdClientsRequest) returns (ListClientsResponse) {
      option (google.api.http) = {
        get: "//v2beta1/accounts/{accountId}/clients"
      };
    }
    // Creates a new client buyer.
    rpc PostV2beta1AccountsAccountIdClients(PostV2beta1AccountsAccountIdClientsRequest) returns (Client) {
      option (google.api.http) = {
        post: "//v2beta1/accounts/{accountId}/clients"
        body: "body"
      };
    }
    // Gets a client buyer with a given client account ID.
    rpc GetV2beta1AccountsAccountIdClientsClientAccountId(GetV2beta1AccountsAccountIdClientsClientAccountIdRequest) returns (Client) {
      option (google.api.http) = {
        get: "//v2beta1/accounts/{accountId}/clients/{clientAccountId}"
      };
    }
    // Updates an existing client buyer.
    rpc PutV2beta1AccountsAccountIdClientsClientAccountId(PutV2beta1AccountsAccountIdClientsClientAccountIdRequest) returns (Client) {
      option (google.api.http) = {
        put: "//v2beta1/accounts/{accountId}/clients/{clientAccountId}"
        body: "body"
      };
    }
    // Lists all the client users invitations for a client
    // with a given account ID.
    rpc GetV2beta1AccountsAccountIdClientsClientAccountIdInvitations(GetV2beta1AccountsAccountIdClientsClientAccountIdInvitationsRequest) returns (ListClientUserInvitationsResponse) {
      option (google.api.http) = {
        get: "//v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations"
      };
    }
    // Creates and sends out an email invitation to access
    // an Ad Exchange client buyer account.
    rpc PostV2beta1AccountsAccountIdClientsClientAccountIdInvitations(PostV2beta1AccountsAccountIdClientsClientAccountIdInvitationsRequest) returns (ClientUserInvitation) {
      option (google.api.http) = {
        post: "//v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations"
        body: "body"
      };
    }
    // Retrieves an existing client user invitation.
    rpc GetV2beta1AccountsAccountIdClientsClientAccountIdInvitationsInvitationId(GetV2beta1AccountsAccountIdClientsClientAccountIdInvitationsInvitationIdRequest) returns (ClientUserInvitation) {
      option (google.api.http) = {
        get: "//v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations/{invitationId}"
      };
    }
    // Lists all the known client users for a specified
    // sponsor buyer account ID.
    rpc GetV2beta1AccountsAccountIdClientsClientAccountIdUsers(GetV2beta1AccountsAccountIdClientsClientAccountIdUsersRequest) returns (ListClientUsersResponse) {
      option (google.api.http) = {
        get: "//v2beta1/accounts/{accountId}/clients/{clientAccountId}/users"
      };
    }
    // Retrieves an existing client user.
    rpc GetV2beta1AccountsAccountIdClientsClientAccountIdUsersUserId(GetV2beta1AccountsAccountIdClientsClientAccountIdUsersUserIdRequest) returns (ClientUser) {
      option (google.api.http) = {
        get: "//v2beta1/accounts/{accountId}/clients/{clientAccountId}/users/{userId}"
      };
    }
    // Updates an existing client user.
    // Only the user status can be changed on update.
    rpc PutV2beta1AccountsAccountIdClientsClientAccountIdUsersUserId(PutV2beta1AccountsAccountIdClientsClientAccountIdUsersUserIdRequest) returns (ClientUser) {
      option (google.api.http) = {
        put: "//v2beta1/accounts/{accountId}/clients/{clientAccountId}/users/{userId}"
        body: "body"
      };
    }
    // Lists creatives.
    rpc GetV2beta1AccountsAccountIdCreatives(GetV2beta1AccountsAccountIdCreativesRequest) returns (ListCreativesResponse) {
      option (google.api.http) = {
        get: "//v2beta1/accounts/{accountId}/creatives"
      };
    }
    // Creates a creative.
    rpc PostV2beta1AccountsAccountIdCreatives(PostV2beta1AccountsAccountIdCreativesRequest) returns (Creative) {
      option (google.api.http) = {
        post: "//v2beta1/accounts/{accountId}/creatives"
        body: "body"
      };
    }
    // Gets a creative.
    rpc GetV2beta1AccountsAccountIdCreativesCreativeId(GetV2beta1AccountsAccountIdCreativesCreativeIdRequest) returns (Creative) {
      option (google.api.http) = {
        get: "//v2beta1/accounts/{accountId}/creatives/{creativeId}"
      };
    }
    // Updates a creative.
    rpc PutV2beta1AccountsAccountIdCreativesCreativeId(PutV2beta1AccountsAccountIdCreativesCreativeIdRequest) returns (Creative) {
      option (google.api.http) = {
        put: "//v2beta1/accounts/{accountId}/creatives/{creativeId}"
        body: "body"
      };
    }
    // List all creative-deal associations.
    rpc GetV2beta1AccountsAccountIdCreativesCreativeIdDealAssociations(GetV2beta1AccountsAccountIdCreativesCreativeIdDealAssociationsRequest) returns (ListDealAssociationsResponse) {
      option (google.api.http) = {
        get: "//v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations"
      };
    }
    // Associate an existing deal with a creative.
    rpc PostV2beta1AccountsAccountIdCreativesCreativeIdDealAssociations:Add(PostV2beta1AccountsAccountIdCreativesCreativeIdDealAssociations:AddRequest) returns (Empty) {
      option (google.api.http) = {
        post: "//v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations:add"
        body: "body"
      };
    }
    // Remove the association between a deal and a creative.
    rpc PostV2beta1AccountsAccountIdCreativesCreativeIdDealAssociations:Remove(PostV2beta1AccountsAccountIdCreativesCreativeIdDealAssociations:RemoveRequest) returns (Empty) {
      option (google.api.http) = {
        post: "//v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations:remove"
        body: "body"
      };
    }
    // Stops watching a creative. Will stop push notifications being sent to the
    // topics when the creative changes status.
    rpc PostV2beta1AccountsAccountIdCreativesCreativeId:StopWatching(PostV2beta1AccountsAccountIdCreativesCreativeId:StopWatchingRequest) returns (Empty) {
      option (google.api.http) = {
        post: "//v2beta1/accounts/{accountId}/creatives/{creativeId}:stopWatching"
        body: "body"
      };
    }
    // Watches a creative. Will result in push notifications being sent to the
    // topic when the creative changes status.
    rpc PostV2beta1AccountsAccountIdCreativesCreativeId:Watch(PostV2beta1AccountsAccountIdCreativesCreativeId:WatchRequest) returns (Empty) {
      option (google.api.http) = {
        post: "//v2beta1/accounts/{accountId}/creatives/{creativeId}:watch"
        body: "body"
      };
    }
    // Lists all filter sets for the account with the given account ID.
    rpc GetV2beta1AccountsAccountIdFilterSets(GetV2beta1AccountsAccountIdFilterSetsRequest) returns (ListFilterSetsResponse) {
      option (google.api.http) = {
        get: "//v2beta1/accounts/{accountId}/filterSets"
      };
    }
    // Creates the specified filter set for the account with the given account ID.
    rpc PostV2beta1AccountsAccountIdFilterSets(PostV2beta1AccountsAccountIdFilterSetsRequest) returns (FilterSet) {
      option (google.api.http) = {
        post: "//v2beta1/accounts/{accountId}/filterSets"
        body: "body"
      };
    }
    // Retrieves the requested filter set for the account with the given account
    // ID.
    rpc GetV2beta1AccountsAccountIdFilterSetsFilterSetId(GetV2beta1AccountsAccountIdFilterSetsFilterSetIdRequest) returns (FilterSet) {
      option (google.api.http) = {
        get: "//v2beta1/accounts/{accountId}/filterSets/{filterSetId}"
      };
    }
    // Deletes the requested filter set from the account with the given account
    // ID.
    rpc DeleteV2beta1AccountsAccountIdFilterSetsFilterSetId(DeleteV2beta1AccountsAccountIdFilterSetsFilterSetIdRequest) returns (Empty) {
      option (google.api.http) = {
        delete: "//v2beta1/accounts/{accountId}/filterSets/{filterSetId}"
      };
    }
    // Lists all metrics that are measured in terms of number of bids.
    rpc GetV2beta1AccountsAccountIdFilterSetsFilterSetIdBidMetrics(GetV2beta1AccountsAccountIdFilterSetsFilterSetIdBidMetricsRequest) returns (ListBidMetricsResponse) {
      option (google.api.http) = {
        get: "//v2beta1/accounts/{accountId}/filterSets/{filterSetId}/bidMetrics"
      };
    }
    // List all errors that occurred in bid responses, with the number of bid
    // responses affected for each reason.
    rpc GetV2beta1AccountsAccountIdFilterSetsFilterSetIdBidResponseErrors(GetV2beta1AccountsAccountIdFilterSetsFilterSetIdBidResponseErrorsRequest) returns (ListBidResponseErrorsResponse) {
      option (google.api.http) = {
        get: "//v2beta1/accounts/{accountId}/filterSets/{filterSetId}/bidResponseErrors"
      };
    }
    // List all reasons for which bid responses were considered to have no
    // applicable bids, with the number of bid responses affected for each reason.
    rpc GetV2beta1AccountsAccountIdFilterSetsFilterSetIdBidResponsesWithoutBids(GetV2beta1AccountsAccountIdFilterSetsFilterSetIdBidResponsesWithoutBidsRequest) returns (ListBidResponsesWithoutBidsResponse) {
      option (google.api.http) = {
        get: "//v2beta1/accounts/{accountId}/filterSets/{filterSetId}/bidResponsesWithoutBids"
      };
    }
    // List all reasons that caused a bid request not to be sent for an
    // impression, with the number of bid requests not sent for each reason.
    rpc GetV2beta1AccountsAccountIdFilterSetsFilterSetIdFilteredBidRequests(GetV2beta1AccountsAccountIdFilterSetsFilterSetIdFilteredBidRequestsRequest) returns (ListFilteredBidRequestsResponse) {
      option (google.api.http) = {
        get: "//v2beta1/accounts/{accountId}/filterSets/{filterSetId}/filteredBidRequests"
      };
    }
    // List all reasons for which bids were filtered, with the number of bids
    // filtered for each reason.
    rpc GetV2beta1AccountsAccountIdFilterSetsFilterSetIdFilteredBids(GetV2beta1AccountsAccountIdFilterSetsFilterSetIdFilteredBidsRequest) returns (ListFilteredBidsResponse) {
      option (google.api.http) = {
        get: "//v2beta1/accounts/{accountId}/filterSets/{filterSetId}/filteredBids"
      };
    }
    // List all creatives associated with a specific reason for which bids were
    // filtered, with the number of bids filtered for each creative.
    rpc GetV2beta1AccountsAccountIdFilterSetsFilterSetIdFilteredBidsCreativeStatusIdCreatives(GetV2beta1AccountsAccountIdFilterSetsFilterSetIdFilteredBidsCreativeStatusIdCreativesRequest) returns (ListCreativeStatusBreakdownByCreativeResponse) {
      option (google.api.http) = {
        get: "//v2beta1/accounts/{accountId}/filterSets/{filterSetId}/filteredBids/{creativeStatusId}/creatives"
      };
    }
    // List all details associated with a specific reason for which bids were
    // filtered, with the number of bids filtered for each detail.
    rpc GetV2beta1AccountsAccountIdFilterSetsFilterSetIdFilteredBidsCreativeStatusIdDetails(GetV2beta1AccountsAccountIdFilterSetsFilterSetIdFilteredBidsCreativeStatusIdDetailsRequest) returns (ListCreativeStatusBreakdownByDetailResponse) {
      option (google.api.http) = {
        get: "//v2beta1/accounts/{accountId}/filterSets/{filterSetId}/filteredBids/{creativeStatusId}/details"
      };
    }
    // Lists all metrics that are measured in terms of number of impressions.
    rpc GetV2beta1AccountsAccountIdFilterSetsFilterSetIdImpressionMetrics(GetV2beta1AccountsAccountIdFilterSetsFilterSetIdImpressionMetricsRequest) returns (ListImpressionMetricsResponse) {
      option (google.api.http) = {
        get: "//v2beta1/accounts/{accountId}/filterSets/{filterSetId}/impressionMetrics"
      };
    }
    // List all reasons for which bids lost in the auction, with the number of
    // bids that lost for each reason.
    rpc GetV2beta1AccountsAccountIdFilterSetsFilterSetIdLosingBids(GetV2beta1AccountsAccountIdFilterSetsFilterSetIdLosingBidsRequest) returns (ListLosingBidsResponse) {
      option (google.api.http) = {
        get: "//v2beta1/accounts/{accountId}/filterSets/{filterSetId}/losingBids"
      };
    }
    // List all reasons for which winning bids were not billable, with the number
    // of bids not billed for each reason.
    rpc GetV2beta1AccountsAccountIdFilterSetsFilterSetIdNonBillableWinningBids(GetV2beta1AccountsAccountIdFilterSetsFilterSetIdNonBillableWinningBidsRequest) returns (ListNonBillableWinningBidsResponse) {
      option (google.api.http) = {
        get: "//v2beta1/accounts/{accountId}/filterSets/{filterSetId}/nonBillableWinningBids"
      };
    }
}

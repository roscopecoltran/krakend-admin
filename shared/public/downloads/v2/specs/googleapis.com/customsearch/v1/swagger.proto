syntax = "proto3";

import "google/api/annotations.proto";

package customsearch;

message GetV1Request {
    alt alt = 1;
    // Turns off the translation between zh-CN and zh-TW.
    string c2coff = 2;
    // Country restrict(s).
    string cr = 3;
    // The custom search engine ID to scope this search query
    string cx = 4;
    // Specifies all search results are from a time period
    string dateRestrict = 5;
    // Identifies a phrase that all documents in the search results must contain
    string exactTerms = 6;
    // Identifies a word or phrase that should not appear in any documents in the search results
    string excludeTerms = 7;
    string fields = 8;
    // Returns images of a specified type. Some of the allowed values are: bmp, gif, png, jpg, svg, pdf, ...
    string fileType = 9;
    // Controls turning on or off the duplicate content filter.
    enum GetV1Request_Filter {
        GETV1REQUEST_FILTER_0 = 0;
        GETV1REQUEST_FILTER_1 = 1;
    }
    GetV1Request_Filter filter = 10;
    // Geolocation of end user.
    string gl = 11;
    // The local Google domain to use to perform the search.
    string googlehost = 12;
    // Creates a range in form as_nlo value..as_nhi value and attempts to append it to query
    string highRange = 13;
    // Sets the user interface language.
    string hl = 14;
    // Appends the extra query terms to the query.
    string hq = 15;
    // Returns black and white, grayscale, or color images: mono, gray, and color.
    enum GetV1Request_ImgColorType {
        GETV1REQUEST_IMGCOLORTYPE_COLOR = 0;
        GETV1REQUEST_IMGCOLORTYPE_GRAY = 1;
        GETV1REQUEST_IMGCOLORTYPE_MONO = 2;
    }
    GetV1Request_ImgColorType imgColorType = 16;
    // Returns images of a specific dominant color: yellow, green, teal, blue, purple, pink, white, gray, black and brown.
    enum GetV1Request_ImgDominantColor {
        GETV1REQUEST_IMGDOMINANTCOLOR_BLACK = 0;
        GETV1REQUEST_IMGDOMINANTCOLOR_BLUE = 1;
        GETV1REQUEST_IMGDOMINANTCOLOR_BROWN = 2;
        GETV1REQUEST_IMGDOMINANTCOLOR_GRAY = 3;
        GETV1REQUEST_IMGDOMINANTCOLOR_GREEN = 4;
        GETV1REQUEST_IMGDOMINANTCOLOR_PINK = 5;
        GETV1REQUEST_IMGDOMINANTCOLOR_PURPLE = 6;
        GETV1REQUEST_IMGDOMINANTCOLOR_TEAL = 7;
        GETV1REQUEST_IMGDOMINANTCOLOR_WHITE = 8;
        GETV1REQUEST_IMGDOMINANTCOLOR_YELLOW = 9;
    }
    GetV1Request_ImgDominantColor imgDominantColor = 17;
    // Returns images of a specified size, where size can be one of: icon, small, medium, large, xlarge, xxlarge, and huge.
    enum GetV1Request_ImgSize {
        GETV1REQUEST_IMGSIZE_HUGE = 0;
        GETV1REQUEST_IMGSIZE_ICON = 1;
        GETV1REQUEST_IMGSIZE_LARGE = 2;
        GETV1REQUEST_IMGSIZE_MEDIUM = 3;
        GETV1REQUEST_IMGSIZE_SMALL = 4;
        GETV1REQUEST_IMGSIZE_XLARGE = 5;
        GETV1REQUEST_IMGSIZE_XXLARGE = 6;
    }
    GetV1Request_ImgSize imgSize = 18;
    // Returns images of a type, which can be one of: clipart, face, lineart, news, and photo.
    enum GetV1Request_ImgType {
        GETV1REQUEST_IMGTYPE_CLIPART = 0;
        GETV1REQUEST_IMGTYPE_FACE = 1;
        GETV1REQUEST_IMGTYPE_LINEART = 2;
        GETV1REQUEST_IMGTYPE_NEWS = 3;
        GETV1REQUEST_IMGTYPE_PHOTO = 4;
    }
    GetV1Request_ImgType imgType = 19;
    string key = 20;
    // Specifies that all search results should contain a link to a particular URL
    string linkSite = 21;
    // Creates a range in form as_nlo value..as_nhi value and attempts to append it to query
    string lowRange = 22;
    // The language restriction for the search results
    enum GetV1Request_Lr {
        GETV1REQUEST_LR_LANG_AR = 0;
        GETV1REQUEST_LR_LANG_BG = 1;
        GETV1REQUEST_LR_LANG_CA = 2;
        GETV1REQUEST_LR_LANG_CS = 3;
        GETV1REQUEST_LR_LANG_DA = 4;
        GETV1REQUEST_LR_LANG_DE = 5;
        GETV1REQUEST_LR_LANG_EL = 6;
        GETV1REQUEST_LR_LANG_EN = 7;
        GETV1REQUEST_LR_LANG_ES = 8;
        GETV1REQUEST_LR_LANG_ET = 9;
        GETV1REQUEST_LR_LANG_FI = 10;
        GETV1REQUEST_LR_LANG_FR = 11;
        GETV1REQUEST_LR_LANG_HR = 12;
        GETV1REQUEST_LR_LANG_HU = 13;
        GETV1REQUEST_LR_LANG_ID = 14;
        GETV1REQUEST_LR_LANG_IS = 15;
        GETV1REQUEST_LR_LANG_IT = 16;
        GETV1REQUEST_LR_LANG_IW = 17;
        GETV1REQUEST_LR_LANG_JA = 18;
        GETV1REQUEST_LR_LANG_KO = 19;
        GETV1REQUEST_LR_LANG_LT = 20;
        GETV1REQUEST_LR_LANG_LV = 21;
        GETV1REQUEST_LR_LANG_NL = 22;
        GETV1REQUEST_LR_LANG_NO = 23;
        GETV1REQUEST_LR_LANG_PL = 24;
        GETV1REQUEST_LR_LANG_PT = 25;
        GETV1REQUEST_LR_LANG_RO = 26;
        GETV1REQUEST_LR_LANG_RU = 27;
        GETV1REQUEST_LR_LANG_SK = 28;
        GETV1REQUEST_LR_LANG_SL = 29;
        GETV1REQUEST_LR_LANG_SR = 30;
        GETV1REQUEST_LR_LANG_SV = 31;
        GETV1REQUEST_LR_LANG_TR = 32;
        GETV1REQUEST_LR_LANG_ZHCN = 33;
        GETV1REQUEST_LR_LANG_ZHTW = 34;
    }
    GetV1Request_Lr lr = 23;
    // Number of search results to return
    int32 num = 24;
    string oauth_token = 25;
    // Provides additional search terms to check for in a document, where each document in the search results must contain at least one of the additional search terms
    string orTerms = 26;
    boolean prettyPrint = 27;
    // Query
    string q = 28;
    string quotaUser = 29;
    // Specifies that all search results should be pages that are related to the specified URL
    string relatedSite = 30;
    // Filters based on licensing. Supported values include: cc_publicdomain, cc_attribute, cc_sharealike, cc_noncommercial, cc_nonderived and combinations of these.
    string rights = 31;
    // Search safety level
    enum GetV1Request_Safe {
        GETV1REQUEST_SAFE_HIGH = 0;
        GETV1REQUEST_SAFE_MEDIUM = 1;
        GETV1REQUEST_SAFE_OFF = 2;
    }
    GetV1Request_Safe safe = 32;
    // Specifies the search type: image.
    enum GetV1Request_SearchType {
        GETV1REQUEST_SEARCHTYPE_IMAGE = 0;
    }
    GetV1Request_SearchType searchType = 33;
    // Specifies all search results should be pages from a given site
    string siteSearch = 34;
    // Controls whether to include or exclude results from the site named in the as_sitesearch parameter
    enum GetV1Request_SiteSearchFilter {
        GETV1REQUEST_SITESEARCHFILTER_E = 0;
        GETV1REQUEST_SITESEARCHFILTER_I = 1;
    }
    GetV1Request_SiteSearchFilter siteSearchFilter = 35;
    // The sort expression to apply to the results
    string sort = 36;
    // The index of the first result to return
    int32 start = 37;
    string userIp = 38;
}

message Context {
    message Facet {
    }
    repeated Facet facets = 1;
    string title = 2;
}

message Promotion {
    message BodyLine {
        string htmlTitle = 1;
        string link = 2;
        string title = 3;
        string url = 4;
    }
    repeated BodyLine bodyLines = 1;
    string displayLink = 2;
    string htmlTitle = 3;
    message Image {
        int32 height = 1;
        string source = 2;
        int32 width = 3;
    }
    Image image = 4;
    string link = 5;
    string title = 6;
}

message Query {
    int32 count = 1;
    string cr = 2;
    string cx = 3;
    string dateRestrict = 4;
    string disableCnTwTranslation = 5;
    string exactTerms = 6;
    string excludeTerms = 7;
    string fileType = 8;
    string filter = 9;
    string gl = 10;
    string googleHost = 11;
    string highRange = 12;
    string hl = 13;
    string hq = 14;
    string imgColorType = 15;
    string imgDominantColor = 16;
    string imgSize = 17;
    string imgType = 18;
    string inputEncoding = 19;
    string language = 20;
    string linkSite = 21;
    string lowRange = 22;
    string orTerms = 23;
    string outputEncoding = 24;
    string relatedSite = 25;
    string rights = 26;
    string safe = 27;
    string searchTerms = 28;
    string searchType = 29;
    string siteSearch = 30;
    string siteSearchFilter = 31;
    string sort = 32;
    int32 startIndex = 33;
    int32 startPage = 34;
    string title = 35;
    string totalResults = 36;
}

message Result {
    string cacheId = 1;
    string displayLink = 2;
    string fileFormat = 3;
    string formattedUrl = 4;
    string htmlFormattedUrl = 5;
    string htmlSnippet = 6;
    string htmlTitle = 7;
    message Image {
        int32 byteSize = 1;
        string contextLink = 2;
        int32 height = 3;
        int32 thumbnailHeight = 4;
        string thumbnailLink = 5;
        int32 thumbnailWidth = 6;
        int32 width = 7;
    }
    Image image = 8;
    string kind = 9;
    message Label {
        string displayName = 1;
        string label_with_op = 2;
        string name = 3;
    }
    repeated Label labels = 10;
    string link = 11;
    string mime = 12;
    map<string, array> pagemap = 13;
    string snippet = 14;
    string title = 15;
}

message Search {
    Context context = 1;
    repeated Result items = 2;
    string kind = 3;
    repeated Promotion promotions = 4;
    map<string, array> queries = 5;
    message SearchInformation {
        string formattedSearchTime = 1;
        string formattedTotalResults = 2;
        double searchTime = 3;
        string totalResults = 4;
    }
    SearchInformation searchInformation = 6;
    message Spelling {
        string correctedQuery = 1;
        string htmlCorrectedQuery = 2;
    }
    Spelling spelling = 7;
    message Url {
        string template = 1;
        string type = 2;
    }
    Url url = 8;
}

enum Alt {
    ATOM = 0;
    JSON = 1;
}

service CustomSearchService {
    // Returns metadata about the search performed, metadata about the custom search engine used for the search, and the search results.
    rpc GetV1(GetV1Request) returns (Search) {
      option (google.api.http) = {
        get: "/customsearch/v1"
      };
    }
}

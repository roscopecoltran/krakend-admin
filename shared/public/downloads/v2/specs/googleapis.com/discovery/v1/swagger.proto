syntax = "proto3";

import "google/api/annotations.proto";

package apisdiscoveryservice;

message GetApisRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // Only include APIs with the given name.
    string name = 4;
    string oauth_token = 5;
    // Return only the preferred version of an API.
    bool preferred = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetApisApiVersionRestRequest {
    alt alt = 1;
    // The name of the API.
    string api = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
    // The version of the API.
    string version = 9;
}

message DirectoryList {
    // Indicate the version of the Discovery API used to generate this doc.
    string discoveryVersion = 1;
    // The individual directory entries. One entry per api/version pair.
    message Item {
            // The description of this API.
    string description = 1;
            // A link to the discovery document.
    string discoveryLink = 2;
            // The URL for the discovery REST document.
    string discoveryRestUrl = 3;
            // A link to human readable documentation for the API.
    string documentationLink = 4;
            // Links to 16x16 and 32x32 icons representing the API.
    message Icons {
                    // The URL of the 16x16 icon.
    string x16 = 1;
                    // The URL of the 32x32 icon.
    string x32 = 2;
        }
        Icons icons = 5;
            // The id of this API.
    string id = 6;
            // The kind for this response.
    string kind = 7;
            // Labels for the status of this API, such as labs or deprecated.
    repeated string labels = 8;
            // The name of the API.
    string name = 9;
            // True if this version is the preferred version to use.
    bool preferred = 10;
            // The title of this API.
    string title = 11;
            // The version of the API.
    string version = 12;
    }
    repeated Item items = 2;
    // The kind for this response.
    string kind = 3;
}

message JsonSchema {
    // A reference to another schema. The value of this property is the "id" of another schema.
    string $ref = 1;
    // If this is a schema for an object, this property is the schema for any additional properties with dynamic keys on this object.
    JsonSchema additionalProperties = 2;
    // Additional information about this property.
    message Annotations {
            // A list of methods for which this property is required on requests.
    repeated string required = 1;
    }
    Annotations annotations = 3;
    // The default value of this property (if one exists).
    string default = 4;
    // A description of this object.
    string description = 5;
    // Values this parameter may take (if it is an enum).
    repeated string enum = 6;
    // The descriptions for the enums. Each position maps to the corresponding value in the "enum" array.
    repeated string enumDescriptions = 7;
    // An additional regular expression or key that helps constrain the value. For more details see: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.23
    string format = 8;
    // Unique identifier for this schema.
    string id = 9;
    // If this is a schema for an array, this property is the schema for each element in the array.
    JsonSchema items = 10;
    // Whether this parameter goes in the query or the path for REST requests.
    string location = 11;
    // The maximum value of this parameter.
    string maximum = 12;
    // The minimum value of this parameter.
    string minimum = 13;
    // The regular expression this parameter must conform to. Uses Java 6 regex format: http://docs.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html
    string pattern = 14;
    // If this is a schema for an object, list the schema for each property of this object.
    map<string, JsonSchema> properties = 15;
    // The value is read-only, generated by the service. The value cannot be modified by the client. If the value is included in a POST, PUT, or PATCH request, it is ignored by the service.
    bool readOnly = 16;
    // Whether this parameter may appear multiple times.
    bool repeated = 17;
    // Whether the parameter is required.
    bool required = 18;
    // The value type for this schema. A list of values can be found here: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.1
    string type = 19;
    // In a variant data type, the value of one property is used to determine how to interpret the entire entity. Its value must exist in a map of descriminant values to schema names.
    message Variant {
            // The name of the type discriminant property.
    string discriminant = 1;
            // The map of discriminant value to schema to use for parsing..
    message Map {
            string $ref = 1;
            string type_value = 2;
        }
        repeated Map map = 2;
    }
    Variant variant = 20;
}

message RestDescription {
    // Authentication information.
    message Auth {
            // OAuth 2.0 authentication information.
    message Oauth2 {
                    // Available OAuth 2.0 scopes.
    map<string, object> scopes = 1;
        }
        Oauth2 oauth2 = 1;
    }
    Auth auth = 1;
    // [DEPRECATED] The base path for REST requests.
    string basePath = 2;
    // [DEPRECATED] The base URL for REST requests.
    string baseUrl = 3;
    // The path for REST batch requests.
    string batchPath = 4;
    // Indicates how the API name should be capitalized and split into various parts. Useful for generating pretty class names.
    string canonicalName = 5;
    // The description of this API.
    string description = 6;
    // Indicate the version of the Discovery API used to generate this doc.
    string discoveryVersion = 7;
    // A link to human readable documentation for the API.
    string documentationLink = 8;
    // The ETag for this response.
    string etag = 9;
    // Enable exponential backoff for suitable methods in the generated clients.
    bool exponentialBackoffDefault = 10;
    // A list of supported features for this API.
    repeated string features = 11;
    // Links to 16x16 and 32x32 icons representing the API.
    message Icons {
            // The URL of the 16x16 icon.
    string x16 = 1;
            // The URL of the 32x32 icon.
    string x32 = 2;
    }
    Icons icons = 12;
    // The ID of this API.
    string id = 13;
    // The kind for this response.
    string kind = 14;
    // Labels for the status of this API, such as labs or deprecated.
    repeated string labels = 15;
    // API-level methods for this API.
    map<string, RestMethod> methods = 16;
    // The name of this API.
    string name = 17;
    // The domain of the owner of this API. Together with the ownerName and a packagePath values, this can be used to generate a library for this API which would have a unique fully qualified name.
    string ownerDomain = 18;
    // The name of the owner of this API. See ownerDomain.
    string ownerName = 19;
    // The package of the owner of this API. See ownerDomain.
    string packagePath = 20;
    // Common parameters that apply across all apis.
    map<string, JsonSchema> parameters = 21;
    // The protocol described by this document.
    string protocol = 22;
    // The resources in this API.
    map<string, RestResource> resources = 23;
    // The version of this API.
    string revision = 24;
    // The root URL under which all API services live.
    string rootUrl = 25;
    // The schemas for this API.
    map<string, JsonSchema> schemas = 26;
    // The base path for all REST requests.
    string servicePath = 27;
    // The title of this API.
    string title = 28;
    // The version of this API.
    string version = 29;
    bool version_module = 30;
}

message RestMethod {
    // Description of this method.
    string description = 1;
    // Whether this method requires an ETag to be specified. The ETag is sent as an HTTP If-Match or If-None-Match header.
    bool etagRequired = 2;
    // HTTP method used by this method.
    string httpMethod = 3;
    // A unique ID for this method. This property can be used to match methods between different versions of Discovery.
    string id = 4;
    // Media upload parameters.
    message MediaUpload {
            // MIME Media Ranges for acceptable media uploads to this method.
    repeated string accept = 1;
            // Maximum size of a media upload, such as "1MB", "2GB" or "3TB".
    string maxSize = 2;
            // Supported upload protocols.
    message Protocols {
                    // Supports the Resumable Media Upload protocol.
    message Resumable {
                            // True if this endpoint supports uploading multipart media.
    bool multipart = 1;
                            // The URI path to be used for upload. Should be used in conjunction with the basePath property at the api-level.
    string path = 2;
            }
            Resumable resumable = 1;
                    // Supports uploading as a single HTTP request.
    message Simple {
                            // True if this endpoint supports upload multipart media.
    bool multipart = 1;
                            // The URI path to be used for upload. Should be used in conjunction with the basePath property at the api-level.
    string path = 2;
            }
            Simple simple = 2;
        }
        Protocols protocols = 3;
    }
    MediaUpload mediaUpload = 5;
    // Ordered list of required parameters, serves as a hint to clients on how to structure their method signatures. The array is ordered such that the "most-significant" parameter appears first.
    repeated string parameterOrder = 6;
    // Details for all parameters in this method.
    map<string, JsonSchema> parameters = 7;
    // The URI path of this REST method. Should be used in conjunction with the basePath property at the api-level.
    string path = 8;
    // The schema for the request.
    message Request {
            // Schema ID for the request schema.
    string $ref = 1;
            // parameter name.
    string parameterName = 2;
    }
    Request request = 9;
    // The schema for the response.
    message Response {
            // Schema ID for the response schema.
    string $ref = 1;
    }
    Response response = 10;
    // OAuth 2.0 scopes applicable to this method.
    repeated string scopes = 11;
    // Whether this method supports media downloads.
    bool supportsMediaDownload = 12;
    // Whether this method supports media uploads.
    bool supportsMediaUpload = 13;
    // Whether this method supports subscriptions.
    bool supportsSubscription = 14;
    // Indicates that downloads from this method should use the download service URL (i.e. "/download"). Only applies if the method supports media download.
    bool useMediaDownloadService = 15;
}

message RestResource {
    // Methods on this resource.
    map<string, RestMethod> methods = 1;
    // Sub-resources on this resource.
    map<string, RestResource> resources = 2;
}

enum Alt {
    JSON = 0;
}

service APIsDiscoveryServiceService {
    // Retrieve the list of APIs supported at this endpoint.
    rpc GetApis(GetApisRequest) returns (DirectoryList) {
      option (google.api.http) = {
        get: "/discovery/v1/apis"
      };
    }
    // Retrieve the description of a particular version of an api.
    rpc GetApisApiVersionRest(GetApisApiVersionRestRequest) returns (RestDescription) {
      option (google.api.http) = {
        get: "/discovery/v1/apis/{api}/{version}/rest"
      };
    }
}

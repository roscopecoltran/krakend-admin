basePath: /
definitions.Api.description: |-
  Api is a light-weight descriptor for an API Interface.

  Interfaces are also described as "protocol buffer services" in some contexts,
  such as by the "service" keyword in a .proto file, but they are different
  from API Services, which represent a concrete implementation of an interface
  as opposed to simply a description of methods and bindings. They are also
  sometimes simply referred to as "APIs" in other contexts, such as the name of
  this message itself. See https://cloud.google.com/apis/design/glossary for
  detailed terminology.
definitions.Api.properties.methods.description: The methods of this interface, in
  unspecified order.
definitions.Api.properties.methods.items.$ref: '#/definitions/Method'
definitions.Api.properties.methods.type: array
definitions.Api.properties.mixins.description: Included interfaces. See Mixin.
definitions.Api.properties.mixins.items.$ref: '#/definitions/Mixin'
definitions.Api.properties.mixins.type: array
definitions.Api.properties.name.description: |-
  The fully qualified name of this interface, including package name
  followed by the interface's simple name.
definitions.Api.properties.name.type: string
definitions.Api.properties.options.description: Any metadata attached to the interface.
definitions.Api.properties.options.items.$ref: '#/definitions/Option'
definitions.Api.properties.options.type: array
definitions.Api.properties.sourceContext.$ref: '#/definitions/SourceContext'
definitions.Api.properties.sourceContext.description: |-
  Source context for the protocol buffer service represented by this
  message.
definitions.Api.properties.syntax.description: The source syntax of the service.
definitions.Api.properties.syntax.enum.length: 2
definitions.Api.properties.syntax.enum[0]: SYNTAX_PROTO2
definitions.Api.properties.syntax.enum[1]: SYNTAX_PROTO3
definitions.Api.properties.syntax.type: string
definitions.Api.properties.version.description: |
  A version string for this interface. If specified, must have the form
  `major-version.minor-version`, as in `1.10`. If the minor version is
  omitted, it defaults to zero. If the entire version field is empty, the
  major version is derived from the package name, as outlined below. If the
  field is not empty, the version in the package name will be verified to be
  consistent with what is provided here.

  The versioning schema uses [semantic
  versioning](http://semver.org) where the major version number
  indicates a breaking change and the minor version an additive,
  non-breaking change. Both version numbers are signals to users
  what to expect from different versions, and should be carefully
  chosen based on the product plan.

  The major version is also reflected in the package name of the
  interface, which must end in `v<major-version>`, as in
  `google.feature.v1`. For major versions 0 and 1, the suffix can
  be omitted. Zero major versions must only be used for
  experimental, non-GA interfaces.
definitions.Api.properties.version.type: string
definitions.Api.type: object
definitions.AuthProvider.description: |-
  Configuration for an anthentication provider, including support for
  [JSON Web Token (JWT)](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32).
definitions.AuthProvider.properties.audiences.description: |-
  The list of JWT
  [audiences](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.3).
  that are allowed to access. A JWT containing any of these audiences will
  be accepted. When this setting is absent, only JWTs with audience
  "https://Service_name/API_name"
  will be accepted. For example, if no audiences are in the setting,
  LibraryService API will only accept JWTs with the following audience
  "https://library-example.googleapis.com/google.example.library.v1.LibraryService".

  Example:

      audiences: bookstore_android.apps.googleusercontent.com,
                 bookstore_web.apps.googleusercontent.com
definitions.AuthProvider.properties.audiences.type: string
definitions.AuthProvider.properties.authorizationUrl.description: |-
  Redirect URL if JWT token is required but no present or is expired.
  Implement authorizationUrl of securityDefinitions in OpenAPI spec.
definitions.AuthProvider.properties.authorizationUrl.type: string
definitions.AuthProvider.properties.id.description: |-
  The unique identifier of the auth provider. It will be referred to by
  `AuthRequirement.provider_id`.

  Example: "bookstore_auth".
definitions.AuthProvider.properties.id.type: string
definitions.AuthProvider.properties.issuer.description: |-
  Identifies the principal that issued the JWT. See
  https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.1
  Usually a URL or an email address.

  Example: https://securetoken.google.com
  Example: 1234567-compute@developer.gserviceaccount.com
definitions.AuthProvider.properties.issuer.type: string
definitions.AuthProvider.properties.jwksUri.description: |-
  URL of the provider's public key set to validate signature of the JWT. See
  [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
  Optional if the key set document:
   - can be retrieved from
     [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html
     of the issuer.
   - can be inferred from the email domain of the issuer (e.g. a Google service account).

  Example: https://www.googleapis.com/oauth2/v1/certs
definitions.AuthProvider.properties.jwksUri.type: string
definitions.AuthProvider.type: object
definitions.AuthRequirement.description: |-
  User-defined authentication requirements, including support for
  [JSON Web Token (JWT)](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32).
definitions.AuthRequirement.properties.audiences.description: |-
  NOTE: This will be deprecated soon, once AuthProvider.audiences is
  implemented and accepted in all the runtime components.

  The list of JWT
  [audiences](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.3).
  that are allowed to access. A JWT containing any of these audiences will
  be accepted. When this setting is absent, only JWTs with audience
  "https://Service_name/API_name"
  will be accepted. For example, if no audiences are in the setting,
  LibraryService API will only accept JWTs with the following audience
  "https://library-example.googleapis.com/google.example.library.v1.LibraryService".

  Example:

      audiences: bookstore_android.apps.googleusercontent.com,
                 bookstore_web.apps.googleusercontent.com
definitions.AuthRequirement.properties.audiences.type: string
definitions.AuthRequirement.properties.providerId.description: |-
  id from authentication provider.

  Example:

      provider_id: bookstore_auth
definitions.AuthRequirement.properties.providerId.type: string
definitions.AuthRequirement.type: object
definitions.Authentication.description: |-
  `Authentication` defines the authentication configuration for an API.

  Example for an API targeted for external use:

      name: calendar.googleapis.com
      authentication:
        providers:
        - id: google_calendar_auth
          jwks_uri: https://www.googleapis.com/oauth2/v1/certs
          issuer: https://securetoken.google.com
        rules:
        - selector: "*"
          requirements:
            provider_id: google_calendar_auth
definitions.Authentication.properties.providers.description: Defines a set of authentication
  providers that a service supports.
definitions.Authentication.properties.providers.items.$ref: '#/definitions/AuthProvider'
definitions.Authentication.properties.providers.type: array
definitions.Authentication.properties.rules.description: |-
  A list of authentication rules that apply to individual API methods.

  **NOTE:** All service configuration rules follow "last one wins" order.
definitions.Authentication.properties.rules.items.$ref: '#/definitions/AuthenticationRule'
definitions.Authentication.properties.rules.type: array
definitions.Authentication.type: object
definitions.AuthenticationRule.description: |-
  Authentication rules for the service.

  By default, if a method has any authentication requirements, every request
  must include a valid credential matching one of the requirements.
  It's an error to include more than one kind of credential in a single
  request.

  If a method doesn't have any auth requirements, request credentials will be
  ignored.
definitions.AuthenticationRule.properties.allowWithoutCredential.description: |-
  Whether to allow requests without a credential. The credential can be
  an OAuth token, Google cookies (first-party auth) or EndUserCreds.

  For requests without credentials, if the service control environment is
  specified, each incoming request **must** be associated with a service
  consumer. This can be done by passing an API key that belongs to a consumer
  project.
definitions.AuthenticationRule.properties.allowWithoutCredential.type: boolean
definitions.AuthenticationRule.properties.customAuth.$ref: '#/definitions/CustomAuthRequirements'
definitions.AuthenticationRule.properties.customAuth.description: Configuration for
  custom authentication.
definitions.AuthenticationRule.properties.oauth.$ref: '#/definitions/OAuthRequirements'
definitions.AuthenticationRule.properties.oauth.description: The requirements for
  OAuth credentials.
definitions.AuthenticationRule.properties.requirements.description: Requirements for
  additional authentication providers.
definitions.AuthenticationRule.properties.requirements.items.$ref: '#/definitions/AuthRequirement'
definitions.AuthenticationRule.properties.requirements.type: array
definitions.AuthenticationRule.properties.selector.description: |-
  Selects the methods to which this rule applies.

  Refer to selector for syntax details.
definitions.AuthenticationRule.properties.selector.type: string
definitions.AuthenticationRule.type: object
definitions.AuthorizationConfig.description: |-
  Configuration of authorization.

  This section determines the authorization provider, if unspecified, then no
  authorization check will be done.

  Example:

      experimental:
        authorization:
          provider: firebaserules.googleapis.com
definitions.AuthorizationConfig.properties.provider.description: |-
  The name of the authorization provider, such as
  firebaserules.googleapis.com.
definitions.AuthorizationConfig.properties.provider.type: string
definitions.AuthorizationConfig.type: object
definitions.Backend.description: '`Backend` defines the backend configuration for
  a service.'
definitions.Backend.properties.rules.description: |-
  A list of API backend rules that apply to individual API methods.

  **NOTE:** All service configuration rules follow "last one wins" order.
definitions.Backend.properties.rules.items.$ref: '#/definitions/BackendRule'
definitions.Backend.properties.rules.type: array
definitions.Backend.type: object
definitions.BackendRule.description: A backend rule provides configuration for an
  individual API element.
definitions.BackendRule.properties.address.description: The address of the API backend.
definitions.BackendRule.properties.address.type: string
definitions.BackendRule.properties.deadline.description: |-
  The number of seconds to wait for a response from a request.  The default
  deadline for gRPC is infinite (no deadline) and HTTP requests is 5 seconds.
definitions.BackendRule.properties.deadline.format: double
definitions.BackendRule.properties.deadline.type: number
definitions.BackendRule.properties.minDeadline.description: |-
  Minimum deadline in seconds needed for this method. Calls having deadline
  value lower than this will be rejected.
definitions.BackendRule.properties.minDeadline.format: double
definitions.BackendRule.properties.minDeadline.type: number
definitions.BackendRule.properties.selector.description: |-
  Selects the methods to which this rule applies.

  Refer to selector for syntax details.
definitions.BackendRule.properties.selector.type: string
definitions.BackendRule.type: object
definitions.Billing.description: |-
  Billing related configuration of the service.

  The following example shows how to configure monitored resources and metrics
  for billing:
      monitored_resources:
      - type: library.googleapis.com/branch
        labels:
        - key: /city
          description: The city where the library branch is located in.
        - key: /name
          description: The name of the branch.
      metrics:
      - name: library.googleapis.com/book/borrowed_count
        metric_kind: DELTA
        value_type: INT64
      billing:
        consumer_destinations:
        - monitored_resource: library.googleapis.com/branch
          metrics:
          - library.googleapis.com/book/borrowed_count
definitions.Billing.properties.consumerDestinations.description: |-
  Billing configurations for sending metrics to the consumer project.
  There can be multiple consumer destinations per service, each one must have
  a different monitored resource type. A metric can be used in at most
  one consumer destination.
definitions.Billing.properties.consumerDestinations.items.$ref: '#/definitions/BillingDestination'
definitions.Billing.properties.consumerDestinations.type: array
definitions.Billing.type: object
definitions.BillingDestination.description: |-
  Configuration of a specific billing destination (Currently only support
  bill against consumer project).
definitions.BillingDestination.properties.metrics.description: |-
  Names of the metrics to report to this billing destination.
  Each name must be defined in Service.metrics section.
definitions.BillingDestination.properties.metrics.items.type: string
definitions.BillingDestination.properties.metrics.type: array
definitions.BillingDestination.properties.monitoredResource.description: |-
  The monitored resource type. The type must be defined in
  Service.monitored_resources section.
definitions.BillingDestination.properties.monitoredResource.type: string
definitions.BillingDestination.type: object
definitions.Context.description: |-
  `Context` defines which contexts an API requests.

  Example:

      context:
        rules:
        - selector: "*"
          requested:
          - google.rpc.context.ProjectContext
          - google.rpc.context.OriginContext

  The above specifies that all methods in the API request
  `google.rpc.context.ProjectContext` and
  `google.rpc.context.OriginContext`.

  Available context types are defined in package
  `google.rpc.context`.
definitions.Context.properties.rules.description: |-
  A list of RPC context rules that apply to individual API methods.

  **NOTE:** All service configuration rules follow "last one wins" order.
definitions.Context.properties.rules.items.$ref: '#/definitions/ContextRule'
definitions.Context.properties.rules.type: array
definitions.Context.type: object
definitions.ContextRule.description: |-
  A context rule provides information about the context for an individual API
  element.
definitions.ContextRule.properties.provided.description: A list of full type names
  of provided contexts.
definitions.ContextRule.properties.provided.items.type: string
definitions.ContextRule.properties.provided.type: array
definitions.ContextRule.properties.requested.description: A list of full type names
  of requested contexts.
definitions.ContextRule.properties.requested.items.type: string
definitions.ContextRule.properties.requested.type: array
definitions.ContextRule.properties.selector.description: |-
  Selects the methods to which this rule applies.

  Refer to selector for syntax details.
definitions.ContextRule.properties.selector.type: string
definitions.ContextRule.type: object
definitions.Control.description: |-
  Selects and configures the service controller used by the service.  The
  service controller handles features like abuse, quota, billing, logging,
  monitoring, etc.
definitions.Control.properties.environment.description: |-
  The service control environment to use. If empty, no control plane
  feature (like quota and billing) will be enabled.
definitions.Control.properties.environment.type: string
definitions.Control.type: object
definitions.CustomAuthRequirements.description: Configuration for a custom authentication
  provider.
definitions.CustomAuthRequirements.properties.provider.description: |-
  A configuration string containing connection information for the
  authentication provider, typically formatted as a SmartService string
  (go/smartservice).
definitions.CustomAuthRequirements.properties.provider.type: string
definitions.CustomAuthRequirements.type: object
definitions.CustomError.description: |-
  Customize service error responses.  For example, list any service
  specific protobuf types that can appear in error detail lists of
  error responses.

  Example:

      custom_error:
        types:
        - google.foo.v1.CustomError
        - google.foo.v1.AnotherError
definitions.CustomError.properties.rules.description: |-
  The list of custom error rules that apply to individual API messages.

  **NOTE:** All service configuration rules follow "last one wins" order.
definitions.CustomError.properties.rules.items.$ref: '#/definitions/CustomErrorRule'
definitions.CustomError.properties.rules.type: array
definitions.CustomError.properties.types.description: The list of custom error detail
  types, e.g. 'google.foo.v1.CustomError'.
definitions.CustomError.properties.types.items.type: string
definitions.CustomError.properties.types.type: array
definitions.CustomError.type: object
definitions.CustomErrorRule.description: A custom error rule.
definitions.CustomErrorRule.properties.isErrorType.description: |-
  Mark this message as possible payload in error response.  Otherwise,
  objects of this type will be filtered when they appear in error payload.
definitions.CustomErrorRule.properties.isErrorType.type: boolean
definitions.CustomErrorRule.properties.selector.description: |-
  Selects messages to which this rule applies.

  Refer to selector for syntax details.
definitions.CustomErrorRule.properties.selector.type: string
definitions.CustomErrorRule.type: object
definitions.CustomHttpPattern.description: A custom pattern is used for defining custom
  HTTP verb.
definitions.CustomHttpPattern.properties.kind.description: The name of this custom
  HTTP verb.
definitions.CustomHttpPattern.properties.kind.type: string
definitions.CustomHttpPattern.properties.path.description: The path matched by this
  custom verb.
definitions.CustomHttpPattern.properties.path.type: string
definitions.CustomHttpPattern.type: object
definitions.DisableServiceRequest.description: Request message for DisableService
  method.
definitions.DisableServiceRequest.type: object
definitions.Documentation.description: |-
  `Documentation` provides the information for describing a service.

  Example:
  <pre><code>documentation:
    summary: >
      The Google Calendar API gives access
      to most calendar features.
    pages:
    - name: Overview
      content: &#40;== include google/foo/overview.md ==&#41;
    - name: Tutorial
      content: &#40;== include google/foo/tutorial.md ==&#41;
      subpages;
      - name: Java
        content: &#40;== include google/foo/tutorial_java.md ==&#41;
    rules:
    - selector: google.calendar.Calendar.Get
      description: >
        ...
    - selector: google.calendar.Calendar.Put
      description: >
        ...
  </code></pre>
  Documentation is provided in markdown syntax. In addition to
  standard markdown features, definition lists, tables and fenced
  code blocks are supported. Section headers can be provided and are
  interpreted relative to the section nesting of the context where
  a documentation fragment is embedded.

  Documentation from the IDL is merged with documentation defined
  via the config at normalization time, where documentation provided
  by config rules overrides IDL provided.

  A number of constructs specific to the API platform are supported
  in documentation text.

  In order to reference a proto element, the following
  notation can be used:
  <pre><code>&#91;fully.qualified.proto.name]&#91;]</code></pre>
  To override the display text used for the link, this can be used:
  <pre><code>&#91;display text]&#91;fully.qualified.proto.name]</code></pre>
  Text can be excluded from doc using the following notation:
  <pre><code>&#40;-- internal comment --&#41;</code></pre>
  Comments can be made conditional using a visibility label. The below
  text will be only rendered if the `BETA` label is available:
  <pre><code>&#40;--BETA: comment for BETA users --&#41;</code></pre>
  A few directives are available in documentation. Note that
  directives must appear on a single line to be properly
  identified. The `include` directive includes a markdown file from
  an external source:
  <pre><code>&#40;== include path/to/file ==&#41;</code></pre>
  The `resource_for` directive marks a message to be the resource of
  a collection in REST view. If it is not specified, tools attempt
  to infer the resource from the operations in a collection:
  <pre><code>&#40;== resource_for v1.shelves.books ==&#41;</code></pre>
  The directive `suppress_warning` does not directly affect documentation
  and is documented together with service config validation.
definitions.Documentation.properties.documentationRootUrl.description: The URL to
  the root of documentation.
definitions.Documentation.properties.documentationRootUrl.type: string
definitions.Documentation.properties.overview.description: |-
  Declares a single overview page. For example:
  <pre><code>documentation:
    summary: ...
    overview: &#40;== include overview.md ==&#41;
  </code></pre>
  This is a shortcut for the following declaration (using pages style):
  <pre><code>documentation:
    summary: ...
    pages:
    - name: Overview
      content: &#40;== include overview.md ==&#41;
  </code></pre>
  Note: you cannot specify both `overview` field and `pages` field.
definitions.Documentation.properties.overview.type: string
definitions.Documentation.properties.pages.description: The top level pages for the
  documentation set.
definitions.Documentation.properties.pages.items.$ref: '#/definitions/Page'
definitions.Documentation.properties.pages.type: array
definitions.Documentation.properties.rules.description: |-
  A list of documentation rules that apply to individual API elements.

  **NOTE:** All service configuration rules follow "last one wins" order.
definitions.Documentation.properties.rules.items.$ref: '#/definitions/DocumentationRule'
definitions.Documentation.properties.rules.type: array
definitions.Documentation.properties.summary.description: |-
  A short summary of what the service does. Can only be provided by
  plain text.
definitions.Documentation.properties.summary.type: string
definitions.Documentation.type: object
definitions.DocumentationRule.description: A documentation rule provides information
  about individual API elements.
definitions.DocumentationRule.properties.deprecationDescription.description: |-
  Deprecation description of the selected element(s). It can be provided if an
  element is marked as `deprecated`.
definitions.DocumentationRule.properties.deprecationDescription.type: string
definitions.DocumentationRule.properties.description.description: Description of the
  selected API(s).
definitions.DocumentationRule.properties.description.type: string
definitions.DocumentationRule.properties.selector.description: |-
  The selector is a comma-separated list of patterns. Each pattern is a
  qualified name of the element which may end in "*", indicating a wildcard.
  Wildcards are only allowed at the end and for a whole component of the
  qualified name, i.e. "foo.*" is ok, but not "foo.b*" or "foo.*.bar". To
  specify a default for all applicable elements, the whole pattern "*"
  is used.
definitions.DocumentationRule.properties.selector.type: string
definitions.DocumentationRule.type: object
definitions.EnableServiceRequest.description: Request message for EnableService method.
definitions.EnableServiceRequest.type: object
definitions.Endpoint.description: |-
  `Endpoint` describes a network endpoint that serves a set of APIs.
  A service may expose any number of endpoints, and all endpoints share the
  same service configuration, such as quota configuration and monitoring
  configuration.

  Example service configuration:

      name: library-example.googleapis.com
      endpoints:
        # Below entry makes 'google.example.library.v1.Library'
        # API be served from endpoint address library-example.googleapis.com.
        # It also allows HTTP OPTIONS calls to be passed to the backend, for
        # it to decide whether the subsequent cross-origin request is
        # allowed to proceed.
      - name: library-example.googleapis.com
        allow_cors: true
definitions.Endpoint.properties.aliases.description: |-
  DEPRECATED: This field is no longer supported. Instead of using aliases,
  please specify multiple google.api.Endpoint for each of the intented
  alias.

  Additional names that this endpoint will be hosted on.
definitions.Endpoint.properties.aliases.items.type: string
definitions.Endpoint.properties.aliases.type: array
definitions.Endpoint.properties.allowCors.description: |-
  Allowing
  [CORS](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing), aka
  cross-domain traffic, would allow the backends served from this endpoint to
  receive and respond to HTTP OPTIONS requests. The response will be used by
  the browser to determine whether the subsequent cross-origin request is
  allowed to proceed.
definitions.Endpoint.properties.allowCors.type: boolean
definitions.Endpoint.properties.apis.description: |-
  The list of APIs served by this endpoint.

  If no APIs are specified this translates to "all APIs" exported by the
  service, as defined in the top-level service configuration.
definitions.Endpoint.properties.apis.items.type: string
definitions.Endpoint.properties.apis.type: array
definitions.Endpoint.properties.features.description: The list of features enabled
  on this endpoint.
definitions.Endpoint.properties.features.items.type: string
definitions.Endpoint.properties.features.type: array
definitions.Endpoint.properties.name.description: The canonical name of this endpoint.
definitions.Endpoint.properties.name.type: string
definitions.Endpoint.properties.target.description: |-
  The specification of an Internet routable address of API frontend that will
  handle requests to this [API Endpoint](https://cloud.google.com/apis/design/glossary).
  It should be either a valid IPv4 address or a fully-qualified domain name.
  For example, "8.8.8.8" or "myservice.appspot.com".
definitions.Endpoint.properties.target.type: string
definitions.Endpoint.type: object
definitions.Enum.description: Enum type definition.
definitions.Enum.properties.enumvalue.description: Enum value definitions.
definitions.Enum.properties.enumvalue.items.$ref: '#/definitions/EnumValue'
definitions.Enum.properties.enumvalue.type: array
definitions.Enum.properties.name.description: Enum type name.
definitions.Enum.properties.name.type: string
definitions.Enum.properties.options.description: Protocol buffer options.
definitions.Enum.properties.options.items.$ref: '#/definitions/Option'
definitions.Enum.properties.options.type: array
definitions.Enum.properties.sourceContext.$ref: '#/definitions/SourceContext'
definitions.Enum.properties.sourceContext.description: The source context.
definitions.Enum.properties.syntax.description: The source syntax.
definitions.Enum.properties.syntax.enum.length: 2
definitions.Enum.properties.syntax.enum[0]: SYNTAX_PROTO2
definitions.Enum.properties.syntax.enum[1]: SYNTAX_PROTO3
definitions.Enum.properties.syntax.type: string
definitions.Enum.type: object
definitions.EnumValue.description: Enum value definition.
definitions.EnumValue.properties.name.description: Enum value name.
definitions.EnumValue.properties.name.type: string
definitions.EnumValue.properties.number.description: Enum value number.
definitions.EnumValue.properties.number.format: int32
definitions.EnumValue.properties.number.type: integer
definitions.EnumValue.properties.options.description: Protocol buffer options.
definitions.EnumValue.properties.options.items.$ref: '#/definitions/Option'
definitions.EnumValue.properties.options.type: array
definitions.EnumValue.type: object
definitions.Experimental.description: |-
  Experimental service configuration. These configuration options can
  only be used by whitelisted users.
definitions.Experimental.properties.authorization.$ref: '#/definitions/AuthorizationConfig'
definitions.Experimental.properties.authorization.description: Authorization configuration.
definitions.Experimental.type: object
definitions.Field.description: A single field of a message type.
definitions.Field.properties.cardinality.description: The field cardinality.
definitions.Field.properties.cardinality.enum.length: 4
definitions.Field.properties.cardinality.enum[0]: CARDINALITY_UNKNOWN
definitions.Field.properties.cardinality.enum[1]: CARDINALITY_OPTIONAL
definitions.Field.properties.cardinality.enum[2]: CARDINALITY_REQUIRED
definitions.Field.properties.cardinality.enum[3]: CARDINALITY_REPEATED
definitions.Field.properties.cardinality.type: string
definitions.Field.properties.defaultValue.description: The string value of the default
  value of this field. Proto2 syntax only.
definitions.Field.properties.defaultValue.type: string
definitions.Field.properties.jsonName.description: The field JSON name.
definitions.Field.properties.jsonName.type: string
definitions.Field.properties.kind.description: The field type.
definitions.Field.properties.kind.enum.length: 19
definitions.Field.properties.kind.enum[0]: TYPE_UNKNOWN
definitions.Field.properties.kind.enum[1]: TYPE_DOUBLE
definitions.Field.properties.kind.enum[2]: TYPE_FLOAT
definitions.Field.properties.kind.enum[3]: TYPE_INT64
definitions.Field.properties.kind.enum[4]: TYPE_UINT64
definitions.Field.properties.kind.enum[5]: TYPE_INT32
definitions.Field.properties.kind.enum[6]: TYPE_FIXED64
definitions.Field.properties.kind.enum[7]: TYPE_FIXED32
definitions.Field.properties.kind.enum[8]: TYPE_BOOL
definitions.Field.properties.kind.enum[9]: TYPE_STRING
definitions.Field.properties.kind.enum[10]: TYPE_GROUP
definitions.Field.properties.kind.enum[11]: TYPE_MESSAGE
definitions.Field.properties.kind.enum[12]: TYPE_BYTES
definitions.Field.properties.kind.enum[13]: TYPE_UINT32
definitions.Field.properties.kind.enum[14]: TYPE_ENUM
definitions.Field.properties.kind.enum[15]: TYPE_SFIXED32
definitions.Field.properties.kind.enum[16]: TYPE_SFIXED64
definitions.Field.properties.kind.enum[17]: TYPE_SINT32
definitions.Field.properties.kind.enum[18]: TYPE_SINT64
definitions.Field.properties.kind.type: string
definitions.Field.properties.name.description: The field name.
definitions.Field.properties.name.type: string
definitions.Field.properties.number.description: The field number.
definitions.Field.properties.number.format: int32
definitions.Field.properties.number.type: integer
definitions.Field.properties.oneofIndex.description: |-
  The index of the field type in `Type.oneofs`, for message or enumeration
  types. The first type has index 1; zero means the type is not in the list.
definitions.Field.properties.oneofIndex.format: int32
definitions.Field.properties.oneofIndex.type: integer
definitions.Field.properties.options.description: The protocol buffer options.
definitions.Field.properties.options.items.$ref: '#/definitions/Option'
definitions.Field.properties.options.type: array
definitions.Field.properties.packed.description: Whether to use alternative packed
  wire representation.
definitions.Field.properties.packed.type: boolean
definitions.Field.properties.typeUrl.description: |-
  The field type URL, without the scheme, for message or enumeration
  types. Example: `"type.googleapis.com/google.protobuf.Timestamp"`.
definitions.Field.properties.typeUrl.type: string
definitions.Field.type: object
definitions.Http.description: |-
  Defines the HTTP configuration for an API service. It contains a list of
  HttpRule, each specifying the mapping of an RPC method
  to one or more HTTP REST API methods.
definitions.Http.properties.fullyDecodeReservedExpansion.description: |-
  When set to true, URL path parmeters will be fully URI-decoded except in
  cases of single segment matches in reserved expansion, where "%2F" will be
  left encoded.

  The default behavior is to not decode RFC 6570 reserved characters in multi
  segment matches.
definitions.Http.properties.fullyDecodeReservedExpansion.type: boolean
definitions.Http.properties.rules.description: |-
  A list of HTTP configuration rules that apply to individual API methods.

  **NOTE:** All service configuration rules follow "last one wins" order.
definitions.Http.properties.rules.items.$ref: '#/definitions/HttpRule'
definitions.Http.properties.rules.type: array
definitions.Http.type: object
definitions.HttpRule.description: |-
  `HttpRule` defines the mapping of an RPC method to one or more HTTP
  REST API methods. The mapping specifies how different portions of the RPC
  request message are mapped to URL path, URL query parameters, and
  HTTP request body. The mapping is typically specified as an
  `google.api.http` annotation on the RPC method,
  see "google/api/annotations.proto" for details.

  The mapping consists of a field specifying the path template and
  method kind.  The path template can refer to fields in the request
  message, as in the example below which describes a REST GET
  operation on a resource collection of messages:


      service Messaging {
        rpc GetMessage(GetMessageRequest) returns (Message) {
          option (google.api.http).get = "/v1/messages/{message_id}/{sub.subfield}";
        }
      }
      message GetMessageRequest {
        message SubMessage {
          string subfield = 1;
        }
        string message_id = 1; // mapped to the URL
        SubMessage sub = 2;    // `sub.subfield` is url-mapped
      }
      message Message {
        string text = 1; // content of the resource
      }

  The same http annotation can alternatively be expressed inside the
  `GRPC API Configuration` YAML file.

      http:
        rules:
          - selector: <proto_package_name>.Messaging.GetMessage
            get: /v1/messages/{message_id}/{sub.subfield}

  This definition enables an automatic, bidrectional mapping of HTTP
  JSON to RPC. Example:

  HTTP | RPC
  -----|-----
  `GET /v1/messages/123456/foo`  | `GetMessage(message_id: "123456" sub: SubMessage(subfield: "foo"))`

  In general, not only fields but also field paths can be referenced
  from a path pattern. Fields mapped to the path pattern cannot be
  repeated and must have a primitive (non-message) type.

  Any fields in the request message which are not bound by the path
  pattern automatically become (optional) HTTP query
  parameters. Assume the following definition of the request message:


      service Messaging {
        rpc GetMessage(GetMessageRequest) returns (Message) {
          option (google.api.http).get = "/v1/messages/{message_id}";
        }
      }
      message GetMessageRequest {
        message SubMessage {
          string subfield = 1;
        }
        string message_id = 1; // mapped to the URL
        int64 revision = 2;    // becomes a parameter
        SubMessage sub = 3;    // `sub.subfield` becomes a parameter
      }


  This enables a HTTP JSON to RPC mapping as below:

  HTTP | RPC
  -----|-----
  `GET /v1/messages/123456?revision=2&sub.subfield=foo` | `GetMessage(message_id: "123456" revision: 2 sub: SubMessage(subfield: "foo"))`

  Note that fields which are mapped to HTTP parameters must have a
  primitive type or a repeated primitive type. Message types are not
  allowed. In the case of a repeated type, the parameter can be
  repeated in the URL, as in `...?param=A&param=B`.

  For HTTP method kinds which allow a request body, the `body` field
  specifies the mapping. Consider a REST update method on the
  message resource collection:


      service Messaging {
        rpc UpdateMessage(UpdateMessageRequest) returns (Message) {
          option (google.api.http) = {
            put: "/v1/messages/{message_id}"
            body: "message"
          };
        }
      }
      message UpdateMessageRequest {
        string message_id = 1; // mapped to the URL
        Message message = 2;   // mapped to the body
      }


  The following HTTP JSON to RPC mapping is enabled, where the
  representation of the JSON in the request body is determined by
  protos JSON encoding:

  HTTP | RPC
  -----|-----
  `PUT /v1/messages/123456 { "text": "Hi!" }` | `UpdateMessage(message_id: "123456" message { text: "Hi!" })`

  The special name `*` can be used in the body mapping to define that
  every field not bound by the path template should be mapped to the
  request body.  This enables the following alternative definition of
  the update method:

      service Messaging {
        rpc UpdateMessage(Message) returns (Message) {
          option (google.api.http) = {
            put: "/v1/messages/{message_id}"
            body: "*"
          };
        }
      }
      message Message {
        string message_id = 1;
        string text = 2;
      }


  The following HTTP JSON to RPC mapping is enabled:

  HTTP | RPC
  -----|-----
  `PUT /v1/messages/123456 { "text": "Hi!" }` | `UpdateMessage(message_id: "123456" text: "Hi!")`

  Note that when using `*` in the body mapping, it is not possible to
  have HTTP parameters, as all fields not bound by the path end in
  the body. This makes this option more rarely used in practice of
  defining REST APIs. The common usage of `*` is in custom methods
  which don't use the URL at all for transferring data.

  It is possible to define multiple HTTP methods for one RPC by using
  the `additional_bindings` option. Example:

      service Messaging {
        rpc GetMessage(GetMessageRequest) returns (Message) {
          option (google.api.http) = {
            get: "/v1/messages/{message_id}"
            additional_bindings {
              get: "/v1/users/{user_id}/messages/{message_id}"
            }
          };
        }
      }
      message GetMessageRequest {
        string message_id = 1;
        string user_id = 2;
      }


  This enables the following two alternative HTTP JSON to RPC
  mappings:

  HTTP | RPC
  -----|-----
  `GET /v1/messages/123456` | `GetMessage(message_id: "123456")`
  `GET /v1/users/me/messages/123456` | `GetMessage(user_id: "me" message_id: "123456")`

  # Rules for HTTP mapping

  The rules for mapping HTTP path, query parameters, and body fields
  to the request message are as follows:

  1. The `body` field specifies either `*` or a field path, or is
     omitted. If omitted, it indicates there is no HTTP request body.
  2. Leaf fields (recursive expansion of nested messages in the
     request) can be classified into three types:
      (a) Matched in the URL template.
      (b) Covered by body (if body is `*`, everything except (a) fields;
          else everything under the body field)
      (c) All other fields.
  3. URL query parameters found in the HTTP request are mapped to (c) fields.
  4. Any body sent with an HTTP request can contain only (b) fields.

  The syntax of the path template is as follows:

      Template = "/" Segments [ Verb ] ;
      Segments = Segment { "/" Segment } ;
      Segment  = "*" | "**" | LITERAL | Variable ;
      Variable = "{" FieldPath [ "=" Segments ] "}" ;
      FieldPath = IDENT { "." IDENT } ;
      Verb     = ":" LITERAL ;

  The syntax `*` matches a single path segment. The syntax `**` matches zero
  or more path segments, which must be the last part of the path except the
  `Verb`. The syntax `LITERAL` matches literal text in the path.

  The syntax `Variable` matches part of the URL path as specified by its
  template. A variable template must not contain other variables. If a variable
  matches a single path segment, its template may be omitted, e.g. `{var}`
  is equivalent to `{var=*}`.

  If a variable contains exactly one path segment, such as `"{var}"` or
  `"{var=*}"`, when such a variable is expanded into a URL path, all characters
  except `[-_.~0-9a-zA-Z]` are percent-encoded. Such variables show up in the
  Discovery Document as `{var}`.

  If a variable contains one or more path segments, such as `"{var=foo/*}"`
  or `"{var=**}"`, when such a variable is expanded into a URL path, all
  characters except `[-_.~/0-9a-zA-Z]` are percent-encoded. Such variables
  show up in the Discovery Document as `{+var}`.

  NOTE: While the single segment variable matches the semantics of
  [RFC 6570](https://tools.ietf.org/html/rfc6570) Section 3.2.2
  Simple String Expansion, the multi segment variable **does not** match
  RFC 6570 Reserved Expansion. The reason is that the Reserved Expansion
  does not expand special characters like `?` and `#`, which would lead
  to invalid URLs.

  NOTE: the field paths in variables and in the `body` must not refer to
  repeated fields or map fields.
definitions.HttpRule.properties.additionalBindings.description: |-
  Additional HTTP bindings for the selector. Nested bindings must
  not contain an `additional_bindings` field themselves (that is,
  the nesting may only be one level deep).
definitions.HttpRule.properties.additionalBindings.items.$ref: '#/definitions/HttpRule'
definitions.HttpRule.properties.additionalBindings.type: array
definitions.HttpRule.properties.body.description: |-
  The name of the request field whose value is mapped to the HTTP body, or
  `*` for mapping all fields not captured by the path pattern to the HTTP
  body. NOTE: the referred field must not be a repeated field and must be
  present at the top-level of request message type.
definitions.HttpRule.properties.body.type: string
definitions.HttpRule.properties.custom.$ref: '#/definitions/CustomHttpPattern'
definitions.HttpRule.properties.custom.description: |-
  The custom pattern is used for specifying an HTTP method that is not
  included in the `pattern` field, such as HEAD, or "*" to leave the
  HTTP method unspecified for this rule. The wild-card rule is useful
  for services that provide content to Web (HTML) clients.
definitions.HttpRule.properties.delete.description: Used for deleting a resource.
definitions.HttpRule.properties.delete.type: string
definitions.HttpRule.properties.get.description: Used for listing and getting information
  about resources.
definitions.HttpRule.properties.get.type: string
definitions.HttpRule.properties.mediaDownload.$ref: '#/definitions/MediaDownload'
definitions.HttpRule.properties.mediaDownload.description: |-
  Use this only for Scotty Requests. Do not use this for bytestream methods.
  For media support, add instead [][google.bytestream.RestByteStream] as an
  API to your configuration.
definitions.HttpRule.properties.mediaUpload.$ref: '#/definitions/MediaUpload'
definitions.HttpRule.properties.mediaUpload.description: |-
  Use this only for Scotty Requests. Do not use this for media support using
  Bytestream, add instead
  [][google.bytestream.RestByteStream] as an API to your
  configuration for Bytestream methods.
definitions.HttpRule.properties.patch.description: Used for updating a resource.
definitions.HttpRule.properties.patch.type: string
definitions.HttpRule.properties.post.description: Used for creating a resource.
definitions.HttpRule.properties.post.type: string
definitions.HttpRule.properties.put.description: Used for updating a resource.
definitions.HttpRule.properties.put.type: string
definitions.HttpRule.properties.responseBody.description: |-
  The name of the response field whose value is mapped to the HTTP body of
  response. Other response fields are ignored. This field is optional. When
  not set, the response message will be used as HTTP body of response.
  NOTE: the referred field must be not a repeated field and must be present
  at the top-level of response message type.
definitions.HttpRule.properties.responseBody.type: string
definitions.HttpRule.properties.selector.description: |-
  Selects methods to which this rule applies.

  Refer to selector for syntax details.
definitions.HttpRule.properties.selector.type: string
definitions.HttpRule.type: object
definitions.LabelDescriptor.description: A description of a label.
definitions.LabelDescriptor.properties.description.description: A human-readable description
  for the label.
definitions.LabelDescriptor.properties.description.type: string
definitions.LabelDescriptor.properties.key.description: The label key.
definitions.LabelDescriptor.properties.key.type: string
definitions.LabelDescriptor.properties.valueType.description: The type of data that
  can be assigned to the label.
definitions.LabelDescriptor.properties.valueType.enum.length: 3
definitions.LabelDescriptor.properties.valueType.enum[0]: STRING
definitions.LabelDescriptor.properties.valueType.enum[1]: BOOL
definitions.LabelDescriptor.properties.valueType.enum[2]: INT64
definitions.LabelDescriptor.properties.valueType.type: string
definitions.LabelDescriptor.type: object
definitions.ListEnabledServicesResponse.description: Response message for `ListEnabledServices`
  method.
definitions.ListEnabledServicesResponse.properties.nextPageToken.description: |-
  Token that can be passed to `ListEnabledServices` to resume a paginated
  query.
definitions.ListEnabledServicesResponse.properties.nextPageToken.type: string
definitions.ListEnabledServicesResponse.properties.services.description: Services
  enabled for the specified parent.
definitions.ListEnabledServicesResponse.properties.services.items.$ref: '#/definitions/PublishedService'
definitions.ListEnabledServicesResponse.properties.services.type: array
definitions.ListEnabledServicesResponse.type: object
definitions.LogDescriptor.description: |-
  A description of a log type. Example in YAML format:

      - name: library.googleapis.com/activity_history
        description: The history of borrowing and returning library items.
        display_name: Activity
        labels:
        - key: /customer_id
          description: Identifier of a library customer
definitions.LogDescriptor.properties.description.description: |-
  A human-readable description of this log. This information appears in
  the documentation and can contain details.
definitions.LogDescriptor.properties.description.type: string
definitions.LogDescriptor.properties.displayName.description: |-
  The human-readable name for this log. This information appears on
  the user interface and should be concise.
definitions.LogDescriptor.properties.displayName.type: string
definitions.LogDescriptor.properties.labels.description: |-
  The set of labels that are available to describe a specific log entry.
  Runtime requests that contain labels not specified here are
  considered invalid.
definitions.LogDescriptor.properties.labels.items.$ref: '#/definitions/LabelDescriptor'
definitions.LogDescriptor.properties.labels.type: array
definitions.LogDescriptor.properties.name.description: |-
  The name of the log. It must be less than 512 characters long and can
  include the following characters: upper- and lower-case alphanumeric
  characters [A-Za-z0-9], and punctuation characters including
  slash, underscore, hyphen, period [/_-.].
definitions.LogDescriptor.properties.name.type: string
definitions.LogDescriptor.type: object
definitions.Logging.description: |-
  Logging configuration of the service.

  The following example shows how to configure logs to be sent to the
  producer and consumer projects. In the example, the `activity_history`
  log is sent to both the producer and consumer projects, whereas the
  `purchase_history` log is only sent to the producer project.

      monitored_resources:
      - type: library.googleapis.com/branch
        labels:
        - key: /city
          description: The city where the library branch is located in.
        - key: /name
          description: The name of the branch.
      logs:
      - name: activity_history
        labels:
        - key: /customer_id
      - name: purchase_history
      logging:
        producer_destinations:
        - monitored_resource: library.googleapis.com/branch
          logs:
          - activity_history
          - purchase_history
        consumer_destinations:
        - monitored_resource: library.googleapis.com/branch
          logs:
          - activity_history
definitions.Logging.properties.consumerDestinations.description: |-
  Logging configurations for sending logs to the consumer project.
  There can be multiple consumer destinations, each one must have a
  different monitored resource type. A log can be used in at most
  one consumer destination.
definitions.Logging.properties.consumerDestinations.items.$ref: '#/definitions/LoggingDestination'
definitions.Logging.properties.consumerDestinations.type: array
definitions.Logging.properties.producerDestinations.description: |-
  Logging configurations for sending logs to the producer project.
  There can be multiple producer destinations, each one must have a
  different monitored resource type. A log can be used in at most
  one producer destination.
definitions.Logging.properties.producerDestinations.items.$ref: '#/definitions/LoggingDestination'
definitions.Logging.properties.producerDestinations.type: array
definitions.Logging.type: object
definitions.LoggingDestination.description: |-
  Configuration of a specific logging destination (the producer project
  or the consumer project).
definitions.LoggingDestination.properties.logs.description: |-
  Names of the logs to be sent to this destination. Each name must
  be defined in the Service.logs section. If the log name is
  not a domain scoped name, it will be automatically prefixed with
  the service name followed by "/".
definitions.LoggingDestination.properties.logs.items.type: string
definitions.LoggingDestination.properties.logs.type: array
definitions.LoggingDestination.properties.monitoredResource.description: |-
  The monitored resource type. The type must be defined in the
  Service.monitored_resources section.
definitions.LoggingDestination.properties.monitoredResource.type: string
definitions.LoggingDestination.type: object
definitions.MediaDownload.description: |-
  Defines the Media configuration for a service in case of a download.
  Use this only for Scotty Requests. Do not use this for media support using
  Bytestream, add instead [][google.bytestream.RestByteStream] as an API to
  your configuration for Bytestream methods.
definitions.MediaDownload.properties.completeNotification.description: |-
  A boolean that determines whether a notification for the completion of a
  download should be sent to the backend.
definitions.MediaDownload.properties.completeNotification.type: boolean
definitions.MediaDownload.properties.downloadService.description: |-
  DO NOT USE FIELDS BELOW THIS LINE UNTIL THIS WARNING IS REMOVED.

  Specify name of the download service if one is used for download.
definitions.MediaDownload.properties.downloadService.type: string
definitions.MediaDownload.properties.dropzone.description: Name of the Scotty dropzone
  to use for the current API.
definitions.MediaDownload.properties.dropzone.type: string
definitions.MediaDownload.properties.enabled.description: Whether download is enabled.
definitions.MediaDownload.properties.enabled.type: boolean
definitions.MediaDownload.properties.maxDirectDownloadSize.description: |-
  Optional maximum acceptable size for direct download.
  The size is specified in bytes.
definitions.MediaDownload.properties.maxDirectDownloadSize.format: int64
definitions.MediaDownload.properties.maxDirectDownloadSize.type: string
definitions.MediaDownload.properties.useDirectDownload.description: |-
  A boolean that determines if direct download from ESF should be used for
  download of this media.
definitions.MediaDownload.properties.useDirectDownload.type: boolean
definitions.MediaDownload.type: object
definitions.MediaUpload.description: |-
  Defines the Media configuration for a service in case of an upload.
  Use this only for Scotty Requests. Do not use this for media support using
  Bytestream, add instead [][google.bytestream.RestByteStream] as an API to
  your configuration for Bytestream methods.
definitions.MediaUpload.properties.completeNotification.description: |-
  A boolean that determines whether a notification for the completion of an
  upload should be sent to the backend. These notifications will not be seen
  by the client and will not consume quota.
definitions.MediaUpload.properties.completeNotification.type: boolean
definitions.MediaUpload.properties.dropzone.description: Name of the Scotty dropzone
  to use for the current API.
definitions.MediaUpload.properties.dropzone.type: string
definitions.MediaUpload.properties.enabled.description: Whether upload is enabled.
definitions.MediaUpload.properties.enabled.type: boolean
definitions.MediaUpload.properties.maxSize.description: |-
  Optional maximum acceptable size for an upload.
  The size is specified in bytes.
definitions.MediaUpload.properties.maxSize.format: int64
definitions.MediaUpload.properties.maxSize.type: string
definitions.MediaUpload.properties.mimeTypes.description: |-
  An array of mimetype patterns. Esf will only accept uploads that match one
  of the given patterns.
definitions.MediaUpload.properties.mimeTypes.items.type: string
definitions.MediaUpload.properties.mimeTypes.type: array
definitions.MediaUpload.properties.progressNotification.description: Whether to receive
  a notification for progress changes of media upload.
definitions.MediaUpload.properties.progressNotification.type: boolean
definitions.MediaUpload.properties.startNotification.description: Whether to receive
  a notification on the start of media upload.
definitions.MediaUpload.properties.startNotification.type: boolean
definitions.MediaUpload.properties.uploadService.description: |-
  DO NOT USE FIELDS BELOW THIS LINE UNTIL THIS WARNING IS REMOVED.

  Specify name of the upload service if one is used for upload.
definitions.MediaUpload.properties.uploadService.type: string
definitions.MediaUpload.type: object
definitions.Method.description: Method represents a method of an API interface.
definitions.Method.properties.name.description: The simple name of this method.
definitions.Method.properties.name.type: string
definitions.Method.properties.options.description: Any metadata attached to the method.
definitions.Method.properties.options.items.$ref: '#/definitions/Option'
definitions.Method.properties.options.type: array
definitions.Method.properties.requestStreaming.description: If true, the request is
  streamed.
definitions.Method.properties.requestStreaming.type: boolean
definitions.Method.properties.requestTypeUrl.description: A URL of the input message
  type.
definitions.Method.properties.requestTypeUrl.type: string
definitions.Method.properties.responseStreaming.description: If true, the response
  is streamed.
definitions.Method.properties.responseStreaming.type: boolean
definitions.Method.properties.responseTypeUrl.description: The URL of the output message
  type.
definitions.Method.properties.responseTypeUrl.type: string
definitions.Method.properties.syntax.description: The source syntax of this method.
definitions.Method.properties.syntax.enum.length: 2
definitions.Method.properties.syntax.enum[0]: SYNTAX_PROTO2
definitions.Method.properties.syntax.enum[1]: SYNTAX_PROTO3
definitions.Method.properties.syntax.type: string
definitions.Method.type: object
definitions.MetricDescriptor.description: |-
  Defines a metric type and its schema. Once a metric descriptor is created,
  deleting or altering it stops data collection and makes the metric type's
  existing data unusable.
definitions.MetricDescriptor.properties.description.description: A detailed description
  of the metric, which can be used in documentation.
definitions.MetricDescriptor.properties.description.type: string
definitions.MetricDescriptor.properties.displayName.description: |-
  A concise name for the metric, which can be displayed in user interfaces.
  Use sentence case without an ending period, for example "Request count".
definitions.MetricDescriptor.properties.displayName.type: string
definitions.MetricDescriptor.properties.labels.description: |-
  The set of labels that can be used to describe a specific
  instance of this metric type. For example, the
  `appengine.googleapis.com/http/server/response_latencies` metric
  type has a label for the HTTP response code, `response_code`, so
  you can look at latencies for successful responses or just
  for responses that failed.
definitions.MetricDescriptor.properties.labels.items.$ref: '#/definitions/LabelDescriptor'
definitions.MetricDescriptor.properties.labels.type: array
definitions.MetricDescriptor.properties.metricKind.description: |-
  Whether the metric records instantaneous values, changes to a value, etc.
  Some combinations of `metric_kind` and `value_type` might not be supported.
definitions.MetricDescriptor.properties.metricKind.enum.length: 4
definitions.MetricDescriptor.properties.metricKind.enum[0]: METRIC_KIND_UNSPECIFIED
definitions.MetricDescriptor.properties.metricKind.enum[1]: GAUGE
definitions.MetricDescriptor.properties.metricKind.enum[2]: DELTA
definitions.MetricDescriptor.properties.metricKind.enum[3]: CUMULATIVE
definitions.MetricDescriptor.properties.metricKind.type: string
definitions.MetricDescriptor.properties.name.description: |-
  The resource name of the metric descriptor. Depending on the
  implementation, the name typically includes: (1) the parent resource name
  that defines the scope of the metric type or of its data; and (2) the
  metric's URL-encoded type, which also appears in the `type` field of this
  descriptor. For example, following is the resource name of a custom
  metric within the GCP project `my-project-id`:

      "projects/my-project-id/metricDescriptors/custom.googleapis.com%2Finvoice%2Fpaid%2Famount"
definitions.MetricDescriptor.properties.name.type: string
definitions.MetricDescriptor.properties.type.description: |-
  The metric type, including its DNS name prefix. The type is not
  URL-encoded.  All user-defined custom metric types have the DNS name
  `custom.googleapis.com`.  Metric types should use a natural hierarchical
  grouping. For example:

      "custom.googleapis.com/invoice/paid/amount"
      "appengine.googleapis.com/http/server/response_latencies"
definitions.MetricDescriptor.properties.type.type: string
definitions.MetricDescriptor.properties.unit.description: |-
  The unit in which the metric value is reported. It is only applicable
  if the `value_type` is `INT64`, `DOUBLE`, or `DISTRIBUTION`. The
  supported units are a subset of [The Unified Code for Units of
  Measure](http://unitsofmeasure.org/ucum.html) standard:

  **Basic units (UNIT)**

  * `bit`   bit
  * `By`    byte
  * `s`     second
  * `min`   minute
  * `h`     hour
  * `d`     day

  **Prefixes (PREFIX)**

  * `k`     kilo    (10**3)
  * `M`     mega    (10**6)
  * `G`     giga    (10**9)
  * `T`     tera    (10**12)
  * `P`     peta    (10**15)
  * `E`     exa     (10**18)
  * `Z`     zetta   (10**21)
  * `Y`     yotta   (10**24)
  * `m`     milli   (10**-3)
  * `u`     micro   (10**-6)
  * `n`     nano    (10**-9)
  * `p`     pico    (10**-12)
  * `f`     femto   (10**-15)
  * `a`     atto    (10**-18)
  * `z`     zepto   (10**-21)
  * `y`     yocto   (10**-24)
  * `Ki`    kibi    (2**10)
  * `Mi`    mebi    (2**20)
  * `Gi`    gibi    (2**30)
  * `Ti`    tebi    (2**40)

  **Grammar**

  The grammar includes the dimensionless unit `1`, such as `1/s`.

  The grammar also includes these connectors:

  * `/`    division (as an infix operator, e.g. `1/s`).
  * `.`    multiplication (as an infix operator, e.g. `GBy.d`)

  The grammar for a unit is as follows:

      Expression = Component { "." Component } { "/" Component } ;

      Component = [ PREFIX ] UNIT [ Annotation ]
                | Annotation
                | "1"
                ;

      Annotation = "{" NAME "}" ;

  Notes:

  * `Annotation` is just a comment if it follows a `UNIT` and is
     equivalent to `1` if it is used alone. For examples,
     `{requests}/s == 1/s`, `By{transmitted}/s == By/s`.
  * `NAME` is a sequence of non-blank printable ASCII characters not
     containing '{' or '}'.
definitions.MetricDescriptor.properties.unit.type: string
definitions.MetricDescriptor.properties.valueType.description: |-
  Whether the measurement is an integer, a floating-point number, etc.
  Some combinations of `metric_kind` and `value_type` might not be supported.
definitions.MetricDescriptor.properties.valueType.enum.length: 7
definitions.MetricDescriptor.properties.valueType.enum[0]: VALUE_TYPE_UNSPECIFIED
definitions.MetricDescriptor.properties.valueType.enum[1]: BOOL
definitions.MetricDescriptor.properties.valueType.enum[2]: INT64
definitions.MetricDescriptor.properties.valueType.enum[3]: DOUBLE
definitions.MetricDescriptor.properties.valueType.enum[4]: STRING
definitions.MetricDescriptor.properties.valueType.enum[5]: DISTRIBUTION
definitions.MetricDescriptor.properties.valueType.enum[6]: MONEY
definitions.MetricDescriptor.properties.valueType.type: string
definitions.MetricDescriptor.type: object
definitions.MetricRule.description: |-
  Bind API methods to metrics. Binding a method to a metric causes that
  metric's configured quota behaviors to apply to the method call.
definitions.MetricRule.properties.metricCosts.additionalProperties.format: int64
definitions.MetricRule.properties.metricCosts.additionalProperties.type: string
definitions.MetricRule.properties.metricCosts.description: |-
  Metrics to update when the selected methods are called, and the associated
  cost applied to each metric.

  The key of the map is the metric name, and the values are the amount
  increased for the metric against which the quota limits are defined.
  The value must not be negative.
definitions.MetricRule.properties.metricCosts.type: object
definitions.MetricRule.properties.selector.description: |-
  Selects the methods to which this rule applies.

  Refer to selector for syntax details.
definitions.MetricRule.properties.selector.type: string
definitions.MetricRule.type: object
definitions.Mixin.description: |-
  Declares an API Interface to be included in this interface. The including
  interface must redeclare all the methods from the included interface, but
  documentation and options are inherited as follows:

  - If after comment and whitespace stripping, the documentation
    string of the redeclared method is empty, it will be inherited
    from the original method.

  - Each annotation belonging to the service config (http,
    visibility) which is not set in the redeclared method will be
    inherited.

  - If an http annotation is inherited, the path pattern will be
    modified as follows. Any version prefix will be replaced by the
    version of the including interface plus the root path if
    specified.

  Example of a simple mixin:

      package google.acl.v1;
      service AccessControl {
        // Get the underlying ACL object.
        rpc GetAcl(GetAclRequest) returns (Acl) {
          option (google.api.http).get = "/v1/{resource=**}:getAcl";
        }
      }

      package google.storage.v2;
      service Storage {
        //       rpc GetAcl(GetAclRequest) returns (Acl);

        // Get a data record.
        rpc GetData(GetDataRequest) returns (Data) {
          option (google.api.http).get = "/v2/{resource=**}";
        }
      }

  Example of a mixin configuration:

      apis:
      - name: google.storage.v2.Storage
        mixins:
        - name: google.acl.v1.AccessControl

  The mixin construct implies that all methods in `AccessControl` are
  also declared with same name and request/response types in
  `Storage`. A documentation generator or annotation processor will
  see the effective `Storage.GetAcl` method after inherting
  documentation and annotations as follows:

      service Storage {
        // Get the underlying ACL object.
        rpc GetAcl(GetAclRequest) returns (Acl) {
          option (google.api.http).get = "/v2/{resource=**}:getAcl";
        }
        ...
      }

  Note how the version in the path pattern changed from `v1` to `v2`.

  If the `root` field in the mixin is specified, it should be a
  relative path under which inherited HTTP paths are placed. Example:

      apis:
      - name: google.storage.v2.Storage
        mixins:
        - name: google.acl.v1.AccessControl
          root: acls

  This implies the following inherited HTTP annotation:

      service Storage {
        // Get the underlying ACL object.
        rpc GetAcl(GetAclRequest) returns (Acl) {
          option (google.api.http).get = "/v2/acls/{resource=**}:getAcl";
        }
        ...
      }
definitions.Mixin.properties.name.description: The fully qualified name of the interface
  which is included.
definitions.Mixin.properties.name.type: string
definitions.Mixin.properties.root.description: |-
  If non-empty specifies a path under which inherited HTTP paths
  are rooted.
definitions.Mixin.properties.root.type: string
definitions.Mixin.type: object
definitions.MonitoredResourceDescriptor.description: |-
  An object that describes the schema of a MonitoredResource object using a
  type name and a set of labels.  For example, the monitored resource
  descriptor for Google Compute Engine VM instances has a type of
  `"gce_instance"` and specifies the use of the labels `"instance_id"` and
  `"zone"` to identify particular VM instances.

  Different APIs can support different monitored resource types. APIs generally
  provide a `list` method that returns the monitored resource descriptors used
  by the API.
definitions.MonitoredResourceDescriptor.properties.description.description: |-
  Optional. A detailed description of the monitored resource type that might
  be used in documentation.
definitions.MonitoredResourceDescriptor.properties.description.type: string
definitions.MonitoredResourceDescriptor.properties.displayName.description: |-
  Optional. A concise name for the monitored resource type that might be
  displayed in user interfaces. It should be a Title Cased Noun Phrase,
  without any article or other determiners. For example,
  `"Google Cloud SQL Database"`.
definitions.MonitoredResourceDescriptor.properties.displayName.type: string
definitions.MonitoredResourceDescriptor.properties.labels.description: |-
  Required. A set of labels used to describe instances of this monitored
  resource type. For example, an individual Google Cloud SQL database is
  identified by values for the labels `"database_id"` and `"zone"`.
definitions.MonitoredResourceDescriptor.properties.labels.items.$ref: '#/definitions/LabelDescriptor'
definitions.MonitoredResourceDescriptor.properties.labels.type: array
definitions.MonitoredResourceDescriptor.properties.name.description: |-
  Optional. The resource name of the monitored resource descriptor:
  `"projects/{project_id}/monitoredResourceDescriptors/{type}"` where
  {type} is the value of the `type` field in this object and
  {project_id} is a project ID that provides API-specific context for
  accessing the type.  APIs that do not use project information can use the
  resource name format `"monitoredResourceDescriptors/{type}"`.
definitions.MonitoredResourceDescriptor.properties.name.type: string
definitions.MonitoredResourceDescriptor.properties.type.description: |-
  Required. The monitored resource type. For example, the type
  `"cloudsql_database"` represents databases in Google Cloud SQL.
  The maximum length of this value is 256 characters.
definitions.MonitoredResourceDescriptor.properties.type.type: string
definitions.MonitoredResourceDescriptor.type: object
definitions.Monitoring.description: |-
  Monitoring configuration of the service.

  The example below shows how to configure monitored resources and metrics
  for monitoring. In the example, a monitored resource and two metrics are
  defined. The `library.googleapis.com/book/returned_count` metric is sent
  to both producer and consumer projects, whereas the
  `library.googleapis.com/book/overdue_count` metric is only sent to the
  consumer project.

      monitored_resources:
      - type: library.googleapis.com/branch
        labels:
        - key: /city
          description: The city where the library branch is located in.
        - key: /name
          description: The name of the branch.
      metrics:
      - name: library.googleapis.com/book/returned_count
        metric_kind: DELTA
        value_type: INT64
        labels:
        - key: /customer_id
      - name: library.googleapis.com/book/overdue_count
        metric_kind: GAUGE
        value_type: INT64
        labels:
        - key: /customer_id
      monitoring:
        producer_destinations:
        - monitored_resource: library.googleapis.com/branch
          metrics:
          - library.googleapis.com/book/returned_count
        consumer_destinations:
        - monitored_resource: library.googleapis.com/branch
          metrics:
          - library.googleapis.com/book/returned_count
          - library.googleapis.com/book/overdue_count
definitions.Monitoring.properties.consumerDestinations.description: |-
  Monitoring configurations for sending metrics to the consumer project.
  There can be multiple consumer destinations, each one must have a
  different monitored resource type. A metric can be used in at most
  one consumer destination.
definitions.Monitoring.properties.consumerDestinations.items.$ref: '#/definitions/MonitoringDestination'
definitions.Monitoring.properties.consumerDestinations.type: array
definitions.Monitoring.properties.producerDestinations.description: |-
  Monitoring configurations for sending metrics to the producer project.
  There can be multiple producer destinations, each one must have a
  different monitored resource type. A metric can be used in at most
  one producer destination.
definitions.Monitoring.properties.producerDestinations.items.$ref: '#/definitions/MonitoringDestination'
definitions.Monitoring.properties.producerDestinations.type: array
definitions.Monitoring.type: object
definitions.MonitoringDestination.description: |-
  Configuration of a specific monitoring destination (the producer project
  or the consumer project).
definitions.MonitoringDestination.properties.metrics.description: |-
  Names of the metrics to report to this monitoring destination.
  Each name must be defined in Service.metrics section.
definitions.MonitoringDestination.properties.metrics.items.type: string
definitions.MonitoringDestination.properties.metrics.type: array
definitions.MonitoringDestination.properties.monitoredResource.description: |-
  The monitored resource type. The type must be defined in
  Service.monitored_resources section.
definitions.MonitoringDestination.properties.monitoredResource.type: string
definitions.MonitoringDestination.type: object
definitions.OAuthRequirements.description: |-
  OAuth scopes are a way to define data and permissions on data. For example,
  there are scopes defined for "Read-only access to Google Calendar" and
  "Access to Cloud Platform". Users can consent to a scope for an application,
  giving it permission to access that data on their behalf.

  OAuth scope specifications should be fairly coarse grained; a user will need
  to see and understand the text description of what your scope means.

  In most cases: use one or at most two OAuth scopes for an entire family of
  products. If your product has multiple APIs, you should probably be sharing
  the OAuth scope across all of those APIs.

  When you need finer grained OAuth consent screens: talk with your product
  management about how developers will use them in practice.

  Please note that even though each of the canonical scopes is enough for a
  request to be accepted and passed to the backend, a request can still fail
  due to the backend requiring additional scopes or permissions.
definitions.OAuthRequirements.properties.canonicalScopes.description: |-
  The list of publicly documented OAuth scopes that are allowed access. An
  OAuth token containing any of these scopes will be accepted.

  Example:

       canonical_scopes: https://www.googleapis.com/auth/calendar,
                         https://www.googleapis.com/auth/calendar.read
definitions.OAuthRequirements.properties.canonicalScopes.type: string
definitions.OAuthRequirements.type: object
definitions.Operation.description: |-
  This resource represents a long-running operation that is the result of a
  network API call.
definitions.Operation.properties.done.description: |-
  If the value is `false`, it means the operation is still in progress.
  If `true`, the operation is completed, and either `error` or `response` is
  available.
definitions.Operation.properties.done.type: boolean
definitions.Operation.properties.error.$ref: '#/definitions/Status'
definitions.Operation.properties.error.description: The error result of the operation
  in case of failure or cancellation.
definitions.Operation.properties.metadata.additionalProperties.description: Properties
  of the object. Contains field @type with type URL.
definitions.Operation.properties.metadata.description: |-
  Service-specific metadata associated with the operation.  It typically
  contains progress information and common metadata such as create time.
  Some services might not provide such metadata.  Any method that returns a
  long-running operation should document the metadata type, if any.
definitions.Operation.properties.metadata.type: object
definitions.Operation.properties.name.description: |-
  The server-assigned name, which is only unique within the same service that
  originally returns it. If you use the default HTTP mapping, the
  `name` should have the format of `operations/some/unique/name`.
definitions.Operation.properties.name.type: string
definitions.Operation.properties.response.additionalProperties.description: Properties
  of the object. Contains field @type with type URL.
definitions.Operation.properties.response.description: |-
  The normal response of the operation in case of success.  If the original
  method returns no data on success, such as `Delete`, the response is
  `google.protobuf.Empty`.  If the original method is standard
  `Get`/`Create`/`Update`, the response should be the resource.  For other
  methods, the response should have the type `XxxResponse`, where `Xxx`
  is the original method name.  For example, if the original method name
  is `TakeSnapshot()`, the inferred response type is
  `TakeSnapshotResponse`.
definitions.Operation.properties.response.type: object
definitions.Operation.type: object
definitions.OperationMetadata.description: The metadata associated with a long running
  operation resource.
definitions.OperationMetadata.properties.progressPercentage.description: Percentage
  of completion of this operation, ranging from 0 to 100.
definitions.OperationMetadata.properties.progressPercentage.format: int32
definitions.OperationMetadata.properties.progressPercentage.type: integer
definitions.OperationMetadata.properties.resourceNames.description: |-
  The full name of the resources that this operation is directly
  associated with.
definitions.OperationMetadata.properties.resourceNames.items.type: string
definitions.OperationMetadata.properties.resourceNames.type: array
definitions.OperationMetadata.properties.startTime.description: The start time of
  the operation.
definitions.OperationMetadata.properties.startTime.format: google-datetime
definitions.OperationMetadata.properties.startTime.type: string
definitions.OperationMetadata.properties.steps.description: Detailed status information
  for each step. The order is undetermined.
definitions.OperationMetadata.properties.steps.items.$ref: '#/definitions/Step'
definitions.OperationMetadata.properties.steps.type: array
definitions.OperationMetadata.type: object
definitions.Option.description: |-
  A protocol buffer option, which can be attached to a message, field,
  enumeration, etc.
definitions.Option.properties.name.description: |-
  The option's name. For protobuf built-in options (options defined in
  descriptor.proto), this is the short name. For example, `"map_entry"`.
  For custom options, it should be the fully-qualified name. For example,
  `"google.api.http"`.
definitions.Option.properties.name.type: string
definitions.Option.properties.value.additionalProperties.description: Properties of
  the object. Contains field @type with type URL.
definitions.Option.properties.value.description: |-
  The option's value packed in an Any message. If the value is a primitive,
  the corresponding wrapper type defined in google/protobuf/wrappers.proto
  should be used. If the value is an enum, it should be stored as an int32
  value using the google.protobuf.Int32Value type.
definitions.Option.properties.value.type: object
definitions.Option.type: object
definitions.Page.description: |-
  Represents a documentation page. A page can contain subpages to represent
  nested documentation set structure.
definitions.Page.properties.content.description: |-
  The Markdown content of the page. You can use <code>&#40;== include {path} ==&#41;</code>
  to include content from a Markdown file.
definitions.Page.properties.content.type: string
definitions.Page.properties.name.description: |-
  The name of the page. It will be used as an identity of the page to
  generate URI of the page, text of the link to this page in navigation,
  etc. The full page name (start from the root page name to this page
  concatenated with `.`) can be used as reference to the page in your
  documentation. For example:
  <pre><code>pages:
  - name: Tutorial
    content: &#40;== include tutorial.md ==&#41;
    subpages:
    - name: Java
      content: &#40;== include tutorial_java.md ==&#41;
  </code></pre>
  You can reference `Java` page using Markdown reference link syntax:
  `Java`.
definitions.Page.properties.name.type: string
definitions.Page.properties.subpages.description: |-
  Subpages of this page. The order of subpages specified here will be
  honored in the generated docset.
definitions.Page.properties.subpages.items.$ref: '#/definitions/Page'
definitions.Page.properties.subpages.type: array
definitions.Page.type: object
definitions.PublishedService.description: |-
  The published version of a Service that is managed by
  Google Service Management.
definitions.PublishedService.properties.name.description: |-
  The resource name of the service.

  A valid name would be:
  - services/serviceuser.googleapis.com
definitions.PublishedService.properties.name.type: string
definitions.PublishedService.properties.service.$ref: '#/definitions/Service'
definitions.PublishedService.properties.service.description: The service's published
  configuration.
definitions.PublishedService.type: object
definitions.Quota.description: |-
  Quota configuration helps to achieve fairness and budgeting in service
  usage.

  The quota configuration works this way:
  - The service configuration defines a set of metrics.
  - For API calls, the quota.metric_rules maps methods to metrics with
    corresponding costs.
  - The quota.limits defines limits on the metrics, which will be used for
    quota checks at runtime.

  An example quota configuration in yaml format:

     quota:

       - name: apiWriteQpsPerProject
         metric: library.googleapis.com/write_calls
         unit: "1/min/{project}"  # rate limit for consumer projects
         values:
           STANDARD: 10000


       # The metric rules bind all methods to the read_calls metric,
       # except for the UpdateBook and DeleteBook methods. These two methods
       # are mapped to the write_calls metric, with the UpdateBook method
       # consuming at twice rate as the DeleteBook method.
       metric_rules:
       - selector: "*"
         metric_costs:
           library.googleapis.com/read_calls: 1
       - selector: google.example.library.v1.LibraryService.UpdateBook
         metric_costs:
           library.googleapis.com/write_calls: 2
       - selector: google.example.library.v1.LibraryService.DeleteBook
         metric_costs:
           library.googleapis.com/write_calls: 1

   Corresponding Metric definition:

       metrics:
       - name: library.googleapis.com/read_calls
         display_name: Read requests
         metric_kind: DELTA
         value_type: INT64

       - name: library.googleapis.com/write_calls
         display_name: Write requests
         metric_kind: DELTA
         value_type: INT64
definitions.Quota.properties.limits.description: List of `QuotaLimit` definitions
  for the service.
definitions.Quota.properties.limits.items.$ref: '#/definitions/QuotaLimit'
definitions.Quota.properties.limits.type: array
definitions.Quota.properties.metricRules.description: |-
  List of `MetricRule` definitions, each one mapping a selected method to one
  or more metrics.
definitions.Quota.properties.metricRules.items.$ref: '#/definitions/MetricRule'
definitions.Quota.properties.metricRules.type: array
definitions.Quota.type: object
definitions.QuotaLimit.description: |-
  `QuotaLimit` defines a specific limit that applies over a specified duration
  for a limit type. There can be at most one limit for a duration and limit
  type combination defined within a `QuotaGroup`.
definitions.QuotaLimit.properties.defaultLimit.description: |-
  Default number of tokens that can be consumed during the specified
  duration. This is the number of tokens assigned when a client
  application developer activates the service for his/her project.

  Specifying a value of 0 will block all requests. This can be used if you
  are provisioning quota to selected consumers and blocking others.
  Similarly, a value of -1 will indicate an unlimited quota. No other
  negative values are allowed.

  Used by group-based quotas only.
definitions.QuotaLimit.properties.defaultLimit.format: int64
definitions.QuotaLimit.properties.defaultLimit.type: string
definitions.QuotaLimit.properties.description.description: |-
  Optional. User-visible, extended description for this quota limit.
  Should be used only when more context is needed to understand this limit
  than provided by the limit's display name (see: `display_name`).
definitions.QuotaLimit.properties.description.type: string
definitions.QuotaLimit.properties.displayName.description: |-
  User-visible display name for this limit.
  Optional. If not set, the UI will provide a default display name based on
  the quota configuration. This field can be used to override the default
  display name generated from the configuration.
definitions.QuotaLimit.properties.displayName.type: string
definitions.QuotaLimit.properties.duration.description: |-
  Duration of this limit in textual notation. Example: "100s", "24h", "1d".
  For duration longer than a day, only multiple of days is supported. We
  support only "100s" and "1d" for now. Additional support will be added in
  the future. "0" indicates indefinite duration.

  Used by group-based quotas only.
definitions.QuotaLimit.properties.duration.type: string
definitions.QuotaLimit.properties.freeTier.description: |-
  Free tier value displayed in the Developers Console for this limit.
  The free tier is the number of tokens that will be subtracted from the
  billed amount when billing is enabled.
  This field can only be set on a limit with duration "1d", in a billable
  group; it is invalid on any other limit. If this field is not set, it
  defaults to 0, indicating that there is no free tier for this service.

  Used by group-based quotas only.
definitions.QuotaLimit.properties.freeTier.format: int64
definitions.QuotaLimit.properties.freeTier.type: string
definitions.QuotaLimit.properties.maxLimit.description: |-
  Maximum number of tokens that can be consumed during the specified
  duration. Client application developers can override the default limit up
  to this maximum. If specified, this value cannot be set to a value less
  than the default limit. If not specified, it is set to the default limit.

  To allow clients to apply overrides with no upper bound, set this to -1,
  indicating unlimited maximum quota.

  Used by group-based quotas only.
definitions.QuotaLimit.properties.maxLimit.format: int64
definitions.QuotaLimit.properties.maxLimit.type: string
definitions.QuotaLimit.properties.metric.description: |-
  The name of the metric this quota limit applies to. The quota limits with
  the same metric will be checked together during runtime. The metric must be
  defined within the service config.

  Used by metric-based quotas only.
definitions.QuotaLimit.properties.metric.type: string
definitions.QuotaLimit.properties.name.description: |-
  Name of the quota limit. The name is used to refer to the limit when
  overriding the default limit on per-consumer basis.

  For metric-based quota limits, the name must be provided, and it must be
  unique within the service. The name can only include alphanumeric
  characters as well as '-'.

  The maximum length of the limit name is 64 characters.

  The name of a limit is used as a unique identifier for this limit.
  Therefore, once a limit has been put into use, its name should be
  immutable. You can use the display_name field to provide a user-friendly
  name for the limit. The display name can be evolved over time without
  affecting the identity of the limit.
definitions.QuotaLimit.properties.name.type: string
definitions.QuotaLimit.properties.unit.description: |-
  Specify the unit of the quota limit. It uses the same syntax as
  Metric.unit. The supported unit kinds are determined by the quota
  backend system.

  The [Google Service Control](https://cloud.google.com/service-control)
  supports the following unit components:
  * One of the time intevals:
    * "/min"  for quota every minute.
    * "/d"  for quota every 24 hours, starting 00:00 US Pacific Time.
    * Otherwise the quota won't be reset by time, such as storage limit.
  * One and only one of the granted containers:
    * "/{project}" quota for a project

  Here are some examples:
  * "1/min/{project}" for quota per minute per project.

  Note: the order of unit components is insignificant.
  The "1" at the beginning is required to follow the metric unit syntax.

  Used by metric-based quotas only.
definitions.QuotaLimit.properties.unit.type: string
definitions.QuotaLimit.properties.values.additionalProperties.format: int64
definitions.QuotaLimit.properties.values.additionalProperties.type: string
definitions.QuotaLimit.properties.values.description: Tiered limit values, currently
  only STANDARD is supported.
definitions.QuotaLimit.properties.values.type: object
definitions.QuotaLimit.type: object
definitions.SearchServicesResponse.description: Response message for SearchServices
  method.
definitions.SearchServicesResponse.properties.nextPageToken.description: |-
  Token that can be passed to `ListAvailableServices` to resume a paginated
  query.
definitions.SearchServicesResponse.properties.nextPageToken.type: string
definitions.SearchServicesResponse.properties.services.description: Services available
  publicly or available to the authenticated caller.
definitions.SearchServicesResponse.properties.services.items.$ref: '#/definitions/PublishedService'
definitions.SearchServicesResponse.properties.services.type: array
definitions.SearchServicesResponse.type: object
definitions.Service.description: |-
  `Service` is the root object of Google service configuration schema. It
  describes basic information about a service, such as the name and the
  title, and delegates other aspects to sub-sections. Each sub-section is
  either a proto message or a repeated proto message that configures a
  specific aspect, such as auth. See each proto message definition for details.

  Example:

      type: google.api.Service
      config_version: 3
      name: calendar.googleapis.com
      title: Google Calendar API
      apis:
      - name: google.calendar.v3.Calendar
      authentication:
        providers:
        - id: google_calendar_auth
          jwks_uri: https://www.googleapis.com/oauth2/v1/certs
          issuer: https://securetoken.google.com
        rules:
        - selector: "*"
          requirements:
            provider_id: google_calendar_auth
definitions.Service.properties.apis.description: |-
  A list of API interfaces exported by this service. Only the `name` field
  of the google.protobuf.Api needs to be provided by the configuration
  author, as the remaining fields will be derived from the IDL during the
  normalization process. It is an error to specify an API interface here
  which cannot be resolved against the associated IDL files.
definitions.Service.properties.apis.items.$ref: '#/definitions/Api'
definitions.Service.properties.apis.type: array
definitions.Service.properties.authentication.$ref: '#/definitions/Authentication'
definitions.Service.properties.authentication.description: Auth configuration.
definitions.Service.properties.backend.$ref: '#/definitions/Backend'
definitions.Service.properties.backend.description: API backend configuration.
definitions.Service.properties.billing.$ref: '#/definitions/Billing'
definitions.Service.properties.billing.description: Billing configuration.
definitions.Service.properties.configVersion.description: |-
  The semantic version of the service configuration. The config version
  affects the interpretation of the service configuration. For example,
  certain features are enabled by default for certain config versions.
  The latest config version is `3`.
definitions.Service.properties.configVersion.format: uint32
definitions.Service.properties.configVersion.type: integer
definitions.Service.properties.context.$ref: '#/definitions/Context'
definitions.Service.properties.context.description: Context configuration.
definitions.Service.properties.control.$ref: '#/definitions/Control'
definitions.Service.properties.control.description: Configuration for the service
  control plane.
definitions.Service.properties.customError.$ref: '#/definitions/CustomError'
definitions.Service.properties.customError.description: Custom error configuration.
definitions.Service.properties.documentation.$ref: '#/definitions/Documentation'
definitions.Service.properties.documentation.description: Additional API documentation.
definitions.Service.properties.endpoints.description: |-
  Configuration for network endpoints.  If this is empty, then an endpoint
  with the same name as the service is automatically generated to service all
  defined APIs.
definitions.Service.properties.endpoints.items.$ref: '#/definitions/Endpoint'
definitions.Service.properties.endpoints.type: array
definitions.Service.properties.enums.description: |-
  A list of all enum types included in this API service.  Enums
  referenced directly or indirectly by the `apis` are automatically
  included.  Enums which are not referenced but shall be included
  should be listed here by name. Example:

      enums:
      - name: google.someapi.v1.SomeEnum
definitions.Service.properties.enums.items.$ref: '#/definitions/Enum'
definitions.Service.properties.enums.type: array
definitions.Service.properties.experimental.$ref: '#/definitions/Experimental'
definitions.Service.properties.experimental.description: Experimental configuration.
definitions.Service.properties.http.$ref: '#/definitions/Http'
definitions.Service.properties.http.description: HTTP configuration.
definitions.Service.properties.id.description: |-
  A unique ID for a specific instance of this message, typically assigned
  by the client for tracking purpose. If empty, the server may choose to
  generate one instead.
definitions.Service.properties.id.type: string
definitions.Service.properties.logging.$ref: '#/definitions/Logging'
definitions.Service.properties.logging.description: Logging configuration.
definitions.Service.properties.logs.description: Defines the logs used by this service.
definitions.Service.properties.logs.items.$ref: '#/definitions/LogDescriptor'
definitions.Service.properties.logs.type: array
definitions.Service.properties.metrics.description: Defines the metrics used by this
  service.
definitions.Service.properties.metrics.items.$ref: '#/definitions/MetricDescriptor'
definitions.Service.properties.metrics.type: array
definitions.Service.properties.monitoredResources.description: |-
  Defines the monitored resources used by this service. This is required
  by the Service.monitoring and Service.logging configurations.
definitions.Service.properties.monitoredResources.items.$ref: '#/definitions/MonitoredResourceDescriptor'
definitions.Service.properties.monitoredResources.type: array
definitions.Service.properties.monitoring.$ref: '#/definitions/Monitoring'
definitions.Service.properties.monitoring.description: Monitoring configuration.
definitions.Service.properties.name.description: |-
  The DNS address at which this service is available,
  e.g. `calendar.googleapis.com`.
definitions.Service.properties.name.type: string
definitions.Service.properties.producerProjectId.description: The Google project that
  owns this service.
definitions.Service.properties.producerProjectId.type: string
definitions.Service.properties.quota.$ref: '#/definitions/Quota'
definitions.Service.properties.quota.description: Quota configuration.
definitions.Service.properties.sourceInfo.$ref: '#/definitions/SourceInfo'
definitions.Service.properties.sourceInfo.description: Output only. The source information
  for this configuration if available.
definitions.Service.properties.systemParameters.$ref: '#/definitions/SystemParameters'
definitions.Service.properties.systemParameters.description: System parameter configuration.
definitions.Service.properties.systemTypes.description: |-
  A list of all proto message types included in this API service.
  It serves similar purpose as [google.api.Service.types], except that
  these types are not needed by user-defined APIs. Therefore, they will not
  show up in the generated discovery doc. This field should only be used
  to define system APIs in ESF.
definitions.Service.properties.systemTypes.items.$ref: '#/definitions/Type'
definitions.Service.properties.systemTypes.type: array
definitions.Service.properties.title.description: The product title for this service.
definitions.Service.properties.title.type: string
definitions.Service.properties.types.description: |-
  A list of all proto message types included in this API service.
  Types referenced directly or indirectly by the `apis` are
  automatically included.  Messages which are not referenced but
  shall be included, such as types used by the `google.protobuf.Any` type,
  should be listed here by name. Example:

      types:
      - name: google.protobuf.Int32
definitions.Service.properties.types.items.$ref: '#/definitions/Type'
definitions.Service.properties.types.type: array
definitions.Service.properties.usage.$ref: '#/definitions/Usage'
definitions.Service.properties.usage.description: Configuration controlling usage
  of this service.
definitions.Service.properties.visibility.$ref: '#/definitions/Visibility'
definitions.Service.properties.visibility.description: API visibility configuration.
definitions.Service.type: object
definitions.SourceContext.description: |-
  `SourceContext` represents information about the source of a
  protobuf element, like the file in which it is defined.
definitions.SourceContext.properties.fileName.description: |-
  The path-qualified name of the .proto file that contained the associated
  protobuf element.  For example: `"google/protobuf/source_context.proto"`.
definitions.SourceContext.properties.fileName.type: string
definitions.SourceContext.type: object
definitions.SourceInfo.description: Source information used to create a Service Config
definitions.SourceInfo.properties.sourceFiles.description: All files used during config
  generation.
definitions.SourceInfo.properties.sourceFiles.items.additionalProperties.description: Properties
  of the object. Contains field @type with type URL.
definitions.SourceInfo.properties.sourceFiles.items.type: object
definitions.SourceInfo.properties.sourceFiles.type: array
definitions.SourceInfo.type: object
definitions.Status.description: |-
  The `Status` type defines a logical error model that is suitable for different
  programming environments, including REST APIs and RPC APIs. It is used by
  [gRPC](https://github.com/grpc). The error model is designed to be:

  - Simple to use and understand for most users
  - Flexible enough to meet unexpected needs

  # Overview

  The `Status` message contains three pieces of data: error code, error message,
  and error details. The error code should be an enum value of
  google.rpc.Code, but it may accept additional error codes if needed.  The
  error message should be a developer-facing English message that helps
  developers *understand* and *resolve* the error. If a localized user-facing
  error message is needed, put the localized message in the error details or
  localize it in the client. The optional error details may contain arbitrary
  information about the error. There is a predefined set of error detail types
  in the package `google.rpc` that can be used for common error conditions.

  # Language mapping

  The `Status` message is the logical representation of the error model, but it
  is not necessarily the actual wire format. When the `Status` message is
  exposed in different client libraries and different wire protocols, it can be
  mapped differently. For example, it will likely be mapped to some exceptions
  in Java, but more likely mapped to some error codes in C.

  # Other uses

  The error model and the `Status` message can be used in a variety of
  environments, either with or without APIs, to provide a
  consistent developer experience across different environments.

  Example uses of this error model include:

  - Partial errors. If a service needs to return partial errors to the client,
      it may embed the `Status` in the normal response to indicate the partial
      errors.

  - Workflow errors. A typical workflow has multiple steps. Each step may
      have a `Status` message for error reporting.

  - Batch operations. If a client uses batch request and batch response, the
      `Status` message should be used directly inside batch response, one for
      each error sub-response.

  - Asynchronous operations. If an API call embeds asynchronous operation
      results in its response, the status of those operations should be
      represented directly using the `Status` message.

  - Logging. If some API errors are stored in logs, the message `Status` could
      be used directly after any stripping needed for security/privacy reasons.
definitions.Status.properties.code.description: The status code, which should be an
  enum value of google.rpc.Code.
definitions.Status.properties.code.format: int32
definitions.Status.properties.code.type: integer
definitions.Status.properties.details.description: |-
  A list of messages that carry the error details.  There is a common set of
  message types for APIs to use.
definitions.Status.properties.details.items.additionalProperties.description: Properties
  of the object. Contains field @type with type URL.
definitions.Status.properties.details.items.type: object
definitions.Status.properties.details.type: array
definitions.Status.properties.message.description: |-
  A developer-facing error message, which should be in English. Any
  user-facing error message should be localized and sent in the
  google.rpc.Status.details field, or localized by the client.
definitions.Status.properties.message.type: string
definitions.Status.type: object
definitions.Step.description: Represents the status of one operation step.
definitions.Step.properties.description.description: The short description of the
  step.
definitions.Step.properties.description.type: string
definitions.Step.properties.status.description: The status code.
definitions.Step.properties.status.enum.length: 6
definitions.Step.properties.status.enum[0]: STATUS_UNSPECIFIED
definitions.Step.properties.status.enum[1]: DONE
definitions.Step.properties.status.enum[2]: NOT_STARTED
definitions.Step.properties.status.enum[3]: IN_PROGRESS
definitions.Step.properties.status.enum[4]: FAILED
definitions.Step.properties.status.enum[5]: CANCELLED
definitions.Step.properties.status.type: string
definitions.Step.type: object
definitions.SystemParameter.description: |-
  Define a parameter's name and location. The parameter may be passed as either
  an HTTP header or a URL query parameter, and if both are passed the behavior
  is implementation-dependent.
definitions.SystemParameter.properties.httpHeader.description: |-
  Define the HTTP header name to use for the parameter. It is case
  insensitive.
definitions.SystemParameter.properties.httpHeader.type: string
definitions.SystemParameter.properties.name.description: Define the name of the parameter,
  such as "api_key" . It is case sensitive.
definitions.SystemParameter.properties.name.type: string
definitions.SystemParameter.properties.urlQueryParameter.description: |-
  Define the URL query parameter name to use for the parameter. It is case
  sensitive.
definitions.SystemParameter.properties.urlQueryParameter.type: string
definitions.SystemParameter.type: object
definitions.SystemParameterRule.description: |-
  Define a system parameter rule mapping system parameter definitions to
  methods.
definitions.SystemParameterRule.properties.parameters.description: |-
  Define parameters. Multiple names may be defined for a parameter.
  For a given method call, only one of them should be used. If multiple
  names are used the behavior is implementation-dependent.
  If none of the specified names are present the behavior is
  parameter-dependent.
definitions.SystemParameterRule.properties.parameters.items.$ref: '#/definitions/SystemParameter'
definitions.SystemParameterRule.properties.parameters.type: array
definitions.SystemParameterRule.properties.selector.description: |-
  Selects the methods to which this rule applies. Use '*' to indicate all
  methods in all APIs.

  Refer to selector for syntax details.
definitions.SystemParameterRule.properties.selector.type: string
definitions.SystemParameterRule.type: object
definitions.SystemParameters.description: |-
  ### System parameter configuration

  A system parameter is a special kind of parameter defined by the API
  system, not by an individual API. It is typically mapped to an HTTP header
  and/or a URL query parameter. This configuration specifies which methods
  change the names of the system parameters.
definitions.SystemParameters.properties.rules.description: |-
  Define system parameters.

  The parameters defined here will override the default parameters
  implemented by the system. If this field is missing from the service
  config, default system parameters will be used. Default system parameters
  and names is implementation-dependent.

  Example: define api key for all methods

      system_parameters
        rules:
          - selector: "*"
            parameters:
              - name: api_key
                url_query_parameter: api_key


  Example: define 2 api key names for a specific method.

      system_parameters
        rules:
          - selector: "/ListShelves"
            parameters:
              - name: api_key
                http_header: Api-Key1
              - name: api_key
                http_header: Api-Key2

  **NOTE:** All service configuration rules follow "last one wins" order.
definitions.SystemParameters.properties.rules.items.$ref: '#/definitions/SystemParameterRule'
definitions.SystemParameters.properties.rules.type: array
definitions.SystemParameters.type: object
definitions.Type.description: A protocol buffer message type.
definitions.Type.properties.fields.description: The list of fields.
definitions.Type.properties.fields.items.$ref: '#/definitions/Field'
definitions.Type.properties.fields.type: array
definitions.Type.properties.name.description: The fully qualified message name.
definitions.Type.properties.name.type: string
definitions.Type.properties.oneofs.description: The list of types appearing in `oneof`
  definitions in this type.
definitions.Type.properties.oneofs.items.type: string
definitions.Type.properties.oneofs.type: array
definitions.Type.properties.options.description: The protocol buffer options.
definitions.Type.properties.options.items.$ref: '#/definitions/Option'
definitions.Type.properties.options.type: array
definitions.Type.properties.sourceContext.$ref: '#/definitions/SourceContext'
definitions.Type.properties.sourceContext.description: The source context.
definitions.Type.properties.syntax.description: The source syntax.
definitions.Type.properties.syntax.enum.length: 2
definitions.Type.properties.syntax.enum[0]: SYNTAX_PROTO2
definitions.Type.properties.syntax.enum[1]: SYNTAX_PROTO3
definitions.Type.properties.syntax.type: string
definitions.Type.type: object
definitions.Usage.description: Configuration controlling usage of a service.
definitions.Usage.properties.producerNotificationChannel.description: |-
  The full resource name of a channel used for sending notifications to the
  service producer.

  Google Service Management currently only supports
  [Google Cloud Pub/Sub](https://cloud.google.com/pubsub) as a notification
  channel. To use Google Cloud Pub/Sub as the channel, this must be the name
  of a Cloud Pub/Sub topic that uses the Cloud Pub/Sub topic name format
  documented in https://cloud.google.com/pubsub/docs/overview.
definitions.Usage.properties.producerNotificationChannel.type: string
definitions.Usage.properties.requirements.description: |-
  Requirements that must be satisfied before a consumer project can use the
  service. Each requirement is of the form <service.name>/<requirement-id>;
  for example 'serviceusage.googleapis.com/billing-enabled'.
definitions.Usage.properties.requirements.items.type: string
definitions.Usage.properties.requirements.type: array
definitions.Usage.properties.rules.description: |-
  A list of usage rules that apply to individual API methods.

  **NOTE:** All service configuration rules follow "last one wins" order.
definitions.Usage.properties.rules.items.$ref: '#/definitions/UsageRule'
definitions.Usage.properties.rules.type: array
definitions.Usage.type: object
definitions.UsageRule.description: |-
  Usage configuration rules for the service.

  NOTE: Under development.


  Use this rule to configure unregistered calls for the service. Unregistered
  calls are calls that do not contain consumer project identity.
  (Example: calls that do not contain an API key).
  By default, API methods do not allow unregistered calls, and each method call
  must be identified by a consumer project identity. Use this rule to
  allow/disallow unregistered calls.

  Example of an API that wants to allow unregistered calls for entire service.

      usage:
        rules:
        - selector: "*"
          allow_unregistered_calls: true

  Example of a method that wants to allow unregistered calls.

      usage:
        rules:
        - selector: "google.example.library.v1.LibraryService.CreateBook"
          allow_unregistered_calls: true
definitions.UsageRule.properties.allowUnregisteredCalls.description: True, if the
  method allows unregistered calls; false otherwise.
definitions.UsageRule.properties.allowUnregisteredCalls.type: boolean
definitions.UsageRule.properties.selector.description: |-
  Selects the methods to which this rule applies. Use '*' to indicate all
  methods in all APIs.

  Refer to selector for syntax details.
definitions.UsageRule.properties.selector.type: string
definitions.UsageRule.properties.skipServiceControl.description: |-
  True, if the method should skip service control. If so, no control plane
  feature (like quota and billing) will be enabled.
definitions.UsageRule.properties.skipServiceControl.type: boolean
definitions.UsageRule.type: object
definitions.Visibility.description: |-
  `Visibility` defines restrictions for the visibility of service
  elements.  Restrictions are specified using visibility labels
  (e.g., TRUSTED_TESTER) that are elsewhere linked to users and projects.

  Users and projects can have access to more than one visibility label. The
  effective visibility for multiple labels is the union of each label's
  elements, plus any unrestricted elements.

  If an element and its parents have no restrictions, visibility is
  unconditionally granted.

  Example:

      visibility:
        rules:
        - selector: google.calendar.Calendar.EnhancedSearch
          restriction: TRUSTED_TESTER
        - selector: google.calendar.Calendar.Delegate
          restriction: GOOGLE_INTERNAL

  Here, all methods are publicly visible except for the restricted methods
  EnhancedSearch and Delegate.
definitions.Visibility.properties.rules.description: |-
  A list of visibility rules that apply to individual API elements.

  **NOTE:** All service configuration rules follow "last one wins" order.
definitions.Visibility.properties.rules.items.$ref: '#/definitions/VisibilityRule'
definitions.Visibility.properties.rules.type: array
definitions.Visibility.type: object
definitions.VisibilityRule.description: |-
  A visibility rule provides visibility configuration for an individual API
  element.
definitions.VisibilityRule.properties.restriction.description: |-
  A comma-separated list of visibility labels that apply to the `selector`.
  Any of the listed labels can be used to grant the visibility.

  If a rule has multiple labels, removing one of the labels but not all of
  them can break clients.

  Example:

      visibility:
        rules:
        - selector: google.calendar.Calendar.EnhancedSearch
          restriction: GOOGLE_INTERNAL, TRUSTED_TESTER

  Removing GOOGLE_INTERNAL from this restriction will break clients that
  rely on this method and only had access to it through GOOGLE_INTERNAL.
definitions.VisibilityRule.properties.restriction.type: string
definitions.VisibilityRule.properties.selector.description: |-
  Selects methods, messages, fields, enums, etc. to which this rule applies.

  Refer to selector for syntax details.
definitions.VisibilityRule.properties.selector.type: string
definitions.VisibilityRule.type: object
externalDocs.url: https://cloud.google.com/service-management/
host: serviceuser.googleapis.com
info.contact.name: Google
info.contact.url: https://google.com
info.description: Enables services that service consumers want to use on Google Cloud
  Platform, lists the available or enabled services, or disables services that service
  consumers no longer use.
info.title: Google Service User
info.version: v1
info.x-apiClientRegistration.url: https://console.developers.google.com
info.x-logo.url: https://api.apis.guru/v2/cache/logo/https_www.google.com_images_branding_googlelogo_2x_googlelogo_color_272x92dp.png
info.x-origin.length: 1
info.x-origin[0].converter.url: https://github.com/lucybot/api-spec-converter
info.x-origin[0].converter.version: 2.6.0
info.x-origin[0].format: google
info.x-origin[0].url: https://serviceuser.googleapis.com/$discovery/rest?version=v1
info.x-origin[0].version: v1
info.x-preferred: true
info.x-providerName: googleapis.com
info.x-serviceName: serviceuser
parameters.$.xgafv.description: V1 error format.
parameters.$.xgafv.enum.length: 2
parameters.$.xgafv.enum[0]: "1"
parameters.$.xgafv.enum[1]: "2"
parameters.$.xgafv.in: query
parameters.$.xgafv.name: $.xgafv
parameters.$.xgafv.type: string
parameters.access_token.description: OAuth access token.
parameters.access_token.in: query
parameters.access_token.name: access_token
parameters.access_token.type: string
parameters.alt.default: json
parameters.alt.description: Data format for response.
parameters.alt.enum.length: 3
parameters.alt.enum[0]: json
parameters.alt.enum[1]: media
parameters.alt.enum[2]: proto
parameters.alt.in: query
parameters.alt.name: alt
parameters.alt.type: string
parameters.bearer_token.description: OAuth bearer token.
parameters.bearer_token.in: query
parameters.bearer_token.name: bearer_token
parameters.bearer_token.type: string
parameters.callback.description: JSONP
parameters.callback.in: query
parameters.callback.name: callback
parameters.callback.type: string
parameters.fields.description: Selector specifying which fields to include in a partial
  response.
parameters.fields.in: query
parameters.fields.name: fields
parameters.fields.type: string
parameters.key.description: API key. Your API key identifies your project and provides
  you with API access, quota, and reports. Required unless you provide an OAuth 2.0
  token.
parameters.key.in: query
parameters.key.name: key
parameters.key.type: string
parameters.oauth_token.description: OAuth 2.0 token for the current user.
parameters.oauth_token.in: query
parameters.oauth_token.name: oauth_token
parameters.oauth_token.type: string
parameters.pp.default: true
parameters.pp.description: Pretty-print response.
parameters.pp.in: query
parameters.pp.name: pp
parameters.pp.type: boolean
parameters.prettyPrint.default: true
parameters.prettyPrint.description: Returns response with indentations and line breaks.
parameters.prettyPrint.in: query
parameters.prettyPrint.name: prettyPrint
parameters.prettyPrint.type: boolean
parameters.quotaUser.description: Available to use for quota purposes for server-side
  applications. Can be any arbitrary string assigned to a user, but should not exceed
  40 characters.
parameters.quotaUser.in: query
parameters.quotaUser.name: quotaUser
parameters.quotaUser.type: string
parameters.upload_protocol.description: Upload protocol for media (e.g. "raw", "multipart").
parameters.upload_protocol.in: query
parameters.upload_protocol.name: upload_protocol
parameters.upload_protocol.type: string
parameters.uploadType.description: Legacy upload protocol for media (e.g. "media",
  "multipart").
parameters.uploadType.in: query
parameters.uploadType.name: uploadType
parameters.uploadType.type: string
paths./v1/{name}:disable.parameters.length: 13
paths./v1/{name}:disable.parameters[0].$ref: '#/parameters/upload_protocol'
paths./v1/{name}:disable.parameters[1].$ref: '#/parameters/prettyPrint'
paths./v1/{name}:disable.parameters[2].$ref: '#/parameters/uploadType'
paths./v1/{name}:disable.parameters[3].$ref: '#/parameters/fields'
paths./v1/{name}:disable.parameters[4].$ref: '#/parameters/$.xgafv'
paths./v1/{name}:disable.parameters[5].$ref: '#/parameters/callback'
paths./v1/{name}:disable.parameters[6].$ref: '#/parameters/alt'
paths./v1/{name}:disable.parameters[7].$ref: '#/parameters/access_token'
paths./v1/{name}:disable.parameters[8].$ref: '#/parameters/key'
paths./v1/{name}:disable.parameters[9].$ref: '#/parameters/quotaUser'
paths./v1/{name}:disable.parameters[10].$ref: '#/parameters/pp'
paths./v1/{name}:disable.parameters[11].$ref: '#/parameters/oauth_token'
paths./v1/{name}:disable.parameters[12].$ref: '#/parameters/bearer_token'
paths./v1/{name}:disable.post.description: |-
  Disable a service so it can no longer be used with a
  project. This prevents unintended usage that may cause unexpected billing
  charges or security leaks.

  Operation<response: google.protobuf.Empty>
paths./v1/{name}:disable.post.operationId: serviceuser.projects.services.disable
paths./v1/{name}:disable.post.parameters.length: 2
paths./v1/{name}:disable.post.parameters[0].description: |-
  Name of the consumer and the service to disable for that consumer.

  The Service User implementation accepts the following forms for consumer:
  - "project:<project_id>"

  A valid path would be:
  - /v1/projects/my-project/services/servicemanagement.googleapis.com:disable
paths./v1/{name}:disable.post.parameters[0].in: path
paths./v1/{name}:disable.post.parameters[0].name: name
paths./v1/{name}:disable.post.parameters[0].required: true
paths./v1/{name}:disable.post.parameters[0].type: string
paths./v1/{name}:disable.post.parameters[0].x-reservedExpansion: true
paths./v1/{name}:disable.post.parameters[1].in: body
paths./v1/{name}:disable.post.parameters[1].name: body
paths./v1/{name}:disable.post.parameters[1].schema.$ref: '#/definitions/DisableServiceRequest'
paths./v1/{name}:disable.post.responses.200.description: Successful response
paths./v1/{name}:disable.post.responses.200.schema.$ref: '#/definitions/Operation'
paths./v1/{name}:disable.post.security.length: 2
paths./v1/{name}:disable.post.security[0].Oauth2.length: 1
paths./v1/{name}:disable.post.security[0].Oauth2[0]: https://www.googleapis.com/auth/cloud-platform
paths./v1/{name}:disable.post.security[1].Oauth2.length: 1
paths./v1/{name}:disable.post.security[1].Oauth2[0]: https://www.googleapis.com/auth/service.management
paths./v1/{name}:disable.post.tags.length: 1
paths./v1/{name}:disable.post.tags[0]: projects
paths./v1/{name}:enable.parameters.length: 13
paths./v1/{name}:enable.parameters[0].$ref: '#/parameters/upload_protocol'
paths./v1/{name}:enable.parameters[1].$ref: '#/parameters/prettyPrint'
paths./v1/{name}:enable.parameters[2].$ref: '#/parameters/uploadType'
paths./v1/{name}:enable.parameters[3].$ref: '#/parameters/fields'
paths./v1/{name}:enable.parameters[4].$ref: '#/parameters/$.xgafv'
paths./v1/{name}:enable.parameters[5].$ref: '#/parameters/callback'
paths./v1/{name}:enable.parameters[6].$ref: '#/parameters/alt'
paths./v1/{name}:enable.parameters[7].$ref: '#/parameters/access_token'
paths./v1/{name}:enable.parameters[8].$ref: '#/parameters/key'
paths./v1/{name}:enable.parameters[9].$ref: '#/parameters/quotaUser'
paths./v1/{name}:enable.parameters[10].$ref: '#/parameters/pp'
paths./v1/{name}:enable.parameters[11].$ref: '#/parameters/oauth_token'
paths./v1/{name}:enable.parameters[12].$ref: '#/parameters/bearer_token'
paths./v1/{name}:enable.post.description: |-
  Enable a service so it can be used with a project.
  See [Cloud Auth Guide](https://cloud.google.com/docs/authentication) for
  more information.

  Operation<response: google.protobuf.Empty>
paths./v1/{name}:enable.post.operationId: serviceuser.projects.services.enable
paths./v1/{name}:enable.post.parameters.length: 2
paths./v1/{name}:enable.post.parameters[0].description: |-
  Name of the consumer and the service to enable for that consumer.

  A valid path would be:
  - /v1/projects/my-project/services/servicemanagement.googleapis.com:enable
paths./v1/{name}:enable.post.parameters[0].in: path
paths./v1/{name}:enable.post.parameters[0].name: name
paths./v1/{name}:enable.post.parameters[0].required: true
paths./v1/{name}:enable.post.parameters[0].type: string
paths./v1/{name}:enable.post.parameters[0].x-reservedExpansion: true
paths./v1/{name}:enable.post.parameters[1].in: body
paths./v1/{name}:enable.post.parameters[1].name: body
paths./v1/{name}:enable.post.parameters[1].schema.$ref: '#/definitions/EnableServiceRequest'
paths./v1/{name}:enable.post.responses.200.description: Successful response
paths./v1/{name}:enable.post.responses.200.schema.$ref: '#/definitions/Operation'
paths./v1/{name}:enable.post.security.length: 2
paths./v1/{name}:enable.post.security[0].Oauth2.length: 1
paths./v1/{name}:enable.post.security[0].Oauth2[0]: https://www.googleapis.com/auth/cloud-platform
paths./v1/{name}:enable.post.security[1].Oauth2.length: 1
paths./v1/{name}:enable.post.security[1].Oauth2[0]: https://www.googleapis.com/auth/service.management
paths./v1/{name}:enable.post.tags.length: 1
paths./v1/{name}:enable.post.tags[0]: projects
paths./v1/{parent}/services.get.description: List enabled services for the specified
  consumer.
paths./v1/{parent}/services.get.operationId: serviceuser.projects.services.list
paths./v1/{parent}/services.get.parameters.length: 3
paths./v1/{parent}/services.get.parameters[0].description: |-
  List enabled services for the specified parent.

  An example valid parent would be:
  - projects/my-project
paths./v1/{parent}/services.get.parameters[0].in: path
paths./v1/{parent}/services.get.parameters[0].name: parent
paths./v1/{parent}/services.get.parameters[0].required: true
paths./v1/{parent}/services.get.parameters[0].type: string
paths./v1/{parent}/services.get.parameters[0].x-reservedExpansion: true
paths./v1/{parent}/services.get.parameters[1].description: |-
  Token identifying which result to start with; returned by a previous list
  call.
paths./v1/{parent}/services.get.parameters[1].in: query
paths./v1/{parent}/services.get.parameters[1].name: pageToken
paths./v1/{parent}/services.get.parameters[1].type: string
paths./v1/{parent}/services.get.parameters[2].description: Requested size of the next
  page of data.
paths./v1/{parent}/services.get.parameters[2].in: query
paths./v1/{parent}/services.get.parameters[2].name: pageSize
paths./v1/{parent}/services.get.parameters[2].type: integer
paths./v1/{parent}/services.get.responses.200.description: Successful response
paths./v1/{parent}/services.get.responses.200.schema.$ref: '#/definitions/ListEnabledServicesResponse'
paths./v1/{parent}/services.get.security.length: 2
paths./v1/{parent}/services.get.security[0].Oauth2.length: 1
paths./v1/{parent}/services.get.security[0].Oauth2[0]: https://www.googleapis.com/auth/cloud-platform
paths./v1/{parent}/services.get.security[1].Oauth2.length: 1
paths./v1/{parent}/services.get.security[1].Oauth2[0]: https://www.googleapis.com/auth/cloud-platform.read-only
paths./v1/{parent}/services.get.tags.length: 1
paths./v1/{parent}/services.get.tags[0]: projects
paths./v1/{parent}/services.parameters.length: 13
paths./v1/{parent}/services.parameters[0].$ref: '#/parameters/upload_protocol'
paths./v1/{parent}/services.parameters[1].$ref: '#/parameters/prettyPrint'
paths./v1/{parent}/services.parameters[2].$ref: '#/parameters/uploadType'
paths./v1/{parent}/services.parameters[3].$ref: '#/parameters/fields'
paths./v1/{parent}/services.parameters[4].$ref: '#/parameters/$.xgafv'
paths./v1/{parent}/services.parameters[5].$ref: '#/parameters/callback'
paths./v1/{parent}/services.parameters[6].$ref: '#/parameters/alt'
paths./v1/{parent}/services.parameters[7].$ref: '#/parameters/access_token'
paths./v1/{parent}/services.parameters[8].$ref: '#/parameters/key'
paths./v1/{parent}/services.parameters[9].$ref: '#/parameters/quotaUser'
paths./v1/{parent}/services.parameters[10].$ref: '#/parameters/pp'
paths./v1/{parent}/services.parameters[11].$ref: '#/parameters/oauth_token'
paths./v1/{parent}/services.parameters[12].$ref: '#/parameters/bearer_token'
paths./v1/services:search.get.description: |-
  Search available services.

  When no filter is specified, returns all accessible services. For
  authenticated users, also returns all services the calling user has
  "servicemanagement.services.bind" permission for.
paths./v1/services:search.get.operationId: serviceuser.services.search
paths./v1/services:search.get.parameters.length: 2
paths./v1/services:search.get.parameters[0].description: |-
  Token identifying which result to start with; returned by a previous list
  call.
paths./v1/services:search.get.parameters[0].in: query
paths./v1/services:search.get.parameters[0].name: pageToken
paths./v1/services:search.get.parameters[0].type: string
paths./v1/services:search.get.parameters[1].description: Requested size of the next
  page of data.
paths./v1/services:search.get.parameters[1].in: query
paths./v1/services:search.get.parameters[1].name: pageSize
paths./v1/services:search.get.parameters[1].type: integer
paths./v1/services:search.get.responses.200.description: Successful response
paths./v1/services:search.get.responses.200.schema.$ref: '#/definitions/SearchServicesResponse'
paths./v1/services:search.get.security.length: 2
paths./v1/services:search.get.security[0].Oauth2.length: 1
paths./v1/services:search.get.security[0].Oauth2[0]: https://www.googleapis.com/auth/cloud-platform
paths./v1/services:search.get.security[1].Oauth2.length: 1
paths./v1/services:search.get.security[1].Oauth2[0]: https://www.googleapis.com/auth/cloud-platform.read-only
paths./v1/services:search.get.tags.length: 1
paths./v1/services:search.get.tags[0]: services
paths./v1/services:search.parameters.length: 13
paths./v1/services:search.parameters[0].$ref: '#/parameters/upload_protocol'
paths./v1/services:search.parameters[1].$ref: '#/parameters/prettyPrint'
paths./v1/services:search.parameters[2].$ref: '#/parameters/uploadType'
paths./v1/services:search.parameters[3].$ref: '#/parameters/fields'
paths./v1/services:search.parameters[4].$ref: '#/parameters/$.xgafv'
paths./v1/services:search.parameters[5].$ref: '#/parameters/callback'
paths./v1/services:search.parameters[6].$ref: '#/parameters/alt'
paths./v1/services:search.parameters[7].$ref: '#/parameters/access_token'
paths./v1/services:search.parameters[8].$ref: '#/parameters/key'
paths./v1/services:search.parameters[9].$ref: '#/parameters/quotaUser'
paths./v1/services:search.parameters[10].$ref: '#/parameters/pp'
paths./v1/services:search.parameters[11].$ref: '#/parameters/oauth_token'
paths./v1/services:search.parameters[12].$ref: '#/parameters/bearer_token'
schemes.length: 1
schemes[0]: https
securityDefinitions.Oauth2.authorizationUrl: https://accounts.google.com/o/oauth2/auth
securityDefinitions.Oauth2.description: Oauth 2.0 authentication
securityDefinitions.Oauth2.flow: implicit
securityDefinitions.Oauth2.scopes.https://www.googleapis.com/auth/cloud-platform: View
  and manage your data across Google Cloud Platform services
securityDefinitions.Oauth2.scopes.https://www.googleapis.com/auth/cloud-platform.read-only: View
  your data across Google Cloud Platform services
securityDefinitions.Oauth2.scopes.https://www.googleapis.com/auth/service.management: Manage
  your Google API service configuration
securityDefinitions.Oauth2.type: oauth2
swagger: "2.0"
tags.length: 2
tags[0].name: projects
tags[1].name: services

syntax = "proto3";

import "google/api/annotations.proto";

package googleclouddns;

message GetProjectRequest {
    alt alt = 1;
    // For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.
    string clientOperationId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // Identifies the project addressed by this request.
    string project = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetProjectManagedZonesRequest {
    alt alt = 1;
    // Restricts the list to return only zones with this domain name.
    string dnsName = 2;
    string fields = 3;
    string key = 4;
    // Optional. Maximum number of results to be returned. If unspecified, the server will decide how many results to return.
    int32 maxResults = 5;
    string oauth_token = 6;
    // Optional. A tag returned by a previous list request that was truncated. Use this parameter to continue a previous list request.
    string pageToken = 7;
    boolean prettyPrint = 8;
    // Identifies the project addressed by this request.
    string project = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message PostProjectManagedZonesRequest {
    alt alt = 1;
    ManagedZone body = 2;
    // For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.
    string clientOperationId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // Identifies the project addressed by this request.
    string project = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetProjectManagedZonesManagedZoneRequest {
    alt alt = 1;
    // For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.
    string clientOperationId = 2;
    string fields = 3;
    string key = 4;
    // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
    string managedZone = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // Identifies the project addressed by this request.
    string project = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PutProjectManagedZonesManagedZoneRequest {
    alt alt = 1;
    ManagedZone body = 2;
    // For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.
    string clientOperationId = 3;
    string fields = 4;
    string key = 5;
    // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
    string managedZone = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    // Identifies the project addressed by this request.
    string project = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message DeleteProjectManagedZonesManagedZoneRequest {
    alt alt = 1;
    // For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.
    string clientOperationId = 2;
    string fields = 3;
    string key = 4;
    // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
    string managedZone = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // Identifies the project addressed by this request.
    string project = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetProjectManagedZonesManagedZoneChangesRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
    string managedZone = 4;
    // Optional. Maximum number of results to be returned. If unspecified, the server will decide how many results to return.
    int32 maxResults = 5;
    string oauth_token = 6;
    // Optional. A tag returned by a previous list request that was truncated. Use this parameter to continue a previous list request.
    string pageToken = 7;
    boolean prettyPrint = 8;
    // Identifies the project addressed by this request.
    string project = 9;
    string quotaUser = 10;
    // Sorting criterion. The only supported value is change sequence.
    enum GetProjectManagedZonesManagedZoneChangesRequest_SortBy {
        GETPROJECTMANAGEDZONESMANAGEDZONECHANGESREQUEST_SORTBY_CHANGE_SEQUENCE = 0;
    }
    GetProjectManagedZonesManagedZoneChangesRequest_SortBy sortBy = 11;
    // Sorting order direction: 'ascending' or 'descending'.
    string sortOrder = 12;
    string userIp = 13;
}

message PostProjectManagedZonesManagedZoneChangesRequest {
    alt alt = 1;
    Change body = 2;
    // For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.
    string clientOperationId = 3;
    string fields = 4;
    string key = 5;
    // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
    string managedZone = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    // Identifies the project addressed by this request.
    string project = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message GetProjectManagedZonesManagedZoneChangesChangeIdRequest {
    alt alt = 1;
    // The identifier of the requested change, from a previous ResourceRecordSetsChangeResponse.
    string changeId = 2;
    // For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.
    string clientOperationId = 3;
    string fields = 4;
    string key = 5;
    // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
    string managedZone = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    // Identifies the project addressed by this request.
    string project = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message GetProjectManagedZonesManagedZoneDnsKeysRequest {
    alt alt = 1;
    // An optional comma-separated list of digest types to compute and display for key signing keys. If omitted, the recommended digest type will be computed and displayed.
    string digestType = 2;
    string fields = 3;
    string key = 4;
    // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
    string managedZone = 5;
    // Optional. Maximum number of results to be returned. If unspecified, the server will decide how many results to return.
    int32 maxResults = 6;
    string oauth_token = 7;
    // Optional. A tag returned by a previous list request that was truncated. Use this parameter to continue a previous list request.
    string pageToken = 8;
    boolean prettyPrint = 9;
    // Identifies the project addressed by this request.
    string project = 10;
    string quotaUser = 11;
    string userIp = 12;
}

message GetProjectManagedZonesManagedZoneDnsKeysDnsKeyIdRequest {
    alt alt = 1;
    // For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.
    string clientOperationId = 2;
    // An optional comma-separated list of digest types to compute and display for key signing keys. If omitted, the recommended digest type will be computed and displayed.
    string digestType = 3;
    // The identifier of the requested DnsKey.
    string dnsKeyId = 4;
    string fields = 5;
    string key = 6;
    // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
    string managedZone = 7;
    string oauth_token = 8;
    boolean prettyPrint = 9;
    // Identifies the project addressed by this request.
    string project = 10;
    string quotaUser = 11;
    string userIp = 12;
}

message GetProjectManagedZonesManagedZoneOperationsRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // Identifies the managed zone addressed by this request.
    string managedZone = 4;
    // Optional. Maximum number of results to be returned. If unspecified, the server will decide how many results to return.
    int32 maxResults = 5;
    string oauth_token = 6;
    // Optional. A tag returned by a previous list request that was truncated. Use this parameter to continue a previous list request.
    string pageToken = 7;
    boolean prettyPrint = 8;
    // Identifies the project addressed by this request.
    string project = 9;
    string quotaUser = 10;
    // Sorting criterion. The only supported values are START_TIME and ID.
    enum GetProjectManagedZonesManagedZoneOperationsRequest_SortBy {
        GETPROJECTMANAGEDZONESMANAGEDZONEOPERATIONSREQUEST_SORTBY_ID = 0;
        GETPROJECTMANAGEDZONESMANAGEDZONEOPERATIONSREQUEST_SORTBY_START_TIME = 1;
    }
    GetProjectManagedZonesManagedZoneOperationsRequest_SortBy sortBy = 11;
    string userIp = 12;
}

message GetProjectManagedZonesManagedZoneOperationsOperationRequest {
    alt alt = 1;
    // For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.
    string clientOperationId = 2;
    string fields = 3;
    string key = 4;
    // Identifies the managed zone addressed by this request.
    string managedZone = 5;
    string oauth_token = 6;
    // Identifies the operation addressed by this request.
    string operation = 7;
    boolean prettyPrint = 8;
    // Identifies the project addressed by this request.
    string project = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message GetProjectManagedZonesManagedZoneRrsetsRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
    string managedZone = 4;
    // Optional. Maximum number of results to be returned. If unspecified, the server will decide how many results to return.
    int32 maxResults = 5;
    // Restricts the list to return only records with this fully qualified domain name.
    string name = 6;
    string oauth_token = 7;
    // Optional. A tag returned by a previous list request that was truncated. Use this parameter to continue a previous list request.
    string pageToken = 8;
    boolean prettyPrint = 9;
    // Identifies the project addressed by this request.
    string project = 10;
    string quotaUser = 11;
    // Restricts the list to return only records of this type. If present, the "name" parameter must also be present.
    string type = 12;
    string userIp = 13;
}

message Change {
    // Which ResourceRecordSets to add?
    repeated ResourceRecordSet additions = 1;
    // Which ResourceRecordSets to remove? Must match existing data exactly.
    repeated ResourceRecordSet deletions = 2;
    // Unique identifier for the resource; defined by the server (output only).
    string id = 3;
    // If the DNS queries for the zone will be served.
    bool isServing = 4;
    // Identifies what kind of resource this is. Value: the fixed string "dns#change".
    string kind = 5;
    // The time that this operation was started by the server (output only). This is in RFC3339 text format.
    string startTime = 6;
    // Status of the operation (output only).
    enum Change_Statu {
        CHANGE_STATU_DONE = 0;
        CHANGE_STATU_PENDING = 1;
    }
    Change_Statu status = 7;
}

message ChangesListResponse {
    // The requested changes.
    repeated Change changes = 1;
    ResponseHeader header = 2;
    // Type of resource.
    string kind = 3;
    // The presence of this field indicates that there exist more results following your last page of results in pagination order. To fetch them, make another list request using this value as your pagination token.
    // 
    // In this way you can retrieve the complete contents of even very large collections one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned will be an inconsistent view of the collection. There is no way to retrieve a "snapshot" of collections larger than the maximum page size.
    string nextPageToken = 4;
}

message DnsKey {
    // String mnemonic specifying the DNSSEC algorithm of this key. Immutable after creation time.
    enum DnsKey_Algorithm {
        DNSKEY_ALGORITHM_ECDSAP256SHA256 = 0;
        DNSKEY_ALGORITHM_ECDSAP384SHA384 = 1;
        DNSKEY_ALGORITHM_RSASHA1 = 2;
        DNSKEY_ALGORITHM_RSASHA256 = 3;
        DNSKEY_ALGORITHM_RSASHA512 = 4;
    }
    DnsKey_Algorithm algorithm = 1;
    // The time that this resource was created in the control plane. This is in RFC3339 text format. Output only.
    string creationTime = 2;
    // A mutable string of at most 1024 characters associated with this resource for the user's convenience. Has no effect on the resource's function.
    string description = 3;
    // Cryptographic hashes of the DNSKEY resource record associated with this DnsKey. These digests are needed to construct a DS record that points at this DNS key. Output only.
    repeated DnsKeyDigest digests = 4;
    // Unique identifier for the resource; defined by the server (output only).
    string id = 5;
    // Active keys will be used to sign subsequent changes to the ManagedZone. Inactive keys will still be present as DNSKEY Resource Records for the use of resolvers validating existing signatures.
    bool isActive = 6;
    // Length of the key in bits. Specified at creation time then immutable.
    uint32 keyLength = 7;
    // The key tag is a non-cryptographic hash of the a DNSKEY resource record associated with this DnsKey. The key tag can be used to identify a DNSKEY more quickly (but it is not a unique identifier). In particular, the key tag is used in a parent zone's DS record to point at the DNSKEY in this child ManagedZone. The key tag is a number in the range [0, 65535] and the algorithm to calculate it is specified in RFC4034 Appendix B. Output only.
    int32 keyTag = 8;
    // Identifies what kind of resource this is. Value: the fixed string "dns#dnsKey".
    string kind = 9;
    // Base64 encoded public half of this key. Output only.
    string publicKey = 10;
    // One of "KEY_SIGNING" or "ZONE_SIGNING". Keys of type KEY_SIGNING have the Secure Entry Point flag set and, when active, will be used to sign only resource record sets of type DNSKEY. Otherwise, the Secure Entry Point flag will be cleared and this key will be used to sign only resource record sets of other types. Immutable after creation time.
    enum DnsKey_Type {
        DNSKEY_TYPE_KEY_SIGNING = 0;
        DNSKEY_TYPE_ZONE_SIGNING = 1;
    }
    DnsKey_Type type = 11;
}

message DnsKeyDigest {
    // The base-16 encoded bytes of this digest. Suitable for use in a DS resource record.
    string digest = 1;
    // Specifies the algorithm used to calculate this digest.
    enum DnsKeyDigest_Type {
        DNSKEYDIGEST_TYPE_SHA1 = 0;
        DNSKEYDIGEST_TYPE_SHA256 = 1;
        DNSKEYDIGEST_TYPE_SHA384 = 2;
    }
    DnsKeyDigest_Type type = 2;
}

message DnsKeySpec {
    // String mnemonic specifying the DNSSEC algorithm of this key.
    enum DnsKeySpec_Algorithm {
        DNSKEYSPEC_ALGORITHM_ECDSAP256SHA256 = 0;
        DNSKEYSPEC_ALGORITHM_ECDSAP384SHA384 = 1;
        DNSKEYSPEC_ALGORITHM_RSASHA1 = 2;
        DNSKEYSPEC_ALGORITHM_RSASHA256 = 3;
        DNSKEYSPEC_ALGORITHM_RSASHA512 = 4;
    }
    DnsKeySpec_Algorithm algorithm = 1;
    // Length of the keys in bits.
    uint32 keyLength = 2;
    // One of "KEY_SIGNING" or "ZONE_SIGNING". Keys of type KEY_SIGNING have the Secure Entry Point flag set and, when active, will be used to sign only resource record sets of type DNSKEY. Otherwise, the Secure Entry Point flag will be cleared and this key will be used to sign only resource record sets of other types.
    enum DnsKeySpec_KeyType {
        DNSKEYSPEC_KEYTYPE_KEY_SIGNING = 0;
        DNSKEYSPEC_KEYTYPE_ZONE_SIGNING = 1;
    }
    DnsKeySpec_KeyType keyType = 3;
    // Identifies what kind of resource this is. Value: the fixed string "dns#dnsKeySpec".
    string kind = 4;
}

message DnsKeysListResponse {
    // The requested resources.
    repeated DnsKey dnsKeys = 1;
    ResponseHeader header = 2;
    // Type of resource.
    string kind = 3;
    // The presence of this field indicates that there exist more results following your last page of results in pagination order. To fetch them, make another list request using this value as your pagination token.
    // 
    // In this way you can retrieve the complete contents of even very large collections one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned will be an inconsistent view of the collection. There is no way to retrieve a "snapshot" of collections larger than the maximum page size.
    string nextPageToken = 4;
}

message ManagedZone {
    // The time that this resource was created on the server. This is in RFC3339 text format. Output only.
    string creationTime = 1;
    // A mutable string of at most 1024 characters associated with this resource for the user's convenience. Has no effect on the managed zone's function.
    string description = 2;
    // The DNS name of this managed zone, for instance "example.com.".
    string dnsName = 3;
    // DNSSEC configuration.
    ManagedZoneDnsSecConfig dnssecConfig = 4;
    // Unique identifier for the resource; defined by the server (output only)
    string id = 5;
    // Identifies what kind of resource this is. Value: the fixed string "dns#managedZone".
    string kind = 6;
    // User assigned name for this resource. Must be unique within the project. The name must be 1-63 characters long, must begin with a letter, end with a letter or digit, and only contain lowercase letters, digits or dashes.
    string name = 7;
    // Optionally specifies the NameServerSet for this ManagedZone. A NameServerSet is a set of DNS name servers that all host the same ManagedZones. Most users will leave this field unset.
    string nameServerSet = 8;
    // Delegate your managed_zone to these virtual name servers; defined by the server (output only)
    repeated string nameServers = 9;
}

message ManagedZoneDnsSecConfig {
    // Specifies parameters that will be used for generating initial DnsKeys for this ManagedZone. Output only while state is not OFF.
    repeated DnsKeySpec defaultKeySpecs = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dns#managedZoneDnsSecConfig".
    string kind = 2;
    // Specifies the mechanism used to provide authenticated denial-of-existence responses. Output only while state is not OFF.
    enum ManagedZoneDnsSecConfig_NonExistence {
        MANAGEDZONEDNSSECCONFIG_NONEXISTENCE_NSEC = 0;
        MANAGEDZONEDNSSECCONFIG_NONEXISTENCE_NSEC3 = 1;
    }
    ManagedZoneDnsSecConfig_NonExistence nonExistence = 3;
    // Specifies whether DNSSEC is enabled, and what mode it is in.
    enum ManagedZoneDnsSecConfig_State {
        MANAGEDZONEDNSSECCONFIG_STATE_OFF = 0;
        MANAGEDZONEDNSSECCONFIG_STATE_ON = 1;
        MANAGEDZONEDNSSECCONFIG_STATE_TRANSFER = 2;
    }
    ManagedZoneDnsSecConfig_State state = 4;
}

message ManagedZoneOperationsListResponse {
    ResponseHeader header = 1;
    // Type of resource.
    string kind = 2;
    // The presence of this field indicates that there exist more results following your last page of results in pagination order. To fetch them, make another list request using this value as your page token.
    // 
    // In this way you can retrieve the complete contents of even very large collections one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned will be an inconsistent view of the collection. There is no way to retrieve a consistent snapshot of a collection larger than the maximum page size.
    string nextPageToken = 3;
    // The operation resources.
    repeated Operation operations = 4;
}

message ManagedZonesDeleteResponse {
    ResponseHeader header = 1;
}

message ManagedZonesListResponse {
    ResponseHeader header = 1;
    // Type of resource.
    string kind = 2;
    // The managed zone resources.
    repeated ManagedZone managedZones = 3;
    // The presence of this field indicates that there exist more results following your last page of results in pagination order. To fetch them, make another list request using this value as your page token.
    // 
    // In this way you can retrieve the complete contents of even very large collections one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned will be an inconsistent view of the collection. There is no way to retrieve a consistent snapshot of a collection larger than the maximum page size.
    string nextPageToken = 4;
}

message Operation {
    // Only populated if the operation targeted a DnsKey (output only).
    OperationDnsKeyContext dnsKeyContext = 1;
    // Unique identifier for the resource. This is the client_operation_id if the client specified it when the mutation was initiated, otherwise, it is generated by the server. The name must be 1-63 characters long and match the regular expression [-a-z0-9]? (output only)
    string id = 2;
    // Identifies what kind of resource this is. Value: the fixed string "dns#operation".
    string kind = 3;
    // The time that this operation was started by the server. This is in RFC3339 text format (output only).
    string startTime = 4;
    // Status of the operation. Can be one of the following: "PENDING" or "DONE" (output only).
    enum Operation_Statu {
        OPERATION_STATU_DONE = 0;
        OPERATION_STATU_PENDING = 1;
    }
    Operation_Statu status = 5;
    // Type of the operation. Operations include insert, update, and delete (output only).
    string type = 6;
    // User who requested the operation, for example: user@example.com. cloud-dns-system for operations automatically done by the system. (output only)
    string user = 7;
    // Only populated if the operation targeted a ManagedZone (output only).
    OperationManagedZoneContext zoneContext = 8;
}

message OperationDnsKeyContext {
    // The post-operation DnsKey resource.
    DnsKey newValue = 1;
    // The pre-operation DnsKey resource.
    DnsKey oldValue = 2;
}

message OperationManagedZoneContext {
    // The post-operation ManagedZone resource.
    ManagedZone newValue = 1;
    // The pre-operation ManagedZone resource.
    ManagedZone oldValue = 2;
}

message Project {
    // User assigned unique identifier for the resource (output only).
    string id = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dns#project".
    string kind = 2;
    // Unique numeric identifier for the resource; defined by the server (output only).
    string number = 3;
    // Quotas assigned to this project (output only).
    Quota quota = 4;
}

message Quota {
    // Maximum allowed number of DnsKeys per ManagedZone.
    int32 dnsKeysPerManagedZone = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dns#quota".
    string kind = 2;
    // Maximum allowed number of managed zones in the project.
    int32 managedZones = 3;
    // Maximum allowed number of ResourceRecords per ResourceRecordSet.
    int32 resourceRecordsPerRrset = 4;
    // Maximum allowed number of ResourceRecordSets to add per ChangesCreateRequest.
    int32 rrsetAdditionsPerChange = 5;
    // Maximum allowed number of ResourceRecordSets to delete per ChangesCreateRequest.
    int32 rrsetDeletionsPerChange = 6;
    // Maximum allowed number of ResourceRecordSets per zone in the project.
    int32 rrsetsPerManagedZone = 7;
    // Maximum allowed size for total rrdata in one ChangesCreateRequest in bytes.
    int32 totalRrdataSizePerChange = 8;
    // DNSSEC algorithm and key length types that can be used for DnsKeys.
    repeated DnsKeySpec whitelistedKeySpecs = 9;
}

message ResourceRecordSet {
    // Identifies what kind of resource this is. Value: the fixed string "dns#resourceRecordSet".
    string kind = 1;
    // For example, www.example.com.
    string name = 2;
    // As defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1).
    repeated string rrdatas = 3;
    // As defined in RFC 4034 (section 3.2).
    repeated string signatureRrdatas = 4;
    // Number of seconds that this ResourceRecordSet can be cached by resolvers.
    int32 ttl = 5;
    // The identifier of a supported record type, for example, A, AAAA, MX, TXT, and so on.
    string type = 6;
}

message ResourceRecordSetsListResponse {
    ResponseHeader header = 1;
    // Type of resource.
    string kind = 2;
    // The presence of this field indicates that there exist more results following your last page of results in pagination order. To fetch them, make another list request using this value as your pagination token.
    // 
    // In this way you can retrieve the complete contents of even very large collections one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned will be an inconsistent view of the collection. There is no way to retrieve a consistent snapshot of a collection larger than the maximum page size.
    string nextPageToken = 3;
    // The resource record set resources.
    repeated ResourceRecordSet rrsets = 4;
}

message ResponseHeader {
    // For mutating operation requests that completed successfully. This is the client_operation_id if the client specified it, otherwise it is generated by the server (output only).
    string operationId = 1;
}

enum Alt {
    JSON = 0;
}

service GoogleCloudDNSService {
    // Fetch the representation of an existing Project.
    rpc GetProject(GetProjectRequest) returns (Project) {
      option (google.api.http) = {
        get: "/dns/v2beta1/projects/{project}"
      };
    }
    // Enumerate ManagedZones that have been created but not yet deleted.
    rpc GetProjectManagedZones(GetProjectManagedZonesRequest) returns (ManagedZonesListResponse) {
      option (google.api.http) = {
        get: "/dns/v2beta1/projects/{project}/managedZones"
      };
    }
    // Create a new ManagedZone.
    rpc PostProjectManagedZones(PostProjectManagedZonesRequest) returns (ManagedZone) {
      option (google.api.http) = {
        post: "/dns/v2beta1/projects/{project}/managedZones"
        body: "body"
      };
    }
    // Fetch the representation of an existing ManagedZone.
    rpc GetProjectManagedZonesManagedZone(GetProjectManagedZonesManagedZoneRequest) returns (ManagedZone) {
      option (google.api.http) = {
        get: "/dns/v2beta1/projects/{project}/managedZones/{managedZone}"
      };
    }
    // Update an existing ManagedZone.
    rpc PutProjectManagedZonesManagedZone(PutProjectManagedZonesManagedZoneRequest) returns (Operation) {
      option (google.api.http) = {
        put: "/dns/v2beta1/projects/{project}/managedZones/{managedZone}"
        body: "body"
      };
    }
    // Delete a previously created ManagedZone.
    rpc DeleteProjectManagedZonesManagedZone(DeleteProjectManagedZonesManagedZoneRequest) returns (ManagedZonesDeleteResponse) {
      option (google.api.http) = {
        delete: "/dns/v2beta1/projects/{project}/managedZones/{managedZone}"
      };
    }
    // Enumerate Changes to a ResourceRecordSet collection.
    rpc GetProjectManagedZonesManagedZoneChanges(GetProjectManagedZonesManagedZoneChangesRequest) returns (ChangesListResponse) {
      option (google.api.http) = {
        get: "/dns/v2beta1/projects/{project}/managedZones/{managedZone}/changes"
      };
    }
    // Atomically update the ResourceRecordSet collection.
    rpc PostProjectManagedZonesManagedZoneChanges(PostProjectManagedZonesManagedZoneChangesRequest) returns (Change) {
      option (google.api.http) = {
        post: "/dns/v2beta1/projects/{project}/managedZones/{managedZone}/changes"
        body: "body"
      };
    }
    // Fetch the representation of an existing Change.
    rpc GetProjectManagedZonesManagedZoneChangesChangeId(GetProjectManagedZonesManagedZoneChangesChangeIdRequest) returns (Change) {
      option (google.api.http) = {
        get: "/dns/v2beta1/projects/{project}/managedZones/{managedZone}/changes/{changeId}"
      };
    }
    // Enumerate DnsKeys to a ResourceRecordSet collection.
    rpc GetProjectManagedZonesManagedZoneDnsKeys(GetProjectManagedZonesManagedZoneDnsKeysRequest) returns (DnsKeysListResponse) {
      option (google.api.http) = {
        get: "/dns/v2beta1/projects/{project}/managedZones/{managedZone}/dnsKeys"
      };
    }
    // Fetch the representation of an existing DnsKey.
    rpc GetProjectManagedZonesManagedZoneDnsKeysDnsKeyId(GetProjectManagedZonesManagedZoneDnsKeysDnsKeyIdRequest) returns (DnsKey) {
      option (google.api.http) = {
        get: "/dns/v2beta1/projects/{project}/managedZones/{managedZone}/dnsKeys/{dnsKeyId}"
      };
    }
    // Enumerate Operations for the given ManagedZone.
    rpc GetProjectManagedZonesManagedZoneOperations(GetProjectManagedZonesManagedZoneOperationsRequest) returns (ManagedZoneOperationsListResponse) {
      option (google.api.http) = {
        get: "/dns/v2beta1/projects/{project}/managedZones/{managedZone}/operations"
      };
    }
    // Fetch the representation of an existing Operation.
    rpc GetProjectManagedZonesManagedZoneOperationsOperation(GetProjectManagedZonesManagedZoneOperationsOperationRequest) returns (Operation) {
      option (google.api.http) = {
        get: "/dns/v2beta1/projects/{project}/managedZones/{managedZone}/operations/{operation}"
      };
    }
    // Enumerate ResourceRecordSets that have been created but not yet deleted.
    rpc GetProjectManagedZonesManagedZoneRrsets(GetProjectManagedZonesManagedZoneRrsetsRequest) returns (ResourceRecordSetsListResponse) {
      option (google.api.http) = {
        get: "/dns/v2beta1/projects/{project}/managedZones/{managedZone}/rrsets"
      };
    }
}

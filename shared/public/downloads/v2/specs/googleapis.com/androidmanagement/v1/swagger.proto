syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package androidmanagement;

message PostV1EnterprisesRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    Enterprise body = 5;
    string callback = 6;
    // The enterprise token appended to the callback URL.
    string enterpriseToken = 7;
    string fields = 8;
    string key = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    // The id of the Google Cloud Platform project which will own the enterprise.
    string projectId = 13;
    string quotaUser = 14;
    // The name of the SignupUrl used to sign up for the enterprise.
    string signupUrlName = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

message PostV1SignupUrlsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    // The callback URL to which the admin will be redirected after successfully creating an enterprise. Before redirecting there the system will add a query parameter to this URL named enterpriseToken which will contain an opaque token to be used for the create enterprise request. The URL will be parsed then reformatted in order to add the enterpriseToken parameter, so there may be some minor formatting changes.
    string callbackUrl = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    // The id of the Google Cloud Platform project which will own the enterprise.
    string projectId = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1NameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    // The standard list filter.
    string filter = 7;
    string key = 8;
    // The name of the operation's parent resource.
    string name = 9;
    string oauth_token = 10;
    // The standard list page size.
    int32 pageSize = 11;
    // The standard list page token.
    string pageToken = 12;
    boolean pp = 13;
    boolean prettyPrint = 14;
    string quotaUser = 15;
    string uploadType = 16;
    string upload_protocol = 17;
}

message DeleteV1NameRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    // The name of the operation resource to be deleted.
    string name = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PostV1Name:CancelRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    // The name of the operation resource to be cancelled.
    string name = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message PostV1Name:IssueCommandRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    Command body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    // The name of the device in the form enterprises/{enterpriseId}/devices/{deviceId}
    string name = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1ParentDevicesRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    // The requested page size. The actual page size may be fixed to a min or max value.
    int32 pageSize = 9;
    // A token identifying a page of results the server should return.
    string pageToken = 10;
    // The name of the enterprise in the form enterprises/{enterpriseId}
    string parent = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message PostV1ParentEnrollmentTokensRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    EnrollmentToken body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    // The name of the enterprise in the form enterprises/{enterpriseId}
    string parent = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV1ParentPoliciesRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    // The requested page size. The actual page size may be fixed to a min or max value.
    int32 pageSize = 9;
    // A token identifying a page of results the server should return.
    string pageToken = 10;
    // The name of the enterprise in the form enterprises/{enterpriseId}
    string parent = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    string uploadType = 15;
    string upload_protocol = 16;
}

message PostV1ParentWebTokensRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    WebToken body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    // The name of the enterprise in the form enterprises/{enterpriseId}
    string parent = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

enum $.Xgafv {
    $XGAFV_1 = 0;
    $XGAFV_2 = 1;
}

message ApiLevelCondition {
    // The minimum desired Android Framework API level. If the device does not meet the minimum requirement, this condition is satisfied. Must be greater than zero.
    int32 minApiLevel = 1;
}

message Application {
    // The set of managed properties available to be pre-configured for the application.
    repeated ManagedProperty managedProperties = 1;
    // The name of the application in the form enterprises/{enterpriseId}/applications/{package_name}
    string name = 2;
    // The permissions required by the app.
    repeated ApplicationPermission permissions = 3;
    // The title of the application. Localized.
    string title = 4;
}

message ApplicationPermission {
    // A longer description of the permission, giving more details of what it affects. Localized.
    string description = 1;
    // The name of the permission. Localized.
    string name = 2;
    // An opaque string uniquely identifying the permission. Not localized.
    string permissionId = 3;
}

message ApplicationPolicy {
    // The default policy for all permissions requested by the app. If specified, this overrides the policy-level default_permission_policy which applies to all apps.
    enum ApplicationPolicy_DefaultPermissionPolicy {
        APPLICATIONPOLICY_DEFAULTPERMISSIONPOLICY_PERMISSION_POLICY_UNSPECIFIED = 0;
        APPLICATIONPOLICY_DEFAULTPERMISSIONPOLICY_PROMPT = 1;
        APPLICATIONPOLICY_DEFAULTPERMISSIONPOLICY_GRANT = 2;
        APPLICATIONPOLICY_DEFAULTPERMISSIONPOLICY_DENY = 3;
    }
    ApplicationPolicy_DefaultPermissionPolicy defaultPermissionPolicy = 1;
    // The type of installation to perform.
    enum ApplicationPolicy_InstallType {
        APPLICATIONPOLICY_INSTALLTYPE_INSTALL_TYPE_UNSPECIFIED = 0;
        APPLICATIONPOLICY_INSTALLTYPE_PREINSTALLED = 1;
        APPLICATIONPOLICY_INSTALLTYPE_FORCE_INSTALLED = 2;
    }
    ApplicationPolicy_InstallType installType = 2;
    // Whether the application is allowed to lock itself in full-screen mode.
    bool lockTaskAllowed = 3;
    // Managed configuration applied to the app. The format for the configuration is dictated by the ManagedProperty values supported by the app. Each field name in the managed configuration must match the key field of the ManagedProperty. The field value must be compatible with the type of the ManagedProperty: <table> <tr><td><i>type</i></td><td><i>JSON value</i></td></tr> <tr><td>BOOL</td><td>true or false</td></tr> <tr><td>STRING</td><td>string</td></tr> <tr><td>INTEGER</td><td>number</td></tr> <tr><td>CHOICE</td><td>string</td></tr> <tr><td>MULTISELECT</td><td>array of strings</td></tr> <tr><td>HIDDEN</td><td>string</td></tr> <tr><td>BUNDLE_ARRAY</td><td>array of objects</td></tr> </table>
    map<string, > managedConfiguration = 4;
    // The package name of the app, e.g. com.google.android.youtube for the YouTube app.
    string packageName = 5;
    // Explicit permission grants or denials for the app. These values override the default_permission_policy.
    repeated PermissionGrant permissionGrants = 6;
}

message Command {
    // The timestamp at which the command was created. The timestamp is automatically generated by the server.
    string createTime = 1;
    // The duration for which the command is valid. The command will expire if not executed by the device during this time. The default duration if unspecified is ten minutes. There is no maximum duration.
    string duration = 2;
    // For commands of type RESET_PASSWORD, optionally specifies the new password.
    string newPassword = 3;
    // For commands of type RESET_PASSWORD, optionally specifies flags.
    repeated string resetPasswordFlags = 4;
    // The type of the command.
    enum Command_Type {
        COMMAND_TYPE_COMMAND_TYPE_UNSPECIFIED = 0;
        COMMAND_TYPE_LOCK = 1;
        COMMAND_TYPE_RESET_PASSWORD = 2;
        COMMAND_TYPE_REBOOT = 3;
    }
    Command_Type type = 5;
}

message ComplianceRule {
    // A condition which is satisfied if the Android Framework API level on the device does not meet a minimum requirement.
    ApiLevelCondition apiLevelCondition = 1;
    // If set to true, the rule includes a mitigating action to disable applications so that the device is effectively disabled, but application data is preserved. If the device is running an app in locked task mode, the app will be closed and a UI showing the reason for non-compliance will be displayed.
    bool disableApps = 2;
    // A condition which is satisfied if there exists any matching NonComplianceDetail for the device.
    NonComplianceDetailCondition nonComplianceDetailCondition = 3;
}

message Device {
    // The API level of the Android platform version running on the device.
    int32 apiLevel = 1;
    // The name of the policy that is currently applied by the device.
    string appliedPolicyName = 2;
    // The version of the policy that is currently applied by the device.
    string appliedPolicyVersion = 3;
    // The state that is currently applied by the device.
    enum Device_AppliedState {
        DEVICE_APPLIEDSTATE_DEVICE_STATE_UNSPECIFIED = 0;
        DEVICE_APPLIEDSTATE_ACTIVE = 1;
        DEVICE_APPLIEDSTATE_DISABLED = 2;
        DEVICE_APPLIEDSTATE_DELETED = 3;
        DEVICE_APPLIEDSTATE_PROVISIONING = 4;
    }
    Device_AppliedState appliedState = 4;
    // If the device state is DISABLED, an optional message that is displayed on the device indicating the reason the device is disabled. This field may be modified by an update request.
    UserFacingMessage disabledReason = 5;
    // Displays on the device. This information is only available when displayInfoEnabled is true in the device's policy.
    repeated Display displays = 6;
    // The time of device enrollment.
    string enrollmentTime = 7;
    // If this device was enrolled with an enrollment token with additional data provided, this field contains that data.
    string enrollmentTokenData = 8;
    // If this device was enrolled with an enrollment token, this field contains the name of the token.
    string enrollmentTokenName = 9;
    // Detailed information about the device hardware.
    HardwareInfo hardwareInfo = 10;
    // Hardware status samples in chronological order. This information is only available when hardwareStatusEnabled is true in the device's policy.
    repeated HardwareStatus hardwareStatusSamples = 11;
    // The last time the device sent a policy compliance report.
    string lastPolicyComplianceReportTime = 12;
    // The last time the device fetched its policy.
    string lastPolicySyncTime = 13;
    // The last time the device sent a status report.
    string lastStatusReportTime = 14;
    // Events related to memory and storage measurements in chronological order. This information is only available when memoryInfoEnabled is true in the device's policy.
    repeated MemoryEvent memoryEvents = 15;
    // Memory information. This information is only available when memoryInfoEnabled is true in the device's policy.
    MemoryInfo memoryInfo = 16;
    // The name of the device in the form enterprises/{enterpriseId}/devices/{deviceId}
    string name = 17;
    // Device network information. This information is only available when networkInfoEnabled is true in the device's policy.
    NetworkInfo networkInfo = 18;
    // Details about policy settings for which the device is not in compliance.
    repeated NonComplianceDetail nonComplianceDetails = 19;
    // Whether the device is compliant with its policy.
    bool policyCompliant = 20;
    // The name of the policy that is intended to be applied to the device. If empty, the policy with id default is applied. This field may be modified by an update request. The name of the policy is in the form enterprises/{enterpriseId}/policies/{policyId}. It is also permissible to only specify the policyId when updating this field as long as the policyId contains no slashes since the rest of the policy name can be inferred from context.
    string policyName = 21;
    // Power management events on the device in chronological order. This information is only available when powerManagementEventsEnabled is true in the device's policy.
    repeated PowerManagementEvent powerManagementEvents = 22;
    // The previous device names used for the same physical device when it has been enrolled multiple times. The serial number is used as the unique identifier to determine if the same physical device has enrolled previously. The names are in chronological order.
    repeated string previousDeviceNames = 23;
    // Detailed information about the device software. This information is only available when softwareInfoEnabled is true in the device's policy.
    SoftwareInfo softwareInfo = 24;
    // The state that is intended to be applied to the device. This field may be modified by an update request. Note that UpdateDevice only handles toggling between ACTIVE and DISABLED states. Use the delete device method to cause the device to enter the DELETED state.
    enum Device_State {
        DEVICE_STATE_DEVICE_STATE_UNSPECIFIED = 0;
        DEVICE_STATE_ACTIVE = 1;
        DEVICE_STATE_DISABLED = 2;
        DEVICE_STATE_DELETED = 3;
        DEVICE_STATE_PROVISIONING = 4;
    }
    Device_State state = 25;
    // The resource name of the user of the device in the form enterprises/{enterpriseId}/users/{userId}. This is the name of the device account automatically created for this device.
    string userName = 26;
}

message Display {
    // Display density expressed as dots-per-inch.
    int32 density = 1;
    // Unique display id.
    int32 displayId = 2;
    // Display height in pixels.
    int32 height = 3;
    // Name of the display.
    string name = 4;
    // Refresh rate of the display in frames per second.
    int32 refreshRate = 5;
    // State of the display.
    enum Display_State {
        DISPLAY_STATE_DISPLAY_STATE_UNSPECIFIED = 0;
        DISPLAY_STATE_OFF = 1;
        DISPLAY_STATE_ON = 2;
        DISPLAY_STATE_DOZE = 3;
        DISPLAY_STATE_SUSPENDED = 4;
    }
    Display_State state = 6;
    // Display width in pixels.
    int32 width = 7;
}

message Empty {
}

message EnrollmentToken {
    // Optional, arbitrary data associated with the enrollment token. This could contain, for example, the id of an org unit to which the device is assigned after enrollment. After a device enrolls with the token, this data will be exposed in the enrollment_token_data field of the Device resource. The data must be 1024 characters or less; otherwise, the creation request will fail.
    string additionalData = 1;
    // The duration of the token. If not specified, the duration will be 1 hour. The allowed range is 1 minute to 30 days.
    string duration = 2;
    // The expiration time of the token. This is a read-only field generated by the server.
    string expirationTimestamp = 3;
    // The name of the enrollment token, which is generated by the server during creation, in the form enterprises/{enterpriseId}/enrollmentTokens/{enrollmentTokenId}
    string name = 4;
    // The name of the policy that will be initially applied to the enrolled device in the form enterprises/{enterpriseId}/policies/{policyId}. If not specified, the policy with id default is applied. It is permissible to only specify the policyId when updating this field as long as the policyId contains no slashes since the rest of the policy name can be inferred from context.
    string policyName = 5;
    // A JSON string whose UTF-8 representation can be used to generate a QR code to enroll a device with this enrollment token. To enroll a device using NFC, the NFC record must contain a serialized java.util.Properties representation of the properties in the JSON.
    string qrCode = 6;
    // The token value which is passed to the device and authorizes the device to enroll. This is a read-only field generated by the server.
    string value = 7;
}

message Enterprise {
    // Whether app auto-approval is enabled. When enabled, apps installed via policy for this enterprise have all permissions automatically approved. When enabled, it is the caller's responsibility to display the permissions required by an app to the enterprise admin before setting the app to be installed in a policy.
    bool appAutoApprovalEnabled = 1;
    // The notification types to enable via Google Cloud Pub/Sub.
    repeated string enabledNotificationTypes = 2;
    // The name of the enterprise as it will appear to users.
    string enterpriseDisplayName = 3;
    // An image displayed as a logo during device provisioning. Supported types are: image/bmp, image/gif, image/x-ico, image/jpeg, image/png, image/webp, image/vnd.wap.wbmp, image/x-adobe-dng.
    ExternalData logo = 4;
    // The name of the enterprise which is generated by the server during creation, in the form enterprises/{enterpriseId}
    string name = 5;
    // A color in RGB format indicating the predominant color to display in the device management app UI. The color components are stored as follows: (red << 16) | (green << 8) | blue, where each component may take a value between 0 and 255 inclusive.
    int32 primaryColor = 6;
    // When Cloud Pub/Sub notifications are enabled, this field is required to indicate the topic to which the notifications will be published. The format of this field is projects/{project}/topics/{topic}. You must have granted the publish permission on this topic to android-cloud-policy@system.gserviceaccount.com
    string pubsubTopic = 7;
}

message ExternalData {
    // The base-64 encoded SHA-256 hash of the content hosted at url. If the content does not match this hash, Android Device Policy will not use the data.
    string sha256Hash = 1;
    // The absolute URL to the data, which must use either the http or https scheme. Android Device Policy does not provide any credentials in the GET request, so the URL must be publicly accessible. Including a long, random component in the URL may be used to prevent attackers from discovering the URL.
    string url = 2;
}

message HardwareInfo {
    // Battery shutdown temperature thresholds in Celsius for each battery on the device.
    repeated float batteryShutdownTemperatures = 1;
    // Battery throttling temperature thresholds in Celsius for each battery on the device.
    repeated float batteryThrottlingTemperatures = 2;
    // Brand of the device, e.g. Google.
    string brand = 3;
    // CPU shutdown temperature thresholds in Celsius for each CPU on the device.
    repeated float cpuShutdownTemperatures = 4;
    // CPU throttling temperature thresholds in Celsius for each CPU on the device.
    repeated float cpuThrottlingTemperatures = 5;
    // Baseband version, e.g. MDM9625_104662.22.05.34p.
    string deviceBasebandVersion = 6;
    // GPU shutdown temperature thresholds in Celsius for each GPU on the device.
    repeated float gpuShutdownTemperatures = 7;
    // GPU throttling temperature thresholds in Celsius for each GPU on the device.
    repeated float gpuThrottlingTemperatures = 8;
    // Name of the hardware, e.g. Angler.
    string hardware = 9;
    // Manufacturer, e.g. Motorola.
    string manufacturer = 10;
    // The model of the device, e.g. Asus Nexus 7.
    string model = 11;
    // The device serial number.
    string serialNumber = 12;
    // Device skin shutdown temperature thresholds in Celsius.
    repeated float skinShutdownTemperatures = 13;
    // Device skin throttling temperature thresholds in Celsius.
    repeated float skinThrottlingTemperatures = 14;
}

message HardwareStatus {
    // Current battery temperatures in Celsius for each battery on the device.
    repeated float batteryTemperatures = 1;
    // Current CPU temperatures in Celsius for each CPU on the device.
    repeated float cpuTemperatures = 2;
    // CPU usages in percentage for each core available on the device. Usage is 0 for each unplugged core. Empty array implies that CPU usage is not supported in the system.
    repeated float cpuUsages = 3;
    // The time the measurements were taken.
    string createTime = 4;
    // Fan speeds in RPM for each fan on the device. Empty array means that there are no fans or fan speed is not supported on the system.
    repeated float fanSpeeds = 5;
    // Current GPU temperatures in Celsius for each GPU on the device.
    repeated float gpuTemperatures = 6;
    // Current device skin temperatures in Celsius.
    repeated float skinTemperatures = 7;
}

message ListDevicesResponse {
    // The list of devices.
    repeated Device devices = 1;
    // If there are more results, a token to retrieve next page of results.
    string nextPageToken = 2;
}

message ListOperationsResponse {
    // The standard List next-page token.
    string nextPageToken = 1;
    // A list of operations that matches the specified filter in the request.
    repeated Operation operations = 2;
}

message ListPoliciesResponse {
    // If there are more results, a token to retrieve next page of results.
    string nextPageToken = 1;
    // The list of policies.
    repeated Policy policies = 2;
}

message ManagedProperty {
    // The default value of the properties. BUNDLE_ARRAY properties never have a default value.
    ;
    // A longer description of the property, giving more detail of what it affects. Localized.
    string description = 2;
    // For CHOICE or MULTISELECT properties, the list of possible entries.
    repeated ManagedPropertyEntry entries = 3;
    // The unique key that the application uses to identify the property, e.g. "com.google.android.gm.fieldname".
    string key = 4;
    // For BUNDLE_ARRAY properties, the list of nested properties. A BUNDLE_ARRAY property is at most two levels deep.
    repeated ManagedProperty nestedProperties = 5;
    // The name of the property. Localized.
    string title = 6;
    // The type of the property.
    enum ManagedProperty_Type {
        MANAGEDPROPERTY_TYPE_MANAGED_PROPERTY_TYPE_UNSPECIFIED = 0;
        MANAGEDPROPERTY_TYPE_BOOL = 1;
        MANAGEDPROPERTY_TYPE_STRING = 2;
        MANAGEDPROPERTY_TYPE_INTEGER = 3;
        MANAGEDPROPERTY_TYPE_CHOICE = 4;
        MANAGEDPROPERTY_TYPE_MULTISELECT = 5;
        MANAGEDPROPERTY_TYPE_HIDDEN = 6;
        MANAGEDPROPERTY_TYPE_BUNDLE_ARRAY = 7;
    }
    ManagedProperty_Type type = 7;
}

message ManagedPropertyEntry {
    // The human-readable name of the value. Localized.
    string name = 1;
    // The machine-readable value of the entry, which should be used in the configuration. Not localized.
    string value = 2;
}

message MemoryEvent {
    // The number of free bytes in the medium, or for EXTERNAL_STORAGE_DETECTED, the total capacity in bytes of the storage medium.
    string byteCount = 1;
    // The creation time of the event.
    string createTime = 2;
    // Event type.
    enum MemoryEvent_EventType {
        MEMORYEVENT_EVENTTYPE_MEMORY_EVENT_TYPE_UNSPECIFIED = 0;
        MEMORYEVENT_EVENTTYPE_RAM_MEASURED = 1;
        MEMORYEVENT_EVENTTYPE_INTERNAL_STORAGE_MEASURED = 2;
        MEMORYEVENT_EVENTTYPE_EXTERNAL_STORAGE_DETECTED = 3;
        MEMORYEVENT_EVENTTYPE_EXTERNAL_STORAGE_REMOVED = 4;
        MEMORYEVENT_EVENTTYPE_EXTERNAL_STORAGE_MEASURED = 5;
    }
    MemoryEvent_EventType eventType = 3;
}

message MemoryInfo {
    // Total internal storage on device in bytes.
    string totalInternalStorage = 1;
    // Total RAM on device in bytes.
    string totalRam = 2;
}

message NetworkInfo {
    // IMEI number of the GSM device, e.g. A1000031212.
    string imei = 1;
    // MEID number of the CDMA device, e.g. A00000292788E1.
    string meid = 2;
    // WiFi MAC address of the device, e.g. 7c:11:11:11:11:11.
    string wifiMacAddress = 3;
}

message NonComplianceDetail {
    // If the policy setting could not be applied, the current value of the setting on the device.
    ;
    // For settings with nested fields, if a particular nested field is out of compliance, this specifies the full path to the offending field. The path is formatted in the same way the policy JSON field would be referenced in JavaScript, that is: 1) For object-typed fields, the field name is followed by a dot then by a  subfield name. 2) For array-typed fields, the field name is followed by the array index  enclosed in brackets. For example, to indicate a problem with the url field in the externalData field in the 3rd application, the path would be applications[2].externalData.url
    string fieldPath = 2;
    // If package_name is set and the non-compliance reason is APP_NOT_INSTALLED or APP_NOT_UPDATED, the detailed reason the app cannot be installed or updated.
    enum NonComplianceDetail_InstallationFailureReason {
        NONCOMPLIANCEDETAIL_INSTALLATIONFAILUREREASON_INSTALLATION_FAILURE_REASON_UNSPECIFIED = 0;
        NONCOMPLIANCEDETAIL_INSTALLATIONFAILUREREASON_INSTALLATION_FAILURE_REASON_UNKNOWN = 1;
        NONCOMPLIANCEDETAIL_INSTALLATIONFAILUREREASON_IN_PROGRESS = 2;
        NONCOMPLIANCEDETAIL_INSTALLATIONFAILUREREASON_NOT_FOUND = 3;
        NONCOMPLIANCEDETAIL_INSTALLATIONFAILUREREASON_NOT_COMPATIBLE_WITH_DEVICE = 4;
        NONCOMPLIANCEDETAIL_INSTALLATIONFAILUREREASON_NOT_APPROVED = 5;
        NONCOMPLIANCEDETAIL_INSTALLATIONFAILUREREASON_PERMISSIONS_NOT_ACCEPTED = 6;
        NONCOMPLIANCEDETAIL_INSTALLATIONFAILUREREASON_NOT_AVAILABLE_IN_COUNTRY = 7;
        NONCOMPLIANCEDETAIL_INSTALLATIONFAILUREREASON_NO_LICENSES_REMAINING = 8;
        NONCOMPLIANCEDETAIL_INSTALLATIONFAILUREREASON_NOT_ENROLLED = 9;
        NONCOMPLIANCEDETAIL_INSTALLATIONFAILUREREASON_USER_INVALID = 10;
    }
    NonComplianceDetail_InstallationFailureReason installationFailureReason = 3;
    // The reason the device is not in compliance with the setting.
    enum NonComplianceDetail_NonComplianceReason {
        NONCOMPLIANCEDETAIL_NONCOMPLIANCEREASON_NON_COMPLIANCE_REASON_UNSPECIFIED = 0;
        NONCOMPLIANCEDETAIL_NONCOMPLIANCEREASON_API_LEVEL = 1;
        NONCOMPLIANCEDETAIL_NONCOMPLIANCEREASON_ADMIN_TYPE = 2;
        NONCOMPLIANCEDETAIL_NONCOMPLIANCEREASON_USER_ACTION = 3;
        NONCOMPLIANCEDETAIL_NONCOMPLIANCEREASON_INVALID_VALUE = 4;
        NONCOMPLIANCEDETAIL_NONCOMPLIANCEREASON_APP_NOT_INSTALLED = 5;
        NONCOMPLIANCEDETAIL_NONCOMPLIANCEREASON_UNSUPPORTED = 6;
        NONCOMPLIANCEDETAIL_NONCOMPLIANCEREASON_APP_INSTALLED = 7;
        NONCOMPLIANCEDETAIL_NONCOMPLIANCEREASON_PENDING = 8;
        NONCOMPLIANCEDETAIL_NONCOMPLIANCEREASON_APP_INCOMPATIBLE = 9;
        NONCOMPLIANCEDETAIL_NONCOMPLIANCEREASON_APP_NOT_UPDATED = 10;
    }
    NonComplianceDetail_NonComplianceReason nonComplianceReason = 4;
    // The package name indicating which application is out of compliance, if applicable.
    string packageName = 5;
    // The name of the policy setting. This is the JSON field name of a top-level Policy  field.
    string settingName = 6;
}

message NonComplianceDetailCondition {
    // The reason the device is not in compliance with the setting. If not set, then this condition matches any reason.
    enum NonComplianceDetailCondition_NonComplianceReason {
        NONCOMPLIANCEDETAILCONDITION_NONCOMPLIANCEREASON_NON_COMPLIANCE_REASON_UNSPECIFIED = 0;
        NONCOMPLIANCEDETAILCONDITION_NONCOMPLIANCEREASON_API_LEVEL = 1;
        NONCOMPLIANCEDETAILCONDITION_NONCOMPLIANCEREASON_ADMIN_TYPE = 2;
        NONCOMPLIANCEDETAILCONDITION_NONCOMPLIANCEREASON_USER_ACTION = 3;
        NONCOMPLIANCEDETAILCONDITION_NONCOMPLIANCEREASON_INVALID_VALUE = 4;
        NONCOMPLIANCEDETAILCONDITION_NONCOMPLIANCEREASON_APP_NOT_INSTALLED = 5;
        NONCOMPLIANCEDETAILCONDITION_NONCOMPLIANCEREASON_UNSUPPORTED = 6;
        NONCOMPLIANCEDETAILCONDITION_NONCOMPLIANCEREASON_APP_INSTALLED = 7;
        NONCOMPLIANCEDETAILCONDITION_NONCOMPLIANCEREASON_PENDING = 8;
        NONCOMPLIANCEDETAILCONDITION_NONCOMPLIANCEREASON_APP_INCOMPATIBLE = 9;
        NONCOMPLIANCEDETAILCONDITION_NONCOMPLIANCEREASON_APP_NOT_UPDATED = 10;
    }
    NonComplianceDetailCondition_NonComplianceReason nonComplianceReason = 1;
    // The package name indicating which application is out of compliance. If not set, then this condition matches any package name.
    string packageName = 2;
    // The name of the policy setting. This is the JSON field name of a top-level Policy field. If not set, then this condition matches any setting name.
    string settingName = 3;
}

message Operation {
    // If the value is false, it means the operation is still in progress. If true, the operation is completed, and either error or response is available.
    bool done = 1;
    // The error result of the operation in case of failure or cancellation.
    Status error = 2;
    // Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
    map<string, > metadata = 3;
    // The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the name should have the format of operations/some/unique/name.
    string name = 4;
    // The normal response of the operation in case of success. If the original method returns no data on success, such as Delete, the response is google.protobuf.Empty. If the original method is standard Get/Create/Update, the response should be the resource. For other methods, the response should have the type XxxResponse, where Xxx is the original method name. For example, if the original method name is TakeSnapshot(), the inferred response type is TakeSnapshotResponse.
    map<string, > response = 5;
}

message PasswordRequirements {
    // A device will be wiped after too many incorrect device-unlock passwords have been entered. A value of 0 means there is no restriction.
    int32 maximumFailedPasswordsForWipe = 1;
    // Password expiration timeout.
    string passwordExpirationTimeout = 2;
    // The length of the password history. After setting this, the user will not be able to enter a new password that is the same as any password in the history. A value of 0 means there is no restriction.
    int32 passwordHistoryLength = 3;
    // The minimum allowed password length. A value of 0 means there is no restriction. Only enforced when password_quality is NUMERIC, NUMERIC_COMPLEX, ALPHABETIC, ALPHANUMERIC, or COMPLEX.
    int32 passwordMinimumLength = 4;
    // Minimum number of letters required in the password. Only enforced when password_quality is COMPLEX.
    int32 passwordMinimumLetters = 5;
    // Minimum number of lower case letters required in the password. Only enforced when password_quality is COMPLEX.
    int32 passwordMinimumLowerCase = 6;
    // Minimum number of non-letter characters (numerical digits or symbols) required in the password. Only enforced when password_quality is COMPLEX.
    int32 passwordMinimumNonLetter = 7;
    // Minimum number of numerical digits required in the password. Only enforced when password_quality is COMPLEX.
    int32 passwordMinimumNumeric = 8;
    // Minimum number of symbols required in the password. Only enforced when password_quality is COMPLEX.
    int32 passwordMinimumSymbols = 9;
    // Minimum number of upper case letters required in the password. Only enforced when password_quality is COMPLEX.
    int32 passwordMinimumUpperCase = 10;
    // The required password quality.
    enum PasswordRequirements_PasswordQuality {
        PASSWORDREQUIREMENTS_PASSWORDQUALITY_PASSWORD_QUALITY_UNSPECIFIED = 0;
        PASSWORDREQUIREMENTS_PASSWORDQUALITY_SOMETHING = 1;
        PASSWORDREQUIREMENTS_PASSWORDQUALITY_NUMERIC = 2;
        PASSWORDREQUIREMENTS_PASSWORDQUALITY_NUMERIC_COMPLEX = 3;
        PASSWORDREQUIREMENTS_PASSWORDQUALITY_ALPHABETIC = 4;
        PASSWORDREQUIREMENTS_PASSWORDQUALITY_ALPHANUMERIC = 5;
        PASSWORDREQUIREMENTS_PASSWORDQUALITY_COMPLEX = 6;
    }
    PasswordRequirements_PasswordQuality passwordQuality = 11;
}

message PermissionGrant {
    // The android permission, e.g. android.permission.READ_CALENDAR.
    string permission = 1;
    // The policy for granting the permission.
    enum PermissionGrant_Policy {
        PERMISSIONGRANT_POLICY_PERMISSION_POLICY_UNSPECIFIED = 0;
        PERMISSIONGRANT_POLICY_PROMPT = 1;
        PERMISSIONGRANT_POLICY_GRANT = 2;
        PERMISSIONGRANT_POLICY_DENY = 3;
    }
    PermissionGrant_Policy policy = 2;
}

message PersistentPreferredActivity {
    // The intent actions to match in the filter. If any actions are included in the filter, then an intent's action must be one of those values for it to match. If no actions are included, the intent action is ignored.
    repeated string actions = 1;
    // The intent categories to match in the filter. An intent includes the categories that it requires, all of which must be included in the filter in order to match. In other words, adding a category to the filter has no impact on matching unless that category is specified in the intent.
    repeated string categories = 2;
    // The activity that should be the default intent handler. This should be an Android component name, e.g. com.android.enterprise.app/.MainActivity. Alternatively, the value may be the package name of an app, which causes Android Device Policy to choose an appropriate activity from the app to handle the intent.
    string receiverActivity = 3;
}

message Policy {
    // Whether adding new users and profiles is disabled.
    bool addUserDisabled = 1;
    // Whether adjusting the master volume is disabled.
    bool adjustVolumeDisabled = 2;
    // Policy applied to apps.
    repeated ApplicationPolicy applications = 3;
    // Whether auto time is required, which prevents the user from manually setting the date and time.
    bool autoTimeRequired = 4;
    // Whether applications other than the ones configured in applications are blocked from being installed. When set, applications that were installed under a previous policy but no longer appear in the policy are automatically uninstalled.
    bool blockApplicationsEnabled = 5;
    // Whether all cameras on the device are disabled.
    bool cameraDisabled = 6;
    // Rules declaring which mitigating actions to take when a device is not compliant with its policy. When the conditions for multiple rules are satisfied, all of the mitigating actions for the rules are taken. There is a maximum limit of 100 rules.
    repeated ComplianceRule complianceRules = 7;
    // Whether the user is allowed to enable debugging features.
    bool debuggingFeaturesAllowed = 8;
    // The default permission policy for requests for runtime permissions.
    enum Policy_DefaultPermissionPolicy {
        POLICY_DEFAULTPERMISSIONPOLICY_PERMISSION_POLICY_UNSPECIFIED = 0;
        POLICY_DEFAULTPERMISSIONPOLICY_PROMPT = 1;
        POLICY_DEFAULTPERMISSIONPOLICY_GRANT = 2;
        POLICY_DEFAULTPERMISSIONPOLICY_DENY = 3;
    }
    Policy_DefaultPermissionPolicy defaultPermissionPolicy = 9;
    // Whether factory resetting from settings is disabled.
    bool factoryResetDisabled = 10;
    // Email addresses of device administrators for factory reset protection. When the device is factory reset, it will require one of these admins to log in with the Google account email and password to unlock the device. If no admins are specified, the device will not provide factory reset protection.
    repeated string frpAdminEmails = 11;
    // Whether the user is allowed to have fun. Controls whether the Easter egg game in Settings is disabled.
    bool funDisabled = 12;
    // Whether the user is allowed to enable the "Unknown Sources" setting, which allows installation of apps from unknown sources.
    bool installUnknownSourcesAllowed = 13;
    // Whether the keyguard is disabled.
    bool keyguardDisabled = 14;
    // Maximum time in milliseconds for user activity until the device will lock. A value of 0 means there is no restriction.
    string maximumTimeToLock = 15;
    // Whether adding or removing accounts is disabled.
    bool modifyAccountsDisabled = 16;
    // The name of the policy in the form enterprises/{enterpriseId}/policies/{policyId}
    string name = 17;
    // Whether the network escape hatch is enabled. If a network connection can't be made at boot time, the escape hatch prompts the user to temporarily connect to a network in order to refresh the device policy. After applying policy, the temporary network will be forgotten and the device will continue booting. This prevents being unable to connect to a network if there is no suitable network in the last policy and the device boots into an app in lock task mode, or the user is otherwise unable to reach device settings.
    bool networkEscapeHatchEnabled = 18;
    // Network configuration for the device. See configure networks for more information.
    map<string, > openNetworkConfiguration = 19;
    // Password requirements.
    PasswordRequirements passwordRequirements = 20;
    // Default intent handler activities.
    repeated PersistentPreferredActivity persistentPreferredActivities = 21;
    // Whether removing other users is disabled.
    bool removeUserDisabled = 22;
    // Whether rebooting the device into safe boot is disabled.
    bool safeBootDisabled = 23;
    // Whether screen capture is disabled.
    bool screenCaptureDisabled = 24;
    // Whether the status bar is disabled. This disables notifications, quick settings and other screen overlays that allow escape from full-screen mode.
    bool statusBarDisabled = 25;
    // Status reporting settings
    StatusReportingSettings statusReportingSettings = 26;
    // The battery plugged in modes for which the device stays on. When using this setting, it is recommended to clear maximum_time_to_lock so that the device doesn't lock itself while it stays on.
    repeated string stayOnPluggedModes = 27;
    // The system update policy, which controls how OS updates are applied. If the update type is WINDOWED and the device has a device account, the update window will automatically apply to Play app updates as well.
    SystemUpdate systemUpdate = 28;
    // Whether the microphone is muted and adjusting microphone volume is disabled.
    bool unmuteMicrophoneDisabled = 29;
    // The version of the policy. This is a read-only field. The version is incremented each time the policy is updated.
    string version = 30;
    // Whether configuring WiFi access points is disabled.
    bool wifiConfigDisabled = 31;
    // Whether WiFi networks defined in Open Network Configuration are locked so they cannot be edited by the user.
    bool wifiConfigsLockdownEnabled = 32;
}

message PowerManagementEvent {
    // For BATTERY_LEVEL_COLLECTED events, the battery level as a percentage.
    float batteryLevel = 1;
    // The creation time of the event.
    string createTime = 2;
    // Event type.
    enum PowerManagementEvent_EventType {
        POWERMANAGEMENTEVENT_EVENTTYPE_POWER_MANAGEMENT_EVENT_TYPE_UNSPECIFIED = 0;
        POWERMANAGEMENTEVENT_EVENTTYPE_BATTERY_LEVEL_COLLECTED = 1;
        POWERMANAGEMENTEVENT_EVENTTYPE_POWER_CONNECTED = 2;
        POWERMANAGEMENTEVENT_EVENTTYPE_POWER_DISCONNECTED = 3;
        POWERMANAGEMENTEVENT_EVENTTYPE_BATTERY_LOW = 4;
        POWERMANAGEMENTEVENT_EVENTTYPE_BATTERY_OKAY = 5;
        POWERMANAGEMENTEVENT_EVENTTYPE_BOOT_COMPLETED = 6;
        POWERMANAGEMENTEVENT_EVENTTYPE_SHUTDOWN = 7;
    }
    PowerManagementEvent_EventType eventType = 3;
}

message SignupUrl {
    // The name of the resource. This must be included in the create enterprise request at the end of the signup flow.
    string name = 1;
    // A URL under which the Admin can sign up for an enterprise. The page pointed to cannot be rendered in an iframe.
    string url = 2;
}

message SoftwareInfo {
    // Android build Id string meant for displaying to the user, e.g. shamu-userdebug 6.0.1 MOB30I 2756745 dev-keys.
    string androidBuildNumber = 1;
    // Build time.
    string androidBuildTime = 2;
    // The user visible Android version string, e.g. 6.0.1.
    string androidVersion = 3;
    // The system bootloader version number, e.g. 0.6.7.
    string bootloaderVersion = 4;
    // Kernel version, e.g. 2.6.32.9-g103d848.
    string deviceKernelVersion = 5;
    // Security patch level, e.g. 2016-05-01.
    string securityPatchLevel = 6;
}

message Status {
    // The status code, which should be an enum value of google.rpc.Code.
    int32 code = 1;
    // A list of messages that carry the error details. There is a common set of message types for APIs to use.
    message Detail {
    }
    repeated Detail details = 2;
    // A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
    string message = 3;
}

message StatusReportingSettings {
    // Whether displays reporting is enabled.
    bool displayInfoEnabled = 1;
    // Whether hardware status reporting is enabled.
    bool hardwareStatusEnabled = 2;
    // Whether memory info reporting is enabled.
    bool memoryInfoEnabled = 3;
    // Whether network info reporting is enabled.
    bool networkInfoEnabled = 4;
    // Whether power management event reporting is enabled.
    bool powerManagementEventsEnabled = 5;
    // Whether software info reporting is enabled.
    bool softwareInfoEnabled = 6;
}

message SystemUpdate {
    // If the type is WINDOWED, the end of the maintenance window, measured as the number of minutes after midnight in device local time. This value must be between 0 and 1439, inclusive. If this value is less than start_minutes, then the maintenance window spans midnight. If the maintenance window specified is smaller than 30 minutes, the actual window is extended to 30 minutes beyond the start time.
    int32 endMinutes = 1;
    // If the type is WINDOWED, the start of the maintenance window, measured as the number of minutes after midnight in device local time. This value must be between 0 and 1439, inclusive.
    int32 startMinutes = 2;
    // The type of system update to configure.
    enum SystemUpdate_Type {
        SYSTEMUPDATE_TYPE_SYSTEM_UPDATE_TYPE_UNSPECIFIED = 0;
        SYSTEMUPDATE_TYPE_AUTOMATIC = 1;
        SYSTEMUPDATE_TYPE_WINDOWED = 2;
        SYSTEMUPDATE_TYPE_POSTPONE = 3;
    }
    SystemUpdate_Type type = 3;
}

message UserFacingMessage {
    // The default message that gets displayed if no localized message is specified, or the user's locale does not match with any of the localized messages. A default message must be provided if any localized messages are provided.
    string defaultMessage = 1;
    // A map which contains <locale, message> pairs. The locale is a BCP 47 language code, e.g. en-US, es-ES, fr.
    map<string, string> localizedMessages = 2;
}

message WebToken {
    // The name of the web token, which is generated by the server during creation, in the form enterprises/{enterpriseId}/webTokens/{webTokenId}.
    string name = 1;
    // The URL of the parent frame hosting the iframe with the embedded UI. To prevent XSS, the iframe may not be hosted at other URLs. The URL must use the https scheme.
    string parentFrameUrl = 2;
    // Permissions the admin may exercise in the embedded UI. The admin must have all of these permissions in order to view the UI.
    repeated string permissions = 3;
    // The token value which is used in the hosting page to generate the iframe with the embedded UI. This is a read-only field generated by the server.
    string value = 4;
}

enum Alt {
    JSON = 0;
    MEDIA = 1;
    PROTO = 2;
}

service AndroidManagementService {
    // Creates an enterprise by completing the enterprise signup flow.
    rpc PostV1Enterprises(PostV1EnterprisesRequest) returns (Enterprise) {
      option (google.api.http) = {
        post: "//v1/enterprises"
        body: "body"
      };
    }
    // Creates an enterprise signup URL.
    rpc PostV1SignupUrls(PostV1SignupUrlsRequest) returns (SignupUrl) {
      option (google.api.http) = {
        post: "//v1/signupUrls"
      };
    }
    // Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.NOTE: the name binding allows API services to override the binding to use different resource name schemes, such as users/*/operations. To override the binding, API services can add a binding such as "/v1/{name=users/*}/operations" to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.
    rpc GetV1Name(GetV1NameRequest) returns (ListOperationsResponse) {
      option (google.api.http) = {
        get: "//v1/{name}"
      };
    }
    // Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED.
    rpc DeleteV1Name(DeleteV1NameRequest) returns (Empty) {
      option (google.api.http) = {
        delete: "//v1/{name}"
      };
    }
    // Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED.
    rpc PostV1Name:Cancel(PostV1Name:CancelRequest) returns (Empty) {
      option (google.api.http) = {
        post: "//v1/{name}:cancel"
      };
    }
    // Issues a command to a device. The Operation resource returned contains a Command in its metadata field. Use the get operation method to get the status of the command.
    rpc PostV1Name:IssueCommand(PostV1Name:IssueCommandRequest) returns (Operation) {
      option (google.api.http) = {
        post: "//v1/{name}:issueCommand"
        body: "body"
      };
    }
    // Lists devices for a given enterprise.
    rpc GetV1ParentDevices(GetV1ParentDevicesRequest) returns (ListDevicesResponse) {
      option (google.api.http) = {
        get: "//v1/{parent}/devices"
      };
    }
    // Creates an enrollment token for a given enterprise.
    rpc PostV1ParentEnrollmentTokens(PostV1ParentEnrollmentTokensRequest) returns (EnrollmentToken) {
      option (google.api.http) = {
        post: "//v1/{parent}/enrollmentTokens"
        body: "body"
      };
    }
    // Lists policies for a given enterprise.
    rpc GetV1ParentPolicies(GetV1ParentPoliciesRequest) returns (ListPoliciesResponse) {
      option (google.api.http) = {
        get: "//v1/{parent}/policies"
      };
    }
    // Creates a web token to access an embeddable managed Google Play web UI for a given enterprise.
    rpc PostV1ParentWebTokens(PostV1ParentWebTokensRequest) returns (WebToken) {
      option (google.api.http) = {
        post: "//v1/{parent}/webTokens"
        body: "body"
      };
    }
}

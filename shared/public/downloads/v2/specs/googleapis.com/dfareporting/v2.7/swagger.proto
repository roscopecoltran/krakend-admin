syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package dcm/dfareportingandtrafficking;

message GetReportsReportIdFilesFileIdRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the report file.
    string fileId = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The ID of the report.
    string reportId = 8;
    string userIp = 9;
}

message GetUserprofilesRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    string userIp = 7;
}

message GetUserprofilesProfileIdRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    // The user profile ID.
    string profileId = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetUserprofilesProfileIdAccountActiveAdSummariesSummaryAccountIdRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    // User profile ID associated with this request.
    string profileId = 6;
    string quotaUser = 7;
    // Account ID.
    string summaryAccountId = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdAccountPermissionGroupsRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    // User profile ID associated with this request.
    string profileId = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetUserprofilesProfileIdAccountPermissionGroupsIdRequest {
    alt alt = 1;
    string fields = 2;
    // Account permission group ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdAccountPermissionsRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    // User profile ID associated with this request.
    string profileId = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetUserprofilesProfileIdAccountPermissionsIdRequest {
    alt alt = 1;
    string fields = 2;
    // Account permission ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdAccountUserProfilesRequest {
    // Select only active user profiles.
    bool active = 1;
    alt alt = 2;
    string fields = 3;
    // Select only user profiles with these IDs.
    repeated string ids = 4;
    string key = 5;
    // Maximum number of results to return.
    int32 maxResults = 6;
    string oauth_token = 7;
    // Value of the nextPageToken from the previous result page.
    string pageToken = 8;
    boolean prettyPrint = 9;
    // User profile ID associated with this request.
    string profileId = 10;
    string quotaUser = 11;
    // Allows searching for objects by name, ID or email. Wildcards (*) are allowed. For example, "user profile*2015" will return objects with names like "user profile June 2015", "user profile April 2015", or simply "user profile 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "user profile" will match objects with name "my user profile", "user profile 2015", or simply "user profile".
    string searchString = 12;
    // Field by which to sort the list.
    enum GetUserprofilesProfileIdAccountUserProfilesRequest_SortField {
        GETUSERPROFILESPROFILEIDACCOUNTUSERPROFILESREQUEST_SORTFIELD_ID = 0;
        GETUSERPROFILESPROFILEIDACCOUNTUSERPROFILESREQUEST_SORTFIELD_NAME = 1;
    }
    GetUserprofilesProfileIdAccountUserProfilesRequest_SortField sortField = 13;
    // Order of sorted results.
    enum GetUserprofilesProfileIdAccountUserProfilesRequest_SortOrder {
        GETUSERPROFILESPROFILEIDACCOUNTUSERPROFILESREQUEST_SORTORDER_ASCENDING = 0;
        GETUSERPROFILESPROFILEIDACCOUNTUSERPROFILESREQUEST_SORTORDER_DESCENDING = 1;
    }
    GetUserprofilesProfileIdAccountUserProfilesRequest_SortOrder sortOrder = 14;
    // Select only user profiles with the specified subaccount ID.
    string subaccountId = 15;
    string userIp = 16;
    // Select only user profiles with the specified user role ID.
    string userRoleId = 17;
}

message PutUserprofilesProfileIdAccountUserProfilesRequest {
    alt alt = 1;
    AccountUserProfile body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostUserprofilesProfileIdAccountUserProfilesRequest {
    alt alt = 1;
    AccountUserProfile body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdAccountUserProfilesIdRequest {
    alt alt = 1;
    string fields = 2;
    // User profile ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdAccountsRequest {
    // Select only active accounts. Don't set this field to select both active and non-active accounts.
    bool active = 1;
    alt alt = 2;
    string fields = 3;
    // Select only accounts with these IDs.
    repeated string ids = 4;
    string key = 5;
    // Maximum number of results to return.
    int32 maxResults = 6;
    string oauth_token = 7;
    // Value of the nextPageToken from the previous result page.
    string pageToken = 8;
    boolean prettyPrint = 9;
    // User profile ID associated with this request.
    string profileId = 10;
    string quotaUser = 11;
    // Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "account*2015" will return objects with names like "account June 2015", "account April 2015", or simply "account 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "account" will match objects with name "my account", "account 2015", or simply "account".
    string searchString = 12;
    // Field by which to sort the list.
    enum GetUserprofilesProfileIdAccountsRequest_SortField {
        GETUSERPROFILESPROFILEIDACCOUNTSREQUEST_SORTFIELD_ID = 0;
        GETUSERPROFILESPROFILEIDACCOUNTSREQUEST_SORTFIELD_NAME = 1;
    }
    GetUserprofilesProfileIdAccountsRequest_SortField sortField = 13;
    // Order of sorted results.
    enum GetUserprofilesProfileIdAccountsRequest_SortOrder {
        GETUSERPROFILESPROFILEIDACCOUNTSREQUEST_SORTORDER_ASCENDING = 0;
        GETUSERPROFILESPROFILEIDACCOUNTSREQUEST_SORTORDER_DESCENDING = 1;
    }
    GetUserprofilesProfileIdAccountsRequest_SortOrder sortOrder = 14;
    string userIp = 15;
}

message PutUserprofilesProfileIdAccountsRequest {
    alt alt = 1;
    Account body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdAccountsIdRequest {
    alt alt = 1;
    string fields = 2;
    // Account ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdAdsRequest {
    // Select only active ads.
    bool active = 1;
    // Select only ads with this advertiser ID.
    string advertiserId = 2;
    alt alt = 3;
    // Select only archived ads.
    bool archived = 4;
    // Select only ads with these audience segment IDs.
    repeated string audienceSegmentIds = 5;
    // Select only ads with these campaign IDs.
    repeated string campaignIds = 6;
    // Select default ads with the specified compatibility. Applicable when type is AD_SERVING_DEFAULT_AD. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on mobile devices for regular or interstitial ads, respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering an in-stream video ads developed with the VAST standard.
    enum GetUserprofilesProfileIdAdsRequest_Compatibility {
        GETUSERPROFILESPROFILEIDADSREQUEST_COMPATIBILITY_APP = 0;
        GETUSERPROFILESPROFILEIDADSREQUEST_COMPATIBILITY_APP_INTERSTITIAL = 1;
        GETUSERPROFILESPROFILEIDADSREQUEST_COMPATIBILITY_DISPLAY = 2;
        GETUSERPROFILESPROFILEIDADSREQUEST_COMPATIBILITY_DISPLAY_INTERSTITIAL = 3;
        GETUSERPROFILESPROFILEIDADSREQUEST_COMPATIBILITY_IN_STREAM_VIDEO = 4;
    }
    GetUserprofilesProfileIdAdsRequest_Compatibility compatibility = 7;
    // Select only ads with these creative IDs assigned.
    repeated string creativeIds = 8;
    // Select only ads with these creative optimization configuration IDs.
    repeated string creativeOptimizationConfigurationIds = 9;
    // Select only dynamic click trackers. Applicable when type is AD_SERVING_CLICK_TRACKER. If true, select dynamic click trackers. If false, select static click trackers. Leave unset to select both.
    bool dynamicClickTracker = 10;
    string fields = 11;
    // Select only ads with these IDs.
    repeated string ids = 12;
    string key = 13;
    // Select only ads with these landing page IDs.
    repeated string landingPageIds = 14;
    // Maximum number of results to return.
    int32 maxResults = 15;
    string oauth_token = 16;
    // Select only ads with this event tag override ID.
    string overriddenEventTagId = 17;
    // Value of the nextPageToken from the previous result page.
    string pageToken = 18;
    // Select only ads with these placement IDs assigned.
    repeated string placementIds = 19;
    boolean prettyPrint = 20;
    // User profile ID associated with this request.
    string profileId = 21;
    string quotaUser = 22;
    // Select only ads whose list targeting expression use these remarketing list IDs.
    repeated string remarketingListIds = 23;
    // Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "ad*2015" will return objects with names like "ad June 2015", "ad April 2015", or simply "ad 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "ad" will match objects with name "my ad", "ad 2015", or simply "ad".
    string searchString = 24;
    // Select only ads with these size IDs.
    repeated string sizeIds = 25;
    // Field by which to sort the list.
    enum GetUserprofilesProfileIdAdsRequest_SortField {
        GETUSERPROFILESPROFILEIDADSREQUEST_SORTFIELD_ID = 0;
        GETUSERPROFILESPROFILEIDADSREQUEST_SORTFIELD_NAME = 1;
    }
    GetUserprofilesProfileIdAdsRequest_SortField sortField = 26;
    // Order of sorted results.
    enum GetUserprofilesProfileIdAdsRequest_SortOrder {
        GETUSERPROFILESPROFILEIDADSREQUEST_SORTORDER_ASCENDING = 0;
        GETUSERPROFILESPROFILEIDADSREQUEST_SORTORDER_DESCENDING = 1;
    }
    GetUserprofilesProfileIdAdsRequest_SortOrder sortOrder = 27;
    // Select only ads that are SSL-compliant.
    bool sslCompliant = 28;
    // Select only ads that require SSL.
    bool sslRequired = 29;
    // Select only ads with these types.
    repeated string type = 30;
    string userIp = 31;
}

message PutUserprofilesProfileIdAdsRequest {
    alt alt = 1;
    Ad body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostUserprofilesProfileIdAdsRequest {
    alt alt = 1;
    Ad body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdAdsIdRequest {
    alt alt = 1;
    string fields = 2;
    // Ad ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdAdvertiserGroupsRequest {
    alt alt = 1;
    string fields = 2;
    // Select only advertiser groups with these IDs.
    repeated string ids = 3;
    string key = 4;
    // Maximum number of results to return.
    int32 maxResults = 5;
    string oauth_token = 6;
    // Value of the nextPageToken from the previous result page.
    string pageToken = 7;
    boolean prettyPrint = 8;
    // User profile ID associated with this request.
    string profileId = 9;
    string quotaUser = 10;
    // Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "advertiser*2015" will return objects with names like "advertiser group June 2015", "advertiser group April 2015", or simply "advertiser group 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "advertisergroup" will match objects with name "my advertisergroup", "advertisergroup 2015", or simply "advertisergroup".
    string searchString = 11;
    // Field by which to sort the list.
    enum GetUserprofilesProfileIdAdvertiserGroupsRequest_SortField {
        GETUSERPROFILESPROFILEIDADVERTISERGROUPSREQUEST_SORTFIELD_ID = 0;
        GETUSERPROFILESPROFILEIDADVERTISERGROUPSREQUEST_SORTFIELD_NAME = 1;
    }
    GetUserprofilesProfileIdAdvertiserGroupsRequest_SortField sortField = 12;
    // Order of sorted results.
    enum GetUserprofilesProfileIdAdvertiserGroupsRequest_SortOrder {
        GETUSERPROFILESPROFILEIDADVERTISERGROUPSREQUEST_SORTORDER_ASCENDING = 0;
        GETUSERPROFILESPROFILEIDADVERTISERGROUPSREQUEST_SORTORDER_DESCENDING = 1;
    }
    GetUserprofilesProfileIdAdvertiserGroupsRequest_SortOrder sortOrder = 13;
    string userIp = 14;
}

message PutUserprofilesProfileIdAdvertiserGroupsRequest {
    alt alt = 1;
    AdvertiserGroup body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostUserprofilesProfileIdAdvertiserGroupsRequest {
    alt alt = 1;
    AdvertiserGroup body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdAdvertiserGroupsIdRequest {
    alt alt = 1;
    string fields = 2;
    // Advertiser group ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message DeleteUserprofilesProfileIdAdvertiserGroupsIdRequest {
    alt alt = 1;
    string fields = 2;
    // Advertiser group ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdAdvertisersRequest {
    // Select only advertisers with these advertiser group IDs.
    repeated string advertiserGroupIds = 1;
    alt alt = 2;
    string fields = 3;
    // Select only advertisers with these floodlight configuration IDs.
    repeated string floodlightConfigurationIds = 4;
    // Select only advertisers with these IDs.
    repeated string ids = 5;
    // Select only advertisers which do not belong to any advertiser group.
    bool includeAdvertisersWithoutGroupsOnly = 6;
    string key = 7;
    // Maximum number of results to return.
    int32 maxResults = 8;
    string oauth_token = 9;
    // Select only advertisers which use another advertiser's floodlight configuration.
    bool onlyParent = 10;
    // Value of the nextPageToken from the previous result page.
    string pageToken = 11;
    boolean prettyPrint = 12;
    // User profile ID associated with this request.
    string profileId = 13;
    string quotaUser = 14;
    // Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "advertiser*2015" will return objects with names like "advertiser June 2015", "advertiser April 2015", or simply "advertiser 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "advertiser" will match objects with name "my advertiser", "advertiser 2015", or simply "advertiser".
    string searchString = 15;
    // Field by which to sort the list.
    enum GetUserprofilesProfileIdAdvertisersRequest_SortField {
        GETUSERPROFILESPROFILEIDADVERTISERSREQUEST_SORTFIELD_ID = 0;
        GETUSERPROFILESPROFILEIDADVERTISERSREQUEST_SORTFIELD_NAME = 1;
    }
    GetUserprofilesProfileIdAdvertisersRequest_SortField sortField = 16;
    // Order of sorted results.
    enum GetUserprofilesProfileIdAdvertisersRequest_SortOrder {
        GETUSERPROFILESPROFILEIDADVERTISERSREQUEST_SORTORDER_ASCENDING = 0;
        GETUSERPROFILESPROFILEIDADVERTISERSREQUEST_SORTORDER_DESCENDING = 1;
    }
    GetUserprofilesProfileIdAdvertisersRequest_SortOrder sortOrder = 17;
    // Select only advertisers with the specified status.
    enum GetUserprofilesProfileIdAdvertisersRequest_Statu {
        GETUSERPROFILESPROFILEIDADVERTISERSREQUEST_STATU_APPROVED = 0;
        GETUSERPROFILESPROFILEIDADVERTISERSREQUEST_STATU_ON_HOLD = 1;
    }
    GetUserprofilesProfileIdAdvertisersRequest_Statu status = 18;
    // Select only advertisers with these subaccount IDs.
    string subaccountId = 19;
    string userIp = 20;
}

message PutUserprofilesProfileIdAdvertisersRequest {
    alt alt = 1;
    Advertiser body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostUserprofilesProfileIdAdvertisersRequest {
    alt alt = 1;
    Advertiser body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdAdvertisersIdRequest {
    alt alt = 1;
    string fields = 2;
    // Advertiser ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdBrowsersRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    // User profile ID associated with this request.
    string profileId = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetUserprofilesProfileIdCampaignsRequest {
    // Select only campaigns whose advertisers belong to these advertiser groups.
    repeated string advertiserGroupIds = 1;
    // Select only campaigns that belong to these advertisers.
    repeated string advertiserIds = 2;
    alt alt = 3;
    // Select only archived campaigns. Don't set this field to select both archived and non-archived campaigns.
    bool archived = 4;
    // Select only campaigns that have at least one optimization activity.
    bool atLeastOneOptimizationActivity = 5;
    // Exclude campaigns with these IDs.
    repeated string excludedIds = 6;
    string fields = 7;
    // Select only campaigns with these IDs.
    repeated string ids = 8;
    string key = 9;
    // Maximum number of results to return.
    int32 maxResults = 10;
    string oauth_token = 11;
    // Select only campaigns that have overridden this event tag ID.
    string overriddenEventTagId = 12;
    // Value of the nextPageToken from the previous result page.
    string pageToken = 13;
    boolean prettyPrint = 14;
    // User profile ID associated with this request.
    string profileId = 15;
    string quotaUser = 16;
    // Allows searching for campaigns by name or ID. Wildcards (*) are allowed. For example, "campaign*2015" will return campaigns with names like "campaign June 2015", "campaign April 2015", or simply "campaign 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "campaign" will match campaigns with name "my campaign", "campaign 2015", or simply "campaign".
    string searchString = 17;
    // Field by which to sort the list.
    enum GetUserprofilesProfileIdCampaignsRequest_SortField {
        GETUSERPROFILESPROFILEIDCAMPAIGNSREQUEST_SORTFIELD_ID = 0;
        GETUSERPROFILESPROFILEIDCAMPAIGNSREQUEST_SORTFIELD_NAME = 1;
    }
    GetUserprofilesProfileIdCampaignsRequest_SortField sortField = 18;
    // Order of sorted results.
    enum GetUserprofilesProfileIdCampaignsRequest_SortOrder {
        GETUSERPROFILESPROFILEIDCAMPAIGNSREQUEST_SORTORDER_ASCENDING = 0;
        GETUSERPROFILESPROFILEIDCAMPAIGNSREQUEST_SORTORDER_DESCENDING = 1;
    }
    GetUserprofilesProfileIdCampaignsRequest_SortOrder sortOrder = 19;
    // Select only campaigns that belong to this subaccount.
    string subaccountId = 20;
    string userIp = 21;
}

message PutUserprofilesProfileIdCampaignsRequest {
    alt alt = 1;
    Campaign body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostUserprofilesProfileIdCampaignsRequest {
    alt alt = 1;
    Campaign body = 2;
    // Default landing page name for this new campaign. Must be less than 256 characters long.
    string defaultLandingPageName = 3;
    // Default landing page URL for this new campaign.
    string defaultLandingPageUrl = 4;
    string fields = 5;
    string key = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    // User profile ID associated with this request.
    string profileId = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message GetUserprofilesProfileIdCampaignsCampaignIdCampaignCreativeAssociationsRequest {
    alt alt = 1;
    // Campaign ID in this association.
    string campaignId = 2;
    string fields = 3;
    string key = 4;
    // Maximum number of results to return.
    int32 maxResults = 5;
    string oauth_token = 6;
    // Value of the nextPageToken from the previous result page.
    string pageToken = 7;
    boolean prettyPrint = 8;
    // User profile ID associated with this request.
    string profileId = 9;
    string quotaUser = 10;
    // Order of sorted results.
    enum GetUserprofilesProfileIdCampaignsCampaignIdCampaignCreativeAssociationsRequest_SortOrder {
        GETUSERPROFILESPROFILEIDCAMPAIGNSCAMPAIGNIDCAMPAIGNCREATIVEASSOCIATIONSREQUEST_SORTORDER_ASCENDING = 0;
        GETUSERPROFILESPROFILEIDCAMPAIGNSCAMPAIGNIDCAMPAIGNCREATIVEASSOCIATIONSREQUEST_SORTORDER_DESCENDING = 1;
    }
    GetUserprofilesProfileIdCampaignsCampaignIdCampaignCreativeAssociationsRequest_SortOrder sortOrder = 11;
    string userIp = 12;
}

message PostUserprofilesProfileIdCampaignsCampaignIdCampaignCreativeAssociationsRequest {
    alt alt = 1;
    CampaignCreativeAssociation body = 2;
    // Campaign ID in this association.
    string campaignId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // User profile ID associated with this request.
    string profileId = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetUserprofilesProfileIdCampaignsCampaignIdLandingPagesRequest {
    alt alt = 1;
    // Landing page campaign ID.
    string campaignId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PutUserprofilesProfileIdCampaignsCampaignIdLandingPagesRequest {
    alt alt = 1;
    LandingPage body = 2;
    // Landing page campaign ID.
    string campaignId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // User profile ID associated with this request.
    string profileId = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostUserprofilesProfileIdCampaignsCampaignIdLandingPagesRequest {
    alt alt = 1;
    LandingPage body = 2;
    // Landing page campaign ID.
    string campaignId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // User profile ID associated with this request.
    string profileId = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetUserprofilesProfileIdCampaignsCampaignIdLandingPagesIdRequest {
    alt alt = 1;
    // Landing page campaign ID.
    string campaignId = 2;
    string fields = 3;
    // Landing page ID.
    string id = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // User profile ID associated with this request.
    string profileId = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message DeleteUserprofilesProfileIdCampaignsCampaignIdLandingPagesIdRequest {
    alt alt = 1;
    // Landing page campaign ID.
    string campaignId = 2;
    string fields = 3;
    // Landing page ID.
    string id = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // User profile ID associated with this request.
    string profileId = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetUserprofilesProfileIdCampaignsIdRequest {
    alt alt = 1;
    string fields = 2;
    // Campaign ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdChangeLogsRequest {
    // Select only change logs with the specified action.
    enum GetUserprofilesProfileIdChangeLogsRequest_Action {
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_ACTION_ACTION_ADD = 0;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_ACTION_ACTION_ASSIGN = 1;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_ACTION_ACTION_ASSOCIATE = 2;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_ACTION_ACTION_CREATE = 3;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_ACTION_ACTION_DELETE = 4;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_ACTION_ACTION_DISABLE = 5;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_ACTION_ACTION_EMAIL_TAGS = 6;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_ACTION_ACTION_ENABLE = 7;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_ACTION_ACTION_LINK = 8;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_ACTION_ACTION_MARK_AS_DEFAULT = 9;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_ACTION_ACTION_PUSH = 10;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_ACTION_ACTION_REMOVE = 11;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_ACTION_ACTION_SEND = 12;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_ACTION_ACTION_SHARE = 13;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_ACTION_ACTION_UNASSIGN = 14;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_ACTION_ACTION_UNLINK = 15;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_ACTION_ACTION_UPDATE = 16;
    }
    GetUserprofilesProfileIdChangeLogsRequest_Action action = 1;
    alt alt = 2;
    string fields = 3;
    // Select only change logs with these IDs.
    repeated string ids = 4;
    string key = 5;
    // Select only change logs whose change time is before the specified maxChangeTime.The time should be formatted as an RFC3339 date/time string. For example, for 10:54 PM on July 18th, 2015, in the America/New York time zone, the format is "2015-07-18T22:54:00-04:00". In other words, the year, month, day, the letter T, the hour (24-hour clock system), minute, second, and then the time zone offset.
    string maxChangeTime = 6;
    // Maximum number of results to return.
    int32 maxResults = 7;
    // Select only change logs whose change time is before the specified minChangeTime.The time should be formatted as an RFC3339 date/time string. For example, for 10:54 PM on July 18th, 2015, in the America/New York time zone, the format is "2015-07-18T22:54:00-04:00". In other words, the year, month, day, the letter T, the hour (24-hour clock system), minute, second, and then the time zone offset.
    string minChangeTime = 8;
    string oauth_token = 9;
    // Select only change logs with these object IDs.
    repeated string objectIds = 10;
    // Select only change logs with the specified object type.
    enum GetUserprofilesProfileIdChangeLogsRequest_ObjectType {
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_OBJECTTYPE_OBJECT_ACCOUNT = 0;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_OBJECTTYPE_OBJECT_ACCOUNT_BILLING_FEATURE = 1;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_OBJECTTYPE_OBJECT_AD = 2;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_OBJECTTYPE_OBJECT_ADVERTISER = 3;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_OBJECTTYPE_OBJECT_ADVERTISER_GROUP = 4;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_OBJECTTYPE_OBJECT_BILLING_ACCOUNT_GROUP = 5;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_OBJECTTYPE_OBJECT_BILLING_FEATURE = 6;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_OBJECTTYPE_OBJECT_BILLING_MINIMUM_FEE = 7;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_OBJECTTYPE_OBJECT_BILLING_PROFILE = 8;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_OBJECTTYPE_OBJECT_CAMPAIGN = 9;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_OBJECTTYPE_OBJECT_CONTENT_CATEGORY = 10;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_OBJECTTYPE_OBJECT_CREATIVE = 11;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_OBJECTTYPE_OBJECT_CREATIVE_ASSET = 12;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_OBJECTTYPE_OBJECT_CREATIVE_BUNDLE = 13;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_OBJECTTYPE_OBJECT_CREATIVE_FIELD = 14;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_OBJECTTYPE_OBJECT_CREATIVE_GROUP = 15;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_OBJECTTYPE_OBJECT_DFA_SITE = 16;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_OBJECTTYPE_OBJECT_EVENT_TAG = 17;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_OBJECTTYPE_OBJECT_FLOODLIGHT_ACTIVITY_GROUP = 18;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_OBJECTTYPE_OBJECT_FLOODLIGHT_ACTVITY = 19;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_OBJECTTYPE_OBJECT_FLOODLIGHT_CONFIGURATION = 20;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_OBJECTTYPE_OBJECT_INSTREAM_CREATIVE = 21;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_OBJECTTYPE_OBJECT_LANDING_PAGE = 22;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_OBJECTTYPE_OBJECT_MEDIA_ORDER = 23;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_OBJECTTYPE_OBJECT_PLACEMENT = 24;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_OBJECTTYPE_OBJECT_PLACEMENT_STRATEGY = 25;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_OBJECTTYPE_OBJECT_PLAYSTORE_LINK = 26;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_OBJECTTYPE_OBJECT_PROVIDED_LIST_CLIENT = 27;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_OBJECTTYPE_OBJECT_RATE_CARD = 28;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_OBJECTTYPE_OBJECT_REMARKETING_LIST = 29;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_OBJECTTYPE_OBJECT_RICHMEDIA_CREATIVE = 30;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_OBJECTTYPE_OBJECT_SD_SITE = 31;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_OBJECTTYPE_OBJECT_SEARCH_LIFT_STUDY = 32;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_OBJECTTYPE_OBJECT_SIZE = 33;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_OBJECTTYPE_OBJECT_SUBACCOUNT = 34;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_OBJECTTYPE_OBJECT_TARGETING_TEMPLATE = 35;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_OBJECTTYPE_OBJECT_USER_PROFILE = 36;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_OBJECTTYPE_OBJECT_USER_PROFILE_FILTER = 37;
        GETUSERPROFILESPROFILEIDCHANGELOGSREQUEST_OBJECTTYPE_OBJECT_USER_ROLE = 38;
    }
    GetUserprofilesProfileIdChangeLogsRequest_ObjectType objectType = 11;
    // Value of the nextPageToken from the previous result page.
    string pageToken = 12;
    boolean prettyPrint = 13;
    // User profile ID associated with this request.
    string profileId = 14;
    string quotaUser = 15;
    // Select only change logs whose object ID, user name, old or new values match the search string.
    string searchString = 16;
    string userIp = 17;
    // Select only change logs with these user profile IDs.
    repeated string userProfileIds = 18;
}

message GetUserprofilesProfileIdChangeLogsIdRequest {
    alt alt = 1;
    string fields = 2;
    // Change log ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdCitiesRequest {
    alt alt = 1;
    // Select only cities from these countries.
    repeated string countryDartIds = 2;
    // Select only cities with these DART IDs.
    repeated string dartIds = 3;
    string fields = 4;
    string key = 5;
    // Select only cities with names starting with this prefix.
    string namePrefix = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    // User profile ID associated with this request.
    string profileId = 9;
    string quotaUser = 10;
    // Select only cities from these regions.
    repeated string regionDartIds = 11;
    string userIp = 12;
}

message GetUserprofilesProfileIdConnectionTypesRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    // User profile ID associated with this request.
    string profileId = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetUserprofilesProfileIdConnectionTypesIdRequest {
    alt alt = 1;
    string fields = 2;
    // Connection type ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdContentCategoriesRequest {
    alt alt = 1;
    string fields = 2;
    // Select only content categories with these IDs.
    repeated string ids = 3;
    string key = 4;
    // Maximum number of results to return.
    int32 maxResults = 5;
    string oauth_token = 6;
    // Value of the nextPageToken from the previous result page.
    string pageToken = 7;
    boolean prettyPrint = 8;
    // User profile ID associated with this request.
    string profileId = 9;
    string quotaUser = 10;
    // Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "contentcategory*2015" will return objects with names like "contentcategory June 2015", "contentcategory April 2015", or simply "contentcategory 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "contentcategory" will match objects with name "my contentcategory", "contentcategory 2015", or simply "contentcategory".
    string searchString = 11;
    // Field by which to sort the list.
    enum GetUserprofilesProfileIdContentCategoriesRequest_SortField {
        GETUSERPROFILESPROFILEIDCONTENTCATEGORIESREQUEST_SORTFIELD_ID = 0;
        GETUSERPROFILESPROFILEIDCONTENTCATEGORIESREQUEST_SORTFIELD_NAME = 1;
    }
    GetUserprofilesProfileIdContentCategoriesRequest_SortField sortField = 12;
    // Order of sorted results.
    enum GetUserprofilesProfileIdContentCategoriesRequest_SortOrder {
        GETUSERPROFILESPROFILEIDCONTENTCATEGORIESREQUEST_SORTORDER_ASCENDING = 0;
        GETUSERPROFILESPROFILEIDCONTENTCATEGORIESREQUEST_SORTORDER_DESCENDING = 1;
    }
    GetUserprofilesProfileIdContentCategoriesRequest_SortOrder sortOrder = 13;
    string userIp = 14;
}

message PutUserprofilesProfileIdContentCategoriesRequest {
    alt alt = 1;
    ContentCategory body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostUserprofilesProfileIdContentCategoriesRequest {
    alt alt = 1;
    ContentCategory body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdContentCategoriesIdRequest {
    alt alt = 1;
    string fields = 2;
    // Content category ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message DeleteUserprofilesProfileIdContentCategoriesIdRequest {
    alt alt = 1;
    string fields = 2;
    // Content category ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostUserprofilesProfileIdConversionsBatchinsertRequest {
    alt alt = 1;
    ConversionsBatchInsertRequest body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdCountriesRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    // User profile ID associated with this request.
    string profileId = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetUserprofilesProfileIdCountriesDartIdRequest {
    alt alt = 1;
    // Country DART ID.
    string dartId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostUserprofilesProfileIdCreativeAssetsAdvertiserIdCreativeAssetsRequest {
    // Advertiser ID of this creative. This is a required field.
    string advertiserId = 1;
    alt alt = 2;
    CreativeAssetMetadata body = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // User profile ID associated with this request.
    string profileId = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetUserprofilesProfileIdCreativeFieldsRequest {
    // Select only creative fields that belong to these advertisers.
    repeated string advertiserIds = 1;
    alt alt = 2;
    string fields = 3;
    // Select only creative fields with these IDs.
    repeated string ids = 4;
    string key = 5;
    // Maximum number of results to return.
    int32 maxResults = 6;
    string oauth_token = 7;
    // Value of the nextPageToken from the previous result page.
    string pageToken = 8;
    boolean prettyPrint = 9;
    // User profile ID associated with this request.
    string profileId = 10;
    string quotaUser = 11;
    // Allows searching for creative fields by name or ID. Wildcards (*) are allowed. For example, "creativefield*2015" will return creative fields with names like "creativefield June 2015", "creativefield April 2015", or simply "creativefield 2015". Most of the searches also add wild-cards implicitly at the start and the end of the search string. For example, a search string of "creativefield" will match creative fields with the name "my creativefield", "creativefield 2015", or simply "creativefield".
    string searchString = 12;
    // Field by which to sort the list.
    enum GetUserprofilesProfileIdCreativeFieldsRequest_SortField {
        GETUSERPROFILESPROFILEIDCREATIVEFIELDSREQUEST_SORTFIELD_ID = 0;
        GETUSERPROFILESPROFILEIDCREATIVEFIELDSREQUEST_SORTFIELD_NAME = 1;
    }
    GetUserprofilesProfileIdCreativeFieldsRequest_SortField sortField = 13;
    // Order of sorted results.
    enum GetUserprofilesProfileIdCreativeFieldsRequest_SortOrder {
        GETUSERPROFILESPROFILEIDCREATIVEFIELDSREQUEST_SORTORDER_ASCENDING = 0;
        GETUSERPROFILESPROFILEIDCREATIVEFIELDSREQUEST_SORTORDER_DESCENDING = 1;
    }
    GetUserprofilesProfileIdCreativeFieldsRequest_SortOrder sortOrder = 14;
    string userIp = 15;
}

message PutUserprofilesProfileIdCreativeFieldsRequest {
    alt alt = 1;
    CreativeField body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostUserprofilesProfileIdCreativeFieldsRequest {
    alt alt = 1;
    CreativeField body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdCreativeFieldsCreativeFieldIdCreativeFieldValuesRequest {
    alt alt = 1;
    // Creative field ID for this creative field value.
    string creativeFieldId = 2;
    string fields = 3;
    // Select only creative field values with these IDs.
    repeated string ids = 4;
    string key = 5;
    // Maximum number of results to return.
    int32 maxResults = 6;
    string oauth_token = 7;
    // Value of the nextPageToken from the previous result page.
    string pageToken = 8;
    boolean prettyPrint = 9;
    // User profile ID associated with this request.
    string profileId = 10;
    string quotaUser = 11;
    // Allows searching for creative field values by their values. Wildcards (e.g. *) are not allowed.
    string searchString = 12;
    // Field by which to sort the list.
    enum GetUserprofilesProfileIdCreativeFieldsCreativeFieldIdCreativeFieldValuesRequest_SortField {
        GETUSERPROFILESPROFILEIDCREATIVEFIELDSCREATIVEFIELDIDCREATIVEFIELDVALUESREQUEST_SORTFIELD_ID = 0;
        GETUSERPROFILESPROFILEIDCREATIVEFIELDSCREATIVEFIELDIDCREATIVEFIELDVALUESREQUEST_SORTFIELD_VALUE = 1;
    }
    GetUserprofilesProfileIdCreativeFieldsCreativeFieldIdCreativeFieldValuesRequest_SortField sortField = 13;
    // Order of sorted results.
    enum GetUserprofilesProfileIdCreativeFieldsCreativeFieldIdCreativeFieldValuesRequest_SortOrder {
        GETUSERPROFILESPROFILEIDCREATIVEFIELDSCREATIVEFIELDIDCREATIVEFIELDVALUESREQUEST_SORTORDER_ASCENDING = 0;
        GETUSERPROFILESPROFILEIDCREATIVEFIELDSCREATIVEFIELDIDCREATIVEFIELDVALUESREQUEST_SORTORDER_DESCENDING = 1;
    }
    GetUserprofilesProfileIdCreativeFieldsCreativeFieldIdCreativeFieldValuesRequest_SortOrder sortOrder = 14;
    string userIp = 15;
}

message PutUserprofilesProfileIdCreativeFieldsCreativeFieldIdCreativeFieldValuesRequest {
    alt alt = 1;
    CreativeFieldValue body = 2;
    // Creative field ID for this creative field value.
    string creativeFieldId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // User profile ID associated with this request.
    string profileId = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostUserprofilesProfileIdCreativeFieldsCreativeFieldIdCreativeFieldValuesRequest {
    alt alt = 1;
    CreativeFieldValue body = 2;
    // Creative field ID for this creative field value.
    string creativeFieldId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // User profile ID associated with this request.
    string profileId = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetUserprofilesProfileIdCreativeFieldsCreativeFieldIdCreativeFieldValuesIdRequest {
    alt alt = 1;
    // Creative field ID for this creative field value.
    string creativeFieldId = 2;
    string fields = 3;
    // Creative Field Value ID
    string id = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // User profile ID associated with this request.
    string profileId = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message DeleteUserprofilesProfileIdCreativeFieldsCreativeFieldIdCreativeFieldValuesIdRequest {
    alt alt = 1;
    // Creative field ID for this creative field value.
    string creativeFieldId = 2;
    string fields = 3;
    // Creative Field Value ID
    string id = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // User profile ID associated with this request.
    string profileId = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetUserprofilesProfileIdCreativeFieldsIdRequest {
    alt alt = 1;
    string fields = 2;
    // Creative Field ID
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message DeleteUserprofilesProfileIdCreativeFieldsIdRequest {
    alt alt = 1;
    string fields = 2;
    // Creative Field ID
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdCreativeGroupsRequest {
    // Select only creative groups that belong to these advertisers.
    repeated string advertiserIds = 1;
    alt alt = 2;
    string fields = 3;
    // Select only creative groups that belong to this subgroup.
    int32 groupNumber = 4;
    // Select only creative groups with these IDs.
    repeated string ids = 5;
    string key = 6;
    // Maximum number of results to return.
    int32 maxResults = 7;
    string oauth_token = 8;
    // Value of the nextPageToken from the previous result page.
    string pageToken = 9;
    boolean prettyPrint = 10;
    // User profile ID associated with this request.
    string profileId = 11;
    string quotaUser = 12;
    // Allows searching for creative groups by name or ID. Wildcards (*) are allowed. For example, "creativegroup*2015" will return creative groups with names like "creativegroup June 2015", "creativegroup April 2015", or simply "creativegroup 2015". Most of the searches also add wild-cards implicitly at the start and the end of the search string. For example, a search string of "creativegroup" will match creative groups with the name "my creativegroup", "creativegroup 2015", or simply "creativegroup".
    string searchString = 13;
    // Field by which to sort the list.
    enum GetUserprofilesProfileIdCreativeGroupsRequest_SortField {
        GETUSERPROFILESPROFILEIDCREATIVEGROUPSREQUEST_SORTFIELD_ID = 0;
        GETUSERPROFILESPROFILEIDCREATIVEGROUPSREQUEST_SORTFIELD_NAME = 1;
    }
    GetUserprofilesProfileIdCreativeGroupsRequest_SortField sortField = 14;
    // Order of sorted results.
    enum GetUserprofilesProfileIdCreativeGroupsRequest_SortOrder {
        GETUSERPROFILESPROFILEIDCREATIVEGROUPSREQUEST_SORTORDER_ASCENDING = 0;
        GETUSERPROFILESPROFILEIDCREATIVEGROUPSREQUEST_SORTORDER_DESCENDING = 1;
    }
    GetUserprofilesProfileIdCreativeGroupsRequest_SortOrder sortOrder = 15;
    string userIp = 16;
}

message PutUserprofilesProfileIdCreativeGroupsRequest {
    alt alt = 1;
    CreativeGroup body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostUserprofilesProfileIdCreativeGroupsRequest {
    alt alt = 1;
    CreativeGroup body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdCreativeGroupsIdRequest {
    alt alt = 1;
    string fields = 2;
    // Creative group ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdCreativesRequest {
    // Select only active creatives. Leave blank to select active and inactive creatives.
    bool active = 1;
    // Select only creatives with this advertiser ID.
    string advertiserId = 2;
    alt alt = 3;
    // Select only archived creatives. Leave blank to select archived and unarchived creatives.
    bool archived = 4;
    // Select only creatives with this campaign ID.
    string campaignId = 5;
    // Select only in-stream video creatives with these companion IDs.
    repeated string companionCreativeIds = 6;
    // Select only creatives with these creative field IDs.
    repeated string creativeFieldIds = 7;
    string fields = 8;
    // Select only creatives with these IDs.
    repeated string ids = 9;
    string key = 10;
    // Maximum number of results to return.
    int32 maxResults = 11;
    string oauth_token = 12;
    // Value of the nextPageToken from the previous result page.
    string pageToken = 13;
    boolean prettyPrint = 14;
    // User profile ID associated with this request.
    string profileId = 15;
    string quotaUser = 16;
    // Select only creatives with these rendering IDs.
    repeated string renderingIds = 17;
    // Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "creative*2015" will return objects with names like "creative June 2015", "creative April 2015", or simply "creative 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "creative" will match objects with name "my creative", "creative 2015", or simply "creative".
    string searchString = 18;
    // Select only creatives with these size IDs.
    repeated string sizeIds = 19;
    // Field by which to sort the list.
    enum GetUserprofilesProfileIdCreativesRequest_SortField {
        GETUSERPROFILESPROFILEIDCREATIVESREQUEST_SORTFIELD_ID = 0;
        GETUSERPROFILESPROFILEIDCREATIVESREQUEST_SORTFIELD_NAME = 1;
    }
    GetUserprofilesProfileIdCreativesRequest_SortField sortField = 20;
    // Order of sorted results.
    enum GetUserprofilesProfileIdCreativesRequest_SortOrder {
        GETUSERPROFILESPROFILEIDCREATIVESREQUEST_SORTORDER_ASCENDING = 0;
        GETUSERPROFILESPROFILEIDCREATIVESREQUEST_SORTORDER_DESCENDING = 1;
    }
    GetUserprofilesProfileIdCreativesRequest_SortOrder sortOrder = 21;
    // Select only creatives corresponding to this Studio creative ID.
    string studioCreativeId = 22;
    // Select only creatives with these creative types.
    repeated string types = 23;
    string userIp = 24;
}

message PutUserprofilesProfileIdCreativesRequest {
    alt alt = 1;
    Creative body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostUserprofilesProfileIdCreativesRequest {
    alt alt = 1;
    Creative body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdCreativesIdRequest {
    alt alt = 1;
    string fields = 2;
    // Creative ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostUserprofilesProfileIdDimensionvaluesQueryRequest {
    alt alt = 1;
    DimensionValueRequest body = 2;
    string fields = 3;
    string key = 4;
    // Maximum number of results to return.
    int32 maxResults = 5;
    string oauth_token = 6;
    // The value of the nextToken from the previous result page.
    string pageToken = 7;
    boolean prettyPrint = 8;
    // The DFA user profile ID.
    string profileId = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message GetUserprofilesProfileIdDirectorySiteContactsRequest {
    alt alt = 1;
    // Select only directory site contacts with these directory site IDs. This is a required field.
    repeated string directorySiteIds = 2;
    string fields = 3;
    // Select only directory site contacts with these IDs.
    repeated string ids = 4;
    string key = 5;
    // Maximum number of results to return.
    int32 maxResults = 6;
    string oauth_token = 7;
    // Value of the nextPageToken from the previous result page.
    string pageToken = 8;
    boolean prettyPrint = 9;
    // User profile ID associated with this request.
    string profileId = 10;
    string quotaUser = 11;
    // Allows searching for objects by name, ID or email. Wildcards (*) are allowed. For example, "directory site contact*2015" will return objects with names like "directory site contact June 2015", "directory site contact April 2015", or simply "directory site contact 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "directory site contact" will match objects with name "my directory site contact", "directory site contact 2015", or simply "directory site contact".
    string searchString = 12;
    // Field by which to sort the list.
    enum GetUserprofilesProfileIdDirectorySiteContactsRequest_SortField {
        GETUSERPROFILESPROFILEIDDIRECTORYSITECONTACTSREQUEST_SORTFIELD_ID = 0;
        GETUSERPROFILESPROFILEIDDIRECTORYSITECONTACTSREQUEST_SORTFIELD_NAME = 1;
    }
    GetUserprofilesProfileIdDirectorySiteContactsRequest_SortField sortField = 13;
    // Order of sorted results.
    enum GetUserprofilesProfileIdDirectorySiteContactsRequest_SortOrder {
        GETUSERPROFILESPROFILEIDDIRECTORYSITECONTACTSREQUEST_SORTORDER_ASCENDING = 0;
        GETUSERPROFILESPROFILEIDDIRECTORYSITECONTACTSREQUEST_SORTORDER_DESCENDING = 1;
    }
    GetUserprofilesProfileIdDirectorySiteContactsRequest_SortOrder sortOrder = 14;
    string userIp = 15;
}

message GetUserprofilesProfileIdDirectorySiteContactsIdRequest {
    alt alt = 1;
    string fields = 2;
    // Directory site contact ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdDirectorySitesRequest {
    // This search filter is no longer supported and will have no effect on the results returned.
    bool acceptsInStreamVideoPlacements = 1;
    // This search filter is no longer supported and will have no effect on the results returned.
    bool acceptsInterstitialPlacements = 2;
    // Select only directory sites that accept publisher paid placements. This field can be left blank.
    bool acceptsPublisherPaidPlacements = 3;
    // Select only active directory sites. Leave blank to retrieve both active and inactive directory sites.
    bool active = 4;
    alt alt = 5;
    // Select only directory sites with this country ID.
    string countryId = 6;
    // Select only directory sites with this DFP network code.
    string dfp_network_code = 7;
    string fields = 8;
    // Select only directory sites with these IDs.
    repeated string ids = 9;
    string key = 10;
    // Maximum number of results to return.
    int32 maxResults = 11;
    string oauth_token = 12;
    // Value of the nextPageToken from the previous result page.
    string pageToken = 13;
    // Select only directory sites with this parent ID.
    string parentId = 14;
    boolean prettyPrint = 15;
    // User profile ID associated with this request.
    string profileId = 16;
    string quotaUser = 17;
    // Allows searching for objects by name, ID or URL. Wildcards (*) are allowed. For example, "directory site*2015" will return objects with names like "directory site June 2015", "directory site April 2015", or simply "directory site 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "directory site" will match objects with name "my directory site", "directory site 2015" or simply, "directory site".
    string searchString = 18;
    // Field by which to sort the list.
    enum GetUserprofilesProfileIdDirectorySitesRequest_SortField {
        GETUSERPROFILESPROFILEIDDIRECTORYSITESREQUEST_SORTFIELD_ID = 0;
        GETUSERPROFILESPROFILEIDDIRECTORYSITESREQUEST_SORTFIELD_NAME = 1;
    }
    GetUserprofilesProfileIdDirectorySitesRequest_SortField sortField = 19;
    // Order of sorted results.
    enum GetUserprofilesProfileIdDirectorySitesRequest_SortOrder {
        GETUSERPROFILESPROFILEIDDIRECTORYSITESREQUEST_SORTORDER_ASCENDING = 0;
        GETUSERPROFILESPROFILEIDDIRECTORYSITESREQUEST_SORTORDER_DESCENDING = 1;
    }
    GetUserprofilesProfileIdDirectorySitesRequest_SortOrder sortOrder = 20;
    string userIp = 21;
}

message PostUserprofilesProfileIdDirectorySitesRequest {
    alt alt = 1;
    DirectorySite body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdDirectorySitesIdRequest {
    alt alt = 1;
    string fields = 2;
    // Directory site ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdDynamicTargetingKeysRequest {
    // Select only dynamic targeting keys whose object has this advertiser ID.
    string advertiserId = 1;
    alt alt = 2;
    string fields = 3;
    string key = 4;
    // Select only dynamic targeting keys exactly matching these names.
    repeated string names = 5;
    string oauth_token = 6;
    // Select only dynamic targeting keys with this object ID.
    string objectId = 7;
    // Select only dynamic targeting keys with this object type.
    enum GetUserprofilesProfileIdDynamicTargetingKeysRequest_ObjectType {
        GETUSERPROFILESPROFILEIDDYNAMICTARGETINGKEYSREQUEST_OBJECTTYPE_OBJECT_AD = 0;
        GETUSERPROFILESPROFILEIDDYNAMICTARGETINGKEYSREQUEST_OBJECTTYPE_OBJECT_ADVERTISER = 1;
        GETUSERPROFILESPROFILEIDDYNAMICTARGETINGKEYSREQUEST_OBJECTTYPE_OBJECT_CREATIVE = 2;
        GETUSERPROFILESPROFILEIDDYNAMICTARGETINGKEYSREQUEST_OBJECTTYPE_OBJECT_PLACEMENT = 3;
    }
    GetUserprofilesProfileIdDynamicTargetingKeysRequest_ObjectType objectType = 8;
    boolean prettyPrint = 9;
    // User profile ID associated with this request.
    string profileId = 10;
    string quotaUser = 11;
    string userIp = 12;
}

message PostUserprofilesProfileIdDynamicTargetingKeysRequest {
    alt alt = 1;
    DynamicTargetingKey body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message DeleteUserprofilesProfileIdDynamicTargetingKeysObjectIdRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // Name of this dynamic targeting key. This is a required field. Must be less than 256 characters long and cannot contain commas. All characters are converted to lowercase.
    string name = 4;
    string oauth_token = 5;
    // ID of the object of this dynamic targeting key. This is a required field.
    string objectId = 6;
    // Type of the object of this dynamic targeting key. This is a required field.
    enum DeleteUserprofilesProfileIdDynamicTargetingKeysObjectIdRequest_ObjectType {
        DELETEUSERPROFILESPROFILEIDDYNAMICTARGETINGKEYSOBJECTIDREQUEST_OBJECTTYPE_OBJECT_AD = 0;
        DELETEUSERPROFILESPROFILEIDDYNAMICTARGETINGKEYSOBJECTIDREQUEST_OBJECTTYPE_OBJECT_ADVERTISER = 1;
        DELETEUSERPROFILESPROFILEIDDYNAMICTARGETINGKEYSOBJECTIDREQUEST_OBJECTTYPE_OBJECT_CREATIVE = 2;
        DELETEUSERPROFILESPROFILEIDDYNAMICTARGETINGKEYSOBJECTIDREQUEST_OBJECTTYPE_OBJECT_PLACEMENT = 3;
    }
    DeleteUserprofilesProfileIdDynamicTargetingKeysObjectIdRequest_ObjectType objectType = 7;
    boolean prettyPrint = 8;
    // User profile ID associated with this request.
    string profileId = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message GetUserprofilesProfileIdEventTagsRequest {
    // Select only event tags that belong to this ad.
    string adId = 1;
    // Select only event tags that belong to this advertiser.
    string advertiserId = 2;
    alt alt = 3;
    // Select only event tags that belong to this campaign.
    string campaignId = 4;
    // Examine only the specified campaign or advertiser's event tags for matching selector criteria. When set to false, the parent advertiser and parent campaign of the specified ad or campaign is examined as well. In addition, when set to false, the status field is examined as well, along with the enabledByDefault field. This parameter can not be set to true when adId is specified as ads do not define their own even tags.
    bool definitionsOnly = 5;
    // Select only enabled event tags. What is considered enabled or disabled depends on the definitionsOnly parameter. When definitionsOnly is set to true, only the specified advertiser or campaign's event tags' enabledByDefault field is examined. When definitionsOnly is set to false, the specified ad or specified campaign's parent advertiser's or parent campaign's event tags' enabledByDefault and status fields are examined as well.
    bool enabled = 6;
    // Select only event tags with the specified event tag types. Event tag types can be used to specify whether to use a third-party pixel, a third-party JavaScript URL, or a third-party click-through URL for either impression or click tracking.
    repeated string eventTagTypes = 7;
    string fields = 8;
    // Select only event tags with these IDs.
    repeated string ids = 9;
    string key = 10;
    string oauth_token = 11;
    boolean prettyPrint = 12;
    // User profile ID associated with this request.
    string profileId = 13;
    string quotaUser = 14;
    // Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "eventtag*2015" will return objects with names like "eventtag June 2015", "eventtag April 2015", or simply "eventtag 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "eventtag" will match objects with name "my eventtag", "eventtag 2015", or simply "eventtag".
    string searchString = 15;
    // Field by which to sort the list.
    enum GetUserprofilesProfileIdEventTagsRequest_SortField {
        GETUSERPROFILESPROFILEIDEVENTTAGSREQUEST_SORTFIELD_ID = 0;
        GETUSERPROFILESPROFILEIDEVENTTAGSREQUEST_SORTFIELD_NAME = 1;
    }
    GetUserprofilesProfileIdEventTagsRequest_SortField sortField = 16;
    // Order of sorted results.
    enum GetUserprofilesProfileIdEventTagsRequest_SortOrder {
        GETUSERPROFILESPROFILEIDEVENTTAGSREQUEST_SORTORDER_ASCENDING = 0;
        GETUSERPROFILESPROFILEIDEVENTTAGSREQUEST_SORTORDER_DESCENDING = 1;
    }
    GetUserprofilesProfileIdEventTagsRequest_SortOrder sortOrder = 17;
    string userIp = 18;
}

message PutUserprofilesProfileIdEventTagsRequest {
    alt alt = 1;
    EventTag body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostUserprofilesProfileIdEventTagsRequest {
    alt alt = 1;
    EventTag body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdEventTagsIdRequest {
    alt alt = 1;
    string fields = 2;
    // Event tag ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message DeleteUserprofilesProfileIdEventTagsIdRequest {
    alt alt = 1;
    string fields = 2;
    // Event tag ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdFilesRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // Maximum number of results to return.
    int32 maxResults = 4;
    string oauth_token = 5;
    // The value of the nextToken from the previous result page.
    string pageToken = 6;
    boolean prettyPrint = 7;
    // The DFA profile ID.
    string profileId = 8;
    string quotaUser = 9;
    // The scope that defines which results are returned.
    enum GetUserprofilesProfileIdFilesRequest_Scope {
        GETUSERPROFILESPROFILEIDFILESREQUEST_SCOPE_ALL = 0;
        GETUSERPROFILESPROFILEIDFILESREQUEST_SCOPE_MINE = 1;
        GETUSERPROFILESPROFILEIDFILESREQUEST_SCOPE_SHARED_WITH_ME = 2;
    }
    GetUserprofilesProfileIdFilesRequest_Scope scope = 10;
    // The field by which to sort the list.
    enum GetUserprofilesProfileIdFilesRequest_SortField {
        GETUSERPROFILESPROFILEIDFILESREQUEST_SORTFIELD_ID = 0;
        GETUSERPROFILESPROFILEIDFILESREQUEST_SORTFIELD_LAST_MODIFIED_TIME = 1;
    }
    GetUserprofilesProfileIdFilesRequest_SortField sortField = 11;
    // Order of sorted results.
    enum GetUserprofilesProfileIdFilesRequest_SortOrder {
        GETUSERPROFILESPROFILEIDFILESREQUEST_SORTORDER_ASCENDING = 0;
        GETUSERPROFILESPROFILEIDFILESREQUEST_SORTORDER_DESCENDING = 1;
    }
    GetUserprofilesProfileIdFilesRequest_SortOrder sortOrder = 12;
    string userIp = 13;
}

message GetUserprofilesProfileIdFloodlightActivitiesRequest {
    // Select only floodlight activities for the specified advertiser ID. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.
    string advertiserId = 1;
    alt alt = 2;
    string fields = 3;
    // Select only floodlight activities with the specified floodlight activity group IDs.
    repeated string floodlightActivityGroupIds = 4;
    // Select only floodlight activities with the specified floodlight activity group name.
    string floodlightActivityGroupName = 5;
    // Select only floodlight activities with the specified floodlight activity group tag string.
    string floodlightActivityGroupTagString = 6;
    // Select only floodlight activities with the specified floodlight activity group type.
    enum GetUserprofilesProfileIdFloodlightActivitiesRequest_FloodlightActivityGroupType {
        GETUSERPROFILESPROFILEIDFLOODLIGHTACTIVITIESREQUEST_FLOODLIGHTACTIVITYGROUPTYPE_COUNTER = 0;
        GETUSERPROFILESPROFILEIDFLOODLIGHTACTIVITIESREQUEST_FLOODLIGHTACTIVITYGROUPTYPE_SALE = 1;
    }
    GetUserprofilesProfileIdFloodlightActivitiesRequest_FloodlightActivityGroupType floodlightActivityGroupType = 7;
    // Select only floodlight activities for the specified floodlight configuration ID. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.
    string floodlightConfigurationId = 8;
    // Select only floodlight activities with the specified IDs. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.
    repeated string ids = 9;
    string key = 10;
    // Maximum number of results to return.
    int32 maxResults = 11;
    string oauth_token = 12;
    // Value of the nextPageToken from the previous result page.
    string pageToken = 13;
    boolean prettyPrint = 14;
    // User profile ID associated with this request.
    string profileId = 15;
    string quotaUser = 16;
    // Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "floodlightactivity*2015" will return objects with names like "floodlightactivity June 2015", "floodlightactivity April 2015", or simply "floodlightactivity 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "floodlightactivity" will match objects with name "my floodlightactivity activity", "floodlightactivity 2015", or simply "floodlightactivity".
    string searchString = 17;
    // Field by which to sort the list.
    enum GetUserprofilesProfileIdFloodlightActivitiesRequest_SortField {
        GETUSERPROFILESPROFILEIDFLOODLIGHTACTIVITIESREQUEST_SORTFIELD_ID = 0;
        GETUSERPROFILESPROFILEIDFLOODLIGHTACTIVITIESREQUEST_SORTFIELD_NAME = 1;
    }
    GetUserprofilesProfileIdFloodlightActivitiesRequest_SortField sortField = 18;
    // Order of sorted results.
    enum GetUserprofilesProfileIdFloodlightActivitiesRequest_SortOrder {
        GETUSERPROFILESPROFILEIDFLOODLIGHTACTIVITIESREQUEST_SORTORDER_ASCENDING = 0;
        GETUSERPROFILESPROFILEIDFLOODLIGHTACTIVITIESREQUEST_SORTORDER_DESCENDING = 1;
    }
    GetUserprofilesProfileIdFloodlightActivitiesRequest_SortOrder sortOrder = 19;
    // Select only floodlight activities with the specified tag string.
    string tagString = 20;
    string userIp = 21;
}

message PutUserprofilesProfileIdFloodlightActivitiesRequest {
    alt alt = 1;
    FloodlightActivity body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostUserprofilesProfileIdFloodlightActivitiesRequest {
    alt alt = 1;
    FloodlightActivity body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostUserprofilesProfileIdFloodlightActivitiesGeneratetagRequest {
    alt alt = 1;
    string fields = 2;
    // Floodlight activity ID for which we want to generate a tag.
    string floodlightActivityId = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdFloodlightActivitiesIdRequest {
    alt alt = 1;
    string fields = 2;
    // Floodlight activity ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message DeleteUserprofilesProfileIdFloodlightActivitiesIdRequest {
    alt alt = 1;
    string fields = 2;
    // Floodlight activity ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdFloodlightActivityGroupsRequest {
    // Select only floodlight activity groups with the specified advertiser ID. Must specify either advertiserId or floodlightConfigurationId for a non-empty result.
    string advertiserId = 1;
    alt alt = 2;
    string fields = 3;
    // Select only floodlight activity groups with the specified floodlight configuration ID. Must specify either advertiserId, or floodlightConfigurationId for a non-empty result.
    string floodlightConfigurationId = 4;
    // Select only floodlight activity groups with the specified IDs. Must specify either advertiserId or floodlightConfigurationId for a non-empty result.
    repeated string ids = 5;
    string key = 6;
    // Maximum number of results to return.
    int32 maxResults = 7;
    string oauth_token = 8;
    // Value of the nextPageToken from the previous result page.
    string pageToken = 9;
    boolean prettyPrint = 10;
    // User profile ID associated with this request.
    string profileId = 11;
    string quotaUser = 12;
    // Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "floodlightactivitygroup*2015" will return objects with names like "floodlightactivitygroup June 2015", "floodlightactivitygroup April 2015", or simply "floodlightactivitygroup 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "floodlightactivitygroup" will match objects with name "my floodlightactivitygroup activity", "floodlightactivitygroup 2015", or simply "floodlightactivitygroup".
    string searchString = 13;
    // Field by which to sort the list.
    enum GetUserprofilesProfileIdFloodlightActivityGroupsRequest_SortField {
        GETUSERPROFILESPROFILEIDFLOODLIGHTACTIVITYGROUPSREQUEST_SORTFIELD_ID = 0;
        GETUSERPROFILESPROFILEIDFLOODLIGHTACTIVITYGROUPSREQUEST_SORTFIELD_NAME = 1;
    }
    GetUserprofilesProfileIdFloodlightActivityGroupsRequest_SortField sortField = 14;
    // Order of sorted results.
    enum GetUserprofilesProfileIdFloodlightActivityGroupsRequest_SortOrder {
        GETUSERPROFILESPROFILEIDFLOODLIGHTACTIVITYGROUPSREQUEST_SORTORDER_ASCENDING = 0;
        GETUSERPROFILESPROFILEIDFLOODLIGHTACTIVITYGROUPSREQUEST_SORTORDER_DESCENDING = 1;
    }
    GetUserprofilesProfileIdFloodlightActivityGroupsRequest_SortOrder sortOrder = 15;
    // Select only floodlight activity groups with the specified floodlight activity group type.
    enum GetUserprofilesProfileIdFloodlightActivityGroupsRequest_Type {
        GETUSERPROFILESPROFILEIDFLOODLIGHTACTIVITYGROUPSREQUEST_TYPE_COUNTER = 0;
        GETUSERPROFILESPROFILEIDFLOODLIGHTACTIVITYGROUPSREQUEST_TYPE_SALE = 1;
    }
    GetUserprofilesProfileIdFloodlightActivityGroupsRequest_Type type = 16;
    string userIp = 17;
}

message PutUserprofilesProfileIdFloodlightActivityGroupsRequest {
    alt alt = 1;
    FloodlightActivityGroup body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostUserprofilesProfileIdFloodlightActivityGroupsRequest {
    alt alt = 1;
    FloodlightActivityGroup body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdFloodlightActivityGroupsIdRequest {
    alt alt = 1;
    string fields = 2;
    // Floodlight activity Group ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdFloodlightConfigurationsRequest {
    alt alt = 1;
    string fields = 2;
    // Set of IDs of floodlight configurations to retrieve. Required field; otherwise an empty list will be returned.
    repeated string ids = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PutUserprofilesProfileIdFloodlightConfigurationsRequest {
    alt alt = 1;
    FloodlightConfiguration body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdFloodlightConfigurationsIdRequest {
    alt alt = 1;
    string fields = 2;
    // Floodlight configuration ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdLanguagesRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    // User profile ID associated with this request.
    string profileId = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetUserprofilesProfileIdMetrosRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    // User profile ID associated with this request.
    string profileId = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetUserprofilesProfileIdMobileCarriersRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    // User profile ID associated with this request.
    string profileId = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetUserprofilesProfileIdMobileCarriersIdRequest {
    alt alt = 1;
    string fields = 2;
    // Mobile carrier ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdOperatingSystemVersionsRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    // User profile ID associated with this request.
    string profileId = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetUserprofilesProfileIdOperatingSystemVersionsIdRequest {
    alt alt = 1;
    string fields = 2;
    // Operating system version ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdOperatingSystemsRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    // User profile ID associated with this request.
    string profileId = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetUserprofilesProfileIdOperatingSystemsDartIdRequest {
    alt alt = 1;
    // Operating system DART ID.
    string dartId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdPlacementGroupsRequest {
    // Select only placement groups that belong to these advertisers.
    repeated string advertiserIds = 1;
    alt alt = 2;
    // Select only archived placements. Don't set this field to select both archived and non-archived placements.
    bool archived = 3;
    // Select only placement groups that belong to these campaigns.
    repeated string campaignIds = 4;
    // Select only placement groups that are associated with these content categories.
    repeated string contentCategoryIds = 5;
    // Select only placement groups that are associated with these directory sites.
    repeated string directorySiteIds = 6;
    string fields = 7;
    // Select only placement groups with these IDs.
    repeated string ids = 8;
    string key = 9;
    // Select only placements or placement groups whose end date is on or before the specified maxEndDate. The date should be formatted as "yyyy-MM-dd".
    string maxEndDate = 10;
    // Maximum number of results to return.
    int32 maxResults = 11;
    // Select only placements or placement groups whose start date is on or before the specified maxStartDate. The date should be formatted as "yyyy-MM-dd".
    string maxStartDate = 12;
    // Select only placements or placement groups whose end date is on or after the specified minEndDate. The date should be formatted as "yyyy-MM-dd".
    string minEndDate = 13;
    // Select only placements or placement groups whose start date is on or after the specified minStartDate. The date should be formatted as "yyyy-MM-dd".
    string minStartDate = 14;
    string oauth_token = 15;
    // Value of the nextPageToken from the previous result page.
    string pageToken = 16;
    // Select only placement groups belonging with this group type. A package is a simple group of placements that acts as a single pricing point for a group of tags. A roadblock is a group of placements that not only acts as a single pricing point but also assumes that all the tags in it will be served at the same time. A roadblock requires one of its assigned placements to be marked as primary for reporting.
    enum GetUserprofilesProfileIdPlacementGroupsRequest_PlacementGroupType {
        GETUSERPROFILESPROFILEIDPLACEMENTGROUPSREQUEST_PLACEMENTGROUPTYPE_PLACEMENT_PACKAGE = 0;
        GETUSERPROFILESPROFILEIDPLACEMENTGROUPSREQUEST_PLACEMENTGROUPTYPE_PLACEMENT_ROADBLOCK = 1;
    }
    GetUserprofilesProfileIdPlacementGroupsRequest_PlacementGroupType placementGroupType = 17;
    // Select only placement groups that are associated with these placement strategies.
    repeated string placementStrategyIds = 18;
    boolean prettyPrint = 19;
    // Select only placement groups with these pricing types.
    repeated string pricingTypes = 20;
    // User profile ID associated with this request.
    string profileId = 21;
    string quotaUser = 22;
    // Allows searching for placement groups by name or ID. Wildcards (*) are allowed. For example, "placement*2015" will return placement groups with names like "placement group June 2015", "placement group May 2015", or simply "placements 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "placementgroup" will match placement groups with name "my placementgroup", "placementgroup 2015", or simply "placementgroup".
    string searchString = 23;
    // Select only placement groups that are associated with these sites.
    repeated string siteIds = 24;
    // Field by which to sort the list.
    enum GetUserprofilesProfileIdPlacementGroupsRequest_SortField {
        GETUSERPROFILESPROFILEIDPLACEMENTGROUPSREQUEST_SORTFIELD_ID = 0;
        GETUSERPROFILESPROFILEIDPLACEMENTGROUPSREQUEST_SORTFIELD_NAME = 1;
    }
    GetUserprofilesProfileIdPlacementGroupsRequest_SortField sortField = 25;
    // Order of sorted results.
    enum GetUserprofilesProfileIdPlacementGroupsRequest_SortOrder {
        GETUSERPROFILESPROFILEIDPLACEMENTGROUPSREQUEST_SORTORDER_ASCENDING = 0;
        GETUSERPROFILESPROFILEIDPLACEMENTGROUPSREQUEST_SORTORDER_DESCENDING = 1;
    }
    GetUserprofilesProfileIdPlacementGroupsRequest_SortOrder sortOrder = 26;
    string userIp = 27;
}

message PutUserprofilesProfileIdPlacementGroupsRequest {
    alt alt = 1;
    PlacementGroup body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostUserprofilesProfileIdPlacementGroupsRequest {
    alt alt = 1;
    PlacementGroup body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdPlacementGroupsIdRequest {
    alt alt = 1;
    string fields = 2;
    // Placement group ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdPlacementStrategiesRequest {
    alt alt = 1;
    string fields = 2;
    // Select only placement strategies with these IDs.
    repeated string ids = 3;
    string key = 4;
    // Maximum number of results to return.
    int32 maxResults = 5;
    string oauth_token = 6;
    // Value of the nextPageToken from the previous result page.
    string pageToken = 7;
    boolean prettyPrint = 8;
    // User profile ID associated with this request.
    string profileId = 9;
    string quotaUser = 10;
    // Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "placementstrategy*2015" will return objects with names like "placementstrategy June 2015", "placementstrategy April 2015", or simply "placementstrategy 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "placementstrategy" will match objects with name "my placementstrategy", "placementstrategy 2015", or simply "placementstrategy".
    string searchString = 11;
    // Field by which to sort the list.
    enum GetUserprofilesProfileIdPlacementStrategiesRequest_SortField {
        GETUSERPROFILESPROFILEIDPLACEMENTSTRATEGIESREQUEST_SORTFIELD_ID = 0;
        GETUSERPROFILESPROFILEIDPLACEMENTSTRATEGIESREQUEST_SORTFIELD_NAME = 1;
    }
    GetUserprofilesProfileIdPlacementStrategiesRequest_SortField sortField = 12;
    // Order of sorted results.
    enum GetUserprofilesProfileIdPlacementStrategiesRequest_SortOrder {
        GETUSERPROFILESPROFILEIDPLACEMENTSTRATEGIESREQUEST_SORTORDER_ASCENDING = 0;
        GETUSERPROFILESPROFILEIDPLACEMENTSTRATEGIESREQUEST_SORTORDER_DESCENDING = 1;
    }
    GetUserprofilesProfileIdPlacementStrategiesRequest_SortOrder sortOrder = 13;
    string userIp = 14;
}

message PutUserprofilesProfileIdPlacementStrategiesRequest {
    alt alt = 1;
    PlacementStrategy body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostUserprofilesProfileIdPlacementStrategiesRequest {
    alt alt = 1;
    PlacementStrategy body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdPlacementStrategiesIdRequest {
    alt alt = 1;
    string fields = 2;
    // Placement strategy ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message DeleteUserprofilesProfileIdPlacementStrategiesIdRequest {
    alt alt = 1;
    string fields = 2;
    // Placement strategy ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdPlacementsRequest {
    // Select only placements that belong to these advertisers.
    repeated string advertiserIds = 1;
    alt alt = 2;
    // Select only archived placements. Don't set this field to select both archived and non-archived placements.
    bool archived = 3;
    // Select only placements that belong to these campaigns.
    repeated string campaignIds = 4;
    // Select only placements that are associated with these compatibilities. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on mobile devices for regular or interstitial ads respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard.
    repeated string compatibilities = 5;
    // Select only placements that are associated with these content categories.
    repeated string contentCategoryIds = 6;
    // Select only placements that are associated with these directory sites.
    repeated string directorySiteIds = 7;
    string fields = 8;
    // Select only placements that belong to these placement groups.
    repeated string groupIds = 9;
    // Select only placements with these IDs.
    repeated string ids = 10;
    string key = 11;
    // Select only placements or placement groups whose end date is on or before the specified maxEndDate. The date should be formatted as "yyyy-MM-dd".
    string maxEndDate = 12;
    // Maximum number of results to return.
    int32 maxResults = 13;
    // Select only placements or placement groups whose start date is on or before the specified maxStartDate. The date should be formatted as "yyyy-MM-dd".
    string maxStartDate = 14;
    // Select only placements or placement groups whose end date is on or after the specified minEndDate. The date should be formatted as "yyyy-MM-dd".
    string minEndDate = 15;
    // Select only placements or placement groups whose start date is on or after the specified minStartDate. The date should be formatted as "yyyy-MM-dd".
    string minStartDate = 16;
    string oauth_token = 17;
    // Value of the nextPageToken from the previous result page.
    string pageToken = 18;
    // Select only placements with this payment source.
    enum GetUserprofilesProfileIdPlacementsRequest_PaymentSource {
        GETUSERPROFILESPROFILEIDPLACEMENTSREQUEST_PAYMENTSOURCE_PLACEMENT_AGENCY_PAID = 0;
        GETUSERPROFILESPROFILEIDPLACEMENTSREQUEST_PAYMENTSOURCE_PLACEMENT_PUBLISHER_PAID = 1;
    }
    GetUserprofilesProfileIdPlacementsRequest_PaymentSource paymentSource = 19;
    // Select only placements that are associated with these placement strategies.
    repeated string placementStrategyIds = 20;
    boolean prettyPrint = 21;
    // Select only placements with these pricing types.
    repeated string pricingTypes = 22;
    // User profile ID associated with this request.
    string profileId = 23;
    string quotaUser = 24;
    // Allows searching for placements by name or ID. Wildcards (*) are allowed. For example, "placement*2015" will return placements with names like "placement June 2015", "placement May 2015", or simply "placements 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "placement" will match placements with name "my placement", "placement 2015", or simply "placement".
    string searchString = 25;
    // Select only placements that are associated with these sites.
    repeated string siteIds = 26;
    // Select only placements that are associated with these sizes.
    repeated string sizeIds = 27;
    // Field by which to sort the list.
    enum GetUserprofilesProfileIdPlacementsRequest_SortField {
        GETUSERPROFILESPROFILEIDPLACEMENTSREQUEST_SORTFIELD_ID = 0;
        GETUSERPROFILESPROFILEIDPLACEMENTSREQUEST_SORTFIELD_NAME = 1;
    }
    GetUserprofilesProfileIdPlacementsRequest_SortField sortField = 28;
    // Order of sorted results.
    enum GetUserprofilesProfileIdPlacementsRequest_SortOrder {
        GETUSERPROFILESPROFILEIDPLACEMENTSREQUEST_SORTORDER_ASCENDING = 0;
        GETUSERPROFILESPROFILEIDPLACEMENTSREQUEST_SORTORDER_DESCENDING = 1;
    }
    GetUserprofilesProfileIdPlacementsRequest_SortOrder sortOrder = 29;
    string userIp = 30;
}

message PutUserprofilesProfileIdPlacementsRequest {
    alt alt = 1;
    Placement body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostUserprofilesProfileIdPlacementsRequest {
    alt alt = 1;
    Placement body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostUserprofilesProfileIdPlacementsGeneratetagsRequest {
    alt alt = 1;
    // Generate placements belonging to this campaign. This is a required field.
    string campaignId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // Generate tags for these placements.
    repeated string placementIds = 6;
    boolean prettyPrint = 7;
    // User profile ID associated with this request.
    string profileId = 8;
    string quotaUser = 9;
    // Tag formats to generate for these placements.
    // 
    // Note: PLACEMENT_TAG_STANDARD can only be generated for 1x1 placements.
    repeated string tagFormats = 10;
    string userIp = 11;
}

message GetUserprofilesProfileIdPlacementsIdRequest {
    alt alt = 1;
    string fields = 2;
    // Placement ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdPlatformTypesRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    // User profile ID associated with this request.
    string profileId = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetUserprofilesProfileIdPlatformTypesIdRequest {
    alt alt = 1;
    string fields = 2;
    // Platform type ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdPostalCodesRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    // User profile ID associated with this request.
    string profileId = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetUserprofilesProfileIdPostalCodesCodeRequest {
    alt alt = 1;
    // Postal code ID.
    string code = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdProjectsRequest {
    // Select only projects with these advertiser IDs.
    repeated string advertiserIds = 1;
    alt alt = 2;
    string fields = 3;
    // Select only projects with these IDs.
    repeated string ids = 4;
    string key = 5;
    // Maximum number of results to return.
    int32 maxResults = 6;
    string oauth_token = 7;
    // Value of the nextPageToken from the previous result page.
    string pageToken = 8;
    boolean prettyPrint = 9;
    // User profile ID associated with this request.
    string profileId = 10;
    string quotaUser = 11;
    // Allows searching for projects by name or ID. Wildcards (*) are allowed. For example, "project*2015" will return projects with names like "project June 2015", "project April 2015", or simply "project 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "project" will match projects with name "my project", "project 2015", or simply "project".
    string searchString = 12;
    // Field by which to sort the list.
    enum GetUserprofilesProfileIdProjectsRequest_SortField {
        GETUSERPROFILESPROFILEIDPROJECTSREQUEST_SORTFIELD_ID = 0;
        GETUSERPROFILESPROFILEIDPROJECTSREQUEST_SORTFIELD_NAME = 1;
    }
    GetUserprofilesProfileIdProjectsRequest_SortField sortField = 13;
    // Order of sorted results.
    enum GetUserprofilesProfileIdProjectsRequest_SortOrder {
        GETUSERPROFILESPROFILEIDPROJECTSREQUEST_SORTORDER_ASCENDING = 0;
        GETUSERPROFILESPROFILEIDPROJECTSREQUEST_SORTORDER_DESCENDING = 1;
    }
    GetUserprofilesProfileIdProjectsRequest_SortOrder sortOrder = 14;
    string userIp = 15;
}

message GetUserprofilesProfileIdProjectsIdRequest {
    alt alt = 1;
    string fields = 2;
    // Project ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdProjectsProjectIdInventoryItemsRequest {
    alt alt = 1;
    string fields = 2;
    // Select only inventory items with these IDs.
    repeated string ids = 3;
    // Select only inventory items that are in plan.
    bool inPlan = 4;
    string key = 5;
    // Maximum number of results to return.
    int32 maxResults = 6;
    string oauth_token = 7;
    // Select only inventory items that belong to specified orders.
    repeated string orderId = 8;
    // Value of the nextPageToken from the previous result page.
    string pageToken = 9;
    boolean prettyPrint = 10;
    // User profile ID associated with this request.
    string profileId = 11;
    // Project ID for order documents.
    string projectId = 12;
    string quotaUser = 13;
    // Select only inventory items that are associated with these sites.
    repeated string siteId = 14;
    // Field by which to sort the list.
    enum GetUserprofilesProfileIdProjectsProjectIdInventoryItemsRequest_SortField {
        GETUSERPROFILESPROFILEIDPROJECTSPROJECTIDINVENTORYITEMSREQUEST_SORTFIELD_ID = 0;
        GETUSERPROFILESPROFILEIDPROJECTSPROJECTIDINVENTORYITEMSREQUEST_SORTFIELD_NAME = 1;
    }
    GetUserprofilesProfileIdProjectsProjectIdInventoryItemsRequest_SortField sortField = 15;
    // Order of sorted results.
    enum GetUserprofilesProfileIdProjectsProjectIdInventoryItemsRequest_SortOrder {
        GETUSERPROFILESPROFILEIDPROJECTSPROJECTIDINVENTORYITEMSREQUEST_SORTORDER_ASCENDING = 0;
        GETUSERPROFILESPROFILEIDPROJECTSPROJECTIDINVENTORYITEMSREQUEST_SORTORDER_DESCENDING = 1;
    }
    GetUserprofilesProfileIdProjectsProjectIdInventoryItemsRequest_SortOrder sortOrder = 16;
    // Select only inventory items with this type.
    enum GetUserprofilesProfileIdProjectsProjectIdInventoryItemsRequest_Type {
        GETUSERPROFILESPROFILEIDPROJECTSPROJECTIDINVENTORYITEMSREQUEST_TYPE_PLANNING_PLACEMENT_TYPE_CREDIT = 0;
        GETUSERPROFILESPROFILEIDPROJECTSPROJECTIDINVENTORYITEMSREQUEST_TYPE_PLANNING_PLACEMENT_TYPE_REGULAR = 1;
    }
    GetUserprofilesProfileIdProjectsProjectIdInventoryItemsRequest_Type type = 17;
    string userIp = 18;
}

message GetUserprofilesProfileIdProjectsProjectIdInventoryItemsIdRequest {
    alt alt = 1;
    string fields = 2;
    // Inventory item ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    // Project ID for order documents.
    string projectId = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetUserprofilesProfileIdProjectsProjectIdOrderDocumentsRequest {
    alt alt = 1;
    // Select only order documents that have been approved by at least one user.
    bool approved = 2;
    string fields = 3;
    // Select only order documents with these IDs.
    repeated string ids = 4;
    string key = 5;
    // Maximum number of results to return.
    int32 maxResults = 6;
    string oauth_token = 7;
    // Select only order documents for specified orders.
    repeated string orderId = 8;
    // Value of the nextPageToken from the previous result page.
    string pageToken = 9;
    boolean prettyPrint = 10;
    // User profile ID associated with this request.
    string profileId = 11;
    // Project ID for order documents.
    string projectId = 12;
    string quotaUser = 13;
    // Allows searching for order documents by name or ID. Wildcards (*) are allowed. For example, "orderdocument*2015" will return order documents with names like "orderdocument June 2015", "orderdocument April 2015", or simply "orderdocument 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "orderdocument" will match order documents with name "my orderdocument", "orderdocument 2015", or simply "orderdocument".
    string searchString = 14;
    // Select only order documents that are associated with these sites.
    repeated string siteId = 15;
    // Field by which to sort the list.
    enum GetUserprofilesProfileIdProjectsProjectIdOrderDocumentsRequest_SortField {
        GETUSERPROFILESPROFILEIDPROJECTSPROJECTIDORDERDOCUMENTSREQUEST_SORTFIELD_ID = 0;
        GETUSERPROFILESPROFILEIDPROJECTSPROJECTIDORDERDOCUMENTSREQUEST_SORTFIELD_NAME = 1;
    }
    GetUserprofilesProfileIdProjectsProjectIdOrderDocumentsRequest_SortField sortField = 16;
    // Order of sorted results.
    enum GetUserprofilesProfileIdProjectsProjectIdOrderDocumentsRequest_SortOrder {
        GETUSERPROFILESPROFILEIDPROJECTSPROJECTIDORDERDOCUMENTSREQUEST_SORTORDER_ASCENDING = 0;
        GETUSERPROFILESPROFILEIDPROJECTSPROJECTIDORDERDOCUMENTSREQUEST_SORTORDER_DESCENDING = 1;
    }
    GetUserprofilesProfileIdProjectsProjectIdOrderDocumentsRequest_SortOrder sortOrder = 17;
    string userIp = 18;
}

message GetUserprofilesProfileIdProjectsProjectIdOrderDocumentsIdRequest {
    alt alt = 1;
    string fields = 2;
    // Order document ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    // Project ID for order documents.
    string projectId = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetUserprofilesProfileIdProjectsProjectIdOrdersRequest {
    alt alt = 1;
    string fields = 2;
    // Select only orders with these IDs.
    repeated string ids = 3;
    string key = 4;
    // Maximum number of results to return.
    int32 maxResults = 5;
    string oauth_token = 6;
    // Value of the nextPageToken from the previous result page.
    string pageToken = 7;
    boolean prettyPrint = 8;
    // User profile ID associated with this request.
    string profileId = 9;
    // Project ID for orders.
    string projectId = 10;
    string quotaUser = 11;
    // Allows searching for orders by name or ID. Wildcards (*) are allowed. For example, "order*2015" will return orders with names like "order June 2015", "order April 2015", or simply "order 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "order" will match orders with name "my order", "order 2015", or simply "order".
    string searchString = 12;
    // Select only orders that are associated with these site IDs.
    repeated string siteId = 13;
    // Field by which to sort the list.
    enum GetUserprofilesProfileIdProjectsProjectIdOrdersRequest_SortField {
        GETUSERPROFILESPROFILEIDPROJECTSPROJECTIDORDERSREQUEST_SORTFIELD_ID = 0;
        GETUSERPROFILESPROFILEIDPROJECTSPROJECTIDORDERSREQUEST_SORTFIELD_NAME = 1;
    }
    GetUserprofilesProfileIdProjectsProjectIdOrdersRequest_SortField sortField = 14;
    // Order of sorted results.
    enum GetUserprofilesProfileIdProjectsProjectIdOrdersRequest_SortOrder {
        GETUSERPROFILESPROFILEIDPROJECTSPROJECTIDORDERSREQUEST_SORTORDER_ASCENDING = 0;
        GETUSERPROFILESPROFILEIDPROJECTSPROJECTIDORDERSREQUEST_SORTORDER_DESCENDING = 1;
    }
    GetUserprofilesProfileIdProjectsProjectIdOrdersRequest_SortOrder sortOrder = 15;
    string userIp = 16;
}

message GetUserprofilesProfileIdProjectsProjectIdOrdersIdRequest {
    alt alt = 1;
    string fields = 2;
    // Order ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    // Project ID for orders.
    string projectId = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetUserprofilesProfileIdRegionsRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    // User profile ID associated with this request.
    string profileId = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PutUserprofilesProfileIdRemarketingListSharesRequest {
    alt alt = 1;
    RemarketingListShare body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdRemarketingListSharesRemarketingListIdRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    // User profile ID associated with this request.
    string profileId = 6;
    string quotaUser = 7;
    // Remarketing list ID.
    string remarketingListId = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdRemarketingListsRequest {
    // Select only active or only inactive remarketing lists.
    bool active = 1;
    // Select only remarketing lists owned by this advertiser.
    string advertiserId = 2;
    alt alt = 3;
    string fields = 4;
    // Select only remarketing lists that have this floodlight activity ID.
    string floodlightActivityId = 5;
    string key = 6;
    // Maximum number of results to return.
    int32 maxResults = 7;
    // Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "remarketing list*2015" will return objects with names like "remarketing list June 2015", "remarketing list April 2015", or simply "remarketing list 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "remarketing list" will match objects with name "my remarketing list", "remarketing list 2015", or simply "remarketing list".
    string name = 8;
    string oauth_token = 9;
    // Value of the nextPageToken from the previous result page.
    string pageToken = 10;
    boolean prettyPrint = 11;
    // User profile ID associated with this request.
    string profileId = 12;
    string quotaUser = 13;
    // Field by which to sort the list.
    enum GetUserprofilesProfileIdRemarketingListsRequest_SortField {
        GETUSERPROFILESPROFILEIDREMARKETINGLISTSREQUEST_SORTFIELD_ID = 0;
        GETUSERPROFILESPROFILEIDREMARKETINGLISTSREQUEST_SORTFIELD_NAME = 1;
    }
    GetUserprofilesProfileIdRemarketingListsRequest_SortField sortField = 14;
    // Order of sorted results.
    enum GetUserprofilesProfileIdRemarketingListsRequest_SortOrder {
        GETUSERPROFILESPROFILEIDREMARKETINGLISTSREQUEST_SORTORDER_ASCENDING = 0;
        GETUSERPROFILESPROFILEIDREMARKETINGLISTSREQUEST_SORTORDER_DESCENDING = 1;
    }
    GetUserprofilesProfileIdRemarketingListsRequest_SortOrder sortOrder = 15;
    string userIp = 16;
}

message PutUserprofilesProfileIdRemarketingListsRequest {
    alt alt = 1;
    RemarketingList body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostUserprofilesProfileIdRemarketingListsRequest {
    alt alt = 1;
    RemarketingList body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdRemarketingListsIdRequest {
    alt alt = 1;
    string fields = 2;
    // Remarketing list ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdReportsRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // Maximum number of results to return.
    int32 maxResults = 4;
    string oauth_token = 5;
    // The value of the nextToken from the previous result page.
    string pageToken = 6;
    boolean prettyPrint = 7;
    // The DFA user profile ID.
    string profileId = 8;
    string quotaUser = 9;
    // The scope that defines which results are returned.
    enum GetUserprofilesProfileIdReportsRequest_Scope {
        GETUSERPROFILESPROFILEIDREPORTSREQUEST_SCOPE_ALL = 0;
        GETUSERPROFILESPROFILEIDREPORTSREQUEST_SCOPE_MINE = 1;
    }
    GetUserprofilesProfileIdReportsRequest_Scope scope = 10;
    // The field by which to sort the list.
    enum GetUserprofilesProfileIdReportsRequest_SortField {
        GETUSERPROFILESPROFILEIDREPORTSREQUEST_SORTFIELD_ID = 0;
        GETUSERPROFILESPROFILEIDREPORTSREQUEST_SORTFIELD_LAST_MODIFIED_TIME = 1;
        GETUSERPROFILESPROFILEIDREPORTSREQUEST_SORTFIELD_NAME = 2;
    }
    GetUserprofilesProfileIdReportsRequest_SortField sortField = 11;
    // Order of sorted results.
    enum GetUserprofilesProfileIdReportsRequest_SortOrder {
        GETUSERPROFILESPROFILEIDREPORTSREQUEST_SORTORDER_ASCENDING = 0;
        GETUSERPROFILESPROFILEIDREPORTSREQUEST_SORTORDER_DESCENDING = 1;
    }
    GetUserprofilesProfileIdReportsRequest_SortOrder sortOrder = 12;
    string userIp = 13;
}

message PostUserprofilesProfileIdReportsRequest {
    alt alt = 1;
    Report body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // The DFA user profile ID.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostUserprofilesProfileIdReportsCompatiblefieldsQueryRequest {
    alt alt = 1;
    Report body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // The DFA user profile ID.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdReportsReportIdRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    // The DFA user profile ID.
    string profileId = 6;
    string quotaUser = 7;
    // The ID of the report.
    string reportId = 8;
    string userIp = 9;
}

message PutUserprofilesProfileIdReportsReportIdRequest {
    alt alt = 1;
    Report body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // The DFA user profile ID.
    string profileId = 7;
    string quotaUser = 8;
    // The ID of the report.
    string reportId = 9;
    string userIp = 10;
}

message DeleteUserprofilesProfileIdReportsReportIdRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    // The DFA user profile ID.
    string profileId = 6;
    string quotaUser = 7;
    // The ID of the report.
    string reportId = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdReportsReportIdFilesRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // Maximum number of results to return.
    int32 maxResults = 4;
    string oauth_token = 5;
    // The value of the nextToken from the previous result page.
    string pageToken = 6;
    boolean prettyPrint = 7;
    // The DFA profile ID.
    string profileId = 8;
    string quotaUser = 9;
    // The ID of the parent report.
    string reportId = 10;
    // The field by which to sort the list.
    enum GetUserprofilesProfileIdReportsReportIdFilesRequest_SortField {
        GETUSERPROFILESPROFILEIDREPORTSREPORTIDFILESREQUEST_SORTFIELD_ID = 0;
        GETUSERPROFILESPROFILEIDREPORTSREPORTIDFILESREQUEST_SORTFIELD_LAST_MODIFIED_TIME = 1;
    }
    GetUserprofilesProfileIdReportsReportIdFilesRequest_SortField sortField = 11;
    // Order of sorted results.
    enum GetUserprofilesProfileIdReportsReportIdFilesRequest_SortOrder {
        GETUSERPROFILESPROFILEIDREPORTSREPORTIDFILESREQUEST_SORTORDER_ASCENDING = 0;
        GETUSERPROFILESPROFILEIDREPORTSREPORTIDFILESREQUEST_SORTORDER_DESCENDING = 1;
    }
    GetUserprofilesProfileIdReportsReportIdFilesRequest_SortOrder sortOrder = 12;
    string userIp = 13;
}

message GetUserprofilesProfileIdReportsReportIdFilesFileIdRequest {
    alt alt = 1;
    string fields = 2;
    // The ID of the report file.
    string fileId = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // The DFA profile ID.
    string profileId = 7;
    string quotaUser = 8;
    // The ID of the report.
    string reportId = 9;
    string userIp = 10;
}

message PostUserprofilesProfileIdReportsReportIdRunRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    // The DFA profile ID.
    string profileId = 6;
    string quotaUser = 7;
    // The ID of the report.
    string reportId = 8;
    // If set and true, tries to run the report synchronously.
    bool synchronous = 9;
    string userIp = 10;
}

message GetUserprofilesProfileIdSitesRequest {
    // This search filter is no longer supported and will have no effect on the results returned.
    bool acceptsInStreamVideoPlacements = 1;
    // This search filter is no longer supported and will have no effect on the results returned.
    bool acceptsInterstitialPlacements = 2;
    // Select only sites that accept publisher paid placements.
    bool acceptsPublisherPaidPlacements = 3;
    // Select only AdWords sites.
    bool adWordsSite = 4;
    alt alt = 5;
    // Select only approved sites.
    bool approved = 6;
    // Select only sites with these campaign IDs.
    repeated string campaignIds = 7;
    // Select only sites with these directory site IDs.
    repeated string directorySiteIds = 8;
    string fields = 9;
    // Select only sites with these IDs.
    repeated string ids = 10;
    string key = 11;
    // Maximum number of results to return.
    int32 maxResults = 12;
    string oauth_token = 13;
    // Value of the nextPageToken from the previous result page.
    string pageToken = 14;
    boolean prettyPrint = 15;
    // User profile ID associated with this request.
    string profileId = 16;
    string quotaUser = 17;
    // Allows searching for objects by name, ID or keyName. Wildcards (*) are allowed. For example, "site*2015" will return objects with names like "site June 2015", "site April 2015", or simply "site 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "site" will match objects with name "my site", "site 2015", or simply "site".
    string searchString = 18;
    // Field by which to sort the list.
    enum GetUserprofilesProfileIdSitesRequest_SortField {
        GETUSERPROFILESPROFILEIDSITESREQUEST_SORTFIELD_ID = 0;
        GETUSERPROFILESPROFILEIDSITESREQUEST_SORTFIELD_NAME = 1;
    }
    GetUserprofilesProfileIdSitesRequest_SortField sortField = 19;
    // Order of sorted results.
    enum GetUserprofilesProfileIdSitesRequest_SortOrder {
        GETUSERPROFILESPROFILEIDSITESREQUEST_SORTORDER_ASCENDING = 0;
        GETUSERPROFILESPROFILEIDSITESREQUEST_SORTORDER_DESCENDING = 1;
    }
    GetUserprofilesProfileIdSitesRequest_SortOrder sortOrder = 20;
    // Select only sites with this subaccount ID.
    string subaccountId = 21;
    // Select only sites that have not been mapped to a directory site.
    bool unmappedSite = 22;
    string userIp = 23;
}

message PutUserprofilesProfileIdSitesRequest {
    alt alt = 1;
    Site body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostUserprofilesProfileIdSitesRequest {
    alt alt = 1;
    Site body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdSitesIdRequest {
    alt alt = 1;
    string fields = 2;
    // Site ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdSizesRequest {
    alt alt = 1;
    string fields = 2;
    // Select only sizes with this height.
    int32 height = 3;
    // Select only IAB standard sizes.
    bool iabStandard = 4;
    // Select only sizes with these IDs.
    repeated string ids = 5;
    string key = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    // User profile ID associated with this request.
    string profileId = 9;
    string quotaUser = 10;
    string userIp = 11;
    // Select only sizes with this width.
    int32 width = 12;
}

message PostUserprofilesProfileIdSizesRequest {
    alt alt = 1;
    Size body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdSizesIdRequest {
    alt alt = 1;
    string fields = 2;
    // Size ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdSubaccountsRequest {
    alt alt = 1;
    string fields = 2;
    // Select only subaccounts with these IDs.
    repeated string ids = 3;
    string key = 4;
    // Maximum number of results to return.
    int32 maxResults = 5;
    string oauth_token = 6;
    // Value of the nextPageToken from the previous result page.
    string pageToken = 7;
    boolean prettyPrint = 8;
    // User profile ID associated with this request.
    string profileId = 9;
    string quotaUser = 10;
    // Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "subaccount*2015" will return objects with names like "subaccount June 2015", "subaccount April 2015", or simply "subaccount 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "subaccount" will match objects with name "my subaccount", "subaccount 2015", or simply "subaccount".
    string searchString = 11;
    // Field by which to sort the list.
    enum GetUserprofilesProfileIdSubaccountsRequest_SortField {
        GETUSERPROFILESPROFILEIDSUBACCOUNTSREQUEST_SORTFIELD_ID = 0;
        GETUSERPROFILESPROFILEIDSUBACCOUNTSREQUEST_SORTFIELD_NAME = 1;
    }
    GetUserprofilesProfileIdSubaccountsRequest_SortField sortField = 12;
    // Order of sorted results.
    enum GetUserprofilesProfileIdSubaccountsRequest_SortOrder {
        GETUSERPROFILESPROFILEIDSUBACCOUNTSREQUEST_SORTORDER_ASCENDING = 0;
        GETUSERPROFILESPROFILEIDSUBACCOUNTSREQUEST_SORTORDER_DESCENDING = 1;
    }
    GetUserprofilesProfileIdSubaccountsRequest_SortOrder sortOrder = 13;
    string userIp = 14;
}

message PutUserprofilesProfileIdSubaccountsRequest {
    alt alt = 1;
    Subaccount body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostUserprofilesProfileIdSubaccountsRequest {
    alt alt = 1;
    Subaccount body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdSubaccountsIdRequest {
    alt alt = 1;
    string fields = 2;
    // Subaccount ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdTargetableRemarketingListsRequest {
    // Select only active or only inactive targetable remarketing lists.
    bool active = 1;
    // Select only targetable remarketing lists targetable by these advertisers.
    string advertiserId = 2;
    alt alt = 3;
    string fields = 4;
    string key = 5;
    // Maximum number of results to return.
    int32 maxResults = 6;
    // Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "remarketing list*2015" will return objects with names like "remarketing list June 2015", "remarketing list April 2015", or simply "remarketing list 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "remarketing list" will match objects with name "my remarketing list", "remarketing list 2015", or simply "remarketing list".
    string name = 7;
    string oauth_token = 8;
    // Value of the nextPageToken from the previous result page.
    string pageToken = 9;
    boolean prettyPrint = 10;
    // User profile ID associated with this request.
    string profileId = 11;
    string quotaUser = 12;
    // Field by which to sort the list.
    enum GetUserprofilesProfileIdTargetableRemarketingListsRequest_SortField {
        GETUSERPROFILESPROFILEIDTARGETABLEREMARKETINGLISTSREQUEST_SORTFIELD_ID = 0;
        GETUSERPROFILESPROFILEIDTARGETABLEREMARKETINGLISTSREQUEST_SORTFIELD_NAME = 1;
    }
    GetUserprofilesProfileIdTargetableRemarketingListsRequest_SortField sortField = 13;
    // Order of sorted results.
    enum GetUserprofilesProfileIdTargetableRemarketingListsRequest_SortOrder {
        GETUSERPROFILESPROFILEIDTARGETABLEREMARKETINGLISTSREQUEST_SORTORDER_ASCENDING = 0;
        GETUSERPROFILESPROFILEIDTARGETABLEREMARKETINGLISTSREQUEST_SORTORDER_DESCENDING = 1;
    }
    GetUserprofilesProfileIdTargetableRemarketingListsRequest_SortOrder sortOrder = 14;
    string userIp = 15;
}

message GetUserprofilesProfileIdTargetableRemarketingListsIdRequest {
    alt alt = 1;
    string fields = 2;
    // Remarketing list ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdTargetingTemplatesRequest {
    // Select only targeting templates with this advertiser ID.
    string advertiserId = 1;
    alt alt = 2;
    string fields = 3;
    // Select only targeting templates with these IDs.
    repeated string ids = 4;
    string key = 5;
    // Maximum number of results to return.
    int32 maxResults = 6;
    string oauth_token = 7;
    // Value of the nextPageToken from the previous result page.
    string pageToken = 8;
    boolean prettyPrint = 9;
    // User profile ID associated with this request.
    string profileId = 10;
    string quotaUser = 11;
    // Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "template*2015" will return objects with names like "template June 2015", "template April 2015", or simply "template 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "template" will match objects with name "my template", "template 2015", or simply "template".
    string searchString = 12;
    // Field by which to sort the list.
    enum GetUserprofilesProfileIdTargetingTemplatesRequest_SortField {
        GETUSERPROFILESPROFILEIDTARGETINGTEMPLATESREQUEST_SORTFIELD_ID = 0;
        GETUSERPROFILESPROFILEIDTARGETINGTEMPLATESREQUEST_SORTFIELD_NAME = 1;
    }
    GetUserprofilesProfileIdTargetingTemplatesRequest_SortField sortField = 13;
    // Order of sorted results.
    enum GetUserprofilesProfileIdTargetingTemplatesRequest_SortOrder {
        GETUSERPROFILESPROFILEIDTARGETINGTEMPLATESREQUEST_SORTORDER_ASCENDING = 0;
        GETUSERPROFILESPROFILEIDTARGETINGTEMPLATESREQUEST_SORTORDER_DESCENDING = 1;
    }
    GetUserprofilesProfileIdTargetingTemplatesRequest_SortOrder sortOrder = 14;
    string userIp = 15;
}

message PutUserprofilesProfileIdTargetingTemplatesRequest {
    alt alt = 1;
    TargetingTemplate body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostUserprofilesProfileIdTargetingTemplatesRequest {
    alt alt = 1;
    TargetingTemplate body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdTargetingTemplatesIdRequest {
    alt alt = 1;
    string fields = 2;
    // Targeting template ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdUserRolePermissionGroupsRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    // User profile ID associated with this request.
    string profileId = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetUserprofilesProfileIdUserRolePermissionGroupsIdRequest {
    alt alt = 1;
    string fields = 2;
    // User role permission group ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdUserRolePermissionsRequest {
    alt alt = 1;
    string fields = 2;
    // Select only user role permissions with these IDs.
    repeated string ids = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdUserRolePermissionsIdRequest {
    alt alt = 1;
    string fields = 2;
    // User role permission ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdUserRolesRequest {
    // Select only account level user roles not associated with any specific subaccount.
    bool accountUserRoleOnly = 1;
    alt alt = 2;
    string fields = 3;
    // Select only user roles with the specified IDs.
    repeated string ids = 4;
    string key = 5;
    // Maximum number of results to return.
    int32 maxResults = 6;
    string oauth_token = 7;
    // Value of the nextPageToken from the previous result page.
    string pageToken = 8;
    boolean prettyPrint = 9;
    // User profile ID associated with this request.
    string profileId = 10;
    string quotaUser = 11;
    // Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "userrole*2015" will return objects with names like "userrole June 2015", "userrole April 2015", or simply "userrole 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "userrole" will match objects with name "my userrole", "userrole 2015", or simply "userrole".
    string searchString = 12;
    // Field by which to sort the list.
    enum GetUserprofilesProfileIdUserRolesRequest_SortField {
        GETUSERPROFILESPROFILEIDUSERROLESREQUEST_SORTFIELD_ID = 0;
        GETUSERPROFILESPROFILEIDUSERROLESREQUEST_SORTFIELD_NAME = 1;
    }
    GetUserprofilesProfileIdUserRolesRequest_SortField sortField = 13;
    // Order of sorted results.
    enum GetUserprofilesProfileIdUserRolesRequest_SortOrder {
        GETUSERPROFILESPROFILEIDUSERROLESREQUEST_SORTORDER_ASCENDING = 0;
        GETUSERPROFILESPROFILEIDUSERROLESREQUEST_SORTORDER_DESCENDING = 1;
    }
    GetUserprofilesProfileIdUserRolesRequest_SortOrder sortOrder = 14;
    // Select only user roles that belong to this subaccount.
    string subaccountId = 15;
    string userIp = 16;
}

message PutUserprofilesProfileIdUserRolesRequest {
    alt alt = 1;
    UserRole body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostUserprofilesProfileIdUserRolesRequest {
    alt alt = 1;
    UserRole body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdUserRolesIdRequest {
    alt alt = 1;
    string fields = 2;
    // User role ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message DeleteUserprofilesProfileIdUserRolesIdRequest {
    alt alt = 1;
    string fields = 2;
    // User role ID.
    string id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetUserprofilesProfileIdVideoFormatsRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    // User profile ID associated with this request.
    string profileId = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetUserprofilesProfileIdVideoFormatsIdRequest {
    alt alt = 1;
    string fields = 2;
    // Video format ID.
    int32 id = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // User profile ID associated with this request.
    string profileId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message Account {
    // Account permissions assigned to this account.
    repeated string accountPermissionIds = 1;
    // Profile for this account. This is a read-only field that can be left blank.
    enum Account_AccountProfile {
        ACCOUNT_ACCOUNTPROFILE_ACCOUNT_PROFILE_BASIC = 0;
        ACCOUNT_ACCOUNTPROFILE_ACCOUNT_PROFILE_STANDARD = 1;
    }
    Account_AccountProfile accountProfile = 2;
    // Whether this account is active.
    bool active = 3;
    // Maximum number of active ads allowed for this account.
    enum Account_ActiveAdsLimitTier {
        ACCOUNT_ACTIVEADSLIMITTIER_ACTIVE_ADS_TIER_100K = 0;
        ACCOUNT_ACTIVEADSLIMITTIER_ACTIVE_ADS_TIER_1M = 1;
        ACCOUNT_ACTIVEADSLIMITTIER_ACTIVE_ADS_TIER_200K = 2;
        ACCOUNT_ACTIVEADSLIMITTIER_ACTIVE_ADS_TIER_300K = 3;
        ACCOUNT_ACTIVEADSLIMITTIER_ACTIVE_ADS_TIER_40K = 4;
        ACCOUNT_ACTIVEADSLIMITTIER_ACTIVE_ADS_TIER_500K = 5;
        ACCOUNT_ACTIVEADSLIMITTIER_ACTIVE_ADS_TIER_750K = 6;
        ACCOUNT_ACTIVEADSLIMITTIER_ACTIVE_ADS_TIER_75K = 7;
    }
    Account_ActiveAdsLimitTier activeAdsLimitTier = 4;
    // Whether to serve creatives with Active View tags. If disabled, viewability data will not be available for any impressions.
    bool activeViewOptOut = 5;
    // User role permissions available to the user roles of this account.
    repeated string availablePermissionIds = 6;
    // ID of the country associated with this account.
    string countryId = 7;
    // ID of currency associated with this account. This is a required field.
    // Acceptable values are:
    // - "1" for USD
    // - "2" for GBP
    // - "3" for ESP
    // - "4" for SEK
    // - "5" for CAD
    // - "6" for JPY
    // - "7" for DEM
    // - "8" for AUD
    // - "9" for FRF
    // - "10" for ITL
    // - "11" for DKK
    // - "12" for NOK
    // - "13" for FIM
    // - "14" for ZAR
    // - "15" for IEP
    // - "16" for NLG
    // - "17" for EUR
    // - "18" for KRW
    // - "19" for TWD
    // - "20" for SGD
    // - "21" for CNY
    // - "22" for HKD
    // - "23" for NZD
    // - "24" for MYR
    // - "25" for BRL
    // - "26" for PTE
    // - "27" for MXP
    // - "28" for CLP
    // - "29" for TRY
    // - "30" for ARS
    // - "31" for PEN
    // - "32" for ILS
    // - "33" for CHF
    // - "34" for VEF
    // - "35" for COP
    // - "36" for GTQ
    // - "37" for PLN
    // - "39" for INR
    // - "40" for THB
    // - "41" for IDR
    // - "42" for CZK
    // - "43" for RON
    // - "44" for HUF
    // - "45" for RUB
    // - "46" for AED
    // - "47" for BGN
    // - "48" for HRK
    // - "49" for MXN
    string currencyId = 8;
    // Default placement dimensions for this account.
    string defaultCreativeSizeId = 9;
    // Description of this account.
    string description = 10;
    // ID of this account. This is a read-only, auto-generated field.
    string id = 11;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#account".
    string kind = 12;
    // Locale of this account.
    // Acceptable values are:
    // - "cs" (Czech)
    // - "de" (German)
    // - "en" (English)
    // - "en-GB" (English United Kingdom)
    // - "es" (Spanish)
    // - "fr" (French)
    // - "it" (Italian)
    // - "ja" (Japanese)
    // - "ko" (Korean)
    // - "pl" (Polish)
    // - "pt-BR" (Portuguese Brazil)
    // - "ru" (Russian)
    // - "sv" (Swedish)
    // - "tr" (Turkish)
    // - "zh-CN" (Chinese Simplified)
    // - "zh-TW" (Chinese Traditional)
    string locale = 13;
    // Maximum image size allowed for this account, in kilobytes. Value must be greater than or equal to 1.
    string maximumImageSize = 14;
    // Name of this account. This is a required field, and must be less than 128 characters long and be globally unique.
    string name = 15;
    // Whether campaigns created in this account will be enabled for Nielsen OCR reach ratings by default.
    bool nielsenOcrEnabled = 16;
    // Reporting configuration of this account.
    ReportsConfiguration reportsConfiguration = 17;
    // Share Path to Conversion reports with Twitter.
    bool shareReportsWithTwitter = 18;
    // File size limit in kilobytes of Rich Media teaser creatives. Acceptable values are 1 to 10240, inclusive.
    string teaserSizeLimit = 19;
}

message AccountActiveAdSummary {
    // ID of the account.
    string accountId = 1;
    // Ads that have been activated for the account
    string activeAds = 2;
    // Maximum number of active ads allowed for the account.
    enum AccountActiveAdSummary_ActiveAdsLimitTier {
        ACCOUNTACTIVEADSUMMARY_ACTIVEADSLIMITTIER_ACTIVE_ADS_TIER_100K = 0;
        ACCOUNTACTIVEADSUMMARY_ACTIVEADSLIMITTIER_ACTIVE_ADS_TIER_1M = 1;
        ACCOUNTACTIVEADSUMMARY_ACTIVEADSLIMITTIER_ACTIVE_ADS_TIER_200K = 2;
        ACCOUNTACTIVEADSUMMARY_ACTIVEADSLIMITTIER_ACTIVE_ADS_TIER_300K = 3;
        ACCOUNTACTIVEADSUMMARY_ACTIVEADSLIMITTIER_ACTIVE_ADS_TIER_40K = 4;
        ACCOUNTACTIVEADSUMMARY_ACTIVEADSLIMITTIER_ACTIVE_ADS_TIER_500K = 5;
        ACCOUNTACTIVEADSUMMARY_ACTIVEADSLIMITTIER_ACTIVE_ADS_TIER_750K = 6;
        ACCOUNTACTIVEADSUMMARY_ACTIVEADSLIMITTIER_ACTIVE_ADS_TIER_75K = 7;
    }
    AccountActiveAdSummary_ActiveAdsLimitTier activeAdsLimitTier = 3;
    // Ads that can be activated for the account.
    string availableAds = 4;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#accountActiveAdSummary".
    string kind = 5;
}

message AccountPermission {
    // Account profiles associated with this account permission.
    // 
    // Possible values are:
    // - "ACCOUNT_PROFILE_BASIC"
    // - "ACCOUNT_PROFILE_STANDARD"
    repeated string accountProfiles = 1;
    // ID of this account permission.
    string id = 2;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#accountPermission".
    string kind = 3;
    // Administrative level required to enable this account permission.
    enum AccountPermission_Level {
        ACCOUNTPERMISSION_LEVEL_ADMINISTRATOR = 0;
        ACCOUNTPERMISSION_LEVEL_USER = 1;
    }
    AccountPermission_Level level = 4;
    // Name of this account permission.
    string name = 5;
    // Permission group of this account permission.
    string permissionGroupId = 6;
}

message AccountPermissionGroup {
    // ID of this account permission group.
    string id = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#accountPermissionGroup".
    string kind = 2;
    // Name of this account permission group.
    string name = 3;
}

message AccountPermissionGroupsListResponse {
    // Account permission group collection.
    repeated AccountPermissionGroup accountPermissionGroups = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#accountPermissionGroupsListResponse".
    string kind = 2;
}

message AccountPermissionsListResponse {
    // Account permission collection.
    repeated AccountPermission accountPermissions = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#accountPermissionsListResponse".
    string kind = 2;
}

message AccountUserProfile {
    // Account ID of the user profile. This is a read-only field that can be left blank.
    string accountId = 1;
    // Whether this user profile is active. This defaults to false, and must be set true on insert for the user profile to be usable.
    bool active = 2;
    // Filter that describes which advertisers are visible to the user profile.
    ObjectFilter advertiserFilter = 3;
    // Filter that describes which campaigns are visible to the user profile.
    ObjectFilter campaignFilter = 4;
    // Comments for this user profile.
    string comments = 5;
    // Email of the user profile. The email addresss must be linked to a Google Account. This field is required on insertion and is read-only after insertion.
    string email = 6;
    // ID of the user profile. This is a read-only, auto-generated field.
    string id = 7;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#accountUserProfile".
    string kind = 8;
    // Locale of the user profile. This is a required field.
    // Acceptable values are:
    // - "cs" (Czech)
    // - "de" (German)
    // - "en" (English)
    // - "en-GB" (English United Kingdom)
    // - "es" (Spanish)
    // - "fr" (French)
    // - "it" (Italian)
    // - "ja" (Japanese)
    // - "ko" (Korean)
    // - "pl" (Polish)
    // - "pt-BR" (Portuguese Brazil)
    // - "ru" (Russian)
    // - "sv" (Swedish)
    // - "tr" (Turkish)
    // - "zh-CN" (Chinese Simplified)
    // - "zh-TW" (Chinese Traditional)
    string locale = 9;
    // Name of the user profile. This is a required field. Must be less than 64 characters long, must be globally unique, and cannot contain whitespace or any of the following characters: "&;"#%,".
    string name = 10;
    // Filter that describes which sites are visible to the user profile.
    ObjectFilter siteFilter = 11;
    // Subaccount ID of the user profile. This is a read-only field that can be left blank.
    string subaccountId = 12;
    // Trafficker type of this user profile.
    enum AccountUserProfile_TraffickerType {
        ACCOUNTUSERPROFILE_TRAFFICKERTYPE_EXTERNAL_TRAFFICKER = 0;
        ACCOUNTUSERPROFILE_TRAFFICKERTYPE_INTERNAL_NON_TRAFFICKER = 1;
        ACCOUNTUSERPROFILE_TRAFFICKERTYPE_INTERNAL_TRAFFICKER = 2;
    }
    AccountUserProfile_TraffickerType traffickerType = 13;
    // User type of the user profile. This is a read-only field that can be left blank.
    enum AccountUserProfile_UserAccessType {
        ACCOUNTUSERPROFILE_USERACCESSTYPE_INTERNAL_ADMINISTRATOR = 0;
        ACCOUNTUSERPROFILE_USERACCESSTYPE_NORMAL_USER = 1;
        ACCOUNTUSERPROFILE_USERACCESSTYPE_READ_ONLY_SUPER_USER = 2;
        ACCOUNTUSERPROFILE_USERACCESSTYPE_SUPER_USER = 3;
    }
    AccountUserProfile_UserAccessType userAccessType = 14;
    // Filter that describes which user roles are visible to the user profile.
    ObjectFilter userRoleFilter = 15;
    // User role ID of the user profile. This is a required field.
    string userRoleId = 16;
}

message AccountUserProfilesListResponse {
    // Account user profile collection.
    repeated AccountUserProfile accountUserProfiles = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#accountUserProfilesListResponse".
    string kind = 2;
    // Pagination token to be used for the next list operation.
    string nextPageToken = 3;
}

message AccountsListResponse {
    // Account collection.
    repeated Account accounts = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#accountsListResponse".
    string kind = 2;
    // Pagination token to be used for the next list operation.
    string nextPageToken = 3;
}

message Activities {
    // List of activity filters. The dimension values need to be all either of type "dfa:activity" or "dfa:activityGroup".
    repeated DimensionValue filters = 1;
    // The kind of resource this is, in this case dfareporting#activities.
    string kind = 2;
    // List of names of floodlight activity metrics.
    repeated string metricNames = 3;
}

message Ad {
    // Account ID of this ad. This is a read-only field that can be left blank.
    string accountId = 1;
    // Whether this ad is active. When true, archived must be false.
    bool active = 2;
    // Advertiser ID of this ad. This is a required field on insertion.
    string advertiserId = 3;
    // Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.
    DimensionValue advertiserIdDimensionValue = 4;
    // Whether this ad is archived. When true, active must be false.
    bool archived = 5;
    // Audience segment ID that is being targeted for this ad. Applicable when type is AD_SERVING_STANDARD_AD.
    string audienceSegmentId = 6;
    // Campaign ID of this ad. This is a required field on insertion.
    string campaignId = 7;
    // Dimension value for the ID of the campaign. This is a read-only, auto-generated field.
    DimensionValue campaignIdDimensionValue = 8;
    // Click-through URL for this ad. This is a required field on insertion. Applicable when type is AD_SERVING_CLICK_TRACKER.
    ClickThroughUrl clickThroughUrl = 9;
    // Click-through URL suffix properties for this ad. Applies to the URL in the ad or (if overriding ad properties) the URL in the creative.
    ClickThroughUrlSuffixProperties clickThroughUrlSuffixProperties = 10;
    // Comments for this ad.
    string comments = 11;
    // Compatibility of this ad. Applicable when type is AD_SERVING_DEFAULT_AD. DISPLAY and DISPLAY_INTERSTITIAL refer to either rendering on desktop or on mobile devices or in mobile apps for regular or interstitial ads, respectively. APP and APP_INTERSTITIAL are only used for existing default ads. New mobile placements must be assigned DISPLAY or DISPLAY_INTERSTITIAL and default ads created for those placements will be limited to those compatibility types. IN_STREAM_VIDEO refers to rendering in-stream video ads developed with the VAST standard.
    enum Ad_Compatibility {
        AD_COMPATIBILITY_APP = 0;
        AD_COMPATIBILITY_APP_INTERSTITIAL = 1;
        AD_COMPATIBILITY_DISPLAY = 2;
        AD_COMPATIBILITY_DISPLAY_INTERSTITIAL = 3;
        AD_COMPATIBILITY_IN_STREAM_VIDEO = 4;
    }
    Ad_Compatibility compatibility = 12;
    // Information about the creation of this ad. This is a read-only field.
    LastModifiedInfo createInfo = 13;
    // Creative group assignments for this ad. Applicable when type is AD_SERVING_CLICK_TRACKER. Only one assignment per creative group number is allowed for a maximum of two assignments.
    repeated CreativeGroupAssignment creativeGroupAssignments = 14;
    // Creative rotation for this ad. Applicable when type is AD_SERVING_DEFAULT_AD, AD_SERVING_STANDARD_AD, or AD_SERVING_TRACKING. When type is AD_SERVING_DEFAULT_AD, this field should have exactly one creativeAssignment.
    CreativeRotation creativeRotation = 15;
    // Time and day targeting information for this ad. This field must be left blank if the ad is using a targeting template. Applicable when type is AD_SERVING_STANDARD_AD.
    DayPartTargeting dayPartTargeting = 16;
    // Default click-through event tag properties for this ad.
    DefaultClickThroughEventTagProperties defaultClickThroughEventTagProperties = 17;
    // Delivery schedule information for this ad. Applicable when type is AD_SERVING_STANDARD_AD or AD_SERVING_TRACKING. This field along with subfields priority and impressionRatio are required on insertion when type is AD_SERVING_STANDARD_AD.
    DeliverySchedule deliverySchedule = 18;
    // Whether this ad is a dynamic click tracker. Applicable when type is AD_SERVING_CLICK_TRACKER. This is a required field on insert, and is read-only after insert.
    bool dynamicClickTracker = 19;
    // Date and time that this ad should stop serving. Must be later than the start time. This is a required field on insertion.
    string endTime = 20;
    // Event tag overrides for this ad.
    repeated EventTagOverride eventTagOverrides = 21;
    // Geographical targeting information for this ad. This field must be left blank if the ad is using a targeting template. Applicable when type is AD_SERVING_STANDARD_AD.
    GeoTargeting geoTargeting = 22;
    // ID of this ad. This is a read-only, auto-generated field.
    string id = 23;
    // Dimension value for the ID of this ad. This is a read-only, auto-generated field.
    DimensionValue idDimensionValue = 24;
    // Key-value targeting information for this ad. This field must be left blank if the ad is using a targeting template. Applicable when type is AD_SERVING_STANDARD_AD.
    KeyValueTargetingExpression keyValueTargetingExpression = 25;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#ad".
    string kind = 26;
    // Language targeting information for this ad. This field must be left blank if the ad is using a targeting template. Applicable when type is AD_SERVING_STANDARD_AD.
    LanguageTargeting languageTargeting = 27;
    // Information about the most recent modification of this ad. This is a read-only field.
    LastModifiedInfo lastModifiedInfo = 28;
    // Name of this ad. This is a required field and must be less than 256 characters long.
    string name = 29;
    // Placement assignments for this ad.
    repeated PlacementAssignment placementAssignments = 30;
    // Remarketing list targeting expression for this ad. This field must be left blank if the ad is using a targeting template. Applicable when type is AD_SERVING_STANDARD_AD.
    ListTargetingExpression remarketingListExpression = 31;
    // Size of this ad. Applicable when type is AD_SERVING_DEFAULT_AD.
    Size size = 32;
    // Whether this ad is ssl compliant. This is a read-only field that is auto-generated when the ad is inserted or updated.
    bool sslCompliant = 33;
    // Whether this ad requires ssl. This is a read-only field that is auto-generated when the ad is inserted or updated.
    bool sslRequired = 34;
    // Date and time that this ad should start serving. If creating an ad, this field must be a time in the future. This is a required field on insertion.
    string startTime = 35;
    // Subaccount ID of this ad. This is a read-only field that can be left blank.
    string subaccountId = 36;
    // Targeting template ID, used to apply preconfigured targeting information to this ad. This cannot be set while any of dayPartTargeting, geoTargeting, keyValueTargetingExpression, languageTargeting, remarketingListExpression, or technologyTargeting are set. Applicable when type is AD_SERVING_STANDARD_AD.
    string targetingTemplateId = 37;
    // Technology platform targeting information for this ad. This field must be left blank if the ad is using a targeting template. Applicable when type is AD_SERVING_STANDARD_AD.
    TechnologyTargeting technologyTargeting = 38;
    // Type of ad. This is a required field on insertion. Note that default ads (AD_SERVING_DEFAULT_AD) cannot be created directly (see Creative resource).
    enum Ad_Type {
        AD_TYPE_AD_SERVING_CLICK_TRACKER = 0;
        AD_TYPE_AD_SERVING_DEFAULT_AD = 1;
        AD_TYPE_AD_SERVING_STANDARD_AD = 2;
        AD_TYPE_AD_SERVING_TRACKING = 3;
    }
    Ad_Type type = 39;
}

message AdSlot {
    // Comment for this ad slot.
    string comment = 1;
    // Ad slot compatibility. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop, mobile devices or in mobile apps for regular or interstitial ads respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard.
    enum AdSlot_Compatibility {
        ADSLOT_COMPATIBILITY_APP = 0;
        ADSLOT_COMPATIBILITY_APP_INTERSTITIAL = 1;
        ADSLOT_COMPATIBILITY_DISPLAY = 2;
        ADSLOT_COMPATIBILITY_DISPLAY_INTERSTITIAL = 3;
        ADSLOT_COMPATIBILITY_IN_STREAM_VIDEO = 4;
    }
    AdSlot_Compatibility compatibility = 2;
    // Height of this ad slot.
    string height = 3;
    // ID of the placement from an external platform that is linked to this ad slot.
    string linkedPlacementId = 4;
    // Name of this ad slot.
    string name = 5;
    // Payment source type of this ad slot.
    enum AdSlot_PaymentSourceType {
        ADSLOT_PAYMENTSOURCETYPE_PLANNING_PAYMENT_SOURCE_TYPE_AGENCY_PAID = 0;
        ADSLOT_PAYMENTSOURCETYPE_PLANNING_PAYMENT_SOURCE_TYPE_PUBLISHER_PAID = 1;
    }
    AdSlot_PaymentSourceType paymentSourceType = 6;
    // Primary ad slot of a roadblock inventory item.
    bool primary = 7;
    // Width of this ad slot.
    string width = 8;
}

message AdsListResponse {
    // Ad collection.
    repeated Ad ads = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#adsListResponse".
    string kind = 2;
    // Pagination token to be used for the next list operation.
    string nextPageToken = 3;
}

message Advertiser {
    // Account ID of this advertiser.This is a read-only field that can be left blank.
    string accountId = 1;
    // ID of the advertiser group this advertiser belongs to. You can group advertisers for reporting purposes, allowing you to see aggregated information for all advertisers in each group.
    string advertiserGroupId = 2;
    // Suffix added to click-through URL of ad creative associations under this advertiser. Must be less than 129 characters long.
    string clickThroughUrlSuffix = 3;
    // ID of the click-through event tag to apply by default to the landing pages of this advertiser's campaigns.
    string defaultClickThroughEventTagId = 4;
    // Default email address used in sender field for tag emails.
    string defaultEmail = 5;
    // Floodlight configuration ID of this advertiser. The floodlight configuration ID will be created automatically, so on insert this field should be left blank. This field can be set to another advertiser's floodlight configuration ID in order to share that advertiser's floodlight configuration with this advertiser, so long as:
    // - This advertiser's original floodlight configuration is not already associated with floodlight activities or floodlight activity groups.
    // - This advertiser's original floodlight configuration is not already shared with another advertiser.
    string floodlightConfigurationId = 6;
    // Dimension value for the ID of the floodlight configuration. This is a read-only, auto-generated field.
    DimensionValue floodlightConfigurationIdDimensionValue = 7;
    // ID of this advertiser. This is a read-only, auto-generated field.
    string id = 8;
    // Dimension value for the ID of this advertiser. This is a read-only, auto-generated field.
    DimensionValue idDimensionValue = 9;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#advertiser".
    string kind = 10;
    // Name of this advertiser. This is a required field and must be less than 256 characters long and unique among advertisers of the same account.
    string name = 11;
    // Original floodlight configuration before any sharing occurred. Set the floodlightConfigurationId of this advertiser to originalFloodlightConfigurationId to unshare the advertiser's current floodlight configuration. You cannot unshare an advertiser's floodlight configuration if the shared configuration has activities associated with any campaign or placement.
    string originalFloodlightConfigurationId = 12;
    // Status of this advertiser.
    enum Advertiser_Statu {
        ADVERTISER_STATU_APPROVED = 0;
        ADVERTISER_STATU_ON_HOLD = 1;
    }
    Advertiser_Statu status = 13;
    // Subaccount ID of this advertiser.This is a read-only field that can be left blank.
    string subaccountId = 14;
    // Suspension status of this advertiser.
    bool suspended = 15;
}

message AdvertiserGroup {
    // Account ID of this advertiser group. This is a read-only field that can be left blank.
    string accountId = 1;
    // ID of this advertiser group. This is a read-only, auto-generated field.
    string id = 2;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#advertiserGroup".
    string kind = 3;
    // Name of this advertiser group. This is a required field and must be less than 256 characters long and unique among advertiser groups of the same account.
    string name = 4;
}

message AdvertiserGroupsListResponse {
    // Advertiser group collection.
    repeated AdvertiserGroup advertiserGroups = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#advertiserGroupsListResponse".
    string kind = 2;
    // Pagination token to be used for the next list operation.
    string nextPageToken = 3;
}

message AdvertisersListResponse {
    // Advertiser collection.
    repeated Advertiser advertisers = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#advertisersListResponse".
    string kind = 2;
    // Pagination token to be used for the next list operation.
    string nextPageToken = 3;
}

message AudienceSegment {
    // Weight allocated to this segment. The weight assigned will be understood in proportion to the weights assigned to other segments in the same segment group. Acceptable values are 1 to 1000, inclusive.
    int32 allocation = 1;
    // ID of this audience segment. This is a read-only, auto-generated field.
    string id = 2;
    // Name of this audience segment. This is a required field and must be less than 65 characters long.
    string name = 3;
}

message AudienceSegmentGroup {
    // Audience segments assigned to this group. The number of segments must be between 2 and 100.
    repeated AudienceSegment audienceSegments = 1;
    // ID of this audience segment group. This is a read-only, auto-generated field.
    string id = 2;
    // Name of this audience segment group. This is a required field and must be less than 65 characters long.
    string name = 3;
}

message Browser {
    // ID referring to this grouping of browser and version numbers. This is the ID used for targeting.
    string browserVersionId = 1;
    // DART ID of this browser. This is the ID used when generating reports.
    string dartId = 2;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#browser".
    string kind = 3;
    // Major version number (leftmost number) of this browser. For example, for Chrome 5.0.376.86 beta, this field should be set to 5. An asterisk (*) may be used to target any version number, and a question mark (?) may be used to target cases where the version number cannot be identified. For example, Chrome *.* targets any version of Chrome: 1.2, 2.5, 3.5, and so on. Chrome 3.* targets Chrome 3.1, 3.5, but not 4.0. Firefox ?.? targets cases where the ad server knows the browser is Firefox but can't tell which version it is.
    string majorVersion = 4;
    // Minor version number (number after first dot on left) of this browser. For example, for Chrome 5.0.375.86 beta, this field should be set to 0. An asterisk (*) may be used to target any version number, and a question mark (?) may be used to target cases where the version number cannot be identified. For example, Chrome *.* targets any version of Chrome: 1.2, 2.5, 3.5, and so on. Chrome 3.* targets Chrome 3.1, 3.5, but not 4.0. Firefox ?.? targets cases where the ad server knows the browser is Firefox but can't tell which version it is.
    string minorVersion = 5;
    // Name of this browser.
    string name = 6;
}

message BrowsersListResponse {
    // Browser collection.
    repeated Browser browsers = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#browsersListResponse".
    string kind = 2;
}

message Campaign {
    // Account ID of this campaign. This is a read-only field that can be left blank.
    string accountId = 1;
    // Additional creative optimization configurations for the campaign.
    repeated CreativeOptimizationConfiguration additionalCreativeOptimizationConfigurations = 2;
    // Advertiser group ID of the associated advertiser.
    string advertiserGroupId = 3;
    // Advertiser ID of this campaign. This is a required field.
    string advertiserId = 4;
    // Dimension value for the advertiser ID of this campaign. This is a read-only, auto-generated field.
    DimensionValue advertiserIdDimensionValue = 5;
    // Whether this campaign has been archived.
    bool archived = 6;
    // Audience segment groups assigned to this campaign. Cannot have more than 300 segment groups.
    repeated AudienceSegmentGroup audienceSegmentGroups = 7;
    // Billing invoice code included in the DCM client billing invoices associated with the campaign.
    string billingInvoiceCode = 8;
    // Click-through URL suffix override properties for this campaign.
    ClickThroughUrlSuffixProperties clickThroughUrlSuffixProperties = 9;
    // Arbitrary comments about this campaign. Must be less than 256 characters long.
    string comment = 10;
    // Information about the creation of this campaign. This is a read-only field.
    LastModifiedInfo createInfo = 11;
    // List of creative group IDs that are assigned to the campaign.
    repeated string creativeGroupIds = 12;
    // Creative optimization configuration for the campaign.
    CreativeOptimizationConfiguration creativeOptimizationConfiguration = 13;
    // Click-through event tag ID override properties for this campaign.
    DefaultClickThroughEventTagProperties defaultClickThroughEventTagProperties = 14;
    // Date on which the campaign will stop running. On insert, the end date must be today or a future date. The end date must be later than or be the same as the start date. If, for example, you set 6/25/2015 as both the start and end dates, the effective campaign run date is just that day only, 6/25/2015. The hours, minutes, and seconds of the end date should not be set, as doing so will result in an error. This is a required field.
    string endDate = 15;
    // Overrides that can be used to activate or deactivate advertiser event tags.
    repeated EventTagOverride eventTagOverrides = 16;
    // External ID for this campaign.
    string externalId = 17;
    // ID of this campaign. This is a read-only auto-generated field.
    string id = 18;
    // Dimension value for the ID of this campaign. This is a read-only, auto-generated field.
    DimensionValue idDimensionValue = 19;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#campaign".
    string kind = 20;
    // Information about the most recent modification of this campaign. This is a read-only field.
    LastModifiedInfo lastModifiedInfo = 21;
    // Lookback window settings for the campaign.
    LookbackConfiguration lookbackConfiguration = 22;
    // Name of this campaign. This is a required field and must be less than 256 characters long and unique among campaigns of the same advertiser.
    string name = 23;
    // Whether Nielsen reports are enabled for this campaign.
    bool nielsenOcrEnabled = 24;
    // Date on which the campaign starts running. The start date can be any date. The hours, minutes, and seconds of the start date should not be set, as doing so will result in an error. This is a required field.
    string startDate = 25;
    // Subaccount ID of this campaign. This is a read-only field that can be left blank.
    string subaccountId = 26;
    // Campaign trafficker contact emails.
    repeated string traffickerEmails = 27;
}

message CampaignCreativeAssociation {
    // ID of the creative associated with the campaign. This is a required field.
    string creativeId = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#campaignCreativeAssociation".
    string kind = 2;
}

message CampaignCreativeAssociationsListResponse {
    // Campaign creative association collection
    repeated CampaignCreativeAssociation campaignCreativeAssociations = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#campaignCreativeAssociationsListResponse".
    string kind = 2;
    // Pagination token to be used for the next list operation.
    string nextPageToken = 3;
}

message CampaignsListResponse {
    // Campaign collection.
    repeated Campaign campaigns = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#campaignsListResponse".
    string kind = 2;
    // Pagination token to be used for the next list operation.
    string nextPageToken = 3;
}

message ChangeLog {
    // Account ID of the modified object.
    string accountId = 1;
    // Action which caused the change.
    string action = 2;
    // Time when the object was modified.
    string changeTime = 3;
    // Field name of the object which changed.
    string fieldName = 4;
    // ID of this change log.
    string id = 5;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#changeLog".
    string kind = 6;
    // New value of the object field.
    string newValue = 7;
    // ID of the object of this change log. The object could be a campaign, placement, ad, or other type.
    string objectId = 8;
    // Object type of the change log.
    string objectType = 9;
    // Old value of the object field.
    string oldValue = 10;
    // Subaccount ID of the modified object.
    string subaccountId = 11;
    // Transaction ID of this change log. When a single API call results in many changes, each change will have a separate ID in the change log but will share the same transactionId.
    string transactionId = 12;
    // ID of the user who modified the object.
    string userProfileId = 13;
    // User profile name of the user who modified the object.
    string userProfileName = 14;
}

message ChangeLogsListResponse {
    // Change log collection.
    repeated ChangeLog changeLogs = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#changeLogsListResponse".
    string kind = 2;
    // Pagination token to be used for the next list operation.
    string nextPageToken = 3;
}

message CitiesListResponse {
    // City collection.
    repeated City cities = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#citiesListResponse".
    string kind = 2;
}

message City {
    // Country code of the country to which this city belongs.
    string countryCode = 1;
    // DART ID of the country to which this city belongs.
    string countryDartId = 2;
    // DART ID of this city. This is the ID used for targeting and generating reports.
    string dartId = 3;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#city".
    string kind = 4;
    // Metro region code of the metro region (DMA) to which this city belongs.
    string metroCode = 5;
    // ID of the metro region (DMA) to which this city belongs.
    string metroDmaId = 6;
    // Name of this city.
    string name = 7;
    // Region code of the region to which this city belongs.
    string regionCode = 8;
    // DART ID of the region to which this city belongs.
    string regionDartId = 9;
}

message ClickTag {
    // Advertiser event name associated with the click tag. This field is used by DISPLAY_IMAGE_GALLERY and HTML5_BANNER creatives. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.
    string eventName = 1;
    // Parameter name for the specified click tag. For DISPLAY_IMAGE_GALLERY creative assets, this field must match the value of the creative asset's creativeAssetId.name field.
    string name = 2;
    // Parameter value for the specified click tag. This field contains a click-through url.
    string value = 3;
}

message ClickThroughUrl {
    // Read-only convenience field representing the actual URL that will be used for this click-through. The URL is computed as follows:
    // - If defaultLandingPage is enabled then the campaign's default landing page URL is assigned to this field.
    // - If defaultLandingPage is not enabled and a landingPageId is specified then that landing page's URL is assigned to this field.
    // - If neither of the above cases apply, then the customClickThroughUrl is assigned to this field.
    string computedClickThroughUrl = 1;
    // Custom click-through URL. Applicable if the defaultLandingPage field is set to false and the landingPageId field is left unset.
    string customClickThroughUrl = 2;
    // Whether the campaign default landing page is used.
    bool defaultLandingPage = 3;
    // ID of the landing page for the click-through URL. Applicable if the defaultLandingPage field is set to false.
    string landingPageId = 4;
}

message ClickThroughUrlSuffixProperties {
    // Click-through URL suffix to apply to all ads in this entity's scope. Must be less than 128 characters long.
    string clickThroughUrlSuffix = 1;
    // Whether this entity should override the inherited click-through URL suffix with its own defined value.
    bool overrideInheritedSuffix = 2;
}

message CompanionClickThroughOverride {
    // Click-through URL of this companion click-through override.
    ClickThroughUrl clickThroughUrl = 1;
    // ID of the creative for this companion click-through override.
    string creativeId = 2;
}

message CompanionSetting {
    // Whether companions are disabled for this placement.
    bool companionsDisabled = 1;
    // Whitelist of companion sizes to be served to this placement. Set this list to null or empty to serve all companion sizes.
    repeated Size enabledSizes = 2;
    // Whether to serve only static images as companions.
    bool imageOnly = 3;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#companionSetting".
    string kind = 4;
}

message CompatibleFields {
    // Contains items that are compatible to be selected for a report of type "CROSS_DIMENSION_REACH".
    CrossDimensionReachReportCompatibleFields crossDimensionReachReportCompatibleFields = 1;
    // Contains items that are compatible to be selected for a report of type "FLOODLIGHT".
    FloodlightReportCompatibleFields floodlightReportCompatibleFields = 2;
    // The kind of resource this is, in this case dfareporting#compatibleFields.
    string kind = 3;
    // Contains items that are compatible to be selected for a report of type "PATH_TO_CONVERSION".
    PathToConversionReportCompatibleFields pathToConversionReportCompatibleFields = 4;
    // Contains items that are compatible to be selected for a report of type "REACH".
    ReachReportCompatibleFields reachReportCompatibleFields = 5;
    // Contains items that are compatible to be selected for a report of type "STANDARD".
    ReportCompatibleFields reportCompatibleFields = 6;
}

message ConnectionType {
    // ID of this connection type.
    string id = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#connectionType".
    string kind = 2;
    // Name of this connection type.
    string name = 3;
}

message ConnectionTypesListResponse {
    // Collection of connection types such as broadband and mobile.
    repeated ConnectionType connectionTypes = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#connectionTypesListResponse".
    string kind = 2;
}

message ContentCategoriesListResponse {
    // Content category collection.
    repeated ContentCategory contentCategories = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#contentCategoriesListResponse".
    string kind = 2;
    // Pagination token to be used for the next list operation.
    string nextPageToken = 3;
}

message ContentCategory {
    // Account ID of this content category. This is a read-only field that can be left blank.
    string accountId = 1;
    // ID of this content category. This is a read-only, auto-generated field.
    string id = 2;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#contentCategory".
    string kind = 3;
    // Name of this content category. This is a required field and must be less than 256 characters long and unique among content categories of the same account.
    string name = 4;
}

message Conversion {
    // Whether the conversion was directed toward children.
    bool childDirectedTreatment = 1;
    // Custom floodlight variables.
    repeated CustomFloodlightVariable customVariables = 2;
    // The alphanumeric encrypted user ID. When set, encryptionInfo should also be specified. This field is mutually exclusive with encryptedUserIdCandidates[] and mobileDeviceId. This or encryptedUserIdCandidates[] or mobileDeviceId is a required field.
    string encryptedUserId = 3;
    // A list of the alphanumeric encrypted user IDs. Any user ID with exposure prior to the conversion timestamp will be used in the inserted conversion. If no such user ID is found then the conversion will be rejected with NO_COOKIE_MATCH_FOUND error. When set, encryptionInfo should also be specified. This field should only be used when calling conversions.batchinsert. This field is mutually exclusive with encryptedUserId and mobileDeviceId. This or encryptedUserId or mobileDeviceId is a required field.
    repeated string encryptedUserIdCandidates = 4;
    // Floodlight Activity ID of this conversion. This is a required field.
    string floodlightActivityId = 5;
    // Floodlight Configuration ID of this conversion. This is a required field.
    string floodlightConfigurationId = 6;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#conversion".
    string kind = 7;
    // Whether Limit Ad Tracking is enabled. When set to true, the conversion will be used for reporting but not targeting. This will prevent remarketing.
    bool limitAdTracking = 8;
    // The mobile device ID. This field is mutually exclusive with encryptedUserId and encryptedUserIdCandidates[]. This or encryptedUserId or encryptedUserIdCandidates[] is a required field.
    string mobileDeviceId = 9;
    // The ordinal of the conversion. Use this field to control how conversions of the same user and day are de-duplicated. This is a required field.
    string ordinal = 10;
    // The quantity of the conversion.
    string quantity = 11;
    // The timestamp of conversion, in Unix epoch micros. This is a required field.
    string timestampMicros = 12;
    // The value of the conversion.
    double value = 13;
}

message ConversionError {
    // The error code.
    enum ConversionError_Code {
        CONVERSIONERROR_CODE_INTERNAL = 0;
        CONVERSIONERROR_CODE_INVALID_ARGUMENT = 1;
        CONVERSIONERROR_CODE_NOT_FOUND = 2;
        CONVERSIONERROR_CODE_PERMISSION_DENIED = 3;
    }
    ConversionError_Code code = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#conversionError".
    string kind = 2;
    // A description of the error.
    string message = 3;
}

message ConversionStatus {
    // The original conversion that was inserted or updated.
    Conversion conversion = 1;
    // A list of errors related to this conversion.
    repeated ConversionError errors = 2;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#conversionStatus".
    string kind = 3;
}

message ConversionsBatchInsertRequest {
    // The set of conversions to insert.
    repeated Conversion conversions = 1;
    // Describes how encryptedUserId or encryptedUserIdCandidates[] is encrypted. This is a required field if encryptedUserId or encryptedUserIdCandidates[] is used.
    EncryptionInfo encryptionInfo = 2;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#conversionsBatchInsertRequest".
    string kind = 3;
}

message ConversionsBatchInsertResponse {
    // Indicates that some or all conversions failed to insert.
    bool hasFailures = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#conversionsBatchInsertResponse".
    string kind = 2;
    // The insert status of each conversion. Statuses are returned in the same order that conversions are inserted.
    repeated ConversionStatus status = 3;
}

message CountriesListResponse {
    // Country collection.
    repeated Country countries = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#countriesListResponse".
    string kind = 2;
}

message Country {
    // Country code.
    string countryCode = 1;
    // DART ID of this country. This is the ID used for targeting and generating reports.
    string dartId = 2;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#country".
    string kind = 3;
    // Name of this country.
    string name = 4;
    // Whether ad serving supports secure servers in this country.
    bool sslEnabled = 5;
}

message Creative {
    // Account ID of this creative. This field, if left unset, will be auto-generated for both insert and update operations. Applicable to all creative types.
    string accountId = 1;
    // Whether the creative is active. Applicable to all creative types.
    bool active = 2;
    // Ad parameters user for VPAID creative. This is a read-only field. Applicable to the following creative types: all VPAID.
    string adParameters = 3;
    // Keywords for a Rich Media creative. Keywords let you customize the creative settings of a Rich Media ad running on your site without having to contact the advertiser. You can use keywords to dynamically change the look or functionality of a creative. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.
    repeated string adTagKeys = 4;
    // Advertiser ID of this creative. This is a required field. Applicable to all creative types.
    string advertiserId = 5;
    // Whether script access is allowed for this creative. This is a read-only and deprecated field which will automatically be set to true on update. Applicable to the following creative types: FLASH_INPAGE.
    bool allowScriptAccess = 6;
    // Whether the creative is archived. Applicable to all creative types.
    bool archived = 7;
    // Type of artwork used for the creative. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.
    enum Creative_ArtworkType {
        CREATIVE_ARTWORKTYPE_ARTWORK_TYPE_FLASH = 0;
        CREATIVE_ARTWORKTYPE_ARTWORK_TYPE_HTML5 = 1;
        CREATIVE_ARTWORKTYPE_ARTWORK_TYPE_IMAGE = 2;
        CREATIVE_ARTWORKTYPE_ARTWORK_TYPE_MIXED = 3;
    }
    Creative_ArtworkType artworkType = 8;
    // Source application where creative was authored. Presently, only DBM authored creatives will have this field set. Applicable to all creative types.
    enum Creative_AuthoringSource {
        CREATIVE_AUTHORINGSOURCE_CREATIVE_AUTHORING_SOURCE_DBM = 0;
        CREATIVE_AUTHORINGSOURCE_CREATIVE_AUTHORING_SOURCE_DCM = 1;
        CREATIVE_AUTHORINGSOURCE_CREATIVE_AUTHORING_SOURCE_STUDIO = 2;
    }
    Creative_AuthoringSource authoringSource = 9;
    // Authoring tool for HTML5 banner creatives. This is a read-only field. Applicable to the following creative types: HTML5_BANNER.
    enum Creative_AuthoringTool {
        CREATIVE_AUTHORINGTOOL_NINJA = 0;
        CREATIVE_AUTHORINGTOOL_SWIFFY = 1;
    }
    Creative_AuthoringTool authoringTool = 10;
    // Whether images are automatically advanced for image gallery creatives. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY.
    bool auto_advance_images = 11;
    // The 6-character HTML color code, beginning with #, for the background of the window area where the Flash file is displayed. Default is white. Applicable to the following creative types: FLASH_INPAGE.
    string backgroundColor = 12;
    // Click-through URL for backup image. Applicable to the following creative types: FLASH_INPAGE and HTML5_BANNER. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.
    string backupImageClickThroughUrl = 13;
    // List of feature dependencies that will cause a backup image to be served if the browser that serves the ad does not support them. Feature dependencies are features that a browser must be able to support in order to render your HTML5 creative asset correctly. This field is initially auto-generated to contain all features detected by DCM for all the assets of this creative and can then be modified by the client. To reset this field, copy over all the creativeAssets' detected features. Applicable to the following creative types: HTML5_BANNER. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.
    repeated string backupImageFeatures = 14;
    // Reporting label used for HTML5 banner backup image. Applicable to the following creative types: DISPLAY when the primary asset type is not HTML_IMAGE.
    string backupImageReportingLabel = 15;
    // Target window for backup image. Applicable to the following creative types: FLASH_INPAGE and HTML5_BANNER. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.
    TargetWindow backupImageTargetWindow = 16;
    // Click tags of the creative. For DISPLAY, FLASH_INPAGE, and HTML5_BANNER creatives, this is a subset of detected click tags for the assets associated with this creative. After creating a flash asset, detected click tags will be returned in the creativeAssetMetadata. When inserting the creative, populate the creative clickTags field using the creativeAssetMetadata.clickTags field. For DISPLAY_IMAGE_GALLERY creatives, there should be exactly one entry in this list for each image creative asset. A click tag is matched with a corresponding creative asset by matching the clickTag.name field with the creativeAsset.assetIdentifier.name field. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, FLASH_INPAGE, HTML5_BANNER. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.
    repeated ClickTag clickTags = 17;
    // Industry standard ID assigned to creative for reach and frequency. Applicable to the following creative types: all INSTREAM_VIDEO and all VPAID.
    string commercialId = 18;
    // List of companion creatives assigned to an in-Stream videocreative. Acceptable values include IDs of existing flash and image creatives. Applicable to the following creative types: all VPAID and all INSTREAM_VIDEO with dynamicAssetSelection set to false.
    repeated string companionCreatives = 19;
    // Compatibilities associated with this creative. This is a read-only field. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on mobile devices or in mobile apps for regular or interstitial ads, respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. Only pre-existing creatives may have these compatibilities since new creatives will either be assigned DISPLAY or DISPLAY_INTERSTITIAL instead. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard. Applicable to all creative types.
    // 
    // Acceptable values are:
    // - "APP"
    // - "APP_INTERSTITIAL"
    // - "IN_STREAM_VIDEO"
    // - "DISPLAY"
    // - "DISPLAY_INTERSTITIAL"
    repeated string compatibility = 20;
    // Whether Flash assets associated with the creative need to be automatically converted to HTML5. This flag is enabled by default and users can choose to disable it if they don't want the system to generate and use HTML5 asset for this creative. Applicable to the following creative type: FLASH_INPAGE. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.
    bool convertFlashToHtml5 = 21;
    // List of counter events configured for the creative. For DISPLAY_IMAGE_GALLERY creatives, these are read-only and auto-generated from clickTags. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, all RICH_MEDIA, and all VPAID.
    repeated CreativeCustomEvent counterCustomEvents = 22;
    // Required if dynamicAssetSelection is true.
    CreativeAssetSelection creativeAssetSelection = 23;
    // Assets associated with a creative. Applicable to all but the following creative types: INTERNAL_REDIRECT, INTERSTITIAL_INTERNAL_REDIRECT, and REDIRECT
    repeated CreativeAsset creativeAssets = 24;
    // Creative field assignments for this creative. Applicable to all creative types.
    repeated CreativeFieldAssignment creativeFieldAssignments = 25;
    // Custom key-values for a Rich Media creative. Key-values let you customize the creative settings of a Rich Media ad running on your site without having to contact the advertiser. You can use key-values to dynamically change the look or functionality of a creative. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.
    repeated string customKeyValues = 26;
    // Set this to true to enable the use of rules to target individual assets in this creative. When set to true creativeAssetSelection must be set. This also controls asset-level companions. When this is true, companion creatives should be assigned to creative assets. Learn more. Applicable to INSTREAM_VIDEO creatives.
    bool dynamicAssetSelection = 27;
    // List of exit events configured for the creative. For DISPLAY and DISPLAY_IMAGE_GALLERY creatives, these are read-only and auto-generated from clickTags, For DISPLAY, an event is also created from the backupImageReportingLabel. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, all RICH_MEDIA, and all VPAID. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.
    repeated CreativeCustomEvent exitCustomEvents = 28;
    // OpenWindow FSCommand of this creative. This lets the SWF file communicate with either Flash Player or the program hosting Flash Player, such as a web browser. This is only triggered if allowScriptAccess field is true. Applicable to the following creative types: FLASH_INPAGE.
    FsCommand fsCommand = 29;
    // HTML code for the creative. This is a required field when applicable. This field is ignored if htmlCodeLocked is true. Applicable to the following creative types: all CUSTOM, FLASH_INPAGE, and HTML5_BANNER, and all RICH_MEDIA.
    string htmlCode = 30;
    // Whether HTML code is DCM-generated or manually entered. Set to true to ignore changes to htmlCode. Applicable to the following creative types: FLASH_INPAGE and HTML5_BANNER.
    bool htmlCodeLocked = 31;
    // ID of this creative. This is a read-only, auto-generated field. Applicable to all creative types.
    string id = 32;
    // Dimension value for the ID of this creative. This is a read-only field. Applicable to all creative types.
    DimensionValue idDimensionValue = 33;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#creative".
    string kind = 34;
    // Creative last modification information. This is a read-only field. Applicable to all creative types.
    LastModifiedInfo lastModifiedInfo = 35;
    // Latest Studio trafficked creative ID associated with rich media and VPAID creatives. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.
    string latestTraffickedCreativeId = 36;
    // Name of the creative. This is a required field and must be less than 256 characters long. Applicable to all creative types.
    string name = 37;
    // Override CSS value for rich media creatives. Applicable to the following creative types: all RICH_MEDIA.
    string overrideCss = 38;
    // Amount of time to play the video before counting a view. Applicable to the following creative types: all INSTREAM_VIDEO.
    VideoOffset progressOffset = 39;
    // URL of hosted image or hosted video or another ad tag. For INSTREAM_VIDEO_REDIRECT creatives this is the in-stream video redirect URL. The standard for a VAST (Video Ad Serving Template) ad response allows for a redirect link to another VAST 2.0 or 3.0 call. This is a required field when applicable. Applicable to the following creative types: DISPLAY_REDIRECT, INTERNAL_REDIRECT, INTERSTITIAL_INTERNAL_REDIRECT, and INSTREAM_VIDEO_REDIRECT
    string redirectUrl = 40;
    // ID of current rendering version. This is a read-only field. Applicable to all creative types.
    string renderingId = 41;
    // Dimension value for the rendering ID of this creative. This is a read-only field. Applicable to all creative types.
    DimensionValue renderingIdDimensionValue = 42;
    // The minimum required Flash plugin version for this creative. For example, 11.2.202.235. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.
    string requiredFlashPluginVersion = 43;
    // The internal Flash version for this creative as calculated by DoubleClick Studio. This is a read-only field. Applicable to the following creative types: FLASH_INPAGE all RICH_MEDIA, and all VPAID. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.
    int32 requiredFlashVersion = 44;
    // Size associated with this creative. When inserting or updating a creative either the size ID field or size width and height fields can be used. This is a required field when applicable; however for IMAGE, FLASH_INPAGE creatives, and for DISPLAY creatives with a primary asset of type HTML_IMAGE, if left blank, this field will be automatically set using the actual size of the associated image assets. Applicable to the following creative types: DISPLAY, DISPLAY_IMAGE_GALLERY, FLASH_INPAGE, HTML5_BANNER, IMAGE, and all RICH_MEDIA.
    Size size = 45;
    // Amount of time to play the video before the skip button appears. Applicable to the following creative types: all INSTREAM_VIDEO.
    VideoOffset skipOffset = 46;
    // Whether the user can choose to skip the creative. Applicable to the following creative types: all INSTREAM_VIDEO and all VPAID.
    bool skippable = 47;
    // Whether the creative is SSL-compliant. This is a read-only field. Applicable to all creative types.
    bool sslCompliant = 48;
    // Whether creative should be treated as SSL compliant even if the system scan shows it's not. Applicable to all creative types.
    bool sslOverride = 49;
    // Studio advertiser ID associated with rich media and VPAID creatives. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.
    string studioAdvertiserId = 50;
    // Studio creative ID associated with rich media and VPAID creatives. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.
    string studioCreativeId = 51;
    // Studio trafficked creative ID associated with rich media and VPAID creatives. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.
    string studioTraffickedCreativeId = 52;
    // Subaccount ID of this creative. This field, if left unset, will be auto-generated for both insert and update operations. Applicable to all creative types.
    string subaccountId = 53;
    // Third-party URL used to record backup image impressions. Applicable to the following creative types: all RICH_MEDIA.
    string thirdPartyBackupImageImpressionsUrl = 54;
    // Third-party URL used to record rich media impressions. Applicable to the following creative types: all RICH_MEDIA.
    string thirdPartyRichMediaImpressionsUrl = 55;
    // Third-party URLs for tracking in-stream video creative events. Applicable to the following creative types: all INSTREAM_VIDEO and all VPAID.
    repeated ThirdPartyTrackingUrl thirdPartyUrls = 56;
    // List of timer events configured for the creative. For DISPLAY_IMAGE_GALLERY creatives, these are read-only and auto-generated from clickTags. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, all RICH_MEDIA, and all VPAID. Applicable to DISPLAY when the primary asset is not HTML_IMAGE.
    repeated CreativeCustomEvent timerCustomEvents = 57;
    // Combined size of all creative assets. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.
    string totalFileSize = 58;
    // Type of this creative. This is a required field. Applicable to all creative types.
    // 
    // Note: FLASH_INPAGE, HTML5_BANNER, and IMAGE are only used for existing creatives. New creatives should use DISPLAY as a replacement for these types.
    enum Creative_Type {
        CREATIVE_TYPE_BRAND_SAFE_DEFAULT_INSTREAM_VIDEO = 0;
        CREATIVE_TYPE_CUSTOM_DISPLAY = 1;
        CREATIVE_TYPE_CUSTOM_DISPLAY_INTERSTITIAL = 2;
        CREATIVE_TYPE_DISPLAY = 3;
        CREATIVE_TYPE_DISPLAY_IMAGE_GALLERY = 4;
        CREATIVE_TYPE_DISPLAY_REDIRECT = 5;
        CREATIVE_TYPE_FLASH_INPAGE = 6;
        CREATIVE_TYPE_HTML5_BANNER = 7;
        CREATIVE_TYPE_IMAGE = 8;
        CREATIVE_TYPE_INSTREAM_VIDEO = 9;
        CREATIVE_TYPE_INSTREAM_VIDEO_REDIRECT = 10;
        CREATIVE_TYPE_INTERNAL_REDIRECT = 11;
        CREATIVE_TYPE_INTERSTITIAL_INTERNAL_REDIRECT = 12;
        CREATIVE_TYPE_RICH_MEDIA_DISPLAY_BANNER = 13;
        CREATIVE_TYPE_RICH_MEDIA_DISPLAY_EXPANDING = 14;
        CREATIVE_TYPE_RICH_MEDIA_DISPLAY_INTERSTITIAL = 15;
        CREATIVE_TYPE_RICH_MEDIA_DISPLAY_MULTI_FLOATING_INTERSTITIAL = 16;
        CREATIVE_TYPE_RICH_MEDIA_IM_EXPAND = 17;
        CREATIVE_TYPE_RICH_MEDIA_INPAGE_FLOATING = 18;
        CREATIVE_TYPE_RICH_MEDIA_MOBILE_IN_APP = 19;
        CREATIVE_TYPE_RICH_MEDIA_PEEL_DOWN = 20;
        CREATIVE_TYPE_TRACKING_TEXT = 21;
        CREATIVE_TYPE_VPAID_LINEAR_VIDEO = 22;
        CREATIVE_TYPE_VPAID_NON_LINEAR_VIDEO = 23;
    }
    Creative_Type type = 59;
    // The version number helps you keep track of multiple versions of your creative in your reports. The version number will always be auto-generated during insert operations to start at 1. For tracking creatives the version cannot be incremented and will always remain at 1. For all other creative types the version can be incremented only by 1 during update operations. In addition, the version will be automatically incremented by 1 when undergoing Rich Media creative merging. Applicable to all creative types.
    int32 version = 60;
    // Description of the video ad. Applicable to the following creative types: all INSTREAM_VIDEO and all VPAID.
    string videoDescription = 61;
    // Creative video duration in seconds. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO, all RICH_MEDIA, and all VPAID.
    float videoDuration = 62;
}

message CreativeAsset {
    // Whether ActionScript3 is enabled for the flash asset. This is a read-only field. Applicable to the following creative type: FLASH_INPAGE. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.
    bool actionScript3 = 1;
    // Whether the video asset is active. This is a read-only field for VPAID_NON_LINEAR_VIDEO assets. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.
    bool active = 2;
    // Possible alignments for an asset. This is a read-only field. Applicable to the following creative types: RICH_MEDIA_DISPLAY_MULTI_FLOATING_INTERSTITIAL.
    enum CreativeAsset_Alignment {
        CREATIVEASSET_ALIGNMENT_ALIGNMENT_BOTTOM = 0;
        CREATIVEASSET_ALIGNMENT_ALIGNMENT_LEFT = 1;
        CREATIVEASSET_ALIGNMENT_ALIGNMENT_RIGHT = 2;
        CREATIVEASSET_ALIGNMENT_ALIGNMENT_TOP = 3;
    }
    CreativeAsset_Alignment alignment = 3;
    // Artwork type of rich media creative. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.
    enum CreativeAsset_ArtworkType {
        CREATIVEASSET_ARTWORKTYPE_ARTWORK_TYPE_FLASH = 0;
        CREATIVEASSET_ARTWORKTYPE_ARTWORK_TYPE_HTML5 = 1;
        CREATIVEASSET_ARTWORKTYPE_ARTWORK_TYPE_IMAGE = 2;
        CREATIVEASSET_ARTWORKTYPE_ARTWORK_TYPE_MIXED = 3;
    }
    CreativeAsset_ArtworkType artworkType = 4;
    // Identifier of this asset. This is the same identifier returned during creative asset insert operation. This is a required field. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT.
    CreativeAssetId assetIdentifier = 5;
    // Exit event configured for the backup image. Applicable to the following creative types: all RICH_MEDIA.
    CreativeCustomEvent backupImageExit = 6;
    // Detected bit-rate for video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.
    int32 bitRate = 7;
    // Rich media child asset type. This is a read-only field. Applicable to the following creative types: all VPAID.
    enum CreativeAsset_ChildAssetType {
        CREATIVEASSET_CHILDASSETTYPE_CHILD_ASSET_TYPE_DATA = 0;
        CREATIVEASSET_CHILDASSETTYPE_CHILD_ASSET_TYPE_FLASH = 1;
        CREATIVEASSET_CHILDASSETTYPE_CHILD_ASSET_TYPE_IMAGE = 2;
        CREATIVEASSET_CHILDASSETTYPE_CHILD_ASSET_TYPE_VIDEO = 3;
    }
    CreativeAsset_ChildAssetType childAssetType = 8;
    // Size of an asset when collapsed. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA and all VPAID. Additionally, applicable to assets whose displayType is ASSET_DISPLAY_TYPE_EXPANDING or ASSET_DISPLAY_TYPE_PEEL_DOWN.
    Size collapsedSize = 9;
    // List of companion creatives assigned to an in-stream video creative asset. Acceptable values include IDs of existing flash and image creatives. Applicable to INSTREAM_VIDEO creative type with dynamicAssetSelection set to true.
    repeated string companionCreativeIds = 10;
    // Custom start time in seconds for making the asset visible. Applicable to the following creative types: all RICH_MEDIA. Value must be greater than or equal to 0.
    int32 customStartTimeValue = 11;
    // List of feature dependencies for the creative asset that are detected by DCM. Feature dependencies are features that a browser must be able to support in order to render your HTML5 creative correctly. This is a read-only, auto-generated field. Applicable to the following creative types: HTML5_BANNER. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.
    repeated string detectedFeatures = 12;
    // Type of rich media asset. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.
    enum CreativeAsset_DisplayType {
        CREATIVEASSET_DISPLAYTYPE_ASSET_DISPLAY_TYPE_BACKDROP = 0;
        CREATIVEASSET_DISPLAYTYPE_ASSET_DISPLAY_TYPE_EXPANDING = 1;
        CREATIVEASSET_DISPLAYTYPE_ASSET_DISPLAY_TYPE_FLASH_IN_FLASH = 2;
        CREATIVEASSET_DISPLAYTYPE_ASSET_DISPLAY_TYPE_FLASH_IN_FLASH_EXPANDING = 3;
        CREATIVEASSET_DISPLAYTYPE_ASSET_DISPLAY_TYPE_FLOATING = 4;
        CREATIVEASSET_DISPLAYTYPE_ASSET_DISPLAY_TYPE_INPAGE = 5;
        CREATIVEASSET_DISPLAYTYPE_ASSET_DISPLAY_TYPE_OVERLAY = 6;
        CREATIVEASSET_DISPLAYTYPE_ASSET_DISPLAY_TYPE_PEEL_DOWN = 7;
        CREATIVEASSET_DISPLAYTYPE_ASSET_DISPLAY_TYPE_VPAID_LINEAR = 8;
        CREATIVEASSET_DISPLAYTYPE_ASSET_DISPLAY_TYPE_VPAID_NON_LINEAR = 9;
    }
    CreativeAsset_DisplayType displayType = 13;
    // Duration in seconds for which an asset will be displayed. Applicable to the following creative types: INSTREAM_VIDEO and VPAID_LINEAR_VIDEO. Value must be greater than or equal to 1.
    int32 duration = 14;
    // Duration type for which an asset will be displayed. Applicable to the following creative types: all RICH_MEDIA.
    enum CreativeAsset_DurationType {
        CREATIVEASSET_DURATIONTYPE_ASSET_DURATION_TYPE_AUTO = 0;
        CREATIVEASSET_DURATIONTYPE_ASSET_DURATION_TYPE_CUSTOM = 1;
        CREATIVEASSET_DURATIONTYPE_ASSET_DURATION_TYPE_NONE = 2;
    }
    CreativeAsset_DurationType durationType = 15;
    // Detected expanded dimension for video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.
    Size expandedDimension = 16;
    // File size associated with this creative asset. This is a read-only field. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT.
    string fileSize = 17;
    // Flash version of the asset. This is a read-only field. Applicable to the following creative types: FLASH_INPAGE, all RICH_MEDIA, and all VPAID. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.
    int32 flashVersion = 18;
    // Whether to hide Flash objects flag for an asset. Applicable to the following creative types: all RICH_MEDIA.
    bool hideFlashObjects = 19;
    // Whether to hide selection boxes flag for an asset. Applicable to the following creative types: all RICH_MEDIA.
    bool hideSelectionBoxes = 20;
    // Whether the asset is horizontally locked. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.
    bool horizontallyLocked = 21;
    // Numeric ID of this creative asset. This is a required field and should not be modified. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT.
    string id = 22;
    // Dimension value for the ID of the asset. This is a read-only, auto-generated field.
    DimensionValue idDimensionValue = 23;
    // Detected MIME type for video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.
    string mimeType = 24;
    // Offset position for an asset in collapsed mode. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA and all VPAID. Additionally, only applicable to assets whose displayType is ASSET_DISPLAY_TYPE_EXPANDING or ASSET_DISPLAY_TYPE_PEEL_DOWN.
    OffsetPosition offset = 25;
    // Whether the backup asset is original or changed by the user in DCM. Applicable to the following creative types: all RICH_MEDIA.
    bool originalBackup = 26;
    // Offset position for an asset. Applicable to the following creative types: all RICH_MEDIA.
    OffsetPosition position = 27;
    // Offset left unit for an asset. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.
    enum CreativeAsset_PositionLeftUnit {
        CREATIVEASSET_POSITIONLEFTUNIT_OFFSET_UNIT_PERCENT = 0;
        CREATIVEASSET_POSITIONLEFTUNIT_OFFSET_UNIT_PIXEL = 1;
        CREATIVEASSET_POSITIONLEFTUNIT_OFFSET_UNIT_PIXEL_FROM_CENTER = 2;
    }
    CreativeAsset_PositionLeftUnit positionLeftUnit = 28;
    // Offset top unit for an asset. This is a read-only field if the asset displayType is ASSET_DISPLAY_TYPE_OVERLAY. Applicable to the following creative types: all RICH_MEDIA.
    enum CreativeAsset_PositionTopUnit {
        CREATIVEASSET_POSITIONTOPUNIT_OFFSET_UNIT_PERCENT = 0;
        CREATIVEASSET_POSITIONTOPUNIT_OFFSET_UNIT_PIXEL = 1;
        CREATIVEASSET_POSITIONTOPUNIT_OFFSET_UNIT_PIXEL_FROM_CENTER = 2;
    }
    CreativeAsset_PositionTopUnit positionTopUnit = 29;
    // Progressive URL for video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.
    string progressiveServingUrl = 30;
    // Whether the asset pushes down other content. Applicable to the following creative types: all RICH_MEDIA. Additionally, only applicable when the asset offsets are 0, the collapsedSize.width matches size.width, and the collapsedSize.height is less than size.height.
    bool pushdown = 31;
    // Pushdown duration in seconds for an asset. Applicable to the following creative types: all RICH_MEDIA.Additionally, only applicable when the asset pushdown field is true, the offsets are 0, the collapsedSize.width matches size.width, and the collapsedSize.height is less than size.height. Acceptable values are 0 to 9.99, inclusive.
    float pushdownDuration = 32;
    // Role of the asset in relation to creative. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT. This is a required field.
    // PRIMARY applies to DISPLAY, FLASH_INPAGE, HTML5_BANNER, IMAGE, DISPLAY_IMAGE_GALLERY, all RICH_MEDIA (which may contain multiple primary assets), and all VPAID creatives.
    // BACKUP_IMAGE applies to FLASH_INPAGE, HTML5_BANNER, all RICH_MEDIA, and all VPAID creatives. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.
    // ADDITIONAL_IMAGE and ADDITIONAL_FLASH apply to FLASH_INPAGE creatives.
    // OTHER refers to assets from sources other than DCM, such as Studio uploaded assets, applicable to all RICH_MEDIA and all VPAID creatives.
    // PARENT_VIDEO refers to videos uploaded by the user in DCM and is applicable to INSTREAM_VIDEO and VPAID_LINEAR_VIDEO creatives.
    // TRANSCODED_VIDEO refers to videos transcoded by DCM from PARENT_VIDEO assets and is applicable to INSTREAM_VIDEO and VPAID_LINEAR_VIDEO creatives.
    // ALTERNATE_VIDEO refers to the DCM representation of child asset videos from Studio, and is applicable to VPAID_LINEAR_VIDEO creatives. These cannot be added or removed within DCM.
    // For VPAID_LINEAR_VIDEO creatives, PARENT_VIDEO, TRANSCODED_VIDEO and ALTERNATE_VIDEO assets that are marked active serve as backup in case the VPAID creative cannot be served. Only PARENT_VIDEO assets can be added or removed for an INSTREAM_VIDEO or VPAID_LINEAR_VIDEO creative.
    enum CreativeAsset_Role {
        CREATIVEASSET_ROLE_ADDITIONAL_FLASH = 0;
        CREATIVEASSET_ROLE_ADDITIONAL_IMAGE = 1;
        CREATIVEASSET_ROLE_ALTERNATE_VIDEO = 2;
        CREATIVEASSET_ROLE_BACKUP_IMAGE = 3;
        CREATIVEASSET_ROLE_OTHER = 4;
        CREATIVEASSET_ROLE_PARENT_VIDEO = 5;
        CREATIVEASSET_ROLE_PRIMARY = 6;
        CREATIVEASSET_ROLE_TRANSCODED_VIDEO = 7;
    }
    CreativeAsset_Role role = 33;
    // Size associated with this creative asset. This is a required field when applicable; however for IMAGE and FLASH_INPAGE, creatives if left blank, this field will be automatically set using the actual size of the associated image asset. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, FLASH_INPAGE, HTML5_BANNER, IMAGE, and all RICH_MEDIA. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.
    Size size = 34;
    // Whether the asset is SSL-compliant. This is a read-only field. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT.
    bool sslCompliant = 35;
    // Initial wait time type before making the asset visible. Applicable to the following creative types: all RICH_MEDIA.
    enum CreativeAsset_StartTimeType {
        CREATIVEASSET_STARTTIMETYPE_ASSET_START_TIME_TYPE_CUSTOM = 0;
        CREATIVEASSET_STARTTIMETYPE_ASSET_START_TIME_TYPE_NONE = 1;
    }
    CreativeAsset_StartTimeType startTimeType = 36;
    // Streaming URL for video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.
    string streamingServingUrl = 37;
    // Whether the asset is transparent. Applicable to the following creative types: all RICH_MEDIA. Additionally, only applicable to HTML5 assets.
    bool transparency = 38;
    // Whether the asset is vertically locked. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.
    bool verticallyLocked = 39;
    // Detected video duration for video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.
    float videoDuration = 40;
    // Window mode options for flash assets. Applicable to the following creative types: FLASH_INPAGE, RICH_MEDIA_DISPLAY_EXPANDING, RICH_MEDIA_IM_EXPAND, RICH_MEDIA_DISPLAY_BANNER, and RICH_MEDIA_INPAGE_FLOATING.
    enum CreativeAsset_WindowMode {
        CREATIVEASSET_WINDOWMODE_OPAQUE = 0;
        CREATIVEASSET_WINDOWMODE_TRANSPARENT = 1;
        CREATIVEASSET_WINDOWMODE_WINDOW = 2;
    }
    CreativeAsset_WindowMode windowMode = 41;
    // zIndex value of an asset. Applicable to the following creative types: all RICH_MEDIA.Additionally, only applicable to assets whose displayType is NOT one of the following types: ASSET_DISPLAY_TYPE_INPAGE or ASSET_DISPLAY_TYPE_OVERLAY. Acceptable values are -999999999 to 999999999, inclusive.
    int32 zIndex = 42;
    // File name of zip file. This is a read-only field. Applicable to the following creative types: HTML5_BANNER.
    string zipFilename = 43;
    // Size of zip file. This is a read-only field. Applicable to the following creative types: HTML5_BANNER.
    string zipFilesize = 44;
}

message CreativeAssetId {
    // Name of the creative asset. This is a required field while inserting an asset. After insertion, this assetIdentifier is used to identify the uploaded asset. Characters in the name must be alphanumeric or one of the following: ".-_ ". Spaces are allowed.
    string name = 1;
    // Type of asset to upload. This is a required field. FLASH and IMAGE are no longer supported for new uploads. All image assets should use HTML_IMAGE.
    enum CreativeAssetId_Type {
        CREATIVEASSETID_TYPE_FLASH = 0;
        CREATIVEASSETID_TYPE_HTML = 1;
        CREATIVEASSETID_TYPE_HTML_IMAGE = 2;
        CREATIVEASSETID_TYPE_IMAGE = 3;
        CREATIVEASSETID_TYPE_VIDEO = 4;
    }
    CreativeAssetId_Type type = 2;
}

message CreativeAssetMetadata {
    // ID of the creative asset. This is a required field.
    CreativeAssetId assetIdentifier = 1;
    // List of detected click tags for assets. This is a read-only auto-generated field.
    repeated ClickTag clickTags = 2;
    // List of feature dependencies for the creative asset that are detected by DCM. Feature dependencies are features that a browser must be able to support in order to render your HTML5 creative correctly. This is a read-only, auto-generated field.
    repeated string detectedFeatures = 3;
    // Numeric ID of the asset. This is a read-only, auto-generated field.
    string id = 4;
    // Dimension value for the numeric ID of the asset. This is a read-only, auto-generated field.
    DimensionValue idDimensionValue = 5;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#creativeAssetMetadata".
    string kind = 6;
    // Rules validated during code generation that generated a warning. This is a read-only, auto-generated field.
    // 
    // Possible values are:
    // - "ADMOB_REFERENCED"
    // - "ASSET_FORMAT_UNSUPPORTED_DCM"
    // - "ASSET_INVALID"
    // - "CLICK_TAG_HARD_CODED"
    // - "CLICK_TAG_INVALID"
    // - "CLICK_TAG_IN_GWD"
    // - "CLICK_TAG_MISSING"
    // - "CLICK_TAG_MORE_THAN_ONE"
    // - "CLICK_TAG_NON_TOP_LEVEL"
    // - "COMPONENT_UNSUPPORTED_DCM"
    // - "ENABLER_UNSUPPORTED_METHOD_DCM"
    // - "EXTERNAL_FILE_REFERENCED"
    // - "FILE_DETAIL_EMPTY"
    // - "FILE_TYPE_INVALID"
    // - "GWD_PROPERTIES_INVALID"
    // - "HTML5_FEATURE_UNSUPPORTED"
    // - "LINKED_FILE_NOT_FOUND"
    // - "MAX_FLASH_VERSION_11"
    // - "MRAID_REFERENCED"
    // - "NOT_SSL_COMPLIANT"
    // - "ORPHANED_ASSET"
    // - "PRIMARY_HTML_MISSING"
    // - "SVG_INVALID"
    // - "ZIP_INVALID"
    repeated string warnedValidationRules = 7;
}

message CreativeAssetSelection {
    // A creativeAssets[].id. This should refer to one of the parent assets in this creative, and will be served if none of the rules match. This is a required field.
    string defaultAssetId = 1;
    // Rules determine which asset will be served to a viewer. Rules will be evaluated in the order in which they are stored in this list. This list must contain at least one rule. Applicable to INSTREAM_VIDEO creatives.
    repeated Rule rules = 2;
}

message CreativeAssignment {
    // Whether this creative assignment is active. When true, the creative will be included in the ad's rotation.
    bool active = 1;
    // Whether applicable event tags should fire when this creative assignment is rendered. If this value is unset when the ad is inserted or updated, it will default to true for all creative types EXCEPT for INTERNAL_REDIRECT, INTERSTITIAL_INTERNAL_REDIRECT, and INSTREAM_VIDEO.
    bool applyEventTags = 2;
    // Click-through URL of the creative assignment.
    ClickThroughUrl clickThroughUrl = 3;
    // Companion creative overrides for this creative assignment. Applicable to video ads.
    repeated CompanionClickThroughOverride companionCreativeOverrides = 4;
    // Creative group assignments for this creative assignment. Only one assignment per creative group number is allowed for a maximum of two assignments.
    repeated CreativeGroupAssignment creativeGroupAssignments = 5;
    // ID of the creative to be assigned. This is a required field.
    string creativeId = 6;
    // Dimension value for the ID of the creative. This is a read-only, auto-generated field.
    DimensionValue creativeIdDimensionValue = 7;
    // Date and time that the assigned creative should stop serving. Must be later than the start time.
    string endTime = 8;
    // Rich media exit overrides for this creative assignment.
    // Applicable when the creative type is any of the following:
    // - DISPLAY
    // - RICH_MEDIA_INPAGE
    // - RICH_MEDIA_INPAGE_FLOATING
    // - RICH_MEDIA_IM_EXPAND
    // - RICH_MEDIA_EXPANDING
    // - RICH_MEDIA_INTERSTITIAL_FLOAT
    // - RICH_MEDIA_MOBILE_IN_APP
    // - RICH_MEDIA_MULTI_FLOATING
    // - RICH_MEDIA_PEEL_DOWN
    // - VPAID_LINEAR
    // - VPAID_NON_LINEAR
    repeated RichMediaExitOverride richMediaExitOverrides = 9;
    // Sequence number of the creative assignment, applicable when the rotation type is CREATIVE_ROTATION_TYPE_SEQUENTIAL. Acceptable values are 1 to 65535, inclusive.
    int32 sequence = 10;
    // Whether the creative to be assigned is SSL-compliant. This is a read-only field that is auto-generated when the ad is inserted or updated.
    bool sslCompliant = 11;
    // Date and time that the assigned creative should start serving.
    string startTime = 12;
    // Weight of the creative assignment, applicable when the rotation type is CREATIVE_ROTATION_TYPE_RANDOM. Value must be greater than or equal to 1.
    int32 weight = 13;
}

message CreativeCustomEvent {
    // Unique ID of this event used by DDM Reporting and Data Transfer. This is a read-only field.
    string advertiserCustomEventId = 1;
    // User-entered name for the event.
    string advertiserCustomEventName = 2;
    // Type of the event. This is a read-only field.
    enum CreativeCustomEvent_AdvertiserCustomEventType {
        CREATIVECUSTOMEVENT_ADVERTISERCUSTOMEVENTTYPE_ADVERTISER_EVENT_COUNTER = 0;
        CREATIVECUSTOMEVENT_ADVERTISERCUSTOMEVENTTYPE_ADVERTISER_EVENT_EXIT = 1;
        CREATIVECUSTOMEVENT_ADVERTISERCUSTOMEVENTTYPE_ADVERTISER_EVENT_TIMER = 2;
    }
    CreativeCustomEvent_AdvertiserCustomEventType advertiserCustomEventType = 3;
    // Artwork label column, used to link events in DCM back to events in Studio. This is a required field and should not be modified after insertion.
    string artworkLabel = 4;
    // Artwork type used by the creative.This is a read-only field.
    enum CreativeCustomEvent_ArtworkType {
        CREATIVECUSTOMEVENT_ARTWORKTYPE_ARTWORK_TYPE_FLASH = 0;
        CREATIVECUSTOMEVENT_ARTWORKTYPE_ARTWORK_TYPE_HTML5 = 1;
        CREATIVECUSTOMEVENT_ARTWORKTYPE_ARTWORK_TYPE_IMAGE = 2;
        CREATIVECUSTOMEVENT_ARTWORKTYPE_ARTWORK_TYPE_MIXED = 3;
    }
    CreativeCustomEvent_ArtworkType artworkType = 5;
    // Exit URL of the event. This field is used only for exit events.
    string exitUrl = 6;
    // ID of this event. This is a required field and should not be modified after insertion.
    string id = 7;
    // Properties for rich media popup windows. This field is used only for exit events.
    PopupWindowProperties popupWindowProperties = 8;
    // Target type used by the event.
    enum CreativeCustomEvent_TargetType {
        CREATIVECUSTOMEVENT_TARGETTYPE_TARGET_BLANK = 0;
        CREATIVECUSTOMEVENT_TARGETTYPE_TARGET_PARENT = 1;
        CREATIVECUSTOMEVENT_TARGETTYPE_TARGET_POPUP = 2;
        CREATIVECUSTOMEVENT_TARGETTYPE_TARGET_SELF = 3;
        CREATIVECUSTOMEVENT_TARGETTYPE_TARGET_TOP = 4;
    }
    CreativeCustomEvent_TargetType targetType = 9;
    // Video reporting ID, used to differentiate multiple videos in a single creative. This is a read-only field.
    string videoReportingId = 10;
}

message CreativeField {
    // Account ID of this creative field. This is a read-only field that can be left blank.
    string accountId = 1;
    // Advertiser ID of this creative field. This is a required field on insertion.
    string advertiserId = 2;
    // Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.
    DimensionValue advertiserIdDimensionValue = 3;
    // ID of this creative field. This is a read-only, auto-generated field.
    string id = 4;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#creativeField".
    string kind = 5;
    // Name of this creative field. This is a required field and must be less than 256 characters long and unique among creative fields of the same advertiser.
    string name = 6;
    // Subaccount ID of this creative field. This is a read-only field that can be left blank.
    string subaccountId = 7;
}

message CreativeFieldAssignment {
    // ID of the creative field.
    string creativeFieldId = 1;
    // ID of the creative field value.
    string creativeFieldValueId = 2;
}

message CreativeFieldValue {
    // ID of this creative field value. This is a read-only, auto-generated field.
    string id = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#creativeFieldValue".
    string kind = 2;
    // Value of this creative field value. It needs to be less than 256 characters in length and unique per creative field.
    string value = 3;
}

message CreativeFieldValuesListResponse {
    // Creative field value collection.
    repeated CreativeFieldValue creativeFieldValues = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#creativeFieldValuesListResponse".
    string kind = 2;
    // Pagination token to be used for the next list operation.
    string nextPageToken = 3;
}

message CreativeFieldsListResponse {
    // Creative field collection.
    repeated CreativeField creativeFields = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#creativeFieldsListResponse".
    string kind = 2;
    // Pagination token to be used for the next list operation.
    string nextPageToken = 3;
}

message CreativeGroup {
    // Account ID of this creative group. This is a read-only field that can be left blank.
    string accountId = 1;
    // Advertiser ID of this creative group. This is a required field on insertion.
    string advertiserId = 2;
    // Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.
    DimensionValue advertiserIdDimensionValue = 3;
    // Subgroup of the creative group. Assign your creative groups to a subgroup in order to filter or manage them more easily. This field is required on insertion and is read-only after insertion. Acceptable values are 1 to 2, inclusive.
    int32 groupNumber = 4;
    // ID of this creative group. This is a read-only, auto-generated field.
    string id = 5;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#creativeGroup".
    string kind = 6;
    // Name of this creative group. This is a required field and must be less than 256 characters long and unique among creative groups of the same advertiser.
    string name = 7;
    // Subaccount ID of this creative group. This is a read-only field that can be left blank.
    string subaccountId = 8;
}

message CreativeGroupAssignment {
    // ID of the creative group to be assigned.
    string creativeGroupId = 1;
    // Creative group number of the creative group assignment.
    enum CreativeGroupAssignment_CreativeGroupNumber {
        CREATIVEGROUPASSIGNMENT_CREATIVEGROUPNUMBER_CREATIVE_GROUP_ONE = 0;
        CREATIVEGROUPASSIGNMENT_CREATIVEGROUPNUMBER_CREATIVE_GROUP_TWO = 1;
    }
    CreativeGroupAssignment_CreativeGroupNumber creativeGroupNumber = 2;
}

message CreativeGroupsListResponse {
    // Creative group collection.
    repeated CreativeGroup creativeGroups = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#creativeGroupsListResponse".
    string kind = 2;
    // Pagination token to be used for the next list operation.
    string nextPageToken = 3;
}

message CreativeOptimizationConfiguration {
    // ID of this creative optimization config. This field is auto-generated when the campaign is inserted or updated. It can be null for existing campaigns.
    string id = 1;
    // Name of this creative optimization config. This is a required field and must be less than 129 characters long.
    string name = 2;
    // List of optimization activities associated with this configuration.
    repeated OptimizationActivity optimizationActivitys = 3;
    // Optimization model for this configuration.
    enum CreativeOptimizationConfiguration_OptimizationModel {
        CREATIVEOPTIMIZATIONCONFIGURATION_OPTIMIZATIONMODEL_CLICK = 0;
        CREATIVEOPTIMIZATIONCONFIGURATION_OPTIMIZATIONMODEL_POST_CLICK = 1;
        CREATIVEOPTIMIZATIONCONFIGURATION_OPTIMIZATIONMODEL_POST_CLICK_AND_IMPRESSION = 2;
        CREATIVEOPTIMIZATIONCONFIGURATION_OPTIMIZATIONMODEL_POST_IMPRESSION = 3;
        CREATIVEOPTIMIZATIONCONFIGURATION_OPTIMIZATIONMODEL_VIDEO_COMPLETION = 4;
    }
    CreativeOptimizationConfiguration_OptimizationModel optimizationModel = 4;
}

message CreativeRotation {
    // Creative assignments in this creative rotation.
    repeated CreativeAssignment creativeAssignments = 1;
    // Creative optimization configuration that is used by this ad. It should refer to one of the existing optimization configurations in the ad's campaign. If it is unset or set to 0, then the campaign's default optimization configuration will be used for this ad.
    string creativeOptimizationConfigurationId = 2;
    // Type of creative rotation. Can be used to specify whether to use sequential or random rotation.
    enum CreativeRotation_Type {
        CREATIVEROTATION_TYPE_CREATIVE_ROTATION_TYPE_RANDOM = 0;
        CREATIVEROTATION_TYPE_CREATIVE_ROTATION_TYPE_SEQUENTIAL = 1;
    }
    CreativeRotation_Type type = 3;
    // Strategy for calculating weights. Used with CREATIVE_ROTATION_TYPE_RANDOM.
    enum CreativeRotation_WeightCalculationStrategy {
        CREATIVEROTATION_WEIGHTCALCULATIONSTRATEGY_WEIGHT_STRATEGY_CUSTOM = 0;
        CREATIVEROTATION_WEIGHTCALCULATIONSTRATEGY_WEIGHT_STRATEGY_EQUAL = 1;
        CREATIVEROTATION_WEIGHTCALCULATIONSTRATEGY_WEIGHT_STRATEGY_HIGHEST_CTR = 2;
        CREATIVEROTATION_WEIGHTCALCULATIONSTRATEGY_WEIGHT_STRATEGY_OPTIMIZED = 3;
    }
    CreativeRotation_WeightCalculationStrategy weightCalculationStrategy = 4;
}

message CreativeSettings {
    // Header text for iFrames for this site. Must be less than or equal to 2000 characters long.
    string iFrameFooter = 1;
    // Header text for iFrames for this site. Must be less than or equal to 2000 characters long.
    string iFrameHeader = 2;
}

message CreativesListResponse {
    // Creative collection.
    repeated Creative creatives = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#creativesListResponse".
    string kind = 2;
    // Pagination token to be used for the next list operation.
    string nextPageToken = 3;
}

message CrossDimensionReachReportCompatibleFields {
    // Dimensions which are compatible to be selected in the "breakdown" section of the report.
    repeated Dimension breakdown = 1;
    // Dimensions which are compatible to be selected in the "dimensionFilters" section of the report.
    repeated Dimension dimensionFilters = 2;
    // The kind of resource this is, in this case dfareporting#crossDimensionReachReportCompatibleFields.
    string kind = 3;
    // Metrics which are compatible to be selected in the "metricNames" section of the report.
    repeated Metric metrics = 4;
    // Metrics which are compatible to be selected in the "overlapMetricNames" section of the report.
    repeated Metric overlapMetrics = 5;
}

message CustomFloodlightVariable {
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#customFloodlightVariable".
    string kind = 1;
    // The type of custom floodlight variable to supply a value for. These map to the "u[1-20]=" in the tags.
    enum CustomFloodlightVariable_Type {
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U1 = 0;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U10 = 1;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U100 = 2;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U11 = 3;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U12 = 4;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U13 = 5;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U14 = 6;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U15 = 7;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U16 = 8;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U17 = 9;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U18 = 10;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U19 = 11;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U2 = 12;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U20 = 13;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U21 = 14;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U22 = 15;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U23 = 16;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U24 = 17;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U25 = 18;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U26 = 19;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U27 = 20;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U28 = 21;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U29 = 22;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U3 = 23;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U30 = 24;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U31 = 25;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U32 = 26;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U33 = 27;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U34 = 28;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U35 = 29;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U36 = 30;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U37 = 31;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U38 = 32;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U39 = 33;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U4 = 34;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U40 = 35;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U41 = 36;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U42 = 37;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U43 = 38;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U44 = 39;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U45 = 40;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U46 = 41;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U47 = 42;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U48 = 43;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U49 = 44;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U5 = 45;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U50 = 46;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U51 = 47;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U52 = 48;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U53 = 49;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U54 = 50;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U55 = 51;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U56 = 52;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U57 = 53;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U58 = 54;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U59 = 55;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U6 = 56;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U60 = 57;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U61 = 58;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U62 = 59;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U63 = 60;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U64 = 61;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U65 = 62;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U66 = 63;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U67 = 64;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U68 = 65;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U69 = 66;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U7 = 67;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U70 = 68;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U71 = 69;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U72 = 70;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U73 = 71;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U74 = 72;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U75 = 73;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U76 = 74;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U77 = 75;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U78 = 76;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U79 = 77;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U8 = 78;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U80 = 79;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U81 = 80;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U82 = 81;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U83 = 82;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U84 = 83;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U85 = 84;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U86 = 85;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U87 = 86;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U88 = 87;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U89 = 88;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U9 = 89;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U90 = 90;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U91 = 91;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U92 = 92;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U93 = 93;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U94 = 94;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U95 = 95;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U96 = 96;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U97 = 97;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U98 = 98;
        CUSTOMFLOODLIGHTVARIABLE_TYPE_U99 = 99;
    }
    CustomFloodlightVariable_Type type = 2;
    // The value of the custom floodlight variable. The length of string must not exceed 50 characters.
    string value = 3;
}

message CustomRichMediaEvents {
    // List of custom rich media event IDs. Dimension values must be all of type dfa:richMediaEventTypeIdAndName.
    repeated DimensionValue filteredEventIds = 1;
    // The kind of resource this is, in this case dfareporting#customRichMediaEvents.
    string kind = 2;
}

message DateRange {
    // The end date of the date range, inclusive. A string of the format: "yyyy-MM-dd".
    string endDate = 1;
    // The kind of resource this is, in this case dfareporting#dateRange.
    string kind = 2;
    // The date range relative to the date of when the report is run.
    enum DateRange_RelativeDateRange {
        DATERANGE_RELATIVEDATERANGE_LAST_24_MONTHS = 0;
        DATERANGE_RELATIVEDATERANGE_LAST_30_DAYS = 1;
        DATERANGE_RELATIVEDATERANGE_LAST_365_DAYS = 2;
        DATERANGE_RELATIVEDATERANGE_LAST_7_DAYS = 3;
        DATERANGE_RELATIVEDATERANGE_LAST_90_DAYS = 4;
        DATERANGE_RELATIVEDATERANGE_MONTH_TO_DATE = 5;
        DATERANGE_RELATIVEDATERANGE_PREVIOUS_MONTH = 6;
        DATERANGE_RELATIVEDATERANGE_PREVIOUS_QUARTER = 7;
        DATERANGE_RELATIVEDATERANGE_PREVIOUS_WEEK = 8;
        DATERANGE_RELATIVEDATERANGE_PREVIOUS_YEAR = 9;
        DATERANGE_RELATIVEDATERANGE_QUARTER_TO_DATE = 10;
        DATERANGE_RELATIVEDATERANGE_TODAY = 11;
        DATERANGE_RELATIVEDATERANGE_WEEK_TO_DATE = 12;
        DATERANGE_RELATIVEDATERANGE_YEAR_TO_DATE = 13;
        DATERANGE_RELATIVEDATERANGE_YESTERDAY = 14;
    }
    DateRange_RelativeDateRange relativeDateRange = 3;
    // The start date of the date range, inclusive. A string of the format: "yyyy-MM-dd".
    string startDate = 4;
}

message DayPartTargeting {
    // Days of the week when the ad will serve.
    // 
    // Acceptable values are:
    // - "SUNDAY"
    // - "MONDAY"
    // - "TUESDAY"
    // - "WEDNESDAY"
    // - "THURSDAY"
    // - "FRIDAY"
    // - "SATURDAY"
    repeated string daysOfWeek = 1;
    // Hours of the day when the ad will serve, where 0 is midnight to 1 AM and 23 is 11 PM to midnight. Can be specified with days of week, in which case the ad would serve during these hours on the specified days. For example if Monday, Wednesday, Friday are the days of week specified and 9-10am, 3-5pm (hours 9, 15, and 16) is specified, the ad would serve Monday, Wednesdays, and Fridays at 9-10am and 3-5pm. Acceptable values are 0 to 23, inclusive.
    repeated int32 hoursOfDay = 2;
    // Whether or not to use the user's local time. If false, the America/New York time zone applies.
    bool userLocalTime = 3;
}

message DefaultClickThroughEventTagProperties {
    // ID of the click-through event tag to apply to all ads in this entity's scope.
    string defaultClickThroughEventTagId = 1;
    // Whether this entity should override the inherited default click-through event tag with its own defined value.
    bool overrideInheritedEventTag = 2;
}

message DeliverySchedule {
    // Limit on the number of times an individual user can be served the ad within a specified period of time.
    FrequencyCap frequencyCap = 1;
    // Whether or not hard cutoff is enabled. If true, the ad will not serve after the end date and time. Otherwise the ad will continue to be served until it has reached its delivery goals.
    bool hardCutoff = 2;
    // Impression ratio for this ad. This ratio determines how often each ad is served relative to the others. For example, if ad A has an impression ratio of 1 and ad B has an impression ratio of 3, then DCM will serve ad B three times as often as ad A. Acceptable values are 1 to 10, inclusive.
    string impressionRatio = 3;
    // Serving priority of an ad, with respect to other ads. The lower the priority number, the greater the priority with which it is served.
    enum DeliverySchedule_Priority {
        DELIVERYSCHEDULE_PRIORITY_AD_PRIORITY_01 = 0;
        DELIVERYSCHEDULE_PRIORITY_AD_PRIORITY_02 = 1;
        DELIVERYSCHEDULE_PRIORITY_AD_PRIORITY_03 = 2;
        DELIVERYSCHEDULE_PRIORITY_AD_PRIORITY_04 = 3;
        DELIVERYSCHEDULE_PRIORITY_AD_PRIORITY_05 = 4;
        DELIVERYSCHEDULE_PRIORITY_AD_PRIORITY_06 = 5;
        DELIVERYSCHEDULE_PRIORITY_AD_PRIORITY_07 = 6;
        DELIVERYSCHEDULE_PRIORITY_AD_PRIORITY_08 = 7;
        DELIVERYSCHEDULE_PRIORITY_AD_PRIORITY_09 = 8;
        DELIVERYSCHEDULE_PRIORITY_AD_PRIORITY_10 = 9;
        DELIVERYSCHEDULE_PRIORITY_AD_PRIORITY_11 = 10;
        DELIVERYSCHEDULE_PRIORITY_AD_PRIORITY_12 = 11;
        DELIVERYSCHEDULE_PRIORITY_AD_PRIORITY_13 = 12;
        DELIVERYSCHEDULE_PRIORITY_AD_PRIORITY_14 = 13;
        DELIVERYSCHEDULE_PRIORITY_AD_PRIORITY_15 = 14;
        DELIVERYSCHEDULE_PRIORITY_AD_PRIORITY_16 = 15;
    }
    DeliverySchedule_Priority priority = 4;
}

message DfpSettings {
    // DFP network code for this directory site.
    string dfp_network_code = 1;
    // DFP network name for this directory site.
    string dfp_network_name = 2;
    // Whether this directory site accepts programmatic placements.
    bool programmaticPlacementAccepted = 3;
    // Whether this directory site accepts publisher-paid tags.
    bool pubPaidPlacementAccepted = 4;
    // Whether this directory site is available only via DoubleClick Publisher Portal.
    bool publisherPortalOnly = 5;
}

message Dimension {
    // The kind of resource this is, in this case dfareporting#dimension.
    string kind = 1;
    // The dimension name, e.g. dfa:advertiser
    string name = 2;
}

message DimensionFilter {
    // The name of the dimension to filter.
    string dimensionName = 1;
    // The kind of resource this is, in this case dfareporting#dimensionFilter.
    string kind = 2;
    // The value of the dimension to filter.
    string value = 3;
}

message DimensionValue {
    // The name of the dimension.
    string dimensionName = 1;
    // The eTag of this response for caching purposes.
    string etag = 2;
    // The ID associated with the value if available.
    string id = 3;
    // The kind of resource this is, in this case dfareporting#dimensionValue.
    string kind = 4;
    // Determines how the 'value' field is matched when filtering. If not specified, defaults to EXACT. If set to WILDCARD_EXPRESSION, '*' is allowed as a placeholder for variable length character sequences, and it can be escaped with a backslash. Note, only paid search dimensions ('dfa:paidSearch*') allow a matchType other than EXACT.
    enum DimensionValue_MatchType {
        DIMENSIONVALUE_MATCHTYPE_BEGINS_WITH = 0;
        DIMENSIONVALUE_MATCHTYPE_CONTAINS = 1;
        DIMENSIONVALUE_MATCHTYPE_EXACT = 2;
        DIMENSIONVALUE_MATCHTYPE_WILDCARD_EXPRESSION = 3;
    }
    DimensionValue_MatchType matchType = 5;
    // The value of the dimension.
    string value = 6;
}

message DimensionValueList {
    // The eTag of this response for caching purposes.
    string etag = 1;
    // The dimension values returned in this response.
    repeated DimensionValue items = 2;
    // The kind of list this is, in this case dfareporting#dimensionValueList.
    string kind = 3;
    // Continuation token used to page through dimension values. To retrieve the next page of results, set the next request's "pageToken" to the value of this field. The page token is only valid for a limited amount of time and should not be persisted.
    string nextPageToken = 4;
}

message DimensionValueRequest {
    // The name of the dimension for which values should be requested.
    string dimensionName = 1;
    // The end date of the date range for which to retrieve dimension values. A string of the format "yyyy-MM-dd".
    string endDate = 2;
    // The list of filters by which to filter values. The filters are ANDed.
    repeated DimensionFilter filters = 3;
    // The kind of request this is, in this case dfareporting#dimensionValueRequest.
    string kind = 4;
    // The start date of the date range for which to retrieve dimension values. A string of the format "yyyy-MM-dd".
    string startDate = 5;
}

message DirectorySite {
    // Whether this directory site is active.
    bool active = 1;
    // Directory site contacts.
    repeated DirectorySiteContactAssignment contactAssignments = 2;
    // Country ID of this directory site. This is a read-only field.
    string countryId = 3;
    // Currency ID of this directory site. This is a read-only field.
    // Possible values are:
    // - "1" for USD
    // - "2" for GBP
    // - "3" for ESP
    // - "4" for SEK
    // - "5" for CAD
    // - "6" for JPY
    // - "7" for DEM
    // - "8" for AUD
    // - "9" for FRF
    // - "10" for ITL
    // - "11" for DKK
    // - "12" for NOK
    // - "13" for FIM
    // - "14" for ZAR
    // - "15" for IEP
    // - "16" for NLG
    // - "17" for EUR
    // - "18" for KRW
    // - "19" for TWD
    // - "20" for SGD
    // - "21" for CNY
    // - "22" for HKD
    // - "23" for NZD
    // - "24" for MYR
    // - "25" for BRL
    // - "26" for PTE
    // - "27" for MXP
    // - "28" for CLP
    // - "29" for TRY
    // - "30" for ARS
    // - "31" for PEN
    // - "32" for ILS
    // - "33" for CHF
    // - "34" for VEF
    // - "35" for COP
    // - "36" for GTQ
    // - "37" for PLN
    // - "39" for INR
    // - "40" for THB
    // - "41" for IDR
    // - "42" for CZK
    // - "43" for RON
    // - "44" for HUF
    // - "45" for RUB
    // - "46" for AED
    // - "47" for BGN
    // - "48" for HRK
    // - "49" for MXN
    string currencyId = 4;
    // Description of this directory site. This is a read-only field.
    string description = 5;
    // ID of this directory site. This is a read-only, auto-generated field.
    string id = 6;
    // Dimension value for the ID of this directory site. This is a read-only, auto-generated field.
    DimensionValue idDimensionValue = 7;
    // Tag types for regular placements.
    // 
    // Acceptable values are:
    // - "STANDARD"
    // - "IFRAME_JAVASCRIPT_INPAGE"
    // - "INTERNAL_REDIRECT_INPAGE"
    // - "JAVASCRIPT_INPAGE"
    repeated string inpageTagFormats = 8;
    // Tag types for interstitial placements.
    // 
    // Acceptable values are:
    // - "IFRAME_JAVASCRIPT_INTERSTITIAL"
    // - "INTERNAL_REDIRECT_INTERSTITIAL"
    // - "JAVASCRIPT_INTERSTITIAL"
    repeated string interstitialTagFormats = 9;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#directorySite".
    string kind = 10;
    // Name of this directory site.
    string name = 11;
    // Parent directory site ID.
    string parentId = 12;
    // Directory site settings.
    DirectorySiteSettings settings = 13;
    // URL of this directory site.
    string url = 14;
}

message DirectorySiteContact {
    // Address of this directory site contact.
    string address = 1;
    // Email address of this directory site contact.
    string email = 2;
    // First name of this directory site contact.
    string firstName = 3;
    // ID of this directory site contact. This is a read-only, auto-generated field.
    string id = 4;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#directorySiteContact".
    string kind = 5;
    // Last name of this directory site contact.
    string lastName = 6;
    // Phone number of this directory site contact.
    string phone = 7;
    // Directory site contact role.
    enum DirectorySiteContact_Role {
        DIRECTORYSITECONTACT_ROLE_ADMIN = 0;
        DIRECTORYSITECONTACT_ROLE_EDIT = 1;
        DIRECTORYSITECONTACT_ROLE_VIEW = 2;
    }
    DirectorySiteContact_Role role = 8;
    // Title or designation of this directory site contact.
    string title = 9;
    // Directory site contact type.
    enum DirectorySiteContact_Type {
        DIRECTORYSITECONTACT_TYPE_BILLING = 0;
        DIRECTORYSITECONTACT_TYPE_OTHER = 1;
        DIRECTORYSITECONTACT_TYPE_SALES = 2;
        DIRECTORYSITECONTACT_TYPE_TECHNICAL = 3;
    }
    DirectorySiteContact_Type type = 10;
}

message DirectorySiteContactAssignment {
    // ID of this directory site contact. This is a read-only, auto-generated field.
    string contactId = 1;
    // Visibility of this directory site contact assignment. When set to PUBLIC this contact assignment is visible to all account and agency users; when set to PRIVATE it is visible only to the site.
    enum DirectorySiteContactAssignment_Visibility {
        DIRECTORYSITECONTACTASSIGNMENT_VISIBILITY_PRIVATE = 0;
        DIRECTORYSITECONTACTASSIGNMENT_VISIBILITY_PUBLIC = 1;
    }
    DirectorySiteContactAssignment_Visibility visibility = 2;
}

message DirectorySiteContactsListResponse {
    // Directory site contact collection
    repeated DirectorySiteContact directorySiteContacts = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#directorySiteContactsListResponse".
    string kind = 2;
    // Pagination token to be used for the next list operation.
    string nextPageToken = 3;
}

message DirectorySiteSettings {
    // Whether this directory site has disabled active view creatives.
    bool activeViewOptOut = 1;
    // Directory site DFP settings.
    DfpSettings dfp_settings = 2;
    // Whether this site accepts in-stream video ads.
    bool instream_video_placement_accepted = 3;
    // Whether this site accepts interstitial ads.
    bool interstitialPlacementAccepted = 4;
    // Whether this directory site has disabled Nielsen OCR reach ratings.
    bool nielsenOcrOptOut = 5;
    // Whether this directory site has disabled generation of Verification ins tags.
    bool verificationTagOptOut = 6;
    // Whether this directory site has disabled active view for in-stream video creatives. This is a read-only field.
    bool videoActiveViewOptOut = 7;
}

message DirectorySitesListResponse {
    // Directory site collection.
    repeated DirectorySite directorySites = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#directorySitesListResponse".
    string kind = 2;
    // Pagination token to be used for the next list operation.
    string nextPageToken = 3;
}

message DynamicTargetingKey {
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#dynamicTargetingKey".
    string kind = 1;
    // Name of this dynamic targeting key. This is a required field. Must be less than 256 characters long and cannot contain commas. All characters are converted to lowercase.
    string name = 2;
    // ID of the object of this dynamic targeting key. This is a required field.
    string objectId = 3;
    // Type of the object of this dynamic targeting key. This is a required field.
    enum DynamicTargetingKey_ObjectType {
        DYNAMICTARGETINGKEY_OBJECTTYPE_OBJECT_AD = 0;
        DYNAMICTARGETINGKEY_OBJECTTYPE_OBJECT_ADVERTISER = 1;
        DYNAMICTARGETINGKEY_OBJECTTYPE_OBJECT_CREATIVE = 2;
        DYNAMICTARGETINGKEY_OBJECTTYPE_OBJECT_PLACEMENT = 3;
    }
    DynamicTargetingKey_ObjectType objectType = 4;
}

message DynamicTargetingKeysListResponse {
    // Dynamic targeting key collection.
    repeated DynamicTargetingKey dynamicTargetingKeys = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#dynamicTargetingKeysListResponse".
    string kind = 2;
}

message EncryptionInfo {
    // The encryption entity ID. This should match the encryption configuration for ad serving or Data Transfer.
    string encryptionEntityId = 1;
    // The encryption entity type. This should match the encryption configuration for ad serving or Data Transfer.
    enum EncryptionInfo_EncryptionEntityType {
        ENCRYPTIONINFO_ENCRYPTIONENTITYTYPE_ADWORDS_CUSTOMER = 0;
        ENCRYPTIONINFO_ENCRYPTIONENTITYTYPE_DBM_ADVERTISER = 1;
        ENCRYPTIONINFO_ENCRYPTIONENTITYTYPE_DBM_PARTNER = 2;
        ENCRYPTIONINFO_ENCRYPTIONENTITYTYPE_DCM_ACCOUNT = 3;
        ENCRYPTIONINFO_ENCRYPTIONENTITYTYPE_DCM_ADVERTISER = 4;
        ENCRYPTIONINFO_ENCRYPTIONENTITYTYPE_ENCRYPTION_ENTITY_TYPE_UNKNOWN = 5;
    }
    EncryptionInfo_EncryptionEntityType encryptionEntityType = 2;
    // Describes whether the encrypted cookie was received from ad serving (the %m macro) or from Data Transfer.
    enum EncryptionInfo_EncryptionSource {
        ENCRYPTIONINFO_ENCRYPTIONSOURCE_AD_SERVING = 0;
        ENCRYPTIONINFO_ENCRYPTIONSOURCE_DATA_TRANSFER = 1;
        ENCRYPTIONINFO_ENCRYPTIONSOURCE_ENCRYPTION_SCOPE_UNKNOWN = 2;
    }
    EncryptionInfo_EncryptionSource encryptionSource = 3;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#encryptionInfo".
    string kind = 4;
}

message EventTag {
    // Account ID of this event tag. This is a read-only field that can be left blank.
    string accountId = 1;
    // Advertiser ID of this event tag. This field or the campaignId field is required on insertion.
    string advertiserId = 2;
    // Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.
    DimensionValue advertiserIdDimensionValue = 3;
    // Campaign ID of this event tag. This field or the advertiserId field is required on insertion.
    string campaignId = 4;
    // Dimension value for the ID of the campaign. This is a read-only, auto-generated field.
    DimensionValue campaignIdDimensionValue = 5;
    // Whether this event tag should be automatically enabled for all of the advertiser's campaigns and ads.
    bool enabledByDefault = 6;
    // Whether to remove this event tag from ads that are trafficked through DoubleClick Bid Manager to Ad Exchange. This may be useful if the event tag uses a pixel that is unapproved for Ad Exchange bids on one or more networks, such as the Google Display Network.
    bool excludeFromAdxRequests = 7;
    // ID of this event tag. This is a read-only, auto-generated field.
    string id = 8;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#eventTag".
    string kind = 9;
    // Name of this event tag. This is a required field and must be less than 256 characters long.
    string name = 10;
    // Site filter type for this event tag. If no type is specified then the event tag will be applied to all sites.
    enum EventTag_SiteFilterType {
        EVENTTAG_SITEFILTERTYPE_BLACKLIST = 0;
        EVENTTAG_SITEFILTERTYPE_WHITELIST = 1;
    }
    EventTag_SiteFilterType siteFilterType = 11;
    // Filter list of site IDs associated with this event tag. The siteFilterType determines whether this is a whitelist or blacklist filter.
    repeated string siteIds = 12;
    // Whether this tag is SSL-compliant or not. This is a read-only field.
    bool sslCompliant = 13;
    // Status of this event tag. Must be ENABLED for this event tag to fire. This is a required field.
    enum EventTag_Statu {
        EVENTTAG_STATU_DISABLED = 0;
        EVENTTAG_STATU_ENABLED = 1;
    }
    EventTag_Statu status = 14;
    // Subaccount ID of this event tag. This is a read-only field that can be left blank.
    string subaccountId = 15;
    // Event tag type. Can be used to specify whether to use a third-party pixel, a third-party JavaScript URL, or a third-party click-through URL for either impression or click tracking. This is a required field.
    enum EventTag_Type {
        EVENTTAG_TYPE_CLICK_THROUGH_EVENT_TAG = 0;
        EVENTTAG_TYPE_IMPRESSION_IMAGE_EVENT_TAG = 1;
        EVENTTAG_TYPE_IMPRESSION_JAVASCRIPT_EVENT_TAG = 2;
    }
    EventTag_Type type = 16;
    // Payload URL for this event tag. The URL on a click-through event tag should have a landing page URL appended to the end of it. This field is required on insertion.
    string url = 17;
    // Number of times the landing page URL should be URL-escaped before being appended to the click-through event tag URL. Only applies to click-through event tags as specified by the event tag type.
    int32 urlEscapeLevels = 18;
}

message EventTagOverride {
    // Whether this override is enabled.
    bool enabled = 1;
    // ID of this event tag override. This is a read-only, auto-generated field.
    string id = 2;
}

message EventTagsListResponse {
    // Event tag collection.
    repeated EventTag eventTags = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#eventTagsListResponse".
    string kind = 2;
}

message File {
    // The date range for which the file has report data. The date range will always be the absolute date range for which the report is run.
    DateRange dateRange = 1;
    // The eTag of this response for caching purposes.
    string etag = 2;
    // The filename of the file.
    string fileName = 3;
    // The output format of the report. Only available once the file is available.
    enum File_Format {
        FILE_FORMAT_CSV = 0;
        FILE_FORMAT_EXCEL = 1;
    }
    File_Format format = 4;
    // The unique ID of this report file.
    string id = 5;
    // The kind of resource this is, in this case dfareporting#file.
    string kind = 6;
    // The timestamp in milliseconds since epoch when this file was last modified.
    string lastModifiedTime = 7;
    // The ID of the report this file was generated from.
    string reportId = 8;
    // The status of the report file.
    enum File_Statu {
        FILE_STATU_CANCELLED = 0;
        FILE_STATU_FAILED = 1;
        FILE_STATU_PROCESSING = 2;
        FILE_STATU_REPORT_AVAILABLE = 3;
    }
    File_Statu status = 9;
    // The URLs where the completed report file can be downloaded.
    message Urls {
            // The URL for downloading the report data through the API.
    string apiUrl = 1;
            // The URL for downloading the report data through a browser.
    string browserUrl = 2;
    }
    Urls urls = 10;
}

message FileList {
    // The eTag of this response for caching purposes.
    string etag = 1;
    // The files returned in this response.
    repeated File items = 2;
    // The kind of list this is, in this case dfareporting#fileList.
    string kind = 3;
    // Continuation token used to page through files. To retrieve the next page of results, set the next request's "pageToken" to the value of this field. The page token is only valid for a limited amount of time and should not be persisted.
    string nextPageToken = 4;
}

message Flight {
    // Inventory item flight end date.
    string endDate = 1;
    // Rate or cost of this flight.
    string rateOrCost = 2;
    // Inventory item flight start date.
    string startDate = 3;
    // Units of this flight.
    string units = 4;
}

message FloodlightActivitiesGenerateTagResponse {
    // Generated tag for this floodlight activity.
    string floodlightActivityTag = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#floodlightActivitiesGenerateTagResponse".
    string kind = 2;
}

message FloodlightActivitiesListResponse {
    // Floodlight activity collection.
    repeated FloodlightActivity floodlightActivities = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#floodlightActivitiesListResponse".
    string kind = 2;
    // Pagination token to be used for the next list operation.
    string nextPageToken = 3;
}

message FloodlightActivity {
    // Account ID of this floodlight activity. This is a read-only field that can be left blank.
    string accountId = 1;
    // Advertiser ID of this floodlight activity. If this field is left blank, the value will be copied over either from the activity group's advertiser or the existing activity's advertiser.
    string advertiserId = 2;
    // Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.
    DimensionValue advertiserIdDimensionValue = 3;
    // Code type used for cache busting in the generated tag. Applicable only when floodlightActivityGroupType is COUNTER and countingMethod is STANDARD_COUNTING or UNIQUE_COUNTING.
    enum FloodlightActivity_CacheBustingType {
        FLOODLIGHTACTIVITY_CACHEBUSTINGTYPE_ACTIVE_SERVER_PAGE = 0;
        FLOODLIGHTACTIVITY_CACHEBUSTINGTYPE_COLD_FUSION = 1;
        FLOODLIGHTACTIVITY_CACHEBUSTINGTYPE_JAVASCRIPT = 2;
        FLOODLIGHTACTIVITY_CACHEBUSTINGTYPE_JSP = 3;
        FLOODLIGHTACTIVITY_CACHEBUSTINGTYPE_PHP = 4;
    }
    FloodlightActivity_CacheBustingType cacheBustingType = 4;
    // Counting method for conversions for this floodlight activity. This is a required field.
    enum FloodlightActivity_CountingMethod {
        FLOODLIGHTACTIVITY_COUNTINGMETHOD_ITEMS_SOLD_COUNTING = 0;
        FLOODLIGHTACTIVITY_COUNTINGMETHOD_SESSION_COUNTING = 1;
        FLOODLIGHTACTIVITY_COUNTINGMETHOD_STANDARD_COUNTING = 2;
        FLOODLIGHTACTIVITY_COUNTINGMETHOD_TRANSACTIONS_COUNTING = 3;
        FLOODLIGHTACTIVITY_COUNTINGMETHOD_UNIQUE_COUNTING = 4;
    }
    FloodlightActivity_CountingMethod countingMethod = 5;
    // Dynamic floodlight tags.
    repeated FloodlightActivityDynamicTag defaultTags = 6;
    // URL where this tag will be deployed. If specified, must be less than 256 characters long.
    string expectedUrl = 7;
    // Floodlight activity group ID of this floodlight activity. This is a required field.
    string floodlightActivityGroupId = 8;
    // Name of the associated floodlight activity group. This is a read-only field.
    string floodlightActivityGroupName = 9;
    // Tag string of the associated floodlight activity group. This is a read-only field.
    string floodlightActivityGroupTagString = 10;
    // Type of the associated floodlight activity group. This is a read-only field.
    enum FloodlightActivity_FloodlightActivityGroupType {
        FLOODLIGHTACTIVITY_FLOODLIGHTACTIVITYGROUPTYPE_COUNTER = 0;
        FLOODLIGHTACTIVITY_FLOODLIGHTACTIVITYGROUPTYPE_SALE = 1;
    }
    FloodlightActivity_FloodlightActivityGroupType floodlightActivityGroupType = 11;
    // Floodlight configuration ID of this floodlight activity. If this field is left blank, the value will be copied over either from the activity group's floodlight configuration or from the existing activity's floodlight configuration.
    string floodlightConfigurationId = 12;
    // Dimension value for the ID of the floodlight configuration. This is a read-only, auto-generated field.
    DimensionValue floodlightConfigurationIdDimensionValue = 13;
    // Whether this activity is archived.
    bool hidden = 14;
    // ID of this floodlight activity. This is a read-only, auto-generated field.
    string id = 15;
    // Dimension value for the ID of this floodlight activity. This is a read-only, auto-generated field.
    DimensionValue idDimensionValue = 16;
    // Whether the image tag is enabled for this activity.
    bool imageTagEnabled = 17;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#floodlightActivity".
    string kind = 18;
    // Name of this floodlight activity. This is a required field. Must be less than 129 characters long and cannot contain quotes.
    string name = 19;
    // General notes or implementation instructions for the tag.
    string notes = 20;
    // Publisher dynamic floodlight tags.
    repeated FloodlightActivityPublisherDynamicTag publisherTags = 21;
    // Whether this tag should use SSL.
    bool secure = 22;
    // Whether the floodlight activity is SSL-compliant. This is a read-only field, its value detected by the system from the floodlight tags.
    bool sslCompliant = 23;
    // Whether this floodlight activity must be SSL-compliant.
    bool sslRequired = 24;
    // Subaccount ID of this floodlight activity. This is a read-only field that can be left blank.
    string subaccountId = 25;
    // Tag format type for the floodlight activity. If left blank, the tag format will default to HTML.
    enum FloodlightActivity_TagFormat {
        FLOODLIGHTACTIVITY_TAGFORMAT_HTML = 0;
        FLOODLIGHTACTIVITY_TAGFORMAT_XHTML = 1;
    }
    FloodlightActivity_TagFormat tagFormat = 26;
    // Value of the cat= paramter in the floodlight tag, which the ad servers use to identify the activity. This is optional: if empty, a new tag string will be generated for you. This string must be 1 to 8 characters long, with valid characters being [a-z][A-Z][0-9][-][ _ ]. This tag string must also be unique among activities of the same activity group. This field is read-only after insertion.
    string tagString = 27;
    // List of the user-defined variables used by this conversion tag. These map to the "u[1-100]=" in the tags. Each of these can have a user defined type.
    // Acceptable values are U1 to U100, inclusive.
    repeated string userDefinedVariableTypes = 28;
}

message FloodlightActivityDynamicTag {
    // ID of this dynamic tag. This is a read-only, auto-generated field.
    string id = 1;
    // Name of this tag.
    string name = 2;
    // Tag code.
    string tag = 3;
}

message FloodlightActivityGroup {
    // Account ID of this floodlight activity group. This is a read-only field that can be left blank.
    string accountId = 1;
    // Advertiser ID of this floodlight activity group. If this field is left blank, the value will be copied over either from the floodlight configuration's advertiser or from the existing activity group's advertiser.
    string advertiserId = 2;
    // Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.
    DimensionValue advertiserIdDimensionValue = 3;
    // Floodlight configuration ID of this floodlight activity group. This is a required field.
    string floodlightConfigurationId = 4;
    // Dimension value for the ID of the floodlight configuration. This is a read-only, auto-generated field.
    DimensionValue floodlightConfigurationIdDimensionValue = 5;
    // ID of this floodlight activity group. This is a read-only, auto-generated field.
    string id = 6;
    // Dimension value for the ID of this floodlight activity group. This is a read-only, auto-generated field.
    DimensionValue idDimensionValue = 7;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#floodlightActivityGroup".
    string kind = 8;
    // Name of this floodlight activity group. This is a required field. Must be less than 65 characters long and cannot contain quotes.
    string name = 9;
    // Subaccount ID of this floodlight activity group. This is a read-only field that can be left blank.
    string subaccountId = 10;
    // Value of the type= parameter in the floodlight tag, which the ad servers use to identify the activity group that the activity belongs to. This is optional: if empty, a new tag string will be generated for you. This string must be 1 to 8 characters long, with valid characters being [a-z][A-Z][0-9][-][ _ ]. This tag string must also be unique among activity groups of the same floodlight configuration. This field is read-only after insertion.
    string tagString = 11;
    // Type of the floodlight activity group. This is a required field that is read-only after insertion.
    enum FloodlightActivityGroup_Type {
        FLOODLIGHTACTIVITYGROUP_TYPE_COUNTER = 0;
        FLOODLIGHTACTIVITYGROUP_TYPE_SALE = 1;
    }
    FloodlightActivityGroup_Type type = 12;
}

message FloodlightActivityGroupsListResponse {
    // Floodlight activity group collection.
    repeated FloodlightActivityGroup floodlightActivityGroups = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#floodlightActivityGroupsListResponse".
    string kind = 2;
    // Pagination token to be used for the next list operation.
    string nextPageToken = 3;
}

message FloodlightActivityPublisherDynamicTag {
    // Whether this tag is applicable only for click-throughs.
    bool clickThrough = 1;
    // Directory site ID of this dynamic tag. This is a write-only field that can be used as an alternative to the siteId field. When this resource is retrieved, only the siteId field will be populated.
    string directorySiteId = 2;
    // Dynamic floodlight tag.
    FloodlightActivityDynamicTag dynamicTag = 3;
    // Site ID of this dynamic tag.
    string siteId = 4;
    // Dimension value for the ID of the site. This is a read-only, auto-generated field.
    DimensionValue siteIdDimensionValue = 5;
    // Whether this tag is applicable only for view-throughs.
    bool viewThrough = 6;
}

message FloodlightConfiguration {
    // Account ID of this floodlight configuration. This is a read-only field that can be left blank.
    string accountId = 1;
    // Advertiser ID of the parent advertiser of this floodlight configuration.
    string advertiserId = 2;
    // Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.
    DimensionValue advertiserIdDimensionValue = 3;
    // Whether advertiser data is shared with Google Analytics.
    bool analyticsDataSharingEnabled = 4;
    // Whether the exposure-to-conversion report is enabled. This report shows detailed pathway information on up to 10 of the most recent ad exposures seen by a user before converting.
    bool exposureToConversionEnabled = 5;
    // Day that will be counted as the first day of the week in reports. This is a required field.
    enum FloodlightConfiguration_FirstDayOfWeek {
        FLOODLIGHTCONFIGURATION_FIRSTDAYOFWEEK_MONDAY = 0;
        FLOODLIGHTCONFIGURATION_FIRSTDAYOFWEEK_SUNDAY = 1;
    }
    FloodlightConfiguration_FirstDayOfWeek firstDayOfWeek = 6;
    // ID of this floodlight configuration. This is a read-only, auto-generated field.
    string id = 7;
    // Dimension value for the ID of this floodlight configuration. This is a read-only, auto-generated field.
    DimensionValue idDimensionValue = 8;
    // Whether in-app attribution tracking is enabled.
    bool inAppAttributionTrackingEnabled = 9;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#floodlightConfiguration".
    string kind = 10;
    // Lookback window settings for this floodlight configuration.
    LookbackConfiguration lookbackConfiguration = 11;
    // Types of attribution options for natural search conversions.
    enum FloodlightConfiguration_NaturalSearchConversionAttributionOption {
        FLOODLIGHTCONFIGURATION_NATURALSEARCHCONVERSIONATTRIBUTIONOPTION_EXCLUDE_NATURAL_SEARCH_CONVERSION_ATTRIBUTION = 0;
        FLOODLIGHTCONFIGURATION_NATURALSEARCHCONVERSIONATTRIBUTIONOPTION_INCLUDE_NATURAL_SEARCH_CONVERSION_ATTRIBUTION = 1;
        FLOODLIGHTCONFIGURATION_NATURALSEARCHCONVERSIONATTRIBUTIONOPTION_INCLUDE_NATURAL_SEARCH_TIERED_CONVERSION_ATTRIBUTION = 2;
    }
    FloodlightConfiguration_NaturalSearchConversionAttributionOption naturalSearchConversionAttributionOption = 12;
    // Settings for DCM Omniture integration.
    OmnitureSettings omnitureSettings = 13;
    // List of standard variables enabled for this configuration.
    // 
    // Acceptable values are:
    // - "ORD"
    // - "NUM"
    repeated string standardVariableTypes = 14;
    // Subaccount ID of this floodlight configuration. This is a read-only field that can be left blank.
    string subaccountId = 15;
    // Configuration settings for dynamic and image floodlight tags.
    TagSettings tagSettings = 16;
    // List of third-party authentication tokens enabled for this configuration.
    repeated ThirdPartyAuthenticationToken thirdPartyAuthenticationTokens = 17;
    // List of user defined variables enabled for this configuration.
    repeated UserDefinedVariableConfiguration userDefinedVariableConfigurations = 18;
}

message FloodlightConfigurationsListResponse {
    // Floodlight configuration collection.
    repeated FloodlightConfiguration floodlightConfigurations = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#floodlightConfigurationsListResponse".
    string kind = 2;
}

message FloodlightReportCompatibleFields {
    // Dimensions which are compatible to be selected in the "dimensionFilters" section of the report.
    repeated Dimension dimensionFilters = 1;
    // Dimensions which are compatible to be selected in the "dimensions" section of the report.
    repeated Dimension dimensions = 2;
    // The kind of resource this is, in this case dfareporting#floodlightReportCompatibleFields.
    string kind = 3;
    // Metrics which are compatible to be selected in the "metricNames" section of the report.
    repeated Metric metrics = 4;
}

message FrequencyCap {
    // Duration of time, in seconds, for this frequency cap. The maximum duration is 90 days. Acceptable values are 1 to 7776000, inclusive.
    string duration = 1;
    // Number of times an individual user can be served the ad within the specified duration. Acceptable values are 1 to 15, inclusive.
    string impressions = 2;
}

message FsCommand {
    // Distance from the left of the browser.Applicable when positionOption is DISTANCE_FROM_TOP_LEFT_CORNER.
    int32 left = 1;
    // Position in the browser where the window will open.
    enum FsCommand_PositionOption {
        FSCOMMAND_POSITIONOPTION_CENTERED = 0;
        FSCOMMAND_POSITIONOPTION_DISTANCE_FROM_TOP_LEFT_CORNER = 1;
    }
    FsCommand_PositionOption positionOption = 2;
    // Distance from the top of the browser. Applicable when positionOption is DISTANCE_FROM_TOP_LEFT_CORNER.
    int32 top = 3;
    // Height of the window.
    int32 windowHeight = 4;
    // Width of the window.
    int32 windowWidth = 5;
}

message GeoTargeting {
    // Cities to be targeted. For each city only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a city, do not target or exclude the country of the city, and do not target the metro or region of the city.
    repeated City cities = 1;
    // Countries to be targeted or excluded from targeting, depending on the setting of the excludeCountries field. For each country only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting or excluding a country, do not target regions, cities, metros, or postal codes in the same country.
    repeated Country countries = 2;
    // Whether or not to exclude the countries in the countries field from targeting. If false, the countries field refers to countries which will be targeted by the ad.
    bool excludeCountries = 3;
    // Metros to be targeted. For each metro only dmaId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a metro, do not target or exclude the country of the metro.
    repeated Metro metros = 4;
    // Postal codes to be targeted. For each postal code only id is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a postal code, do not target or exclude the country of the postal code.
    repeated PostalCode postalCodes = 5;
    // Regions to be targeted. For each region only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a region, do not target or exclude the country of the region.
    repeated Region regions = 6;
}

message InventoryItem {
    // Account ID of this inventory item.
    string accountId = 1;
    // Ad slots of this inventory item. If this inventory item represents a standalone placement, there will be exactly one ad slot. If this inventory item represents a placement group, there will be more than one ad slot, each representing one child placement in that placement group.
    repeated AdSlot adSlots = 2;
    // Advertiser ID of this inventory item.
    string advertiserId = 3;
    // Content category ID of this inventory item.
    string contentCategoryId = 4;
    // Estimated click-through rate of this inventory item.
    string estimatedClickThroughRate = 5;
    // Estimated conversion rate of this inventory item.
    string estimatedConversionRate = 6;
    // ID of this inventory item.
    string id = 7;
    // Whether this inventory item is in plan.
    bool inPlan = 8;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#inventoryItem".
    string kind = 9;
    // Information about the most recent modification of this inventory item.
    LastModifiedInfo lastModifiedInfo = 10;
    // Name of this inventory item. For standalone inventory items, this is the same name as that of its only ad slot. For group inventory items, this can differ from the name of any of its ad slots.
    string name = 11;
    // Negotiation channel ID of this inventory item.
    string negotiationChannelId = 12;
    // Order ID of this inventory item.
    string orderId = 13;
    // Placement strategy ID of this inventory item.
    string placementStrategyId = 14;
    // Pricing of this inventory item.
    Pricing pricing = 15;
    // Project ID of this inventory item.
    string projectId = 16;
    // RFP ID of this inventory item.
    string rfpId = 17;
    // ID of the site this inventory item is associated with.
    string siteId = 18;
    // Subaccount ID of this inventory item.
    string subaccountId = 19;
    // Type of inventory item.
    enum InventoryItem_Type {
        INVENTORYITEM_TYPE_PLANNING_PLACEMENT_TYPE_CREDIT = 0;
        INVENTORYITEM_TYPE_PLANNING_PLACEMENT_TYPE_REGULAR = 1;
    }
    InventoryItem_Type type = 20;
}

message InventoryItemsListResponse {
    // Inventory item collection
    repeated InventoryItem inventoryItems = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#inventoryItemsListResponse".
    string kind = 2;
    // Pagination token to be used for the next list operation.
    string nextPageToken = 3;
}

message KeyValueTargetingExpression {
    // Keyword expression being targeted by the ad.
    string expression = 1;
}

message LandingPage {
    // Whether or not this landing page will be assigned to any ads or creatives that do not have a landing page assigned explicitly. Only one default landing page is allowed per campaign.
    bool default = 1;
    // ID of this landing page. This is a read-only, auto-generated field.
    string id = 2;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#landingPage".
    string kind = 3;
    // Name of this landing page. This is a required field. It must be less than 256 characters long, and must be unique among landing pages of the same campaign.
    string name = 4;
    // URL of this landing page. This is a required field.
    string url = 5;
}

message LandingPagesListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#landingPagesListResponse".
    string kind = 1;
    // Landing page collection
    repeated LandingPage landingPages = 2;
}

message Language {
    // Language ID of this language. This is the ID used for targeting and generating reports.
    string id = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#language".
    string kind = 2;
    // Format of language code is an ISO 639 two-letter language code optionally followed by an underscore followed by an ISO 3166 code. Examples are "en" for English or "zh_CN" for Simplified Chinese.
    string languageCode = 3;
    // Name of this language.
    string name = 4;
}

message LanguageTargeting {
    // Languages that this ad targets. For each language only languageId is required. The other fields are populated automatically when the ad is inserted or updated.
    repeated Language languages = 1;
}

message LanguagesListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#languagesListResponse".
    string kind = 1;
    // Language collection.
    repeated Language languages = 2;
}

message LastModifiedInfo {
    // Timestamp of the last change in milliseconds since epoch.
    string time = 1;
}

message ListPopulationClause {
    // Terms of this list population clause. Each clause is made up of list population terms representing constraints and are joined by ORs.
    repeated ListPopulationTerm terms = 1;
}

message ListPopulationRule {
    // Floodlight activity ID associated with this rule. This field can be left blank.
    string floodlightActivityId = 1;
    // Name of floodlight activity associated with this rule. This is a read-only, auto-generated field.
    string floodlightActivityName = 2;
    // Clauses that make up this list population rule. Clauses are joined by ANDs, and the clauses themselves are made up of list population terms which are joined by ORs.
    repeated ListPopulationClause listPopulationClauses = 3;
}

message ListPopulationTerm {
    // Will be true if the term should check if the user is in the list and false if the term should check if the user is not in the list. This field is only relevant when type is set to LIST_MEMBERSHIP_TERM. False by default.
    bool contains = 1;
    // Whether to negate the comparison result of this term during rule evaluation. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM or REFERRER_TERM.
    bool negation = 2;
    // Comparison operator of this term. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM or REFERRER_TERM.
    enum ListPopulationTerm_Operator {
        LISTPOPULATIONTERM_OPERATOR_NUM_EQUALS = 0;
        LISTPOPULATIONTERM_OPERATOR_NUM_GREATER_THAN = 1;
        LISTPOPULATIONTERM_OPERATOR_NUM_GREATER_THAN_EQUAL = 2;
        LISTPOPULATIONTERM_OPERATOR_NUM_LESS_THAN = 3;
        LISTPOPULATIONTERM_OPERATOR_NUM_LESS_THAN_EQUAL = 4;
        LISTPOPULATIONTERM_OPERATOR_STRING_CONTAINS = 5;
        LISTPOPULATIONTERM_OPERATOR_STRING_EQUALS = 6;
    }
    ListPopulationTerm_Operator operator = 3;
    // ID of the list in question. This field is only relevant when type is set to LIST_MEMBERSHIP_TERM.
    string remarketingListId = 4;
    // List population term type determines the applicable fields in this object. If left unset or set to CUSTOM_VARIABLE_TERM, then variableName, variableFriendlyName, operator, value, and negation are applicable. If set to LIST_MEMBERSHIP_TERM then remarketingListId and contains are applicable. If set to REFERRER_TERM then operator, value, and negation are applicable.
    enum ListPopulationTerm_Type {
        LISTPOPULATIONTERM_TYPE_CUSTOM_VARIABLE_TERM = 0;
        LISTPOPULATIONTERM_TYPE_LIST_MEMBERSHIP_TERM = 1;
        LISTPOPULATIONTERM_TYPE_REFERRER_TERM = 2;
    }
    ListPopulationTerm_Type type = 5;
    // Literal to compare the variable to. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM or REFERRER_TERM.
    string value = 6;
    // Friendly name of this term's variable. This is a read-only, auto-generated field. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM.
    string variableFriendlyName = 7;
    // Name of the variable (U1, U2, etc.) being compared in this term. This field is only relevant when type is set to null, CUSTOM_VARIABLE_TERM or REFERRER_TERM.
    string variableName = 8;
}

message ListTargetingExpression {
    // Expression describing which lists are being targeted by the ad.
    string expression = 1;
}

message LookbackConfiguration {
    // Lookback window, in days, from the last time a given user clicked on one of your ads. If you enter 0, clicks will not be considered as triggering events for floodlight tracking. If you leave this field blank, the default value for your account will be used. Acceptable values are 0 to 90, inclusive.
    int32 clickDuration = 1;
    // Lookback window, in days, from the last time a given user viewed one of your ads. If you enter 0, impressions will not be considered as triggering events for floodlight tracking. If you leave this field blank, the default value for your account will be used. Acceptable values are 0 to 90, inclusive.
    int32 postImpressionActivitiesDuration = 2;
}

message Metric {
    // The kind of resource this is, in this case dfareporting#metric.
    string kind = 1;
    // The metric name, e.g. dfa:impressions
    string name = 2;
}

message Metro {
    // Country code of the country to which this metro region belongs.
    string countryCode = 1;
    // DART ID of the country to which this metro region belongs.
    string countryDartId = 2;
    // DART ID of this metro region.
    string dartId = 3;
    // DMA ID of this metro region. This is the ID used for targeting and generating reports, and is equivalent to metro_code.
    string dmaId = 4;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#metro".
    string kind = 5;
    // Metro code of this metro region. This is equivalent to dma_id.
    string metroCode = 6;
    // Name of this metro region.
    string name = 7;
}

message MetrosListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#metrosListResponse".
    string kind = 1;
    // Metro collection.
    repeated Metro metros = 2;
}

message MobileCarrier {
    // Country code of the country to which this mobile carrier belongs.
    string countryCode = 1;
    // DART ID of the country to which this mobile carrier belongs.
    string countryDartId = 2;
    // ID of this mobile carrier.
    string id = 3;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#mobileCarrier".
    string kind = 4;
    // Name of this mobile carrier.
    string name = 5;
}

message MobileCarriersListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#mobileCarriersListResponse".
    string kind = 1;
    // Mobile carrier collection.
    repeated MobileCarrier mobileCarriers = 2;
}

message ObjectFilter {
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#objectFilter".
    string kind = 1;
    // Applicable when status is ASSIGNED. The user has access to objects with these object IDs.
    repeated string objectIds = 2;
    // Status of the filter. NONE means the user has access to none of the objects. ALL means the user has access to all objects. ASSIGNED means the user has access to the objects with IDs in the objectIds list.
    enum ObjectFilter_Statu {
        OBJECTFILTER_STATU_ALL = 0;
        OBJECTFILTER_STATU_ASSIGNED = 1;
        OBJECTFILTER_STATU_NONE = 2;
    }
    ObjectFilter_Statu status = 3;
}

message OffsetPosition {
    // Offset distance from left side of an asset or a window.
    int32 left = 1;
    // Offset distance from top side of an asset or a window.
    int32 top = 2;
}

message OmnitureSettings {
    // Whether placement cost data will be sent to Omniture. This property can be enabled only if omnitureIntegrationEnabled is true.
    bool omnitureCostDataEnabled = 1;
    // Whether Omniture integration is enabled. This property can be enabled only when the "Advanced Ad Serving" account setting is enabled.
    bool omnitureIntegrationEnabled = 2;
}

message OperatingSystem {
    // DART ID of this operating system. This is the ID used for targeting.
    string dartId = 1;
    // Whether this operating system is for desktop.
    bool desktop = 2;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#operatingSystem".
    string kind = 3;
    // Whether this operating system is for mobile.
    bool mobile = 4;
    // Name of this operating system.
    string name = 5;
}

message OperatingSystemVersion {
    // ID of this operating system version.
    string id = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#operatingSystemVersion".
    string kind = 2;
    // Major version (leftmost number) of this operating system version.
    string majorVersion = 3;
    // Minor version (number after the first dot) of this operating system version.
    string minorVersion = 4;
    // Name of this operating system version.
    string name = 5;
    // Operating system of this operating system version.
    OperatingSystem operatingSystem = 6;
}

message OperatingSystemVersionsListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#operatingSystemVersionsListResponse".
    string kind = 1;
    // Operating system version collection.
    repeated OperatingSystemVersion operatingSystemVersions = 2;
}

message OperatingSystemsListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#operatingSystemsListResponse".
    string kind = 1;
    // Operating system collection.
    repeated OperatingSystem operatingSystems = 2;
}

message OptimizationActivity {
    // Floodlight activity ID of this optimization activity. This is a required field.
    string floodlightActivityId = 1;
    // Dimension value for the ID of the floodlight activity. This is a read-only, auto-generated field.
    DimensionValue floodlightActivityIdDimensionValue = 2;
    // Weight associated with this optimization. The weight assigned will be understood in proportion to the weights assigned to the other optimization activities. Value must be greater than or equal to 1.
    int32 weight = 3;
}

message Order {
    // Account ID of this order.
    string accountId = 1;
    // Advertiser ID of this order.
    string advertiserId = 2;
    // IDs for users that have to approve documents created for this order.
    repeated string approverUserProfileIds = 3;
    // Buyer invoice ID associated with this order.
    string buyerInvoiceId = 4;
    // Name of the buyer organization.
    string buyerOrganizationName = 5;
    // Comments in this order.
    string comments = 6;
    // Contacts for this order.
    repeated OrderContact contacts = 7;
    // ID of this order. This is a read-only, auto-generated field.
    string id = 8;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#order".
    string kind = 9;
    // Information about the most recent modification of this order.
    LastModifiedInfo lastModifiedInfo = 10;
    // Name of this order.
    string name = 11;
    // Notes of this order.
    string notes = 12;
    // ID of the terms and conditions template used in this order.
    string planningTermId = 13;
    // Project ID of this order.
    string projectId = 14;
    // Seller order ID associated with this order.
    string sellerOrderId = 15;
    // Name of the seller organization.
    string sellerOrganizationName = 16;
    // Site IDs this order is associated with.
    repeated string siteId = 17;
    // Free-form site names this order is associated with.
    repeated string siteNames = 18;
    // Subaccount ID of this order.
    string subaccountId = 19;
    // Terms and conditions of this order.
    string termsAndConditions = 20;
}

message OrderContact {
    // Free-form information about this contact. It could be any information related to this contact in addition to type, title, name, and signature user profile ID.
    string contactInfo = 1;
    // Name of this contact.
    string contactName = 2;
    // Title of this contact.
    string contactTitle = 3;
    // Type of this contact.
    enum OrderContact_ContactType {
        ORDERCONTACT_CONTACTTYPE_PLANNING_ORDER_CONTACT_BUYER_BILLING_CONTACT = 0;
        ORDERCONTACT_CONTACTTYPE_PLANNING_ORDER_CONTACT_BUYER_CONTACT = 1;
        ORDERCONTACT_CONTACTTYPE_PLANNING_ORDER_CONTACT_SELLER_CONTACT = 2;
    }
    OrderContact_ContactType contactType = 4;
    // ID of the user profile containing the signature that will be embedded into order documents.
    string signatureUserProfileId = 5;
}

message OrderDocument {
    // Account ID of this order document.
    string accountId = 1;
    // Advertiser ID of this order document.
    string advertiserId = 2;
    // The amended order document ID of this order document. An order document can be created by optionally amending another order document so that the change history can be preserved.
    string amendedOrderDocumentId = 3;
    // IDs of users who have approved this order document.
    repeated string approvedByUserProfileIds = 4;
    // Whether this order document is cancelled.
    bool cancelled = 5;
    // Information about the creation of this order document.
    LastModifiedInfo createdInfo = 6;
    // Effective date of this order document.
    string effectiveDate = 7;
    // ID of this order document.
    string id = 8;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#orderDocument".
    string kind = 9;
    // List of email addresses that received the last sent document.
    repeated string lastSentRecipients = 10;
    // Timestamp of the last email sent with this order document.
    string lastSentTime = 11;
    // ID of the order from which this order document is created.
    string orderId = 12;
    // Project ID of this order document.
    string projectId = 13;
    // Whether this order document has been signed.
    bool signed = 14;
    // Subaccount ID of this order document.
    string subaccountId = 15;
    // Title of this order document.
    string title = 16;
    // Type of this order document
    enum OrderDocument_Type {
        ORDERDOCUMENT_TYPE_PLANNING_ORDER_TYPE_CHANGE_ORDER = 0;
        ORDERDOCUMENT_TYPE_PLANNING_ORDER_TYPE_INSERTION_ORDER = 1;
    }
    OrderDocument_Type type = 17;
}

message OrderDocumentsListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#orderDocumentsListResponse".
    string kind = 1;
    // Pagination token to be used for the next list operation.
    string nextPageToken = 2;
    // Order document collection
    repeated OrderDocument orderDocuments = 3;
}

message OrdersListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#ordersListResponse".
    string kind = 1;
    // Pagination token to be used for the next list operation.
    string nextPageToken = 2;
    // Order collection.
    repeated Order orders = 3;
}

message PathToConversionReportCompatibleFields {
    // Conversion dimensions which are compatible to be selected in the "conversionDimensions" section of the report.
    repeated Dimension conversionDimensions = 1;
    // Custom floodlight variables which are compatible to be selected in the "customFloodlightVariables" section of the report.
    repeated Dimension customFloodlightVariables = 2;
    // The kind of resource this is, in this case dfareporting#pathToConversionReportCompatibleFields.
    string kind = 3;
    // Metrics which are compatible to be selected in the "metricNames" section of the report.
    repeated Metric metrics = 4;
    // Per-interaction dimensions which are compatible to be selected in the "perInteractionDimensions" section of the report.
    repeated Dimension perInteractionDimensions = 5;
}

message Placement {
    // Account ID of this placement. This field can be left blank.
    string accountId = 1;
    // Advertiser ID of this placement. This field can be left blank.
    string advertiserId = 2;
    // Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.
    DimensionValue advertiserIdDimensionValue = 3;
    // Whether this placement is archived.
    bool archived = 4;
    // Campaign ID of this placement. This field is a required field on insertion.
    string campaignId = 5;
    // Dimension value for the ID of the campaign. This is a read-only, auto-generated field.
    DimensionValue campaignIdDimensionValue = 6;
    // Comments for this placement.
    string comment = 7;
    // Placement compatibility. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering on desktop, on mobile devices or in mobile apps for regular or interstitial ads respectively. APP and APP_INTERSTITIAL are no longer allowed for new placement insertions. Instead, use DISPLAY or DISPLAY_INTERSTITIAL. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard. This field is required on insertion.
    enum Placement_Compatibility {
        PLACEMENT_COMPATIBILITY_APP = 0;
        PLACEMENT_COMPATIBILITY_APP_INTERSTITIAL = 1;
        PLACEMENT_COMPATIBILITY_DISPLAY = 2;
        PLACEMENT_COMPATIBILITY_DISPLAY_INTERSTITIAL = 3;
        PLACEMENT_COMPATIBILITY_IN_STREAM_VIDEO = 4;
    }
    Placement_Compatibility compatibility = 8;
    // ID of the content category assigned to this placement.
    string contentCategoryId = 9;
    // Information about the creation of this placement. This is a read-only field.
    LastModifiedInfo createInfo = 10;
    // Directory site ID of this placement. On insert, you must set either this field or the siteId field to specify the site associated with this placement. This is a required field that is read-only after insertion.
    string directorySiteId = 11;
    // Dimension value for the ID of the directory site. This is a read-only, auto-generated field.
    DimensionValue directorySiteIdDimensionValue = 12;
    // External ID for this placement.
    string externalId = 13;
    // ID of this placement. This is a read-only, auto-generated field.
    string id = 14;
    // Dimension value for the ID of this placement. This is a read-only, auto-generated field.
    DimensionValue idDimensionValue = 15;
    // Key name of this placement. This is a read-only, auto-generated field.
    string keyName = 16;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#placement".
    string kind = 17;
    // Information about the most recent modification of this placement. This is a read-only field.
    LastModifiedInfo lastModifiedInfo = 18;
    // Lookback window settings for this placement.
    LookbackConfiguration lookbackConfiguration = 19;
    // Name of this placement.This is a required field and must be less than 256 characters long.
    string name = 20;
    // Whether payment was approved for this placement. This is a read-only field relevant only to publisher-paid placements.
    bool paymentApproved = 21;
    // Payment source for this placement. This is a required field that is read-only after insertion.
    enum Placement_PaymentSource {
        PLACEMENT_PAYMENTSOURCE_PLACEMENT_AGENCY_PAID = 0;
        PLACEMENT_PAYMENTSOURCE_PLACEMENT_PUBLISHER_PAID = 1;
    }
    Placement_PaymentSource paymentSource = 22;
    // ID of this placement's group, if applicable.
    string placementGroupId = 23;
    // Dimension value for the ID of the placement group. This is a read-only, auto-generated field.
    DimensionValue placementGroupIdDimensionValue = 24;
    // ID of the placement strategy assigned to this placement.
    string placementStrategyId = 25;
    // Pricing schedule of this placement. This field is required on insertion, specifically subfields startDate, endDate and pricingType.
    PricingSchedule pricingSchedule = 26;
    // Whether this placement is the primary placement of a roadblock (placement group). You cannot change this field from true to false. Setting this field to true will automatically set the primary field on the original primary placement of the roadblock to false, and it will automatically set the roadblock's primaryPlacementId field to the ID of this placement.
    bool primary = 27;
    // Information about the last publisher update. This is a read-only field.
    LastModifiedInfo publisherUpdateInfo = 28;
    // Site ID associated with this placement. On insert, you must set either this field or the directorySiteId field to specify the site associated with this placement. This is a required field that is read-only after insertion.
    string siteId = 29;
    // Dimension value for the ID of the site. This is a read-only, auto-generated field.
    DimensionValue siteIdDimensionValue = 30;
    // Size associated with this placement. When inserting or updating a placement, only the size ID field is used. This field is required on insertion.
    Size size = 31;
    // Whether creatives assigned to this placement must be SSL-compliant.
    bool sslRequired = 32;
    // Third-party placement status.
    enum Placement_Statu {
        PLACEMENT_STATU_ACKNOWLEDGE_ACCEPTANCE = 0;
        PLACEMENT_STATU_ACKNOWLEDGE_REJECTION = 1;
        PLACEMENT_STATU_DRAFT = 2;
        PLACEMENT_STATU_PAYMENT_ACCEPTED = 3;
        PLACEMENT_STATU_PAYMENT_REJECTED = 4;
        PLACEMENT_STATU_PENDING_REVIEW = 5;
    }
    Placement_Statu status = 33;
    // Subaccount ID of this placement. This field can be left blank.
    string subaccountId = 34;
    // Tag formats to generate for this placement. This field is required on insertion.
    // Acceptable values are:
    // - "PLACEMENT_TAG_STANDARD"
    // - "PLACEMENT_TAG_IFRAME_JAVASCRIPT"
    // - "PLACEMENT_TAG_IFRAME_ILAYER"
    // - "PLACEMENT_TAG_INTERNAL_REDIRECT"
    // - "PLACEMENT_TAG_JAVASCRIPT"
    // - "PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT"
    // - "PLACEMENT_TAG_INTERSTITIAL_INTERNAL_REDIRECT"
    // - "PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT"
    // - "PLACEMENT_TAG_CLICK_COMMANDS"
    // - "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH"
    // - "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_3"
    // - "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_4"
    // - "PLACEMENT_TAG_TRACKING"
    // - "PLACEMENT_TAG_TRACKING_IFRAME"
    // - "PLACEMENT_TAG_TRACKING_JAVASCRIPT"
    repeated string tagFormats = 35;
    // Tag settings for this placement.
    TagSetting tagSetting = 36;
    // Whether Verification and ActiveView are disabled for in-stream video creatives for this placement. The same setting videoActiveViewOptOut exists on the site level -- the opt out occurs if either of these settings are true. These settings are distinct from DirectorySites.settings.activeViewOptOut or Sites.siteSettings.activeViewOptOut which only apply to display ads. However, Accounts.activeViewOptOut opts out both video traffic, as well as display ads, from Verification and ActiveView.
    bool videoActiveViewOptOut = 37;
    // A collection of settings which affect video creatives served through this placement. Applicable to placements with IN_STREAM_VIDEO compatibility.
    VideoSettings videoSettings = 38;
    // VPAID adapter setting for this placement. Controls which VPAID format the measurement adapter will use for in-stream video creatives assigned to this placement.
    // 
    // Note: Flash is no longer supported. This field now defaults to HTML5 when the following values are provided: FLASH, BOTH.
    enum Placement_VpaidAdapterChoice {
        PLACEMENT_VPAIDADAPTERCHOICE_BOTH = 0;
        PLACEMENT_VPAIDADAPTERCHOICE_DEFAULT = 1;
        PLACEMENT_VPAIDADAPTERCHOICE_FLASH = 2;
        PLACEMENT_VPAIDADAPTERCHOICE_HTML5 = 3;
    }
    Placement_VpaidAdapterChoice vpaidAdapterChoice = 39;
}

message PlacementAssignment {
    // Whether this placement assignment is active. When true, the placement will be included in the ad's rotation.
    bool active = 1;
    // ID of the placement to be assigned. This is a required field.
    string placementId = 2;
    // Dimension value for the ID of the placement. This is a read-only, auto-generated field.
    DimensionValue placementIdDimensionValue = 3;
    // Whether the placement to be assigned requires SSL. This is a read-only field that is auto-generated when the ad is inserted or updated.
    bool sslRequired = 4;
}

message PlacementGroup {
    // Account ID of this placement group. This is a read-only field that can be left blank.
    string accountId = 1;
    // Advertiser ID of this placement group. This is a required field on insertion.
    string advertiserId = 2;
    // Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.
    DimensionValue advertiserIdDimensionValue = 3;
    // Whether this placement group is archived.
    bool archived = 4;
    // Campaign ID of this placement group. This field is required on insertion.
    string campaignId = 5;
    // Dimension value for the ID of the campaign. This is a read-only, auto-generated field.
    DimensionValue campaignIdDimensionValue = 6;
    // IDs of placements which are assigned to this placement group. This is a read-only, auto-generated field.
    repeated string childPlacementIds = 7;
    // Comments for this placement group.
    string comment = 8;
    // ID of the content category assigned to this placement group.
    string contentCategoryId = 9;
    // Information about the creation of this placement group. This is a read-only field.
    LastModifiedInfo createInfo = 10;
    // Directory site ID associated with this placement group. On insert, you must set either this field or the site_id field to specify the site associated with this placement group. This is a required field that is read-only after insertion.
    string directorySiteId = 11;
    // Dimension value for the ID of the directory site. This is a read-only, auto-generated field.
    DimensionValue directorySiteIdDimensionValue = 12;
    // External ID for this placement.
    string externalId = 13;
    // ID of this placement group. This is a read-only, auto-generated field.
    string id = 14;
    // Dimension value for the ID of this placement group. This is a read-only, auto-generated field.
    DimensionValue idDimensionValue = 15;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#placementGroup".
    string kind = 16;
    // Information about the most recent modification of this placement group. This is a read-only field.
    LastModifiedInfo lastModifiedInfo = 17;
    // Name of this placement group. This is a required field and must be less than 256 characters long.
    string name = 18;
    // Type of this placement group. A package is a simple group of placements that acts as a single pricing point for a group of tags. A roadblock is a group of placements that not only acts as a single pricing point, but also assumes that all the tags in it will be served at the same time. A roadblock requires one of its assigned placements to be marked as primary for reporting. This field is required on insertion.
    enum PlacementGroup_PlacementGroupType {
        PLACEMENTGROUP_PLACEMENTGROUPTYPE_PLACEMENT_PACKAGE = 0;
        PLACEMENTGROUP_PLACEMENTGROUPTYPE_PLACEMENT_ROADBLOCK = 1;
    }
    PlacementGroup_PlacementGroupType placementGroupType = 19;
    // ID of the placement strategy assigned to this placement group.
    string placementStrategyId = 20;
    // Pricing schedule of this placement group. This field is required on insertion.
    PricingSchedule pricingSchedule = 21;
    // ID of the primary placement, used to calculate the media cost of a roadblock (placement group). Modifying this field will automatically modify the primary field on all affected roadblock child placements.
    string primaryPlacementId = 22;
    // Dimension value for the ID of the primary placement. This is a read-only, auto-generated field.
    DimensionValue primaryPlacementIdDimensionValue = 23;
    // Site ID associated with this placement group. On insert, you must set either this field or the directorySiteId field to specify the site associated with this placement group. This is a required field that is read-only after insertion.
    string siteId = 24;
    // Dimension value for the ID of the site. This is a read-only, auto-generated field.
    DimensionValue siteIdDimensionValue = 25;
    // Subaccount ID of this placement group. This is a read-only field that can be left blank.
    string subaccountId = 26;
}

message PlacementGroupsListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#placementGroupsListResponse".
    string kind = 1;
    // Pagination token to be used for the next list operation.
    string nextPageToken = 2;
    // Placement group collection.
    repeated PlacementGroup placementGroups = 3;
}

message PlacementStrategiesListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#placementStrategiesListResponse".
    string kind = 1;
    // Pagination token to be used for the next list operation.
    string nextPageToken = 2;
    // Placement strategy collection.
    repeated PlacementStrategy placementStrategies = 3;
}

message PlacementStrategy {
    // Account ID of this placement strategy.This is a read-only field that can be left blank.
    string accountId = 1;
    // ID of this placement strategy. This is a read-only, auto-generated field.
    string id = 2;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#placementStrategy".
    string kind = 3;
    // Name of this placement strategy. This is a required field. It must be less than 256 characters long and unique among placement strategies of the same account.
    string name = 4;
}

message PlacementTag {
    // Placement ID
    string placementId = 1;
    // Tags generated for this placement.
    repeated TagData tagDatas = 2;
}

message PlacementsGenerateTagsResponse {
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#placementsGenerateTagsResponse".
    string kind = 1;
    // Set of generated tags for the specified placements.
    repeated PlacementTag placementTags = 2;
}

message PlacementsListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#placementsListResponse".
    string kind = 1;
    // Pagination token to be used for the next list operation.
    string nextPageToken = 2;
    // Placement collection.
    repeated Placement placements = 3;
}

message PlatformType {
    // ID of this platform type.
    string id = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#platformType".
    string kind = 2;
    // Name of this platform type.
    string name = 3;
}

message PlatformTypesListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#platformTypesListResponse".
    string kind = 1;
    // Platform type collection.
    repeated PlatformType platformTypes = 2;
}

message PopupWindowProperties {
    // Popup dimension for a creative. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA and all VPAID
    Size dimension = 1;
    // Upper-left corner coordinates of the popup window. Applicable if positionType is COORDINATES.
    OffsetPosition offset = 2;
    // Popup window position either centered or at specific coordinate.
    enum PopupWindowProperties_PositionType {
        POPUPWINDOWPROPERTIES_POSITIONTYPE_CENTER = 0;
        POPUPWINDOWPROPERTIES_POSITIONTYPE_COORDINATES = 1;
    }
    PopupWindowProperties_PositionType positionType = 3;
    // Whether to display the browser address bar.
    bool showAddressBar = 4;
    // Whether to display the browser menu bar.
    bool showMenuBar = 5;
    // Whether to display the browser scroll bar.
    bool showScrollBar = 6;
    // Whether to display the browser status bar.
    bool showStatusBar = 7;
    // Whether to display the browser tool bar.
    bool showToolBar = 8;
    // Title of popup window.
    string title = 9;
}

message PostalCode {
    // Postal code. This is equivalent to the id field.
    string code = 1;
    // Country code of the country to which this postal code belongs.
    string countryCode = 2;
    // DART ID of the country to which this postal code belongs.
    string countryDartId = 3;
    // ID of this postal code.
    string id = 4;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#postalCode".
    string kind = 5;
}

message PostalCodesListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#postalCodesListResponse".
    string kind = 1;
    // Postal code collection.
    repeated PostalCode postalCodes = 2;
}

message Pricing {
    // Cap cost type of this inventory item.
    enum Pricing_CapCostType {
        PRICING_CAPCOSTTYPE_PLANNING_PLACEMENT_CAP_COST_TYPE_CUMULATIVE = 0;
        PRICING_CAPCOSTTYPE_PLANNING_PLACEMENT_CAP_COST_TYPE_MONTHLY = 1;
        PRICING_CAPCOSTTYPE_PLANNING_PLACEMENT_CAP_COST_TYPE_NONE = 2;
    }
    Pricing_CapCostType capCostType = 1;
    // End date of this inventory item.
    string endDate = 2;
    // Flights of this inventory item. A flight (a.k.a. pricing period) represents the inventory item pricing information for a specific period of time.
    repeated Flight flights = 3;
    // Group type of this inventory item if it represents a placement group. Is null otherwise. There are two type of placement groups: PLANNING_PLACEMENT_GROUP_TYPE_PACKAGE is a simple group of inventory items that acts as a single pricing point for a group of tags. PLANNING_PLACEMENT_GROUP_TYPE_ROADBLOCK is a group of inventory items that not only acts as a single pricing point, but also assumes that all the tags in it will be served at the same time. A roadblock requires one of its assigned inventory items to be marked as primary.
    enum Pricing_GroupType {
        PRICING_GROUPTYPE_PLANNING_PLACEMENT_GROUP_TYPE_PACKAGE = 0;
        PRICING_GROUPTYPE_PLANNING_PLACEMENT_GROUP_TYPE_ROADBLOCK = 1;
    }
    Pricing_GroupType groupType = 4;
    // Pricing type of this inventory item.
    enum Pricing_PricingType {
        PRICING_PRICINGTYPE_PLANNING_PLACEMENT_PRICING_TYPE_CLICKS = 0;
        PRICING_PRICINGTYPE_PLANNING_PLACEMENT_PRICING_TYPE_CPA = 1;
        PRICING_PRICINGTYPE_PLANNING_PLACEMENT_PRICING_TYPE_CPC = 2;
        PRICING_PRICINGTYPE_PLANNING_PLACEMENT_PRICING_TYPE_CPM = 3;
        PRICING_PRICINGTYPE_PLANNING_PLACEMENT_PRICING_TYPE_CPM_ACTIVEVIEW = 4;
        PRICING_PRICINGTYPE_PLANNING_PLACEMENT_PRICING_TYPE_FLAT_RATE_CLICKS = 5;
        PRICING_PRICINGTYPE_PLANNING_PLACEMENT_PRICING_TYPE_FLAT_RATE_IMPRESSIONS = 6;
        PRICING_PRICINGTYPE_PLANNING_PLACEMENT_PRICING_TYPE_IMPRESSIONS = 7;
    }
    Pricing_PricingType pricingType = 5;
    // Start date of this inventory item.
    string startDate = 6;
}

message PricingSchedule {
    // Placement cap cost option.
    enum PricingSchedule_CapCostOption {
        PRICINGSCHEDULE_CAPCOSTOPTION_CAP_COST_CUMULATIVE = 0;
        PRICINGSCHEDULE_CAPCOSTOPTION_CAP_COST_MONTHLY = 1;
        PRICINGSCHEDULE_CAPCOSTOPTION_CAP_COST_NONE = 2;
    }
    PricingSchedule_CapCostOption capCostOption = 1;
    // Whether cap costs are ignored by ad serving.
    bool disregardOverdelivery = 2;
    // Placement end date. This date must be later than, or the same day as, the placement start date, but not later than the campaign end date. If, for example, you set 6/25/2015 as both the start and end dates, the effective placement date is just that day only, 6/25/2015. The hours, minutes, and seconds of the end date should not be set, as doing so will result in an error. This field is required on insertion.
    string endDate = 3;
    // Whether this placement is flighted. If true, pricing periods will be computed automatically.
    bool flighted = 4;
    // Floodlight activity ID associated with this placement. This field should be set when placement pricing type is set to PRICING_TYPE_CPA.
    string floodlightActivityId = 5;
    // Pricing periods for this placement.
    repeated PricingSchedulePricingPeriod pricingPeriods = 6;
    // Placement pricing type. This field is required on insertion.
    enum PricingSchedule_PricingType {
        PRICINGSCHEDULE_PRICINGTYPE_PRICING_TYPE_CPA = 0;
        PRICINGSCHEDULE_PRICINGTYPE_PRICING_TYPE_CPC = 1;
        PRICINGSCHEDULE_PRICINGTYPE_PRICING_TYPE_CPM = 2;
        PRICINGSCHEDULE_PRICINGTYPE_PRICING_TYPE_CPM_ACTIVEVIEW = 3;
        PRICINGSCHEDULE_PRICINGTYPE_PRICING_TYPE_FLAT_RATE_CLICKS = 4;
        PRICINGSCHEDULE_PRICINGTYPE_PRICING_TYPE_FLAT_RATE_IMPRESSIONS = 5;
    }
    PricingSchedule_PricingType pricingType = 7;
    // Placement start date. This date must be later than, or the same day as, the campaign start date. The hours, minutes, and seconds of the start date should not be set, as doing so will result in an error. This field is required on insertion.
    string startDate = 8;
    // Testing start date of this placement. The hours, minutes, and seconds of the start date should not be set, as doing so will result in an error.
    string testingStartDate = 9;
}

message PricingSchedulePricingPeriod {
    // Pricing period end date. This date must be later than, or the same day as, the pricing period start date, but not later than the placement end date. The period end date can be the same date as the period start date. If, for example, you set 6/25/2015 as both the start and end dates, the effective pricing period date is just that day only, 6/25/2015. The hours, minutes, and seconds of the end date should not be set, as doing so will result in an error.
    string endDate = 1;
    // Comments for this pricing period.
    string pricingComment = 2;
    // Rate or cost of this pricing period in nanos (i.e., multipled by 1000000000). Acceptable values are 0 to 1000000000000000000, inclusive.
    string rateOrCostNanos = 3;
    // Pricing period start date. This date must be later than, or the same day as, the placement start date. The hours, minutes, and seconds of the start date should not be set, as doing so will result in an error.
    string startDate = 4;
    // Units of this pricing period. Acceptable values are 0 to 10000000000, inclusive.
    string units = 5;
}

message Project {
    // Account ID of this project.
    string accountId = 1;
    // Advertiser ID of this project.
    string advertiserId = 2;
    // Audience age group of this project.
    enum Project_AudienceAgeGroup {
        PROJECT_AUDIENCEAGEGROUP_PLANNING_AUDIENCE_AGE_18_24 = 0;
        PROJECT_AUDIENCEAGEGROUP_PLANNING_AUDIENCE_AGE_25_34 = 1;
        PROJECT_AUDIENCEAGEGROUP_PLANNING_AUDIENCE_AGE_35_44 = 2;
        PROJECT_AUDIENCEAGEGROUP_PLANNING_AUDIENCE_AGE_45_54 = 3;
        PROJECT_AUDIENCEAGEGROUP_PLANNING_AUDIENCE_AGE_55_64 = 4;
        PROJECT_AUDIENCEAGEGROUP_PLANNING_AUDIENCE_AGE_65_OR_MORE = 5;
        PROJECT_AUDIENCEAGEGROUP_PLANNING_AUDIENCE_AGE_UNKNOWN = 6;
    }
    Project_AudienceAgeGroup audienceAgeGroup = 3;
    // Audience gender of this project.
    enum Project_AudienceGender {
        PROJECT_AUDIENCEGENDER_PLANNING_AUDIENCE_GENDER_FEMALE = 0;
        PROJECT_AUDIENCEGENDER_PLANNING_AUDIENCE_GENDER_MALE = 1;
    }
    Project_AudienceGender audienceGender = 4;
    // Budget of this project in the currency specified by the current account. The value stored in this field represents only the non-fractional amount. For example, for USD, the smallest value that can be represented by this field is 1 US dollar.
    string budget = 5;
    // Client billing code of this project.
    string clientBillingCode = 6;
    // Name of the project client.
    string clientName = 7;
    // End date of the project.
    string endDate = 8;
    // ID of this project. This is a read-only, auto-generated field.
    string id = 9;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#project".
    string kind = 10;
    // Information about the most recent modification of this project.
    LastModifiedInfo lastModifiedInfo = 11;
    // Name of this project.
    string name = 12;
    // Overview of this project.
    string overview = 13;
    // Start date of the project.
    string startDate = 14;
    // Subaccount ID of this project.
    string subaccountId = 15;
    // Number of clicks that the advertiser is targeting.
    string targetClicks = 16;
    // Number of conversions that the advertiser is targeting.
    string targetConversions = 17;
    // CPA that the advertiser is targeting.
    string targetCpaNanos = 18;
    // CPC that the advertiser is targeting.
    string targetCpcNanos = 19;
    // vCPM from Active View that the advertiser is targeting.
    string targetCpmActiveViewNanos = 20;
    // CPM that the advertiser is targeting.
    string targetCpmNanos = 21;
    // Number of impressions that the advertiser is targeting.
    string targetImpressions = 22;
}

message ProjectsListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#projectsListResponse".
    string kind = 1;
    // Pagination token to be used for the next list operation.
    string nextPageToken = 2;
    // Project collection.
    repeated Project projects = 3;
}

message ReachReportCompatibleFields {
    // Dimensions which are compatible to be selected in the "dimensionFilters" section of the report.
    repeated Dimension dimensionFilters = 1;
    // Dimensions which are compatible to be selected in the "dimensions" section of the report.
    repeated Dimension dimensions = 2;
    // The kind of resource this is, in this case dfareporting#reachReportCompatibleFields.
    string kind = 3;
    // Metrics which are compatible to be selected in the "metricNames" section of the report.
    repeated Metric metrics = 4;
    // Metrics which are compatible to be selected as activity metrics to pivot on in the "activities" section of the report.
    repeated Metric pivotedActivityMetrics = 5;
    // Metrics which are compatible to be selected in the "reachByFrequencyMetricNames" section of the report.
    repeated Metric reachByFrequencyMetrics = 6;
}

message Recipient {
    // The delivery type for the recipient.
    enum Recipient_DeliveryType {
        RECIPIENT_DELIVERYTYPE_ATTACHMENT = 0;
        RECIPIENT_DELIVERYTYPE_LINK = 1;
    }
    Recipient_DeliveryType deliveryType = 1;
    // The email address of the recipient.
    string email = 2;
    // The kind of resource this is, in this case dfareporting#recipient.
    string kind = 3;
}

message Region {
    // Country code of the country to which this region belongs.
    string countryCode = 1;
    // DART ID of the country to which this region belongs.
    string countryDartId = 2;
    // DART ID of this region.
    string dartId = 3;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#region".
    string kind = 4;
    // Name of this region.
    string name = 5;
    // Region code.
    string regionCode = 6;
}

message RegionsListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#regionsListResponse".
    string kind = 1;
    // Region collection.
    repeated Region regions = 2;
}

message RemarketingList {
    // Account ID of this remarketing list. This is a read-only, auto-generated field that is only returned in GET requests.
    string accountId = 1;
    // Whether this remarketing list is active.
    bool active = 2;
    // Dimension value for the advertiser ID that owns this remarketing list. This is a required field.
    string advertiserId = 3;
    // Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.
    DimensionValue advertiserIdDimensionValue = 4;
    // Remarketing list description.
    string description = 5;
    // Remarketing list ID. This is a read-only, auto-generated field.
    string id = 6;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#remarketingList".
    string kind = 7;
    // Number of days that a user should remain in the remarketing list without an impression. Acceptable values are 1 to 540, inclusive.
    string lifeSpan = 8;
    // Rule used to populate the remarketing list with users.
    ListPopulationRule listPopulationRule = 9;
    // Number of users currently in the list. This is a read-only field.
    string listSize = 10;
    // Product from which this remarketing list was originated.
    enum RemarketingList_ListSource {
        REMARKETINGLIST_LISTSOURCE_REMARKETING_LIST_SOURCE_ADX = 0;
        REMARKETINGLIST_LISTSOURCE_REMARKETING_LIST_SOURCE_DBM = 1;
        REMARKETINGLIST_LISTSOURCE_REMARKETING_LIST_SOURCE_DFA = 2;
        REMARKETINGLIST_LISTSOURCE_REMARKETING_LIST_SOURCE_DFP = 3;
        REMARKETINGLIST_LISTSOURCE_REMARKETING_LIST_SOURCE_DMP = 4;
        REMARKETINGLIST_LISTSOURCE_REMARKETING_LIST_SOURCE_GA = 5;
        REMARKETINGLIST_LISTSOURCE_REMARKETING_LIST_SOURCE_GPLUS = 6;
        REMARKETINGLIST_LISTSOURCE_REMARKETING_LIST_SOURCE_OTHER = 7;
        REMARKETINGLIST_LISTSOURCE_REMARKETING_LIST_SOURCE_PLAY_STORE = 8;
        REMARKETINGLIST_LISTSOURCE_REMARKETING_LIST_SOURCE_XFP = 9;
        REMARKETINGLIST_LISTSOURCE_REMARKETING_LIST_SOURCE_YOUTUBE = 10;
    }
    RemarketingList_ListSource listSource = 11;
    // Name of the remarketing list. This is a required field. Must be no greater than 128 characters long.
    string name = 12;
    // Subaccount ID of this remarketing list. This is a read-only, auto-generated field that is only returned in GET requests.
    string subaccountId = 13;
}

message RemarketingListShare {
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#remarketingListShare".
    string kind = 1;
    // Remarketing list ID. This is a read-only, auto-generated field.
    string remarketingListId = 2;
    // Accounts that the remarketing list is shared with.
    repeated string sharedAccountIds = 3;
    // Advertisers that the remarketing list is shared with.
    repeated string sharedAdvertiserIds = 4;
}

message RemarketingListsListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#remarketingListsListResponse".
    string kind = 1;
    // Pagination token to be used for the next list operation.
    string nextPageToken = 2;
    // Remarketing list collection.
    repeated RemarketingList remarketingLists = 3;
}

message Report {
    // The account ID to which this report belongs.
    string accountId = 1;
    // The report criteria for a report of type "STANDARD".
    message Criteria {
            // Activity group.
    Activities activities = 1;
            // Custom Rich Media Events group.
    CustomRichMediaEvents customRichMediaEvents = 2;
            // The date range for which this report should be run.
    DateRange dateRange = 3;
            // The list of filters on which dimensions are filtered.
    // Filters for different dimensions are ANDed, filters for the same dimension are grouped together and ORed.
    repeated DimensionValue dimensionFilters = 4;
            // The list of standard dimensions the report should include.
    repeated SortedDimension dimensions = 5;
            // The list of names of metrics the report should include.
    repeated string metricNames = 6;
    }
    Criteria criteria = 2;
    // The report criteria for a report of type "CROSS_DIMENSION_REACH".
    message CrossDimensionReachCriteria {
            // The list of dimensions the report should include.
    repeated SortedDimension breakdown = 1;
            // The date range this report should be run for.
    DateRange dateRange = 2;
            // The dimension option.
    enum CrossDimensionReachCriteria_Dimension {
            CROSSDIMENSIONREACHCRITERIA_DIMENSION_ADVERTISER = 0;
            CROSSDIMENSIONREACHCRITERIA_DIMENSION_CAMPAIGN = 1;
            CROSSDIMENSIONREACHCRITERIA_DIMENSION_SITE_BY_ADVERTISER = 2;
            CROSSDIMENSIONREACHCRITERIA_DIMENSION_SITE_BY_CAMPAIGN = 3;
        }
        CrossDimensionReachCriteria_Dimension dimension = 3;
            // The list of filters on which dimensions are filtered.
    repeated DimensionValue dimensionFilters = 4;
            // The list of names of metrics the report should include.
    repeated string metricNames = 5;
            // The list of names of overlap metrics the report should include.
    repeated string overlapMetricNames = 6;
            // Whether the report is pivoted or not. Defaults to true.
    bool pivoted = 7;
    }
    CrossDimensionReachCriteria crossDimensionReachCriteria = 3;
    // The report's email delivery settings.
    message Delivery {
            // Whether the report should be emailed to the report owner.
    bool emailOwner = 1;
            // The type of delivery for the owner to receive, if enabled.
    enum Delivery_EmailOwnerDeliveryType {
            DELIVERY_EMAILOWNERDELIVERYTYPE_ATTACHMENT = 0;
            DELIVERY_EMAILOWNERDELIVERYTYPE_LINK = 1;
        }
        Delivery_EmailOwnerDeliveryType emailOwnerDeliveryType = 2;
            // The message to be sent with each email.
    string message = 3;
            // The list of recipients to which to email the report.
    repeated Recipient recipients = 4;
    }
    Delivery delivery = 4;
    // The eTag of this response for caching purposes.
    string etag = 5;
    // The filename used when generating report files for this report.
    string fileName = 6;
    // The report criteria for a report of type "FLOODLIGHT".
    message FloodlightCriteria {
            // The list of custom rich media events to include.
    repeated DimensionValue customRichMediaEvents = 1;
            // The date range this report should be run for.
    DateRange dateRange = 2;
            // The list of filters on which dimensions are filtered.
    // Filters for different dimensions are ANDed, filters for the same dimension are grouped together and ORed.
    repeated DimensionValue dimensionFilters = 3;
            // The list of dimensions the report should include.
    repeated SortedDimension dimensions = 4;
            // The floodlight ID for which to show data in this report. All advertisers associated with that ID will automatically be added. The dimension of the value needs to be 'dfa:floodlightConfigId'.
    DimensionValue floodlightConfigId = 5;
            // The list of names of metrics the report should include.
    repeated string metricNames = 6;
            // The properties of the report.
    message ReportProperties {
                    // Include conversions that have no cookie, but do have an exposure path.
    bool includeAttributedIPConversions = 1;
                    // Include conversions of users with a DoubleClick cookie but without an exposure. That means the user did not click or see an ad from the advertiser within the Floodlight group, or that the interaction happened outside the lookback window.
    bool includeUnattributedCookieConversions = 2;
                    // Include conversions that have no associated cookies and no exposures. It’s therefore impossible to know how the user was exposed to your ads during the lookback window prior to a conversion.
    bool includeUnattributedIPConversions = 3;
        }
        ReportProperties reportProperties = 7;
    }
    FloodlightCriteria floodlightCriteria = 7;
    // The output format of the report. If not specified, default format is "CSV". Note that the actual format in the completed report file might differ if for instance the report's size exceeds the format's capabilities. "CSV" will then be the fallback format.
    enum Report_Format {
        REPORT_FORMAT_CSV = 0;
        REPORT_FORMAT_EXCEL = 1;
    }
    Report_Format format = 8;
    // The unique ID identifying this report resource.
    string id = 9;
    // The kind of resource this is, in this case dfareporting#report.
    string kind = 10;
    // The timestamp (in milliseconds since epoch) of when this report was last modified.
    string lastModifiedTime = 11;
    // The name of the report.
    string name = 12;
    // The user profile id of the owner of this report.
    string ownerProfileId = 13;
    // The report criteria for a report of type "PATH_TO_CONVERSION".
    message PathToConversionCriteria {
            // The list of 'dfa:activity' values to filter on.
    repeated DimensionValue activityFilters = 1;
            // The list of conversion dimensions the report should include.
    repeated SortedDimension conversionDimensions = 2;
            // The list of custom floodlight variables the report should include.
    repeated SortedDimension customFloodlightVariables = 3;
            // The list of custom rich media events to include.
    repeated DimensionValue customRichMediaEvents = 4;
            // The date range this report should be run for.
    DateRange dateRange = 5;
            // The floodlight ID for which to show data in this report. All advertisers associated with that ID will automatically be added. The dimension of the value needs to be 'dfa:floodlightConfigId'.
    DimensionValue floodlightConfigId = 6;
            // The list of names of metrics the report should include.
    repeated string metricNames = 7;
            // The list of per interaction dimensions the report should include.
    repeated SortedDimension perInteractionDimensions = 8;
            // The properties of the report.
    message ReportProperties {
                    // DFA checks to see if a click interaction occurred within the specified period of time before a conversion. By default the value is pulled from Floodlight or you can manually enter a custom value. Valid values: 1-90.
    int32 clicksLookbackWindow = 1;
                    // DFA checks to see if an impression interaction occurred within the specified period of time before a conversion. By default the value is pulled from Floodlight or you can manually enter a custom value. Valid values: 1-90.
    int32 impressionsLookbackWindow = 2;
                    // Deprecated: has no effect.
    bool includeAttributedIPConversions = 3;
                    // Include conversions of users with a DoubleClick cookie but without an exposure. That means the user did not click or see an ad from the advertiser within the Floodlight group, or that the interaction happened outside the lookback window.
    bool includeUnattributedCookieConversions = 4;
                    // Include conversions that have no associated cookies and no exposures. It’s therefore impossible to know how the user was exposed to your ads during the lookback window prior to a conversion.
    bool includeUnattributedIPConversions = 5;
                    // The maximum number of click interactions to include in the report. Advertisers currently paying for E2C reports get up to 200 (100 clicks, 100 impressions). If another advertiser in your network is paying for E2C, you can have up to 5 total exposures per report.
    int32 maximumClickInteractions = 6;
                    // The maximum number of click interactions to include in the report. Advertisers currently paying for E2C reports get up to 200 (100 clicks, 100 impressions). If another advertiser in your network is paying for E2C, you can have up to 5 total exposures per report.
    int32 maximumImpressionInteractions = 7;
                    // The maximum amount of time that can take place between interactions (clicks or impressions) by the same user. Valid values: 1-90.
    int32 maximumInteractionGap = 8;
                    // Enable pivoting on interaction path.
    bool pivotOnInteractionPath = 9;
        }
        ReportProperties reportProperties = 9;
    }
    PathToConversionCriteria pathToConversionCriteria = 14;
    // The report criteria for a report of type "REACH".
    message ReachCriteria {
            // Activity group.
    Activities activities = 1;
            // Custom Rich Media Events group.
    CustomRichMediaEvents customRichMediaEvents = 2;
            // The date range this report should be run for.
    DateRange dateRange = 3;
            // The list of filters on which dimensions are filtered.
    // Filters for different dimensions are ANDed, filters for the same dimension are grouped together and ORed.
    repeated DimensionValue dimensionFilters = 4;
            // The list of dimensions the report should include.
    repeated SortedDimension dimensions = 5;
            // Whether to enable all reach dimension combinations in the report. Defaults to false. If enabled, the date range of the report should be within the last three months.
    bool enableAllDimensionCombinations = 6;
            // The list of names of metrics the report should include.
    repeated string metricNames = 7;
            // The list of names of  Reach By Frequency metrics the report should include.
    repeated string reachByFrequencyMetricNames = 8;
    }
    ReachCriteria reachCriteria = 15;
    // The report's schedule. Can only be set if the report's 'dateRange' is a relative date range and the relative date range is not "TODAY".
    message Schedule {
            // Whether the schedule is active or not. Must be set to either true or false.
    bool active = 1;
            // Defines every how many days, weeks or months the report should be run. Needs to be set when "repeats" is either "DAILY", "WEEKLY" or "MONTHLY".
    int32 every = 2;
            // The expiration date when the scheduled report stops running.
    string expirationDate = 3;
            // The interval for which the report is repeated. Note:
    // - "DAILY" also requires field "every" to be set.
    // - "WEEKLY" also requires fields "every" and "repeatsOnWeekDays" to be set.
    // - "MONTHLY" also requires fields "every" and "runsOnDayOfMonth" to be set.
    string repeats = 4;
            // List of week days "WEEKLY" on which scheduled reports should run.
    repeated string repeatsOnWeekDays = 5;
            // Enum to define for "MONTHLY" scheduled reports whether reports should be repeated on the same day of the month as "startDate" or the same day of the week of the month.
    // Example: If 'startDate' is Monday, April 2nd 2012 (2012-04-02), "DAY_OF_MONTH" would run subsequent reports on the 2nd of every Month, and "WEEK_OF_MONTH" would run subsequent reports on the first Monday of the month.
    enum Schedule_RunsOnDayOfMonth {
            SCHEDULE_RUNSONDAYOFMONTH_DAY_OF_MONTH = 0;
            SCHEDULE_RUNSONDAYOFMONTH_WEEK_OF_MONTH = 1;
        }
        Schedule_RunsOnDayOfMonth runsOnDayOfMonth = 6;
            // Start date of date range for which scheduled reports should be run.
    string startDate = 7;
    }
    Schedule schedule = 16;
    // The subaccount ID to which this report belongs if applicable.
    string subAccountId = 17;
    // The type of the report.
    enum Report_Type {
        REPORT_TYPE_CROSS_DIMENSION_REACH = 0;
        REPORT_TYPE_FLOODLIGHT = 1;
        REPORT_TYPE_PATH_TO_CONVERSION = 2;
        REPORT_TYPE_REACH = 3;
        REPORT_TYPE_STANDARD = 4;
    }
    Report_Type type = 18;
}

message ReportCompatibleFields {
    // Dimensions which are compatible to be selected in the "dimensionFilters" section of the report.
    repeated Dimension dimensionFilters = 1;
    // Dimensions which are compatible to be selected in the "dimensions" section of the report.
    repeated Dimension dimensions = 2;
    // The kind of resource this is, in this case dfareporting#reportCompatibleFields.
    string kind = 3;
    // Metrics which are compatible to be selected in the "metricNames" section of the report.
    repeated Metric metrics = 4;
    // Metrics which are compatible to be selected as activity metrics to pivot on in the "activities" section of the report.
    repeated Metric pivotedActivityMetrics = 5;
}

message ReportList {
    // The eTag of this response for caching purposes.
    string etag = 1;
    // The reports returned in this response.
    repeated Report items = 2;
    // The kind of list this is, in this case dfareporting#reportList.
    string kind = 3;
    // Continuation token used to page through reports. To retrieve the next page of results, set the next request's "pageToken" to the value of this field. The page token is only valid for a limited amount of time and should not be persisted.
    string nextPageToken = 4;
}

message ReportsConfiguration {
    // Whether the exposure to conversion report is enabled. This report shows detailed pathway information on up to 10 of the most recent ad exposures seen by a user before converting.
    bool exposureToConversionEnabled = 1;
    // Default lookback windows for new advertisers in this account.
    LookbackConfiguration lookbackConfiguration = 2;
    // Report generation time zone ID of this account. This is a required field that can only be changed by a superuser.
    // Acceptable values are:
    // 
    // - "1" for "America/New_York"
    // - "2" for "Europe/London"
    // - "3" for "Europe/Paris"
    // - "4" for "Africa/Johannesburg"
    // - "5" for "Asia/Jerusalem"
    // - "6" for "Asia/Shanghai"
    // - "7" for "Asia/Hong_Kong"
    // - "8" for "Asia/Tokyo"
    // - "9" for "Australia/Sydney"
    // - "10" for "Asia/Dubai"
    // - "11" for "America/Los_Angeles"
    // - "12" for "Pacific/Auckland"
    // - "13" for "America/Sao_Paulo"
    string reportGenerationTimeZoneId = 3;
}

message RichMediaExitOverride {
    // Click-through URL of this rich media exit override. Applicable if the enabled field is set to true.
    ClickThroughUrl clickThroughUrl = 1;
    // Whether to use the clickThroughUrl. If false, the creative-level exit will be used.
    bool enabled = 2;
    // ID for the override to refer to a specific exit in the creative.
    string exitId = 3;
}

message Rule {
    // A creativeAssets[].id. This should refer to one of the parent assets in this creative. This is a required field.
    string assetId = 1;
    // A user-friendly name for this rule. This is a required field.
    string name = 2;
    // A targeting template ID. The targeting from the targeting template will be used to determine whether this asset should be served. This is a required field.
    string targetingTemplateId = 3;
}

message Site {
    // Account ID of this site. This is a read-only field that can be left blank.
    string accountId = 1;
    // Whether this site is approved.
    bool approved = 2;
    // Directory site associated with this site. This is a required field that is read-only after insertion.
    string directorySiteId = 3;
    // Dimension value for the ID of the directory site. This is a read-only, auto-generated field.
    DimensionValue directorySiteIdDimensionValue = 4;
    // ID of this site. This is a read-only, auto-generated field.
    string id = 5;
    // Dimension value for the ID of this site. This is a read-only, auto-generated field.
    DimensionValue idDimensionValue = 6;
    // Key name of this site. This is a read-only, auto-generated field.
    string keyName = 7;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#site".
    string kind = 8;
    // Name of this site.This is a required field. Must be less than 128 characters long. If this site is under a subaccount, the name must be unique among sites of the same subaccount. Otherwise, this site is a top-level site, and the name must be unique among top-level sites of the same account.
    string name = 9;
    // Site contacts.
    repeated SiteContact siteContacts = 10;
    // Site-wide settings.
    SiteSettings siteSettings = 11;
    // Subaccount ID of this site. This is a read-only field that can be left blank.
    string subaccountId = 12;
}

message SiteContact {
    // Address of this site contact.
    string address = 1;
    // Site contact type.
    enum SiteContact_ContactType {
        SITECONTACT_CONTACTTYPE_SALES_PERSON = 0;
        SITECONTACT_CONTACTTYPE_TRAFFICKER = 1;
    }
    SiteContact_ContactType contactType = 2;
    // Email address of this site contact. This is a required field.
    string email = 3;
    // First name of this site contact.
    string firstName = 4;
    // ID of this site contact. This is a read-only, auto-generated field.
    string id = 5;
    // Last name of this site contact.
    string lastName = 6;
    // Primary phone number of this site contact.
    string phone = 7;
    // Title or designation of this site contact.
    string title = 8;
}

message SiteSettings {
    // Whether active view creatives are disabled for this site.
    bool activeViewOptOut = 1;
    // Site-wide creative settings.
    CreativeSettings creativeSettings = 2;
    // Whether brand safe ads are disabled for this site.
    bool disableBrandSafeAds = 3;
    // Whether new cookies are disabled for this site.
    bool disableNewCookie = 4;
    // Lookback window settings for this site.
    LookbackConfiguration lookbackConfiguration = 5;
    // Configuration settings for dynamic and image floodlight tags.
    TagSetting tagSetting = 6;
    // Whether Verification and ActiveView for in-stream video creatives are disabled by default for new placements created under this site. This value will be used to populate the placement.videoActiveViewOptOut field, when no value is specified for the new placement.
    bool videoActiveViewOptOutTemplate = 7;
    // Default VPAID adapter setting for new placements created under this site. This value will be used to populate the placements.vpaidAdapterChoice field, when no value is specified for the new placement. Controls which VPAID format the measurement adapter will use for in-stream video creatives assigned to the placement. The publisher's specifications will typically determine this setting. For VPAID creatives, the adapter format will match the VPAID format (HTML5 VPAID creatives use the HTML5 adapter).
    // 
    // Note: Flash is no longer supported. This field now defaults to HTML5 when the following values are provided: FLASH, BOTH.
    enum SiteSettings_VpaidAdapterChoiceTemplate {
        SITESETTINGS_VPAIDADAPTERCHOICETEMPLATE_BOTH = 0;
        SITESETTINGS_VPAIDADAPTERCHOICETEMPLATE_DEFAULT = 1;
        SITESETTINGS_VPAIDADAPTERCHOICETEMPLATE_FLASH = 2;
        SITESETTINGS_VPAIDADAPTERCHOICETEMPLATE_HTML5 = 3;
    }
    SiteSettings_VpaidAdapterChoiceTemplate vpaidAdapterChoiceTemplate = 8;
}

message SitesListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#sitesListResponse".
    string kind = 1;
    // Pagination token to be used for the next list operation.
    string nextPageToken = 2;
    // Site collection.
    repeated Site sites = 3;
}

message Size {
    // Height of this size. Acceptable values are 0 to 32767, inclusive.
    int32 height = 1;
    // IAB standard size. This is a read-only, auto-generated field.
    bool iab = 2;
    // ID of this size. This is a read-only, auto-generated field.
    string id = 3;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#size".
    string kind = 4;
    // Width of this size. Acceptable values are 0 to 32767, inclusive.
    int32 width = 5;
}

message SizesListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#sizesListResponse".
    string kind = 1;
    // Size collection.
    repeated Size sizes = 2;
}

message SkippableSetting {
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#skippableSetting".
    string kind = 1;
    // Amount of time to play videos served to this placement before counting a view. Applicable when skippable is true.
    VideoOffset progressOffset = 2;
    // Amount of time to play videos served to this placement before the skip button should appear. Applicable when skippable is true.
    VideoOffset skipOffset = 3;
    // Whether the user can skip creatives served to this placement.
    bool skippable = 4;
}

message SortedDimension {
    // The kind of resource this is, in this case dfareporting#sortedDimension.
    string kind = 1;
    // The name of the dimension.
    string name = 2;
    // An optional sort order for the dimension column.
    enum SortedDimension_SortOrder {
        SORTEDDIMENSION_SORTORDER_ASCENDING = 0;
        SORTEDDIMENSION_SORTORDER_DESCENDING = 1;
    }
    SortedDimension_SortOrder sortOrder = 3;
}

message Subaccount {
    // ID of the account that contains this subaccount. This is a read-only field that can be left blank.
    string accountId = 1;
    // IDs of the available user role permissions for this subaccount.
    repeated string availablePermissionIds = 2;
    // ID of this subaccount. This is a read-only, auto-generated field.
    string id = 3;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#subaccount".
    string kind = 4;
    // Name of this subaccount. This is a required field. Must be less than 128 characters long and be unique among subaccounts of the same account.
    string name = 5;
}

message SubaccountsListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#subaccountsListResponse".
    string kind = 1;
    // Pagination token to be used for the next list operation.
    string nextPageToken = 2;
    // Subaccount collection.
    repeated Subaccount subaccounts = 3;
}

message TagData {
    // Ad associated with this placement tag. Applicable only when format is PLACEMENT_TAG_TRACKING.
    string adId = 1;
    // Tag string to record a click.
    string clickTag = 2;
    // Creative associated with this placement tag. Applicable only when format is PLACEMENT_TAG_TRACKING.
    string creativeId = 3;
    // TagData tag format of this tag.
    enum TagData_Format {
        TAGDATA_FORMAT_PLACEMENT_TAG_CLICK_COMMANDS = 0;
        TAGDATA_FORMAT_PLACEMENT_TAG_IFRAME_ILAYER = 1;
        TAGDATA_FORMAT_PLACEMENT_TAG_IFRAME_JAVASCRIPT = 2;
        TAGDATA_FORMAT_PLACEMENT_TAG_IFRAME_JAVASCRIPT_LEGACY = 3;
        TAGDATA_FORMAT_PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH = 4;
        TAGDATA_FORMAT_PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_3 = 5;
        TAGDATA_FORMAT_PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_4 = 6;
        TAGDATA_FORMAT_PLACEMENT_TAG_INTERNAL_REDIRECT = 7;
        TAGDATA_FORMAT_PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT = 8;
        TAGDATA_FORMAT_PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT_LEGACY = 9;
        TAGDATA_FORMAT_PLACEMENT_TAG_INTERSTITIAL_INTERNAL_REDIRECT = 10;
        TAGDATA_FORMAT_PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT = 11;
        TAGDATA_FORMAT_PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT_LEGACY = 12;
        TAGDATA_FORMAT_PLACEMENT_TAG_JAVASCRIPT = 13;
        TAGDATA_FORMAT_PLACEMENT_TAG_JAVASCRIPT_LEGACY = 14;
        TAGDATA_FORMAT_PLACEMENT_TAG_STANDARD = 15;
        TAGDATA_FORMAT_PLACEMENT_TAG_TRACKING = 16;
        TAGDATA_FORMAT_PLACEMENT_TAG_TRACKING_IFRAME = 17;
        TAGDATA_FORMAT_PLACEMENT_TAG_TRACKING_JAVASCRIPT = 18;
    }
    TagData_Format format = 4;
    // Tag string for serving an ad.
    string impressionTag = 5;
}

message TagSetting {
    // Additional key-values to be included in tags. Each key-value pair must be of the form key=value, and pairs must be separated by a semicolon (;). Keys and values must not contain commas. For example, id=2;color=red is a valid value for this field.
    string additionalKeyValues = 1;
    // Whether static landing page URLs should be included in the tags. This setting applies only to placements.
    bool includeClickThroughUrls = 2;
    // Whether click-tracking string should be included in the tags.
    bool includeClickTracking = 3;
    // Option specifying how keywords are embedded in ad tags. This setting can be used to specify whether keyword placeholders are inserted in placement tags for this site. Publishers can then add keywords to those placeholders.
    enum TagSetting_KeywordOption {
        TAGSETTING_KEYWORDOPTION_GENERATE_SEPARATE_TAG_FOR_EACH_KEYWORD = 0;
        TAGSETTING_KEYWORDOPTION_IGNORE = 1;
        TAGSETTING_KEYWORDOPTION_PLACEHOLDER_WITH_LIST_OF_KEYWORDS = 2;
    }
    TagSetting_KeywordOption keywordOption = 4;
}

message TagSettings {
    // Whether dynamic floodlight tags are enabled.
    bool dynamicTagEnabled = 1;
    // Whether image tags are enabled.
    bool imageTagEnabled = 2;
}

message TargetWindow {
    // User-entered value.
    string customHtml = 1;
    // Type of browser window for which the backup image of the flash creative can be displayed.
    enum TargetWindow_TargetWindowOption {
        TARGETWINDOW_TARGETWINDOWOPTION_CURRENT_WINDOW = 0;
        TARGETWINDOW_TARGETWINDOWOPTION_CUSTOM = 1;
        TARGETWINDOW_TARGETWINDOWOPTION_NEW_WINDOW = 2;
    }
    TargetWindow_TargetWindowOption targetWindowOption = 2;
}

message TargetableRemarketingList {
    // Account ID of this remarketing list. This is a read-only, auto-generated field that is only returned in GET requests.
    string accountId = 1;
    // Whether this targetable remarketing list is active.
    bool active = 2;
    // Dimension value for the advertiser ID that owns this targetable remarketing list.
    string advertiserId = 3;
    // Dimension value for the ID of the advertiser.
    DimensionValue advertiserIdDimensionValue = 4;
    // Targetable remarketing list description.
    string description = 5;
    // Targetable remarketing list ID.
    string id = 6;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#targetableRemarketingList".
    string kind = 7;
    // Number of days that a user should remain in the targetable remarketing list without an impression.
    string lifeSpan = 8;
    // Number of users currently in the list. This is a read-only field.
    string listSize = 9;
    // Product from which this targetable remarketing list was originated.
    enum TargetableRemarketingList_ListSource {
        TARGETABLEREMARKETINGLIST_LISTSOURCE_REMARKETING_LIST_SOURCE_ADX = 0;
        TARGETABLEREMARKETINGLIST_LISTSOURCE_REMARKETING_LIST_SOURCE_DBM = 1;
        TARGETABLEREMARKETINGLIST_LISTSOURCE_REMARKETING_LIST_SOURCE_DFA = 2;
        TARGETABLEREMARKETINGLIST_LISTSOURCE_REMARKETING_LIST_SOURCE_DFP = 3;
        TARGETABLEREMARKETINGLIST_LISTSOURCE_REMARKETING_LIST_SOURCE_DMP = 4;
        TARGETABLEREMARKETINGLIST_LISTSOURCE_REMARKETING_LIST_SOURCE_GA = 5;
        TARGETABLEREMARKETINGLIST_LISTSOURCE_REMARKETING_LIST_SOURCE_GPLUS = 6;
        TARGETABLEREMARKETINGLIST_LISTSOURCE_REMARKETING_LIST_SOURCE_OTHER = 7;
        TARGETABLEREMARKETINGLIST_LISTSOURCE_REMARKETING_LIST_SOURCE_PLAY_STORE = 8;
        TARGETABLEREMARKETINGLIST_LISTSOURCE_REMARKETING_LIST_SOURCE_XFP = 9;
        TARGETABLEREMARKETINGLIST_LISTSOURCE_REMARKETING_LIST_SOURCE_YOUTUBE = 10;
    }
    TargetableRemarketingList_ListSource listSource = 10;
    // Name of the targetable remarketing list. Is no greater than 128 characters long.
    string name = 11;
    // Subaccount ID of this remarketing list. This is a read-only, auto-generated field that is only returned in GET requests.
    string subaccountId = 12;
}

message TargetableRemarketingListsListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#targetableRemarketingListsListResponse".
    string kind = 1;
    // Pagination token to be used for the next list operation.
    string nextPageToken = 2;
    // Targetable remarketing list collection.
    repeated TargetableRemarketingList targetableRemarketingLists = 3;
}

message TargetingTemplate {
    // Account ID of this targeting template. This field, if left unset, will be auto-generated on insert and is read-only after insert.
    string accountId = 1;
    // Advertiser ID of this targeting template. This is a required field on insert and is read-only after insert.
    string advertiserId = 2;
    // Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.
    DimensionValue advertiserIdDimensionValue = 3;
    // Time and day targeting criteria.
    DayPartTargeting dayPartTargeting = 4;
    // Geographical targeting criteria.
    GeoTargeting geoTargeting = 5;
    // ID of this targeting template. This is a read-only, auto-generated field.
    string id = 6;
    // Key-value targeting criteria.
    KeyValueTargetingExpression keyValueTargetingExpression = 7;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#targetingTemplate".
    string kind = 8;
    // Language targeting criteria.
    LanguageTargeting languageTargeting = 9;
    // Remarketing list targeting criteria.
    ListTargetingExpression listTargetingExpression = 10;
    // Name of this targeting template. This field is required. It must be less than 256 characters long and unique within an advertiser.
    string name = 11;
    // Subaccount ID of this targeting template. This field, if left unset, will be auto-generated on insert and is read-only after insert.
    string subaccountId = 12;
    // Technology platform targeting criteria.
    TechnologyTargeting technologyTargeting = 13;
}

message TargetingTemplatesListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#targetingTemplatesListResponse".
    string kind = 1;
    // Pagination token to be used for the next list operation.
    string nextPageToken = 2;
    // Targeting template collection.
    repeated TargetingTemplate targetingTemplates = 3;
}

message TechnologyTargeting {
    // Browsers that this ad targets. For each browser either set browserVersionId or dartId along with the version numbers. If both are specified, only browserVersionId will be used. The other fields are populated automatically when the ad is inserted or updated.
    repeated Browser browsers = 1;
    // Connection types that this ad targets. For each connection type only id is required. The other fields are populated automatically when the ad is inserted or updated.
    repeated ConnectionType connectionTypes = 2;
    // Mobile carriers that this ad targets. For each mobile carrier only id is required, and the other fields are populated automatically when the ad is inserted or updated. If targeting a mobile carrier, do not set targeting for any zip codes.
    repeated MobileCarrier mobileCarriers = 3;
    // Operating system versions that this ad targets. To target all versions, use operatingSystems. For each operating system version, only id is required. The other fields are populated automatically when the ad is inserted or updated. If targeting an operating system version, do not set targeting for the corresponding operating system in operatingSystems.
    repeated OperatingSystemVersion operatingSystemVersions = 4;
    // Operating systems that this ad targets. To target specific versions, use operatingSystemVersions. For each operating system only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting an operating system, do not set targeting for operating system versions for the same operating system.
    repeated OperatingSystem operatingSystems = 5;
    // Platform types that this ad targets. For example, desktop, mobile, or tablet. For each platform type, only id is required, and the other fields are populated automatically when the ad is inserted or updated.
    repeated PlatformType platformTypes = 6;
}

message ThirdPartyAuthenticationToken {
    // Name of the third-party authentication token.
    string name = 1;
    // Value of the third-party authentication token. This is a read-only, auto-generated field.
    string value = 2;
}

message ThirdPartyTrackingUrl {
    // Third-party URL type for in-stream video creatives.
    enum ThirdPartyTrackingUrl_ThirdPartyUrlType {
        THIRDPARTYTRACKINGURL_THIRDPARTYURLTYPE_CLICK_TRACKING = 0;
        THIRDPARTYTRACKINGURL_THIRDPARTYURLTYPE_IMPRESSION = 1;
        THIRDPARTYTRACKINGURL_THIRDPARTYURLTYPE_RICH_MEDIA_BACKUP_IMPRESSION = 2;
        THIRDPARTYTRACKINGURL_THIRDPARTYURLTYPE_RICH_MEDIA_IMPRESSION = 3;
        THIRDPARTYTRACKINGURL_THIRDPARTYURLTYPE_RICH_MEDIA_RM_IMPRESSION = 4;
        THIRDPARTYTRACKINGURL_THIRDPARTYURLTYPE_SURVEY = 5;
        THIRDPARTYTRACKINGURL_THIRDPARTYURLTYPE_VIDEO_COMPLETE = 6;
        THIRDPARTYTRACKINGURL_THIRDPARTYURLTYPE_VIDEO_CUSTOM = 7;
        THIRDPARTYTRACKINGURL_THIRDPARTYURLTYPE_VIDEO_FIRST_QUARTILE = 8;
        THIRDPARTYTRACKINGURL_THIRDPARTYURLTYPE_VIDEO_FULLSCREEN = 9;
        THIRDPARTYTRACKINGURL_THIRDPARTYURLTYPE_VIDEO_MIDPOINT = 10;
        THIRDPARTYTRACKINGURL_THIRDPARTYURLTYPE_VIDEO_MUTE = 11;
        THIRDPARTYTRACKINGURL_THIRDPARTYURLTYPE_VIDEO_PAUSE = 12;
        THIRDPARTYTRACKINGURL_THIRDPARTYURLTYPE_VIDEO_PROGRESS = 13;
        THIRDPARTYTRACKINGURL_THIRDPARTYURLTYPE_VIDEO_REWIND = 14;
        THIRDPARTYTRACKINGURL_THIRDPARTYURLTYPE_VIDEO_SKIP = 15;
        THIRDPARTYTRACKINGURL_THIRDPARTYURLTYPE_VIDEO_START = 16;
        THIRDPARTYTRACKINGURL_THIRDPARTYURLTYPE_VIDEO_STOP = 17;
        THIRDPARTYTRACKINGURL_THIRDPARTYURLTYPE_VIDEO_THIRD_QUARTILE = 18;
    }
    ThirdPartyTrackingUrl_ThirdPartyUrlType thirdPartyUrlType = 1;
    // URL for the specified third-party URL type.
    string url = 2;
}

message TranscodeSetting {
    // Whitelist of video formats to be served to this placement. Set this list to null or empty to serve all video formats.
    repeated int32 enabledVideoFormats = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#transcodeSetting".
    string kind = 2;
}

message UserDefinedVariableConfiguration {
    // Data type for the variable. This is a required field.
    enum UserDefinedVariableConfiguration_DataType {
        USERDEFINEDVARIABLECONFIGURATION_DATATYPE_NUMBER = 0;
        USERDEFINEDVARIABLECONFIGURATION_DATATYPE_STRING = 1;
    }
    UserDefinedVariableConfiguration_DataType dataType = 1;
    // User-friendly name for the variable which will appear in reports. This is a required field, must be less than 64 characters long, and cannot contain the following characters: ""<>".
    string reportName = 2;
    // Variable name in the tag. This is a required field.
    enum UserDefinedVariableConfiguration_VariableType {
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U1 = 0;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U10 = 1;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U100 = 2;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U11 = 3;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U12 = 4;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U13 = 5;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U14 = 6;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U15 = 7;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U16 = 8;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U17 = 9;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U18 = 10;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U19 = 11;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U2 = 12;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U20 = 13;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U21 = 14;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U22 = 15;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U23 = 16;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U24 = 17;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U25 = 18;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U26 = 19;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U27 = 20;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U28 = 21;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U29 = 22;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U3 = 23;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U30 = 24;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U31 = 25;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U32 = 26;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U33 = 27;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U34 = 28;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U35 = 29;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U36 = 30;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U37 = 31;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U38 = 32;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U39 = 33;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U4 = 34;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U40 = 35;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U41 = 36;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U42 = 37;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U43 = 38;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U44 = 39;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U45 = 40;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U46 = 41;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U47 = 42;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U48 = 43;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U49 = 44;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U5 = 45;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U50 = 46;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U51 = 47;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U52 = 48;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U53 = 49;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U54 = 50;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U55 = 51;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U56 = 52;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U57 = 53;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U58 = 54;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U59 = 55;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U6 = 56;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U60 = 57;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U61 = 58;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U62 = 59;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U63 = 60;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U64 = 61;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U65 = 62;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U66 = 63;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U67 = 64;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U68 = 65;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U69 = 66;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U7 = 67;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U70 = 68;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U71 = 69;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U72 = 70;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U73 = 71;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U74 = 72;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U75 = 73;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U76 = 74;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U77 = 75;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U78 = 76;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U79 = 77;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U8 = 78;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U80 = 79;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U81 = 80;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U82 = 81;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U83 = 82;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U84 = 83;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U85 = 84;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U86 = 85;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U87 = 86;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U88 = 87;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U89 = 88;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U9 = 89;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U90 = 90;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U91 = 91;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U92 = 92;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U93 = 93;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U94 = 94;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U95 = 95;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U96 = 96;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U97 = 97;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U98 = 98;
        USERDEFINEDVARIABLECONFIGURATION_VARIABLETYPE_U99 = 99;
    }
    UserDefinedVariableConfiguration_VariableType variableType = 3;
}

message UserProfile {
    // The account ID to which this profile belongs.
    string accountId = 1;
    // The account name this profile belongs to.
    string accountName = 2;
    // The eTag of this response for caching purposes.
    string etag = 3;
    // The kind of resource this is, in this case dfareporting#userProfile.
    string kind = 4;
    // The unique ID of the user profile.
    string profileId = 5;
    // The sub account ID this profile belongs to if applicable.
    string subAccountId = 6;
    // The sub account name this profile belongs to if applicable.
    string subAccountName = 7;
    // The user name.
    string userName = 8;
}

message UserProfileList {
    // The eTag of this response for caching purposes.
    string etag = 1;
    // The user profiles returned in this response.
    repeated UserProfile items = 2;
    // The kind of list this is, in this case dfareporting#userProfileList.
    string kind = 3;
}

message UserRole {
    // Account ID of this user role. This is a read-only field that can be left blank.
    string accountId = 1;
    // Whether this is a default user role. Default user roles are created by the system for the account/subaccount and cannot be modified or deleted. Each default user role comes with a basic set of preassigned permissions.
    bool defaultUserRole = 2;
    // ID of this user role. This is a read-only, auto-generated field.
    string id = 3;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#userRole".
    string kind = 4;
    // Name of this user role. This is a required field. Must be less than 256 characters long. If this user role is under a subaccount, the name must be unique among sites of the same subaccount. Otherwise, this user role is a top-level user role, and the name must be unique among top-level user roles of the same account.
    string name = 5;
    // ID of the user role that this user role is based on or copied from. This is a required field.
    string parentUserRoleId = 6;
    // List of permissions associated with this user role.
    repeated UserRolePermission permissions = 7;
    // Subaccount ID of this user role. This is a read-only field that can be left blank.
    string subaccountId = 8;
}

message UserRolePermission {
    // Levels of availability for a user role permission.
    enum UserRolePermission_Availability {
        USERROLEPERMISSION_AVAILABILITY_ACCOUNT_ALWAYS = 0;
        USERROLEPERMISSION_AVAILABILITY_ACCOUNT_BY_DEFAULT = 1;
        USERROLEPERMISSION_AVAILABILITY_NOT_AVAILABLE_BY_DEFAULT = 2;
        USERROLEPERMISSION_AVAILABILITY_SUBACCOUNT_AND_ACCOUNT_ALWAYS = 3;
        USERROLEPERMISSION_AVAILABILITY_SUBACCOUNT_AND_ACCOUNT_BY_DEFAULT = 4;
    }
    UserRolePermission_Availability availability = 1;
    // ID of this user role permission.
    string id = 2;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#userRolePermission".
    string kind = 3;
    // Name of this user role permission.
    string name = 4;
    // ID of the permission group that this user role permission belongs to.
    string permissionGroupId = 5;
}

message UserRolePermissionGroup {
    // ID of this user role permission.
    string id = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#userRolePermissionGroup".
    string kind = 2;
    // Name of this user role permission group.
    string name = 3;
}

message UserRolePermissionGroupsListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#userRolePermissionGroupsListResponse".
    string kind = 1;
    // User role permission group collection.
    repeated UserRolePermissionGroup userRolePermissionGroups = 2;
}

message UserRolePermissionsListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#userRolePermissionsListResponse".
    string kind = 1;
    // User role permission collection.
    repeated UserRolePermission userRolePermissions = 2;
}

message UserRolesListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#userRolesListResponse".
    string kind = 1;
    // Pagination token to be used for the next list operation.
    string nextPageToken = 2;
    // User role collection.
    repeated UserRole userRoles = 3;
}

message VideoFormat {
    // File type of the video format.
    enum VideoFormat_FileType {
        VIDEOFORMAT_FILETYPE_FLV = 0;
        VIDEOFORMAT_FILETYPE_M3U8 = 1;
        VIDEOFORMAT_FILETYPE_MP4 = 2;
        VIDEOFORMAT_FILETYPE_THREEGPP = 3;
        VIDEOFORMAT_FILETYPE_WEBM = 4;
    }
    VideoFormat_FileType fileType = 1;
    // ID of the video format.
    int32 id = 2;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#videoFormat".
    string kind = 3;
    // The resolution of this video format.
    Size resolution = 4;
    // The target bit rate of this video format.
    int32 targetBitRate = 5;
}

message VideoFormatsListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#videoFormatsListResponse".
    string kind = 1;
    // Video format collection.
    repeated VideoFormat videoFormats = 2;
}

message VideoOffset {
    // Duration, as a percentage of video duration. Do not set when offsetSeconds is set. Acceptable values are 0 to 100, inclusive.
    int32 offsetPercentage = 1;
    // Duration, in seconds. Do not set when offsetPercentage is set. Acceptable values are 0 to 86399, inclusive.
    int32 offsetSeconds = 2;
}

message VideoSettings {
    // Settings for the companion creatives of video creatives served to this placement.
    CompanionSetting companionSettings = 1;
    // Identifies what kind of resource this is. Value: the fixed string "dfareporting#videoSettings".
    string kind = 2;
    // Settings for the skippability of video creatives served to this placement. If this object is provided, the creative-level skippable settings will be overridden.
    SkippableSetting skippableSettings = 3;
    // Settings for the transcodes of video creatives served to this placement. If this object is provided, the creative-level transcode settings will be overridden.
    TranscodeSetting transcodeSettings = 4;
}

enum Alt {
    JSON = 0;
}

service DCM/DFAReportingAndTraffickingService {
    // Retrieves a report file by its report ID and file ID. This method supports media download.
    rpc GetReportsReportIdFilesFileId(GetReportsReportIdFilesFileIdRequest) returns (File) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/reports/{reportId}/files/{fileId}"
      };
    }
    // Retrieves list of user profiles for a user.
    rpc GetUserprofiles(GetUserprofilesRequest) returns (UserProfileList) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles"
      };
    }
    // Gets one user profile by ID.
    rpc GetUserprofilesProfileId(GetUserprofilesProfileIdRequest) returns (UserProfile) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}"
      };
    }
    // Gets the account's active ad summary by account ID.
    rpc GetUserprofilesProfileIdAccountActiveAdSummariesSummaryAccountId(GetUserprofilesProfileIdAccountActiveAdSummariesSummaryAccountIdRequest) returns (AccountActiveAdSummary) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/accountActiveAdSummaries/{summaryAccountId}"
      };
    }
    // Retrieves the list of account permission groups.
    rpc GetUserprofilesProfileIdAccountPermissionGroups(GetUserprofilesProfileIdAccountPermissionGroupsRequest) returns (AccountPermissionGroupsListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/accountPermissionGroups"
      };
    }
    // Gets one account permission group by ID.
    rpc GetUserprofilesProfileIdAccountPermissionGroupsId(GetUserprofilesProfileIdAccountPermissionGroupsIdRequest) returns (AccountPermissionGroup) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/accountPermissionGroups/{id}"
      };
    }
    // Retrieves the list of account permissions.
    rpc GetUserprofilesProfileIdAccountPermissions(GetUserprofilesProfileIdAccountPermissionsRequest) returns (AccountPermissionsListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/accountPermissions"
      };
    }
    // Gets one account permission by ID.
    rpc GetUserprofilesProfileIdAccountPermissionsId(GetUserprofilesProfileIdAccountPermissionsIdRequest) returns (AccountPermission) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/accountPermissions/{id}"
      };
    }
    // Retrieves a list of account user profiles, possibly filtered. This method supports paging.
    rpc GetUserprofilesProfileIdAccountUserProfiles(GetUserprofilesProfileIdAccountUserProfilesRequest) returns (AccountUserProfilesListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/accountUserProfiles"
      };
    }
    // Updates an existing account user profile.
    rpc PutUserprofilesProfileIdAccountUserProfiles(PutUserprofilesProfileIdAccountUserProfilesRequest) returns (AccountUserProfile) {
      option (google.api.http) = {
        put: "/dfareporting/v2.7/userprofiles/{profileId}/accountUserProfiles"
        body: "body"
      };
    }
    // Inserts a new account user profile.
    rpc PostUserprofilesProfileIdAccountUserProfiles(PostUserprofilesProfileIdAccountUserProfilesRequest) returns (AccountUserProfile) {
      option (google.api.http) = {
        post: "/dfareporting/v2.7/userprofiles/{profileId}/accountUserProfiles"
        body: "body"
      };
    }
    // Gets one account user profile by ID.
    rpc GetUserprofilesProfileIdAccountUserProfilesId(GetUserprofilesProfileIdAccountUserProfilesIdRequest) returns (AccountUserProfile) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/accountUserProfiles/{id}"
      };
    }
    // Retrieves the list of accounts, possibly filtered. This method supports paging.
    rpc GetUserprofilesProfileIdAccounts(GetUserprofilesProfileIdAccountsRequest) returns (AccountsListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/accounts"
      };
    }
    // Updates an existing account.
    rpc PutUserprofilesProfileIdAccounts(PutUserprofilesProfileIdAccountsRequest) returns (Account) {
      option (google.api.http) = {
        put: "/dfareporting/v2.7/userprofiles/{profileId}/accounts"
        body: "body"
      };
    }
    // Gets one account by ID.
    rpc GetUserprofilesProfileIdAccountsId(GetUserprofilesProfileIdAccountsIdRequest) returns (Account) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/accounts/{id}"
      };
    }
    // Retrieves a list of ads, possibly filtered. This method supports paging.
    rpc GetUserprofilesProfileIdAds(GetUserprofilesProfileIdAdsRequest) returns (AdsListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/ads"
      };
    }
    // Updates an existing ad.
    rpc PutUserprofilesProfileIdAds(PutUserprofilesProfileIdAdsRequest) returns (Ad) {
      option (google.api.http) = {
        put: "/dfareporting/v2.7/userprofiles/{profileId}/ads"
        body: "body"
      };
    }
    // Inserts a new ad.
    rpc PostUserprofilesProfileIdAds(PostUserprofilesProfileIdAdsRequest) returns (Ad) {
      option (google.api.http) = {
        post: "/dfareporting/v2.7/userprofiles/{profileId}/ads"
        body: "body"
      };
    }
    // Gets one ad by ID.
    rpc GetUserprofilesProfileIdAdsId(GetUserprofilesProfileIdAdsIdRequest) returns (Ad) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/ads/{id}"
      };
    }
    // Retrieves a list of advertiser groups, possibly filtered. This method supports paging.
    rpc GetUserprofilesProfileIdAdvertiserGroups(GetUserprofilesProfileIdAdvertiserGroupsRequest) returns (AdvertiserGroupsListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/advertiserGroups"
      };
    }
    // Updates an existing advertiser group.
    rpc PutUserprofilesProfileIdAdvertiserGroups(PutUserprofilesProfileIdAdvertiserGroupsRequest) returns (AdvertiserGroup) {
      option (google.api.http) = {
        put: "/dfareporting/v2.7/userprofiles/{profileId}/advertiserGroups"
        body: "body"
      };
    }
    // Inserts a new advertiser group.
    rpc PostUserprofilesProfileIdAdvertiserGroups(PostUserprofilesProfileIdAdvertiserGroupsRequest) returns (AdvertiserGroup) {
      option (google.api.http) = {
        post: "/dfareporting/v2.7/userprofiles/{profileId}/advertiserGroups"
        body: "body"
      };
    }
    // Gets one advertiser group by ID.
    rpc GetUserprofilesProfileIdAdvertiserGroupsId(GetUserprofilesProfileIdAdvertiserGroupsIdRequest) returns (AdvertiserGroup) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/advertiserGroups/{id}"
      };
    }
    // Deletes an existing advertiser group.
    rpc DeleteUserprofilesProfileIdAdvertiserGroupsId(DeleteUserprofilesProfileIdAdvertiserGroupsIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/dfareporting/v2.7/userprofiles/{profileId}/advertiserGroups/{id}"
      };
    }
    // Retrieves a list of advertisers, possibly filtered. This method supports paging.
    rpc GetUserprofilesProfileIdAdvertisers(GetUserprofilesProfileIdAdvertisersRequest) returns (AdvertisersListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/advertisers"
      };
    }
    // Updates an existing advertiser.
    rpc PutUserprofilesProfileIdAdvertisers(PutUserprofilesProfileIdAdvertisersRequest) returns (Advertiser) {
      option (google.api.http) = {
        put: "/dfareporting/v2.7/userprofiles/{profileId}/advertisers"
        body: "body"
      };
    }
    // Inserts a new advertiser.
    rpc PostUserprofilesProfileIdAdvertisers(PostUserprofilesProfileIdAdvertisersRequest) returns (Advertiser) {
      option (google.api.http) = {
        post: "/dfareporting/v2.7/userprofiles/{profileId}/advertisers"
        body: "body"
      };
    }
    // Gets one advertiser by ID.
    rpc GetUserprofilesProfileIdAdvertisersId(GetUserprofilesProfileIdAdvertisersIdRequest) returns (Advertiser) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/advertisers/{id}"
      };
    }
    // Retrieves a list of browsers.
    rpc GetUserprofilesProfileIdBrowsers(GetUserprofilesProfileIdBrowsersRequest) returns (BrowsersListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/browsers"
      };
    }
    // Retrieves a list of campaigns, possibly filtered. This method supports paging.
    rpc GetUserprofilesProfileIdCampaigns(GetUserprofilesProfileIdCampaignsRequest) returns (CampaignsListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/campaigns"
      };
    }
    // Updates an existing campaign.
    rpc PutUserprofilesProfileIdCampaigns(PutUserprofilesProfileIdCampaignsRequest) returns (Campaign) {
      option (google.api.http) = {
        put: "/dfareporting/v2.7/userprofiles/{profileId}/campaigns"
        body: "body"
      };
    }
    // Inserts a new campaign.
    rpc PostUserprofilesProfileIdCampaigns(PostUserprofilesProfileIdCampaignsRequest) returns (Campaign) {
      option (google.api.http) = {
        post: "/dfareporting/v2.7/userprofiles/{profileId}/campaigns"
        body: "body"
      };
    }
    // Retrieves the list of creative IDs associated with the specified campaign. This method supports paging.
    rpc GetUserprofilesProfileIdCampaignsCampaignIdCampaignCreativeAssociations(GetUserprofilesProfileIdCampaignsCampaignIdCampaignCreativeAssociationsRequest) returns (CampaignCreativeAssociationsListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/campaigns/{campaignId}/campaignCreativeAssociations"
      };
    }
    // Associates a creative with the specified campaign. This method creates a default ad with dimensions matching the creative in the campaign if such a default ad does not exist already.
    rpc PostUserprofilesProfileIdCampaignsCampaignIdCampaignCreativeAssociations(PostUserprofilesProfileIdCampaignsCampaignIdCampaignCreativeAssociationsRequest) returns (CampaignCreativeAssociation) {
      option (google.api.http) = {
        post: "/dfareporting/v2.7/userprofiles/{profileId}/campaigns/{campaignId}/campaignCreativeAssociations"
        body: "body"
      };
    }
    // Retrieves the list of landing pages for the specified campaign.
    rpc GetUserprofilesProfileIdCampaignsCampaignIdLandingPages(GetUserprofilesProfileIdCampaignsCampaignIdLandingPagesRequest) returns (LandingPagesListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/campaigns/{campaignId}/landingPages"
      };
    }
    // Updates an existing campaign landing page.
    rpc PutUserprofilesProfileIdCampaignsCampaignIdLandingPages(PutUserprofilesProfileIdCampaignsCampaignIdLandingPagesRequest) returns (LandingPage) {
      option (google.api.http) = {
        put: "/dfareporting/v2.7/userprofiles/{profileId}/campaigns/{campaignId}/landingPages"
        body: "body"
      };
    }
    // Inserts a new landing page for the specified campaign.
    rpc PostUserprofilesProfileIdCampaignsCampaignIdLandingPages(PostUserprofilesProfileIdCampaignsCampaignIdLandingPagesRequest) returns (LandingPage) {
      option (google.api.http) = {
        post: "/dfareporting/v2.7/userprofiles/{profileId}/campaigns/{campaignId}/landingPages"
        body: "body"
      };
    }
    // Gets one campaign landing page by ID.
    rpc GetUserprofilesProfileIdCampaignsCampaignIdLandingPagesId(GetUserprofilesProfileIdCampaignsCampaignIdLandingPagesIdRequest) returns (LandingPage) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/campaigns/{campaignId}/landingPages/{id}"
      };
    }
    // Deletes an existing campaign landing page.
    rpc DeleteUserprofilesProfileIdCampaignsCampaignIdLandingPagesId(DeleteUserprofilesProfileIdCampaignsCampaignIdLandingPagesIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/dfareporting/v2.7/userprofiles/{profileId}/campaigns/{campaignId}/landingPages/{id}"
      };
    }
    // Gets one campaign by ID.
    rpc GetUserprofilesProfileIdCampaignsId(GetUserprofilesProfileIdCampaignsIdRequest) returns (Campaign) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/campaigns/{id}"
      };
    }
    // Retrieves a list of change logs. This method supports paging.
    rpc GetUserprofilesProfileIdChangeLogs(GetUserprofilesProfileIdChangeLogsRequest) returns (ChangeLogsListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/changeLogs"
      };
    }
    // Gets one change log by ID.
    rpc GetUserprofilesProfileIdChangeLogsId(GetUserprofilesProfileIdChangeLogsIdRequest) returns (ChangeLog) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/changeLogs/{id}"
      };
    }
    // Retrieves a list of cities, possibly filtered.
    rpc GetUserprofilesProfileIdCities(GetUserprofilesProfileIdCitiesRequest) returns (CitiesListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/cities"
      };
    }
    // Retrieves a list of connection types.
    rpc GetUserprofilesProfileIdConnectionTypes(GetUserprofilesProfileIdConnectionTypesRequest) returns (ConnectionTypesListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/connectionTypes"
      };
    }
    // Gets one connection type by ID.
    rpc GetUserprofilesProfileIdConnectionTypesId(GetUserprofilesProfileIdConnectionTypesIdRequest) returns (ConnectionType) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/connectionTypes/{id}"
      };
    }
    // Retrieves a list of content categories, possibly filtered. This method supports paging.
    rpc GetUserprofilesProfileIdContentCategories(GetUserprofilesProfileIdContentCategoriesRequest) returns (ContentCategoriesListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/contentCategories"
      };
    }
    // Updates an existing content category.
    rpc PutUserprofilesProfileIdContentCategories(PutUserprofilesProfileIdContentCategoriesRequest) returns (ContentCategory) {
      option (google.api.http) = {
        put: "/dfareporting/v2.7/userprofiles/{profileId}/contentCategories"
        body: "body"
      };
    }
    // Inserts a new content category.
    rpc PostUserprofilesProfileIdContentCategories(PostUserprofilesProfileIdContentCategoriesRequest) returns (ContentCategory) {
      option (google.api.http) = {
        post: "/dfareporting/v2.7/userprofiles/{profileId}/contentCategories"
        body: "body"
      };
    }
    // Gets one content category by ID.
    rpc GetUserprofilesProfileIdContentCategoriesId(GetUserprofilesProfileIdContentCategoriesIdRequest) returns (ContentCategory) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/contentCategories/{id}"
      };
    }
    // Deletes an existing content category.
    rpc DeleteUserprofilesProfileIdContentCategoriesId(DeleteUserprofilesProfileIdContentCategoriesIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/dfareporting/v2.7/userprofiles/{profileId}/contentCategories/{id}"
      };
    }
    // Inserts conversions.
    rpc PostUserprofilesProfileIdConversionsBatchinsert(PostUserprofilesProfileIdConversionsBatchinsertRequest) returns (ConversionsBatchInsertResponse) {
      option (google.api.http) = {
        post: "/dfareporting/v2.7/userprofiles/{profileId}/conversions/batchinsert"
        body: "body"
      };
    }
    // Retrieves a list of countries.
    rpc GetUserprofilesProfileIdCountries(GetUserprofilesProfileIdCountriesRequest) returns (CountriesListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/countries"
      };
    }
    // Gets one country by ID.
    rpc GetUserprofilesProfileIdCountriesDartId(GetUserprofilesProfileIdCountriesDartIdRequest) returns (Country) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/countries/{dartId}"
      };
    }
    // Inserts a new creative asset.
    rpc PostUserprofilesProfileIdCreativeAssetsAdvertiserIdCreativeAssets(PostUserprofilesProfileIdCreativeAssetsAdvertiserIdCreativeAssetsRequest) returns (CreativeAssetMetadata) {
      option (google.api.http) = {
        post: "/dfareporting/v2.7/userprofiles/{profileId}/creativeAssets/{advertiserId}/creativeAssets"
        body: "body"
      };
    }
    // Retrieves a list of creative fields, possibly filtered. This method supports paging.
    rpc GetUserprofilesProfileIdCreativeFields(GetUserprofilesProfileIdCreativeFieldsRequest) returns (CreativeFieldsListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/creativeFields"
      };
    }
    // Updates an existing creative field.
    rpc PutUserprofilesProfileIdCreativeFields(PutUserprofilesProfileIdCreativeFieldsRequest) returns (CreativeField) {
      option (google.api.http) = {
        put: "/dfareporting/v2.7/userprofiles/{profileId}/creativeFields"
        body: "body"
      };
    }
    // Inserts a new creative field.
    rpc PostUserprofilesProfileIdCreativeFields(PostUserprofilesProfileIdCreativeFieldsRequest) returns (CreativeField) {
      option (google.api.http) = {
        post: "/dfareporting/v2.7/userprofiles/{profileId}/creativeFields"
        body: "body"
      };
    }
    // Retrieves a list of creative field values, possibly filtered. This method supports paging.
    rpc GetUserprofilesProfileIdCreativeFieldsCreativeFieldIdCreativeFieldValues(GetUserprofilesProfileIdCreativeFieldsCreativeFieldIdCreativeFieldValuesRequest) returns (CreativeFieldValuesListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues"
      };
    }
    // Updates an existing creative field value.
    rpc PutUserprofilesProfileIdCreativeFieldsCreativeFieldIdCreativeFieldValues(PutUserprofilesProfileIdCreativeFieldsCreativeFieldIdCreativeFieldValuesRequest) returns (CreativeFieldValue) {
      option (google.api.http) = {
        put: "/dfareporting/v2.7/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues"
        body: "body"
      };
    }
    // Inserts a new creative field value.
    rpc PostUserprofilesProfileIdCreativeFieldsCreativeFieldIdCreativeFieldValues(PostUserprofilesProfileIdCreativeFieldsCreativeFieldIdCreativeFieldValuesRequest) returns (CreativeFieldValue) {
      option (google.api.http) = {
        post: "/dfareporting/v2.7/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues"
        body: "body"
      };
    }
    // Gets one creative field value by ID.
    rpc GetUserprofilesProfileIdCreativeFieldsCreativeFieldIdCreativeFieldValuesId(GetUserprofilesProfileIdCreativeFieldsCreativeFieldIdCreativeFieldValuesIdRequest) returns (CreativeFieldValue) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues/{id}"
      };
    }
    // Deletes an existing creative field value.
    rpc DeleteUserprofilesProfileIdCreativeFieldsCreativeFieldIdCreativeFieldValuesId(DeleteUserprofilesProfileIdCreativeFieldsCreativeFieldIdCreativeFieldValuesIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/dfareporting/v2.7/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues/{id}"
      };
    }
    // Gets one creative field by ID.
    rpc GetUserprofilesProfileIdCreativeFieldsId(GetUserprofilesProfileIdCreativeFieldsIdRequest) returns (CreativeField) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/creativeFields/{id}"
      };
    }
    // Deletes an existing creative field.
    rpc DeleteUserprofilesProfileIdCreativeFieldsId(DeleteUserprofilesProfileIdCreativeFieldsIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/dfareporting/v2.7/userprofiles/{profileId}/creativeFields/{id}"
      };
    }
    // Retrieves a list of creative groups, possibly filtered. This method supports paging.
    rpc GetUserprofilesProfileIdCreativeGroups(GetUserprofilesProfileIdCreativeGroupsRequest) returns (CreativeGroupsListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/creativeGroups"
      };
    }
    // Updates an existing creative group.
    rpc PutUserprofilesProfileIdCreativeGroups(PutUserprofilesProfileIdCreativeGroupsRequest) returns (CreativeGroup) {
      option (google.api.http) = {
        put: "/dfareporting/v2.7/userprofiles/{profileId}/creativeGroups"
        body: "body"
      };
    }
    // Inserts a new creative group.
    rpc PostUserprofilesProfileIdCreativeGroups(PostUserprofilesProfileIdCreativeGroupsRequest) returns (CreativeGroup) {
      option (google.api.http) = {
        post: "/dfareporting/v2.7/userprofiles/{profileId}/creativeGroups"
        body: "body"
      };
    }
    // Gets one creative group by ID.
    rpc GetUserprofilesProfileIdCreativeGroupsId(GetUserprofilesProfileIdCreativeGroupsIdRequest) returns (CreativeGroup) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/creativeGroups/{id}"
      };
    }
    // Retrieves a list of creatives, possibly filtered. This method supports paging.
    rpc GetUserprofilesProfileIdCreatives(GetUserprofilesProfileIdCreativesRequest) returns (CreativesListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/creatives"
      };
    }
    // Updates an existing creative.
    rpc PutUserprofilesProfileIdCreatives(PutUserprofilesProfileIdCreativesRequest) returns (Creative) {
      option (google.api.http) = {
        put: "/dfareporting/v2.7/userprofiles/{profileId}/creatives"
        body: "body"
      };
    }
    // Inserts a new creative.
    rpc PostUserprofilesProfileIdCreatives(PostUserprofilesProfileIdCreativesRequest) returns (Creative) {
      option (google.api.http) = {
        post: "/dfareporting/v2.7/userprofiles/{profileId}/creatives"
        body: "body"
      };
    }
    // Gets one creative by ID.
    rpc GetUserprofilesProfileIdCreativesId(GetUserprofilesProfileIdCreativesIdRequest) returns (Creative) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/creatives/{id}"
      };
    }
    // Retrieves list of report dimension values for a list of filters.
    rpc PostUserprofilesProfileIdDimensionvaluesQuery(PostUserprofilesProfileIdDimensionvaluesQueryRequest) returns (DimensionValueList) {
      option (google.api.http) = {
        post: "/dfareporting/v2.7/userprofiles/{profileId}/dimensionvalues/query"
        body: "body"
      };
    }
    // Retrieves a list of directory site contacts, possibly filtered. This method supports paging.
    rpc GetUserprofilesProfileIdDirectorySiteContacts(GetUserprofilesProfileIdDirectorySiteContactsRequest) returns (DirectorySiteContactsListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/directorySiteContacts"
      };
    }
    // Gets one directory site contact by ID.
    rpc GetUserprofilesProfileIdDirectorySiteContactsId(GetUserprofilesProfileIdDirectorySiteContactsIdRequest) returns (DirectorySiteContact) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/directorySiteContacts/{id}"
      };
    }
    // Retrieves a list of directory sites, possibly filtered. This method supports paging.
    rpc GetUserprofilesProfileIdDirectorySites(GetUserprofilesProfileIdDirectorySitesRequest) returns (DirectorySitesListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/directorySites"
      };
    }
    // Inserts a new directory site.
    rpc PostUserprofilesProfileIdDirectorySites(PostUserprofilesProfileIdDirectorySitesRequest) returns (DirectorySite) {
      option (google.api.http) = {
        post: "/dfareporting/v2.7/userprofiles/{profileId}/directorySites"
        body: "body"
      };
    }
    // Gets one directory site by ID.
    rpc GetUserprofilesProfileIdDirectorySitesId(GetUserprofilesProfileIdDirectorySitesIdRequest) returns (DirectorySite) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/directorySites/{id}"
      };
    }
    // Retrieves a list of dynamic targeting keys.
    rpc GetUserprofilesProfileIdDynamicTargetingKeys(GetUserprofilesProfileIdDynamicTargetingKeysRequest) returns (DynamicTargetingKeysListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/dynamicTargetingKeys"
      };
    }
    // Inserts a new dynamic targeting key. Keys must be created at the advertiser level before being assigned to the advertiser's ads, creatives, or placements. There is a maximum of 1000 keys per advertiser, out of which a maximum of 20 keys can be assigned per ad, creative, or placement.
    rpc PostUserprofilesProfileIdDynamicTargetingKeys(PostUserprofilesProfileIdDynamicTargetingKeysRequest) returns (DynamicTargetingKey) {
      option (google.api.http) = {
        post: "/dfareporting/v2.7/userprofiles/{profileId}/dynamicTargetingKeys"
        body: "body"
      };
    }
    // Deletes an existing dynamic targeting key.
    rpc DeleteUserprofilesProfileIdDynamicTargetingKeysObjectId(DeleteUserprofilesProfileIdDynamicTargetingKeysObjectIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/dfareporting/v2.7/userprofiles/{profileId}/dynamicTargetingKeys/{objectId}"
      };
    }
    // Retrieves a list of event tags, possibly filtered.
    rpc GetUserprofilesProfileIdEventTags(GetUserprofilesProfileIdEventTagsRequest) returns (EventTagsListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/eventTags"
      };
    }
    // Updates an existing event tag.
    rpc PutUserprofilesProfileIdEventTags(PutUserprofilesProfileIdEventTagsRequest) returns (EventTag) {
      option (google.api.http) = {
        put: "/dfareporting/v2.7/userprofiles/{profileId}/eventTags"
        body: "body"
      };
    }
    // Inserts a new event tag.
    rpc PostUserprofilesProfileIdEventTags(PostUserprofilesProfileIdEventTagsRequest) returns (EventTag) {
      option (google.api.http) = {
        post: "/dfareporting/v2.7/userprofiles/{profileId}/eventTags"
        body: "body"
      };
    }
    // Gets one event tag by ID.
    rpc GetUserprofilesProfileIdEventTagsId(GetUserprofilesProfileIdEventTagsIdRequest) returns (EventTag) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/eventTags/{id}"
      };
    }
    // Deletes an existing event tag.
    rpc DeleteUserprofilesProfileIdEventTagsId(DeleteUserprofilesProfileIdEventTagsIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/dfareporting/v2.7/userprofiles/{profileId}/eventTags/{id}"
      };
    }
    // Lists files for a user profile.
    rpc GetUserprofilesProfileIdFiles(GetUserprofilesProfileIdFilesRequest) returns (FileList) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/files"
      };
    }
    // Retrieves a list of floodlight activities, possibly filtered. This method supports paging.
    rpc GetUserprofilesProfileIdFloodlightActivities(GetUserprofilesProfileIdFloodlightActivitiesRequest) returns (FloodlightActivitiesListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/floodlightActivities"
      };
    }
    // Updates an existing floodlight activity.
    rpc PutUserprofilesProfileIdFloodlightActivities(PutUserprofilesProfileIdFloodlightActivitiesRequest) returns (FloodlightActivity) {
      option (google.api.http) = {
        put: "/dfareporting/v2.7/userprofiles/{profileId}/floodlightActivities"
        body: "body"
      };
    }
    // Inserts a new floodlight activity.
    rpc PostUserprofilesProfileIdFloodlightActivities(PostUserprofilesProfileIdFloodlightActivitiesRequest) returns (FloodlightActivity) {
      option (google.api.http) = {
        post: "/dfareporting/v2.7/userprofiles/{profileId}/floodlightActivities"
        body: "body"
      };
    }
    // Generates a tag for a floodlight activity.
    rpc PostUserprofilesProfileIdFloodlightActivitiesGeneratetag(PostUserprofilesProfileIdFloodlightActivitiesGeneratetagRequest) returns (FloodlightActivitiesGenerateTagResponse) {
      option (google.api.http) = {
        post: "/dfareporting/v2.7/userprofiles/{profileId}/floodlightActivities/generatetag"
      };
    }
    // Gets one floodlight activity by ID.
    rpc GetUserprofilesProfileIdFloodlightActivitiesId(GetUserprofilesProfileIdFloodlightActivitiesIdRequest) returns (FloodlightActivity) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/floodlightActivities/{id}"
      };
    }
    // Deletes an existing floodlight activity.
    rpc DeleteUserprofilesProfileIdFloodlightActivitiesId(DeleteUserprofilesProfileIdFloodlightActivitiesIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/dfareporting/v2.7/userprofiles/{profileId}/floodlightActivities/{id}"
      };
    }
    // Retrieves a list of floodlight activity groups, possibly filtered. This method supports paging.
    rpc GetUserprofilesProfileIdFloodlightActivityGroups(GetUserprofilesProfileIdFloodlightActivityGroupsRequest) returns (FloodlightActivityGroupsListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/floodlightActivityGroups"
      };
    }
    // Updates an existing floodlight activity group.
    rpc PutUserprofilesProfileIdFloodlightActivityGroups(PutUserprofilesProfileIdFloodlightActivityGroupsRequest) returns (FloodlightActivityGroup) {
      option (google.api.http) = {
        put: "/dfareporting/v2.7/userprofiles/{profileId}/floodlightActivityGroups"
        body: "body"
      };
    }
    // Inserts a new floodlight activity group.
    rpc PostUserprofilesProfileIdFloodlightActivityGroups(PostUserprofilesProfileIdFloodlightActivityGroupsRequest) returns (FloodlightActivityGroup) {
      option (google.api.http) = {
        post: "/dfareporting/v2.7/userprofiles/{profileId}/floodlightActivityGroups"
        body: "body"
      };
    }
    // Gets one floodlight activity group by ID.
    rpc GetUserprofilesProfileIdFloodlightActivityGroupsId(GetUserprofilesProfileIdFloodlightActivityGroupsIdRequest) returns (FloodlightActivityGroup) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/floodlightActivityGroups/{id}"
      };
    }
    // Retrieves a list of floodlight configurations, possibly filtered.
    rpc GetUserprofilesProfileIdFloodlightConfigurations(GetUserprofilesProfileIdFloodlightConfigurationsRequest) returns (FloodlightConfigurationsListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/floodlightConfigurations"
      };
    }
    // Updates an existing floodlight configuration.
    rpc PutUserprofilesProfileIdFloodlightConfigurations(PutUserprofilesProfileIdFloodlightConfigurationsRequest) returns (FloodlightConfiguration) {
      option (google.api.http) = {
        put: "/dfareporting/v2.7/userprofiles/{profileId}/floodlightConfigurations"
        body: "body"
      };
    }
    // Gets one floodlight configuration by ID.
    rpc GetUserprofilesProfileIdFloodlightConfigurationsId(GetUserprofilesProfileIdFloodlightConfigurationsIdRequest) returns (FloodlightConfiguration) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/floodlightConfigurations/{id}"
      };
    }
    // Retrieves a list of languages.
    rpc GetUserprofilesProfileIdLanguages(GetUserprofilesProfileIdLanguagesRequest) returns (LanguagesListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/languages"
      };
    }
    // Retrieves a list of metros.
    rpc GetUserprofilesProfileIdMetros(GetUserprofilesProfileIdMetrosRequest) returns (MetrosListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/metros"
      };
    }
    // Retrieves a list of mobile carriers.
    rpc GetUserprofilesProfileIdMobileCarriers(GetUserprofilesProfileIdMobileCarriersRequest) returns (MobileCarriersListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/mobileCarriers"
      };
    }
    // Gets one mobile carrier by ID.
    rpc GetUserprofilesProfileIdMobileCarriersId(GetUserprofilesProfileIdMobileCarriersIdRequest) returns (MobileCarrier) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/mobileCarriers/{id}"
      };
    }
    // Retrieves a list of operating system versions.
    rpc GetUserprofilesProfileIdOperatingSystemVersions(GetUserprofilesProfileIdOperatingSystemVersionsRequest) returns (OperatingSystemVersionsListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/operatingSystemVersions"
      };
    }
    // Gets one operating system version by ID.
    rpc GetUserprofilesProfileIdOperatingSystemVersionsId(GetUserprofilesProfileIdOperatingSystemVersionsIdRequest) returns (OperatingSystemVersion) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/operatingSystemVersions/{id}"
      };
    }
    // Retrieves a list of operating systems.
    rpc GetUserprofilesProfileIdOperatingSystems(GetUserprofilesProfileIdOperatingSystemsRequest) returns (OperatingSystemsListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/operatingSystems"
      };
    }
    // Gets one operating system by DART ID.
    rpc GetUserprofilesProfileIdOperatingSystemsDartId(GetUserprofilesProfileIdOperatingSystemsDartIdRequest) returns (OperatingSystem) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/operatingSystems/{dartId}"
      };
    }
    // Retrieves a list of placement groups, possibly filtered. This method supports paging.
    rpc GetUserprofilesProfileIdPlacementGroups(GetUserprofilesProfileIdPlacementGroupsRequest) returns (PlacementGroupsListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/placementGroups"
      };
    }
    // Updates an existing placement group.
    rpc PutUserprofilesProfileIdPlacementGroups(PutUserprofilesProfileIdPlacementGroupsRequest) returns (PlacementGroup) {
      option (google.api.http) = {
        put: "/dfareporting/v2.7/userprofiles/{profileId}/placementGroups"
        body: "body"
      };
    }
    // Inserts a new placement group.
    rpc PostUserprofilesProfileIdPlacementGroups(PostUserprofilesProfileIdPlacementGroupsRequest) returns (PlacementGroup) {
      option (google.api.http) = {
        post: "/dfareporting/v2.7/userprofiles/{profileId}/placementGroups"
        body: "body"
      };
    }
    // Gets one placement group by ID.
    rpc GetUserprofilesProfileIdPlacementGroupsId(GetUserprofilesProfileIdPlacementGroupsIdRequest) returns (PlacementGroup) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/placementGroups/{id}"
      };
    }
    // Retrieves a list of placement strategies, possibly filtered. This method supports paging.
    rpc GetUserprofilesProfileIdPlacementStrategies(GetUserprofilesProfileIdPlacementStrategiesRequest) returns (PlacementStrategiesListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/placementStrategies"
      };
    }
    // Updates an existing placement strategy.
    rpc PutUserprofilesProfileIdPlacementStrategies(PutUserprofilesProfileIdPlacementStrategiesRequest) returns (PlacementStrategy) {
      option (google.api.http) = {
        put: "/dfareporting/v2.7/userprofiles/{profileId}/placementStrategies"
        body: "body"
      };
    }
    // Inserts a new placement strategy.
    rpc PostUserprofilesProfileIdPlacementStrategies(PostUserprofilesProfileIdPlacementStrategiesRequest) returns (PlacementStrategy) {
      option (google.api.http) = {
        post: "/dfareporting/v2.7/userprofiles/{profileId}/placementStrategies"
        body: "body"
      };
    }
    // Gets one placement strategy by ID.
    rpc GetUserprofilesProfileIdPlacementStrategiesId(GetUserprofilesProfileIdPlacementStrategiesIdRequest) returns (PlacementStrategy) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/placementStrategies/{id}"
      };
    }
    // Deletes an existing placement strategy.
    rpc DeleteUserprofilesProfileIdPlacementStrategiesId(DeleteUserprofilesProfileIdPlacementStrategiesIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/dfareporting/v2.7/userprofiles/{profileId}/placementStrategies/{id}"
      };
    }
    // Retrieves a list of placements, possibly filtered. This method supports paging.
    rpc GetUserprofilesProfileIdPlacements(GetUserprofilesProfileIdPlacementsRequest) returns (PlacementsListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/placements"
      };
    }
    // Updates an existing placement.
    rpc PutUserprofilesProfileIdPlacements(PutUserprofilesProfileIdPlacementsRequest) returns (Placement) {
      option (google.api.http) = {
        put: "/dfareporting/v2.7/userprofiles/{profileId}/placements"
        body: "body"
      };
    }
    // Inserts a new placement.
    rpc PostUserprofilesProfileIdPlacements(PostUserprofilesProfileIdPlacementsRequest) returns (Placement) {
      option (google.api.http) = {
        post: "/dfareporting/v2.7/userprofiles/{profileId}/placements"
        body: "body"
      };
    }
    // Generates tags for a placement.
    rpc PostUserprofilesProfileIdPlacementsGeneratetags(PostUserprofilesProfileIdPlacementsGeneratetagsRequest) returns (PlacementsGenerateTagsResponse) {
      option (google.api.http) = {
        post: "/dfareporting/v2.7/userprofiles/{profileId}/placements/generatetags"
      };
    }
    // Gets one placement by ID.
    rpc GetUserprofilesProfileIdPlacementsId(GetUserprofilesProfileIdPlacementsIdRequest) returns (Placement) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/placements/{id}"
      };
    }
    // Retrieves a list of platform types.
    rpc GetUserprofilesProfileIdPlatformTypes(GetUserprofilesProfileIdPlatformTypesRequest) returns (PlatformTypesListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/platformTypes"
      };
    }
    // Gets one platform type by ID.
    rpc GetUserprofilesProfileIdPlatformTypesId(GetUserprofilesProfileIdPlatformTypesIdRequest) returns (PlatformType) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/platformTypes/{id}"
      };
    }
    // Retrieves a list of postal codes.
    rpc GetUserprofilesProfileIdPostalCodes(GetUserprofilesProfileIdPostalCodesRequest) returns (PostalCodesListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/postalCodes"
      };
    }
    // Gets one postal code by ID.
    rpc GetUserprofilesProfileIdPostalCodesCode(GetUserprofilesProfileIdPostalCodesCodeRequest) returns (PostalCode) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/postalCodes/{code}"
      };
    }
    // Retrieves a list of projects, possibly filtered. This method supports paging.
    rpc GetUserprofilesProfileIdProjects(GetUserprofilesProfileIdProjectsRequest) returns (ProjectsListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/projects"
      };
    }
    // Gets one project by ID.
    rpc GetUserprofilesProfileIdProjectsId(GetUserprofilesProfileIdProjectsIdRequest) returns (Project) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/projects/{id}"
      };
    }
    // Retrieves a list of inventory items, possibly filtered. This method supports paging.
    rpc GetUserprofilesProfileIdProjectsProjectIdInventoryItems(GetUserprofilesProfileIdProjectsProjectIdInventoryItemsRequest) returns (InventoryItemsListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/projects/{projectId}/inventoryItems"
      };
    }
    // Gets one inventory item by ID.
    rpc GetUserprofilesProfileIdProjectsProjectIdInventoryItemsId(GetUserprofilesProfileIdProjectsProjectIdInventoryItemsIdRequest) returns (InventoryItem) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/projects/{projectId}/inventoryItems/{id}"
      };
    }
    // Retrieves a list of order documents, possibly filtered. This method supports paging.
    rpc GetUserprofilesProfileIdProjectsProjectIdOrderDocuments(GetUserprofilesProfileIdProjectsProjectIdOrderDocumentsRequest) returns (OrderDocumentsListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/projects/{projectId}/orderDocuments"
      };
    }
    // Gets one order document by ID.
    rpc GetUserprofilesProfileIdProjectsProjectIdOrderDocumentsId(GetUserprofilesProfileIdProjectsProjectIdOrderDocumentsIdRequest) returns (OrderDocument) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/projects/{projectId}/orderDocuments/{id}"
      };
    }
    // Retrieves a list of orders, possibly filtered. This method supports paging.
    rpc GetUserprofilesProfileIdProjectsProjectIdOrders(GetUserprofilesProfileIdProjectsProjectIdOrdersRequest) returns (OrdersListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/projects/{projectId}/orders"
      };
    }
    // Gets one order by ID.
    rpc GetUserprofilesProfileIdProjectsProjectIdOrdersId(GetUserprofilesProfileIdProjectsProjectIdOrdersIdRequest) returns (Order) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/projects/{projectId}/orders/{id}"
      };
    }
    // Retrieves a list of regions.
    rpc GetUserprofilesProfileIdRegions(GetUserprofilesProfileIdRegionsRequest) returns (RegionsListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/regions"
      };
    }
    // Updates an existing remarketing list share.
    rpc PutUserprofilesProfileIdRemarketingListShares(PutUserprofilesProfileIdRemarketingListSharesRequest) returns (RemarketingListShare) {
      option (google.api.http) = {
        put: "/dfareporting/v2.7/userprofiles/{profileId}/remarketingListShares"
        body: "body"
      };
    }
    // Gets one remarketing list share by remarketing list ID.
    rpc GetUserprofilesProfileIdRemarketingListSharesRemarketingListId(GetUserprofilesProfileIdRemarketingListSharesRemarketingListIdRequest) returns (RemarketingListShare) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/remarketingListShares/{remarketingListId}"
      };
    }
    // Retrieves a list of remarketing lists, possibly filtered. This method supports paging.
    rpc GetUserprofilesProfileIdRemarketingLists(GetUserprofilesProfileIdRemarketingListsRequest) returns (RemarketingListsListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/remarketingLists"
      };
    }
    // Updates an existing remarketing list.
    rpc PutUserprofilesProfileIdRemarketingLists(PutUserprofilesProfileIdRemarketingListsRequest) returns (RemarketingList) {
      option (google.api.http) = {
        put: "/dfareporting/v2.7/userprofiles/{profileId}/remarketingLists"
        body: "body"
      };
    }
    // Inserts a new remarketing list.
    rpc PostUserprofilesProfileIdRemarketingLists(PostUserprofilesProfileIdRemarketingListsRequest) returns (RemarketingList) {
      option (google.api.http) = {
        post: "/dfareporting/v2.7/userprofiles/{profileId}/remarketingLists"
        body: "body"
      };
    }
    // Gets one remarketing list by ID.
    rpc GetUserprofilesProfileIdRemarketingListsId(GetUserprofilesProfileIdRemarketingListsIdRequest) returns (RemarketingList) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/remarketingLists/{id}"
      };
    }
    // Retrieves list of reports.
    rpc GetUserprofilesProfileIdReports(GetUserprofilesProfileIdReportsRequest) returns (ReportList) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/reports"
      };
    }
    // Creates a report.
    rpc PostUserprofilesProfileIdReports(PostUserprofilesProfileIdReportsRequest) returns (Report) {
      option (google.api.http) = {
        post: "/dfareporting/v2.7/userprofiles/{profileId}/reports"
        body: "body"
      };
    }
    // Returns the fields that are compatible to be selected in the respective sections of a report criteria, given the fields already selected in the input report and user permissions.
    rpc PostUserprofilesProfileIdReportsCompatiblefieldsQuery(PostUserprofilesProfileIdReportsCompatiblefieldsQueryRequest) returns (CompatibleFields) {
      option (google.api.http) = {
        post: "/dfareporting/v2.7/userprofiles/{profileId}/reports/compatiblefields/query"
        body: "body"
      };
    }
    // Retrieves a report by its ID.
    rpc GetUserprofilesProfileIdReportsReportId(GetUserprofilesProfileIdReportsReportIdRequest) returns (Report) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/reports/{reportId}"
      };
    }
    // Updates a report.
    rpc PutUserprofilesProfileIdReportsReportId(PutUserprofilesProfileIdReportsReportIdRequest) returns (Report) {
      option (google.api.http) = {
        put: "/dfareporting/v2.7/userprofiles/{profileId}/reports/{reportId}"
        body: "body"
      };
    }
    // Deletes a report by its ID.
    rpc DeleteUserprofilesProfileIdReportsReportId(DeleteUserprofilesProfileIdReportsReportIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/dfareporting/v2.7/userprofiles/{profileId}/reports/{reportId}"
      };
    }
    // Lists files for a report.
    rpc GetUserprofilesProfileIdReportsReportIdFiles(GetUserprofilesProfileIdReportsReportIdFilesRequest) returns (FileList) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/reports/{reportId}/files"
      };
    }
    // Retrieves a report file. This method supports media download.
    rpc GetUserprofilesProfileIdReportsReportIdFilesFileId(GetUserprofilesProfileIdReportsReportIdFilesFileIdRequest) returns (File) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/reports/{reportId}/files/{fileId}"
      };
    }
    // Runs a report.
    rpc PostUserprofilesProfileIdReportsReportIdRun(PostUserprofilesProfileIdReportsReportIdRunRequest) returns (File) {
      option (google.api.http) = {
        post: "/dfareporting/v2.7/userprofiles/{profileId}/reports/{reportId}/run"
      };
    }
    // Retrieves a list of sites, possibly filtered. This method supports paging.
    rpc GetUserprofilesProfileIdSites(GetUserprofilesProfileIdSitesRequest) returns (SitesListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/sites"
      };
    }
    // Updates an existing site.
    rpc PutUserprofilesProfileIdSites(PutUserprofilesProfileIdSitesRequest) returns (Site) {
      option (google.api.http) = {
        put: "/dfareporting/v2.7/userprofiles/{profileId}/sites"
        body: "body"
      };
    }
    // Inserts a new site.
    rpc PostUserprofilesProfileIdSites(PostUserprofilesProfileIdSitesRequest) returns (Site) {
      option (google.api.http) = {
        post: "/dfareporting/v2.7/userprofiles/{profileId}/sites"
        body: "body"
      };
    }
    // Gets one site by ID.
    rpc GetUserprofilesProfileIdSitesId(GetUserprofilesProfileIdSitesIdRequest) returns (Site) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/sites/{id}"
      };
    }
    // Retrieves a list of sizes, possibly filtered.
    rpc GetUserprofilesProfileIdSizes(GetUserprofilesProfileIdSizesRequest) returns (SizesListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/sizes"
      };
    }
    // Inserts a new size.
    rpc PostUserprofilesProfileIdSizes(PostUserprofilesProfileIdSizesRequest) returns (Size) {
      option (google.api.http) = {
        post: "/dfareporting/v2.7/userprofiles/{profileId}/sizes"
        body: "body"
      };
    }
    // Gets one size by ID.
    rpc GetUserprofilesProfileIdSizesId(GetUserprofilesProfileIdSizesIdRequest) returns (Size) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/sizes/{id}"
      };
    }
    // Gets a list of subaccounts, possibly filtered. This method supports paging.
    rpc GetUserprofilesProfileIdSubaccounts(GetUserprofilesProfileIdSubaccountsRequest) returns (SubaccountsListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/subaccounts"
      };
    }
    // Updates an existing subaccount.
    rpc PutUserprofilesProfileIdSubaccounts(PutUserprofilesProfileIdSubaccountsRequest) returns (Subaccount) {
      option (google.api.http) = {
        put: "/dfareporting/v2.7/userprofiles/{profileId}/subaccounts"
        body: "body"
      };
    }
    // Inserts a new subaccount.
    rpc PostUserprofilesProfileIdSubaccounts(PostUserprofilesProfileIdSubaccountsRequest) returns (Subaccount) {
      option (google.api.http) = {
        post: "/dfareporting/v2.7/userprofiles/{profileId}/subaccounts"
        body: "body"
      };
    }
    // Gets one subaccount by ID.
    rpc GetUserprofilesProfileIdSubaccountsId(GetUserprofilesProfileIdSubaccountsIdRequest) returns (Subaccount) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/subaccounts/{id}"
      };
    }
    // Retrieves a list of targetable remarketing lists, possibly filtered. This method supports paging.
    rpc GetUserprofilesProfileIdTargetableRemarketingLists(GetUserprofilesProfileIdTargetableRemarketingListsRequest) returns (TargetableRemarketingListsListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/targetableRemarketingLists"
      };
    }
    // Gets one remarketing list by ID.
    rpc GetUserprofilesProfileIdTargetableRemarketingListsId(GetUserprofilesProfileIdTargetableRemarketingListsIdRequest) returns (TargetableRemarketingList) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/targetableRemarketingLists/{id}"
      };
    }
    // Retrieves a list of targeting templates, optionally filtered. This method supports paging.
    rpc GetUserprofilesProfileIdTargetingTemplates(GetUserprofilesProfileIdTargetingTemplatesRequest) returns (TargetingTemplatesListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/targetingTemplates"
      };
    }
    // Updates an existing targeting template.
    rpc PutUserprofilesProfileIdTargetingTemplates(PutUserprofilesProfileIdTargetingTemplatesRequest) returns (TargetingTemplate) {
      option (google.api.http) = {
        put: "/dfareporting/v2.7/userprofiles/{profileId}/targetingTemplates"
        body: "body"
      };
    }
    // Inserts a new targeting template.
    rpc PostUserprofilesProfileIdTargetingTemplates(PostUserprofilesProfileIdTargetingTemplatesRequest) returns (TargetingTemplate) {
      option (google.api.http) = {
        post: "/dfareporting/v2.7/userprofiles/{profileId}/targetingTemplates"
        body: "body"
      };
    }
    // Gets one targeting template by ID.
    rpc GetUserprofilesProfileIdTargetingTemplatesId(GetUserprofilesProfileIdTargetingTemplatesIdRequest) returns (TargetingTemplate) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/targetingTemplates/{id}"
      };
    }
    // Gets a list of all supported user role permission groups.
    rpc GetUserprofilesProfileIdUserRolePermissionGroups(GetUserprofilesProfileIdUserRolePermissionGroupsRequest) returns (UserRolePermissionGroupsListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/userRolePermissionGroups"
      };
    }
    // Gets one user role permission group by ID.
    rpc GetUserprofilesProfileIdUserRolePermissionGroupsId(GetUserprofilesProfileIdUserRolePermissionGroupsIdRequest) returns (UserRolePermissionGroup) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/userRolePermissionGroups/{id}"
      };
    }
    // Gets a list of user role permissions, possibly filtered.
    rpc GetUserprofilesProfileIdUserRolePermissions(GetUserprofilesProfileIdUserRolePermissionsRequest) returns (UserRolePermissionsListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/userRolePermissions"
      };
    }
    // Gets one user role permission by ID.
    rpc GetUserprofilesProfileIdUserRolePermissionsId(GetUserprofilesProfileIdUserRolePermissionsIdRequest) returns (UserRolePermission) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/userRolePermissions/{id}"
      };
    }
    // Retrieves a list of user roles, possibly filtered. This method supports paging.
    rpc GetUserprofilesProfileIdUserRoles(GetUserprofilesProfileIdUserRolesRequest) returns (UserRolesListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/userRoles"
      };
    }
    // Updates an existing user role.
    rpc PutUserprofilesProfileIdUserRoles(PutUserprofilesProfileIdUserRolesRequest) returns (UserRole) {
      option (google.api.http) = {
        put: "/dfareporting/v2.7/userprofiles/{profileId}/userRoles"
        body: "body"
      };
    }
    // Inserts a new user role.
    rpc PostUserprofilesProfileIdUserRoles(PostUserprofilesProfileIdUserRolesRequest) returns (UserRole) {
      option (google.api.http) = {
        post: "/dfareporting/v2.7/userprofiles/{profileId}/userRoles"
        body: "body"
      };
    }
    // Gets one user role by ID.
    rpc GetUserprofilesProfileIdUserRolesId(GetUserprofilesProfileIdUserRolesIdRequest) returns (UserRole) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/userRoles/{id}"
      };
    }
    // Deletes an existing user role.
    rpc DeleteUserprofilesProfileIdUserRolesId(DeleteUserprofilesProfileIdUserRolesIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/dfareporting/v2.7/userprofiles/{profileId}/userRoles/{id}"
      };
    }
    // Lists available video formats.
    rpc GetUserprofilesProfileIdVideoFormats(GetUserprofilesProfileIdVideoFormatsRequest) returns (VideoFormatsListResponse) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/videoFormats"
      };
    }
    // Gets one video format by ID.
    rpc GetUserprofilesProfileIdVideoFormatsId(GetUserprofilesProfileIdVideoFormatsIdRequest) returns (VideoFormat) {
      option (google.api.http) = {
        get: "/dfareporting/v2.7/userprofiles/{profileId}/videoFormats/{id}"
      };
    }
}

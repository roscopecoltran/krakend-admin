syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package googleplayemm;

message GetEnterprisesRequest {
    alt alt = 1;
    // The exact primary domain name of the enterprise to look up.
    string domain = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostEnterprisesRequest {
    alt alt = 1;
    Enterprise body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The token provided by the enterprise to register the EMM.
    string token = 8;
    string userIp = 9;
}

message PostEnterprisesAcknowledgeNotificationSetRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // The notification set ID as returned by Enterprises.PullNotificationSet. This must be provided.
    string notificationSetId = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostEnterprisesCompleteSignupRequest {
    alt alt = 1;
    // The Completion token initially returned by GenerateSignupUrl.
    string completionToken = 2;
    // The Enterprise token appended to the Callback URL.
    string enterpriseToken = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostEnterprisesEnrollRequest {
    alt alt = 1;
    Enterprise body = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The token provided by the enterprise to register the EMM.
    string token = 8;
    string userIp = 9;
}

message PostEnterprisesPullNotificationSetRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    string oauth_token = 4;
    boolean prettyPrint = 5;
    string quotaUser = 6;
    // The request mode for pulling notifications.
    // Specifying waitForNotifications will cause the request to block and wait until one or more notifications are present, or return an empty notification list if no notifications are present after some time.
    // Speciying returnImmediately will cause the request to immediately return the pending notifications, or an empty list if no notifications are present.
    // If omitted, defaults to waitForNotifications.
    enum PostEnterprisesPullNotificationSetRequest_RequestMode {
        POSTENTERPRISESPULLNOTIFICATIONSETREQUEST_REQUESTMODE_RETURNIMMEDIATELY = 0;
        POSTENTERPRISESPULLNOTIFICATIONSETREQUEST_REQUESTMODE_WAITFORNOTIFICATIONS = 1;
    }
    PostEnterprisesPullNotificationSetRequest_RequestMode requestMode = 7;
    string userIp = 8;
}

message PostEnterprisesSignupUrlRequest {
    alt alt = 1;
    // The callback URL to which the Admin will be redirected after successfully creating an enterprise. Before redirecting there the system will add a single query parameter to this URL named "enterpriseToken" which will contain an opaque token to be used for the CompleteSignup request.
    // Beware that this means that the URL will be parsed, the parameter added and then a new URL formatted, i.e. there may be some minor formatting changes and, more importantly, the URL must be well-formed so that it can be parsed.
    string callbackUrl = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetEnterprisesEnterpriseIdRequest {
    alt alt = 1;
    // The ID of the enterprise.
    string enterpriseId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message DeleteEnterprisesEnterpriseIdRequest {
    alt alt = 1;
    // The ID of the enterprise.
    string enterpriseId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PutEnterprisesEnterpriseIdAccountRequest {
    alt alt = 1;
    EnterpriseAccount body = 2;
    // The ID of the enterprise.
    string enterpriseId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetEnterprisesEnterpriseIdAndroidDevicePolicyConfigRequest {
    alt alt = 1;
    // The ID of the enterprise.
    string enterpriseId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PutEnterprisesEnterpriseIdAndroidDevicePolicyConfigRequest {
    alt alt = 1;
    AndroidDevicePolicyConfig body = 2;
    // The ID of the enterprise.
    string enterpriseId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostEnterprisesEnterpriseIdCreateWebTokenRequest {
    alt alt = 1;
    AdministratorWebTokenSpec body = 2;
    // The ID of the enterprise.
    string enterpriseId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetEnterprisesEnterpriseIdGroupLicensesRequest {
    alt alt = 1;
    // The ID of the enterprise.
    string enterpriseId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetEnterprisesEnterpriseIdGroupLicensesGroupLicenseIdRequest {
    alt alt = 1;
    // The ID of the enterprise.
    string enterpriseId = 2;
    string fields = 3;
    // The ID of the product the group license is for, e.g. "app:com.google.android.gm".
    string groupLicenseId = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetEnterprisesEnterpriseIdGroupLicensesGroupLicenseIdUsersRequest {
    alt alt = 1;
    // The ID of the enterprise.
    string enterpriseId = 2;
    string fields = 3;
    // The ID of the product the group license is for, e.g. "app:com.google.android.gm".
    string groupLicenseId = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetEnterprisesEnterpriseIdProductsRequest {
    alt alt = 1;
    // Specifies whether to search among all products (false) or among only products that have been approved (true). Only "true" is supported, and should be specified.
    bool approved = 2;
    // The ID of the enterprise.
    string enterpriseId = 3;
    string fields = 4;
    string key = 5;
    // The BCP47 tag for the user's preferred language (e.g. "en-US", "de"). Results are returned in the language best matching the preferred language.
    string language = 6;
    // Specifies the maximum number of products that can be returned per request. If not specified, uses a default value of 100, which is also the maximum retrievable within a single response.
    int32 maxResults = 7;
    string oauth_token = 8;
    boolean prettyPrint = 9;
    // The search query as typed in the Google Play store search box. If omitted, all approved apps will be returned (using the pagination parameters), including apps that are not available in the store (e.g. unpublished apps).
    string query = 10;
    string quotaUser = 11;
    // A pagination token is contained in a request''s response when there are more products. The token can be used in a subsequent request to obtain more products, and so forth. This parameter cannot be used in the initial request.
    string token = 12;
    string userIp = 13;
}

message GetEnterprisesEnterpriseIdProductsProductIdRequest {
    alt alt = 1;
    // The ID of the enterprise.
    string enterpriseId = 2;
    string fields = 3;
    string key = 4;
    // The BCP47 tag for the user's preferred language (e.g. "en-US", "de").
    string language = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // The ID of the product, e.g. "app:com.google.android.gm".
    string productId = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetEnterprisesEnterpriseIdProductsProductIdAppRestrictionsSchemaRequest {
    alt alt = 1;
    // The ID of the enterprise.
    string enterpriseId = 2;
    string fields = 3;
    string key = 4;
    // The BCP47 tag for the user's preferred language (e.g. "en-US", "de").
    string language = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // The ID of the product.
    string productId = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostEnterprisesEnterpriseIdProductsProductIdApproveRequest {
    alt alt = 1;
    ProductsApproveRequest body = 2;
    // The ID of the enterprise.
    string enterpriseId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // The ID of the product.
    string productId = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostEnterprisesEnterpriseIdProductsProductIdGenerateApprovalUrlRequest {
    alt alt = 1;
    // The ID of the enterprise.
    string enterpriseId = 2;
    string fields = 3;
    string key = 4;
    // The BCP 47 language code used for permission names and descriptions in the returned iframe, for instance "en-US".
    string languageCode = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    // The ID of the product.
    string productId = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetEnterprisesEnterpriseIdProductsProductIdPermissionsRequest {
    alt alt = 1;
    // The ID of the enterprise.
    string enterpriseId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // The ID of the product.
    string productId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostEnterprisesEnterpriseIdProductsProductIdUnapproveRequest {
    alt alt = 1;
    // The ID of the enterprise.
    string enterpriseId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    // The ID of the product.
    string productId = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostEnterprisesEnterpriseIdSendTestPushNotificationRequest {
    alt alt = 1;
    // The ID of the enterprise.
    string enterpriseId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetEnterprisesEnterpriseIdServiceAccountRequest {
    alt alt = 1;
    // The ID of the enterprise.
    string enterpriseId = 2;
    string fields = 3;
    string key = 4;
    // The type of credential to return with the service account. Required.
    enum GetEnterprisesEnterpriseIdServiceAccountRequest_KeyType {
        GETENTERPRISESENTERPRISEIDSERVICEACCOUNTREQUEST_KEYTYPE_GOOGLECREDENTIALS = 0;
        GETENTERPRISESENTERPRISEIDSERVICEACCOUNTREQUEST_KEYTYPE_PKCS12 = 1;
    }
    GetEnterprisesEnterpriseIdServiceAccountRequest_KeyType keyType = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetEnterprisesEnterpriseIdServiceAccountKeysRequest {
    alt alt = 1;
    // The ID of the enterprise.
    string enterpriseId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostEnterprisesEnterpriseIdServiceAccountKeysRequest {
    alt alt = 1;
    ServiceAccountKey body = 2;
    // The ID of the enterprise.
    string enterpriseId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message DeleteEnterprisesEnterpriseIdServiceAccountKeysKeyIdRequest {
    alt alt = 1;
    // The ID of the enterprise.
    string enterpriseId = 2;
    string fields = 3;
    string key = 4;
    // The ID of the key.
    string keyId = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetEnterprisesEnterpriseIdStoreLayoutRequest {
    alt alt = 1;
    // The ID of the enterprise.
    string enterpriseId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PutEnterprisesEnterpriseIdStoreLayoutRequest {
    alt alt = 1;
    StoreLayout body = 2;
    // The ID of the enterprise.
    string enterpriseId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetEnterprisesEnterpriseIdStoreLayoutPagesRequest {
    alt alt = 1;
    // The ID of the enterprise.
    string enterpriseId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message PostEnterprisesEnterpriseIdStoreLayoutPagesRequest {
    alt alt = 1;
    StorePage body = 2;
    // The ID of the enterprise.
    string enterpriseId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetEnterprisesEnterpriseIdStoreLayoutPagesPageIdRequest {
    alt alt = 1;
    // The ID of the enterprise.
    string enterpriseId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // The ID of the page.
    string pageId = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PutEnterprisesEnterpriseIdStoreLayoutPagesPageIdRequest {
    alt alt = 1;
    StorePage body = 2;
    // The ID of the enterprise.
    string enterpriseId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    // The ID of the page.
    string pageId = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message DeleteEnterprisesEnterpriseIdStoreLayoutPagesPageIdRequest {
    alt alt = 1;
    // The ID of the enterprise.
    string enterpriseId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // The ID of the page.
    string pageId = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetEnterprisesEnterpriseIdStoreLayoutPagesPageIdClustersRequest {
    alt alt = 1;
    // The ID of the enterprise.
    string enterpriseId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    // The ID of the page.
    string pageId = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostEnterprisesEnterpriseIdStoreLayoutPagesPageIdClustersRequest {
    alt alt = 1;
    StoreCluster body = 2;
    // The ID of the enterprise.
    string enterpriseId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    // The ID of the page.
    string pageId = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message GetEnterprisesEnterpriseIdStoreLayoutPagesPageIdClustersClusterIdRequest {
    alt alt = 1;
    // The ID of the cluster.
    string clusterId = 2;
    // The ID of the enterprise.
    string enterpriseId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    // The ID of the page.
    string pageId = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PutEnterprisesEnterpriseIdStoreLayoutPagesPageIdClustersClusterIdRequest {
    alt alt = 1;
    StoreCluster body = 2;
    // The ID of the cluster.
    string clusterId = 3;
    // The ID of the enterprise.
    string enterpriseId = 4;
    string fields = 5;
    string key = 6;
    string oauth_token = 7;
    // The ID of the page.
    string pageId = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    string userIp = 11;
}

message DeleteEnterprisesEnterpriseIdStoreLayoutPagesPageIdClustersClusterIdRequest {
    alt alt = 1;
    // The ID of the cluster.
    string clusterId = 2;
    // The ID of the enterprise.
    string enterpriseId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    // The ID of the page.
    string pageId = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    string userIp = 10;
}

message PostEnterprisesEnterpriseIdUnenrollRequest {
    alt alt = 1;
    // The ID of the enterprise.
    string enterpriseId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    string userIp = 8;
}

message GetEnterprisesEnterpriseIdUsersRequest {
    alt alt = 1;
    // The exact primary email address of the user to look up.
    string email = 2;
    // The ID of the enterprise.
    string enterpriseId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message PostEnterprisesEnterpriseIdUsersRequest {
    alt alt = 1;
    User body = 2;
    // The ID of the enterprise.
    string enterpriseId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message GetEnterprisesEnterpriseIdUsersUserIdRequest {
    alt alt = 1;
    // The ID of the enterprise.
    string enterpriseId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The ID of the user.
    string userId = 8;
    string userIp = 9;
}

message PutEnterprisesEnterpriseIdUsersUserIdRequest {
    alt alt = 1;
    User body = 2;
    // The ID of the enterprise.
    string enterpriseId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // The ID of the user.
    string userId = 9;
    string userIp = 10;
}

message DeleteEnterprisesEnterpriseIdUsersUserIdRequest {
    alt alt = 1;
    // The ID of the enterprise.
    string enterpriseId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The ID of the user.
    string userId = 8;
    string userIp = 9;
}

message PostEnterprisesEnterpriseIdUsersUserIdAuthenticationTokenRequest {
    alt alt = 1;
    // The ID of the enterprise.
    string enterpriseId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The ID of the user.
    string userId = 8;
    string userIp = 9;
}

message GetEnterprisesEnterpriseIdUsersUserIdAvailableProductSetRequest {
    alt alt = 1;
    // The ID of the enterprise.
    string enterpriseId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The ID of the user.
    string userId = 8;
    string userIp = 9;
}

message PutEnterprisesEnterpriseIdUsersUserIdAvailableProductSetRequest {
    alt alt = 1;
    ProductSet body = 2;
    // The ID of the enterprise.
    string enterpriseId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // The ID of the user.
    string userId = 9;
    string userIp = 10;
}

message GetEnterprisesEnterpriseIdUsersUserIdDevicesRequest {
    alt alt = 1;
    // The ID of the enterprise.
    string enterpriseId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The ID of the user.
    string userId = 8;
    string userIp = 9;
}

message GetEnterprisesEnterpriseIdUsersUserIdDevicesDeviceIdRequest {
    alt alt = 1;
    // The ID of the device.
    string deviceId = 2;
    // The ID of the enterprise.
    string enterpriseId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // The ID of the user.
    string userId = 9;
    string userIp = 10;
}

message GetEnterprisesEnterpriseIdUsersUserIdDevicesDeviceIdInstallsRequest {
    alt alt = 1;
    // The Android ID of the device.
    string deviceId = 2;
    // The ID of the enterprise.
    string enterpriseId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // The ID of the user.
    string userId = 9;
    string userIp = 10;
}

message GetEnterprisesEnterpriseIdUsersUserIdDevicesDeviceIdInstallsInstallIdRequest {
    alt alt = 1;
    // The Android ID of the device.
    string deviceId = 2;
    // The ID of the enterprise.
    string enterpriseId = 3;
    string fields = 4;
    // The ID of the product represented by the install, e.g. "app:com.google.android.gm".
    string installId = 5;
    string key = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    // The ID of the user.
    string userId = 10;
    string userIp = 11;
}

message PutEnterprisesEnterpriseIdUsersUserIdDevicesDeviceIdInstallsInstallIdRequest {
    alt alt = 1;
    Install body = 2;
    // The Android ID of the device.
    string deviceId = 3;
    // The ID of the enterprise.
    string enterpriseId = 4;
    string fields = 5;
    // The ID of the product represented by the install, e.g. "app:com.google.android.gm".
    string installId = 6;
    string key = 7;
    string oauth_token = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    // The ID of the user.
    string userId = 11;
    string userIp = 12;
}

message DeleteEnterprisesEnterpriseIdUsersUserIdDevicesDeviceIdInstallsInstallIdRequest {
    alt alt = 1;
    // The Android ID of the device.
    string deviceId = 2;
    // The ID of the enterprise.
    string enterpriseId = 3;
    string fields = 4;
    // The ID of the product represented by the install, e.g. "app:com.google.android.gm".
    string installId = 5;
    string key = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    // The ID of the user.
    string userId = 10;
    string userIp = 11;
}

message GetEnterprisesEnterpriseIdUsersUserIdDevicesDeviceIdManagedConfigurationsForDeviceRequest {
    alt alt = 1;
    // The Android ID of the device.
    string deviceId = 2;
    // The ID of the enterprise.
    string enterpriseId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // The ID of the user.
    string userId = 9;
    string userIp = 10;
}

message GetEnterprisesEnterpriseIdUsersUserIdDevicesDeviceIdManagedConfigurationsForDeviceManagedConfigurationForDeviceIdRequest {
    alt alt = 1;
    // The Android ID of the device.
    string deviceId = 2;
    // The ID of the enterprise.
    string enterpriseId = 3;
    string fields = 4;
    string key = 5;
    // The ID of the managed configuration (a product ID), e.g. "app:com.google.android.gm".
    string managedConfigurationForDeviceId = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    // The ID of the user.
    string userId = 10;
    string userIp = 11;
}

message PutEnterprisesEnterpriseIdUsersUserIdDevicesDeviceIdManagedConfigurationsForDeviceManagedConfigurationForDeviceIdRequest {
    alt alt = 1;
    ManagedConfiguration body = 2;
    // The Android ID of the device.
    string deviceId = 3;
    // The ID of the enterprise.
    string enterpriseId = 4;
    string fields = 5;
    string key = 6;
    // The ID of the managed configuration (a product ID), e.g. "app:com.google.android.gm".
    string managedConfigurationForDeviceId = 7;
    string oauth_token = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    // The ID of the user.
    string userId = 11;
    string userIp = 12;
}

message DeleteEnterprisesEnterpriseIdUsersUserIdDevicesDeviceIdManagedConfigurationsForDeviceManagedConfigurationForDeviceIdRequest {
    alt alt = 1;
    // The Android ID of the device.
    string deviceId = 2;
    // The ID of the enterprise.
    string enterpriseId = 3;
    string fields = 4;
    string key = 5;
    // The ID of the managed configuration (a product ID), e.g. "app:com.google.android.gm".
    string managedConfigurationForDeviceId = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    // The ID of the user.
    string userId = 10;
    string userIp = 11;
}

message GetEnterprisesEnterpriseIdUsersUserIdDevicesDeviceIdStateRequest {
    alt alt = 1;
    // The ID of the device.
    string deviceId = 2;
    // The ID of the enterprise.
    string enterpriseId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // The ID of the user.
    string userId = 9;
    string userIp = 10;
}

message PutEnterprisesEnterpriseIdUsersUserIdDevicesDeviceIdStateRequest {
    alt alt = 1;
    DeviceState body = 2;
    // The ID of the device.
    string deviceId = 3;
    // The ID of the enterprise.
    string enterpriseId = 4;
    string fields = 5;
    string key = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    // The ID of the user.
    string userId = 10;
    string userIp = 11;
}

message GetEnterprisesEnterpriseIdUsersUserIdEntitlementsRequest {
    alt alt = 1;
    // The ID of the enterprise.
    string enterpriseId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The ID of the user.
    string userId = 8;
    string userIp = 9;
}

message GetEnterprisesEnterpriseIdUsersUserIdEntitlementsEntitlementIdRequest {
    alt alt = 1;
    // The ID of the enterprise.
    string enterpriseId = 2;
    // The ID of the entitlement (a product ID), e.g. "app:com.google.android.gm".
    string entitlementId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // The ID of the user.
    string userId = 9;
    string userIp = 10;
}

message PutEnterprisesEnterpriseIdUsersUserIdEntitlementsEntitlementIdRequest {
    alt alt = 1;
    Entitlement body = 2;
    // The ID of the enterprise.
    string enterpriseId = 3;
    // The ID of the entitlement (a product ID), e.g. "app:com.google.android.gm".
    string entitlementId = 4;
    string fields = 5;
    // Set to true to also install the product on all the user's devices where possible. Failure to install on one or more devices will not prevent this operation from returning successfully, as long as the entitlement was successfully assigned to the user.
    bool install = 6;
    string key = 7;
    string oauth_token = 8;
    boolean prettyPrint = 9;
    string quotaUser = 10;
    // The ID of the user.
    string userId = 11;
    string userIp = 12;
}

message DeleteEnterprisesEnterpriseIdUsersUserIdEntitlementsEntitlementIdRequest {
    alt alt = 1;
    // The ID of the enterprise.
    string enterpriseId = 2;
    // The ID of the entitlement (a product ID), e.g. "app:com.google.android.gm".
    string entitlementId = 3;
    string fields = 4;
    string key = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // The ID of the user.
    string userId = 9;
    string userIp = 10;
}

message GetEnterprisesEnterpriseIdUsersUserIdManagedConfigurationsForUserRequest {
    alt alt = 1;
    // The ID of the enterprise.
    string enterpriseId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The ID of the user.
    string userId = 8;
    string userIp = 9;
}

message GetEnterprisesEnterpriseIdUsersUserIdManagedConfigurationsForUserManagedConfigurationForUserIdRequest {
    alt alt = 1;
    // The ID of the enterprise.
    string enterpriseId = 2;
    string fields = 3;
    string key = 4;
    // The ID of the managed configuration (a product ID), e.g. "app:com.google.android.gm".
    string managedConfigurationForUserId = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // The ID of the user.
    string userId = 9;
    string userIp = 10;
}

message PutEnterprisesEnterpriseIdUsersUserIdManagedConfigurationsForUserManagedConfigurationForUserIdRequest {
    alt alt = 1;
    ManagedConfiguration body = 2;
    // The ID of the enterprise.
    string enterpriseId = 3;
    string fields = 4;
    string key = 5;
    // The ID of the managed configuration (a product ID), e.g. "app:com.google.android.gm".
    string managedConfigurationForUserId = 6;
    string oauth_token = 7;
    boolean prettyPrint = 8;
    string quotaUser = 9;
    // The ID of the user.
    string userId = 10;
    string userIp = 11;
}

message DeleteEnterprisesEnterpriseIdUsersUserIdManagedConfigurationsForUserManagedConfigurationForUserIdRequest {
    alt alt = 1;
    // The ID of the enterprise.
    string enterpriseId = 2;
    string fields = 3;
    string key = 4;
    // The ID of the managed configuration (a product ID), e.g. "app:com.google.android.gm".
    string managedConfigurationForUserId = 5;
    string oauth_token = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    // The ID of the user.
    string userId = 9;
    string userIp = 10;
}

message PostEnterprisesEnterpriseIdUsersUserIdTokenRequest {
    alt alt = 1;
    // The ID of the enterprise.
    string enterpriseId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The ID of the user.
    string userId = 8;
    string userIp = 9;
}

message DeleteEnterprisesEnterpriseIdUsersUserIdTokenRequest {
    alt alt = 1;
    // The ID of the enterprise.
    string enterpriseId = 2;
    string fields = 3;
    string key = 4;
    string oauth_token = 5;
    boolean prettyPrint = 6;
    string quotaUser = 7;
    // The ID of the user.
    string userId = 8;
    string userIp = 9;
}

message GetPermissionsPermissionIdRequest {
    alt alt = 1;
    string fields = 2;
    string key = 3;
    // The BCP47 tag for the user's preferred language (e.g. "en-US", "de")
    string language = 4;
    string oauth_token = 5;
    // The ID of the permission.
    string permissionId = 6;
    boolean prettyPrint = 7;
    string quotaUser = 8;
    string userIp = 9;
}

message Administrator {
    // The admin's email address.
    string email = 1;
}

message AdministratorWebToken {
    // Identifies what kind of resource this is. Value: the fixed string "androidenterprise#administratorWebToken".
    string kind = 1;
    // An opaque token to be passed to the Play front-end to generate an iframe.
    string token = 2;
}

message AdministratorWebTokenSpec {
    // Identifies what kind of resource this is. Value: the fixed string "androidenterprise#administratorWebTokenSpec".
    string kind = 1;
    // The URI of the parent frame hosting the iframe. To prevent XSS, the iframe may not be hosted at other URIs. This URI must be https.
    string parent = 2;
    // The list of permissions the admin is granted within the iframe. The admin will only be allowed to view an iframe if they have all of the permissions associated with it. The only valid value is "approveApps" that will allow the admin to access the iframe in "approve" mode.
    repeated string permission = 3;
}

message AndroidDevicePolicyConfig {
    // Identifies what kind of resource this is. Value: the fixed string "androidenterprise#androidDevicePolicyConfig".
    string kind = 1;
    // The state of Android Device Policy. "enabled" indicates that Android Device Policy is enabled for the enterprise and the EMM is allowed to manage devices with Android Device Policy, while "disabled" means that it cannot.
    string state = 2;
}

message AppRestrictionsSchema {
    // Identifies what kind of resource this is. Value: the fixed string "androidenterprise#appRestrictionsSchema".
    string kind = 1;
    // The set of restrictions that make up this schema.
    repeated AppRestrictionsSchemaRestriction restrictions = 2;
}

message AppRestrictionsSchemaChangeEvent {
    // The id of the product (e.g. "app:com.google.android.gm") for which the app restriction schema changed. This field will always be present.
    string productId = 1;
}

message AppRestrictionsSchemaRestriction {
    // The default value of the restriction. bundle and bundleArray restrictions never have a default value.
    AppRestrictionsSchemaRestrictionRestrictionValue defaultValue = 1;
    // A longer description of the restriction, giving more detail of what it affects.
    string description = 2;
    // For choice or multiselect restrictions, the list of possible entries' human-readable names.
    repeated string entry = 3;
    // For choice or multiselect restrictions, the list of possible entries' machine-readable values. These values should be used in the configuration, either as a single string value for a choice restriction or in a stringArray for a multiselect restriction.
    repeated string entryValue = 4;
    // The unique key that the product uses to identify the restriction, e.g. "com.google.android.gm.fieldname".
    string key = 5;
    // For bundle or bundleArray restrictions, the list of nested restrictions. A bundle restriction is always nested within a bundleArray restriction, and a bundleArray restriction is at most two levels deep.
    repeated AppRestrictionsSchemaRestriction nestedRestriction = 6;
    // The type of the restriction.
    string restrictionType = 7;
    // The name of the restriction.
    string title = 8;
}

message AppRestrictionsSchemaRestrictionRestrictionValue {
    // The type of the value being provided.
    string type = 1;
    // The boolean value - this will only be present if type is bool.
    bool valueBool = 2;
    // The integer value - this will only be present if type is integer.
    int32 valueInteger = 3;
    // The list of string values - this will only be present if type is multiselect.
    repeated string valueMultiselect = 4;
    // The string value - this will be present for types string, choice and hidden.
    string valueString = 5;
}

message AppUpdateEvent {
    // The id of the product (e.g. "app:com.google.android.gm") that was updated. This field will always be present.
    string productId = 1;
}

message AppVersion {
    // The track that this app was published in. For example if track is "alpha", this is an alpha version of the app.
    string track = 1;
    // Unique increasing identifier for the app version.
    int32 versionCode = 2;
    // The string used in the Play store by the app developer to identify the version. The string is not necessarily unique or localized (for example, the string could be "1.4").
    string versionString = 3;
}

message ApprovalUrlInfo {
    // A URL that displays a product's permissions and that can also be used to approve the product with the Products.approve call.
    string approvalUrl = 1;
    // Identifies what kind of resource this is. Value: the fixed string "androidenterprise#approvalUrlInfo".
    string kind = 2;
}

message AuthenticationToken {
    // Identifies what kind of resource this is. Value: the fixed string "androidenterprise#authenticationToken".
    string kind = 1;
    // The authentication token to be passed to the device policy client on the device where it can be used to provision the account for which this token was generated.
    string token = 2;
}

message Device {
    // The Google Play Services Android ID for the device encoded as a lowercase hex string. For example, "123456789abcdef0".
    string androidId = 1;
    // Identifies what kind of resource this is. Value: the fixed string "androidenterprise#device".
    string kind = 2;
    // Identifies the extent to which the device is controlled by a managed Google Play EMM in various deployment configurations.
    // 
    // Possible values include: 
    // - "managedDevice", a device that has the EMM's device policy controller (DPC) as the device owner. 
    // - "managedProfile", a device that has a profile managed by the DPC (DPC is profile owner) in addition to a separate, personal profile that is unavailable to the DPC. 
    // - "containerApp", no longer used (deprecated). 
    // - "unmanagedProfile", a device that has been allowed (by the domain's admin, using the Admin Console to enable the privilege) to use managed Google Play, but the profile is itself not owned by a DPC.
    string managementType = 3;
}

message DeviceState {
    // The state of the Google account on the device. "enabled" indicates that the Google account on the device can be used to access Google services (including Google Play), while "disabled" means that it cannot. A new device is initially in the "disabled" state.
    string accountState = 1;
    // Identifies what kind of resource this is. Value: the fixed string "androidenterprise#deviceState".
    string kind = 2;
}

message DevicesListResponse {
    // A managed device.
    repeated Device device = 1;
    // Identifies what kind of resource this is. Value: the fixed string "androidenterprise#devicesListResponse".
    string kind = 2;
}

message Enterprise {
    // Admins of the enterprise. This is only supported for enterprises created via the EMM-initiated flow.
    repeated Administrator administrator = 1;
    // The unique ID for the enterprise.
    string id = 2;
    // Identifies what kind of resource this is. Value: the fixed string "androidenterprise#enterprise".
    string kind = 3;
    // The name of the enterprise, for example, "Example, Inc".
    string name = 4;
    // The enterprise's primary domain, such as "example.com".
    string primaryDomain = 5;
}

message EnterpriseAccount {
    // The email address of the service account.
    string accountEmail = 1;
    // Identifies what kind of resource this is. Value: the fixed string "androidenterprise#enterpriseAccount".
    string kind = 2;
}

message EnterprisesListResponse {
    // An enterprise.
    repeated Enterprise enterprise = 1;
    // Identifies what kind of resource this is. Value: the fixed string "androidenterprise#enterprisesListResponse".
    string kind = 2;
}

message EnterprisesSendTestPushNotificationResponse {
    // The message ID of the test push notification that was sent.
    string messageId = 1;
    // The name of the Cloud Pub/Sub topic to which notifications for this enterprise's enrolled account will be sent.
    string topicName = 2;
}

message Entitlement {
    // Identifies what kind of resource this is. Value: the fixed string "androidenterprise#entitlement".
    string kind = 1;
    // The ID of the product that the entitlement is for. For example, "app:com.google.android.gm".
    string productId = 2;
    // The reason for the entitlement. For example, "free" for free apps. This property is temporary: it will be replaced by the acquisition kind field of group licenses.
    string reason = 3;
}

message EntitlementsListResponse {
    // An entitlement of a user to a product (e.g. an app). For example, a free app that they have installed, or a paid app that they have been allocated a license to.
    repeated Entitlement entitlement = 1;
    // Identifies what kind of resource this is. Value: the fixed string "androidenterprise#entitlementsListResponse".
    string kind = 2;
}

message GroupLicense {
    // How this group license was acquired. "bulkPurchase" means that this Grouplicenses resource was created because the enterprise purchased licenses for this product; otherwise, the value is "free" (for free products).
    string acquisitionKind = 1;
    // Whether the product to which this group license relates is currently approved by the enterprise. Products are approved when a group license is first created, but this approval may be revoked by an enterprise admin via Google Play. Unapproved products will not be visible to end users in collections, and new entitlements to them should not normally be created.
    string approval = 2;
    // Identifies what kind of resource this is. Value: the fixed string "androidenterprise#groupLicense".
    string kind = 3;
    // The total number of provisioned licenses for this product. Returned by read operations, but ignored in write operations.
    int32 numProvisioned = 4;
    // The number of purchased licenses (possibly in multiple purchases). If this field is omitted, then there is no limit on the number of licenses that can be provisioned (for example, if the acquisition kind is "free").
    int32 numPurchased = 5;
    // The permission approval status of the product. This field is only set if the product is approved. Possible states are: 
    // - "currentApproved", the current set of permissions is approved, but additional permissions will require the administrator to reapprove the product (If the product was approved without specifying the approved permissions setting, then this is the default behavior.), 
    // - "needsReapproval", the product has unapproved permissions. No additional product licenses can be assigned until the product is reapproved, 
    // - "allCurrentAndFutureApproved", the current permissions are approved and any future permission updates will be automatically approved without administrator review.
    string permissions = 6;
    // The ID of the product that the license is for. For example, "app:com.google.android.gm".
    string productId = 7;
}

message GroupLicenseUsersListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "androidenterprise#groupLicenseUsersListResponse".
    string kind = 1;
    // A user of an enterprise.
    repeated User user = 2;
}

message GroupLicensesListResponse {
    // A group license for a product approved for use in the enterprise.
    repeated GroupLicense groupLicense = 1;
    // Identifies what kind of resource this is. Value: the fixed string "androidenterprise#groupLicensesListResponse".
    string kind = 2;
}

message Install {
    // Install state. The state "installPending" means that an install request has recently been made and download to the device is in progress. The state "installed" means that the app has been installed. This field is read-only.
    string installState = 1;
    // Identifies what kind of resource this is. Value: the fixed string "androidenterprise#install".
    string kind = 2;
    // The ID of the product that the install is for. For example, "app:com.google.android.gm".
    string productId = 3;
    // The version of the installed product. Guaranteed to be set only if the install state is "installed".
    int32 versionCode = 4;
}

message InstallFailureEvent {
    // The Android ID of the device. This field will always be present.
    string deviceId = 1;
    // Additional details on the failure if applicable.
    string failureDetails = 2;
    // The reason for the installation failure. This field will always be present.
    string failureReason = 3;
    // The id of the product (e.g. "app:com.google.android.gm") for which the install failure event occured. This field will always be present.
    string productId = 4;
    // The ID of the user. This field will always be present.
    string userId = 5;
}

message InstallsListResponse {
    // An installation of an app for a user on a specific device. The existence of an install implies that the user must have an entitlement to the app.
    repeated Install install = 1;
    // Identifies what kind of resource this is. Value: the fixed string "androidenterprise#installsListResponse".
    string kind = 2;
}

message LocalizedText {
    // The BCP47 tag for a locale. (e.g. "en-US", "de").
    string locale = 1;
    // The text localized in the associated locale.
    string text = 2;
}

message ManagedConfiguration {
    // Identifies what kind of resource this is. Value: the fixed string "androidenterprise#managedConfiguration".
    string kind = 1;
    // The set of managed properties for this configuration.
    repeated ManagedProperty managedProperty = 2;
    // The ID of the product that the managed configuration is for, e.g. "app:com.google.android.gm".
    string productId = 3;
}

message ManagedConfigurationsForDeviceListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "androidenterprise#managedConfigurationsForDeviceListResponse".
    string kind = 1;
    // A managed configuration for an app on a specific device.
    repeated ManagedConfiguration managedConfigurationForDevice = 2;
}

message ManagedConfigurationsForUserListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "androidenterprise#managedConfigurationsForUserListResponse".
    string kind = 1;
    // A managed configuration for an app for a specific user.
    repeated ManagedConfiguration managedConfigurationForUser = 2;
}

message ManagedProperty {
    // The unique key that identifies the property.
    string key = 1;
    // The boolean value - this will only be present if type of the property is bool.
    bool valueBool = 2;
    // The bundle of managed properties - this will only be present if type of the property is bundle.
    ManagedPropertyBundle valueBundle = 3;
    // The list of bundles of properties - this will only be present if type of the property is bundle_array.
    repeated ManagedPropertyBundle valueBundleArray = 4;
    // The integer value - this will only be present if type of the property is integer.
    int32 valueInteger = 5;
    // The string value - this will only be present if type of the property is string, choice or hidden.
    string valueString = 6;
    // The list of string values - this will only be present if type of the property is multiselect.
    repeated string valueStringArray = 7;
}

message ManagedPropertyBundle {
    // The list of managed properties.
    repeated ManagedProperty managedProperty = 1;
}

message NewDeviceEvent {
    // The Android ID of the device. This field will always be present.
    string deviceId = 1;
    // Identifies the extent to which the device is controlled by an Android EMM in various deployment configurations.
    // 
    // Possible values include: 
    // - "managedDevice", a device where the DPC is set as device owner, 
    // - "managedProfile", a device where the DPC is set as profile owner.
    string managementType = 2;
    // The ID of the user. This field will always be present.
    string userId = 3;
}

message NewPermissionsEvent {
    // The set of permissions that the enterprise admin has already approved for this application. Use Permissions.Get on the EMM API to retrieve details about these permissions.
    repeated string approvedPermissions = 1;
    // The id of the product (e.g. "app:com.google.android.gm") for which new permissions were added. This field will always be present.
    string productId = 2;
    // The set of permissions that the app is currently requesting. Use Permissions.Get on the EMM API to retrieve details about these permissions.
    repeated string requestedPermissions = 3;
}

message Notification {
    // Notifications about new app restrictions schema changes.
    AppRestrictionsSchemaChangeEvent appRestrictionsSchemaChangeEvent = 1;
    // Notifications about app updates.
    AppUpdateEvent appUpdateEvent = 2;
    // The ID of the enterprise for which the notification is sent. This will always be present.
    string enterpriseId = 3;
    // Notifications about an app installation failure.
    InstallFailureEvent installFailureEvent = 4;
    // Notifications about new devices.
    NewDeviceEvent newDeviceEvent = 5;
    // Notifications about new app permissions.
    NewPermissionsEvent newPermissionsEvent = 6;
    // Type of the notification.
    string notificationType = 7;
    // Notifications about changes to a product's approval status.
    ProductApprovalEvent productApprovalEvent = 8;
    // Notifications about product availability changes.
    ProductAvailabilityChangeEvent productAvailabilityChangeEvent = 9;
    // The time when the notification was published in milliseconds since 1970-01-01T00:00:00Z. This will always be present.
    string timestampMillis = 10;
}

message NotificationSet {
    // Identifies what kind of resource this is. Value: the fixed string "androidenterprise#notificationSet".
    string kind = 1;
    // The notifications received, or empty if no notifications are present.
    repeated Notification notification = 2;
    // The notification set ID, required to mark the notification as received with the Enterprises.AcknowledgeNotification API. This will be omitted if no notifications are present.
    string notificationSetId = 3;
}

message PageInfo {
    int32 resultPerPage = 1;
    int32 startIndex = 2;
    int32 totalResults = 3;
}

message Permission {
    // A longer description of the Permissions resource, giving more details of what it affects.
    string description = 1;
    // Identifies what kind of resource this is. Value: the fixed string "androidenterprise#permission".
    string kind = 2;
    // The name of the permission.
    string name = 3;
    // An opaque string uniquely identifying the permission.
    string permissionId = 4;
}

message Product {
    // App versions currently available for this product.
    repeated AppVersion appVersion = 1;
    // The name of the author of the product (for example, the app developer).
    string authorName = 2;
    // The tracks that are visible to the enterprise.
    repeated string availableTracks = 3;
    // A link to the (consumer) Google Play details page for the product.
    string detailsUrl = 4;
    // How and to whom the package is made available. The value publicGoogleHosted means that the package is available through the Play store and not restricted to a specific enterprise. The value privateGoogleHosted means that the package is a private app (restricted to an enterprise) but hosted by Google. The value privateSelfHosted means that the package is a private app (restricted to an enterprise) and is privately hosted.
    string distributionChannel = 5;
    // A link to an image that can be used as an icon for the product. This image is suitable for use at up to 512px x 512px.
    string iconUrl = 6;
    // Identifies what kind of resource this is. Value: the fixed string "androidenterprise#product".
    string kind = 7;
    // A string of the form app:<package name>. For example, app:com.google.android.gm represents the Gmail app.
    string productId = 8;
    // Whether this product is free, free with in-app purchases, or paid. If the pricing is unknown, this means the product is not generally available anymore (even though it might still be available to people who own it).
    string productPricing = 9;
    // Deprecated.
    bool requiresContainerApp = 10;
    // The certificate used to sign this product.
    ProductSigningCertificate signingCertificate = 11;
    // A link to a smaller image that can be used as an icon for the product. This image is suitable for use at up to 128px x 128px.
    string smallIconUrl = 12;
    // The name of the product.
    string title = 13;
    // A link to the managed Google Play details page for the product, for use by an Enterprise admin.
    string workDetailsUrl = 14;
}

message ProductApprovalEvent {
    // Whether the product was approved or unapproved. This field will always be present.
    string approved = 1;
    // The id of the product (e.g. "app:com.google.android.gm") for which the approval status has changed. This field will always be present.
    string productId = 2;
}

message ProductAvailabilityChangeEvent {
    // The new state of the product. This field will always be present.
    string availabilityStatus = 1;
    // The id of the product (e.g. "app:com.google.android.gm") for which the product availability changed. This field will always be present.
    string productId = 2;
}

message ProductPermission {
    // An opaque string uniquely identifying the permission.
    string permissionId = 1;
    // Whether the permission has been accepted or not.
    string state = 2;
}

message ProductPermissions {
    // Identifies what kind of resource this is. Value: the fixed string "androidenterprise#productPermissions".
    string kind = 1;
    // The permissions required by the app.
    repeated ProductPermission permission = 2;
    // The ID of the app that the permissions relate to, e.g. "app:com.google.android.gm".
    string productId = 3;
}

message ProductSet {
    // Identifies what kind of resource this is. Value: the fixed string "androidenterprise#productSet".
    string kind = 1;
    // The list of product IDs making up the set of products.
    repeated string productId = 2;
    // The interpretation of this product set. "unknown" should never be sent and is ignored if received. "whitelist" means that the user is entitled to access the product set. "includeAll" means that all products are accessible, including products that are approved, products with revoked approval, and products that have never been approved. "allApproved" means that the user is entitled to access all products that are approved for the enterprise. If the value is "allApproved" or "includeAll", the productId field is ignored. If no value is provided, it is interpreted as "whitelist" for backwards compatibility. Further "allApproved" or "includeAll" does not enable automatic visibility of "alpha" or "beta" tracks for Android app. Use ProductVisibility to enable "alpha" or "beta" tracks per user.
    string productSetBehavior = 3;
    // Other products that are part of the set, in addition to those specified in the productId array. The only difference between this field and the productId array is that it's possible to specify additional information about this product visibility, see ProductVisibility and its fields for more information. Specifying the same product ID both here and in the productId array is not allowed and it will result in an error.
    repeated ProductVisibility productVisibility = 4;
}

message ProductSigningCertificate {
    // The base64 urlsafe encoded SHA1 hash of the certificate. (This field is deprecated in favor of SHA2-256. It should not be used and may be removed at any time.)
    string certificateHashSha1 = 1;
    // The base64 urlsafe encoded SHA2-256 hash of the certificate.
    string certificateHashSha256 = 2;
}

message ProductVisibility {
    // The product ID that should be made visible to the user. This is required.
    string productId = 1;
    // This allows to only grant visibility to the specified tracks of the app. For example, if an app has a prod version, a beta version and an alpha version and the enterprise has been granted visibility to both the alpha and beta tracks, if tracks is {"beta", "production"} the user will be able to install the app and they will get the beta version of the app. If there are no app versions in the specified track or if the enterprise wasn't granted visibility for the track, adding the "alpha" and "beta" values to the list of tracks will have no effect for now; however they will take effect once both conditions are met. Note that the enterprise itself needs to be granted access to the alpha and/or beta tracks, regardless of whether individual users or admins have access to those tracks.
    // 
    // The allowed sets are: {} (considered equivalent to {"production"}) {"production"} {"beta", "production"} {"alpha", "beta", "production"} The order of elements is not relevant. Any other set of tracks will be rejected with an error.
    repeated string tracks = 2;
}

message ProductsApproveRequest {
    // The approval URL that was shown to the user. Only the permissions shown to the user with that URL will be accepted, which may not be the product's entire set of permissions. For example, the URL may only display new permissions from an update after the product was approved, or not include new permissions if the product was updated since the URL was generated.
    ApprovalUrlInfo approvalUrlInfo = 1;
    // Sets how new permission requests for the product are handled. "allPermissions" automatically approves all current and future permissions for the product. "currentPermissionsOnly" approves the current set of permissions for the product, but any future permissions added through updates will require manual reapproval. If not specified, only the current set of permissions will be approved.
    string approvedPermissions = 2;
}

message ProductsGenerateApprovalUrlResponse {
    // A URL that can be rendered in an iframe to display the permissions (if any) of a product. This URL can be used to approve the product only once and only within 24 hours of being generated, using the Products.approve call. If the product is currently unapproved and has no permissions, this URL will point to an empty page. If the product is currently approved, a URL will only be generated if that product has added permissions since it was last approved, and the URL will only display those new permissions that have not yet been accepted.
    string url = 1;
}

message ProductsListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "androidenterprise#productsListResponse".
    string kind = 1;
    // General pagination information.
    PageInfo pageInfo = 2;
    // Information about a product (e.g. an app) in the Google Play store, for display to an enterprise admin.
    repeated Product product = 3;
    // Pagination information for token pagination.
    TokenPagination tokenPagination = 4;
}

message ServiceAccount {
    // Credentials that can be used to authenticate as this ServiceAccount.
    ServiceAccountKey key = 1;
    // Identifies what kind of resource this is. Value: the fixed string "androidenterprise#serviceAccount".
    string kind = 2;
    // The account name of the service account, in the form of an email address. Assigned by the server.
    string name = 3;
}

message ServiceAccountKey {
    // The body of the private key credentials file, in string format. This is only populated when the ServiceAccountKey is created, and is not stored by Google.
    string data = 1;
    // An opaque, unique identifier for this ServiceAccountKey. Assigned by the server.
    string id = 2;
    // Identifies what kind of resource this is. Value: the fixed string "androidenterprise#serviceAccountKey".
    string kind = 3;
    // Public key data for the credentials file. This is an X.509 cert. If you are using the googleCredentials key type, this is identical to the cert that can be retrieved by using the X.509 cert url inside of the credentials file.
    string publicData = 4;
    // The file format of the generated key data.
    string type = 5;
}

message ServiceAccountKeysListResponse {
    // The service account credentials.
    repeated ServiceAccountKey serviceAccountKey = 1;
}

message SignupInfo {
    // An opaque token that will be required, along with the Enterprise Token, for obtaining the enterprise resource from CompleteSignup.
    string completionToken = 1;
    // Identifies what kind of resource this is. Value: the fixed string "androidenterprise#signupInfo".
    string kind = 2;
    // A URL under which the Admin can sign up for an enterprise. The page pointed to cannot be rendered in an iframe.
    string url = 3;
}

message StoreCluster {
    // Unique ID of this cluster. Assigned by the server. Immutable once assigned.
    string id = 1;
    // Identifies what kind of resource this is. Value: the fixed string "androidenterprise#storeCluster".
    string kind = 2;
    // Ordered list of localized strings giving the name of this page. The text displayed is the one that best matches the user locale, or the first entry if there is no good match. There needs to be at least one entry.
    repeated LocalizedText name = 3;
    // String (US-ASCII only) used to determine order of this cluster within the parent page's elements. Page elements are sorted in lexicographic order of this field. Duplicated values are allowed, but ordering between elements with duplicate order is undefined.
    // 
    // The value of this field is never visible to a user, it is used solely for the purpose of defining an ordering. Maximum length is 256 characters.
    string orderInPage = 4;
    // List of products in the order they are displayed in the cluster. There should not be duplicates within a cluster.
    repeated string productId = 5;
}

message StoreLayout {
    // The ID of the store page to be used as the homepage. The homepage is the first page shown in the managed Google Play Store.
    // 
    // Not specifying a homepage is equivalent to setting the store layout type to "basic".
    string homepageId = 1;
    // Identifies what kind of resource this is. Value: the fixed string "androidenterprise#storeLayout".
    string kind = 2;
    // The store layout type. By default, this value is set to "basic" if the homepageId field is not set, and to "custom" otherwise. If set to "basic", the layout will consist of all approved apps that have been whitelisted for the user.
    string storeLayoutType = 3;
}

message StoreLayoutClustersListResponse {
    // A store cluster of an enterprise.
    repeated StoreCluster cluster = 1;
    // Identifies what kind of resource this is. Value: the fixed string "androidenterprise#storeLayoutClustersListResponse".
    string kind = 2;
}

message StoreLayoutPagesListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "androidenterprise#storeLayoutPagesListResponse".
    string kind = 1;
    // A store page of an enterprise.
    repeated StorePage page = 2;
}

message StorePage {
    // Unique ID of this page. Assigned by the server. Immutable once assigned.
    string id = 1;
    // Identifies what kind of resource this is. Value: the fixed string "androidenterprise#storePage".
    string kind = 2;
    // Ordered list of pages a user should be able to reach from this page. The pages must exist, must not be this page, and once a link is created the page linked to cannot be deleted until all links to it are removed. It is recommended that the basic pages are created first, before adding the links between pages.
    // 
    // No attempt is made to verify that all pages are reachable from the homepage.
    repeated string link = 3;
    // Ordered list of localized strings giving the name of this page. The text displayed is the one that best matches the user locale, or the first entry if there is no good match. There needs to be at least one entry.
    repeated LocalizedText name = 4;
}

message TokenPagination {
    string nextPageToken = 1;
    string previousPageToken = 2;
}

message User {
    // A unique identifier you create for this user, such as "user342" or "asset#44418". Do not use personally identifiable information (PII) for this property. Must always be set for EMM-managed users. Not set for Google-managed users.
    string accountIdentifier = 1;
    // The type of account that this user represents. A userAccount can be installed on multiple devices, but a deviceAccount is specific to a single device. An EMM-managed user (emmManaged) can be either type (userAccount, deviceAccount), but a Google-managed user (googleManaged) is always a userAccount.
    string accountType = 2;
    // The name that will appear in user interfaces. Setting this property is optional when creating EMM-managed users. If you do set this property, use something generic about the organization (such as "Example, Inc.") or your name (as EMM). Not used for Google-managed user accounts.
    string displayName = 3;
    // The unique ID for the user.
    string id = 4;
    // Identifies what kind of resource this is. Value: the fixed string "androidenterprise#user".
    string kind = 5;
    // The entity that manages the user. With googleManaged users, the source of truth is Google so EMMs have to make sure a Google Account exists for the user. With emmManaged users, the EMM is in charge.
    string managementType = 6;
    // The user's primary email address, for example, "jsmith@example.com". Will always be set for Google managed users and not set for EMM managed users.
    string primaryEmail = 7;
}

message UserToken {
    // Identifies what kind of resource this is. Value: the fixed string "androidenterprise#userToken".
    string kind = 1;
    // The token (activation code) to be entered by the user. This consists of a sequence of decimal digits. Note that the leading digit may be 0.
    string token = 2;
    // The unique ID for the user.
    string userId = 3;
}

message UsersListResponse {
    // Identifies what kind of resource this is. Value: the fixed string "androidenterprise#usersListResponse".
    string kind = 1;
    // A user of an enterprise.
    repeated User user = 2;
}

enum Alt {
    JSON = 0;
}

service GooglePlayEMMService {
    // Looks up an enterprise by domain name. This is only supported for enterprises created via the Google-initiated creation flow. Lookup of the id is not needed for enterprises created via the EMM-initiated flow since the EMM learns the enterprise ID in the callback specified in the Enterprises.generateSignupUrl call.
    rpc GetEnterprises(GetEnterprisesRequest) returns (EnterprisesListResponse) {
      option (google.api.http) = {
        get: "/androidenterprise/v1/enterprises"
      };
    }
    // Establishes the binding between the EMM and an enterprise. This is now deprecated; use enroll instead.
    rpc PostEnterprises(PostEnterprisesRequest) returns (Enterprise) {
      option (google.api.http) = {
        post: "/androidenterprise/v1/enterprises"
        body: "body"
      };
    }
    // Acknowledges notifications that were received from Enterprises.PullNotificationSet to prevent subsequent calls from returning the same notifications.
    rpc PostEnterprisesAcknowledgeNotificationSet(PostEnterprisesAcknowledgeNotificationSetRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/androidenterprise/v1/enterprises/acknowledgeNotificationSet"
      };
    }
    // Completes the signup flow, by specifying the Completion token and Enterprise token. This request must not be called multiple times for a given Enterprise Token.
    rpc PostEnterprisesCompleteSignup(PostEnterprisesCompleteSignupRequest) returns (Enterprise) {
      option (google.api.http) = {
        post: "/androidenterprise/v1/enterprises/completeSignup"
      };
    }
    // Enrolls an enterprise with the calling EMM.
    rpc PostEnterprisesEnroll(PostEnterprisesEnrollRequest) returns (Enterprise) {
      option (google.api.http) = {
        post: "/androidenterprise/v1/enterprises/enroll"
        body: "body"
      };
    }
    // Pulls and returns a notification set for the enterprises associated with the service account authenticated for the request. The notification set may be empty if no notification are pending.
    // A notification set returned needs to be acknowledged within 20 seconds by calling Enterprises.AcknowledgeNotificationSet, unless the notification set is empty.
    // Notifications that are not acknowledged within the 20 seconds will eventually be included again in the response to another PullNotificationSet request, and those that are never acknowledged will ultimately be deleted according to the Google Cloud Platform Pub/Sub system policy.
    // Multiple requests might be performed concurrently to retrieve notifications, in which case the pending notifications (if any) will be split among each caller, if any are pending.
    // If no notifications are present, an empty notification list is returned. Subsequent requests may return more notifications once they become available.
    rpc PostEnterprisesPullNotificationSet(PostEnterprisesPullNotificationSetRequest) returns (NotificationSet) {
      option (google.api.http) = {
        post: "/androidenterprise/v1/enterprises/pullNotificationSet"
      };
    }
    // Generates a sign-up URL.
    rpc PostEnterprisesSignupUrl(PostEnterprisesSignupUrlRequest) returns (SignupInfo) {
      option (google.api.http) = {
        post: "/androidenterprise/v1/enterprises/signupUrl"
      };
    }
    // Retrieves the name and domain of an enterprise.
    rpc GetEnterprisesEnterpriseId(GetEnterprisesEnterpriseIdRequest) returns (Enterprise) {
      option (google.api.http) = {
        get: "/androidenterprise/v1/enterprises/{enterpriseId}"
      };
    }
    // Deletes the binding between the EMM and enterprise. This is now deprecated. Use this method only to unenroll customers that were previously enrolled with the insert call, then enroll them again with the enroll call.
    rpc DeleteEnterprisesEnterpriseId(DeleteEnterprisesEnterpriseIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/androidenterprise/v1/enterprises/{enterpriseId}"
      };
    }
    // Sets the account that will be used to authenticate to the API as the enterprise.
    rpc PutEnterprisesEnterpriseIdAccount(PutEnterprisesEnterpriseIdAccountRequest) returns (EnterpriseAccount) {
      option (google.api.http) = {
        put: "/androidenterprise/v1/enterprises/{enterpriseId}/account"
        body: "body"
      };
    }
    // Returns the Android Device Policy config resource.
    rpc GetEnterprisesEnterpriseIdAndroidDevicePolicyConfig(GetEnterprisesEnterpriseIdAndroidDevicePolicyConfigRequest) returns (AndroidDevicePolicyConfig) {
      option (google.api.http) = {
        get: "/androidenterprise/v1/enterprises/{enterpriseId}/androidDevicePolicyConfig"
      };
    }
    // Sets the Android Device Policy config resource. EMM may use this method to enable or disable Android Device Policy support for the specified enterprise. To learn more about managing devices and apps with Android Device Policy, see the Android Management API.
    rpc PutEnterprisesEnterpriseIdAndroidDevicePolicyConfig(PutEnterprisesEnterpriseIdAndroidDevicePolicyConfigRequest) returns (AndroidDevicePolicyConfig) {
      option (google.api.http) = {
        put: "/androidenterprise/v1/enterprises/{enterpriseId}/androidDevicePolicyConfig"
        body: "body"
      };
    }
    // Returns a unique token to access an embeddable UI. To generate a web UI, pass the generated token into the managed Google Play javascript API. Each token may only be used to start one UI session. See the javascript API documentation for further information.
    rpc PostEnterprisesEnterpriseIdCreateWebToken(PostEnterprisesEnterpriseIdCreateWebTokenRequest) returns (AdministratorWebToken) {
      option (google.api.http) = {
        post: "/androidenterprise/v1/enterprises/{enterpriseId}/createWebToken"
        body: "body"
      };
    }
    // Retrieves IDs of all products for which the enterprise has a group license.
    rpc GetEnterprisesEnterpriseIdGroupLicenses(GetEnterprisesEnterpriseIdGroupLicensesRequest) returns (GroupLicensesListResponse) {
      option (google.api.http) = {
        get: "/androidenterprise/v1/enterprises/{enterpriseId}/groupLicenses"
      };
    }
    // Retrieves details of an enterprise's group license for a product.
    rpc GetEnterprisesEnterpriseIdGroupLicensesGroupLicenseId(GetEnterprisesEnterpriseIdGroupLicensesGroupLicenseIdRequest) returns (GroupLicense) {
      option (google.api.http) = {
        get: "/androidenterprise/v1/enterprises/{enterpriseId}/groupLicenses/{groupLicenseId}"
      };
    }
    // Retrieves the IDs of the users who have been granted entitlements under the license.
    rpc GetEnterprisesEnterpriseIdGroupLicensesGroupLicenseIdUsers(GetEnterprisesEnterpriseIdGroupLicensesGroupLicenseIdUsersRequest) returns (GroupLicenseUsersListResponse) {
      option (google.api.http) = {
        get: "/androidenterprise/v1/enterprises/{enterpriseId}/groupLicenses/{groupLicenseId}/users"
      };
    }
    // Finds approved products that match a query, or all approved products if there is no query.
    rpc GetEnterprisesEnterpriseIdProducts(GetEnterprisesEnterpriseIdProductsRequest) returns (ProductsListResponse) {
      option (google.api.http) = {
        get: "/androidenterprise/v1/enterprises/{enterpriseId}/products"
      };
    }
    // Retrieves details of a product for display to an enterprise admin.
    rpc GetEnterprisesEnterpriseIdProductsProductId(GetEnterprisesEnterpriseIdProductsProductIdRequest) returns (Product) {
      option (google.api.http) = {
        get: "/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}"
      };
    }
    // Retrieves the schema that defines the configurable properties for this product. All products have a schema, but this schema may be empty if no managed configurations have been defined. This schema can be used to populate a UI that allows an admin to configure the product. To apply a managed configuration based on the schema obtained using this API, see Managed Configurations through Play.
    rpc GetEnterprisesEnterpriseIdProductsProductIdAppRestrictionsSchema(GetEnterprisesEnterpriseIdProductsProductIdAppRestrictionsSchemaRequest) returns (AppRestrictionsSchema) {
      option (google.api.http) = {
        get: "/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/appRestrictionsSchema"
      };
    }
    // Approves the specified product and the relevant app permissions, if any. The maximum number of products that you can approve per enterprise customer is 1,000.
    // 
    // To learn how to use managed Google Play to design and create a store layout to display approved products to your users, see Store Layout Design.
    rpc PostEnterprisesEnterpriseIdProductsProductIdApprove(PostEnterprisesEnterpriseIdProductsProductIdApproveRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/approve"
        body: "body"
      };
    }
    // Generates a URL that can be rendered in an iframe to display the permissions (if any) of a product. An enterprise admin must view these permissions and accept them on behalf of their organization in order to approve that product.
    // 
    // Admins should accept the displayed permissions by interacting with a separate UI element in the EMM console, which in turn should trigger the use of this URL as the approvalUrlInfo.approvalUrl property in a Products.approve call to approve the product. This URL can only be used to display permissions for up to 1 day.
    rpc PostEnterprisesEnterpriseIdProductsProductIdGenerateApprovalUrl(PostEnterprisesEnterpriseIdProductsProductIdGenerateApprovalUrlRequest) returns (ProductsGenerateApprovalUrlResponse) {
      option (google.api.http) = {
        post: "/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/generateApprovalUrl"
      };
    }
    // Retrieves the Android app permissions required by this app.
    rpc GetEnterprisesEnterpriseIdProductsProductIdPermissions(GetEnterprisesEnterpriseIdProductsProductIdPermissionsRequest) returns (ProductPermissions) {
      option (google.api.http) = {
        get: "/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/permissions"
      };
    }
    // Unapproves the specified product (and the relevant app permissions, if any)
    rpc PostEnterprisesEnterpriseIdProductsProductIdUnapprove(PostEnterprisesEnterpriseIdProductsProductIdUnapproveRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/unapprove"
      };
    }
    // Sends a test notification to validate the EMM integration with the Google Cloud Pub/Sub service for this enterprise.
    rpc PostEnterprisesEnterpriseIdSendTestPushNotification(PostEnterprisesEnterpriseIdSendTestPushNotificationRequest) returns (EnterprisesSendTestPushNotificationResponse) {
      option (google.api.http) = {
        post: "/androidenterprise/v1/enterprises/{enterpriseId}/sendTestPushNotification"
      };
    }
    // Returns a service account and credentials. The service account can be bound to the enterprise by calling setAccount. The service account is unique to this enterprise and EMM, and will be deleted if the enterprise is unbound. The credentials contain private key data and are not stored server-side.
    // 
    // This method can only be called after calling Enterprises.Enroll or Enterprises.CompleteSignup, and before Enterprises.SetAccount; at other times it will return an error.
    // 
    // Subsequent calls after the first will generate a new, unique set of credentials, and invalidate the previously generated credentials.
    // 
    // Once the service account is bound to the enterprise, it can be managed using the serviceAccountKeys resource.
    rpc GetEnterprisesEnterpriseIdServiceAccount(GetEnterprisesEnterpriseIdServiceAccountRequest) returns (ServiceAccount) {
      option (google.api.http) = {
        get: "/androidenterprise/v1/enterprises/{enterpriseId}/serviceAccount"
      };
    }
    // Lists all active credentials for the service account associated with this enterprise. Only the ID and key type are returned. The calling service account must have been retrieved by calling Enterprises.GetServiceAccount and must have been set as the enterprise service account by calling Enterprises.SetAccount.
    rpc GetEnterprisesEnterpriseIdServiceAccountKeys(GetEnterprisesEnterpriseIdServiceAccountKeysRequest) returns (ServiceAccountKeysListResponse) {
      option (google.api.http) = {
        get: "/androidenterprise/v1/enterprises/{enterpriseId}/serviceAccountKeys"
      };
    }
    // Generates new credentials for the service account associated with this enterprise. The calling service account must have been retrieved by calling Enterprises.GetServiceAccount and must have been set as the enterprise service account by calling Enterprises.SetAccount.
    // 
    // Only the type of the key should be populated in the resource to be inserted.
    rpc PostEnterprisesEnterpriseIdServiceAccountKeys(PostEnterprisesEnterpriseIdServiceAccountKeysRequest) returns (ServiceAccountKey) {
      option (google.api.http) = {
        post: "/androidenterprise/v1/enterprises/{enterpriseId}/serviceAccountKeys"
        body: "body"
      };
    }
    // Removes and invalidates the specified credentials for the service account associated with this enterprise. The calling service account must have been retrieved by calling Enterprises.GetServiceAccount and must have been set as the enterprise service account by calling Enterprises.SetAccount.
    rpc DeleteEnterprisesEnterpriseIdServiceAccountKeysKeyId(DeleteEnterprisesEnterpriseIdServiceAccountKeysKeyIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/androidenterprise/v1/enterprises/{enterpriseId}/serviceAccountKeys/{keyId}"
      };
    }
    // Returns the store layout for the enterprise. If the store layout has not been set, returns "basic" as the store layout type and no homepage.
    rpc GetEnterprisesEnterpriseIdStoreLayout(GetEnterprisesEnterpriseIdStoreLayoutRequest) returns (StoreLayout) {
      option (google.api.http) = {
        get: "/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout"
      };
    }
    // Sets the store layout for the enterprise. By default, storeLayoutType is set to "basic" and the basic store layout is enabled. The basic layout only contains apps approved by the admin, and that have been added to the available product set for a user (using the  setAvailableProductSet call). Apps on the page are sorted in order of their product ID value. If you create a custom store layout (by setting storeLayoutType = "custom" and setting a homepage), the basic store layout is disabled.
    rpc PutEnterprisesEnterpriseIdStoreLayout(PutEnterprisesEnterpriseIdStoreLayoutRequest) returns (StoreLayout) {
      option (google.api.http) = {
        put: "/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout"
        body: "body"
      };
    }
    // Retrieves the details of all pages in the store.
    rpc GetEnterprisesEnterpriseIdStoreLayoutPages(GetEnterprisesEnterpriseIdStoreLayoutPagesRequest) returns (StoreLayoutPagesListResponse) {
      option (google.api.http) = {
        get: "/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages"
      };
    }
    // Inserts a new store page.
    rpc PostEnterprisesEnterpriseIdStoreLayoutPages(PostEnterprisesEnterpriseIdStoreLayoutPagesRequest) returns (StorePage) {
      option (google.api.http) = {
        post: "/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages"
        body: "body"
      };
    }
    // Retrieves details of a store page.
    rpc GetEnterprisesEnterpriseIdStoreLayoutPagesPageId(GetEnterprisesEnterpriseIdStoreLayoutPagesPageIdRequest) returns (StorePage) {
      option (google.api.http) = {
        get: "/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}"
      };
    }
    // Updates the content of a store page.
    rpc PutEnterprisesEnterpriseIdStoreLayoutPagesPageId(PutEnterprisesEnterpriseIdStoreLayoutPagesPageIdRequest) returns (StorePage) {
      option (google.api.http) = {
        put: "/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}"
        body: "body"
      };
    }
    // Deletes a store page.
    rpc DeleteEnterprisesEnterpriseIdStoreLayoutPagesPageId(DeleteEnterprisesEnterpriseIdStoreLayoutPagesPageIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}"
      };
    }
    // Retrieves the details of all clusters on the specified page.
    rpc GetEnterprisesEnterpriseIdStoreLayoutPagesPageIdClusters(GetEnterprisesEnterpriseIdStoreLayoutPagesPageIdClustersRequest) returns (StoreLayoutClustersListResponse) {
      option (google.api.http) = {
        get: "/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters"
      };
    }
    // Inserts a new cluster in a page.
    rpc PostEnterprisesEnterpriseIdStoreLayoutPagesPageIdClusters(PostEnterprisesEnterpriseIdStoreLayoutPagesPageIdClustersRequest) returns (StoreCluster) {
      option (google.api.http) = {
        post: "/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters"
        body: "body"
      };
    }
    // Retrieves details of a cluster.
    rpc GetEnterprisesEnterpriseIdStoreLayoutPagesPageIdClustersClusterId(GetEnterprisesEnterpriseIdStoreLayoutPagesPageIdClustersClusterIdRequest) returns (StoreCluster) {
      option (google.api.http) = {
        get: "/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}"
      };
    }
    // Updates a cluster.
    rpc PutEnterprisesEnterpriseIdStoreLayoutPagesPageIdClustersClusterId(PutEnterprisesEnterpriseIdStoreLayoutPagesPageIdClustersClusterIdRequest) returns (StoreCluster) {
      option (google.api.http) = {
        put: "/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}"
        body: "body"
      };
    }
    // Deletes a cluster.
    rpc DeleteEnterprisesEnterpriseIdStoreLayoutPagesPageIdClustersClusterId(DeleteEnterprisesEnterpriseIdStoreLayoutPagesPageIdClustersClusterIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}"
      };
    }
    // Unenrolls an enterprise from the calling EMM.
    rpc PostEnterprisesEnterpriseIdUnenroll(PostEnterprisesEnterpriseIdUnenrollRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/androidenterprise/v1/enterprises/{enterpriseId}/unenroll"
      };
    }
    // Looks up a user by primary email address. This is only supported for Google-managed users. Lookup of the id is not needed for EMM-managed users because the id is already returned in the result of the Users.insert call.
    rpc GetEnterprisesEnterpriseIdUsers(GetEnterprisesEnterpriseIdUsersRequest) returns (UsersListResponse) {
      option (google.api.http) = {
        get: "/androidenterprise/v1/enterprises/{enterpriseId}/users"
      };
    }
    // Creates a new EMM-managed user.
    // 
    // The Users resource passed in the body of the request should include an accountIdentifier and an accountType.
    // If a corresponding user already exists with the same account identifier, the user will be updated with the resource. In this case only the displayName field can be changed.
    rpc PostEnterprisesEnterpriseIdUsers(PostEnterprisesEnterpriseIdUsersRequest) returns (User) {
      option (google.api.http) = {
        post: "/androidenterprise/v1/enterprises/{enterpriseId}/users"
        body: "body"
      };
    }
    // Retrieves a user's details.
    rpc GetEnterprisesEnterpriseIdUsersUserId(GetEnterprisesEnterpriseIdUsersUserIdRequest) returns (User) {
      option (google.api.http) = {
        get: "/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}"
      };
    }
    // Updates the details of an EMM-managed user.
    // 
    // Can be used with EMM-managed users only (not Google managed users). Pass the new details in the Users resource in the request body. Only the displayName field can be changed. Other fields must either be unset or have the currently active value.
    rpc PutEnterprisesEnterpriseIdUsersUserId(PutEnterprisesEnterpriseIdUsersUserIdRequest) returns (User) {
      option (google.api.http) = {
        put: "/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}"
        body: "body"
      };
    }
    // Deleted an EMM-managed user.
    rpc DeleteEnterprisesEnterpriseIdUsersUserId(DeleteEnterprisesEnterpriseIdUsersUserIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}"
      };
    }
    // Generates an authentication token which the device policy client can use to provision the given EMM-managed user account on a device. The generated token is single-use and expires after a few minutes.
    // 
    // This call only works with EMM-managed accounts.
    rpc PostEnterprisesEnterpriseIdUsersUserIdAuthenticationToken(PostEnterprisesEnterpriseIdUsersUserIdAuthenticationTokenRequest) returns (AuthenticationToken) {
      option (google.api.http) = {
        post: "/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/authenticationToken"
      };
    }
    // Retrieves the set of products a user is entitled to access.
    rpc GetEnterprisesEnterpriseIdUsersUserIdAvailableProductSet(GetEnterprisesEnterpriseIdUsersUserIdAvailableProductSetRequest) returns (ProductSet) {
      option (google.api.http) = {
        get: "/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/availableProductSet"
      };
    }
    // Modifies the set of products that a user is entitled to access (referred to as whitelisted products). Only products that are approved or products that were previously approved (products with revoked approval) can be whitelisted.
    rpc PutEnterprisesEnterpriseIdUsersUserIdAvailableProductSet(PutEnterprisesEnterpriseIdUsersUserIdAvailableProductSetRequest) returns (ProductSet) {
      option (google.api.http) = {
        put: "/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/availableProductSet"
        body: "body"
      };
    }
    // Retrieves the IDs of all of a user's devices.
    rpc GetEnterprisesEnterpriseIdUsersUserIdDevices(GetEnterprisesEnterpriseIdUsersUserIdDevicesRequest) returns (DevicesListResponse) {
      option (google.api.http) = {
        get: "/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices"
      };
    }
    // Retrieves the details of a device.
    rpc GetEnterprisesEnterpriseIdUsersUserIdDevicesDeviceId(GetEnterprisesEnterpriseIdUsersUserIdDevicesDeviceIdRequest) returns (Device) {
      option (google.api.http) = {
        get: "/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}"
      };
    }
    // Retrieves the details of all apps installed on the specified device.
    rpc GetEnterprisesEnterpriseIdUsersUserIdDevicesDeviceIdInstalls(GetEnterprisesEnterpriseIdUsersUserIdDevicesDeviceIdInstallsRequest) returns (InstallsListResponse) {
      option (google.api.http) = {
        get: "/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs"
      };
    }
    // Retrieves details of an installation of an app on a device.
    rpc GetEnterprisesEnterpriseIdUsersUserIdDevicesDeviceIdInstallsInstallId(GetEnterprisesEnterpriseIdUsersUserIdDevicesDeviceIdInstallsInstallIdRequest) returns (Install) {
      option (google.api.http) = {
        get: "/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}"
      };
    }
    // Requests to install the latest version of an app to a device. If the app is already installed, then it is updated to the latest version if necessary.
    rpc PutEnterprisesEnterpriseIdUsersUserIdDevicesDeviceIdInstallsInstallId(PutEnterprisesEnterpriseIdUsersUserIdDevicesDeviceIdInstallsInstallIdRequest) returns (Install) {
      option (google.api.http) = {
        put: "/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}"
        body: "body"
      };
    }
    // Requests to remove an app from a device. A call to get or list will still show the app as installed on the device until it is actually removed.
    rpc DeleteEnterprisesEnterpriseIdUsersUserIdDevicesDeviceIdInstallsInstallId(DeleteEnterprisesEnterpriseIdUsersUserIdDevicesDeviceIdInstallsInstallIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}"
      };
    }
    // Lists all the per-device managed configurations for the specified device. Only the ID is set.
    rpc GetEnterprisesEnterpriseIdUsersUserIdDevicesDeviceIdManagedConfigurationsForDevice(GetEnterprisesEnterpriseIdUsersUserIdDevicesDeviceIdManagedConfigurationsForDeviceRequest) returns (ManagedConfigurationsForDeviceListResponse) {
      option (google.api.http) = {
        get: "/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice"
      };
    }
    // Retrieves details of a per-device managed configuration.
    rpc GetEnterprisesEnterpriseIdUsersUserIdDevicesDeviceIdManagedConfigurationsForDeviceManagedConfigurationForDeviceId(GetEnterprisesEnterpriseIdUsersUserIdDevicesDeviceIdManagedConfigurationsForDeviceManagedConfigurationForDeviceIdRequest) returns (ManagedConfiguration) {
      option (google.api.http) = {
        get: "/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}"
      };
    }
    // Adds or updates a per-device managed configuration for an app for the specified device.
    rpc PutEnterprisesEnterpriseIdUsersUserIdDevicesDeviceIdManagedConfigurationsForDeviceManagedConfigurationForDeviceId(PutEnterprisesEnterpriseIdUsersUserIdDevicesDeviceIdManagedConfigurationsForDeviceManagedConfigurationForDeviceIdRequest) returns (ManagedConfiguration) {
      option (google.api.http) = {
        put: "/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}"
        body: "body"
      };
    }
    // Removes a per-device managed configuration for an app for the specified device.
    rpc DeleteEnterprisesEnterpriseIdUsersUserIdDevicesDeviceIdManagedConfigurationsForDeviceManagedConfigurationForDeviceId(DeleteEnterprisesEnterpriseIdUsersUserIdDevicesDeviceIdManagedConfigurationsForDeviceManagedConfigurationForDeviceIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}"
      };
    }
    // Retrieves whether a device's access to Google services is enabled or disabled. The device state takes effect only if enforcing EMM policies on Android devices is enabled in the Google Admin Console. Otherwise, the device state is ignored and all devices are allowed access to Google services. This is only supported for Google-managed users.
    rpc GetEnterprisesEnterpriseIdUsersUserIdDevicesDeviceIdState(GetEnterprisesEnterpriseIdUsersUserIdDevicesDeviceIdStateRequest) returns (DeviceState) {
      option (google.api.http) = {
        get: "/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/state"
      };
    }
    // Sets whether a device's access to Google services is enabled or disabled. The device state takes effect only if enforcing EMM policies on Android devices is enabled in the Google Admin Console. Otherwise, the device state is ignored and all devices are allowed access to Google services. This is only supported for Google-managed users.
    rpc PutEnterprisesEnterpriseIdUsersUserIdDevicesDeviceIdState(PutEnterprisesEnterpriseIdUsersUserIdDevicesDeviceIdStateRequest) returns (DeviceState) {
      option (google.api.http) = {
        put: "/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/state"
        body: "body"
      };
    }
    // Lists all entitlements for the specified user. Only the ID is set.
    rpc GetEnterprisesEnterpriseIdUsersUserIdEntitlements(GetEnterprisesEnterpriseIdUsersUserIdEntitlementsRequest) returns (EntitlementsListResponse) {
      option (google.api.http) = {
        get: "/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements"
      };
    }
    // Retrieves details of an entitlement.
    rpc GetEnterprisesEnterpriseIdUsersUserIdEntitlementsEntitlementId(GetEnterprisesEnterpriseIdUsersUserIdEntitlementsEntitlementIdRequest) returns (Entitlement) {
      option (google.api.http) = {
        get: "/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}"
      };
    }
    // Adds or updates an entitlement to an app for a user.
    rpc PutEnterprisesEnterpriseIdUsersUserIdEntitlementsEntitlementId(PutEnterprisesEnterpriseIdUsersUserIdEntitlementsEntitlementIdRequest) returns (Entitlement) {
      option (google.api.http) = {
        put: "/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}"
        body: "body"
      };
    }
    // Removes an entitlement to an app for a user.
    rpc DeleteEnterprisesEnterpriseIdUsersUserIdEntitlementsEntitlementId(DeleteEnterprisesEnterpriseIdUsersUserIdEntitlementsEntitlementIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}"
      };
    }
    // Lists all the per-user managed configurations for the specified user. Only the ID is set.
    rpc GetEnterprisesEnterpriseIdUsersUserIdManagedConfigurationsForUser(GetEnterprisesEnterpriseIdUsersUserIdManagedConfigurationsForUserRequest) returns (ManagedConfigurationsForUserListResponse) {
      option (google.api.http) = {
        get: "/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser"
      };
    }
    // Retrieves details of a per-user managed configuration for an app for the specified user.
    rpc GetEnterprisesEnterpriseIdUsersUserIdManagedConfigurationsForUserManagedConfigurationForUserId(GetEnterprisesEnterpriseIdUsersUserIdManagedConfigurationsForUserManagedConfigurationForUserIdRequest) returns (ManagedConfiguration) {
      option (google.api.http) = {
        get: "/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}"
      };
    }
    // Adds or updates a per-user managed configuration for an app for the specified user.
    rpc PutEnterprisesEnterpriseIdUsersUserIdManagedConfigurationsForUserManagedConfigurationForUserId(PutEnterprisesEnterpriseIdUsersUserIdManagedConfigurationsForUserManagedConfigurationForUserIdRequest) returns (ManagedConfiguration) {
      option (google.api.http) = {
        put: "/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}"
        body: "body"
      };
    }
    // Removes a per-user managed configuration for an app for the specified user.
    rpc DeleteEnterprisesEnterpriseIdUsersUserIdManagedConfigurationsForUserManagedConfigurationForUserId(DeleteEnterprisesEnterpriseIdUsersUserIdManagedConfigurationsForUserManagedConfigurationForUserIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}"
      };
    }
    // Generates a token (activation code) to allow this user to configure their managed account in the Android Setup Wizard. Revokes any previously generated token.
    // 
    // This call only works with Google managed accounts.
    rpc PostEnterprisesEnterpriseIdUsersUserIdToken(PostEnterprisesEnterpriseIdUsersUserIdTokenRequest) returns (UserToken) {
      option (google.api.http) = {
        post: "/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/token"
      };
    }
    // Revokes a previously generated token (activation code) for the user.
    rpc DeleteEnterprisesEnterpriseIdUsersUserIdToken(DeleteEnterprisesEnterpriseIdUsersUserIdTokenRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/token"
      };
    }
    // Retrieves details of an Android app permission for display to an enterprise admin.
    rpc GetPermissionsPermissionId(GetPermissionsPermissionIdRequest) returns (Permission) {
      option (google.api.http) = {
        get: "/androidenterprise/v1/permissions/{permissionId}"
      };
    }
}

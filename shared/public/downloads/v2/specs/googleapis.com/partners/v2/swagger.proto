syntax = "proto3";

import "google/api/annotations.proto";

package googlepartners;

message GetV2AnalyticsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    // Requested page size. Server may return fewer analytics than requested.
    // If unspecified or set to 0, default value is 30.
    // Specifies the number of days in the date range when querying analytics.
    // The `page_token` represents the end date of the date range
    // and the start date is calculated using the `page_size` as the number
    // of days BEFORE the end date.
    // Must be a non-negative integer.
    int32 pageSize = 9;
    // A token identifying a page of results that the server returns.
    // Typically, this is the value of `ListAnalyticsResponse.next_page_token`
    // returned from the previous call to
    // ListAnalytics.
    // Will be a date string in `YYYY-MM-DD` format representing the end date
    // of the date range of results to return.
    // If unspecified or set to "", default value is the current date.
    string pageToken = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    // Experiment IDs the current request belongs to.
    repeated string requestMetadata.experimentIds = 14;
    // Locale to use for the current request.
    string requestMetadata.locale = 15;
    // Google Partners session ID.
    string requestMetadata.partnersSessionId = 16;
    // Identifier to indicate where the traffic comes from.
    // An identifier has multiple letters created by a team which redirected the
    // traffic to us.
    string requestMetadata.trafficSource.trafficSourceId = 17;
    // Second level identifier to indicate where the traffic comes from.
    // An identifier has multiple letters created by a team which redirected the
    // traffic to us.
    string requestMetadata.trafficSource.trafficSubId = 18;
    // IP address to use instead of the user's geo-located IP address.
    string requestMetadata.userOverrides.ipAddress = 19;
    // Logged-in user ID to impersonate instead of the user's ID.
    string requestMetadata.userOverrides.userId = 20;
    string uploadType = 21;
    string upload_protocol = 22;
}

message PostV2ClientMessages:LogRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    LogMessageRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message GetV2CompaniesRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // The address to use when searching for companies.
    // If not given, the geo-located address of the request is used.
    string address = 3;
    alt alt = 4;
    string bearer_token = 5;
    string callback = 6;
    // Company name to search for.
    string companyName = 7;
    string fields = 8;
    // List of reasons for using Google Partner Search to get companies.
    repeated string gpsMotivations = 9;
    // List of industries the company can help with.
    repeated string industries = 10;
    string key = 11;
    // List of language codes that company can support. Only primary language
    // subtags are accepted as defined by
    // <a href="https://tools.ietf.org/html/bcp47">BCP 47</a>
    // (IETF BCP 47, "Tags for Identifying Languages").
    repeated string languageCodes = 12;
    // The 3-letter currency code defined in ISO 4217.
    string maxMonthlyBudget.currencyCode = 13;
    // Number of nano (10^-9) units of the amount.
    // The value must be between -999,999,999 and +999,999,999 inclusive.
    // If `units` is positive, `nanos` must be positive or zero.
    // If `units` is zero, `nanos` can be positive, zero, or negative.
    // If `units` is negative, `nanos` must be negative or zero.
    // For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
    int32 maxMonthlyBudget.nanos = 14;
    // The whole units of the amount.
    // For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
    string maxMonthlyBudget.units = 15;
    // The 3-letter currency code defined in ISO 4217.
    string minMonthlyBudget.currencyCode = 16;
    // Number of nano (10^-9) units of the amount.
    // The value must be between -999,999,999 and +999,999,999 inclusive.
    // If `units` is positive, `nanos` must be positive or zero.
    // If `units` is zero, `nanos` can be positive, zero, or negative.
    // If `units` is negative, `nanos` must be negative or zero.
    // For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
    int32 minMonthlyBudget.nanos = 17;
    // The whole units of the amount.
    // For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
    string minMonthlyBudget.units = 18;
    string oauth_token = 19;
    // How to order addresses within the returned companies. Currently, only
    // `address` and `address desc` is supported which will sorted by closest to
    // farthest in distance from given address and farthest to closest distance
    // from given address respectively.
    string orderBy = 20;
    // Requested page size. Server may return fewer companies than requested.
    // If unspecified, server picks an appropriate default.
    int32 pageSize = 21;
    // A token identifying a page of results that the server returns.
    // Typically, this is the value of `ListCompaniesResponse.next_page_token`
    // returned from the previous call to
    // ListCompanies.
    string pageToken = 22;
    boolean pp = 23;
    boolean prettyPrint = 24;
    string quotaUser = 25;
    // Experiment IDs the current request belongs to.
    repeated string requestMetadata.experimentIds = 26;
    // Locale to use for the current request.
    string requestMetadata.locale = 27;
    // Google Partners session ID.
    string requestMetadata.partnersSessionId = 28;
    // Identifier to indicate where the traffic comes from.
    // An identifier has multiple letters created by a team which redirected the
    // traffic to us.
    string requestMetadata.trafficSource.trafficSourceId = 29;
    // Second level identifier to indicate where the traffic comes from.
    // An identifier has multiple letters created by a team which redirected the
    // traffic to us.
    string requestMetadata.trafficSource.trafficSubId = 30;
    // IP address to use instead of the user's geo-located IP address.
    string requestMetadata.userOverrides.ipAddress = 31;
    // Logged-in user ID to impersonate instead of the user's ID.
    string requestMetadata.userOverrides.userId = 32;
    // List of services that the returned agencies should provide. If this is
    // not empty, any returned agency must have at least one of these services,
    // or one of the specializations in the "specializations" field.
    repeated string services = 33;
    // List of specializations that the returned agencies should provide. If this
    // is not empty, any returned agency must have at least one of these
    // specializations, or one of the services in the "services" field.
    repeated string specializations = 34;
    string uploadType = 35;
    string upload_protocol = 36;
    // The view of the `Company` resource to be returned. This must not be
    // `COMPANY_VIEW_UNSPECIFIED`.
    enum GetV2CompaniesRequest_View {
        GETV2COMPANIESREQUEST_VIEW_COMPANY_VIEW_UNSPECIFIED = 0;
        GETV2COMPANIESREQUEST_VIEW_CV_GOOGLE_PARTNER_SEARCH = 1;
    }
    GetV2CompaniesRequest_View view = 37;
    // Website URL that will help to find a better matched company.
    // .
    string websiteUrl = 38;
}

message GetV2CompaniesCompanyIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    // The address to use for sorting the company's addresses by proximity.
    // If not given, the geo-located address of the request is used.
    // Used when order_by is set.
    string address = 3;
    alt alt = 4;
    string bearer_token = 5;
    string callback = 6;
    // The ID of the company to retrieve.
    string companyId = 7;
    // If the company's budget is in a different currency code than this one, then
    // the converted budget is converted to this currency code.
    string currencyCode = 8;
    string fields = 9;
    string key = 10;
    string oauth_token = 11;
    // How to order addresses within the returned company. Currently, only
    // `address` and `address desc` is supported which will sorted by closest to
    // farthest in distance from given address and farthest to closest distance
    // from given address respectively.
    string orderBy = 12;
    boolean pp = 13;
    boolean prettyPrint = 14;
    string quotaUser = 15;
    // Experiment IDs the current request belongs to.
    repeated string requestMetadata.experimentIds = 16;
    // Locale to use for the current request.
    string requestMetadata.locale = 17;
    // Google Partners session ID.
    string requestMetadata.partnersSessionId = 18;
    // Identifier to indicate where the traffic comes from.
    // An identifier has multiple letters created by a team which redirected the
    // traffic to us.
    string requestMetadata.trafficSource.trafficSourceId = 19;
    // Second level identifier to indicate where the traffic comes from.
    // An identifier has multiple letters created by a team which redirected the
    // traffic to us.
    string requestMetadata.trafficSource.trafficSubId = 20;
    // IP address to use instead of the user's geo-located IP address.
    string requestMetadata.userOverrides.ipAddress = 21;
    // Logged-in user ID to impersonate instead of the user's ID.
    string requestMetadata.userOverrides.userId = 22;
    string uploadType = 23;
    string upload_protocol = 24;
    // The view of `Company` resource to be returned. This must not be
    // `COMPANY_VIEW_UNSPECIFIED`.
    enum GetV2CompaniesCompanyIdRequest_View {
        GETV2COMPANIESCOMPANYIDREQUEST_VIEW_COMPANY_VIEW_UNSPECIFIED = 0;
        GETV2COMPANIESCOMPANYIDREQUEST_VIEW_CV_GOOGLE_PARTNER_SEARCH = 1;
    }
    GetV2CompaniesCompanyIdRequest_View view = 25;
}

message PostV2CompaniesCompanyIdLeadsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    CreateLeadRequest body = 5;
    string callback = 6;
    // The ID of the company to contact.
    string companyId = 7;
    string fields = 8;
    string key = 9;
    string oauth_token = 10;
    boolean pp = 11;
    boolean prettyPrint = 12;
    string quotaUser = 13;
    string uploadType = 14;
    string upload_protocol = 15;
}

message GetV2ExamsExamTypeTokenRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    // The exam type we are requesting a token for.
    enum GetV2ExamsExamTypeTokenRequest_ExamType {
        GETV2EXAMSEXAMTYPETOKENREQUEST_EXAMTYPE_CERTIFICATION_EXAM_TYPE_UNSPECIFIED = 0;
        GETV2EXAMSEXAMTYPETOKENREQUEST_EXAMTYPE_CET_ADWORDS_FUNDAMENTALS = 1;
        GETV2EXAMSEXAMTYPETOKENREQUEST_EXAMTYPE_CET_ADWORDS_ADVANCED_SEARCH = 2;
        GETV2EXAMSEXAMTYPETOKENREQUEST_EXAMTYPE_CET_ADWORDS_ADVANCED_DISPLAY = 3;
        GETV2EXAMSEXAMTYPETOKENREQUEST_EXAMTYPE_CET_VIDEO_ADS = 4;
        GETV2EXAMSEXAMTYPETOKENREQUEST_EXAMTYPE_CET_DOUBLECLICK = 5;
        GETV2EXAMSEXAMTYPETOKENREQUEST_EXAMTYPE_CET_ANALYTICS = 6;
        GETV2EXAMSEXAMTYPETOKENREQUEST_EXAMTYPE_CET_SHOPPING = 7;
        GETV2EXAMSEXAMTYPETOKENREQUEST_EXAMTYPE_CET_MOBILE = 8;
        GETV2EXAMSEXAMTYPETOKENREQUEST_EXAMTYPE_CET_DIGITAL_SALES = 9;
        GETV2EXAMSEXAMTYPETOKENREQUEST_EXAMTYPE_CET_MOBILE_SITES = 10;
    }
    GetV2ExamsExamTypeTokenRequest_ExamType examType = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // Experiment IDs the current request belongs to.
    repeated string requestMetadata.experimentIds = 13;
    // Locale to use for the current request.
    string requestMetadata.locale = 14;
    // Google Partners session ID.
    string requestMetadata.partnersSessionId = 15;
    // Identifier to indicate where the traffic comes from.
    // An identifier has multiple letters created by a team which redirected the
    // traffic to us.
    string requestMetadata.trafficSource.trafficSourceId = 16;
    // Second level identifier to indicate where the traffic comes from.
    // An identifier has multiple letters created by a team which redirected the
    // traffic to us.
    string requestMetadata.trafficSource.trafficSubId = 17;
    // IP address to use instead of the user's geo-located IP address.
    string requestMetadata.userOverrides.ipAddress = 18;
    // Logged-in user ID to impersonate instead of the user's ID.
    string requestMetadata.userOverrides.userId = 19;
    string uploadType = 20;
    string upload_protocol = 21;
}

message GetV2LeadsRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    // How to order Leads. Currently, only `create_time`
    // and `create_time desc` are supported
    string orderBy = 9;
    // Requested page size. Server may return fewer leads than requested.
    // If unspecified, server picks an appropriate default.
    int32 pageSize = 10;
    // A token identifying a page of results that the server returns.
    // Typically, this is the value of `ListLeadsResponse.next_page_token`
    // returned from the previous call to
    // ListLeads.
    string pageToken = 11;
    boolean pp = 12;
    boolean prettyPrint = 13;
    string quotaUser = 14;
    // Experiment IDs the current request belongs to.
    repeated string requestMetadata.experimentIds = 15;
    // Locale to use for the current request.
    string requestMetadata.locale = 16;
    // Google Partners session ID.
    string requestMetadata.partnersSessionId = 17;
    // Identifier to indicate where the traffic comes from.
    // An identifier has multiple letters created by a team which redirected the
    // traffic to us.
    string requestMetadata.trafficSource.trafficSourceId = 18;
    // Second level identifier to indicate where the traffic comes from.
    // An identifier has multiple letters created by a team which redirected the
    // traffic to us.
    string requestMetadata.trafficSource.trafficSubId = 19;
    // IP address to use instead of the user's geo-located IP address.
    string requestMetadata.userOverrides.ipAddress = 20;
    // Logged-in user ID to impersonate instead of the user's ID.
    string requestMetadata.userOverrides.userId = 21;
    string uploadType = 22;
    string upload_protocol = 23;
}

message GetV2OffersRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    boolean pp = 9;
    boolean prettyPrint = 10;
    string quotaUser = 11;
    // Experiment IDs the current request belongs to.
    repeated string requestMetadata.experimentIds = 12;
    // Locale to use for the current request.
    string requestMetadata.locale = 13;
    // Google Partners session ID.
    string requestMetadata.partnersSessionId = 14;
    // Identifier to indicate where the traffic comes from.
    // An identifier has multiple letters created by a team which redirected the
    // traffic to us.
    string requestMetadata.trafficSource.trafficSourceId = 15;
    // Second level identifier to indicate where the traffic comes from.
    // An identifier has multiple letters created by a team which redirected the
    // traffic to us.
    string requestMetadata.trafficSource.trafficSubId = 16;
    // IP address to use instead of the user's geo-located IP address.
    string requestMetadata.userOverrides.ipAddress = 17;
    // Logged-in user ID to impersonate instead of the user's ID.
    string requestMetadata.userOverrides.userId = 18;
    string uploadType = 19;
    string upload_protocol = 20;
}

message GetV2OffersHistoryRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    // if true, show history for the entire company.  Requires user to be admin.
    bool entireCompany = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    // Comma-separated list of fields to order by, e.g.: "foo,bar,baz".
    // Use "foo desc" to sort descending.
    // List of valid field names is: name, offer_code, expiration_time, status,
    //     last_modified_time, sender_name, creation_time, country_code,
    //     offer_type.
    string orderBy = 10;
    // Maximum number of rows to return per page.
    int32 pageSize = 11;
    // Token to retrieve a specific page.
    string pageToken = 12;
    boolean pp = 13;
    boolean prettyPrint = 14;
    string quotaUser = 15;
    // Experiment IDs the current request belongs to.
    repeated string requestMetadata.experimentIds = 16;
    // Locale to use for the current request.
    string requestMetadata.locale = 17;
    // Google Partners session ID.
    string requestMetadata.partnersSessionId = 18;
    // Identifier to indicate where the traffic comes from.
    // An identifier has multiple letters created by a team which redirected the
    // traffic to us.
    string requestMetadata.trafficSource.trafficSourceId = 19;
    // Second level identifier to indicate where the traffic comes from.
    // An identifier has multiple letters created by a team which redirected the
    // traffic to us.
    string requestMetadata.trafficSource.trafficSubId = 20;
    // IP address to use instead of the user's geo-located IP address.
    string requestMetadata.userOverrides.ipAddress = 21;
    // Logged-in user ID to impersonate instead of the user's ID.
    string requestMetadata.userOverrides.userId = 22;
    string uploadType = 23;
    string upload_protocol = 24;
}

message GetV2PartnersstatusRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    boolean pp = 9;
    boolean prettyPrint = 10;
    string quotaUser = 11;
    // Experiment IDs the current request belongs to.
    repeated string requestMetadata.experimentIds = 12;
    // Locale to use for the current request.
    string requestMetadata.locale = 13;
    // Google Partners session ID.
    string requestMetadata.partnersSessionId = 14;
    // Identifier to indicate where the traffic comes from.
    // An identifier has multiple letters created by a team which redirected the
    // traffic to us.
    string requestMetadata.trafficSource.trafficSourceId = 15;
    // Second level identifier to indicate where the traffic comes from.
    // An identifier has multiple letters created by a team which redirected the
    // traffic to us.
    string requestMetadata.trafficSource.trafficSubId = 16;
    // IP address to use instead of the user's geo-located IP address.
    string requestMetadata.userOverrides.ipAddress = 17;
    // Logged-in user ID to impersonate instead of the user's ID.
    string requestMetadata.userOverrides.userId = 18;
    string uploadType = 19;
    string upload_protocol = 20;
}

message PostV2UserEvents:LogRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    LogUserEventRequest body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    string uploadType = 13;
    string upload_protocol = 14;
}

message GetV2UserStatesRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    boolean pp = 9;
    boolean prettyPrint = 10;
    string quotaUser = 11;
    // Experiment IDs the current request belongs to.
    repeated string requestMetadata.experimentIds = 12;
    // Locale to use for the current request.
    string requestMetadata.locale = 13;
    // Google Partners session ID.
    string requestMetadata.partnersSessionId = 14;
    // Identifier to indicate where the traffic comes from.
    // An identifier has multiple letters created by a team which redirected the
    // traffic to us.
    string requestMetadata.trafficSource.trafficSourceId = 15;
    // Second level identifier to indicate where the traffic comes from.
    // An identifier has multiple letters created by a team which redirected the
    // traffic to us.
    string requestMetadata.trafficSource.trafficSubId = 16;
    // IP address to use instead of the user's geo-located IP address.
    string requestMetadata.userOverrides.ipAddress = 17;
    // Logged-in user ID to impersonate instead of the user's ID.
    string requestMetadata.userOverrides.userId = 18;
    string uploadType = 19;
    string upload_protocol = 20;
}

message GetV2UsersUserIdRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    boolean pp = 9;
    boolean prettyPrint = 10;
    string quotaUser = 11;
    // Experiment IDs the current request belongs to.
    repeated string requestMetadata.experimentIds = 12;
    // Locale to use for the current request.
    string requestMetadata.locale = 13;
    // Google Partners session ID.
    string requestMetadata.partnersSessionId = 14;
    // Identifier to indicate where the traffic comes from.
    // An identifier has multiple letters created by a team which redirected the
    // traffic to us.
    string requestMetadata.trafficSource.trafficSourceId = 15;
    // Second level identifier to indicate where the traffic comes from.
    // An identifier has multiple letters created by a team which redirected the
    // traffic to us.
    string requestMetadata.trafficSource.trafficSubId = 16;
    // IP address to use instead of the user's geo-located IP address.
    string requestMetadata.userOverrides.ipAddress = 17;
    // Logged-in user ID to impersonate instead of the user's ID.
    string requestMetadata.userOverrides.userId = 18;
    string uploadType = 19;
    string upload_protocol = 20;
    // Identifier of the user. Can be set to <code>me</code> to mean the currently
    // authenticated user.
    string userId = 21;
    // Specifies what parts of the user information to return.
    enum GetV2UsersUserIdRequest_UserView {
        GETV2USERSUSERIDREQUEST_USERVIEW_BASIC = 0;
        GETV2USERSUSERIDREQUEST_USERVIEW_PROFILE = 1;
        GETV2USERSUSERIDREQUEST_USERVIEW_PUBLIC_PROFILE = 2;
    }
    GetV2UsersUserIdRequest_UserView userView = 22;
}

message PutV2UsersUserIdCompanyRelationRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    CompanyRelation body = 5;
    string callback = 6;
    string fields = 7;
    string key = 8;
    string oauth_token = 9;
    boolean pp = 10;
    boolean prettyPrint = 11;
    string quotaUser = 12;
    // Experiment IDs the current request belongs to.
    repeated string requestMetadata.experimentIds = 13;
    // Locale to use for the current request.
    string requestMetadata.locale = 14;
    // Google Partners session ID.
    string requestMetadata.partnersSessionId = 15;
    // Identifier to indicate where the traffic comes from.
    // An identifier has multiple letters created by a team which redirected the
    // traffic to us.
    string requestMetadata.trafficSource.trafficSourceId = 16;
    // Second level identifier to indicate where the traffic comes from.
    // An identifier has multiple letters created by a team which redirected the
    // traffic to us.
    string requestMetadata.trafficSource.trafficSubId = 17;
    // IP address to use instead of the user's geo-located IP address.
    string requestMetadata.userOverrides.ipAddress = 18;
    // Logged-in user ID to impersonate instead of the user's ID.
    string requestMetadata.userOverrides.userId = 19;
    string uploadType = 20;
    string upload_protocol = 21;
    // The ID of the user. Can be set to <code>me</code> to mean
    // the currently authenticated user.
    string userId = 22;
}

message DeleteV2UsersUserIdCompanyRelationRequest {
    $.xgafv $.xgafv = 1;
    string access_token = 2;
    alt alt = 3;
    string bearer_token = 4;
    string callback = 5;
    string fields = 6;
    string key = 7;
    string oauth_token = 8;
    boolean pp = 9;
    boolean prettyPrint = 10;
    string quotaUser = 11;
    // Experiment IDs the current request belongs to.
    repeated string requestMetadata.experimentIds = 12;
    // Locale to use for the current request.
    string requestMetadata.locale = 13;
    // Google Partners session ID.
    string requestMetadata.partnersSessionId = 14;
    // Identifier to indicate where the traffic comes from.
    // An identifier has multiple letters created by a team which redirected the
    // traffic to us.
    string requestMetadata.trafficSource.trafficSourceId = 15;
    // Second level identifier to indicate where the traffic comes from.
    // An identifier has multiple letters created by a team which redirected the
    // traffic to us.
    string requestMetadata.trafficSource.trafficSubId = 16;
    // IP address to use instead of the user's geo-located IP address.
    string requestMetadata.userOverrides.ipAddress = 17;
    // Logged-in user ID to impersonate instead of the user's ID.
    string requestMetadata.userOverrides.userId = 18;
    string uploadType = 19;
    string upload_protocol = 20;
    // The ID of the user. Can be set to <code>me</code> to mean
    // the currently authenticated user.
    string userId = 21;
}

enum $.Xgafv {
    $XGAFV_1 = 0;
    $XGAFV_2 = 1;
}

message AdWordsManagerAccountInfo {
    // Name of the customer this account represents.
    string customerName = 1;
    // The AdWords Manager Account id.
    string id = 2;
}

message Analytics {
    // Instances of users contacting the `Company`
    // on the specified date.
    AnalyticsDataPoint contacts = 1;
    // Date on which these events occurred.
    Date eventDate = 2;
    // Instances of users viewing the `Company` profile
    // on the specified date.
    AnalyticsDataPoint profileViews = 3;
    // Instances of users seeing the `Company` in Google Partners Search results
    // on the specified date.
    AnalyticsDataPoint searchViews = 4;
}

message AnalyticsDataPoint {
    // Number of times the type of event occurred.
    // Meaning depends on context (e.g. profile views, contacts, etc.).
    int32 eventCount = 1;
    // Location information of where these events occurred.
    repeated LatLng eventLocations = 2;
}

message AnalyticsSummary {
    // Aggregated number of times users contacted the `Company`
    // for given date range.
    int32 contactsCount = 1;
    // Aggregated number of profile views for the `Company` for given date range.
    int32 profileViewsCount = 2;
    // Aggregated number of times users saw the `Company`
    // in Google Partners Search results for given date range.
    int32 searchViewsCount = 3;
}

message AvailableOffer {
    // The number of codes for this offer that are available for distribution.
    int32 available = 1;
    // Offer info by country.
    repeated CountryOfferInfo countryOfferInfos = 2;
    // Description of the offer.
    string description = 3;
    // ID of this offer.
    string id = 4;
    // The maximum age of an account [in days] to be eligible.
    int32 maxAccountAge = 5;
    // Name of the offer.
    string name = 6;
    // Level of this offer.
    enum AvailableOffer_OfferLevel {
        AVAILABLEOFFER_OFFERLEVEL_OFFER_LEVEL_UNSPECIFIED = 0;
        AVAILABLEOFFER_OFFERLEVEL_OFFER_LEVEL_DENY_PROBLEM = 1;
        AVAILABLEOFFER_OFFERLEVEL_OFFER_LEVEL_DENY_CONTRACT = 2;
        AVAILABLEOFFER_OFFERLEVEL_OFFER_LEVEL_MANUAL = 3;
        AVAILABLEOFFER_OFFERLEVEL_OFFER_LEVEL_LIMIT_0 = 4;
        AVAILABLEOFFER_OFFERLEVEL_OFFER_LEVEL_LIMIT_5 = 5;
        AVAILABLEOFFER_OFFERLEVEL_OFFER_LEVEL_LIMIT_15 = 6;
        AVAILABLEOFFER_OFFERLEVEL_OFFER_LEVEL_LIMIT_50 = 7;
    }
    AvailableOffer_OfferLevel offerLevel = 7;
    // Type of offer.
    enum AvailableOffer_OfferType {
        AVAILABLEOFFER_OFFERTYPE_OFFER_TYPE_UNSPECIFIED = 0;
        AVAILABLEOFFER_OFFERTYPE_OFFER_TYPE_SPEND_X_GET_Y = 1;
        AVAILABLEOFFER_OFFERTYPE_OFFER_TYPE_VIDEO = 2;
        AVAILABLEOFFER_OFFERTYPE_OFFER_TYPE_SPEND_MATCH = 3;
    }
    AvailableOffer_OfferType offerType = 8;
    // Customers who qualify for this offer.
    repeated OfferCustomer qualifiedCustomer = 9;
    // Whether or not the list of qualified customers is definitely complete.
    bool qualifiedCustomersComplete = 10;
    // Should special text be shown on the offers page.
    bool showSpecialOfferCopy = 11;
    // Terms of the offer.
    string terms = 12;
}

message Certification {
    // Whether this certification has been achieved.
    bool achieved = 1;
    // The type of certification, the area of expertise.
    enum Certification_CertificationType {
        CERTIFICATION_CERTIFICATIONTYPE_CERTIFICATION_TYPE_UNSPECIFIED = 0;
        CERTIFICATION_CERTIFICATIONTYPE_CT_ADWORDS = 1;
        CERTIFICATION_CERTIFICATIONTYPE_CT_YOUTUBE = 2;
        CERTIFICATION_CERTIFICATIONTYPE_CT_VIDEOADS = 3;
        CERTIFICATION_CERTIFICATIONTYPE_CT_ANALYTICS = 4;
        CERTIFICATION_CERTIFICATIONTYPE_CT_DOUBLECLICK = 5;
        CERTIFICATION_CERTIFICATIONTYPE_CT_SHOPPING = 6;
        CERTIFICATION_CERTIFICATIONTYPE_CT_MOBILE = 7;
        CERTIFICATION_CERTIFICATIONTYPE_CT_DIGITAL_SALES = 8;
        CERTIFICATION_CERTIFICATIONTYPE_CT_ADWORDS_SEARCH = 9;
        CERTIFICATION_CERTIFICATIONTYPE_CT_ADWORDS_DISPLAY = 10;
        CERTIFICATION_CERTIFICATIONTYPE_CT_MOBILE_SITES = 11;
    }
    Certification_CertificationType certificationType = 2;
    // Date this certification is due to expire.
    string expiration = 3;
    // The date the user last achieved certification.
    string lastAchieved = 4;
    // Whether this certification is in the state of warning.
    bool warning = 5;
}

message CertificationExamStatus {
    // The number of people who have passed the certification exam.
    int32 numberUsersPass = 1;
    // The type of certification exam.
    enum CertificationExamStatus_Type {
        CERTIFICATIONEXAMSTATUS_TYPE_CERTIFICATION_EXAM_TYPE_UNSPECIFIED = 0;
        CERTIFICATIONEXAMSTATUS_TYPE_CET_ADWORDS_FUNDAMENTALS = 1;
        CERTIFICATIONEXAMSTATUS_TYPE_CET_ADWORDS_ADVANCED_SEARCH = 2;
        CERTIFICATIONEXAMSTATUS_TYPE_CET_ADWORDS_ADVANCED_DISPLAY = 3;
        CERTIFICATIONEXAMSTATUS_TYPE_CET_VIDEO_ADS = 4;
        CERTIFICATIONEXAMSTATUS_TYPE_CET_DOUBLECLICK = 5;
        CERTIFICATIONEXAMSTATUS_TYPE_CET_ANALYTICS = 6;
        CERTIFICATIONEXAMSTATUS_TYPE_CET_SHOPPING = 7;
        CERTIFICATIONEXAMSTATUS_TYPE_CET_MOBILE = 8;
        CERTIFICATIONEXAMSTATUS_TYPE_CET_DIGITAL_SALES = 9;
        CERTIFICATIONEXAMSTATUS_TYPE_CET_MOBILE_SITES = 10;
    }
    CertificationExamStatus_Type type = 2;
}

message CertificationStatus {
    // List of certification exam statuses.
    repeated CertificationExamStatus examStatuses = 1;
    // Whether certification is passing.
    bool isCertified = 2;
    // The type of the certification.
    enum CertificationStatus_Type {
        CERTIFICATIONSTATUS_TYPE_CERTIFICATION_TYPE_UNSPECIFIED = 0;
        CERTIFICATIONSTATUS_TYPE_CT_ADWORDS = 1;
        CERTIFICATIONSTATUS_TYPE_CT_YOUTUBE = 2;
        CERTIFICATIONSTATUS_TYPE_CT_VIDEOADS = 3;
        CERTIFICATIONSTATUS_TYPE_CT_ANALYTICS = 4;
        CERTIFICATIONSTATUS_TYPE_CT_DOUBLECLICK = 5;
        CERTIFICATIONSTATUS_TYPE_CT_SHOPPING = 6;
        CERTIFICATIONSTATUS_TYPE_CT_MOBILE = 7;
        CERTIFICATIONSTATUS_TYPE_CT_DIGITAL_SALES = 8;
        CERTIFICATIONSTATUS_TYPE_CT_ADWORDS_SEARCH = 9;
        CERTIFICATIONSTATUS_TYPE_CT_ADWORDS_DISPLAY = 10;
        CERTIFICATIONSTATUS_TYPE_CT_MOBILE_SITES = 11;
    }
    CertificationStatus_Type type = 3;
    // Number of people who are certified,
    int32 userCount = 4;
}

message Company {
    // URL of the company's additional websites used to verify the dynamic badges.
    // These are stored as full URLs as entered by the user, but only the TLD will
    // be used for the actual verification.
    repeated string additionalWebsites = 1;
    // Email domains that allow users with a matching email address to get
    // auto-approved for associating with this company.
    repeated string autoApprovalEmailDomains = 2;
    // Partner badge tier
    enum Company_BadgeTier {
        COMPANY_BADGETIER_BADGE_TIER_NONE = 0;
        COMPANY_BADGETIER_BADGE_TIER_REGULAR = 1;
        COMPANY_BADGETIER_BADGE_TIER_PREMIER = 2;
    }
    Company_BadgeTier badgeTier = 3;
    // The list of Google Partners certification statuses for the company.
    repeated CertificationStatus certificationStatuses = 4;
    // Company type labels listed on the company's profile.
    repeated string companyTypes = 5;
    // The minimum monthly budget that the company accepts for partner business,
    // converted to the requested currency code.
    Money convertedMinMonthlyBudget = 6;
    // The ID of the company.
    string id = 7;
    // Industries the company can help with.
    repeated string industries = 8;
    // The list of localized info for the company.
    repeated LocalizedCompanyInfo localizedInfos = 9;
    // The list of all company locations.
    // If set, must include the
    // primary_location
    // in the list.
    repeated Location locations = 10;
    // The name of the company.
    string name = 11;
    // The unconverted minimum monthly budget that the company accepts for partner
    // business.
    Money originalMinMonthlyBudget = 12;
    // The Primary AdWords Manager Account id.
    string primaryAdwordsManagerAccountId = 13;
    // The primary language code of the company, as defined by
    // <a href="https://tools.ietf.org/html/bcp47">BCP 47</a>
    // (IETF BCP 47, "Tags for Identifying Languages").
    string primaryLanguageCode = 14;
    // The primary location of the company.
    Location primaryLocation = 15;
    // The public viewability status of the company's profile.
    enum Company_ProfileStatu {
        COMPANY_PROFILESTATU_COMPANY_PROFILE_STATUS_UNSPECIFIED = 0;
        COMPANY_PROFILESTATU_HIDDEN = 1;
        COMPANY_PROFILESTATU_PUBLISHED = 2;
        COMPANY_PROFILESTATU_SEARCHABLE = 3;
    }
    Company_ProfileStatu profileStatus = 16;
    // Basic information from the company's public profile.
    PublicProfile publicProfile = 17;
    // Information related to the ranking of the company within the list of
    // companies.
    repeated Rank ranks = 18;
    // Services the company can help with.
    repeated string services = 19;
    // The list of Google Partners specialization statuses for the company.
    repeated SpecializationStatus specializationStatus = 20;
    // URL of the company's website.
    string websiteUrl = 21;
}

message CompanyRelation {
    // The primary address for this company.
    string address = 1;
    // Whether the company is a Partner.
    enum CompanyRelation_BadgeTier {
        COMPANYRELATION_BADGETIER_BADGE_TIER_NONE = 0;
        COMPANYRELATION_BADGETIER_BADGE_TIER_REGULAR = 1;
        COMPANYRELATION_BADGETIER_BADGE_TIER_PREMIER = 2;
    }
    CompanyRelation_BadgeTier badgeTier = 2;
    // Indicates if the user is an admin for this company.
    bool companyAdmin = 3;
    // The ID of the company. There may be no id if this is a
    // pending company.5
    string companyId = 4;
    // The timestamp of when affiliation was requested.
    // @OutputOnly
    string creationTime = 5;
    // The internal company ID.
    // Only available for a whitelisted set of api clients.
    string internalCompanyId = 6;
    // The flag that indicates if the company is pending verification.
    bool isPending = 7;
    // A URL to a profile photo, e.g. a G+ profile photo.
    string logoUrl = 8;
    // The AdWords manager account # associated this company.
    string managerAccount = 9;
    // The name (in the company's primary language) for the company.
    string name = 10;
    // The phone number for the company's primary address.
    string phoneNumber = 11;
    // The primary location of the company.
    Location primaryAddress = 12;
    // The primary country code of the company.
    string primaryCountryCode = 13;
    // The primary language code of the company.
    string primaryLanguageCode = 14;
    // The timestamp when the user was approved.
    // @OutputOnly
    string resolvedTimestamp = 15;
    // The segment the company is classified as.
    repeated string segment = 16;
    // The list of Google Partners specialization statuses for the company.
    repeated SpecializationStatus specializationStatus = 17;
    // The state of relationship, in terms of approvals.
    enum CompanyRelation_State {
        COMPANYRELATION_STATE_USER_COMPANY_REATION_STATE_NONE_SPECIFIED = 0;
        COMPANYRELATION_STATE_USER_COMPANY_RELATION_STATE_AWAIT_EMAIL = 1;
        COMPANYRELATION_STATE_USER_COMPANY_RELATION_STATE_AWAIT_ADMIN = 2;
        COMPANYRELATION_STATE_USER_COMPANY_RELATION_STATE_APPROVED = 3;
    }
    CompanyRelation_State state = 18;
    // The website URL for this company.
    string website = 19;
}

message CountryOfferInfo {
    // (localized) Get Y amount for that country's offer.
    string getYAmount = 1;
    // Country code for which offer codes may be requested.
    string offerCountryCode = 2;
    // Type of offer country is eligible for.
    enum CountryOfferInfo_OfferType {
        COUNTRYOFFERINFO_OFFERTYPE_OFFER_TYPE_UNSPECIFIED = 0;
        COUNTRYOFFERINFO_OFFERTYPE_OFFER_TYPE_SPEND_X_GET_Y = 1;
        COUNTRYOFFERINFO_OFFERTYPE_OFFER_TYPE_VIDEO = 2;
        COUNTRYOFFERINFO_OFFERTYPE_OFFER_TYPE_SPEND_MATCH = 3;
    }
    CountryOfferInfo_OfferType offerType = 3;
    // (localized) Spend X amount for that country's offer.
    string spendXAmount = 4;
}

message CreateLeadRequest {
    // The lead resource. The `LeadType` must not be `LEAD_TYPE_UNSPECIFIED`
    // and either `email` or `phone_number` must be provided.
    Lead lead = 1;
    // <a href="https://www.google.com/recaptcha/">reCaptcha</a> challenge info.
    RecaptchaChallenge recaptchaChallenge = 2;
    // Current request metadata.
    RequestMetadata requestMetadata = 3;
}

message CreateLeadResponse {
    // Lead that was created depending on the outcome of
    // <a href="https://www.google.com/recaptcha/">reCaptcha</a> validation.
    Lead lead = 1;
    // The outcome of <a href="https://www.google.com/recaptcha/">reCaptcha</a>
    // validation.
    enum CreateLeadResponse_RecaptchaStatu {
        CREATELEADRESPONSE_RECAPTCHASTATU_RECAPTCHA_STATUS_UNSPECIFIED = 0;
        CREATELEADRESPONSE_RECAPTCHASTATU_RS_NOT_NEEDED = 1;
        CREATELEADRESPONSE_RECAPTCHASTATU_RS_PASSED = 2;
        CREATELEADRESPONSE_RECAPTCHASTATU_RS_FAILED = 3;
    }
    CreateLeadResponse_RecaptchaStatu recaptchaStatus = 2;
    // Current response metadata.
    ResponseMetadata responseMetadata = 3;
}

message Date {
    // Day of month. Must be from 1 to 31 and valid for the year and month, or 0
    // if specifying a year/month where the day is not significant.
    int32 day = 1;
    // Month of year. Must be from 1 to 12.
    int32 month = 2;
    // Year of date. Must be from 1 to 9999, or 0 if specifying a date without
    // a year.
    int32 year = 3;
}

message DebugInfo {
    // Info about the server that serviced this request.
    string serverInfo = 1;
    // Server-side debug stack trace.
    string serverTraceInfo = 2;
    // URL of the service that handled this request.
    string serviceUrl = 3;
}

message Empty {
}

message EventData {
    // Data type.
    enum EventData_Key {
        EVENTDATA_KEY_EVENT_DATA_TYPE_UNSPECIFIED = 0;
        EVENTDATA_KEY_ACTION = 1;
        EVENTDATA_KEY_AGENCY_ID = 2;
        EVENTDATA_KEY_AGENCY_NAME = 3;
        EVENTDATA_KEY_AGENCY_PHONE_NUMBER = 4;
        EVENTDATA_KEY_AGENCY_WEBSITE = 5;
        EVENTDATA_KEY_BUDGET = 6;
        EVENTDATA_KEY_CENTER_POINT = 7;
        EVENTDATA_KEY_CERTIFICATION = 8;
        EVENTDATA_KEY_COMMENT = 9;
        EVENTDATA_KEY_COUNTRY = 10;
        EVENTDATA_KEY_CURRENCY = 11;
        EVENTDATA_KEY_CURRENTLY_VIEWED_AGENCY_ID = 12;
        EVENTDATA_KEY_DISTANCE = 13;
        EVENTDATA_KEY_DISTANCE_TYPE = 14;
        EVENTDATA_KEY_EXAM = 15;
        EVENTDATA_KEY_HISTORY_TOKEN = 16;
        EVENTDATA_KEY_ID = 17;
        EVENTDATA_KEY_INDUSTRY = 18;
        EVENTDATA_KEY_INSIGHT_TAG = 19;
        EVENTDATA_KEY_LANGUAGE = 20;
        EVENTDATA_KEY_LOCATION = 21;
        EVENTDATA_KEY_MARKETING_OPT_IN = 22;
        EVENTDATA_KEY_QUERY = 23;
        EVENTDATA_KEY_SEARCH_START_INDEX = 24;
        EVENTDATA_KEY_SERVICE = 25;
        EVENTDATA_KEY_SHOW_VOW = 26;
        EVENTDATA_KEY_SOLUTION = 27;
        EVENTDATA_KEY_TRAFFIC_SOURCE_ID = 28;
        EVENTDATA_KEY_TRAFFIC_SUB_ID = 29;
        EVENTDATA_KEY_VIEW_PORT = 30;
        EVENTDATA_KEY_WEBSITE = 31;
        EVENTDATA_KEY_DETAILS = 32;
        EVENTDATA_KEY_EXPERIMENT_ID = 33;
        EVENTDATA_KEY_GPS_MOTIVATION = 34;
        EVENTDATA_KEY_URL = 35;
        EVENTDATA_KEY_ELEMENT_FOCUS = 36;
        EVENTDATA_KEY_PROGRESS = 37;
    }
    EventData_Key key = 1;
    // Data values.
    repeated string values = 2;
}

message ExamStatus {
    // The type of the exam.
    enum ExamStatus_ExamType {
        EXAMSTATUS_EXAMTYPE_CERTIFICATION_EXAM_TYPE_UNSPECIFIED = 0;
        EXAMSTATUS_EXAMTYPE_CET_ADWORDS_FUNDAMENTALS = 1;
        EXAMSTATUS_EXAMTYPE_CET_ADWORDS_ADVANCED_SEARCH = 2;
        EXAMSTATUS_EXAMTYPE_CET_ADWORDS_ADVANCED_DISPLAY = 3;
        EXAMSTATUS_EXAMTYPE_CET_VIDEO_ADS = 4;
        EXAMSTATUS_EXAMTYPE_CET_DOUBLECLICK = 5;
        EXAMSTATUS_EXAMTYPE_CET_ANALYTICS = 6;
        EXAMSTATUS_EXAMTYPE_CET_SHOPPING = 7;
        EXAMSTATUS_EXAMTYPE_CET_MOBILE = 8;
        EXAMSTATUS_EXAMTYPE_CET_DIGITAL_SALES = 9;
        EXAMSTATUS_EXAMTYPE_CET_MOBILE_SITES = 10;
    }
    ExamStatus_ExamType examType = 1;
    // Date this exam is due to expire.
    string expiration = 2;
    // The date the user last passed this exam.
    string lastPassed = 3;
    // Whether this exam has been passed and not expired.
    bool passed = 4;
    // The date the user last taken this exam.
    string taken = 5;
    // Whether this exam is in the state of warning.
    bool warning = 6;
}

message ExamToken {
    // The id of the exam the token is for.
    string examId = 1;
    // The type of the exam the token belongs to.
    enum ExamToken_ExamType {
        EXAMTOKEN_EXAMTYPE_CERTIFICATION_EXAM_TYPE_UNSPECIFIED = 0;
        EXAMTOKEN_EXAMTYPE_CET_ADWORDS_FUNDAMENTALS = 1;
        EXAMTOKEN_EXAMTYPE_CET_ADWORDS_ADVANCED_SEARCH = 2;
        EXAMTOKEN_EXAMTYPE_CET_ADWORDS_ADVANCED_DISPLAY = 3;
        EXAMTOKEN_EXAMTYPE_CET_VIDEO_ADS = 4;
        EXAMTOKEN_EXAMTYPE_CET_DOUBLECLICK = 5;
        EXAMTOKEN_EXAMTYPE_CET_ANALYTICS = 6;
        EXAMTOKEN_EXAMTYPE_CET_SHOPPING = 7;
        EXAMTOKEN_EXAMTYPE_CET_MOBILE = 8;
        EXAMTOKEN_EXAMTYPE_CET_DIGITAL_SALES = 9;
        EXAMTOKEN_EXAMTYPE_CET_MOBILE_SITES = 10;
    }
    ExamToken_ExamType examType = 2;
    // The token, only present if the user has access to the exam.
    string token = 3;
}

message GetCompanyResponse {
    // The company.
    Company company = 1;
    // Current response metadata.
    ResponseMetadata responseMetadata = 2;
}

message GetPartnersStatusResponse {
    // Current response metadata.
    ResponseMetadata responseMetadata = 1;
}

message HistoricalOffer {
    // Client's AdWords page URL.
    string adwordsUrl = 1;
    // Email address for client.
    string clientEmail = 2;
    // ID of client.
    string clientId = 3;
    // Name of the client.
    string clientName = 4;
    // Time offer was first created.
    string creationTime = 5;
    // Time this offer expires.
    string expirationTime = 6;
    // Time last action was taken.
    string lastModifiedTime = 7;
    // Offer code.
    string offerCode = 8;
    // Country Code for the offer country.
    string offerCountryCode = 9;
    // Type of offer.
    enum HistoricalOffer_OfferType {
        HISTORICALOFFER_OFFERTYPE_OFFER_TYPE_UNSPECIFIED = 0;
        HISTORICALOFFER_OFFERTYPE_OFFER_TYPE_SPEND_X_GET_Y = 1;
        HISTORICALOFFER_OFFERTYPE_OFFER_TYPE_VIDEO = 2;
        HISTORICALOFFER_OFFERTYPE_OFFER_TYPE_SPEND_MATCH = 3;
    }
    HistoricalOffer_OfferType offerType = 10;
    // Name (First + Last) of the partners user to whom the incentive is allocated.
    string senderName = 11;
    // Status of the offer.
    enum HistoricalOffer_Statu {
        HISTORICALOFFER_STATU_OFFER_STATUS_UNSPECIFIED = 0;
        HISTORICALOFFER_STATU_OFFER_STATUS_DISTRIBUTED = 1;
        HISTORICALOFFER_STATU_OFFER_STATUS_REDEEMED = 2;
        HISTORICALOFFER_STATU_OFFER_STATUS_AWARDED = 3;
        HISTORICALOFFER_STATU_OFFER_STATUS_EXPIRED = 4;
    }
    HistoricalOffer_Statu status = 12;
}

message LatLng {
    // The latitude in degrees. It must be in the range [-90.0, +90.0].
    double latitude = 1;
    // The longitude in degrees. It must be in the range [-180.0, +180.0].
    double longitude = 2;
}

message Lead {
    // The AdWords Customer ID of the lead.
    string adwordsCustomerId = 1;
    // Comments lead source gave.
    string comments = 2;
    // Timestamp of when this lead was created.
    string createTime = 3;
    // Email address of lead source.
    string email = 4;
    // Last name of lead source.
    string familyName = 5;
    // First name of lead source.
    string givenName = 6;
    // List of reasons for using Google Partner Search and creating a lead.
    repeated string gpsMotivations = 7;
    // ID of the lead.
    string id = 8;
    // Language code of the lead's language preference, as defined by
    // <a href="https://tools.ietf.org/html/bcp47">BCP 47</a>
    // (IETF BCP 47, "Tags for Identifying Languages").
    string languageCode = 9;
    // Whether or not the lead signed up for marketing emails
    bool marketingOptIn = 10;
    // The minimum monthly budget lead source is willing to spend.
    Money minMonthlyBudget = 11;
    // Phone number of lead source.
    string phoneNumber = 12;
    // The lead's state in relation to the company.
    enum Lead_State {
        LEAD_STATE_LEAD_STATE_UNSPECIFIED = 0;
        LEAD_STATE_LEAD = 1;
        LEAD_STATE_CONTACTED = 2;
        LEAD_STATE_CLIENT = 3;
        LEAD_STATE_OTHER = 4;
    }
    Lead_State state = 13;
    // Type of lead.
    enum Lead_Type {
        LEAD_TYPE_LEAD_TYPE_UNSPECIFIED = 0;
        LEAD_TYPE_LT_GPS = 1;
    }
    Lead_Type type = 14;
    // Website URL of lead source.
    string websiteUrl = 15;
}

message ListAnalyticsResponse {
    // The list of analytics.
    // Sorted in ascending order of
    // Analytics.event_date.
    repeated Analytics analytics = 1;
    // Aggregated information across the response's
    // analytics.
    AnalyticsSummary analyticsSummary = 2;
    // A token to retrieve next page of results.
    // Pass this value in the `ListAnalyticsRequest.page_token` field in the
    // subsequent call to
    // ListAnalytics to retrieve the
    // next page of results.
    string nextPageToken = 3;
    // Current response metadata.
    ResponseMetadata responseMetadata = 4;
}

message ListCompaniesResponse {
    // The list of companies.
    repeated Company companies = 1;
    // A token to retrieve next page of results.
    // Pass this value in the `ListCompaniesRequest.page_token` field in the
    // subsequent call to
    // ListCompanies to retrieve the
    // next page of results.
    string nextPageToken = 2;
    // Current response metadata.
    ResponseMetadata responseMetadata = 3;
}

message ListLeadsResponse {
    // The list of leads.
    repeated Lead leads = 1;
    // A token to retrieve next page of results.
    // Pass this value in the `ListLeadsRequest.page_token` field in the
    // subsequent call to
    // ListLeads to retrieve the
    // next page of results.
    string nextPageToken = 2;
    // Current response metadata.
    ResponseMetadata responseMetadata = 3;
    // The total count of leads for the given company.
    int32 totalSize = 4;
}

message ListOffersHistoryResponse {
    // True if the user has the option to show entire company history.
    bool canShowEntireCompany = 1;
    // Supply this token in a ListOffersHistoryRequest to retrieve the next page.
    string nextPageToken = 2;
    // Historical offers meeting request.
    repeated HistoricalOffer offers = 3;
    // Current response metadata.
    ResponseMetadata responseMetadata = 4;
    // True if this response is showing entire company history.
    bool showingEntireCompany = 5;
    // Number of results across all pages.
    int32 totalResults = 6;
}

message ListOffersResponse {
    // Available Offers to be distributed.
    repeated AvailableOffer availableOffers = 1;
    // Reason why no Offers are available.
    enum ListOffersResponse_NoOfferReason {
        LISTOFFERSRESPONSE_NOOFFERREASON_NO_OFFER_REASON_UNSPECIFIED = 0;
        LISTOFFERSRESPONSE_NOOFFERREASON_NO_OFFER_REASON_NO_MCC = 1;
        LISTOFFERSRESPONSE_NOOFFERREASON_NO_OFFER_REASON_LIMIT_REACHED = 2;
        LISTOFFERSRESPONSE_NOOFFERREASON_NO_OFFER_REASON_INELIGIBLE = 3;
    }
    ListOffersResponse_NoOfferReason noOfferReason = 2;
    // Current response metadata.
    ResponseMetadata responseMetadata = 3;
}

message ListUserStatesResponse {
    // Current response metadata.
    ResponseMetadata responseMetadata = 1;
    // User's states.
    repeated string userStates = 2;
}

message LocalizedCompanyInfo {
    // List of country codes for the localized company info.
    repeated string countryCodes = 1;
    // Localized display name.
    string displayName = 2;
    // Language code of the localized company info, as defined by
    // <a href="https://tools.ietf.org/html/bcp47">BCP 47</a>
    // (IETF BCP 47, "Tags for Identifying Languages").
    string languageCode = 3;
    // Localized brief description that the company uses to advertise themselves.
    string overview = 4;
}

message Location {
    // The single string version of the address.
    string address = 1;
    // The following address lines represent the most specific part of any
    // address.
    repeated string addressLine = 2;
    // Top-level administrative subdivision of this country.
    string administrativeArea = 3;
    // Dependent locality or sublocality. Used for UK dependent localities, or
    // neighborhoods or boroughs in other locations.
    string dependentLocality = 4;
    // Language code of the address. Should be in BCP 47 format.
    string languageCode = 5;
    // The latitude and longitude of the location, in degrees.
    LatLng latLng = 6;
    // Generally refers to the city/town portion of an address.
    string locality = 7;
    // Values are frequently alphanumeric.
    string postalCode = 8;
    // CLDR (Common Locale Data Repository) region code .
    string regionCode = 9;
    // Use of this code is very country-specific, but will refer to a secondary
    // classification code for sorting mail.
    string sortingCode = 10;
}

message LogMessageRequest {
    // Map of client info, such as URL, browser navigator, browser platform, etc.
    map<string, string> clientInfo = 1;
    // Details about the client message.
    string details = 2;
    // Message level of client message.
    enum LogMessageRequest_Level {
        LOGMESSAGEREQUEST_LEVEL_MESSAGE_LEVEL_UNSPECIFIED = 0;
        LOGMESSAGEREQUEST_LEVEL_ML_FINE = 1;
        LOGMESSAGEREQUEST_LEVEL_ML_INFO = 2;
        LOGMESSAGEREQUEST_LEVEL_ML_WARNING = 3;
        LOGMESSAGEREQUEST_LEVEL_ML_SEVERE = 4;
    }
    LogMessageRequest_Level level = 3;
    // Current request metadata.
    RequestMetadata requestMetadata = 4;
}

message LogMessageResponse {
    // Current response metadata.
    ResponseMetadata responseMetadata = 1;
}

message LogUserEventRequest {
    // The action that occurred.
    enum LogUserEventRequest_EventAction {
        LOGUSEREVENTREQUEST_EVENTACTION_EVENT_ACTION_UNSPECIFIED = 0;
        LOGUSEREVENTREQUEST_EVENTACTION_SMB_CLICKED_FIND_A_PARTNER_BUTTON_BOTTOM = 1;
        LOGUSEREVENTREQUEST_EVENTACTION_SMB_CLICKED_FIND_A_PARTNER_BUTTON_TOP = 2;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLICKED_JOIN_NOW_BUTTON_BOTTOM = 3;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLICKED_JOIN_NOW_BUTTON_TOP = 4;
        LOGUSEREVENTREQUEST_EVENTACTION_SMB_CANCELED_PARTNER_CONTACT_FORM = 5;
        LOGUSEREVENTREQUEST_EVENTACTION_SMB_CLICKED_CONTACT_A_PARTNER = 6;
        LOGUSEREVENTREQUEST_EVENTACTION_SMB_COMPLETED_PARTNER_CONTACT_FORM = 7;
        LOGUSEREVENTREQUEST_EVENTACTION_SMB_ENTERED_EMAIL_IN_CONTACT_PARTNER_FORM = 8;
        LOGUSEREVENTREQUEST_EVENTACTION_SMB_ENTERED_NAME_IN_CONTACT_PARTNER_FORM = 9;
        LOGUSEREVENTREQUEST_EVENTACTION_SMB_ENTERED_PHONE_IN_CONTACT_PARTNER_FORM = 10;
        LOGUSEREVENTREQUEST_EVENTACTION_SMB_FAILED_RECAPTCHA_IN_CONTACT_PARTNER_FORM = 11;
        LOGUSEREVENTREQUEST_EVENTACTION_PARTNER_VIEWED_BY_SMB = 12;
        LOGUSEREVENTREQUEST_EVENTACTION_SMB_CANCELED_PARTNER_CONTACT_FORM_ON_GPS = 13;
        LOGUSEREVENTREQUEST_EVENTACTION_SMB_CHANGED_A_SEARCH_PARAMETER_TOP = 14;
        LOGUSEREVENTREQUEST_EVENTACTION_SMB_CLICKED_CONTACT_A_PARTNER_ON_GPS = 15;
        LOGUSEREVENTREQUEST_EVENTACTION_SMB_CLICKED_SHOW_MORE_PARTNERS_BUTTON_BOTTOM = 16;
        LOGUSEREVENTREQUEST_EVENTACTION_SMB_COMPLETED_PARTNER_CONTACT_FORM_ON_GPS = 17;
        LOGUSEREVENTREQUEST_EVENTACTION_SMB_NO_PARTNERS_AVAILABLE_WITH_SEARCH_CRITERIA = 18;
        LOGUSEREVENTREQUEST_EVENTACTION_SMB_PERFORMED_SEARCH_ON_GPS = 19;
        LOGUSEREVENTREQUEST_EVENTACTION_SMB_VIEWED_A_PARTNER_ON_GPS = 20;
        LOGUSEREVENTREQUEST_EVENTACTION_SMB_CANCELED_PARTNER_CONTACT_FORM_ON_PROFILE_PAGE = 21;
        LOGUSEREVENTREQUEST_EVENTACTION_SMB_CLICKED_CONTACT_A_PARTNER_ON_PROFILE_PAGE = 22;
        LOGUSEREVENTREQUEST_EVENTACTION_SMB_CLICKED_PARTNER_WEBSITE = 23;
        LOGUSEREVENTREQUEST_EVENTACTION_SMB_COMPLETED_PARTNER_CONTACT_FORM_ON_PROFILE_PAGE = 24;
        LOGUSEREVENTREQUEST_EVENTACTION_SMB_VIEWED_A_PARTNER_PROFILE = 25;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLICKED_ACCEPT_TOS_BUTTON = 26;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CHANGED_TOS_COUNTRY = 27;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_ADDED_ADDRESS_IN_MY_PROFILE_PORTAL = 28;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_ADDED_PHONE_NUMBER_IN_MY_PROFILE_PORTAL = 29;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CHANGED_PRIMARY_ACCOUNT_ASSOCIATION = 30;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CHANGED_PRIMARY_COUNTRY_ASSOCIATION = 31;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLICKED_AFFILIATE_BUTTON_IN_MY_PROFILE_IN_PORTAL = 32;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLICKED_GIVE_EDIT_ACCESS_IN_MY_PROFILE_PORTAL = 33;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLICKED_LOG_OUT_IN_MY_PROFILE_PORTAL = 34;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLICKED_MY_PROFILE_LEFT_NAV_IN_PORTAL = 35;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLICKED_SAVE_AND_CONTINUE_AT_BOT_OF_COMPLETE_PROFILE = 36;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLICKED_UNAFFILIATE_IN_MY_PROFILE_PORTAL = 37;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_FILLED_OUT_COMP_AFFILIATION_IN_MY_PROFILE_PORTAL = 38;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_SUCCESSFULLY_CONNECTED_WITH_COMPANY_IN_MY_PROFILE = 39;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLICKED_CREATE_MCC_IN_MY_PROFILE_PORTAL = 40;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_DIDNT_HAVE_AN_MCC_ASSOCIATED_ON_COMPLETE_PROFILE = 41;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_HAD_AN_MCC_ASSOCIATED_ON_COMPLETE_PROFILE = 42;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_ADDED_JOB_FUNCTION_IN_MY_PROFILE_PORTAL = 43;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_LOOKED_AT_JOB_FUNCTION_DROP_DOWN = 44;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_SELECTED_ACCOUNT_MANAGER_AS_JOB_FUNCTION = 45;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_SELECTED_ACCOUNT_PLANNER_AS_JOB_FUNCTION = 46;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_SELECTED_ANALYTICS_AS_JOB_FUNCTION = 47;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_SELECTED_CREATIVE_AS_JOB_FUNCTION = 48;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_SELECTED_MEDIA_BUYER_AS_JOB_FUNCTION = 49;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_SELECTED_MEDIA_PLANNER_AS_JOB_FUNCTION = 50;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_SELECTED_OTHER_AS_JOB_FUNCTION = 51;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_SELECTED_PRODUCTION_AS_JOB_FUNCTION = 52;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_SELECTED_SEO_AS_JOB_FUNCTION = 53;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_SELECTED_SALES_REP_AS_JOB_FUNCTION = 54;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_SELECTED_SEARCH_SPECIALIST_AS_JOB_FUNCTION = 55;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_ADDED_CHANNELS_IN_MY_PROFILE_PORTAL = 56;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_LOOKED_AT_ADD_CHANNEL_DROP_DOWN = 57;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_SELECTED_CROSS_CHANNEL_FROM_ADD_CHANNEL = 58;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_SELECTED_DISPLAY_FROM_ADD_CHANNEL = 59;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_SELECTED_MOBILE_FROM_ADD_CHANNEL = 60;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_SELECTED_SEARCH_FROM_ADD_CHANNEL = 61;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_SELECTED_SOCIAL_FROM_ADD_CHANNEL = 62;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_SELECTED_TOOLS_FROM_ADD_CHANNEL = 63;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_SELECTED_YOUTUBE_FROM_ADD_CHANNEL = 64;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_ADDED_INDUSTRIES_IN_MY_PROFILE_PORTAL = 65;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CHANGED_ADD_INDUSTRIES_DROP_DOWN = 66;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_ADDED_MARKETS_IN_MY_PROFILE_PORTAL = 67;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CHANGED_ADD_MARKETS_DROP_DOWN = 68;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CHECKED_RECIEVE_MAIL_PROMOTIONS_MYPROFILE = 69;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CHECKED_RECIEVE_MAIL_PROMOTIONS_SIGNUP = 70;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_SELECTED_OPT_IN_BETA_TESTS_AND_MKT_RESEARCH = 71;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_SELECTED_OPT_IN_BETA_TESTS_IN_MY_PROFILE_PORTAL = 72;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_SELECTED_OPT_IN_NEWS_IN_MY_PROFILE_PORTAL = 73;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_SELECTED_OPT_IN_NEWS_INVITATIONS_AND_PROMOS = 74;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_SELECTED_OPT_IN_PERFORMANCE_SUG_IN_MY_PROFILE_PORTAL = 75;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_SELECTED_OPT_IN_PERFORMANCE_SUGGESTIONS = 76;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_SELECTED_OPT_IN_SELECT_ALL_EMAIL_NOTIFICATIONS = 77;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_SELECTED_SELECT_ALL_OPT_INS_IN_MY_PROFILE_PORTAL = 78;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLICKED_BACK_BUTTON_ON_CONNECT_WITH_COMPANY = 79;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLICKED_CONTINUE_TO_OVERVIEW_ON_CONNECT_WITH_COMPANY = 80;
        LOGUSEREVENTREQUEST_EVENTACTION_AGECNY_CLICKED_CREATE_MCC_CONNECT_WITH_COMPANY_NOT_FOUND = 81;
        LOGUSEREVENTREQUEST_EVENTACTION_AGECNY_CLICKED_GIVE_EDIT_ACCESS_CONNECT_WITH_COMPANY_NOT_FOUND = 82;
        LOGUSEREVENTREQUEST_EVENTACTION_AGECNY_CLICKED_LOG_OUT_CONNECT_WITH_COMPANY_NOT_FOUND = 83;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLICKED_SKIP_FOR_NOW_ON_CONNECT_WITH_COMPANY_PAGE = 84;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLOSED_CONNECTED_TO_COMPANY_X_BUTTON_WRONG_COMPANY = 85;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_COMPLETED_FIELD_CONNECT_WITH_COMPANY = 86;
        LOGUSEREVENTREQUEST_EVENTACTION_AGECNY_FOUND_COMPANY_TO_CONNECT_WITH = 87;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_SUCCESSFULLY_CREATED_COMPANY = 88;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_ADDED_NEW_COMPANY_LOCATION = 89;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLICKED_COMMUNITY_JOIN_NOW_LINK_IN_PORTAL_NOTIFICATIONS = 90;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLICKED_CONNECT_TO_COMPANY_LINK_IN_PORTAL_NOTIFICATIONS = 91;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLICKED_GET_CERTIFIED_LINK_IN_PORTAL_NOTIFICATIONS = 92;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLICKED_GET_VIDEO_ADS_CERTIFIED_LINK_IN_PORTAL_NOTIFICATIONS = 93;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLICKED_LINK_TO_MCC_LINK_IN_PORTAL_NOTIFICATIONS = 94;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLICKED_INSIGHT_CONTENT_IN_PORTAL = 95;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLICKED_INSIGHTS_VIEW_NOW_PITCH_DECKS_IN_PORTAL = 96;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLICKED_INSIGHTS_LEFT_NAV_IN_PORTAL = 97;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLICKED_INSIGHTS_UPLOAD_CONTENT = 98;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLICKED_INSIGHTS_VIEWED_DEPRECATED = 99;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLICKED_COMMUNITY_LEFT_NAV_IN_PORTAL = 100;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLICKED_JOIN_COMMUNITY_BUTTON_COMMUNITY_PORTAL = 101;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLICKED_CERTIFICATIONS_LEFT_NAV_IN_PORTAL = 102;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLICKED_CERTIFICATIONS_PRODUCT_LEFT_NAV_IN_PORTAL = 103;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLICKED_PARTNER_STATUS_LEFT_NAV_IN_PORTAL = 104;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLICKED_PARTNER_STATUS_PRODUCT_LEFT_NAV_IN_PORTAL = 105;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLICKED_OFFERS_LEFT_NAV_IN_PORTAL = 106;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLICKED_SEND_BUTTON_ON_OFFERS_PAGE = 107;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLICKED_EXAM_DETAILS_ON_CERT_ADWORDS_PAGE = 108;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLICKED_SEE_EXAMS_CERTIFICATION_MAIN_PAGE = 109;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLICKED_TAKE_EXAM_ON_CERT_EXAM_PAGE = 110;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_OPENED_LAST_ADMIN_DIALOG = 111;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_OPENED_DIALOG_WITH_NO_USERS = 112;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_PROMOTED_USER_TO_ADMIN = 113;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_UNAFFILIATED = 114;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CHANGED_ROLES = 115;
        LOGUSEREVENTREQUEST_EVENTACTION_SMB_CLICKED_COMPANY_NAME_LINK_TO_PROFILE = 116;
        LOGUSEREVENTREQUEST_EVENTACTION_SMB_VIEWED_ADWORDS_CERTIFICATE = 117;
        LOGUSEREVENTREQUEST_EVENTACTION_SMB_VIEWED_ADWORDS_SEARCH_CERTIFICATE = 118;
        LOGUSEREVENTREQUEST_EVENTACTION_SMB_VIEWED_ADWORDS_DISPLAY_CERTIFICATE = 119;
        LOGUSEREVENTREQUEST_EVENTACTION_SMB_CLICKED_ADWORDS_CERTIFICATE_HELP_ICON = 120;
        LOGUSEREVENTREQUEST_EVENTACTION_SMB_VIEWED_ANALYTICS_CERTIFICATE = 121;
        LOGUSEREVENTREQUEST_EVENTACTION_SMB_VIEWED_DOUBLECLICK_CERTIFICATE = 122;
        LOGUSEREVENTREQUEST_EVENTACTION_SMB_VIEWED_MOBILE_SITES_CERTIFICATE = 123;
        LOGUSEREVENTREQUEST_EVENTACTION_SMB_VIEWED_VIDEO_ADS_CERTIFICATE = 124;
        LOGUSEREVENTREQUEST_EVENTACTION_SMB_VIEWED_SHOPPING_CERTIFICATE = 125;
        LOGUSEREVENTREQUEST_EVENTACTION_SMB_CLICKED_VIDEO_ADS_CERTIFICATE_HELP_ICON = 126;
        LOGUSEREVENTREQUEST_EVENTACTION_SMB_VIEWED_DIGITAL_SALES_CERTIFICATE = 127;
        LOGUSEREVENTREQUEST_EVENTACTION_CLICKED_HELP_AT_BOTTOM = 128;
        LOGUSEREVENTREQUEST_EVENTACTION_CLICKED_HELP_AT_TOP = 129;
        LOGUSEREVENTREQUEST_EVENTACTION_CLIENT_ERROR = 130;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLICKED_LEFT_NAV_STORIES = 131;
        LOGUSEREVENTREQUEST_EVENTACTION_CLICKED = 132;
        LOGUSEREVENTREQUEST_EVENTACTION_SMB_VIEWED_MOBILE_CERTIFICATE = 133;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_FAILED_COMPANY_VERIFICATION = 134;
        LOGUSEREVENTREQUEST_EVENTACTION_VISITED_LANDING = 135;
        LOGUSEREVENTREQUEST_EVENTACTION_VISITED_GPS = 136;
        LOGUSEREVENTREQUEST_EVENTACTION_VISITED_AGENCY_PORTAL = 137;
        LOGUSEREVENTREQUEST_EVENTACTION_CANCELLED_INDIVIDUAL_SIGN_UP = 138;
        LOGUSEREVENTREQUEST_EVENTACTION_CANCELLED_COMPANY_SIGN_UP = 139;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLICKED_SIGN_IN_BUTTON_TOP = 140;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLICKED_SAVE_AND_CONTINUE_AT_BOT_OF_INCOMPLETE_PROFILE = 141;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_UNSELECTED_OPT_IN_NEWS_INVITATIONS_AND_PROMOS = 142;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_UNSELECTED_OPT_IN_BETA_TESTS_AND_MKT_RESEARCH = 143;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_UNSELECTED_OPT_IN_PERFORMANCE_SUGGESTIONS = 144;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_SELECTED_OPT_OUT_UNSELECT_ALL_EMAIL_NOTIFICATIONS = 145;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_LINKED_INDIVIDUAL_MCC = 146;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_SUGGESTED_TO_USER = 147;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_IGNORED_SUGGESTED_AGENCIES_AND_SEARCHED = 148;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_PICKED_SUGGESTED_AGENCY = 149;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_SEARCHED_FOR_AGENCIES = 150;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_PICKED_SEARCHED_AGENCY = 151;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_DISMISSED_AFFILIATION_WIDGET = 152;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLICKED_INSIGHTS_DOWNLOAD_CONTENT = 153;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_PROGRESS_INSIGHTS_VIEW_CONTENT = 154;
        LOGUSEREVENTREQUEST_EVENTACTION_AGENCY_CLICKED_CANCEL_ACCEPT_TOS_BUTTON = 155;
        LOGUSEREVENTREQUEST_EVENTACTION_SMB_ENTERED_WEBSITE_IN_CONTACT_PARTNER_FORM = 156;
    }
    LogUserEventRequest_EventAction eventAction = 1;
    // The category the action belongs to.
    enum LogUserEventRequest_EventCategory {
        LOGUSEREVENTREQUEST_EVENTCATEGORY_EVENT_CATEGORY_UNSPECIFIED = 0;
        LOGUSEREVENTREQUEST_EVENTCATEGORY_GOOGLE_PARTNER_SEARCH = 1;
        LOGUSEREVENTREQUEST_EVENTCATEGORY_GOOGLE_PARTNER_SIGNUP_FLOW = 2;
        LOGUSEREVENTREQUEST_EVENTCATEGORY_GOOGLE_PARTNER_PORTAL = 3;
        LOGUSEREVENTREQUEST_EVENTCATEGORY_GOOGLE_PARTNER_PORTAL_MY_PROFILE = 4;
        LOGUSEREVENTREQUEST_EVENTCATEGORY_GOOGLE_PARTNER_PORTAL_CERTIFICATIONS = 5;
        LOGUSEREVENTREQUEST_EVENTCATEGORY_GOOGLE_PARTNER_PORTAL_COMMUNITY = 6;
        LOGUSEREVENTREQUEST_EVENTCATEGORY_GOOGLE_PARTNER_PORTAL_INSIGHTS = 7;
        LOGUSEREVENTREQUEST_EVENTCATEGORY_GOOGLE_PARTNER_PORTAL_CLIENTS = 8;
        LOGUSEREVENTREQUEST_EVENTCATEGORY_GOOGLE_PARTNER_PUBLIC_USER_PROFILE = 9;
        LOGUSEREVENTREQUEST_EVENTCATEGORY_GOOGLE_PARTNER_PANEL = 10;
        LOGUSEREVENTREQUEST_EVENTCATEGORY_GOOGLE_PARTNER_PORTAL_LAST_ADMIN_DIALOG = 11;
        LOGUSEREVENTREQUEST_EVENTCATEGORY_GOOGLE_PARTNER_CLIENT = 12;
        LOGUSEREVENTREQUEST_EVENTCATEGORY_GOOGLE_PARTNER_PORTAL_COMPANY_PROFILE = 13;
        LOGUSEREVENTREQUEST_EVENTCATEGORY_EXTERNAL_LINKS = 14;
        LOGUSEREVENTREQUEST_EVENTCATEGORY_GOOGLE_PARTNER_LANDING = 15;
    }
    LogUserEventRequest_EventCategory eventCategory = 2;
    // List of event data for the event.
    repeated EventData eventDatas = 3;
    // The scope of the event.
    enum LogUserEventRequest_EventScope {
        LOGUSEREVENTREQUEST_EVENTSCOPE_EVENT_SCOPE_UNSPECIFIED = 0;
        LOGUSEREVENTREQUEST_EVENTSCOPE_VISITOR = 1;
        LOGUSEREVENTREQUEST_EVENTSCOPE_SESSION = 2;
        LOGUSEREVENTREQUEST_EVENTSCOPE_PAGE = 3;
    }
    LogUserEventRequest_EventScope eventScope = 4;
    // Advertiser lead information.
    Lead lead = 5;
    // Current request metadata.
    RequestMetadata requestMetadata = 6;
    // The URL where the event occurred.
    string url = 7;
}

message LogUserEventResponse {
    // Current response metadata.
    ResponseMetadata responseMetadata = 1;
}

message Money {
    // The 3-letter currency code defined in ISO 4217.
    string currencyCode = 1;
    // Number of nano (10^-9) units of the amount.
    // The value must be between -999,999,999 and +999,999,999 inclusive.
    // If `units` is positive, `nanos` must be positive or zero.
    // If `units` is zero, `nanos` can be positive, zero, or negative.
    // If `units` is negative, `nanos` must be negative or zero.
    // For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
    int32 nanos = 2;
    // The whole units of the amount.
    // For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
    string units = 3;
}

message OfferCustomer {
    // URL to the customer's AdWords page.
    string adwordsUrl = 1;
    // Country code of the customer.
    string countryCode = 2;
    // Time the customer was created.
    string creationTime = 3;
    // Days the customer is still eligible.
    int32 eligibilityDaysLeft = 4;
    // External CID for the customer.
    string externalCid = 5;
    // Formatted Get Y amount with currency code.
    string getYAmount = 6;
    // Name of the customer.
    string name = 7;
    // Type of the offer
    enum OfferCustomer_OfferType {
        OFFERCUSTOMER_OFFERTYPE_OFFER_TYPE_UNSPECIFIED = 0;
        OFFERCUSTOMER_OFFERTYPE_OFFER_TYPE_SPEND_X_GET_Y = 1;
        OFFERCUSTOMER_OFFERTYPE_OFFER_TYPE_VIDEO = 2;
        OFFERCUSTOMER_OFFERTYPE_OFFER_TYPE_SPEND_MATCH = 3;
    }
    OfferCustomer_OfferType offerType = 8;
    // Formatted Spend X amount with currency code.
    string spendXAmount = 9;
}

message OptIns {
    // An opt-in about receiving email from Partners marketing teams. Includes
    // member-only events and special promotional offers for Google products.
    bool marketComm = 1;
    // An opt-in about receiving email with customized AdWords campaign management
    // tips.
    bool performanceSuggestions = 2;
    // An opt-in to allow recieivng phone calls about their Partners account.
    bool phoneContact = 3;
    // An opt-in to receive special promotional gifts and material in the mail.
    bool physicalMail = 4;
    // An opt-in about receiving email regarding new features and products.
    bool specialOffers = 5;
}

message PublicProfile {
    // The URL to the main display image of the public profile. Being deprecated.
    string displayImageUrl = 1;
    // The display name of the public profile.
    string displayName = 2;
    // The ID which can be used to retrieve more details about the public profile.
    string id = 3;
    // The URL to the main profile image of the public profile.
    string profileImage = 4;
    // The URL of the public profile.
    string url = 5;
}

message Rank {
    // The type of rank.
    enum Rank_Type {
        RANK_TYPE_RANK_TYPE_UNSPECIFIED = 0;
        RANK_TYPE_RT_FINAL_SCORE = 1;
    }
    Rank_Type type = 1;
    // The numerical value of the rank.
    double value = 2;
}

message RecaptchaChallenge {
    // The ID of the reCaptcha challenge.
    string id = 1;
    // The response to the reCaptcha challenge.
    string response = 2;
}

message RequestMetadata {
    // Experiment IDs the current request belongs to.
    repeated string experimentIds = 1;
    // Locale to use for the current request.
    string locale = 2;
    // Google Partners session ID.
    string partnersSessionId = 3;
    // Source of traffic for the current request.
    TrafficSource trafficSource = 4;
    // Values to use instead of the user's respective defaults for the current
    // request. These are only honored by whitelisted products.
    UserOverrides userOverrides = 5;
}

message ResponseMetadata {
    // Debug information about this request.
    DebugInfo debugInfo = 1;
}

message SpecializationStatus {
    // The specialization this status is for.
    enum SpecializationStatus_BadgeSpecialization {
        SPECIALIZATIONSTATUS_BADGESPECIALIZATION_BADGE_SPECIALIZATION_UNKNOWN = 0;
        SPECIALIZATIONSTATUS_BADGESPECIALIZATION_BADGE_SPECIALIZATION_ADWORDS_SEARCH = 1;
        SPECIALIZATIONSTATUS_BADGESPECIALIZATION_BADGE_SPECIALIZATION_ADWORDS_DISPLAY = 2;
        SPECIALIZATIONSTATUS_BADGESPECIALIZATION_BADGE_SPECIALIZATION_ADWORDS_MOBILE = 3;
        SPECIALIZATIONSTATUS_BADGESPECIALIZATION_BADGE_SPECIALIZATION_ADWORDS_VIDEO = 4;
        SPECIALIZATIONSTATUS_BADGESPECIALIZATION_BADGE_SPECIALIZATION_ADWORDS_SHOPPING = 5;
    }
    SpecializationStatus_BadgeSpecialization badgeSpecialization = 1;
    // State of agency specialization.
    enum SpecializationStatus_BadgeSpecializationState {
        SPECIALIZATIONSTATUS_BADGESPECIALIZATIONSTATE_BADGE_SPECIALIZATION_STATE_UNKNOWN = 0;
        SPECIALIZATIONSTATUS_BADGESPECIALIZATIONSTATE_BADGE_SPECIALIZATION_STATE_PASSED = 1;
        SPECIALIZATIONSTATUS_BADGESPECIALIZATIONSTATE_BADGE_SPECIALIZATION_STATE_NOT_PASSED = 2;
        SPECIALIZATIONSTATUS_BADGESPECIALIZATIONSTATE_BADGE_SPECIALIZATION_STATE_IN_GRACE = 3;
    }
    SpecializationStatus_BadgeSpecializationState badgeSpecializationState = 2;
}

message TrafficSource {
    // Identifier to indicate where the traffic comes from.
    // An identifier has multiple letters created by a team which redirected the
    // traffic to us.
    string trafficSourceId = 1;
    // Second level identifier to indicate where the traffic comes from.
    // An identifier has multiple letters created by a team which redirected the
    // traffic to us.
    string trafficSubId = 2;
}

message User {
    // This is the list of AdWords Manager Accounts the user has edit access to.
    // If the user has edit access to multiple accounts, the user can choose the
    // preferred account and we use this when a personal account is needed. Can
    // be empty meaning the user has access to no accounts.
    // @OutputOnly
    repeated AdWordsManagerAccountInfo availableAdwordsManagerAccounts = 1;
    // The list of achieved certifications. These are calculated based on exam
    // results and other requirements.
    // @OutputOnly
    repeated Certification certificationStatus = 2;
    // The company that the user is associated with.
    // If not present, the user is not associated with any company.
    CompanyRelation company = 3;
    // The email address used by the user used for company verification.
    // @OutputOnly
    string companyVerificationEmail = 4;
    // The list of exams the user ever taken. For each type of exam, only one
    // entry is listed.
    repeated ExamStatus examStatus = 5;
    // The ID of the user.
    string id = 6;
    // The internal user ID.
    // Only available for a whitelisted set of api clients.
    string internalId = 7;
    // The most recent time the user interacted with the Partners site.
    // @OutputOnly
    string lastAccessTime = 8;
    // The list of emails the user has access to/can select as primary.
    // @OutputOnly
    repeated string primaryEmails = 9;
    // The profile information of a Partners user, contains all the directly
    // editable user information.
    UserProfile profile = 10;
    // Information about a user's external public profile outside Google Partners.
    PublicProfile publicProfile = 11;
}

message UserOverrides {
    // IP address to use instead of the user's geo-located IP address.
    string ipAddress = 1;
    // Logged-in user ID to impersonate instead of the user's ID.
    string userId = 2;
}

message UserProfile {
    // The user's mailing address, contains multiple fields.
    Location address = 1;
    // If the user has edit access to multiple accounts, the user can choose the
    // preferred account and it is used when a personal account is needed. Can
    // be empty.
    string adwordsManagerAccount = 2;
    // A list of ids representing which channels the user selected they were in.
    repeated string channels = 3;
    // The email address the user has selected on the Partners site as primary.
    string emailAddress = 4;
    // The list of opt-ins for the user, related to communication preferences.
    OptIns emailOptIns = 5;
    // The user's family name.
    string familyName = 6;
    // The user's given name.
    string givenName = 7;
    // A list of ids representing which industries the user selected.
    repeated string industries = 8;
    // A list of ids represnting which job categories the user selected.
    repeated string jobFunctions = 9;
    // The list of languages this user understands.
    repeated string languages = 10;
    // A list of ids representing which markets the user was interested in.
    repeated string markets = 11;
    // The user's phone number.
    string phoneNumber = 12;
    // The user's primary country, an ISO 2-character code.
    string primaryCountryCode = 13;
    // Whether the user's public profile is visible to anyone with the URL.
    bool profilePublic = 14;
}

enum Alt {
    JSON = 0;
    MEDIA = 1;
    PROTO = 2;
}

service GooglePartnersService {
    // Lists analytics data for a user's associated company.
    // Should only be called within the context of an authorized logged in user.
    rpc GetV2Analytics(GetV2AnalyticsRequest) returns (ListAnalyticsResponse) {
      option (google.api.http) = {
        get: "//v2/analytics"
      };
    }
    // Logs a generic message from the client, such as
    // `Failed to render component`, `Profile page is running slow`,
    // `More than 500 users have accessed this result.`, etc.
    rpc PostV2ClientMessages:Log(PostV2ClientMessages:LogRequest) returns (LogMessageResponse) {
      option (google.api.http) = {
        post: "//v2/clientMessages:log"
        body: "body"
      };
    }
    // Lists companies.
    rpc GetV2Companies(GetV2CompaniesRequest) returns (ListCompaniesResponse) {
      option (google.api.http) = {
        get: "//v2/companies"
      };
    }
    // Gets a company.
    rpc GetV2CompaniesCompanyId(GetV2CompaniesCompanyIdRequest) returns (GetCompanyResponse) {
      option (google.api.http) = {
        get: "//v2/companies/{companyId}"
      };
    }
    // Creates an advertiser lead for the given company ID.
    rpc PostV2CompaniesCompanyIdLeads(PostV2CompaniesCompanyIdLeadsRequest) returns (CreateLeadResponse) {
      option (google.api.http) = {
        post: "//v2/companies/{companyId}/leads"
        body: "body"
      };
    }
    // Gets an Exam Token for a Partner's user to take an exam in the Exams System
    rpc GetV2ExamsExamTypeToken(GetV2ExamsExamTypeTokenRequest) returns (ExamToken) {
      option (google.api.http) = {
        get: "//v2/exams/{examType}/token"
      };
    }
    // Lists advertiser leads for a user's associated company.
    // Should only be called within the context of an authorized logged in user.
    rpc GetV2Leads(GetV2LeadsRequest) returns (ListLeadsResponse) {
      option (google.api.http) = {
        get: "//v2/leads"
      };
    }
    // Lists the Offers available for the current user
    rpc GetV2Offers(GetV2OffersRequest) returns (ListOffersResponse) {
      option (google.api.http) = {
        get: "//v2/offers"
      };
    }
    // Lists the Historical Offers for the current user (or user's entire company)
    rpc GetV2OffersHistory(GetV2OffersHistoryRequest) returns (ListOffersHistoryResponse) {
      option (google.api.http) = {
        get: "//v2/offers/history"
      };
    }
    // Gets Partners Status of the logged in user's agency.
    // Should only be called if the logged in user is the admin of the agency.
    rpc GetV2Partnersstatus(GetV2PartnersstatusRequest) returns (GetPartnersStatusResponse) {
      option (google.api.http) = {
        get: "//v2/partnersstatus"
      };
    }
    // Logs a user event.
    rpc PostV2UserEvents:Log(PostV2UserEvents:LogRequest) returns (LogUserEventResponse) {
      option (google.api.http) = {
        post: "//v2/userEvents:log"
        body: "body"
      };
    }
    // Lists states for current user.
    rpc GetV2UserStates(GetV2UserStatesRequest) returns (ListUserStatesResponse) {
      option (google.api.http) = {
        get: "//v2/userStates"
      };
    }

    // Gets a user.
    rpc GetV2UsersUserId(GetV2UsersUserIdRequest) returns (User) {
      option (google.api.http) = {
        get: "//v2/users/{userId}"
      };
    }
    // Creates a user's company relation. Affiliates the user to a company.
    rpc PutV2UsersUserIdCompanyRelation(PutV2UsersUserIdCompanyRelationRequest) returns (CompanyRelation) {
      option (google.api.http) = {
        put: "//v2/users/{userId}/companyRelation"
        body: "body"
      };
    }
    // Deletes a user's company relation. Unaffiliaites the user from a company.
    rpc DeleteV2UsersUserIdCompanyRelation(DeleteV2UsersUserIdCompanyRelationRequest) returns (Empty) {
      option (google.api.http) = {
        delete: "//v2/users/{userId}/companyRelation"
      };
    }
}

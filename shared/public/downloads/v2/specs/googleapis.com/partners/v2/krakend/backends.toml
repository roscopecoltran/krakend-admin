[[backends]]
  group = "google-partners-v2-analytics"
  slug = "google-partners-v2-v2-analytics"
  url_pattern = "/v2/analytics"
  method = "GET"
  host = ["https://partners.googleapis.com"]
  query_string_params = ["pageSize", "pageToken", "requestMetadata.experimentIds", "requestMetadata.locale", "requestMetadata.partnersSessionId", "requestMetadata.trafficSource.trafficSourceId", "requestMetadata.trafficSource.trafficSubId", "requestMetadata.userOverrides.ipAddress", "requestMetadata.userOverrides.userId"]
  whitelist = ["analytics", "nextPageToken"]
  concurrent_calls = 1
  [backends.mapping]
    analytics = "analytics"
    nextPageToken = "nextPageToken"
  [backends.extra_config]
    hosts = ["https://partners.googleapis.com"]
    schemes = ["https"]

[[backends]]
  group = "google-partners-v2-clientmessages-log"
  slug = "google-partners-v2-v2-clientmessages-log"
  url_pattern = "/v2/clientMessages:log"
  method = "POST"
  host = ["https://partners.googleapis.com"]
  concurrent_calls = 1
  [backends.extra_config]
    hosts = ["https://partners.googleapis.com"]
    schemes = ["https"]

[[backends]]
  group = "google-partners-v2-companies"
  slug = "google-partners-v2-v2-companies"
  url_pattern = "/v2/companies"
  method = "GET"
  host = ["https://partners.googleapis.com"]
  query_string_params = ["address", "companyName", "gpsMotivations", "industries", "languageCodes", "maxMonthlyBudget.currencyCode", "maxMonthlyBudget.nanos", "maxMonthlyBudget.units", "minMonthlyBudget.currencyCode", "minMonthlyBudget.nanos", "minMonthlyBudget.units", "orderBy", "pageSize", "pageToken", "requestMetadata.experimentIds", "requestMetadata.locale", "requestMetadata.partnersSessionId", "requestMetadata.trafficSource.trafficSourceId", "requestMetadata.trafficSource.trafficSubId", "requestMetadata.userOverrides.ipAddress", "requestMetadata.userOverrides.userId", "services", "specializations", "view", "websiteUrl"]
  whitelist = ["companies", "nextPageToken"]
  concurrent_calls = 1
  [backends.mapping]
    companies = "companies"
    nextPageToken = "nextPageToken"
  [backends.extra_config]
    hosts = ["https://partners.googleapis.com"]
    schemes = ["https"]

[[backends]]
  group = "google-partners-v2-companies-companyid"
  slug = "google-partners-v2-v2-companies-companyid"
  url_pattern = "/v2/companies/{companyId}"
  method = "GET"
  host = ["https://partners.googleapis.com"]
  url_keys = ["companyId"]
  query_string_params = ["address", "currencyCode", "orderBy", "requestMetadata.experimentIds", "requestMetadata.locale", "requestMetadata.partnersSessionId", "requestMetadata.trafficSource.trafficSourceId", "requestMetadata.trafficSource.trafficSubId", "requestMetadata.userOverrides.ipAddress", "requestMetadata.userOverrides.userId", "view"]
  concurrent_calls = 1
  [backends.extra_config]
    hosts = ["https://partners.googleapis.com"]
    schemes = ["https"]

[[backends]]
  group = "google-partners-v2-companies-companyid-leads"
  slug = "google-partners-v2-v2-companies-companyid-leads"
  url_pattern = "/v2/companies/{companyId}/leads"
  method = "POST"
  host = ["https://partners.googleapis.com"]
  url_keys = ["companyId"]
  whitelist = ["recaptchaStatus"]
  concurrent_calls = 1
  [backends.mapping]
    recaptchaStatus = "recaptchaStatus"
  [backends.extra_config]
    hosts = ["https://partners.googleapis.com"]
    schemes = ["https"]

[[backends]]
  group = "google-partners-v2-exams-examtype-token"
  slug = "google-partners-v2-v2-exams-examtype-token"
  url_pattern = "/v2/exams/{examType}/token"
  method = "GET"
  host = ["https://partners.googleapis.com"]
  url_keys = ["examType"]
  query_string_params = ["requestMetadata.experimentIds", "requestMetadata.locale", "requestMetadata.partnersSessionId", "requestMetadata.trafficSource.trafficSourceId", "requestMetadata.trafficSource.trafficSubId", "requestMetadata.userOverrides.ipAddress", "requestMetadata.userOverrides.userId"]
  whitelist = ["examId", "examType", "token"]
  concurrent_calls = 1
  [backends.mapping]
    examId = "examId"
    examType = "examType"
    token = "token"
  [backends.extra_config]
    hosts = ["https://partners.googleapis.com"]
    schemes = ["https"]

[[backends]]
  group = "google-partners-v2-leads"
  slug = "google-partners-v2-v2-leads"
  url_pattern = "/v2/leads"
  method = "GET"
  host = ["https://partners.googleapis.com"]
  query_string_params = ["orderBy", "pageSize", "pageToken", "requestMetadata.experimentIds", "requestMetadata.locale", "requestMetadata.partnersSessionId", "requestMetadata.trafficSource.trafficSourceId", "requestMetadata.trafficSource.trafficSubId", "requestMetadata.userOverrides.ipAddress", "requestMetadata.userOverrides.userId"]
  whitelist = ["leads", "nextPageToken", "totalSize"]
  concurrent_calls = 1
  [backends.mapping]
    leads = "leads"
    nextPageToken = "nextPageToken"
    totalSize = "totalSize"
  [backends.extra_config]
    hosts = ["https://partners.googleapis.com"]
    schemes = ["https"]

[[backends]]
  group = "google-partners-v2-offers"
  slug = "google-partners-v2-v2-offers"
  url_pattern = "/v2/offers"
  method = "GET"
  host = ["https://partners.googleapis.com"]
  query_string_params = ["requestMetadata.experimentIds", "requestMetadata.locale", "requestMetadata.partnersSessionId", "requestMetadata.trafficSource.trafficSourceId", "requestMetadata.trafficSource.trafficSubId", "requestMetadata.userOverrides.ipAddress", "requestMetadata.userOverrides.userId"]
  whitelist = ["availableOffers", "noOfferReason"]
  concurrent_calls = 1
  [backends.mapping]
    availableOffers = "availableOffers"
    noOfferReason = "noOfferReason"
  [backends.extra_config]
    hosts = ["https://partners.googleapis.com"]
    schemes = ["https"]

[[backends]]
  group = "google-partners-v2-offers-history"
  slug = "google-partners-v2-v2-offers-history"
  url_pattern = "/v2/offers/history"
  method = "GET"
  host = ["https://partners.googleapis.com"]
  query_string_params = ["entireCompany", "orderBy", "pageSize", "pageToken", "requestMetadata.experimentIds", "requestMetadata.locale", "requestMetadata.partnersSessionId", "requestMetadata.trafficSource.trafficSourceId", "requestMetadata.trafficSource.trafficSubId", "requestMetadata.userOverrides.ipAddress", "requestMetadata.userOverrides.userId"]
  whitelist = ["canShowEntireCompany", "nextPageToken", "offers", "showingEntireCompany", "totalResults"]
  concurrent_calls = 1
  [backends.mapping]
    canShowEntireCompany = "canShowEntireCompany"
    nextPageToken = "nextPageToken"
    offers = "offers"
    showingEntireCompany = "showingEntireCompany"
    totalResults = "totalResults"
  [backends.extra_config]
    hosts = ["https://partners.googleapis.com"]
    schemes = ["https"]

[[backends]]
  group = "google-partners-v2-partnersstatus"
  slug = "google-partners-v2-v2-partnersstatus"
  url_pattern = "/v2/partnersstatus"
  method = "GET"
  host = ["https://partners.googleapis.com"]
  query_string_params = ["requestMetadata.experimentIds", "requestMetadata.locale", "requestMetadata.partnersSessionId", "requestMetadata.trafficSource.trafficSourceId", "requestMetadata.trafficSource.trafficSubId", "requestMetadata.userOverrides.ipAddress", "requestMetadata.userOverrides.userId"]
  concurrent_calls = 1
  [backends.extra_config]
    hosts = ["https://partners.googleapis.com"]
    schemes = ["https"]

[[backends]]
  group = "google-partners-v2-userevents-log"
  slug = "google-partners-v2-v2-userevents-log"
  url_pattern = "/v2/userEvents:log"
  method = "POST"
  host = ["https://partners.googleapis.com"]
  concurrent_calls = 1
  [backends.extra_config]
    hosts = ["https://partners.googleapis.com"]
    schemes = ["https"]

[[backends]]
  group = "google-partners-v2-userstates"
  slug = "google-partners-v2-v2-userstates"
  url_pattern = "/v2/userStates"
  method = "GET"
  host = ["https://partners.googleapis.com"]
  query_string_params = ["requestMetadata.experimentIds", "requestMetadata.locale", "requestMetadata.partnersSessionId", "requestMetadata.trafficSource.trafficSourceId", "requestMetadata.trafficSource.trafficSubId", "requestMetadata.userOverrides.ipAddress", "requestMetadata.userOverrides.userId"]
  whitelist = ["userStates"]
  concurrent_calls = 1
  [backends.mapping]
    userStates = "userStates"
  [backends.extra_config]
    hosts = ["https://partners.googleapis.com"]
    schemes = ["https"]

[[backends]]
  group = "google-partners-v2-users-userid"
  slug = "google-partners-v2-v2-users-userid"
  url_pattern = "/v2/users/{userId}"
  method = "GET"
  host = ["https://partners.googleapis.com"]
  url_keys = ["userId"]
  query_string_params = ["requestMetadata.experimentIds", "requestMetadata.locale", "requestMetadata.partnersSessionId", "requestMetadata.trafficSource.trafficSourceId", "requestMetadata.trafficSource.trafficSubId", "requestMetadata.userOverrides.ipAddress", "requestMetadata.userOverrides.userId", "userView"]
  whitelist = ["availableAdwordsManagerAccounts", "certificationStatus", "companyVerificationEmail", "examStatus", "id", "internalId", "lastAccessTime", "primaryEmails"]
  concurrent_calls = 1
  [backends.mapping]
    availableAdwordsManagerAccounts = "availableAdwordsManagerAccounts"
    certificationStatus = "certificationStatus"
    companyVerificationEmail = "companyVerificationEmail"
    examStatus = "examStatus"
    id = "id"
    internalId = "internalId"
    lastAccessTime = "lastAccessTime"
    primaryEmails = "primaryEmails"
  [backends.extra_config]
    hosts = ["https://partners.googleapis.com"]
    schemes = ["https"]

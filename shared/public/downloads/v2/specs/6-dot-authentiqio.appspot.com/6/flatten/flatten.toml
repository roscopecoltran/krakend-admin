basePath = "/"
"definitions.AuthentiqID.description" = "Authentiq ID in JWT format, self-signed.\n"
"definitions.AuthentiqID.properties.devtoken.description" = "device token for push messages"
"definitions.AuthentiqID.properties.devtoken.type" = "string"
"definitions.AuthentiqID.properties.sub.description" = "UUID and public signing key"
"definitions.AuthentiqID.properties.sub.type" = "string"
"definitions.AuthentiqID.required.length" = 1
"definitions.AuthentiqID.required[0]" = "sub"
"definitions.Claims.description" = "Claim in JWT format, self- or issuer-signed. \n"
"definitions.Claims.properties.email.description" = ""
"definitions.Claims.properties.email.type" = "string"
"definitions.Claims.properties.phone.description" = ""
"definitions.Claims.properties.phone.type" = "string"
"definitions.Claims.properties.scope.description" = "claim scope"
"definitions.Claims.properties.scope.type" = "string"
"definitions.Claims.properties.sub.description" = "UUID"
"definitions.Claims.properties.sub.type" = "string"
"definitions.Claims.properties.type.description" = ""
"definitions.Claims.properties.type.type" = "string"
"definitions.Claims.required.length" = 2
"definitions.Claims.required[0]" = "sub"
"definitions.Claims.required[1]" = "scope"
"definitions.Error.properties.detail.type" = "string"
"definitions.Error.properties.error.type" = "integer"
"definitions.Error.properties.title.type" = "string"
"definitions.Error.properties.type.description" = "unique uri for this error"
"definitions.Error.properties.type.type" = "string"
"definitions.Error.required.length" = 1
"definitions.Error.required[0]" = "error"
"definitions.PushToken.description" = "PushToken in JWT format, self-signed. \n"
"definitions.PushToken.properties.aud.description" = "audience (URI)"
"definitions.PushToken.properties.aud.type" = "string"
"definitions.PushToken.properties.exp.type" = "integer"
"definitions.PushToken.properties.iat.type" = "integer"
"definitions.PushToken.properties.iss.description" = "issuer (URI)"
"definitions.PushToken.properties.iss.type" = "string"
"definitions.PushToken.properties.nbf.type" = "integer"
"definitions.PushToken.properties.sub.description" = "UUID and public signing key"
"definitions.PushToken.properties.sub.type" = "string"
"definitions.PushToken.required.length" = 3
"definitions.PushToken.required[0]" = "sub"
"definitions.PushToken.required[1]" = "iss"
"definitions.PushToken.required[2]" = "aud"
host = "6-dot-authentiqio.appspot.com"
"info.contact.email" = "hello@authentiq.com"
"info.contact.name" = "Authentiq team"
"info.contact.url" = "http://authentiq.io/support"
"info.description" = "Strong authentication, without the passwords."
"info.license.name" = "Apache 2.0"
"info.license.url" = "http://www.apache.org/licenses/LICENSE-2.0.html"
"info.termsOfService" = "http://authentiq.com/terms/"
"info.title" = "Authentiq"
"info.version" = "6"
"info.x-apisguru-categories.length" = 1
"info.x-apisguru-categories[0]" = "security"
"info.x-logo.backgroundColor" = "#F26641"
"info.x-logo.url" = "https://api.apis.guru/v2/cache/logo/https_www.authentiq.com_theme_images_authentiq-logo-a-inverse.svg"
"info.x-origin.length" = 1
"info.x-origin[0].format" = "swagger"
"info.x-origin[0].url" = "https://raw.githubusercontent.com/AuthentiqID/authentiq-docs/master/docs/swagger/issuer.yaml"
"info.x-origin[0].version" = "2.0"
"info.x-preferred" = true
"info.x-providerName" = "6-dot-authentiqio.appspot.com"
"parameters.AuthentiqID.description" = "Authentiq ID to register"
"parameters.AuthentiqID.in" = "body"
"parameters.AuthentiqID.name" = "body"
"parameters.AuthentiqID.required" = true
"parameters.AuthentiqID.schema.$ref" = "#/definitions/AuthentiqID"
"parameters.JobID.description" = "Job ID (20 chars)"
"parameters.JobID.in" = "path"
"parameters.JobID.name" = "job"
"parameters.JobID.required" = true
"parameters.JobID.type" = "string"
"parameters.PK.description" = "Public Signing Key - Authentiq ID (43 chars)"
"parameters.PK.in" = "path"
"parameters.PK.name" = "PK"
"parameters.PK.required" = true
"parameters.PK.type" = "string"
"parameters.PushToken.description" = "Push Token."
"parameters.PushToken.in" = "body"
"parameters.PushToken.name" = "body"
"parameters.PushToken.required" = true
"parameters.PushToken.schema.$ref" = "#/definitions/PushToken"
"parameters.Scope.description" = "Claims of scope"
"parameters.Scope.in" = "body"
"parameters.Scope.name" = "body"
"parameters.Scope.required" = true
"parameters.Scope.schema.$ref" = "#/definitions/Claims"
"paths./key.delete.description" = "Revoke an Authentiq ID using email & phone.\n\nIf called with `email` and `phone` only, a verification code \nwill be sent by email. Do a second call adding `code` to \ncomplete the revocation.\n"
"paths./key.delete.operationId" = "key_revoke_nosecret"
"paths./key.delete.parameters.length" = 3
"paths./key.delete.parameters[0].description" = "primary email associated to Key (ID)"
"paths./key.delete.parameters[0].in" = "query"
"paths./key.delete.parameters[0].name" = "email"
"paths./key.delete.parameters[0].required" = true
"paths./key.delete.parameters[0].type" = "string"
"paths./key.delete.parameters[1].description" = "primary phone number, international representation"
"paths./key.delete.parameters[1].in" = "query"
"paths./key.delete.parameters[1].name" = "phone"
"paths./key.delete.parameters[1].required" = true
"paths./key.delete.parameters[1].type" = "string"
"paths./key.delete.parameters[2].description" = "verification code sent by email"
"paths./key.delete.parameters[2].in" = "query"
"paths./key.delete.parameters[2].name" = "code"
"paths./key.delete.parameters[2].required" = false
"paths./key.delete.parameters[2].type" = "string"
"paths./key.delete.produces.length" = 1
"paths./key.delete.produces[0]" = "application/json"
"paths./key.delete.responses.200.description" = "Successfully deleted"
"paths./key.delete.responses.200.schema.properties.status.description" = "pending or done"
"paths./key.delete.responses.200.schema.properties.status.type" = "string"
"paths./key.delete.responses.200.schema.type" = "object"
"paths./key.delete.responses.401.description" = "Authentication error `auth-error`"
"paths./key.delete.responses.401.schema.$ref" = "#/definitions/Error"
"paths./key.delete.responses.404.description" = "Unknown key `unknown-key`"
"paths./key.delete.responses.404.schema.$ref" = "#/definitions/Error"
"paths./key.delete.responses.409.description" = "Confirm with code sent `confirm-first`"
"paths./key.delete.responses.409.schema.$ref" = "#/definitions/Error"
"paths./key.delete.responses.default.$ref" = "#/responses/ErrorResponse"
"paths./key.delete.tags.length" = 2
"paths./key.delete.tags[0]" = "key"
"paths./key.delete.tags[1]" = "delete"
"paths./key.post.consumes.length" = 1
"paths./key.post.consumes[0]" = "application/jwt"
"paths./key.post.description" = "Register a new ID `JWT(sub, devtoken)`\n\nv5: `JWT(sub, pk, devtoken, ...)`\n\nSee: https://github.com/skion/authentiq/wiki/JWT-Examples\n"
"paths./key.post.operationId" = "key_register"
"paths./key.post.parameters.length" = 1
"paths./key.post.parameters[0].$ref" = "#/parameters/AuthentiqID"
"paths./key.post.produces.length" = 1
"paths./key.post.produces[0]" = "application/json"
"paths./key.post.responses.201.description" = "Successfully registered"
"paths./key.post.responses.201.schema.properties.secret.description" = "revoke key"
"paths./key.post.responses.201.schema.properties.secret.type" = "string"
"paths./key.post.responses.201.schema.properties.status.description" = "registered"
"paths./key.post.responses.201.schema.properties.status.type" = "string"
"paths./key.post.responses.201.schema.type" = "object"
"paths./key.post.responses.409.description" = "Key already registered `duplicate-key`"
"paths./key.post.responses.409.schema.$ref" = "#/definitions/Error"
"paths./key.post.responses.default.$ref" = "#/responses/ErrorResponse"
"paths./key.post.tags.length" = 2
"paths./key.post.tags[0]" = "key"
"paths./key.post.tags[1]" = "post"
"paths./key/{PK}.delete.description" = "Revoke an Identity (Key) with a revocation secret"
"paths./key/{PK}.delete.operationId" = "key_revoke"
"paths./key/{PK}.delete.parameters.length" = 2
"paths./key/{PK}.delete.parameters[0].$ref" = "#/parameters/PK"
"paths./key/{PK}.delete.parameters[1].description" = "revokation secret"
"paths./key/{PK}.delete.parameters[1].in" = "query"
"paths./key/{PK}.delete.parameters[1].name" = "secret"
"paths./key/{PK}.delete.parameters[1].required" = true
"paths./key/{PK}.delete.parameters[1].type" = "string"
"paths./key/{PK}.delete.produces.length" = 1
"paths./key/{PK}.delete.produces[0]" = "application/json"
"paths./key/{PK}.delete.responses.200.description" = "Successful response"
"paths./key/{PK}.delete.responses.200.schema.properties.status.description" = "done"
"paths./key/{PK}.delete.responses.200.schema.properties.status.type" = "string"
"paths./key/{PK}.delete.responses.200.schema.type" = "object"
"paths./key/{PK}.delete.responses.401.description" = "Key not found / wrong code `auth-error`"
"paths./key/{PK}.delete.responses.401.schema.$ref" = "#/definitions/Error"
"paths./key/{PK}.delete.responses.404.description" = "Unknown key `unknown-key`"
"paths./key/{PK}.delete.responses.404.schema.$ref" = "#/definitions/Error"
"paths./key/{PK}.delete.responses.default.$ref" = "#/responses/ErrorResponse"
"paths./key/{PK}.delete.tags.length" = 2
"paths./key/{PK}.delete.tags[0]" = "key"
"paths./key/{PK}.delete.tags[1]" = "delete"
"paths./key/{PK}.get.description" = "Get public details of an Authentiq ID.\n"
"paths./key/{PK}.get.parameters.length" = 1
"paths./key/{PK}.get.parameters[0].$ref" = "#/parameters/PK"
"paths./key/{PK}.get.produces.length" = 1
"paths./key/{PK}.get.produces[0]" = "application/json"
"paths./key/{PK}.get.responses.200.description" = "Successfully retrieved"
"paths./key/{PK}.get.responses.200.schema.properties.since.format" = "date-time"
"paths./key/{PK}.get.responses.200.schema.properties.since.type" = "string"
"paths./key/{PK}.get.responses.200.schema.properties.status.type" = "string"
"paths./key/{PK}.get.responses.200.schema.properties.sub.description" = "base64safe encoded public signing key"
"paths./key/{PK}.get.responses.200.schema.properties.sub.type" = "string"
"paths./key/{PK}.get.responses.200.schema.title" = "JWT"
"paths./key/{PK}.get.responses.200.schema.type" = "object"
"paths./key/{PK}.get.responses.404.description" = "Unknown key `unknown-key`"
"paths./key/{PK}.get.responses.404.schema.$ref" = "#/definitions/Error"
"paths./key/{PK}.get.responses.410.description" = "Key is revoked (gone). `revoked-key`"
"paths./key/{PK}.get.responses.410.schema.$ref" = "#/definitions/Error"
"paths./key/{PK}.get.responses.default.$ref" = "#/responses/ErrorResponse"
"paths./key/{PK}.get.tags.length" = 2
"paths./key/{PK}.get.tags[0]" = "key"
"paths./key/{PK}.get.tags[1]" = "get"
"paths./key/{PK}.head.description" = "HEAD info on Authentiq ID\n"
"paths./key/{PK}.head.parameters.length" = 1
"paths./key/{PK}.head.parameters[0].$ref" = "#/parameters/PK"
"paths./key/{PK}.head.responses.200.description" = "Key exists"
"paths./key/{PK}.head.responses.404.description" = "Unknown key `unknown-key`"
"paths./key/{PK}.head.responses.404.schema.$ref" = "#/definitions/Error"
"paths./key/{PK}.head.responses.410.description" = "Key is revoked `revoked-key`"
"paths./key/{PK}.head.responses.410.schema.$ref" = "#/definitions/Error"
"paths./key/{PK}.head.responses.default.$ref" = "#/responses/ErrorResponse"
"paths./key/{PK}.head.tags.length" = 2
"paths./key/{PK}.head.tags[0]" = "key"
"paths./key/{PK}.head.tags[1]" = "head"
"paths./key/{PK}.post.consumes.length" = 1
"paths./key/{PK}.post.consumes[0]" = "application/jwt"
"paths./key/{PK}.post.description" = "update properties of an Authentiq ID.\n(not operational in v4; use PUT for now)\n\nv5: POST issuer-signed email & phone scopes in\na self-signed JWT\n\nSee: https://github.com/skion/authentiq/wiki/JWT-Examples\n"
"paths./key/{PK}.post.operationId" = "key_update"
"paths./key/{PK}.post.parameters.length" = 2
"paths./key/{PK}.post.parameters[0].$ref" = "#/parameters/PK"
"paths./key/{PK}.post.parameters[1].$ref" = "#/parameters/AuthentiqID"
"paths./key/{PK}.post.produces.length" = 1
"paths./key/{PK}.post.produces[0]" = "application/json"
"paths./key/{PK}.post.responses.200.description" = "Successfully updated"
"paths./key/{PK}.post.responses.200.schema.properties.status.description" = "confirmed"
"paths./key/{PK}.post.responses.200.schema.properties.status.type" = "string"
"paths./key/{PK}.post.responses.200.schema.type" = "object"
"paths./key/{PK}.post.responses.404.description" = "Unknown key `unknown-key`"
"paths./key/{PK}.post.responses.404.schema.$ref" = "#/definitions/Error"
"paths./key/{PK}.post.responses.default.$ref" = "#/responses/ErrorResponse"
"paths./key/{PK}.post.tags.length" = 2
"paths./key/{PK}.post.tags[0]" = "key"
"paths./key/{PK}.post.tags[1]" = "post"
"paths./key/{PK}.put.consumes.length" = 1
"paths./key/{PK}.put.consumes[0]" = "application/jwt"
"paths./key/{PK}.put.description" = "Update Authentiq ID by replacing the object.\n\nv4: `JWT(sub,email,phone)` to bind email/phone hash; \n\nv5: POST issuer-signed email & phone scopes\nand PUT to update registration `JWT(sub, pk, devtoken, ...)`\n\nSee: https://github.com/skion/authentiq/wiki/JWT-Examples\n"
"paths./key/{PK}.put.operationId" = "key_bind"
"paths./key/{PK}.put.parameters.length" = 2
"paths./key/{PK}.put.parameters[0].$ref" = "#/parameters/PK"
"paths./key/{PK}.put.parameters[1].$ref" = "#/parameters/AuthentiqID"
"paths./key/{PK}.put.produces.length" = 1
"paths./key/{PK}.put.produces[0]" = "application/json"
"paths./key/{PK}.put.responses.200.description" = "Successfully updated"
"paths./key/{PK}.put.responses.200.schema.properties.status.description" = "confirmed"
"paths./key/{PK}.put.responses.200.schema.properties.status.type" = "string"
"paths./key/{PK}.put.responses.200.schema.type" = "object"
"paths./key/{PK}.put.responses.404.description" = "Unknown key `unknown-key`"
"paths./key/{PK}.put.responses.404.schema.$ref" = "#/definitions/Error"
"paths./key/{PK}.put.responses.409.description" = "Already bound to another key `duplicate-hash`"
"paths./key/{PK}.put.responses.409.schema.$ref" = "#/definitions/Error"
"paths./key/{PK}.put.responses.default.$ref" = "#/responses/ErrorResponse"
"paths./key/{PK}.put.tags.length" = 2
"paths./key/{PK}.put.tags[0]" = "key"
"paths./key/{PK}.put.tags[1]" = "put"
"paths./login.post.consumes.length" = 1
"paths./login.post.consumes[0]" = "application/jwt"
"paths./login.post.description" = "push sign-in request\nSee: https://github.com/skion/authentiq/wiki/JWT-Examples\n"
"paths./login.post.operationId" = "push_login_request"
"paths./login.post.parameters.length" = 2
"paths./login.post.parameters[0].$ref" = "#/parameters/PushToken"
"paths./login.post.parameters[1].description" = "URI App will connect to"
"paths./login.post.parameters[1].in" = "query"
"paths./login.post.parameters[1].name" = "callback"
"paths./login.post.parameters[1].required" = true
"paths./login.post.parameters[1].type" = "string"
"paths./login.post.produces.length" = 1
"paths./login.post.produces[0]" = "application/json"
"paths./login.post.responses.200.description" = "Successful response"
"paths./login.post.responses.200.schema.properties.status.description" = "sent"
"paths./login.post.responses.200.schema.properties.status.type" = "string"
"paths./login.post.responses.200.schema.type" = "object"
"paths./login.post.responses.401.description" = "Unauthorized for this callback audience `aud-error` or JWT should be self-signed `auth-error`"
"paths./login.post.responses.401.schema.$ref" = "#/definitions/Error"
"paths./login.post.responses.default.$ref" = "#/responses/ErrorResponse"
"paths./login.post.tags.length" = 2
"paths./login.post.tags[0]" = "login"
"paths./login.post.tags[1]" = "post"
"paths./scope.post.consumes.length" = 1
"paths./scope.post.consumes[0]" = "application/jwt"
"paths./scope.post.description" = "scope verification request\nSee: https://github.com/skion/authentiq/wiki/JWT-Examples\n"
"paths./scope.post.operationId" = "sign_request"
"paths./scope.post.parameters.length" = 2
"paths./scope.post.parameters[0].$ref" = "#/parameters/Scope"
"paths./scope.post.parameters[1].description" = "test only mode, using test issuer"
"paths./scope.post.parameters[1].in" = "query"
"paths./scope.post.parameters[1].name" = "test"
"paths./scope.post.parameters[1].required" = false
"paths./scope.post.parameters[1].type" = "integer"
"paths./scope.post.produces.length" = 1
"paths./scope.post.produces[0]" = "application/json"
"paths./scope.post.responses.201.description" = "Successful response"
"paths./scope.post.responses.201.schema.properties.job.description" = "20-character ID"
"paths./scope.post.responses.201.schema.properties.job.type" = "string"
"paths./scope.post.responses.201.schema.properties.status.description" = "waiting"
"paths./scope.post.responses.201.schema.properties.status.type" = "string"
"paths./scope.post.responses.201.schema.type" = "object"
"paths./scope.post.responses.429.description" = "Too Many Requests on same address / number `rate-limit`"
"paths./scope.post.responses.429.schema.$ref" = "#/definitions/Error"
"paths./scope.post.responses.default.$ref" = "#/responses/ErrorResponse"
"paths./scope.post.tags.length" = 2
"paths./scope.post.tags[0]" = "scope"
"paths./scope.post.tags[1]" = "post"
"paths./scope/{job}.delete.description" = "delete a verification job"
"paths./scope/{job}.delete.operationId" = "sign_delete"
"paths./scope/{job}.delete.parameters.length" = 1
"paths./scope/{job}.delete.parameters[0].$ref" = "#/parameters/JobID"
"paths./scope/{job}.delete.produces.length" = 1
"paths./scope/{job}.delete.produces[0]" = "application/json"
"paths./scope/{job}.delete.responses.200.description" = "Successfully deleted"
"paths./scope/{job}.delete.responses.200.schema.properties.status.description" = "done"
"paths./scope/{job}.delete.responses.200.schema.properties.status.type" = "string"
"paths./scope/{job}.delete.responses.200.schema.type" = "object"
"paths./scope/{job}.delete.responses.404.description" = "Job not found `unknown-job`"
"paths./scope/{job}.delete.responses.404.schema.$ref" = "#/definitions/Error"
"paths./scope/{job}.delete.responses.default.$ref" = "#/responses/ErrorResponse"
"paths./scope/{job}.delete.tags.length" = 2
"paths./scope/{job}.delete.tags[0]" = "scope"
"paths./scope/{job}.delete.tags[1]" = "delete"
"paths./scope/{job}.get.description" = "get the status / current content of a verification job"
"paths./scope/{job}.get.operationId" = "sign_retrieve"
"paths./scope/{job}.get.parameters.length" = 1
"paths./scope/{job}.get.parameters[0].$ref" = "#/parameters/JobID"
"paths./scope/{job}.get.produces.length" = 2
"paths./scope/{job}.get.produces[0]" = "application/json"
"paths./scope/{job}.get.produces[1]" = "application/jwt"
"paths./scope/{job}.get.responses.200.description" = "Successful response (JWT)"
"paths./scope/{job}.get.responses.200.schema.properties.exp.type" = "integer"
"paths./scope/{job}.get.responses.200.schema.properties.field.type" = "string"
"paths./scope/{job}.get.responses.200.schema.properties.sub.description" = "base64safe encoded public signing key"
"paths./scope/{job}.get.responses.200.schema.properties.sub.type" = "string"
"paths./scope/{job}.get.responses.200.schema.title" = "JWT"
"paths./scope/{job}.get.responses.200.schema.type" = "object"
"paths./scope/{job}.get.responses.204.description" = "Confirmed, waiting for signing"
"paths./scope/{job}.get.responses.404.description" = "Job not found `unknown-job`"
"paths./scope/{job}.get.responses.404.schema.$ref" = "#/definitions/Error"
"paths./scope/{job}.get.responses.default.$ref" = "#/responses/ErrorResponse"
"paths./scope/{job}.get.tags.length" = 2
"paths./scope/{job}.get.tags[0]" = "scope"
"paths./scope/{job}.get.tags[1]" = "get"
"paths./scope/{job}.head.description" = "HEAD to get the status of a verification job"
"paths./scope/{job}.head.operationId" = "sign_retrieve_head"
"paths./scope/{job}.head.parameters.length" = 1
"paths./scope/{job}.head.parameters[0].$ref" = "#/parameters/JobID"
"paths./scope/{job}.head.produces.length" = 1
"paths./scope/{job}.head.produces[0]" = "application/json"
"paths./scope/{job}.head.responses.200.description" = "Confirmed and signed"
"paths./scope/{job}.head.responses.204.description" = "Confirmed, waiting for signing"
"paths./scope/{job}.head.responses.404.description" = "Job not found `unknown-job`"
"paths./scope/{job}.head.responses.404.schema.$ref" = "#/definitions/Error"
"paths./scope/{job}.head.responses.default.$ref" = "#/responses/ErrorResponse"
"paths./scope/{job}.head.tags.length" = 2
"paths./scope/{job}.head.tags[0]" = "scope"
"paths./scope/{job}.head.tags[1]" = "head"
"paths./scope/{job}.post.consumes.length" = 1
"paths./scope/{job}.post.consumes[0]" = "application/json"
"paths./scope/{job}.post.description" = "this is a scope confirmation"
"paths./scope/{job}.post.operationId" = "sign_confirm"
"paths./scope/{job}.post.parameters.length" = 1
"paths./scope/{job}.post.parameters[0].$ref" = "#/parameters/JobID"
"paths./scope/{job}.post.produces.length" = 1
"paths./scope/{job}.post.produces[0]" = "application/json"
"paths./scope/{job}.post.responses.202.description" = "Successfully confirmed"
"paths./scope/{job}.post.responses.202.schema.properties.status.description" = "confirmed"
"paths./scope/{job}.post.responses.202.schema.properties.status.type" = "string"
"paths./scope/{job}.post.responses.202.schema.type" = "object"
"paths./scope/{job}.post.responses.401.description" = "Confirmation error `auth-error`"
"paths./scope/{job}.post.responses.401.schema.$ref" = "#/definitions/Error"
"paths./scope/{job}.post.responses.404.description" = "Job not found `unknown-job`"
"paths./scope/{job}.post.responses.404.schema.$ref" = "#/definitions/Error"
"paths./scope/{job}.post.responses.405.description" = "JWT POSTed to scope `not-supported`"
"paths./scope/{job}.post.responses.405.schema.$ref" = "#/definitions/Error"
"paths./scope/{job}.post.responses.default.$ref" = "#/responses/ErrorResponse"
"paths./scope/{job}.post.tags.length" = 2
"paths./scope/{job}.post.tags[0]" = "scope"
"paths./scope/{job}.post.tags[1]" = "post"
"paths./scope/{job}.put.consumes.length" = 1
"paths./scope/{job}.put.consumes[0]" = "application/jwt"
"paths./scope/{job}.put.description" = "authority updates a JWT with its signature\nSee: https://github.com/skion/authentiq/wiki/JWT-Examples\n"
"paths./scope/{job}.put.operationId" = "sign_update"
"paths./scope/{job}.put.parameters.length" = 1
"paths./scope/{job}.put.parameters[0].$ref" = "#/parameters/JobID"
"paths./scope/{job}.put.produces.length" = 1
"paths./scope/{job}.put.produces[0]" = "application/jwt"
"paths./scope/{job}.put.responses.200.description" = "Successfully updated"
"paths./scope/{job}.put.responses.200.schema.properties.jwt.description" = "result is JWT or JSON??"
"paths./scope/{job}.put.responses.200.schema.properties.jwt.type" = "string"
"paths./scope/{job}.put.responses.200.schema.properties.status.description" = "ready"
"paths./scope/{job}.put.responses.200.schema.properties.status.type" = "string"
"paths./scope/{job}.put.responses.200.schema.type" = "object"
"paths./scope/{job}.put.responses.404.description" = "Job not found `unknown-job`"
"paths./scope/{job}.put.responses.404.schema.$ref" = "#/definitions/Error"
"paths./scope/{job}.put.responses.409.description" = "Job not confirmed yet `confirm-first`"
"paths./scope/{job}.put.responses.409.schema.$ref" = "#/definitions/Error"
"paths./scope/{job}.put.responses.default.$ref" = "#/responses/ErrorResponse"
"paths./scope/{job}.put.tags.length" = 2
"paths./scope/{job}.put.tags[0]" = "scope"
"paths./scope/{job}.put.tags[1]" = "put"
"responses.ErrorResponse.description" = "Error response"
"responses.ErrorResponse.schema.$ref" = "#/definitions/Error"
"schemes.length" = 1
"schemes[0]" = "https"
swagger = "2.0"

syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package firebrowsebetaapi;

message GetAnalysesCopyNumberGenesAllRequest {
    // Narrow search to one or more TCGA disease cohorts from the scrollable list.
    repeated string cohort = 1;
    // Format of result.
    enum GetAnalysesCopyNumberGenesAllRequest_Format {
        GETANALYSESCOPYNUMBERGENESALLREQUEST_FORMAT_JSON = 0;
        GETANALYSESCOPYNUMBERGENESALLREQUEST_FORMAT_TSV = 1;
        GETANALYSESCOPYNUMBERGENESALLREQUEST_FORMAT_CSV = 2;
    }
    GetAnalysesCopyNumberGenesAllRequest_Format format = 2;
    // Comma separated list of gene name(s).
    repeated string gene = 3;
    // Which page (slice) of entire results set should be returned.
    repeated int32 page = 4;
    // Number of records per page of results.  Max is 2000.
    repeated int32 page_size = 5;
    // Which column in the results should be used for sorting paginated results?
    enum GetAnalysesCopyNumberGenesAllRequest_Sort_by {
        GETANALYSESCOPYNUMBERGENESALLREQUEST_SORT_BY_TCGA_PARTICIPANT_BARCODE = 0;
        GETANALYSESCOPYNUMBERGENESALLREQUEST_SORT_BY_COHORT = 1;
        GETANALYSESCOPYNUMBERGENESALLREQUEST_SORT_BY_GENE = 2;
    }
    GetAnalysesCopyNumberGenesAllRequest_Sort_by sort_by = 6;
    // Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO).
    repeated string tcga_participant_barcode = 7;
}

message GetAnalysesCopyNumberGenesAmplifiedRequest {
    // Narrow search to one or more TCGA disease cohorts from the scrollable list.
    repeated string cohort = 1;
    // Format of result.
    enum GetAnalysesCopyNumberGenesAmplifiedRequest_Format {
        GETANALYSESCOPYNUMBERGENESAMPLIFIEDREQUEST_FORMAT_JSON = 0;
        GETANALYSESCOPYNUMBERGENESAMPLIFIEDREQUEST_FORMAT_TSV = 1;
        GETANALYSESCOPYNUMBERGENESAMPLIFIEDREQUEST_FORMAT_CSV = 2;
    }
    GetAnalysesCopyNumberGenesAmplifiedRequest_Format format = 2;
    // Comma separated list of gene name(s).
    repeated string gene = 3;
    // Which page (slice) of entire results set should be returned.
    repeated int32 page = 4;
    // Number of records per page of results.  Max is 2000.
    repeated int32 page_size = 5;
    // Only return results with Q-value <= given threshold.
    int32 q = 6;
    // Which column in the results should be used for sorting paginated results?
    enum GetAnalysesCopyNumberGenesAmplifiedRequest_Sort_by {
        GETANALYSESCOPYNUMBERGENESAMPLIFIEDREQUEST_SORT_BY_Q = 0;
        GETANALYSESCOPYNUMBERGENESAMPLIFIEDREQUEST_SORT_BY_COHORT = 1;
        GETANALYSESCOPYNUMBERGENESAMPLIFIEDREQUEST_SORT_BY_GENE = 2;
    }
    GetAnalysesCopyNumberGenesAmplifiedRequest_Sort_by sort_by = 7;
}

message GetAnalysesCopyNumberGenesDeletedRequest {
    // Narrow search to one or more TCGA disease cohorts from the scrollable list.
    repeated string cohort = 1;
    // Format of result.
    enum GetAnalysesCopyNumberGenesDeletedRequest_Format {
        GETANALYSESCOPYNUMBERGENESDELETEDREQUEST_FORMAT_JSON = 0;
        GETANALYSESCOPYNUMBERGENESDELETEDREQUEST_FORMAT_TSV = 1;
        GETANALYSESCOPYNUMBERGENESDELETEDREQUEST_FORMAT_CSV = 2;
    }
    GetAnalysesCopyNumberGenesDeletedRequest_Format format = 2;
    // Comma separated list of gene name(s).
    repeated string gene = 3;
    // Which page (slice) of entire results set should be returned.
    repeated int32 page = 4;
    // Number of records per page of results.  Max is 2000.
    repeated int32 page_size = 5;
    // Only return results with Q-value <= given threshold.
    int32 q = 6;
    // Which column in the results should be used for sorting paginated results?
    enum GetAnalysesCopyNumberGenesDeletedRequest_Sort_by {
        GETANALYSESCOPYNUMBERGENESDELETEDREQUEST_SORT_BY_Q = 0;
        GETANALYSESCOPYNUMBERGENESDELETEDREQUEST_SORT_BY_COHORT = 1;
        GETANALYSESCOPYNUMBERGENESDELETEDREQUEST_SORT_BY_GENE = 2;
    }
    GetAnalysesCopyNumberGenesDeletedRequest_Sort_by sort_by = 7;
}

message GetAnalysesCopyNumberGenesFocalRequest {
    // Narrow search to one or more TCGA disease cohorts from the scrollable list.
    repeated string cohort = 1;
    // Format of result.
    enum GetAnalysesCopyNumberGenesFocalRequest_Format {
        GETANALYSESCOPYNUMBERGENESFOCALREQUEST_FORMAT_JSON = 0;
        GETANALYSESCOPYNUMBERGENESFOCALREQUEST_FORMAT_TSV = 1;
        GETANALYSESCOPYNUMBERGENESFOCALREQUEST_FORMAT_CSV = 2;
    }
    GetAnalysesCopyNumberGenesFocalRequest_Format format = 2;
    // Comma separated list of gene name(s).
    repeated string gene = 3;
    // Which page (slice) of entire results set should be returned.
    repeated int32 page = 4;
    // Number of records per page of results.  Max is 2000.
    repeated int32 page_size = 5;
    // Which column in the results should be used for sorting paginated results?
    enum GetAnalysesCopyNumberGenesFocalRequest_Sort_by {
        GETANALYSESCOPYNUMBERGENESFOCALREQUEST_SORT_BY_TCGA_PARTICIPANT_BARCODE = 0;
        GETANALYSESCOPYNUMBERGENESFOCALREQUEST_SORT_BY_COHORT = 1;
        GETANALYSESCOPYNUMBERGENESFOCALREQUEST_SORT_BY_GENE = 2;
    }
    GetAnalysesCopyNumberGenesFocalRequest_Sort_by sort_by = 6;
    // Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO).
    repeated string tcga_participant_barcode = 7;
}

message GetAnalysesCopyNumberGenesThresholdedRequest {
    // Narrow search to one or more TCGA disease cohorts from the scrollable list.
    repeated string cohort = 1;
    // Format of result.
    enum GetAnalysesCopyNumberGenesThresholdedRequest_Format {
        GETANALYSESCOPYNUMBERGENESTHRESHOLDEDREQUEST_FORMAT_JSON = 0;
        GETANALYSESCOPYNUMBERGENESTHRESHOLDEDREQUEST_FORMAT_TSV = 1;
        GETANALYSESCOPYNUMBERGENESTHRESHOLDEDREQUEST_FORMAT_CSV = 2;
    }
    GetAnalysesCopyNumberGenesThresholdedRequest_Format format = 2;
    // Comma separated list of gene name(s).
    repeated string gene = 3;
    // Which page (slice) of entire results set should be returned.
    repeated int32 page = 4;
    // Number of records per page of results.  Max is 2000.
    repeated int32 page_size = 5;
    // Which column in the results should be used for sorting paginated results?
    enum GetAnalysesCopyNumberGenesThresholdedRequest_Sort_by {
        GETANALYSESCOPYNUMBERGENESTHRESHOLDEDREQUEST_SORT_BY_TCGA_PARTICIPANT_BARCODE = 0;
        GETANALYSESCOPYNUMBERGENESTHRESHOLDEDREQUEST_SORT_BY_COHORT = 1;
        GETANALYSESCOPYNUMBERGENESTHRESHOLDEDREQUEST_SORT_BY_GENE = 2;
    }
    GetAnalysesCopyNumberGenesThresholdedRequest_Sort_by sort_by = 6;
    // Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO).
    repeated string tcga_participant_barcode = 7;
}

message GetAnalysesFeatureTableRequest {
    // Narrow search to one or more TCGA disease cohorts from the scrollable list.
    repeated string cohort = 1;
    // Comma separated list of which data columns/fields to return.
    repeated string column = 2;
    // Select one or more date stamps.
    repeated string date = 3;
    // Format of result.
    enum GetAnalysesFeatureTableRequest_Format {
        GETANALYSESFEATURETABLEREQUEST_FORMAT_TSV = 0;
        GETANALYSESFEATURETABLEREQUEST_FORMAT_CSV = 1;
    }
    GetAnalysesFeatureTableRequest_Format format = 4;
    // Which page (slice) of entire results set should be returned.
    repeated int32 page = 5;
    // Number of records per page of results.  Max is 2000.
    repeated int32 page_size = 6;
}

message GetAnalysesMutationMAFRequest {
    // Narrow search to one or more TCGA disease cohorts from the scrollable list.
    repeated string cohort = 1;
    // Comma separated list of which data columns/fields to return.
    repeated string column = 2;
    // Format of result.
    enum GetAnalysesMutationMAFRequest_Format {
        GETANALYSESMUTATIONMAFREQUEST_FORMAT_JSON = 0;
        GETANALYSESMUTATIONMAFREQUEST_FORMAT_TSV = 1;
        GETANALYSESMUTATIONMAFREQUEST_FORMAT_CSV = 2;
    }
    GetAnalysesMutationMAFRequest_Format format = 3;
    // Comma separated list of gene name(s).
    repeated string gene = 4;
    // Which page (slice) of entire results set should be returned.
    repeated int32 page = 5;
    // Number of records per page of results.  Max is 2000.
    repeated int32 page_size = 6;
    // Which column in the results should be used for sorting paginated results?
    enum GetAnalysesMutationMAFRequest_Sort_by {
        GETANALYSESMUTATIONMAFREQUEST_SORT_BY_TCGA_PARTICIPANT_BARCODE = 0;
        GETANALYSESMUTATIONMAFREQUEST_SORT_BY_COHORT = 1;
        GETANALYSESMUTATIONMAFREQUEST_SORT_BY_TOOL = 2;
        GETANALYSESMUTATIONMAFREQUEST_SORT_BY_GENE = 3;
    }
    GetAnalysesMutationMAFRequest_Sort_by sort_by = 7;
    // Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO).
    repeated string tcga_participant_barcode = 8;
    // Narrow search to include only data/results produced by the selected Firehose tool.
    repeated string tool = 9;
}

message GetAnalysesMutationSMGRequest {
    // Narrow search to one or more TCGA disease cohorts from the scrollable list.
    repeated string cohort = 1;
    // Format of result.
    enum GetAnalysesMutationSMGRequest_Format {
        GETANALYSESMUTATIONSMGREQUEST_FORMAT_JSON = 0;
        GETANALYSESMUTATIONSMGREQUEST_FORMAT_TSV = 1;
        GETANALYSESMUTATIONSMGREQUEST_FORMAT_CSV = 2;
    }
    GetAnalysesMutationSMGRequest_Format format = 2;
    // Comma separated list of gene name(s).
    repeated string gene = 3;
    // Which page (slice) of entire results set should be returned.
    repeated int32 page = 4;
    // Number of records per page of results.  Max is 2000.
    repeated int32 page_size = 5;
    // Only return results with Q-value <= given threshold.
    int32 q = 6;
    // Number of significant genes to return.
    int32 rank = 7;
    // Which column in the results should be used for sorting paginated results?
    enum GetAnalysesMutationSMGRequest_Sort_by {
        GETANALYSESMUTATIONSMGREQUEST_SORT_BY_Q = 0;
        GETANALYSESMUTATIONSMGREQUEST_SORT_BY_COHORT = 1;
        GETANALYSESMUTATIONSMGREQUEST_SORT_BY_TOOL = 2;
        GETANALYSESMUTATIONSMGREQUEST_SORT_BY_GENE = 3;
        GETANALYSESMUTATIONSMGREQUEST_SORT_BY_RANK = 4;
    }
    GetAnalysesMutationSMGRequest_Sort_by sort_by = 8;
    // Narrow search to include only data/results produced by the selected Firehose tool.
    repeated string tool = 9;
}

message GetAnalysesReportsRequest {
    // Narrow search to one or more TCGA disease cohorts from the scrollable list.
    repeated string cohort = 1;
    // Select one or more date stamps.
    repeated string date = 2;
    // Format of result.
    enum GetAnalysesReportsRequest_Format {
        GETANALYSESREPORTSREQUEST_FORMAT_JSON = 0;
        GETANALYSESREPORTSREQUEST_FORMAT_TSV = 1;
        GETANALYSESREPORTSREQUEST_FORMAT_CSV = 2;
    }
    GetAnalysesReportsRequest_Format format = 3;
    // Narrow search to one or more report names.
    repeated string name = 4;
    // Which page (slice) of entire results set should be returned.
    repeated int32 page = 5;
    // Number of records per page of results.  Max is 2000.
    repeated int32 page_size = 6;
    // Which column in the results should be used for sorting paginated results?
    enum GetAnalysesReportsRequest_Sort_by {
        GETANALYSESREPORTSREQUEST_SORT_BY_DATE = 0;
        GETANALYSESREPORTSREQUEST_SORT_BY_COHORT = 1;
        GETANALYSESREPORTSREQUEST_SORT_BY_TYPE = 2;
        GETANALYSESREPORTSREQUEST_SORT_BY_NAME = 3;
    }
    GetAnalysesReportsRequest_Sort_by sort_by = 7;
    // Narrow search to one or more report types.
    repeated string type = 8;
}

message GetAnalysesMRNASeqQuartilesRequest {
    // Comma separated list of TCGA participants, identified by barcodes such as TCGA-GF-A4EO, denoting samples to exclude from computation.
    repeated string Exclude = 1;
    // Narrow search to one or more TCGA disease cohorts from the scrollable list.
    repeated string cohort = 2;
    // Format of result.
    enum GetAnalysesMRNASeqQuartilesRequest_Format {
        GETANALYSESMRNASEQQUARTILESREQUEST_FORMAT_JSON = 0;
        GETANALYSESMRNASEQQUARTILESREQUEST_FORMAT_TSV = 1;
        GETANALYSESMRNASEQQUARTILESREQUEST_FORMAT_CSV = 2;
    }
    GetAnalysesMRNASeqQuartilesRequest_Format format = 3;
    // Enter a single gene name.
    string gene = 4;
    // Narrow search to one or more sample characterization protocols from the scrollable list.
    repeated string protocol = 5;
    // For which type of sample(s) should quartiles be computed?
    repeated string sample_type = 6;
}

message GetArchivesStandardDataRequest {
    // Narrow search to one or more TCGA centers from the scrollable list.
    repeated string center = 1;
    // Narrow search to one or more TCGA disease cohorts from the scrollable list.
    repeated string cohort = 2;
    // Narrow search to one or more TCGA data types from the scrollable list.
    repeated string data_type = 3;
    // Select one or more date stamps.
    repeated string date = 4;
    // Format of result.
    enum GetArchivesStandardDataRequest_Format {
        GETARCHIVESSTANDARDDATAREQUEST_FORMAT_JSON = 0;
        GETARCHIVESSTANDARDDATAREQUEST_FORMAT_TSV = 1;
        GETARCHIVESSTANDARDDATAREQUEST_FORMAT_CSV = 2;
    }
    GetArchivesStandardDataRequest_Format format = 5;
    // Narrow search to one or more TCGA data levels.
    repeated int32 level = 6;
    // Which page (slice) of entire results set should be returned.
    repeated int32 page = 7;
    // Number of records per page of results.  Max is 2000.
    repeated int32 page_size = 8;
    // Narrow search to one or more TCGA data generation platforms from the scrollable list.
    repeated string platform = 9;
    // Narrow search to one or more sample characterization protocols from the scrollable list.
    repeated string protocol = 10;
    // Which column in the results should be used for sorting paginated results?
    enum GetArchivesStandardDataRequest_Sort_by {
        GETARCHIVESSTANDARDDATAREQUEST_SORT_BY_COHORT = 0;
        GETARCHIVESSTANDARDDATAREQUEST_SORT_BY_PROTOCOL = 1;
        GETARCHIVESSTANDARDDATAREQUEST_SORT_BY_CENTER = 2;
        GETARCHIVESSTANDARDDATAREQUEST_SORT_BY_DATA_TYPE = 3;
        GETARCHIVESSTANDARDDATAREQUEST_SORT_BY_LEVEL = 4;
        GETARCHIVESSTANDARDDATAREQUEST_SORT_BY_TOOL = 5;
        GETARCHIVESSTANDARDDATAREQUEST_SORT_BY_PLATFORM = 6;
        GETARCHIVESSTANDARDDATAREQUEST_SORT_BY_DATE = 7;
    }
    GetArchivesStandardDataRequest_Sort_by sort_by = 11;
    // Narrow search to include only data/results produced by the selected Firehose tool.
    repeated string tool = 12;
}

message GetMetadataCentersRequest {
    // Narrow search to one or more TCGA centers from the scrollable list.
    repeated string center = 1;
    // Format of result.
    enum GetMetadataCentersRequest_Format {
        GETMETADATACENTERSREQUEST_FORMAT_JSON = 0;
        GETMETADATACENTERSREQUEST_FORMAT_TSV = 1;
        GETMETADATACENTERSREQUEST_FORMAT_CSV = 2;
    }
    GetMetadataCentersRequest_Format format = 2;
}

message GetMetadataClinicalNamesRequest {
    // Format of result.
    enum GetMetadataClinicalNamesRequest_Format {
        GETMETADATACLINICALNAMESREQUEST_FORMAT_JSON = 0;
        GETMETADATACLINICALNAMESREQUEST_FORMAT_TSV = 1;
        GETMETADATACLINICALNAMESREQUEST_FORMAT_CSV = 2;
    }
    GetMetadataClinicalNamesRequest_Format format = 1;
}

message GetMetadataClinicalNames_FHRequest {
    // Format of result.
    enum GetMetadataClinicalNames_FHRequest_Format {
        GETMETADATACLINICALNAMES_FHREQUEST_FORMAT_JSON = 0;
        GETMETADATACLINICALNAMES_FHREQUEST_FORMAT_TSV = 1;
        GETMETADATACLINICALNAMES_FHREQUEST_FORMAT_CSV = 2;
    }
    GetMetadataClinicalNames_FHRequest_Format format = 1;
}

message GetMetadataCohortsRequest {
    // Narrow search to one or more TCGA disease cohorts from the scrollable list.
    repeated string cohort = 1;
    // Format of result.
    enum GetMetadataCohortsRequest_Format {
        GETMETADATACOHORTSREQUEST_FORMAT_JSON = 0;
        GETMETADATACOHORTSREQUEST_FORMAT_TSV = 1;
        GETMETADATACOHORTSREQUEST_FORMAT_CSV = 2;
    }
    GetMetadataCohortsRequest_Format format = 2;
}

message GetMetadataCountsRequest {
    // Narrow search to one or more TCGA disease cohorts from the scrollable list.
    repeated string cohort = 1;
    // Narrow search to one or more TCGA data types from the scrollable list.
    repeated string data_type = 2;
    // Select one or more date stamps.
    repeated string date = 3;
    // Format of result.
    enum GetMetadataCountsRequest_Format {
        GETMETADATACOUNTSREQUEST_FORMAT_JSON = 0;
        GETMETADATACOUNTSREQUEST_FORMAT_TSV = 1;
        GETMETADATACOUNTSREQUEST_FORMAT_CSV = 2;
    }
    GetMetadataCountsRequest_Format format = 4;
    // Narrow search to one or more TCGA sample types from the scrollable list.
    repeated string sample_type = 5;
    // Which column in the results should be used for sorting paginated results?
    enum GetMetadataCountsRequest_Sort_by {
        GETMETADATACOUNTSREQUEST_SORT_BY_COHORT = 0;
    }
    GetMetadataCountsRequest_Sort_by sort_by = 6;
    // Output an entry providing the totals for each data type.
    bool totals = 7;
}

message GetMetadataDatesRequest {
    // Format of result.
    enum GetMetadataDatesRequest_Format {
        GETMETADATADATESREQUEST_FORMAT_JSON = 0;
        GETMETADATADATESREQUEST_FORMAT_TSV = 1;
        GETMETADATADATESREQUEST_FORMAT_CSV = 2;
    }
    GetMetadataDatesRequest_Format format = 1;
}

message GetMetadataHeartBeatRequest {
    // Format of result.
    enum GetMetadataHeartBeatRequest_Format {
        GETMETADATAHEARTBEATREQUEST_FORMAT_JSON = 0;
        GETMETADATAHEARTBEATREQUEST_FORMAT_TSV = 1;
        GETMETADATAHEARTBEATREQUEST_FORMAT_CSV = 2;
    }
    GetMetadataHeartBeatRequest_Format format = 1;
}

message GetMetadataMAFColNamesRequest {
    // Format of result.
    enum GetMetadataMAFColNamesRequest_Format {
        GETMETADATAMAFCOLNAMESREQUEST_FORMAT_JSON = 0;
        GETMETADATAMAFCOLNAMESREQUEST_FORMAT_TSV = 1;
        GETMETADATAMAFCOLNAMESREQUEST_FORMAT_CSV = 2;
    }
    GetMetadataMAFColNamesRequest_Format format = 1;
}

message GetMetadataPatientsRequest {
    // Narrow search to one or more TCGA disease cohorts from the scrollable list.
    repeated string cohort = 1;
    // Format of result.
    enum GetMetadataPatientsRequest_Format {
        GETMETADATAPATIENTSREQUEST_FORMAT_JSON = 0;
        GETMETADATAPATIENTSREQUEST_FORMAT_TSV = 1;
        GETMETADATAPATIENTSREQUEST_FORMAT_CSV = 2;
    }
    GetMetadataPatientsRequest_Format format = 2;
    // Which page (slice) of entire results set should be returned.
    repeated int32 page = 3;
    // Number of records per page of results.  Max is 2000.
    repeated int32 page_size = 4;
    // Which column in the results should be used for sorting paginated results?
    enum GetMetadataPatientsRequest_Sort_by {
        GETMETADATAPATIENTSREQUEST_SORT_BY_COHORT = 0;
    }
    GetMetadataPatientsRequest_Sort_by sort_by = 5;
}

message GetMetadataPlatformsRequest {
    // Format of result.
    enum GetMetadataPlatformsRequest_Format {
        GETMETADATAPLATFORMSREQUEST_FORMAT_JSON = 0;
        GETMETADATAPLATFORMSREQUEST_FORMAT_TSV = 1;
        GETMETADATAPLATFORMSREQUEST_FORMAT_CSV = 2;
    }
    GetMetadataPlatformsRequest_Format format = 1;
    // Narrow search to one or more TCGA data generation platforms from the scrollable list.
    repeated string platform = 2;
}

message GetMetadataSampleTypeBarcodeTCGA_BarcodeRequest {
    // Enter a single TCGA barcode, of any form: e.g. TCGA-GF-A4EO-06 or TCGA-EL-A3D5-01A-22D-A202-08
    string TCGA_Barcode = 1;
    // Format of result.
    enum GetMetadataSampleTypeBarcodeTCGA_BarcodeRequest_Format {
        GETMETADATASAMPLETYPEBARCODETCGA_BARCODEREQUEST_FORMAT_JSON = 0;
        GETMETADATASAMPLETYPEBARCODETCGA_BARCODEREQUEST_FORMAT_TSV = 1;
        GETMETADATASAMPLETYPEBARCODETCGA_BARCODEREQUEST_FORMAT_CSV = 2;
    }
    GetMetadataSampleTypeBarcodeTCGA_BarcodeRequest_Format format = 2;
}

message GetMetadataSampleTypeCodeCodeRequest {
    // Narrow search to one or more TCGA sample type codes.
    repeated string code = 1;
    // Format of result.
    enum GetMetadataSampleTypeCodeCodeRequest_Format {
        GETMETADATASAMPLETYPECODECODEREQUEST_FORMAT_JSON = 0;
        GETMETADATASAMPLETYPECODECODEREQUEST_FORMAT_TSV = 1;
        GETMETADATASAMPLETYPECODECODEREQUEST_FORMAT_CSV = 2;
    }
    GetMetadataSampleTypeCodeCodeRequest_Format format = 2;
}

message GetMetadataSampleTypeShortLetterCodeShort_letter_codeRequest {
    // Format of result.
    enum GetMetadataSampleTypeShortLetterCodeShort_letter_codeRequest_Format {
        GETMETADATASAMPLETYPESHORTLETTERCODESHORT_LETTER_CODEREQUEST_FORMAT_JSON = 0;
        GETMETADATASAMPLETYPESHORTLETTERCODESHORT_LETTER_CODEREQUEST_FORMAT_TSV = 1;
        GETMETADATASAMPLETYPESHORTLETTERCODESHORT_LETTER_CODEREQUEST_FORMAT_CSV = 2;
    }
    GetMetadataSampleTypeShortLetterCodeShort_letter_codeRequest_Format format = 1;
    // TCGA sample type short letter code(s) (e.g. TP, NB, etc.).
    repeated string short_letter_code = 2;
}

message GetMetadataSampleTypesRequest {
    // Format of result.
    enum GetMetadataSampleTypesRequest_Format {
        GETMETADATASAMPLETYPESREQUEST_FORMAT_JSON = 0;
        GETMETADATASAMPLETYPESREQUEST_FORMAT_TSV = 1;
        GETMETADATASAMPLETYPESREQUEST_FORMAT_CSV = 2;
    }
    GetMetadataSampleTypesRequest_Format format = 1;
}

message GetMetadataTSSitesRequest {
    // Format of result.
    enum GetMetadataTSSitesRequest_Format {
        GETMETADATATSSITESREQUEST_FORMAT_JSON = 0;
        GETMETADATATSSITESREQUEST_FORMAT_TSV = 1;
        GETMETADATATSSITESREQUEST_FORMAT_CSV = 2;
    }
    GetMetadataTSSitesRequest_Format format = 1;
    // Narrow search to one or more TSS codes
    repeated string tss_code = 2;
}

message GetSamplesClinicalRequest {
    // Retrieve results only for specified CDEs, per the Metadata/ClinicalNames function
    repeated string cde_name = 1;
    // Narrow search to one or more TCGA disease cohorts from the scrollable list.
    repeated string cohort = 2;
    // Format of result.
    enum GetSamplesClinicalRequest_Format {
        GETSAMPLESCLINICALREQUEST_FORMAT_JSON = 0;
        GETSAMPLESCLINICALREQUEST_FORMAT_TSV = 1;
        GETSAMPLESCLINICALREQUEST_FORMAT_CSV = 2;
    }
    GetSamplesClinicalRequest_Format format = 3;
    // Which page (slice) of entire results set should be returned.
    repeated int32 page = 4;
    // Number of records per page of results.  Max is 2000.
    repeated int32 page_size = 5;
    // Which column in the results should be used for sorting paginated results?
    enum GetSamplesClinicalRequest_Sort_by {
        GETSAMPLESCLINICALREQUEST_SORT_BY_TCGA_PARTICIPANT_BARCODE = 0;
        GETSAMPLESCLINICALREQUEST_SORT_BY_COHORT = 1;
        GETSAMPLESCLINICALREQUEST_SORT_BY_CDE_NAME = 2;
    }
    GetSamplesClinicalRequest_Sort_by sort_by = 6;
    // Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO).
    repeated string tcga_participant_barcode = 7;
}

message GetSamplesClinical_FHRequest {
    // Narrow search to one or more TCGA disease cohorts from the scrollable list.
    repeated string cohort = 1;
    // Retrieve results only for the CDEs specified from the scrollable list.
    repeated string fh_cde_name = 2;
    // Format of result.
    enum GetSamplesClinical_FHRequest_Format {
        GETSAMPLESCLINICAL_FHREQUEST_FORMAT_JSON = 0;
        GETSAMPLESCLINICAL_FHREQUEST_FORMAT_TSV = 1;
        GETSAMPLESCLINICAL_FHREQUEST_FORMAT_CSV = 2;
    }
    GetSamplesClinical_FHRequest_Format format = 3;
    // Which page (slice) of entire results set should be returned.
    repeated int32 page = 4;
    // Number of records per page of results.  Max is 2000.
    repeated int32 page_size = 5;
    // Which column in the results should be used for sorting paginated results?
    enum GetSamplesClinical_FHRequest_Sort_by {
        GETSAMPLESCLINICAL_FHREQUEST_SORT_BY_TCGA_PARTICIPANT_BARCODE = 0;
        GETSAMPLESCLINICAL_FHREQUEST_SORT_BY_COHORT = 1;
        GETSAMPLESCLINICAL_FHREQUEST_SORT_BY_FH_CDE_NAME = 2;
    }
    GetSamplesClinical_FHRequest_Sort_by sort_by = 6;
    // Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO).
    repeated string tcga_participant_barcode = 7;
}

message GetSamplesMRNASeqRequest {
    // Narrow search to one or more TCGA disease cohorts from the scrollable list.
    repeated string cohort = 1;
    // Format of result.
    enum GetSamplesMRNASeqRequest_Format {
        GETSAMPLESMRNASEQREQUEST_FORMAT_JSON = 0;
        GETSAMPLESMRNASEQREQUEST_FORMAT_TSV = 1;
        GETSAMPLESMRNASEQREQUEST_FORMAT_CSV = 2;
    }
    GetSamplesMRNASeqRequest_Format format = 2;
    // Comma separated list of gene name(s).
    repeated string gene = 3;
    // Which page (slice) of entire results set should be returned.
    repeated int32 page = 4;
    // Number of records per page of results.  Max is 2000.
    repeated int32 page_size = 5;
    // Narrow search to one or more sample characterization protocols from the scrollable list.
    repeated string protocol = 6;
    // Narrow search to one or more TCGA sample types from the scrollable list.
    repeated string sample_type = 7;
    // Which column in the results should be used for sorting paginated results?
    enum GetSamplesMRNASeqRequest_Sort_by {
        GETSAMPLESMRNASEQREQUEST_SORT_BY_TCGA_PARTICIPANT_BARCODE = 0;
        GETSAMPLESMRNASEQREQUEST_SORT_BY_COHORT = 1;
        GETSAMPLESMRNASEQREQUEST_SORT_BY_GENE = 2;
        GETSAMPLESMRNASEQREQUEST_SORT_BY_PROTOCOL = 3;
        GETSAMPLESMRNASEQREQUEST_SORT_BY_SAMPLE_TYPE = 4;
    }
    GetSamplesMRNASeqRequest_Sort_by sort_by = 8;
    // Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO).
    repeated string tcga_participant_barcode = 9;
}

message GetSamplesMiRSeqRequest {
    // Narrow search to one or more TCGA disease cohorts from the scrollable list.
    repeated string cohort = 1;
    // Format of result.
    enum GetSamplesMiRSeqRequest_Format {
        GETSAMPLESMIRSEQREQUEST_FORMAT_JSON = 0;
        GETSAMPLESMIRSEQREQUEST_FORMAT_TSV = 1;
        GETSAMPLESMIRSEQREQUEST_FORMAT_CSV = 2;
    }
    GetSamplesMiRSeqRequest_Format format = 2;
    // Comma separated list of miR names (e.g. hsa-let-7b-5p,hsa-let-7a-1).
    repeated string mir = 3;
    // Which page (slice) of entire results set should be returned.
    repeated int32 page = 4;
    // Number of records per page of results.  Max is 2000.
    repeated int32 page_size = 5;
    // Narrow search to one or more TCGA sample types from the scrollable list.
    repeated string sample_type = 6;
    // Which column in the results should be used for sorting paginated results?
    enum GetSamplesMiRSeqRequest_Sort_by {
        GETSAMPLESMIRSEQREQUEST_SORT_BY_TCGA_PARTICIPANT_BARCODE = 0;
        GETSAMPLESMIRSEQREQUEST_SORT_BY_COHORT = 1;
        GETSAMPLESMIRSEQREQUEST_SORT_BY_TOOL = 2;
        GETSAMPLESMIRSEQREQUEST_SORT_BY_MIR = 3;
        GETSAMPLESMIRSEQREQUEST_SORT_BY_SAMPLE_TYPE = 4;
    }
    GetSamplesMiRSeqRequest_Sort_by sort_by = 7;
    // Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO).
    repeated string tcga_participant_barcode = 8;
    // Narrow search to include only data/results produced by the selected Firehose tool.
    repeated string tool = 9;
}

service FireBrowseBetaAPIService {
    // Retrieve all data by genes Gistic2 results.
    // 
    // This service provides access to the Gistic2 all_data_by_genes.txt output data. This data is a gene-level table of copy number values for all samples. The returned copy number values are in units (copy number - 2) so that no amplification or deletion is 0, genes with amplifications have positive values, and genes with deletions are negative values. The data are converted from marker level to gene level using the extreme method: a gene is assigned the greatest amplification or the least deletion value among the markers it covers. Results may be filtered by cohort, gene, or barcode, but at least one gene or barcode must be supplied.
    rpc GetAnalysesCopyNumberGenesAll(GetAnalysesCopyNumberGenesAllRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v1/Analyses/CopyNumber/Genes/All"
      };
    }
    // Retrieve Gistic2 significantly amplified genes results.
    // 
    // This service provides access to the Gistic2 amp_genes.conf_99.txt output data.  At least 1 gene or cohort must be supplied.
    rpc GetAnalysesCopyNumberGenesAmplified(GetAnalysesCopyNumberGenesAmplifiedRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v1/Analyses/CopyNumber/Genes/Amplified"
      };
    }
    // Retrieve Gistic2 significantly deleted genes results.
    // 
    // This service provides access to the Gistic2 del_genes.conf_99.txt output data.  At least 1 gene or cohort must be supplied.
    rpc GetAnalysesCopyNumberGenesDeleted(GetAnalysesCopyNumberGenesDeletedRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v1/Analyses/CopyNumber/Genes/Deleted"
      };
    }
    // Retrieve focal data by genes Gistic2 results.
    // 
    // This service provides access to the Gistic2 focal_data_by_genes.txt output data. This output is similar to the all_data_by_genes.txt output, but using only focal events with lengths greater than the  focal length cutoff. This data is a gene-level table of copy number values for all samples. The returned copy number values are in units (copy number - 2) so that no amplification or deletion is 0, genes with amplifications have positive values, and genes with deletions are negative values. The data are converted from marker level to gene level using the extreme method: a gene is assigned the greatest amplification or the least deletion value among the markers it covers. Results may be filtered by cohort, gene, and/or barcode, but at least one gene or barcode must be supplied.
    rpc GetAnalysesCopyNumberGenesFocal(GetAnalysesCopyNumberGenesFocalRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v1/Analyses/CopyNumber/Genes/Focal"
      };
    }
    // Retrieve all thresholded by genes Gistic2 results.
    // 
    // This service provides access to the Gistic2 all_thresholded_by_genes.txt output data. A gene-level table of discrete amplification and deletion indicators for all samples. A table value of 0 means no amplification or deletion above the threshold. Amplifications are positive numbers: 1 means amplification above the amplification threshold; 2 means amplifications larger to the arm level amplifications observed for the sample. Deletions are represented by negative table values: -1 represents deletion beyond the threshold; -2 means deletions greater than the minimum arm-level deletion observed for the sample. Results maybe filtered by cohort, gene or barcode, but at least one gene or barcode must be supplied.
    rpc GetAnalysesCopyNumberGenesThresholded(GetAnalysesCopyNumberGenesThresholdedRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v1/Analyses/CopyNumber/Genes/Thresholded"
      };
    }
    // Retrieve aggregated analysis features table.
    // 
    // This service returns part or all of the so-called <strong>feature table</strong>; which aggregates the most important findings across ALL pipelines in the GDAC Firehose analysis workflow into a single table for simple access.  One feature table is created per disease cohort.  Results may be filtered by date or cohort, but at least 1 cohort must be specified here. For more details please visit the <a href=https://confluence.broadinstitute.org/display/GDAC/Documentation\#Documentation-FeatureTable>online documentation</a>.  Please note that the service is still undergoing experimental evaluation and does not return JSON format.
    rpc GetAnalysesFeatureTable(GetAnalysesFeatureTableRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v1/Analyses/FeatureTable"
      };
    }
    // Retrieve MutSig final analysis MAF.
    // 
    // This service returns columns from the MAF generated by MutSig. Results may be filtered by gene, cohort, tool, or barcode, but at least one gene OR barcode OR cohort must be given.  By default a subset consisting of the most commonly used columns will be returned, but that can be modified with the column parameter. Specifying 'all' in this parameter is a convenient way to return every column of the respective MAF, and has precedence over any any other column selection expression.  The complete list of column names that may be specified is <a href='http://firebrowse.org/api-docs/#!/Metadata/MAFColNames'>given here</a>.  For more information on the mutation data, and how it is processed by Firehose, please consult the <a href="https://confluence.broadinstitute.org/display/GDAC/Documentation#Documentation-MutationPipelines">pipeline documentation</a>.
    rpc GetAnalysesMutationMAF(GetAnalysesMutationMAFRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v1/Analyses/Mutation/MAF"
      };
    }
    // Retrieve Significantly Mutated Genes (SMG).
    // 
    // This service provides a list of significantly mutated genes, as scored by MutSig.  It may be filtered by cohort, rank, gene, tool and/or Q-value threshold, but at least one cohort or gene must be supplied.
    rpc GetAnalysesMutationSMG(GetAnalysesMutationSMGRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v1/Analyses/Mutation/SMG"
      };
    }
    // Retrieve links to summary reports from Firehose analysis runs.
    // 
    // This service returns URLs to the analysis result reports for runs of the Broad Institute GDAC Firehose analysis pipeline. At least one year of run reports are maintained in the database, but the reports from the latest run will be returned by default. The set of <a href="https://confluence.broadinstitute.org/display/GDAC/Nozzle">Nozzle</a> reports returned may be filtered by disease cohort, report type and report name.
    rpc GetAnalysesReports(GetAnalysesReportsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v1/Analyses/Reports"
      };
    }
    // Returns RNASeq expression quartiles, e.g. suitable for drawing a boxplot.
    // 
    // For a given gene compute quartiles and extrema, suitable e.g. for drawing a boxplot (Tukey 1977).  Results may be filtered by cohort, sample type, patient barcode  or characterization protocol, and are returned sorted by cohort.  Note that samples for which no expression value was recorded (e.g. <a href="http://firebrowse.org/api/v1/Samples/mRNASeq?&gene=egfr&cohort=SKCM&tcga_participant_barcode=TCGA-GN-A262">the melanoma sample TCGA-GN-262</a>) are removed prior to calculation.
    rpc GetAnalysesMRNASeqQuartiles(GetAnalysesMRNASeqQuartilesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v1/Analyses/mRNASeq/Quartiles"
      };
    }
    // Retrieve standard data archives.
    // 
    // This service returns the archive URLs for our Firehose standard data runs, providing a RESTful interface similar in spirit to the command line <a href="https://confluence.broadinstitute.org/display/GDAC/Download">firehose_get</a> tool. The archives can be filtered based on date, cohort, data type, platform, center, data level, and protocol.
    rpc GetArchivesStandardData(GetArchivesStandardDataRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v1/Archives/StandardData"
      };
    }
    // Obtain identities of TCGA consortium member centers.
    // 
    // By default this function returns a table of all consortium members in TCGA, aka centers; it provides both the HTTP domain and full organizational name of each center.  A subset of this table may be obtained by explicitly specifying one or more domain names.
    rpc GetMetadataCenters(GetMetadataCentersRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v1/Metadata/Centers"
      };
    }
    // Retrieve names of all TCGA clinical data elements (CDEs).
    // 
    // Retrieve names of all patient-level clinical data elements (CDES) available in TCGA, unioned across all disease cohorts. A CDE will be listed here only when it has a value other than NA for at least 1 patient case in any disease cohort. For more information on how these CDEs are processed see our <a href="https://confluence.broadinstitute.org/display/GDAC/Documentation">pipeline documentation</a>.
    rpc GetMetadataClinicalNames(GetMetadataClinicalNamesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v1/Metadata/ClinicalNames"
      };
    }
    // Retrieve names of CDEs normalized by Firehose and selected for analyses.
    // 
    // This service returns the names of patient-level clinical data elements (CDEs) that have been normalized by Firehose for use in analyses, unioned across all disease cohorts. For more information on how these CDEs are processed, see our <a href="https://confluence.broadinstitute.org/display/GDAC/Documentation">pipeline documentation</a>.
    rpc GetMetadataClinicalNames_FH(GetMetadataClinicalNames_FHRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v1/Metadata/ClinicalNames_FH"
      };
    }
    // Translate TCGA cohort abbreviations to full disease names.
    // 
    // By default this function returns a table containing all TCGA cohort abbreviations and their corresponding disease names.  A subset of that table may be obtained by explicitly specifying one or more cohort abbreviations.
    rpc GetMetadataCohorts(GetMetadataCohortsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v1/Metadata/Cohorts"
      };
    }
    // Retrieve sample counts.
    // 
    // Returns the aliquot counts for each disease cohort, per sample
    // type and data type.  The sample type designation of "Tumor"
    // may be used to aggregate the count of all tumor aliquots into
    // a single number per disease and data type. See the SampleTypes
    // function for a complete description of sample types.
    rpc GetMetadataCounts(GetMetadataCountsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v1/Metadata/Counts"
      };
    }
    // Retrieve datestamps of all GDAC Firehose standard data and analyses runs that have been ingested into FireBrowse.
    rpc GetMetadataDates(GetMetadataDatesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v1/Metadata/Dates"
      };
    }
    // Simple way to discern whether API server is up and running
    // 
    // Returns a message to indicate that API (server) is up and running, or times out if not.
    rpc GetMetadataHeartBeat(GetMetadataHeartBeatRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v1/Metadata/HeartBeat"
      };
    }
    // Retrieve names of all columns in the mutation annotation files (MAFs) served by FireBrowse.
    // 
    // Retrieve the names of all columns in the mutation annotation files (MAFs) hosted by FireBrowse.  For more information on the mutation data, and how it is processed by Firehose, please consult the <a href="https://confluence.broadinstitute.org/display/GDAC/Documentation#Documentation-MutationPipelines">pipeline documentation</a>.
    rpc GetMetadataMAFColNames(GetMetadataMAFColNamesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v1/Metadata/MAFColNames"
      };
    }
    // Retrieve list of all TCGA patients.
    // 
    // This service returns a list of all TCGA patient barcodes in FireBrowse, optionally filtered by disease cohort.  The barcodes are obtained directy from the clinical data.
    rpc GetMetadataPatients(GetMetadataPatientsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v1/Metadata/Patients"
      };
    }
    // Translate TCGA platform codes to full platform names.
    // 
    // By default this function returns a table of all of the technology platforms used to sequence or characterize samples in TCGA--both their short platform codes and full names.  A subset of this table may be obtained by explicitly specifying one or more platform codes.
    rpc GetMetadataPlatforms(GetMetadataPlatformsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v1/Metadata/Platforms"
      };
    }
    // Given a TCGA barcode, return its short letter sample type code.
    rpc GetMetadataSampleTypeBarcodeTCGA_Barcode(GetMetadataSampleTypeBarcodeTCGA_BarcodeRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v1/Metadata/SampleType/Barcode/{TCGA_Barcode}"
      };
    }
    // Translate from numeric to symbolic TCGA sample codes.
    // 
    // Convert a TCGA numeric sample type code (e.g. 01, 02) to its corresponding symbolic (short letter) code (e.g. TP, TR).
    rpc GetMetadataSampleTypeCodeCode(GetMetadataSampleTypeCodeCodeRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v1/Metadata/SampleType/Code/{code}"
      };
    }
    // Translate from symbolic to numeric TCGA sample codes.
    // 
    // Convert a TCGA sample type code in symbolic form (or 'short letter code' like TP, TR) to its corresponding numeric form (e.g. 01, 02).
    rpc GetMetadataSampleTypeShortLetterCodeShort_letter_code(GetMetadataSampleTypeShortLetterCodeShort_letter_codeRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v1/Metadata/SampleType/ShortLetterCode/{short_letter_code}"
      };
    }
    // Return all TCGA sample type codes, both numeric and symbolic.
    rpc GetMetadataSampleTypes(GetMetadataSampleTypesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v1/Metadata/SampleTypes"
      };
    }
    // Obtain identities of tissue source sites in TCGA.
    // 
    // By default this function returns a table of all sites which contributed source tissue to TCGA, aka TSS's. A subset of this table may be obtained by explicitly specifying one or more sites.
    rpc GetMetadataTSSites(GetMetadataTSSitesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v1/Metadata/TSSites"
      };
    }
    // Retrieve TCGA CDEs verbatim, i.e. not normalized by Firehose.
    // 
    // This service returns patient clinical data from TCGA, verbatim. It differs from the Samples/Clinical_FH method by providing access to all TCGA CDEs in their original form, not merely the subset of CDEs normalized by Firehose for analyses.  Results may be selected by disease cohort, patient barcode or CDE name, but at least one cohort, barcode, or CDE must be provided. When filtering by CDE note that only when a patient record contains one or more of the selected CDEs will it be returned. Visit the Metadata/ClinicalNames api function to see the entire list of TCGA CDEs that may be queried via this method. For more information on how clinical data are processed, see our <a href="https://confluence.broadinstitute.org/display/GDAC/Documentation#Documentation-ClinicalPipeline">pipeline documentation</a>.
    rpc GetSamplesClinical(GetSamplesClinicalRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v1/Samples/Clinical"
      };
    }
    // Retrieve CDEs normalized by Firehose and selected for analyses.
    // 
    // This service returns patient-level clinical data elements (CDEs) that have been normalized by Firehose for use in analyses. Results may be selected by disease cohort, patient barcode or CDE name, but at least one cohort, barcode or CDE must be provided. When filtering by CDE note that only when a  patient record contains one or more of the selected CDEs will it be returned. Visit <a href="http://gdac.broadinstitute.org/runs/info/clinical">this table of CDEs</a> to see what's available for every disase cohort; for more information on how these CDEs are processed see our <a href="https://confluence.broadinstitute.org/display/GDAC/Documentation#Documentation-ClinicalPipeline">pipeline documentation</a>.
    rpc GetSamplesClinical_FH(GetSamplesClinical_FHRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v1/Samples/Clinical_FH"
      };
    }
    // Retrieve mRNASeq data.
    // 
    // This service returns sample-level log2 mRNASeq expression values. Results may be filtered by gene, cohort, barcode, sample type or characterization protocol, but at least one gene must be supplied.
    rpc GetSamplesMRNASeq(GetSamplesMRNASeqRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v1/Samples/mRNASeq"
      };
    }
    // Retrieve miRSeq data.
    // 
    // This service returns sample-level log2 miRSeq expression values. Results may be filtered by miR, cohort, barcode, sample type or Firehose preprocessing tool, but at least one miR must be supplied.
    rpc GetSamplesMiRSeq(GetSamplesMiRSeqRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v1/Samples/miRSeq"
      };
    }
}

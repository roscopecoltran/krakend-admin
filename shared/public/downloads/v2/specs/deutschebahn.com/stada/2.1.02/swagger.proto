syntax = "proto3";

import "google/api/annotations.proto";

package stationsdatenbereitstellung;

message GetStationsRequest {
    // Filter by station category. Category ranges are supported as well as lists of categories (e.g. category=2-4 or category=1,3-5). The category must be between 1 and 7 otherwise a parameter exception is returned.
    string category = 1;
    // Filter by EVA number. Wildcards are not allowed here.
    int64 eva = 2;
    // Filter by German federal state. Lists of federal states are also supported (e.g. federalstate=bayern,hamburg). Wildcards are not allowed here.
    string federalstate = 3;
    // The maximum number of hits to be returned by that query. If 'limit' is set greater than 10000, it will be reset to 10000 internally and only 10000 hits will be returned.
    int64 limit = 4;
    // Logical operator to combine query parameters (default=AND). See above for further details.  Allowed values: or, and
    string logicaloperator = 5;
    // Offset of the first hit returned in the QueryResult object with respect to all hits returned by the query. If this parameter is omitted, it will be set to 0 internally.
    int64 offset = 6;
    // Filter by Ril100-identifier. Wildcards are not allowed here.
    string ril = 7;
    // String to search for a station name. The wildcards * (indicating an arbitrary number of characters) and ? (indicating one single character) can be used in the search pattern. A comma separated list of station names is also supported (e.g. searchstring=hamburg*,berlin*).
    string searchstring = 8;
}

message GetStationsIdRequest {
    // Station ID (Bahnhofsnummer)
    int32 id = 1;
}

message GetSzentralenRequest {
    // The maximum number of hits to be returned by that query. If 'limit' is set greater than 100, it will be reset to 100 internally and only 100 hits will be returned.
    int64 limit = 1;
    // Offset of the first hit returned in the QueryResult object with respect to all hits returned by the query. If this parameter is omitted, it will be set to 0 internally.
    int64 offset = 2;
}

message GetSzentralenIdRequest {
    // id of the 3-S-Zentrale.
    int32 id = 1;
}

message Address {
    string city = 1;
    string houseNumber = 2;
    string street = 3;
    int32 zipcode = 4;
}

message Aufgabentraeger {
    // full name of Aufgabentraeger
    string name = 1;
    // unique identifier
    string shortname = 2;
}

message EVANumber {
    GeographicPoint geographicCoordinate = 1;
    // station related EVA-Numbers
    bool isMain = 2;
    // EVA identifier
    int32 number = 3;
}

message Error {
    // error message
    string errMsg = 1;
    // error number
    int32 errNo = 2;
}

message GeographicPoint {
    // first value is longitude, second latitude third altitude (currently not provided)
    repeated double coordinates = 1;
    // the type of the GEOJSON Object e.g. point. Currently only point coordinates without altitude are provided.
    string type = 2;
}

message OpeningHours {
    string fromTime = 1;
    string toTime = 2;
}

enum Partial {
    YES = 0;
    NO = 1;
    PARTIAL = 2;
}

message QueryResult {
    // maximum number of result objects to be returned
    int64 limit = 1;
    // offset of the first result object with respect to the total number of hits produced by the query
    int64 offset = 2;
    // result objects produced by that query
    repeated ResultObject result = 3;
    // total number of hits produced by that query
    int64 total = 4;
}

message RegionalBereichRef {
    // name of the regional department
    string name = 1;
    // unique identifier of the regional department
    int32 number = 2;
    string shortName = 3;
}

message Regionalbereich {
    // name of the regional department
    string name = 1;
    // unique identifier of the regional department
    int32 number = 2;
    string shortName = 3;
}

message ResultObject {
}

message RiL100Identifier {
    GeographicPoint geographicCoordinate = 1;
    // permission for steam engines y/n
    bool hasSteamPermission = 2;
    // is stations main Ril100. Determination of Station&Service AG
    bool isMain = 3;
    // Unique identifier of 'Betriebsstelle' according to Ril100
    string rilIdentifier = 4;
}

message SZentrale {
    Address address = 1;
    // email adress of the 3-S-Zentrale (no longer supported!)
    string email = 2;
    // internal fax number
    string internalFaxNumber = 3;
    // internal phone number
    string internalPhoneNumber = 4;
    // mobile phone number (no longer supported!)
    string mobilePhoneNumber = 5;
    // unique identifier of 3SZentrale
    string name = 6;
    // unique identifier for SZentrale
    int32 number = 7;
    // public fax number
    string publicFaxNumber = 8;
    string publicPhoneNumber = 9;
}

message SZentraleRef {
    // unique identifier of 3SZentrale
    string name = 1;
    // unique identifier for SZentrale
    int32 number = 2;
    string publicPhoneNumber = 3;
}

message Schedule {
    OpeningHours friday = 1;
    OpeningHours holiday = 2;
    OpeningHours monday = 3;
    OpeningHours saturday = 4;
    OpeningHours sunday = 5;
    OpeningHours thursday = 6;
    OpeningHours tuesday = 7;
    OpeningHours wednesday = 8;
}

message Station {
    Schedule DBinformation = 1;
    Aufgabentraeger aufgabentraeger = 2;
    // the stations category (1..7)
    int32 category = 3;
    // station related EVA-Numbers
    repeated EVANumber evaNumbers = 4;
    // german federal state
    string federalState = 5;
    // public bicycle parking y/n
    bool hasBicycleParking = 6;
    // car sharing or car rental y/n
    bool hasCarRental = 7;
    // DB lounge y/n
    bool hasDBLounge = 8;
    // local public transport y/n
    bool hasLocalPublicTransport = 9;
    // public facilities y/n
    bool hasLockerSystem = 10;
    // lost and found y/n
    bool hasLostAndFound = 11;
    // values are 'no', 'yes, advance notification is requested...' or 'yes, advance notification is required...'
    string hasMobilityService = 12;
    // public parking y/n
    bool hasParking = 13;
    // public facilities y/n
    bool hasPublicFacilities = 14;
    // railway mission y/n
    bool hasRailwayMission = 15;
    // stepless access is availiable yes, no or partial
    Partial hasSteplessAccess = 16;
    // taxi rank in front of the station y/n
    bool hasTaxiRank = 17;
    // local travel center y/n
    bool hasTravelCenter = 18;
    // a shop for travel necessities y/n
    bool hasTravelNecessities = 19;
    // public Wi-Fi is available y/n
    bool hasWiFi = 20;
    Schedule localServiceStaff = 21;
    // mailing address of the railway station
    Address mailingAdress = 22;
    // the stations name
    string name = 23;
    // unique identifier representing a specific railway station
    int32 number = 24;
    // determines in some respect the price for train stops at a specific station (1..7)
    int32 priceCategory = 25;
    RegionalBereichRef regionalbereich = 26;
    // station related Ril100s
    repeated RiL100Identifier riL100Identifiers = 27;
    StationManagementRef stationManagement = 28;
    SZentraleRef szentrale = 29;
    TimetableOffice timetableOffice = 30;
}

message StationManagement {
    string name = 1;
    // identifier
    int32 number = 2;
}

message StationManagementRef {
    string name = 1;
    // identifier
    int32 number = 2;
}

message TimetableOffice {
    // email
    string email = 1;
    // identifier
    string name = 2;
}

service StationsdatenbereitstellungService {
    // This operation provides the master data for german railway stations.
    // 
    // Get a QueryResult object containing station objects from the database applying to the parameters described below. 
    // 
    // QueryResult is a container providing the following information about the query result.
    //   1. the total number of hits
    //   2. the maximum number of hits to be returned in that QueryResult object
    //   3. the offset of the first hit returned in that QueryResult object with respect to all hits returned by the query
    //   4. the result objects
    //   
    // The parameters described below work as filters to reduce the number of hits returned. Some of these parameters must be used only once, others are allowed to be used multiple times. Valid parameters that are allowed to be used only once are _offset_, _limit_ and _logicaloperator_. 
    // 
    // All other parameters described below may be used multiple times.
    // 
    // If a parameter is given more than once, the result will contain all hits that match all given parameter values.
    // 
    // E.g. _federalstate=berlin&federalstate=saarland_ returns all stations in Berlin and Saarland.
    // 
    // If more than one filter criterion is used at the same time, the different filter criteria are interpreted as if they are combined by a logical AND operator, unless the parameter _logicaloperator_ is set to _or_.
    // 
    // E.g. _category=1-2&federalstate=hamburg_ returns all stations in Hamburg having category 1 or 2.
    // 
    // _category=1-2&federalstate=hamburg&federalsate=hessen_ returns all stations in Hamburg and Hessen having category 1 or 2, while
    // 
    // _searchstring=berlin*&federalstate=hamburg&federalsate=hessen&logicaloperator=or_ will return all stations with a name starting with 'berlin' as well as all stations in Hamburg and Hessen.
    // 
    // If no 'limit' parameter is given, the number of hits (stations) is set to its maximum value of 10000.
    // 
    // To specify parameter values containing German umlauts, the following encoding has to be used
    //   * ä  => %C3%A4
    //   * ö  => %C3%B6
    //   * ü  => %C3%BC
    //   * Ä  => %C3%84
    //   * Ö  => %C3%96
    //   * Ü  => %C3%9C
    //   * ß  => %C3%9F
    rpc GetStations(GetStationsRequest) returns (QueryResult) {
      option (google.api.http) = {
        get: "/stada/v2/stations"
      };
    }
    // This operation provides the master data for a german railway station selected by its station-id.
    // 
    // Get a QueryResult object containing one station object specified by its id.
    rpc GetStationsId(GetStationsIdRequest) returns (QueryResult) {
      option (google.api.http) = {
        get: "/stada/v2/stations/{id}"
      };
    }
    // This operation provides the master data for 3-S-Zentralen.
    // 
    // Get a QueryResult object containing SZentralen objects from the database applying to the parameters described below. 
    // 
    // QueryResult is a container providing the following information about the query result.
    //   1. the total number of hits
    //   2. the maximum number of hits to be returned in that QueryResult object
    //   3. the offset of the first hit returned in that QueryResult object with respect to all hits returned by the query
    //   4. the result objects
    rpc GetSzentralen(GetSzentralenRequest) returns (QueryResult) {
      option (google.api.http) = {
        get: "/stada/v2/szentralen"
      };
    }
    // This operation provides the master data for 3-S-Zentralen select by its id.
    // 
    // Get a QueryResult object containing one SZentralen object specified by its id.
    rpc GetSzentralenId(GetSzentralenIdRequest) returns (QueryResult) {
      option (google.api.http) = {
        get: "/stada/v2/szentralen/{id}"
      };
    }
}

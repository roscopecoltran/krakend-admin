syntax = "proto3";

import "google/api/annotations.proto";

package awsservermigrationservice;

message PostRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateReplicationJobRequest body = 10;
}

message Post#DeleteReplicationJobRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteReplicationJobRequest body = 10;
}

message Post#DeleteServerCatalogRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteServerCatalogRequest body = 10;
}

message Post#DisassociateConnectorRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DisassociateConnectorRequest body = 10;
}

message Post#GetConnectorsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetConnectorsRequest body = 10;
    // Pagination limit
    string maxResults = 11;
    // Pagination token
    string nextToken = 12;
}

message Post#GetReplicationJobsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetReplicationJobsRequest body = 10;
    // Pagination limit
    string maxResults = 11;
    // Pagination token
    string nextToken = 12;
}

message Post#GetReplicationRunsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetReplicationRunsRequest body = 10;
    // Pagination limit
    string maxResults = 11;
    // Pagination token
    string nextToken = 12;
}

message Post#GetServersRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetServersRequest body = 10;
    // Pagination limit
    string maxResults = 11;
    // Pagination token
    string nextToken = 12;
}

message Post#ImportServerCatalogRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ImportServerCatalogRequest body = 10;
}

message Post#StartOnDemandReplicationRunRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StartOnDemandReplicationRunRequest body = 10;
}

message Post#UpdateReplicationJobRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateReplicationJobRequest body = 10;
}

message Connector {
    string associatedOn = 1;
    array capabilityList = 2;
    string connectorId = 3;
    string ipAddress = 4;
    string macAddress = 5;
    ConnectorStatus status = 6;
    string version = 7;
    string vmManagerId = 8;
    string vmManagerName = 9;
    VmManagerType vmManagerType = 10;
}

enum ConnectorCapability {
    VSPHERE = 0;
}

repeated ConnectorCapability ConnectorCapabilityList = 1



repeated Connector ConnectorList = 1

enum ConnectorStatu {
    HEALTHY = 0;
    UNHEALTHY = 1;
}

message CreateReplicationJobRequest {
    string description = 1;
    integer frequency = 2;
    LicenseType licenseType = 3;
    string roleName = 4;
    string seedReplicationTime = 5;
    string serverId = 6;
}

message CreateReplicationJobResponse {
    string replicationJobId = 1;
}

message DeleteReplicationJobRequest {
    string replicationJobId = 1;
}

message DeleteReplicationJobResponse {
}

message DeleteServerCatalogRequest {
}

message DeleteServerCatalogResponse {
}

message DisassociateConnectorRequest {
    string connectorId = 1;
}

message DisassociateConnectorResponse {
}

message GetConnectorsRequest {
    integer maxResults = 1;
    string nextToken = 2;
}

message GetConnectorsResponse {
    array connectorList = 1;
    string nextToken = 2;
}

message GetReplicationJobsRequest {
    integer maxResults = 1;
    string nextToken = 2;
    string replicationJobId = 3;
}

message GetReplicationJobsResponse {
    string nextToken = 1;
    array replicationJobList = 2;
}

message GetReplicationRunsRequest {
    integer maxResults = 1;
    string nextToken = 2;
    string replicationJobId = 3;
}

message GetReplicationRunsResponse {
    string nextToken = 1;
    ReplicationJob replicationJob = 2;
    array replicationRunList = 3;
}

message GetServersRequest {
    integer maxResults = 1;
    string nextToken = 2;
}

message GetServersResponse {
    string lastModifiedOn = 1;
    string nextToken = 2;
    ServerCatalogStatus serverCatalogStatus = 3;
    array serverList = 4;
}

message ImportServerCatalogRequest {
}

message ImportServerCatalogResponse {
}

message InternalError {
    string message = 1;
}

message InvalidParameterException {
    string message = 1;
}

enum LicenseType {
    AWS = 0;
    BYOL = 1;
}

message MissingRequiredParameterException {
    string message = 1;
}

message NoConnectorsAvailableException {
    string message = 1;
}

message OperationNotPermittedException {
    string message = 1;
}

message ReplicationJob {
    string description = 1;
    integer frequency = 2;
    string latestAmiId = 3;
    LicenseType licenseType = 4;
    string nextReplicationRunStartTime = 5;
    string replicationJobId = 6;
    array replicationRunList = 7;
    string roleName = 8;
    string seedReplicationTime = 9;
    string serverId = 10;
    ServerType serverType = 11;
    ReplicationJobState state = 12;
    string statusMessage = 13;
    VmServer vmServer = 14;
}

message ReplicationJobAlreadyExistsException {
    string message = 1;
}



repeated ReplicationJob ReplicationJobList = 1

message ReplicationJobNotFoundException {
    string message = 1;
}

enum ReplicationJobState {
    PENDING = 0;
    ACTIVE = 1;
    FAILED = 2;
    DELETING = 3;
    DELETED = 4;
}

message ReplicationRun {
    string amiId = 1;
    string completedTime = 2;
    string description = 3;
    string replicationRunId = 4;
    string scheduledStartTime = 5;
    ReplicationRunState state = 6;
    string statusMessage = 7;
    ReplicationRunType type = 8;
}

message ReplicationRunLimitExceededException {
    string message = 1;
}

repeated ReplicationRun ReplicationRunList = 1

enum ReplicationRunState {
    PENDING = 0;
    MISSED = 1;
    ACTIVE = 2;
    FAILED = 3;
    COMPLETED = 4;
    DELETING = 5;
    DELETED = 6;
}

enum ReplicationRunType {
    ON_DEMAND = 0;
    AUTOMATIC = 1;
}

message Server {
    string replicationJobId = 1;
    boolean replicationJobTerminated = 2;
    string serverId = 3;
    ServerType serverType = 4;
    VmServer vmServer = 5;
}

message ServerCannotBeReplicatedException {
    string message = 1;
}

enum ServerCatalogStatu {
    NOT_IMPORTED = 0;
    IMPORTING = 1;
    AVAILABLE = 2;
    DELETED = 3;
    EXPIRED = 4;
}



repeated Server ServerList = 1

enum ServerType {
    VIRTUAL_MACHINE = 0;
}

message StartOnDemandReplicationRunRequest {
    string description = 1;
    string replicationJobId = 2;
}

message StartOnDemandReplicationRunResponse {
    string replicationRunId = 1;
}

message UnauthorizedOperationException {
    string message = 1;
}

message UpdateReplicationJobRequest {
    string description = 1;
    integer frequency = 2;
    LicenseType licenseType = 3;
    string nextReplicationRunStartTime = 4;
    string replicationJobId = 5;
    string roleName = 6;
}

message UpdateReplicationJobResponse {
}

enum VmManagerType {
    VSPHERE = 0;
}

message VmServer {
    string vmManagerName = 1;
    VmManagerType vmManagerType = 2;
    string vmName = 3;
    string vmPath = 4;
    VmServerAddress vmServerAddress = 5;
}

message VmServerAddress {
    string vmId = 1;
    string vmManagerId = 2;
}

service AWSServerMigrationServiceService {
    // The CreateReplicationJob API is used to create a ReplicationJob to replicate a server on AWS. Call this API to first create a ReplicationJob, which will then schedule periodic ReplicationRuns to replicate your server to AWS. Each ReplicationRun will result in the creation of an AWS AMI.
    rpc Post(PostRequest) returns (CreateReplicationJobResponse) {
      option (google.api.http) = {
        post: "//"
        body: "body"
      };
    }
    // The DeleteReplicationJob API is used to delete a ReplicationJob, resulting in no further ReplicationRuns. This will delete the contents of the S3 bucket used to store SMS artifacts, but will not delete any AMIs created by the SMS service.
    rpc Post#DeleteReplicationJob(Post#DeleteReplicationJobRequest) returns (DeleteReplicationJobResponse) {
      option (google.api.http) = {
        post: "//#DeleteReplicationJob"
        body: "body"
      };
    }
    // The DeleteServerCatalog API clears all servers from your server catalog. This means that these servers will no longer be accessible to the Server Migration Service.
    rpc Post#DeleteServerCatalog(Post#DeleteServerCatalogRequest) returns (DeleteServerCatalogResponse) {
      option (google.api.http) = {
        post: "//#DeleteServerCatalog"
        body: "body"
      };
    }
    // The DisassociateConnector API will disassociate a connector from the Server Migration Service, rendering it unavailable to support replication jobs.
    rpc Post#DisassociateConnector(Post#DisassociateConnectorRequest) returns (DisassociateConnectorResponse) {
      option (google.api.http) = {
        post: "//#DisassociateConnector"
        body: "body"
      };
    }
    // The GetConnectors API returns a list of connectors that are registered with the Server Migration Service.
    rpc Post#GetConnectors(Post#GetConnectorsRequest) returns (GetConnectorsResponse) {
      option (google.api.http) = {
        post: "//#GetConnectors"
        body: "body"
      };
    }
    // The GetReplicationJobs API will return all of your ReplicationJobs and their details. This API returns a paginated list, that may be consecutively called with nextToken to retrieve all ReplicationJobs.
    rpc Post#GetReplicationJobs(Post#GetReplicationJobsRequest) returns (GetReplicationJobsResponse) {
      option (google.api.http) = {
        post: "//#GetReplicationJobs"
        body: "body"
      };
    }
    // The GetReplicationRuns API will return all ReplicationRuns for a given ReplicationJob. This API returns a paginated list, that may be consecutively called with nextToken to retrieve all ReplicationRuns for a ReplicationJob.
    rpc Post#GetReplicationRuns(Post#GetReplicationRunsRequest) returns (GetReplicationRunsResponse) {
      option (google.api.http) = {
        post: "//#GetReplicationRuns"
        body: "body"
      };
    }
    // The GetServers API returns a list of all servers in your server catalog. For this call to succeed, you must previously have called ImportServerCatalog.
    rpc Post#GetServers(Post#GetServersRequest) returns (GetServersResponse) {
      option (google.api.http) = {
        post: "//#GetServers"
        body: "body"
      };
    }
    // The ImportServerCatalog API is used to gather the complete list of on-premises servers on your premises. This API call requires connectors to be installed and monitoring all servers you would like imported. This API call returns immediately, but may take some time to retrieve all of the servers.
    rpc Post#ImportServerCatalog(Post#ImportServerCatalogRequest) returns (ImportServerCatalogResponse) {
      option (google.api.http) = {
        post: "//#ImportServerCatalog"
        body: "body"
      };
    }
    // The StartOnDemandReplicationRun API is used to start a ReplicationRun on demand (in addition to those that are scheduled based on your frequency). This ReplicationRun will start immediately. StartOnDemandReplicationRun is subject to limits on how many on demand ReplicationRuns you may call per 24-hour period.
    rpc Post#StartOnDemandReplicationRun(Post#StartOnDemandReplicationRunRequest) returns (StartOnDemandReplicationRunResponse) {
      option (google.api.http) = {
        post: "//#StartOnDemandReplicationRun"
        body: "body"
      };
    }
    // The UpdateReplicationJob API is used to change the settings of your existing ReplicationJob created using CreateReplicationJob. Calling this API will affect the next scheduled ReplicationRun.
    rpc Post#UpdateReplicationJob(Post#UpdateReplicationJobRequest) returns (UpdateReplicationJobResponse) {
      option (google.api.http) = {
        post: "//#UpdateReplicationJob"
        body: "body"
      };
    }
}

syntax = "proto3";

import "google/api/annotations.proto";

package amazoncloudsearch;

message PostRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateDomainRequest body = 10;
}

message Post#DefineIndexFieldRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DefineIndexFieldRequest body = 10;
}

message Post#DefineRankExpressionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DefineRankExpressionRequest body = 10;
}

message Post#DeleteDomainRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteDomainRequest body = 10;
}

message Post#DeleteIndexFieldRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteIndexFieldRequest body = 10;
}

message Post#DeleteRankExpressionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteRankExpressionRequest body = 10;
}

message Post#DescribeAvailabilityOptionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeAvailabilityOptionsRequest body = 10;
}

message Post#DescribeDefaultSearchFieldRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeDefaultSearchFieldRequest body = 10;
}

message Post#DescribeDomainsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeDomainsRequest body = 10;
}

message Post#DescribeIndexFieldsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeIndexFieldsRequest body = 10;
}

message Post#DescribeRankExpressionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeRankExpressionsRequest body = 10;
}

message Post#DescribeServiceAccessPoliciesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeServiceAccessPoliciesRequest body = 10;
}

message Post#DescribeStemmingOptionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeStemmingOptionsRequest body = 10;
}

message Post#DescribeStopwordOptionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeStopwordOptionsRequest body = 10;
}

message Post#DescribeSynonymOptionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeSynonymOptionsRequest body = 10;
}

message Post#IndexDocumentsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    IndexDocumentsRequest body = 10;
}

message Post#UpdateAvailabilityOptionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateAvailabilityOptionsRequest body = 10;
}

message Post#UpdateDefaultSearchFieldRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateDefaultSearchFieldRequest body = 10;
}

message Post#UpdateServiceAccessPoliciesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateServiceAccessPoliciesRequest body = 10;
}

message Post#UpdateStemmingOptionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateStemmingOptionsRequest body = 10;
}

message Post#UpdateStopwordOptionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateStopwordOptionsRequest body = 10;
}

message Post#UpdateSynonymOptionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateSynonymOptionsRequest body = 10;
}

message AccessPoliciesStatus {
    string Options = 1;
    OptionStatus Status = 2;
}

message AvailabilityOptionsStatus {
    // The availability options configured for the domain.
    boolean Options = 1;
    OptionStatus Status = 2;
}

message BaseException {
    string Code = 1;
    string Message = 2;
}

message CreateDomainRequest {
    string DomainName = 1;
}

message CreateDomainResponse {
    DomainStatus DomainStatus = 1;
}

message DefaultSearchFieldStatus {
    // The name of the <code>IndexField</code> to use as the default search field. The default is an empty string, which automatically searches all text fields.
    string Options = 1;
    OptionStatus Status = 2;
}

message DefineIndexFieldRequest {
    string DomainName = 1;
    IndexField IndexField = 2;
}

message DefineIndexFieldResponse {
    IndexFieldStatus IndexField = 1;
}

message DefineRankExpressionRequest {
    string DomainName = 1;
    NamedRankExpression RankExpression = 2;
}

message DefineRankExpressionResponse {
    RankExpressionStatus RankExpression = 1;
}

message DeleteDomainRequest {
    string DomainName = 1;
}

message DeleteDomainResponse {
    DomainStatus DomainStatus = 1;
}

message DeleteIndexFieldRequest {
    string DomainName = 1;
    string IndexFieldName = 2;
}

message DeleteIndexFieldResponse {
    IndexFieldStatus IndexField = 1;
}

message DeleteRankExpressionRequest {
    string DomainName = 1;
    // The name of the <code>RankExpression</code> to delete.
    string RankName = 2;
}

message DeleteRankExpressionResponse {
    RankExpressionStatus RankExpression = 1;
}

message DescribeAvailabilityOptionsRequest {
    // The name of the domain you want to describe.
    string DomainName = 1;
}

message DescribeAvailabilityOptionsResponse {
    // The availability options configured for the domain. Indicates whether Multi-AZ is enabled for the domain.
    AvailabilityOptionsStatus AvailabilityOptions = 1;
}

message DescribeDefaultSearchFieldRequest {
    string DomainName = 1;
}

message DescribeDefaultSearchFieldResponse {
    // The name of the <code>IndexField</code> to use for search requests issued with the <code>q</code> parameter. The default is the empty string, which automatically searches all text fields.
    DefaultSearchFieldStatus DefaultSearchField = 1;
}

message DescribeDomainsRequest {
    // Limits the DescribeDomains response to the specified search domains.
    array DomainNames = 1;
}

message DescribeDomainsResponse {
    array DomainStatusList = 1;
}

message DescribeIndexFieldsRequest {
    string DomainName = 1;
    // Limits the <code>DescribeIndexFields</code> response to the specified fields.
    array FieldNames = 2;
}

message DescribeIndexFieldsResponse {
    // The index fields configured for the domain.
    array IndexFields = 1;
}

message DescribeRankExpressionsRequest {
    string DomainName = 1;
    // Limits the <code>DescribeRankExpressions</code> response to the specified fields.
    array RankNames = 2;
}

message DescribeRankExpressionsResponse {
    // The rank expressions configured for the domain.
    array RankExpressions = 1;
}

message DescribeServiceAccessPoliciesRequest {
    string DomainName = 1;
}

message DescribeServiceAccessPoliciesResponse {
    AccessPoliciesStatus AccessPolicies = 1;
}

message DescribeStemmingOptionsRequest {
    string DomainName = 1;
}

message DescribeStemmingOptionsResponse {
    StemmingOptionsStatus Stems = 1;
}

message DescribeStopwordOptionsRequest {
    string DomainName = 1;
}

message DescribeStopwordOptionsResponse {
    StopwordOptionsStatus Stopwords = 1;
}

message DescribeSynonymOptionsRequest {
    string DomainName = 1;
}

message DescribeSynonymOptionsResponse {
    SynonymOptionsStatus Synonyms = 1;
}

message DisabledOperationException {
}







repeated string DomainNameList = 1

message DomainStatus {
    // True if the search domain is created. It can take several minutes to initialize a domain when <a>CreateDomain</a> is called. Newly created search domains are returned from <a>DescribeDomains</a> with a false value for Created until domain creation is complete.
    boolean Created = 1;
    // True if the search domain has been deleted. The system must clean up resources dedicated to the search domain when <a>DeleteDomain</a> is called. Newly deleted search domains are returned from <a>DescribeDomains</a> with a true value for IsDeleted for several minutes until resource cleanup is complete.
    boolean Deleted = 2;
    // The service endpoint for updating documents in a search domain.
    ServiceEndpoint DocService = 3;
    string DomainId = 4;
    string DomainName = 5;
    // The number of documents that have been submitted to the domain and indexed.
    integer NumSearchableDocs = 6;
    // True if processing is being done to activate the current domain configuration.
    boolean Processing = 7;
    // True if <a>IndexDocuments</a> needs to be called to activate the current domain configuration.
    boolean RequiresIndexDocuments = 8;
    // The number of search instances that are available to process search requests.
    integer SearchInstanceCount = 9;
    // The instance type (such as search.m1.small) that is being used to process search requests.
    string SearchInstanceType = 10;
    // The number of partitions across which the search index is spread.
    integer SearchPartitionCount = 11;
    // The service endpoint for requesting search results from a search domain.
    ServiceEndpoint SearchService = 12;
}

repeated DomainStatus DomainStatusList = 1







repeated string FieldNameList = 1



message IndexDocumentsRequest {
    string DomainName = 1;
}

message IndexDocumentsResponse {
    // The names of the fields that are currently being processed due to an <code>IndexDocuments</code> action.
    array FieldNames = 1;
}

message IndexField {
    // The name of a field in the search index. Field names must begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore). Uppercase letters and hyphens are not allowed. The names "body", "docid", and "text_relevance" are reserved and cannot be specified as field or rank expression names.
    string IndexFieldName = 1;
    // The type of field. Based on this type, exactly one of the <a>UIntOptions</a>, <a>LiteralOptions</a> or <a>TextOptions</a> must be present.
    IndexFieldType IndexFieldType = 2;
    // Options for literal field. Present if <code>IndexFieldType</code> specifies the field is of type literal.
    LiteralOptions LiteralOptions = 3;
    // An optional list of source attributes that provide data for this index field. If not specified, the data is pulled from a source attribute with the same name as this <code>IndexField</code>. When one or more source attributes are specified, an optional data transformation can be applied to the source data when populating the index field. You can configure a maximum of 20 sources for an <code>IndexField</code>.
    array SourceAttributes = 4;
    // Options for text field. Present if <code>IndexFieldType</code> specifies the field is of type text.
    TextOptions TextOptions = 5;
    // Options for an unsigned integer field. Present if <code>IndexFieldType</code> specifies the field is of type unsigned integer.
    UIntOptions UIntOptions = 6;
}

message IndexFieldStatus {
    IndexField Options = 1;
    OptionStatus Status = 2;
}

repeated IndexFieldStatus IndexFieldStatusList = 1

enum IndexFieldType {
    UINT = 0;
    LITERAL = 1;
    TEXT = 2;
}

message InternalException {
}

message InvalidTypeException {
}

message LimitExceededException {
}

message LiteralOptions {
    // The default value for a literal field. Optional.
    string DefaultValue = 1;
    // Specifies whether facets are enabled for this field. Default: False.
    boolean FacetEnabled = 2;
    // Specifies whether values of this field can be returned in search results and used for ranking. Default: False.
    boolean ResultEnabled = 3;
    // Specifies whether search is enabled for this field. Default: False.
    boolean SearchEnabled = 4;
}

message NamedRankExpression {
    // <p>The expression to evaluate for ranking or thresholding while processing a search request. The <code>RankExpression</code> syntax is based on JavaScript expressions and supports:</p> <ul> <li>Integer, floating point, hex and octal literals</li> <li>Shortcut evaluation of logical operators such that an expression <code>a || b</code> evaluates to the value <code>a</code>, if <code>a</code> is true, without evaluating <code>b</code> at all</li> <li>JavaScript order of precedence for operators</li> <li>Arithmetic operators: <code>+ - * / %</code> </li> <li>Boolean operators (including the ternary operator)</li> <li>Bitwise operators</li> <li>Comparison operators</li> <li>Common mathematic functions: <code>abs ceil erf exp floor lgamma ln log2 log10 max min sqrt pow</code> </li> <li>Trigonometric library functions: <code>acosh acos asinh asin atanh atan cosh cos sinh sin tanh tan</code> </li> <li>Random generation of a number between 0 and 1: <code>rand</code> </li> <li>Current time in epoch: <code>time</code> </li> <li>The <code>min max</code> functions that operate on a variable argument list</li> </ul> <p>Intermediate results are calculated as double precision floating point values. The final return value of a <code>RankExpression</code> is automatically converted from floating point to a 32-bit unsigned integer by rounding to the nearest integer, with a natural floor of 0 and a ceiling of max(uint32_t), 4294967295. Mathematical errors such as dividing by 0 will fail during evaluation and return a value of 0.</p> <p>The source data for a <code>RankExpression</code> can be the name of an <code>IndexField</code> of type uint, another <code>RankExpression</code> or the reserved name <i>text_relevance</i>. The text_relevance source is defined to return an integer from 0 to 1000 (inclusive) to indicate how relevant a document is to the search request, taking into account repetition of search terms in the document and proximity of search terms to each other in each matching <code>IndexField</code> in the document.</p> <p>For more information about using rank expressions to customize ranking, see the Amazon CloudSearch Developer Guide.</p>
    string RankExpression = 1;
    // The name of a rank expression. Rank expression names must begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore). Uppercase letters and hyphens are not allowed. The names "body", "docid", and "text_relevance" are reserved and cannot be specified as field or rank expression names.
    string RankName = 2;
}

enum OptionState {
    REQUIRESINDEXDOCUMENTS = 0;
    PROCESSING = 1;
    ACTIVE = 2;
}

message OptionStatus {
    // A timestamp for when this option was created.
    string CreationDate = 1;
    // Indicates that the option will be deleted once processing is complete.
    boolean PendingDeletion = 2;
    // <p>The state of processing a change to an option. Possible values:</p> <ul> <li> <code>RequiresIndexDocuments</code>: the option's latest value will not be visible in searches until <a>IndexDocuments</a> has been called and indexing is complete.</li> <li> <code>Processing</code>: the option's latest value is not yet visible in all searches but is in the process of being activated. </li> <li> <code>Active</code>: the option's latest value is completely visible. Any warnings or messages generated during processing are provided in <code>Diagnostics</code>.</li> </ul>
    OptionState State = 3;
    // A timestamp for when this option was last updated.
    string UpdateDate = 4;
    // A unique integer that indicates when this option was last updated.
    integer UpdateVersion = 5;
}

message RankExpressionStatus {
    // The expression that is evaluated for ranking or thresholding while processing a search request.
    NamedRankExpression Options = 1;
    OptionStatus Status = 2;
}

repeated RankExpressionStatus RankExpressionStatusList = 1

message ResourceNotFoundException {
}

message ServiceEndpoint {
    string Arn = 1;
    string Endpoint = 2;
}

message SourceAttribute {
    // Copies data from a source document attribute to an <code>IndexField</code>.
    SourceData SourceDataCopy = 1;
    // Identifies the transformation to apply when copying data from a source attribute.
    SourceDataFunction SourceDataFunction = 2;
    // Maps source document attribute values to new values when populating the <code>IndexField</code>.
    SourceDataMap SourceDataMap = 3;
    // Trims common title words from a source document attribute when populating an <code>IndexField</code>. This can be used to create an <code>IndexField</code> you can use for sorting.
    SourceDataTrimTitle SourceDataTrimTitle = 4;
}

repeated SourceAttribute SourceAttributeList = 1

message SourceData {
    // The default value to use if the source attribute is not specified in a document. Optional.
    string DefaultValue = 1;
    // The name of the document source field to add to this <code>IndexField</code>.
    string SourceName = 2;
}

enum SourceDataFunction {
    COPY = 0;
    TRIMTITLE = 1;
    MAP = 2;
}

message SourceDataMap {
    // A map that translates source field values to custom values.
    array Cases = 1;
    // The default value to use if the source attribute is not specified in a document. Optional.
    string DefaultValue = 2;
    // The name of the document source field to add to this <code>IndexField</code>.
    string SourceName = 3;
}

message SourceDataTrimTitle {
    // The default value to use if the source attribute is not specified in a document. Optional.
    string DefaultValue = 1;
    string Language = 2;
    // The separator that follows the text to trim.
    string Separator = 3;
    // The name of the document source field to add to this <code>IndexField</code>.
    string SourceName = 4;
}

message StemmingOptionsStatus {
    string Options = 1;
    OptionStatus Status = 2;
}

message StopwordOptionsStatus {
    string Options = 1;
    OptionStatus Status = 2;
}

message StringCaseMap {
    string key = 1;
    string value = 2;
}
repeated StringCaseMap StringCaseMap = 1

message SynonymOptionsStatus {
    string Options = 1;
    OptionStatus Status = 2;
}

message TextOptions {
    // The default value for a text field. Optional.
    string DefaultValue = 1;
    // Specifies whether facets are enabled for this field. Default: False.
    boolean FacetEnabled = 2;
    // Specifies whether values of this field can be returned in search results and used for ranking. Default: False.
    boolean ResultEnabled = 3;
    // <p>The text processor to apply to this field. Optional. Possible values:</p> <ul> <li> <code>cs_text_no_stemming</code>: turns off stemming for the field.</li> </ul> <p>Default: none</p>
    string TextProcessor = 4;
}

message UIntOptions {
    // The default value for an unsigned integer field. Optional.
    integer DefaultValue = 1;
}

message UpdateAvailabilityOptionsRequest {
    string DomainName = 1;
    // You expand an existing search domain to a second Availability Zone by setting the Multi-AZ option to true. Similarly, you can turn off the Multi-AZ option to downgrade the domain to a single Availability Zone by setting the Multi-AZ option to <code>false</code>.
    boolean MultiAZ = 2;
}

message UpdateAvailabilityOptionsResponse {
    // The newly-configured availability options. Indicates whether Multi-AZ is enabled for the domain.
    AvailabilityOptionsStatus AvailabilityOptions = 1;
}

message UpdateDefaultSearchFieldRequest {
    // The text field to search if the search request does not specify which field to search. The default search field is used when search terms are specified with the <code>q</code> parameter, or if a match expression specified with the <code>bq</code> parameter does not constrain the search to a particular field. The default is an empty string, which automatically searches all text fields.
    string DefaultSearchField = 1;
    string DomainName = 2;
}

message UpdateDefaultSearchFieldResponse {
    DefaultSearchFieldStatus DefaultSearchField = 1;
}

message UpdateServiceAccessPoliciesRequest {
    string AccessPolicies = 1;
    string DomainName = 2;
}

message UpdateServiceAccessPoliciesResponse {
    AccessPoliciesStatus AccessPolicies = 1;
}

message UpdateStemmingOptionsRequest {
    string DomainName = 1;
    string Stems = 2;
}

message UpdateStemmingOptionsResponse {
    StemmingOptionsStatus Stems = 1;
}

message UpdateStopwordOptionsRequest {
    string DomainName = 1;
    string Stopwords = 2;
}

message UpdateStopwordOptionsResponse {
    StopwordOptionsStatus Stopwords = 1;
}

message UpdateSynonymOptionsRequest {
    string DomainName = 1;
    string Synonyms = 2;
}

message UpdateSynonymOptionsResponse {
    SynonymOptionsStatus Synonyms = 1;
}

service AmazonCloudSearchService {
    // Creates a new search domain.
    rpc Post(PostRequest) returns (CreateDomainResponse) {
      option (google.api.http) = {
        post: "//"
        body: "body"
      };
    }
    // Configures an <code>IndexField</code> for the search domain. Used to create new fields and modify existing ones. If the field exists, the new configuration replaces the old one. You can configure a maximum of 200 index fields.
    rpc Post#DefineIndexField(Post#DefineIndexFieldRequest) returns (DefineIndexFieldResponse) {
      option (google.api.http) = {
        post: "//#DefineIndexField"
        body: "body"
      };
    }
    // Configures a <code>RankExpression</code> for the search domain. Used to create new rank expressions and modify existing ones. If the expression exists, the new configuration replaces the old one. You can configure a maximum of 50 rank expressions.
    rpc Post#DefineRankExpression(Post#DefineRankExpressionRequest) returns (DefineRankExpressionResponse) {
      option (google.api.http) = {
        post: "//#DefineRankExpression"
        body: "body"
      };
    }
    // Permanently deletes a search domain and all of its data.
    rpc Post#DeleteDomain(Post#DeleteDomainRequest) returns (DeleteDomainResponse) {
      option (google.api.http) = {
        post: "//#DeleteDomain"
        body: "body"
      };
    }
    // Removes an <code>IndexField</code> from the search domain.
    rpc Post#DeleteIndexField(Post#DeleteIndexFieldRequest) returns (DeleteIndexFieldResponse) {
      option (google.api.http) = {
        post: "//#DeleteIndexField"
        body: "body"
      };
    }
    // Removes a <code>RankExpression</code> from the search domain.
    rpc Post#DeleteRankExpression(Post#DeleteRankExpressionRequest) returns (DeleteRankExpressionResponse) {
      option (google.api.http) = {
        post: "//#DeleteRankExpression"
        body: "body"
      };
    }
    // Gets the availability options configured for a domain. By default, shows the configuration with any pending changes. Set the <code>Deployed</code> option to <code>true</code> to show the active configuration and exclude pending changes. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-availability-options.html" target="_blank">Configuring Availability Options</a> in the <i>Amazon CloudSearch Developer Guide</i>.
    rpc Post#DescribeAvailabilityOptions(Post#DescribeAvailabilityOptionsRequest) returns (DescribeAvailabilityOptionsResponse) {
      option (google.api.http) = {
        post: "//#DescribeAvailabilityOptions"
        body: "body"
      };
    }
    // Gets the default search field configured for the search domain.
    rpc Post#DescribeDefaultSearchField(Post#DescribeDefaultSearchFieldRequest) returns (DescribeDefaultSearchFieldResponse) {
      option (google.api.http) = {
        post: "//#DescribeDefaultSearchField"
        body: "body"
      };
    }
    // Gets information about the search domains owned by this account. Can be limited to specific domains. Shows all domains by default.
    rpc Post#DescribeDomains(Post#DescribeDomainsRequest) returns (DescribeDomainsResponse) {
      option (google.api.http) = {
        post: "//#DescribeDomains"
        body: "body"
      };
    }
    // Gets information about the index fields configured for the search domain. Can be limited to specific fields by name. Shows all fields by default.
    rpc Post#DescribeIndexFields(Post#DescribeIndexFieldsRequest) returns (DescribeIndexFieldsResponse) {
      option (google.api.http) = {
        post: "//#DescribeIndexFields"
        body: "body"
      };
    }
    // Gets the rank expressions configured for the search domain. Can be limited to specific rank expressions by name. Shows all rank expressions by default.
    rpc Post#DescribeRankExpressions(Post#DescribeRankExpressionsRequest) returns (DescribeRankExpressionsResponse) {
      option (google.api.http) = {
        post: "//#DescribeRankExpressions"
        body: "body"
      };
    }
    // Gets information about the resource-based policies that control access to the domain's document and search services.
    rpc Post#DescribeServiceAccessPolicies(Post#DescribeServiceAccessPoliciesRequest) returns (DescribeServiceAccessPoliciesResponse) {
      option (google.api.http) = {
        post: "//#DescribeServiceAccessPolicies"
        body: "body"
      };
    }
    // Gets the stemming dictionary configured for the search domain.
    rpc Post#DescribeStemmingOptions(Post#DescribeStemmingOptionsRequest) returns (DescribeStemmingOptionsResponse) {
      option (google.api.http) = {
        post: "//#DescribeStemmingOptions"
        body: "body"
      };
    }
    // Gets the stopwords configured for the search domain.
    rpc Post#DescribeStopwordOptions(Post#DescribeStopwordOptionsRequest) returns (DescribeStopwordOptionsResponse) {
      option (google.api.http) = {
        post: "//#DescribeStopwordOptions"
        body: "body"
      };
    }
    // Gets the synonym dictionary configured for the search domain.
    rpc Post#DescribeSynonymOptions(Post#DescribeSynonymOptionsRequest) returns (DescribeSynonymOptionsResponse) {
      option (google.api.http) = {
        post: "//#DescribeSynonymOptions"
        body: "body"
      };
    }
    // Tells the search domain to start indexing its documents using the latest text processing options and <code>IndexFields</code>. This operation must be invoked to make options whose <a>OptionStatus</a> has <code>OptionState</code> of <code>RequiresIndexDocuments</code> visible in search results.
    rpc Post#IndexDocuments(Post#IndexDocumentsRequest) returns (IndexDocumentsResponse) {
      option (google.api.http) = {
        post: "//#IndexDocuments"
        body: "body"
      };
    }
    // Configures the availability options for a domain. Enabling the Multi-AZ option expands an Amazon CloudSearch domain to an additional Availability Zone in the same Region to increase fault tolerance in the event of a service disruption. Changes to the Multi-AZ option can take about half an hour to become active. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-availability-options.html" target="_blank">Configuring Availability Options</a> in the <i>Amazon CloudSearch Developer Guide</i>.
    rpc Post#UpdateAvailabilityOptions(Post#UpdateAvailabilityOptionsRequest) returns (UpdateAvailabilityOptionsResponse) {
      option (google.api.http) = {
        post: "//#UpdateAvailabilityOptions"
        body: "body"
      };
    }
    // Configures the default search field for the search domain. The default search field is the text field that is searched when a search request does not specify which fields to search. By default, it is configured to include the contents of all of the domain's text fields.
    rpc Post#UpdateDefaultSearchField(Post#UpdateDefaultSearchFieldRequest) returns (UpdateDefaultSearchFieldResponse) {
      option (google.api.http) = {
        post: "//#UpdateDefaultSearchField"
        body: "body"
      };
    }
    // Configures the policies that control access to the domain's document and search services. The maximum size of an access policy document is 100 KB.
    rpc Post#UpdateServiceAccessPolicies(Post#UpdateServiceAccessPoliciesRequest) returns (UpdateServiceAccessPoliciesResponse) {
      option (google.api.http) = {
        post: "//#UpdateServiceAccessPolicies"
        body: "body"
      };
    }
    // Configures a stemming dictionary for the search domain. The stemming dictionary is used during indexing and when processing search requests. The maximum size of the stemming dictionary is 500 KB.
    rpc Post#UpdateStemmingOptions(Post#UpdateStemmingOptionsRequest) returns (UpdateStemmingOptionsResponse) {
      option (google.api.http) = {
        post: "//#UpdateStemmingOptions"
        body: "body"
      };
    }
    // Configures stopwords for the search domain. Stopwords are used during indexing and when processing search requests. The maximum size of the stopwords dictionary is 10 KB.
    rpc Post#UpdateStopwordOptions(Post#UpdateStopwordOptionsRequest) returns (UpdateStopwordOptionsResponse) {
      option (google.api.http) = {
        post: "//#UpdateStopwordOptions"
        body: "body"
      };
    }
    // Configures a synonym dictionary for the search domain. The synonym dictionary is used during indexing to configure mappings for terms that occur in text fields. The maximum size of the synonym dictionary is 100 KB.
    rpc Post#UpdateSynonymOptions(Post#UpdateSynonymOptionsRequest) returns (UpdateSynonymOptionsResponse) {
      option (google.api.http) = {
        post: "//#UpdateSynonymOptions"
        body: "body"
      };
    }
}

syntax = "proto3";

import "google/api/annotations.proto";

package amazoncloudsearch;

message PostRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    BuildSuggestersRequest body = 10;
}

message Post#CreateDomainRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateDomainRequest body = 10;
}

message Post#DefineAnalysisSchemeRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DefineAnalysisSchemeRequest body = 10;
}

message Post#DefineExpressionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DefineExpressionRequest body = 10;
}

message Post#DefineIndexFieldRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DefineIndexFieldRequest body = 10;
}

message Post#DefineSuggesterRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DefineSuggesterRequest body = 10;
}

message Post#DeleteAnalysisSchemeRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteAnalysisSchemeRequest body = 10;
}

message Post#DeleteDomainRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteDomainRequest body = 10;
}

message Post#DeleteExpressionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteExpressionRequest body = 10;
}

message Post#DeleteIndexFieldRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteIndexFieldRequest body = 10;
}

message Post#DeleteSuggesterRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteSuggesterRequest body = 10;
}

message Post#DescribeAnalysisSchemesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeAnalysisSchemesRequest body = 10;
}

message Post#DescribeAvailabilityOptionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeAvailabilityOptionsRequest body = 10;
}

message Post#DescribeDomainsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeDomainsRequest body = 10;
}

message Post#DescribeExpressionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeExpressionsRequest body = 10;
}

message Post#DescribeIndexFieldsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeIndexFieldsRequest body = 10;
}

message Post#DescribeScalingParametersRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeScalingParametersRequest body = 10;
}

message Post#DescribeServiceAccessPoliciesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeServiceAccessPoliciesRequest body = 10;
}

message Post#DescribeSuggestersRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeSuggestersRequest body = 10;
}

message Post#IndexDocumentsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    IndexDocumentsRequest body = 10;
}

message Post#ListDomainNamesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
}

message Post#UpdateAvailabilityOptionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateAvailabilityOptionsRequest body = 10;
}

message Post#UpdateScalingParametersRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateScalingParametersRequest body = 10;
}

message Post#UpdateServiceAccessPoliciesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateServiceAccessPoliciesRequest body = 10;
}

message AccessPoliciesStatus {
    string Options = 1;
    OptionStatus Status = 2;
}

enum AlgorithmicStemming {
    NONE = 0;
    MINIMAL = 1;
    LIGHT = 2;
    FULL = 3;
}

message AnalysisOptions {
    // The level of algorithmic stemming to perform: <code>none</code>, <code>minimal</code>, <code>light</code>, or <code>full</code>. The available levels vary depending on the language. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/text-processing.html#text-processing-settings" target="_blank">Language Specific Text Processing Settings</a> in the <i>Amazon CloudSearch Developer Guide</i>
    AlgorithmicStemming AlgorithmicStemming = 1;
    // A JSON array that contains a collection of terms, tokens, readings and part of speech for Japanese Tokenizaiton. The Japanese tokenization dictionary enables you to override the default tokenization for selected terms. This is only valid for Japanese language fields.
    string JapaneseTokenizationDictionary = 2;
    // A JSON object that contains a collection of string:value pairs that each map a term to its stem. For example, <code>{"term1": "stem1", "term2": "stem2", "term3": "stem3"}</code>. The stemming dictionary is applied in addition to any algorithmic stemming. This enables you to override the results of the algorithmic stemming to correct specific cases of overstemming or understemming. The maximum size of a stemming dictionary is 500 KB.
    string StemmingDictionary = 3;
    // A JSON array of terms to ignore during indexing and searching. For example, <code>["a", "an", "the", "of"]</code>. The stopwords dictionary must explicitly list each word you want to ignore. Wildcards and regular expressions are not supported.
    string Stopwords = 4;
    // A JSON object that defines synonym groups and aliases. A synonym group is an array of arrays, where each sub-array is a group of terms where each term in the group is considered a synonym of every other term in the group. The aliases value is an object that contains a collection of string:value pairs where the string specifies a term and the array of values specifies each of the aliases for that term. An alias is considered a synonym of the specified term, but the term is not considered a synonym of the alias. For more information about specifying synonyms, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-analysis-schemes.html#synonyms">Synonyms</a> in the <i>Amazon CloudSearch Developer Guide</i>.
    string Synonyms = 5;
}

message AnalysisScheme {
    AnalysisOptions AnalysisOptions = 1;
    AnalysisSchemeLanguage AnalysisSchemeLanguage = 2;
    string AnalysisSchemeName = 3;
}

enum AnalysisSchemeLanguage {
    AR = 0;
    BG = 1;
    CA = 2;
    CS = 3;
    DA = 4;
    DE = 5;
    EL = 6;
    EN = 7;
    ES = 8;
    EU = 9;
    FA = 10;
    FI = 11;
    FR = 12;
    GA = 13;
    GL = 14;
    HE = 15;
    HI = 16;
    HU = 17;
    HY = 18;
    ID = 19;
    IT = 20;
    JA = 21;
    KO = 22;
    LV = 23;
    MUL = 24;
    NL = 25;
    NO = 26;
    PT = 27;
    RO = 28;
    RU = 29;
    SV = 30;
    TH = 31;
    TR = 32;
    ZHHANS = 33;
    ZHHANT = 34;
}

message AnalysisSchemeStatus {
    AnalysisScheme Options = 1;
    OptionStatus Status = 2;
}

repeated AnalysisSchemeStatus AnalysisSchemeStatusList = 1

message AvailabilityOptionsStatus {
    // The availability options configured for the domain.
    boolean Options = 1;
    OptionStatus Status = 2;
}

message BaseException {
    string Code = 1;
    string Message = 2;
}

message BuildSuggestersRequest {
    string DomainName = 1;
}

message BuildSuggestersResponse {
    array FieldNames = 1;
}

message CreateDomainRequest {
    // A name for the domain you are creating. Allowed characters are a-z (lower-case letters), 0-9, and hyphen (-). Domain names must start with a letter or number and be at least 3 and no more than 28 characters long.
    string DomainName = 1;
}

message CreateDomainResponse {
    DomainStatus DomainStatus = 1;
}

message DateArrayOptions {
    // A value to use for the field if the field isn't specified for a document.
    string DefaultValue = 1;
    // Whether facet information can be returned for the field.
    boolean FacetEnabled = 2;
    // Whether the contents of the field can be returned in the search results.
    boolean ReturnEnabled = 3;
    // Whether the contents of the field are searchable.
    boolean SearchEnabled = 4;
    // A list of source fields to map to the field.
    string SourceFields = 5;
}

message DateOptions {
    // A value to use for the field if the field isn't specified for a document.
    string DefaultValue = 1;
    // Whether facet information can be returned for the field.
    boolean FacetEnabled = 2;
    // Whether the contents of the field can be returned in the search results.
    boolean ReturnEnabled = 3;
    // Whether the contents of the field are searchable.
    boolean SearchEnabled = 4;
    // Whether the field can be used to sort the search results.
    boolean SortEnabled = 5;
    string SourceField = 6;
}

message DefineAnalysisSchemeRequest {
    AnalysisScheme AnalysisScheme = 1;
    string DomainName = 2;
}

message DefineAnalysisSchemeResponse {
    AnalysisSchemeStatus AnalysisScheme = 1;
}

message DefineExpressionRequest {
    string DomainName = 1;
    Expression Expression = 2;
}

message DefineExpressionResponse {
    ExpressionStatus Expression = 1;
}

message DefineIndexFieldRequest {
    string DomainName = 1;
    // The index field and field options you want to configure.
    IndexField IndexField = 2;
}

message DefineIndexFieldResponse {
    IndexFieldStatus IndexField = 1;
}

message DefineSuggesterRequest {
    string DomainName = 1;
    Suggester Suggester = 2;
}

message DefineSuggesterResponse {
    SuggesterStatus Suggester = 1;
}

message DeleteAnalysisSchemeRequest {
    // The name of the analysis scheme you want to delete.
    string AnalysisSchemeName = 1;
    string DomainName = 2;
}

message DeleteAnalysisSchemeResponse {
    // The status of the analysis scheme being deleted.
    AnalysisSchemeStatus AnalysisScheme = 1;
}

message DeleteDomainRequest {
    // The name of the domain you want to permanently delete.
    string DomainName = 1;
}

message DeleteDomainResponse {
    DomainStatus DomainStatus = 1;
}

message DeleteExpressionRequest {
    string DomainName = 1;
    // The name of the <code><a>Expression</a></code> to delete.
    string ExpressionName = 2;
}

message DeleteExpressionResponse {
    // The status of the expression being deleted.
    ExpressionStatus Expression = 1;
}

message DeleteIndexFieldRequest {
    string DomainName = 1;
    // The name of the index field your want to remove from the domain's indexing options.
    string IndexFieldName = 2;
}

message DeleteIndexFieldResponse {
    // The status of the index field being deleted.
    IndexFieldStatus IndexField = 1;
}

message DeleteSuggesterRequest {
    string DomainName = 1;
    // Specifies the name of the suggester you want to delete.
    string SuggesterName = 2;
}

message DeleteSuggesterResponse {
    // The status of the suggester being deleted.
    SuggesterStatus Suggester = 1;
}

message DescribeAnalysisSchemesRequest {
    // The analysis schemes you want to describe.
    array AnalysisSchemeNames = 1;
    // Whether to display the deployed configuration (<code>true</code>) or include any pending changes (<code>false</code>). Defaults to <code>false</code>.
    boolean Deployed = 2;
    // The name of the domain you want to describe.
    string DomainName = 3;
}

message DescribeAnalysisSchemesResponse {
    // The analysis scheme descriptions.
    array AnalysisSchemes = 1;
}

message DescribeAvailabilityOptionsRequest {
    // Whether to display the deployed configuration (<code>true</code>) or include any pending changes (<code>false</code>). Defaults to <code>false</code>.
    boolean Deployed = 1;
    // The name of the domain you want to describe.
    string DomainName = 2;
}

message DescribeAvailabilityOptionsResponse {
    // The availability options configured for the domain. Indicates whether Multi-AZ is enabled for the domain.
    AvailabilityOptionsStatus AvailabilityOptions = 1;
}

message DescribeDomainsRequest {
    // The names of the domains you want to include in the response.
    array DomainNames = 1;
}

message DescribeDomainsResponse {
    array DomainStatusList = 1;
}

message DescribeExpressionsRequest {
    // Whether to display the deployed configuration (<code>true</code>) or include any pending changes (<code>false</code>). Defaults to <code>false</code>.
    boolean Deployed = 1;
    // The name of the domain you want to describe.
    string DomainName = 2;
    // Limits the <code><a>DescribeExpressions</a></code> response to the specified expressions. If not specified, all expressions are shown.
    array ExpressionNames = 3;
}

message DescribeExpressionsResponse {
    // The expressions configured for the domain.
    array Expressions = 1;
}

message DescribeIndexFieldsRequest {
    // Whether to display the deployed configuration (<code>true</code>) or include any pending changes (<code>false</code>). Defaults to <code>false</code>.
    boolean Deployed = 1;
    // The name of the domain you want to describe.
    string DomainName = 2;
    // A list of the index fields you want to describe. If not specified, information is returned for all configured index fields.
    array FieldNames = 3;
}

message DescribeIndexFieldsResponse {
    // The index fields configured for the domain.
    array IndexFields = 1;
}

message DescribeScalingParametersRequest {
    string DomainName = 1;
}

message DescribeScalingParametersResponse {
    ScalingParametersStatus ScalingParameters = 1;
}

message DescribeServiceAccessPoliciesRequest {
    // Whether to display the deployed configuration (<code>true</code>) or include any pending changes (<code>false</code>). Defaults to <code>false</code>.
    boolean Deployed = 1;
    // The name of the domain you want to describe.
    string DomainName = 2;
}

message DescribeServiceAccessPoliciesResponse {
    // The access rules configured for the domain specified in the request.
    AccessPoliciesStatus AccessPolicies = 1;
}

message DescribeSuggestersRequest {
    // Whether to display the deployed configuration (<code>true</code>) or include any pending changes (<code>false</code>). Defaults to <code>false</code>.
    boolean Deployed = 1;
    // The name of the domain you want to describe.
    string DomainName = 2;
    // The suggesters you want to describe.
    array SuggesterNames = 3;
}

message DescribeSuggestersResponse {
    // The suggesters configured for the domain specified in the request.
    array Suggesters = 1;
}

message DisabledOperationException {
}

message DocumentSuggesterOptions {
    // The level of fuzziness allowed when suggesting matches for a string: <code>none</code>, <code>low</code>, or <code>high</code>. With none, the specified string is treated as an exact prefix. With low, suggestions must differ from the specified string by no more than one character. With high, suggestions can differ by up to two characters. The default is none.
    SuggesterFuzzyMatching FuzzyMatching = 1;
    // An expression that computes a score for each suggestion to control how they are sorted. The scores are rounded to the nearest integer, with a floor of 0 and a ceiling of 2^31-1. A document's relevance score is not computed for suggestions, so sort expressions cannot reference the <code>_score</code> value. To sort suggestions using a numeric field or existing expression, simply specify the name of the field or expression. If no expression is configured for the suggester, the suggestions are sorted with the closest matches listed first.
    string SortExpression = 2;
    // The name of the index field you want to use for suggestions.
    string SourceField = 3;
}





repeated string DomainNameList = 1

message DomainNameMap {
    string key = 1;
    string value = 2;
}
repeated DomainNameMap DomainNameMap = 1

message DomainStatus {
    string ARN = 1;
    // True if the search domain is created. It can take several minutes to initialize a domain when <a>CreateDomain</a> is called. Newly created search domains are returned from <a>DescribeDomains</a> with a false value for Created until domain creation is complete.
    boolean Created = 2;
    // True if the search domain has been deleted. The system must clean up resources dedicated to the search domain when <a>DeleteDomain</a> is called. Newly deleted search domains are returned from <a>DescribeDomains</a> with a true value for IsDeleted for several minutes until resource cleanup is complete.
    boolean Deleted = 3;
    // The service endpoint for updating documents in a search domain.
    ServiceEndpoint DocService = 4;
    string DomainId = 5;
    string DomainName = 6;
    Limits Limits = 7;
    // True if processing is being done to activate the current domain configuration.
    boolean Processing = 8;
    // True if <a>IndexDocuments</a> needs to be called to activate the current domain configuration.
    boolean RequiresIndexDocuments = 9;
    // The number of search instances that are available to process search requests.
    integer SearchInstanceCount = 10;
    // The instance type that is being used to process search requests.
    string SearchInstanceType = 11;
    // The number of partitions across which the search index is spread.
    integer SearchPartitionCount = 12;
    // The service endpoint for requesting search results from a search domain.
    ServiceEndpoint SearchService = 13;
}

repeated DomainStatus DomainStatusList = 1



message DoubleArrayOptions {
    // A value to use for the field if the field isn't specified for a document.
    number DefaultValue = 1;
    // Whether facet information can be returned for the field.
    boolean FacetEnabled = 2;
    // Whether the contents of the field can be returned in the search results.
    boolean ReturnEnabled = 3;
    // Whether the contents of the field are searchable.
    boolean SearchEnabled = 4;
    // A list of source fields to map to the field.
    string SourceFields = 5;
}

message DoubleOptions {
    // A value to use for the field if the field isn't specified for a document. This can be important if you are using the field in an expression and that field is not present in every document.
    number DefaultValue = 1;
    // Whether facet information can be returned for the field.
    boolean FacetEnabled = 2;
    // Whether the contents of the field can be returned in the search results.
    boolean ReturnEnabled = 3;
    // Whether the contents of the field are searchable.
    boolean SearchEnabled = 4;
    // Whether the field can be used to sort the search results.
    boolean SortEnabled = 5;
    // The name of the source field to map to the field.
    string SourceField = 6;
}



repeated string DynamicFieldNameList = 1





message Expression {
    string ExpressionName = 1;
    string ExpressionValue = 2;
}

message ExpressionStatus {
    // The expression that is evaluated for sorting while processing a search request.
    Expression Options = 1;
    OptionStatus Status = 2;
}

repeated ExpressionStatus ExpressionStatusList = 1







repeated string FieldNameList = 1



message IndexDocumentsRequest {
    string DomainName = 1;
}

message IndexDocumentsResponse {
    // The names of the fields that are currently being indexed.
    array FieldNames = 1;
}

message IndexField {
    DateArrayOptions DateArrayOptions = 1;
    DateOptions DateOptions = 2;
    DoubleArrayOptions DoubleArrayOptions = 3;
    DoubleOptions DoubleOptions = 4;
    // <p>A string that represents the name of an index field. CloudSearch supports regular index fields as well as dynamic fields. A dynamic field's name defines a pattern that begins or ends with a wildcard. Any document fields that don't map to a regular index field but do match a dynamic field's pattern are configured with the dynamic field's indexing options. </p> <p>Regular field names begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore). Dynamic field names must begin or end with a wildcard (*). The wildcard can also be the only character in a dynamic field name. Multiple wildcards, and wildcards embedded within a string are not supported. </p> <p>The name <code>score</code> is reserved and cannot be used as a field name. To reference a document's ID, you can use the name <code>_id</code>. </p>
    string IndexFieldName = 5;
    IndexFieldType IndexFieldType = 6;
    IntArrayOptions IntArrayOptions = 7;
    IntOptions IntOptions = 8;
    LatLonOptions LatLonOptions = 9;
    LiteralArrayOptions LiteralArrayOptions = 10;
    LiteralOptions LiteralOptions = 11;
    TextArrayOptions TextArrayOptions = 12;
    TextOptions TextOptions = 13;
}

message IndexFieldStatus {
    IndexField Options = 1;
    OptionStatus Status = 2;
}

repeated IndexFieldStatus IndexFieldStatusList = 1

enum IndexFieldType {
    INT = 0;
    DOUBLE = 1;
    LITERAL = 2;
    TEXT = 3;
    DATE = 4;
    LATLON = 5;
    INTARRAY = 6;
    DOUBLEARRAY = 7;
    LITERALARRAY = 8;
    TEXTARRAY = 9;
    DATEARRAY = 10;
}

message IntArrayOptions {
    // A value to use for the field if the field isn't specified for a document.
    integer DefaultValue = 1;
    // Whether facet information can be returned for the field.
    boolean FacetEnabled = 2;
    // Whether the contents of the field can be returned in the search results.
    boolean ReturnEnabled = 3;
    // Whether the contents of the field are searchable.
    boolean SearchEnabled = 4;
    // A list of source fields to map to the field.
    string SourceFields = 5;
}

message IntOptions {
    // A value to use for the field if the field isn't specified for a document. This can be important if you are using the field in an expression and that field is not present in every document.
    integer DefaultValue = 1;
    // Whether facet information can be returned for the field.
    boolean FacetEnabled = 2;
    // Whether the contents of the field can be returned in the search results.
    boolean ReturnEnabled = 3;
    // Whether the contents of the field are searchable.
    boolean SearchEnabled = 4;
    // Whether the field can be used to sort the search results.
    boolean SortEnabled = 5;
    // The name of the source field to map to the field.
    string SourceField = 6;
}

message InternalException {
}

message InvalidTypeException {
}

message LatLonOptions {
    // A value to use for the field if the field isn't specified for a document.
    string DefaultValue = 1;
    // Whether facet information can be returned for the field.
    boolean FacetEnabled = 2;
    // Whether the contents of the field can be returned in the search results.
    boolean ReturnEnabled = 3;
    // Whether the contents of the field are searchable.
    boolean SearchEnabled = 4;
    // Whether the field can be used to sort the search results.
    boolean SortEnabled = 5;
    string SourceField = 6;
}

message LimitExceededException {
}

message Limits {
    integer MaximumPartitionCount = 1;
    integer MaximumReplicationCount = 2;
}

message ListDomainNamesResponse {
    // The names of the search domains owned by an account.
    array DomainNames = 1;
}

message LiteralArrayOptions {
    // A value to use for the field if the field isn't specified for a document.
    string DefaultValue = 1;
    // Whether facet information can be returned for the field.
    boolean FacetEnabled = 2;
    // Whether the contents of the field can be returned in the search results.
    boolean ReturnEnabled = 3;
    // Whether the contents of the field are searchable.
    boolean SearchEnabled = 4;
    // A list of source fields to map to the field.
    string SourceFields = 5;
}

message LiteralOptions {
    // A value to use for the field if the field isn't specified for a document.
    string DefaultValue = 1;
    // Whether facet information can be returned for the field.
    boolean FacetEnabled = 2;
    // Whether the contents of the field can be returned in the search results.
    boolean ReturnEnabled = 3;
    // Whether the contents of the field are searchable.
    boolean SearchEnabled = 4;
    // Whether the field can be used to sort the search results.
    boolean SortEnabled = 5;
    string SourceField = 6;
}

enum OptionState {
    REQUIRESINDEXDOCUMENTS = 0;
    PROCESSING = 1;
    ACTIVE = 2;
    FAILEDTOVALIDATE = 3;
}

message OptionStatus {
    // A timestamp for when this option was created.
    string CreationDate = 1;
    // Indicates that the option will be deleted once processing is complete.
    boolean PendingDeletion = 2;
    // <p>The state of processing a change to an option. Possible values:</p> <ul> <li> <code>RequiresIndexDocuments</code>: the option's latest value will not be deployed until <a>IndexDocuments</a> has been called and indexing is complete.</li> <li> <code>Processing</code>: the option's latest value is in the process of being activated. </li> <li> <code>Active</code>: the option's latest value is completely deployed.</li> <li> <code>FailedToValidate</code>: the option value is not compatible with the domain's data and cannot be used to index the data. You must either modify the option value or update or remove the incompatible documents.</li> </ul>
    OptionState State = 3;
    // A timestamp for when this option was last updated.
    string UpdateDate = 4;
    // A unique integer that indicates when this option was last updated.
    integer UpdateVersion = 5;
}

enum PartitionInstanceType {
    SEARCHM1SMALL = 0;
    SEARCHM1LARGE = 1;
    SEARCHM2XLARGE = 2;
    SEARCHM22XLARGE = 3;
    SEARCHM3MEDIUM = 4;
    SEARCHM3LARGE = 5;
    SEARCHM3XLARGE = 6;
    SEARCHM32XLARGE = 7;
}

message ResourceNotFoundException {
}

message ScalingParameters {
    // The instance type that you want to preconfigure for your domain. For example, <code>search.m1.small</code>.
    PartitionInstanceType DesiredInstanceType = 1;
    // The number of partitions you want to preconfigure for your domain. Only valid when you select <code>m2.2xlarge</code> as the desired instance type.
    integer DesiredPartitionCount = 2;
    // The number of replicas you want to preconfigure for each index partition.
    integer DesiredReplicationCount = 3;
}

message ScalingParametersStatus {
    ScalingParameters Options = 1;
    OptionStatus Status = 2;
}

message ServiceEndpoint {
    string Endpoint = 1;
}





repeated string StandardNameList = 1



message Suggester {
    DocumentSuggesterOptions DocumentSuggesterOptions = 1;
    string SuggesterName = 2;
}

enum SuggesterFuzzyMatching {
    NONE = 0;
    LOW = 1;
    HIGH = 2;
}

message SuggesterStatus {
    Suggester Options = 1;
    OptionStatus Status = 2;
}

repeated SuggesterStatus SuggesterStatusList = 1

message TextArrayOptions {
    // The name of an analysis scheme for a <code>text-array</code> field.
    string AnalysisScheme = 1;
    // A value to use for the field if the field isn't specified for a document.
    string DefaultValue = 2;
    // Whether highlights can be returned for the field.
    boolean HighlightEnabled = 3;
    // Whether the contents of the field can be returned in the search results.
    boolean ReturnEnabled = 4;
    // A list of source fields to map to the field.
    string SourceFields = 5;
}

message TextOptions {
    // The name of an analysis scheme for a <code>text</code> field.
    string AnalysisScheme = 1;
    // A value to use for the field if the field isn't specified for a document.
    string DefaultValue = 2;
    // Whether highlights can be returned for the field.
    boolean HighlightEnabled = 3;
    // Whether the contents of the field can be returned in the search results.
    boolean ReturnEnabled = 4;
    // Whether the field can be used to sort the search results.
    boolean SortEnabled = 5;
    string SourceField = 6;
}

message UpdateAvailabilityOptionsRequest {
    string DomainName = 1;
    // You expand an existing search domain to a second Availability Zone by setting the Multi-AZ option to true. Similarly, you can turn off the Multi-AZ option to downgrade the domain to a single Availability Zone by setting the Multi-AZ option to <code>false</code>.
    boolean MultiAZ = 2;
}

message UpdateAvailabilityOptionsResponse {
    // The newly-configured availability options. Indicates whether Multi-AZ is enabled for the domain.
    AvailabilityOptionsStatus AvailabilityOptions = 1;
}

message UpdateScalingParametersRequest {
    string DomainName = 1;
    ScalingParameters ScalingParameters = 2;
}

message UpdateScalingParametersResponse {
    ScalingParametersStatus ScalingParameters = 1;
}

message UpdateServiceAccessPoliciesRequest {
    // The access rules you want to configure. These rules replace any existing rules.
    string AccessPolicies = 1;
    string DomainName = 2;
}

message UpdateServiceAccessPoliciesResponse {
    // The access rules configured for the domain.
    AccessPoliciesStatus AccessPolicies = 1;
}

service AmazonCloudSearchService {
    // Indexes the search suggestions. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/getting-suggestions.html#configuring-suggesters">Configuring Suggesters</a> in the <i>Amazon CloudSearch Developer Guide</i>.
    rpc Post(PostRequest) returns (BuildSuggestersResponse) {
      option (google.api.http) = {
        post: "//"
        body: "body"
      };
    }
    // Creates a new search domain. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/creating-domains.html" target="_blank">Creating a Search Domain</a> in the <i>Amazon CloudSearch Developer Guide</i>.
    rpc Post#CreateDomain(Post#CreateDomainRequest) returns (CreateDomainResponse) {
      option (google.api.http) = {
        post: "//#CreateDomain"
        body: "body"
      };
    }
    // Configures an analysis scheme that can be applied to a <code>text</code> or <code>text-array</code> field to define language-specific text processing options. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-analysis-schemes.html" target="_blank">Configuring Analysis Schemes</a> in the <i>Amazon CloudSearch Developer Guide</i>.
    rpc Post#DefineAnalysisScheme(Post#DefineAnalysisSchemeRequest) returns (DefineAnalysisSchemeResponse) {
      option (google.api.http) = {
        post: "//#DefineAnalysisScheme"
        body: "body"
      };
    }
    // Configures an <code><a>Expression</a></code> for the search domain. Used to create new expressions and modify existing ones. If the expression exists, the new configuration replaces the old one. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-expressions.html" target="_blank">Configuring Expressions</a> in the <i>Amazon CloudSearch Developer Guide</i>.
    rpc Post#DefineExpression(Post#DefineExpressionRequest) returns (DefineExpressionResponse) {
      option (google.api.http) = {
        post: "//#DefineExpression"
        body: "body"
      };
    }
    // Configures an <code><a>IndexField</a></code> for the search domain. Used to create new fields and modify existing ones. You must specify the name of the domain you are configuring and an index field configuration. The index field configuration specifies a unique name, the index field type, and the options you want to configure for the field. The options you can specify depend on the <code><a>IndexFieldType</a></code>. If the field exists, the new configuration replaces the old one. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-index-fields.html" target="_blank">Configuring Index Fields</a> in the <i>Amazon CloudSearch Developer Guide</i>.
    rpc Post#DefineIndexField(Post#DefineIndexFieldRequest) returns (DefineIndexFieldResponse) {
      option (google.api.http) = {
        post: "//#DefineIndexField"
        body: "body"
      };
    }
    // Configures a suggester for a domain. A suggester enables you to display possible matches before users finish typing their queries. When you configure a suggester, you must specify the name of the text field you want to search for possible matches and a unique name for the suggester. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/getting-suggestions.html" target="_blank">Getting Search Suggestions</a> in the <i>Amazon CloudSearch Developer Guide</i>.
    rpc Post#DefineSuggester(Post#DefineSuggesterRequest) returns (DefineSuggesterResponse) {
      option (google.api.http) = {
        post: "//#DefineSuggester"
        body: "body"
      };
    }
    // Deletes an analysis scheme. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-analysis-schemes.html" target="_blank">Configuring Analysis Schemes</a> in the <i>Amazon CloudSearch Developer Guide</i>.
    rpc Post#DeleteAnalysisScheme(Post#DeleteAnalysisSchemeRequest) returns (DeleteAnalysisSchemeResponse) {
      option (google.api.http) = {
        post: "//#DeleteAnalysisScheme"
        body: "body"
      };
    }
    // Permanently deletes a search domain and all of its data. Once a domain has been deleted, it cannot be recovered. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/deleting-domains.html" target="_blank">Deleting a Search Domain</a> in the <i>Amazon CloudSearch Developer Guide</i>.
    rpc Post#DeleteDomain(Post#DeleteDomainRequest) returns (DeleteDomainResponse) {
      option (google.api.http) = {
        post: "//#DeleteDomain"
        body: "body"
      };
    }
    // Removes an <code><a>Expression</a></code> from the search domain. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-expressions.html" target="_blank">Configuring Expressions</a> in the <i>Amazon CloudSearch Developer Guide</i>.
    rpc Post#DeleteExpression(Post#DeleteExpressionRequest) returns (DeleteExpressionResponse) {
      option (google.api.http) = {
        post: "//#DeleteExpression"
        body: "body"
      };
    }
    // Removes an <code><a>IndexField</a></code> from the search domain. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-index-fields.html" target="_blank">Configuring Index Fields</a> in the <i>Amazon CloudSearch Developer Guide</i>.
    rpc Post#DeleteIndexField(Post#DeleteIndexFieldRequest) returns (DeleteIndexFieldResponse) {
      option (google.api.http) = {
        post: "//#DeleteIndexField"
        body: "body"
      };
    }
    // Deletes a suggester. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/getting-suggestions.html" target="_blank">Getting Search Suggestions</a> in the <i>Amazon CloudSearch Developer Guide</i>.
    rpc Post#DeleteSuggester(Post#DeleteSuggesterRequest) returns (DeleteSuggesterResponse) {
      option (google.api.http) = {
        post: "//#DeleteSuggester"
        body: "body"
      };
    }
    // Gets the analysis schemes configured for a domain. An analysis scheme defines language-specific text processing options for a <code>text</code> field. Can be limited to specific analysis schemes by name. By default, shows all analysis schemes and includes any pending changes to the configuration. Set the <code>Deployed</code> option to <code>true</code> to show the active configuration and exclude pending changes. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-analysis-schemes.html" target="_blank">Configuring Analysis Schemes</a> in the <i>Amazon CloudSearch Developer Guide</i>.
    rpc Post#DescribeAnalysisSchemes(Post#DescribeAnalysisSchemesRequest) returns (DescribeAnalysisSchemesResponse) {
      option (google.api.http) = {
        post: "//#DescribeAnalysisSchemes"
        body: "body"
      };
    }
    // Gets the availability options configured for a domain. By default, shows the configuration with any pending changes. Set the <code>Deployed</code> option to <code>true</code> to show the active configuration and exclude pending changes. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-availability-options.html" target="_blank">Configuring Availability Options</a> in the <i>Amazon CloudSearch Developer Guide</i>.
    rpc Post#DescribeAvailabilityOptions(Post#DescribeAvailabilityOptionsRequest) returns (DescribeAvailabilityOptionsResponse) {
      option (google.api.http) = {
        post: "//#DescribeAvailabilityOptions"
        body: "body"
      };
    }
    // Gets information about the search domains owned by this account. Can be limited to specific domains. Shows all domains by default. To get the number of searchable documents in a domain, use the console or submit a <code>matchall</code> request to your domain's search endpoint: <code>q=matchall&amp;amp;q.parser=structured&amp;amp;size=0</code>. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/getting-domain-info.html" target="_blank">Getting Information about a Search Domain</a> in the <i>Amazon CloudSearch Developer Guide</i>.
    rpc Post#DescribeDomains(Post#DescribeDomainsRequest) returns (DescribeDomainsResponse) {
      option (google.api.http) = {
        post: "//#DescribeDomains"
        body: "body"
      };
    }
    // Gets the expressions configured for the search domain. Can be limited to specific expressions by name. By default, shows all expressions and includes any pending changes to the configuration. Set the <code>Deployed</code> option to <code>true</code> to show the active configuration and exclude pending changes. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-expressions.html" target="_blank">Configuring Expressions</a> in the <i>Amazon CloudSearch Developer Guide</i>.
    rpc Post#DescribeExpressions(Post#DescribeExpressionsRequest) returns (DescribeExpressionsResponse) {
      option (google.api.http) = {
        post: "//#DescribeExpressions"
        body: "body"
      };
    }
    // Gets information about the index fields configured for the search domain. Can be limited to specific fields by name. By default, shows all fields and includes any pending changes to the configuration. Set the <code>Deployed</code> option to <code>true</code> to show the active configuration and exclude pending changes. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/getting-domain-info.html" target="_blank">Getting Domain Information</a> in the <i>Amazon CloudSearch Developer Guide</i>.
    rpc Post#DescribeIndexFields(Post#DescribeIndexFieldsRequest) returns (DescribeIndexFieldsResponse) {
      option (google.api.http) = {
        post: "//#DescribeIndexFields"
        body: "body"
      };
    }
    // Gets the scaling parameters configured for a domain. A domain's scaling parameters specify the desired search instance type and replication count. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-scaling-options.html" target="_blank">Configuring Scaling Options</a> in the <i>Amazon CloudSearch Developer Guide</i>.
    rpc Post#DescribeScalingParameters(Post#DescribeScalingParametersRequest) returns (DescribeScalingParametersResponse) {
      option (google.api.http) = {
        post: "//#DescribeScalingParameters"
        body: "body"
      };
    }
    // Gets information about the access policies that control access to the domain's document and search endpoints. By default, shows the configuration with any pending changes. Set the <code>Deployed</code> option to <code>true</code> to show the active configuration and exclude pending changes. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-access.html" target="_blank">Configuring Access for a Search Domain</a> in the <i>Amazon CloudSearch Developer Guide</i>.
    rpc Post#DescribeServiceAccessPolicies(Post#DescribeServiceAccessPoliciesRequest) returns (DescribeServiceAccessPoliciesResponse) {
      option (google.api.http) = {
        post: "//#DescribeServiceAccessPolicies"
        body: "body"
      };
    }
    // Gets the suggesters configured for a domain. A suggester enables you to display possible matches before users finish typing their queries. Can be limited to specific suggesters by name. By default, shows all suggesters and includes any pending changes to the configuration. Set the <code>Deployed</code> option to <code>true</code> to show the active configuration and exclude pending changes. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/getting-suggestions.html" target="_blank">Getting Search Suggestions</a> in the <i>Amazon CloudSearch Developer Guide</i>.
    rpc Post#DescribeSuggesters(Post#DescribeSuggestersRequest) returns (DescribeSuggestersResponse) {
      option (google.api.http) = {
        post: "//#DescribeSuggesters"
        body: "body"
      };
    }
    // Tells the search domain to start indexing its documents using the latest indexing options. This operation must be invoked to activate options whose <a>OptionStatus</a> is <code>RequiresIndexDocuments</code>.
    rpc Post#IndexDocuments(Post#IndexDocumentsRequest) returns (IndexDocumentsResponse) {
      option (google.api.http) = {
        post: "//#IndexDocuments"
        body: "body"
      };
    }
    // Lists all search domains owned by an account.
    rpc Post#ListDomainNames(Post#ListDomainNamesRequest) returns (ListDomainNamesResponse) {
      option (google.api.http) = {
        post: "//#ListDomainNames"
      };
    }
    // Configures the availability options for a domain. Enabling the Multi-AZ option expands an Amazon CloudSearch domain to an additional Availability Zone in the same Region to increase fault tolerance in the event of a service disruption. Changes to the Multi-AZ option can take about half an hour to become active. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-availability-options.html" target="_blank">Configuring Availability Options</a> in the <i>Amazon CloudSearch Developer Guide</i>.
    rpc Post#UpdateAvailabilityOptions(Post#UpdateAvailabilityOptionsRequest) returns (UpdateAvailabilityOptionsResponse) {
      option (google.api.http) = {
        post: "//#UpdateAvailabilityOptions"
        body: "body"
      };
    }
    // Configures scaling parameters for a domain. A domain's scaling parameters specify the desired search instance type and replication count. Amazon CloudSearch will still automatically scale your domain based on the volume of data and traffic, but not below the desired instance type and replication count. If the Multi-AZ option is enabled, these values control the resources used per Availability Zone. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-scaling-options.html" target="_blank">Configuring Scaling Options</a> in the <i>Amazon CloudSearch Developer Guide</i>.
    rpc Post#UpdateScalingParameters(Post#UpdateScalingParametersRequest) returns (UpdateScalingParametersResponse) {
      option (google.api.http) = {
        post: "//#UpdateScalingParameters"
        body: "body"
      };
    }
    // Configures the access rules that control access to the domain's document and search endpoints. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-access.html" target="_blank"> Configuring Access for an Amazon CloudSearch Domain</a>.
    rpc Post#UpdateServiceAccessPolicies(Post#UpdateServiceAccessPoliciesRequest) returns (UpdateServiceAccessPoliciesResponse) {
      option (google.api.http) = {
        post: "//#UpdateServiceAccessPolicies"
        body: "body"
      };
    }
}

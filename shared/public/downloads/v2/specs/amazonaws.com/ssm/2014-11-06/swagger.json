{
  "swagger": "2.0",
  "schemes": [
    "http"
  ],
  "host": "ssm.amazonaws.com",
  "basePath": "/",
  "x-hasEquivalentPaths": true,
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi"
    },
    "description": "<fullname>Amazon EC2 Systems Manager</fullname> <p>Amazon EC2 Systems Manager is a collection of capabilities that helps you automate management tasks such as collecting system inventory, applying operating system (OS) patches, automating the creation of Amazon Machine Images (AMIs), and configuring operating systems (OSs) and applications at scale. Systems Manager lets you remotely and securely manage the configuration of your managed instances. A <i>managed instance</i> is any Amazon EC2 instance or on-premises machine in your hybrid environment that has been configured for Systems Manager.</p> <p>This reference is intended to be used with the <a href=\"http://docs.aws.amazon.com/systems-manager/latest/userguide/\">Amazon EC2 Systems Manager User Guide</a>.</p> <p>To get started, verify prerequisites and configure managed instances. For more information, see <a href=\"http://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up.html\">Systems Manager Prerequisites</a>.</p> <p>For information about other API actions you can perform on Amazon EC2 instances, see the <a href=\"http://docs.aws.amazon.com/AWSEC2/latest/APIReference/\">Amazon EC2 API Reference</a>. For information about how to use a Query API, see <a href=\"http://docs.aws.amazon.com/AWSEC2/latest/APIReference/making-api-requests.html\">Making API Requests</a>. </p>",
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "Amazon Simple Systems Manager (SSM)",
    "version": "2014-11-06",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": [
      "cloud"
    ],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_media.amazonwebservices.com_blog_2007_big_pbaws_logo_300px.jpg"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": {
          "url": "https://github.com/mermade/aws2openapi",
          "version": "1.0.0"
        },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/ssm-2014-11-06.normal.json",
        "x-apisguru-direct": true
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "ssm"
  },
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://aws.amazon.com/ssm/"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "hmac": {
      "description": "Amazon Signature authorization v4",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey",
      "x-amazon-apigateway-authtype": "awsSigv4"
    }
  },
  "security": [
    {
      "hmac": []
    }
  ],
  "parameters": {
    "Action": {
      "in": "header",
      "name": "Action",
      "required": true,
      "type": "string"
    },
    "Version": {
      "in": "header",
      "name": "Version",
      "required": true,
      "type": "string"
    },
    "X-Amz-Algorithm": {
      "in": "header",
      "name": "X-Amz-Algorithm",
      "required": false,
      "type": "string"
    },
    "X-Amz-Content-Sha256": {
      "in": "header",
      "name": "X-Amz-Content-Sha256",
      "required": false,
      "type": "string"
    },
    "X-Amz-Credential": {
      "in": "header",
      "name": "X-Amz-Credential",
      "required": false,
      "type": "string"
    },
    "X-Amz-Date": {
      "in": "header",
      "name": "X-Amz-Date",
      "required": false,
      "type": "string"
    },
    "X-Amz-Security-Token": {
      "in": "header",
      "name": "X-Amz-Security-Token",
      "required": false,
      "type": "string"
    },
    "X-Amz-Signature": {
      "in": "header",
      "name": "X-Amz-Signature",
      "required": false,
      "type": "string"
    },
    "X-Amz-SignedHeaders": {
      "in": "header",
      "name": "X-Amz-SignedHeaders",
      "required": false,
      "type": "string"
    }
  },
  "paths": {
    "/": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Adds or overwrites one or more tags for the specified resource. Tags are metadata that you can assign to your documents, managed instances, Maintenance Windows, Parameter Store parameters, and patch baselines. Tags enable you to categorize your resources in different ways, for example, by purpose, owner, or environment. Each tag consists of a key and an optional value, both of which you define. For example, you could define a set of tags for your account's managed instances that helps you track each instance's owner and stack level. For example: Key=Owner and Value=DbAdmin, SysAdmin, or Dev. Or Key=Stack and Value=Production, Pre-Production, or Test.</p> <p>Each resource can have a maximum of 10 tags. </p> <p>We recommend that you devise a set of tag keys that meets your needs for each resource type. Using a consistent set of tag keys makes it easier for you to manage your resources. You can search and filter the resources based on the tags you add. Tags don't have any semantic meaning to Amazon EC2 and are interpreted strictly as a string of characters. </p> <p>For more information about tags, see <a href=\"http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html\">Tagging Your Amazon EC2 Resources</a> in the <i>Amazon EC2 User Guide</i>.</p>",
        "operationId": "AddTagsToResource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddTagsToResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AddTagsToResourceResult"
            }
          },
          "480": {
            "description": "InvalidResourceType",
            "schema": {
              "$ref": "#/definitions/InvalidResourceType"
            }
          },
          "481": {
            "description": "InvalidResourceId",
            "schema": {
              "$ref": "#/definitions/InvalidResourceId"
            }
          },
          "482": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "483": {
            "description": "TooManyTagsError",
            "schema": {
              "$ref": "#/definitions/TooManyTagsError"
            }
          }
        }
      }
    },
    "/#CancelCommand": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Attempts to cancel the command specified by the Command ID. There is no guarantee that the command will be terminated and the underlying process stopped.",
        "operationId": "CancelCommand",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancelCommandRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CancelCommandResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidCommandId",
            "schema": {
              "$ref": "#/definitions/InvalidCommandId"
            }
          },
          "482": {
            "description": "InvalidInstanceId",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceId"
            }
          },
          "483": {
            "description": "DuplicateInstanceId",
            "schema": {
              "$ref": "#/definitions/DuplicateInstanceId"
            }
          }
        }
      }
    },
    "/#CreateActivation": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Registers your on-premises server or virtual machine with Amazon EC2 so that you can manage these resources using Run Command. An on-premises server or virtual machine that has been registered with EC2 is called a managed instance. For more information about activations, see <a href=\"http://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-managedinstances.html\">Setting Up Systems Manager in Hybrid Environments</a>.",
        "operationId": "CreateActivation",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateActivationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateActivationResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#CreateAssociation": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Associates the specified Systems Manager document with the specified instances or targets.</p> <p>When you associate a document with one or more instances using instance IDs or tags, the SSM Agent running on the instance processes the document and configures the instance as specified.</p> <p>If you associate a document with an instance that already has an associated document, the system throws the AssociationAlreadyExists exception.</p>",
        "operationId": "CreateAssociation",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAssociationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateAssociationResult"
            }
          },
          "480": {
            "description": "AssociationAlreadyExists",
            "schema": {
              "$ref": "#/definitions/AssociationAlreadyExists"
            }
          },
          "481": {
            "description": "AssociationLimitExceeded",
            "schema": {
              "$ref": "#/definitions/AssociationLimitExceeded"
            }
          },
          "482": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "483": {
            "description": "InvalidDocument",
            "schema": {
              "$ref": "#/definitions/InvalidDocument"
            }
          },
          "484": {
            "description": "InvalidDocumentVersion",
            "schema": {
              "$ref": "#/definitions/InvalidDocumentVersion"
            }
          },
          "485": {
            "description": "InvalidInstanceId",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceId"
            }
          },
          "486": {
            "description": "UnsupportedPlatformType",
            "schema": {
              "$ref": "#/definitions/UnsupportedPlatformType"
            }
          },
          "487": {
            "description": "InvalidOutputLocation",
            "schema": {
              "$ref": "#/definitions/InvalidOutputLocation"
            }
          },
          "488": {
            "description": "InvalidParameters",
            "schema": {
              "$ref": "#/definitions/InvalidParameters"
            }
          },
          "489": {
            "description": "InvalidTarget",
            "schema": {
              "$ref": "#/definitions/InvalidTarget"
            }
          },
          "490": {
            "description": "InvalidSchedule",
            "schema": {
              "$ref": "#/definitions/InvalidSchedule"
            }
          }
        }
      }
    },
    "/#CreateAssociationBatch": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Associates the specified Systems Manager document with the specified instances or targets.</p> <p>When you associate a document with one or more instances using instance IDs or tags, the SSM Agent running on the instance processes the document and configures the instance as specified.</p> <p>If you associate a document with an instance that already has an associated document, the system throws the AssociationAlreadyExists exception.</p>",
        "operationId": "CreateAssociationBatch",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAssociationBatchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateAssociationBatchResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidDocument",
            "schema": {
              "$ref": "#/definitions/InvalidDocument"
            }
          },
          "482": {
            "description": "InvalidDocumentVersion",
            "schema": {
              "$ref": "#/definitions/InvalidDocumentVersion"
            }
          },
          "483": {
            "description": "InvalidInstanceId",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceId"
            }
          },
          "484": {
            "description": "InvalidParameters",
            "schema": {
              "$ref": "#/definitions/InvalidParameters"
            }
          },
          "485": {
            "description": "DuplicateInstanceId",
            "schema": {
              "$ref": "#/definitions/DuplicateInstanceId"
            }
          },
          "486": {
            "description": "AssociationLimitExceeded",
            "schema": {
              "$ref": "#/definitions/AssociationLimitExceeded"
            }
          },
          "487": {
            "description": "UnsupportedPlatformType",
            "schema": {
              "$ref": "#/definitions/UnsupportedPlatformType"
            }
          },
          "488": {
            "description": "InvalidOutputLocation",
            "schema": {
              "$ref": "#/definitions/InvalidOutputLocation"
            }
          },
          "489": {
            "description": "InvalidTarget",
            "schema": {
              "$ref": "#/definitions/InvalidTarget"
            }
          },
          "490": {
            "description": "InvalidSchedule",
            "schema": {
              "$ref": "#/definitions/InvalidSchedule"
            }
          }
        }
      }
    },
    "/#CreateDocument": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Creates a Systems Manager document.</p> <p>After you create a document, you can use CreateAssociation to associate it with one or more running instances.</p>",
        "operationId": "CreateDocument",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDocumentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateDocumentResult"
            }
          },
          "480": {
            "description": "DocumentAlreadyExists",
            "schema": {
              "$ref": "#/definitions/DocumentAlreadyExists"
            }
          },
          "481": {
            "description": "MaxDocumentSizeExceeded",
            "schema": {
              "$ref": "#/definitions/MaxDocumentSizeExceeded"
            }
          },
          "482": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "483": {
            "description": "InvalidDocumentContent",
            "schema": {
              "$ref": "#/definitions/InvalidDocumentContent"
            }
          },
          "484": {
            "description": "DocumentLimitExceeded",
            "schema": {
              "$ref": "#/definitions/DocumentLimitExceeded"
            }
          },
          "485": {
            "description": "InvalidDocumentSchemaVersion",
            "schema": {
              "$ref": "#/definitions/InvalidDocumentSchemaVersion"
            }
          }
        }
      }
    },
    "/#CreateMaintenanceWindow": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a new Maintenance Window.",
        "operationId": "CreateMaintenanceWindow",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateMaintenanceWindowRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateMaintenanceWindowResult"
            }
          },
          "480": {
            "description": "IdempotentParameterMismatch",
            "schema": {
              "$ref": "#/definitions/IdempotentParameterMismatch"
            }
          },
          "481": {
            "description": "ResourceLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceLimitExceededException"
            }
          },
          "482": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#CreatePatchBaseline": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a patch baseline.",
        "operationId": "CreatePatchBaseline",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreatePatchBaselineRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreatePatchBaselineResult"
            }
          },
          "480": {
            "description": "IdempotentParameterMismatch",
            "schema": {
              "$ref": "#/definitions/IdempotentParameterMismatch"
            }
          },
          "481": {
            "description": "ResourceLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceLimitExceededException"
            }
          },
          "482": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#CreateResourceDataSync": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Creates a resource data sync configuration to a single bucket in Amazon S3. This is an asynchronous operation that returns immediately. After a successful initial sync is completed, the system continuously syncs data to the Amazon S3 bucket. To check the status of the sync, use the <a href=\"API_ListResourceDataSync.html\">ListResourceDataSync</a> operation.</p> <p>By default, data is not encrypted in Amazon S3. We strongly recommend that you enable encryption in Amazon S3 to ensure secure data storage. We also recommend that you secure access to the Amazon S3 bucket by creating a restrictive bucket policy. To view an example of a restrictive Amazon S3 bucket policy for Resource Data Sync, see <a href=\"http://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-inventory-configuring.html#sysman-inventory-datasync\">Configuring Resource Data Sync for Inventory</a>.</p>",
        "operationId": "CreateResourceDataSync",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateResourceDataSyncRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateResourceDataSyncResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "ResourceDataSyncCountExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceDataSyncCountExceededException"
            }
          },
          "482": {
            "description": "ResourceDataSyncAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceDataSyncAlreadyExistsException"
            }
          },
          "483": {
            "description": "ResourceDataSyncInvalidConfigurationException",
            "schema": {
              "$ref": "#/definitions/ResourceDataSyncInvalidConfigurationException"
            }
          }
        }
      }
    },
    "/#DeleteActivation": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Deletes an activation. You are not required to delete an activation. If you delete an activation, you can no longer use it to register additional managed instances. Deleting an activation does not de-register managed instances. You must manually de-register managed instances.",
        "operationId": "DeleteActivation",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteActivationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteActivationResult"
            }
          },
          "480": {
            "description": "InvalidActivationId",
            "schema": {
              "$ref": "#/definitions/InvalidActivationId"
            }
          },
          "481": {
            "description": "InvalidActivation",
            "schema": {
              "$ref": "#/definitions/InvalidActivation"
            }
          },
          "482": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#DeleteAssociation": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Disassociates the specified Systems Manager document from the specified instance.</p> <p>When you disassociate a document from an instance, it does not change the configuration of the instance. To change the configuration state of an instance after you disassociate a document, you must create a new document with the desired configuration and associate it with the instance.</p>",
        "operationId": "DeleteAssociation",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteAssociationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteAssociationResult"
            }
          },
          "480": {
            "description": "AssociationDoesNotExist",
            "schema": {
              "$ref": "#/definitions/AssociationDoesNotExist"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "482": {
            "description": "InvalidDocument",
            "schema": {
              "$ref": "#/definitions/InvalidDocument"
            }
          },
          "483": {
            "description": "InvalidInstanceId",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceId"
            }
          },
          "484": {
            "description": "TooManyUpdates",
            "schema": {
              "$ref": "#/definitions/TooManyUpdates"
            }
          }
        }
      }
    },
    "/#DeleteDocument": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Deletes the Systems Manager document and all instance associations to the document.</p> <p>Before you delete the document, we recommend that you use <a>DeleteAssociation</a> to disassociate all instances that are associated with the document.</p>",
        "operationId": "DeleteDocument",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteDocumentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteDocumentResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidDocument",
            "schema": {
              "$ref": "#/definitions/InvalidDocument"
            }
          },
          "482": {
            "description": "InvalidDocumentOperation",
            "schema": {
              "$ref": "#/definitions/InvalidDocumentOperation"
            }
          },
          "483": {
            "description": "AssociatedInstances",
            "schema": {
              "$ref": "#/definitions/AssociatedInstances"
            }
          }
        }
      }
    },
    "/#DeleteMaintenanceWindow": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Deletes a Maintenance Window.",
        "operationId": "DeleteMaintenanceWindow",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteMaintenanceWindowRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteMaintenanceWindowResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#DeleteParameter": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Delete a parameter from the system.",
        "operationId": "DeleteParameter",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteParameterRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteParameterResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "ParameterNotFound",
            "schema": {
              "$ref": "#/definitions/ParameterNotFound"
            }
          }
        }
      }
    },
    "/#DeleteParameters": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Delete a list of parameters. This API is used to delete parameters by using the Amazon EC2 console.",
        "operationId": "DeleteParameters",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteParametersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteParametersResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#DeletePatchBaseline": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Deletes a patch baseline.",
        "operationId": "DeletePatchBaseline",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeletePatchBaselineRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeletePatchBaselineResult"
            }
          },
          "480": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#DeleteResourceDataSync": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Deletes a Resource Data Sync configuration. After the configuration is deleted, changes to inventory data on managed instances are no longer synced with the target Amazon S3 bucket. Deleting a sync configuration does not delete data in the target Amazon S3 bucket.",
        "operationId": "DeleteResourceDataSync",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteResourceDataSyncRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteResourceDataSyncResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "ResourceDataSyncNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceDataSyncNotFoundException"
            }
          }
        }
      }
    },
    "/#DeregisterManagedInstance": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Removes the server or virtual machine from the list of registered servers. You can reregister the instance again at any time. If you don't plan to use Run Command on the server, we suggest uninstalling the SSM Agent first.",
        "operationId": "DeregisterManagedInstance",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeregisterManagedInstanceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeregisterManagedInstanceResult"
            }
          },
          "480": {
            "description": "InvalidInstanceId",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceId"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#DeregisterPatchBaselineForPatchGroup": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Removes a patch group from a patch baseline.",
        "operationId": "DeregisterPatchBaselineForPatchGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeregisterPatchBaselineForPatchGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeregisterPatchBaselineForPatchGroupResult"
            }
          },
          "480": {
            "description": "InvalidResourceId",
            "schema": {
              "$ref": "#/definitions/InvalidResourceId"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#DeregisterTargetFromMaintenanceWindow": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Removes a target from a Maintenance Window.",
        "operationId": "DeregisterTargetFromMaintenanceWindow",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeregisterTargetFromMaintenanceWindowRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeregisterTargetFromMaintenanceWindowResult"
            }
          },
          "480": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "482": {
            "description": "TargetInUseException",
            "schema": {
              "$ref": "#/definitions/TargetInUseException"
            }
          }
        }
      }
    },
    "/#DeregisterTaskFromMaintenanceWindow": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Removes a task from a Maintenance Window.",
        "operationId": "DeregisterTaskFromMaintenanceWindow",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeregisterTaskFromMaintenanceWindowRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeregisterTaskFromMaintenanceWindowResult"
            }
          },
          "480": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#DescribeActivations": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Details about the activation, including: the date and time the activation was created, the expiration date, the IAM role assigned to the instances in the activation, and the number of instances activated by this registration.",
        "operationId": "DescribeActivations",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeActivationsRequest"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeActivationsResult"
            }
          },
          "480": {
            "description": "InvalidFilter",
            "schema": {
              "$ref": "#/definitions/InvalidFilter"
            }
          },
          "481": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          },
          "482": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#DescribeAssociation": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Describes the associations for the specified Systems Manager document or instance.",
        "operationId": "DescribeAssociation",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeAssociationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeAssociationResult"
            }
          },
          "480": {
            "description": "AssociationDoesNotExist",
            "schema": {
              "$ref": "#/definitions/AssociationDoesNotExist"
            }
          },
          "481": {
            "description": "InvalidAssociationVersion",
            "schema": {
              "$ref": "#/definitions/InvalidAssociationVersion"
            }
          },
          "482": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "483": {
            "description": "InvalidDocument",
            "schema": {
              "$ref": "#/definitions/InvalidDocument"
            }
          },
          "484": {
            "description": "InvalidInstanceId",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceId"
            }
          }
        }
      }
    },
    "/#DescribeAutomationExecutions": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Provides details about all active and terminated Automation executions.",
        "operationId": "DescribeAutomationExecutions",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeAutomationExecutionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeAutomationExecutionsResult"
            }
          },
          "480": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#DescribeAvailablePatches": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Lists all patches that could possibly be included in a patch baseline.",
        "operationId": "DescribeAvailablePatches",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeAvailablePatchesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeAvailablePatchesResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#DescribeDocument": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Describes the specified Systems Manager document.",
        "operationId": "DescribeDocument",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeDocumentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeDocumentResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidDocument",
            "schema": {
              "$ref": "#/definitions/InvalidDocument"
            }
          },
          "482": {
            "description": "InvalidDocumentVersion",
            "schema": {
              "$ref": "#/definitions/InvalidDocumentVersion"
            }
          }
        }
      }
    },
    "/#DescribeDocumentPermission": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Describes the permissions for a Systems Manager document. If you created the document, you are the owner. If a document is shared, it can either be shared privately (by specifying a user's AWS account ID) or publicly (<i>All</i>). ",
        "operationId": "DescribeDocumentPermission",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeDocumentPermissionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeDocumentPermissionResponse"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidDocument",
            "schema": {
              "$ref": "#/definitions/InvalidDocument"
            }
          },
          "482": {
            "description": "InvalidPermissionType",
            "schema": {
              "$ref": "#/definitions/InvalidPermissionType"
            }
          }
        }
      }
    },
    "/#DescribeEffectiveInstanceAssociations": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "All associations for the instance(s).",
        "operationId": "DescribeEffectiveInstanceAssociations",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeEffectiveInstanceAssociationsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeEffectiveInstanceAssociationsResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidInstanceId",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceId"
            }
          },
          "482": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          }
        }
      }
    },
    "/#DescribeEffectivePatchesForPatchBaseline": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieves the current effective patches (the patch and the approval state) for the specified patch baseline. Note that this API applies only to Windows patch baselines.",
        "operationId": "DescribeEffectivePatchesForPatchBaseline",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeEffectivePatchesForPatchBaselineRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeEffectivePatchesForPatchBaselineResult"
            }
          },
          "480": {
            "description": "InvalidResourceId",
            "schema": {
              "$ref": "#/definitions/InvalidResourceId"
            }
          },
          "481": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "482": {
            "description": "UnsupportedOperatingSystem",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperatingSystem"
            }
          },
          "483": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#DescribeInstanceAssociationsStatus": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "The status of the associations for the instance(s).",
        "operationId": "DescribeInstanceAssociationsStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeInstanceAssociationsStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeInstanceAssociationsStatusResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidInstanceId",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceId"
            }
          },
          "482": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          }
        }
      }
    },
    "/#DescribeInstanceInformation": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Describes one or more of your instances. You can use this to get information about instances like the operating system platform, the SSM Agent version (Linux), status etc. If you specify one or more instance IDs, it returns information for those instances. If you do not specify instance IDs, it returns information for all your instances. If you specify an instance ID that is not valid or an instance that you do not own, you receive an error. ",
        "operationId": "DescribeInstanceInformation",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeInstanceInformationRequest"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeInstanceInformationResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidInstanceId",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceId"
            }
          },
          "482": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          },
          "483": {
            "description": "InvalidInstanceInformationFilterValue",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceInformationFilterValue"
            }
          },
          "484": {
            "description": "InvalidFilterKey",
            "schema": {
              "$ref": "#/definitions/InvalidFilterKey"
            }
          }
        }
      }
    },
    "/#DescribeInstancePatchStates": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieves the high-level patch state of one or more instances.",
        "operationId": "DescribeInstancePatchStates",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeInstancePatchStatesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeInstancePatchStatesResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          }
        }
      }
    },
    "/#DescribeInstancePatchStatesForPatchGroup": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieves the high-level patch state for the instances in the specified patch group.",
        "operationId": "DescribeInstancePatchStatesForPatchGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeInstancePatchStatesForPatchGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeInstancePatchStatesForPatchGroupResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidFilter",
            "schema": {
              "$ref": "#/definitions/InvalidFilter"
            }
          },
          "482": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          }
        }
      }
    },
    "/#DescribeInstancePatches": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieves information about the patches on the specified instance and their state relative to the patch baseline being used for the instance.",
        "operationId": "DescribeInstancePatches",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeInstancePatchesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeInstancePatchesResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidInstanceId",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceId"
            }
          },
          "482": {
            "description": "InvalidFilter",
            "schema": {
              "$ref": "#/definitions/InvalidFilter"
            }
          },
          "483": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          }
        }
      }
    },
    "/#DescribeMaintenanceWindowExecutionTaskInvocations": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieves the individual task executions (one per target) for a particular task executed as part of a Maintenance Window execution.",
        "operationId": "DescribeMaintenanceWindowExecutionTaskInvocations",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeMaintenanceWindowExecutionTaskInvocationsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeMaintenanceWindowExecutionTaskInvocationsResult"
            }
          },
          "480": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#DescribeMaintenanceWindowExecutionTasks": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "For a given Maintenance Window execution, lists the tasks that were executed.",
        "operationId": "DescribeMaintenanceWindowExecutionTasks",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeMaintenanceWindowExecutionTasksRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeMaintenanceWindowExecutionTasksResult"
            }
          },
          "480": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#DescribeMaintenanceWindowExecutions": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Lists the executions of a Maintenance Window. This includes information about when the Maintenance Window was scheduled to be active, and information about tasks registered and run with the Maintenance Window.",
        "operationId": "DescribeMaintenanceWindowExecutions",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeMaintenanceWindowExecutionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeMaintenanceWindowExecutionsResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#DescribeMaintenanceWindowTargets": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Lists the targets registered with the Maintenance Window.",
        "operationId": "DescribeMaintenanceWindowTargets",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeMaintenanceWindowTargetsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeMaintenanceWindowTargetsResult"
            }
          },
          "480": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#DescribeMaintenanceWindowTasks": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Lists the tasks in a Maintenance Window.",
        "operationId": "DescribeMaintenanceWindowTasks",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeMaintenanceWindowTasksRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeMaintenanceWindowTasksResult"
            }
          },
          "480": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#DescribeMaintenanceWindows": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieves the Maintenance Windows in an AWS account.",
        "operationId": "DescribeMaintenanceWindows",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeMaintenanceWindowsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeMaintenanceWindowsResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#DescribeParameters": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Get information about a parameter.</p> <p>Request results are returned on a best-effort basis. If you specify <code>MaxResults</code> in the request, the response includes information up to the limit specified. The number of items returned, however, can be between zero and the value of <code>MaxResults</code>. If the service reaches an internal limit while processing the results, it stops the operation and returns the matching values up to that point and a <code>NextToken</code>. You can specify the <code>NextToken</code> in a subsequent call to get the next set of results.</p>",
        "operationId": "DescribeParameters",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeParametersRequest"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeParametersResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidFilterKey",
            "schema": {
              "$ref": "#/definitions/InvalidFilterKey"
            }
          },
          "482": {
            "description": "InvalidFilterOption",
            "schema": {
              "$ref": "#/definitions/InvalidFilterOption"
            }
          },
          "483": {
            "description": "InvalidFilterValue",
            "schema": {
              "$ref": "#/definitions/InvalidFilterValue"
            }
          },
          "484": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          }
        }
      }
    },
    "/#DescribePatchBaselines": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Lists the patch baselines in your AWS account.",
        "operationId": "DescribePatchBaselines",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribePatchBaselinesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribePatchBaselinesResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#DescribePatchGroupState": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Returns high-level aggregated patch compliance state for a patch group.",
        "operationId": "DescribePatchGroupState",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribePatchGroupStateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribePatchGroupStateResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          }
        }
      }
    },
    "/#DescribePatchGroups": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Lists all patch groups that have been registered with patch baselines.",
        "operationId": "DescribePatchGroups",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribePatchGroupsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribePatchGroupsResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#GetAutomationExecution": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Get detailed information about a particular Automation execution.",
        "operationId": "GetAutomationExecution",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetAutomationExecutionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetAutomationExecutionResult"
            }
          },
          "480": {
            "description": "AutomationExecutionNotFoundException",
            "schema": {
              "$ref": "#/definitions/AutomationExecutionNotFoundException"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#GetCommandInvocation": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Returns detailed information about command execution for an invocation or plugin. ",
        "operationId": "GetCommandInvocation",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetCommandInvocationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetCommandInvocationResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidCommandId",
            "schema": {
              "$ref": "#/definitions/InvalidCommandId"
            }
          },
          "482": {
            "description": "InvalidInstanceId",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceId"
            }
          },
          "483": {
            "description": "InvalidPluginName",
            "schema": {
              "$ref": "#/definitions/InvalidPluginName"
            }
          },
          "484": {
            "description": "InvocationDoesNotExist",
            "schema": {
              "$ref": "#/definitions/InvocationDoesNotExist"
            }
          }
        }
      }
    },
    "/#GetDefaultPatchBaseline": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieves the default patch baseline. Note that Systems Manager supports creating multiple default patch baselines. For example, you can create a default patch baseline for each operating system.",
        "operationId": "GetDefaultPatchBaseline",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDefaultPatchBaselineRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDefaultPatchBaselineResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#GetDeployablePatchSnapshotForInstance": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieves the current snapshot for the patch baseline the instance uses. This API is primarily used by the AWS-RunPatchBaseline Systems Manager document. ",
        "operationId": "GetDeployablePatchSnapshotForInstance",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDeployablePatchSnapshotForInstanceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDeployablePatchSnapshotForInstanceResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "UnsupportedOperatingSystem",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperatingSystem"
            }
          }
        }
      }
    },
    "/#GetDocument": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Gets the contents of the specified Systems Manager document.",
        "operationId": "GetDocument",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDocumentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDocumentResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidDocument",
            "schema": {
              "$ref": "#/definitions/InvalidDocument"
            }
          },
          "482": {
            "description": "InvalidDocumentVersion",
            "schema": {
              "$ref": "#/definitions/InvalidDocumentVersion"
            }
          }
        }
      }
    },
    "/#GetInventory": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Query inventory information.",
        "operationId": "GetInventory",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetInventoryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetInventoryResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidFilter",
            "schema": {
              "$ref": "#/definitions/InvalidFilter"
            }
          },
          "482": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          },
          "483": {
            "description": "InvalidTypeNameException",
            "schema": {
              "$ref": "#/definitions/InvalidTypeNameException"
            }
          },
          "484": {
            "description": "InvalidResultAttributeException",
            "schema": {
              "$ref": "#/definitions/InvalidResultAttributeException"
            }
          }
        }
      }
    },
    "/#GetInventorySchema": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Return a list of inventory type names for the account, or return a list of attribute names for a specific Inventory item type. ",
        "operationId": "GetInventorySchema",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetInventorySchemaRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetInventorySchemaResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidTypeNameException",
            "schema": {
              "$ref": "#/definitions/InvalidTypeNameException"
            }
          },
          "482": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          }
        }
      }
    },
    "/#GetMaintenanceWindow": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieves a Maintenance Window.",
        "operationId": "GetMaintenanceWindow",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetMaintenanceWindowRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetMaintenanceWindowResult"
            }
          },
          "480": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#GetMaintenanceWindowExecution": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieves details about a specific task executed as part of a Maintenance Window execution.",
        "operationId": "GetMaintenanceWindowExecution",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetMaintenanceWindowExecutionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetMaintenanceWindowExecutionResult"
            }
          },
          "480": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#GetMaintenanceWindowExecutionTask": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieves the details about a specific task executed as part of a Maintenance Window execution.",
        "operationId": "GetMaintenanceWindowExecutionTask",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetMaintenanceWindowExecutionTaskRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetMaintenanceWindowExecutionTaskResult"
            }
          },
          "480": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#GetMaintenanceWindowExecutionTaskInvocation": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieves a task invocation. A task invocation is a specific task executing on a specific target. Maintenance Windows report status for all invocations. ",
        "operationId": "GetMaintenanceWindowExecutionTaskInvocation",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetMaintenanceWindowExecutionTaskInvocationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetMaintenanceWindowExecutionTaskInvocationResult"
            }
          },
          "480": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#GetMaintenanceWindowTask": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Lists the tasks in a Maintenance Window.",
        "operationId": "GetMaintenanceWindowTask",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetMaintenanceWindowTaskRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetMaintenanceWindowTaskResult"
            }
          },
          "480": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#GetParameter": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Get information about a parameter by using the parameter name. ",
        "operationId": "GetParameter",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetParameterRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetParameterResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidKeyId",
            "schema": {
              "$ref": "#/definitions/InvalidKeyId"
            }
          },
          "482": {
            "description": "ParameterNotFound",
            "schema": {
              "$ref": "#/definitions/ParameterNotFound"
            }
          }
        }
      }
    },
    "/#GetParameterHistory": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Query a list of all parameters used by the AWS account.",
        "operationId": "GetParameterHistory",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetParameterHistoryRequest"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetParameterHistoryResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "ParameterNotFound",
            "schema": {
              "$ref": "#/definitions/ParameterNotFound"
            }
          },
          "482": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          },
          "483": {
            "description": "InvalidKeyId",
            "schema": {
              "$ref": "#/definitions/InvalidKeyId"
            }
          }
        }
      }
    },
    "/#GetParameters": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Get details of a parameter.",
        "operationId": "GetParameters",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetParametersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetParametersResult"
            }
          },
          "480": {
            "description": "InvalidKeyId",
            "schema": {
              "$ref": "#/definitions/InvalidKeyId"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#GetParametersByPath": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Retrieve parameters in a specific hierarchy. For more information, see <a href=\"http://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-paramstore-working.html\">Working with Systems Manager Parameters</a>. </p> <p>Request results are returned on a best-effort basis. If you specify <code>MaxResults</code> in the request, the response includes information up to the limit specified. The number of items returned, however, can be between zero and the value of <code>MaxResults</code>. If the service reaches an internal limit while processing the results, it stops the operation and returns the matching values up to that point and a <code>NextToken</code>. You can specify the <code>NextToken</code> in a subsequent call to get the next set of results.</p>",
        "operationId": "GetParametersByPath",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetParametersByPathRequest"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetParametersByPathResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidFilterKey",
            "schema": {
              "$ref": "#/definitions/InvalidFilterKey"
            }
          },
          "482": {
            "description": "InvalidFilterOption",
            "schema": {
              "$ref": "#/definitions/InvalidFilterOption"
            }
          },
          "483": {
            "description": "InvalidFilterValue",
            "schema": {
              "$ref": "#/definitions/InvalidFilterValue"
            }
          },
          "484": {
            "description": "InvalidKeyId",
            "schema": {
              "$ref": "#/definitions/InvalidKeyId"
            }
          },
          "485": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          }
        }
      }
    },
    "/#GetPatchBaseline": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieves information about a patch baseline.",
        "operationId": "GetPatchBaseline",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetPatchBaselineRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetPatchBaselineResult"
            }
          },
          "480": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "481": {
            "description": "InvalidResourceId",
            "schema": {
              "$ref": "#/definitions/InvalidResourceId"
            }
          },
          "482": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#GetPatchBaselineForPatchGroup": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieves the patch baseline that should be used for the specified patch group.",
        "operationId": "GetPatchBaselineForPatchGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetPatchBaselineForPatchGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetPatchBaselineForPatchGroupResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#ListAssociationVersions": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieves all versions of an association for a specific association ID.",
        "operationId": "ListAssociationVersions",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListAssociationVersionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListAssociationVersionsResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          },
          "482": {
            "description": "AssociationDoesNotExist",
            "schema": {
              "$ref": "#/definitions/AssociationDoesNotExist"
            }
          }
        }
      }
    },
    "/#ListAssociations": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Lists the associations for the specified Systems Manager document or instance.",
        "operationId": "ListAssociations",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListAssociationsRequest"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListAssociationsResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          }
        }
      }
    },
    "/#ListCommandInvocations": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "An invocation is copy of a command sent to a specific instance. A command can apply to one or more instances. A command invocation applies to one instance. For example, if a user executes SendCommand against three instances, then a command invocation is created for each requested instance ID. ListCommandInvocations provide status about command execution.",
        "operationId": "ListCommandInvocations",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListCommandInvocationsRequest"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListCommandInvocationsResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidCommandId",
            "schema": {
              "$ref": "#/definitions/InvalidCommandId"
            }
          },
          "482": {
            "description": "InvalidInstanceId",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceId"
            }
          },
          "483": {
            "description": "InvalidFilterKey",
            "schema": {
              "$ref": "#/definitions/InvalidFilterKey"
            }
          },
          "484": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          }
        }
      }
    },
    "/#ListCommands": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Lists the commands requested by users of the AWS account.",
        "operationId": "ListCommands",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListCommandsRequest"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListCommandsResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidCommandId",
            "schema": {
              "$ref": "#/definitions/InvalidCommandId"
            }
          },
          "482": {
            "description": "InvalidInstanceId",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceId"
            }
          },
          "483": {
            "description": "InvalidFilterKey",
            "schema": {
              "$ref": "#/definitions/InvalidFilterKey"
            }
          },
          "484": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          }
        }
      }
    },
    "/#ListComplianceItems": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "For a specified resource ID, this API action returns a list of compliance statuses for different resource types. Currently, you can only specify one resource ID per call. List results depend on the criteria specified in the filter. ",
        "operationId": "ListComplianceItems",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListComplianceItemsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListComplianceItemsResult"
            }
          },
          "480": {
            "description": "InvalidResourceType",
            "schema": {
              "$ref": "#/definitions/InvalidResourceType"
            }
          },
          "481": {
            "description": "InvalidResourceId",
            "schema": {
              "$ref": "#/definitions/InvalidResourceId"
            }
          },
          "482": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "483": {
            "description": "InvalidFilter",
            "schema": {
              "$ref": "#/definitions/InvalidFilter"
            }
          },
          "484": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          }
        }
      }
    },
    "/#ListComplianceSummaries": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Returns a summary count of compliant and non-compliant resources for a compliance type. For example, this call can return State Manager associations, patches, or custom compliance types according to the filter criteria that you specify. ",
        "operationId": "ListComplianceSummaries",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListComplianceSummariesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListComplianceSummariesResult"
            }
          },
          "480": {
            "description": "InvalidFilter",
            "schema": {
              "$ref": "#/definitions/InvalidFilter"
            }
          },
          "481": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          },
          "482": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#ListDocumentVersions": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "List all versions for a document.",
        "operationId": "ListDocumentVersions",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListDocumentVersionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListDocumentVersionsResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          },
          "482": {
            "description": "InvalidDocument",
            "schema": {
              "$ref": "#/definitions/InvalidDocument"
            }
          }
        }
      }
    },
    "/#ListDocuments": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Describes one or more of your Systems Manager documents.",
        "operationId": "ListDocuments",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListDocumentsRequest"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListDocumentsResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          },
          "482": {
            "description": "InvalidFilterKey",
            "schema": {
              "$ref": "#/definitions/InvalidFilterKey"
            }
          }
        }
      }
    },
    "/#ListInventoryEntries": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "A list of inventory items returned by the request.",
        "operationId": "ListInventoryEntries",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListInventoryEntriesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListInventoryEntriesResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidInstanceId",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceId"
            }
          },
          "482": {
            "description": "InvalidTypeNameException",
            "schema": {
              "$ref": "#/definitions/InvalidTypeNameException"
            }
          },
          "483": {
            "description": "InvalidFilter",
            "schema": {
              "$ref": "#/definitions/InvalidFilter"
            }
          },
          "484": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          }
        }
      }
    },
    "/#ListResourceComplianceSummaries": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Returns a resource-level summary count. The summary includes information about compliant and non-compliant statuses and detailed compliance-item severity counts, according to the filter criteria you specify.",
        "operationId": "ListResourceComplianceSummaries",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListResourceComplianceSummariesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListResourceComplianceSummariesResult"
            }
          },
          "480": {
            "description": "InvalidFilter",
            "schema": {
              "$ref": "#/definitions/InvalidFilter"
            }
          },
          "481": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          },
          "482": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#ListResourceDataSync": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Lists your resource data sync configurations. Includes information about the last time a sync attempted to start, the last sync status, and the last time a sync successfully completed.</p> <p>The number of sync configurations might be too large to return using a single call to <code>ListResourceDataSync</code>. You can limit the number of sync configurations returned by using the <code>MaxResults</code> parameter. To determine whether there are more sync configurations to list, check the value of <code>NextToken</code> in the output. If there are more sync configurations to list, you can request them by specifying the <code>NextToken</code> returned in the call to the parameter of a subsequent call. </p>",
        "operationId": "ListResourceDataSync",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListResourceDataSyncRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListResourceDataSyncResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          }
        }
      }
    },
    "/#ListTagsForResource": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Returns a list of the tags assigned to the specified resource.",
        "operationId": "ListTagsForResource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListTagsForResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListTagsForResourceResult"
            }
          },
          "480": {
            "description": "InvalidResourceType",
            "schema": {
              "$ref": "#/definitions/InvalidResourceType"
            }
          },
          "481": {
            "description": "InvalidResourceId",
            "schema": {
              "$ref": "#/definitions/InvalidResourceId"
            }
          },
          "482": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#ModifyDocumentPermission": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Shares a Systems Manager document publicly or privately. If you share a document privately, you must specify the AWS user account IDs for those people who can use the document. If you share a document publicly, you must specify <i>All</i> as the account ID.",
        "operationId": "ModifyDocumentPermission",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ModifyDocumentPermissionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ModifyDocumentPermissionResponse"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidDocument",
            "schema": {
              "$ref": "#/definitions/InvalidDocument"
            }
          },
          "482": {
            "description": "InvalidPermissionType",
            "schema": {
              "$ref": "#/definitions/InvalidPermissionType"
            }
          },
          "483": {
            "description": "DocumentPermissionLimit",
            "schema": {
              "$ref": "#/definitions/DocumentPermissionLimit"
            }
          },
          "484": {
            "description": "DocumentLimitExceeded",
            "schema": {
              "$ref": "#/definitions/DocumentLimitExceeded"
            }
          }
        }
      }
    },
    "/#PutComplianceItems": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Registers a compliance type and other compliance details on a designated resource. This action lets you register custom compliance details with a resource. This call overwrites existing compliance information on the resource, so you must provide a full list of compliance items each time that you send the request.",
        "operationId": "PutComplianceItems",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutComplianceItemsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PutComplianceItemsResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidItemContentException",
            "schema": {
              "$ref": "#/definitions/InvalidItemContentException"
            }
          },
          "482": {
            "description": "TotalSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/TotalSizeLimitExceededException"
            }
          },
          "483": {
            "description": "ItemSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ItemSizeLimitExceededException"
            }
          },
          "484": {
            "description": "ComplianceTypeCountLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ComplianceTypeCountLimitExceededException"
            }
          },
          "485": {
            "description": "InvalidResourceType",
            "schema": {
              "$ref": "#/definitions/InvalidResourceType"
            }
          },
          "486": {
            "description": "InvalidResourceId",
            "schema": {
              "$ref": "#/definitions/InvalidResourceId"
            }
          }
        }
      }
    },
    "/#PutInventory": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Bulk update custom inventory items on one more instance. The request adds an inventory item, if it doesn't already exist, or updates an inventory item, if it does exist.",
        "operationId": "PutInventory",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutInventoryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PutInventoryResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidInstanceId",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceId"
            }
          },
          "482": {
            "description": "InvalidTypeNameException",
            "schema": {
              "$ref": "#/definitions/InvalidTypeNameException"
            }
          },
          "483": {
            "description": "InvalidItemContentException",
            "schema": {
              "$ref": "#/definitions/InvalidItemContentException"
            }
          },
          "484": {
            "description": "TotalSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/TotalSizeLimitExceededException"
            }
          },
          "485": {
            "description": "ItemSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ItemSizeLimitExceededException"
            }
          },
          "486": {
            "description": "ItemContentMismatchException",
            "schema": {
              "$ref": "#/definitions/ItemContentMismatchException"
            }
          },
          "487": {
            "description": "CustomSchemaCountLimitExceededException",
            "schema": {
              "$ref": "#/definitions/CustomSchemaCountLimitExceededException"
            }
          },
          "488": {
            "description": "UnsupportedInventorySchemaVersionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedInventorySchemaVersionException"
            }
          },
          "489": {
            "description": "UnsupportedInventoryItemContextException",
            "schema": {
              "$ref": "#/definitions/UnsupportedInventoryItemContextException"
            }
          },
          "490": {
            "description": "InvalidInventoryItemContextException",
            "schema": {
              "$ref": "#/definitions/InvalidInventoryItemContextException"
            }
          },
          "491": {
            "description": "SubTypeCountLimitExceededException",
            "schema": {
              "$ref": "#/definitions/SubTypeCountLimitExceededException"
            }
          }
        }
      }
    },
    "/#PutParameter": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Add one or more parameters to the system.",
        "operationId": "PutParameter",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutParameterRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PutParameterResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidKeyId",
            "schema": {
              "$ref": "#/definitions/InvalidKeyId"
            }
          },
          "482": {
            "description": "ParameterLimitExceeded",
            "schema": {
              "$ref": "#/definitions/ParameterLimitExceeded"
            }
          },
          "483": {
            "description": "TooManyUpdates",
            "schema": {
              "$ref": "#/definitions/TooManyUpdates"
            }
          },
          "484": {
            "description": "ParameterAlreadyExists",
            "schema": {
              "$ref": "#/definitions/ParameterAlreadyExists"
            }
          },
          "485": {
            "description": "HierarchyLevelLimitExceededException",
            "schema": {
              "$ref": "#/definitions/HierarchyLevelLimitExceededException"
            }
          },
          "486": {
            "description": "HierarchyTypeMismatchException",
            "schema": {
              "$ref": "#/definitions/HierarchyTypeMismatchException"
            }
          },
          "487": {
            "description": "InvalidAllowedPatternException",
            "schema": {
              "$ref": "#/definitions/InvalidAllowedPatternException"
            }
          },
          "488": {
            "description": "ParameterPatternMismatchException",
            "schema": {
              "$ref": "#/definitions/ParameterPatternMismatchException"
            }
          },
          "489": {
            "description": "UnsupportedParameterType",
            "schema": {
              "$ref": "#/definitions/UnsupportedParameterType"
            }
          }
        }
      }
    },
    "/#RegisterDefaultPatchBaseline": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Defines the default patch baseline.",
        "operationId": "RegisterDefaultPatchBaseline",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterDefaultPatchBaselineRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RegisterDefaultPatchBaselineResult"
            }
          },
          "480": {
            "description": "InvalidResourceId",
            "schema": {
              "$ref": "#/definitions/InvalidResourceId"
            }
          },
          "481": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "482": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#RegisterPatchBaselineForPatchGroup": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Registers a patch baseline for a patch group.",
        "operationId": "RegisterPatchBaselineForPatchGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterPatchBaselineForPatchGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RegisterPatchBaselineForPatchGroupResult"
            }
          },
          "480": {
            "description": "AlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/AlreadyExistsException"
            }
          },
          "481": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "482": {
            "description": "InvalidResourceId",
            "schema": {
              "$ref": "#/definitions/InvalidResourceId"
            }
          },
          "483": {
            "description": "ResourceLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceLimitExceededException"
            }
          },
          "484": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#RegisterTargetWithMaintenanceWindow": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Registers a target with a Maintenance Window.",
        "operationId": "RegisterTargetWithMaintenanceWindow",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterTargetWithMaintenanceWindowRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RegisterTargetWithMaintenanceWindowResult"
            }
          },
          "480": {
            "description": "IdempotentParameterMismatch",
            "schema": {
              "$ref": "#/definitions/IdempotentParameterMismatch"
            }
          },
          "481": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "482": {
            "description": "ResourceLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceLimitExceededException"
            }
          },
          "483": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#RegisterTaskWithMaintenanceWindow": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Adds a new task to a Maintenance Window.",
        "operationId": "RegisterTaskWithMaintenanceWindow",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterTaskWithMaintenanceWindowRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RegisterTaskWithMaintenanceWindowResult"
            }
          },
          "480": {
            "description": "IdempotentParameterMismatch",
            "schema": {
              "$ref": "#/definitions/IdempotentParameterMismatch"
            }
          },
          "481": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "482": {
            "description": "ResourceLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceLimitExceededException"
            }
          },
          "483": {
            "description": "FeatureNotAvailableException",
            "schema": {
              "$ref": "#/definitions/FeatureNotAvailableException"
            }
          },
          "484": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#RemoveTagsFromResource": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Removes all tags from the specified resource.",
        "operationId": "RemoveTagsFromResource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemoveTagsFromResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RemoveTagsFromResourceResult"
            }
          },
          "480": {
            "description": "InvalidResourceType",
            "schema": {
              "$ref": "#/definitions/InvalidResourceType"
            }
          },
          "481": {
            "description": "InvalidResourceId",
            "schema": {
              "$ref": "#/definitions/InvalidResourceId"
            }
          },
          "482": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#SendAutomationSignal": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Sends a signal to an Automation execution to change the current behavior or status of the execution. ",
        "operationId": "SendAutomationSignal",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SendAutomationSignalRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SendAutomationSignalResult"
            }
          },
          "480": {
            "description": "AutomationExecutionNotFoundException",
            "schema": {
              "$ref": "#/definitions/AutomationExecutionNotFoundException"
            }
          },
          "481": {
            "description": "InvalidAutomationSignalException",
            "schema": {
              "$ref": "#/definitions/InvalidAutomationSignalException"
            }
          },
          "482": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#SendCommand": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Executes commands on one or more managed instances.",
        "operationId": "SendCommand",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SendCommandRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SendCommandResult"
            }
          },
          "480": {
            "description": "DuplicateInstanceId",
            "schema": {
              "$ref": "#/definitions/DuplicateInstanceId"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "482": {
            "description": "InvalidInstanceId",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceId"
            }
          },
          "483": {
            "description": "InvalidDocument",
            "schema": {
              "$ref": "#/definitions/InvalidDocument"
            }
          },
          "484": {
            "description": "InvalidOutputFolder",
            "schema": {
              "$ref": "#/definitions/InvalidOutputFolder"
            }
          },
          "485": {
            "description": "InvalidParameters",
            "schema": {
              "$ref": "#/definitions/InvalidParameters"
            }
          },
          "486": {
            "description": "UnsupportedPlatformType",
            "schema": {
              "$ref": "#/definitions/UnsupportedPlatformType"
            }
          },
          "487": {
            "description": "MaxDocumentSizeExceeded",
            "schema": {
              "$ref": "#/definitions/MaxDocumentSizeExceeded"
            }
          },
          "488": {
            "description": "InvalidRole",
            "schema": {
              "$ref": "#/definitions/InvalidRole"
            }
          },
          "489": {
            "description": "InvalidNotificationConfig",
            "schema": {
              "$ref": "#/definitions/InvalidNotificationConfig"
            }
          }
        }
      }
    },
    "/#StartAutomationExecution": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Initiates execution of an Automation document.",
        "operationId": "StartAutomationExecution",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartAutomationExecutionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StartAutomationExecutionResult"
            }
          },
          "480": {
            "description": "AutomationDefinitionNotFoundException",
            "schema": {
              "$ref": "#/definitions/AutomationDefinitionNotFoundException"
            }
          },
          "481": {
            "description": "InvalidAutomationExecutionParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidAutomationExecutionParametersException"
            }
          },
          "482": {
            "description": "AutomationExecutionLimitExceededException",
            "schema": {
              "$ref": "#/definitions/AutomationExecutionLimitExceededException"
            }
          },
          "483": {
            "description": "AutomationDefinitionVersionNotFoundException",
            "schema": {
              "$ref": "#/definitions/AutomationDefinitionVersionNotFoundException"
            }
          },
          "484": {
            "description": "IdempotentParameterMismatch",
            "schema": {
              "$ref": "#/definitions/IdempotentParameterMismatch"
            }
          },
          "485": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#StopAutomationExecution": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Stop an Automation that is currently executing.",
        "operationId": "StopAutomationExecution",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StopAutomationExecutionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StopAutomationExecutionResult"
            }
          },
          "480": {
            "description": "AutomationExecutionNotFoundException",
            "schema": {
              "$ref": "#/definitions/AutomationExecutionNotFoundException"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#UpdateAssociation": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Updates an association. You can update the association name and version, the document version, schedule, parameters, and Amazon S3 output.",
        "operationId": "UpdateAssociation",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAssociationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateAssociationResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidSchedule",
            "schema": {
              "$ref": "#/definitions/InvalidSchedule"
            }
          },
          "482": {
            "description": "InvalidParameters",
            "schema": {
              "$ref": "#/definitions/InvalidParameters"
            }
          },
          "483": {
            "description": "InvalidOutputLocation",
            "schema": {
              "$ref": "#/definitions/InvalidOutputLocation"
            }
          },
          "484": {
            "description": "InvalidDocumentVersion",
            "schema": {
              "$ref": "#/definitions/InvalidDocumentVersion"
            }
          },
          "485": {
            "description": "AssociationDoesNotExist",
            "schema": {
              "$ref": "#/definitions/AssociationDoesNotExist"
            }
          },
          "486": {
            "description": "InvalidUpdate",
            "schema": {
              "$ref": "#/definitions/InvalidUpdate"
            }
          },
          "487": {
            "description": "TooManyUpdates",
            "schema": {
              "$ref": "#/definitions/TooManyUpdates"
            }
          },
          "488": {
            "description": "InvalidDocument",
            "schema": {
              "$ref": "#/definitions/InvalidDocument"
            }
          },
          "489": {
            "description": "InvalidTarget",
            "schema": {
              "$ref": "#/definitions/InvalidTarget"
            }
          },
          "490": {
            "description": "InvalidAssociationVersion",
            "schema": {
              "$ref": "#/definitions/InvalidAssociationVersion"
            }
          },
          "491": {
            "description": "AssociationVersionLimitExceeded",
            "schema": {
              "$ref": "#/definitions/AssociationVersionLimitExceeded"
            }
          }
        }
      }
    },
    "/#UpdateAssociationStatus": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Updates the status of the Systems Manager document associated with the specified instance.",
        "operationId": "UpdateAssociationStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAssociationStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateAssociationStatusResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidInstanceId",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceId"
            }
          },
          "482": {
            "description": "InvalidDocument",
            "schema": {
              "$ref": "#/definitions/InvalidDocument"
            }
          },
          "483": {
            "description": "AssociationDoesNotExist",
            "schema": {
              "$ref": "#/definitions/AssociationDoesNotExist"
            }
          },
          "484": {
            "description": "StatusUnchanged",
            "schema": {
              "$ref": "#/definitions/StatusUnchanged"
            }
          },
          "485": {
            "description": "TooManyUpdates",
            "schema": {
              "$ref": "#/definitions/TooManyUpdates"
            }
          }
        }
      }
    },
    "/#UpdateDocument": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "The document you want to update.",
        "operationId": "UpdateDocument",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDocumentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateDocumentResult"
            }
          },
          "480": {
            "description": "MaxDocumentSizeExceeded",
            "schema": {
              "$ref": "#/definitions/MaxDocumentSizeExceeded"
            }
          },
          "481": {
            "description": "DocumentVersionLimitExceeded",
            "schema": {
              "$ref": "#/definitions/DocumentVersionLimitExceeded"
            }
          },
          "482": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "483": {
            "description": "DuplicateDocumentContent",
            "schema": {
              "$ref": "#/definitions/DuplicateDocumentContent"
            }
          },
          "484": {
            "description": "InvalidDocumentContent",
            "schema": {
              "$ref": "#/definitions/InvalidDocumentContent"
            }
          },
          "485": {
            "description": "InvalidDocumentVersion",
            "schema": {
              "$ref": "#/definitions/InvalidDocumentVersion"
            }
          },
          "486": {
            "description": "InvalidDocumentSchemaVersion",
            "schema": {
              "$ref": "#/definitions/InvalidDocumentSchemaVersion"
            }
          },
          "487": {
            "description": "InvalidDocument",
            "schema": {
              "$ref": "#/definitions/InvalidDocument"
            }
          }
        }
      }
    },
    "/#UpdateDocumentDefaultVersion": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Set the default version of a document. ",
        "operationId": "UpdateDocumentDefaultVersion",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDocumentDefaultVersionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateDocumentDefaultVersionResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidDocument",
            "schema": {
              "$ref": "#/definitions/InvalidDocument"
            }
          },
          "482": {
            "description": "InvalidDocumentVersion",
            "schema": {
              "$ref": "#/definitions/InvalidDocumentVersion"
            }
          },
          "483": {
            "description": "InvalidDocumentSchemaVersion",
            "schema": {
              "$ref": "#/definitions/InvalidDocumentSchemaVersion"
            }
          }
        }
      }
    },
    "/#UpdateMaintenanceWindow": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Updates an existing Maintenance Window. Only specified parameters are modified.",
        "operationId": "UpdateMaintenanceWindow",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMaintenanceWindowRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateMaintenanceWindowResult"
            }
          },
          "480": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#UpdateMaintenanceWindowTarget": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Modifies the target of an existing Maintenance Window. You can't change the target type, but you can change the following:</p> <p>The target from being an ID target to a Tag target, or a Tag target to an ID target.</p> <p>IDs for an ID target.</p> <p>Tags for a Tag target.</p> <p>Owner.</p> <p>Name.</p> <p>Description.</p> <p>If a parameter is null, then the corresponding field is not modified.</p>",
        "operationId": "UpdateMaintenanceWindowTarget",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMaintenanceWindowTargetRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateMaintenanceWindowTargetResult"
            }
          },
          "480": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#UpdateMaintenanceWindowTask": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Modifies a task assigned to a Maintenance Window. You can't change the task type, but you can change the following values:</p> <p>Task ARN. For example, you can change a RUN_COMMAND task from AWS-RunPowerShellScript to AWS-RunShellScript.</p> <p>Service role ARN.</p> <p>Task parameters.</p> <p>Task priority.</p> <p>Task MaxConcurrency and MaxErrors.</p> <p>Log location.</p> <p>If a parameter is null, then the corresponding field is not modified. Also, if you set Replace to true, then all fields required by the RegisterTaskWithMaintenanceWindow action are required for this request. Optional fields that aren't specified are set to null.</p>",
        "operationId": "UpdateMaintenanceWindowTask",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMaintenanceWindowTaskRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateMaintenanceWindowTaskResult"
            }
          },
          "480": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#UpdateManagedInstanceRole": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Assigns or changes an Amazon Identity and Access Management (IAM) role to the managed instance.",
        "operationId": "UpdateManagedInstanceRole",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateManagedInstanceRoleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateManagedInstanceRoleResult"
            }
          },
          "480": {
            "description": "InvalidInstanceId",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceId"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/#UpdatePatchBaseline": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Modifies an existing patch baseline. Fields not specified in the request are left unchanged.",
        "operationId": "UpdatePatchBaseline",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePatchBaselineRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdatePatchBaselineResult"
            }
          },
          "480": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AccountId": {
      "pattern": "\\(\\?i\\)all\\|[0-9]\\{12\\}",
      "type": "string"
    },
    "AccountIdList": {
      "items": {
        "$ref": "#/definitions/AccountId"
      },
      "maxItems": 20,
      "type": "array"
    },
    "Activation": {
      "description": "An activation registers one or more on-premises servers or virtual machines (VMs) with AWS so that you can configure those servers or VMs using Run Command. A server or VM that has been registered with AWS is called a managed instance.",
      "properties": {
        "ActivationId": {
          "$ref": "#/definitions/ActivationId",
          "description": "The ID created by Systems Manager when you submitted the activation."
        },
        "CreatedDate": {
          "$ref": "#/definitions/CreatedDate",
          "description": "The date the activation was created."
        },
        "DefaultInstanceName": {
          "$ref": "#/definitions/DefaultInstanceName",
          "description": "A name for the managed instance when it is created."
        },
        "Description": {
          "$ref": "#/definitions/ActivationDescription",
          "description": "A user defined description of the activation."
        },
        "ExpirationDate": {
          "$ref": "#/definitions/ExpirationDate",
          "description": "The date when this activation can no longer be used to register managed instances."
        },
        "Expired": {
          "$ref": "#/definitions/Boolean",
          "description": "Whether or not the activation is expired."
        },
        "IamRole": {
          "$ref": "#/definitions/IamRole",
          "description": "The Amazon Identity and Access Management (IAM) role to assign to the managed instance."
        },
        "RegistrationLimit": {
          "$ref": "#/definitions/RegistrationLimit",
          "description": "The maximum number of managed instances that can be registered using this activation."
        },
        "RegistrationsCount": {
          "$ref": "#/definitions/RegistrationsCount",
          "description": "The number of managed instances already registered with this activation."
        }
      },
      "type": "object"
    },
    "ActivationCode": {
      "maxLength": 250,
      "minLength": 20,
      "type": "string"
    },
    "ActivationDescription": {
      "maxLength": 256,
      "minLength": 0,
      "type": "string"
    },
    "ActivationId": {
      "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
      "type": "string"
    },
    "ActivationList": {
      "items": {
        "$ref": "#/definitions/Activation"
      },
      "type": "array"
    },
    "AddTagsToResourceRequest": {
      "properties": {
        "ResourceId": {
          "$ref": "#/definitions/ResourceId",
          "description": "The resource ID you want to tag."
        },
        "ResourceType": {
          "$ref": "#/definitions/ResourceTypeForTagging",
          "description": "Specifies the type of resource you are tagging."
        },
        "Tags": {
          "$ref": "#/definitions/TagList",
          "description": " One or more tags. The value parameter is required, but if you don't want the tag to have a value, specify the parameter with no value, and we set the value to an empty string. "
        }
      },
      "required": [
        "ResourceType",
        "ResourceId",
        "Tags"
      ],
      "type": "object"
    },
    "AddTagsToResourceResult": {
      "properties": {},
      "type": "object"
    },
    "AgentErrorCode": {
      "maxLength": 10,
      "type": "string"
    },
    "AllowedPattern": {
      "maxLength": 1024,
      "minLength": 0,
      "type": "string"
    },
    "AlreadyExistsException": {
      "description": "Error returned if an attempt is made to register a patch group with a patch baseline that is already registered with a different patch baseline.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "ApproveAfterDays": {
      "maximum": 100,
      "minimum": 0,
      "type": "integer"
    },
    "AssociatedInstances": {
      "description": "You must disassociate a document from all instances before you can delete it.",
      "properties": {},
      "type": "object"
    },
    "Association": {
      "description": "Describes an association of a Systems Manager document and an instance.",
      "properties": {
        "AssociationId": {
          "$ref": "#/definitions/AssociationId",
          "description": "The ID created by the system when you create an association. An association is a binding between a document and a set of targets with a schedule."
        },
        "AssociationName": {
          "$ref": "#/definitions/AssociationName",
          "description": "The association name."
        },
        "AssociationVersion": {
          "$ref": "#/definitions/AssociationVersion",
          "description": "The association version."
        },
        "DocumentVersion": {
          "$ref": "#/definitions/DocumentVersion",
          "description": "The version of the document used in the association."
        },
        "InstanceId": {
          "$ref": "#/definitions/InstanceId",
          "description": "The ID of the instance."
        },
        "LastExecutionDate": {
          "$ref": "#/definitions/DateTime",
          "description": "The date on which the association was last run."
        },
        "Name": {
          "$ref": "#/definitions/DocumentName",
          "description": "The name of the Systems Manager document."
        },
        "Overview": {
          "$ref": "#/definitions/AssociationOverview",
          "description": "Information about the association."
        },
        "ScheduleExpression": {
          "$ref": "#/definitions/ScheduleExpression",
          "description": "A cron expression that specifies a schedule when the association runs."
        },
        "Targets": {
          "$ref": "#/definitions/Targets",
          "description": "The instances targeted by the request to create an association. "
        }
      },
      "type": "object"
    },
    "AssociationAlreadyExists": {
      "description": "The specified association already exists.",
      "properties": {},
      "type": "object"
    },
    "AssociationDescription": {
      "description": "Describes the parameters for a document.",
      "properties": {
        "AssociationId": {
          "$ref": "#/definitions/AssociationId",
          "description": "The association ID."
        },
        "AssociationName": {
          "$ref": "#/definitions/AssociationName",
          "description": "The association name."
        },
        "AssociationVersion": {
          "$ref": "#/definitions/AssociationVersion",
          "description": "The association version."
        },
        "Date": {
          "$ref": "#/definitions/DateTime",
          "description": "The date when the association was made."
        },
        "DocumentVersion": {
          "$ref": "#/definitions/DocumentVersion",
          "description": "The document version."
        },
        "InstanceId": {
          "$ref": "#/definitions/InstanceId",
          "description": "The ID of the instance."
        },
        "LastExecutionDate": {
          "$ref": "#/definitions/DateTime",
          "description": "The date on which the association was last run."
        },
        "LastSuccessfulExecutionDate": {
          "$ref": "#/definitions/DateTime",
          "description": "The last date on which the association was successfully run."
        },
        "LastUpdateAssociationDate": {
          "$ref": "#/definitions/DateTime",
          "description": "The date when the association was last updated."
        },
        "Name": {
          "$ref": "#/definitions/DocumentName",
          "description": "The name of the Systems Manager document."
        },
        "OutputLocation": {
          "$ref": "#/definitions/InstanceAssociationOutputLocation",
          "description": "An Amazon S3 bucket where you want to store the output details of the request."
        },
        "Overview": {
          "$ref": "#/definitions/AssociationOverview",
          "description": "Information about the association."
        },
        "Parameters": {
          "$ref": "#/definitions/Parameters",
          "description": "A description of the parameters for a document. "
        },
        "ScheduleExpression": {
          "$ref": "#/definitions/ScheduleExpression",
          "description": "A cron expression that specifies a schedule when the association runs."
        },
        "Status": {
          "$ref": "#/definitions/AssociationStatus",
          "description": "The association status."
        },
        "Targets": {
          "$ref": "#/definitions/Targets",
          "description": "The instances targeted by the request. "
        }
      },
      "type": "object"
    },
    "AssociationDescriptionList": {
      "items": {
        "$ref": "#/definitions/AssociationDescription"
      },
      "type": "array"
    },
    "AssociationDoesNotExist": {
      "description": "The specified association does not exist.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "AssociationFilter": {
      "description": "Describes a filter.",
      "properties": {
        "key": {
          "$ref": "#/definitions/AssociationFilterKey",
          "description": "The name of the filter."
        },
        "value": {
          "$ref": "#/definitions/AssociationFilterValue",
          "description": "The filter value."
        }
      },
      "required": [
        "key",
        "value"
      ],
      "type": "object"
    },
    "AssociationFilterKey": {
      "enum": [
        "InstanceId",
        "Name",
        "AssociationId",
        "AssociationStatusName",
        "LastExecutedBefore",
        "LastExecutedAfter",
        "AssociationName"
      ],
      "type": "string"
    },
    "AssociationFilterList": {
      "items": {
        "$ref": "#/definitions/AssociationFilter"
      },
      "minItems": 1,
      "type": "array"
    },
    "AssociationFilterValue": {
      "minLength": 1,
      "type": "string"
    },
    "AssociationId": {
      "pattern": "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}",
      "type": "string"
    },
    "AssociationLimitExceeded": {
      "description": "You can have at most 2,000 active associations.",
      "properties": {},
      "type": "object"
    },
    "AssociationList": {
      "items": {
        "$ref": "#/definitions/Association"
      },
      "type": "array"
    },
    "AssociationName": {
      "pattern": "^[a-zA-Z0-9_\\-.]{3,128}$",
      "type": "string"
    },
    "AssociationOverview": {
      "description": "Information about the association.",
      "properties": {
        "AssociationStatusAggregatedCount": {
          "$ref": "#/definitions/AssociationStatusAggregatedCount",
          "description": "Returns the number of targets for the association status. For example, if you created an association with two instances, and one of them was successful, this would return the count of instances by status."
        },
        "DetailedStatus": {
          "$ref": "#/definitions/StatusName",
          "description": "A detailed status of the association."
        },
        "Status": {
          "$ref": "#/definitions/StatusName",
          "description": "The status of the association. Status can be: Pending, Success, or Failed."
        }
      },
      "type": "object"
    },
    "AssociationStatus": {
      "description": "Describes an association status.",
      "properties": {
        "AdditionalInfo": {
          "$ref": "#/definitions/StatusAdditionalInfo",
          "description": "A user-defined string."
        },
        "Date": {
          "$ref": "#/definitions/DateTime",
          "description": "The date when the status changed."
        },
        "Message": {
          "$ref": "#/definitions/StatusMessage",
          "description": "The reason for the status."
        },
        "Name": {
          "$ref": "#/definitions/AssociationStatusName",
          "description": "The status."
        }
      },
      "required": [
        "Date",
        "Name",
        "Message"
      ],
      "type": "object"
    },
    "AssociationStatusAggregatedCount": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/StatusName"
          },
          "value": {
            "$ref": "#/definitions/InstanceCount"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "AssociationStatusName": {
      "enum": [
        "Pending",
        "Success",
        "Failed"
      ],
      "type": "string"
    },
    "AssociationVersion": {
      "pattern": "([$]LATEST)|([1-9][0-9]*)",
      "type": "string"
    },
    "AssociationVersionInfo": {
      "description": "Information about the association version.",
      "properties": {
        "AssociationId": {
          "$ref": "#/definitions/AssociationId",
          "description": "The ID created by the system when the association was created."
        },
        "AssociationName": {
          "$ref": "#/definitions/AssociationName",
          "description": "The name specified for the association version when the association version was created."
        },
        "AssociationVersion": {
          "$ref": "#/definitions/AssociationVersion",
          "description": "The association version."
        },
        "CreatedDate": {
          "$ref": "#/definitions/DateTime",
          "description": "The date the association version was created."
        },
        "DocumentVersion": {
          "$ref": "#/definitions/DocumentVersion",
          "description": "The version of a Systems Manager document used when the association version was created."
        },
        "Name": {
          "$ref": "#/definitions/DocumentName",
          "description": "The name specified when the association was created."
        },
        "OutputLocation": {
          "$ref": "#/definitions/InstanceAssociationOutputLocation",
          "description": "The location in Amazon S3 specified for the association when the association version was created."
        },
        "Parameters": {
          "$ref": "#/definitions/Parameters",
          "description": "Parameters specified when the association version was created."
        },
        "ScheduleExpression": {
          "$ref": "#/definitions/ScheduleExpression",
          "description": "The cron or rate schedule specified for the association when the association version was created."
        },
        "Targets": {
          "$ref": "#/definitions/Targets",
          "description": "The targets specified for the association when the association version was created. "
        }
      },
      "type": "object"
    },
    "AssociationVersionLimitExceeded": {
      "description": "You have reached the maximum number versions allowed for an association. Each association has a limit of 1,000 versions. ",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "AssociationVersionList": {
      "items": {
        "$ref": "#/definitions/AssociationVersionInfo"
      },
      "minItems": 1,
      "type": "array"
    },
    "AttributeName": {
      "maxLength": 64,
      "minLength": 1,
      "type": "string"
    },
    "AttributeValue": {
      "maxLength": 4096,
      "minLength": 0,
      "type": "string"
    },
    "AutomationActionName": {
      "pattern": "^aws:[a-zA-Z]{3,25}$",
      "type": "string"
    },
    "AutomationDefinitionNotFoundException": {
      "description": "An Automation document with the specified name could not be found.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "AutomationDefinitionVersionNotFoundException": {
      "description": "An Automation document with the specified name and version could not be found.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "AutomationExecution": {
      "description": "Detailed information about the current state of an individual Automation execution.",
      "properties": {
        "AutomationExecutionId": {
          "$ref": "#/definitions/AutomationExecutionId",
          "description": "The execution ID."
        },
        "AutomationExecutionStatus": {
          "$ref": "#/definitions/AutomationExecutionStatus",
          "description": "The execution status of the Automation."
        },
        "DocumentName": {
          "$ref": "#/definitions/DocumentName",
          "description": "The name of the Automation document used during the execution."
        },
        "DocumentVersion": {
          "$ref": "#/definitions/DocumentVersion",
          "description": "The version of the document to use during execution."
        },
        "ExecutionEndTime": {
          "$ref": "#/definitions/DateTime",
          "description": "The time the execution finished."
        },
        "ExecutionStartTime": {
          "$ref": "#/definitions/DateTime",
          "description": "The time the execution started."
        },
        "FailureMessage": {
          "$ref": "#/definitions/String",
          "description": "A message describing why an execution has failed, if the status is set to Failed."
        },
        "Outputs": {
          "$ref": "#/definitions/AutomationParameterMap",
          "description": "The list of execution outputs as defined in the automation document."
        },
        "Parameters": {
          "$ref": "#/definitions/AutomationParameterMap",
          "description": "The key-value map of execution parameters, which were supplied when calling StartAutomationExecution."
        },
        "StepExecutions": {
          "$ref": "#/definitions/StepExecutionList",
          "description": "A list of details about the current state of all steps that comprise an execution. An Automation document contains a list of steps that are executed in order."
        }
      },
      "type": "object"
    },
    "AutomationExecutionFilter": {
      "description": "A filter used to match specific automation executions. This is used to limit the scope of Automation execution information returned.",
      "properties": {
        "Key": {
          "$ref": "#/definitions/AutomationExecutionFilterKey",
          "description": "The aspect of the Automation execution information that should be limited."
        },
        "Values": {
          "$ref": "#/definitions/AutomationExecutionFilterValueList",
          "description": "The values used to limit the execution information associated with the filter's key."
        }
      },
      "required": [
        "Key",
        "Values"
      ],
      "type": "object"
    },
    "AutomationExecutionFilterKey": {
      "enum": [
        "DocumentNamePrefix",
        "ExecutionStatus"
      ],
      "type": "string"
    },
    "AutomationExecutionFilterList": {
      "items": {
        "$ref": "#/definitions/AutomationExecutionFilter"
      },
      "maxItems": 10,
      "minItems": 1,
      "type": "array"
    },
    "AutomationExecutionFilterValue": {
      "maxLength": 150,
      "minLength": 1,
      "type": "string"
    },
    "AutomationExecutionFilterValueList": {
      "items": {
        "$ref": "#/definitions/AutomationExecutionFilterValue"
      },
      "maxItems": 10,
      "minItems": 1,
      "type": "array"
    },
    "AutomationExecutionId": {
      "maxLength": 36,
      "minLength": 36,
      "type": "string"
    },
    "AutomationExecutionLimitExceededException": {
      "description": "The number of simultaneously running Automation executions exceeded the allowable limit.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "AutomationExecutionMetadata": {
      "description": "Details about a specific Automation execution.",
      "properties": {
        "AutomationExecutionId": {
          "$ref": "#/definitions/AutomationExecutionId",
          "description": "The execution ID."
        },
        "AutomationExecutionStatus": {
          "$ref": "#/definitions/AutomationExecutionStatus",
          "description": "The status of the execution. Valid values include: Running, Succeeded, Failed, Timed out, or Cancelled."
        },
        "DocumentName": {
          "$ref": "#/definitions/DocumentName",
          "description": "The name of the Automation document used during execution."
        },
        "DocumentVersion": {
          "$ref": "#/definitions/DocumentVersion",
          "description": "The document version used during the execution."
        },
        "ExecutedBy": {
          "$ref": "#/definitions/String",
          "description": "The IAM role ARN of the user who executed the Automation."
        },
        "ExecutionEndTime": {
          "$ref": "#/definitions/DateTime",
          "description": "The time the execution finished. This is not populated if the execution is still in progress."
        },
        "ExecutionStartTime": {
          "$ref": "#/definitions/DateTime",
          "description": "The time the execution started.&gt;"
        },
        "LogFile": {
          "$ref": "#/definitions/String",
          "description": "An Amazon S3 bucket where execution information is stored."
        },
        "Outputs": {
          "$ref": "#/definitions/AutomationParameterMap",
          "description": "The list of execution outputs as defined in the Automation document."
        }
      },
      "type": "object"
    },
    "AutomationExecutionMetadataList": {
      "items": {
        "$ref": "#/definitions/AutomationExecutionMetadata"
      },
      "maxItems": 50,
      "minItems": 0,
      "type": "array"
    },
    "AutomationExecutionNotFoundException": {
      "description": "There is no automation execution information for the requested automation execution ID.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "AutomationExecutionStatus": {
      "enum": [
        "Pending",
        "InProgress",
        "Waiting",
        "Success",
        "TimedOut",
        "Cancelled",
        "Failed"
      ],
      "type": "string"
    },
    "AutomationParameterKey": {
      "maxLength": 30,
      "minLength": 1,
      "type": "string"
    },
    "AutomationParameterMap": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/AutomationParameterKey"
          },
          "value": {
            "$ref": "#/definitions/AutomationParameterValueList"
          }
        },
        "type": "object"
      },
      "maxItems": 200,
      "minItems": 1,
      "type": "array"
    },
    "AutomationParameterValue": {
      "maxLength": 512,
      "minLength": 1,
      "type": "string"
    },
    "AutomationParameterValueList": {
      "items": {
        "$ref": "#/definitions/AutomationParameterValue"
      },
      "maxItems": 10,
      "minItems": 0,
      "type": "array"
    },
    "BaselineDescription": {
      "maxLength": 1024,
      "minLength": 1,
      "type": "string"
    },
    "BaselineId": {
      "maxLength": 128,
      "minLength": 20,
      "pattern": "^[a-zA-Z0-9_\\-:/]{20,128}$",
      "type": "string"
    },
    "BaselineName": {
      "maxLength": 128,
      "minLength": 3,
      "pattern": "^[a-zA-Z0-9_\\-.]{3,128}$",
      "type": "string"
    },
    "BatchErrorMessage": {
      "type": "string"
    },
    "Boolean": {
      "type": "boolean"
    },
    "CancelCommandRequest": {
      "description": "<p/>",
      "properties": {
        "CommandId": {
          "$ref": "#/definitions/CommandId",
          "description": "The ID of the command you want to cancel."
        },
        "InstanceIds": {
          "$ref": "#/definitions/InstanceIdList",
          "description": "(Optional) A list of instance IDs on which you want to cancel the command. If not provided, the command is canceled on every instance on which it was requested."
        }
      },
      "required": [
        "CommandId"
      ],
      "type": "object"
    },
    "CancelCommandResult": {
      "description": "Whether or not the command was successfully canceled. There is no guarantee that a request can be canceled.",
      "properties": {},
      "type": "object"
    },
    "ClientToken": {
      "maxLength": 64,
      "minLength": 1,
      "type": "string"
    },
    "Command": {
      "description": "Describes a command request.",
      "properties": {
        "CommandId": {
          "$ref": "#/definitions/CommandId",
          "description": "A unique identifier for this command."
        },
        "Comment": {
          "$ref": "#/definitions/Comment",
          "description": "User-specified information about the command, such as a brief description of what the command should do."
        },
        "CompletedCount": {
          "$ref": "#/definitions/CompletedCount",
          "description": "The number of targets for which the command invocation reached a terminal state. Terminal states include the following: Success, Failed, Execution Timed Out, Delivery Timed Out, Canceled, Terminated, or Undeliverable."
        },
        "DocumentName": {
          "$ref": "#/definitions/DocumentName",
          "description": "The name of the document requested for execution."
        },
        "ErrorCount": {
          "$ref": "#/definitions/ErrorCount",
          "description": "The number of targets for which the status is Failed or Execution Timed Out."
        },
        "ExpiresAfter": {
          "$ref": "#/definitions/DateTime",
          "description": "If this time is reached and the command has not already started executing, it will not execute. Calculated based on the ExpiresAfter user input provided as part of the SendCommand API."
        },
        "InstanceIds": {
          "$ref": "#/definitions/InstanceIdList",
          "description": "The instance IDs against which this command was requested."
        },
        "MaxConcurrency": {
          "$ref": "#/definitions/MaxConcurrency",
          "description": "The maximum number of instances that are allowed to execute the command at the same time. You can specify a number of instances, such as 10, or a percentage of instances, such as 10%. The default value is 50. For more information about how to use MaxConcurrency, see <a href=\"http://docs.aws.amazon.com/systems-manager/latest/userguide/run-command.html\">Executing a Command Using Systems Manager Run Command</a>."
        },
        "MaxErrors": {
          "$ref": "#/definitions/MaxErrors",
          "description": "The maximum number of errors allowed before the system stops sending the command to additional targets. You can specify a number of errors, such as 10, or a percentage or errors, such as 10%. The default value is 50. For more information about how to use MaxErrors, see <a href=\"http://docs.aws.amazon.com/systems-manager/latest/userguide/run-command.html\">Executing a Command Using Systems Manager Run Command</a>."
        },
        "NotificationConfig": {
          "$ref": "#/definitions/NotificationConfig",
          "description": "Configurations for sending notifications about command status changes. "
        },
        "OutputS3BucketName": {
          "$ref": "#/definitions/S3BucketName",
          "description": "The S3 bucket where the responses to the command executions should be stored. This was requested when issuing the command."
        },
        "OutputS3KeyPrefix": {
          "$ref": "#/definitions/S3KeyPrefix",
          "description": "The S3 directory path inside the bucket where the responses to the command executions should be stored. This was requested when issuing the command."
        },
        "OutputS3Region": {
          "$ref": "#/definitions/S3Region",
          "description": "(Deprecated) You can no longer specify this parameter. The system ignores it. Instead, Systems Manager automatically determines the Amazon S3 bucket region."
        },
        "Parameters": {
          "$ref": "#/definitions/Parameters",
          "description": "The parameter values to be inserted in the document when executing the command."
        },
        "RequestedDateTime": {
          "$ref": "#/definitions/DateTime",
          "description": "The date and time the command was requested."
        },
        "ServiceRole": {
          "$ref": "#/definitions/ServiceRole",
          "description": "The IAM service role that Run Command uses to act on your behalf when sending notifications about command status changes. "
        },
        "Status": {
          "$ref": "#/definitions/CommandStatus",
          "description": "The status of the command."
        },
        "StatusDetails": {
          "$ref": "#/definitions/StatusDetails",
          "description": "<p>A detailed status of the command execution. StatusDetails includes more information than Status because it includes states resulting from error and concurrency control parameters. StatusDetails can show different results than Status. For more information about these statuses, see <a href=\"http://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-about-status.html\">Run Command Status</a>. StatusDetails can be one of the following values:</p> <ul> <li> <p>Pending: The command has not been sent to any instances.</p> </li> <li> <p>In Progress: The command has been sent to at least one instance but has not reached a final state on all instances.</p> </li> <li> <p>Success: The command successfully executed on all invocations. This is a terminal state.</p> </li> <li> <p>Delivery Timed Out: The value of MaxErrors or more command invocations shows a status of Delivery Timed Out. This is a terminal state.</p> </li> <li> <p>Execution Timed Out: The value of MaxErrors or more command invocations shows a status of Execution Timed Out. This is a terminal state.</p> </li> <li> <p>Failed: The value of MaxErrors or more command invocations shows a status of Failed. This is a terminal state.</p> </li> <li> <p>Incomplete: The command was attempted on all instances and one or more invocations does not have a value of Success but not enough invocations failed for the status to be Failed. This is a terminal state.</p> </li> <li> <p>Canceled: The command was terminated before it was completed. This is a terminal state.</p> </li> <li> <p>Rate Exceeded: The number of instances targeted by the command exceeded the account limit for pending invocations. The system has canceled the command before executing it on any instance. This is a terminal state.</p> </li> </ul>"
        },
        "TargetCount": {
          "$ref": "#/definitions/TargetCount",
          "description": "The number of targets for the command."
        },
        "Targets": {
          "$ref": "#/definitions/Targets",
          "description": "An array of search criteria that targets instances using a Key,Value combination that you specify. Targets is required if you don't provide one or more instance IDs in the call."
        }
      },
      "type": "object"
    },
    "CommandFilter": {
      "description": "Describes a command filter.",
      "properties": {
        "key": {
          "$ref": "#/definitions/CommandFilterKey",
          "description": "The name of the filter."
        },
        "value": {
          "$ref": "#/definitions/CommandFilterValue",
          "description": "The filter value. "
        }
      },
      "required": [
        "key",
        "value"
      ],
      "type": "object"
    },
    "CommandFilterKey": {
      "enum": [
        "InvokedAfter",
        "InvokedBefore",
        "Status"
      ],
      "type": "string"
    },
    "CommandFilterList": {
      "items": {
        "$ref": "#/definitions/CommandFilter"
      },
      "maxItems": 3,
      "minItems": 1,
      "type": "array"
    },
    "CommandFilterValue": {
      "minLength": 1,
      "type": "string"
    },
    "CommandId": {
      "maxLength": 36,
      "minLength": 36,
      "type": "string"
    },
    "CommandInvocation": {
      "description": "An invocation is copy of a command sent to a specific instance. A command can apply to one or more instances. A command invocation applies to one instance. For example, if a user executes SendCommand against three instances, then a command invocation is created for each requested instance ID. A command invocation returns status and detail information about a command you executed. ",
      "properties": {
        "CommandId": {
          "$ref": "#/definitions/CommandId",
          "description": "The command against which this invocation was requested."
        },
        "CommandPlugins": {
          "$ref": "#/definitions/CommandPluginList"
        },
        "Comment": {
          "$ref": "#/definitions/Comment",
          "description": "User-specified information about the command, such as a brief description of what the command should do."
        },
        "DocumentName": {
          "$ref": "#/definitions/DocumentName",
          "description": "The document name that was requested for execution."
        },
        "InstanceId": {
          "$ref": "#/definitions/InstanceId",
          "description": "The instance ID in which this invocation was requested."
        },
        "InstanceName": {
          "$ref": "#/definitions/InstanceTagName",
          "description": "The name of the invocation target. For Amazon EC2 instances this is the value for the aws:Name tag. For on-premises instances, this is the name of the instance."
        },
        "NotificationConfig": {
          "$ref": "#/definitions/NotificationConfig",
          "description": "Configurations for sending notifications about command status changes on a per instance basis."
        },
        "RequestedDateTime": {
          "$ref": "#/definitions/DateTime",
          "description": "The time and date the request was sent to this instance."
        },
        "ServiceRole": {
          "$ref": "#/definitions/ServiceRole",
          "description": "The IAM service role that Run Command uses to act on your behalf when sending notifications about command status changes on a per instance basis."
        },
        "StandardErrorUrl": {
          "$ref": "#/definitions/Url",
          "description": "The URL to the plugin's StdErr file in Amazon S3, if the Amazon S3 bucket was defined for the parent command. For an invocation, StandardErrorUrl is populated if there is just one plugin defined for the command, and the Amazon S3 bucket was defined for the command."
        },
        "StandardOutputUrl": {
          "$ref": "#/definitions/Url",
          "description": "The URL to the plugin's StdOut file in Amazon S3, if the Amazon S3 bucket was defined for the parent command. For an invocation, StandardOutputUrl is populated if there is just one plugin defined for the command, and the Amazon S3 bucket was defined for the command."
        },
        "Status": {
          "$ref": "#/definitions/CommandInvocationStatus",
          "description": "Whether or not the invocation succeeded, failed, or is pending."
        },
        "StatusDetails": {
          "$ref": "#/definitions/StatusDetails",
          "description": "<p>A detailed status of the command execution for each invocation (each instance targeted by the command). StatusDetails includes more information than Status because it includes states resulting from error and concurrency control parameters. StatusDetails can show different results than Status. For more information about these statuses, see <a href=\"http://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-about-status.html\">Run Command Status</a>. StatusDetails can be one of the following values:</p> <ul> <li> <p>Pending: The command has not been sent to the instance.</p> </li> <li> <p>In Progress: The command has been sent to the instance but has not reached a terminal state.</p> </li> <li> <p>Success: The execution of the command or plugin was successfully completed. This is a terminal state.</p> </li> <li> <p>Delivery Timed Out: The command was not delivered to the instance before the delivery timeout expired. Delivery timeouts do not count against the parent command's MaxErrors limit, but they do contribute to whether the parent command status is Success or Incomplete. This is a terminal state.</p> </li> <li> <p>Execution Timed Out: Command execution started on the instance, but the execution was not complete before the execution timeout expired. Execution timeouts count against the MaxErrors limit of the parent command. This is a terminal state.</p> </li> <li> <p>Failed: The command was not successful on the instance. For a plugin, this indicates that the result code was not zero. For a command invocation, this indicates that the result code for one or more plugins was not zero. Invocation failures count against the MaxErrors limit of the parent command. This is a terminal state.</p> </li> <li> <p>Canceled: The command was terminated before it was completed. This is a terminal state.</p> </li> <li> <p>Undeliverable: The command can't be delivered to the instance. The instance might not exist or might not be responding. Undeliverable invocations don't count against the parent command's MaxErrors limit and don't contribute to whether the parent command status is Success or Incomplete. This is a terminal state.</p> </li> <li> <p>Terminated: The parent command exceeded its MaxErrors limit and subsequent command invocations were canceled by the system. This is a terminal state.</p> </li> </ul>"
        },
        "TraceOutput": {
          "$ref": "#/definitions/InvocationTraceOutput",
          "description": " Gets the trace output sent by the agent. "
        }
      },
      "type": "object"
    },
    "CommandInvocationList": {
      "items": {
        "$ref": "#/definitions/CommandInvocation"
      },
      "type": "array"
    },
    "CommandInvocationStatus": {
      "enum": [
        "Pending",
        "InProgress",
        "Delayed",
        "Success",
        "Cancelled",
        "TimedOut",
        "Failed",
        "Cancelling"
      ],
      "type": "string"
    },
    "CommandList": {
      "items": {
        "$ref": "#/definitions/Command"
      },
      "type": "array"
    },
    "CommandMaxResults": {
      "maximum": 50,
      "minimum": 1,
      "type": "integer"
    },
    "CommandPlugin": {
      "description": "Describes plugin details.",
      "properties": {
        "Name": {
          "$ref": "#/definitions/CommandPluginName",
          "description": "The name of the plugin. Must be one of the following: aws:updateAgent, aws:domainjoin, aws:applications, aws:runPowerShellScript, aws:psmodule, aws:cloudWatch, aws:runShellScript, or aws:updateSSMAgent. "
        },
        "Output": {
          "$ref": "#/definitions/CommandPluginOutput",
          "description": "Output of the plugin execution."
        },
        "OutputS3BucketName": {
          "$ref": "#/definitions/S3BucketName",
          "description": "<p>The S3 bucket where the responses to the command executions should be stored. This was requested when issuing the command. For example, in the following response:</p> <p> test_folder/ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix/i-1234567876543/awsrunShellScript </p> <p>test_folder is the name of the Amazon S3 bucket;</p> <p> ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix is the name of the S3 prefix;</p> <p>i-1234567876543 is the instance ID;</p> <p>awsrunShellScript is the name of the plugin.</p>"
        },
        "OutputS3KeyPrefix": {
          "$ref": "#/definitions/S3KeyPrefix",
          "description": "<p>The S3 directory path inside the bucket where the responses to the command executions should be stored. This was requested when issuing the command. For example, in the following response:</p> <p> test_folder/ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix/i-1234567876543/awsrunShellScript </p> <p>test_folder is the name of the Amazon S3 bucket;</p> <p> ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix is the name of the S3 prefix;</p> <p>i-1234567876543 is the instance ID;</p> <p>awsrunShellScript is the name of the plugin.</p>"
        },
        "OutputS3Region": {
          "$ref": "#/definitions/S3Region",
          "description": "(Deprecated) You can no longer specify this parameter. The system ignores it. Instead, Systems Manager automatically determines the Amazon S3 bucket region."
        },
        "ResponseCode": {
          "$ref": "#/definitions/ResponseCode",
          "description": "A numeric response code generated after executing the plugin. "
        },
        "ResponseFinishDateTime": {
          "$ref": "#/definitions/DateTime",
          "description": "The time the plugin stopped executing. Could stop prematurely if, for example, a cancel command was sent. "
        },
        "ResponseStartDateTime": {
          "$ref": "#/definitions/DateTime",
          "description": "The time the plugin started executing. "
        },
        "StandardErrorUrl": {
          "$ref": "#/definitions/Url",
          "description": "The URL for the complete text written by the plugin to stderr. If execution is not yet complete, then this string is empty."
        },
        "StandardOutputUrl": {
          "$ref": "#/definitions/Url",
          "description": "The URL for the complete text written by the plugin to stdout in Amazon S3. If the Amazon S3 bucket for the command was not specified, then this string is empty."
        },
        "Status": {
          "$ref": "#/definitions/CommandPluginStatus",
          "description": "The status of this plugin. You can execute a document with multiple plugins."
        },
        "StatusDetails": {
          "$ref": "#/definitions/StatusDetails",
          "description": "<p>A detailed status of the plugin execution. StatusDetails includes more information than Status because it includes states resulting from error and concurrency control parameters. StatusDetails can show different results than Status. For more information about these statuses, see <a href=\"http://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-about-status.html\">Run Command Status</a>. StatusDetails can be one of the following values:</p> <ul> <li> <p>Pending: The command has not been sent to the instance.</p> </li> <li> <p>In Progress: The command has been sent to the instance but has not reached a terminal state.</p> </li> <li> <p>Success: The execution of the command or plugin was successfully completed. This is a terminal state.</p> </li> <li> <p>Delivery Timed Out: The command was not delivered to the instance before the delivery timeout expired. Delivery timeouts do not count against the parent command's MaxErrors limit, but they do contribute to whether the parent command status is Success or Incomplete. This is a terminal state.</p> </li> <li> <p>Execution Timed Out: Command execution started on the instance, but the execution was not complete before the execution timeout expired. Execution timeouts count against the MaxErrors limit of the parent command. This is a terminal state.</p> </li> <li> <p>Failed: The command was not successful on the instance. For a plugin, this indicates that the result code was not zero. For a command invocation, this indicates that the result code for one or more plugins was not zero. Invocation failures count against the MaxErrors limit of the parent command. This is a terminal state.</p> </li> <li> <p>Canceled: The command was terminated before it was completed. This is a terminal state.</p> </li> <li> <p>Undeliverable: The command can't be delivered to the instance. The instance might not exist, or it might not be responding. Undeliverable invocations don't count against the parent command's MaxErrors limit, and they don't contribute to whether the parent command status is Success or Incomplete. This is a terminal state.</p> </li> <li> <p>Terminated: The parent command exceeded its MaxErrors limit and subsequent command invocations were canceled by the system. This is a terminal state.</p> </li> </ul>"
        }
      },
      "type": "object"
    },
    "CommandPluginList": {
      "items": {
        "$ref": "#/definitions/CommandPlugin"
      },
      "type": "array"
    },
    "CommandPluginName": {
      "minLength": 4,
      "type": "string"
    },
    "CommandPluginOutput": {
      "maxLength": 2500,
      "type": "string"
    },
    "CommandPluginStatus": {
      "enum": [
        "Pending",
        "InProgress",
        "Success",
        "TimedOut",
        "Cancelled",
        "Failed"
      ],
      "type": "string"
    },
    "CommandStatus": {
      "enum": [
        "Pending",
        "InProgress",
        "Success",
        "Cancelled",
        "Failed",
        "TimedOut",
        "Cancelling"
      ],
      "type": "string"
    },
    "Comment": {
      "maxLength": 100,
      "type": "string"
    },
    "CompletedCount": {
      "type": "integer"
    },
    "ComplianceExecutionId": {
      "maxLength": 100,
      "type": "string"
    },
    "ComplianceExecutionSummary": {
      "description": "A summary of the call execution that includes an execution ID, the type of execution (for example, <code>Command</code>), and the date/time of the execution using a datetime object that is saved in the following format: yyyy-MM-dd'T'HH:mm:ss'Z'.",
      "properties": {
        "ExecutionId": {
          "$ref": "#/definitions/ComplianceExecutionId",
          "description": "An ID created by the system when <code>PutComplianceItems</code> was called. For example, <code>CommandID</code> is a valid execution ID. You can use this ID in subsequent calls."
        },
        "ExecutionTime": {
          "$ref": "#/definitions/DateTime",
          "description": "The time the execution ran as a datetime object that is saved in the following format: yyyy-MM-dd'T'HH:mm:ss'Z'."
        },
        "ExecutionType": {
          "$ref": "#/definitions/ComplianceExecutionType",
          "description": "The type of execution. For example, <code>Command</code> is a valid execution type."
        }
      },
      "required": [
        "ExecutionTime"
      ],
      "type": "object"
    },
    "ComplianceExecutionType": {
      "maxLength": 50,
      "type": "string"
    },
    "ComplianceFilterValue": {
      "type": "string"
    },
    "ComplianceItem": {
      "description": "Information about the compliance as defined by the resource type. For example, for a patch resource type, <code>Items</code> includes information about the PatchSeverity, Classification, etc.",
      "properties": {
        "ComplianceType": {
          "$ref": "#/definitions/ComplianceTypeName",
          "description": "The compliance type. For example, Association (for a State Manager association), Patch, or Custom:<code>string</code> are all valid compliance types."
        },
        "Details": {
          "$ref": "#/definitions/ComplianceItemDetails",
          "description": "A \"Key\": \"Value\" tag combination for the compliance item."
        },
        "ExecutionSummary": {
          "$ref": "#/definitions/ComplianceExecutionSummary",
          "description": "A summary for the compliance item. The summary includes an execution ID, the execution type (for example, command), and the execution time."
        },
        "Id": {
          "$ref": "#/definitions/ComplianceItemId",
          "description": "An ID for the compliance item. For example, if the compliance item is a Windows patch, the ID could be the number of the KB article. Here's an example: KB4010320."
        },
        "ResourceId": {
          "$ref": "#/definitions/ComplianceResourceId",
          "description": "An ID for the resource. For a managed instance, this is the instance ID."
        },
        "ResourceType": {
          "$ref": "#/definitions/ComplianceResourceType",
          "description": "The type of resource. <code>ManagedInstance</code> is currently the only supported resource type."
        },
        "Severity": {
          "$ref": "#/definitions/ComplianceSeverity",
          "description": "The severity of the compliance status. Severity can be one of the following: Critical, High, Medium, Low, Informational, Unspecified."
        },
        "Status": {
          "$ref": "#/definitions/ComplianceStatus",
          "description": "The status of the compliance item. An item is either COMPLIANT or NON_COMPLIANT."
        },
        "Title": {
          "$ref": "#/definitions/ComplianceItemTitle",
          "description": "A title for the compliance item. For example, if the compliance item is a Windows patch, the title could be the title of the KB article for the patch. Here's an example: Security Update for Active Directory Federation Services."
        }
      },
      "type": "object"
    },
    "ComplianceItemContentHash": {
      "maxLength": 256,
      "type": "string"
    },
    "ComplianceItemDetails": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/AttributeName"
          },
          "value": {
            "$ref": "#/definitions/AttributeValue"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "ComplianceItemEntry": {
      "description": "Information about a compliance item.",
      "properties": {
        "Details": {
          "$ref": "#/definitions/ComplianceItemDetails",
          "description": "A \"Key\": \"Value\" tag combination for the compliance item."
        },
        "Id": {
          "$ref": "#/definitions/ComplianceItemId",
          "description": "The compliance item ID. For example, if the compliance item is a Windows patch, the ID could be the number of the KB article."
        },
        "Severity": {
          "$ref": "#/definitions/ComplianceSeverity",
          "description": "The severity of the compliance status. Severity can be one of the following: Critical, High, Medium, Low, Informational, Unspecified."
        },
        "Status": {
          "$ref": "#/definitions/ComplianceStatus",
          "description": "The status of the compliance item. An item is either COMPLIANT or NON_COMPLIANT."
        },
        "Title": {
          "$ref": "#/definitions/ComplianceItemTitle",
          "description": "The title of the compliance item. For example, if the compliance item is a Windows patch, the title could be the title of the KB article for the patch. Here's an example: Security Update for Active Directory Federation Services. "
        }
      },
      "required": [
        "Severity",
        "Status"
      ],
      "type": "object"
    },
    "ComplianceItemEntryList": {
      "items": {
        "$ref": "#/definitions/ComplianceItemEntry"
      },
      "maxItems": 10000,
      "minItems": 0,
      "type": "array"
    },
    "ComplianceItemId": {
      "maxLength": 100,
      "minLength": 1,
      "type": "string"
    },
    "ComplianceItemList": {
      "items": {
        "$ref": "#/definitions/ComplianceItem"
      },
      "type": "array"
    },
    "ComplianceItemTitle": {
      "maxLength": 500,
      "type": "string"
    },
    "ComplianceQueryOperatorType": {
      "enum": [
        "EQUAL",
        "NOT_EQUAL",
        "BEGIN_WITH",
        "LESS_THAN",
        "GREATER_THAN"
      ],
      "type": "string"
    },
    "ComplianceResourceId": {
      "maxLength": 100,
      "minLength": 1,
      "type": "string"
    },
    "ComplianceResourceIdList": {
      "items": {
        "$ref": "#/definitions/ComplianceResourceId"
      },
      "minItems": 1,
      "type": "array"
    },
    "ComplianceResourceType": {
      "maxLength": 50,
      "minLength": 1,
      "type": "string"
    },
    "ComplianceResourceTypeList": {
      "items": {
        "$ref": "#/definitions/ComplianceResourceType"
      },
      "minItems": 1,
      "type": "array"
    },
    "ComplianceSeverity": {
      "enum": [
        "CRITICAL",
        "HIGH",
        "MEDIUM",
        "LOW",
        "INFORMATIONAL",
        "UNSPECIFIED"
      ],
      "type": "string"
    },
    "ComplianceStatus": {
      "enum": [
        "COMPLIANT",
        "NON_COMPLIANT"
      ],
      "type": "string"
    },
    "ComplianceStringFilter": {
      "description": "One or more filters. Use a filter to return a more specific list of results.",
      "properties": {
        "Key": {
          "$ref": "#/definitions/ComplianceStringFilterKey",
          "description": "The name of the filter."
        },
        "Type": {
          "$ref": "#/definitions/ComplianceQueryOperatorType",
          "description": "The type of comparison that should be performed for the value: Equal, NotEqual, BeginWith, LessThan, or GreaterThan."
        },
        "Values": {
          "$ref": "#/definitions/ComplianceStringFilterValueList",
          "description": "The value for which to search."
        }
      },
      "type": "object"
    },
    "ComplianceStringFilterKey": {
      "maxLength": 200,
      "minLength": 1,
      "type": "string"
    },
    "ComplianceStringFilterList": {
      "items": {
        "$ref": "#/definitions/ComplianceStringFilter"
      },
      "type": "array"
    },
    "ComplianceStringFilterValueList": {
      "items": {
        "$ref": "#/definitions/ComplianceFilterValue"
      },
      "maxItems": 20,
      "minItems": 1,
      "type": "array"
    },
    "ComplianceSummaryCount": {
      "type": "integer"
    },
    "ComplianceSummaryItem": {
      "description": "A summary of compliance information by compliance type.",
      "properties": {
        "ComplianceType": {
          "$ref": "#/definitions/ComplianceTypeName",
          "description": "The type of compliance item. For example, the compliance type can be Association, Patch, or Custom:string."
        },
        "CompliantSummary": {
          "$ref": "#/definitions/CompliantSummary",
          "description": "A list of COMPLIANT items for the specified compliance type."
        },
        "NonCompliantSummary": {
          "$ref": "#/definitions/NonCompliantSummary",
          "description": "A list of NON_COMPLIANT items for the specified compliance type."
        }
      },
      "type": "object"
    },
    "ComplianceSummaryItemList": {
      "items": {
        "$ref": "#/definitions/ComplianceSummaryItem"
      },
      "type": "array"
    },
    "ComplianceTypeCountLimitExceededException": {
      "description": "You specified too many custom compliance types. You can specify a maximum of 10 different types. ",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "ComplianceTypeName": {
      "maxLength": 100,
      "minLength": 1,
      "pattern": "[A-Za-z0-9_\\-]\\w+|Custom:[a-zA-Z0-9_\\-]\\w+",
      "type": "string"
    },
    "CompliantSummary": {
      "description": "A summary of resources that are compliant. The summary is organized according to the resource count for each compliance type.",
      "properties": {
        "CompliantCount": {
          "$ref": "#/definitions/ComplianceSummaryCount",
          "description": "The total number of resources that are compliant."
        },
        "SeveritySummary": {
          "$ref": "#/definitions/SeveritySummary",
          "description": "A summary of the compliance severity by compliance type."
        }
      },
      "type": "object"
    },
    "ComputerName": {
      "maxLength": 255,
      "minLength": 1,
      "type": "string"
    },
    "CreateActivationRequest": {
      "properties": {
        "DefaultInstanceName": {
          "$ref": "#/definitions/DefaultInstanceName",
          "description": "The name of the registered, managed instance as it will appear in the Amazon EC2 console or when you use the AWS command line tools to list EC2 resources."
        },
        "Description": {
          "$ref": "#/definitions/ActivationDescription",
          "description": "A userdefined description of the resource that you want to register with Amazon EC2. "
        },
        "ExpirationDate": {
          "$ref": "#/definitions/ExpirationDate",
          "description": "The date by which this activation request should expire. The default value is 24 hours."
        },
        "IamRole": {
          "$ref": "#/definitions/IamRole",
          "description": "The Amazon Identity and Access Management (IAM) role that you want to assign to the managed instance. "
        },
        "RegistrationLimit": {
          "$ref": "#/definitions/RegistrationLimit",
          "description": "Specify the maximum number of managed instances you want to register. The default value is 1 instance."
        }
      },
      "required": [
        "IamRole"
      ],
      "type": "object"
    },
    "CreateActivationResult": {
      "properties": {
        "ActivationCode": {
          "$ref": "#/definitions/ActivationCode",
          "description": "The code the system generates when it processes the activation. The activation code functions like a password to validate the activation ID. "
        },
        "ActivationId": {
          "$ref": "#/definitions/ActivationId",
          "description": "The ID number generated by the system when it processed the activation. The activation ID functions like a user name."
        }
      },
      "type": "object"
    },
    "CreateAssociationBatchRequest": {
      "properties": {
        "Entries": {
          "$ref": "#/definitions/CreateAssociationBatchRequestEntries",
          "description": "One or more associations."
        }
      },
      "required": [
        "Entries"
      ],
      "type": "object"
    },
    "CreateAssociationBatchRequestEntries": {
      "items": {
        "$ref": "#/definitions/CreateAssociationBatchRequestEntry"
      },
      "minItems": 1,
      "type": "array"
    },
    "CreateAssociationBatchRequestEntry": {
      "description": "Describes the association of a Systems Manager document and an instance.",
      "properties": {
        "AssociationName": {
          "$ref": "#/definitions/AssociationName",
          "description": "Specify a descriptive name for the association."
        },
        "DocumentVersion": {
          "$ref": "#/definitions/DocumentVersion",
          "description": "The document version."
        },
        "InstanceId": {
          "$ref": "#/definitions/InstanceId",
          "description": "The ID of the instance. "
        },
        "Name": {
          "$ref": "#/definitions/DocumentName",
          "description": "The name of the configuration document. "
        },
        "OutputLocation": {
          "$ref": "#/definitions/InstanceAssociationOutputLocation",
          "description": "An Amazon S3 bucket where you want to store the results of this request."
        },
        "Parameters": {
          "$ref": "#/definitions/Parameters",
          "description": "A description of the parameters for a document. "
        },
        "ScheduleExpression": {
          "$ref": "#/definitions/ScheduleExpression",
          "description": "A cron expression that specifies a schedule when the association runs."
        },
        "Targets": {
          "$ref": "#/definitions/Targets",
          "description": "The instances targeted by the request."
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "CreateAssociationBatchResult": {
      "properties": {
        "Failed": {
          "$ref": "#/definitions/FailedCreateAssociationList",
          "description": "Information about the associations that failed."
        },
        "Successful": {
          "$ref": "#/definitions/AssociationDescriptionList",
          "description": "Information about the associations that succeeded."
        }
      },
      "type": "object"
    },
    "CreateAssociationRequest": {
      "properties": {
        "AssociationName": {
          "$ref": "#/definitions/AssociationName",
          "description": "Specify a descriptive name for the association."
        },
        "DocumentVersion": {
          "$ref": "#/definitions/DocumentVersion",
          "description": "The document version you want to associate with the target(s). Can be a specific version or the default version."
        },
        "InstanceId": {
          "$ref": "#/definitions/InstanceId",
          "description": "The instance ID."
        },
        "Name": {
          "$ref": "#/definitions/DocumentName",
          "description": "The name of the Systems Manager document."
        },
        "OutputLocation": {
          "$ref": "#/definitions/InstanceAssociationOutputLocation",
          "description": "An Amazon S3 bucket where you want to store the output details of the request."
        },
        "Parameters": {
          "$ref": "#/definitions/Parameters",
          "description": "The parameters for the documents runtime configuration. "
        },
        "ScheduleExpression": {
          "$ref": "#/definitions/ScheduleExpression",
          "description": "A cron expression when the association will be applied to the target(s)."
        },
        "Targets": {
          "$ref": "#/definitions/Targets",
          "description": "The targets (either instances or tags) for the association."
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "CreateAssociationResult": {
      "properties": {
        "AssociationDescription": {
          "$ref": "#/definitions/AssociationDescription",
          "description": "Information about the association."
        }
      },
      "type": "object"
    },
    "CreateDocumentRequest": {
      "properties": {
        "Content": {
          "$ref": "#/definitions/DocumentContent",
          "description": "A valid JSON string."
        },
        "DocumentType": {
          "$ref": "#/definitions/DocumentType",
          "description": "The type of document to create. Valid document types include: Policy, Automation, and Command."
        },
        "Name": {
          "$ref": "#/definitions/DocumentName",
          "description": "A name for the Systems Manager document."
        }
      },
      "required": [
        "Content",
        "Name"
      ],
      "type": "object"
    },
    "CreateDocumentResult": {
      "properties": {
        "DocumentDescription": {
          "$ref": "#/definitions/DocumentDescription",
          "description": "Information about the Systems Manager document."
        }
      },
      "type": "object"
    },
    "CreateMaintenanceWindowRequest": {
      "properties": {
        "AllowUnassociatedTargets": {
          "$ref": "#/definitions/MaintenanceWindowAllowUnassociatedTargets",
          "description": "<p>Enables a Maintenance Window task to execute on managed instances, even if you have not registered those instances as targets. If enabled, then you must specify the unregistered instances (by instance ID) when you register a task with the Maintenance Window </p> <p>If you don't enable this option, then you must specify previously-registered targets when you register a task with the Maintenance Window. </p>"
        },
        "ClientToken": {
          "$ref": "#/definitions/ClientToken",
          "description": "User-provided idempotency token."
        },
        "Cutoff": {
          "$ref": "#/definitions/MaintenanceWindowCutoff",
          "description": "The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution."
        },
        "Description": {
          "$ref": "#/definitions/MaintenanceWindowDescription",
          "description": "An optional description for the Maintenance Window. We recommend specifying a description to help you organize your Maintenance Windows. "
        },
        "Duration": {
          "$ref": "#/definitions/MaintenanceWindowDurationHours",
          "description": "The duration of the Maintenance Window in hours."
        },
        "Name": {
          "$ref": "#/definitions/MaintenanceWindowName",
          "description": "The name of the Maintenance Window."
        },
        "Schedule": {
          "$ref": "#/definitions/MaintenanceWindowSchedule",
          "description": "The schedule of the Maintenance Window in the form of a cron or rate expression."
        }
      },
      "required": [
        "Name",
        "Schedule",
        "Duration",
        "Cutoff",
        "AllowUnassociatedTargets"
      ],
      "type": "object"
    },
    "CreateMaintenanceWindowResult": {
      "properties": {
        "WindowId": {
          "$ref": "#/definitions/MaintenanceWindowId",
          "description": "The ID of the created Maintenance Window."
        }
      },
      "type": "object"
    },
    "CreatePatchBaselineRequest": {
      "properties": {
        "ApprovalRules": {
          "$ref": "#/definitions/PatchRuleGroup",
          "description": "A set of rules used to include patches in the baseline."
        },
        "ApprovedPatches": {
          "$ref": "#/definitions/PatchIdList",
          "description": "A list of explicitly approved patches for the baseline."
        },
        "ApprovedPatchesComplianceLevel": {
          "$ref": "#/definitions/PatchComplianceLevel",
          "description": "Defines the compliance level for approved patches. This means that if an approved patch is reported as missing, this is the severity of the compliance violation. Valid compliance severity levels include the following: CRITICAL, HIGH, MEDIUM, LOW, INFORMATIONAL, UNSPECIFIED. The default value is UNSPECIFIED."
        },
        "ClientToken": {
          "$ref": "#/definitions/ClientToken",
          "description": "User-provided idempotency token."
        },
        "Description": {
          "$ref": "#/definitions/BaselineDescription",
          "description": "A description of the patch baseline."
        },
        "GlobalFilters": {
          "$ref": "#/definitions/PatchFilterGroup",
          "description": "A set of global filters used to exclude patches from the baseline."
        },
        "Name": {
          "$ref": "#/definitions/BaselineName",
          "description": "The name of the patch baseline."
        },
        "OperatingSystem": {
          "$ref": "#/definitions/OperatingSystem",
          "description": "Defines the operating system the patch baseline applies to. Supported operating systems include WINDOWS, AMAZON_LINUX, UBUNTU and REDHAT_ENTERPRISE_LINUX. The Default value is WINDOWS."
        },
        "RejectedPatches": {
          "$ref": "#/definitions/PatchIdList",
          "description": "A list of explicitly rejected patches for the baseline."
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "CreatePatchBaselineResult": {
      "properties": {
        "BaselineId": {
          "$ref": "#/definitions/BaselineId",
          "description": "The ID of the created patch baseline."
        }
      },
      "type": "object"
    },
    "CreateResourceDataSyncRequest": {
      "properties": {
        "S3Destination": {
          "$ref": "#/definitions/ResourceDataSyncS3Destination",
          "description": "Amazon S3 configuration details for the sync."
        },
        "SyncName": {
          "$ref": "#/definitions/ResourceDataSyncName",
          "description": "A name for the configuration."
        }
      },
      "required": [
        "SyncName",
        "S3Destination"
      ],
      "type": "object"
    },
    "CreateResourceDataSyncResult": {
      "properties": {},
      "type": "object"
    },
    "CreatedDate": {
      "format": "date-time",
      "type": "string"
    },
    "CustomSchemaCountLimitExceededException": {
      "description": "You have exceeded the limit for custom schemas. Delete one or more custom schemas and try again.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "DateTime": {
      "format": "date-time",
      "type": "string"
    },
    "DefaultBaseline": {
      "type": "boolean"
    },
    "DefaultInstanceName": {
      "maxLength": 256,
      "minLength": 0,
      "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
      "type": "string"
    },
    "DeleteActivationRequest": {
      "properties": {
        "ActivationId": {
          "$ref": "#/definitions/ActivationId",
          "description": "The ID of the activation that you want to delete."
        }
      },
      "required": [
        "ActivationId"
      ],
      "type": "object"
    },
    "DeleteActivationResult": {
      "properties": {},
      "type": "object"
    },
    "DeleteAssociationRequest": {
      "properties": {
        "AssociationId": {
          "$ref": "#/definitions/AssociationId",
          "description": "The association ID that you want to delete."
        },
        "InstanceId": {
          "$ref": "#/definitions/InstanceId",
          "description": "The ID of the instance."
        },
        "Name": {
          "$ref": "#/definitions/DocumentName",
          "description": "The name of the Systems Manager document."
        }
      },
      "type": "object"
    },
    "DeleteAssociationResult": {
      "properties": {},
      "type": "object"
    },
    "DeleteDocumentRequest": {
      "properties": {
        "Name": {
          "$ref": "#/definitions/DocumentName",
          "description": "The name of the document."
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "DeleteDocumentResult": {
      "properties": {},
      "type": "object"
    },
    "DeleteMaintenanceWindowRequest": {
      "properties": {
        "WindowId": {
          "$ref": "#/definitions/MaintenanceWindowId",
          "description": "The ID of the Maintenance Window to delete."
        }
      },
      "required": [
        "WindowId"
      ],
      "type": "object"
    },
    "DeleteMaintenanceWindowResult": {
      "properties": {
        "WindowId": {
          "$ref": "#/definitions/MaintenanceWindowId",
          "description": "The ID of the deleted Maintenance Window."
        }
      },
      "type": "object"
    },
    "DeleteParameterRequest": {
      "properties": {
        "Name": {
          "$ref": "#/definitions/PSParameterName",
          "description": "The name of the parameter to delete."
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "DeleteParameterResult": {
      "properties": {},
      "type": "object"
    },
    "DeleteParametersRequest": {
      "properties": {
        "Names": {
          "$ref": "#/definitions/ParameterNameList",
          "description": "The names of the parameters to delete."
        }
      },
      "required": [
        "Names"
      ],
      "type": "object"
    },
    "DeleteParametersResult": {
      "properties": {
        "DeletedParameters": {
          "$ref": "#/definitions/ParameterNameList",
          "description": "The names of the deleted parameters."
        },
        "InvalidParameters": {
          "$ref": "#/definitions/ParameterNameList",
          "description": "The names of parameters that weren't deleted because the parameters are not valid."
        }
      },
      "type": "object"
    },
    "DeletePatchBaselineRequest": {
      "properties": {
        "BaselineId": {
          "$ref": "#/definitions/BaselineId",
          "description": "The ID of the patch baseline to delete."
        }
      },
      "required": [
        "BaselineId"
      ],
      "type": "object"
    },
    "DeletePatchBaselineResult": {
      "properties": {
        "BaselineId": {
          "$ref": "#/definitions/BaselineId",
          "description": "The ID of the deleted patch baseline."
        }
      },
      "type": "object"
    },
    "DeleteResourceDataSyncRequest": {
      "properties": {
        "SyncName": {
          "$ref": "#/definitions/ResourceDataSyncName",
          "description": "The name of the configuration to delete."
        }
      },
      "required": [
        "SyncName"
      ],
      "type": "object"
    },
    "DeleteResourceDataSyncResult": {
      "properties": {},
      "type": "object"
    },
    "DeregisterManagedInstanceRequest": {
      "properties": {
        "InstanceId": {
          "$ref": "#/definitions/ManagedInstanceId",
          "description": "The ID assigned to the managed instance when you registered it using the activation process. "
        }
      },
      "required": [
        "InstanceId"
      ],
      "type": "object"
    },
    "DeregisterManagedInstanceResult": {
      "properties": {},
      "type": "object"
    },
    "DeregisterPatchBaselineForPatchGroupRequest": {
      "properties": {
        "BaselineId": {
          "$ref": "#/definitions/BaselineId",
          "description": "The ID of the patch baseline to deregister the patch group from."
        },
        "PatchGroup": {
          "$ref": "#/definitions/PatchGroup",
          "description": "The name of the patch group that should be deregistered from the patch baseline."
        }
      },
      "required": [
        "BaselineId",
        "PatchGroup"
      ],
      "type": "object"
    },
    "DeregisterPatchBaselineForPatchGroupResult": {
      "properties": {
        "BaselineId": {
          "$ref": "#/definitions/BaselineId",
          "description": "The ID of the patch baseline the patch group was deregistered from."
        },
        "PatchGroup": {
          "$ref": "#/definitions/PatchGroup",
          "description": "The name of the patch group deregistered from the patch baseline."
        }
      },
      "type": "object"
    },
    "DeregisterTargetFromMaintenanceWindowRequest": {
      "properties": {
        "Safe": {
          "$ref": "#/definitions/Boolean",
          "description": "The system checks if the target is being referenced by a task. If the target is being referenced, the system returns an error and does not deregister the target from the Maintenance Window."
        },
        "WindowId": {
          "$ref": "#/definitions/MaintenanceWindowId",
          "description": "The ID of the Maintenance Window the target should be removed from."
        },
        "WindowTargetId": {
          "$ref": "#/definitions/MaintenanceWindowTargetId",
          "description": "The ID of the target definition to remove."
        }
      },
      "required": [
        "WindowId",
        "WindowTargetId"
      ],
      "type": "object"
    },
    "DeregisterTargetFromMaintenanceWindowResult": {
      "properties": {
        "WindowId": {
          "$ref": "#/definitions/MaintenanceWindowId",
          "description": "The ID of the Maintenance Window the target was removed from."
        },
        "WindowTargetId": {
          "$ref": "#/definitions/MaintenanceWindowTargetId",
          "description": "The ID of the removed target definition."
        }
      },
      "type": "object"
    },
    "DeregisterTaskFromMaintenanceWindowRequest": {
      "properties": {
        "WindowId": {
          "$ref": "#/definitions/MaintenanceWindowId",
          "description": "The ID of the Maintenance Window the task should be removed from."
        },
        "WindowTaskId": {
          "$ref": "#/definitions/MaintenanceWindowTaskId",
          "description": "The ID of the task to remove from the Maintenance Window."
        }
      },
      "required": [
        "WindowId",
        "WindowTaskId"
      ],
      "type": "object"
    },
    "DeregisterTaskFromMaintenanceWindowResult": {
      "properties": {
        "WindowId": {
          "$ref": "#/definitions/MaintenanceWindowId",
          "description": "The ID of the Maintenance Window the task was removed from."
        },
        "WindowTaskId": {
          "$ref": "#/definitions/MaintenanceWindowTaskId",
          "description": "The ID of the task removed from the Maintenance Window."
        }
      },
      "type": "object"
    },
    "DescribeActivationsFilter": {
      "description": "Filter for the DescribeActivation API.",
      "properties": {
        "FilterKey": {
          "$ref": "#/definitions/DescribeActivationsFilterKeys",
          "description": "The name of the filter."
        },
        "FilterValues": {
          "$ref": "#/definitions/StringList",
          "description": "The filter values."
        }
      },
      "type": "object"
    },
    "DescribeActivationsFilterKeys": {
      "enum": [
        "ActivationIds",
        "DefaultInstanceName",
        "IamRole"
      ],
      "type": "string"
    },
    "DescribeActivationsFilterList": {
      "items": {
        "$ref": "#/definitions/DescribeActivationsFilter"
      },
      "type": "array"
    },
    "DescribeActivationsRequest": {
      "properties": {
        "Filters": {
          "$ref": "#/definitions/DescribeActivationsFilterList",
          "description": "A filter to view information about your activations."
        },
        "MaxResults": {
          "$ref": "#/definitions/MaxResults",
          "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "A token to start the list. Use this token to get the next set of results. "
        }
      },
      "type": "object"
    },
    "DescribeActivationsResult": {
      "properties": {
        "ActivationList": {
          "$ref": "#/definitions/ActivationList",
          "description": "A list of activations for your AWS account."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token for the next set of items to return. Use this token to get the next set of results. "
        }
      },
      "type": "object"
    },
    "DescribeAssociationRequest": {
      "properties": {
        "AssociationId": {
          "$ref": "#/definitions/AssociationId",
          "description": "The association ID for which you want information."
        },
        "AssociationVersion": {
          "$ref": "#/definitions/AssociationVersion",
          "description": "Specify the association version to retrieve. To view the latest version, either specify <code>$LATEST</code> for this parameter, or omit this parameter. To view a list of all associations for an instance, use ListInstanceAssociations. To get a list of versions for a specific association, use ListAssociationVersions. "
        },
        "InstanceId": {
          "$ref": "#/definitions/InstanceId",
          "description": "The instance ID."
        },
        "Name": {
          "$ref": "#/definitions/DocumentName",
          "description": "The name of the Systems Manager document."
        }
      },
      "type": "object"
    },
    "DescribeAssociationResult": {
      "properties": {
        "AssociationDescription": {
          "$ref": "#/definitions/AssociationDescription",
          "description": "Information about the association."
        }
      },
      "type": "object"
    },
    "DescribeAutomationExecutionsRequest": {
      "properties": {
        "Filters": {
          "$ref": "#/definitions/AutomationExecutionFilterList",
          "description": "Filters used to limit the scope of executions that are requested."
        },
        "MaxResults": {
          "$ref": "#/definitions/MaxResults",
          "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token for the next set of items to return. (You received this token from a previous call.)"
        }
      },
      "type": "object"
    },
    "DescribeAutomationExecutionsResult": {
      "properties": {
        "AutomationExecutionMetadataList": {
          "$ref": "#/definitions/AutomationExecutionMetadataList",
          "description": "The list of details about each automation execution which has occurred which matches the filter specification, if any."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
        }
      },
      "type": "object"
    },
    "DescribeAvailablePatchesRequest": {
      "properties": {
        "Filters": {
          "$ref": "#/definitions/PatchOrchestratorFilterList",
          "description": "Filters used to scope down the returned patches."
        },
        "MaxResults": {
          "$ref": "#/definitions/PatchBaselineMaxResults",
          "description": "The maximum number of patches to return (per page)."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token for the next set of items to return. (You received this token from a previous call.)"
        }
      },
      "type": "object"
    },
    "DescribeAvailablePatchesResult": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
        },
        "Patches": {
          "$ref": "#/definitions/PatchList",
          "description": "An array of patches. Each entry in the array is a patch structure."
        }
      },
      "type": "object"
    },
    "DescribeDocumentPermissionRequest": {
      "properties": {
        "Name": {
          "$ref": "#/definitions/DocumentName",
          "description": "The name of the document for which you are the owner."
        },
        "PermissionType": {
          "$ref": "#/definitions/DocumentPermissionType",
          "description": "The permission type for the document. The permission type can be <i>Share</i>."
        }
      },
      "required": [
        "Name",
        "PermissionType"
      ],
      "type": "object"
    },
    "DescribeDocumentPermissionResponse": {
      "properties": {
        "AccountIds": {
          "$ref": "#/definitions/AccountIdList",
          "description": "The account IDs that have permission to use this document. The ID can be either an AWS account or <i>All</i>."
        }
      },
      "type": "object"
    },
    "DescribeDocumentRequest": {
      "properties": {
        "DocumentVersion": {
          "$ref": "#/definitions/DocumentVersion",
          "description": "The document version for which you want information. Can be a specific version or the default version."
        },
        "Name": {
          "$ref": "#/definitions/DocumentARN",
          "description": "The name of the Systems Manager document."
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "DescribeDocumentResult": {
      "properties": {
        "Document": {
          "$ref": "#/definitions/DocumentDescription",
          "description": "Information about the Systems Manager document."
        }
      },
      "type": "object"
    },
    "DescribeEffectiveInstanceAssociationsRequest": {
      "properties": {
        "InstanceId": {
          "$ref": "#/definitions/InstanceId",
          "description": "The instance ID for which you want to view all associations."
        },
        "MaxResults": {
          "$ref": "#/definitions/EffectiveInstanceAssociationMaxResults",
          "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token for the next set of items to return. (You received this token from a previous call.)"
        }
      },
      "required": [
        "InstanceId"
      ],
      "type": "object"
    },
    "DescribeEffectiveInstanceAssociationsResult": {
      "properties": {
        "Associations": {
          "$ref": "#/definitions/InstanceAssociationList",
          "description": "The associations for the requested instance."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
        }
      },
      "type": "object"
    },
    "DescribeEffectivePatchesForPatchBaselineRequest": {
      "properties": {
        "BaselineId": {
          "$ref": "#/definitions/BaselineId",
          "description": "The ID of the patch baseline to retrieve the effective patches for."
        },
        "MaxResults": {
          "$ref": "#/definitions/PatchBaselineMaxResults",
          "description": "The maximum number of patches to return (per page)."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token for the next set of items to return. (You received this token from a previous call.)"
        }
      },
      "required": [
        "BaselineId"
      ],
      "type": "object"
    },
    "DescribeEffectivePatchesForPatchBaselineResult": {
      "properties": {
        "EffectivePatches": {
          "$ref": "#/definitions/EffectivePatchList",
          "description": "An array of patches and patch status."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
        }
      },
      "type": "object"
    },
    "DescribeInstanceAssociationsStatusRequest": {
      "properties": {
        "InstanceId": {
          "$ref": "#/definitions/InstanceId",
          "description": "The instance IDs for which you want association status information."
        },
        "MaxResults": {
          "$ref": "#/definitions/MaxResults",
          "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token for the next set of items to return. (You received this token from a previous call.)"
        }
      },
      "required": [
        "InstanceId"
      ],
      "type": "object"
    },
    "DescribeInstanceAssociationsStatusResult": {
      "properties": {
        "InstanceAssociationStatusInfos": {
          "$ref": "#/definitions/InstanceAssociationStatusInfos",
          "description": "Status information about the association."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
        }
      },
      "type": "object"
    },
    "DescribeInstanceInformationRequest": {
      "properties": {
        "Filters": {
          "$ref": "#/definitions/InstanceInformationStringFilterList",
          "description": "One or more filters. Use a filter to return a more specific list of instances."
        },
        "InstanceInformationFilterList": {
          "$ref": "#/definitions/InstanceInformationFilterList",
          "description": "One or more filters. Use a filter to return a more specific list of instances."
        },
        "MaxResults": {
          "$ref": "#/definitions/MaxResultsEC2Compatible",
          "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results. "
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token for the next set of items to return. (You received this token from a previous call.)"
        }
      },
      "type": "object"
    },
    "DescribeInstanceInformationResult": {
      "properties": {
        "InstanceInformationList": {
          "$ref": "#/definitions/InstanceInformationList",
          "description": "The instance information list."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty. "
        }
      },
      "type": "object"
    },
    "DescribeInstancePatchStatesForPatchGroupRequest": {
      "properties": {
        "Filters": {
          "$ref": "#/definitions/InstancePatchStateFilterList",
          "description": "<p>Each entry in the array is a structure containing:</p> <p>Key (string between 1 and 200 characters)</p> <p> Values (array containing a single string)</p> <p> Type (string \"Equal\", \"NotEqual\", \"LessThan\", \"GreaterThan\")</p>"
        },
        "MaxResults": {
          "$ref": "#/definitions/PatchComplianceMaxResults",
          "description": "The maximum number of patches to return (per page)."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token for the next set of items to return. (You received this token from a previous call.)"
        },
        "PatchGroup": {
          "$ref": "#/definitions/PatchGroup",
          "description": "The name of the patch group for which the patch state information should be retrieved."
        }
      },
      "required": [
        "PatchGroup"
      ],
      "type": "object"
    },
    "DescribeInstancePatchStatesForPatchGroupResult": {
      "properties": {
        "InstancePatchStates": {
          "$ref": "#/definitions/InstancePatchStatesList",
          "description": "The high-level patch state for the requested instances. "
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
        }
      },
      "type": "object"
    },
    "DescribeInstancePatchStatesRequest": {
      "properties": {
        "InstanceIds": {
          "$ref": "#/definitions/InstanceIdList",
          "description": "The ID of the instance whose patch state information should be retrieved."
        },
        "MaxResults": {
          "$ref": "#/definitions/PatchComplianceMaxResults",
          "description": "The maximum number of instances to return (per page)."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token for the next set of items to return. (You received this token from a previous call.)"
        }
      },
      "required": [
        "InstanceIds"
      ],
      "type": "object"
    },
    "DescribeInstancePatchStatesResult": {
      "properties": {
        "InstancePatchStates": {
          "$ref": "#/definitions/InstancePatchStateList",
          "description": "The high-level patch state for the requested instances."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
        }
      },
      "type": "object"
    },
    "DescribeInstancePatchesRequest": {
      "properties": {
        "Filters": {
          "$ref": "#/definitions/PatchOrchestratorFilterList",
          "description": "<p>Each entry in the array is a structure containing:</p> <p>Key (string, between 1 and 128 characters)</p> <p>Values (array of strings, each string between 1 and 256 characters)</p>"
        },
        "InstanceId": {
          "$ref": "#/definitions/InstanceId",
          "description": "The ID of the instance whose patch state information should be retrieved."
        },
        "MaxResults": {
          "$ref": "#/definitions/PatchComplianceMaxResults",
          "description": "The maximum number of patches to return (per page)."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token for the next set of items to return. (You received this token from a previous call.)"
        }
      },
      "required": [
        "InstanceId"
      ],
      "type": "object"
    },
    "DescribeInstancePatchesResult": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
        },
        "Patches": {
          "$ref": "#/definitions/PatchComplianceDataList",
          "description": "<p>Each entry in the array is a structure containing:</p> <p>Title (string)</p> <p>KBId (string)</p> <p>Classification (string)</p> <p>Severity (string)</p> <p>State (string: \"INSTALLED\", \"INSTALLED OTHER\", \"MISSING\", \"NOT APPLICABLE\", \"FAILED\")</p> <p>InstalledTime (DateTime)</p> <p>InstalledBy (string)</p>"
        }
      },
      "type": "object"
    },
    "DescribeMaintenanceWindowExecutionTaskInvocationsRequest": {
      "properties": {
        "Filters": {
          "$ref": "#/definitions/MaintenanceWindowFilterList",
          "description": "Optional filters used to scope down the returned task invocations. The supported filter key is STATUS with the corresponding values PENDING, IN_PROGRESS, SUCCESS, FAILED, TIMED_OUT, CANCELLING, and CANCELLED."
        },
        "MaxResults": {
          "$ref": "#/definitions/MaintenanceWindowMaxResults",
          "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token for the next set of items to return. (You received this token from a previous call.)"
        },
        "TaskId": {
          "$ref": "#/definitions/MaintenanceWindowExecutionTaskId",
          "description": "The ID of the specific task in the Maintenance Window task that should be retrieved."
        },
        "WindowExecutionId": {
          "$ref": "#/definitions/MaintenanceWindowExecutionId",
          "description": "The ID of the Maintenance Window execution the task is part of."
        }
      },
      "required": [
        "WindowExecutionId",
        "TaskId"
      ],
      "type": "object"
    },
    "DescribeMaintenanceWindowExecutionTaskInvocationsResult": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
        },
        "WindowExecutionTaskInvocationIdentities": {
          "$ref": "#/definitions/MaintenanceWindowExecutionTaskInvocationIdentityList",
          "description": "Information about the task invocation results per invocation."
        }
      },
      "type": "object"
    },
    "DescribeMaintenanceWindowExecutionTasksRequest": {
      "properties": {
        "Filters": {
          "$ref": "#/definitions/MaintenanceWindowFilterList",
          "description": "Optional filters used to scope down the returned tasks. The supported filter key is STATUS with the corresponding values PENDING, IN_PROGRESS, SUCCESS, FAILED, TIMED_OUT, CANCELLING, and CANCELLED. "
        },
        "MaxResults": {
          "$ref": "#/definitions/MaintenanceWindowMaxResults",
          "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token for the next set of items to return. (You received this token from a previous call.)"
        },
        "WindowExecutionId": {
          "$ref": "#/definitions/MaintenanceWindowExecutionId",
          "description": "The ID of the Maintenance Window execution whose task executions should be retrieved."
        }
      },
      "required": [
        "WindowExecutionId"
      ],
      "type": "object"
    },
    "DescribeMaintenanceWindowExecutionTasksResult": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
        },
        "WindowExecutionTaskIdentities": {
          "$ref": "#/definitions/MaintenanceWindowExecutionTaskIdentityList",
          "description": "Information about the task executions."
        }
      },
      "type": "object"
    },
    "DescribeMaintenanceWindowExecutionsRequest": {
      "properties": {
        "Filters": {
          "$ref": "#/definitions/MaintenanceWindowFilterList",
          "description": "<p>Each entry in the array is a structure containing:</p> <p>Key (string, between 1 and 128 characters)</p> <p>Values (array of strings, each string is between 1 and 256 characters)</p> <p>The supported Keys are ExecutedBefore and ExecutedAfter with the value being a date/time string such as 2016-11-04T05:00:00Z.</p>"
        },
        "MaxResults": {
          "$ref": "#/definitions/MaintenanceWindowMaxResults",
          "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token for the next set of items to return. (You received this token from a previous call.)"
        },
        "WindowId": {
          "$ref": "#/definitions/MaintenanceWindowId",
          "description": "The ID of the Maintenance Window whose executions should be retrieved."
        }
      },
      "required": [
        "WindowId"
      ],
      "type": "object"
    },
    "DescribeMaintenanceWindowExecutionsResult": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
        },
        "WindowExecutions": {
          "$ref": "#/definitions/MaintenanceWindowExecutionList",
          "description": "Information about the Maintenance Windows execution."
        }
      },
      "type": "object"
    },
    "DescribeMaintenanceWindowTargetsRequest": {
      "properties": {
        "Filters": {
          "$ref": "#/definitions/MaintenanceWindowFilterList",
          "description": "Optional filters that can be used to narrow down the scope of the returned window targets. The supported filter keys are Type, WindowTargetId and OwnerInformation."
        },
        "MaxResults": {
          "$ref": "#/definitions/MaintenanceWindowMaxResults",
          "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token for the next set of items to return. (You received this token from a previous call.)"
        },
        "WindowId": {
          "$ref": "#/definitions/MaintenanceWindowId",
          "description": "The ID of the Maintenance Window whose targets should be retrieved."
        }
      },
      "required": [
        "WindowId"
      ],
      "type": "object"
    },
    "DescribeMaintenanceWindowTargetsResult": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
        },
        "Targets": {
          "$ref": "#/definitions/MaintenanceWindowTargetList",
          "description": "Information about the targets in the Maintenance Window."
        }
      },
      "type": "object"
    },
    "DescribeMaintenanceWindowTasksRequest": {
      "properties": {
        "Filters": {
          "$ref": "#/definitions/MaintenanceWindowFilterList",
          "description": "Optional filters used to narrow down the scope of the returned tasks. The supported filter keys are WindowTaskId, TaskArn, Priority, and TaskType."
        },
        "MaxResults": {
          "$ref": "#/definitions/MaintenanceWindowMaxResults",
          "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token for the next set of items to return. (You received this token from a previous call.)"
        },
        "WindowId": {
          "$ref": "#/definitions/MaintenanceWindowId",
          "description": "The ID of the Maintenance Window whose tasks should be retrieved."
        }
      },
      "required": [
        "WindowId"
      ],
      "type": "object"
    },
    "DescribeMaintenanceWindowTasksResult": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
        },
        "Tasks": {
          "$ref": "#/definitions/MaintenanceWindowTaskList",
          "description": "Information about the tasks in the Maintenance Window."
        }
      },
      "type": "object"
    },
    "DescribeMaintenanceWindowsRequest": {
      "properties": {
        "Filters": {
          "$ref": "#/definitions/MaintenanceWindowFilterList",
          "description": "Optional filters used to narrow down the scope of the returned Maintenance Windows. Supported filter keys are Name and Enabled."
        },
        "MaxResults": {
          "$ref": "#/definitions/MaintenanceWindowMaxResults",
          "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token for the next set of items to return. (You received this token from a previous call.)"
        }
      },
      "type": "object"
    },
    "DescribeMaintenanceWindowsResult": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
        },
        "WindowIdentities": {
          "$ref": "#/definitions/MaintenanceWindowIdentityList",
          "description": "Information about the Maintenance Windows."
        }
      },
      "type": "object"
    },
    "DescribeParametersRequest": {
      "properties": {
        "Filters": {
          "$ref": "#/definitions/ParametersFilterList",
          "description": "One or more filters. Use a filter to return a more specific list of results."
        },
        "MaxResults": {
          "$ref": "#/definitions/MaxResults",
          "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token for the next set of items to return. (You received this token from a previous call.)"
        },
        "ParameterFilters": {
          "$ref": "#/definitions/ParameterStringFilterList",
          "description": "Filters to limit the request results."
        }
      },
      "type": "object"
    },
    "DescribeParametersResult": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
        },
        "Parameters": {
          "$ref": "#/definitions/ParameterMetadataList",
          "description": "Parameters returned by the request."
        }
      },
      "type": "object"
    },
    "DescribePatchBaselinesRequest": {
      "properties": {
        "Filters": {
          "$ref": "#/definitions/PatchOrchestratorFilterList",
          "description": "<p>Each element in the array is a structure containing: </p> <p>Key: (string, \"NAME_PREFIX\" or \"OWNER\")</p> <p>Value: (array of strings, exactly 1 entry, between 1 and 255 characters)</p>"
        },
        "MaxResults": {
          "$ref": "#/definitions/PatchBaselineMaxResults",
          "description": "The maximum number of patch baselines to return (per page)."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token for the next set of items to return. (You received this token from a previous call.)"
        }
      },
      "type": "object"
    },
    "DescribePatchBaselinesResult": {
      "properties": {
        "BaselineIdentities": {
          "$ref": "#/definitions/PatchBaselineIdentityList",
          "description": "An array of PatchBaselineIdentity elements."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
        }
      },
      "type": "object"
    },
    "DescribePatchGroupStateRequest": {
      "properties": {
        "PatchGroup": {
          "$ref": "#/definitions/PatchGroup",
          "description": "The name of the patch group whose patch snapshot should be retrieved."
        }
      },
      "required": [
        "PatchGroup"
      ],
      "type": "object"
    },
    "DescribePatchGroupStateResult": {
      "properties": {
        "Instances": {
          "$ref": "#/definitions/Integer",
          "description": "The number of instances in the patch group."
        },
        "InstancesWithFailedPatches": {
          "$ref": "#/definitions/Integer",
          "description": "The number of instances with patches from the patch baseline that failed to install."
        },
        "InstancesWithInstalledOtherPatches": {
          "$ref": "#/definitions/Integer",
          "description": "The number of instances with patches installed that aren't defined in the patch baseline."
        },
        "InstancesWithInstalledPatches": {
          "$ref": "#/definitions/Integer",
          "description": "The number of instances with installed patches."
        },
        "InstancesWithMissingPatches": {
          "$ref": "#/definitions/Integer",
          "description": "The number of instances with missing patches from the patch baseline."
        },
        "InstancesWithNotApplicablePatches": {
          "$ref": "#/definitions/Integer",
          "description": "The number of instances with patches that aren't applicable."
        }
      },
      "type": "object"
    },
    "DescribePatchGroupsRequest": {
      "properties": {
        "Filters": {
          "$ref": "#/definitions/PatchOrchestratorFilterList",
          "description": "One or more filters. Use a filter to return a more specific list of results."
        },
        "MaxResults": {
          "$ref": "#/definitions/PatchBaselineMaxResults",
          "description": "The maximum number of patch groups to return (per page)."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token for the next set of items to return. (You received this token from a previous call.)"
        }
      },
      "type": "object"
    },
    "DescribePatchGroupsResult": {
      "properties": {
        "Mappings": {
          "$ref": "#/definitions/PatchGroupPatchBaselineMappingList",
          "description": "<p>Each entry in the array contains:</p> <p>PatchGroup: string (between 1 and 256 characters, Regex: ^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$)</p> <p>PatchBaselineIdentity: A PatchBaselineIdentity element. </p>"
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
        }
      },
      "type": "object"
    },
    "DescriptionInDocument": {
      "type": "string"
    },
    "DocumentARN": {
      "pattern": "^[a-zA-Z0-9_\\-.:/]{3,128}$",
      "type": "string"
    },
    "DocumentAlreadyExists": {
      "description": "The specified document already exists.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "DocumentContent": {
      "minLength": 1,
      "type": "string"
    },
    "DocumentDefaultVersionDescription": {
      "description": "A default version of a document.",
      "properties": {
        "DefaultVersion": {
          "$ref": "#/definitions/DocumentVersion",
          "description": "The default version of the document."
        },
        "Name": {
          "$ref": "#/definitions/DocumentName",
          "description": "The name of the document."
        }
      },
      "type": "object"
    },
    "DocumentDescription": {
      "description": "Describes a Systems Manager document. ",
      "properties": {
        "CreatedDate": {
          "$ref": "#/definitions/DateTime",
          "description": "The date when the document was created."
        },
        "DefaultVersion": {
          "$ref": "#/definitions/DocumentVersion",
          "description": "The default version."
        },
        "Description": {
          "$ref": "#/definitions/DescriptionInDocument",
          "description": "A description of the document. "
        },
        "DocumentType": {
          "$ref": "#/definitions/DocumentType",
          "description": "The type of document. "
        },
        "DocumentVersion": {
          "$ref": "#/definitions/DocumentVersion",
          "description": "The document version."
        },
        "Hash": {
          "$ref": "#/definitions/DocumentHash",
          "description": "<p>The Sha256 or Sha1 hash created by the system when the document was created. </p> <note> <p>Sha1 hashes have been deprecated.</p> </note>"
        },
        "HashType": {
          "$ref": "#/definitions/DocumentHashType",
          "description": "<p>Sha256 or Sha1.</p> <note> <p>Sha1 hashes have been deprecated.</p> </note>"
        },
        "LatestVersion": {
          "$ref": "#/definitions/DocumentVersion",
          "description": "The latest version of the document."
        },
        "Name": {
          "$ref": "#/definitions/DocumentARN",
          "description": "The name of the Systems Manager document."
        },
        "Owner": {
          "$ref": "#/definitions/DocumentOwner",
          "description": "The AWS user account that created the document."
        },
        "Parameters": {
          "$ref": "#/definitions/DocumentParameterList",
          "description": "A description of the parameters for a document."
        },
        "PlatformTypes": {
          "$ref": "#/definitions/PlatformTypeList",
          "description": "The list of OS platforms compatible with this Systems Manager document. "
        },
        "SchemaVersion": {
          "$ref": "#/definitions/DocumentSchemaVersion",
          "description": "The schema version."
        },
        "Sha1": {
          "$ref": "#/definitions/DocumentSha1",
          "description": "The SHA1 hash of the document, which you can use for verification."
        },
        "Status": {
          "$ref": "#/definitions/DocumentStatus",
          "description": "The status of the Systems Manager document."
        },
        "Tags": {
          "$ref": "#/definitions/TagList",
          "description": "The tags, or metadata, that have been applied to the document."
        }
      },
      "type": "object"
    },
    "DocumentFilter": {
      "description": "Describes a filter.",
      "properties": {
        "key": {
          "$ref": "#/definitions/DocumentFilterKey",
          "description": "The name of the filter."
        },
        "value": {
          "$ref": "#/definitions/DocumentFilterValue",
          "description": "The value of the filter."
        }
      },
      "required": [
        "key",
        "value"
      ],
      "type": "object"
    },
    "DocumentFilterKey": {
      "enum": [
        "Name",
        "Owner",
        "PlatformTypes",
        "DocumentType"
      ],
      "type": "string"
    },
    "DocumentFilterList": {
      "items": {
        "$ref": "#/definitions/DocumentFilter"
      },
      "minItems": 1,
      "type": "array"
    },
    "DocumentFilterValue": {
      "minLength": 1,
      "type": "string"
    },
    "DocumentHash": {
      "maxLength": 256,
      "type": "string"
    },
    "DocumentHashType": {
      "enum": [
        "Sha256",
        "Sha1"
      ],
      "type": "string"
    },
    "DocumentIdentifier": {
      "description": "Describes the name of a Systems Manager document.",
      "properties": {
        "DocumentType": {
          "$ref": "#/definitions/DocumentType",
          "description": "The document type."
        },
        "DocumentVersion": {
          "$ref": "#/definitions/DocumentVersion",
          "description": "The document version."
        },
        "Name": {
          "$ref": "#/definitions/DocumentARN",
          "description": "The name of the Systems Manager document."
        },
        "Owner": {
          "$ref": "#/definitions/DocumentOwner",
          "description": "The AWS user account that created the document."
        },
        "PlatformTypes": {
          "$ref": "#/definitions/PlatformTypeList",
          "description": "The operating system platform. "
        },
        "SchemaVersion": {
          "$ref": "#/definitions/DocumentSchemaVersion",
          "description": "The schema version."
        },
        "Tags": {
          "$ref": "#/definitions/TagList",
          "description": "The tags, or metadata, that have been applied to the document."
        }
      },
      "type": "object"
    },
    "DocumentIdentifierList": {
      "items": {
        "$ref": "#/definitions/DocumentIdentifier"
      },
      "type": "array"
    },
    "DocumentKeyValuesFilter": {
      "description": "<p>One or more filters. Use a filter to return a more specific list of documents.</p> <p>For keys, you can specify one or more tags that have been applied to a document. </p> <p>Other valid values include Owner, Name, PlatformTypes, and DocumentType.</p> <p>Note that only one Owner can be specified in a request. For example: <code>Key=Owner,Values=Self</code>.</p> <p>If you use Name as a key, you can use a name prefix to return a list of documents. For example, in the AWS CLI, to return a list of all documents that begin with <code>Te</code>, run the following command:</p> <p> <code>aws ssm list-documents --filters Key=Name,Values=Te</code> </p> <p>If you specify more than two keys, only documents that are identified by all the tags are returned in the results. If you specify more than two values for a key, documents that are identified by any of the values are returned in the results.</p> <p>To specify a custom key and value pair, use the format <code>Key=tag:[tagName],Values=[valueName]</code>.</p> <p>For example, if you created a Key called region and are using the AWS CLI to call the <code>list-documents</code> command: </p> <p> <code>aws ssm list-documents --filters Key=tag:region,Values=east,west Key=Owner,Values=Self</code> </p>",
      "properties": {
        "Key": {
          "$ref": "#/definitions/DocumentKeyValuesFilterKey",
          "description": "The name of the filter key."
        },
        "Values": {
          "$ref": "#/definitions/DocumentKeyValuesFilterValues",
          "description": "The value for the filter key."
        }
      },
      "type": "object"
    },
    "DocumentKeyValuesFilterKey": {
      "maxLength": 128,
      "minLength": 1,
      "type": "string"
    },
    "DocumentKeyValuesFilterList": {
      "items": {
        "$ref": "#/definitions/DocumentKeyValuesFilter"
      },
      "maxItems": 5,
      "minItems": 0,
      "type": "array"
    },
    "DocumentKeyValuesFilterValue": {
      "maxLength": 256,
      "minLength": 1,
      "type": "string"
    },
    "DocumentKeyValuesFilterValues": {
      "items": {
        "$ref": "#/definitions/DocumentKeyValuesFilterValue"
      },
      "type": "array"
    },
    "DocumentLimitExceeded": {
      "description": "You can have at most 200 active Systems Manager documents.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "DocumentName": {
      "pattern": "^[a-zA-Z0-9_\\-.]{3,128}$",
      "type": "string"
    },
    "DocumentOwner": {
      "type": "string"
    },
    "DocumentParameter": {
      "description": "Parameters specified in a System Manager document that execute on the server when the command is run. ",
      "properties": {
        "DefaultValue": {
          "$ref": "#/definitions/DocumentParameterDefaultValue",
          "description": "If specified, the default values for the parameters. Parameters without a default value are required. Parameters with a default value are optional."
        },
        "Description": {
          "$ref": "#/definitions/DocumentParameterDescrption",
          "description": "A description of what the parameter does, how to use it, the default value, and whether or not the parameter is optional."
        },
        "Name": {
          "$ref": "#/definitions/DocumentParameterName",
          "description": "The name of the parameter."
        },
        "Type": {
          "$ref": "#/definitions/DocumentParameterType",
          "description": "The type of parameter. The type can be either String or StringList."
        }
      },
      "type": "object"
    },
    "DocumentParameterDefaultValue": {
      "type": "string"
    },
    "DocumentParameterDescrption": {
      "type": "string"
    },
    "DocumentParameterList": {
      "items": {
        "$ref": "#/definitions/DocumentParameter"
      },
      "type": "array"
    },
    "DocumentParameterName": {
      "type": "string"
    },
    "DocumentParameterType": {
      "enum": [
        "String",
        "StringList"
      ],
      "type": "string"
    },
    "DocumentPermissionLimit": {
      "description": "The document cannot be shared with more AWS user accounts. You can share a document with a maximum of 20 accounts. You can publicly share up to five documents. If you need to increase this limit, contact AWS Support.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "DocumentPermissionType": {
      "enum": [
        "Share"
      ],
      "type": "string"
    },
    "DocumentSchemaVersion": {
      "pattern": "([0-9]+)\\.([0-9]+)",
      "type": "string"
    },
    "DocumentSha1": {
      "type": "string"
    },
    "DocumentStatus": {
      "enum": [
        "Creating",
        "Active",
        "Updating",
        "Deleting"
      ],
      "type": "string"
    },
    "DocumentType": {
      "enum": [
        "Command",
        "Policy",
        "Automation"
      ],
      "type": "string"
    },
    "DocumentVersion": {
      "pattern": "([$]LATEST|[$]DEFAULT|^[1-9][0-9]*$)",
      "type": "string"
    },
    "DocumentVersionInfo": {
      "description": "Version information about the document.",
      "properties": {
        "CreatedDate": {
          "$ref": "#/definitions/DateTime",
          "description": "The date the document was created."
        },
        "DocumentVersion": {
          "$ref": "#/definitions/DocumentVersion",
          "description": "The document version."
        },
        "IsDefaultVersion": {
          "$ref": "#/definitions/Boolean",
          "description": "An identifier for the default version of the document."
        },
        "Name": {
          "$ref": "#/definitions/DocumentName",
          "description": "The document name."
        }
      },
      "type": "object"
    },
    "DocumentVersionLimitExceeded": {
      "description": "The document has too many versions. Delete one or more document versions and try again.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "DocumentVersionList": {
      "items": {
        "$ref": "#/definitions/DocumentVersionInfo"
      },
      "minItems": 1,
      "type": "array"
    },
    "DocumentVersionNumber": {
      "pattern": "(^[1-9][0-9]*$)",
      "type": "string"
    },
    "DoesNotExistException": {
      "description": "Error returned when the ID specified for a resource (e.g. a Maintenance Window) doesn't exist.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "DuplicateDocumentContent": {
      "description": "The content of the association document matches another document. Change the content of the document and try again.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "DuplicateInstanceId": {
      "description": "You cannot specify an instance ID in more than one association.",
      "properties": {},
      "type": "object"
    },
    "EffectiveInstanceAssociationMaxResults": {
      "maximum": 5,
      "minimum": 1,
      "type": "integer"
    },
    "EffectivePatch": {
      "description": "The EffectivePatch structure defines metadata about a patch along with the approval state of the patch in a particular patch baseline. The approval state includes information about whether the patch is currently approved, due to be approved by a rule, explicitly approved, or explicitly rejected and the date the patch was or will be approved.",
      "properties": {
        "Patch": {
          "$ref": "#/definitions/Patch",
          "description": "Provides metadata for a patch, including information such as the KB ID, severity, classification and a URL for where more information can be obtained about the patch."
        },
        "PatchStatus": {
          "$ref": "#/definitions/PatchStatus",
          "description": "The status of the patch in a patch baseline. This includes information about whether the patch is currently approved, due to be approved by a rule, explicitly approved, or explicitly rejected and the date the patch was or will be approved."
        }
      },
      "type": "object"
    },
    "EffectivePatchList": {
      "items": {
        "$ref": "#/definitions/EffectivePatch"
      },
      "type": "array"
    },
    "ErrorCount": {
      "type": "integer"
    },
    "ExpirationDate": {
      "format": "date-time",
      "type": "string"
    },
    "FailedCreateAssociation": {
      "description": "Describes a failed association.",
      "properties": {
        "Entry": {
          "$ref": "#/definitions/CreateAssociationBatchRequestEntry",
          "description": "The association."
        },
        "Fault": {
          "$ref": "#/definitions/Fault",
          "description": "The source of the failure."
        },
        "Message": {
          "$ref": "#/definitions/BatchErrorMessage",
          "description": "A description of the failure."
        }
      },
      "type": "object"
    },
    "FailedCreateAssociationList": {
      "items": {
        "$ref": "#/definitions/FailedCreateAssociation"
      },
      "type": "array"
    },
    "FailureDetails": {
      "description": "Information about an Automation failure.",
      "properties": {
        "Details": {
          "$ref": "#/definitions/AutomationParameterMap",
          "description": "Detailed information about the Automation step failure."
        },
        "FailureStage": {
          "$ref": "#/definitions/String",
          "description": "The stage of the Automation execution when the failure occurred. The stages include the following: InputValidation, PreVerification, Invocation, PostVerification."
        },
        "FailureType": {
          "$ref": "#/definitions/String",
          "description": "The type of Automation failure. Failure types include the following: Action, Permission, Throttling, Verification, Internal."
        }
      },
      "type": "object"
    },
    "Fault": {
      "enum": [
        "Client",
        "Server",
        "Unknown"
      ],
      "type": "string"
    },
    "FeatureNotAvailableException": {
      "description": "You attempted to register a LAMBDA or STEP_FUNCTION task in a region where the corresponding service is not available. ",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "GetAutomationExecutionRequest": {
      "properties": {
        "AutomationExecutionId": {
          "$ref": "#/definitions/AutomationExecutionId",
          "description": "The unique identifier for an existing automation execution to examine. The execution ID is returned by StartAutomationExecution when the execution of an Automation document is initiated."
        }
      },
      "required": [
        "AutomationExecutionId"
      ],
      "type": "object"
    },
    "GetAutomationExecutionResult": {
      "properties": {
        "AutomationExecution": {
          "$ref": "#/definitions/AutomationExecution",
          "description": "Detailed information about the current state of an automation execution."
        }
      },
      "type": "object"
    },
    "GetCommandInvocationRequest": {
      "properties": {
        "CommandId": {
          "$ref": "#/definitions/CommandId",
          "description": "(Required) The parent command ID of the invocation plugin."
        },
        "InstanceId": {
          "$ref": "#/definitions/InstanceId",
          "description": "(Required) The ID of the managed instance targeted by the command. A managed instance can be an Amazon EC2 instance or an instance in your hybrid environment that is configured for Systems Manager."
        },
        "PluginName": {
          "$ref": "#/definitions/CommandPluginName",
          "description": "(Optional) The name of the plugin for which you want detailed results. If the document contains only one plugin, the name can be omitted and the details will be returned."
        }
      },
      "required": [
        "CommandId",
        "InstanceId"
      ],
      "type": "object"
    },
    "GetCommandInvocationResult": {
      "properties": {
        "CommandId": {
          "$ref": "#/definitions/CommandId",
          "description": "The parent command ID of the invocation plugin."
        },
        "Comment": {
          "$ref": "#/definitions/Comment",
          "description": "The comment text for the command."
        },
        "DocumentName": {
          "$ref": "#/definitions/DocumentName",
          "description": "The name of the document that was executed. For example, AWS-RunShellScript."
        },
        "ExecutionElapsedTime": {
          "$ref": "#/definitions/StringDateTime",
          "description": "Duration since ExecutionStartDateTime."
        },
        "ExecutionEndDateTime": {
          "$ref": "#/definitions/StringDateTime",
          "description": "<p>The date and time the plugin was finished executing. Date and time are written in ISO 8601 format. For example, June 7, 2017 is represented as 2017-06-7. The following sample AWS CLI command uses the <code>InvokedAfter</code> filter.</p> <p> <code>aws ssm list-commands --filters key=InvokedAfter,value=2017-06-07T00:00:00Z</code> </p> <p>If the plugin has not started to execute, the string is empty.</p>"
        },
        "ExecutionStartDateTime": {
          "$ref": "#/definitions/StringDateTime",
          "description": "<p>The date and time the plugin started executing. Date and time are written in ISO 8601 format. For example, June 7, 2017 is represented as 2017-06-7. The following sample AWS CLI command uses the <code>InvokedBefore</code> filter.</p> <p> <code>aws ssm list-commands --filters key=InvokedBefore,value=2017-06-07T00:00:00Z</code> </p> <p>If the plugin has not started to execute, the string is empty.</p>"
        },
        "InstanceId": {
          "$ref": "#/definitions/InstanceId",
          "description": "The ID of the managed instance targeted by the command. A managed instance can be an Amazon EC2 instance or an instance in your hybrid environment that is configured for Systems Manager."
        },
        "PluginName": {
          "$ref": "#/definitions/CommandPluginName",
          "description": "The name of the plugin for which you want detailed results. For example, aws:RunShellScript is a plugin."
        },
        "ResponseCode": {
          "$ref": "#/definitions/ResponseCode",
          "description": "The error level response code for the plugin script. If the response code is -1, then the command has not started executing on the instance, or it was not received by the instance."
        },
        "StandardErrorContent": {
          "$ref": "#/definitions/StandardErrorContent",
          "description": "The first 8,000 characters written by the plugin to stderr. If the command has not finished executing, then this string is empty."
        },
        "StandardErrorUrl": {
          "$ref": "#/definitions/Url",
          "description": "The URL for the complete text written by the plugin to stderr. If the command has not finished executing, then this string is empty."
        },
        "StandardOutputContent": {
          "$ref": "#/definitions/StandardOutputContent",
          "description": "The first 24,000 characters written by the plugin to stdout. If the command has not finished executing, if ExecutionStatus is neither Succeeded nor Failed, then this string is empty."
        },
        "StandardOutputUrl": {
          "$ref": "#/definitions/Url",
          "description": "The URL for the complete text written by the plugin to stdout in Amazon S3. If an Amazon S3 bucket was not specified, then this string is empty."
        },
        "Status": {
          "$ref": "#/definitions/CommandInvocationStatus",
          "description": "The status of the parent command for this invocation. This status can be different than StatusDetails."
        },
        "StatusDetails": {
          "$ref": "#/definitions/StatusDetails",
          "description": "<p>A detailed status of the command execution for an invocation. StatusDetails includes more information than Status because it includes states resulting from error and concurrency control parameters. StatusDetails can show different results than Status. For more information about these statuses, see <a href=\"http://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-about-status.html\">Run Command Status</a>. StatusDetails can be one of the following values:</p> <ul> <li> <p>Pending: The command has not been sent to the instance.</p> </li> <li> <p>In Progress: The command has been sent to the instance but has not reached a terminal state.</p> </li> <li> <p>Delayed: The system attempted to send the command to the target, but the target was not available. The instance might not be available because of network issues, the instance was stopped, etc. The system will try to deliver the command again.</p> </li> <li> <p>Success: The command or plugin was executed successfully. This is a terminal state.</p> </li> <li> <p>Delivery Timed Out: The command was not delivered to the instance before the delivery timeout expired. Delivery timeouts do not count against the parent command's MaxErrors limit, but they do contribute to whether the parent command status is Success or Incomplete. This is a terminal state.</p> </li> <li> <p>Execution Timed Out: The command started to execute on the instance, but the execution was not complete before the timeout expired. Execution timeouts count against the MaxErrors limit of the parent command. This is a terminal state.</p> </li> <li> <p>Failed: The command wasn't executed successfully on the instance. For a plugin, this indicates that the result code was not zero. For a command invocation, this indicates that the result code for one or more plugins was not zero. Invocation failures count against the MaxErrors limit of the parent command. This is a terminal state.</p> </li> <li> <p>Canceled: The command was terminated before it was completed. This is a terminal state.</p> </li> <li> <p>Undeliverable: The command can't be delivered to the instance. The instance might not exist or might not be responding. Undeliverable invocations don't count against the parent command's MaxErrors limit and don't contribute to whether the parent command status is Success or Incomplete. This is a terminal state.</p> </li> <li> <p>Terminated: The parent command exceeded its MaxErrors limit and subsequent command invocations were canceled by the system. This is a terminal state.</p> </li> </ul>"
        }
      },
      "type": "object"
    },
    "GetDefaultPatchBaselineRequest": {
      "properties": {
        "OperatingSystem": {
          "$ref": "#/definitions/OperatingSystem",
          "description": "Returns the default patch baseline for the specified operating system."
        }
      },
      "type": "object"
    },
    "GetDefaultPatchBaselineResult": {
      "properties": {
        "BaselineId": {
          "$ref": "#/definitions/BaselineId",
          "description": "The ID of the default patch baseline."
        },
        "OperatingSystem": {
          "$ref": "#/definitions/OperatingSystem",
          "description": "The operating system for the returned patch baseline. "
        }
      },
      "type": "object"
    },
    "GetDeployablePatchSnapshotForInstanceRequest": {
      "properties": {
        "InstanceId": {
          "$ref": "#/definitions/InstanceId",
          "description": "The ID of the instance for which the appropriate patch snapshot should be retrieved."
        },
        "SnapshotId": {
          "$ref": "#/definitions/SnapshotId",
          "description": "The user-defined snapshot ID."
        }
      },
      "required": [
        "InstanceId",
        "SnapshotId"
      ],
      "type": "object"
    },
    "GetDeployablePatchSnapshotForInstanceResult": {
      "properties": {
        "InstanceId": {
          "$ref": "#/definitions/InstanceId",
          "description": "The ID of the instance."
        },
        "Product": {
          "$ref": "#/definitions/Product",
          "description": "Returns the specific operating system (for example Windows Server 2012 or Amazon Linux 2015.09) on the instance for the specified patch snapshot."
        },
        "SnapshotDownloadUrl": {
          "$ref": "#/definitions/SnapshotDownloadUrl",
          "description": "A pre-signed Amazon S3 URL that can be used to download the patch snapshot."
        },
        "SnapshotId": {
          "$ref": "#/definitions/SnapshotId",
          "description": "The user-defined snapshot ID."
        }
      },
      "type": "object"
    },
    "GetDocumentRequest": {
      "properties": {
        "DocumentVersion": {
          "$ref": "#/definitions/DocumentVersion",
          "description": "The document version for which you want information."
        },
        "Name": {
          "$ref": "#/definitions/DocumentARN",
          "description": "The name of the Systems Manager document."
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "GetDocumentResult": {
      "properties": {
        "Content": {
          "$ref": "#/definitions/DocumentContent",
          "description": "The contents of the Systems Manager document."
        },
        "DocumentType": {
          "$ref": "#/definitions/DocumentType",
          "description": "The document type."
        },
        "DocumentVersion": {
          "$ref": "#/definitions/DocumentVersion",
          "description": "The document version."
        },
        "Name": {
          "$ref": "#/definitions/DocumentARN",
          "description": "The name of the Systems Manager document."
        }
      },
      "type": "object"
    },
    "GetInventoryRequest": {
      "properties": {
        "Filters": {
          "$ref": "#/definitions/InventoryFilterList",
          "description": "One or more filters. Use a filter to return a more specific list of results."
        },
        "MaxResults": {
          "$ref": "#/definitions/MaxResults",
          "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token for the next set of items to return. (You received this token from a previous call.)"
        },
        "ResultAttributes": {
          "$ref": "#/definitions/ResultAttributeList",
          "description": "The list of inventory item types to return."
        }
      },
      "type": "object"
    },
    "GetInventoryResult": {
      "properties": {
        "Entities": {
          "$ref": "#/definitions/InventoryResultEntityList",
          "description": "Collection of inventory entities such as a collection of instance inventory. "
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
        }
      },
      "type": "object"
    },
    "GetInventorySchemaMaxResults": {
      "maximum": 200,
      "minimum": 50,
      "type": "integer"
    },
    "GetInventorySchemaRequest": {
      "properties": {
        "MaxResults": {
          "$ref": "#/definitions/GetInventorySchemaMaxResults",
          "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token for the next set of items to return. (You received this token from a previous call.)"
        },
        "SubType": {
          "$ref": "#/definitions/IsSubTypeSchema",
          "description": "Returns the sub-type schema for a specified inventory type."
        },
        "TypeName": {
          "$ref": "#/definitions/InventoryItemTypeNameFilter",
          "description": "The type of inventory item to return."
        }
      },
      "type": "object"
    },
    "GetInventorySchemaResult": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
        },
        "Schemas": {
          "$ref": "#/definitions/InventoryItemSchemaResultList",
          "description": "Inventory schemas returned by the request."
        }
      },
      "type": "object"
    },
    "GetMaintenanceWindowExecutionRequest": {
      "properties": {
        "WindowExecutionId": {
          "$ref": "#/definitions/MaintenanceWindowExecutionId",
          "description": "The ID of the Maintenance Window execution that includes the task."
        }
      },
      "required": [
        "WindowExecutionId"
      ],
      "type": "object"
    },
    "GetMaintenanceWindowExecutionResult": {
      "properties": {
        "EndTime": {
          "$ref": "#/definitions/DateTime",
          "description": "The time the Maintenance Window finished executing."
        },
        "StartTime": {
          "$ref": "#/definitions/DateTime",
          "description": "The time the Maintenance Window started executing."
        },
        "Status": {
          "$ref": "#/definitions/MaintenanceWindowExecutionStatus",
          "description": "The status of the Maintenance Window execution."
        },
        "StatusDetails": {
          "$ref": "#/definitions/MaintenanceWindowExecutionStatusDetails",
          "description": "The details explaining the Status. Only available for certain status values."
        },
        "TaskIds": {
          "$ref": "#/definitions/MaintenanceWindowExecutionTaskIdList",
          "description": "The ID of the task executions from the Maintenance Window execution."
        },
        "WindowExecutionId": {
          "$ref": "#/definitions/MaintenanceWindowExecutionId",
          "description": "The ID of the Maintenance Window execution."
        }
      },
      "type": "object"
    },
    "GetMaintenanceWindowExecutionTaskInvocationRequest": {
      "properties": {
        "InvocationId": {
          "$ref": "#/definitions/MaintenanceWindowExecutionTaskInvocationId",
          "description": "The invocation ID to retrieve."
        },
        "TaskId": {
          "$ref": "#/definitions/MaintenanceWindowExecutionTaskId",
          "description": "The ID of the specific task in the Maintenance Window task that should be retrieved. "
        },
        "WindowExecutionId": {
          "$ref": "#/definitions/MaintenanceWindowExecutionId",
          "description": "The ID of the Maintenance Window execution for which the task is a part."
        }
      },
      "required": [
        "WindowExecutionId",
        "TaskId",
        "InvocationId"
      ],
      "type": "object"
    },
    "GetMaintenanceWindowExecutionTaskInvocationResult": {
      "properties": {
        "EndTime": {
          "$ref": "#/definitions/DateTime",
          "description": "The time that the task finished executing on the target."
        },
        "ExecutionId": {
          "$ref": "#/definitions/MaintenanceWindowExecutionTaskExecutionId",
          "description": "The execution ID."
        },
        "InvocationId": {
          "$ref": "#/definitions/MaintenanceWindowExecutionTaskInvocationId",
          "description": "The invocation ID."
        },
        "OwnerInformation": {
          "$ref": "#/definitions/OwnerInformation",
          "description": "User-provided value to be included in any CloudWatch events raised while running tasks for these targets in this Maintenance Window. "
        },
        "Parameters": {
          "$ref": "#/definitions/MaintenanceWindowExecutionTaskInvocationParameters",
          "description": "The parameters used at the time that the task executed."
        },
        "StartTime": {
          "$ref": "#/definitions/DateTime",
          "description": "The time that the task started executing on the target."
        },
        "Status": {
          "$ref": "#/definitions/MaintenanceWindowExecutionStatus",
          "description": "The task status for an invocation."
        },
        "StatusDetails": {
          "$ref": "#/definitions/MaintenanceWindowExecutionStatusDetails",
          "description": "The details explaining the status. Details are only available for certain status values."
        },
        "TaskExecutionId": {
          "$ref": "#/definitions/MaintenanceWindowExecutionTaskId",
          "description": "The task execution ID."
        },
        "TaskType": {
          "$ref": "#/definitions/MaintenanceWindowTaskType",
          "description": "Retrieves the task type for a Maintenance Window. Task types include the following: LAMBDA, STEP_FUNCTION, AUTOMATION, RUN_COMMAND."
        },
        "WindowExecutionId": {
          "$ref": "#/definitions/MaintenanceWindowExecutionId",
          "description": "The Maintenance Window execution ID."
        },
        "WindowTargetId": {
          "$ref": "#/definitions/MaintenanceWindowTaskTargetId",
          "description": "The Maintenance Window target ID."
        }
      },
      "type": "object"
    },
    "GetMaintenanceWindowExecutionTaskRequest": {
      "properties": {
        "TaskId": {
          "$ref": "#/definitions/MaintenanceWindowExecutionTaskId",
          "description": "The ID of the specific task execution in the Maintenance Window task that should be retrieved."
        },
        "WindowExecutionId": {
          "$ref": "#/definitions/MaintenanceWindowExecutionId",
          "description": "The ID of the Maintenance Window execution that includes the task."
        }
      },
      "required": [
        "WindowExecutionId",
        "TaskId"
      ],
      "type": "object"
    },
    "GetMaintenanceWindowExecutionTaskResult": {
      "properties": {
        "EndTime": {
          "$ref": "#/definitions/DateTime",
          "description": "The time the task execution completed."
        },
        "MaxConcurrency": {
          "$ref": "#/definitions/MaxConcurrency",
          "description": "The defined maximum number of task executions that could be run in parallel."
        },
        "MaxErrors": {
          "$ref": "#/definitions/MaxErrors",
          "description": "The defined maximum number of task execution errors allowed before scheduling of the task execution would have been stopped."
        },
        "Priority": {
          "$ref": "#/definitions/MaintenanceWindowTaskPriority",
          "description": "The priority of the task."
        },
        "ServiceRole": {
          "$ref": "#/definitions/ServiceRole",
          "description": "The role that was assumed when executing the task."
        },
        "StartTime": {
          "$ref": "#/definitions/DateTime",
          "description": "The time the task execution started."
        },
        "Status": {
          "$ref": "#/definitions/MaintenanceWindowExecutionStatus",
          "description": "The status of the task."
        },
        "StatusDetails": {
          "$ref": "#/definitions/MaintenanceWindowExecutionStatusDetails",
          "description": "The details explaining the Status. Only available for certain status values."
        },
        "TaskArn": {
          "$ref": "#/definitions/MaintenanceWindowTaskArn",
          "description": "The ARN of the executed task."
        },
        "TaskExecutionId": {
          "$ref": "#/definitions/MaintenanceWindowExecutionTaskId",
          "description": "The ID of the specific task execution in the Maintenance Window task that was retrieved."
        },
        "TaskParameters": {
          "$ref": "#/definitions/MaintenanceWindowTaskParametersList",
          "description": "<p>The parameters passed to the task when it was executed. The map has the following format:</p> <p>Key: string, between 1 and 255 characters</p> <p>Value: an array of strings, each string is between 1 and 255 characters</p>"
        },
        "Type": {
          "$ref": "#/definitions/MaintenanceWindowTaskType",
          "description": "The type of task executed."
        },
        "WindowExecutionId": {
          "$ref": "#/definitions/MaintenanceWindowExecutionId",
          "description": "The ID of the Maintenance Window execution that includes the task."
        }
      },
      "type": "object"
    },
    "GetMaintenanceWindowRequest": {
      "properties": {
        "WindowId": {
          "$ref": "#/definitions/MaintenanceWindowId",
          "description": "The ID of the desired Maintenance Window."
        }
      },
      "required": [
        "WindowId"
      ],
      "type": "object"
    },
    "GetMaintenanceWindowResult": {
      "properties": {
        "AllowUnassociatedTargets": {
          "$ref": "#/definitions/MaintenanceWindowAllowUnassociatedTargets",
          "description": "Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets."
        },
        "CreatedDate": {
          "$ref": "#/definitions/DateTime",
          "description": "The date the Maintenance Window was created."
        },
        "Cutoff": {
          "$ref": "#/definitions/MaintenanceWindowCutoff",
          "description": "The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution."
        },
        "Description": {
          "$ref": "#/definitions/MaintenanceWindowDescription",
          "description": "The description of the Maintenance Window."
        },
        "Duration": {
          "$ref": "#/definitions/MaintenanceWindowDurationHours",
          "description": "The duration of the Maintenance Window in hours."
        },
        "Enabled": {
          "$ref": "#/definitions/MaintenanceWindowEnabled",
          "description": "Whether the Maintenance Windows is enabled."
        },
        "ModifiedDate": {
          "$ref": "#/definitions/DateTime",
          "description": "The date the Maintenance Window was last modified."
        },
        "Name": {
          "$ref": "#/definitions/MaintenanceWindowName",
          "description": "The name of the Maintenance Window."
        },
        "Schedule": {
          "$ref": "#/definitions/MaintenanceWindowSchedule",
          "description": "The schedule of the Maintenance Window in the form of a cron or rate expression."
        },
        "WindowId": {
          "$ref": "#/definitions/MaintenanceWindowId",
          "description": "The ID of the created Maintenance Window."
        }
      },
      "type": "object"
    },
    "GetMaintenanceWindowTaskRequest": {
      "properties": {
        "WindowId": {
          "$ref": "#/definitions/MaintenanceWindowId",
          "description": "The Maintenance Window ID that includes the task to retrieve."
        },
        "WindowTaskId": {
          "$ref": "#/definitions/MaintenanceWindowTaskId",
          "description": "The Maintenance Window task ID to retrieve."
        }
      },
      "required": [
        "WindowId",
        "WindowTaskId"
      ],
      "type": "object"
    },
    "GetMaintenanceWindowTaskResult": {
      "properties": {
        "Description": {
          "$ref": "#/definitions/MaintenanceWindowDescription",
          "description": "The retrieved task description."
        },
        "LoggingInfo": {
          "$ref": "#/definitions/LoggingInfo",
          "description": "The location in Amazon S3 where the task results are logged."
        },
        "MaxConcurrency": {
          "$ref": "#/definitions/MaxConcurrency",
          "description": "The maximum number of targets allowed to run this task in parallel."
        },
        "MaxErrors": {
          "$ref": "#/definitions/MaxErrors",
          "description": "The maximum number of errors allowed before the task stops being scheduled."
        },
        "Name": {
          "$ref": "#/definitions/MaintenanceWindowName",
          "description": "The retrieved task name."
        },
        "Priority": {
          "$ref": "#/definitions/MaintenanceWindowTaskPriority",
          "description": "The priority of the task when it executes. The lower the number, the higher the priority. Tasks that have the same priority are scheduled in parallel."
        },
        "ServiceRoleArn": {
          "$ref": "#/definitions/ServiceRole",
          "description": "The IAM service role to assume during task execution."
        },
        "Targets": {
          "$ref": "#/definitions/Targets",
          "description": "The targets where the task should execute."
        },
        "TaskArn": {
          "$ref": "#/definitions/MaintenanceWindowTaskArn",
          "description": "The resource that the task used during execution. For RUN_COMMAND and AUTOMATION task types, the TaskArn is the Systems Manager Document name/ARN. For LAMBDA tasks, the value is the function name/ARN. For STEP_FUNCTION tasks, the value is the state machine ARN."
        },
        "TaskInvocationParameters": {
          "$ref": "#/definitions/MaintenanceWindowTaskInvocationParameters",
          "description": "The parameters to pass to the task when it executes."
        },
        "TaskParameters": {
          "$ref": "#/definitions/MaintenanceWindowTaskParameters",
          "description": "The parameters to pass to the task when it executes."
        },
        "TaskType": {
          "$ref": "#/definitions/MaintenanceWindowTaskType",
          "description": "The type of task to execute."
        },
        "WindowId": {
          "$ref": "#/definitions/MaintenanceWindowId",
          "description": "The retrieved Maintenance Window ID."
        },
        "WindowTaskId": {
          "$ref": "#/definitions/MaintenanceWindowTaskId",
          "description": "The retrieved Maintenance Window task ID."
        }
      },
      "type": "object"
    },
    "GetParameterHistoryRequest": {
      "properties": {
        "MaxResults": {
          "$ref": "#/definitions/MaxResults",
          "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
        },
        "Name": {
          "$ref": "#/definitions/PSParameterName",
          "description": "The name of a parameter you want to query."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token for the next set of items to return. (You received this token from a previous call.)"
        },
        "WithDecryption": {
          "$ref": "#/definitions/Boolean",
          "description": "Return decrypted values for secure string parameters. This flag is ignored for String and StringList parameter types."
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "GetParameterHistoryResult": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
        },
        "Parameters": {
          "$ref": "#/definitions/ParameterHistoryList",
          "description": "A list of parameters returned by the request."
        }
      },
      "type": "object"
    },
    "GetParameterRequest": {
      "properties": {
        "Name": {
          "$ref": "#/definitions/PSParameterName",
          "description": "The name of the parameter you want to query."
        },
        "WithDecryption": {
          "$ref": "#/definitions/Boolean",
          "description": "Return decrypted values for secure string parameters. This flag is ignored for String and StringList parameter types."
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "GetParameterResult": {
      "properties": {
        "Parameter": {
          "$ref": "#/definitions/Parameter",
          "description": "Information about a parameter."
        }
      },
      "type": "object"
    },
    "GetParametersByPathMaxResults": {
      "maximum": 10,
      "minimum": 1,
      "type": "integer"
    },
    "GetParametersByPathRequest": {
      "properties": {
        "MaxResults": {
          "$ref": "#/definitions/GetParametersByPathMaxResults",
          "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "A token to start the list. Use this token to get the next set of results. "
        },
        "ParameterFilters": {
          "$ref": "#/definitions/ParameterStringFilterList",
          "description": "Filters to limit the request results."
        },
        "Path": {
          "$ref": "#/definitions/PSParameterName",
          "description": "<p>The hierarchy for the parameter. Hierarchies start with a forward slash (/) and end with the parameter name. A hierarchy can have a maximum of five levels. Examples: /Environment/Test/DBString003</p> <p>/Finance/Prod/IAD/OS/WinServ2016/license15</p>"
        },
        "Recursive": {
          "$ref": "#/definitions/Boolean",
          "description": "Retrieve all parameters within a hierarchy."
        },
        "WithDecryption": {
          "$ref": "#/definitions/Boolean",
          "description": "Retrieve all parameters in a hierarchy with their value decrypted."
        }
      },
      "required": [
        "Path"
      ],
      "type": "object"
    },
    "GetParametersByPathResult": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token for the next set of items to return. Use this token to get the next set of results."
        },
        "Parameters": {
          "$ref": "#/definitions/ParameterList",
          "description": "A list of parameters found in the specified hierarchy."
        }
      },
      "type": "object"
    },
    "GetParametersRequest": {
      "properties": {
        "Names": {
          "$ref": "#/definitions/ParameterNameList",
          "description": "Names of the parameters for which you want to query information."
        },
        "WithDecryption": {
          "$ref": "#/definitions/Boolean",
          "description": "Return decrypted secure string value. Return decrypted values for secure string parameters. This flag is ignored for String and StringList parameter types."
        }
      },
      "required": [
        "Names"
      ],
      "type": "object"
    },
    "GetParametersResult": {
      "properties": {
        "InvalidParameters": {
          "$ref": "#/definitions/ParameterNameList",
          "description": "A list of parameters that are not formatted correctly or do not run when executed."
        },
        "Parameters": {
          "$ref": "#/definitions/ParameterList",
          "description": "A list of details for a parameter."
        }
      },
      "type": "object"
    },
    "GetPatchBaselineForPatchGroupRequest": {
      "properties": {
        "OperatingSystem": {
          "$ref": "#/definitions/OperatingSystem",
          "description": "Returns he operating system rule specified for patch groups using the patch baseline."
        },
        "PatchGroup": {
          "$ref": "#/definitions/PatchGroup",
          "description": "The name of the patch group whose patch baseline should be retrieved."
        }
      },
      "required": [
        "PatchGroup"
      ],
      "type": "object"
    },
    "GetPatchBaselineForPatchGroupResult": {
      "properties": {
        "BaselineId": {
          "$ref": "#/definitions/BaselineId",
          "description": "The ID of the patch baseline that should be used for the patch group."
        },
        "OperatingSystem": {
          "$ref": "#/definitions/OperatingSystem",
          "description": "The operating system rule specified for patch groups using the patch baseline."
        },
        "PatchGroup": {
          "$ref": "#/definitions/PatchGroup",
          "description": "The name of the patch group."
        }
      },
      "type": "object"
    },
    "GetPatchBaselineRequest": {
      "properties": {
        "BaselineId": {
          "$ref": "#/definitions/BaselineId",
          "description": "The ID of the patch baseline to retrieve."
        }
      },
      "required": [
        "BaselineId"
      ],
      "type": "object"
    },
    "GetPatchBaselineResult": {
      "properties": {
        "ApprovalRules": {
          "$ref": "#/definitions/PatchRuleGroup",
          "description": "A set of rules used to include patches in the baseline."
        },
        "ApprovedPatches": {
          "$ref": "#/definitions/PatchIdList",
          "description": "A list of explicitly approved patches for the baseline."
        },
        "ApprovedPatchesComplianceLevel": {
          "$ref": "#/definitions/PatchComplianceLevel",
          "description": "Returns the specified compliance severity level for approved patches in the patch baseline."
        },
        "BaselineId": {
          "$ref": "#/definitions/BaselineId",
          "description": "The ID of the retrieved patch baseline."
        },
        "CreatedDate": {
          "$ref": "#/definitions/DateTime",
          "description": "The date the patch baseline was created."
        },
        "Description": {
          "$ref": "#/definitions/BaselineDescription",
          "description": "A description of the patch baseline."
        },
        "GlobalFilters": {
          "$ref": "#/definitions/PatchFilterGroup",
          "description": "A set of global filters used to exclude patches from the baseline."
        },
        "ModifiedDate": {
          "$ref": "#/definitions/DateTime",
          "description": "The date the patch baseline was last modified."
        },
        "Name": {
          "$ref": "#/definitions/BaselineName",
          "description": "The name of the patch baseline."
        },
        "OperatingSystem": {
          "$ref": "#/definitions/OperatingSystem",
          "description": "Returns the operating system specified for the patch baseline."
        },
        "PatchGroups": {
          "$ref": "#/definitions/PatchGroupList",
          "description": "Patch groups included in the patch baseline."
        },
        "RejectedPatches": {
          "$ref": "#/definitions/PatchIdList",
          "description": "A list of explicitly rejected patches for the baseline."
        }
      },
      "type": "object"
    },
    "HierarchyLevelLimitExceededException": {
      "description": "<p>A hierarchy can have a maximum of five levels. For example:</p> <p>/Finance/Prod/IAD/OS/WinServ2016/license15</p> <p>For more information, see <a href=\"http://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-paramstore-working.html\">Working with Systems Manager Parameters</a>. </p>",
      "properties": {
        "message": {
          "$ref": "#/definitions/String",
          "description": "<p>A hierarchy can have a maximum of five levels. For example:</p> <p>/Finance/Prod/IAD/OS/WinServ2016/license15</p> <p>For more information, see <a href=\"http://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-paramstore-working.html\">Working with Systems Manager Parameters</a>. </p>"
        }
      },
      "type": "object"
    },
    "HierarchyTypeMismatchException": {
      "description": "Parameter Store does not support changing a parameter type in a hierarchy. For example, you can't change a parameter from a String type to a SecureString type. You must create a new, unique parameter.",
      "properties": {
        "message": {
          "$ref": "#/definitions/String",
          "description": "Parameter Store does not support changing a parameter type in a hierarchy. For example, you can't change a parameter from a String type to a SecureString type. You must create a new, unique parameter."
        }
      },
      "type": "object"
    },
    "IPAddress": {
      "maxLength": 46,
      "minLength": 1,
      "type": "string"
    },
    "IamRole": {
      "maxLength": 64,
      "type": "string"
    },
    "IdempotencyToken": {
      "maxLength": 36,
      "minLength": 36,
      "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
      "type": "string"
    },
    "IdempotentParameterMismatch": {
      "description": "Error returned when an idempotent operation is retried and the parameters don't match the original call to the API with the same idempotency token. ",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "InstanceAggregatedAssociationOverview": {
      "description": "Status information about the aggregated associations.",
      "properties": {
        "DetailedStatus": {
          "$ref": "#/definitions/StatusName",
          "description": "Detailed status information about the aggregated associations."
        },
        "InstanceAssociationStatusAggregatedCount": {
          "$ref": "#/definitions/InstanceAssociationStatusAggregatedCount",
          "description": "The number of associations for the instance(s)."
        }
      },
      "type": "object"
    },
    "InstanceAssociation": {
      "description": "One or more association documents on the instance. ",
      "properties": {
        "AssociationId": {
          "$ref": "#/definitions/AssociationId",
          "description": "The association ID."
        },
        "AssociationVersion": {
          "$ref": "#/definitions/AssociationVersion",
          "description": "Version information for the association on the instance."
        },
        "Content": {
          "$ref": "#/definitions/DocumentContent",
          "description": "The content of the association document for the instance(s)."
        },
        "InstanceId": {
          "$ref": "#/definitions/InstanceId",
          "description": "The instance ID."
        }
      },
      "type": "object"
    },
    "InstanceAssociationExecutionSummary": {
      "maxLength": 512,
      "minLength": 1,
      "type": "string"
    },
    "InstanceAssociationList": {
      "items": {
        "$ref": "#/definitions/InstanceAssociation"
      },
      "type": "array"
    },
    "InstanceAssociationOutputLocation": {
      "description": "An Amazon S3 bucket where you want to store the results of this request.",
      "properties": {
        "S3Location": {
          "$ref": "#/definitions/S3OutputLocation",
          "description": "An Amazon S3 bucket where you want to store the results of this request."
        }
      },
      "type": "object"
    },
    "InstanceAssociationOutputUrl": {
      "description": "The URL of Amazon S3 bucket where you want to store the results of this request.",
      "properties": {
        "S3OutputUrl": {
          "$ref": "#/definitions/S3OutputUrl",
          "description": "The URL of Amazon S3 bucket where you want to store the results of this request."
        }
      },
      "type": "object"
    },
    "InstanceAssociationStatusAggregatedCount": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/StatusName"
          },
          "value": {
            "$ref": "#/definitions/InstanceCount"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "InstanceAssociationStatusInfo": {
      "description": "Status information about the instance association.",
      "properties": {
        "AssociationId": {
          "$ref": "#/definitions/AssociationId",
          "description": "The association ID."
        },
        "AssociationName": {
          "$ref": "#/definitions/AssociationName",
          "description": "The name of the association applied to the instance."
        },
        "AssociationVersion": {
          "$ref": "#/definitions/AssociationVersion",
          "description": "The version of the association applied to the instance."
        },
        "DetailedStatus": {
          "$ref": "#/definitions/StatusName",
          "description": "Detailed status information about the instance association."
        },
        "DocumentVersion": {
          "$ref": "#/definitions/DocumentVersion",
          "description": "The association document verions."
        },
        "ErrorCode": {
          "$ref": "#/definitions/AgentErrorCode",
          "description": "An error code returned by the request to create the association."
        },
        "ExecutionDate": {
          "$ref": "#/definitions/DateTime",
          "description": "The date the instance association executed. "
        },
        "ExecutionSummary": {
          "$ref": "#/definitions/InstanceAssociationExecutionSummary",
          "description": "Summary information about association execution."
        },
        "InstanceId": {
          "$ref": "#/definitions/InstanceId",
          "description": "The instance ID where the association was created."
        },
        "Name": {
          "$ref": "#/definitions/DocumentName",
          "description": "The name of the association."
        },
        "OutputUrl": {
          "$ref": "#/definitions/InstanceAssociationOutputUrl",
          "description": "A URL for an Amazon S3 bucket where you want to store the results of this request."
        },
        "Status": {
          "$ref": "#/definitions/StatusName",
          "description": "Status information about the instance association."
        }
      },
      "type": "object"
    },
    "InstanceAssociationStatusInfos": {
      "items": {
        "$ref": "#/definitions/InstanceAssociationStatusInfo"
      },
      "type": "array"
    },
    "InstanceCount": {
      "type": "integer"
    },
    "InstanceId": {
      "pattern": "(^i-(\\w{8}|\\w{17})$)|(^mi-\\w{17}$)",
      "type": "string"
    },
    "InstanceIdList": {
      "items": {
        "$ref": "#/definitions/InstanceId"
      },
      "maxItems": 50,
      "minItems": 0,
      "type": "array"
    },
    "InstanceInformation": {
      "description": "Describes a filter for a specific list of instances. ",
      "properties": {
        "ActivationId": {
          "$ref": "#/definitions/ActivationId",
          "description": "The activation ID created by Systems Manager when the server or VM was registered."
        },
        "AgentVersion": {
          "$ref": "#/definitions/Version",
          "description": "The version of the SSM Agent running on your Linux instance. "
        },
        "AssociationOverview": {
          "$ref": "#/definitions/InstanceAggregatedAssociationOverview",
          "description": "Information about the association."
        },
        "AssociationStatus": {
          "$ref": "#/definitions/StatusName",
          "description": "The status of the association."
        },
        "ComputerName": {
          "$ref": "#/definitions/ComputerName",
          "description": "The fully qualified host name of the managed instance."
        },
        "IPAddress": {
          "$ref": "#/definitions/IPAddress",
          "description": "The IP address of the managed instance."
        },
        "IamRole": {
          "$ref": "#/definitions/IamRole",
          "description": "The Amazon Identity and Access Management (IAM) role assigned to EC2 instances or managed instances. "
        },
        "InstanceId": {
          "$ref": "#/definitions/InstanceId",
          "description": "The instance ID. "
        },
        "IsLatestVersion": {
          "$ref": "#/definitions/Boolean",
          "description": "Indicates whether latest version of the SSM Agent is running on your instance. "
        },
        "LastAssociationExecutionDate": {
          "$ref": "#/definitions/DateTime",
          "description": "The date the association was last executed."
        },
        "LastPingDateTime": {
          "$ref": "#/definitions/DateTime",
          "description": "The date and time when agent last pinged Systems Manager service. "
        },
        "LastSuccessfulAssociationExecutionDate": {
          "$ref": "#/definitions/DateTime",
          "description": "The last date the association was successfully run."
        },
        "Name": {
          "$ref": "#/definitions/String",
          "description": "The name of the managed instance."
        },
        "PingStatus": {
          "$ref": "#/definitions/PingStatus",
          "description": "Connection status of the SSM Agent. "
        },
        "PlatformName": {
          "$ref": "#/definitions/String",
          "description": "The name of the operating system platform running on your instance. "
        },
        "PlatformType": {
          "$ref": "#/definitions/PlatformType",
          "description": "The operating system platform type. "
        },
        "PlatformVersion": {
          "$ref": "#/definitions/String",
          "description": "The version of the OS platform running on your instance. "
        },
        "RegistrationDate": {
          "$ref": "#/definitions/DateTime",
          "description": "The date the server or VM was registered with AWS as a managed instance."
        },
        "ResourceType": {
          "$ref": "#/definitions/ResourceType",
          "description": "The type of instance. Instances are either EC2 instances or managed instances. "
        }
      },
      "type": "object"
    },
    "InstanceInformationFilter": {
      "description": "Describes a filter for a specific list of instances. ",
      "properties": {
        "key": {
          "$ref": "#/definitions/InstanceInformationFilterKey",
          "description": "The name of the filter. "
        },
        "valueSet": {
          "$ref": "#/definitions/InstanceInformationFilterValueSet",
          "description": "The filter values."
        }
      },
      "required": [
        "key",
        "valueSet"
      ],
      "type": "object"
    },
    "InstanceInformationFilterKey": {
      "enum": [
        "InstanceIds",
        "AgentVersion",
        "PingStatus",
        "PlatformTypes",
        "ActivationIds",
        "IamRole",
        "ResourceType",
        "AssociationStatus"
      ],
      "type": "string"
    },
    "InstanceInformationFilterList": {
      "items": {
        "$ref": "#/definitions/InstanceInformationFilter"
      },
      "minItems": 0,
      "type": "array"
    },
    "InstanceInformationFilterValue": {
      "minLength": 1,
      "type": "string"
    },
    "InstanceInformationFilterValueSet": {
      "items": {
        "$ref": "#/definitions/InstanceInformationFilterValue"
      },
      "maxItems": 100,
      "minItems": 1,
      "type": "array"
    },
    "InstanceInformationList": {
      "items": {
        "$ref": "#/definitions/InstanceInformation"
      },
      "type": "array"
    },
    "InstanceInformationStringFilter": {
      "description": "The filters to describe or get information about your managed instances.",
      "properties": {
        "Key": {
          "$ref": "#/definitions/InstanceInformationStringFilterKey",
          "description": "<p>The filter key name to describe your instances. For example:</p> <p>\"InstanceIds\"|\"AgentVersion\"|\"PingStatus\"|\"PlatformTypes\"|\"ActivationIds\"|\"IamRole\"|\"ResourceType\"|\"AssociationStatus\"|\"Tag Key\"</p>"
        },
        "Values": {
          "$ref": "#/definitions/InstanceInformationFilterValueSet",
          "description": "The filter values."
        }
      },
      "required": [
        "Key",
        "Values"
      ],
      "type": "object"
    },
    "InstanceInformationStringFilterKey": {
      "minLength": 1,
      "type": "string"
    },
    "InstanceInformationStringFilterList": {
      "items": {
        "$ref": "#/definitions/InstanceInformationStringFilter"
      },
      "minItems": 0,
      "type": "array"
    },
    "InstancePatchState": {
      "description": "Defines the high-level patch compliance state for a managed instance, providing information about the number of installed, missing, not applicable, and failed patches along with metadata about the operation when this information was gathered for the instance.",
      "properties": {
        "BaselineId": {
          "$ref": "#/definitions/BaselineId",
          "description": "The ID of the patch baseline used to patch the instance."
        },
        "FailedCount": {
          "$ref": "#/definitions/PatchFailedCount",
          "description": "The number of patches from the patch baseline that were attempted to be installed during the last patching operation, but failed to install."
        },
        "InstalledCount": {
          "$ref": "#/definitions/PatchInstalledCount",
          "description": "The number of patches from the patch baseline that are installed on the instance."
        },
        "InstalledOtherCount": {
          "$ref": "#/definitions/PatchInstalledOtherCount",
          "description": "The number of patches not specified in the patch baseline that are installed on the instance."
        },
        "InstanceId": {
          "$ref": "#/definitions/InstanceId",
          "description": "The ID of the managed instance the high-level patch compliance information was collected for."
        },
        "MissingCount": {
          "$ref": "#/definitions/PatchMissingCount",
          "description": "The number of patches from the patch baseline that are applicable for the instance but aren't currently installed."
        },
        "NotApplicableCount": {
          "$ref": "#/definitions/PatchNotApplicableCount",
          "description": "The number of patches from the patch baseline that aren't applicable for the instance and hence aren't installed on the instance."
        },
        "Operation": {
          "$ref": "#/definitions/PatchOperationType",
          "description": "The type of patching operation that was performed: SCAN (assess patch compliance state) or INSTALL (install missing patches)."
        },
        "OperationEndTime": {
          "$ref": "#/definitions/DateTime",
          "description": "The time the most recent patching operation completed on the instance."
        },
        "OperationStartTime": {
          "$ref": "#/definitions/DateTime",
          "description": "The time the most recent patching operation was started on the instance."
        },
        "OwnerInformation": {
          "$ref": "#/definitions/OwnerInformation",
          "description": "Placeholder information, this field will always be empty in the current release of the service."
        },
        "PatchGroup": {
          "$ref": "#/definitions/PatchGroup",
          "description": "The name of the patch group the managed instance belongs to."
        },
        "SnapshotId": {
          "$ref": "#/definitions/SnapshotId",
          "description": "The ID of the patch baseline snapshot used during the patching operation when this compliance data was collected."
        }
      },
      "required": [
        "InstanceId",
        "PatchGroup",
        "BaselineId",
        "OperationStartTime",
        "OperationEndTime",
        "Operation"
      ],
      "type": "object"
    },
    "InstancePatchStateFilter": {
      "description": "Defines a filter used in DescribeInstancePatchStatesForPatchGroup used to scope down the information returned by the API.",
      "properties": {
        "Key": {
          "$ref": "#/definitions/InstancePatchStateFilterKey",
          "description": "The key for the filter. Supported values are FailedCount, InstalledCount, InstalledOtherCount, MissingCount and NotApplicableCount."
        },
        "Type": {
          "$ref": "#/definitions/InstancePatchStateOperatorType",
          "description": "The type of comparison that should be performed for the value: Equal, NotEqual, LessThan or GreaterThan."
        },
        "Values": {
          "$ref": "#/definitions/InstancePatchStateFilterValues",
          "description": "The value for the filter, must be an integer greater than or equal to 0."
        }
      },
      "required": [
        "Key",
        "Values",
        "Type"
      ],
      "type": "object"
    },
    "InstancePatchStateFilterKey": {
      "maxLength": 200,
      "minLength": 1,
      "type": "string"
    },
    "InstancePatchStateFilterList": {
      "items": {
        "$ref": "#/definitions/InstancePatchStateFilter"
      },
      "maxItems": 4,
      "minItems": 0,
      "type": "array"
    },
    "InstancePatchStateFilterValue": {
      "type": "string"
    },
    "InstancePatchStateFilterValues": {
      "items": {
        "$ref": "#/definitions/InstancePatchStateFilterValue"
      },
      "maxItems": 1,
      "minItems": 1,
      "type": "array"
    },
    "InstancePatchStateList": {
      "items": {
        "$ref": "#/definitions/InstancePatchState"
      },
      "type": "array"
    },
    "InstancePatchStateOperatorType": {
      "enum": [
        "Equal",
        "NotEqual",
        "LessThan",
        "GreaterThan"
      ],
      "type": "string"
    },
    "InstancePatchStatesList": {
      "items": {
        "$ref": "#/definitions/InstancePatchState"
      },
      "maxItems": 5,
      "minItems": 1,
      "type": "array"
    },
    "InstanceTagName": {
      "maxLength": 255,
      "type": "string"
    },
    "Integer": {
      "type": "integer"
    },
    "InternalServerError": {
      "description": "An error occurred on the server side.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "InvalidActivation": {
      "description": "The activation is not valid. The activation might have been deleted, or the ActivationId and the ActivationCode do not match.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "InvalidActivationId": {
      "description": "The activation ID is not valid. Verify the you entered the correct ActivationId or ActivationCode and try again.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "InvalidAllowedPatternException": {
      "description": "The request does not meet the regular expression requirement.",
      "properties": {
        "message": {
          "$ref": "#/definitions/String",
          "description": "The request does not meet the regular expression requirement."
        }
      },
      "type": "object"
    },
    "InvalidAssociationVersion": {
      "description": "The version you specified is not valid. Use ListAssociationVersions to view all versions of an association according to the association ID. Or, use the <code>$LATEST</code> parameter to view the latest version of the association.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "InvalidAutomationExecutionParametersException": {
      "description": "The supplied parameters for invoking the specified Automation document are incorrect. For example, they may not match the set of parameters permitted for the specified Automation document.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "InvalidAutomationSignalException": {
      "description": "The signal is not valid for the current Automation execution.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "InvalidCommandId": {
      "properties": {},
      "type": "object"
    },
    "InvalidDocument": {
      "description": "The specified document does not exist.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String",
          "description": "The document does not exist or the document is not available to the user. This exception can be issued by CreateAssociation, CreateAssociationBatch, DeleteAssociation, DeleteDocument, DescribeAssociation, DescribeDocument, GetDocument, SendCommand, or UpdateAssociationStatus. "
        }
      },
      "type": "object"
    },
    "InvalidDocumentContent": {
      "description": "The content for the document is not valid.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String",
          "description": "A description of the validation error."
        }
      },
      "type": "object"
    },
    "InvalidDocumentOperation": {
      "description": "You attempted to delete a document while it is still shared. You must stop sharing the document before you can delete it.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "InvalidDocumentSchemaVersion": {
      "description": "The version of the document schema is not supported.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "InvalidDocumentVersion": {
      "description": "The document version is not valid or does not exist.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "InvalidFilter": {
      "description": "The filter name is not valid. Verify the you entered the correct name and try again.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "InvalidFilterKey": {
      "description": "The specified key is not valid.",
      "properties": {},
      "type": "object"
    },
    "InvalidFilterOption": {
      "description": "The specified filter option is not valid. Valid options are Equals and BeginsWith. For Path filter, valid options are Recursive and OneLevel.",
      "properties": {
        "message": {
          "$ref": "#/definitions/String",
          "description": "The specified filter option is not valid. Valid options are Equals and BeginsWith. For Path filter, valid options are Recursive and OneLevel."
        }
      },
      "type": "object"
    },
    "InvalidFilterValue": {
      "description": "The filter value is not valid. Verify the value and try again.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "InvalidInstanceId": {
      "description": "<p>The following problems can cause this exception:</p> <p>You do not have permission to access the instance.</p> <p>The SSM Agent is not running. On managed instances and Linux instances, verify that the SSM Agent is running. On EC2 Windows instances, verify that the EC2Config service is running.</p> <p>The SSM Agent or EC2Config service is not registered to the SSM endpoint. Try reinstalling the SSM Agent or EC2Config service.</p> <p>The instance is not in valid state. Valid states are: Running, Pending, Stopped, Stopping. Invalid states are: Shutting-down and Terminated.</p>",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "InvalidInstanceInformationFilterValue": {
      "description": "The specified filter value is not valid.",
      "properties": {
        "message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "InvalidInventoryItemContextException": {
      "description": "You specified invalid keys or values in the <code>Context</code> attribute for <code>InventoryItem</code>. Verify the keys and values, and try again.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "InvalidItemContentException": {
      "description": "One or more content items is not valid.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        },
        "TypeName": {
          "$ref": "#/definitions/InventoryItemTypeName"
        }
      },
      "type": "object"
    },
    "InvalidKeyId": {
      "description": "The query key ID is not valid.",
      "properties": {
        "message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "InvalidNextToken": {
      "description": "The specified token is not valid.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "InvalidNotificationConfig": {
      "description": "One or more configuration items is not valid. Verify that a valid Amazon Resource Name (ARN) was provided for an Amazon SNS topic.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "InvalidOutputFolder": {
      "description": "The S3 bucket does not exist.",
      "properties": {},
      "type": "object"
    },
    "InvalidOutputLocation": {
      "description": "The output location is not valid or does not exist.",
      "properties": {},
      "type": "object"
    },
    "InvalidParameters": {
      "description": "You must specify values for all required parameters in the Systems Manager document. You can only supply values to parameters defined in the Systems Manager document.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "InvalidPermissionType": {
      "description": "The permission type is not supported. <i>Share</i> is the only supported permission type.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "InvalidPluginName": {
      "description": "The plugin name is not valid.",
      "properties": {},
      "type": "object"
    },
    "InvalidResourceId": {
      "description": "The resource ID is not valid. Verify that you entered the correct ID and try again.",
      "properties": {},
      "type": "object"
    },
    "InvalidResourceType": {
      "description": "The resource type is not valid. For example, if you are attempting to tag an instance, the instance must be a registered, managed instance.",
      "properties": {},
      "type": "object"
    },
    "InvalidResultAttributeException": {
      "description": "The specified inventory item result attribute is not valid.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "InvalidRole": {
      "description": "The role name can't contain invalid characters. Also verify that you specified an IAM role for notifications that includes the required trust policy. For information about configuring the IAM role for Run Command notifications, see <a href=\"http://docs.aws.amazon.com/systems-manager/latest/userguide/rc-sns-notifications.html\">Configuring Amazon SNS Notifications for Run Command</a> in the <i>Amazon EC2 Systems Manager User Guide</i>.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "InvalidSchedule": {
      "description": "The schedule is invalid. Verify your cron or rate expression and try again.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "InvalidTarget": {
      "description": "The target is not valid or does not exist. It might not be configured for EC2 Systems Manager or you might not have permission to perform the operation.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "InvalidTypeNameException": {
      "description": "The parameter type name is not valid.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "InvalidUpdate": {
      "description": "The update is not valid.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "InventoryAttributeDataType": {
      "enum": [
        "string",
        "number"
      ],
      "type": "string"
    },
    "InventoryFilter": {
      "description": "One or more filters. Use a filter to return a more specific list of results.",
      "properties": {
        "Key": {
          "$ref": "#/definitions/InventoryFilterKey",
          "description": "The name of the filter key."
        },
        "Type": {
          "$ref": "#/definitions/InventoryQueryOperatorType",
          "description": "The type of filter. Valid values include the following: \"Equal\"|\"NotEqual\"|\"BeginWith\"|\"LessThan\"|\"GreaterThan\""
        },
        "Values": {
          "$ref": "#/definitions/InventoryFilterValueList",
          "description": "Inventory filter values. Example: inventory filter where instance IDs are specified as values Key=AWS:InstanceInformation.InstanceId,Values= i-a12b3c4d5e6g, i-1a2b3c4d5e6,Type=Equal "
        }
      },
      "required": [
        "Key",
        "Values"
      ],
      "type": "object"
    },
    "InventoryFilterKey": {
      "maxLength": 200,
      "minLength": 1,
      "type": "string"
    },
    "InventoryFilterList": {
      "items": {
        "$ref": "#/definitions/InventoryFilter"
      },
      "maxItems": 5,
      "minItems": 1,
      "type": "array"
    },
    "InventoryFilterValue": {
      "type": "string"
    },
    "InventoryFilterValueList": {
      "items": {
        "$ref": "#/definitions/InventoryFilterValue"
      },
      "maxItems": 20,
      "minItems": 1,
      "type": "array"
    },
    "InventoryItem": {
      "description": "Information collected from managed instances based on your inventory policy document",
      "properties": {
        "CaptureTime": {
          "$ref": "#/definitions/InventoryItemCaptureTime",
          "description": "The time the inventory information was collected."
        },
        "Content": {
          "$ref": "#/definitions/InventoryItemEntryList",
          "description": "The inventory data of the inventory type."
        },
        "ContentHash": {
          "$ref": "#/definitions/InventoryItemContentHash",
          "description": "MD5 hash of the inventory item type contents. The content hash is used to determine whether to update inventory information. The PutInventory API does not update the inventory item type contents if the MD5 hash has not changed since last update. "
        },
        "Context": {
          "$ref": "#/definitions/InventoryItemContentContext",
          "description": "A map of associated properties for a specified inventory type. For example, with this attribute, you can specify the <code>ExecutionId</code>, <code>ExecutionType</code>, <code>ComplianceType</code> properties of the <code>AWS:ComplianceItem</code> type."
        },
        "SchemaVersion": {
          "$ref": "#/definitions/InventoryItemSchemaVersion",
          "description": "The schema version for the inventory item."
        },
        "TypeName": {
          "$ref": "#/definitions/InventoryItemTypeName",
          "description": "The name of the inventory type. Default inventory item type names start with AWS. Custom inventory type names will start with Custom. Default inventory item types include the following: AWS:AWSComponent, AWS:Application, AWS:InstanceInformation, AWS:Network, and AWS:WindowsUpdate."
        }
      },
      "required": [
        "TypeName",
        "SchemaVersion",
        "CaptureTime"
      ],
      "type": "object"
    },
    "InventoryItemAttribute": {
      "description": "Attributes are the entries within the inventory item content. It contains name and value.",
      "properties": {
        "DataType": {
          "$ref": "#/definitions/InventoryAttributeDataType",
          "description": "The data type of the inventory item attribute. "
        },
        "Name": {
          "$ref": "#/definitions/InventoryItemAttributeName",
          "description": "Name of the inventory item attribute."
        }
      },
      "required": [
        "Name",
        "DataType"
      ],
      "type": "object"
    },
    "InventoryItemAttributeList": {
      "items": {
        "$ref": "#/definitions/InventoryItemAttribute"
      },
      "maxItems": 50,
      "minItems": 1,
      "type": "array"
    },
    "InventoryItemAttributeName": {
      "type": "string"
    },
    "InventoryItemCaptureTime": {
      "pattern": "^(20)[0-9][0-9]-(0[1-9]|1[012])-([12][0-9]|3[01]|0[1-9])(T)(2[0-3]|[0-1][0-9])(:[0-5][0-9])(:[0-5][0-9])(Z)$",
      "type": "string"
    },
    "InventoryItemContentContext": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/AttributeName"
          },
          "value": {
            "$ref": "#/definitions/AttributeValue"
          }
        },
        "type": "object"
      },
      "maxItems": 50,
      "minItems": 0,
      "type": "array"
    },
    "InventoryItemContentHash": {
      "maxLength": 256,
      "type": "string"
    },
    "InventoryItemEntry": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/AttributeName"
          },
          "value": {
            "$ref": "#/definitions/AttributeValue"
          }
        },
        "type": "object"
      },
      "maxItems": 50,
      "minItems": 0,
      "type": "array"
    },
    "InventoryItemEntryList": {
      "items": {
        "$ref": "#/definitions/InventoryItemEntry"
      },
      "maxItems": 10000,
      "minItems": 0,
      "type": "array"
    },
    "InventoryItemList": {
      "items": {
        "$ref": "#/definitions/InventoryItem"
      },
      "maxItems": 30,
      "minItems": 1,
      "type": "array"
    },
    "InventoryItemSchema": {
      "description": "The inventory item schema definition. Users can use this to compose inventory query filters.",
      "properties": {
        "Attributes": {
          "$ref": "#/definitions/InventoryItemAttributeList",
          "description": "The schema attributes for inventory. This contains data type and attribute name."
        },
        "TypeName": {
          "$ref": "#/definitions/InventoryItemTypeName",
          "description": "The name of the inventory type. Default inventory item type names start with AWS. Custom inventory type names will start with Custom. Default inventory item types include the following: AWS:AWSComponent, AWS:Application, AWS:InstanceInformation, AWS:Network, and AWS:WindowsUpdate."
        },
        "Version": {
          "$ref": "#/definitions/InventoryItemSchemaVersion",
          "description": "The schema version for the inventory item."
        }
      },
      "required": [
        "TypeName",
        "Attributes"
      ],
      "type": "object"
    },
    "InventoryItemSchemaResultList": {
      "items": {
        "$ref": "#/definitions/InventoryItemSchema"
      },
      "type": "array"
    },
    "InventoryItemSchemaVersion": {
      "pattern": "^([0-9]{1,6})(\\.[0-9]{1,6})$",
      "type": "string"
    },
    "InventoryItemTypeName": {
      "maxLength": 100,
      "minLength": 1,
      "pattern": "^(AWS|Custom):.*$",
      "type": "string"
    },
    "InventoryItemTypeNameFilter": {
      "maxLength": 100,
      "minLength": 0,
      "type": "string"
    },
    "InventoryQueryOperatorType": {
      "enum": [
        "Equal",
        "NotEqual",
        "BeginWith",
        "LessThan",
        "GreaterThan"
      ],
      "type": "string"
    },
    "InventoryResultEntity": {
      "description": "Inventory query results.",
      "properties": {
        "Data": {
          "$ref": "#/definitions/InventoryResultItemMap",
          "description": "The data section in the inventory result entity json."
        },
        "Id": {
          "$ref": "#/definitions/InventoryResultEntityId",
          "description": "ID of the inventory result entity. For example, for managed instance inventory the result will be the managed instance ID. For EC2 instance inventory, the result will be the instance ID. "
        }
      },
      "type": "object"
    },
    "InventoryResultEntityId": {
      "type": "string"
    },
    "InventoryResultEntityList": {
      "items": {
        "$ref": "#/definitions/InventoryResultEntity"
      },
      "type": "array"
    },
    "InventoryResultItem": {
      "description": "The inventory result item.",
      "properties": {
        "CaptureTime": {
          "$ref": "#/definitions/InventoryItemCaptureTime",
          "description": "The time inventory item data was captured."
        },
        "Content": {
          "$ref": "#/definitions/InventoryItemEntryList",
          "description": "Contains all the inventory data of the item type. Results include attribute names and values. "
        },
        "ContentHash": {
          "$ref": "#/definitions/InventoryItemContentHash",
          "description": "MD5 hash of the inventory item type contents. The content hash is used to determine whether to update inventory information. The PutInventory API does not update the inventory item type contents if the MD5 hash has not changed since last update. "
        },
        "SchemaVersion": {
          "$ref": "#/definitions/InventoryItemSchemaVersion",
          "description": "The schema version for the inventory result item/"
        },
        "TypeName": {
          "$ref": "#/definitions/InventoryItemTypeName",
          "description": "The name of the inventory result item type."
        }
      },
      "required": [
        "TypeName",
        "SchemaVersion",
        "Content"
      ],
      "type": "object"
    },
    "InventoryResultItemKey": {
      "type": "string"
    },
    "InventoryResultItemMap": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/InventoryResultItemKey"
          },
          "value": {
            "$ref": "#/definitions/InventoryResultItem"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "InvocationDoesNotExist": {
      "description": "The command ID and instance ID you specified did not match any invocations. Verify the command ID adn the instance ID and try again. ",
      "properties": {},
      "type": "object"
    },
    "InvocationTraceOutput": {
      "maxLength": 2500,
      "type": "string"
    },
    "IsSubTypeSchema": {
      "type": "boolean"
    },
    "ItemContentMismatchException": {
      "description": "The inventory item has invalid content. ",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        },
        "TypeName": {
          "$ref": "#/definitions/InventoryItemTypeName"
        }
      },
      "type": "object"
    },
    "ItemSizeLimitExceededException": {
      "description": "The inventory item size has exceeded the size limit.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        },
        "TypeName": {
          "$ref": "#/definitions/InventoryItemTypeName"
        }
      },
      "type": "object"
    },
    "KeyList": {
      "items": {
        "$ref": "#/definitions/TagKey"
      },
      "type": "array"
    },
    "LastResourceDataSyncStatus": {
      "enum": [
        "Successful",
        "Failed",
        "InProgress"
      ],
      "type": "string"
    },
    "LastResourceDataSyncTime": {
      "format": "date-time",
      "type": "string"
    },
    "LastSuccessfulResourceDataSyncTime": {
      "format": "date-time",
      "type": "string"
    },
    "ListAssociationVersionsRequest": {
      "properties": {
        "AssociationId": {
          "$ref": "#/definitions/AssociationId",
          "description": "The association ID for which you want to view all versions."
        },
        "MaxResults": {
          "$ref": "#/definitions/MaxResults",
          "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "A token to start the list. Use this token to get the next set of results. "
        }
      },
      "required": [
        "AssociationId"
      ],
      "type": "object"
    },
    "ListAssociationVersionsResult": {
      "properties": {
        "AssociationVersions": {
          "$ref": "#/definitions/AssociationVersionList",
          "description": "Information about all versions of the association for the specified association ID."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token for the next set of items to return. Use this token to get the next set of results."
        }
      },
      "type": "object"
    },
    "ListAssociationsRequest": {
      "properties": {
        "AssociationFilterList": {
          "$ref": "#/definitions/AssociationFilterList",
          "description": "One or more filters. Use a filter to return a more specific list of results."
        },
        "MaxResults": {
          "$ref": "#/definitions/MaxResults",
          "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token for the next set of items to return. (You received this token from a previous call.)"
        }
      },
      "type": "object"
    },
    "ListAssociationsResult": {
      "properties": {
        "Associations": {
          "$ref": "#/definitions/AssociationList",
          "description": "The associations."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
        }
      },
      "type": "object"
    },
    "ListCommandInvocationsRequest": {
      "properties": {
        "CommandId": {
          "$ref": "#/definitions/CommandId",
          "description": "(Optional) The invocations for a specific command ID."
        },
        "Details": {
          "$ref": "#/definitions/Boolean",
          "description": "(Optional) If set this returns the response of the command executions and any command output. By default this is set to False. "
        },
        "Filters": {
          "$ref": "#/definitions/CommandFilterList",
          "description": "(Optional) One or more filters. Use a filter to return a more specific list of results."
        },
        "InstanceId": {
          "$ref": "#/definitions/InstanceId",
          "description": "(Optional) The command execution details for a specific instance ID."
        },
        "MaxResults": {
          "$ref": "#/definitions/CommandMaxResults",
          "description": "(Optional) The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "(Optional) The token for the next set of items to return. (You received this token from a previous call.)"
        }
      },
      "type": "object"
    },
    "ListCommandInvocationsResult": {
      "properties": {
        "CommandInvocations": {
          "$ref": "#/definitions/CommandInvocationList",
          "description": "(Optional) A list of all invocations. "
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "(Optional) The token for the next set of items to return. (You received this token from a previous call.)"
        }
      },
      "type": "object"
    },
    "ListCommandsRequest": {
      "properties": {
        "CommandId": {
          "$ref": "#/definitions/CommandId",
          "description": "(Optional) If provided, lists only the specified command."
        },
        "Filters": {
          "$ref": "#/definitions/CommandFilterList",
          "description": "(Optional) One or more filters. Use a filter to return a more specific list of results. "
        },
        "InstanceId": {
          "$ref": "#/definitions/InstanceId",
          "description": "(Optional) Lists commands issued against this instance ID."
        },
        "MaxResults": {
          "$ref": "#/definitions/CommandMaxResults",
          "description": "(Optional) The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "(Optional) The token for the next set of items to return. (You received this token from a previous call.)"
        }
      },
      "type": "object"
    },
    "ListCommandsResult": {
      "properties": {
        "Commands": {
          "$ref": "#/definitions/CommandList",
          "description": "(Optional) The list of commands requested by the user. "
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "(Optional) The token for the next set of items to return. (You received this token from a previous call.)"
        }
      },
      "type": "object"
    },
    "ListComplianceItemsRequest": {
      "properties": {
        "Filters": {
          "$ref": "#/definitions/ComplianceStringFilterList",
          "description": "One or more compliance filters. Use a filter to return a more specific list of results."
        },
        "MaxResults": {
          "$ref": "#/definitions/MaxResults",
          "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "A token to start the list. Use this token to get the next set of results. "
        },
        "ResourceIds": {
          "$ref": "#/definitions/ComplianceResourceIdList",
          "description": "The ID for the resources from which to get compliance information. Currently, you can only specify one resource ID."
        },
        "ResourceTypes": {
          "$ref": "#/definitions/ComplianceResourceTypeList",
          "description": "The type of resource from which to get compliance information. Currently, the only supported resource type is <code>ManagedInstance</code>."
        }
      },
      "type": "object"
    },
    "ListComplianceItemsResult": {
      "properties": {
        "ComplianceItems": {
          "$ref": "#/definitions/ComplianceItemList",
          "description": "A list of compliance information for the specified resource ID. "
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token for the next set of items to return. Use this token to get the next set of results."
        }
      },
      "type": "object"
    },
    "ListComplianceSummariesRequest": {
      "properties": {
        "Filters": {
          "$ref": "#/definitions/ComplianceStringFilterList",
          "description": "One or more compliance or inventory filters. Use a filter to return a more specific list of results."
        },
        "MaxResults": {
          "$ref": "#/definitions/MaxResults",
          "description": "The maximum number of items to return for this call. Currently, you can specify null or 50. The call also returns a token that you can specify in a subsequent call to get the next set of results."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "A token to start the list. Use this token to get the next set of results. "
        }
      },
      "type": "object"
    },
    "ListComplianceSummariesResult": {
      "properties": {
        "ComplianceSummaryItems": {
          "$ref": "#/definitions/ComplianceSummaryItemList",
          "description": "A list of compliant and non-compliant summary counts based on compliance types. For example, this call returns State Manager associations, patches, or custom compliance types according to the filter criteria that you specified."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token for the next set of items to return. Use this token to get the next set of results."
        }
      },
      "type": "object"
    },
    "ListDocumentVersionsRequest": {
      "properties": {
        "MaxResults": {
          "$ref": "#/definitions/MaxResults",
          "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
        },
        "Name": {
          "$ref": "#/definitions/DocumentName",
          "description": "The name of the document about which you want version information."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token for the next set of items to return. (You received this token from a previous call.)"
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "ListDocumentVersionsResult": {
      "properties": {
        "DocumentVersions": {
          "$ref": "#/definitions/DocumentVersionList",
          "description": "The document versions."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
        }
      },
      "type": "object"
    },
    "ListDocumentsRequest": {
      "properties": {
        "DocumentFilterList": {
          "$ref": "#/definitions/DocumentFilterList",
          "description": "One or more filters. Use a filter to return a more specific list of results."
        },
        "Filters": {
          "$ref": "#/definitions/DocumentKeyValuesFilterList",
          "description": "One or more filters. Use a filter to return a more specific list of results."
        },
        "MaxResults": {
          "$ref": "#/definitions/MaxResults",
          "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token for the next set of items to return. (You received this token from a previous call.)"
        }
      },
      "type": "object"
    },
    "ListDocumentsResult": {
      "properties": {
        "DocumentIdentifiers": {
          "$ref": "#/definitions/DocumentIdentifierList",
          "description": "The names of the Systems Manager documents."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
        }
      },
      "type": "object"
    },
    "ListInventoryEntriesRequest": {
      "properties": {
        "Filters": {
          "$ref": "#/definitions/InventoryFilterList",
          "description": "One or more filters. Use a filter to return a more specific list of results."
        },
        "InstanceId": {
          "$ref": "#/definitions/InstanceId",
          "description": "The instance ID for which you want inventory information."
        },
        "MaxResults": {
          "$ref": "#/definitions/MaxResults",
          "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token for the next set of items to return. (You received this token from a previous call.)"
        },
        "TypeName": {
          "$ref": "#/definitions/InventoryItemTypeName",
          "description": "The type of inventory item for which you want information."
        }
      },
      "required": [
        "InstanceId",
        "TypeName"
      ],
      "type": "object"
    },
    "ListInventoryEntriesResult": {
      "properties": {
        "CaptureTime": {
          "$ref": "#/definitions/InventoryItemCaptureTime",
          "description": "The time that inventory information was collected for the instance(s)."
        },
        "Entries": {
          "$ref": "#/definitions/InventoryItemEntryList",
          "description": "A list of inventory items on the instance(s)."
        },
        "InstanceId": {
          "$ref": "#/definitions/InstanceId",
          "description": "The instance ID targeted by the request to query inventory information."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
        },
        "SchemaVersion": {
          "$ref": "#/definitions/InventoryItemSchemaVersion",
          "description": "The inventory schema version used by the instance(s)."
        },
        "TypeName": {
          "$ref": "#/definitions/InventoryItemTypeName",
          "description": "The type of inventory item returned by the request."
        }
      },
      "type": "object"
    },
    "ListResourceComplianceSummariesRequest": {
      "properties": {
        "Filters": {
          "$ref": "#/definitions/ComplianceStringFilterList",
          "description": "One or more filters. Use a filter to return a more specific list of results."
        },
        "MaxResults": {
          "$ref": "#/definitions/MaxResults",
          "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "A token to start the list. Use this token to get the next set of results. "
        }
      },
      "type": "object"
    },
    "ListResourceComplianceSummariesResult": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token for the next set of items to return. Use this token to get the next set of results."
        },
        "ResourceComplianceSummaryItems": {
          "$ref": "#/definitions/ResourceComplianceSummaryItemList",
          "description": "A summary count for specified or targeted managed instances. Summary count includes information about compliant and non-compliant State Manager associations, patch status, or custom items according to the filter criteria that you specify. "
        }
      },
      "type": "object"
    },
    "ListResourceDataSyncRequest": {
      "properties": {
        "MaxResults": {
          "$ref": "#/definitions/MaxResults",
          "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "A token to start the list. Use this token to get the next set of results. "
        }
      },
      "type": "object"
    },
    "ListResourceDataSyncResult": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token for the next set of items to return. Use this token to get the next set of results."
        },
        "ResourceDataSyncItems": {
          "$ref": "#/definitions/ResourceDataSyncItemList",
          "description": "A list of your current Resource Data Sync configurations and their statuses."
        }
      },
      "type": "object"
    },
    "ListTagsForResourceRequest": {
      "properties": {
        "ResourceId": {
          "$ref": "#/definitions/ResourceId",
          "description": "The resource ID for which you want to see a list of tags."
        },
        "ResourceType": {
          "$ref": "#/definitions/ResourceTypeForTagging",
          "description": "Returns a list of tags for a specific resource type."
        }
      },
      "required": [
        "ResourceType",
        "ResourceId"
      ],
      "type": "object"
    },
    "ListTagsForResourceResult": {
      "properties": {
        "TagList": {
          "$ref": "#/definitions/TagList",
          "description": "A list of tags."
        }
      },
      "type": "object"
    },
    "LoggingInfo": {
      "description": "Information about an Amazon S3 bucket to write instance-level logs to.",
      "properties": {
        "S3BucketName": {
          "$ref": "#/definitions/S3BucketName",
          "description": "The name of an Amazon S3 bucket where execution logs are stored ."
        },
        "S3KeyPrefix": {
          "$ref": "#/definitions/S3KeyPrefix",
          "description": "(Optional) The Amazon S3 bucket subfolder. "
        },
        "S3Region": {
          "$ref": "#/definitions/S3Region",
          "description": "The region where the Amazon S3 bucket is located."
        }
      },
      "required": [
        "S3BucketName",
        "S3Region"
      ],
      "type": "object"
    },
    "MaintenanceWindowAllowUnassociatedTargets": {
      "type": "boolean"
    },
    "MaintenanceWindowAutomationParameters": {
      "description": "The parameters for an AUTOMATION task type.",
      "properties": {
        "DocumentVersion": {
          "$ref": "#/definitions/DocumentVersion",
          "description": "The version of an Automation document to use during task execution."
        },
        "Parameters": {
          "$ref": "#/definitions/AutomationParameterMap",
          "description": "The parameters for the AUTOMATION task."
        }
      },
      "type": "object"
    },
    "MaintenanceWindowCutoff": {
      "maximum": 23,
      "minimum": 0,
      "type": "integer"
    },
    "MaintenanceWindowDescription": {
      "format": "password",
      "maxLength": 128,
      "minLength": 1,
      "type": "string"
    },
    "MaintenanceWindowDurationHours": {
      "maximum": 24,
      "minimum": 1,
      "type": "integer"
    },
    "MaintenanceWindowEnabled": {
      "type": "boolean"
    },
    "MaintenanceWindowExecution": {
      "description": "Describes the information about an execution of a Maintenance Window. ",
      "properties": {
        "EndTime": {
          "$ref": "#/definitions/DateTime",
          "description": "The time the execution finished."
        },
        "StartTime": {
          "$ref": "#/definitions/DateTime",
          "description": "The time the execution started."
        },
        "Status": {
          "$ref": "#/definitions/MaintenanceWindowExecutionStatus",
          "description": "The status of the execution."
        },
        "StatusDetails": {
          "$ref": "#/definitions/MaintenanceWindowExecutionStatusDetails",
          "description": "The details explaining the Status. Only available for certain status values."
        },
        "WindowExecutionId": {
          "$ref": "#/definitions/MaintenanceWindowExecutionId",
          "description": "The ID of the Maintenance Window execution."
        },
        "WindowId": {
          "$ref": "#/definitions/MaintenanceWindowId",
          "description": "The ID of the Maintenance Window."
        }
      },
      "type": "object"
    },
    "MaintenanceWindowExecutionId": {
      "maxLength": 36,
      "minLength": 36,
      "pattern": "^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}$",
      "type": "string"
    },
    "MaintenanceWindowExecutionList": {
      "items": {
        "$ref": "#/definitions/MaintenanceWindowExecution"
      },
      "type": "array"
    },
    "MaintenanceWindowExecutionStatus": {
      "enum": [
        "PENDING",
        "IN_PROGRESS",
        "SUCCESS",
        "FAILED",
        "TIMED_OUT",
        "CANCELLING",
        "CANCELLED",
        "SKIPPED_OVERLAPPING"
      ],
      "type": "string"
    },
    "MaintenanceWindowExecutionStatusDetails": {
      "maxLength": 250,
      "minLength": 0,
      "type": "string"
    },
    "MaintenanceWindowExecutionTaskExecutionId": {
      "type": "string"
    },
    "MaintenanceWindowExecutionTaskId": {
      "maxLength": 36,
      "minLength": 36,
      "pattern": "^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}$",
      "type": "string"
    },
    "MaintenanceWindowExecutionTaskIdList": {
      "items": {
        "$ref": "#/definitions/MaintenanceWindowExecutionTaskId"
      },
      "type": "array"
    },
    "MaintenanceWindowExecutionTaskIdentity": {
      "description": "Information about a task execution performed as part of a Maintenance Window execution.",
      "properties": {
        "EndTime": {
          "$ref": "#/definitions/DateTime",
          "description": "The time the task execution finished."
        },
        "StartTime": {
          "$ref": "#/definitions/DateTime",
          "description": "The time the task execution started."
        },
        "Status": {
          "$ref": "#/definitions/MaintenanceWindowExecutionStatus",
          "description": "The status of the task execution."
        },
        "StatusDetails": {
          "$ref": "#/definitions/MaintenanceWindowExecutionStatusDetails",
          "description": "The details explaining the status of the task execution. Only available for certain status values."
        },
        "TaskArn": {
          "$ref": "#/definitions/MaintenanceWindowTaskArn",
          "description": "The ARN of the executed task."
        },
        "TaskExecutionId": {
          "$ref": "#/definitions/MaintenanceWindowExecutionTaskId",
          "description": "The ID of the specific task execution in the Maintenance Window execution."
        },
        "TaskType": {
          "$ref": "#/definitions/MaintenanceWindowTaskType",
          "description": "The type of executed task."
        },
        "WindowExecutionId": {
          "$ref": "#/definitions/MaintenanceWindowExecutionId",
          "description": "The ID of the Maintenance Window execution that ran the task."
        }
      },
      "type": "object"
    },
    "MaintenanceWindowExecutionTaskIdentityList": {
      "items": {
        "$ref": "#/definitions/MaintenanceWindowExecutionTaskIdentity"
      },
      "type": "array"
    },
    "MaintenanceWindowExecutionTaskInvocationId": {
      "maxLength": 36,
      "minLength": 36,
      "pattern": "^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}$",
      "type": "string"
    },
    "MaintenanceWindowExecutionTaskInvocationIdentity": {
      "description": "Describes the information about a task invocation for a particular target as part of a task execution performed as part of a Maintenance Window execution.",
      "properties": {
        "EndTime": {
          "$ref": "#/definitions/DateTime",
          "description": "The time the invocation finished."
        },
        "ExecutionId": {
          "$ref": "#/definitions/MaintenanceWindowExecutionTaskExecutionId",
          "description": "The ID of the action performed in the service that actually handled the task invocation. If the task type is RUN_COMMAND, this value is the command ID."
        },
        "InvocationId": {
          "$ref": "#/definitions/MaintenanceWindowExecutionTaskInvocationId",
          "description": "The ID of the task invocation."
        },
        "OwnerInformation": {
          "$ref": "#/definitions/OwnerInformation",
          "description": "User-provided value that was specified when the target was registered with the Maintenance Window. This was also included in any CloudWatch events raised during the task invocation."
        },
        "Parameters": {
          "$ref": "#/definitions/MaintenanceWindowExecutionTaskInvocationParameters",
          "description": "The parameters that were provided for the invocation when it was executed."
        },
        "StartTime": {
          "$ref": "#/definitions/DateTime",
          "description": "The time the invocation started."
        },
        "Status": {
          "$ref": "#/definitions/MaintenanceWindowExecutionStatus",
          "description": "The status of the task invocation."
        },
        "StatusDetails": {
          "$ref": "#/definitions/MaintenanceWindowExecutionStatusDetails",
          "description": "The details explaining the status of the task invocation. Only available for certain Status values. "
        },
        "TaskExecutionId": {
          "$ref": "#/definitions/MaintenanceWindowExecutionTaskId",
          "description": "The ID of the specific task execution in the Maintenance Window execution."
        },
        "TaskType": {
          "$ref": "#/definitions/MaintenanceWindowTaskType",
          "description": "The task type."
        },
        "WindowExecutionId": {
          "$ref": "#/definitions/MaintenanceWindowExecutionId",
          "description": "The ID of the Maintenance Window execution that ran the task."
        },
        "WindowTargetId": {
          "$ref": "#/definitions/MaintenanceWindowTaskTargetId",
          "description": "The ID of the target definition in this Maintenance Window the invocation was performed for."
        }
      },
      "type": "object"
    },
    "MaintenanceWindowExecutionTaskInvocationIdentityList": {
      "items": {
        "$ref": "#/definitions/MaintenanceWindowExecutionTaskInvocationIdentity"
      },
      "type": "array"
    },
    "MaintenanceWindowExecutionTaskInvocationParameters": {
      "format": "password",
      "type": "string"
    },
    "MaintenanceWindowFilter": {
      "description": "Filter used in the request.",
      "properties": {
        "Key": {
          "$ref": "#/definitions/MaintenanceWindowFilterKey",
          "description": "The name of the filter."
        },
        "Values": {
          "$ref": "#/definitions/MaintenanceWindowFilterValues",
          "description": "The filter values."
        }
      },
      "type": "object"
    },
    "MaintenanceWindowFilterKey": {
      "maxLength": 128,
      "minLength": 1,
      "type": "string"
    },
    "MaintenanceWindowFilterList": {
      "items": {
        "$ref": "#/definitions/MaintenanceWindowFilter"
      },
      "maxItems": 5,
      "minItems": 0,
      "type": "array"
    },
    "MaintenanceWindowFilterValue": {
      "maxLength": 256,
      "minLength": 1,
      "type": "string"
    },
    "MaintenanceWindowFilterValues": {
      "items": {
        "$ref": "#/definitions/MaintenanceWindowFilterValue"
      },
      "type": "array"
    },
    "MaintenanceWindowId": {
      "maxLength": 20,
      "minLength": 20,
      "pattern": "^mw-[0-9a-f]{17}$",
      "type": "string"
    },
    "MaintenanceWindowIdentity": {
      "description": "Information about the Maintenance Window.",
      "properties": {
        "Cutoff": {
          "$ref": "#/definitions/MaintenanceWindowCutoff",
          "description": "The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution."
        },
        "Description": {
          "$ref": "#/definitions/MaintenanceWindowDescription",
          "description": "A description of the Maintenance Window."
        },
        "Duration": {
          "$ref": "#/definitions/MaintenanceWindowDurationHours",
          "description": "The duration of the Maintenance Window in hours."
        },
        "Enabled": {
          "$ref": "#/definitions/MaintenanceWindowEnabled",
          "description": "Whether the Maintenance Window is enabled."
        },
        "Name": {
          "$ref": "#/definitions/MaintenanceWindowName",
          "description": "The name of the Maintenance Window."
        },
        "WindowId": {
          "$ref": "#/definitions/MaintenanceWindowId",
          "description": "The ID of the Maintenance Window."
        }
      },
      "type": "object"
    },
    "MaintenanceWindowIdentityList": {
      "items": {
        "$ref": "#/definitions/MaintenanceWindowIdentity"
      },
      "type": "array"
    },
    "MaintenanceWindowLambdaClientContext": {
      "maxLength": 8000,
      "minLength": 1,
      "type": "string"
    },
    "MaintenanceWindowLambdaParameters": {
      "description": "The parameters for a LAMBDA task type.",
      "properties": {
        "ClientContext": {
          "$ref": "#/definitions/MaintenanceWindowLambdaClientContext",
          "description": "Pass client-specific information to the Lambda function that you are invoking. You can then process the client information in your Lambda function as you choose through the context variable."
        },
        "Payload": {
          "$ref": "#/definitions/MaintenanceWindowLambdaPayload",
          "description": "JSON to provide to your Lambda function as input."
        },
        "Qualifier": {
          "$ref": "#/definitions/MaintenanceWindowLambdaQualifier",
          "description": "(Optional) Specify a Lambda function version or alias name. If you specify a function version, the action uses the qualified function ARN to invoke a specific Lambda function. If you specify an alias name, the action uses the alias ARN to invoke the Lambda function version to which the alias points."
        }
      },
      "type": "object"
    },
    "MaintenanceWindowLambdaPayload": {
      "format": "password",
      "maxLength": 4096,
      "type": "string"
    },
    "MaintenanceWindowLambdaQualifier": {
      "maxLength": 128,
      "minLength": 1,
      "type": "string"
    },
    "MaintenanceWindowMaxResults": {
      "maximum": 100,
      "minimum": 10,
      "type": "integer"
    },
    "MaintenanceWindowName": {
      "maxLength": 128,
      "minLength": 3,
      "pattern": "^[a-zA-Z0-9_\\-.]{3,128}$",
      "type": "string"
    },
    "MaintenanceWindowResourceType": {
      "enum": [
        "INSTANCE"
      ],
      "type": "string"
    },
    "MaintenanceWindowRunCommandParameters": {
      "description": "The parameters for a RUN_COMMAND task type.",
      "properties": {
        "Comment": {
          "$ref": "#/definitions/Comment",
          "description": "Information about the command(s) to execute."
        },
        "DocumentHash": {
          "$ref": "#/definitions/DocumentHash",
          "description": "The SHA-256 or SHA-1 hash created by the system when the document was created. SHA-1 hashes have been deprecated."
        },
        "DocumentHashType": {
          "$ref": "#/definitions/DocumentHashType",
          "description": "SHA-256 or SHA-1. SHA-1 hashes have been deprecated."
        },
        "NotificationConfig": {
          "$ref": "#/definitions/NotificationConfig",
          "description": "Configurations for sending notifications about command status changes on a per-instance basis."
        },
        "OutputS3BucketName": {
          "$ref": "#/definitions/S3BucketName",
          "description": "The name of the Amazon S3 bucket."
        },
        "OutputS3KeyPrefix": {
          "$ref": "#/definitions/S3KeyPrefix",
          "description": "The Amazon S3 bucket subfolder."
        },
        "Parameters": {
          "$ref": "#/definitions/Parameters",
          "description": "The parameters for the RUN_COMMAND task execution."
        },
        "ServiceRoleArn": {
          "$ref": "#/definitions/ServiceRole",
          "description": "The IAM service role to assume during task execution."
        },
        "TimeoutSeconds": {
          "$ref": "#/definitions/TimeoutSeconds",
          "description": "If this time is reached and the command has not already started executing, it doesn not execute."
        }
      },
      "type": "object"
    },
    "MaintenanceWindowSchedule": {
      "maxLength": 256,
      "minLength": 1,
      "type": "string"
    },
    "MaintenanceWindowStepFunctionsInput": {
      "format": "password",
      "maxLength": 4096,
      "type": "string"
    },
    "MaintenanceWindowStepFunctionsName": {
      "maxLength": 80,
      "minLength": 1,
      "type": "string"
    },
    "MaintenanceWindowStepFunctionsParameters": {
      "description": "The parameters for the STEP_FUNCTION execution.",
      "properties": {
        "Input": {
          "$ref": "#/definitions/MaintenanceWindowStepFunctionsInput",
          "description": "The inputs for the STEP_FUNCTION task."
        },
        "Name": {
          "$ref": "#/definitions/MaintenanceWindowStepFunctionsName",
          "description": "The name of the STEP_FUNCTION task."
        }
      },
      "type": "object"
    },
    "MaintenanceWindowTarget": {
      "description": "The target registered with the Maintenance Window.",
      "properties": {
        "Description": {
          "$ref": "#/definitions/MaintenanceWindowDescription",
          "description": "A description of the target."
        },
        "Name": {
          "$ref": "#/definitions/MaintenanceWindowName",
          "description": "The target name."
        },
        "OwnerInformation": {
          "$ref": "#/definitions/OwnerInformation",
          "description": "User-provided value that will be included in any CloudWatch events raised while running tasks for these targets in this Maintenance Window."
        },
        "ResourceType": {
          "$ref": "#/definitions/MaintenanceWindowResourceType",
          "description": "The type of target."
        },
        "Targets": {
          "$ref": "#/definitions/Targets",
          "description": "The targets (either instances or tags). Instances are specified using Key=instanceids,Values=&lt;instanceid1&gt;,&lt;instanceid2&gt;. Tags are specified using Key=&lt;tag name&gt;,Values=&lt;tag value&gt;."
        },
        "WindowId": {
          "$ref": "#/definitions/MaintenanceWindowId",
          "description": "The Maintenance Window ID where the target is registered."
        },
        "WindowTargetId": {
          "$ref": "#/definitions/MaintenanceWindowTargetId",
          "description": "The ID of the target."
        }
      },
      "type": "object"
    },
    "MaintenanceWindowTargetId": {
      "maxLength": 36,
      "minLength": 36,
      "pattern": "^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}$",
      "type": "string"
    },
    "MaintenanceWindowTargetList": {
      "items": {
        "$ref": "#/definitions/MaintenanceWindowTarget"
      },
      "type": "array"
    },
    "MaintenanceWindowTask": {
      "description": "Information about a task defined for a Maintenance Window.",
      "properties": {
        "Description": {
          "$ref": "#/definitions/MaintenanceWindowDescription",
          "description": "A description of the task."
        },
        "LoggingInfo": {
          "$ref": "#/definitions/LoggingInfo",
          "description": "Information about an Amazon S3 bucket to write task-level logs to."
        },
        "MaxConcurrency": {
          "$ref": "#/definitions/MaxConcurrency",
          "description": "The maximum number of targets this task can be run for in parallel."
        },
        "MaxErrors": {
          "$ref": "#/definitions/MaxErrors",
          "description": "The maximum number of errors allowed before this task stops being scheduled."
        },
        "Name": {
          "$ref": "#/definitions/MaintenanceWindowName",
          "description": "The task name."
        },
        "Priority": {
          "$ref": "#/definitions/MaintenanceWindowTaskPriority",
          "description": "The priority of the task in the Maintenance Window. The lower the number, the higher the priority. Tasks that have the same priority are scheduled in parallel."
        },
        "ServiceRoleArn": {
          "$ref": "#/definitions/ServiceRole",
          "description": "The role that should be assumed when executing the task"
        },
        "Targets": {
          "$ref": "#/definitions/Targets",
          "description": "The targets (either instances or tags). Instances are specified using Key=instanceids,Values=&lt;instanceid1&gt;,&lt;instanceid2&gt;. Tags are specified using Key=&lt;tag name&gt;,Values=&lt;tag value&gt;."
        },
        "TaskArn": {
          "$ref": "#/definitions/MaintenanceWindowTaskArn",
          "description": "The resource that the task uses during execution. For RUN_COMMAND and AUTOMATION task types, <code>TaskArn</code> is the Systems Manager document name or ARN. For LAMBDA tasks, it's the function name or ARN. For STEP_FUNCTION tasks, it's the state machine ARN."
        },
        "TaskParameters": {
          "$ref": "#/definitions/MaintenanceWindowTaskParameters",
          "description": "The parameters that should be passed to the task when it is executed."
        },
        "Type": {
          "$ref": "#/definitions/MaintenanceWindowTaskType",
          "description": "The type of task. The type can be one of the following: RUN_COMMAND, AUTOMATION, LAMBDA, or STEP_FUNCTION."
        },
        "WindowId": {
          "$ref": "#/definitions/MaintenanceWindowId",
          "description": "The Maintenance Window ID where the task is registered."
        },
        "WindowTaskId": {
          "$ref": "#/definitions/MaintenanceWindowTaskId",
          "description": "The task ID."
        }
      },
      "type": "object"
    },
    "MaintenanceWindowTaskArn": {
      "maxLength": 1600,
      "minLength": 1,
      "type": "string"
    },
    "MaintenanceWindowTaskId": {
      "maxLength": 36,
      "minLength": 36,
      "pattern": "^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}$",
      "type": "string"
    },
    "MaintenanceWindowTaskInvocationParameters": {
      "description": "The parameters for task execution.",
      "properties": {
        "Automation": {
          "$ref": "#/definitions/MaintenanceWindowAutomationParameters",
          "description": "The parameters for a AUTOMATION task type."
        },
        "Lambda": {
          "$ref": "#/definitions/MaintenanceWindowLambdaParameters",
          "description": "The parameters for a LAMBDA task type."
        },
        "RunCommand": {
          "$ref": "#/definitions/MaintenanceWindowRunCommandParameters",
          "description": "The parameters for a RUN_COMMAND task type."
        },
        "StepFunctions": {
          "$ref": "#/definitions/MaintenanceWindowStepFunctionsParameters",
          "description": "The parameters for a STEP_FUNCTION task type."
        }
      },
      "type": "object"
    },
    "MaintenanceWindowTaskList": {
      "items": {
        "$ref": "#/definitions/MaintenanceWindowTask"
      },
      "type": "array"
    },
    "MaintenanceWindowTaskParameterName": {
      "maxLength": 255,
      "minLength": 1,
      "type": "string"
    },
    "MaintenanceWindowTaskParameterValue": {
      "format": "password",
      "maxLength": 255,
      "minLength": 1,
      "type": "string"
    },
    "MaintenanceWindowTaskParameterValueExpression": {
      "description": "Defines the values for a task parameter.",
      "properties": {
        "Values": {
          "$ref": "#/definitions/MaintenanceWindowTaskParameterValueList",
          "description": "This field contains an array of 0 or more strings, each 1 to 255 characters in length."
        }
      },
      "type": "object"
    },
    "MaintenanceWindowTaskParameterValueList": {
      "items": {
        "$ref": "#/definitions/MaintenanceWindowTaskParameterValue"
      },
      "type": "array"
    },
    "MaintenanceWindowTaskParameters": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/MaintenanceWindowTaskParameterName"
          },
          "value": {
            "$ref": "#/definitions/MaintenanceWindowTaskParameterValueExpression"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "MaintenanceWindowTaskParametersList": {
      "items": {
        "$ref": "#/definitions/MaintenanceWindowTaskParameters"
      },
      "type": "array"
    },
    "MaintenanceWindowTaskPriority": {
      "minimum": 0,
      "type": "integer"
    },
    "MaintenanceWindowTaskTargetId": {
      "maxLength": 36,
      "type": "string"
    },
    "MaintenanceWindowTaskType": {
      "enum": [
        "RUN_COMMAND",
        "AUTOMATION",
        "STEP_FUNCTIONS",
        "LAMBDA"
      ],
      "type": "string"
    },
    "ManagedInstanceId": {
      "pattern": "^mi-[0-9a-f]{17}$",
      "type": "string"
    },
    "MaxConcurrency": {
      "maxLength": 7,
      "minLength": 1,
      "pattern": "^([1-9][0-9]*|[1-9][0-9]%|[1-9]%|100%)$",
      "type": "string"
    },
    "MaxDocumentSizeExceeded": {
      "description": "The size limit of a document is 64 KB.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "MaxErrors": {
      "maxLength": 7,
      "minLength": 1,
      "pattern": "^([1-9][0-9]*|[0]|[1-9][0-9]%|[0-9]%|100%)$",
      "type": "string"
    },
    "MaxResults": {
      "maximum": 50,
      "minimum": 1,
      "type": "integer"
    },
    "MaxResultsEC2Compatible": {
      "maximum": 50,
      "minimum": 5,
      "type": "integer"
    },
    "ModifyDocumentPermissionRequest": {
      "properties": {
        "AccountIdsToAdd": {
          "$ref": "#/definitions/AccountIdList",
          "description": "The AWS user accounts that should have access to the document. The account IDs can either be a group of account IDs or <i>All</i>."
        },
        "AccountIdsToRemove": {
          "$ref": "#/definitions/AccountIdList",
          "description": "The AWS user accounts that should no longer have access to the document. The AWS user account can either be a group of account IDs or <i>All</i>. This action has a higher priority than <i>AccountIdsToAdd</i>. If you specify an account ID to add and the same ID to remove, the system removes access to the document."
        },
        "Name": {
          "$ref": "#/definitions/DocumentName",
          "description": "The name of the document that you want to share."
        },
        "PermissionType": {
          "$ref": "#/definitions/DocumentPermissionType",
          "description": "The permission type for the document. The permission type can be <i>Share</i>."
        }
      },
      "required": [
        "Name",
        "PermissionType"
      ],
      "type": "object"
    },
    "ModifyDocumentPermissionResponse": {
      "properties": {},
      "type": "object"
    },
    "NextToken": {
      "type": "string"
    },
    "NonCompliantSummary": {
      "description": "A summary of resources that are not compliant. The summary is organized according to resource type.",
      "properties": {
        "NonCompliantCount": {
          "$ref": "#/definitions/ComplianceSummaryCount",
          "description": "The total number of compliance items that are not compliant."
        },
        "SeveritySummary": {
          "$ref": "#/definitions/SeveritySummary",
          "description": "A summary of the non-compliance severity by compliance type"
        }
      },
      "type": "object"
    },
    "NormalStringMap": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/String"
          },
          "value": {
            "$ref": "#/definitions/String"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "NotificationArn": {
      "type": "string"
    },
    "NotificationConfig": {
      "description": "Configurations for sending notifications.",
      "properties": {
        "NotificationArn": {
          "$ref": "#/definitions/NotificationArn",
          "description": "An Amazon Resource Name (ARN) for a Simple Notification Service (SNS) topic. Run Command pushes notifications about command status changes to this topic."
        },
        "NotificationEvents": {
          "$ref": "#/definitions/NotificationEventList",
          "description": "The different events for which you can receive notifications. These events include the following: All (events), InProgress, Success, TimedOut, Cancelled, Failed. To learn more about these events, see <a href=\"http://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html\">Setting Up Events and Notifications</a> in the <i>Amazon EC2 Systems Manager User Guide</i>."
        },
        "NotificationType": {
          "$ref": "#/definitions/NotificationType",
          "description": "Command: Receive notification when the status of a command changes. Invocation: For commands sent to multiple instances, receive notification on a per-instance basis when the status of a command changes. "
        }
      },
      "type": "object"
    },
    "NotificationEvent": {
      "enum": [
        "All",
        "InProgress",
        "Success",
        "TimedOut",
        "Cancelled",
        "Failed"
      ],
      "type": "string"
    },
    "NotificationEventList": {
      "items": {
        "$ref": "#/definitions/NotificationEvent"
      },
      "type": "array"
    },
    "NotificationType": {
      "enum": [
        "Command",
        "Invocation"
      ],
      "type": "string"
    },
    "OperatingSystem": {
      "enum": [
        "WINDOWS",
        "AMAZON_LINUX",
        "UBUNTU",
        "REDHAT_ENTERPRISE_LINUX"
      ],
      "type": "string"
    },
    "OwnerInformation": {
      "format": "password",
      "maxLength": 128,
      "minLength": 1,
      "type": "string"
    },
    "PSParameterName": {
      "maxLength": 1024,
      "minLength": 1,
      "type": "string"
    },
    "PSParameterValue": {
      "maxLength": 4096,
      "minLength": 1,
      "type": "string"
    },
    "Parameter": {
      "description": "An Amazon EC2 Systems Manager parameter in Parameter Store.",
      "properties": {
        "Name": {
          "$ref": "#/definitions/PSParameterName",
          "description": "The name of the parameter."
        },
        "Type": {
          "$ref": "#/definitions/ParameterType",
          "description": "The type of parameter. Valid values include the following: String, String list, Secure string."
        },
        "Value": {
          "$ref": "#/definitions/PSParameterValue",
          "description": "The parameter value."
        }
      },
      "type": "object"
    },
    "ParameterAlreadyExists": {
      "description": "The parameter already exists. You can't create duplicate parameters.",
      "properties": {
        "message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "ParameterDescription": {
      "maxLength": 1024,
      "minLength": 1,
      "type": "string"
    },
    "ParameterHistory": {
      "description": "Information about parameter usage.",
      "properties": {
        "AllowedPattern": {
          "$ref": "#/definitions/AllowedPattern",
          "description": "<p>Parameter names can include the following letters and symbols.</p> <p>a-zA-Z0-9_.-</p>"
        },
        "Description": {
          "$ref": "#/definitions/ParameterDescription",
          "description": "Information about the parameter."
        },
        "KeyId": {
          "$ref": "#/definitions/ParameterKeyId",
          "description": "The ID of the query key used for this parameter."
        },
        "LastModifiedDate": {
          "$ref": "#/definitions/DateTime",
          "description": "Date the parameter was last changed or updated."
        },
        "LastModifiedUser": {
          "$ref": "#/definitions/String",
          "description": "Amazon Resource Name (ARN) of the AWS user who last changed the parameter."
        },
        "Name": {
          "$ref": "#/definitions/PSParameterName",
          "description": "The name of the parameter."
        },
        "Type": {
          "$ref": "#/definitions/ParameterType",
          "description": "The type of parameter used."
        },
        "Value": {
          "$ref": "#/definitions/PSParameterValue",
          "description": "The parameter value."
        }
      },
      "type": "object"
    },
    "ParameterHistoryList": {
      "items": {
        "$ref": "#/definitions/ParameterHistory"
      },
      "type": "array"
    },
    "ParameterKeyId": {
      "maxLength": 256,
      "minLength": 1,
      "pattern": "^([a-zA-Z0-9:/_-]+)$",
      "type": "string"
    },
    "ParameterLimitExceeded": {
      "description": "You have exceeded the number of parameters for this AWS account. Delete one or more parameters and try again.",
      "properties": {
        "message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "ParameterList": {
      "items": {
        "$ref": "#/definitions/Parameter"
      },
      "type": "array"
    },
    "ParameterMetadata": {
      "description": "Metada includes information like the ARN of the last user and the date/time the parameter was last used.",
      "properties": {
        "AllowedPattern": {
          "$ref": "#/definitions/AllowedPattern",
          "description": "<p>A parameter name can include only the following letters and symbols.</p> <p>a-zA-Z0-9_.-</p>"
        },
        "Description": {
          "$ref": "#/definitions/ParameterDescription",
          "description": "Description of the parameter actions."
        },
        "KeyId": {
          "$ref": "#/definitions/ParameterKeyId",
          "description": "The ID of the query key used for this parameter."
        },
        "LastModifiedDate": {
          "$ref": "#/definitions/DateTime",
          "description": "Date the parameter was last changed or updated."
        },
        "LastModifiedUser": {
          "$ref": "#/definitions/String",
          "description": "Amazon Resource Name (ARN) of the AWS user who last changed the parameter."
        },
        "Name": {
          "$ref": "#/definitions/PSParameterName",
          "description": "The parameter name."
        },
        "Type": {
          "$ref": "#/definitions/ParameterType",
          "description": "The type of parameter. Valid parameter types include the following: String, String list, Secure string."
        }
      },
      "type": "object"
    },
    "ParameterMetadataList": {
      "items": {
        "$ref": "#/definitions/ParameterMetadata"
      },
      "type": "array"
    },
    "ParameterName": {
      "type": "string"
    },
    "ParameterNameList": {
      "items": {
        "$ref": "#/definitions/PSParameterName"
      },
      "maxItems": 10,
      "minItems": 1,
      "type": "array"
    },
    "ParameterNotFound": {
      "description": "The parameter could not be found. Verify the name and try again.",
      "properties": {
        "message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "ParameterPatternMismatchException": {
      "description": "The parameter name is not valid.",
      "properties": {
        "message": {
          "$ref": "#/definitions/String",
          "description": "The parameter name is not valid."
        }
      },
      "type": "object"
    },
    "ParameterStringFilter": {
      "description": "One or more filters. Use a filter to return a more specific list of results.",
      "properties": {
        "Key": {
          "$ref": "#/definitions/ParameterStringFilterKey",
          "description": "The name of the filter."
        },
        "Option": {
          "$ref": "#/definitions/ParameterStringQueryOption",
          "description": "Valid options are Equals and BeginsWith. For Path filter, valid options are Recursive and OneLevel."
        },
        "Values": {
          "$ref": "#/definitions/ParameterStringFilterValueList",
          "description": "The value you want to search for."
        }
      },
      "required": [
        "Key"
      ],
      "type": "object"
    },
    "ParameterStringFilterKey": {
      "maxLength": 132,
      "minLength": 1,
      "pattern": "tag:.+|Name|Type|KeyId|Path",
      "type": "string"
    },
    "ParameterStringFilterList": {
      "items": {
        "$ref": "#/definitions/ParameterStringFilter"
      },
      "type": "array"
    },
    "ParameterStringFilterValue": {
      "maxLength": 1024,
      "minLength": 1,
      "type": "string"
    },
    "ParameterStringFilterValueList": {
      "items": {
        "$ref": "#/definitions/ParameterStringFilterValue"
      },
      "maxItems": 50,
      "minItems": 1,
      "type": "array"
    },
    "ParameterStringQueryOption": {
      "maxLength": 10,
      "minLength": 1,
      "type": "string"
    },
    "ParameterType": {
      "enum": [
        "String",
        "StringList",
        "SecureString"
      ],
      "type": "string"
    },
    "ParameterValue": {
      "type": "string"
    },
    "ParameterValueList": {
      "items": {
        "$ref": "#/definitions/ParameterValue"
      },
      "type": "array"
    },
    "Parameters": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/ParameterName"
          },
          "value": {
            "$ref": "#/definitions/ParameterValueList"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "ParametersFilter": {
      "description": "One or more filters. Use a filter to return a more specific list of results.",
      "properties": {
        "Key": {
          "$ref": "#/definitions/ParametersFilterKey",
          "description": "The name of the filter."
        },
        "Values": {
          "$ref": "#/definitions/ParametersFilterValueList",
          "description": "The filter values."
        }
      },
      "required": [
        "Key",
        "Values"
      ],
      "type": "object"
    },
    "ParametersFilterKey": {
      "enum": [
        "Name",
        "Type",
        "KeyId"
      ],
      "type": "string"
    },
    "ParametersFilterList": {
      "items": {
        "$ref": "#/definitions/ParametersFilter"
      },
      "type": "array"
    },
    "ParametersFilterValue": {
      "maxLength": 1024,
      "minLength": 1,
      "type": "string"
    },
    "ParametersFilterValueList": {
      "items": {
        "$ref": "#/definitions/ParametersFilterValue"
      },
      "maxItems": 50,
      "minItems": 1,
      "type": "array"
    },
    "Patch": {
      "description": "Represents metadata about a patch.",
      "properties": {
        "Classification": {
          "$ref": "#/definitions/PatchClassification",
          "description": "The classification of the patch (for example, SecurityUpdates, Updates, CriticalUpdates)."
        },
        "ContentUrl": {
          "$ref": "#/definitions/PatchContentUrl",
          "description": "The URL where more information can be obtained about the patch."
        },
        "Description": {
          "$ref": "#/definitions/PatchDescription",
          "description": "The description of the patch."
        },
        "Id": {
          "$ref": "#/definitions/PatchId",
          "description": "The ID of the patch (this is different than the Microsoft Knowledge Base ID)."
        },
        "KbNumber": {
          "$ref": "#/definitions/PatchKbNumber",
          "description": "The Microsoft Knowledge Base ID of the patch."
        },
        "Language": {
          "$ref": "#/definitions/PatchLanguage",
          "description": "The language of the patch if it's language-specific."
        },
        "MsrcNumber": {
          "$ref": "#/definitions/PatchMsrcNumber",
          "description": "The ID of the MSRC bulletin the patch is related to."
        },
        "MsrcSeverity": {
          "$ref": "#/definitions/PatchMsrcSeverity",
          "description": "The severity of the patch (for example Critical, Important, Moderate)."
        },
        "Product": {
          "$ref": "#/definitions/PatchProduct",
          "description": "The specific product the patch is applicable for (for example, WindowsServer2016)."
        },
        "ProductFamily": {
          "$ref": "#/definitions/PatchProductFamily",
          "description": "The product family the patch is applicable for (for example, Windows)."
        },
        "ReleaseDate": {
          "$ref": "#/definitions/DateTime",
          "description": "The date the patch was released."
        },
        "Title": {
          "$ref": "#/definitions/PatchTitle",
          "description": "The title of the patch."
        },
        "Vendor": {
          "$ref": "#/definitions/PatchVendor",
          "description": "The name of the vendor providing the patch."
        }
      },
      "type": "object"
    },
    "PatchBaselineIdentity": {
      "description": "Defines the basic information about a patch baseline.",
      "properties": {
        "BaselineDescription": {
          "$ref": "#/definitions/BaselineDescription",
          "description": "The description of the patch baseline."
        },
        "BaselineId": {
          "$ref": "#/definitions/BaselineId",
          "description": "The ID of the patch baseline."
        },
        "BaselineName": {
          "$ref": "#/definitions/BaselineName",
          "description": "The name of the patch baseline."
        },
        "DefaultBaseline": {
          "$ref": "#/definitions/DefaultBaseline",
          "description": "Whether this is the default baseline. Note that Systems Manager supports creating multiple default patch baselines. For example, you can create a default patch baseline for each operating system."
        },
        "OperatingSystem": {
          "$ref": "#/definitions/OperatingSystem",
          "description": "Defines the operating system the patch baseline applies to. Supported operating systems include WINDOWS, AMAZON_LINUX, UBUNTU and REDHAT_ENTERPRISE_LINUX. The Default value is WINDOWS. "
        }
      },
      "type": "object"
    },
    "PatchBaselineIdentityList": {
      "items": {
        "$ref": "#/definitions/PatchBaselineIdentity"
      },
      "type": "array"
    },
    "PatchBaselineMaxResults": {
      "maximum": 100,
      "minimum": 1,
      "type": "integer"
    },
    "PatchClassification": {
      "type": "string"
    },
    "PatchComplianceData": {
      "description": "Information about the state of a patch on a particular instance as it relates to the patch baseline used to patch the instance.",
      "properties": {
        "Classification": {
          "$ref": "#/definitions/PatchClassification",
          "description": "The classification of the patch (for example, SecurityUpdates, Updates, CriticalUpdates)."
        },
        "InstalledTime": {
          "$ref": "#/definitions/DateTime",
          "description": "The date/time the patch was installed on the instance. Note that not all operating systems provide this level of information."
        },
        "KBId": {
          "$ref": "#/definitions/PatchKbNumber",
          "description": "The operating system-specific ID of the patch."
        },
        "Severity": {
          "$ref": "#/definitions/PatchSeverity",
          "description": "The severity of the patch (for example, Critical, Important, Moderate)."
        },
        "State": {
          "$ref": "#/definitions/PatchComplianceDataState",
          "description": "The state of the patch on the instance (INSTALLED, INSTALLED_OTHER, MISSING, NOT_APPLICABLE or FAILED)."
        },
        "Title": {
          "$ref": "#/definitions/PatchTitle",
          "description": "The title of the patch."
        }
      },
      "required": [
        "Title",
        "KBId",
        "Classification",
        "Severity",
        "State",
        "InstalledTime"
      ],
      "type": "object"
    },
    "PatchComplianceDataList": {
      "items": {
        "$ref": "#/definitions/PatchComplianceData"
      },
      "type": "array"
    },
    "PatchComplianceDataState": {
      "enum": [
        "INSTALLED",
        "INSTALLED_OTHER",
        "MISSING",
        "NOT_APPLICABLE",
        "FAILED"
      ],
      "type": "string"
    },
    "PatchComplianceLevel": {
      "enum": [
        "CRITICAL",
        "HIGH",
        "MEDIUM",
        "LOW",
        "INFORMATIONAL",
        "UNSPECIFIED"
      ],
      "type": "string"
    },
    "PatchComplianceMaxResults": {
      "maximum": 100,
      "minimum": 10,
      "type": "integer"
    },
    "PatchContentUrl": {
      "type": "string"
    },
    "PatchDeploymentStatus": {
      "enum": [
        "APPROVED",
        "PENDING_APPROVAL",
        "EXPLICIT_APPROVED",
        "EXPLICIT_REJECTED"
      ],
      "type": "string"
    },
    "PatchDescription": {
      "type": "string"
    },
    "PatchFailedCount": {
      "type": "integer"
    },
    "PatchFilter": {
      "description": "Defines a patch filter.",
      "properties": {
        "Key": {
          "$ref": "#/definitions/PatchFilterKey",
          "description": "The key for the filter (PRODUCT, CLASSIFICATION, MSRC_SEVERITY, PATCH_ID)"
        },
        "Values": {
          "$ref": "#/definitions/PatchFilterValueList",
          "description": "The value for the filter key."
        }
      },
      "required": [
        "Key",
        "Values"
      ],
      "type": "object"
    },
    "PatchFilterGroup": {
      "description": "A set of patch filters, typically used for approval rules.",
      "properties": {
        "PatchFilters": {
          "$ref": "#/definitions/PatchFilterList",
          "description": "The set of patch filters that make up the group."
        }
      },
      "required": [
        "PatchFilters"
      ],
      "type": "object"
    },
    "PatchFilterKey": {
      "enum": [
        "PRODUCT",
        "CLASSIFICATION",
        "MSRC_SEVERITY",
        "PATCH_ID",
        "SECTION",
        "PRIORITY",
        "SEVERITY"
      ],
      "type": "string"
    },
    "PatchFilterList": {
      "items": {
        "$ref": "#/definitions/PatchFilter"
      },
      "maxItems": 4,
      "minItems": 0,
      "type": "array"
    },
    "PatchFilterValue": {
      "maxLength": 64,
      "minLength": 1,
      "type": "string"
    },
    "PatchFilterValueList": {
      "items": {
        "$ref": "#/definitions/PatchFilterValue"
      },
      "maxItems": 20,
      "minItems": 1,
      "type": "array"
    },
    "PatchGroup": {
      "maxLength": 256,
      "minLength": 1,
      "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
      "type": "string"
    },
    "PatchGroupList": {
      "items": {
        "$ref": "#/definitions/PatchGroup"
      },
      "type": "array"
    },
    "PatchGroupPatchBaselineMapping": {
      "description": "The mapping between a patch group and the patch baseline the patch group is registered with.",
      "properties": {
        "BaselineIdentity": {
          "$ref": "#/definitions/PatchBaselineIdentity",
          "description": "The patch baseline the patch group is registered with."
        },
        "PatchGroup": {
          "$ref": "#/definitions/PatchGroup",
          "description": "The name of the patch group registered with the patch baseline."
        }
      },
      "type": "object"
    },
    "PatchGroupPatchBaselineMappingList": {
      "items": {
        "$ref": "#/definitions/PatchGroupPatchBaselineMapping"
      },
      "type": "array"
    },
    "PatchId": {
      "maxLength": 100,
      "minLength": 1,
      "type": "string"
    },
    "PatchIdList": {
      "items": {
        "$ref": "#/definitions/PatchId"
      },
      "maxItems": 50,
      "minItems": 0,
      "type": "array"
    },
    "PatchInstalledCount": {
      "type": "integer"
    },
    "PatchInstalledOtherCount": {
      "type": "integer"
    },
    "PatchKbNumber": {
      "type": "string"
    },
    "PatchLanguage": {
      "type": "string"
    },
    "PatchList": {
      "items": {
        "$ref": "#/definitions/Patch"
      },
      "type": "array"
    },
    "PatchMissingCount": {
      "type": "integer"
    },
    "PatchMsrcNumber": {
      "type": "string"
    },
    "PatchMsrcSeverity": {
      "type": "string"
    },
    "PatchNotApplicableCount": {
      "type": "integer"
    },
    "PatchOperationType": {
      "enum": [
        "Scan",
        "Install"
      ],
      "type": "string"
    },
    "PatchOrchestratorFilter": {
      "description": "Defines a filter used in Patch Manager APIs.",
      "properties": {
        "Key": {
          "$ref": "#/definitions/PatchOrchestratorFilterKey",
          "description": "The key for the filter."
        },
        "Values": {
          "$ref": "#/definitions/PatchOrchestratorFilterValues",
          "description": "The value for the filter."
        }
      },
      "type": "object"
    },
    "PatchOrchestratorFilterKey": {
      "maxLength": 128,
      "minLength": 1,
      "type": "string"
    },
    "PatchOrchestratorFilterList": {
      "items": {
        "$ref": "#/definitions/PatchOrchestratorFilter"
      },
      "maxItems": 5,
      "minItems": 0,
      "type": "array"
    },
    "PatchOrchestratorFilterValue": {
      "maxLength": 256,
      "minLength": 1,
      "type": "string"
    },
    "PatchOrchestratorFilterValues": {
      "items": {
        "$ref": "#/definitions/PatchOrchestratorFilterValue"
      },
      "type": "array"
    },
    "PatchProduct": {
      "type": "string"
    },
    "PatchProductFamily": {
      "type": "string"
    },
    "PatchRule": {
      "description": "Defines an approval rule for a patch baseline.",
      "properties": {
        "ApproveAfterDays": {
          "$ref": "#/definitions/ApproveAfterDays",
          "description": "The number of days after the release date of each patch matched by the rule the patch is marked as approved in the patch baseline."
        },
        "ComplianceLevel": {
          "$ref": "#/definitions/PatchComplianceLevel",
          "description": "A compliance severity level for all approved patches in a patch baseline. Valid compliance severity levels include the following: Unspecified, Critical, High, Medium, Low, and Informational."
        },
        "PatchFilterGroup": {
          "$ref": "#/definitions/PatchFilterGroup",
          "description": "The patch filter group that defines the criteria for the rule."
        }
      },
      "required": [
        "PatchFilterGroup",
        "ApproveAfterDays"
      ],
      "type": "object"
    },
    "PatchRuleGroup": {
      "description": "A set of rules defining the approval rules for a patch baseline.",
      "properties": {
        "PatchRules": {
          "$ref": "#/definitions/PatchRuleList",
          "description": "The rules that make up the rule group."
        }
      },
      "required": [
        "PatchRules"
      ],
      "type": "object"
    },
    "PatchRuleList": {
      "items": {
        "$ref": "#/definitions/PatchRule"
      },
      "maxItems": 10,
      "minItems": 0,
      "type": "array"
    },
    "PatchSeverity": {
      "type": "string"
    },
    "PatchStatus": {
      "description": "Information about the approval status of a patch.",
      "properties": {
        "ApprovalDate": {
          "$ref": "#/definitions/DateTime",
          "description": "The date the patch was approved (or will be approved if the status is PENDING_APPROVAL)."
        },
        "ComplianceLevel": {
          "$ref": "#/definitions/PatchComplianceLevel",
          "description": "The compliance severity level for a patch."
        },
        "DeploymentStatus": {
          "$ref": "#/definitions/PatchDeploymentStatus",
          "description": "The approval status of a patch (APPROVED, PENDING_APPROVAL, EXPLICIT_APPROVED, EXPLICIT_REJECTED)."
        }
      },
      "type": "object"
    },
    "PatchTitle": {
      "type": "string"
    },
    "PatchVendor": {
      "type": "string"
    },
    "PingStatus": {
      "enum": [
        "Online",
        "ConnectionLost",
        "Inactive"
      ],
      "type": "string"
    },
    "PlatformType": {
      "enum": [
        "Windows",
        "Linux"
      ],
      "type": "string"
    },
    "PlatformTypeList": {
      "items": {
        "$ref": "#/definitions/PlatformType"
      },
      "type": "array"
    },
    "Product": {
      "type": "string"
    },
    "PutComplianceItemsRequest": {
      "properties": {
        "ComplianceType": {
          "$ref": "#/definitions/ComplianceTypeName",
          "description": "Specify the compliance type. For example, specify Association (for a State Manager association), Patch, or Custom:<code>string</code>."
        },
        "ExecutionSummary": {
          "$ref": "#/definitions/ComplianceExecutionSummary",
          "description": "A summary of the call execution that includes an execution ID, the type of execution (for example, <code>Command</code>), and the date/time of the execution using a datetime object that is saved in the following format: yyyy-MM-dd'T'HH:mm:ss'Z'."
        },
        "ItemContentHash": {
          "$ref": "#/definitions/ComplianceItemContentHash",
          "description": "MD5 or SHA-256 content hash. The content hash is used to determine if existing information should be overwritten or ignored. If the content hashes match, the request to put compliance information is ignored."
        },
        "Items": {
          "$ref": "#/definitions/ComplianceItemEntryList",
          "description": "Information about the compliance as defined by the resource type. For example, for a patch compliance type, <code>Items</code> includes information about the PatchSeverity, Classification, etc."
        },
        "ResourceId": {
          "$ref": "#/definitions/ComplianceResourceId",
          "description": "Specify an ID for this resource. For a managed instance, this is the instance ID."
        },
        "ResourceType": {
          "$ref": "#/definitions/ComplianceResourceType",
          "description": "Specify the type of resource. <code>ManagedInstance</code> is currently the only supported resource type."
        }
      },
      "required": [
        "ResourceId",
        "ResourceType",
        "ComplianceType",
        "ExecutionSummary",
        "Items"
      ],
      "type": "object"
    },
    "PutComplianceItemsResult": {
      "properties": {},
      "type": "object"
    },
    "PutInventoryRequest": {
      "properties": {
        "InstanceId": {
          "$ref": "#/definitions/InstanceId",
          "description": "One or more instance IDs where you want to add or update inventory items."
        },
        "Items": {
          "$ref": "#/definitions/InventoryItemList",
          "description": "The inventory items that you want to add or update on instances."
        }
      },
      "required": [
        "InstanceId",
        "Items"
      ],
      "type": "object"
    },
    "PutInventoryResult": {
      "properties": {},
      "type": "object"
    },
    "PutParameterRequest": {
      "properties": {
        "AllowedPattern": {
          "$ref": "#/definitions/AllowedPattern",
          "description": "A regular expression used to validate the parameter value. For example, for String types with values restricted to numbers, you can specify the following: AllowedPattern=^\\d+$ "
        },
        "Description": {
          "$ref": "#/definitions/ParameterDescription",
          "description": "Information about the parameter that you want to add to the system"
        },
        "KeyId": {
          "$ref": "#/definitions/ParameterKeyId",
          "description": "The KMS Key ID that you want to use to encrypt a parameter when you choose the SecureString data type. If you don't specify a key ID, the system uses the default key associated with your AWS account."
        },
        "Name": {
          "$ref": "#/definitions/PSParameterName",
          "description": "The name of the parameter that you want to add to the system."
        },
        "Overwrite": {
          "$ref": "#/definitions/Boolean",
          "description": "Overwrite an existing parameter. If not specified, will default to \"false\"."
        },
        "Type": {
          "$ref": "#/definitions/ParameterType",
          "description": "The type of parameter that you want to add to the system."
        },
        "Value": {
          "$ref": "#/definitions/PSParameterValue",
          "description": "The parameter value that you want to add to the system."
        }
      },
      "required": [
        "Name",
        "Value",
        "Type"
      ],
      "type": "object"
    },
    "PutParameterResult": {
      "properties": {},
      "type": "object"
    },
    "RegisterDefaultPatchBaselineRequest": {
      "properties": {
        "BaselineId": {
          "$ref": "#/definitions/BaselineId",
          "description": "The ID of the patch baseline that should be the default patch baseline."
        }
      },
      "required": [
        "BaselineId"
      ],
      "type": "object"
    },
    "RegisterDefaultPatchBaselineResult": {
      "properties": {
        "BaselineId": {
          "$ref": "#/definitions/BaselineId",
          "description": "The ID of the default patch baseline."
        }
      },
      "type": "object"
    },
    "RegisterPatchBaselineForPatchGroupRequest": {
      "properties": {
        "BaselineId": {
          "$ref": "#/definitions/BaselineId",
          "description": "The ID of the patch baseline to register the patch group with."
        },
        "PatchGroup": {
          "$ref": "#/definitions/PatchGroup",
          "description": "The name of the patch group that should be registered with the patch baseline."
        }
      },
      "required": [
        "BaselineId",
        "PatchGroup"
      ],
      "type": "object"
    },
    "RegisterPatchBaselineForPatchGroupResult": {
      "properties": {
        "BaselineId": {
          "$ref": "#/definitions/BaselineId",
          "description": "The ID of the patch baseline the patch group was registered with."
        },
        "PatchGroup": {
          "$ref": "#/definitions/PatchGroup",
          "description": "The name of the patch group registered with the patch baseline."
        }
      },
      "type": "object"
    },
    "RegisterTargetWithMaintenanceWindowRequest": {
      "properties": {
        "ClientToken": {
          "$ref": "#/definitions/ClientToken",
          "description": "User-provided idempotency token."
        },
        "Description": {
          "$ref": "#/definitions/MaintenanceWindowDescription",
          "description": "An optional description for the target."
        },
        "Name": {
          "$ref": "#/definitions/MaintenanceWindowName",
          "description": "An optional name for the target."
        },
        "OwnerInformation": {
          "$ref": "#/definitions/OwnerInformation",
          "description": "User-provided value that will be included in any CloudWatch events raised while running tasks for these targets in this Maintenance Window."
        },
        "ResourceType": {
          "$ref": "#/definitions/MaintenanceWindowResourceType",
          "description": "The type of target being registered with the Maintenance Window."
        },
        "Targets": {
          "$ref": "#/definitions/Targets",
          "description": "The targets (either instances or tags). Instances are specified using Key=instanceids,Values=&lt;instanceid1&gt;,&lt;instanceid2&gt;. Tags are specified using Key=&lt;tag name&gt;,Values=&lt;tag value&gt;."
        },
        "WindowId": {
          "$ref": "#/definitions/MaintenanceWindowId",
          "description": "The ID of the Maintenance Window the target should be registered with."
        }
      },
      "required": [
        "WindowId",
        "ResourceType",
        "Targets"
      ],
      "type": "object"
    },
    "RegisterTargetWithMaintenanceWindowResult": {
      "properties": {
        "WindowTargetId": {
          "$ref": "#/definitions/MaintenanceWindowTargetId",
          "description": "The ID of the target definition in this Maintenance Window."
        }
      },
      "type": "object"
    },
    "RegisterTaskWithMaintenanceWindowRequest": {
      "properties": {
        "ClientToken": {
          "$ref": "#/definitions/ClientToken",
          "description": "User-provided idempotency token."
        },
        "Description": {
          "$ref": "#/definitions/MaintenanceWindowDescription",
          "description": "An optional description for the task."
        },
        "LoggingInfo": {
          "$ref": "#/definitions/LoggingInfo",
          "description": "A structure containing information about an Amazon S3 bucket to write instance-level logs to. "
        },
        "MaxConcurrency": {
          "$ref": "#/definitions/MaxConcurrency",
          "description": "The maximum number of targets this task can be run for in parallel."
        },
        "MaxErrors": {
          "$ref": "#/definitions/MaxErrors",
          "description": "The maximum number of errors allowed before this task stops being scheduled."
        },
        "Name": {
          "$ref": "#/definitions/MaintenanceWindowName",
          "description": "An optional name for the task."
        },
        "Priority": {
          "$ref": "#/definitions/MaintenanceWindowTaskPriority",
          "description": "The priority of the task in the Maintenance Window, the lower the number the higher the priority. Tasks in a Maintenance Window are scheduled in priority order with tasks that have the same priority scheduled in parallel."
        },
        "ServiceRoleArn": {
          "$ref": "#/definitions/ServiceRole",
          "description": "The role that should be assumed when executing the task."
        },
        "Targets": {
          "$ref": "#/definitions/Targets",
          "description": "The targets (either instances or tags). Instances are specified using Key=instanceids,Values=&lt;instanceid1&gt;,&lt;instanceid2&gt;. Tags are specified using Key=&lt;tag name&gt;,Values=&lt;tag value&gt;."
        },
        "TaskArn": {
          "$ref": "#/definitions/MaintenanceWindowTaskArn",
          "description": "The ARN of the task to execute "
        },
        "TaskInvocationParameters": {
          "$ref": "#/definitions/MaintenanceWindowTaskInvocationParameters",
          "description": "The parameters that the task should use during execution. Populate only the fields that match the task type. All other fields should be empty. "
        },
        "TaskParameters": {
          "$ref": "#/definitions/MaintenanceWindowTaskParameters",
          "description": "The parameters that should be passed to the task when it is executed."
        },
        "TaskType": {
          "$ref": "#/definitions/MaintenanceWindowTaskType",
          "description": "The type of task being registered."
        },
        "WindowId": {
          "$ref": "#/definitions/MaintenanceWindowId",
          "description": "The id of the Maintenance Window the task should be added to."
        }
      },
      "required": [
        "WindowId",
        "Targets",
        "TaskArn",
        "ServiceRoleArn",
        "TaskType",
        "MaxConcurrency",
        "MaxErrors"
      ],
      "type": "object"
    },
    "RegisterTaskWithMaintenanceWindowResult": {
      "properties": {
        "WindowTaskId": {
          "$ref": "#/definitions/MaintenanceWindowTaskId",
          "description": "The id of the task in the Maintenance Window."
        }
      },
      "type": "object"
    },
    "RegistrationLimit": {
      "maximum": 1000,
      "minimum": 1,
      "type": "integer"
    },
    "RegistrationsCount": {
      "maximum": 1000,
      "minimum": 1,
      "type": "integer"
    },
    "RemoveTagsFromResourceRequest": {
      "properties": {
        "ResourceId": {
          "$ref": "#/definitions/ResourceId",
          "description": "The resource ID for which you want to remove tags."
        },
        "ResourceType": {
          "$ref": "#/definitions/ResourceTypeForTagging",
          "description": "The type of resource of which you want to remove a tag."
        },
        "TagKeys": {
          "$ref": "#/definitions/KeyList",
          "description": "Tag keys that you want to remove from the specified resource."
        }
      },
      "required": [
        "ResourceType",
        "ResourceId",
        "TagKeys"
      ],
      "type": "object"
    },
    "RemoveTagsFromResourceResult": {
      "properties": {},
      "type": "object"
    },
    "ResourceComplianceSummaryItem": {
      "description": "Compliance summary information for a specific resource. ",
      "properties": {
        "ComplianceType": {
          "$ref": "#/definitions/ComplianceTypeName",
          "description": "The compliance type."
        },
        "CompliantSummary": {
          "$ref": "#/definitions/CompliantSummary",
          "description": "A list of items that are compliant for the resource."
        },
        "ExecutionSummary": {
          "$ref": "#/definitions/ComplianceExecutionSummary",
          "description": "Information about the execution."
        },
        "NonCompliantSummary": {
          "$ref": "#/definitions/NonCompliantSummary",
          "description": "A list of items that aren't compliant for the resource."
        },
        "OverallSeverity": {
          "$ref": "#/definitions/ComplianceSeverity",
          "description": "The highest severity item found for the resource. The resource is compliant for this item."
        },
        "ResourceId": {
          "$ref": "#/definitions/ComplianceResourceId",
          "description": "The resource ID."
        },
        "ResourceType": {
          "$ref": "#/definitions/ComplianceResourceType",
          "description": "The resource type."
        },
        "Status": {
          "$ref": "#/definitions/ComplianceStatus",
          "description": "The compliance status for the resource."
        }
      },
      "type": "object"
    },
    "ResourceComplianceSummaryItemList": {
      "items": {
        "$ref": "#/definitions/ResourceComplianceSummaryItem"
      },
      "type": "array"
    },
    "ResourceDataSyncAWSKMSKeyARN": {
      "maxLength": 512,
      "minLength": 1,
      "pattern": "arn:.*",
      "type": "string"
    },
    "ResourceDataSyncAlreadyExistsException": {
      "description": "A sync configuration with the same name already exists.",
      "properties": {
        "SyncName": {
          "$ref": "#/definitions/ResourceDataSyncName"
        }
      },
      "type": "object"
    },
    "ResourceDataSyncCountExceededException": {
      "description": "You have exceeded the allowed maximum sync configurations.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "ResourceDataSyncCreatedTime": {
      "format": "date-time",
      "type": "string"
    },
    "ResourceDataSyncInvalidConfigurationException": {
      "description": "The specified sync configuration is invalid.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "ResourceDataSyncItem": {
      "description": "Information about a Resource Data Sync configuration, including its current status and last successful sync.",
      "properties": {
        "LastStatus": {
          "$ref": "#/definitions/LastResourceDataSyncStatus",
          "description": "The status reported by the last sync."
        },
        "LastSuccessfulSyncTime": {
          "$ref": "#/definitions/LastSuccessfulResourceDataSyncTime",
          "description": "The last time the sync operations returned a status of <code>SUCCESSFUL</code> (UTC)."
        },
        "LastSyncTime": {
          "$ref": "#/definitions/LastResourceDataSyncTime",
          "description": "The last time the configuration attempted to sync (UTC)."
        },
        "S3Destination": {
          "$ref": "#/definitions/ResourceDataSyncS3Destination",
          "description": "Configuration information for the target Amazon S3 bucket."
        },
        "SyncCreatedTime": {
          "$ref": "#/definitions/ResourceDataSyncCreatedTime",
          "description": "The date and time the configuration was created (UTC)."
        },
        "SyncName": {
          "$ref": "#/definitions/ResourceDataSyncName",
          "description": "The name of the Resource Data Sync."
        }
      },
      "type": "object"
    },
    "ResourceDataSyncItemList": {
      "items": {
        "$ref": "#/definitions/ResourceDataSyncItem"
      },
      "type": "array"
    },
    "ResourceDataSyncName": {
      "maxLength": 64,
      "minLength": 1,
      "type": "string"
    },
    "ResourceDataSyncNotFoundException": {
      "description": "The specified sync name was not found.",
      "properties": {
        "SyncName": {
          "$ref": "#/definitions/ResourceDataSyncName"
        }
      },
      "type": "object"
    },
    "ResourceDataSyncS3BucketName": {
      "maxLength": 2048,
      "minLength": 1,
      "type": "string"
    },
    "ResourceDataSyncS3Destination": {
      "description": "Information about the target Amazon S3 bucket for the Resource Data Sync.",
      "properties": {
        "AWSKMSKeyARN": {
          "$ref": "#/definitions/ResourceDataSyncAWSKMSKeyARN",
          "description": "The ARN of an encryption key for a destination in Amazon S3. Must belong to the same region as the destination Amazon S3 bucket."
        },
        "BucketName": {
          "$ref": "#/definitions/ResourceDataSyncS3BucketName",
          "description": "The name of the Amazon S3 bucket where the aggregated data is stored."
        },
        "Prefix": {
          "$ref": "#/definitions/ResourceDataSyncS3Prefix",
          "description": "An Amazon S3 prefix for the bucket."
        },
        "Region": {
          "$ref": "#/definitions/ResourceDataSyncS3Region",
          "description": "The AWS Region with the Amazon S3 bucket targeted by the Resource Data Sync."
        },
        "SyncFormat": {
          "$ref": "#/definitions/ResourceDataSyncS3Format",
          "description": "A supported sync format. The following format is currently supported: JsonSerDe"
        }
      },
      "required": [
        "BucketName",
        "SyncFormat",
        "Region"
      ],
      "type": "object"
    },
    "ResourceDataSyncS3Format": {
      "enum": [
        "JsonSerDe"
      ],
      "type": "string"
    },
    "ResourceDataSyncS3Prefix": {
      "maxLength": 256,
      "minLength": 1,
      "type": "string"
    },
    "ResourceDataSyncS3Region": {
      "maxLength": 64,
      "minLength": 1,
      "type": "string"
    },
    "ResourceId": {
      "type": "string"
    },
    "ResourceInUseException": {
      "description": "Error returned if an attempt is made to delete a patch baseline that is registered for a patch group.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "ResourceLimitExceededException": {
      "description": "Error returned when the caller has exceeded the default resource limits (e.g. too many Maintenance Windows have been created).",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "ResourceType": {
      "enum": [
        "ManagedInstance",
        "Document",
        "EC2Instance"
      ],
      "type": "string"
    },
    "ResourceTypeForTagging": {
      "enum": [
        "Document",
        "ManagedInstance",
        "MaintenanceWindow",
        "Parameter",
        "PatchBaseline"
      ],
      "type": "string"
    },
    "ResponseCode": {
      "type": "integer"
    },
    "ResultAttribute": {
      "description": "The inventory item result attribute.",
      "properties": {
        "TypeName": {
          "$ref": "#/definitions/InventoryItemTypeName",
          "description": "Name of the inventory item type. Valid value: AWS:InstanceInformation. Default Value: AWS:InstanceInformation."
        }
      },
      "required": [
        "TypeName"
      ],
      "type": "object"
    },
    "ResultAttributeList": {
      "items": {
        "$ref": "#/definitions/ResultAttribute"
      },
      "maxItems": 1,
      "minItems": 1,
      "type": "array"
    },
    "S3BucketName": {
      "maxLength": 63,
      "minLength": 3,
      "type": "string"
    },
    "S3KeyPrefix": {
      "maxLength": 500,
      "type": "string"
    },
    "S3OutputLocation": {
      "description": "An Amazon S3 bucket where you want to store the results of this request.",
      "properties": {
        "OutputS3BucketName": {
          "$ref": "#/definitions/S3BucketName",
          "description": "The name of the Amazon S3 bucket."
        },
        "OutputS3KeyPrefix": {
          "$ref": "#/definitions/S3KeyPrefix",
          "description": "The Amazon S3 bucket subfolder."
        },
        "OutputS3Region": {
          "$ref": "#/definitions/S3Region",
          "description": "(Deprecated) You can no longer specify this parameter. The system ignores it. Instead, Systems Manager automatically determines the Amazon S3 bucket region."
        }
      },
      "type": "object"
    },
    "S3OutputUrl": {
      "description": "A URL for the Amazon S3 bucket where you want to store the results of this request.",
      "properties": {
        "OutputUrl": {
          "$ref": "#/definitions/Url",
          "description": "A URL for an Amazon S3 bucket where you want to store the results of this request."
        }
      },
      "type": "object"
    },
    "S3Region": {
      "maxLength": 20,
      "minLength": 3,
      "type": "string"
    },
    "ScheduleExpression": {
      "maxLength": 256,
      "minLength": 1,
      "type": "string"
    },
    "SendAutomationSignalRequest": {
      "properties": {
        "AutomationExecutionId": {
          "$ref": "#/definitions/AutomationExecutionId",
          "description": "The unique identifier for an existing Automation execution that you want to send the signal to."
        },
        "Payload": {
          "$ref": "#/definitions/AutomationParameterMap",
          "description": "The data sent with the signal. The data schema depends on the type of signal used in the request. "
        },
        "SignalType": {
          "$ref": "#/definitions/SignalType",
          "description": "The type of signal. Valid signal types include the following: Approve and Reject "
        }
      },
      "required": [
        "AutomationExecutionId",
        "SignalType"
      ],
      "type": "object"
    },
    "SendAutomationSignalResult": {
      "properties": {},
      "type": "object"
    },
    "SendCommandRequest": {
      "properties": {
        "Comment": {
          "$ref": "#/definitions/Comment",
          "description": "User-specified information about the command, such as a brief description of what the command should do."
        },
        "DocumentHash": {
          "$ref": "#/definitions/DocumentHash",
          "description": "<p>The Sha256 or Sha1 hash created by the system when the document was created. </p> <note> <p>Sha1 hashes have been deprecated.</p> </note>"
        },
        "DocumentHashType": {
          "$ref": "#/definitions/DocumentHashType",
          "description": "<p>Sha256 or Sha1.</p> <note> <p>Sha1 hashes have been deprecated.</p> </note>"
        },
        "DocumentName": {
          "$ref": "#/definitions/DocumentARN",
          "description": "Required. The name of the Systems Manager document to execute. This can be a public document or a custom document."
        },
        "InstanceIds": {
          "$ref": "#/definitions/InstanceIdList",
          "description": "The instance IDs where the command should execute. You can specify a maximum of 50 IDs. If you prefer not to list individual instance IDs, you can instead send commands to a fleet of instances using the Targets parameter, which accepts EC2 tags. For more information about how to use Targets, see <a href=\"http://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html\">Sending Commands to a Fleet</a>."
        },
        "MaxConcurrency": {
          "$ref": "#/definitions/MaxConcurrency",
          "description": "(Optional) The maximum number of instances that are allowed to execute the command at the same time. You can specify a number such as 10 or a percentage such as 10%. The default value is 50. For more information about how to use MaxConcurrency, see <a href=\"http://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-velocity.html\">Using Concurrency Controls</a>."
        },
        "MaxErrors": {
          "$ref": "#/definitions/MaxErrors",
          "description": "The maximum number of errors allowed without the command failing. When the command fails one more time beyond the value of MaxErrors, the systems stops sending the command to additional targets. You can specify a number like 10 or a percentage like 10%. The default value is 50. For more information about how to use MaxErrors, see <a href=\"http://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-maxerrors.html\">Using Error Controls</a>."
        },
        "NotificationConfig": {
          "$ref": "#/definitions/NotificationConfig",
          "description": "Configurations for sending notifications."
        },
        "OutputS3BucketName": {
          "$ref": "#/definitions/S3BucketName",
          "description": "The name of the S3 bucket where command execution responses should be stored."
        },
        "OutputS3KeyPrefix": {
          "$ref": "#/definitions/S3KeyPrefix",
          "description": "The directory structure within the S3 bucket where the responses should be stored."
        },
        "OutputS3Region": {
          "$ref": "#/definitions/S3Region",
          "description": "(Deprecated) You can no longer specify this parameter. The system ignores it. Instead, Systems Manager automatically determines the Amazon S3 bucket region."
        },
        "Parameters": {
          "$ref": "#/definitions/Parameters",
          "description": "The required and optional parameters specified in the document being executed."
        },
        "ServiceRoleArn": {
          "$ref": "#/definitions/ServiceRole",
          "description": "The IAM role that Systems Manager uses to send notifications. "
        },
        "Targets": {
          "$ref": "#/definitions/Targets",
          "description": "(Optional) An array of search criteria that targets instances using a Key,Value combination that you specify. Targets is required if you don't provide one or more instance IDs in the call. For more information about how to use Targets, see <a href=\"http://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html\">Sending Commands to a Fleet</a>."
        },
        "TimeoutSeconds": {
          "$ref": "#/definitions/TimeoutSeconds",
          "description": "If this time is reached and the command has not already started executing, it will not execute."
        }
      },
      "required": [
        "DocumentName"
      ],
      "type": "object"
    },
    "SendCommandResult": {
      "properties": {
        "Command": {
          "$ref": "#/definitions/Command",
          "description": "The request as it was received by Systems Manager. Also provides the command ID which can be used future references to this request."
        }
      },
      "type": "object"
    },
    "ServiceRole": {
      "type": "string"
    },
    "SeveritySummary": {
      "description": "The number of managed instances found for each patch severity level defined in the request filter.",
      "properties": {
        "CriticalCount": {
          "$ref": "#/definitions/ComplianceSummaryCount",
          "description": "The total number of resources or compliance items that have a severity level of critical. Critical severity is determined by the organization that published the compliance items."
        },
        "HighCount": {
          "$ref": "#/definitions/ComplianceSummaryCount",
          "description": "The total number of resources or compliance items that have a severity level of high. High severity is determined by the organization that published the compliance items."
        },
        "InformationalCount": {
          "$ref": "#/definitions/ComplianceSummaryCount",
          "description": "The total number of resources or compliance items that have a severity level of informational. Informational severity is determined by the organization that published the compliance items."
        },
        "LowCount": {
          "$ref": "#/definitions/ComplianceSummaryCount",
          "description": "The total number of resources or compliance items that have a severity level of low. Low severity is determined by the organization that published the compliance items."
        },
        "MediumCount": {
          "$ref": "#/definitions/ComplianceSummaryCount",
          "description": "The total number of resources or compliance items that have a severity level of medium. Medium severity is determined by the organization that published the compliance items."
        },
        "UnspecifiedCount": {
          "$ref": "#/definitions/ComplianceSummaryCount",
          "description": "The total number of resources or compliance items that have a severity level of unspecified. Unspecified severity is determined by the organization that published the compliance items."
        }
      },
      "type": "object"
    },
    "SignalType": {
      "enum": [
        "Approve",
        "Reject"
      ],
      "type": "string"
    },
    "SnapshotDownloadUrl": {
      "type": "string"
    },
    "SnapshotId": {
      "maxLength": 36,
      "minLength": 36,
      "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
      "type": "string"
    },
    "StandardErrorContent": {
      "maxLength": 8000,
      "type": "string"
    },
    "StandardOutputContent": {
      "maxLength": 24000,
      "type": "string"
    },
    "StartAutomationExecutionRequest": {
      "properties": {
        "ClientToken": {
          "$ref": "#/definitions/IdempotencyToken",
          "description": "User-provided idempotency token. The token must be unique, is case insensitive, enforces the UUID format, and can't be reused."
        },
        "DocumentName": {
          "$ref": "#/definitions/DocumentARN",
          "description": "The name of the Automation document to use for this execution."
        },
        "DocumentVersion": {
          "$ref": "#/definitions/DocumentVersion",
          "description": "The version of the Automation document to use for this execution."
        },
        "Parameters": {
          "$ref": "#/definitions/AutomationParameterMap",
          "description": "A key-value map of execution parameters, which match the declared parameters in the Automation document."
        }
      },
      "required": [
        "DocumentName"
      ],
      "type": "object"
    },
    "StartAutomationExecutionResult": {
      "properties": {
        "AutomationExecutionId": {
          "$ref": "#/definitions/AutomationExecutionId",
          "description": "The unique ID of a newly scheduled automation execution."
        }
      },
      "type": "object"
    },
    "StatusAdditionalInfo": {
      "maxLength": 1024,
      "type": "string"
    },
    "StatusDetails": {
      "maxLength": 100,
      "minLength": 0,
      "type": "string"
    },
    "StatusMessage": {
      "maxLength": 1024,
      "minLength": 1,
      "type": "string"
    },
    "StatusName": {
      "type": "string"
    },
    "StatusUnchanged": {
      "description": "The updated status is the same as the current status.",
      "properties": {},
      "type": "object"
    },
    "StepExecution": {
      "description": "Detailed information about an the execution state of an Automation step.",
      "properties": {
        "Action": {
          "$ref": "#/definitions/AutomationActionName",
          "description": "The action this step performs. The action determines the behavior of the step."
        },
        "ExecutionEndTime": {
          "$ref": "#/definitions/DateTime",
          "description": "If a step has finished execution, this contains the time the execution ended. If the step has not yet concluded, this field is not populated."
        },
        "ExecutionStartTime": {
          "$ref": "#/definitions/DateTime",
          "description": "If a step has begun execution, this contains the time the step started. If the step is in Pending status, this field is not populated."
        },
        "FailureDetails": {
          "$ref": "#/definitions/FailureDetails",
          "description": "Information about the Automation failure."
        },
        "FailureMessage": {
          "$ref": "#/definitions/String",
          "description": "If a step failed, this message explains why the execution failed."
        },
        "Inputs": {
          "$ref": "#/definitions/NormalStringMap",
          "description": "Fully-resolved values passed into the step before execution."
        },
        "Outputs": {
          "$ref": "#/definitions/AutomationParameterMap",
          "description": "Returned values from the execution of the step."
        },
        "Response": {
          "$ref": "#/definitions/String",
          "description": "A message associated with the response code for an execution."
        },
        "ResponseCode": {
          "$ref": "#/definitions/String",
          "description": "The response code returned by the execution of the step."
        },
        "StepName": {
          "$ref": "#/definitions/String",
          "description": "The name of this execution step."
        },
        "StepStatus": {
          "$ref": "#/definitions/AutomationExecutionStatus",
          "description": "The execution status for this step. Valid values include: Pending, InProgress, Success, Cancelled, Failed, and TimedOut."
        }
      },
      "type": "object"
    },
    "StepExecutionList": {
      "items": {
        "$ref": "#/definitions/StepExecution"
      },
      "maxItems": 100,
      "minItems": 0,
      "type": "array"
    },
    "StopAutomationExecutionRequest": {
      "properties": {
        "AutomationExecutionId": {
          "$ref": "#/definitions/AutomationExecutionId",
          "description": "The execution ID of the Automation to stop."
        }
      },
      "required": [
        "AutomationExecutionId"
      ],
      "type": "object"
    },
    "StopAutomationExecutionResult": {
      "properties": {},
      "type": "object"
    },
    "String": {
      "type": "string"
    },
    "StringDateTime": {
      "pattern": "^([\\-]?\\d{4}(?!\\d{2}\\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))([T\\s]((([01]\\d|2[0-3])((:?)[0-5]\\d)?|24\\:?00)([\\.,]\\d(?!:))?)?(\\17[0-5]\\d([\\.,]\\d)?)?([zZ]|([\\-])([01]\\d|2[0-3]):?([0-5]\\d)?)?)?)?$",
      "type": "string"
    },
    "StringList": {
      "items": {
        "$ref": "#/definitions/String"
      },
      "type": "array"
    },
    "SubTypeCountLimitExceededException": {
      "description": "The sub-type count exceeded the limit for the inventory type.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "Tag": {
      "description": "Metadata that you assign to your AWS resources. Tags enable you to categorize your resources in different ways, for example, by purpose, owner, or environment. In Systems Manager, you can apply tags to documents, managed instances, Maintenance Windows, Parameter Store parameters, and patch baselines.",
      "properties": {
        "Key": {
          "$ref": "#/definitions/TagKey",
          "description": "The name of the tag."
        },
        "Value": {
          "$ref": "#/definitions/TagValue",
          "description": "The value of the tag."
        }
      },
      "required": [
        "Key",
        "Value"
      ],
      "type": "object"
    },
    "TagKey": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "^\\(\\?!^\\(\\?i\\)aws:\\)\\(\\?=^[\\p\\{L\\}\\p\\{Z\\}\\p\\{N\\}_.:/=\\+\\-@]*$\\).*$",
      "type": "string"
    },
    "TagList": {
      "items": {
        "$ref": "#/definitions/Tag"
      },
      "type": "array"
    },
    "TagValue": {
      "maxLength": 256,
      "minLength": 1,
      "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
      "type": "string"
    },
    "Target": {
      "description": "<p>An array of search criteria that targets instances using a Key,Value combination that you specify. <code>Targets</code> is required if you don't provide one or more instance IDs in the call.</p> <p/>",
      "properties": {
        "Key": {
          "$ref": "#/definitions/TargetKey",
          "description": "User-defined criteria for sending commands that target instances that meet the criteria. Key can be tag:&lt;Amazon EC2 tag&gt; or InstanceIds. For more information about how to send commands that target instances using Key,Value parameters, see <a href=\"http://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html\">Executing a Command Using Systems Manager Run Command</a>."
        },
        "Values": {
          "$ref": "#/definitions/TargetValues",
          "description": "User-defined criteria that maps to Key. For example, if you specified tag:ServerRole, you could specify value:WebServer to execute a command on instances that include Amazon EC2 tags of ServerRole,WebServer. For more information about how to send commands that target instances using Key,Value parameters, see <a href=\"http://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html\">Executing a Command Using Systems Manager Run Command</a>."
        }
      },
      "type": "object"
    },
    "TargetCount": {
      "type": "integer"
    },
    "TargetInUseException": {
      "description": "You specified the <code>Safe</code> option for the DeregisterTargetFromMaintenanceWindow operation, but the target is still referenced in a task.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "TargetKey": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "^[\\p{L}\\p{Z}\\p{N}_.:/=\\-@]*$",
      "type": "string"
    },
    "TargetValue": {
      "type": "string"
    },
    "TargetValues": {
      "items": {
        "$ref": "#/definitions/TargetValue"
      },
      "maxItems": 50,
      "minItems": 0,
      "type": "array"
    },
    "Targets": {
      "items": {
        "$ref": "#/definitions/Target"
      },
      "maxItems": 5,
      "minItems": 0,
      "type": "array"
    },
    "TimeoutSeconds": {
      "maximum": 2592000,
      "minimum": 30,
      "type": "integer"
    },
    "TooManyTagsError": {
      "description": "The Targets parameter includes too many tags. Remove one or more tags and try the command again.",
      "properties": {},
      "type": "object"
    },
    "TooManyUpdates": {
      "description": "There are concurrent updates for a resource that supports one update at a time.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "TotalSizeLimitExceededException": {
      "description": "The size of inventory data has exceeded the total size limit for the resource.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "UnsupportedInventoryItemContextException": {
      "description": "The <code>Context</code> attribute that you specified for the <code>InventoryItem</code> is not allowed for this inventory type. You can only use the <code>Context</code> attribute with inventory types like <code>AWS:ComplianceItem</code>.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        },
        "TypeName": {
          "$ref": "#/definitions/InventoryItemTypeName"
        }
      },
      "type": "object"
    },
    "UnsupportedInventorySchemaVersionException": {
      "description": "Inventory item type schema version has to match supported versions in the service. Check output of GetInventorySchema to see the available schema version for each type.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "UnsupportedOperatingSystem": {
      "description": "The operating systems you specified is not supported, or the operation is not supported for the operating system. Valid operating systems include: Windows, AmazonLinux, RedhatEnterpriseLinux, and Ubuntu.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "UnsupportedParameterType": {
      "description": "The parameter type is not supported.",
      "properties": {
        "message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "UnsupportedPlatformType": {
      "description": "The document does not support the platform type of the given instance ID(s). For example, you sent an document for a Windows instance to a Linux instance.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "UpdateAssociationRequest": {
      "properties": {
        "AssociationId": {
          "$ref": "#/definitions/AssociationId",
          "description": "The ID of the association you want to update. "
        },
        "AssociationName": {
          "$ref": "#/definitions/AssociationName",
          "description": "The name of the association that you want to update."
        },
        "AssociationVersion": {
          "$ref": "#/definitions/AssociationVersion",
          "description": "This parameter is provided for concurrency control purposes. You must specify the latest association version in the service. If you want to ensure that this request succeeds, either specify <code>$LATEST</code>, or omit this parameter."
        },
        "DocumentVersion": {
          "$ref": "#/definitions/DocumentVersion",
          "description": "The document version you want update for the association. "
        },
        "Name": {
          "$ref": "#/definitions/DocumentName",
          "description": "The name of the association document."
        },
        "OutputLocation": {
          "$ref": "#/definitions/InstanceAssociationOutputLocation",
          "description": "An Amazon S3 bucket where you want to store the results of this request."
        },
        "Parameters": {
          "$ref": "#/definitions/Parameters",
          "description": "The parameters you want to update for the association. If you create a parameter using Parameter Store, you can reference the parameter using {{ssm:parameter-name}}"
        },
        "ScheduleExpression": {
          "$ref": "#/definitions/ScheduleExpression",
          "description": "The cron expression used to schedule the association that you want to update."
        },
        "Targets": {
          "$ref": "#/definitions/Targets",
          "description": "The targets of the association."
        }
      },
      "required": [
        "AssociationId"
      ],
      "type": "object"
    },
    "UpdateAssociationResult": {
      "properties": {
        "AssociationDescription": {
          "$ref": "#/definitions/AssociationDescription",
          "description": "The description of the association that was updated."
        }
      },
      "type": "object"
    },
    "UpdateAssociationStatusRequest": {
      "properties": {
        "AssociationStatus": {
          "$ref": "#/definitions/AssociationStatus",
          "description": "The association status."
        },
        "InstanceId": {
          "$ref": "#/definitions/InstanceId",
          "description": "The ID of the instance."
        },
        "Name": {
          "$ref": "#/definitions/DocumentName",
          "description": "The name of the Systems Manager document."
        }
      },
      "required": [
        "Name",
        "InstanceId",
        "AssociationStatus"
      ],
      "type": "object"
    },
    "UpdateAssociationStatusResult": {
      "properties": {
        "AssociationDescription": {
          "$ref": "#/definitions/AssociationDescription",
          "description": "Information about the association."
        }
      },
      "type": "object"
    },
    "UpdateDocumentDefaultVersionRequest": {
      "properties": {
        "DocumentVersion": {
          "$ref": "#/definitions/DocumentVersionNumber",
          "description": "The version of a custom document that you want to set as the default version."
        },
        "Name": {
          "$ref": "#/definitions/DocumentName",
          "description": "The name of a custom document that you want to set as the default version."
        }
      },
      "required": [
        "Name",
        "DocumentVersion"
      ],
      "type": "object"
    },
    "UpdateDocumentDefaultVersionResult": {
      "properties": {
        "Description": {
          "$ref": "#/definitions/DocumentDefaultVersionDescription",
          "description": "The description of a custom document that you want to set as the default version."
        }
      },
      "type": "object"
    },
    "UpdateDocumentRequest": {
      "properties": {
        "Content": {
          "$ref": "#/definitions/DocumentContent",
          "description": "The content in a document that you want to update."
        },
        "DocumentVersion": {
          "$ref": "#/definitions/DocumentVersion",
          "description": "The version of the document that you want to update."
        },
        "Name": {
          "$ref": "#/definitions/DocumentName",
          "description": "The name of the document that you want to update."
        }
      },
      "required": [
        "Content",
        "Name"
      ],
      "type": "object"
    },
    "UpdateDocumentResult": {
      "properties": {
        "DocumentDescription": {
          "$ref": "#/definitions/DocumentDescription",
          "description": "A description of the document that was updated."
        }
      },
      "type": "object"
    },
    "UpdateMaintenanceWindowRequest": {
      "properties": {
        "AllowUnassociatedTargets": {
          "$ref": "#/definitions/MaintenanceWindowAllowUnassociatedTargets",
          "description": "Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets."
        },
        "Cutoff": {
          "$ref": "#/definitions/MaintenanceWindowCutoff",
          "description": "The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution."
        },
        "Description": {
          "$ref": "#/definitions/MaintenanceWindowDescription",
          "description": "An optional description for the update request."
        },
        "Duration": {
          "$ref": "#/definitions/MaintenanceWindowDurationHours",
          "description": "The duration of the Maintenance Window in hours."
        },
        "Enabled": {
          "$ref": "#/definitions/MaintenanceWindowEnabled",
          "description": "Whether the Maintenance Window is enabled."
        },
        "Name": {
          "$ref": "#/definitions/MaintenanceWindowName",
          "description": "The name of the Maintenance Window."
        },
        "Replace": {
          "$ref": "#/definitions/Boolean",
          "description": "If True, then all fields that are required by the CreateMaintenanceWindow action are also required for this API request. Optional fields that are not specified are set to null. "
        },
        "Schedule": {
          "$ref": "#/definitions/MaintenanceWindowSchedule",
          "description": "The schedule of the Maintenance Window in the form of a cron or rate expression."
        },
        "WindowId": {
          "$ref": "#/definitions/MaintenanceWindowId",
          "description": "The ID of the Maintenance Window to update."
        }
      },
      "required": [
        "WindowId"
      ],
      "type": "object"
    },
    "UpdateMaintenanceWindowResult": {
      "properties": {
        "AllowUnassociatedTargets": {
          "$ref": "#/definitions/MaintenanceWindowAllowUnassociatedTargets",
          "description": "Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets."
        },
        "Cutoff": {
          "$ref": "#/definitions/MaintenanceWindowCutoff",
          "description": "The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution."
        },
        "Description": {
          "$ref": "#/definitions/MaintenanceWindowDescription",
          "description": "An optional description of the update."
        },
        "Duration": {
          "$ref": "#/definitions/MaintenanceWindowDurationHours",
          "description": "The duration of the Maintenance Window in hours."
        },
        "Enabled": {
          "$ref": "#/definitions/MaintenanceWindowEnabled",
          "description": "Whether the Maintenance Window is enabled."
        },
        "Name": {
          "$ref": "#/definitions/MaintenanceWindowName",
          "description": "The name of the Maintenance Window."
        },
        "Schedule": {
          "$ref": "#/definitions/MaintenanceWindowSchedule",
          "description": "The schedule of the Maintenance Window in the form of a cron or rate expression."
        },
        "WindowId": {
          "$ref": "#/definitions/MaintenanceWindowId",
          "description": "The ID of the created Maintenance Window."
        }
      },
      "type": "object"
    },
    "UpdateMaintenanceWindowTargetRequest": {
      "properties": {
        "Description": {
          "$ref": "#/definitions/MaintenanceWindowDescription",
          "description": "An optional description for the update."
        },
        "Name": {
          "$ref": "#/definitions/MaintenanceWindowName",
          "description": "A name for the update."
        },
        "OwnerInformation": {
          "$ref": "#/definitions/OwnerInformation",
          "description": "User-provided value that will be included in any CloudWatch events raised while running tasks for these targets in this Maintenance Window."
        },
        "Replace": {
          "$ref": "#/definitions/Boolean",
          "description": "If True, then all fields that are required by the RegisterTargetWithMaintenanceWindow action are also required for this API request. Optional fields that are not specified are set to null."
        },
        "Targets": {
          "$ref": "#/definitions/Targets",
          "description": "The targets to add or replace."
        },
        "WindowId": {
          "$ref": "#/definitions/MaintenanceWindowId",
          "description": "The Maintenance Window ID with which to modify the target."
        },
        "WindowTargetId": {
          "$ref": "#/definitions/MaintenanceWindowTargetId",
          "description": "The target ID to modify."
        }
      },
      "required": [
        "WindowId",
        "WindowTargetId"
      ],
      "type": "object"
    },
    "UpdateMaintenanceWindowTargetResult": {
      "properties": {
        "Description": {
          "$ref": "#/definitions/MaintenanceWindowDescription",
          "description": "The updated description."
        },
        "Name": {
          "$ref": "#/definitions/MaintenanceWindowName",
          "description": "The updated name."
        },
        "OwnerInformation": {
          "$ref": "#/definitions/OwnerInformation",
          "description": "The updated owner."
        },
        "Targets": {
          "$ref": "#/definitions/Targets",
          "description": "The updated targets."
        },
        "WindowId": {
          "$ref": "#/definitions/MaintenanceWindowId",
          "description": "The Maintenance Window ID specified in the update request."
        },
        "WindowTargetId": {
          "$ref": "#/definitions/MaintenanceWindowTargetId",
          "description": "The target ID specified in the update request."
        }
      },
      "type": "object"
    },
    "UpdateMaintenanceWindowTaskRequest": {
      "properties": {
        "Description": {
          "$ref": "#/definitions/MaintenanceWindowDescription",
          "description": "The new task description to specify."
        },
        "LoggingInfo": {
          "$ref": "#/definitions/LoggingInfo",
          "description": "The new logging location in Amazon S3 to specify."
        },
        "MaxConcurrency": {
          "$ref": "#/definitions/MaxConcurrency",
          "description": "The new <code>MaxConcurrency</code> value you want to specify. <code>MaxConcurrency</code> is the number of targets that are allowed to run this task in parallel."
        },
        "MaxErrors": {
          "$ref": "#/definitions/MaxErrors",
          "description": "The new <code>MaxErrors</code> value to specify. <code>MaxErrors</code> is the maximum number of errors that are allowed before the task stops being scheduled."
        },
        "Name": {
          "$ref": "#/definitions/MaintenanceWindowName",
          "description": "The new task name to specify."
        },
        "Priority": {
          "$ref": "#/definitions/MaintenanceWindowTaskPriority",
          "description": "The new task priority to specify. The lower the number, the higher the priority. Tasks that have the same priority are scheduled in parallel."
        },
        "Replace": {
          "$ref": "#/definitions/Boolean",
          "description": "If True, then all fields that are required by the RegisterTaskWithMaintenanceWndow action are also required for this API request. Optional fields that are not specified are set to null."
        },
        "ServiceRoleArn": {
          "$ref": "#/definitions/ServiceRole",
          "description": "The IAM service role ARN to modify. The system assumes this role during task execution. "
        },
        "Targets": {
          "$ref": "#/definitions/Targets",
          "description": "The targets (either instances or tags) to modify. Instances are specified using Key=instanceids,Values=instanceID_1,instanceID_2. Tags are specified using Key=tag_name,Values=tag_value. "
        },
        "TaskArn": {
          "$ref": "#/definitions/MaintenanceWindowTaskArn",
          "description": "The task ARN to modify."
        },
        "TaskInvocationParameters": {
          "$ref": "#/definitions/MaintenanceWindowTaskInvocationParameters",
          "description": "The parameters that the task should use during execution. Populate only the fields that match the task type. All other fields should be empty."
        },
        "TaskParameters": {
          "$ref": "#/definitions/MaintenanceWindowTaskParameters",
          "description": "<p>The parameters to modify. The map has the following format:</p> <p>Key: string, between 1 and 255 characters</p> <p>Value: an array of strings, each string is between 1 and 255 characters</p>"
        },
        "WindowId": {
          "$ref": "#/definitions/MaintenanceWindowId",
          "description": "The Maintenance Window ID that contains the task to modify."
        },
        "WindowTaskId": {
          "$ref": "#/definitions/MaintenanceWindowTaskId",
          "description": "The task ID to modify."
        }
      },
      "required": [
        "WindowId",
        "WindowTaskId"
      ],
      "type": "object"
    },
    "UpdateMaintenanceWindowTaskResult": {
      "properties": {
        "Description": {
          "$ref": "#/definitions/MaintenanceWindowDescription",
          "description": "The updated task description."
        },
        "LoggingInfo": {
          "$ref": "#/definitions/LoggingInfo",
          "description": "The updated logging information in Amazon S3."
        },
        "MaxConcurrency": {
          "$ref": "#/definitions/MaxConcurrency",
          "description": "The updated MaxConcurrency value."
        },
        "MaxErrors": {
          "$ref": "#/definitions/MaxErrors",
          "description": "The updated MaxErrors value."
        },
        "Name": {
          "$ref": "#/definitions/MaintenanceWindowName",
          "description": "The updated task name."
        },
        "Priority": {
          "$ref": "#/definitions/MaintenanceWindowTaskPriority",
          "description": "The updated priority value."
        },
        "ServiceRoleArn": {
          "$ref": "#/definitions/ServiceRole",
          "description": "The updated service role ARN value."
        },
        "Targets": {
          "$ref": "#/definitions/Targets",
          "description": "The updated target values."
        },
        "TaskArn": {
          "$ref": "#/definitions/MaintenanceWindowTaskArn",
          "description": "The updated task ARN value."
        },
        "TaskInvocationParameters": {
          "$ref": "#/definitions/MaintenanceWindowTaskInvocationParameters",
          "description": "The updated parameter values."
        },
        "TaskParameters": {
          "$ref": "#/definitions/MaintenanceWindowTaskParameters",
          "description": "The updated parameter values."
        },
        "WindowId": {
          "$ref": "#/definitions/MaintenanceWindowId",
          "description": "The ID of the Maintenance Window that was updated."
        },
        "WindowTaskId": {
          "$ref": "#/definitions/MaintenanceWindowTaskId",
          "description": "The task ID of the Maintenance Window that was updated."
        }
      },
      "type": "object"
    },
    "UpdateManagedInstanceRoleRequest": {
      "properties": {
        "IamRole": {
          "$ref": "#/definitions/IamRole",
          "description": "The IAM role you want to assign or change."
        },
        "InstanceId": {
          "$ref": "#/definitions/ManagedInstanceId",
          "description": "The ID of the managed instance where you want to update the role."
        }
      },
      "required": [
        "InstanceId",
        "IamRole"
      ],
      "type": "object"
    },
    "UpdateManagedInstanceRoleResult": {
      "properties": {},
      "type": "object"
    },
    "UpdatePatchBaselineRequest": {
      "properties": {
        "ApprovalRules": {
          "$ref": "#/definitions/PatchRuleGroup",
          "description": "A set of rules used to include patches in the baseline."
        },
        "ApprovedPatches": {
          "$ref": "#/definitions/PatchIdList",
          "description": "A list of explicitly approved patches for the baseline."
        },
        "ApprovedPatchesComplianceLevel": {
          "$ref": "#/definitions/PatchComplianceLevel",
          "description": "Assigns a new compliance severity level to an existing patch baseline."
        },
        "BaselineId": {
          "$ref": "#/definitions/BaselineId",
          "description": "The ID of the patch baseline to update."
        },
        "Description": {
          "$ref": "#/definitions/BaselineDescription",
          "description": "A description of the patch baseline."
        },
        "GlobalFilters": {
          "$ref": "#/definitions/PatchFilterGroup",
          "description": "A set of global filters used to exclude patches from the baseline."
        },
        "Name": {
          "$ref": "#/definitions/BaselineName",
          "description": "The name of the patch baseline."
        },
        "RejectedPatches": {
          "$ref": "#/definitions/PatchIdList",
          "description": "A list of explicitly rejected patches for the baseline."
        }
      },
      "required": [
        "BaselineId"
      ],
      "type": "object"
    },
    "UpdatePatchBaselineResult": {
      "properties": {
        "ApprovalRules": {
          "$ref": "#/definitions/PatchRuleGroup",
          "description": "A set of rules used to include patches in the baseline."
        },
        "ApprovedPatches": {
          "$ref": "#/definitions/PatchIdList",
          "description": "A list of explicitly approved patches for the baseline."
        },
        "ApprovedPatchesComplianceLevel": {
          "$ref": "#/definitions/PatchComplianceLevel",
          "description": "The compliance severity level assigned to the patch baseline after the update completed."
        },
        "BaselineId": {
          "$ref": "#/definitions/BaselineId",
          "description": "The ID of the deleted patch baseline."
        },
        "CreatedDate": {
          "$ref": "#/definitions/DateTime",
          "description": "The date when the patch baseline was created."
        },
        "Description": {
          "$ref": "#/definitions/BaselineDescription",
          "description": "A description of the Patch Baseline."
        },
        "GlobalFilters": {
          "$ref": "#/definitions/PatchFilterGroup",
          "description": "A set of global filters used to exclude patches from the baseline."
        },
        "ModifiedDate": {
          "$ref": "#/definitions/DateTime",
          "description": "The date when the patch baseline was last modified."
        },
        "Name": {
          "$ref": "#/definitions/BaselineName",
          "description": "The name of the patch baseline."
        },
        "OperatingSystem": {
          "$ref": "#/definitions/OperatingSystem",
          "description": "The operating system rule used by the updated patch baseline."
        },
        "RejectedPatches": {
          "$ref": "#/definitions/PatchIdList",
          "description": "A list of explicitly rejected patches for the baseline."
        }
      },
      "type": "object"
    },
    "Url": {
      "type": "string"
    },
    "Version": {
      "pattern": "^[0-9]{1,6}(\\.[0-9]{1,6}){2,3}$",
      "type": "string"
    }
  }
}

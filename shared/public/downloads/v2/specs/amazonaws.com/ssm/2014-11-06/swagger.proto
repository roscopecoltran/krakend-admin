syntax = "proto3";

import "google/api/annotations.proto";

package amazonsimplesystemsmanager(ssm);

message PostRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AddTagsToResourceRequest body = 10;
}

message Post#CancelCommandRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CancelCommandRequest body = 10;
}

message Post#CreateActivationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateActivationRequest body = 10;
}

message Post#CreateAssociationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateAssociationRequest body = 10;
}

message Post#CreateAssociationBatchRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateAssociationBatchRequest body = 10;
}

message Post#CreateDocumentRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateDocumentRequest body = 10;
}

message Post#CreateMaintenanceWindowRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateMaintenanceWindowRequest body = 10;
}

message Post#CreatePatchBaselineRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreatePatchBaselineRequest body = 10;
}

message Post#CreateResourceDataSyncRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateResourceDataSyncRequest body = 10;
}

message Post#DeleteActivationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteActivationRequest body = 10;
}

message Post#DeleteAssociationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteAssociationRequest body = 10;
}

message Post#DeleteDocumentRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteDocumentRequest body = 10;
}

message Post#DeleteMaintenanceWindowRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteMaintenanceWindowRequest body = 10;
}

message Post#DeleteParameterRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteParameterRequest body = 10;
}

message Post#DeleteParametersRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteParametersRequest body = 10;
}

message Post#DeletePatchBaselineRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeletePatchBaselineRequest body = 10;
}

message Post#DeleteResourceDataSyncRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteResourceDataSyncRequest body = 10;
}

message Post#DeregisterManagedInstanceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeregisterManagedInstanceRequest body = 10;
}

message Post#DeregisterPatchBaselineForPatchGroupRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeregisterPatchBaselineForPatchGroupRequest body = 10;
}

message Post#DeregisterTargetFromMaintenanceWindowRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeregisterTargetFromMaintenanceWindowRequest body = 10;
}

message Post#DeregisterTaskFromMaintenanceWindowRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeregisterTaskFromMaintenanceWindowRequest body = 10;
}

message Post#DescribeActivationsRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    DescribeActivationsRequest body = 12;
}

message Post#DescribeAssociationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeAssociationRequest body = 10;
}

message Post#DescribeAutomationExecutionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeAutomationExecutionsRequest body = 10;
}

message Post#DescribeAvailablePatchesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeAvailablePatchesRequest body = 10;
}

message Post#DescribeDocumentRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeDocumentRequest body = 10;
}

message Post#DescribeDocumentPermissionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeDocumentPermissionRequest body = 10;
}

message Post#DescribeEffectiveInstanceAssociationsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeEffectiveInstanceAssociationsRequest body = 10;
}

message Post#DescribeEffectivePatchesForPatchBaselineRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeEffectivePatchesForPatchBaselineRequest body = 10;
}

message Post#DescribeInstanceAssociationsStatusRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeInstanceAssociationsStatusRequest body = 10;
}

message Post#DescribeInstanceInformationRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    DescribeInstanceInformationRequest body = 12;
}

message Post#DescribeInstancePatchStatesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeInstancePatchStatesRequest body = 10;
}

message Post#DescribeInstancePatchStatesForPatchGroupRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeInstancePatchStatesForPatchGroupRequest body = 10;
}

message Post#DescribeInstancePatchesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeInstancePatchesRequest body = 10;
}

message Post#DescribeMaintenanceWindowExecutionTaskInvocationsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeMaintenanceWindowExecutionTaskInvocationsRequest body = 10;
}

message Post#DescribeMaintenanceWindowExecutionTasksRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeMaintenanceWindowExecutionTasksRequest body = 10;
}

message Post#DescribeMaintenanceWindowExecutionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeMaintenanceWindowExecutionsRequest body = 10;
}

message Post#DescribeMaintenanceWindowTargetsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeMaintenanceWindowTargetsRequest body = 10;
}

message Post#DescribeMaintenanceWindowTasksRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeMaintenanceWindowTasksRequest body = 10;
}

message Post#DescribeMaintenanceWindowsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeMaintenanceWindowsRequest body = 10;
}

message Post#DescribeParametersRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    DescribeParametersRequest body = 12;
}

message Post#DescribePatchBaselinesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribePatchBaselinesRequest body = 10;
}

message Post#DescribePatchGroupStateRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribePatchGroupStateRequest body = 10;
}

message Post#DescribePatchGroupsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribePatchGroupsRequest body = 10;
}

message Post#GetAutomationExecutionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetAutomationExecutionRequest body = 10;
}

message Post#GetCommandInvocationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetCommandInvocationRequest body = 10;
}

message Post#GetDefaultPatchBaselineRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetDefaultPatchBaselineRequest body = 10;
}

message Post#GetDeployablePatchSnapshotForInstanceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetDeployablePatchSnapshotForInstanceRequest body = 10;
}

message Post#GetDocumentRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetDocumentRequest body = 10;
}

message Post#GetInventoryRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetInventoryRequest body = 10;
}

message Post#GetInventorySchemaRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetInventorySchemaRequest body = 10;
}

message Post#GetMaintenanceWindowRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetMaintenanceWindowRequest body = 10;
}

message Post#GetMaintenanceWindowExecutionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetMaintenanceWindowExecutionRequest body = 10;
}

message Post#GetMaintenanceWindowExecutionTaskRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetMaintenanceWindowExecutionTaskRequest body = 10;
}

message Post#GetMaintenanceWindowExecutionTaskInvocationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetMaintenanceWindowExecutionTaskInvocationRequest body = 10;
}

message Post#GetMaintenanceWindowTaskRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetMaintenanceWindowTaskRequest body = 10;
}

message Post#GetParameterRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetParameterRequest body = 10;
}

message Post#GetParameterHistoryRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    GetParameterHistoryRequest body = 12;
}

message Post#GetParametersRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetParametersRequest body = 10;
}

message Post#GetParametersByPathRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    GetParametersByPathRequest body = 12;
}

message Post#GetPatchBaselineRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetPatchBaselineRequest body = 10;
}

message Post#GetPatchBaselineForPatchGroupRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetPatchBaselineForPatchGroupRequest body = 10;
}

message Post#ListAssociationVersionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListAssociationVersionsRequest body = 10;
}

message Post#ListAssociationsRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    ListAssociationsRequest body = 12;
}

message Post#ListCommandInvocationsRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    ListCommandInvocationsRequest body = 12;
}

message Post#ListCommandsRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    ListCommandsRequest body = 12;
}

message Post#ListComplianceItemsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListComplianceItemsRequest body = 10;
}

message Post#ListComplianceSummariesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListComplianceSummariesRequest body = 10;
}

message Post#ListDocumentVersionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListDocumentVersionsRequest body = 10;
}

message Post#ListDocumentsRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    ListDocumentsRequest body = 12;
}

message Post#ListInventoryEntriesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListInventoryEntriesRequest body = 10;
}

message Post#ListResourceComplianceSummariesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListResourceComplianceSummariesRequest body = 10;
}

message Post#ListResourceDataSyncRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListResourceDataSyncRequest body = 10;
}

message Post#ListTagsForResourceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListTagsForResourceRequest body = 10;
}

message Post#ModifyDocumentPermissionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ModifyDocumentPermissionRequest body = 10;
}

message Post#PutComplianceItemsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    PutComplianceItemsRequest body = 10;
}

message Post#PutInventoryRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    PutInventoryRequest body = 10;
}

message Post#PutParameterRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    PutParameterRequest body = 10;
}

message Post#RegisterDefaultPatchBaselineRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RegisterDefaultPatchBaselineRequest body = 10;
}

message Post#RegisterPatchBaselineForPatchGroupRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RegisterPatchBaselineForPatchGroupRequest body = 10;
}

message Post#RegisterTargetWithMaintenanceWindowRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RegisterTargetWithMaintenanceWindowRequest body = 10;
}

message Post#RegisterTaskWithMaintenanceWindowRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RegisterTaskWithMaintenanceWindowRequest body = 10;
}

message Post#RemoveTagsFromResourceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RemoveTagsFromResourceRequest body = 10;
}

message Post#SendAutomationSignalRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    SendAutomationSignalRequest body = 10;
}

message Post#SendCommandRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    SendCommandRequest body = 10;
}

message Post#StartAutomationExecutionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StartAutomationExecutionRequest body = 10;
}

message Post#StopAutomationExecutionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StopAutomationExecutionRequest body = 10;
}

message Post#UpdateAssociationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateAssociationRequest body = 10;
}

message Post#UpdateAssociationStatusRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateAssociationStatusRequest body = 10;
}

message Post#UpdateDocumentRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateDocumentRequest body = 10;
}

message Post#UpdateDocumentDefaultVersionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateDocumentDefaultVersionRequest body = 10;
}

message Post#UpdateMaintenanceWindowRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateMaintenanceWindowRequest body = 10;
}

message Post#UpdateMaintenanceWindowTargetRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateMaintenanceWindowTargetRequest body = 10;
}

message Post#UpdateMaintenanceWindowTaskRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateMaintenanceWindowTaskRequest body = 10;
}

message Post#UpdateManagedInstanceRoleRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateManagedInstanceRoleRequest body = 10;
}

message Post#UpdatePatchBaselineRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdatePatchBaselineRequest body = 10;
}





repeated string AccountIdList = 1



message Activation {
    // The ID created by Systems Manager when you submitted the activation.
    string ActivationId = 1;
    // The date the activation was created.
    string CreatedDate = 2;
    // A name for the managed instance when it is created.
    string DefaultInstanceName = 3;
    // A user defined description of the activation.
    string Description = 4;
    // The date when this activation can no longer be used to register managed instances.
    string ExpirationDate = 5;
    // Whether or not the activation is expired.
    boolean Expired = 6;
    // The Amazon Identity and Access Management (IAM) role to assign to the managed instance.
    string IamRole = 7;
    // The maximum number of managed instances that can be registered using this activation.
    integer RegistrationLimit = 8;
    // The number of managed instances already registered with this activation.
    integer RegistrationsCount = 9;
}







repeated Activation ActivationList = 1

message AddTagsToResourceRequest {
    // The resource ID you want to tag.
    string ResourceId = 1;
    // Specifies the type of resource you are tagging.
    ResourceTypeForTagging ResourceType = 2;
    //  One or more tags. The value parameter is required, but if you don't want the tag to have a value, specify the parameter with no value, and we set the value to an empty string.
    array Tags = 3;
}

message AddTagsToResourceResult {
}

message AlreadyExistsException {
    string Message = 1;
}

message AssociatedInstances {
}

message Association {
    // The ID created by the system when you create an association. An association is a binding between a document and a set of targets with a schedule.
    string AssociationId = 1;
    // The association name.
    string AssociationName = 2;
    // The association version.
    string AssociationVersion = 3;
    // The version of the document used in the association.
    string DocumentVersion = 4;
    // The ID of the instance.
    string InstanceId = 5;
    // The date on which the association was last run.
    string LastExecutionDate = 6;
    // The name of the Systems Manager document.
    string Name = 7;
    // Information about the association.
    AssociationOverview Overview = 8;
    // A cron expression that specifies a schedule when the association runs.
    string ScheduleExpression = 9;
    // The instances targeted by the request to create an association.
    array Targets = 10;
}

message AssociationAlreadyExists {
}

message AssociationDescription {
    // The association ID.
    string AssociationId = 1;
    // The association name.
    string AssociationName = 2;
    // The association version.
    string AssociationVersion = 3;
    // The date when the association was made.
    string Date = 4;
    // The document version.
    string DocumentVersion = 5;
    // The ID of the instance.
    string InstanceId = 6;
    // The date on which the association was last run.
    string LastExecutionDate = 7;
    // The last date on which the association was successfully run.
    string LastSuccessfulExecutionDate = 8;
    // The date when the association was last updated.
    string LastUpdateAssociationDate = 9;
    // The name of the Systems Manager document.
    string Name = 10;
    // An Amazon S3 bucket where you want to store the output details of the request.
    InstanceAssociationOutputLocation OutputLocation = 11;
    // Information about the association.
    AssociationOverview Overview = 12;
    // A description of the parameters for a document.
    array Parameters = 13;
    // A cron expression that specifies a schedule when the association runs.
    string ScheduleExpression = 14;
    // The association status.
    AssociationStatus Status = 15;
    // The instances targeted by the request.
    array Targets = 16;
}

repeated AssociationDescription AssociationDescriptionList = 1

message AssociationDoesNotExist {
    string Message = 1;
}

message AssociationFilter {
    // The name of the filter.
    AssociationFilterKey key = 1;
    // The filter value.
    string value = 2;
}

enum AssociationFilterKey {
    INSTANCEID = 0;
    NAME = 1;
    ASSOCIATIONID = 2;
    ASSOCIATIONSTATUSNAME = 3;
    LASTEXECUTEDBEFORE = 4;
    LASTEXECUTEDAFTER = 5;
    ASSOCIATIONNAME = 6;
}

repeated AssociationFilter AssociationFilterList = 1





message AssociationLimitExceeded {
}

repeated Association AssociationList = 1



message AssociationOverview {
    // Returns the number of targets for the association status. For example, if you created an association with two instances, and one of them was successful, this would return the count of instances by status.
    array AssociationStatusAggregatedCount = 1;
    // A detailed status of the association.
    string DetailedStatus = 2;
    // The status of the association. Status can be: Pending, Success, or Failed.
    string Status = 3;
}

message AssociationStatus {
    // A user-defined string.
    string AdditionalInfo = 1;
    // The date when the status changed.
    string Date = 2;
    // The reason for the status.
    string Message = 3;
    // The status.
    AssociationStatusName Name = 4;
}

message AssociationStatusAggregatedCount {
    string key = 1;
    integer value = 2;
}
repeated AssociationStatusAggregatedCount AssociationStatusAggregatedCount = 1

enum AssociationStatusName {
    PENDING = 0;
    SUCCESS = 1;
    FAILED = 2;
}

message AssociationVersionInfo {
    // The ID created by the system when the association was created.
    string AssociationId = 1;
    // The name specified for the association version when the association version was created.
    string AssociationName = 2;
    // The association version.
    string AssociationVersion = 3;
    // The date the association version was created.
    string CreatedDate = 4;
    // The version of a Systems Manager document used when the association version was created.
    string DocumentVersion = 5;
    // The name specified when the association was created.
    string Name = 6;
    // The location in Amazon S3 specified for the association when the association version was created.
    InstanceAssociationOutputLocation OutputLocation = 7;
    // Parameters specified when the association version was created.
    array Parameters = 8;
    // The cron or rate schedule specified for the association when the association version was created.
    string ScheduleExpression = 9;
    // The targets specified for the association when the association version was created.
    array Targets = 10;
}

message AssociationVersionLimitExceeded {
    string Message = 1;
}

repeated AssociationVersionInfo AssociationVersionList = 1







message AutomationDefinitionNotFoundException {
    string Message = 1;
}

message AutomationDefinitionVersionNotFoundException {
    string Message = 1;
}

message AutomationExecution {
    // The execution ID.
    string AutomationExecutionId = 1;
    // The execution status of the Automation.
    AutomationExecutionStatus AutomationExecutionStatus = 2;
    // The name of the Automation document used during the execution.
    string DocumentName = 3;
    // The version of the document to use during execution.
    string DocumentVersion = 4;
    // The time the execution finished.
    string ExecutionEndTime = 5;
    // The time the execution started.
    string ExecutionStartTime = 6;
    // A message describing why an execution has failed, if the status is set to Failed.
    string FailureMessage = 7;
    // The list of execution outputs as defined in the automation document.
    array Outputs = 8;
    // The key-value map of execution parameters, which were supplied when calling StartAutomationExecution.
    array Parameters = 9;
    // A list of details about the current state of all steps that comprise an execution. An Automation document contains a list of steps that are executed in order.
    array StepExecutions = 10;
}

message AutomationExecutionFilter {
    // The aspect of the Automation execution information that should be limited.
    AutomationExecutionFilterKey Key = 1;
    // The values used to limit the execution information associated with the filter's key.
    array Values = 2;
}

enum AutomationExecutionFilterKey {
    DOCUMENTNAMEPREFIX = 0;
    EXECUTIONSTATUS = 1;
}

repeated AutomationExecutionFilter AutomationExecutionFilterList = 1



repeated string AutomationExecutionFilterValueList = 1



message AutomationExecutionLimitExceededException {
    string Message = 1;
}

message AutomationExecutionMetadata {
    // The execution ID.
    string AutomationExecutionId = 1;
    // The status of the execution. Valid values include: Running, Succeeded, Failed, Timed out, or Cancelled.
    AutomationExecutionStatus AutomationExecutionStatus = 2;
    // The name of the Automation document used during execution.
    string DocumentName = 3;
    // The document version used during the execution.
    string DocumentVersion = 4;
    // The IAM role ARN of the user who executed the Automation.
    string ExecutedBy = 5;
    // The time the execution finished. This is not populated if the execution is still in progress.
    string ExecutionEndTime = 6;
    // The time the execution started.&gt;
    string ExecutionStartTime = 7;
    // An Amazon S3 bucket where execution information is stored.
    string LogFile = 8;
    // The list of execution outputs as defined in the Automation document.
    array Outputs = 9;
}

repeated AutomationExecutionMetadata AutomationExecutionMetadataList = 1

message AutomationExecutionNotFoundException {
    string Message = 1;
}

enum AutomationExecutionStatu {
    PENDING = 0;
    INPROGRESS = 1;
    WAITING = 2;
    SUCCESS = 3;
    TIMEDOUT = 4;
    CANCELLED = 5;
    FAILED = 6;
}

message AutomationParameterMap {
    string key = 1;
    array value = 2;
}
repeated AutomationParameterMap AutomationParameterMap = 1



repeated string AutomationParameterValueList = 1











message CancelCommandRequest {
    // The ID of the command you want to cancel.
    string CommandId = 1;
    // (Optional) A list of instance IDs on which you want to cancel the command. If not provided, the command is canceled on every instance on which it was requested.
    array InstanceIds = 2;
}

message CancelCommandResult {
}

message Command {
    // A unique identifier for this command.
    string CommandId = 1;
    // User-specified information about the command, such as a brief description of what the command should do.
    string Comment = 2;
    // The number of targets for which the command invocation reached a terminal state. Terminal states include the following: Success, Failed, Execution Timed Out, Delivery Timed Out, Canceled, Terminated, or Undeliverable.
    integer CompletedCount = 3;
    // The name of the document requested for execution.
    string DocumentName = 4;
    // The number of targets for which the status is Failed or Execution Timed Out.
    integer ErrorCount = 5;
    // If this time is reached and the command has not already started executing, it will not execute. Calculated based on the ExpiresAfter user input provided as part of the SendCommand API.
    string ExpiresAfter = 6;
    // The instance IDs against which this command was requested.
    array InstanceIds = 7;
    // The maximum number of instances that are allowed to execute the command at the same time. You can specify a number of instances, such as 10, or a percentage of instances, such as 10%. The default value is 50. For more information about how to use MaxConcurrency, see <a href="http://docs.aws.amazon.com/systems-manager/latest/userguide/run-command.html">Executing a Command Using Systems Manager Run Command</a>.
    string MaxConcurrency = 8;
    // The maximum number of errors allowed before the system stops sending the command to additional targets. You can specify a number of errors, such as 10, or a percentage or errors, such as 10%. The default value is 50. For more information about how to use MaxErrors, see <a href="http://docs.aws.amazon.com/systems-manager/latest/userguide/run-command.html">Executing a Command Using Systems Manager Run Command</a>.
    string MaxErrors = 9;
    // Configurations for sending notifications about command status changes.
    NotificationConfig NotificationConfig = 10;
    // The S3 bucket where the responses to the command executions should be stored. This was requested when issuing the command.
    string OutputS3BucketName = 11;
    // The S3 directory path inside the bucket where the responses to the command executions should be stored. This was requested when issuing the command.
    string OutputS3KeyPrefix = 12;
    // (Deprecated) You can no longer specify this parameter. The system ignores it. Instead, Systems Manager automatically determines the Amazon S3 bucket region.
    string OutputS3Region = 13;
    // The parameter values to be inserted in the document when executing the command.
    array Parameters = 14;
    // The date and time the command was requested.
    string RequestedDateTime = 15;
    // The IAM service role that Run Command uses to act on your behalf when sending notifications about command status changes.
    string ServiceRole = 16;
    // The status of the command.
    CommandStatus Status = 17;
    // <p>A detailed status of the command execution. StatusDetails includes more information than Status because it includes states resulting from error and concurrency control parameters. StatusDetails can show different results than Status. For more information about these statuses, see <a href="http://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-about-status.html">Run Command Status</a>. StatusDetails can be one of the following values:</p> <ul> <li> <p>Pending: The command has not been sent to any instances.</p> </li> <li> <p>In Progress: The command has been sent to at least one instance but has not reached a final state on all instances.</p> </li> <li> <p>Success: The command successfully executed on all invocations. This is a terminal state.</p> </li> <li> <p>Delivery Timed Out: The value of MaxErrors or more command invocations shows a status of Delivery Timed Out. This is a terminal state.</p> </li> <li> <p>Execution Timed Out: The value of MaxErrors or more command invocations shows a status of Execution Timed Out. This is a terminal state.</p> </li> <li> <p>Failed: The value of MaxErrors or more command invocations shows a status of Failed. This is a terminal state.</p> </li> <li> <p>Incomplete: The command was attempted on all instances and one or more invocations does not have a value of Success but not enough invocations failed for the status to be Failed. This is a terminal state.</p> </li> <li> <p>Canceled: The command was terminated before it was completed. This is a terminal state.</p> </li> <li> <p>Rate Exceeded: The number of instances targeted by the command exceeded the account limit for pending invocations. The system has canceled the command before executing it on any instance. This is a terminal state.</p> </li> </ul>
    string StatusDetails = 18;
    // The number of targets for the command.
    integer TargetCount = 19;
    // An array of search criteria that targets instances using a Key,Value combination that you specify. Targets is required if you don't provide one or more instance IDs in the call.
    array Targets = 20;
}

message CommandFilter {
    // The name of the filter.
    CommandFilterKey key = 1;
    // The filter value.
    string value = 2;
}

enum CommandFilterKey {
    INVOKEDAFTER = 0;
    INVOKEDBEFORE = 1;
    STATUS = 2;
}

repeated CommandFilter CommandFilterList = 1





message CommandInvocation {
    // The command against which this invocation was requested.
    string CommandId = 1;
    array CommandPlugins = 2;
    // User-specified information about the command, such as a brief description of what the command should do.
    string Comment = 3;
    // The document name that was requested for execution.
    string DocumentName = 4;
    // The instance ID in which this invocation was requested.
    string InstanceId = 5;
    // The name of the invocation target. For Amazon EC2 instances this is the value for the aws:Name tag. For on-premises instances, this is the name of the instance.
    string InstanceName = 6;
    // Configurations for sending notifications about command status changes on a per instance basis.
    NotificationConfig NotificationConfig = 7;
    // The time and date the request was sent to this instance.
    string RequestedDateTime = 8;
    // The IAM service role that Run Command uses to act on your behalf when sending notifications about command status changes on a per instance basis.
    string ServiceRole = 9;
    // The URL to the plugin's StdErr file in Amazon S3, if the Amazon S3 bucket was defined for the parent command. For an invocation, StandardErrorUrl is populated if there is just one plugin defined for the command, and the Amazon S3 bucket was defined for the command.
    string StandardErrorUrl = 10;
    // The URL to the plugin's StdOut file in Amazon S3, if the Amazon S3 bucket was defined for the parent command. For an invocation, StandardOutputUrl is populated if there is just one plugin defined for the command, and the Amazon S3 bucket was defined for the command.
    string StandardOutputUrl = 11;
    // Whether or not the invocation succeeded, failed, or is pending.
    CommandInvocationStatus Status = 12;
    // <p>A detailed status of the command execution for each invocation (each instance targeted by the command). StatusDetails includes more information than Status because it includes states resulting from error and concurrency control parameters. StatusDetails can show different results than Status. For more information about these statuses, see <a href="http://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-about-status.html">Run Command Status</a>. StatusDetails can be one of the following values:</p> <ul> <li> <p>Pending: The command has not been sent to the instance.</p> </li> <li> <p>In Progress: The command has been sent to the instance but has not reached a terminal state.</p> </li> <li> <p>Success: The execution of the command or plugin was successfully completed. This is a terminal state.</p> </li> <li> <p>Delivery Timed Out: The command was not delivered to the instance before the delivery timeout expired. Delivery timeouts do not count against the parent command's MaxErrors limit, but they do contribute to whether the parent command status is Success or Incomplete. This is a terminal state.</p> </li> <li> <p>Execution Timed Out: Command execution started on the instance, but the execution was not complete before the execution timeout expired. Execution timeouts count against the MaxErrors limit of the parent command. This is a terminal state.</p> </li> <li> <p>Failed: The command was not successful on the instance. For a plugin, this indicates that the result code was not zero. For a command invocation, this indicates that the result code for one or more plugins was not zero. Invocation failures count against the MaxErrors limit of the parent command. This is a terminal state.</p> </li> <li> <p>Canceled: The command was terminated before it was completed. This is a terminal state.</p> </li> <li> <p>Undeliverable: The command can't be delivered to the instance. The instance might not exist or might not be responding. Undeliverable invocations don't count against the parent command's MaxErrors limit and don't contribute to whether the parent command status is Success or Incomplete. This is a terminal state.</p> </li> <li> <p>Terminated: The parent command exceeded its MaxErrors limit and subsequent command invocations were canceled by the system. This is a terminal state.</p> </li> </ul>
    string StatusDetails = 13;
    //  Gets the trace output sent by the agent.
    string TraceOutput = 14;
}

repeated CommandInvocation CommandInvocationList = 1

enum CommandInvocationStatu {
    PENDING = 0;
    INPROGRESS = 1;
    DELAYED = 2;
    SUCCESS = 3;
    CANCELLED = 4;
    TIMEDOUT = 5;
    FAILED = 6;
    CANCELLING = 7;
}

repeated Command CommandList = 1



message CommandPlugin {
    // The name of the plugin. Must be one of the following: aws:updateAgent, aws:domainjoin, aws:applications, aws:runPowerShellScript, aws:psmodule, aws:cloudWatch, aws:runShellScript, or aws:updateSSMAgent.
    string Name = 1;
    // Output of the plugin execution.
    string Output = 2;
    // <p>The S3 bucket where the responses to the command executions should be stored. This was requested when issuing the command. For example, in the following response:</p> <p> test_folder/ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix/i-1234567876543/awsrunShellScript </p> <p>test_folder is the name of the Amazon S3 bucket;</p> <p> ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix is the name of the S3 prefix;</p> <p>i-1234567876543 is the instance ID;</p> <p>awsrunShellScript is the name of the plugin.</p>
    string OutputS3BucketName = 3;
    // <p>The S3 directory path inside the bucket where the responses to the command executions should be stored. This was requested when issuing the command. For example, in the following response:</p> <p> test_folder/ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix/i-1234567876543/awsrunShellScript </p> <p>test_folder is the name of the Amazon S3 bucket;</p> <p> ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix is the name of the S3 prefix;</p> <p>i-1234567876543 is the instance ID;</p> <p>awsrunShellScript is the name of the plugin.</p>
    string OutputS3KeyPrefix = 4;
    // (Deprecated) You can no longer specify this parameter. The system ignores it. Instead, Systems Manager automatically determines the Amazon S3 bucket region.
    string OutputS3Region = 5;
    // A numeric response code generated after executing the plugin.
    integer ResponseCode = 6;
    // The time the plugin stopped executing. Could stop prematurely if, for example, a cancel command was sent.
    string ResponseFinishDateTime = 7;
    // The time the plugin started executing.
    string ResponseStartDateTime = 8;
    // The URL for the complete text written by the plugin to stderr. If execution is not yet complete, then this string is empty.
    string StandardErrorUrl = 9;
    // The URL for the complete text written by the plugin to stdout in Amazon S3. If the Amazon S3 bucket for the command was not specified, then this string is empty.
    string StandardOutputUrl = 10;
    // The status of this plugin. You can execute a document with multiple plugins.
    CommandPluginStatus Status = 11;
    // <p>A detailed status of the plugin execution. StatusDetails includes more information than Status because it includes states resulting from error and concurrency control parameters. StatusDetails can show different results than Status. For more information about these statuses, see <a href="http://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-about-status.html">Run Command Status</a>. StatusDetails can be one of the following values:</p> <ul> <li> <p>Pending: The command has not been sent to the instance.</p> </li> <li> <p>In Progress: The command has been sent to the instance but has not reached a terminal state.</p> </li> <li> <p>Success: The execution of the command or plugin was successfully completed. This is a terminal state.</p> </li> <li> <p>Delivery Timed Out: The command was not delivered to the instance before the delivery timeout expired. Delivery timeouts do not count against the parent command's MaxErrors limit, but they do contribute to whether the parent command status is Success or Incomplete. This is a terminal state.</p> </li> <li> <p>Execution Timed Out: Command execution started on the instance, but the execution was not complete before the execution timeout expired. Execution timeouts count against the MaxErrors limit of the parent command. This is a terminal state.</p> </li> <li> <p>Failed: The command was not successful on the instance. For a plugin, this indicates that the result code was not zero. For a command invocation, this indicates that the result code for one or more plugins was not zero. Invocation failures count against the MaxErrors limit of the parent command. This is a terminal state.</p> </li> <li> <p>Canceled: The command was terminated before it was completed. This is a terminal state.</p> </li> <li> <p>Undeliverable: The command can't be delivered to the instance. The instance might not exist, or it might not be responding. Undeliverable invocations don't count against the parent command's MaxErrors limit, and they don't contribute to whether the parent command status is Success or Incomplete. This is a terminal state.</p> </li> <li> <p>Terminated: The parent command exceeded its MaxErrors limit and subsequent command invocations were canceled by the system. This is a terminal state.</p> </li> </ul>
    string StatusDetails = 12;
}

repeated CommandPlugin CommandPluginList = 1





enum CommandPluginStatu {
    PENDING = 0;
    INPROGRESS = 1;
    SUCCESS = 2;
    TIMEDOUT = 3;
    CANCELLED = 4;
    FAILED = 5;
}

enum CommandStatu {
    PENDING = 0;
    INPROGRESS = 1;
    SUCCESS = 2;
    CANCELLED = 3;
    FAILED = 4;
    TIMEDOUT = 5;
    CANCELLING = 6;
}

message ComplianceExecutionSummary {
    // An ID created by the system when <code>PutComplianceItems</code> was called. For example, <code>CommandID</code> is a valid execution ID. You can use this ID in subsequent calls.
    string ExecutionId = 1;
    // The time the execution ran as a datetime object that is saved in the following format: yyyy-MM-dd'T'HH:mm:ss'Z'.
    string ExecutionTime = 2;
    // The type of execution. For example, <code>Command</code> is a valid execution type.
    string ExecutionType = 3;
}

message ComplianceItem {
    // The compliance type. For example, Association (for a State Manager association), Patch, or Custom:<code>string</code> are all valid compliance types.
    string ComplianceType = 1;
    // A "Key": "Value" tag combination for the compliance item.
    array Details = 2;
    // A summary for the compliance item. The summary includes an execution ID, the execution type (for example, command), and the execution time.
    ComplianceExecutionSummary ExecutionSummary = 3;
    // An ID for the compliance item. For example, if the compliance item is a Windows patch, the ID could be the number of the KB article. Here's an example: KB4010320.
    string Id = 4;
    // An ID for the resource. For a managed instance, this is the instance ID.
    string ResourceId = 5;
    // The type of resource. <code>ManagedInstance</code> is currently the only supported resource type.
    string ResourceType = 6;
    // The severity of the compliance status. Severity can be one of the following: Critical, High, Medium, Low, Informational, Unspecified.
    ComplianceSeverity Severity = 7;
    // The status of the compliance item. An item is either COMPLIANT or NON_COMPLIANT.
    ComplianceStatus Status = 8;
    // A title for the compliance item. For example, if the compliance item is a Windows patch, the title could be the title of the KB article for the patch. Here's an example: Security Update for Active Directory Federation Services.
    string Title = 9;
}

message ComplianceItemDetail {
    string key = 1;
    string value = 2;
}
repeated ComplianceItemDetail ComplianceItemDetails = 1

message ComplianceItemEntry {
    // A "Key": "Value" tag combination for the compliance item.
    array Details = 1;
    // The compliance item ID. For example, if the compliance item is a Windows patch, the ID could be the number of the KB article.
    string Id = 2;
    // The severity of the compliance status. Severity can be one of the following: Critical, High, Medium, Low, Informational, Unspecified.
    ComplianceSeverity Severity = 3;
    // The status of the compliance item. An item is either COMPLIANT or NON_COMPLIANT.
    ComplianceStatus Status = 4;
    // The title of the compliance item. For example, if the compliance item is a Windows patch, the title could be the title of the KB article for the patch. Here's an example: Security Update for Active Directory Federation Services.
    string Title = 5;
}

repeated ComplianceItemEntry ComplianceItemEntryList = 1



repeated ComplianceItem ComplianceItemList = 1



enum ComplianceQueryOperatorType {
    EQUAL = 0;
    NOT_EQUAL = 1;
    BEGIN_WITH = 2;
    LESS_THAN = 3;
    GREATER_THAN = 4;
}



repeated string ComplianceResourceIdList = 1



repeated string ComplianceResourceTypeList = 1

enum ComplianceSeverity {
    CRITICAL = 0;
    HIGH = 1;
    MEDIUM = 2;
    LOW = 3;
    INFORMATIONAL = 4;
    UNSPECIFIED = 5;
}

enum ComplianceStatu {
    COMPLIANT = 0;
    NON_COMPLIANT = 1;
}

message ComplianceStringFilter {
    // The name of the filter.
    string Key = 1;
    // The type of comparison that should be performed for the value: Equal, NotEqual, BeginWith, LessThan, or GreaterThan.
    ComplianceQueryOperatorType Type = 2;
    // The value for which to search.
    array Values = 3;
}



repeated ComplianceStringFilter ComplianceStringFilterList = 1

repeated string ComplianceStringFilterValueList = 1



message ComplianceSummaryItem {
    // The type of compliance item. For example, the compliance type can be Association, Patch, or Custom:string.
    string ComplianceType = 1;
    // A list of COMPLIANT items for the specified compliance type.
    CompliantSummary CompliantSummary = 2;
    // A list of NON_COMPLIANT items for the specified compliance type.
    NonCompliantSummary NonCompliantSummary = 3;
}

repeated ComplianceSummaryItem ComplianceSummaryItemList = 1

message ComplianceTypeCountLimitExceededException {
    string Message = 1;
}

message CompliantSummary {
    // The total number of resources that are compliant.
    integer CompliantCount = 1;
    // A summary of the compliance severity by compliance type.
    SeveritySummary SeveritySummary = 2;
}

message CreateActivationRequest {
    // The name of the registered, managed instance as it will appear in the Amazon EC2 console or when you use the AWS command line tools to list EC2 resources.
    string DefaultInstanceName = 1;
    // A userdefined description of the resource that you want to register with Amazon EC2.
    string Description = 2;
    // The date by which this activation request should expire. The default value is 24 hours.
    string ExpirationDate = 3;
    // The Amazon Identity and Access Management (IAM) role that you want to assign to the managed instance.
    string IamRole = 4;
    // Specify the maximum number of managed instances you want to register. The default value is 1 instance.
    integer RegistrationLimit = 5;
}

message CreateActivationResult {
    // The code the system generates when it processes the activation. The activation code functions like a password to validate the activation ID.
    string ActivationCode = 1;
    // The ID number generated by the system when it processed the activation. The activation ID functions like a user name.
    string ActivationId = 2;
}

message CreateAssociationBatchRequest {
    // One or more associations.
    array Entries = 1;
}

repeated CreateAssociationBatchRequestEntry CreateAssociationBatchRequestEntries = 1

message CreateAssociationBatchRequestEntry {
    // Specify a descriptive name for the association.
    string AssociationName = 1;
    // The document version.
    string DocumentVersion = 2;
    // The ID of the instance.
    string InstanceId = 3;
    // The name of the configuration document.
    string Name = 4;
    // An Amazon S3 bucket where you want to store the results of this request.
    InstanceAssociationOutputLocation OutputLocation = 5;
    // A description of the parameters for a document.
    array Parameters = 6;
    // A cron expression that specifies a schedule when the association runs.
    string ScheduleExpression = 7;
    // The instances targeted by the request.
    array Targets = 8;
}

message CreateAssociationBatchResult {
    // Information about the associations that failed.
    array Failed = 1;
    // Information about the associations that succeeded.
    array Successful = 2;
}

message CreateAssociationRequest {
    // Specify a descriptive name for the association.
    string AssociationName = 1;
    // The document version you want to associate with the target(s). Can be a specific version or the default version.
    string DocumentVersion = 2;
    // The instance ID.
    string InstanceId = 3;
    // The name of the Systems Manager document.
    string Name = 4;
    // An Amazon S3 bucket where you want to store the output details of the request.
    InstanceAssociationOutputLocation OutputLocation = 5;
    // The parameters for the documents runtime configuration.
    array Parameters = 6;
    // A cron expression when the association will be applied to the target(s).
    string ScheduleExpression = 7;
    // The targets (either instances or tags) for the association.
    array Targets = 8;
}

message CreateAssociationResult {
    // Information about the association.
    AssociationDescription AssociationDescription = 1;
}

message CreateDocumentRequest {
    // A valid JSON string.
    string Content = 1;
    // The type of document to create. Valid document types include: Policy, Automation, and Command.
    DocumentType DocumentType = 2;
    // A name for the Systems Manager document.
    string Name = 3;
}

message CreateDocumentResult {
    // Information about the Systems Manager document.
    DocumentDescription DocumentDescription = 1;
}

message CreateMaintenanceWindowRequest {
    // <p>Enables a Maintenance Window task to execute on managed instances, even if you have not registered those instances as targets. If enabled, then you must specify the unregistered instances (by instance ID) when you register a task with the Maintenance Window </p> <p>If you don't enable this option, then you must specify previously-registered targets when you register a task with the Maintenance Window. </p>
    boolean AllowUnassociatedTargets = 1;
    // User-provided idempotency token.
    string ClientToken = 2;
    // The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
    integer Cutoff = 3;
    // An optional description for the Maintenance Window. We recommend specifying a description to help you organize your Maintenance Windows.
    string Description = 4;
    // The duration of the Maintenance Window in hours.
    integer Duration = 5;
    // The name of the Maintenance Window.
    string Name = 6;
    // The schedule of the Maintenance Window in the form of a cron or rate expression.
    string Schedule = 7;
}

message CreateMaintenanceWindowResult {
    // The ID of the created Maintenance Window.
    string WindowId = 1;
}

message CreatePatchBaselineRequest {
    // A set of rules used to include patches in the baseline.
    PatchRuleGroup ApprovalRules = 1;
    // A list of explicitly approved patches for the baseline.
    array ApprovedPatches = 2;
    // Defines the compliance level for approved patches. This means that if an approved patch is reported as missing, this is the severity of the compliance violation. Valid compliance severity levels include the following: CRITICAL, HIGH, MEDIUM, LOW, INFORMATIONAL, UNSPECIFIED. The default value is UNSPECIFIED.
    PatchComplianceLevel ApprovedPatchesComplianceLevel = 3;
    // User-provided idempotency token.
    string ClientToken = 4;
    // A description of the patch baseline.
    string Description = 5;
    // A set of global filters used to exclude patches from the baseline.
    PatchFilterGroup GlobalFilters = 6;
    // The name of the patch baseline.
    string Name = 7;
    // Defines the operating system the patch baseline applies to. Supported operating systems include WINDOWS, AMAZON_LINUX, UBUNTU and REDHAT_ENTERPRISE_LINUX. The Default value is WINDOWS.
    OperatingSystem OperatingSystem = 8;
    // A list of explicitly rejected patches for the baseline.
    array RejectedPatches = 9;
}

message CreatePatchBaselineResult {
    // The ID of the created patch baseline.
    string BaselineId = 1;
}

message CreateResourceDataSyncRequest {
    // Amazon S3 configuration details for the sync.
    ResourceDataSyncS3Destination S3Destination = 1;
    // A name for the configuration.
    string SyncName = 2;
}

message CreateResourceDataSyncResult {
}

message CustomSchemaCountLimitExceededException {
    string Message = 1;
}

message DeleteActivationRequest {
    // The ID of the activation that you want to delete.
    string ActivationId = 1;
}

message DeleteActivationResult {
}

message DeleteAssociationRequest {
    // The association ID that you want to delete.
    string AssociationId = 1;
    // The ID of the instance.
    string InstanceId = 2;
    // The name of the Systems Manager document.
    string Name = 3;
}

message DeleteAssociationResult {
}

message DeleteDocumentRequest {
    // The name of the document.
    string Name = 1;
}

message DeleteDocumentResult {
}

message DeleteMaintenanceWindowRequest {
    // The ID of the Maintenance Window to delete.
    string WindowId = 1;
}

message DeleteMaintenanceWindowResult {
    // The ID of the deleted Maintenance Window.
    string WindowId = 1;
}

message DeleteParameterRequest {
    // The name of the parameter to delete.
    string Name = 1;
}

message DeleteParameterResult {
}

message DeleteParametersRequest {
    // The names of the parameters to delete.
    array Names = 1;
}

message DeleteParametersResult {
    // The names of the deleted parameters.
    array DeletedParameters = 1;
    // The names of parameters that weren't deleted because the parameters are not valid.
    array InvalidParameters = 2;
}

message DeletePatchBaselineRequest {
    // The ID of the patch baseline to delete.
    string BaselineId = 1;
}

message DeletePatchBaselineResult {
    // The ID of the deleted patch baseline.
    string BaselineId = 1;
}

message DeleteResourceDataSyncRequest {
    // The name of the configuration to delete.
    string SyncName = 1;
}

message DeleteResourceDataSyncResult {
}

message DeregisterManagedInstanceRequest {
    // The ID assigned to the managed instance when you registered it using the activation process.
    string InstanceId = 1;
}

message DeregisterManagedInstanceResult {
}

message DeregisterPatchBaselineForPatchGroupRequest {
    // The ID of the patch baseline to deregister the patch group from.
    string BaselineId = 1;
    // The name of the patch group that should be deregistered from the patch baseline.
    string PatchGroup = 2;
}

message DeregisterPatchBaselineForPatchGroupResult {
    // The ID of the patch baseline the patch group was deregistered from.
    string BaselineId = 1;
    // The name of the patch group deregistered from the patch baseline.
    string PatchGroup = 2;
}

message DeregisterTargetFromMaintenanceWindowRequest {
    // The system checks if the target is being referenced by a task. If the target is being referenced, the system returns an error and does not deregister the target from the Maintenance Window.
    boolean Safe = 1;
    // The ID of the Maintenance Window the target should be removed from.
    string WindowId = 2;
    // The ID of the target definition to remove.
    string WindowTargetId = 3;
}

message DeregisterTargetFromMaintenanceWindowResult {
    // The ID of the Maintenance Window the target was removed from.
    string WindowId = 1;
    // The ID of the removed target definition.
    string WindowTargetId = 2;
}

message DeregisterTaskFromMaintenanceWindowRequest {
    // The ID of the Maintenance Window the task should be removed from.
    string WindowId = 1;
    // The ID of the task to remove from the Maintenance Window.
    string WindowTaskId = 2;
}

message DeregisterTaskFromMaintenanceWindowResult {
    // The ID of the Maintenance Window the task was removed from.
    string WindowId = 1;
    // The ID of the task removed from the Maintenance Window.
    string WindowTaskId = 2;
}

message DescribeActivationsFilter {
    // The name of the filter.
    DescribeActivationsFilterKeys FilterKey = 1;
    // The filter values.
    array FilterValues = 2;
}

enum DescribeActivationsFilterKey {
    ACTIVATIONIDS = 0;
    DEFAULTINSTANCENAME = 1;
    IAMROLE = 2;
}

repeated DescribeActivationsFilter DescribeActivationsFilterList = 1

message DescribeActivationsRequest {
    // A filter to view information about your activations.
    array Filters = 1;
    // The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    integer MaxResults = 2;
    // A token to start the list. Use this token to get the next set of results.
    string NextToken = 3;
}

message DescribeActivationsResult {
    // A list of activations for your AWS account.
    array ActivationList = 1;
    // The token for the next set of items to return. Use this token to get the next set of results.
    string NextToken = 2;
}

message DescribeAssociationRequest {
    // The association ID for which you want information.
    string AssociationId = 1;
    // Specify the association version to retrieve. To view the latest version, either specify <code>$LATEST</code> for this parameter, or omit this parameter. To view a list of all associations for an instance, use ListInstanceAssociations. To get a list of versions for a specific association, use ListAssociationVersions.
    string AssociationVersion = 2;
    // The instance ID.
    string InstanceId = 3;
    // The name of the Systems Manager document.
    string Name = 4;
}

message DescribeAssociationResult {
    // Information about the association.
    AssociationDescription AssociationDescription = 1;
}

message DescribeAutomationExecutionsRequest {
    // Filters used to limit the scope of executions that are requested.
    array Filters = 1;
    // The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    integer MaxResults = 2;
    // The token for the next set of items to return. (You received this token from a previous call.)
    string NextToken = 3;
}

message DescribeAutomationExecutionsResult {
    // The list of details about each automation execution which has occurred which matches the filter specification, if any.
    array AutomationExecutionMetadataList = 1;
    // The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
    string NextToken = 2;
}

message DescribeAvailablePatchesRequest {
    // Filters used to scope down the returned patches.
    array Filters = 1;
    // The maximum number of patches to return (per page).
    integer MaxResults = 2;
    // The token for the next set of items to return. (You received this token from a previous call.)
    string NextToken = 3;
}

message DescribeAvailablePatchesResult {
    // The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
    string NextToken = 1;
    // An array of patches. Each entry in the array is a patch structure.
    array Patches = 2;
}

message DescribeDocumentPermissionRequest {
    // The name of the document for which you are the owner.
    string Name = 1;
    // The permission type for the document. The permission type can be <i>Share</i>.
    DocumentPermissionType PermissionType = 2;
}

message DescribeDocumentPermissionResponse {
    // The account IDs that have permission to use this document. The ID can be either an AWS account or <i>All</i>.
    array AccountIds = 1;
}

message DescribeDocumentRequest {
    // The document version for which you want information. Can be a specific version or the default version.
    string DocumentVersion = 1;
    // The name of the Systems Manager document.
    string Name = 2;
}

message DescribeDocumentResult {
    // Information about the Systems Manager document.
    DocumentDescription Document = 1;
}

message DescribeEffectiveInstanceAssociationsRequest {
    // The instance ID for which you want to view all associations.
    string InstanceId = 1;
    // The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    integer MaxResults = 2;
    // The token for the next set of items to return. (You received this token from a previous call.)
    string NextToken = 3;
}

message DescribeEffectiveInstanceAssociationsResult {
    // The associations for the requested instance.
    array Associations = 1;
    // The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
    string NextToken = 2;
}

message DescribeEffectivePatchesForPatchBaselineRequest {
    // The ID of the patch baseline to retrieve the effective patches for.
    string BaselineId = 1;
    // The maximum number of patches to return (per page).
    integer MaxResults = 2;
    // The token for the next set of items to return. (You received this token from a previous call.)
    string NextToken = 3;
}

message DescribeEffectivePatchesForPatchBaselineResult {
    // An array of patches and patch status.
    array EffectivePatches = 1;
    // The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
    string NextToken = 2;
}

message DescribeInstanceAssociationsStatusRequest {
    // The instance IDs for which you want association status information.
    string InstanceId = 1;
    // The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    integer MaxResults = 2;
    // The token for the next set of items to return. (You received this token from a previous call.)
    string NextToken = 3;
}

message DescribeInstanceAssociationsStatusResult {
    // Status information about the association.
    array InstanceAssociationStatusInfos = 1;
    // The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
    string NextToken = 2;
}

message DescribeInstanceInformationRequest {
    // One or more filters. Use a filter to return a more specific list of instances.
    array Filters = 1;
    // One or more filters. Use a filter to return a more specific list of instances.
    array InstanceInformationFilterList = 2;
    // The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    integer MaxResults = 3;
    // The token for the next set of items to return. (You received this token from a previous call.)
    string NextToken = 4;
}

message DescribeInstanceInformationResult {
    // The instance information list.
    array InstanceInformationList = 1;
    // The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
    string NextToken = 2;
}

message DescribeInstancePatchStatesForPatchGroupRequest {
    // <p>Each entry in the array is a structure containing:</p> <p>Key (string between 1 and 200 characters)</p> <p> Values (array containing a single string)</p> <p> Type (string "Equal", "NotEqual", "LessThan", "GreaterThan")</p>
    array Filters = 1;
    // The maximum number of patches to return (per page).
    integer MaxResults = 2;
    // The token for the next set of items to return. (You received this token from a previous call.)
    string NextToken = 3;
    // The name of the patch group for which the patch state information should be retrieved.
    string PatchGroup = 4;
}

message DescribeInstancePatchStatesForPatchGroupResult {
    // The high-level patch state for the requested instances.
    array InstancePatchStates = 1;
    // The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
    string NextToken = 2;
}

message DescribeInstancePatchStatesRequest {
    // The ID of the instance whose patch state information should be retrieved.
    array InstanceIds = 1;
    // The maximum number of instances to return (per page).
    integer MaxResults = 2;
    // The token for the next set of items to return. (You received this token from a previous call.)
    string NextToken = 3;
}

message DescribeInstancePatchStatesResult {
    // The high-level patch state for the requested instances.
    array InstancePatchStates = 1;
    // The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
    string NextToken = 2;
}

message DescribeInstancePatchesRequest {
    // <p>Each entry in the array is a structure containing:</p> <p>Key (string, between 1 and 128 characters)</p> <p>Values (array of strings, each string between 1 and 256 characters)</p>
    array Filters = 1;
    // The ID of the instance whose patch state information should be retrieved.
    string InstanceId = 2;
    // The maximum number of patches to return (per page).
    integer MaxResults = 3;
    // The token for the next set of items to return. (You received this token from a previous call.)
    string NextToken = 4;
}

message DescribeInstancePatchesResult {
    // The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
    string NextToken = 1;
    // <p>Each entry in the array is a structure containing:</p> <p>Title (string)</p> <p>KBId (string)</p> <p>Classification (string)</p> <p>Severity (string)</p> <p>State (string: "INSTALLED", "INSTALLED OTHER", "MISSING", "NOT APPLICABLE", "FAILED")</p> <p>InstalledTime (DateTime)</p> <p>InstalledBy (string)</p>
    array Patches = 2;
}

message DescribeMaintenanceWindowExecutionTaskInvocationsRequest {
    // Optional filters used to scope down the returned task invocations. The supported filter key is STATUS with the corresponding values PENDING, IN_PROGRESS, SUCCESS, FAILED, TIMED_OUT, CANCELLING, and CANCELLED.
    array Filters = 1;
    // The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    integer MaxResults = 2;
    // The token for the next set of items to return. (You received this token from a previous call.)
    string NextToken = 3;
    // The ID of the specific task in the Maintenance Window task that should be retrieved.
    string TaskId = 4;
    // The ID of the Maintenance Window execution the task is part of.
    string WindowExecutionId = 5;
}

message DescribeMaintenanceWindowExecutionTaskInvocationsResult {
    // The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
    string NextToken = 1;
    // Information about the task invocation results per invocation.
    array WindowExecutionTaskInvocationIdentities = 2;
}

message DescribeMaintenanceWindowExecutionTasksRequest {
    // Optional filters used to scope down the returned tasks. The supported filter key is STATUS with the corresponding values PENDING, IN_PROGRESS, SUCCESS, FAILED, TIMED_OUT, CANCELLING, and CANCELLED.
    array Filters = 1;
    // The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    integer MaxResults = 2;
    // The token for the next set of items to return. (You received this token from a previous call.)
    string NextToken = 3;
    // The ID of the Maintenance Window execution whose task executions should be retrieved.
    string WindowExecutionId = 4;
}

message DescribeMaintenanceWindowExecutionTasksResult {
    // The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
    string NextToken = 1;
    // Information about the task executions.
    array WindowExecutionTaskIdentities = 2;
}

message DescribeMaintenanceWindowExecutionsRequest {
    // <p>Each entry in the array is a structure containing:</p> <p>Key (string, between 1 and 128 characters)</p> <p>Values (array of strings, each string is between 1 and 256 characters)</p> <p>The supported Keys are ExecutedBefore and ExecutedAfter with the value being a date/time string such as 2016-11-04T05:00:00Z.</p>
    array Filters = 1;
    // The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    integer MaxResults = 2;
    // The token for the next set of items to return. (You received this token from a previous call.)
    string NextToken = 3;
    // The ID of the Maintenance Window whose executions should be retrieved.
    string WindowId = 4;
}

message DescribeMaintenanceWindowExecutionsResult {
    // The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
    string NextToken = 1;
    // Information about the Maintenance Windows execution.
    array WindowExecutions = 2;
}

message DescribeMaintenanceWindowTargetsRequest {
    // Optional filters that can be used to narrow down the scope of the returned window targets. The supported filter keys are Type, WindowTargetId and OwnerInformation.
    array Filters = 1;
    // The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    integer MaxResults = 2;
    // The token for the next set of items to return. (You received this token from a previous call.)
    string NextToken = 3;
    // The ID of the Maintenance Window whose targets should be retrieved.
    string WindowId = 4;
}

message DescribeMaintenanceWindowTargetsResult {
    // The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
    string NextToken = 1;
    // Information about the targets in the Maintenance Window.
    array Targets = 2;
}

message DescribeMaintenanceWindowTasksRequest {
    // Optional filters used to narrow down the scope of the returned tasks. The supported filter keys are WindowTaskId, TaskArn, Priority, and TaskType.
    array Filters = 1;
    // The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    integer MaxResults = 2;
    // The token for the next set of items to return. (You received this token from a previous call.)
    string NextToken = 3;
    // The ID of the Maintenance Window whose tasks should be retrieved.
    string WindowId = 4;
}

message DescribeMaintenanceWindowTasksResult {
    // The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
    string NextToken = 1;
    // Information about the tasks in the Maintenance Window.
    array Tasks = 2;
}

message DescribeMaintenanceWindowsRequest {
    // Optional filters used to narrow down the scope of the returned Maintenance Windows. Supported filter keys are Name and Enabled.
    array Filters = 1;
    // The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    integer MaxResults = 2;
    // The token for the next set of items to return. (You received this token from a previous call.)
    string NextToken = 3;
}

message DescribeMaintenanceWindowsResult {
    // The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
    string NextToken = 1;
    // Information about the Maintenance Windows.
    array WindowIdentities = 2;
}

message DescribeParametersRequest {
    // One or more filters. Use a filter to return a more specific list of results.
    array Filters = 1;
    // The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    integer MaxResults = 2;
    // The token for the next set of items to return. (You received this token from a previous call.)
    string NextToken = 3;
    // Filters to limit the request results.
    array ParameterFilters = 4;
}

message DescribeParametersResult {
    // The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
    string NextToken = 1;
    // Parameters returned by the request.
    array Parameters = 2;
}

message DescribePatchBaselinesRequest {
    // <p>Each element in the array is a structure containing: </p> <p>Key: (string, "NAME_PREFIX" or "OWNER")</p> <p>Value: (array of strings, exactly 1 entry, between 1 and 255 characters)</p>
    array Filters = 1;
    // The maximum number of patch baselines to return (per page).
    integer MaxResults = 2;
    // The token for the next set of items to return. (You received this token from a previous call.)
    string NextToken = 3;
}

message DescribePatchBaselinesResult {
    // An array of PatchBaselineIdentity elements.
    array BaselineIdentities = 1;
    // The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
    string NextToken = 2;
}

message DescribePatchGroupStateRequest {
    // The name of the patch group whose patch snapshot should be retrieved.
    string PatchGroup = 1;
}

message DescribePatchGroupStateResult {
    // The number of instances in the patch group.
    integer Instances = 1;
    // The number of instances with patches from the patch baseline that failed to install.
    integer InstancesWithFailedPatches = 2;
    // The number of instances with patches installed that aren't defined in the patch baseline.
    integer InstancesWithInstalledOtherPatches = 3;
    // The number of instances with installed patches.
    integer InstancesWithInstalledPatches = 4;
    // The number of instances with missing patches from the patch baseline.
    integer InstancesWithMissingPatches = 5;
    // The number of instances with patches that aren't applicable.
    integer InstancesWithNotApplicablePatches = 6;
}

message DescribePatchGroupsRequest {
    // One or more filters. Use a filter to return a more specific list of results.
    array Filters = 1;
    // The maximum number of patch groups to return (per page).
    integer MaxResults = 2;
    // The token for the next set of items to return. (You received this token from a previous call.)
    string NextToken = 3;
}

message DescribePatchGroupsResult {
    // <p>Each entry in the array contains:</p> <p>PatchGroup: string (between 1 and 256 characters, Regex: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$)</p> <p>PatchBaselineIdentity: A PatchBaselineIdentity element. </p>
    array Mappings = 1;
    // The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
    string NextToken = 2;
}

message DocumentAlreadyExists {
    string Message = 1;
}

message DocumentDefaultVersionDescription {
    // The default version of the document.
    string DefaultVersion = 1;
    // The name of the document.
    string Name = 2;
}

message DocumentDescription {
    // The date when the document was created.
    string CreatedDate = 1;
    // The default version.
    string DefaultVersion = 2;
    // A description of the document.
    string Description = 3;
    // The type of document.
    DocumentType DocumentType = 4;
    // The document version.
    string DocumentVersion = 5;
    // <p>The Sha256 or Sha1 hash created by the system when the document was created. </p> <note> <p>Sha1 hashes have been deprecated.</p> </note>
    string Hash = 6;
    // <p>Sha256 or Sha1.</p> <note> <p>Sha1 hashes have been deprecated.</p> </note>
    DocumentHashType HashType = 7;
    // The latest version of the document.
    string LatestVersion = 8;
    // The name of the Systems Manager document.
    string Name = 9;
    // The AWS user account that created the document.
    string Owner = 10;
    // A description of the parameters for a document.
    array Parameters = 11;
    // The list of OS platforms compatible with this Systems Manager document.
    array PlatformTypes = 12;
    // The schema version.
    string SchemaVersion = 13;
    // The SHA1 hash of the document, which you can use for verification.
    string Sha1 = 14;
    // The status of the Systems Manager document.
    DocumentStatus Status = 15;
    // The tags, or metadata, that have been applied to the document.
    array Tags = 16;
}

message DocumentFilter {
    // The name of the filter.
    DocumentFilterKey key = 1;
    // The value of the filter.
    string value = 2;
}

enum DocumentFilterKey {
    NAME = 0;
    OWNER = 1;
    PLATFORMTYPES = 2;
    DOCUMENTTYPE = 3;
}

repeated DocumentFilter DocumentFilterList = 1





enum DocumentHashType {
    SHA256 = 0;
    SHA1 = 1;
}

message DocumentIdentifier {
    // The document type.
    DocumentType DocumentType = 1;
    // The document version.
    string DocumentVersion = 2;
    // The name of the Systems Manager document.
    string Name = 3;
    // The AWS user account that created the document.
    string Owner = 4;
    // The operating system platform.
    array PlatformTypes = 5;
    // The schema version.
    string SchemaVersion = 6;
    // The tags, or metadata, that have been applied to the document.
    array Tags = 7;
}

repeated DocumentIdentifier DocumentIdentifierList = 1

message DocumentKeyValuesFilter {
    // The name of the filter key.
    string Key = 1;
    // The value for the filter key.
    array Values = 2;
}



repeated DocumentKeyValuesFilter DocumentKeyValuesFilterList = 1



repeated string DocumentKeyValuesFilterValues = 1

message DocumentLimitExceeded {
    string Message = 1;
}

message DocumentParameter {
    // If specified, the default values for the parameters. Parameters without a default value are required. Parameters with a default value are optional.
    string DefaultValue = 1;
    // A description of what the parameter does, how to use it, the default value, and whether or not the parameter is optional.
    string Description = 2;
    // The name of the parameter.
    string Name = 3;
    // The type of parameter. The type can be either String or StringList.
    DocumentParameterType Type = 4;
}





repeated DocumentParameter DocumentParameterList = 1



enum DocumentParameterType {
    STRING = 0;
    STRINGLIST = 1;
}

message DocumentPermissionLimit {
    string Message = 1;
}

enum DocumentPermissionType {
    SHARE = 0;
}

enum DocumentStatu {
    CREATING = 0;
    ACTIVE = 1;
    UPDATING = 2;
    DELETING = 3;
}

enum DocumentType {
    COMMAND = 0;
    POLICY = 1;
    AUTOMATION = 2;
}

message DocumentVersionInfo {
    // The date the document was created.
    string CreatedDate = 1;
    // The document version.
    string DocumentVersion = 2;
    // An identifier for the default version of the document.
    boolean IsDefaultVersion = 3;
    // The document name.
    string Name = 4;
}

message DocumentVersionLimitExceeded {
    string Message = 1;
}

repeated DocumentVersionInfo DocumentVersionList = 1



message DoesNotExistException {
    string Message = 1;
}

message DuplicateDocumentContent {
    string Message = 1;
}

message DuplicateInstanceId {
}

message EffectivePatch {
    // Provides metadata for a patch, including information such as the KB ID, severity, classification and a URL for where more information can be obtained about the patch.
    Patch Patch = 1;
    // The status of the patch in a patch baseline. This includes information about whether the patch is currently approved, due to be approved by a rule, explicitly approved, or explicitly rejected and the date the patch was or will be approved.
    PatchStatus PatchStatus = 2;
}

repeated EffectivePatch EffectivePatchList = 1





message FailedCreateAssociation {
    // The association.
    CreateAssociationBatchRequestEntry Entry = 1;
    // The source of the failure.
    Fault Fault = 2;
    // A description of the failure.
    string Message = 3;
}

repeated FailedCreateAssociation FailedCreateAssociationList = 1

message FailureDetails {
    // Detailed information about the Automation step failure.
    array Details = 1;
    // The stage of the Automation execution when the failure occurred. The stages include the following: InputValidation, PreVerification, Invocation, PostVerification.
    string FailureStage = 2;
    // The type of Automation failure. Failure types include the following: Action, Permission, Throttling, Verification, Internal.
    string FailureType = 3;
}

enum Fault {
    CLIENT = 0;
    SERVER = 1;
    UNKNOWN = 2;
}

message FeatureNotAvailableException {
    string Message = 1;
}

message GetAutomationExecutionRequest {
    // The unique identifier for an existing automation execution to examine. The execution ID is returned by StartAutomationExecution when the execution of an Automation document is initiated.
    string AutomationExecutionId = 1;
}

message GetAutomationExecutionResult {
    // Detailed information about the current state of an automation execution.
    AutomationExecution AutomationExecution = 1;
}

message GetCommandInvocationRequest {
    // (Required) The parent command ID of the invocation plugin.
    string CommandId = 1;
    // (Required) The ID of the managed instance targeted by the command. A managed instance can be an Amazon EC2 instance or an instance in your hybrid environment that is configured for Systems Manager.
    string InstanceId = 2;
    // (Optional) The name of the plugin for which you want detailed results. If the document contains only one plugin, the name can be omitted and the details will be returned.
    string PluginName = 3;
}

message GetCommandInvocationResult {
    // The parent command ID of the invocation plugin.
    string CommandId = 1;
    // The comment text for the command.
    string Comment = 2;
    // The name of the document that was executed. For example, AWS-RunShellScript.
    string DocumentName = 3;
    // Duration since ExecutionStartDateTime.
    string ExecutionElapsedTime = 4;
    // <p>The date and time the plugin was finished executing. Date and time are written in ISO 8601 format. For example, June 7, 2017 is represented as 2017-06-7. The following sample AWS CLI command uses the <code>InvokedAfter</code> filter.</p> <p> <code>aws ssm list-commands --filters key=InvokedAfter,value=2017-06-07T00:00:00Z</code> </p> <p>If the plugin has not started to execute, the string is empty.</p>
    string ExecutionEndDateTime = 5;
    // <p>The date and time the plugin started executing. Date and time are written in ISO 8601 format. For example, June 7, 2017 is represented as 2017-06-7. The following sample AWS CLI command uses the <code>InvokedBefore</code> filter.</p> <p> <code>aws ssm list-commands --filters key=InvokedBefore,value=2017-06-07T00:00:00Z</code> </p> <p>If the plugin has not started to execute, the string is empty.</p>
    string ExecutionStartDateTime = 6;
    // The ID of the managed instance targeted by the command. A managed instance can be an Amazon EC2 instance or an instance in your hybrid environment that is configured for Systems Manager.
    string InstanceId = 7;
    // The name of the plugin for which you want detailed results. For example, aws:RunShellScript is a plugin.
    string PluginName = 8;
    // The error level response code for the plugin script. If the response code is -1, then the command has not started executing on the instance, or it was not received by the instance.
    integer ResponseCode = 9;
    // The first 8,000 characters written by the plugin to stderr. If the command has not finished executing, then this string is empty.
    string StandardErrorContent = 10;
    // The URL for the complete text written by the plugin to stderr. If the command has not finished executing, then this string is empty.
    string StandardErrorUrl = 11;
    // The first 24,000 characters written by the plugin to stdout. If the command has not finished executing, if ExecutionStatus is neither Succeeded nor Failed, then this string is empty.
    string StandardOutputContent = 12;
    // The URL for the complete text written by the plugin to stdout in Amazon S3. If an Amazon S3 bucket was not specified, then this string is empty.
    string StandardOutputUrl = 13;
    // The status of the parent command for this invocation. This status can be different than StatusDetails.
    CommandInvocationStatus Status = 14;
    // <p>A detailed status of the command execution for an invocation. StatusDetails includes more information than Status because it includes states resulting from error and concurrency control parameters. StatusDetails can show different results than Status. For more information about these statuses, see <a href="http://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-about-status.html">Run Command Status</a>. StatusDetails can be one of the following values:</p> <ul> <li> <p>Pending: The command has not been sent to the instance.</p> </li> <li> <p>In Progress: The command has been sent to the instance but has not reached a terminal state.</p> </li> <li> <p>Delayed: The system attempted to send the command to the target, but the target was not available. The instance might not be available because of network issues, the instance was stopped, etc. The system will try to deliver the command again.</p> </li> <li> <p>Success: The command or plugin was executed successfully. This is a terminal state.</p> </li> <li> <p>Delivery Timed Out: The command was not delivered to the instance before the delivery timeout expired. Delivery timeouts do not count against the parent command's MaxErrors limit, but they do contribute to whether the parent command status is Success or Incomplete. This is a terminal state.</p> </li> <li> <p>Execution Timed Out: The command started to execute on the instance, but the execution was not complete before the timeout expired. Execution timeouts count against the MaxErrors limit of the parent command. This is a terminal state.</p> </li> <li> <p>Failed: The command wasn't executed successfully on the instance. For a plugin, this indicates that the result code was not zero. For a command invocation, this indicates that the result code for one or more plugins was not zero. Invocation failures count against the MaxErrors limit of the parent command. This is a terminal state.</p> </li> <li> <p>Canceled: The command was terminated before it was completed. This is a terminal state.</p> </li> <li> <p>Undeliverable: The command can't be delivered to the instance. The instance might not exist or might not be responding. Undeliverable invocations don't count against the parent command's MaxErrors limit and don't contribute to whether the parent command status is Success or Incomplete. This is a terminal state.</p> </li> <li> <p>Terminated: The parent command exceeded its MaxErrors limit and subsequent command invocations were canceled by the system. This is a terminal state.</p> </li> </ul>
    string StatusDetails = 15;
}

message GetDefaultPatchBaselineRequest {
    // Returns the default patch baseline for the specified operating system.
    OperatingSystem OperatingSystem = 1;
}

message GetDefaultPatchBaselineResult {
    // The ID of the default patch baseline.
    string BaselineId = 1;
    // The operating system for the returned patch baseline.
    OperatingSystem OperatingSystem = 2;
}

message GetDeployablePatchSnapshotForInstanceRequest {
    // The ID of the instance for which the appropriate patch snapshot should be retrieved.
    string InstanceId = 1;
    // The user-defined snapshot ID.
    string SnapshotId = 2;
}

message GetDeployablePatchSnapshotForInstanceResult {
    // The ID of the instance.
    string InstanceId = 1;
    // Returns the specific operating system (for example Windows Server 2012 or Amazon Linux 2015.09) on the instance for the specified patch snapshot.
    string Product = 2;
    // A pre-signed Amazon S3 URL that can be used to download the patch snapshot.
    string SnapshotDownloadUrl = 3;
    // The user-defined snapshot ID.
    string SnapshotId = 4;
}

message GetDocumentRequest {
    // The document version for which you want information.
    string DocumentVersion = 1;
    // The name of the Systems Manager document.
    string Name = 2;
}

message GetDocumentResult {
    // The contents of the Systems Manager document.
    string Content = 1;
    // The document type.
    DocumentType DocumentType = 2;
    // The document version.
    string DocumentVersion = 3;
    // The name of the Systems Manager document.
    string Name = 4;
}

message GetInventoryRequest {
    // One or more filters. Use a filter to return a more specific list of results.
    array Filters = 1;
    // The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    integer MaxResults = 2;
    // The token for the next set of items to return. (You received this token from a previous call.)
    string NextToken = 3;
    // The list of inventory item types to return.
    array ResultAttributes = 4;
}

message GetInventoryResult {
    // Collection of inventory entities such as a collection of instance inventory.
    array Entities = 1;
    // The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
    string NextToken = 2;
}

message GetInventorySchemaRequest {
    // The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    integer MaxResults = 1;
    // The token for the next set of items to return. (You received this token from a previous call.)
    string NextToken = 2;
    // Returns the sub-type schema for a specified inventory type.
    boolean SubType = 3;
    // The type of inventory item to return.
    string TypeName = 4;
}

message GetInventorySchemaResult {
    // The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
    string NextToken = 1;
    // Inventory schemas returned by the request.
    array Schemas = 2;
}

message GetMaintenanceWindowExecutionRequest {
    // The ID of the Maintenance Window execution that includes the task.
    string WindowExecutionId = 1;
}

message GetMaintenanceWindowExecutionResult {
    // The time the Maintenance Window finished executing.
    string EndTime = 1;
    // The time the Maintenance Window started executing.
    string StartTime = 2;
    // The status of the Maintenance Window execution.
    MaintenanceWindowExecutionStatus Status = 3;
    // The details explaining the Status. Only available for certain status values.
    string StatusDetails = 4;
    // The ID of the task executions from the Maintenance Window execution.
    array TaskIds = 5;
    // The ID of the Maintenance Window execution.
    string WindowExecutionId = 6;
}

message GetMaintenanceWindowExecutionTaskInvocationRequest {
    // The invocation ID to retrieve.
    string InvocationId = 1;
    // The ID of the specific task in the Maintenance Window task that should be retrieved.
    string TaskId = 2;
    // The ID of the Maintenance Window execution for which the task is a part.
    string WindowExecutionId = 3;
}

message GetMaintenanceWindowExecutionTaskInvocationResult {
    // The time that the task finished executing on the target.
    string EndTime = 1;
    // The execution ID.
    string ExecutionId = 2;
    // The invocation ID.
    string InvocationId = 3;
    // User-provided value to be included in any CloudWatch events raised while running tasks for these targets in this Maintenance Window.
    string OwnerInformation = 4;
    // The parameters used at the time that the task executed.
    string Parameters = 5;
    // The time that the task started executing on the target.
    string StartTime = 6;
    // The task status for an invocation.
    MaintenanceWindowExecutionStatus Status = 7;
    // The details explaining the status. Details are only available for certain status values.
    string StatusDetails = 8;
    // The task execution ID.
    string TaskExecutionId = 9;
    // Retrieves the task type for a Maintenance Window. Task types include the following: LAMBDA, STEP_FUNCTION, AUTOMATION, RUN_COMMAND.
    MaintenanceWindowTaskType TaskType = 10;
    // The Maintenance Window execution ID.
    string WindowExecutionId = 11;
    // The Maintenance Window target ID.
    string WindowTargetId = 12;
}

message GetMaintenanceWindowExecutionTaskRequest {
    // The ID of the specific task execution in the Maintenance Window task that should be retrieved.
    string TaskId = 1;
    // The ID of the Maintenance Window execution that includes the task.
    string WindowExecutionId = 2;
}

message GetMaintenanceWindowExecutionTaskResult {
    // The time the task execution completed.
    string EndTime = 1;
    // The defined maximum number of task executions that could be run in parallel.
    string MaxConcurrency = 2;
    // The defined maximum number of task execution errors allowed before scheduling of the task execution would have been stopped.
    string MaxErrors = 3;
    // The priority of the task.
    integer Priority = 4;
    // The role that was assumed when executing the task.
    string ServiceRole = 5;
    // The time the task execution started.
    string StartTime = 6;
    // The status of the task.
    MaintenanceWindowExecutionStatus Status = 7;
    // The details explaining the Status. Only available for certain status values.
    string StatusDetails = 8;
    // The ARN of the executed task.
    string TaskArn = 9;
    // The ID of the specific task execution in the Maintenance Window task that was retrieved.
    string TaskExecutionId = 10;
    // <p>The parameters passed to the task when it was executed. The map has the following format:</p> <p>Key: string, between 1 and 255 characters</p> <p>Value: an array of strings, each string is between 1 and 255 characters</p>
    array TaskParameters = 11;
    // The type of task executed.
    MaintenanceWindowTaskType Type = 12;
    // The ID of the Maintenance Window execution that includes the task.
    string WindowExecutionId = 13;
}

message GetMaintenanceWindowRequest {
    // The ID of the desired Maintenance Window.
    string WindowId = 1;
}

message GetMaintenanceWindowResult {
    // Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets.
    boolean AllowUnassociatedTargets = 1;
    // The date the Maintenance Window was created.
    string CreatedDate = 2;
    // The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
    integer Cutoff = 3;
    // The description of the Maintenance Window.
    string Description = 4;
    // The duration of the Maintenance Window in hours.
    integer Duration = 5;
    // Whether the Maintenance Windows is enabled.
    boolean Enabled = 6;
    // The date the Maintenance Window was last modified.
    string ModifiedDate = 7;
    // The name of the Maintenance Window.
    string Name = 8;
    // The schedule of the Maintenance Window in the form of a cron or rate expression.
    string Schedule = 9;
    // The ID of the created Maintenance Window.
    string WindowId = 10;
}

message GetMaintenanceWindowTaskRequest {
    // The Maintenance Window ID that includes the task to retrieve.
    string WindowId = 1;
    // The Maintenance Window task ID to retrieve.
    string WindowTaskId = 2;
}

message GetMaintenanceWindowTaskResult {
    // The retrieved task description.
    string Description = 1;
    // The location in Amazon S3 where the task results are logged.
    LoggingInfo LoggingInfo = 2;
    // The maximum number of targets allowed to run this task in parallel.
    string MaxConcurrency = 3;
    // The maximum number of errors allowed before the task stops being scheduled.
    string MaxErrors = 4;
    // The retrieved task name.
    string Name = 5;
    // The priority of the task when it executes. The lower the number, the higher the priority. Tasks that have the same priority are scheduled in parallel.
    integer Priority = 6;
    // The IAM service role to assume during task execution.
    string ServiceRoleArn = 7;
    // The targets where the task should execute.
    array Targets = 8;
    // The resource that the task used during execution. For RUN_COMMAND and AUTOMATION task types, the TaskArn is the Systems Manager Document name/ARN. For LAMBDA tasks, the value is the function name/ARN. For STEP_FUNCTION tasks, the value is the state machine ARN.
    string TaskArn = 9;
    // The parameters to pass to the task when it executes.
    MaintenanceWindowTaskInvocationParameters TaskInvocationParameters = 10;
    // The parameters to pass to the task when it executes.
    array TaskParameters = 11;
    // The type of task to execute.
    MaintenanceWindowTaskType TaskType = 12;
    // The retrieved Maintenance Window ID.
    string WindowId = 13;
    // The retrieved Maintenance Window task ID.
    string WindowTaskId = 14;
}

message GetParameterHistoryRequest {
    // The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    integer MaxResults = 1;
    // The name of a parameter you want to query.
    string Name = 2;
    // The token for the next set of items to return. (You received this token from a previous call.)
    string NextToken = 3;
    // Return decrypted values for secure string parameters. This flag is ignored for String and StringList parameter types.
    boolean WithDecryption = 4;
}

message GetParameterHistoryResult {
    // The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
    string NextToken = 1;
    // A list of parameters returned by the request.
    array Parameters = 2;
}

message GetParameterRequest {
    // The name of the parameter you want to query.
    string Name = 1;
    // Return decrypted values for secure string parameters. This flag is ignored for String and StringList parameter types.
    boolean WithDecryption = 2;
}

message GetParameterResult {
    // Information about a parameter.
    Parameter Parameter = 1;
}

message GetParametersByPathRequest {
    // The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    integer MaxResults = 1;
    // A token to start the list. Use this token to get the next set of results.
    string NextToken = 2;
    // Filters to limit the request results.
    array ParameterFilters = 3;
    // <p>The hierarchy for the parameter. Hierarchies start with a forward slash (/) and end with the parameter name. A hierarchy can have a maximum of five levels. Examples: /Environment/Test/DBString003</p> <p>/Finance/Prod/IAD/OS/WinServ2016/license15</p>
    string Path = 4;
    // Retrieve all parameters within a hierarchy.
    boolean Recursive = 5;
    // Retrieve all parameters in a hierarchy with their value decrypted.
    boolean WithDecryption = 6;
}

message GetParametersByPathResult {
    // The token for the next set of items to return. Use this token to get the next set of results.
    string NextToken = 1;
    // A list of parameters found in the specified hierarchy.
    array Parameters = 2;
}

message GetParametersRequest {
    // Names of the parameters for which you want to query information.
    array Names = 1;
    // Return decrypted secure string value. Return decrypted values for secure string parameters. This flag is ignored for String and StringList parameter types.
    boolean WithDecryption = 2;
}

message GetParametersResult {
    // A list of parameters that are not formatted correctly or do not run when executed.
    array InvalidParameters = 1;
    // A list of details for a parameter.
    array Parameters = 2;
}

message GetPatchBaselineForPatchGroupRequest {
    // Returns he operating system rule specified for patch groups using the patch baseline.
    OperatingSystem OperatingSystem = 1;
    // The name of the patch group whose patch baseline should be retrieved.
    string PatchGroup = 2;
}

message GetPatchBaselineForPatchGroupResult {
    // The ID of the patch baseline that should be used for the patch group.
    string BaselineId = 1;
    // The operating system rule specified for patch groups using the patch baseline.
    OperatingSystem OperatingSystem = 2;
    // The name of the patch group.
    string PatchGroup = 3;
}

message GetPatchBaselineRequest {
    // The ID of the patch baseline to retrieve.
    string BaselineId = 1;
}

message GetPatchBaselineResult {
    // A set of rules used to include patches in the baseline.
    PatchRuleGroup ApprovalRules = 1;
    // A list of explicitly approved patches for the baseline.
    array ApprovedPatches = 2;
    // Returns the specified compliance severity level for approved patches in the patch baseline.
    PatchComplianceLevel ApprovedPatchesComplianceLevel = 3;
    // The ID of the retrieved patch baseline.
    string BaselineId = 4;
    // The date the patch baseline was created.
    string CreatedDate = 5;
    // A description of the patch baseline.
    string Description = 6;
    // A set of global filters used to exclude patches from the baseline.
    PatchFilterGroup GlobalFilters = 7;
    // The date the patch baseline was last modified.
    string ModifiedDate = 8;
    // The name of the patch baseline.
    string Name = 9;
    // Returns the operating system specified for the patch baseline.
    OperatingSystem OperatingSystem = 10;
    // Patch groups included in the patch baseline.
    array PatchGroups = 11;
    // A list of explicitly rejected patches for the baseline.
    array RejectedPatches = 12;
}

message HierarchyLevelLimitExceededException {
    // <p>A hierarchy can have a maximum of five levels. For example:</p> <p>/Finance/Prod/IAD/OS/WinServ2016/license15</p> <p>For more information, see <a href="http://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-paramstore-working.html">Working with Systems Manager Parameters</a>. </p>
    string message = 1;
}

message HierarchyTypeMismatchException {
    // Parameter Store does not support changing a parameter type in a hierarchy. For example, you can't change a parameter from a String type to a SecureString type. You must create a new, unique parameter.
    string message = 1;
}

message IdempotentParameterMismatch {
    string Message = 1;
}

message InstanceAggregatedAssociationOverview {
    // Detailed status information about the aggregated associations.
    string DetailedStatus = 1;
    // The number of associations for the instance(s).
    array InstanceAssociationStatusAggregatedCount = 2;
}

message InstanceAssociation {
    // The association ID.
    string AssociationId = 1;
    // Version information for the association on the instance.
    string AssociationVersion = 2;
    // The content of the association document for the instance(s).
    string Content = 3;
    // The instance ID.
    string InstanceId = 4;
}



repeated InstanceAssociation InstanceAssociationList = 1

message InstanceAssociationOutputLocation {
    // An Amazon S3 bucket where you want to store the results of this request.
    S3OutputLocation S3Location = 1;
}

message InstanceAssociationOutputUrl {
    // The URL of Amazon S3 bucket where you want to store the results of this request.
    S3OutputUrl S3OutputUrl = 1;
}

message InstanceAssociationStatusAggregatedCount {
    string key = 1;
    integer value = 2;
}
repeated InstanceAssociationStatusAggregatedCount InstanceAssociationStatusAggregatedCount = 1

message InstanceAssociationStatusInfo {
    // The association ID.
    string AssociationId = 1;
    // The name of the association applied to the instance.
    string AssociationName = 2;
    // The version of the association applied to the instance.
    string AssociationVersion = 3;
    // Detailed status information about the instance association.
    string DetailedStatus = 4;
    // The association document verions.
    string DocumentVersion = 5;
    // An error code returned by the request to create the association.
    string ErrorCode = 6;
    // The date the instance association executed.
    string ExecutionDate = 7;
    // Summary information about association execution.
    string ExecutionSummary = 8;
    // The instance ID where the association was created.
    string InstanceId = 9;
    // The name of the association.
    string Name = 10;
    // A URL for an Amazon S3 bucket where you want to store the results of this request.
    InstanceAssociationOutputUrl OutputUrl = 11;
    // Status information about the instance association.
    string Status = 12;
}

repeated InstanceAssociationStatusInfo InstanceAssociationStatusInfos = 1





repeated string InstanceIdList = 1

message InstanceInformation {
    // The activation ID created by Systems Manager when the server or VM was registered.
    string ActivationId = 1;
    // The version of the SSM Agent running on your Linux instance.
    string AgentVersion = 2;
    // Information about the association.
    InstanceAggregatedAssociationOverview AssociationOverview = 3;
    // The status of the association.
    string AssociationStatus = 4;
    // The fully qualified host name of the managed instance.
    string ComputerName = 5;
    // The IP address of the managed instance.
    string IPAddress = 6;
    // The Amazon Identity and Access Management (IAM) role assigned to EC2 instances or managed instances.
    string IamRole = 7;
    // The instance ID.
    string InstanceId = 8;
    // Indicates whether latest version of the SSM Agent is running on your instance.
    boolean IsLatestVersion = 9;
    // The date the association was last executed.
    string LastAssociationExecutionDate = 10;
    // The date and time when agent last pinged Systems Manager service.
    string LastPingDateTime = 11;
    // The last date the association was successfully run.
    string LastSuccessfulAssociationExecutionDate = 12;
    // The name of the managed instance.
    string Name = 13;
    // Connection status of the SSM Agent.
    PingStatus PingStatus = 14;
    // The name of the operating system platform running on your instance.
    string PlatformName = 15;
    // The operating system platform type.
    PlatformType PlatformType = 16;
    // The version of the OS platform running on your instance.
    string PlatformVersion = 17;
    // The date the server or VM was registered with AWS as a managed instance.
    string RegistrationDate = 18;
    // The type of instance. Instances are either EC2 instances or managed instances.
    ResourceType ResourceType = 19;
}

message InstanceInformationFilter {
    // The name of the filter.
    InstanceInformationFilterKey key = 1;
    // The filter values.
    array valueSet = 2;
}

enum InstanceInformationFilterKey {
    INSTANCEIDS = 0;
    AGENTVERSION = 1;
    PINGSTATUS = 2;
    PLATFORMTYPES = 3;
    ACTIVATIONIDS = 4;
    IAMROLE = 5;
    RESOURCETYPE = 6;
    ASSOCIATIONSTATUS = 7;
}

repeated InstanceInformationFilter InstanceInformationFilterList = 1



repeated string InstanceInformationFilterValueSet = 1

repeated InstanceInformation InstanceInformationList = 1

message InstanceInformationStringFilter {
    // <p>The filter key name to describe your instances. For example:</p> <p>"InstanceIds"|"AgentVersion"|"PingStatus"|"PlatformTypes"|"ActivationIds"|"IamRole"|"ResourceType"|"AssociationStatus"|"Tag Key"</p>
    string Key = 1;
    // The filter values.
    array Values = 2;
}



repeated InstanceInformationStringFilter InstanceInformationStringFilterList = 1

message InstancePatchState {
    // The ID of the patch baseline used to patch the instance.
    string BaselineId = 1;
    // The number of patches from the patch baseline that were attempted to be installed during the last patching operation, but failed to install.
    integer FailedCount = 2;
    // The number of patches from the patch baseline that are installed on the instance.
    integer InstalledCount = 3;
    // The number of patches not specified in the patch baseline that are installed on the instance.
    integer InstalledOtherCount = 4;
    // The ID of the managed instance the high-level patch compliance information was collected for.
    string InstanceId = 5;
    // The number of patches from the patch baseline that are applicable for the instance but aren't currently installed.
    integer MissingCount = 6;
    // The number of patches from the patch baseline that aren't applicable for the instance and hence aren't installed on the instance.
    integer NotApplicableCount = 7;
    // The type of patching operation that was performed: SCAN (assess patch compliance state) or INSTALL (install missing patches).
    PatchOperationType Operation = 8;
    // The time the most recent patching operation completed on the instance.
    string OperationEndTime = 9;
    // The time the most recent patching operation was started on the instance.
    string OperationStartTime = 10;
    // Placeholder information, this field will always be empty in the current release of the service.
    string OwnerInformation = 11;
    // The name of the patch group the managed instance belongs to.
    string PatchGroup = 12;
    // The ID of the patch baseline snapshot used during the patching operation when this compliance data was collected.
    string SnapshotId = 13;
}

message InstancePatchStateFilter {
    // The key for the filter. Supported values are FailedCount, InstalledCount, InstalledOtherCount, MissingCount and NotApplicableCount.
    string Key = 1;
    // The type of comparison that should be performed for the value: Equal, NotEqual, LessThan or GreaterThan.
    InstancePatchStateOperatorType Type = 2;
    // The value for the filter, must be an integer greater than or equal to 0.
    array Values = 3;
}



repeated InstancePatchStateFilter InstancePatchStateFilterList = 1



repeated string InstancePatchStateFilterValues = 1

repeated InstancePatchState InstancePatchStateList = 1

enum InstancePatchStateOperatorType {
    EQUAL = 0;
    NOTEQUAL = 1;
    LESSTHAN = 2;
    GREATERTHAN = 3;
}

repeated InstancePatchState InstancePatchStatesList = 1





message InternalServerError {
    string Message = 1;
}

message InvalidActivation {
    string Message = 1;
}

message InvalidActivationId {
    string Message = 1;
}

message InvalidAllowedPatternException {
    // The request does not meet the regular expression requirement.
    string message = 1;
}

message InvalidAssociationVersion {
    string Message = 1;
}

message InvalidAutomationExecutionParametersException {
    string Message = 1;
}

message InvalidAutomationSignalException {
    string Message = 1;
}

message InvalidCommandId {
}

message InvalidDocument {
    // The document does not exist or the document is not available to the user. This exception can be issued by CreateAssociation, CreateAssociationBatch, DeleteAssociation, DeleteDocument, DescribeAssociation, DescribeDocument, GetDocument, SendCommand, or UpdateAssociationStatus.
    string Message = 1;
}

message InvalidDocumentContent {
    // A description of the validation error.
    string Message = 1;
}

message InvalidDocumentOperation {
    string Message = 1;
}

message InvalidDocumentSchemaVersion {
    string Message = 1;
}

message InvalidDocumentVersion {
    string Message = 1;
}

message InvalidFilter {
    string Message = 1;
}

message InvalidFilterKey {
}

message InvalidFilterOption {
    // The specified filter option is not valid. Valid options are Equals and BeginsWith. For Path filter, valid options are Recursive and OneLevel.
    string message = 1;
}

message InvalidFilterValue {
    string Message = 1;
}

message InvalidInstanceId {
    string Message = 1;
}

message InvalidInstanceInformationFilterValue {
    string message = 1;
}

message InvalidInventoryItemContextException {
    string Message = 1;
}

message InvalidItemContentException {
    string Message = 1;
    string TypeName = 2;
}

message InvalidKeyId {
    string message = 1;
}

message InvalidNextToken {
    string Message = 1;
}

message InvalidNotificationConfig {
    string Message = 1;
}

message InvalidOutputFolder {
}

message InvalidOutputLocation {
}

message InvalidParameters {
    string Message = 1;
}

message InvalidPermissionType {
    string Message = 1;
}

message InvalidPluginName {
}

message InvalidResourceId {
}

message InvalidResourceType {
}

message InvalidResultAttributeException {
    string Message = 1;
}

message InvalidRole {
    string Message = 1;
}

message InvalidSchedule {
    string Message = 1;
}

message InvalidTarget {
    string Message = 1;
}

message InvalidTypeNameException {
    string Message = 1;
}

message InvalidUpdate {
    string Message = 1;
}

enum InventoryAttributeDataType {
    STRING = 0;
    NUMBER = 1;
}

message InventoryFilter {
    // The name of the filter key.
    string Key = 1;
    // The type of filter. Valid values include the following: "Equal"|"NotEqual"|"BeginWith"|"LessThan"|"GreaterThan"
    InventoryQueryOperatorType Type = 2;
    // Inventory filter values. Example: inventory filter where instance IDs are specified as values Key=AWS:InstanceInformation.InstanceId,Values= i-a12b3c4d5e6g, i-1a2b3c4d5e6,Type=Equal
    array Values = 3;
}



repeated InventoryFilter InventoryFilterList = 1



repeated string InventoryFilterValueList = 1

message InventoryItem {
    // The time the inventory information was collected.
    string CaptureTime = 1;
    // The inventory data of the inventory type.
    array Content = 2;
    // MD5 hash of the inventory item type contents. The content hash is used to determine whether to update inventory information. The PutInventory API does not update the inventory item type contents if the MD5 hash has not changed since last update.
    string ContentHash = 3;
    // A map of associated properties for a specified inventory type. For example, with this attribute, you can specify the <code>ExecutionId</code>, <code>ExecutionType</code>, <code>ComplianceType</code> properties of the <code>AWS:ComplianceItem</code> type.
    array Context = 4;
    // The schema version for the inventory item.
    string SchemaVersion = 5;
    // The name of the inventory type. Default inventory item type names start with AWS. Custom inventory type names will start with Custom. Default inventory item types include the following: AWS:AWSComponent, AWS:Application, AWS:InstanceInformation, AWS:Network, and AWS:WindowsUpdate.
    string TypeName = 6;
}

message InventoryItemAttribute {
    // The data type of the inventory item attribute.
    InventoryAttributeDataType DataType = 1;
    // Name of the inventory item attribute.
    string Name = 2;
}

repeated InventoryItemAttribute InventoryItemAttributeList = 1





message InventoryItemContentContext {
    string key = 1;
    string value = 2;
}
repeated InventoryItemContentContext InventoryItemContentContext = 1



message InventoryItemEntry {
    string key = 1;
    string value = 2;
}
repeated InventoryItemEntry InventoryItemEntry = 1

repeated array InventoryItemEntryList = 1

repeated InventoryItem InventoryItemList = 1

message InventoryItemSchema {
    // The schema attributes for inventory. This contains data type and attribute name.
    array Attributes = 1;
    // The name of the inventory type. Default inventory item type names start with AWS. Custom inventory type names will start with Custom. Default inventory item types include the following: AWS:AWSComponent, AWS:Application, AWS:InstanceInformation, AWS:Network, and AWS:WindowsUpdate.
    string TypeName = 2;
    // The schema version for the inventory item.
    string Version = 3;
}

repeated InventoryItemSchema InventoryItemSchemaResultList = 1







enum InventoryQueryOperatorType {
    EQUAL = 0;
    NOTEQUAL = 1;
    BEGINWITH = 2;
    LESSTHAN = 3;
    GREATERTHAN = 4;
}

message InventoryResultEntity {
    // The data section in the inventory result entity json.
    array Data = 1;
    // ID of the inventory result entity. For example, for managed instance inventory the result will be the managed instance ID. For EC2 instance inventory, the result will be the instance ID.
    string Id = 2;
}



repeated InventoryResultEntity InventoryResultEntityList = 1

message InventoryResultItem {
    // The time inventory item data was captured.
    string CaptureTime = 1;
    // Contains all the inventory data of the item type. Results include attribute names and values.
    array Content = 2;
    // MD5 hash of the inventory item type contents. The content hash is used to determine whether to update inventory information. The PutInventory API does not update the inventory item type contents if the MD5 hash has not changed since last update.
    string ContentHash = 3;
    // The schema version for the inventory result item
    string SchemaVersion = 4;
    // The name of the inventory result item type.
    string TypeName = 5;
}

message InventoryResultItemMap {
    string key = 1;
    InventoryResultItem value = 2;
}
repeated InventoryResultItemMap InventoryResultItemMap = 1

message InvocationDoesNotExist {
}

message ItemContentMismatchException {
    string Message = 1;
    string TypeName = 2;
}

message ItemSizeLimitExceededException {
    string Message = 1;
    string TypeName = 2;
}

repeated string KeyList = 1

enum LastResourceDataSyncStatu {
    SUCCESSFUL = 0;
    FAILED = 1;
    INPROGRESS = 2;
}

message ListAssociationVersionsRequest {
    // The association ID for which you want to view all versions.
    string AssociationId = 1;
    // The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    integer MaxResults = 2;
    // A token to start the list. Use this token to get the next set of results.
    string NextToken = 3;
}

message ListAssociationVersionsResult {
    // Information about all versions of the association for the specified association ID.
    array AssociationVersions = 1;
    // The token for the next set of items to return. Use this token to get the next set of results.
    string NextToken = 2;
}

message ListAssociationsRequest {
    // One or more filters. Use a filter to return a more specific list of results.
    array AssociationFilterList = 1;
    // The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    integer MaxResults = 2;
    // The token for the next set of items to return. (You received this token from a previous call.)
    string NextToken = 3;
}

message ListAssociationsResult {
    // The associations.
    array Associations = 1;
    // The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
    string NextToken = 2;
}

message ListCommandInvocationsRequest {
    // (Optional) The invocations for a specific command ID.
    string CommandId = 1;
    // (Optional) If set this returns the response of the command executions and any command output. By default this is set to False.
    boolean Details = 2;
    // (Optional) One or more filters. Use a filter to return a more specific list of results.
    array Filters = 3;
    // (Optional) The command execution details for a specific instance ID.
    string InstanceId = 4;
    // (Optional) The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    integer MaxResults = 5;
    // (Optional) The token for the next set of items to return. (You received this token from a previous call.)
    string NextToken = 6;
}

message ListCommandInvocationsResult {
    // (Optional) A list of all invocations.
    array CommandInvocations = 1;
    // (Optional) The token for the next set of items to return. (You received this token from a previous call.)
    string NextToken = 2;
}

message ListCommandsRequest {
    // (Optional) If provided, lists only the specified command.
    string CommandId = 1;
    // (Optional) One or more filters. Use a filter to return a more specific list of results.
    array Filters = 2;
    // (Optional) Lists commands issued against this instance ID.
    string InstanceId = 3;
    // (Optional) The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    integer MaxResults = 4;
    // (Optional) The token for the next set of items to return. (You received this token from a previous call.)
    string NextToken = 5;
}

message ListCommandsResult {
    // (Optional) The list of commands requested by the user.
    array Commands = 1;
    // (Optional) The token for the next set of items to return. (You received this token from a previous call.)
    string NextToken = 2;
}

message ListComplianceItemsRequest {
    // One or more compliance filters. Use a filter to return a more specific list of results.
    array Filters = 1;
    // The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    integer MaxResults = 2;
    // A token to start the list. Use this token to get the next set of results.
    string NextToken = 3;
    // The ID for the resources from which to get compliance information. Currently, you can only specify one resource ID.
    array ResourceIds = 4;
    // The type of resource from which to get compliance information. Currently, the only supported resource type is <code>ManagedInstance</code>.
    array ResourceTypes = 5;
}

message ListComplianceItemsResult {
    // A list of compliance information for the specified resource ID.
    array ComplianceItems = 1;
    // The token for the next set of items to return. Use this token to get the next set of results.
    string NextToken = 2;
}

message ListComplianceSummariesRequest {
    // One or more compliance or inventory filters. Use a filter to return a more specific list of results.
    array Filters = 1;
    // The maximum number of items to return for this call. Currently, you can specify null or 50. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    integer MaxResults = 2;
    // A token to start the list. Use this token to get the next set of results.
    string NextToken = 3;
}

message ListComplianceSummariesResult {
    // A list of compliant and non-compliant summary counts based on compliance types. For example, this call returns State Manager associations, patches, or custom compliance types according to the filter criteria that you specified.
    array ComplianceSummaryItems = 1;
    // The token for the next set of items to return. Use this token to get the next set of results.
    string NextToken = 2;
}

message ListDocumentVersionsRequest {
    // The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    integer MaxResults = 1;
    // The name of the document about which you want version information.
    string Name = 2;
    // The token for the next set of items to return. (You received this token from a previous call.)
    string NextToken = 3;
}

message ListDocumentVersionsResult {
    // The document versions.
    array DocumentVersions = 1;
    // The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
    string NextToken = 2;
}

message ListDocumentsRequest {
    // One or more filters. Use a filter to return a more specific list of results.
    array DocumentFilterList = 1;
    // One or more filters. Use a filter to return a more specific list of results.
    array Filters = 2;
    // The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    integer MaxResults = 3;
    // The token for the next set of items to return. (You received this token from a previous call.)
    string NextToken = 4;
}

message ListDocumentsResult {
    // The names of the Systems Manager documents.
    array DocumentIdentifiers = 1;
    // The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
    string NextToken = 2;
}

message ListInventoryEntriesRequest {
    // One or more filters. Use a filter to return a more specific list of results.
    array Filters = 1;
    // The instance ID for which you want inventory information.
    string InstanceId = 2;
    // The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    integer MaxResults = 3;
    // The token for the next set of items to return. (You received this token from a previous call.)
    string NextToken = 4;
    // The type of inventory item for which you want information.
    string TypeName = 5;
}

message ListInventoryEntriesResult {
    // The time that inventory information was collected for the instance(s).
    string CaptureTime = 1;
    // A list of inventory items on the instance(s).
    array Entries = 2;
    // The instance ID targeted by the request to query inventory information.
    string InstanceId = 3;
    // The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
    string NextToken = 4;
    // The inventory schema version used by the instance(s).
    string SchemaVersion = 5;
    // The type of inventory item returned by the request.
    string TypeName = 6;
}

message ListResourceComplianceSummariesRequest {
    // One or more filters. Use a filter to return a more specific list of results.
    array Filters = 1;
    // The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    integer MaxResults = 2;
    // A token to start the list. Use this token to get the next set of results.
    string NextToken = 3;
}

message ListResourceComplianceSummariesResult {
    // The token for the next set of items to return. Use this token to get the next set of results.
    string NextToken = 1;
    // A summary count for specified or targeted managed instances. Summary count includes information about compliant and non-compliant State Manager associations, patch status, or custom items according to the filter criteria that you specify.
    array ResourceComplianceSummaryItems = 2;
}

message ListResourceDataSyncRequest {
    // The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    integer MaxResults = 1;
    // A token to start the list. Use this token to get the next set of results.
    string NextToken = 2;
}

message ListResourceDataSyncResult {
    // The token for the next set of items to return. Use this token to get the next set of results.
    string NextToken = 1;
    // A list of your current Resource Data Sync configurations and their statuses.
    array ResourceDataSyncItems = 2;
}

message ListTagsForResourceRequest {
    // The resource ID for which you want to see a list of tags.
    string ResourceId = 1;
    // Returns a list of tags for a specific resource type.
    ResourceTypeForTagging ResourceType = 2;
}

message ListTagsForResourceResult {
    // A list of tags.
    array TagList = 1;
}

message LoggingInfo {
    // The name of an Amazon S3 bucket where execution logs are stored .
    string S3BucketName = 1;
    // (Optional) The Amazon S3 bucket subfolder.
    string S3KeyPrefix = 2;
    // The region where the Amazon S3 bucket is located.
    string S3Region = 3;
}

message MaintenanceWindowAutomationParameters {
    // The version of an Automation document to use during task execution.
    string DocumentVersion = 1;
    // The parameters for the AUTOMATION task.
    array Parameters = 2;
}

message MaintenanceWindowExecution {
    // The time the execution finished.
    string EndTime = 1;
    // The time the execution started.
    string StartTime = 2;
    // The status of the execution.
    MaintenanceWindowExecutionStatus Status = 3;
    // The details explaining the Status. Only available for certain status values.
    string StatusDetails = 4;
    // The ID of the Maintenance Window execution.
    string WindowExecutionId = 5;
    // The ID of the Maintenance Window.
    string WindowId = 6;
}



repeated MaintenanceWindowExecution MaintenanceWindowExecutionList = 1

enum MaintenanceWindowExecutionStatu {
    PENDING = 0;
    IN_PROGRESS = 1;
    SUCCESS = 2;
    FAILED = 3;
    TIMED_OUT = 4;
    CANCELLING = 5;
    CANCELLED = 6;
    SKIPPED_OVERLAPPING = 7;
}







repeated string MaintenanceWindowExecutionTaskIdList = 1

message MaintenanceWindowExecutionTaskIdentity {
    // The time the task execution finished.
    string EndTime = 1;
    // The time the task execution started.
    string StartTime = 2;
    // The status of the task execution.
    MaintenanceWindowExecutionStatus Status = 3;
    // The details explaining the status of the task execution. Only available for certain status values.
    string StatusDetails = 4;
    // The ARN of the executed task.
    string TaskArn = 5;
    // The ID of the specific task execution in the Maintenance Window execution.
    string TaskExecutionId = 6;
    // The type of executed task.
    MaintenanceWindowTaskType TaskType = 7;
    // The ID of the Maintenance Window execution that ran the task.
    string WindowExecutionId = 8;
}

repeated MaintenanceWindowExecutionTaskIdentity MaintenanceWindowExecutionTaskIdentityList = 1



message MaintenanceWindowExecutionTaskInvocationIdentity {
    // The time the invocation finished.
    string EndTime = 1;
    // The ID of the action performed in the service that actually handled the task invocation. If the task type is RUN_COMMAND, this value is the command ID.
    string ExecutionId = 2;
    // The ID of the task invocation.
    string InvocationId = 3;
    // User-provided value that was specified when the target was registered with the Maintenance Window. This was also included in any CloudWatch events raised during the task invocation.
    string OwnerInformation = 4;
    // The parameters that were provided for the invocation when it was executed.
    string Parameters = 5;
    // The time the invocation started.
    string StartTime = 6;
    // The status of the task invocation.
    MaintenanceWindowExecutionStatus Status = 7;
    // The details explaining the status of the task invocation. Only available for certain Status values.
    string StatusDetails = 8;
    // The ID of the specific task execution in the Maintenance Window execution.
    string TaskExecutionId = 9;
    // The task type.
    MaintenanceWindowTaskType TaskType = 10;
    // The ID of the Maintenance Window execution that ran the task.
    string WindowExecutionId = 11;
    // The ID of the target definition in this Maintenance Window the invocation was performed for.
    string WindowTargetId = 12;
}

repeated MaintenanceWindowExecutionTaskInvocationIdentity MaintenanceWindowExecutionTaskInvocationIdentityList = 1



message MaintenanceWindowFilter {
    // The name of the filter.
    string Key = 1;
    // The filter values.
    array Values = 2;
}



repeated MaintenanceWindowFilter MaintenanceWindowFilterList = 1



repeated string MaintenanceWindowFilterValues = 1



message MaintenanceWindowIdentity {
    // The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
    integer Cutoff = 1;
    // A description of the Maintenance Window.
    string Description = 2;
    // The duration of the Maintenance Window in hours.
    integer Duration = 3;
    // Whether the Maintenance Window is enabled.
    boolean Enabled = 4;
    // The name of the Maintenance Window.
    string Name = 5;
    // The ID of the Maintenance Window.
    string WindowId = 6;
}

repeated MaintenanceWindowIdentity MaintenanceWindowIdentityList = 1



message MaintenanceWindowLambdaParameters {
    // Pass client-specific information to the Lambda function that you are invoking. You can then process the client information in your Lambda function as you choose through the context variable.
    string ClientContext = 1;
    // JSON to provide to your Lambda function as input.
    string Payload = 2;
    // (Optional) Specify a Lambda function version or alias name. If you specify a function version, the action uses the qualified function ARN to invoke a specific Lambda function. If you specify an alias name, the action uses the alias ARN to invoke the Lambda function version to which the alias points.
    string Qualifier = 3;
}

enum MaintenanceWindowResourceType {
    INSTANCE = 0;
}

message MaintenanceWindowRunCommandParameters {
    // Information about the command(s) to execute.
    string Comment = 1;
    // The SHA-256 or SHA-1 hash created by the system when the document was created. SHA-1 hashes have been deprecated.
    string DocumentHash = 2;
    // SHA-256 or SHA-1. SHA-1 hashes have been deprecated.
    DocumentHashType DocumentHashType = 3;
    // Configurations for sending notifications about command status changes on a per-instance basis.
    NotificationConfig NotificationConfig = 4;
    // The name of the Amazon S3 bucket.
    string OutputS3BucketName = 5;
    // The Amazon S3 bucket subfolder.
    string OutputS3KeyPrefix = 6;
    // The parameters for the RUN_COMMAND task execution.
    array Parameters = 7;
    // The IAM service role to assume during task execution.
    string ServiceRoleArn = 8;
    // If this time is reached and the command has not already started executing, it doesn not execute.
    integer TimeoutSeconds = 9;
}

message MaintenanceWindowStepFunctionsParameters {
    // The inputs for the STEP_FUNCTION task.
    string Input = 1;
    // The name of the STEP_FUNCTION task.
    string Name = 2;
}

message MaintenanceWindowTarget {
    // A description of the target.
    string Description = 1;
    // The target name.
    string Name = 2;
    // User-provided value that will be included in any CloudWatch events raised while running tasks for these targets in this Maintenance Window.
    string OwnerInformation = 3;
    // The type of target.
    MaintenanceWindowResourceType ResourceType = 4;
    // The targets (either instances or tags). Instances are specified using Key=instanceids,Values=&lt;instanceid1&gt;,&lt;instanceid2&gt;. Tags are specified using Key=&lt;tag name&gt;,Values=&lt;tag value&gt;.
    array Targets = 5;
    // The Maintenance Window ID where the target is registered.
    string WindowId = 6;
    // The ID of the target.
    string WindowTargetId = 7;
}



repeated MaintenanceWindowTarget MaintenanceWindowTargetList = 1

message MaintenanceWindowTask {
    // A description of the task.
    string Description = 1;
    // Information about an Amazon S3 bucket to write task-level logs to.
    LoggingInfo LoggingInfo = 2;
    // The maximum number of targets this task can be run for in parallel.
    string MaxConcurrency = 3;
    // The maximum number of errors allowed before this task stops being scheduled.
    string MaxErrors = 4;
    // The task name.
    string Name = 5;
    // The priority of the task in the Maintenance Window. The lower the number, the higher the priority. Tasks that have the same priority are scheduled in parallel.
    integer Priority = 6;
    // The role that should be assumed when executing the task
    string ServiceRoleArn = 7;
    // The targets (either instances or tags). Instances are specified using Key=instanceids,Values=&lt;instanceid1&gt;,&lt;instanceid2&gt;. Tags are specified using Key=&lt;tag name&gt;,Values=&lt;tag value&gt;.
    array Targets = 8;
    // The resource that the task uses during execution. For RUN_COMMAND and AUTOMATION task types, <code>TaskArn</code> is the Systems Manager document name or ARN. For LAMBDA tasks, it's the function name or ARN. For STEP_FUNCTION tasks, it's the state machine ARN.
    string TaskArn = 9;
    // The parameters that should be passed to the task when it is executed.
    array TaskParameters = 10;
    // The type of task. The type can be one of the following: RUN_COMMAND, AUTOMATION, LAMBDA, or STEP_FUNCTION.
    MaintenanceWindowTaskType Type = 11;
    // The Maintenance Window ID where the task is registered.
    string WindowId = 12;
    // The task ID.
    string WindowTaskId = 13;
}

message MaintenanceWindowTaskInvocationParameters {
    // The parameters for a AUTOMATION task type.
    MaintenanceWindowAutomationParameters Automation = 1;
    // The parameters for a LAMBDA task type.
    MaintenanceWindowLambdaParameters Lambda = 2;
    // The parameters for a RUN_COMMAND task type.
    MaintenanceWindowRunCommandParameters RunCommand = 3;
    // The parameters for a STEP_FUNCTION task type.
    MaintenanceWindowStepFunctionsParameters StepFunctions = 4;
}

repeated MaintenanceWindowTask MaintenanceWindowTaskList = 1





message MaintenanceWindowTaskParameterValueExpression {
    // This field contains an array of 0 or more strings, each 1 to 255 characters in length.
    array Values = 1;
}

repeated string MaintenanceWindowTaskParameterValueList = 1

message MaintenanceWindowTaskParameter {
    string key = 1;
    MaintenanceWindowTaskParameterValueExpression value = 2;
}
repeated MaintenanceWindowTaskParameter MaintenanceWindowTaskParameters = 1

repeated array MaintenanceWindowTaskParametersList = 1





enum MaintenanceWindowTaskType {
    RUN_COMMAND = 0;
    AUTOMATION = 1;
    STEP_FUNCTIONS = 2;
    LAMBDA = 3;
}

message MaxDocumentSizeExceeded {
    string Message = 1;
}

message ModifyDocumentPermissionRequest {
    // The AWS user accounts that should have access to the document. The account IDs can either be a group of account IDs or <i>All</i>.
    array AccountIdsToAdd = 1;
    // The AWS user accounts that should no longer have access to the document. The AWS user account can either be a group of account IDs or <i>All</i>. This action has a higher priority than <i>AccountIdsToAdd</i>. If you specify an account ID to add and the same ID to remove, the system removes access to the document.
    array AccountIdsToRemove = 2;
    // The name of the document that you want to share.
    string Name = 3;
    // The permission type for the document. The permission type can be <i>Share</i>.
    DocumentPermissionType PermissionType = 4;
}

message ModifyDocumentPermissionResponse {
}

message NonCompliantSummary {
    // The total number of compliance items that are not compliant.
    integer NonCompliantCount = 1;
    // A summary of the non-compliance severity by compliance type
    SeveritySummary SeveritySummary = 2;
}

message NormalStringMap {
    string key = 1;
    string value = 2;
}
repeated NormalStringMap NormalStringMap = 1



message NotificationConfig {
    // An Amazon Resource Name (ARN) for a Simple Notification Service (SNS) topic. Run Command pushes notifications about command status changes to this topic.
    string NotificationArn = 1;
    // The different events for which you can receive notifications. These events include the following: All (events), InProgress, Success, TimedOut, Cancelled, Failed. To learn more about these events, see <a href="http://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html">Setting Up Events and Notifications</a> in the <i>Amazon EC2 Systems Manager User Guide</i>.
    array NotificationEvents = 2;
    // Command: Receive notification when the status of a command changes. Invocation: For commands sent to multiple instances, receive notification on a per-instance basis when the status of a command changes.
    NotificationType NotificationType = 3;
}

enum NotificationEvent {
    ALL = 0;
    INPROGRESS = 1;
    SUCCESS = 2;
    TIMEDOUT = 3;
    CANCELLED = 4;
    FAILED = 5;
}

repeated NotificationEvent NotificationEventList = 1

enum NotificationType {
    COMMAND = 0;
    INVOCATION = 1;
}

enum OperatingSystem {
    WINDOWS = 0;
    AMAZON_LINUX = 1;
    UBUNTU = 2;
    REDHAT_ENTERPRISE_LINUX = 3;
}

message Parameter {
    // The name of the parameter.
    string Name = 1;
    // The type of parameter. Valid values include the following: String, String list, Secure string.
    ParameterType Type = 2;
    // The parameter value.
    string Value = 3;
}

message ParameterAlreadyExists {
    string message = 1;
}

message ParameterHistory {
    // <p>Parameter names can include the following letters and symbols.</p> <p>a-zA-Z0-9_.-</p>
    string AllowedPattern = 1;
    // Information about the parameter.
    string Description = 2;
    // The ID of the query key used for this parameter.
    string KeyId = 3;
    // Date the parameter was last changed or updated.
    string LastModifiedDate = 4;
    // Amazon Resource Name (ARN) of the AWS user who last changed the parameter.
    string LastModifiedUser = 5;
    // The name of the parameter.
    string Name = 6;
    // The type of parameter used.
    ParameterType Type = 7;
    // The parameter value.
    string Value = 8;
}

repeated ParameterHistory ParameterHistoryList = 1



message ParameterLimitExceeded {
    string message = 1;
}

repeated Parameter ParameterList = 1

message ParameterMetadata {
    // <p>A parameter name can include only the following letters and symbols.</p> <p>a-zA-Z0-9_.-</p>
    string AllowedPattern = 1;
    // Description of the parameter actions.
    string Description = 2;
    // The ID of the query key used for this parameter.
    string KeyId = 3;
    // Date the parameter was last changed or updated.
    string LastModifiedDate = 4;
    // Amazon Resource Name (ARN) of the AWS user who last changed the parameter.
    string LastModifiedUser = 5;
    // The parameter name.
    string Name = 6;
    // The type of parameter. Valid parameter types include the following: String, String list, Secure string.
    ParameterType Type = 7;
}

repeated ParameterMetadata ParameterMetadataList = 1



repeated string ParameterNameList = 1

message ParameterNotFound {
    string message = 1;
}

message ParameterPatternMismatchException {
    // The parameter name is not valid.
    string message = 1;
}

message ParameterStringFilter {
    // The name of the filter.
    string Key = 1;
    // Valid options are Equals and BeginsWith. For Path filter, valid options are Recursive and OneLevel.
    string Option = 2;
    // The value you want to search for.
    array Values = 3;
}



repeated ParameterStringFilter ParameterStringFilterList = 1



repeated string ParameterStringFilterValueList = 1



enum ParameterType {
    STRING = 0;
    STRINGLIST = 1;
    SECURESTRING = 2;
}



repeated string ParameterValueList = 1

message Parameter {
    string key = 1;
    array value = 2;
}
repeated Parameter Parameters = 1

message ParametersFilter {
    // The name of the filter.
    ParametersFilterKey Key = 1;
    // The filter values.
    array Values = 2;
}

enum ParametersFilterKey {
    NAME = 0;
    TYPE = 1;
    KEYID = 2;
}

repeated ParametersFilter ParametersFilterList = 1



repeated string ParametersFilterValueList = 1

message Patch {
    // The classification of the patch (for example, SecurityUpdates, Updates, CriticalUpdates).
    string Classification = 1;
    // The URL where more information can be obtained about the patch.
    string ContentUrl = 2;
    // The description of the patch.
    string Description = 3;
    // The ID of the patch (this is different than the Microsoft Knowledge Base ID).
    string Id = 4;
    // The Microsoft Knowledge Base ID of the patch.
    string KbNumber = 5;
    // The language of the patch if it's language-specific.
    string Language = 6;
    // The ID of the MSRC bulletin the patch is related to.
    string MsrcNumber = 7;
    // The severity of the patch (for example Critical, Important, Moderate).
    string MsrcSeverity = 8;
    // The specific product the patch is applicable for (for example, WindowsServer2016).
    string Product = 9;
    // The product family the patch is applicable for (for example, Windows).
    string ProductFamily = 10;
    // The date the patch was released.
    string ReleaseDate = 11;
    // The title of the patch.
    string Title = 12;
    // The name of the vendor providing the patch.
    string Vendor = 13;
}

message PatchBaselineIdentity {
    // The description of the patch baseline.
    string BaselineDescription = 1;
    // The ID of the patch baseline.
    string BaselineId = 2;
    // The name of the patch baseline.
    string BaselineName = 3;
    // Whether this is the default baseline. Note that Systems Manager supports creating multiple default patch baselines. For example, you can create a default patch baseline for each operating system.
    boolean DefaultBaseline = 4;
    // Defines the operating system the patch baseline applies to. Supported operating systems include WINDOWS, AMAZON_LINUX, UBUNTU and REDHAT_ENTERPRISE_LINUX. The Default value is WINDOWS.
    OperatingSystem OperatingSystem = 5;
}

repeated PatchBaselineIdentity PatchBaselineIdentityList = 1





message PatchComplianceData {
    // The classification of the patch (for example, SecurityUpdates, Updates, CriticalUpdates).
    string Classification = 1;
    // The date/time the patch was installed on the instance. Note that not all operating systems provide this level of information.
    string InstalledTime = 2;
    // The operating system-specific ID of the patch.
    string KBId = 3;
    // The severity of the patch (for example, Critical, Important, Moderate).
    string Severity = 4;
    // The state of the patch on the instance (INSTALLED, INSTALLED_OTHER, MISSING, NOT_APPLICABLE or FAILED).
    PatchComplianceDataState State = 5;
    // The title of the patch.
    string Title = 6;
}

repeated PatchComplianceData PatchComplianceDataList = 1

enum PatchComplianceDataState {
    INSTALLED = 0;
    INSTALLED_OTHER = 1;
    MISSING = 2;
    NOT_APPLICABLE = 3;
    FAILED = 4;
}

enum PatchComplianceLevel {
    CRITICAL = 0;
    HIGH = 1;
    MEDIUM = 2;
    LOW = 3;
    INFORMATIONAL = 4;
    UNSPECIFIED = 5;
}

enum PatchDeploymentStatu {
    APPROVED = 0;
    PENDING_APPROVAL = 1;
    EXPLICIT_APPROVED = 2;
    EXPLICIT_REJECTED = 3;
}

message PatchFilter {
    // The key for the filter (PRODUCT, CLASSIFICATION, MSRC_SEVERITY, PATCH_ID)
    PatchFilterKey Key = 1;
    // The value for the filter key.
    array Values = 2;
}

message PatchFilterGroup {
    // The set of patch filters that make up the group.
    array PatchFilters = 1;
}

enum PatchFilterKey {
    PRODUCT = 0;
    CLASSIFICATION = 1;
    MSRC_SEVERITY = 2;
    PATCH_ID = 3;
    SECTION = 4;
    PRIORITY = 5;
    SEVERITY = 6;
}

repeated PatchFilter PatchFilterList = 1



repeated string PatchFilterValueList = 1



repeated string PatchGroupList = 1

message PatchGroupPatchBaselineMapping {
    // The patch baseline the patch group is registered with.
    PatchBaselineIdentity BaselineIdentity = 1;
    // The name of the patch group registered with the patch baseline.
    string PatchGroup = 2;
}

repeated PatchGroupPatchBaselineMapping PatchGroupPatchBaselineMappingList = 1



repeated string PatchIdList = 1









repeated Patch PatchList = 1









enum PatchOperationType {
    SCAN = 0;
    INSTALL = 1;
}

message PatchOrchestratorFilter {
    // The key for the filter.
    string Key = 1;
    // The value for the filter.
    array Values = 2;
}



repeated PatchOrchestratorFilter PatchOrchestratorFilterList = 1



repeated string PatchOrchestratorFilterValues = 1





message PatchRule {
    // The number of days after the release date of each patch matched by the rule the patch is marked as approved in the patch baseline.
    integer ApproveAfterDays = 1;
    // A compliance severity level for all approved patches in a patch baseline. Valid compliance severity levels include the following: Unspecified, Critical, High, Medium, Low, and Informational.
    PatchComplianceLevel ComplianceLevel = 2;
    // The patch filter group that defines the criteria for the rule.
    PatchFilterGroup PatchFilterGroup = 3;
}

message PatchRuleGroup {
    // The rules that make up the rule group.
    array PatchRules = 1;
}

repeated PatchRule PatchRuleList = 1



message PatchStatus {
    // The date the patch was approved (or will be approved if the status is PENDING_APPROVAL).
    string ApprovalDate = 1;
    // The compliance severity level for a patch.
    PatchComplianceLevel ComplianceLevel = 2;
    // The approval status of a patch (APPROVED, PENDING_APPROVAL, EXPLICIT_APPROVED, EXPLICIT_REJECTED).
    PatchDeploymentStatus DeploymentStatus = 3;
}

enum PingStatu {
    ONLINE = 0;
    CONNECTIONLOST = 1;
    INACTIVE = 2;
}

enum PlatformType {
    WINDOWS = 0;
    LINUX = 1;
}

repeated PlatformType PlatformTypeList = 1



message PutComplianceItemsRequest {
    // Specify the compliance type. For example, specify Association (for a State Manager association), Patch, or Custom:<code>string</code>.
    string ComplianceType = 1;
    // A summary of the call execution that includes an execution ID, the type of execution (for example, <code>Command</code>), and the date/time of the execution using a datetime object that is saved in the following format: yyyy-MM-dd'T'HH:mm:ss'Z'.
    ComplianceExecutionSummary ExecutionSummary = 2;
    // MD5 or SHA-256 content hash. The content hash is used to determine if existing information should be overwritten or ignored. If the content hashes match, the request to put compliance information is ignored.
    string ItemContentHash = 3;
    // Information about the compliance as defined by the resource type. For example, for a patch compliance type, <code>Items</code> includes information about the PatchSeverity, Classification, etc.
    array Items = 4;
    // Specify an ID for this resource. For a managed instance, this is the instance ID.
    string ResourceId = 5;
    // Specify the type of resource. <code>ManagedInstance</code> is currently the only supported resource type.
    string ResourceType = 6;
}

message PutComplianceItemsResult {
}

message PutInventoryRequest {
    // One or more instance IDs where you want to add or update inventory items.
    string InstanceId = 1;
    // The inventory items that you want to add or update on instances.
    array Items = 2;
}

message PutInventoryResult {
}

message PutParameterRequest {
    // A regular expression used to validate the parameter value. For example, for String types with values restricted to numbers, you can specify the following: AllowedPattern=^\d+$
    string AllowedPattern = 1;
    // Information about the parameter that you want to add to the system
    string Description = 2;
    // The KMS Key ID that you want to use to encrypt a parameter when you choose the SecureString data type. If you don't specify a key ID, the system uses the default key associated with your AWS account.
    string KeyId = 3;
    // The name of the parameter that you want to add to the system.
    string Name = 4;
    // Overwrite an existing parameter. If not specified, will default to "false".
    boolean Overwrite = 5;
    // The type of parameter that you want to add to the system.
    ParameterType Type = 6;
    // The parameter value that you want to add to the system.
    string Value = 7;
}

message PutParameterResult {
}

message RegisterDefaultPatchBaselineRequest {
    // The ID of the patch baseline that should be the default patch baseline.
    string BaselineId = 1;
}

message RegisterDefaultPatchBaselineResult {
    // The ID of the default patch baseline.
    string BaselineId = 1;
}

message RegisterPatchBaselineForPatchGroupRequest {
    // The ID of the patch baseline to register the patch group with.
    string BaselineId = 1;
    // The name of the patch group that should be registered with the patch baseline.
    string PatchGroup = 2;
}

message RegisterPatchBaselineForPatchGroupResult {
    // The ID of the patch baseline the patch group was registered with.
    string BaselineId = 1;
    // The name of the patch group registered with the patch baseline.
    string PatchGroup = 2;
}

message RegisterTargetWithMaintenanceWindowRequest {
    // User-provided idempotency token.
    string ClientToken = 1;
    // An optional description for the target.
    string Description = 2;
    // An optional name for the target.
    string Name = 3;
    // User-provided value that will be included in any CloudWatch events raised while running tasks for these targets in this Maintenance Window.
    string OwnerInformation = 4;
    // The type of target being registered with the Maintenance Window.
    MaintenanceWindowResourceType ResourceType = 5;
    // The targets (either instances or tags). Instances are specified using Key=instanceids,Values=&lt;instanceid1&gt;,&lt;instanceid2&gt;. Tags are specified using Key=&lt;tag name&gt;,Values=&lt;tag value&gt;.
    array Targets = 6;
    // The ID of the Maintenance Window the target should be registered with.
    string WindowId = 7;
}

message RegisterTargetWithMaintenanceWindowResult {
    // The ID of the target definition in this Maintenance Window.
    string WindowTargetId = 1;
}

message RegisterTaskWithMaintenanceWindowRequest {
    // User-provided idempotency token.
    string ClientToken = 1;
    // An optional description for the task.
    string Description = 2;
    // A structure containing information about an Amazon S3 bucket to write instance-level logs to.
    LoggingInfo LoggingInfo = 3;
    // The maximum number of targets this task can be run for in parallel.
    string MaxConcurrency = 4;
    // The maximum number of errors allowed before this task stops being scheduled.
    string MaxErrors = 5;
    // An optional name for the task.
    string Name = 6;
    // The priority of the task in the Maintenance Window, the lower the number the higher the priority. Tasks in a Maintenance Window are scheduled in priority order with tasks that have the same priority scheduled in parallel.
    integer Priority = 7;
    // The role that should be assumed when executing the task.
    string ServiceRoleArn = 8;
    // The targets (either instances or tags). Instances are specified using Key=instanceids,Values=&lt;instanceid1&gt;,&lt;instanceid2&gt;. Tags are specified using Key=&lt;tag name&gt;,Values=&lt;tag value&gt;.
    array Targets = 9;
    // The ARN of the task to execute
    string TaskArn = 10;
    // The parameters that the task should use during execution. Populate only the fields that match the task type. All other fields should be empty.
    MaintenanceWindowTaskInvocationParameters TaskInvocationParameters = 11;
    // The parameters that should be passed to the task when it is executed.
    array TaskParameters = 12;
    // The type of task being registered.
    MaintenanceWindowTaskType TaskType = 13;
    // The id of the Maintenance Window the task should be added to.
    string WindowId = 14;
}

message RegisterTaskWithMaintenanceWindowResult {
    // The id of the task in the Maintenance Window.
    string WindowTaskId = 1;
}

message RemoveTagsFromResourceRequest {
    // The resource ID for which you want to remove tags.
    string ResourceId = 1;
    // The type of resource of which you want to remove a tag.
    ResourceTypeForTagging ResourceType = 2;
    // Tag keys that you want to remove from the specified resource.
    array TagKeys = 3;
}

message RemoveTagsFromResourceResult {
}

message ResourceComplianceSummaryItem {
    // The compliance type.
    string ComplianceType = 1;
    // A list of items that are compliant for the resource.
    CompliantSummary CompliantSummary = 2;
    // Information about the execution.
    ComplianceExecutionSummary ExecutionSummary = 3;
    // A list of items that aren't compliant for the resource.
    NonCompliantSummary NonCompliantSummary = 4;
    // The highest severity item found for the resource. The resource is compliant for this item.
    ComplianceSeverity OverallSeverity = 5;
    // The resource ID.
    string ResourceId = 6;
    // The resource type.
    string ResourceType = 7;
    // The compliance status for the resource.
    ComplianceStatus Status = 8;
}

repeated ResourceComplianceSummaryItem ResourceComplianceSummaryItemList = 1



message ResourceDataSyncAlreadyExistsException {
    string SyncName = 1;
}

message ResourceDataSyncCountExceededException {
    string Message = 1;
}

message ResourceDataSyncInvalidConfigurationException {
    string Message = 1;
}

message ResourceDataSyncItem {
    // The status reported by the last sync.
    LastResourceDataSyncStatus LastStatus = 1;
    // The last time the sync operations returned a status of <code>SUCCESSFUL</code> (UTC).
    string LastSuccessfulSyncTime = 2;
    // The last time the configuration attempted to sync (UTC).
    string LastSyncTime = 3;
    // Configuration information for the target Amazon S3 bucket.
    ResourceDataSyncS3Destination S3Destination = 4;
    // The date and time the configuration was created (UTC).
    string SyncCreatedTime = 5;
    // The name of the Resource Data Sync.
    string SyncName = 6;
}

repeated ResourceDataSyncItem ResourceDataSyncItemList = 1



message ResourceDataSyncNotFoundException {
    string SyncName = 1;
}

message ResourceDataSyncS3Destination {
    // The ARN of an encryption key for a destination in Amazon S3. Must belong to the same region as the destination Amazon S3 bucket.
    string AWSKMSKeyARN = 1;
    // The name of the Amazon S3 bucket where the aggregated data is stored.
    string BucketName = 2;
    // An Amazon S3 prefix for the bucket.
    string Prefix = 3;
    // The AWS Region with the Amazon S3 bucket targeted by the Resource Data Sync.
    string Region = 4;
    // A supported sync format. The following format is currently supported: JsonSerDe
    ResourceDataSyncS3Format SyncFormat = 5;
}

enum ResourceDataSyncS3Format {
    JSONSERDE = 0;
}

message ResourceInUseException {
    string Message = 1;
}

message ResourceLimitExceededException {
    string Message = 1;
}

enum ResourceType {
    MANAGEDINSTANCE = 0;
    DOCUMENT = 1;
    EC2INSTANCE = 2;
}

enum ResourceTypeForTagging {
    DOCUMENT = 0;
    MANAGEDINSTANCE = 1;
    MAINTENANCEWINDOW = 2;
    PARAMETER = 3;
    PATCHBASELINE = 4;
}

message ResultAttribute {
    // Name of the inventory item type. Valid value: AWS:InstanceInformation. Default Value: AWS:InstanceInformation.
    string TypeName = 1;
}

repeated ResultAttribute ResultAttributeList = 1





message S3OutputLocation {
    // The name of the Amazon S3 bucket.
    string OutputS3BucketName = 1;
    // The Amazon S3 bucket subfolder.
    string OutputS3KeyPrefix = 2;
    // (Deprecated) You can no longer specify this parameter. The system ignores it. Instead, Systems Manager automatically determines the Amazon S3 bucket region.
    string OutputS3Region = 3;
}

message S3OutputUrl {
    // A URL for an Amazon S3 bucket where you want to store the results of this request.
    string OutputUrl = 1;
}

message SendAutomationSignalRequest {
    // The unique identifier for an existing Automation execution that you want to send the signal to.
    string AutomationExecutionId = 1;
    // The data sent with the signal. The data schema depends on the type of signal used in the request.
    array Payload = 2;
    // The type of signal. Valid signal types include the following: Approve and Reject
    SignalType SignalType = 3;
}

message SendAutomationSignalResult {
}

message SendCommandRequest {
    // User-specified information about the command, such as a brief description of what the command should do.
    string Comment = 1;
    // <p>The Sha256 or Sha1 hash created by the system when the document was created. </p> <note> <p>Sha1 hashes have been deprecated.</p> </note>
    string DocumentHash = 2;
    // <p>Sha256 or Sha1.</p> <note> <p>Sha1 hashes have been deprecated.</p> </note>
    DocumentHashType DocumentHashType = 3;
    // Required. The name of the Systems Manager document to execute. This can be a public document or a custom document.
    string DocumentName = 4;
    // The instance IDs where the command should execute. You can specify a maximum of 50 IDs. If you prefer not to list individual instance IDs, you can instead send commands to a fleet of instances using the Targets parameter, which accepts EC2 tags. For more information about how to use Targets, see <a href="http://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html">Sending Commands to a Fleet</a>.
    array InstanceIds = 5;
    // (Optional) The maximum number of instances that are allowed to execute the command at the same time. You can specify a number such as 10 or a percentage such as 10%. The default value is 50. For more information about how to use MaxConcurrency, see <a href="http://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-velocity.html">Using Concurrency Controls</a>.
    string MaxConcurrency = 6;
    // The maximum number of errors allowed without the command failing. When the command fails one more time beyond the value of MaxErrors, the systems stops sending the command to additional targets. You can specify a number like 10 or a percentage like 10%. The default value is 50. For more information about how to use MaxErrors, see <a href="http://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-maxerrors.html">Using Error Controls</a>.
    string MaxErrors = 7;
    // Configurations for sending notifications.
    NotificationConfig NotificationConfig = 8;
    // The name of the S3 bucket where command execution responses should be stored.
    string OutputS3BucketName = 9;
    // The directory structure within the S3 bucket where the responses should be stored.
    string OutputS3KeyPrefix = 10;
    // (Deprecated) You can no longer specify this parameter. The system ignores it. Instead, Systems Manager automatically determines the Amazon S3 bucket region.
    string OutputS3Region = 11;
    // The required and optional parameters specified in the document being executed.
    array Parameters = 12;
    // The IAM role that Systems Manager uses to send notifications.
    string ServiceRoleArn = 13;
    // (Optional) An array of search criteria that targets instances using a Key,Value combination that you specify. Targets is required if you don't provide one or more instance IDs in the call. For more information about how to use Targets, see <a href="http://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html">Sending Commands to a Fleet</a>.
    array Targets = 14;
    // If this time is reached and the command has not already started executing, it will not execute.
    integer TimeoutSeconds = 15;
}

message SendCommandResult {
    // The request as it was received by Systems Manager. Also provides the command ID which can be used future references to this request.
    Command Command = 1;
}

message SeveritySummary {
    // The total number of resources or compliance items that have a severity level of critical. Critical severity is determined by the organization that published the compliance items.
    integer CriticalCount = 1;
    // The total number of resources or compliance items that have a severity level of high. High severity is determined by the organization that published the compliance items.
    integer HighCount = 2;
    // The total number of resources or compliance items that have a severity level of informational. Informational severity is determined by the organization that published the compliance items.
    integer InformationalCount = 3;
    // The total number of resources or compliance items that have a severity level of low. Low severity is determined by the organization that published the compliance items.
    integer LowCount = 4;
    // The total number of resources or compliance items that have a severity level of medium. Medium severity is determined by the organization that published the compliance items.
    integer MediumCount = 5;
    // The total number of resources or compliance items that have a severity level of unspecified. Unspecified severity is determined by the organization that published the compliance items.
    integer UnspecifiedCount = 6;
}

enum SignalType {
    APPROVE = 0;
    REJECT = 1;
}

message StartAutomationExecutionRequest {
    // User-provided idempotency token. The token must be unique, is case insensitive, enforces the UUID format, and can't be reused.
    string ClientToken = 1;
    // The name of the Automation document to use for this execution.
    string DocumentName = 2;
    // The version of the Automation document to use for this execution.
    string DocumentVersion = 3;
    // A key-value map of execution parameters, which match the declared parameters in the Automation document.
    array Parameters = 4;
}

message StartAutomationExecutionResult {
    // The unique ID of a newly scheduled automation execution.
    string AutomationExecutionId = 1;
}

message StatusUnchanged {
}

message StepExecution {
    // The action this step performs. The action determines the behavior of the step.
    string Action = 1;
    // If a step has finished execution, this contains the time the execution ended. If the step has not yet concluded, this field is not populated.
    string ExecutionEndTime = 2;
    // If a step has begun execution, this contains the time the step started. If the step is in Pending status, this field is not populated.
    string ExecutionStartTime = 3;
    // Information about the Automation failure.
    FailureDetails FailureDetails = 4;
    // If a step failed, this message explains why the execution failed.
    string FailureMessage = 5;
    // Fully-resolved values passed into the step before execution.
    array Inputs = 6;
    // Returned values from the execution of the step.
    array Outputs = 7;
    // A message associated with the response code for an execution.
    string Response = 8;
    // The response code returned by the execution of the step.
    string ResponseCode = 9;
    // The name of this execution step.
    string StepName = 10;
    // The execution status for this step. Valid values include: Pending, InProgress, Success, Cancelled, Failed, and TimedOut.
    AutomationExecutionStatus StepStatus = 11;
}

repeated StepExecution StepExecutionList = 1

message StopAutomationExecutionRequest {
    // The execution ID of the Automation to stop.
    string AutomationExecutionId = 1;
}

message StopAutomationExecutionResult {
}





repeated string StringList = 1

message SubTypeCountLimitExceededException {
    string Message = 1;
}

message Tag {
    // The name of the tag.
    string Key = 1;
    // The value of the tag.
    string Value = 2;
}



repeated Tag TagList = 1



message Target {
    // User-defined criteria for sending commands that target instances that meet the criteria. Key can be tag:&lt;Amazon EC2 tag&gt; or InstanceIds. For more information about how to send commands that target instances using Key,Value parameters, see <a href="http://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html">Executing a Command Using Systems Manager Run Command</a>.
    string Key = 1;
    // User-defined criteria that maps to Key. For example, if you specified tag:ServerRole, you could specify value:WebServer to execute a command on instances that include Amazon EC2 tags of ServerRole,WebServer. For more information about how to send commands that target instances using Key,Value parameters, see <a href="http://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html">Executing a Command Using Systems Manager Run Command</a>.
    array Values = 2;
}

message TargetInUseException {
    string Message = 1;
}





repeated string TargetValues = 1

repeated Target Targets = 1



message TooManyTagsError {
}

message TooManyUpdates {
    string Message = 1;
}

message TotalSizeLimitExceededException {
    string Message = 1;
}

message UnsupportedInventoryItemContextException {
    string Message = 1;
    string TypeName = 2;
}

message UnsupportedInventorySchemaVersionException {
    string Message = 1;
}

message UnsupportedOperatingSystem {
    string Message = 1;
}

message UnsupportedParameterType {
    string message = 1;
}

message UnsupportedPlatformType {
    string Message = 1;
}

message UpdateAssociationRequest {
    // The ID of the association you want to update.
    string AssociationId = 1;
    // The name of the association that you want to update.
    string AssociationName = 2;
    // This parameter is provided for concurrency control purposes. You must specify the latest association version in the service. If you want to ensure that this request succeeds, either specify <code>$LATEST</code>, or omit this parameter.
    string AssociationVersion = 3;
    // The document version you want update for the association.
    string DocumentVersion = 4;
    // The name of the association document.
    string Name = 5;
    // An Amazon S3 bucket where you want to store the results of this request.
    InstanceAssociationOutputLocation OutputLocation = 6;
    // The parameters you want to update for the association. If you create a parameter using Parameter Store, you can reference the parameter using {{ssm:parameter-name}}
    array Parameters = 7;
    // The cron expression used to schedule the association that you want to update.
    string ScheduleExpression = 8;
    // The targets of the association.
    array Targets = 9;
}

message UpdateAssociationResult {
    // The description of the association that was updated.
    AssociationDescription AssociationDescription = 1;
}

message UpdateAssociationStatusRequest {
    // The association status.
    AssociationStatus AssociationStatus = 1;
    // The ID of the instance.
    string InstanceId = 2;
    // The name of the Systems Manager document.
    string Name = 3;
}

message UpdateAssociationStatusResult {
    // Information about the association.
    AssociationDescription AssociationDescription = 1;
}

message UpdateDocumentDefaultVersionRequest {
    // The version of a custom document that you want to set as the default version.
    string DocumentVersion = 1;
    // The name of a custom document that you want to set as the default version.
    string Name = 2;
}

message UpdateDocumentDefaultVersionResult {
    // The description of a custom document that you want to set as the default version.
    DocumentDefaultVersionDescription Description = 1;
}

message UpdateDocumentRequest {
    // The content in a document that you want to update.
    string Content = 1;
    // The version of the document that you want to update.
    string DocumentVersion = 2;
    // The name of the document that you want to update.
    string Name = 3;
}

message UpdateDocumentResult {
    // A description of the document that was updated.
    DocumentDescription DocumentDescription = 1;
}

message UpdateMaintenanceWindowRequest {
    // Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets.
    boolean AllowUnassociatedTargets = 1;
    // The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
    integer Cutoff = 2;
    // An optional description for the update request.
    string Description = 3;
    // The duration of the Maintenance Window in hours.
    integer Duration = 4;
    // Whether the Maintenance Window is enabled.
    boolean Enabled = 5;
    // The name of the Maintenance Window.
    string Name = 6;
    // If True, then all fields that are required by the CreateMaintenanceWindow action are also required for this API request. Optional fields that are not specified are set to null.
    boolean Replace = 7;
    // The schedule of the Maintenance Window in the form of a cron or rate expression.
    string Schedule = 8;
    // The ID of the Maintenance Window to update.
    string WindowId = 9;
}

message UpdateMaintenanceWindowResult {
    // Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets.
    boolean AllowUnassociatedTargets = 1;
    // The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
    integer Cutoff = 2;
    // An optional description of the update.
    string Description = 3;
    // The duration of the Maintenance Window in hours.
    integer Duration = 4;
    // Whether the Maintenance Window is enabled.
    boolean Enabled = 5;
    // The name of the Maintenance Window.
    string Name = 6;
    // The schedule of the Maintenance Window in the form of a cron or rate expression.
    string Schedule = 7;
    // The ID of the created Maintenance Window.
    string WindowId = 8;
}

message UpdateMaintenanceWindowTargetRequest {
    // An optional description for the update.
    string Description = 1;
    // A name for the update.
    string Name = 2;
    // User-provided value that will be included in any CloudWatch events raised while running tasks for these targets in this Maintenance Window.
    string OwnerInformation = 3;
    // If True, then all fields that are required by the RegisterTargetWithMaintenanceWindow action are also required for this API request. Optional fields that are not specified are set to null.
    boolean Replace = 4;
    // The targets to add or replace.
    array Targets = 5;
    // The Maintenance Window ID with which to modify the target.
    string WindowId = 6;
    // The target ID to modify.
    string WindowTargetId = 7;
}

message UpdateMaintenanceWindowTargetResult {
    // The updated description.
    string Description = 1;
    // The updated name.
    string Name = 2;
    // The updated owner.
    string OwnerInformation = 3;
    // The updated targets.
    array Targets = 4;
    // The Maintenance Window ID specified in the update request.
    string WindowId = 5;
    // The target ID specified in the update request.
    string WindowTargetId = 6;
}

message UpdateMaintenanceWindowTaskRequest {
    // The new task description to specify.
    string Description = 1;
    // The new logging location in Amazon S3 to specify.
    LoggingInfo LoggingInfo = 2;
    // The new <code>MaxConcurrency</code> value you want to specify. <code>MaxConcurrency</code> is the number of targets that are allowed to run this task in parallel.
    string MaxConcurrency = 3;
    // The new <code>MaxErrors</code> value to specify. <code>MaxErrors</code> is the maximum number of errors that are allowed before the task stops being scheduled.
    string MaxErrors = 4;
    // The new task name to specify.
    string Name = 5;
    // The new task priority to specify. The lower the number, the higher the priority. Tasks that have the same priority are scheduled in parallel.
    integer Priority = 6;
    // If True, then all fields that are required by the RegisterTaskWithMaintenanceWndow action are also required for this API request. Optional fields that are not specified are set to null.
    boolean Replace = 7;
    // The IAM service role ARN to modify. The system assumes this role during task execution.
    string ServiceRoleArn = 8;
    // The targets (either instances or tags) to modify. Instances are specified using Key=instanceids,Values=instanceID_1,instanceID_2. Tags are specified using Key=tag_name,Values=tag_value.
    array Targets = 9;
    // The task ARN to modify.
    string TaskArn = 10;
    // The parameters that the task should use during execution. Populate only the fields that match the task type. All other fields should be empty.
    MaintenanceWindowTaskInvocationParameters TaskInvocationParameters = 11;
    // <p>The parameters to modify. The map has the following format:</p> <p>Key: string, between 1 and 255 characters</p> <p>Value: an array of strings, each string is between 1 and 255 characters</p>
    array TaskParameters = 12;
    // The Maintenance Window ID that contains the task to modify.
    string WindowId = 13;
    // The task ID to modify.
    string WindowTaskId = 14;
}

message UpdateMaintenanceWindowTaskResult {
    // The updated task description.
    string Description = 1;
    // The updated logging information in Amazon S3.
    LoggingInfo LoggingInfo = 2;
    // The updated MaxConcurrency value.
    string MaxConcurrency = 3;
    // The updated MaxErrors value.
    string MaxErrors = 4;
    // The updated task name.
    string Name = 5;
    // The updated priority value.
    integer Priority = 6;
    // The updated service role ARN value.
    string ServiceRoleArn = 7;
    // The updated target values.
    array Targets = 8;
    // The updated task ARN value.
    string TaskArn = 9;
    // The updated parameter values.
    MaintenanceWindowTaskInvocationParameters TaskInvocationParameters = 10;
    // The updated parameter values.
    array TaskParameters = 11;
    // The ID of the Maintenance Window that was updated.
    string WindowId = 12;
    // The task ID of the Maintenance Window that was updated.
    string WindowTaskId = 13;
}

message UpdateManagedInstanceRoleRequest {
    // The IAM role you want to assign or change.
    string IamRole = 1;
    // The ID of the managed instance where you want to update the role.
    string InstanceId = 2;
}

message UpdateManagedInstanceRoleResult {
}

message UpdatePatchBaselineRequest {
    // A set of rules used to include patches in the baseline.
    PatchRuleGroup ApprovalRules = 1;
    // A list of explicitly approved patches for the baseline.
    array ApprovedPatches = 2;
    // Assigns a new compliance severity level to an existing patch baseline.
    PatchComplianceLevel ApprovedPatchesComplianceLevel = 3;
    // The ID of the patch baseline to update.
    string BaselineId = 4;
    // A description of the patch baseline.
    string Description = 5;
    // A set of global filters used to exclude patches from the baseline.
    PatchFilterGroup GlobalFilters = 6;
    // The name of the patch baseline.
    string Name = 7;
    // A list of explicitly rejected patches for the baseline.
    array RejectedPatches = 8;
}

message UpdatePatchBaselineResult {
    // A set of rules used to include patches in the baseline.
    PatchRuleGroup ApprovalRules = 1;
    // A list of explicitly approved patches for the baseline.
    array ApprovedPatches = 2;
    // The compliance severity level assigned to the patch baseline after the update completed.
    PatchComplianceLevel ApprovedPatchesComplianceLevel = 3;
    // The ID of the deleted patch baseline.
    string BaselineId = 4;
    // The date when the patch baseline was created.
    string CreatedDate = 5;
    // A description of the Patch Baseline.
    string Description = 6;
    // A set of global filters used to exclude patches from the baseline.
    PatchFilterGroup GlobalFilters = 7;
    // The date when the patch baseline was last modified.
    string ModifiedDate = 8;
    // The name of the patch baseline.
    string Name = 9;
    // The operating system rule used by the updated patch baseline.
    OperatingSystem OperatingSystem = 10;
    // A list of explicitly rejected patches for the baseline.
    array RejectedPatches = 11;
}

service AmazonSimpleSystemsManager(SSM)Service {
    // <p>Adds or overwrites one or more tags for the specified resource. Tags are metadata that you can assign to your documents, managed instances, Maintenance Windows, Parameter Store parameters, and patch baselines. Tags enable you to categorize your resources in different ways, for example, by purpose, owner, or environment. Each tag consists of a key and an optional value, both of which you define. For example, you could define a set of tags for your account's managed instances that helps you track each instance's owner and stack level. For example: Key=Owner and Value=DbAdmin, SysAdmin, or Dev. Or Key=Stack and Value=Production, Pre-Production, or Test.</p> <p>Each resource can have a maximum of 10 tags. </p> <p>We recommend that you devise a set of tag keys that meets your needs for each resource type. Using a consistent set of tag keys makes it easier for you to manage your resources. You can search and filter the resources based on the tags you add. Tags don't have any semantic meaning to Amazon EC2 and are interpreted strictly as a string of characters. </p> <p>For more information about tags, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging Your Amazon EC2 Resources</a> in the <i>Amazon EC2 User Guide</i>.</p>
    rpc Post(PostRequest) returns (AddTagsToResourceResult) {
      option (google.api.http) = {
        post: "//"
        body: "body"
      };
    }
    // Attempts to cancel the command specified by the Command ID. There is no guarantee that the command will be terminated and the underlying process stopped.
    rpc Post#CancelCommand(Post#CancelCommandRequest) returns (CancelCommandResult) {
      option (google.api.http) = {
        post: "//#CancelCommand"
        body: "body"
      };
    }
    // Registers your on-premises server or virtual machine with Amazon EC2 so that you can manage these resources using Run Command. An on-premises server or virtual machine that has been registered with EC2 is called a managed instance. For more information about activations, see <a href="http://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-managedinstances.html">Setting Up Systems Manager in Hybrid Environments</a>.
    rpc Post#CreateActivation(Post#CreateActivationRequest) returns (CreateActivationResult) {
      option (google.api.http) = {
        post: "//#CreateActivation"
        body: "body"
      };
    }
    // <p>Associates the specified Systems Manager document with the specified instances or targets.</p> <p>When you associate a document with one or more instances using instance IDs or tags, the SSM Agent running on the instance processes the document and configures the instance as specified.</p> <p>If you associate a document with an instance that already has an associated document, the system throws the AssociationAlreadyExists exception.</p>
    rpc Post#CreateAssociation(Post#CreateAssociationRequest) returns (CreateAssociationResult) {
      option (google.api.http) = {
        post: "//#CreateAssociation"
        body: "body"
      };
    }
    // <p>Associates the specified Systems Manager document with the specified instances or targets.</p> <p>When you associate a document with one or more instances using instance IDs or tags, the SSM Agent running on the instance processes the document and configures the instance as specified.</p> <p>If you associate a document with an instance that already has an associated document, the system throws the AssociationAlreadyExists exception.</p>
    rpc Post#CreateAssociationBatch(Post#CreateAssociationBatchRequest) returns (CreateAssociationBatchResult) {
      option (google.api.http) = {
        post: "//#CreateAssociationBatch"
        body: "body"
      };
    }
    // <p>Creates a Systems Manager document.</p> <p>After you create a document, you can use CreateAssociation to associate it with one or more running instances.</p>
    rpc Post#CreateDocument(Post#CreateDocumentRequest) returns (CreateDocumentResult) {
      option (google.api.http) = {
        post: "//#CreateDocument"
        body: "body"
      };
    }
    // Creates a new Maintenance Window.
    rpc Post#CreateMaintenanceWindow(Post#CreateMaintenanceWindowRequest) returns (CreateMaintenanceWindowResult) {
      option (google.api.http) = {
        post: "//#CreateMaintenanceWindow"
        body: "body"
      };
    }
    // Creates a patch baseline.
    rpc Post#CreatePatchBaseline(Post#CreatePatchBaselineRequest) returns (CreatePatchBaselineResult) {
      option (google.api.http) = {
        post: "//#CreatePatchBaseline"
        body: "body"
      };
    }
    // <p>Creates a resource data sync configuration to a single bucket in Amazon S3. This is an asynchronous operation that returns immediately. After a successful initial sync is completed, the system continuously syncs data to the Amazon S3 bucket. To check the status of the sync, use the <a href="API_ListResourceDataSync.html">ListResourceDataSync</a> operation.</p> <p>By default, data is not encrypted in Amazon S3. We strongly recommend that you enable encryption in Amazon S3 to ensure secure data storage. We also recommend that you secure access to the Amazon S3 bucket by creating a restrictive bucket policy. To view an example of a restrictive Amazon S3 bucket policy for Resource Data Sync, see <a href="http://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-inventory-configuring.html#sysman-inventory-datasync">Configuring Resource Data Sync for Inventory</a>.</p>
    rpc Post#CreateResourceDataSync(Post#CreateResourceDataSyncRequest) returns (CreateResourceDataSyncResult) {
      option (google.api.http) = {
        post: "//#CreateResourceDataSync"
        body: "body"
      };
    }
    // Deletes an activation. You are not required to delete an activation. If you delete an activation, you can no longer use it to register additional managed instances. Deleting an activation does not de-register managed instances. You must manually de-register managed instances.
    rpc Post#DeleteActivation(Post#DeleteActivationRequest) returns (DeleteActivationResult) {
      option (google.api.http) = {
        post: "//#DeleteActivation"
        body: "body"
      };
    }
    // <p>Disassociates the specified Systems Manager document from the specified instance.</p> <p>When you disassociate a document from an instance, it does not change the configuration of the instance. To change the configuration state of an instance after you disassociate a document, you must create a new document with the desired configuration and associate it with the instance.</p>
    rpc Post#DeleteAssociation(Post#DeleteAssociationRequest) returns (DeleteAssociationResult) {
      option (google.api.http) = {
        post: "//#DeleteAssociation"
        body: "body"
      };
    }
    // <p>Deletes the Systems Manager document and all instance associations to the document.</p> <p>Before you delete the document, we recommend that you use <a>DeleteAssociation</a> to disassociate all instances that are associated with the document.</p>
    rpc Post#DeleteDocument(Post#DeleteDocumentRequest) returns (DeleteDocumentResult) {
      option (google.api.http) = {
        post: "//#DeleteDocument"
        body: "body"
      };
    }
    // Deletes a Maintenance Window.
    rpc Post#DeleteMaintenanceWindow(Post#DeleteMaintenanceWindowRequest) returns (DeleteMaintenanceWindowResult) {
      option (google.api.http) = {
        post: "//#DeleteMaintenanceWindow"
        body: "body"
      };
    }
    // Delete a parameter from the system.
    rpc Post#DeleteParameter(Post#DeleteParameterRequest) returns (DeleteParameterResult) {
      option (google.api.http) = {
        post: "//#DeleteParameter"
        body: "body"
      };
    }
    // Delete a list of parameters. This API is used to delete parameters by using the Amazon EC2 console.
    rpc Post#DeleteParameters(Post#DeleteParametersRequest) returns (DeleteParametersResult) {
      option (google.api.http) = {
        post: "//#DeleteParameters"
        body: "body"
      };
    }
    // Deletes a patch baseline.
    rpc Post#DeletePatchBaseline(Post#DeletePatchBaselineRequest) returns (DeletePatchBaselineResult) {
      option (google.api.http) = {
        post: "//#DeletePatchBaseline"
        body: "body"
      };
    }
    // Deletes a Resource Data Sync configuration. After the configuration is deleted, changes to inventory data on managed instances are no longer synced with the target Amazon S3 bucket. Deleting a sync configuration does not delete data in the target Amazon S3 bucket.
    rpc Post#DeleteResourceDataSync(Post#DeleteResourceDataSyncRequest) returns (DeleteResourceDataSyncResult) {
      option (google.api.http) = {
        post: "//#DeleteResourceDataSync"
        body: "body"
      };
    }
    // Removes the server or virtual machine from the list of registered servers. You can reregister the instance again at any time. If you don't plan to use Run Command on the server, we suggest uninstalling the SSM Agent first.
    rpc Post#DeregisterManagedInstance(Post#DeregisterManagedInstanceRequest) returns (DeregisterManagedInstanceResult) {
      option (google.api.http) = {
        post: "//#DeregisterManagedInstance"
        body: "body"
      };
    }
    // Removes a patch group from a patch baseline.
    rpc Post#DeregisterPatchBaselineForPatchGroup(Post#DeregisterPatchBaselineForPatchGroupRequest) returns (DeregisterPatchBaselineForPatchGroupResult) {
      option (google.api.http) = {
        post: "//#DeregisterPatchBaselineForPatchGroup"
        body: "body"
      };
    }
    // Removes a target from a Maintenance Window.
    rpc Post#DeregisterTargetFromMaintenanceWindow(Post#DeregisterTargetFromMaintenanceWindowRequest) returns (DeregisterTargetFromMaintenanceWindowResult) {
      option (google.api.http) = {
        post: "//#DeregisterTargetFromMaintenanceWindow"
        body: "body"
      };
    }
    // Removes a task from a Maintenance Window.
    rpc Post#DeregisterTaskFromMaintenanceWindow(Post#DeregisterTaskFromMaintenanceWindowRequest) returns (DeregisterTaskFromMaintenanceWindowResult) {
      option (google.api.http) = {
        post: "//#DeregisterTaskFromMaintenanceWindow"
        body: "body"
      };
    }
    // Details about the activation, including: the date and time the activation was created, the expiration date, the IAM role assigned to the instances in the activation, and the number of instances activated by this registration.
    rpc Post#DescribeActivations(Post#DescribeActivationsRequest) returns (DescribeActivationsResult) {
      option (google.api.http) = {
        post: "//#DescribeActivations"
        body: "body"
      };
    }
    // Describes the associations for the specified Systems Manager document or instance.
    rpc Post#DescribeAssociation(Post#DescribeAssociationRequest) returns (DescribeAssociationResult) {
      option (google.api.http) = {
        post: "//#DescribeAssociation"
        body: "body"
      };
    }
    // Provides details about all active and terminated Automation executions.
    rpc Post#DescribeAutomationExecutions(Post#DescribeAutomationExecutionsRequest) returns (DescribeAutomationExecutionsResult) {
      option (google.api.http) = {
        post: "//#DescribeAutomationExecutions"
        body: "body"
      };
    }
    // Lists all patches that could possibly be included in a patch baseline.
    rpc Post#DescribeAvailablePatches(Post#DescribeAvailablePatchesRequest) returns (DescribeAvailablePatchesResult) {
      option (google.api.http) = {
        post: "//#DescribeAvailablePatches"
        body: "body"
      };
    }
    // Describes the specified Systems Manager document.
    rpc Post#DescribeDocument(Post#DescribeDocumentRequest) returns (DescribeDocumentResult) {
      option (google.api.http) = {
        post: "//#DescribeDocument"
        body: "body"
      };
    }
    // Describes the permissions for a Systems Manager document. If you created the document, you are the owner. If a document is shared, it can either be shared privately (by specifying a user's AWS account ID) or publicly (<i>All</i>).
    rpc Post#DescribeDocumentPermission(Post#DescribeDocumentPermissionRequest) returns (DescribeDocumentPermissionResponse) {
      option (google.api.http) = {
        post: "//#DescribeDocumentPermission"
        body: "body"
      };
    }
    // All associations for the instance(s).
    rpc Post#DescribeEffectiveInstanceAssociations(Post#DescribeEffectiveInstanceAssociationsRequest) returns (DescribeEffectiveInstanceAssociationsResult) {
      option (google.api.http) = {
        post: "//#DescribeEffectiveInstanceAssociations"
        body: "body"
      };
    }
    // Retrieves the current effective patches (the patch and the approval state) for the specified patch baseline. Note that this API applies only to Windows patch baselines.
    rpc Post#DescribeEffectivePatchesForPatchBaseline(Post#DescribeEffectivePatchesForPatchBaselineRequest) returns (DescribeEffectivePatchesForPatchBaselineResult) {
      option (google.api.http) = {
        post: "//#DescribeEffectivePatchesForPatchBaseline"
        body: "body"
      };
    }
    // The status of the associations for the instance(s).
    rpc Post#DescribeInstanceAssociationsStatus(Post#DescribeInstanceAssociationsStatusRequest) returns (DescribeInstanceAssociationsStatusResult) {
      option (google.api.http) = {
        post: "//#DescribeInstanceAssociationsStatus"
        body: "body"
      };
    }
    // Describes one or more of your instances. You can use this to get information about instances like the operating system platform, the SSM Agent version (Linux), status etc. If you specify one or more instance IDs, it returns information for those instances. If you do not specify instance IDs, it returns information for all your instances. If you specify an instance ID that is not valid or an instance that you do not own, you receive an error.
    rpc Post#DescribeInstanceInformation(Post#DescribeInstanceInformationRequest) returns (DescribeInstanceInformationResult) {
      option (google.api.http) = {
        post: "//#DescribeInstanceInformation"
        body: "body"
      };
    }
    // Retrieves the high-level patch state of one or more instances.
    rpc Post#DescribeInstancePatchStates(Post#DescribeInstancePatchStatesRequest) returns (DescribeInstancePatchStatesResult) {
      option (google.api.http) = {
        post: "//#DescribeInstancePatchStates"
        body: "body"
      };
    }
    // Retrieves the high-level patch state for the instances in the specified patch group.
    rpc Post#DescribeInstancePatchStatesForPatchGroup(Post#DescribeInstancePatchStatesForPatchGroupRequest) returns (DescribeInstancePatchStatesForPatchGroupResult) {
      option (google.api.http) = {
        post: "//#DescribeInstancePatchStatesForPatchGroup"
        body: "body"
      };
    }
    // Retrieves information about the patches on the specified instance and their state relative to the patch baseline being used for the instance.
    rpc Post#DescribeInstancePatches(Post#DescribeInstancePatchesRequest) returns (DescribeInstancePatchesResult) {
      option (google.api.http) = {
        post: "//#DescribeInstancePatches"
        body: "body"
      };
    }
    // Retrieves the individual task executions (one per target) for a particular task executed as part of a Maintenance Window execution.
    rpc Post#DescribeMaintenanceWindowExecutionTaskInvocations(Post#DescribeMaintenanceWindowExecutionTaskInvocationsRequest) returns (DescribeMaintenanceWindowExecutionTaskInvocationsResult) {
      option (google.api.http) = {
        post: "//#DescribeMaintenanceWindowExecutionTaskInvocations"
        body: "body"
      };
    }
    // For a given Maintenance Window execution, lists the tasks that were executed.
    rpc Post#DescribeMaintenanceWindowExecutionTasks(Post#DescribeMaintenanceWindowExecutionTasksRequest) returns (DescribeMaintenanceWindowExecutionTasksResult) {
      option (google.api.http) = {
        post: "//#DescribeMaintenanceWindowExecutionTasks"
        body: "body"
      };
    }
    // Lists the executions of a Maintenance Window. This includes information about when the Maintenance Window was scheduled to be active, and information about tasks registered and run with the Maintenance Window.
    rpc Post#DescribeMaintenanceWindowExecutions(Post#DescribeMaintenanceWindowExecutionsRequest) returns (DescribeMaintenanceWindowExecutionsResult) {
      option (google.api.http) = {
        post: "//#DescribeMaintenanceWindowExecutions"
        body: "body"
      };
    }
    // Lists the targets registered with the Maintenance Window.
    rpc Post#DescribeMaintenanceWindowTargets(Post#DescribeMaintenanceWindowTargetsRequest) returns (DescribeMaintenanceWindowTargetsResult) {
      option (google.api.http) = {
        post: "//#DescribeMaintenanceWindowTargets"
        body: "body"
      };
    }
    // Lists the tasks in a Maintenance Window.
    rpc Post#DescribeMaintenanceWindowTasks(Post#DescribeMaintenanceWindowTasksRequest) returns (DescribeMaintenanceWindowTasksResult) {
      option (google.api.http) = {
        post: "//#DescribeMaintenanceWindowTasks"
        body: "body"
      };
    }
    // Retrieves the Maintenance Windows in an AWS account.
    rpc Post#DescribeMaintenanceWindows(Post#DescribeMaintenanceWindowsRequest) returns (DescribeMaintenanceWindowsResult) {
      option (google.api.http) = {
        post: "//#DescribeMaintenanceWindows"
        body: "body"
      };
    }
    // <p>Get information about a parameter.</p> <p>Request results are returned on a best-effort basis. If you specify <code>MaxResults</code> in the request, the response includes information up to the limit specified. The number of items returned, however, can be between zero and the value of <code>MaxResults</code>. If the service reaches an internal limit while processing the results, it stops the operation and returns the matching values up to that point and a <code>NextToken</code>. You can specify the <code>NextToken</code> in a subsequent call to get the next set of results.</p>
    rpc Post#DescribeParameters(Post#DescribeParametersRequest) returns (DescribeParametersResult) {
      option (google.api.http) = {
        post: "//#DescribeParameters"
        body: "body"
      };
    }
    // Lists the patch baselines in your AWS account.
    rpc Post#DescribePatchBaselines(Post#DescribePatchBaselinesRequest) returns (DescribePatchBaselinesResult) {
      option (google.api.http) = {
        post: "//#DescribePatchBaselines"
        body: "body"
      };
    }
    // Returns high-level aggregated patch compliance state for a patch group.
    rpc Post#DescribePatchGroupState(Post#DescribePatchGroupStateRequest) returns (DescribePatchGroupStateResult) {
      option (google.api.http) = {
        post: "//#DescribePatchGroupState"
        body: "body"
      };
    }
    // Lists all patch groups that have been registered with patch baselines.
    rpc Post#DescribePatchGroups(Post#DescribePatchGroupsRequest) returns (DescribePatchGroupsResult) {
      option (google.api.http) = {
        post: "//#DescribePatchGroups"
        body: "body"
      };
    }
    // Get detailed information about a particular Automation execution.
    rpc Post#GetAutomationExecution(Post#GetAutomationExecutionRequest) returns (GetAutomationExecutionResult) {
      option (google.api.http) = {
        post: "//#GetAutomationExecution"
        body: "body"
      };
    }
    // Returns detailed information about command execution for an invocation or plugin.
    rpc Post#GetCommandInvocation(Post#GetCommandInvocationRequest) returns (GetCommandInvocationResult) {
      option (google.api.http) = {
        post: "//#GetCommandInvocation"
        body: "body"
      };
    }
    // Retrieves the default patch baseline. Note that Systems Manager supports creating multiple default patch baselines. For example, you can create a default patch baseline for each operating system.
    rpc Post#GetDefaultPatchBaseline(Post#GetDefaultPatchBaselineRequest) returns (GetDefaultPatchBaselineResult) {
      option (google.api.http) = {
        post: "//#GetDefaultPatchBaseline"
        body: "body"
      };
    }
    // Retrieves the current snapshot for the patch baseline the instance uses. This API is primarily used by the AWS-RunPatchBaseline Systems Manager document.
    rpc Post#GetDeployablePatchSnapshotForInstance(Post#GetDeployablePatchSnapshotForInstanceRequest) returns (GetDeployablePatchSnapshotForInstanceResult) {
      option (google.api.http) = {
        post: "//#GetDeployablePatchSnapshotForInstance"
        body: "body"
      };
    }
    // Gets the contents of the specified Systems Manager document.
    rpc Post#GetDocument(Post#GetDocumentRequest) returns (GetDocumentResult) {
      option (google.api.http) = {
        post: "//#GetDocument"
        body: "body"
      };
    }
    // Query inventory information.
    rpc Post#GetInventory(Post#GetInventoryRequest) returns (GetInventoryResult) {
      option (google.api.http) = {
        post: "//#GetInventory"
        body: "body"
      };
    }
    // Return a list of inventory type names for the account, or return a list of attribute names for a specific Inventory item type.
    rpc Post#GetInventorySchema(Post#GetInventorySchemaRequest) returns (GetInventorySchemaResult) {
      option (google.api.http) = {
        post: "//#GetInventorySchema"
        body: "body"
      };
    }
    // Retrieves a Maintenance Window.
    rpc Post#GetMaintenanceWindow(Post#GetMaintenanceWindowRequest) returns (GetMaintenanceWindowResult) {
      option (google.api.http) = {
        post: "//#GetMaintenanceWindow"
        body: "body"
      };
    }
    // Retrieves details about a specific task executed as part of a Maintenance Window execution.
    rpc Post#GetMaintenanceWindowExecution(Post#GetMaintenanceWindowExecutionRequest) returns (GetMaintenanceWindowExecutionResult) {
      option (google.api.http) = {
        post: "//#GetMaintenanceWindowExecution"
        body: "body"
      };
    }
    // Retrieves the details about a specific task executed as part of a Maintenance Window execution.
    rpc Post#GetMaintenanceWindowExecutionTask(Post#GetMaintenanceWindowExecutionTaskRequest) returns (GetMaintenanceWindowExecutionTaskResult) {
      option (google.api.http) = {
        post: "//#GetMaintenanceWindowExecutionTask"
        body: "body"
      };
    }
    // Retrieves a task invocation. A task invocation is a specific task executing on a specific target. Maintenance Windows report status for all invocations.
    rpc Post#GetMaintenanceWindowExecutionTaskInvocation(Post#GetMaintenanceWindowExecutionTaskInvocationRequest) returns (GetMaintenanceWindowExecutionTaskInvocationResult) {
      option (google.api.http) = {
        post: "//#GetMaintenanceWindowExecutionTaskInvocation"
        body: "body"
      };
    }
    // Lists the tasks in a Maintenance Window.
    rpc Post#GetMaintenanceWindowTask(Post#GetMaintenanceWindowTaskRequest) returns (GetMaintenanceWindowTaskResult) {
      option (google.api.http) = {
        post: "//#GetMaintenanceWindowTask"
        body: "body"
      };
    }
    // Get information about a parameter by using the parameter name.
    rpc Post#GetParameter(Post#GetParameterRequest) returns (GetParameterResult) {
      option (google.api.http) = {
        post: "//#GetParameter"
        body: "body"
      };
    }
    // Query a list of all parameters used by the AWS account.
    rpc Post#GetParameterHistory(Post#GetParameterHistoryRequest) returns (GetParameterHistoryResult) {
      option (google.api.http) = {
        post: "//#GetParameterHistory"
        body: "body"
      };
    }
    // Get details of a parameter.
    rpc Post#GetParameters(Post#GetParametersRequest) returns (GetParametersResult) {
      option (google.api.http) = {
        post: "//#GetParameters"
        body: "body"
      };
    }
    // <p>Retrieve parameters in a specific hierarchy. For more information, see <a href="http://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-paramstore-working.html">Working with Systems Manager Parameters</a>. </p> <p>Request results are returned on a best-effort basis. If you specify <code>MaxResults</code> in the request, the response includes information up to the limit specified. The number of items returned, however, can be between zero and the value of <code>MaxResults</code>. If the service reaches an internal limit while processing the results, it stops the operation and returns the matching values up to that point and a <code>NextToken</code>. You can specify the <code>NextToken</code> in a subsequent call to get the next set of results.</p>
    rpc Post#GetParametersByPath(Post#GetParametersByPathRequest) returns (GetParametersByPathResult) {
      option (google.api.http) = {
        post: "//#GetParametersByPath"
        body: "body"
      };
    }
    // Retrieves information about a patch baseline.
    rpc Post#GetPatchBaseline(Post#GetPatchBaselineRequest) returns (GetPatchBaselineResult) {
      option (google.api.http) = {
        post: "//#GetPatchBaseline"
        body: "body"
      };
    }
    // Retrieves the patch baseline that should be used for the specified patch group.
    rpc Post#GetPatchBaselineForPatchGroup(Post#GetPatchBaselineForPatchGroupRequest) returns (GetPatchBaselineForPatchGroupResult) {
      option (google.api.http) = {
        post: "//#GetPatchBaselineForPatchGroup"
        body: "body"
      };
    }
    // Retrieves all versions of an association for a specific association ID.
    rpc Post#ListAssociationVersions(Post#ListAssociationVersionsRequest) returns (ListAssociationVersionsResult) {
      option (google.api.http) = {
        post: "//#ListAssociationVersions"
        body: "body"
      };
    }
    // Lists the associations for the specified Systems Manager document or instance.
    rpc Post#ListAssociations(Post#ListAssociationsRequest) returns (ListAssociationsResult) {
      option (google.api.http) = {
        post: "//#ListAssociations"
        body: "body"
      };
    }
    // An invocation is copy of a command sent to a specific instance. A command can apply to one or more instances. A command invocation applies to one instance. For example, if a user executes SendCommand against three instances, then a command invocation is created for each requested instance ID. ListCommandInvocations provide status about command execution.
    rpc Post#ListCommandInvocations(Post#ListCommandInvocationsRequest) returns (ListCommandInvocationsResult) {
      option (google.api.http) = {
        post: "//#ListCommandInvocations"
        body: "body"
      };
    }
    // Lists the commands requested by users of the AWS account.
    rpc Post#ListCommands(Post#ListCommandsRequest) returns (ListCommandsResult) {
      option (google.api.http) = {
        post: "//#ListCommands"
        body: "body"
      };
    }
    // For a specified resource ID, this API action returns a list of compliance statuses for different resource types. Currently, you can only specify one resource ID per call. List results depend on the criteria specified in the filter.
    rpc Post#ListComplianceItems(Post#ListComplianceItemsRequest) returns (ListComplianceItemsResult) {
      option (google.api.http) = {
        post: "//#ListComplianceItems"
        body: "body"
      };
    }
    // Returns a summary count of compliant and non-compliant resources for a compliance type. For example, this call can return State Manager associations, patches, or custom compliance types according to the filter criteria that you specify.
    rpc Post#ListComplianceSummaries(Post#ListComplianceSummariesRequest) returns (ListComplianceSummariesResult) {
      option (google.api.http) = {
        post: "//#ListComplianceSummaries"
        body: "body"
      };
    }
    // List all versions for a document.
    rpc Post#ListDocumentVersions(Post#ListDocumentVersionsRequest) returns (ListDocumentVersionsResult) {
      option (google.api.http) = {
        post: "//#ListDocumentVersions"
        body: "body"
      };
    }
    // Describes one or more of your Systems Manager documents.
    rpc Post#ListDocuments(Post#ListDocumentsRequest) returns (ListDocumentsResult) {
      option (google.api.http) = {
        post: "//#ListDocuments"
        body: "body"
      };
    }
    // A list of inventory items returned by the request.
    rpc Post#ListInventoryEntries(Post#ListInventoryEntriesRequest) returns (ListInventoryEntriesResult) {
      option (google.api.http) = {
        post: "//#ListInventoryEntries"
        body: "body"
      };
    }
    // Returns a resource-level summary count. The summary includes information about compliant and non-compliant statuses and detailed compliance-item severity counts, according to the filter criteria you specify.
    rpc Post#ListResourceComplianceSummaries(Post#ListResourceComplianceSummariesRequest) returns (ListResourceComplianceSummariesResult) {
      option (google.api.http) = {
        post: "//#ListResourceComplianceSummaries"
        body: "body"
      };
    }
    // <p>Lists your resource data sync configurations. Includes information about the last time a sync attempted to start, the last sync status, and the last time a sync successfully completed.</p> <p>The number of sync configurations might be too large to return using a single call to <code>ListResourceDataSync</code>. You can limit the number of sync configurations returned by using the <code>MaxResults</code> parameter. To determine whether there are more sync configurations to list, check the value of <code>NextToken</code> in the output. If there are more sync configurations to list, you can request them by specifying the <code>NextToken</code> returned in the call to the parameter of a subsequent call. </p>
    rpc Post#ListResourceDataSync(Post#ListResourceDataSyncRequest) returns (ListResourceDataSyncResult) {
      option (google.api.http) = {
        post: "//#ListResourceDataSync"
        body: "body"
      };
    }
    // Returns a list of the tags assigned to the specified resource.
    rpc Post#ListTagsForResource(Post#ListTagsForResourceRequest) returns (ListTagsForResourceResult) {
      option (google.api.http) = {
        post: "//#ListTagsForResource"
        body: "body"
      };
    }
    // Shares a Systems Manager document publicly or privately. If you share a document privately, you must specify the AWS user account IDs for those people who can use the document. If you share a document publicly, you must specify <i>All</i> as the account ID.
    rpc Post#ModifyDocumentPermission(Post#ModifyDocumentPermissionRequest) returns (ModifyDocumentPermissionResponse) {
      option (google.api.http) = {
        post: "//#ModifyDocumentPermission"
        body: "body"
      };
    }
    // Registers a compliance type and other compliance details on a designated resource. This action lets you register custom compliance details with a resource. This call overwrites existing compliance information on the resource, so you must provide a full list of compliance items each time that you send the request.
    rpc Post#PutComplianceItems(Post#PutComplianceItemsRequest) returns (PutComplianceItemsResult) {
      option (google.api.http) = {
        post: "//#PutComplianceItems"
        body: "body"
      };
    }
    // Bulk update custom inventory items on one more instance. The request adds an inventory item, if it doesn't already exist, or updates an inventory item, if it does exist.
    rpc Post#PutInventory(Post#PutInventoryRequest) returns (PutInventoryResult) {
      option (google.api.http) = {
        post: "//#PutInventory"
        body: "body"
      };
    }
    // Add one or more parameters to the system.
    rpc Post#PutParameter(Post#PutParameterRequest) returns (PutParameterResult) {
      option (google.api.http) = {
        post: "//#PutParameter"
        body: "body"
      };
    }
    // Defines the default patch baseline.
    rpc Post#RegisterDefaultPatchBaseline(Post#RegisterDefaultPatchBaselineRequest) returns (RegisterDefaultPatchBaselineResult) {
      option (google.api.http) = {
        post: "//#RegisterDefaultPatchBaseline"
        body: "body"
      };
    }
    // Registers a patch baseline for a patch group.
    rpc Post#RegisterPatchBaselineForPatchGroup(Post#RegisterPatchBaselineForPatchGroupRequest) returns (RegisterPatchBaselineForPatchGroupResult) {
      option (google.api.http) = {
        post: "//#RegisterPatchBaselineForPatchGroup"
        body: "body"
      };
    }
    // Registers a target with a Maintenance Window.
    rpc Post#RegisterTargetWithMaintenanceWindow(Post#RegisterTargetWithMaintenanceWindowRequest) returns (RegisterTargetWithMaintenanceWindowResult) {
      option (google.api.http) = {
        post: "//#RegisterTargetWithMaintenanceWindow"
        body: "body"
      };
    }
    // Adds a new task to a Maintenance Window.
    rpc Post#RegisterTaskWithMaintenanceWindow(Post#RegisterTaskWithMaintenanceWindowRequest) returns (RegisterTaskWithMaintenanceWindowResult) {
      option (google.api.http) = {
        post: "//#RegisterTaskWithMaintenanceWindow"
        body: "body"
      };
    }
    // Removes all tags from the specified resource.
    rpc Post#RemoveTagsFromResource(Post#RemoveTagsFromResourceRequest) returns (RemoveTagsFromResourceResult) {
      option (google.api.http) = {
        post: "//#RemoveTagsFromResource"
        body: "body"
      };
    }
    // Sends a signal to an Automation execution to change the current behavior or status of the execution.
    rpc Post#SendAutomationSignal(Post#SendAutomationSignalRequest) returns (SendAutomationSignalResult) {
      option (google.api.http) = {
        post: "//#SendAutomationSignal"
        body: "body"
      };
    }
    // Executes commands on one or more managed instances.
    rpc Post#SendCommand(Post#SendCommandRequest) returns (SendCommandResult) {
      option (google.api.http) = {
        post: "//#SendCommand"
        body: "body"
      };
    }
    // Initiates execution of an Automation document.
    rpc Post#StartAutomationExecution(Post#StartAutomationExecutionRequest) returns (StartAutomationExecutionResult) {
      option (google.api.http) = {
        post: "//#StartAutomationExecution"
        body: "body"
      };
    }
    // Stop an Automation that is currently executing.
    rpc Post#StopAutomationExecution(Post#StopAutomationExecutionRequest) returns (StopAutomationExecutionResult) {
      option (google.api.http) = {
        post: "//#StopAutomationExecution"
        body: "body"
      };
    }
    // Updates an association. You can update the association name and version, the document version, schedule, parameters, and Amazon S3 output.
    rpc Post#UpdateAssociation(Post#UpdateAssociationRequest) returns (UpdateAssociationResult) {
      option (google.api.http) = {
        post: "//#UpdateAssociation"
        body: "body"
      };
    }
    // Updates the status of the Systems Manager document associated with the specified instance.
    rpc Post#UpdateAssociationStatus(Post#UpdateAssociationStatusRequest) returns (UpdateAssociationStatusResult) {
      option (google.api.http) = {
        post: "//#UpdateAssociationStatus"
        body: "body"
      };
    }
    // The document you want to update.
    rpc Post#UpdateDocument(Post#UpdateDocumentRequest) returns (UpdateDocumentResult) {
      option (google.api.http) = {
        post: "//#UpdateDocument"
        body: "body"
      };
    }
    // Set the default version of a document.
    rpc Post#UpdateDocumentDefaultVersion(Post#UpdateDocumentDefaultVersionRequest) returns (UpdateDocumentDefaultVersionResult) {
      option (google.api.http) = {
        post: "//#UpdateDocumentDefaultVersion"
        body: "body"
      };
    }
    // Updates an existing Maintenance Window. Only specified parameters are modified.
    rpc Post#UpdateMaintenanceWindow(Post#UpdateMaintenanceWindowRequest) returns (UpdateMaintenanceWindowResult) {
      option (google.api.http) = {
        post: "//#UpdateMaintenanceWindow"
        body: "body"
      };
    }
    // <p>Modifies the target of an existing Maintenance Window. You can't change the target type, but you can change the following:</p> <p>The target from being an ID target to a Tag target, or a Tag target to an ID target.</p> <p>IDs for an ID target.</p> <p>Tags for a Tag target.</p> <p>Owner.</p> <p>Name.</p> <p>Description.</p> <p>If a parameter is null, then the corresponding field is not modified.</p>
    rpc Post#UpdateMaintenanceWindowTarget(Post#UpdateMaintenanceWindowTargetRequest) returns (UpdateMaintenanceWindowTargetResult) {
      option (google.api.http) = {
        post: "//#UpdateMaintenanceWindowTarget"
        body: "body"
      };
    }
    // <p>Modifies a task assigned to a Maintenance Window. You can't change the task type, but you can change the following values:</p> <p>Task ARN. For example, you can change a RUN_COMMAND task from AWS-RunPowerShellScript to AWS-RunShellScript.</p> <p>Service role ARN.</p> <p>Task parameters.</p> <p>Task priority.</p> <p>Task MaxConcurrency and MaxErrors.</p> <p>Log location.</p> <p>If a parameter is null, then the corresponding field is not modified. Also, if you set Replace to true, then all fields required by the RegisterTaskWithMaintenanceWindow action are required for this request. Optional fields that aren't specified are set to null.</p>
    rpc Post#UpdateMaintenanceWindowTask(Post#UpdateMaintenanceWindowTaskRequest) returns (UpdateMaintenanceWindowTaskResult) {
      option (google.api.http) = {
        post: "//#UpdateMaintenanceWindowTask"
        body: "body"
      };
    }
    // Assigns or changes an Amazon Identity and Access Management (IAM) role to the managed instance.
    rpc Post#UpdateManagedInstanceRole(Post#UpdateManagedInstanceRoleRequest) returns (UpdateManagedInstanceRoleResult) {
      option (google.api.http) = {
        post: "//#UpdateManagedInstanceRole"
        body: "body"
      };
    }
    // Modifies an existing patch baseline. Fields not specified in the request are left unchanged.
    rpc Post#UpdatePatchBaseline(Post#UpdatePatchBaselineRequest) returns (UpdatePatchBaselineResult) {
      option (google.api.http) = {
        post: "//#UpdatePatchBaseline"
        body: "body"
      };
    }
}

syntax = "proto3";

import "google/api/annotations.proto";

package amazonec2containerregistry;

message PostRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    BatchCheckLayerAvailabilityRequest body = 10;
}

message Post#BatchDeleteImageRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    BatchDeleteImageRequest body = 10;
}

message Post#BatchGetImageRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    BatchGetImageRequest body = 10;
}

message Post#CompleteLayerUploadRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CompleteLayerUploadRequest body = 10;
}

message Post#CreateRepositoryRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateRepositoryRequest body = 10;
}

message Post#DeleteRepositoryRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteRepositoryRequest body = 10;
}

message Post#DeleteRepositoryPolicyRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteRepositoryPolicyRequest body = 10;
}

message Post#DescribeImagesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeImagesRequest body = 10;
    // Pagination limit
    string maxResults = 11;
    // Pagination token
    string nextToken = 12;
}

message Post#DescribeRepositoriesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeRepositoriesRequest body = 10;
    // Pagination limit
    string maxResults = 11;
    // Pagination token
    string nextToken = 12;
}

message Post#GetAuthorizationTokenRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetAuthorizationTokenRequest body = 10;
}

message Post#GetDownloadUrlForLayerRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetDownloadUrlForLayerRequest body = 10;
}

message Post#GetRepositoryPolicyRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetRepositoryPolicyRequest body = 10;
}

message Post#InitiateLayerUploadRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    InitiateLayerUploadRequest body = 10;
}

message Post#ListImagesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListImagesRequest body = 10;
    // Pagination limit
    string maxResults = 11;
    // Pagination token
    string nextToken = 12;
}

message Post#PutImageRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    PutImageRequest body = 10;
}

message Post#SetRepositoryPolicyRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    SetRepositoryPolicyRequest body = 10;
}

message Post#UploadLayerPartRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UploadLayerPartRequest body = 10;
}

message AuthorizationData {
    // A base64-encoded string that contains authorization data for the specified Amazon ECR registry. When the string is decoded, it is presented in the format <code>user:password</code> for private registry authentication using <code>docker login</code>.
    string authorizationToken = 1;
    // The Unix time in seconds and milliseconds when the authorization token expires. Authorization tokens are valid for 12 hours.
    string expiresAt = 2;
    // The registry URL to use for this authorization token in a <code>docker login</code> command. The Amazon ECR registry URL format is <code>https://aws_account_id.dkr.ecr.region.amazonaws.com</code>. For example, <code>https://012345678910.dkr.ecr.us-east-1.amazonaws.com</code>..
    string proxyEndpoint = 3;
}

repeated AuthorizationData AuthorizationDataList = 1



message BatchCheckLayerAvailabilityRequest {
    // The digests of the image layers to check.
    array layerDigests = 1;
    // The AWS account ID associated with the registry that contains the image layers to check. If you do not specify a registry, the default registry is assumed.
    string registryId = 2;
    // The name of the repository that is associated with the image layers to check.
    string repositoryName = 3;
}

message BatchCheckLayerAvailabilityResponse {
    // Any failures associated with the call.
    array failures = 1;
    // A list of image layer objects corresponding to the image layer references in the request.
    array layers = 2;
}

message BatchDeleteImageRequest {
    // A list of image ID references that correspond to images to delete. The format of the <code>imageIds</code> reference is <code>imageTag=tag</code> or <code>imageDigest=digest</code>.
    array imageIds = 1;
    // The AWS account ID associated with the registry that contains the image to delete. If you do not specify a registry, the default registry is assumed.
    string registryId = 2;
    // The repository that contains the image to delete.
    string repositoryName = 3;
}

message BatchDeleteImageResponse {
    // Any failures associated with the call.
    array failures = 1;
    // The image IDs of the deleted images.
    array imageIds = 2;
}

message BatchGetImageRequest {
    // <p>The accepted media types for the request.</p> <p>Valid values: <code>application/vnd.docker.distribution.manifest.v1+json</code> | <code>application/vnd.docker.distribution.manifest.v2+json</code> | <code>application/vnd.oci.image.manifest.v1+json</code> </p>
    array acceptedMediaTypes = 1;
    // A list of image ID references that correspond to images to describe. The format of the <code>imageIds</code> reference is <code>imageTag=tag</code> or <code>imageDigest=digest</code>.
    array imageIds = 2;
    // The AWS account ID associated with the registry that contains the images to describe. If you do not specify a registry, the default registry is assumed.
    string registryId = 3;
    // The repository that contains the images to describe.
    string repositoryName = 4;
}

message BatchGetImageResponse {
    // Any failures associated with the call.
    array failures = 1;
    // A list of image objects corresponding to the image references in the request.
    array images = 2;
}



repeated string BatchedOperationLayerDigestList = 1

message CompleteLayerUploadRequest {
    // The <code>sha256</code> digest of the image layer.
    array layerDigests = 1;
    // The AWS account ID associated with the registry to which to upload layers. If you do not specify a registry, the default registry is assumed.
    string registryId = 2;
    // The name of the repository to associate with the image layer.
    string repositoryName = 3;
    // The upload ID from a previous <a>InitiateLayerUpload</a> operation to associate with the image layer.
    string uploadId = 4;
}

message CompleteLayerUploadResponse {
    // The <code>sha256</code> digest of the image layer.
    string layerDigest = 1;
    // The registry ID associated with the request.
    string registryId = 2;
    // The repository name associated with the request.
    string repositoryName = 3;
    // The upload ID associated with the layer.
    string uploadId = 4;
}

message CreateRepositoryRequest {
    // The name to use for the repository. The repository name may be specified on its own (such as <code>nginx-web-app</code>) or it can be prepended with a namespace to group the repository into a category (such as <code>project-a/nginx-web-app</code>).
    string repositoryName = 1;
}

message CreateRepositoryResponse {
    // The repository that was created.
    Repository repository = 1;
}

message DeleteRepositoryPolicyRequest {
    // The AWS account ID associated with the registry that contains the repository policy to delete. If you do not specify a registry, the default registry is assumed.
    string registryId = 1;
    // The name of the repository that is associated with the repository policy to delete.
    string repositoryName = 2;
}

message DeleteRepositoryPolicyResponse {
    // The JSON repository policy that was deleted from the repository.
    string policyText = 1;
    // The registry ID associated with the request.
    string registryId = 2;
    // The repository name associated with the request.
    string repositoryName = 3;
}

message DeleteRepositoryRequest {
    // Force the deletion of the repository if it contains images.
    boolean force = 1;
    // The AWS account ID associated with the registry that contains the repository to delete. If you do not specify a registry, the default registry is assumed.
    string registryId = 2;
    // The name of the repository to delete.
    string repositoryName = 3;
}

message DeleteRepositoryResponse {
    // The repository that was deleted.
    Repository repository = 1;
}

message DescribeImagesFilter {
    // The tag status with which to filter your <a>DescribeImages</a> results. You can filter results based on whether they are <code>TAGGED</code> or <code>UNTAGGED</code>.
    TagStatus tagStatus = 1;
}

message DescribeImagesRequest {
    // The filter key and value with which to filter your <code>DescribeImages</code> results.
    DescribeImagesFilter filter = 1;
    // The list of image IDs for the requested repository.
    array imageIds = 2;
    // The maximum number of repository results returned by <code>DescribeImages</code> in paginated output. When this parameter is used, <code>DescribeImages</code> only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>DescribeImages</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If this parameter is not used, then <code>DescribeImages</code> returns up to 100 results and a <code>nextToken</code> value, if applicable.
    integer maxResults = 3;
    // The <code>nextToken</code> value returned from a previous paginated <code>DescribeImages</code> request where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value. This value is <code>null</code> when there are no more results to return.
    string nextToken = 4;
    // The AWS account ID associated with the registry that contains the repository in which to describe images. If you do not specify a registry, the default registry is assumed.
    string registryId = 5;
    // A list of repositories to describe. If this parameter is omitted, then all repositories in a registry are described.
    string repositoryName = 6;
}

message DescribeImagesResponse {
    // A list of <a>ImageDetail</a> objects that contain data about the image.
    array imageDetails = 1;
    // The <code>nextToken</code> value to include in a future <code>DescribeImages</code> request. When the results of a <code>DescribeImages</code> request exceed <code>maxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.
    string nextToken = 2;
}

message DescribeRepositoriesRequest {
    // The maximum number of repository results returned by <code>DescribeRepositories</code> in paginated output. When this parameter is used, <code>DescribeRepositories</code> only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>DescribeRepositories</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If this parameter is not used, then <code>DescribeRepositories</code> returns up to 100 results and a <code>nextToken</code> value, if applicable.
    integer maxResults = 1;
    // <p>The <code>nextToken</code> value returned from a previous paginated <code>DescribeRepositories</code> request where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value. This value is <code>null</code> when there are no more results to return.</p> <note> <p>This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.</p> </note>
    string nextToken = 2;
    // The AWS account ID associated with the registry that contains the repositories to be described. If you do not specify a registry, the default registry is assumed.
    string registryId = 3;
    // A list of repositories to describe. If this parameter is omitted, then all repositories in a registry are described.
    array repositoryNames = 4;
}

message DescribeRepositoriesResponse {
    // The <code>nextToken</code> value to include in a future <code>DescribeRepositories</code> request. When the results of a <code>DescribeRepositories</code> request exceed <code>maxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.
    string nextToken = 1;
    // A list of repository objects corresponding to valid repositories.
    array repositories = 2;
}

message EmptyUploadException {
    // The error message associated with the exception.
    string message = 1;
}







repeated string GetAuthorizationTokenRegistryIdList = 1

message GetAuthorizationTokenRequest {
    // A list of AWS account IDs that are associated with the registries for which to get authorization tokens. If you do not specify a registry, the default registry is assumed.
    array registryIds = 1;
}

message GetAuthorizationTokenResponse {
    // A list of authorization token data objects that correspond to the <code>registryIds</code> values in the request.
    array authorizationData = 1;
}

message GetDownloadUrlForLayerRequest {
    // The digest of the image layer to download.
    string layerDigest = 1;
    // The AWS account ID associated with the registry that contains the image layer to download. If you do not specify a registry, the default registry is assumed.
    string registryId = 2;
    // The name of the repository that is associated with the image layer to download.
    string repositoryName = 3;
}

message GetDownloadUrlForLayerResponse {
    // The pre-signed Amazon S3 download URL for the requested layer.
    string downloadUrl = 1;
    // The digest of the image layer to download.
    string layerDigest = 2;
}

message GetRepositoryPolicyRequest {
    // The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed.
    string registryId = 1;
    // The name of the repository whose policy you want to retrieve.
    string repositoryName = 2;
}

message GetRepositoryPolicyResponse {
    // The JSON repository policy text associated with the repository.
    string policyText = 1;
    // The registry ID associated with the request.
    string registryId = 2;
    // The repository name associated with the request.
    string repositoryName = 3;
}

message Image {
    // An object containing the image tag and image digest associated with an image.
    ImageIdentifier imageId = 1;
    // The image manifest associated with the image.
    string imageManifest = 2;
    // The AWS account ID associated with the registry containing the image.
    string registryId = 3;
    // The name of the repository associated with the image.
    string repositoryName = 4;
}

message ImageAlreadyExistsException {
    // The error message associated with the exception.
    string message = 1;
}

message ImageDetail {
    // The <code>sha256</code> digest of the image manifest.
    string imageDigest = 1;
    // The date and time, expressed in standard JavaScript date format, at which the current image was pushed to the repository.
    string imagePushedAt = 2;
    // <p>The size, in bytes, of the image in the repository.</p> <note> <p>Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the <code>docker images</code> command shows the uncompressed image size, so it may return a larger image size than the image sizes returned by <a>DescribeImages</a>.</p> </note>
    integer imageSizeInBytes = 3;
    // The list of tags associated with this image.
    array imageTags = 4;
    // The AWS account ID associated with the registry to which this image belongs.
    string registryId = 5;
    // The name of the repository to which this image belongs.
    string repositoryName = 6;
}

repeated ImageDetail ImageDetailList = 1



message ImageFailure {
    // The code associated with the failure.
    ImageFailureCode failureCode = 1;
    // The reason for the failure.
    string failureReason = 2;
    // The image ID associated with the failure.
    ImageIdentifier imageId = 3;
}

enum ImageFailureCode {
    INVALIDIMAGEDIGEST = 0;
    INVALIDIMAGETAG = 1;
    IMAGETAGDOESNOTMATCHDIGEST = 2;
    IMAGENOTFOUND = 3;
    MISSINGDIGESTANDTAG = 4;
}

repeated ImageFailure ImageFailureList = 1



message ImageIdentifier {
    // The <code>sha256</code> digest of the image manifest.
    string imageDigest = 1;
    // The tag used for the image.
    string imageTag = 2;
}

repeated ImageIdentifier ImageIdentifierList = 1

repeated Image ImageList = 1



message ImageNotFoundException {
    string message = 1;
}





repeated string ImageTagList = 1

message InitiateLayerUploadRequest {
    // The AWS account ID associated with the registry that you intend to upload layers to. If you do not specify a registry, the default registry is assumed.
    string registryId = 1;
    // The name of the repository that you intend to upload layers to.
    string repositoryName = 2;
}

message InitiateLayerUploadResponse {
    // The size, in bytes, that Amazon ECR expects future layer part uploads to be.
    integer partSize = 1;
    // The upload ID for the layer upload. This parameter is passed to further <a>UploadLayerPart</a> and <a>CompleteLayerUpload</a> operations.
    string uploadId = 2;
}

message InvalidLayerException {
    // The error message associated with the exception.
    string message = 1;
}

message InvalidLayerPartException {
    // The last valid byte received from the layer part upload that is associated with the exception.
    integer lastValidByteReceived = 1;
    // The error message associated with the exception.
    string message = 2;
    // The registry ID associated with the exception.
    string registryId = 3;
    // The repository name associated with the exception.
    string repositoryName = 4;
    // The upload ID associated with the exception.
    string uploadId = 5;
}

message InvalidParameterException {
    // The error message associated with the exception.
    string message = 1;
}

message Layer {
    // The availability status of the image layer.
    LayerAvailability layerAvailability = 1;
    // The <code>sha256</code> digest of the image layer.
    string layerDigest = 2;
    // The size, in bytes, of the image layer.
    integer layerSize = 3;
    // The media type of the layer, such as <code>application/vnd.docker.image.rootfs.diff.tar.gzip</code> or <code>application/vnd.oci.image.layer.v1.tar+gzip</code>.
    string mediaType = 4;
}

message LayerAlreadyExistsException {
    // The error message associated with the exception.
    string message = 1;
}

enum LayerAvailability {
    AVAILABLE = 0;
    UNAVAILABLE = 1;
}



repeated string LayerDigestList = 1

message LayerFailure {
    // The failure code associated with the failure.
    LayerFailureCode failureCode = 1;
    // The reason for the failure.
    string failureReason = 2;
    // The layer digest associated with the failure.
    string layerDigest = 3;
}

enum LayerFailureCode {
    INVALIDLAYERDIGEST = 0;
    MISSINGLAYERDIGEST = 1;
}

repeated LayerFailure LayerFailureList = 1



message LayerInaccessibleException {
    // The error message associated with the exception.
    string message = 1;
}

repeated Layer LayerList = 1



message LayerPartTooSmallException {
    // The error message associated with the exception.
    string message = 1;
}

message LayersNotFoundException {
    // The error message associated with the exception.
    string message = 1;
}

message LimitExceededException {
    // The error message associated with the exception.
    string message = 1;
}

message ListImagesFilter {
    // The tag status with which to filter your <a>ListImages</a> results. You can filter results based on whether they are <code>TAGGED</code> or <code>UNTAGGED</code>.
    TagStatus tagStatus = 1;
}

message ListImagesRequest {
    // The filter key and value with which to filter your <code>ListImages</code> results.
    ListImagesFilter filter = 1;
    // The maximum number of image results returned by <code>ListImages</code> in paginated output. When this parameter is used, <code>ListImages</code> only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>ListImages</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If this parameter is not used, then <code>ListImages</code> returns up to 100 results and a <code>nextToken</code> value, if applicable.
    integer maxResults = 2;
    // <p>The <code>nextToken</code> value returned from a previous paginated <code>ListImages</code> request where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value. This value is <code>null</code> when there are no more results to return.</p> <note> <p>This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.</p> </note>
    string nextToken = 3;
    // The AWS account ID associated with the registry that contains the repository to list images in. If you do not specify a registry, the default registry is assumed.
    string registryId = 4;
    // The repository whose image IDs are to be listed.
    string repositoryName = 5;
}

message ListImagesResponse {
    // The list of image IDs for the requested repository.
    array imageIds = 1;
    // The <code>nextToken</code> value to include in a future <code>ListImages</code> request. When the results of a <code>ListImages</code> request exceed <code>maxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.
    string nextToken = 2;
}





repeated string MediaTypeList = 1









message PutImageRequest {
    // The image manifest corresponding to the image to be uploaded.
    string imageManifest = 1;
    // The tag to associate with the image. This parameter is required for images that use the Docker Image Manifest V2 Schema 2 or OCI formats.
    string imageTag = 2;
    // The AWS account ID associated with the registry that contains the repository in which to put the image. If you do not specify a registry, the default registry is assumed.
    string registryId = 3;
    // The name of the repository in which to put the image.
    string repositoryName = 4;
}

message PutImageResponse {
    // Details of the image uploaded.
    Image image = 1;
}

message Repository {
    // The date and time, in JavaScript date/time format, when the repository was created.
    string createdAt = 1;
    // The AWS account ID associated with the registry that contains the repository.
    string registryId = 2;
    // The Amazon Resource Name (ARN) that identifies the repository. The ARN contains the <code>arn:aws:ecr</code> namespace, followed by the region of the repository, the AWS account ID of the repository owner, the repository namespace, and then the repository name. For example, <code>arn:aws:ecr:region:012345678910:repository/test</code>.
    string repositoryArn = 3;
    // The name of the repository.
    string repositoryName = 4;
    // The URI for the repository. You can use this URI for Docker <code>push</code> and <code>pull</code> operations.
    string repositoryUri = 5;
}

message RepositoryAlreadyExistsException {
    // The error message associated with the exception.
    string message = 1;
}

repeated Repository RepositoryList = 1



repeated string RepositoryNameList = 1

message RepositoryNotEmptyException {
    // The error message associated with the exception.
    string message = 1;
}

message RepositoryNotFoundException {
    // The error message associated with the exception.
    string message = 1;
}

message RepositoryPolicyNotFoundException {
    // The error message associated with the exception.
    string message = 1;
}

message ServerException {
    // The error message associated with the exception.
    string message = 1;
}

message SetRepositoryPolicyRequest {
    // If the policy you are attempting to set on a repository policy would prevent you from setting another policy in the future, you must force the <a>SetRepositoryPolicy</a> operation. This is intended to prevent accidental repository lock outs.
    boolean force = 1;
    // The JSON repository policy text to apply to the repository.
    string policyText = 2;
    // The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed.
    string registryId = 3;
    // The name of the repository to receive the policy.
    string repositoryName = 4;
}

message SetRepositoryPolicyResponse {
    // The JSON repository policy text applied to the repository.
    string policyText = 1;
    // The registry ID associated with the request.
    string registryId = 2;
    // The repository name associated with the request.
    string repositoryName = 3;
}

enum TagStatu {
    TAGGED = 0;
    UNTAGGED = 1;
}

message UploadLayerPartRequest {
    // The base64-encoded layer part payload.
    string layerPartBlob = 1;
    // The integer value of the first byte of the layer part.
    integer partFirstByte = 2;
    // The integer value of the last byte of the layer part.
    integer partLastByte = 3;
    // The AWS account ID associated with the registry that you are uploading layer parts to. If you do not specify a registry, the default registry is assumed.
    string registryId = 4;
    // The name of the repository that you are uploading layer parts to.
    string repositoryName = 5;
    // The upload ID from a previous <a>InitiateLayerUpload</a> operation to associate with the layer part upload.
    string uploadId = 6;
}

message UploadLayerPartResponse {
    // The integer value of the last byte received in the request.
    integer lastByteReceived = 1;
    // The registry ID associated with the request.
    string registryId = 2;
    // The repository name associated with the request.
    string repositoryName = 3;
    // The upload ID associated with the request.
    string uploadId = 4;
}

message UploadNotFoundException {
    // The error message associated with the exception.
    string message = 1;
}

service AmazonEC2ContainerRegistryService {
    // <p>Check the availability of multiple image layers in a specified registry and repository.</p> <note> <p>This operation is used by the Amazon ECR proxy, and it is not intended for general use by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>
    rpc Post(PostRequest) returns (BatchCheckLayerAvailabilityResponse) {
      option (google.api.http) = {
        post: "//"
        body: "body"
      };
    }
    // <p>Deletes a list of specified images within a specified repository. Images are specified with either <code>imageTag</code> or <code>imageDigest</code>.</p> <p>You can remove a tag from an image by specifying the image's tag in your request. When you remove the last tag from an image, the image is deleted from your repository.</p> <p>You can completely delete an image (and all of its tags) by specifying the image's digest in your request.</p>
    rpc Post#BatchDeleteImage(Post#BatchDeleteImageRequest) returns (BatchDeleteImageResponse) {
      option (google.api.http) = {
        post: "//#BatchDeleteImage"
        body: "body"
      };
    }
    // Gets detailed information for specified images within a specified repository. Images are specified with either <code>imageTag</code> or <code>imageDigest</code>.
    rpc Post#BatchGetImage(Post#BatchGetImageRequest) returns (BatchGetImageResponse) {
      option (google.api.http) = {
        post: "//#BatchGetImage"
        body: "body"
      };
    }
    // <p>Inform Amazon ECR that the image layer upload for a specified registry, repository name, and upload ID, has completed. You can optionally provide a <code>sha256</code> digest of the image layer for data validation purposes.</p> <note> <p>This operation is used by the Amazon ECR proxy, and it is not intended for general use by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>
    rpc Post#CompleteLayerUpload(Post#CompleteLayerUploadRequest) returns (CompleteLayerUploadResponse) {
      option (google.api.http) = {
        post: "//#CompleteLayerUpload"
        body: "body"
      };
    }
    // Creates an image repository.
    rpc Post#CreateRepository(Post#CreateRepositoryRequest) returns (CreateRepositoryResponse) {
      option (google.api.http) = {
        post: "//#CreateRepository"
        body: "body"
      };
    }
    // Deletes an existing image repository. If a repository contains images, you must use the <code>force</code> option to delete it.
    rpc Post#DeleteRepository(Post#DeleteRepositoryRequest) returns (DeleteRepositoryResponse) {
      option (google.api.http) = {
        post: "//#DeleteRepository"
        body: "body"
      };
    }
    // Deletes the repository policy from a specified repository.
    rpc Post#DeleteRepositoryPolicy(Post#DeleteRepositoryPolicyRequest) returns (DeleteRepositoryPolicyResponse) {
      option (google.api.http) = {
        post: "//#DeleteRepositoryPolicy"
        body: "body"
      };
    }
    // <p>Returns metadata about the images in a repository, including image size, image tags, and creation date.</p> <note> <p>Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the <code>docker images</code> command shows the uncompressed image size, so it may return a larger image size than the image sizes returned by <a>DescribeImages</a>.</p> </note>
    rpc Post#DescribeImages(Post#DescribeImagesRequest) returns (DescribeImagesResponse) {
      option (google.api.http) = {
        post: "//#DescribeImages"
        body: "body"
      };
    }
    // Describes image repositories in a registry.
    rpc Post#DescribeRepositories(Post#DescribeRepositoriesRequest) returns (DescribeRepositoriesResponse) {
      option (google.api.http) = {
        post: "//#DescribeRepositories"
        body: "body"
      };
    }
    // <p>Retrieves a token that is valid for a specified registry for 12 hours. This command allows you to use the <code>docker</code> CLI to push and pull images with Amazon ECR. If you do not specify a registry, the default registry is assumed.</p> <p>The <code>authorizationToken</code> returned for each registry specified is a base64 encoded string that can be decoded and used in a <code>docker login</code> command to authenticate to a registry. The AWS CLI offers an <code>aws ecr get-login</code> command that simplifies the login process.</p>
    rpc Post#GetAuthorizationToken(Post#GetAuthorizationTokenRequest) returns (GetAuthorizationTokenResponse) {
      option (google.api.http) = {
        post: "//#GetAuthorizationToken"
        body: "body"
      };
    }
    // <p>Retrieves the pre-signed Amazon S3 download URL corresponding to an image layer. You can only get URLs for image layers that are referenced in an image.</p> <note> <p>This operation is used by the Amazon ECR proxy, and it is not intended for general use by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>
    rpc Post#GetDownloadUrlForLayer(Post#GetDownloadUrlForLayerRequest) returns (GetDownloadUrlForLayerResponse) {
      option (google.api.http) = {
        post: "//#GetDownloadUrlForLayer"
        body: "body"
      };
    }
    // Retrieves the repository policy for a specified repository.
    rpc Post#GetRepositoryPolicy(Post#GetRepositoryPolicyRequest) returns (GetRepositoryPolicyResponse) {
      option (google.api.http) = {
        post: "//#GetRepositoryPolicy"
        body: "body"
      };
    }
    // <p>Notify Amazon ECR that you intend to upload an image layer.</p> <note> <p>This operation is used by the Amazon ECR proxy, and it is not intended for general use by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>
    rpc Post#InitiateLayerUpload(Post#InitiateLayerUploadRequest) returns (InitiateLayerUploadResponse) {
      option (google.api.http) = {
        post: "//#InitiateLayerUpload"
        body: "body"
      };
    }
    // <p>Lists all the image IDs for a given repository.</p> <p>You can filter images based on whether or not they are tagged by setting the <code>tagStatus</code> parameter to <code>TAGGED</code> or <code>UNTAGGED</code>. For example, you can filter your results to return only <code>UNTAGGED</code> images and then pipe that result to a <a>BatchDeleteImage</a> operation to delete them. Or, you can filter your results to return only <code>TAGGED</code> images to list all of the tags in your repository.</p>
    rpc Post#ListImages(Post#ListImagesRequest) returns (ListImagesResponse) {
      option (google.api.http) = {
        post: "//#ListImages"
        body: "body"
      };
    }
    // <p>Creates or updates the image manifest and tags associated with an image.</p> <note> <p>This operation is used by the Amazon ECR proxy, and it is not intended for general use by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>
    rpc Post#PutImage(Post#PutImageRequest) returns (PutImageResponse) {
      option (google.api.http) = {
        post: "//#PutImage"
        body: "body"
      };
    }
    // Applies a repository policy on a specified repository to control access permissions.
    rpc Post#SetRepositoryPolicy(Post#SetRepositoryPolicyRequest) returns (SetRepositoryPolicyResponse) {
      option (google.api.http) = {
        post: "//#SetRepositoryPolicy"
        body: "body"
      };
    }
    // <p>Uploads an image layer part to Amazon ECR.</p> <note> <p>This operation is used by the Amazon ECR proxy, and it is not intended for general use by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>
    rpc Post#UploadLayerPart(Post#UploadLayerPartRequest) returns (UploadLayerPartResponse) {
      option (google.api.http) = {
        post: "//#UploadLayerPart"
        body: "body"
      };
    }
}

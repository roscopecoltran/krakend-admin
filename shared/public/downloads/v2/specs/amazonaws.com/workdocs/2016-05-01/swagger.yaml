swagger: '2.0'
schemes:
  - http
host: workdocs.amazonaws.com
basePath: /
x-hasEquivalentPaths: true
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: 'https://github.com/mermade/aws2openapi'
  description: '<p>The WorkDocs API is designed for the following use cases:</p> <ul> <li> <p>File Migration: File migration applications are supported for users who want to migrate their files from an on-premise or off-premise file system or service. Users can insert files into a user directory structure, as well as allow for basic metadata changes, such as modifications to the permissions of files.</p> </li> <li> <p>Security: Support security applications are supported for users who have additional security needs, such as anti-virus or data loss prevention. The APIs, in conjunction with Amazon CloudTrail, allow these applications to detect when changes occur in Amazon WorkDocs, so the application can take the necessary actions and replace the target file. The application can also choose to email the user if the target file violates the policy.</p> </li> <li> <p>eDiscovery/Analytics: General administrative applications are supported, such as eDiscovery and analytics. These applications can choose to mimic and/or record the actions in an Amazon WorkDocs site, in conjunction with Amazon CloudTrails, to replicate data for eDiscovery, backup, or analytical applications.</p> </li> </ul> <p>All Amazon WorkDocs APIs are Amazon authenticated, certificate-signed APIs. They not only require the use of the AWS SDK, but also allow for the exclusive use of IAM users and roles to help facilitate access, trust, and permission policies. By creating a role and allowing an IAM user to access the Amazon WorkDocs site, the IAM user gains full administrative visibility into the entire Amazon WorkDocs site (or as set in the IAM policy). This includes, but is not limited to, the ability to modify file permissions and upload any file to any user. This allows developers to perform the three use cases above, as well as give users the ability to grant access on a selective basis using the IAM model.</p>'
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  title: Amazon WorkDocs
  version: '2016-05-01'
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-logo:
    backgroundColor: '#FFFFFF'
    url: 'https://api.apis.guru/v2/cache/logo/https_media.amazonwebservices.com_blog_2007_big_pbaws_logo_300px.jpg'
  x-origin:
    - contentType: application/json
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/workdocs-2016-05-01.normal.json'
      x-apisguru-direct: true
  x-preferred: true
  x-providerName: amazonaws.com
  x-release: v4
  x-serviceName: workdocs
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://aws.amazon.com/workdocs/'
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  hmac:
    description: Amazon Signature authorization v4
    in: header
    name: Authorization
    type: apiKey
    x-amazon-apigateway-authtype: awsSigv4
security:
  - hmac: []
parameters:
  Action:
    in: header
    name: Action
    required: true
    type: string
  Version:
    in: header
    name: Version
    required: true
    type: string
  X-Amz-Algorithm:
    in: header
    name: X-Amz-Algorithm
    required: false
    type: string
  X-Amz-Content-Sha256:
    in: header
    name: X-Amz-Content-Sha256
    required: false
    type: string
  X-Amz-Credential:
    in: header
    name: X-Amz-Credential
    required: false
    type: string
  X-Amz-Date:
    in: header
    name: X-Amz-Date
    required: false
    type: string
  X-Amz-Security-Token:
    in: header
    name: X-Amz-Security-Token
    required: false
    type: string
  X-Amz-Signature:
    in: header
    name: X-Amz-Signature
    required: false
    type: string
  X-Amz-SignedHeaders:
    in: header
    name: X-Amz-SignedHeaders
    required: false
    type: string
paths:
  /api/v1/activities:
    get:
      description: Describes the user activities in a specified time period.
      operationId: DescribeActivities
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DescribeActivitiesRequest'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeActivitiesResponse'
        '480':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '481':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '482':
          description: InvalidArgumentException
          schema:
            $ref: '#/definitions/InvalidArgumentException'
        '483':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  /api/v1/documents:
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: '<p>Creates a new document object and version object.</p> <p>The client specifies the parent folder ID and name of the document to upload. The ID is optionally specified when creating a new version of an existing document. This is the first step to upload a document. Next, upload the document to the URL returned from the call, and then call <a>UpdateDocumentVersion</a>.</p> <p>To cancel the document upload, call <a>AbortDocumentVersionUpload</a>.</p>'
      operationId: InitiateDocumentVersionUpload
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/InitiateDocumentVersionUploadRequest'
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/InitiateDocumentVersionUploadResponse'
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: EntityAlreadyExistsException
          schema:
            $ref: '#/definitions/EntityAlreadyExistsException'
        '482':
          description: StorageLimitExceededException
          schema:
            $ref: '#/definitions/StorageLimitExceededException'
        '483':
          description: StorageLimitWillExceedException
          schema:
            $ref: '#/definitions/StorageLimitWillExceedException'
        '484':
          description: ProhibitedStateException
          schema:
            $ref: '#/definitions/ProhibitedStateException'
        '485':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '486':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '487':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '488':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '489':
          description: DraftUploadOutOfSyncException
          schema:
            $ref: '#/definitions/DraftUploadOutOfSyncException'
        '490':
          description: ResourceAlreadyCheckedOutException
          schema:
            $ref: '#/definitions/ResourceAlreadyCheckedOutException'
  '/api/v1/documents/{DocumentId}':
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    patch:
      description: 'Updates the specified attributes of a document. The user must have access to both the document and its parent folder, if applicable.'
      operationId: UpdateDocument
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdateDocumentRequest'
        - in: path
          name: DocumentId
          required: true
          type: string
      responses:
        '200':
          description: Success
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: EntityAlreadyExistsException
          schema:
            $ref: '#/definitions/EntityAlreadyExistsException'
        '482':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '483':
          description: ProhibitedStateException
          schema:
            $ref: '#/definitions/ProhibitedStateException'
        '484':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '485':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '486':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '487':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '488':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
  '/api/v1/documents/{DocumentId}/path':
    get:
      description: '<p>Retrieves the path information (the hierarchy from the root folder) for the requested document.</p> <p>By default, Amazon WorkDocs returns a maximum of 100 levels upwards from the requested document and only includes the IDs of the parent folders in the path. You can limit the maximum number of levels. You can also request the names of the parent folders.</p>'
      operationId: GetDocumentPath
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/GetDocumentPathRequest'
        - in: path
          name: DocumentId
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetDocumentPathResponse'
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '483':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/api/v1/documents/{DocumentId}/versions':
    get:
      description: '<p>Retrieves the document versions for the specified document.</p> <p>By default, only active versions are returned.</p>'
      operationId: DescribeDocumentVersions
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DescribeDocumentVersionsRequest'
        - description: Pagination limit
          in: query
          name: Limit
          required: false
          type: string
        - description: Pagination token
          in: query
          name: Marker
          required: false
          type: string
        - in: path
          name: DocumentId
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeDocumentVersionsResponse'
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '483':
          description: InvalidArgumentException
          schema:
            $ref: '#/definitions/InvalidArgumentException'
        '484':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '485':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '486':
          description: ProhibitedStateException
          schema:
            $ref: '#/definitions/ProhibitedStateException'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/api/v1/documents/{DocumentId}/versions/{VersionId}':
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    patch:
      description: '<p>Changes the status of the document version to ACTIVE. </p> <p>Amazon WorkDocs also sets its document container to ACTIVE. This is the last step in a document upload, after the client uploads the document to an S3-presigned URL returned by <a>InitiateDocumentVersionUpload</a>. </p>'
      operationId: UpdateDocumentVersion
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdateDocumentVersionRequest'
        - in: path
          name: DocumentId
          required: true
          type: string
        - in: path
          name: VersionId
          required: true
          type: string
      responses:
        '200':
          description: Success
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: ProhibitedStateException
          schema:
            $ref: '#/definitions/ProhibitedStateException'
        '482':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '483':
          description: InvalidOperationException
          schema:
            $ref: '#/definitions/InvalidOperationException'
        '484':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '485':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '486':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '487':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
  '/api/v1/documents/{DocumentId}/versions/{VersionId}/comment':
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Adds a new comment to the specified document version.
      operationId: CreateComment
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CreateCommentRequest'
        - in: path
          name: DocumentId
          required: true
          type: string
        - in: path
          name: VersionId
          required: true
          type: string
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateCommentResponse'
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: ProhibitedStateException
          schema:
            $ref: '#/definitions/ProhibitedStateException'
        '482':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '483':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '484':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '485':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '486':
          description: DocumentLockedForCommentsException
          schema:
            $ref: '#/definitions/DocumentLockedForCommentsException'
  '/api/v1/documents/{DocumentId}/versions/{VersionId}/comment/{CommentId}':
    delete:
      description: Deletes the specified comment from the document version.
      operationId: DeleteComment
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DeleteCommentRequest'
        - in: path
          name: DocumentId
          required: true
          type: string
        - in: path
          name: VersionId
          required: true
          type: string
        - in: path
          name: CommentId
          required: true
          type: string
      responses:
        '204':
          description: Success
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: ProhibitedStateException
          schema:
            $ref: '#/definitions/ProhibitedStateException'
        '482':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '483':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '484':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '485':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '486':
          description: DocumentLockedForCommentsException
          schema:
            $ref: '#/definitions/DocumentLockedForCommentsException'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/api/v1/documents/{DocumentId}/versions/{VersionId}/comments':
    get:
      description: List all the comments for the specified document version.
      operationId: DescribeComments
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DescribeCommentsRequest'
        - in: path
          name: DocumentId
          required: true
          type: string
        - in: path
          name: VersionId
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeCommentsResponse'
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: ProhibitedStateException
          schema:
            $ref: '#/definitions/ProhibitedStateException'
        '482':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '483':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '484':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '485':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  /api/v1/folders:
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Creates a folder with the specified name and parent folder.
      operationId: CreateFolder
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CreateFolderRequest'
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateFolderResponse'
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: EntityAlreadyExistsException
          schema:
            $ref: '#/definitions/EntityAlreadyExistsException'
        '482':
          description: ProhibitedStateException
          schema:
            $ref: '#/definitions/ProhibitedStateException'
        '483':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '484':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '485':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '486':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '487':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
  '/api/v1/folders/{FolderId}':
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    patch:
      description: 'Updates the specified attributes of the specified folder. The user must have access to both the folder and its parent folder, if applicable.'
      operationId: UpdateFolder
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdateFolderRequest'
        - in: path
          name: FolderId
          required: true
          type: string
      responses:
        '200':
          description: Success
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: EntityAlreadyExistsException
          schema:
            $ref: '#/definitions/EntityAlreadyExistsException'
        '482':
          description: ProhibitedStateException
          schema:
            $ref: '#/definitions/ProhibitedStateException'
        '483':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '486':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '487':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '488':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
  '/api/v1/folders/{FolderId}/contents':
    get:
      description: '<p>Describes the contents of the specified folder, including its documents and subfolders.</p> <p>By default, Amazon WorkDocs returns the first 100 active document and folder metadata items. If there are more results, the response includes a marker that you can use to request the next set of results. You can also request initialized documents.</p>'
      operationId: DescribeFolderContents
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DescribeFolderContentsRequest'
        - description: Pagination limit
          in: query
          name: Limit
          required: false
          type: string
        - description: Pagination token
          in: query
          name: Marker
          required: false
          type: string
        - in: path
          name: FolderId
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeFolderContentsResponse'
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '482':
          description: InvalidArgumentException
          schema:
            $ref: '#/definitions/InvalidArgumentException'
        '483':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: ProhibitedStateException
          schema:
            $ref: '#/definitions/ProhibitedStateException'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/api/v1/folders/{FolderId}/path':
    get:
      description: '<p>Retrieves the path information (the hierarchy from the root folder) for the specified folder.</p> <p>By default, Amazon WorkDocs returns a maximum of 100 levels upwards from the requested folder and only includes the IDs of the parent folders in the path. You can limit the maximum number of levels. You can also request the parent folder names.</p>'
      operationId: GetFolderPath
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/GetFolderPathRequest'
        - in: path
          name: FolderId
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetFolderPathResponse'
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '483':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  /api/v1/me:
    get:
      description: Retrieves details of the current user for whom the authentication token was generated. This is not a valid action for SigV4 (administrative API) clients.
      operationId: GetCurrentUser
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/GetCurrentUserRequest'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetCurrentUserResponse'
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '483':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  /api/v1/me/root:
    get:
      description: Describes the current user's special folders; the <code>RootFolder</code> and the <code>RecyleBin</code>. <code>RootFolder</code> is the root of user's files and folders and <code>RecyleBin</code> is the root of recycled items. This is not a valid action for SigV4 (administrative API) clients.
      operationId: DescribeRootFolders
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DescribeRootFoldersRequest'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeRootFoldersResponse'
        '480':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '481':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '482':
          description: InvalidArgumentException
          schema:
            $ref: '#/definitions/InvalidArgumentException'
        '483':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/api/v1/organizations/{OrganizationId}/subscriptions':
    get:
      description: Lists the specified notification subscriptions.
      operationId: DescribeNotificationSubscriptions
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DescribeNotificationSubscriptionsRequest'
        - in: path
          name: OrganizationId
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeNotificationSubscriptionsResponse'
        '480':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '481':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '482':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/api/v1/organizations/{OrganizationId}/subscriptions/{SubscriptionId}':
    delete:
      description: Deletes the specified subscription from the specified organization.
      operationId: DeleteNotificationSubscription
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DeleteNotificationSubscriptionRequest'
        - in: path
          name: OrganizationId
          required: true
          type: string
        - in: path
          name: SubscriptionId
          required: true
          type: string
      responses:
        '200':
          description: Success
        '480':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '481':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '482':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '483':
          description: ProhibitedStateException
          schema:
            $ref: '#/definitions/ProhibitedStateException'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/api/v1/resources/{ResourceId}/customMetadata':
    delete:
      description: Deletes custom metadata from the specified resource.
      operationId: DeleteCustomMetadata
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DeleteCustomMetadataRequest'
        - in: path
          name: ResourceId
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteCustomMetadataResponse'
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '483':
          description: ProhibitedStateException
          schema:
            $ref: '#/definitions/ProhibitedStateException'
        '484':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '485':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/api/v1/resources/{ResourceId}/labels':
    delete:
      description: Deletes the specified list of labels from a resource.
      operationId: DeleteLabels
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DeleteLabelsRequest'
        - in: path
          name: ResourceId
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteLabelsResponse'
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '483':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/api/v1/resources/{ResourceId}/permissions':
    delete:
      description: Removes all the permissions from the specified resource.
      operationId: RemoveAllResourcePermissions
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/RemoveAllResourcePermissionsRequest'
        - in: path
          name: ResourceId
          required: true
          type: string
      responses:
        '204':
          description: Success
        '480':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '481':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '482':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '483':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/api/v1/resources/{ResourceId}/permissions/{PrincipalId}':
    delete:
      description: Removes the permission for the specified principal from the specified resource.
      operationId: RemoveResourcePermission
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/RemoveResourcePermissionRequest'
        - in: path
          name: ResourceId
          required: true
          type: string
        - in: path
          name: PrincipalId
          required: true
          type: string
      responses:
        '204':
          description: Success
        '480':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '481':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '482':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '483':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  /api/v1/users:
    get:
      description: '<p>Describes the specified users. You can describe all users or filter the results (for example, by status or organization).</p> <p>By default, Amazon WorkDocs returns the first 24 active or pending users. If there are more results, the response includes a marker that you can use to request the next set of results.</p>'
      operationId: DescribeUsers
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DescribeUsersRequest'
        - description: Pagination limit
          in: query
          name: Limit
          required: false
          type: string
        - description: Pagination token
          in: query
          name: Marker
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeUsersResponse'
        '480':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '481':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '482':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '483':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '484':
          description: InvalidArgumentException
          schema:
            $ref: '#/definitions/InvalidArgumentException'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/api/v1/users/{UserId}':
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    patch:
      description: 'Updates the specified attributes of the specified user, and grants or revokes administrative privileges to the Amazon WorkDocs site.'
      operationId: UpdateUser
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdateUserRequest'
        - in: path
          name: UserId
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateUserResponse'
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '483':
          description: IllegalUserStateException
          schema:
            $ref: '#/definitions/IllegalUserStateException'
        '484':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '485':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '486':
          description: DeactivatingLastSystemUserException
          schema:
            $ref: '#/definitions/DeactivatingLastSystemUserException'
  '/api/v1/users/{UserId}/activation':
    delete:
      description: 'Deactivates the specified user, which revokes the user''s access to Amazon WorkDocs.'
      operationId: DeactivateUser
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DeactivateUserRequest'
        - in: path
          name: UserId
          required: true
          type: string
      responses:
        '204':
          description: Success
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '483':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
definitions:
  AbortDocumentVersionUploadRequest:
    properties: {}
    type: object
  ActivateUserRequest:
    properties: {}
    type: object
  ActivateUserResponse:
    properties:
      User:
        $ref: '#/definitions/User'
        description: The user information.
    type: object
  Activity:
    description: Describes the activity information.
    properties:
      CommentMetadata:
        $ref: '#/definitions/CommentMetadata'
        description: Metadata of the commenting activity. This is an optional field and is filled for commenting activities.
      Initiator:
        $ref: '#/definitions/UserMetadata'
        description: The user who performed the action.
      OrganizationId:
        $ref: '#/definitions/IdType'
        description: The ID of the organization.
      OriginalParent:
        $ref: '#/definitions/ResourceMetadata'
        description: The original parent of the resource. This is an optional field and is filled for move activities.
      Participants:
        $ref: '#/definitions/Participants'
        description: 'The list of users or groups impacted by this action. This is an optional field and is filled for the following sharing activities: DOCUMENT_SHARED, DOCUMENT_SHARED, DOCUMENT_UNSHARED, FOLDER_SHARED, FOLDER_UNSHARED.'
      ResourceMetadata:
        $ref: '#/definitions/ResourceMetadata'
        description: The metadata of the resource involved in the user action.
      TimeStamp:
        $ref: '#/definitions/TimestampType'
        description: The timestamp when the action was performed.
      Type:
        $ref: '#/definitions/ActivityType'
        description: The activity type.
    type: object
  ActivityType:
    enum:
      - DOCUMENT_CHECKED_IN
      - DOCUMENT_CHECKED_OUT
      - DOCUMENT_RENAMED
      - DOCUMENT_VERSION_UPLOADED
      - DOCUMENT_VERSION_DELETED
      - DOCUMENT_RECYCLED
      - DOCUMENT_RESTORED
      - DOCUMENT_REVERTED
      - DOCUMENT_SHARED
      - DOCUMENT_UNSHARED
      - DOCUMENT_SHARE_PERMISSION_CHANGED
      - DOCUMENT_SHAREABLE_LINK_CREATED
      - DOCUMENT_SHAREABLE_LINK_REMOVED
      - DOCUMENT_SHAREABLE_LINK_PERMISSION_CHANGED
      - DOCUMENT_MOVED
      - DOCUMENT_COMMENT_ADDED
      - DOCUMENT_COMMENT_DELETED
      - DOCUMENT_ANNOTATION_ADDED
      - DOCUMENT_ANNOTATION_DELETED
      - FOLDER_CREATED
      - FOLDER_DELETED
      - FOLDER_RENAMED
      - FOLDER_RECYCLED
      - FOLDER_RESTORED
      - FOLDER_SHARED
      - FOLDER_UNSHARED
      - FOLDER_SHARE_PERMISSION_CHANGED
      - FOLDER_SHAREABLE_LINK_CREATED
      - FOLDER_SHAREABLE_LINK_REMOVED
      - FOLDER_SHAREABLE_LINK_PERMISSION_CHANGED
      - FOLDER_MOVED
    type: string
  AddResourcePermissionsRequest:
    properties:
      Principals:
        $ref: '#/definitions/SharePrincipalList'
        description: 'The users, groups, or organization being granted permission.'
    required:
      - Principals
    type: object
  AddResourcePermissionsResponse:
    properties:
      ShareResults:
        $ref: '#/definitions/ShareResultsList'
        description: The share results.
    type: object
  AuthenticationHeaderType:
    format: password
    maxLength: 8199
    minLength: 1
    type: string
  BooleanType:
    type: boolean
  Comment:
    description: Describes a comment.
    properties:
      CommentId:
        $ref: '#/definitions/CommentIdType'
        description: The ID of the comment.
      Contributor:
        $ref: '#/definitions/User'
        description: The details of the user who made the comment.
      CreatedTimestamp:
        $ref: '#/definitions/TimestampType'
        description: The time that the comment was created.
      ParentId:
        $ref: '#/definitions/CommentIdType'
        description: The ID of the parent comment.
      RecipientId:
        $ref: '#/definitions/IdType'
        description: 'If the comment is a reply to another user''s comment, this field contains the user ID of the user being replied to.'
      Status:
        $ref: '#/definitions/CommentStatusType'
        description: The status of the comment.
      Text:
        $ref: '#/definitions/CommentTextType'
        description: The text of the comment.
      ThreadId:
        $ref: '#/definitions/CommentIdType'
        description: The ID of the root comment in the thread.
      Visibility:
        $ref: '#/definitions/CommentVisibilityType'
        description: 'The visibility of the comment. Options are either PRIVATE, where the comment is visible only to the comment author and document owner and co-owners, or PUBLIC, where the comment is visible to document owners, co-owners, and contributors.'
    required:
      - CommentId
    type: object
  CommentIdType:
    maxLength: 128
    minLength: 1
    pattern: '[\w+-.@]+'
    type: string
  CommentList:
    items:
      $ref: '#/definitions/Comment'
    type: array
  CommentMetadata:
    description: Describes the metadata of a comment.
    properties:
      CommentId:
        $ref: '#/definitions/CommentIdType'
        description: The ID of the comment.
      CommentStatus:
        $ref: '#/definitions/CommentStatusType'
      Contributor:
        $ref: '#/definitions/User'
        description: The user who made the comment.
      CreatedTimestamp:
        $ref: '#/definitions/TimestampType'
      RecipientId:
        $ref: '#/definitions/IdType'
        description: The ID of the user being replied to.
    type: object
  CommentStatusType:
    enum:
      - DRAFT
      - PUBLISHED
      - DELETED
    type: string
  CommentTextType:
    format: password
    maxLength: 2048
    minLength: 1
    type: string
  CommentVisibilityType:
    enum:
      - PUBLIC
      - PRIVATE
    type: string
  ConcurrentModificationException:
    description: The resource hierarchy is changing.
    properties:
      Message:
        $ref: '#/definitions/ErrorMessageType'
    type: object
  CreateCommentRequest:
    properties:
      NotifyCollaborators:
        $ref: '#/definitions/BooleanType'
        description: Set this parameter to TRUE to send an email out to the document collaborators after the comment is created.
      ParentId:
        $ref: '#/definitions/CommentIdType'
        description: The ID of the parent comment.
      Text:
        $ref: '#/definitions/CommentTextType'
        description: The text of the comment.
      ThreadId:
        $ref: '#/definitions/CommentIdType'
        description: The ID of the root comment in the thread.
      Visibility:
        $ref: '#/definitions/CommentVisibilityType'
        description: 'The visibility of the comment. Options are either PRIVATE, where the comment is visible only to the comment author and document owner and co-owners, or PUBLIC, where the comment is visible to document owners, co-owners, and contributors.'
    required:
      - Text
    type: object
  CreateCommentResponse:
    properties:
      Comment:
        $ref: '#/definitions/Comment'
        description: The comment that has been created.
    type: object
  CreateCustomMetadataRequest:
    properties:
      CustomMetadata:
        $ref: '#/definitions/CustomMetadataMap'
        description: Custom metadata in the form of name-value pairs.
    required:
      - CustomMetadata
    type: object
  CreateCustomMetadataResponse:
    properties: {}
    type: object
  CreateFolderRequest:
    properties:
      Name:
        $ref: '#/definitions/ResourceNameType'
        description: The name of the new folder.
      ParentFolderId:
        $ref: '#/definitions/ResourceIdType'
        description: The ID of the parent folder.
    required:
      - ParentFolderId
    type: object
  CreateFolderResponse:
    properties:
      Metadata:
        $ref: '#/definitions/FolderMetadata'
        description: The metadata of the folder.
    type: object
  CreateLabelsRequest:
    properties:
      Labels:
        $ref: '#/definitions/Labels'
        description: List of labels to add to the resource.
    required:
      - Labels
    type: object
  CreateLabelsResponse:
    properties: {}
    type: object
  CreateNotificationSubscriptionRequest:
    properties:
      Endpoint:
        $ref: '#/definitions/SubscriptionEndPointType'
        description: 'The endpoint to receive the notifications. If the protocol is HTTPS, the endpoint is a URL that begins with "https://".'
      Protocol:
        $ref: '#/definitions/SubscriptionProtocolType'
        description: 'The protocol to use. The supported value is https, which delivers JSON-encoded messasges using HTTPS POST.'
      SubscriptionType:
        $ref: '#/definitions/SubscriptionType'
        description: The notification type.
    required:
      - Endpoint
      - Protocol
      - SubscriptionType
    type: object
  CreateNotificationSubscriptionResponse:
    properties:
      Subscription:
        $ref: '#/definitions/Subscription'
        description: The subscription.
    type: object
  CreateUserRequest:
    properties:
      EmailAddress:
        $ref: '#/definitions/EmailAddressType'
        description: The email address of the user.
      GivenName:
        $ref: '#/definitions/UserAttributeValueType'
        description: The given name of the user.
      OrganizationId:
        $ref: '#/definitions/IdType'
        description: The ID of the organization.
      Password:
        $ref: '#/definitions/PasswordType'
        description: The password of the user.
      StorageRule:
        $ref: '#/definitions/StorageRuleType'
        description: The amount of storage for the user.
      Surname:
        $ref: '#/definitions/UserAttributeValueType'
        description: The surname of the user.
      TimeZoneId:
        $ref: '#/definitions/TimeZoneIdType'
        description: The time zone ID of the user.
      Username:
        $ref: '#/definitions/UsernameType'
        description: The login name of the user.
    required:
      - Username
      - GivenName
      - Surname
      - Password
    type: object
  CreateUserResponse:
    properties:
      User:
        $ref: '#/definitions/User'
        description: The user information.
    type: object
  CustomMetadataKeyList:
    items:
      $ref: '#/definitions/CustomMetadataKeyType'
    maxItems: 8
    type: array
  CustomMetadataKeyType:
    maxLength: 56
    minLength: 1
    pattern: '[a-zA-Z0-9._+-/=][a-zA-Z0-9 ._+-/=]*'
    type: string
  CustomMetadataLimitExceededException:
    description: The limit has been reached on the number of custom properties for the specified resource.
    properties:
      Message:
        $ref: '#/definitions/ErrorMessageType'
    type: object
  CustomMetadataMap:
    items:
      properties:
        key:
          $ref: '#/definitions/CustomMetadataKeyType'
        value:
          $ref: '#/definitions/CustomMetadataValueType'
      type: object
    maxItems: 8
    minItems: 1
    type: array
  CustomMetadataValueType:
    maxLength: 256
    minLength: 1
    pattern: '[a-zA-Z0-9._+-/=][a-zA-Z0-9 ._+-/=]*'
    type: string
  DeactivateUserRequest:
    properties: {}
    type: object
  DeactivatingLastSystemUserException:
    description: The last user in the organization is being deactivated.
    properties: {}
    type: object
  DeleteCommentRequest:
    properties: {}
    type: object
  DeleteCustomMetadataRequest:
    properties: {}
    type: object
  DeleteCustomMetadataResponse:
    properties: {}
    type: object
  DeleteDocumentRequest:
    properties: {}
    type: object
  DeleteFolderContentsRequest:
    properties: {}
    type: object
  DeleteFolderRequest:
    properties: {}
    type: object
  DeleteLabelsRequest:
    properties: {}
    type: object
  DeleteLabelsResponse:
    properties: {}
    type: object
  DeleteNotificationSubscriptionRequest:
    properties: {}
    type: object
  DeleteUserRequest:
    properties: {}
    type: object
  DescribeActivitiesRequest:
    properties: {}
    type: object
  DescribeActivitiesResponse:
    properties:
      Marker:
        $ref: '#/definitions/MarkerType'
        description: The marker for the next set of results.
      UserActivities:
        $ref: '#/definitions/UserActivities'
        description: The list of activities for the specified user and time period.
    type: object
  DescribeCommentsRequest:
    properties: {}
    type: object
  DescribeCommentsResponse:
    properties:
      Comments:
        $ref: '#/definitions/CommentList'
        description: The list of comments for the specified document version.
      Marker:
        $ref: '#/definitions/MarkerType'
        description: The marker for the next set of results. This marker was received from a previous call.
    type: object
  DescribeDocumentVersionsRequest:
    properties: {}
    type: object
  DescribeDocumentVersionsResponse:
    properties:
      DocumentVersions:
        $ref: '#/definitions/DocumentVersionMetadataList'
        description: The document versions.
      Marker:
        $ref: '#/definitions/PageMarkerType'
        description: 'The marker to use when requesting the next set of results. If there are no additional results, the string is empty.'
    type: object
  DescribeFolderContentsRequest:
    properties: {}
    type: object
  DescribeFolderContentsResponse:
    properties:
      Documents:
        $ref: '#/definitions/DocumentMetadataList'
        description: The documents in the specified folder.
      Folders:
        $ref: '#/definitions/FolderMetadataList'
        description: The subfolders in the specified folder.
      Marker:
        $ref: '#/definitions/PageMarkerType'
        description: 'The marker to use when requesting the next set of results. If there are no additional results, the string is empty.'
    type: object
  DescribeNotificationSubscriptionsRequest:
    properties: {}
    type: object
  DescribeNotificationSubscriptionsResponse:
    properties:
      Marker:
        $ref: '#/definitions/PageMarkerType'
        description: 'The marker to use when requesting the next set of results. If there are no additional results, the string is empty.'
      Subscriptions:
        $ref: '#/definitions/SubscriptionList'
        description: The subscriptions.
    type: object
  DescribeResourcePermissionsRequest:
    properties: {}
    type: object
  DescribeResourcePermissionsResponse:
    properties:
      Marker:
        $ref: '#/definitions/PageMarkerType'
        description: 'The marker to use when requesting the next set of results. If there are no additional results, the string is empty.'
      Principals:
        $ref: '#/definitions/PrincipalList'
        description: The principals.
    type: object
  DescribeRootFoldersRequest:
    properties: {}
    type: object
  DescribeRootFoldersResponse:
    properties:
      Folders:
        $ref: '#/definitions/FolderMetadataList'
        description: The user's special folders.
      Marker:
        $ref: '#/definitions/PageMarkerType'
        description: The marker for the next set of results.
    type: object
  DescribeUsersRequest:
    properties: {}
    type: object
  DescribeUsersResponse:
    properties:
      Marker:
        $ref: '#/definitions/PageMarkerType'
        description: 'The marker to use when requesting the next set of results. If there are no additional results, the string is empty.'
      TotalNumberOfUsers:
        $ref: '#/definitions/SizeType'
        description: The total number of users included in the results.
      Users:
        $ref: '#/definitions/OrganizationUserList'
        description: The users.
    type: object
  DocumentContentType:
    maxLength: 128
    minLength: 1
    type: string
  DocumentLockedForCommentsException:
    description: This exception is thrown when the document is locked for comments and user tries to create or delete a comment on that document.
    properties:
      Message:
        $ref: '#/definitions/ErrorMessageType'
    type: object
  DocumentMetadata:
    description: Describes the document.
    properties:
      CreatedTimestamp:
        $ref: '#/definitions/TimestampType'
        description: The time when the document was created.
      CreatorId:
        $ref: '#/definitions/IdType'
        description: The ID of the creator.
      Id:
        $ref: '#/definitions/ResourceIdType'
        description: The ID of the document.
      Labels:
        $ref: '#/definitions/Labels'
        description: List of labels on the document.
      LatestVersionMetadata:
        $ref: '#/definitions/DocumentVersionMetadata'
        description: The latest version of the document.
      ModifiedTimestamp:
        $ref: '#/definitions/TimestampType'
        description: The time when the document was updated.
      ParentFolderId:
        $ref: '#/definitions/ResourceIdType'
        description: The ID of the parent folder.
      ResourceState:
        $ref: '#/definitions/ResourceStateType'
        description: The resource state.
    type: object
  DocumentMetadataList:
    items:
      $ref: '#/definitions/DocumentMetadata'
    type: array
  DocumentSourceType:
    enum:
      - ORIGINAL
      - WITH_COMMENTS
    type: string
  DocumentSourceUrlMap:
    items:
      properties:
        key:
          $ref: '#/definitions/DocumentSourceType'
        value:
          $ref: '#/definitions/UrlType'
      type: object
    type: array
  DocumentStatusType:
    enum:
      - INITIALIZED
      - ACTIVE
    type: string
  DocumentThumbnailType:
    enum:
      - SMALL
      - SMALL_HQ
      - LARGE
    type: string
  DocumentThumbnailUrlMap:
    items:
      properties:
        key:
          $ref: '#/definitions/DocumentThumbnailType'
        value:
          $ref: '#/definitions/UrlType'
      type: object
    type: array
  DocumentVersionIdType:
    maxLength: 128
    minLength: 1
    pattern: '[\w+-.@]+'
    type: string
  DocumentVersionMetadata:
    description: Describes a version of a document.
    properties:
      ContentCreatedTimestamp:
        $ref: '#/definitions/TimestampType'
        description: The time stamp when the content of the document was originally created.
      ContentModifiedTimestamp:
        $ref: '#/definitions/TimestampType'
        description: The time stamp when the content of the document was modified.
      ContentType:
        $ref: '#/definitions/DocumentContentType'
        description: The content type of the document.
      CreatedTimestamp:
        $ref: '#/definitions/TimestampType'
        description: The time stamp when the document was first uploaded.
      CreatorId:
        $ref: '#/definitions/IdType'
        description: The ID of the creator.
      Id:
        $ref: '#/definitions/DocumentVersionIdType'
        description: The ID of the version.
      ModifiedTimestamp:
        $ref: '#/definitions/TimestampType'
        description: The time stamp when the document was last uploaded.
      Name:
        $ref: '#/definitions/ResourceNameType'
        description: The name of the version.
      Signature:
        $ref: '#/definitions/HashType'
        description: The signature of the document.
      Size:
        $ref: '#/definitions/SizeType'
        description: 'The size of the document, in bytes.'
      Source:
        $ref: '#/definitions/DocumentSourceUrlMap'
        description: The source of the document.
      Status:
        $ref: '#/definitions/DocumentStatusType'
        description: The status of the document.
      Thumbnail:
        $ref: '#/definitions/DocumentThumbnailUrlMap'
        description: The thumbnail of the document.
    type: object
  DocumentVersionMetadataList:
    items:
      $ref: '#/definitions/DocumentVersionMetadata'
    type: array
  DocumentVersionStatus:
    enum:
      - ACTIVE
    type: string
  DraftUploadOutOfSyncException:
    description: This exception is thrown when a valid checkout ID is not presented on document version upload calls for a document that has been checked out from Web client.
    properties:
      Message:
        $ref: '#/definitions/ErrorMessageType'
    type: object
  EmailAddressType:
    maxLength: 256
    minLength: 1
    pattern: '[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}'
    type: string
  EntityAlreadyExistsException:
    description: The resource already exists.
    properties:
      Message:
        $ref: '#/definitions/ErrorMessageType'
    type: object
  EntityIdList:
    items:
      $ref: '#/definitions/IdType'
    type: array
  EntityNotExistsException:
    description: The resource does not exist.
    properties:
      EntityIds:
        $ref: '#/definitions/EntityIdList'
      Message:
        $ref: '#/definitions/ErrorMessageType'
    type: object
  ErrorMessageType:
    type: string
  FailedDependencyException:
    description: 'The AWS Directory Service cannot reach an on-premises instance. Or a dependency under the control of the organization is failing, such as a connected active directory.'
    properties:
      Message:
        $ref: '#/definitions/ErrorMessageType'
    type: object
  FieldNamesType:
    maxLength: 256
    minLength: 1
    pattern: '[\w,]+'
    type: string
  FolderContentType:
    enum:
      - ALL
      - DOCUMENT
      - FOLDER
    type: string
  FolderMetadata:
    description: Describes a folder.
    properties:
      CreatedTimestamp:
        $ref: '#/definitions/TimestampType'
        description: The time when the folder was created.
      CreatorId:
        $ref: '#/definitions/IdType'
        description: The ID of the creator.
      Id:
        $ref: '#/definitions/ResourceIdType'
        description: The ID of the folder.
      Labels:
        $ref: '#/definitions/Labels'
        description: List of labels on the folder.
      LatestVersionSize:
        $ref: '#/definitions/SizeType'
        description: The size of the latest version of the folder metadata.
      ModifiedTimestamp:
        $ref: '#/definitions/TimestampType'
        description: The time when the folder was updated.
      Name:
        $ref: '#/definitions/ResourceNameType'
        description: The name of the folder.
      ParentFolderId:
        $ref: '#/definitions/ResourceIdType'
        description: The ID of the parent folder.
      ResourceState:
        $ref: '#/definitions/ResourceStateType'
        description: The resource state of the folder.
      Signature:
        $ref: '#/definitions/HashType'
        description: The unique identifier created from the subfolders and documents of the folder.
      Size:
        $ref: '#/definitions/SizeType'
        description: The size of the folder metadata.
    type: object
  FolderMetadataList:
    items:
      $ref: '#/definitions/FolderMetadata'
    type: array
  GetCurrentUserRequest:
    properties: {}
    type: object
  GetCurrentUserResponse:
    properties:
      User:
        $ref: '#/definitions/User'
        description: Metadata of the user.
    type: object
  GetDocumentPathRequest:
    properties: {}
    type: object
  GetDocumentPathResponse:
    properties:
      Path:
        $ref: '#/definitions/ResourcePath'
        description: The path information.
    type: object
  GetDocumentRequest:
    properties: {}
    type: object
  GetDocumentResponse:
    properties:
      CustomMetadata:
        $ref: '#/definitions/CustomMetadataMap'
        description: The custom metadata on the document.
      Metadata:
        $ref: '#/definitions/DocumentMetadata'
        description: The metadata details of the document.
    type: object
  GetDocumentVersionRequest:
    properties: {}
    type: object
  GetDocumentVersionResponse:
    properties:
      CustomMetadata:
        $ref: '#/definitions/CustomMetadataMap'
        description: The custom metadata on the document version.
      Metadata:
        $ref: '#/definitions/DocumentVersionMetadata'
        description: The version metadata.
    type: object
  GetFolderPathRequest:
    properties: {}
    type: object
  GetFolderPathResponse:
    properties:
      Path:
        $ref: '#/definitions/ResourcePath'
        description: The path information.
    type: object
  GetFolderRequest:
    properties: {}
    type: object
  GetFolderResponse:
    properties:
      CustomMetadata:
        $ref: '#/definitions/CustomMetadataMap'
        description: The custom metadata on the folder.
      Metadata:
        $ref: '#/definitions/FolderMetadata'
        description: The metadata of the folder.
    type: object
  GroupMetadata:
    description: Describes the metadata of a user group.
    properties:
      Id:
        $ref: '#/definitions/IdType'
        description: The ID of the user group.
      Name:
        $ref: '#/definitions/GroupNameType'
        description: The name of the group.
    type: object
  GroupMetadataList:
    items:
      $ref: '#/definitions/GroupMetadata'
    type: array
  GroupNameType:
    type: string
  HashType:
    maxLength: 128
    minLength: 0
    pattern: '[&\w+-.@]+'
    type: string
  HeaderNameType:
    maxLength: 256
    minLength: 1
    pattern: '[\w-]+'
    type: string
  HeaderValueType:
    maxLength: 1024
    minLength: 1
    type: string
  IdType:
    maxLength: 256
    minLength: 1
    pattern: '[&\w+-.@]+'
    type: string
  IllegalUserStateException:
    description: The user is undergoing transfer of ownership.
    properties:
      Message:
        $ref: '#/definitions/ErrorMessageType'
    type: object
  InitiateDocumentVersionUploadRequest:
    properties:
      ContentCreatedTimestamp:
        $ref: '#/definitions/TimestampType'
        description: The time stamp when the content of the document was originally created.
      ContentModifiedTimestamp:
        $ref: '#/definitions/TimestampType'
        description: The time stamp when the content of the document was modified.
      ContentType:
        $ref: '#/definitions/DocumentContentType'
        description: The content type of the document.
      DocumentSizeInBytes:
        $ref: '#/definitions/SizeType'
        description: 'The size of the document, in bytes.'
      Id:
        $ref: '#/definitions/ResourceIdType'
        description: The ID of the document.
      Name:
        $ref: '#/definitions/ResourceNameType'
        description: The name of the document.
      ParentFolderId:
        $ref: '#/definitions/ResourceIdType'
        description: The ID of the parent folder.
    required:
      - ParentFolderId
    type: object
  InitiateDocumentVersionUploadResponse:
    properties:
      Metadata:
        $ref: '#/definitions/DocumentMetadata'
        description: The document metadata.
      UploadMetadata:
        $ref: '#/definitions/UploadMetadata'
        description: The upload metadata.
    type: object
  InvalidArgumentException:
    description: The pagination marker and/or limit fields are not valid.
    properties:
      Message:
        $ref: '#/definitions/ErrorMessageType'
    type: object
  InvalidOperationException:
    description: The operation is invalid.
    properties:
      Message:
        $ref: '#/definitions/ErrorMessageType'
    type: object
  Label:
    maxLength: 32
    minLength: 1
    pattern: '[a-zA-Z0-9._+-/=][a-zA-Z0-9 ._+-/=]*'
    type: string
  Labels:
    items:
      $ref: '#/definitions/Label'
    maxItems: 20
    type: array
  LimitExceededException:
    description: 'The maximum of 100,000 folders under the parent folder has been exceeded.'
    properties:
      Message:
        $ref: '#/definitions/ErrorMessageType'
    type: object
  LimitType:
    maximum: 999
    minimum: 1
    type: integer
  LocaleType:
    enum:
      - en
      - fr
      - ko
      - de
      - es
      - ja
      - ru
      - zh_CN
      - zh_TW
      - pt_BR
      - default
    type: string
  MarkerType:
    maxLength: 2048
    minLength: 1
    pattern: '[\u0000-\u00FF]+'
    type: string
  MessageType:
    format: password
    maxLength: 2048
    minLength: 0
    type: string
  OrderType:
    enum:
      - ASCENDING
      - DESCENDING
    type: string
  OrganizationUserList:
    items:
      $ref: '#/definitions/User'
    type: array
  PageMarkerType:
    maxLength: 2048
    minLength: 1
    type: string
  Participants:
    description: Describes the users and/or user groups.
    properties:
      Groups:
        $ref: '#/definitions/GroupMetadataList'
        description: The list of user groups.
      Users:
        $ref: '#/definitions/UserMetadataList'
        description: The list of users.
    type: object
  PasswordType:
    format: password
    maxLength: 32
    minLength: 4
    pattern: '[\u0020-\u00FF]+'
    type: string
  PermissionInfo:
    description: Describes the permissions.
    properties:
      Role:
        $ref: '#/definitions/RoleType'
        description: The role of the user.
      Type:
        $ref: '#/definitions/RolePermissionType'
        description: The type of permissions.
    type: object
  PermissionInfoList:
    items:
      $ref: '#/definitions/PermissionInfo'
    type: array
  PositiveSizeType:
    minimum: 0
    type: integer
  Principal:
    description: Describes a resource.
    properties:
      Id:
        $ref: '#/definitions/IdType'
        description: The ID of the resource.
      Roles:
        $ref: '#/definitions/PermissionInfoList'
        description: The permission information for the resource.
      Type:
        $ref: '#/definitions/PrincipalType'
        description: The type of resource.
    type: object
  PrincipalList:
    items:
      $ref: '#/definitions/Principal'
    type: array
  PrincipalType:
    enum:
      - USER
      - GROUP
      - INVITE
      - ANONYMOUS
      - ORGANIZATION
    type: string
  ProhibitedStateException:
    description: The specified document version is not in the INITIALIZED state.
    properties:
      Message:
        $ref: '#/definitions/ErrorMessageType'
    type: object
  RemoveAllResourcePermissionsRequest:
    properties: {}
    type: object
  RemoveResourcePermissionRequest:
    properties: {}
    type: object
  ResourceAlreadyCheckedOutException:
    description: The resource is already checked out.
    properties:
      Message:
        $ref: '#/definitions/ErrorMessageType'
    type: object
  ResourceIdType:
    maxLength: 128
    minLength: 1
    pattern: '[\w+-.@]+'
    type: string
  ResourceMetadata:
    description: Describes the metadata of a resource.
    properties:
      Id:
        $ref: '#/definitions/ResourceIdType'
        description: The ID of the resource.
      Name:
        $ref: '#/definitions/ResourceNameType'
        description: The name of the resource.
      OriginalName:
        $ref: '#/definitions/ResourceNameType'
        description: The original name of the resource prior to a rename operation.
      Owner:
        $ref: '#/definitions/UserMetadata'
        description: The owner of the resource.
      ParentId:
        $ref: '#/definitions/ResourceIdType'
        description: The parent ID of the resource before a rename operation.
      Type:
        $ref: '#/definitions/ResourceType'
        description: The type of resource.
      VersionId:
        $ref: '#/definitions/DocumentVersionIdType'
        description: The version ID of the resource. This is an optional field and is filled for action on document version.
    type: object
  ResourceNameType:
    maxLength: 255
    minLength: 1
    pattern: '[\u0020-\u202D\u202F-\uFFFF]+'
    type: string
  ResourcePath:
    description: Describes the path information of a resource.
    properties:
      Components:
        $ref: '#/definitions/ResourcePathComponentList'
        description: The components of the resource path.
    type: object
  ResourcePathComponent:
    description: Describes the resource path.
    properties:
      Id:
        $ref: '#/definitions/IdType'
        description: The ID of the resource path.
      Name:
        $ref: '#/definitions/ResourceNameType'
        description: The name of the resource path.
    type: object
  ResourcePathComponentList:
    items:
      $ref: '#/definitions/ResourcePathComponent'
    type: array
  ResourceSortType:
    enum:
      - DATE
      - NAME
    type: string
  ResourceStateType:
    enum:
      - ACTIVE
      - RESTORING
      - RECYCLING
      - RECYCLED
    type: string
  ResourceType:
    enum:
      - FOLDER
      - DOCUMENT
    type: string
  RolePermissionType:
    enum:
      - DIRECT
      - INHERITED
    type: string
  RoleType:
    enum:
      - VIEWER
      - CONTRIBUTOR
      - OWNER
      - COOWNER
    type: string
  SearchQueryType:
    format: password
    maxLength: 512
    minLength: 1
    pattern: '[\u0020-\uFFFF]+'
    type: string
  ServiceUnavailableException:
    description: One or more of the dependencies is unavailable.
    properties:
      Message:
        $ref: '#/definitions/ErrorMessageType'
    type: object
  SharePrincipal:
    description: 'Describes the recipient type and ID, if available.'
    properties:
      Id:
        $ref: '#/definitions/IdType'
        description: The ID of the recipient.
      Role:
        $ref: '#/definitions/RoleType'
        description: The role of the recipient.
      Type:
        $ref: '#/definitions/PrincipalType'
        description: The type of the recipient.
    required:
      - Id
      - Type
      - Role
    type: object
  SharePrincipalList:
    items:
      $ref: '#/definitions/SharePrincipal'
    type: array
  ShareResult:
    description: Describes the share results of a resource.
    properties:
      PrincipalId:
        $ref: '#/definitions/IdType'
        description: The ID of the principal.
      Role:
        $ref: '#/definitions/RoleType'
        description: The role.
      ShareId:
        $ref: '#/definitions/ResourceIdType'
        description: The ID of the resource that was shared.
      Status:
        $ref: '#/definitions/ShareStatusType'
        description: The status.
      StatusMessage:
        $ref: '#/definitions/MessageType'
        description: The status message.
    type: object
  ShareResultsList:
    items:
      $ref: '#/definitions/ShareResult'
    type: array
  ShareStatusType:
    enum:
      - SUCCESS
      - FAILURE
    type: string
  SignedHeaderMap:
    items:
      properties:
        key:
          $ref: '#/definitions/HeaderNameType'
        value:
          $ref: '#/definitions/HeaderValueType'
      type: object
    type: array
  SizeType:
    type: integer
  StorageLimitExceededException:
    description: The storage limit has been exceeded.
    properties:
      Message:
        $ref: '#/definitions/ErrorMessageType'
    type: object
  StorageLimitWillExceedException:
    description: The storage limit will be exceeded.
    properties:
      Message:
        $ref: '#/definitions/ErrorMessageType'
    type: object
  StorageRuleType:
    description: Describes the storage for a user.
    properties:
      StorageAllocatedInBytes:
        $ref: '#/definitions/PositiveSizeType'
        description: 'The amount of storage allocated, in bytes.'
      StorageType:
        $ref: '#/definitions/StorageType'
        description: The type of storage.
    type: object
  StorageType:
    enum:
      - UNLIMITED
      - QUOTA
    type: string
  Subscription:
    description: Describes a subscription.
    properties:
      EndPoint:
        $ref: '#/definitions/SubscriptionEndPointType'
        description: The endpoint of the subscription.
      Protocol:
        $ref: '#/definitions/SubscriptionProtocolType'
        description: The protocol of the subscription.
      SubscriptionId:
        $ref: '#/definitions/IdType'
        description: The ID of the subscription.
    type: object
  SubscriptionEndPointType:
    maxLength: 256
    minLength: 1
    type: string
  SubscriptionList:
    items:
      $ref: '#/definitions/Subscription'
    maxItems: 256
    type: array
  SubscriptionProtocolType:
    enum:
      - HTTPS
    type: string
  SubscriptionType:
    enum:
      - ALL
    type: string
  TimeZoneIdType:
    maxLength: 256
    minLength: 1
    type: string
  TimestampType:
    format: date-time
    type: string
  TooManyLabelsException:
    description: The limit has been reached on the number of labels for the specified resource.
    properties:
      Message:
        $ref: '#/definitions/ErrorMessageType'
    type: object
  TooManySubscriptionsException:
    description: You've reached the limit on the number of subscriptions for the WorkDocs instance.
    properties:
      Message:
        $ref: '#/definitions/ErrorMessageType'
    type: object
  UnauthorizedOperationException:
    description: The operation is not permitted.
    properties: {}
    type: object
  UnauthorizedResourceAccessException:
    description: The caller does not have access to perform the action on the resource.
    properties:
      Message:
        $ref: '#/definitions/ErrorMessageType'
    type: object
  UpdateDocumentRequest:
    properties:
      Name:
        $ref: '#/definitions/ResourceNameType'
        description: The name of the document.
      ParentFolderId:
        $ref: '#/definitions/ResourceIdType'
        description: The ID of the parent folder.
      ResourceState:
        $ref: '#/definitions/ResourceStateType'
        description: The resource state of the document. Note that only ACTIVE and RECYCLED are supported.
    type: object
  UpdateDocumentVersionRequest:
    properties:
      VersionStatus:
        $ref: '#/definitions/DocumentVersionStatus'
        description: The status of the version.
    type: object
  UpdateFolderRequest:
    properties:
      Name:
        $ref: '#/definitions/ResourceNameType'
        description: The name of the folder.
      ParentFolderId:
        $ref: '#/definitions/ResourceIdType'
        description: The ID of the parent folder.
      ResourceState:
        $ref: '#/definitions/ResourceStateType'
        description: The resource state of the folder. Note that only ACTIVE and RECYCLED are accepted values from the API.
    type: object
  UpdateUserRequest:
    properties:
      GivenName:
        $ref: '#/definitions/UserAttributeValueType'
        description: The given name of the user.
      Locale:
        $ref: '#/definitions/LocaleType'
        description: The locale of the user.
      StorageRule:
        $ref: '#/definitions/StorageRuleType'
        description: The amount of storage for the user.
      Surname:
        $ref: '#/definitions/UserAttributeValueType'
        description: The surname of the user.
      TimeZoneId:
        $ref: '#/definitions/TimeZoneIdType'
        description: The time zone ID of the user.
      Type:
        $ref: '#/definitions/UserType'
        description: The type of the user.
    type: object
  UpdateUserResponse:
    properties:
      User:
        $ref: '#/definitions/User'
        description: The user information.
    type: object
  UploadMetadata:
    description: Describes the upload.
    properties:
      SignedHeaders:
        $ref: '#/definitions/SignedHeaderMap'
        description: The signed headers.
      UploadUrl:
        $ref: '#/definitions/UrlType'
        description: The URL of the upload.
    type: object
  UrlType:
    format: password
    maxLength: 1024
    minLength: 1
    type: string
  User:
    description: Describes a user.
    properties:
      CreatedTimestamp:
        $ref: '#/definitions/TimestampType'
        description: The time when the user was created.
      EmailAddress:
        $ref: '#/definitions/EmailAddressType'
        description: The email address of the user.
      GivenName:
        $ref: '#/definitions/UserAttributeValueType'
        description: The given name of the user.
      Id:
        $ref: '#/definitions/IdType'
        description: The ID of the user.
      Locale:
        $ref: '#/definitions/LocaleType'
        description: The locale of the user.
      ModifiedTimestamp:
        $ref: '#/definitions/TimestampType'
        description: The time when the user was modified.
      OrganizationId:
        $ref: '#/definitions/IdType'
        description: The ID of the organization.
      RecycleBinFolderId:
        $ref: '#/definitions/ResourceIdType'
        description: The ID of the recycle bin folder.
      RootFolderId:
        $ref: '#/definitions/ResourceIdType'
        description: The ID of the root folder.
      Status:
        $ref: '#/definitions/UserStatusType'
        description: The status of the user.
      Storage:
        $ref: '#/definitions/UserStorageMetadata'
        description: The storage for the user.
      Surname:
        $ref: '#/definitions/UserAttributeValueType'
        description: The surname of the user.
      TimeZoneId:
        $ref: '#/definitions/TimeZoneIdType'
        description: The time zone ID of the user.
      Type:
        $ref: '#/definitions/UserType'
        description: The type of user.
      Username:
        $ref: '#/definitions/UsernameType'
        description: The login name of the user.
    type: object
  UserActivities:
    items:
      $ref: '#/definitions/Activity'
    type: array
  UserAttributeValueType:
    maxLength: 64
    minLength: 1
    type: string
  UserFilterType:
    enum:
      - ALL
      - ACTIVE_PENDING
    type: string
  UserIdsType:
    maxLength: 2000
    minLength: 1
    pattern: '[&\w+-.@, ]+'
    type: string
  UserMetadata:
    description: Describes the metadata of the user.
    properties:
      EmailAddress:
        $ref: '#/definitions/EmailAddressType'
        description: The email address of the user.
      GivenName:
        $ref: '#/definitions/UserAttributeValueType'
        description: The given name of the user before a rename operation.
      Id:
        $ref: '#/definitions/IdType'
        description: The ID of the user.
      Surname:
        $ref: '#/definitions/UserAttributeValueType'
        description: The surname of the user.
      Username:
        $ref: '#/definitions/UsernameType'
        description: The username of the user.
    type: object
  UserMetadataList:
    items:
      $ref: '#/definitions/UserMetadata'
    type: array
  UserSortType:
    enum:
      - USER_NAME
      - FULL_NAME
      - STORAGE_LIMIT
      - USER_STATUS
      - STORAGE_USED
    type: string
  UserStatusType:
    enum:
      - ACTIVE
      - INACTIVE
      - PENDING
    type: string
  UserStorageMetadata:
    description: Describes the storage for a user.
    properties:
      StorageRule:
        $ref: '#/definitions/StorageRuleType'
        description: The storage for a user.
      StorageUtilizedInBytes:
        $ref: '#/definitions/SizeType'
        description: 'The amount of storage utilized, in bytes.'
    type: object
  UserType:
    enum:
      - USER
      - ADMIN
    type: string
  UsernameType:
    maxLength: 256
    minLength: 1
    pattern: '[\w\-+.]+(@[a-zA-Z0-9.\-]+\.[a-zA-Z]+)?'
    type: string

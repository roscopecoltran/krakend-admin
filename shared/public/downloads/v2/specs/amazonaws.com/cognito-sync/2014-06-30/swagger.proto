syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package amazoncognitosync;

message GetIdentitypoolsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListIdentityPoolUsageRequest body = 10;
}

message GetIdentitypoolsIdentityPoolIdRequest {
    string Action = 1;
    string IdentityPoolId = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    DescribeIdentityPoolUsageRequest body = 11;
}

message PostIdentitypoolsIdentityPoolIdBulkpublishRequest {
    string Action = 1;
    string IdentityPoolId = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    BulkPublishRequest body = 11;
}

message PostIdentitypoolsIdentityPoolIdConfigurationRequest {
    string Action = 1;
    string IdentityPoolId = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    SetIdentityPoolConfigurationRequest body = 11;
}

message PostIdentitypoolsIdentityPoolIdEventsRequest {
    string Action = 1;
    string IdentityPoolId = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    SetCognitoEventsRequest body = 11;
}

message PostIdentitypoolsIdentityPoolIdGetBulkPublishDetailsRequest {
    string Action = 1;
    string IdentityPoolId = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    GetBulkPublishDetailsRequest body = 11;
}

message GetIdentitypoolsIdentityPoolIdIdentitiesIdentityIdRequest {
    string Action = 1;
    string IdentityId = 2;
    string IdentityPoolId = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    DescribeIdentityUsageRequest body = 12;
}

message GetIdentitypoolsIdentityPoolIdIdentitiesIdentityIdDatasetsRequest {
    string Action = 1;
    string IdentityId = 2;
    string IdentityPoolId = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    ListDatasetsRequest body = 12;
}

message PostIdentitypoolsIdentityPoolIdIdentitiesIdentityIdDatasetsDatasetNameRequest {
    string Action = 1;
    string DatasetName = 2;
    string IdentityId = 3;
    string IdentityPoolId = 4;
    string Version = 5;
    string X_Amz_Algorithm = 6;
    string X_Amz_Content_Sha256 = 7;
    string X_Amz_Credential = 8;
    string X_Amz_Date = 9;
    string X_Amz_Security_Token = 10;
    string X_Amz_Signature = 11;
    string X_Amz_SignedHeaders = 12;
    UpdateRecordsRequest body = 13;
}

message GetIdentitypoolsIdentityPoolIdIdentitiesIdentityIdDatasetsDatasetNameRecordsRequest {
    string Action = 1;
    string DatasetName = 2;
    string IdentityId = 3;
    string IdentityPoolId = 4;
    string Version = 5;
    string X_Amz_Algorithm = 6;
    string X_Amz_Content_Sha256 = 7;
    string X_Amz_Credential = 8;
    string X_Amz_Date = 9;
    string X_Amz_Security_Token = 10;
    string X_Amz_Signature = 11;
    string X_Amz_SignedHeaders = 12;
    ListRecordsRequest body = 13;
}

message DeleteIdentitypoolsIdentityPoolIdIdentitiesIdentityIdDatasetsDatasetNameSubscriptionsDeviceIdRequest {
    string Action = 1;
    string DatasetName = 2;
    string DeviceId = 3;
    string IdentityId = 4;
    string IdentityPoolId = 5;
    string Version = 6;
    string X_Amz_Algorithm = 7;
    string X_Amz_Content_Sha256 = 8;
    string X_Amz_Credential = 9;
    string X_Amz_Date = 10;
    string X_Amz_Security_Token = 11;
    string X_Amz_Signature = 12;
    string X_Amz_SignedHeaders = 13;
    UnsubscribeFromDatasetRequest body = 14;
}

message PostIdentitypoolsIdentityPoolIdIdentityIdentityIdDeviceRequest {
    string Action = 1;
    string IdentityId = 2;
    string IdentityPoolId = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    RegisterDeviceRequest body = 12;
}

message AlreadyStreamedException {
    // The message associated with the AlreadyStreamedException exception.
    string message = 1;
}



repeated string ApplicationArnList = 1





message BulkPublishRequest {
}

message BulkPublishResponse {
    // A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
    string IdentityPoolId = 1;
}

enum BulkPublishStatu {
    NOT_STARTED = 0;
    IN_PROGRESS = 1;
    FAILED = 2;
    SUCCEEDED = 3;
}

message CognitoStreams {
    // The ARN of the role Amazon Cognito can assume in order to publish to the stream. This role must grant access to Amazon Cognito (cognito-sync) to invoke PutRecord on your Cognito stream.
    string RoleArn = 1;
    // The name of the Cognito stream to receive updates. This stream must be in the developers account and in the same region as the identity pool.
    string StreamName = 2;
    // Status of the Cognito streams. Valid values are: <p>ENABLED - Streaming of updates to identity pool is enabled.</p> <p>DISABLED - Streaming of updates to identity pool is disabled. Bulk publish will also fail if StreamingStatus is DISABLED.</p>
    StreamingStatus StreamingStatus = 3;
}

message ConcurrentModificationException {
    // The message returned by a ConcurrentModicationException.
    string message = 1;
}

message Dataset {
    // Date on which the dataset was created.
    string CreationDate = 1;
    // Total size in bytes of the records in this dataset.
    integer DataStorage = 2;
    // A string of up to 128 characters. Allowed characters are a-z, A-Z, 0-9, '_' (underscore), '-' (dash), and '.' (dot).
    string DatasetName = 3;
    // A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
    string IdentityId = 4;
    // The device that made the last change to this dataset.
    string LastModifiedBy = 5;
    // Date when the dataset was last modified.
    string LastModifiedDate = 6;
    // Number of records in this dataset.
    integer NumRecords = 7;
}

repeated Dataset DatasetList = 1





message DeleteDatasetRequest {
}

message DeleteDatasetResponse {
    // A collection of data for an identity pool. An identity pool can have multiple datasets. A dataset is per identity and can be general or associated with a particular entity in an application (like a saved game). Datasets are automatically created if they don't exist. Data is synced by dataset, and a dataset can hold up to 1MB of key-value pairs.
    Dataset Dataset = 1;
}

message DescribeDatasetRequest {
}

message DescribeDatasetResponse {
    // Meta data for a collection of data for an identity. An identity can have multiple datasets. A dataset can be general or associated with a particular entity in an application (like a saved game). Datasets are automatically created if they don't exist. Data is synced by dataset, and a dataset can hold up to 1MB of key-value pairs.
    Dataset Dataset = 1;
}

message DescribeIdentityPoolUsageRequest {
}

message DescribeIdentityPoolUsageResponse {
    // Information about the usage of the identity pool.
    IdentityPoolUsage IdentityPoolUsage = 1;
}

message DescribeIdentityUsageRequest {
}

message DescribeIdentityUsageResponse {
    // Usage information for the identity.
    IdentityUsage IdentityUsage = 1;
}

message DuplicateRequestException {
    // The message associated with the DuplicateRequestException exception.
    string message = 1;
}

message Event {
    string key = 1;
    string value = 2;
}
repeated Event Events = 1



message GetBulkPublishDetailsRequest {
}

message GetBulkPublishDetailsResponse {
    // If BulkPublishStatus is SUCCEEDED, the time the last bulk publish operation completed.
    string BulkPublishCompleteTime = 1;
    // The date/time at which the last bulk publish was initiated.
    string BulkPublishStartTime = 2;
    // Status of the last bulk publish operation, valid values are: <p>NOT_STARTED - No bulk publish has been requested for this identity pool</p> <p>IN_PROGRESS - Data is being published to the configured stream</p> <p>SUCCEEDED - All data for the identity pool has been published to the configured stream</p> <p>FAILED - Some portion of the data has failed to publish, check FailureMessage for the cause.</p>
    BulkPublishStatus BulkPublishStatus = 3;
    // If BulkPublishStatus is FAILED this field will contain the error message that caused the bulk publish to fail.
    string FailureMessage = 4;
    // A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
    string IdentityPoolId = 5;
}

message GetCognitoEventsRequest {
}

message GetCognitoEventsResponse {
    // The Cognito Events returned from the GetCognitoEvents request
    array Events = 1;
}

message GetIdentityPoolConfigurationRequest {
}

message GetIdentityPoolConfigurationResponse {
    // Options to apply to this identity pool for Amazon Cognito streams.
    CognitoStreams CognitoStreams = 1;
    // A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito.
    string IdentityPoolId = 2;
    // Options to apply to this identity pool for push synchronization.
    PushSync PushSync = 3;
}

message IdentityPoolUsage {
    // Data storage information for the identity pool.
    integer DataStorage = 1;
    // A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
    string IdentityPoolId = 2;
    // Date on which the identity pool was last modified.
    string LastModifiedDate = 3;
    // Number of sync sessions for the identity pool.
    integer SyncSessionsCount = 4;
}

repeated IdentityPoolUsage IdentityPoolUsageList = 1

message IdentityUsage {
    // Total data storage for this identity.
    integer DataStorage = 1;
    // Number of datasets for the identity.
    integer DatasetCount = 2;
    // A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
    string IdentityId = 3;
    // A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
    string IdentityPoolId = 4;
    // Date on which the identity was last modified.
    string LastModifiedDate = 5;
}

message InternalErrorException {
    // Message returned by InternalErrorException.
    string message = 1;
}

message InvalidConfigurationException {
    // Message returned by InvalidConfigurationException.
    string message = 1;
}

message InvalidLambdaFunctionOutputException {
    // A message returned when an InvalidLambdaFunctionOutputException occurs
    string message = 1;
}

message InvalidParameterException {
    // Message returned by InvalidParameterException.
    string message = 1;
}

message LambdaThrottledException {
    // A message returned when an LambdaThrottledException is thrown
    string message = 1;
}

message LimitExceededException {
    // Message returned by LimitExceededException.
    string message = 1;
}

message ListDatasetsRequest {
}

message ListDatasetsResponse {
    // Number of datasets returned.
    integer Count = 1;
    // A set of datasets.
    array Datasets = 2;
    // A pagination token for obtaining the next page of results.
    string NextToken = 3;
}

message ListIdentityPoolUsageRequest {
}

message ListIdentityPoolUsageResponse {
    // Total number of identities for the identity pool.
    integer Count = 1;
    // Usage information for the identity pools.
    array IdentityPoolUsages = 2;
    // The maximum number of results to be returned.
    integer MaxResults = 3;
    // A pagination token for obtaining the next page of results.
    string NextToken = 4;
}

message ListRecordsRequest {
}

message ListRecordsResponse {
    // Total number of records.
    integer Count = 1;
    // A boolean value specifying whether to delete the dataset locally.
    boolean DatasetDeletedAfterRequestedSyncCount = 2;
    // Indicates whether the dataset exists.
    boolean DatasetExists = 3;
    // Server sync count for this dataset.
    integer DatasetSyncCount = 4;
    // The user/device that made the last change to this record.
    string LastModifiedBy = 5;
    // Names of merged datasets.
    array MergedDatasetNames = 6;
    // A pagination token for obtaining the next page of results.
    string NextToken = 7;
    // A list of all records.
    array Records = 8;
    // A token containing a session ID, identity ID, and expiration.
    string SyncSessionToken = 9;
}



repeated string MergedDatasetNameList = 1

message NotAuthorizedException {
    // The message returned by a NotAuthorizedException.
    string message = 1;
}

enum Operation {
    REPLACE = 0;
    REMOVE = 1;
}

enum Platform {
    APNS = 0;
    APNS_SANDBOX = 1;
    GCM = 2;
    ADM = 3;
}

message PushSync {
    // List of SNS platform application ARNs that could be used by clients.
    array ApplicationArns = 1;
    // A role configured to allow Cognito to call SNS on behalf of the developer.
    string RoleArn = 2;
}

message Record {
    // The last modified date of the client device.
    string DeviceLastModifiedDate = 1;
    // The key for the record.
    string Key = 2;
    // The user/device that made the last change to this record.
    string LastModifiedBy = 3;
    // The date on which the record was last modified.
    string LastModifiedDate = 4;
    // The server sync count for this record.
    integer SyncCount = 5;
    // The value for the record.
    string Value = 6;
}



repeated Record RecordList = 1

message RecordPatch {
    // The last modified date of the client device.
    string DeviceLastModifiedDate = 1;
    // The key associated with the record patch.
    string Key = 2;
    // An operation, either replace or remove.
    Operation Op = 3;
    // Last known server sync count for this record. Set to 0 if unknown.
    integer SyncCount = 4;
    // The value associated with the record patch.
    string Value = 5;
}

repeated RecordPatch RecordPatchList = 1



message RegisterDeviceRequest {
    // The SNS platform type (e.g. GCM, SDM, APNS, APNS_SANDBOX).
    Platform Platform = 1;
    // The push token.
    string Token = 2;
}

message RegisterDeviceResponse {
    // The unique ID generated for this device by Cognito.
    string DeviceId = 1;
}

message ResourceConflictException {
    // The message returned by a ResourceConflictException.
    string message = 1;
}

message ResourceNotFoundException {
    // Message returned by a ResourceNotFoundException.
    string message = 1;
}

message SetCognitoEventsRequest {
    // The events to configure
    array Events = 1;
}

message SetIdentityPoolConfigurationRequest {
    // Options to apply to this identity pool for Amazon Cognito streams.
    CognitoStreams CognitoStreams = 1;
    // Options to apply to this identity pool for push synchronization.
    PushSync PushSync = 2;
}

message SetIdentityPoolConfigurationResponse {
    // Options to apply to this identity pool for Amazon Cognito streams.
    CognitoStreams CognitoStreams = 1;
    // A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito.
    string IdentityPoolId = 2;
    // Options to apply to this identity pool for push synchronization.
    PushSync PushSync = 3;
}

enum StreamingStatu {
    ENABLED = 0;
    DISABLED = 1;
}

message SubscribeToDatasetRequest {
}

message SubscribeToDatasetResponse {
}

message TooManyRequestsException {
    // Message returned by a TooManyRequestsException.
    string message = 1;
}

message UnsubscribeFromDatasetRequest {
}

message UnsubscribeFromDatasetResponse {
}

message UpdateRecordsRequest {
    // The unique ID generated for this device by Cognito.
    string DeviceId = 1;
    // A list of patch operations.
    array RecordPatches = 2;
    // The SyncSessionToken returned by a previous call to ListRecords for this dataset and identity.
    string SyncSessionToken = 3;
}

message UpdateRecordsResponse {
    // A list of records that have been updated.
    array Records = 1;
}

service AmazonCognitoSyncService {
    // <p>Gets a list of identity pools registered with Cognito.</p> <p>ListIdentityPoolUsage can only be called with developer credentials. You cannot make this API call with the temporary user credentials provided by Cognito Identity.</p>
    rpc GetIdentitypools(GetIdentitypoolsRequest) returns (ListIdentityPoolUsageResponse) {
      option (google.api.http) = {
        get: "//identitypools"
        body: "body"
      };
    }
    // <p>Gets usage details (for example, data storage) about a particular identity pool.</p> <p>This API can only be called with developer credentials. You cannot call this API with the temporary user credentials provided by Cognito Identity.</p>
    rpc GetIdentitypoolsIdentityPoolId(GetIdentitypoolsIdentityPoolIdRequest) returns (DescribeIdentityPoolUsageResponse) {
      option (google.api.http) = {
        get: "//identitypools/{IdentityPoolId}"
        body: "body"
      };
    }
    // <p>Initiates a bulk publish of all existing datasets for an Identity Pool to the configured stream. Customers are limited to one successful bulk publish per 24 hours. Bulk publish is an asynchronous request, customers can see the status of the request via the GetBulkPublishDetails operation.</p> <p>This API can only be called with developer credentials. You cannot call this API with the temporary user credentials provided by Cognito Identity.</p>
    rpc PostIdentitypoolsIdentityPoolIdBulkpublish(PostIdentitypoolsIdentityPoolIdBulkpublishRequest) returns (BulkPublishResponse) {
      option (google.api.http) = {
        post: "//identitypools/{IdentityPoolId}/bulkpublish"
        body: "body"
      };
    }
    // <p>Sets the necessary configuration for push sync.</p> <p>This API can only be called with developer credentials. You cannot call this API with the temporary user credentials provided by Cognito Identity.</p>
    rpc PostIdentitypoolsIdentityPoolIdConfiguration(PostIdentitypoolsIdentityPoolIdConfigurationRequest) returns (SetIdentityPoolConfigurationResponse) {
      option (google.api.http) = {
        post: "//identitypools/{IdentityPoolId}/configuration"
        body: "body"
      };
    }
    // <p>Sets the AWS Lambda function for a given event type for an identity pool. This request only updates the key/value pair specified. Other key/values pairs are not updated. To remove a key value pair, pass a empty value for the particular key.</p> <p>This API can only be called with developer credentials. You cannot call this API with the temporary user credentials provided by Cognito Identity.</p>
    rpc PostIdentitypoolsIdentityPoolIdEvents(PostIdentitypoolsIdentityPoolIdEventsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//identitypools/{IdentityPoolId}/events"
        body: "body"
      };
    }
    // <p>Get the status of the last BulkPublish operation for an identity pool.</p> <p>This API can only be called with developer credentials. You cannot call this API with the temporary user credentials provided by Cognito Identity.</p>
    rpc PostIdentitypoolsIdentityPoolIdGetBulkPublishDetails(PostIdentitypoolsIdentityPoolIdGetBulkPublishDetailsRequest) returns (GetBulkPublishDetailsResponse) {
      option (google.api.http) = {
        post: "//identitypools/{IdentityPoolId}/getBulkPublishDetails"
        body: "body"
      };
    }
    // <p>Gets usage information for an identity, including number of datasets and data usage.</p> <p>This API can be called with temporary user credentials provided by Cognito Identity or with developer credentials.</p>
    rpc GetIdentitypoolsIdentityPoolIdIdentitiesIdentityId(GetIdentitypoolsIdentityPoolIdIdentitiesIdentityIdRequest) returns (DescribeIdentityUsageResponse) {
      option (google.api.http) = {
        get: "//identitypools/{IdentityPoolId}/identities/{IdentityId}"
        body: "body"
      };
    }
    // <p>Lists datasets for an identity. With Amazon Cognito Sync, each identity has access only to its own data. Thus, the credentials used to make this API call need to have access to the identity data.</p> <p>ListDatasets can be called with temporary user credentials provided by Cognito Identity or with developer credentials. You should use the Cognito Identity credentials to make this API call.</p>
    rpc GetIdentitypoolsIdentityPoolIdIdentitiesIdentityIdDatasets(GetIdentitypoolsIdentityPoolIdIdentitiesIdentityIdDatasetsRequest) returns (ListDatasetsResponse) {
      option (google.api.http) = {
        get: "//identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets"
        body: "body"
      };
    }
    // <p>Posts updates to records and adds and deletes records for a dataset and user.</p> <p>The sync count in the record patch is your last known sync count for that record. The server will reject an UpdateRecords request with a ResourceConflictException if you try to patch a record with a new value but a stale sync count.</p> <p>For example, if the sync count on the server is 5 for a key called highScore and you try and submit a new highScore with sync count of 4, the request will be rejected. To obtain the current sync count for a record, call ListRecords. On a successful update of the record, the response returns the new sync count for that record. You should present that sync count the next time you try to update that same record. When the record does not exist, specify the sync count as 0.</p> <p>This API can be called with temporary user credentials provided by Cognito Identity or with developer credentials.</p>
    rpc PostIdentitypoolsIdentityPoolIdIdentitiesIdentityIdDatasetsDatasetName(PostIdentitypoolsIdentityPoolIdIdentitiesIdentityIdDatasetsDatasetNameRequest) returns (UpdateRecordsResponse) {
      option (google.api.http) = {
        post: "//identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}"
        body: "body"
      };
    }
    // <p>Gets paginated records, optionally changed after a particular sync count for a dataset and identity. With Amazon Cognito Sync, each identity has access only to its own data. Thus, the credentials used to make this API call need to have access to the identity data.</p> <p>ListRecords can be called with temporary user credentials provided by Cognito Identity or with developer credentials. You should use Cognito Identity credentials to make this API call.</p>
    rpc GetIdentitypoolsIdentityPoolIdIdentitiesIdentityIdDatasetsDatasetNameRecords(GetIdentitypoolsIdentityPoolIdIdentitiesIdentityIdDatasetsDatasetNameRecordsRequest) returns (ListRecordsResponse) {
      option (google.api.http) = {
        get: "//identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/records"
        body: "body"
      };
    }
    // <p>Unsubscribes from receiving notifications when a dataset is modified by another device.</p> <p>This API can only be called with temporary credentials provided by Cognito Identity. You cannot call this API with developer credentials.</p>
    rpc DeleteIdentitypoolsIdentityPoolIdIdentitiesIdentityIdDatasetsDatasetNameSubscriptionsDeviceId(DeleteIdentitypoolsIdentityPoolIdIdentitiesIdentityIdDatasetsDatasetNameSubscriptionsDeviceIdRequest) returns (UnsubscribeFromDatasetResponse) {
      option (google.api.http) = {
        delete: "//identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/subscriptions/{DeviceId}"
        body: "body"
      };
    }
    // <p>Registers a device to receive push sync notifications.</p> <p>This API can only be called with temporary credentials provided by Cognito Identity. You cannot call this API with developer credentials.</p>
    rpc PostIdentitypoolsIdentityPoolIdIdentityIdentityIdDevice(PostIdentitypoolsIdentityPoolIdIdentityIdentityIdDeviceRequest) returns (RegisterDeviceResponse) {
      option (google.api.http) = {
        post: "//identitypools/{IdentityPoolId}/identity/{IdentityId}/device"
        body: "body"
      };
    }
}

{
	"basePath": "/",
	"consumes.length": 1,
	"consumes[0]": "application/json",
	"definitions.AttributeAction.enum.length": 3,
	"definitions.AttributeAction.enum[0]": "ADD",
	"definitions.AttributeAction.enum[1]": "PUT",
	"definitions.AttributeAction.enum[2]": "DELETE",
	"definitions.AttributeAction.type": "string",
	"definitions.AttributeDefinition.description": "Represents an attribute for describing the key schema for the table and indexes.",
	"definitions.AttributeDefinition.properties.AttributeName.$ref": "#/definitions/KeySchemaAttributeName",
	"definitions.AttributeDefinition.properties.AttributeName.description": "A name for the attribute.",
	"definitions.AttributeDefinition.properties.AttributeType.$ref": "#/definitions/ScalarAttributeType",
	"definitions.AttributeDefinition.properties.AttributeType.description": "\u003cp\u003eThe data type for the attribute, where:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eS\u003c/code\u003e - the attribute is of type String\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eN\u003c/code\u003e - the attribute is of type Number\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eB\u003c/code\u003e - the attribute is of type Binary\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
	"definitions.AttributeDefinition.required.length": 2,
	"definitions.AttributeDefinition.required[0]": "AttributeName",
	"definitions.AttributeDefinition.required[1]": "AttributeType",
	"definitions.AttributeDefinition.type": "object",
	"definitions.AttributeDefinitions.items.$ref": "#/definitions/AttributeDefinition",
	"definitions.AttributeDefinitions.type": "array",
	"definitions.AttributeMap.items.properties.key.$ref": "#/definitions/AttributeName",
	"definitions.AttributeMap.items.properties.value.$ref": "#/definitions/AttributeValue",
	"definitions.AttributeMap.items.type": "object",
	"definitions.AttributeMap.type": "array",
	"definitions.AttributeName.maxLength": 65535,
	"definitions.AttributeName.type": "string",
	"definitions.AttributeNameList.items.$ref": "#/definitions/AttributeName",
	"definitions.AttributeNameList.minItems": 1,
	"definitions.AttributeNameList.type": "array",
	"definitions.AttributeUpdates.items.properties.key.$ref": "#/definitions/AttributeName",
	"definitions.AttributeUpdates.items.properties.value.$ref": "#/definitions/AttributeValueUpdate",
	"definitions.AttributeUpdates.items.type": "object",
	"definitions.AttributeUpdates.type": "array",
	"definitions.AttributeValue.description": "\u003cp\u003eRepresents the data for an attribute.\u003c/p\u003e \u003cp\u003eEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\u003c/p\u003e \u003cp\u003eFor more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes\"\u003eData Types\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"definitions.AttributeValue.properties.B.$ref": "#/definitions/BinaryAttributeValue",
	"definitions.AttributeValue.properties.B.description": "\u003cp\u003eAn attribute of type Binary. For example:\u003c/p\u003e \u003cp\u003e \u003ccode\u003e\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\u003c/code\u003e \u003c/p\u003e",
	"definitions.AttributeValue.properties.BOOL.$ref": "#/definitions/BooleanAttributeValue",
	"definitions.AttributeValue.properties.BOOL.description": "\u003cp\u003eAn attribute of type Boolean. For example:\u003c/p\u003e \u003cp\u003e \u003ccode\u003e\"BOOL\": true\u003c/code\u003e \u003c/p\u003e",
	"definitions.AttributeValue.properties.BS.$ref": "#/definitions/BinarySetAttributeValue",
	"definitions.AttributeValue.properties.BS.description": "\u003cp\u003eAn attribute of type Binary Set. For example:\u003c/p\u003e \u003cp\u003e \u003ccode\u003e\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\u003c/code\u003e \u003c/p\u003e",
	"definitions.AttributeValue.properties.L.$ref": "#/definitions/ListAttributeValue",
	"definitions.AttributeValue.properties.L.description": "\u003cp\u003eAn attribute of type List. For example:\u003c/p\u003e \u003cp\u003e \u003ccode\u003e\"L\": [\"Cookies\", \"Coffee\", 3.14159]\u003c/code\u003e \u003c/p\u003e",
	"definitions.AttributeValue.properties.M.$ref": "#/definitions/MapAttributeValue",
	"definitions.AttributeValue.properties.M.description": "\u003cp\u003eAn attribute of type Map. For example:\u003c/p\u003e \u003cp\u003e \u003ccode\u003e\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\u003c/code\u003e \u003c/p\u003e",
	"definitions.AttributeValue.properties.N.$ref": "#/definitions/NumberAttributeValue",
	"definitions.AttributeValue.properties.N.description": "\u003cp\u003eAn attribute of type Number. For example:\u003c/p\u003e \u003cp\u003e \u003ccode\u003e\"N\": \"123.45\"\u003c/code\u003e \u003c/p\u003e \u003cp\u003eNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\u003c/p\u003e",
	"definitions.AttributeValue.properties.NS.$ref": "#/definitions/NumberSetAttributeValue",
	"definitions.AttributeValue.properties.NS.description": "\u003cp\u003eAn attribute of type Number Set. For example:\u003c/p\u003e \u003cp\u003e \u003ccode\u003e\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\u003c/code\u003e \u003c/p\u003e \u003cp\u003eNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\u003c/p\u003e",
	"definitions.AttributeValue.properties.NULL.$ref": "#/definitions/NullAttributeValue",
	"definitions.AttributeValue.properties.NULL.description": "\u003cp\u003eAn attribute of type Null. For example:\u003c/p\u003e \u003cp\u003e \u003ccode\u003e\"NULL\": true\u003c/code\u003e \u003c/p\u003e",
	"definitions.AttributeValue.properties.S.$ref": "#/definitions/StringAttributeValue",
	"definitions.AttributeValue.properties.S.description": "\u003cp\u003eAn attribute of type String. For example:\u003c/p\u003e \u003cp\u003e \u003ccode\u003e\"S\": \"Hello\"\u003c/code\u003e \u003c/p\u003e",
	"definitions.AttributeValue.properties.SS.$ref": "#/definitions/StringSetAttributeValue",
	"definitions.AttributeValue.properties.SS.description": "\u003cp\u003eAn attribute of type String Set. For example:\u003c/p\u003e \u003cp\u003e \u003ccode\u003e\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\u003c/code\u003e \u003c/p\u003e",
	"definitions.AttributeValue.type": "object",
	"definitions.AttributeValueList.items.$ref": "#/definitions/AttributeValue",
	"definitions.AttributeValueList.type": "array",
	"definitions.AttributeValueUpdate.description": "\u003cp\u003eFor the \u003ccode\u003eUpdateItem\u003c/code\u003e operation, represents the attributes to be modified, the action to perform on each, and the new value for each.\u003c/p\u003e \u003cnote\u003e \u003cp\u003eYou cannot use \u003ccode\u003eUpdateItem\u003c/code\u003e to update any primary key attributes. Instead, you will need to delete the item, and then use \u003ccode\u003ePutItem\u003c/code\u003e to create a new item with new attributes.\u003c/p\u003e \u003c/note\u003e \u003cp\u003eAttribute values cannot be null; string and binary type attributes must have lengths greater than zero; and set type attributes must not be empty. Requests with empty values will be rejected with a \u003ccode\u003eValidationException\u003c/code\u003e exception.\u003c/p\u003e",
	"definitions.AttributeValueUpdate.properties.Action.$ref": "#/definitions/AttributeAction",
	"definitions.AttributeValueUpdate.properties.Action.description": "\u003cp\u003eSpecifies how to perform the update. Valid values are \u003ccode\u003ePUT\u003c/code\u003e (default), \u003ccode\u003eDELETE\u003c/code\u003e, and \u003ccode\u003eADD\u003c/code\u003e. The behavior depends on whether the specified primary key already exists in the table.\u003c/p\u003e \u003cp\u003e \u003cb\u003eIf an item with the specified \u003ci\u003eKey\u003c/i\u003e is found in the table:\u003c/b\u003e \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003ePUT\u003c/code\u003e - Adds the specified attribute to the item. If the attribute already exists, it is replaced by the new value. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eDELETE\u003c/code\u003e - If no value is specified, the attribute and its value are removed from the item. The data type of the specified value must match the existing value's data type.\u003c/p\u003e \u003cp\u003eIf a \u003ci\u003eset\u003c/i\u003e of values is specified, then those values are subtracted from the old set. For example, if the attribute value was the set \u003ccode\u003e[a,b,c]\u003c/code\u003e and the \u003ccode\u003eDELETE\u003c/code\u003e action specified \u003ccode\u003e[a,c]\u003c/code\u003e, then the final attribute value would be \u003ccode\u003e[b]\u003c/code\u003e. Specifying an empty set is an error.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eADD\u003c/code\u003e - If the attribute does not already exist, then the attribute and its values are added to the item. If the attribute does exist, then the behavior of \u003ccode\u003eADD\u003c/code\u003e depends on the data type of the attribute:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eIf the existing attribute is a number, and if \u003ccode\u003eValue\u003c/code\u003e is also a number, then the \u003ccode\u003eValue\u003c/code\u003e is mathematically added to the existing attribute. If \u003ccode\u003eValue\u003c/code\u003e is a negative number, then it is subtracted from the existing attribute.\u003c/p\u003e \u003cnote\u003e \u003cp\u003e If you use \u003ccode\u003eADD\u003c/code\u003e to increment or decrement a number value for an item that doesn't exist before the update, DynamoDB uses 0 as the initial value.\u003c/p\u003e \u003cp\u003eIn addition, if you use \u003ccode\u003eADD\u003c/code\u003e to update an existing item, and intend to increment or decrement an attribute value which does not yet exist, DynamoDB uses \u003ccode\u003e0\u003c/code\u003e as the initial value. For example, suppose that the item you want to update does not yet have an attribute named \u003ci\u003eitemcount\u003c/i\u003e, but you decide to \u003ccode\u003eADD\u003c/code\u003e the number \u003ccode\u003e3\u003c/code\u003e to this attribute anyway, even though it currently does not exist. DynamoDB will create the \u003ci\u003eitemcount\u003c/i\u003e attribute, set its initial value to \u003ccode\u003e0\u003c/code\u003e, and finally add \u003ccode\u003e3\u003c/code\u003e to it. The result will be a new \u003ci\u003eitemcount\u003c/i\u003e attribute in the item, with a value of \u003ccode\u003e3\u003c/code\u003e.\u003c/p\u003e \u003c/note\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eIf the existing data type is a set, and if the \u003ccode\u003eValue\u003c/code\u003e is also a set, then the \u003ccode\u003eValue\u003c/code\u003e is added to the existing set. (This is a \u003ci\u003eset\u003c/i\u003e operation, not mathematical addition.) For example, if the attribute value was the set \u003ccode\u003e[1,2]\u003c/code\u003e, and the \u003ccode\u003eADD\u003c/code\u003e action specified \u003ccode\u003e[3]\u003c/code\u003e, then the final attribute value would be \u003ccode\u003e[1,2,3]\u003c/code\u003e. An error occurs if an Add action is specified for a set attribute and the attribute type specified does not match the existing set type. \u003c/p\u003e \u003cp\u003eBoth sets must have the same primitive data type. For example, if the existing data type is a set of strings, the \u003ccode\u003eValue\u003c/code\u003e must also be a set of strings. The same holds true for number sets and binary sets.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eThis action is only valid for an existing attribute whose data type is number or is a set. Do not use \u003ccode\u003eADD\u003c/code\u003e for any other data types.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003e \u003cb\u003eIf no item with the specified \u003ci\u003eKey\u003c/i\u003e is found:\u003c/b\u003e \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003ePUT\u003c/code\u003e - DynamoDB creates a new item with the specified primary key, and then adds the attribute. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eDELETE\u003c/code\u003e - Nothing happens; there is no attribute to delete.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eADD\u003c/code\u003e - DynamoDB creates an item with the supplied primary key and number (or set of numbers) for the attribute value. The only data types allowed are number and number set; no other data types can be specified.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
	"definitions.AttributeValueUpdate.properties.Value.$ref": "#/definitions/AttributeValue",
	"definitions.AttributeValueUpdate.properties.Value.description": "\u003cp\u003eRepresents the data for an attribute.\u003c/p\u003e \u003cp\u003eEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\u003c/p\u003e \u003cp\u003eFor more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes\"\u003eData TYpes\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e. \u003c/p\u003e",
	"definitions.AttributeValueUpdate.type": "object",
	"definitions.Backfilling.type": "boolean",
	"definitions.BatchGetItemInput.description": "Represents the input of a \u003ccode\u003eBatchGetItem\u003c/code\u003e operation.",
	"definitions.BatchGetItemInput.example.RequestItems.Music.Keys.length": 3,
	"definitions.BatchGetItemInput.example.RequestItems.Music.Keys[0].Artist.S": "No One You Know",
	"definitions.BatchGetItemInput.example.RequestItems.Music.Keys[0].SongTitle.S": "Call Me Today",
	"definitions.BatchGetItemInput.example.RequestItems.Music.Keys[1].Artist.S": "Acme Band",
	"definitions.BatchGetItemInput.example.RequestItems.Music.Keys[1].SongTitle.S": "Happy Day",
	"definitions.BatchGetItemInput.example.RequestItems.Music.Keys[2].Artist.S": "No One You Know",
	"definitions.BatchGetItemInput.example.RequestItems.Music.Keys[2].SongTitle.S": "Scared of My Shadow",
	"definitions.BatchGetItemInput.example.RequestItems.Music.ProjectionExpression": "AlbumTitle",
	"definitions.BatchGetItemInput.properties.RequestItems.$ref": "#/definitions/BatchGetRequestMap",
	"definitions.BatchGetItemInput.properties.RequestItems.description": "\u003cp\u003eA map of one or more table names and, for each table, a map that describes one or more items to retrieve from that table. Each table name can be used only once per \u003ccode\u003eBatchGetItem\u003c/code\u003e request.\u003c/p\u003e \u003cp\u003eEach element in the map of items to retrieve consists of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eConsistentRead\u003c/code\u003e - If \u003ccode\u003etrue\u003c/code\u003e, a strongly consistent read is used; if \u003ccode\u003efalse\u003c/code\u003e (the default), an eventually consistent read is used.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eExpressionAttributeNames\u003c/code\u003e - One or more substitution tokens for attribute names in the \u003ccode\u003eProjectionExpression\u003c/code\u003e parameter. The following are some use cases for using \u003ccode\u003eExpressionAttributeNames\u003c/code\u003e:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eTo access an attribute whose name conflicts with a DynamoDB reserved word.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo create a placeholder for repeating occurrences of an attribute name in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo prevent special characters in an attribute name from being misinterpreted in an expression.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eUse the \u003cb\u003e#\u003c/b\u003e character in an expression to dereference an attribute name. For example, consider the following attribute name:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003ePercentile\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eThe name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html\"\u003eReserved Words\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e). To work around this, you could specify the following for \u003ccode\u003eExpressionAttributeNames\u003c/code\u003e:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003e{\"#P\":\"Percentile\"}\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eYou could then use this substitution in an expression, as in this example:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003e#P = :val\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cnote\u003e \u003cp\u003eTokens that begin with the \u003cb\u003e:\u003c/b\u003e character are \u003ci\u003eexpression attribute values\u003c/i\u003e, which are placeholders for the actual value at runtime.\u003c/p\u003e \u003c/note\u003e \u003cp\u003eFor more information on expression attribute names, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\u003eAccessing Item Attributes\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eKeys\u003c/code\u003e - An array of primary key attribute values that define specific items in the table. For each primary key, you must provide \u003ci\u003eall\u003c/i\u003e of the key attributes. For example, with a simple primary key, you only need to provide the partition key value. For a composite key, you must provide \u003ci\u003eboth\u003c/i\u003e the partition key value and the sort key value.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eProjectionExpression\u003c/code\u003e - A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.\u003c/p\u003e \u003cp\u003eIf no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.\u003c/p\u003e \u003cp\u003eFor more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\u003eAccessing Item Attributes\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eAttributesToGet\u003c/code\u003e - This is a legacy parameter. Use \u003ccode\u003eProjectionExpression\u003c/code\u003e instead. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html\"\u003eAttributesToGet\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e. \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
	"definitions.BatchGetItemInput.properties.ReturnConsumedCapacity.$ref": "#/definitions/ReturnConsumedCapacity",
	"definitions.BatchGetItemInput.required.length": 1,
	"definitions.BatchGetItemInput.required[0]": "RequestItems",
	"definitions.BatchGetItemInput.type": "object",
	"definitions.BatchGetItemOutput.description": "Represents the output of a \u003ccode\u003eBatchGetItem\u003c/code\u003e operation.",
	"definitions.BatchGetItemOutput.example.Responses.Music.length": 3,
	"definitions.BatchGetItemOutput.example.Responses.Music[0].AlbumTitle.S": "Somewhat Famous",
	"definitions.BatchGetItemOutput.example.Responses.Music[1].AlbumTitle.S": "Blue Sky Blues",
	"definitions.BatchGetItemOutput.example.Responses.Music[2].AlbumTitle.S": "Louder Than Ever",
	"definitions.BatchGetItemOutput.properties.ConsumedCapacity.$ref": "#/definitions/ConsumedCapacityMultiple",
	"definitions.BatchGetItemOutput.properties.ConsumedCapacity.description": "\u003cp\u003eThe read capacity units consumed by the entire \u003ccode\u003eBatchGetItem\u003c/code\u003e operation.\u003c/p\u003e \u003cp\u003eEach element consists of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eTableName\u003c/code\u003e - The table that consumed the provisioned throughput.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eCapacityUnits\u003c/code\u003e - The total number of capacity units consumed.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
	"definitions.BatchGetItemOutput.properties.Responses.$ref": "#/definitions/BatchGetResponseMap",
	"definitions.BatchGetItemOutput.properties.Responses.description": "A map of table name to a list of items. Each object in \u003ccode\u003eResponses\u003c/code\u003e consists of a table name, along with a map of attribute data consisting of the data type and attribute value.",
	"definitions.BatchGetItemOutput.properties.UnprocessedKeys.$ref": "#/definitions/BatchGetRequestMap",
	"definitions.BatchGetItemOutput.properties.UnprocessedKeys.description": "\u003cp\u003eA map of tables and their respective keys that were not processed with the current response. The \u003ccode\u003eUnprocessedKeys\u003c/code\u003e value is in the same form as \u003ccode\u003eRequestItems\u003c/code\u003e, so the value can be provided directly to a subsequent \u003ccode\u003eBatchGetItem\u003c/code\u003e operation. For more information, see \u003ccode\u003eRequestItems\u003c/code\u003e in the Request Parameters section.\u003c/p\u003e \u003cp\u003eEach element consists of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eKeys\u003c/code\u003e - An array of primary key attribute values that define specific items in the table.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eProjectionExpression\u003c/code\u003e - One or more attributes to be retrieved from the table or index. By default, all attributes are returned. If a requested attribute is not found, it does not appear in the result.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eConsistentRead\u003c/code\u003e - The consistency of a read operation. If set to \u003ccode\u003etrue\u003c/code\u003e, then a strongly consistent read is used; otherwise, an eventually consistent read is used.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf there are no unprocessed keys remaining, the response contains an empty \u003ccode\u003eUnprocessedKeys\u003c/code\u003e map.\u003c/p\u003e",
	"definitions.BatchGetItemOutput.type": "object",
	"definitions.BatchGetRequestMap.items.properties.key.$ref": "#/definitions/TableName",
	"definitions.BatchGetRequestMap.items.properties.value.$ref": "#/definitions/KeysAndAttributes",
	"definitions.BatchGetRequestMap.items.type": "object",
	"definitions.BatchGetRequestMap.maxItems": 100,
	"definitions.BatchGetRequestMap.minItems": 1,
	"definitions.BatchGetRequestMap.type": "array",
	"definitions.BatchGetResponseMap.items.properties.key.$ref": "#/definitions/TableName",
	"definitions.BatchGetResponseMap.items.properties.value.$ref": "#/definitions/ItemList",
	"definitions.BatchGetResponseMap.items.type": "object",
	"definitions.BatchGetResponseMap.type": "array",
	"definitions.BatchWriteItemInput.description": "Represents the input of a \u003ccode\u003eBatchWriteItem\u003c/code\u003e operation.",
	"definitions.BatchWriteItemInput.example.RequestItems.Music.length": 3,
	"definitions.BatchWriteItemInput.example.RequestItems.Music[0].PutRequest.Item.AlbumTitle.S": "Somewhat Famous",
	"definitions.BatchWriteItemInput.example.RequestItems.Music[0].PutRequest.Item.Artist.S": "No One You Know",
	"definitions.BatchWriteItemInput.example.RequestItems.Music[0].PutRequest.Item.SongTitle.S": "Call Me Today",
	"definitions.BatchWriteItemInput.example.RequestItems.Music[1].PutRequest.Item.AlbumTitle.S": "Songs About Life",
	"definitions.BatchWriteItemInput.example.RequestItems.Music[1].PutRequest.Item.Artist.S": "Acme Band",
	"definitions.BatchWriteItemInput.example.RequestItems.Music[1].PutRequest.Item.SongTitle.S": "Happy Day",
	"definitions.BatchWriteItemInput.example.RequestItems.Music[2].PutRequest.Item.AlbumTitle.S": "Blue Sky Blues",
	"definitions.BatchWriteItemInput.example.RequestItems.Music[2].PutRequest.Item.Artist.S": "No One You Know",
	"definitions.BatchWriteItemInput.example.RequestItems.Music[2].PutRequest.Item.SongTitle.S": "Scared of My Shadow",
	"definitions.BatchWriteItemInput.properties.RequestItems.$ref": "#/definitions/BatchWriteItemRequestMap",
	"definitions.BatchWriteItemInput.properties.RequestItems.description": "\u003cp\u003eA map of one or more table names and, for each table, a list of operations to be performed (\u003ccode\u003eDeleteRequest\u003c/code\u003e or \u003ccode\u003ePutRequest\u003c/code\u003e). Each element in the map consists of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eDeleteRequest\u003c/code\u003e - Perform a \u003ccode\u003eDeleteItem\u003c/code\u003e operation on the specified item. The item to be deleted is identified by a \u003ccode\u003eKey\u003c/code\u003e subelement:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eKey\u003c/code\u003e - A map of primary key attribute values that uniquely identify the item. Each entry in this map consists of an attribute name and an attribute value. For each primary key, you must provide \u003ci\u003eall\u003c/i\u003e of the key attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for \u003ci\u003eboth\u003c/i\u003e the partition key and the sort key.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003ePutRequest\u003c/code\u003e - Perform a \u003ccode\u003ePutItem\u003c/code\u003e operation on the specified item. The item to be put is identified by an \u003ccode\u003eItem\u003c/code\u003e subelement:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eItem\u003c/code\u003e - A map of attributes and their values. Each entry in this map consists of an attribute name and an attribute value. Attribute values must not be null; string and binary type attributes must have lengths greater than zero; and set type attributes must not be empty. Requests that contain empty values will be rejected with a \u003ccode\u003eValidationException\u003c/code\u003e exception.\u003c/p\u003e \u003cp\u003eIf you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e",
	"definitions.BatchWriteItemInput.properties.ReturnConsumedCapacity.$ref": "#/definitions/ReturnConsumedCapacity",
	"definitions.BatchWriteItemInput.properties.ReturnItemCollectionMetrics.$ref": "#/definitions/ReturnItemCollectionMetrics",
	"definitions.BatchWriteItemInput.properties.ReturnItemCollectionMetrics.description": "Determines whether item collection metrics are returned. If set to \u003ccode\u003eSIZE\u003c/code\u003e, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to \u003ccode\u003eNONE\u003c/code\u003e (the default), no statistics are returned.",
	"definitions.BatchWriteItemInput.required.length": 1,
	"definitions.BatchWriteItemInput.required[0]": "RequestItems",
	"definitions.BatchWriteItemInput.type": "object",
	"definitions.BatchWriteItemOutput.description": "Represents the output of a \u003ccode\u003eBatchWriteItem\u003c/code\u003e operation.",
	"definitions.BatchWriteItemOutput.properties.ConsumedCapacity.$ref": "#/definitions/ConsumedCapacityMultiple",
	"definitions.BatchWriteItemOutput.properties.ConsumedCapacity.description": "\u003cp\u003eThe capacity units consumed by the entire \u003ccode\u003eBatchWriteItem\u003c/code\u003e operation.\u003c/p\u003e \u003cp\u003eEach element consists of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eTableName\u003c/code\u003e - The table that consumed the provisioned throughput.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eCapacityUnits\u003c/code\u003e - The total number of capacity units consumed.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
	"definitions.BatchWriteItemOutput.properties.ItemCollectionMetrics.$ref": "#/definitions/ItemCollectionMetricsPerTable",
	"definitions.BatchWriteItemOutput.properties.ItemCollectionMetrics.description": "\u003cp\u003eA list of tables that were processed by \u003ccode\u003eBatchWriteItem\u003c/code\u003e and, for each table, information about any item collections that were affected by individual \u003ccode\u003eDeleteItem\u003c/code\u003e or \u003ccode\u003ePutItem\u003c/code\u003e operations.\u003c/p\u003e \u003cp\u003eEach entry consists of the following subelements:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eItemCollectionKey\u003c/code\u003e - The partition key value of the item collection. This is the same as the partition key value of the item.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eSizeEstimateRange\u003c/code\u003e - An estimate of item collection size, expressed in GB. This is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on the table. Use this estimate to measure whether a local secondary index is approaching its size limit.\u003c/p\u003e \u003cp\u003eThe estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
	"definitions.BatchWriteItemOutput.properties.UnprocessedItems.$ref": "#/definitions/BatchWriteItemRequestMap",
	"definitions.BatchWriteItemOutput.properties.UnprocessedItems.description": "\u003cp\u003eA map of tables and requests against those tables that were not processed. The \u003ccode\u003eUnprocessedItems\u003c/code\u003e value is in the same form as \u003ccode\u003eRequestItems\u003c/code\u003e, so you can provide this value directly to a subsequent \u003ccode\u003eBatchGetItem\u003c/code\u003e operation. For more information, see \u003ccode\u003eRequestItems\u003c/code\u003e in the Request Parameters section.\u003c/p\u003e \u003cp\u003eEach \u003ccode\u003eUnprocessedItems\u003c/code\u003e entry consists of a table name and, for that table, a list of operations to perform (\u003ccode\u003eDeleteRequest\u003c/code\u003e or \u003ccode\u003ePutRequest\u003c/code\u003e).\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eDeleteRequest\u003c/code\u003e - Perform a \u003ccode\u003eDeleteItem\u003c/code\u003e operation on the specified item. The item to be deleted is identified by a \u003ccode\u003eKey\u003c/code\u003e subelement:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eKey\u003c/code\u003e - A map of primary key attribute values that uniquely identify the item. Each entry in this map consists of an attribute name and an attribute value.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003ePutRequest\u003c/code\u003e - Perform a \u003ccode\u003ePutItem\u003c/code\u003e operation on the specified item. The item to be put is identified by an \u003ccode\u003eItem\u003c/code\u003e subelement:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eItem\u003c/code\u003e - A map of attributes and their values. Each entry in this map consists of an attribute name and an attribute value. Attribute values must not be null; string and binary type attributes must have lengths greater than zero; and set type attributes must not be empty. Requests that contain empty values will be rejected with a \u003ccode\u003eValidationException\u003c/code\u003e exception.\u003c/p\u003e \u003cp\u003eIf you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf there are no unprocessed items remaining, the response contains an empty \u003ccode\u003eUnprocessedItems\u003c/code\u003e map.\u003c/p\u003e",
	"definitions.BatchWriteItemOutput.type": "object",
	"definitions.BatchWriteItemRequestMap.items.properties.key.$ref": "#/definitions/TableName",
	"definitions.BatchWriteItemRequestMap.items.properties.value.$ref": "#/definitions/WriteRequests",
	"definitions.BatchWriteItemRequestMap.items.type": "object",
	"definitions.BatchWriteItemRequestMap.maxItems": 25,
	"definitions.BatchWriteItemRequestMap.minItems": 1,
	"definitions.BatchWriteItemRequestMap.type": "array",
	"definitions.BinaryAttributeValue.type": "string",
	"definitions.BinarySetAttributeValue.items.$ref": "#/definitions/BinaryAttributeValue",
	"definitions.BinarySetAttributeValue.type": "array",
	"definitions.BooleanAttributeValue.type": "boolean",
	"definitions.BooleanObject.type": "boolean",
	"definitions.Capacity.description": "Represents the amount of provisioned throughput capacity consumed on a table or an index.",
	"definitions.Capacity.properties.CapacityUnits.$ref": "#/definitions/ConsumedCapacityUnits",
	"definitions.Capacity.properties.CapacityUnits.description": "The total number of capacity units consumed on a table or an index.",
	"definitions.Capacity.type": "object",
	"definitions.ComparisonOperator.enum.length": 13,
	"definitions.ComparisonOperator.enum[0]": "EQ",
	"definitions.ComparisonOperator.enum[10]": "CONTAINS",
	"definitions.ComparisonOperator.enum[11]": "NOT_CONTAINS",
	"definitions.ComparisonOperator.enum[12]": "BEGINS_WITH",
	"definitions.ComparisonOperator.enum[1]": "NE",
	"definitions.ComparisonOperator.enum[2]": "IN",
	"definitions.ComparisonOperator.enum[3]": "LE",
	"definitions.ComparisonOperator.enum[4]": "LT",
	"definitions.ComparisonOperator.enum[5]": "GE",
	"definitions.ComparisonOperator.enum[6]": "GT",
	"definitions.ComparisonOperator.enum[7]": "BETWEEN",
	"definitions.ComparisonOperator.enum[8]": "NOT_NULL",
	"definitions.ComparisonOperator.enum[9]": "NULL",
	"definitions.ComparisonOperator.type": "string",
	"definitions.Condition.description": "\u003cp\u003eRepresents the selection criteria for a \u003ccode\u003eQuery\u003c/code\u003e or \u003ccode\u003eScan\u003c/code\u003e operation:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eFor a \u003ccode\u003eQuery\u003c/code\u003e operation, \u003ccode\u003eCondition\u003c/code\u003e is used for specifying the \u003ccode\u003eKeyConditions\u003c/code\u003e to use when querying a table or an index. For \u003ccode\u003eKeyConditions\u003c/code\u003e, only the following comparison operators are supported:\u003c/p\u003e \u003cp\u003e \u003ccode\u003eEQ | LE | LT | GE | GT | BEGINS_WITH | BETWEEN\u003c/code\u003e \u003c/p\u003e \u003cp\u003e \u003ccode\u003eCondition\u003c/code\u003e is also used in a \u003ccode\u003eQueryFilter\u003c/code\u003e, which evaluates the query results and returns only the desired values.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eFor a \u003ccode\u003eScan\u003c/code\u003e operation, \u003ccode\u003eCondition\u003c/code\u003e is used in a \u003ccode\u003eScanFilter\u003c/code\u003e, which evaluates the scan results and returns only the desired values.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
	"definitions.Condition.properties.AttributeValueList.$ref": "#/definitions/AttributeValueList",
	"definitions.Condition.properties.AttributeValueList.description": "\u003cp\u003eOne or more values to evaluate against the supplied attribute. The number of values in the list depends on the \u003ccode\u003eComparisonOperator\u003c/code\u003e being used.\u003c/p\u003e \u003cp\u003eFor type Number, value comparisons are numeric.\u003c/p\u003e \u003cp\u003eString value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, \u003ccode\u003ea\u003c/code\u003e is greater than \u003ccode\u003eA\u003c/code\u003e, and \u003ccode\u003ea\u003c/code\u003e is greater than \u003ccode\u003eB\u003c/code\u003e. For a list of code values, see \u003ca href=\"http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\"\u003ehttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eFor Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values.\u003c/p\u003e",
	"definitions.Condition.properties.ComparisonOperator.$ref": "#/definitions/ComparisonOperator",
	"definitions.Condition.properties.ComparisonOperator.description": "\u003cp\u003eA comparator for evaluating attributes. For example, equals, greater than, less than, etc.\u003c/p\u003e \u003cp\u003eThe following comparison operators are available:\u003c/p\u003e \u003cp\u003e \u003ccode\u003eEQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN\u003c/code\u003e \u003c/p\u003e \u003cp\u003eThe following are descriptions of each comparison operator.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eEQ\u003c/code\u003e : Equal. \u003ccode\u003eEQ\u003c/code\u003e is supported for all data types, including lists and maps.\u003c/p\u003e \u003cp\u003e \u003ccode\u003eAttributeValueList\u003c/code\u003e can contain only one \u003ccode\u003eAttributeValue\u003c/code\u003e element of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an \u003ccode\u003eAttributeValue\u003c/code\u003e element of a different type than the one provided in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eNE\u003c/code\u003e : Not equal. \u003ccode\u003eNE\u003c/code\u003e is supported for all data types, including lists and maps.\u003c/p\u003e \u003cp\u003e \u003ccode\u003eAttributeValueList\u003c/code\u003e can contain only one \u003ccode\u003eAttributeValue\u003c/code\u003e of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an \u003ccode\u003eAttributeValue\u003c/code\u003e of a different type than the one provided in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eLE\u003c/code\u003e : Less than or equal. \u003c/p\u003e \u003cp\u003e \u003ccode\u003eAttributeValueList\u003c/code\u003e can contain only one \u003ccode\u003eAttributeValue\u003c/code\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ccode\u003eAttributeValue\u003c/code\u003e element of a different type than the one provided in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eLT\u003c/code\u003e : Less than. \u003c/p\u003e \u003cp\u003e \u003ccode\u003eAttributeValueList\u003c/code\u003e can contain only one \u003ccode\u003eAttributeValue\u003c/code\u003e of type String, Number, or Binary (not a set type). If an item contains an \u003ccode\u003eAttributeValue\u003c/code\u003e element of a different type than the one provided in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eGE\u003c/code\u003e : Greater than or equal. \u003c/p\u003e \u003cp\u003e \u003ccode\u003eAttributeValueList\u003c/code\u003e can contain only one \u003ccode\u003eAttributeValue\u003c/code\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ccode\u003eAttributeValue\u003c/code\u003e element of a different type than the one provided in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eGT\u003c/code\u003e : Greater than. \u003c/p\u003e \u003cp\u003e \u003ccode\u003eAttributeValueList\u003c/code\u003e can contain only one \u003ccode\u003eAttributeValue\u003c/code\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ccode\u003eAttributeValue\u003c/code\u003e element of a different type than the one provided in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eNOT_NULL\u003c/code\u003e : The attribute exists. \u003ccode\u003eNOT_NULL\u003c/code\u003e is supported for all data types, including lists and maps.\u003c/p\u003e \u003cnote\u003e \u003cp\u003eThis operator tests for the existence of an attribute, not its data type. If the data type of attribute \"\u003ccode\u003ea\u003c/code\u003e\" is null, and you evaluate it using \u003ccode\u003eNOT_NULL\u003c/code\u003e, the result is a Boolean \u003ccode\u003etrue\u003c/code\u003e. This result is because the attribute \"\u003ccode\u003ea\u003c/code\u003e\" exists; its data type is not relevant to the \u003ccode\u003eNOT_NULL\u003c/code\u003e comparison operator.\u003c/p\u003e \u003c/note\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eNULL\u003c/code\u003e : The attribute does not exist. \u003ccode\u003eNULL\u003c/code\u003e is supported for all data types, including lists and maps.\u003c/p\u003e \u003cnote\u003e \u003cp\u003eThis operator tests for the nonexistence of an attribute, not its data type. If the data type of attribute \"\u003ccode\u003ea\u003c/code\u003e\" is null, and you evaluate it using \u003ccode\u003eNULL\u003c/code\u003e, the result is a Boolean \u003ccode\u003efalse\u003c/code\u003e. This is because the attribute \"\u003ccode\u003ea\u003c/code\u003e\" exists; its data type is not relevant to the \u003ccode\u003eNULL\u003c/code\u003e comparison operator.\u003c/p\u003e \u003c/note\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eCONTAINS\u003c/code\u003e : Checks for a subsequence, or value in a set.\u003c/p\u003e \u003cp\u003e \u003ccode\u003eAttributeValueList\u003c/code\u003e can contain only one \u003ccode\u003eAttributeValue\u003c/code\u003e element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is of type String, then the operator checks for a substring match. If the target attribute of the comparison is of type Binary, then the operator looks for a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\"\u003ccode\u003eSS\u003c/code\u003e\", \"\u003ccode\u003eNS\u003c/code\u003e\", or \"\u003ccode\u003eBS\u003c/code\u003e\"), then the operator evaluates to true if it finds an exact match with any member of the set.\u003c/p\u003e \u003cp\u003eCONTAINS is supported for lists: When evaluating \"\u003ccode\u003ea CONTAINS b\u003c/code\u003e\", \"\u003ccode\u003ea\u003c/code\u003e\" can be a list; however, \"\u003ccode\u003eb\u003c/code\u003e\" cannot be a set, a map, or a list.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eNOT_CONTAINS\u003c/code\u003e : Checks for absence of a subsequence, or absence of a value in a set.\u003c/p\u003e \u003cp\u003e \u003ccode\u003eAttributeValueList\u003c/code\u003e can contain only one \u003ccode\u003eAttributeValue\u003c/code\u003e element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is a String, then the operator checks for the absence of a substring match. If the target attribute of the comparison is Binary, then the operator checks for the absence of a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\"\u003ccode\u003eSS\u003c/code\u003e\", \"\u003ccode\u003eNS\u003c/code\u003e\", or \"\u003ccode\u003eBS\u003c/code\u003e\"), then the operator evaluates to true if it \u003ci\u003edoes not\u003c/i\u003e find an exact match with any member of the set.\u003c/p\u003e \u003cp\u003eNOT_CONTAINS is supported for lists: When evaluating \"\u003ccode\u003ea NOT CONTAINS b\u003c/code\u003e\", \"\u003ccode\u003ea\u003c/code\u003e\" can be a list; however, \"\u003ccode\u003eb\u003c/code\u003e\" cannot be a set, a map, or a list.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eBEGINS_WITH\u003c/code\u003e : Checks for a prefix. \u003c/p\u003e \u003cp\u003e \u003ccode\u003eAttributeValueList\u003c/code\u003e can contain only one \u003ccode\u003eAttributeValue\u003c/code\u003e of type String or Binary (not a Number or a set type). The target attribute of the comparison must be of type String or Binary (not a Number or a set type).\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eIN\u003c/code\u003e : Checks for matching elements in a list.\u003c/p\u003e \u003cp\u003e \u003ccode\u003eAttributeValueList\u003c/code\u003e can contain one or more \u003ccode\u003eAttributeValue\u003c/code\u003e elements of type String, Number, or Binary. These attributes are compared against an existing attribute of an item. If any elements of the input are equal to the item attribute, the expression evaluates to true.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eBETWEEN\u003c/code\u003e : Greater than or equal to the first value, and less than or equal to the second value. \u003c/p\u003e \u003cp\u003e \u003ccode\u003eAttributeValueList\u003c/code\u003e must contain two \u003ccode\u003eAttributeValue\u003c/code\u003e elements of the same type, either String, Number, or Binary (not a set type). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an \u003ccode\u003eAttributeValue\u003c/code\u003e element of a different type than the one provided in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eFor usage examples of \u003ccode\u003eAttributeValueList\u003c/code\u003e and \u003ccode\u003eComparisonOperator\u003c/code\u003e, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html\"\u003eLegacy Conditional Parameters\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"definitions.Condition.required.length": 1,
	"definitions.Condition.required[0]": "ComparisonOperator",
	"definitions.Condition.type": "object",
	"definitions.ConditionExpression.type": "string",
	"definitions.ConditionalCheckFailedException.description": "A condition specified in the operation could not be evaluated.",
	"definitions.ConditionalCheckFailedException.properties.message.$ref": "#/definitions/ErrorMessage",
	"definitions.ConditionalCheckFailedException.properties.message.description": "The conditional request failed.",
	"definitions.ConditionalCheckFailedException.type": "object",
	"definitions.ConditionalOperator.enum.length": 2,
	"definitions.ConditionalOperator.enum[0]": "AND",
	"definitions.ConditionalOperator.enum[1]": "OR",
	"definitions.ConditionalOperator.type": "string",
	"definitions.ConsistentRead.type": "boolean",
	"definitions.ConsumedCapacity.description": "The capacity units consumed by an operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. \u003ccode\u003eConsumedCapacity\u003c/code\u003e is only returned if the request asked for it. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html\"\u003eProvisioned Throughput\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.",
	"definitions.ConsumedCapacity.properties.CapacityUnits.$ref": "#/definitions/ConsumedCapacityUnits",
	"definitions.ConsumedCapacity.properties.CapacityUnits.description": "The total number of capacity units consumed by the operation.",
	"definitions.ConsumedCapacity.properties.GlobalSecondaryIndexes.$ref": "#/definitions/SecondaryIndexesCapacityMap",
	"definitions.ConsumedCapacity.properties.GlobalSecondaryIndexes.description": "The amount of throughput consumed on each global index affected by the operation.",
	"definitions.ConsumedCapacity.properties.LocalSecondaryIndexes.$ref": "#/definitions/SecondaryIndexesCapacityMap",
	"definitions.ConsumedCapacity.properties.LocalSecondaryIndexes.description": "The amount of throughput consumed on each local index affected by the operation.",
	"definitions.ConsumedCapacity.properties.Table.$ref": "#/definitions/Capacity",
	"definitions.ConsumedCapacity.properties.Table.description": "The amount of throughput consumed on the table affected by the operation.",
	"definitions.ConsumedCapacity.properties.TableName.$ref": "#/definitions/TableName",
	"definitions.ConsumedCapacity.properties.TableName.description": "The name of the table that was affected by the operation.",
	"definitions.ConsumedCapacity.type": "object",
	"definitions.ConsumedCapacityMultiple.items.$ref": "#/definitions/ConsumedCapacity",
	"definitions.ConsumedCapacityMultiple.type": "array",
	"definitions.ConsumedCapacityUnits.format": "double",
	"definitions.ConsumedCapacityUnits.type": "number",
	"definitions.CreateGlobalSecondaryIndexAction.description": "Represents a new global secondary index to be added to an existing table.",
	"definitions.CreateGlobalSecondaryIndexAction.properties.IndexName.$ref": "#/definitions/IndexName",
	"definitions.CreateGlobalSecondaryIndexAction.properties.IndexName.description": "The name of the global secondary index to be created.",
	"definitions.CreateGlobalSecondaryIndexAction.properties.KeySchema.$ref": "#/definitions/KeySchema",
	"definitions.CreateGlobalSecondaryIndexAction.properties.KeySchema.description": "The key schema for the global secondary index.",
	"definitions.CreateGlobalSecondaryIndexAction.properties.Projection.$ref": "#/definitions/Projection",
	"definitions.CreateGlobalSecondaryIndexAction.properties.Projection.description": "Represents attributes that are copied (projected) from the table into an index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.",
	"definitions.CreateGlobalSecondaryIndexAction.properties.ProvisionedThroughput.$ref": "#/definitions/ProvisionedThroughput",
	"definitions.CreateGlobalSecondaryIndexAction.properties.ProvisionedThroughput.description": "\u003cp\u003eRepresents the provisioned throughput settings for the specified global secondary index.\u003c/p\u003e \u003cp\u003eFor current minimum and maximum provisioned throughput values, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\"\u003eLimits\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"definitions.CreateGlobalSecondaryIndexAction.required.length": 4,
	"definitions.CreateGlobalSecondaryIndexAction.required[0]": "IndexName",
	"definitions.CreateGlobalSecondaryIndexAction.required[1]": "KeySchema",
	"definitions.CreateGlobalSecondaryIndexAction.required[2]": "Projection",
	"definitions.CreateGlobalSecondaryIndexAction.required[3]": "ProvisionedThroughput",
	"definitions.CreateGlobalSecondaryIndexAction.type": "object",
	"definitions.CreateTableInput.description": "Represents the input of a \u003ccode\u003eCreateTable\u003c/code\u003e operation.",
	"definitions.CreateTableInput.example.AttributeDefinitions.length": 2,
	"definitions.CreateTableInput.example.AttributeDefinitions[0].AttributeName": "Artist",
	"definitions.CreateTableInput.example.AttributeDefinitions[0].AttributeType": "S",
	"definitions.CreateTableInput.example.AttributeDefinitions[1].AttributeName": "SongTitle",
	"definitions.CreateTableInput.example.AttributeDefinitions[1].AttributeType": "S",
	"definitions.CreateTableInput.example.KeySchema.length": 2,
	"definitions.CreateTableInput.example.KeySchema[0].AttributeName": "Artist",
	"definitions.CreateTableInput.example.KeySchema[0].KeyType": "HASH",
	"definitions.CreateTableInput.example.KeySchema[1].AttributeName": "SongTitle",
	"definitions.CreateTableInput.example.KeySchema[1].KeyType": "RANGE",
	"definitions.CreateTableInput.example.ProvisionedThroughput.ReadCapacityUnits": 5,
	"definitions.CreateTableInput.example.ProvisionedThroughput.WriteCapacityUnits": 5,
	"definitions.CreateTableInput.example.TableName": "Music",
	"definitions.CreateTableInput.properties.AttributeDefinitions.$ref": "#/definitions/AttributeDefinitions",
	"definitions.CreateTableInput.properties.AttributeDefinitions.description": "An array of attributes that describe the key schema for the table and indexes.",
	"definitions.CreateTableInput.properties.GlobalSecondaryIndexes.$ref": "#/definitions/GlobalSecondaryIndexList",
	"definitions.CreateTableInput.properties.GlobalSecondaryIndexes.description": "\u003cp\u003eOne or more global secondary indexes (the maximum is five) to be created on the table. Each global secondary index in the array includes the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eIndexName\u003c/code\u003e - The name of the global secondary index. Must be unique only for this table.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eKeySchema\u003c/code\u003e - Specifies the key schema for the global secondary index.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eProjection\u003c/code\u003e - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eProjectionType\u003c/code\u003e - One of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eKEYS_ONLY\u003c/code\u003e - Only the index and primary keys are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eINCLUDE\u003c/code\u003e - Only the specified table attributes are projected into the index. The list of projected attributes are in \u003ccode\u003eNonKeyAttributes\u003c/code\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eALL\u003c/code\u003e - All of the table attributes are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eNonKeyAttributes\u003c/code\u003e - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in \u003ccode\u003eNonKeyAttributes\u003c/code\u003e, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eProvisionedThroughput\u003c/code\u003e - The provisioned throughput settings for the global secondary index, consisting of read and write capacity units.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
	"definitions.CreateTableInput.properties.KeySchema.$ref": "#/definitions/KeySchema",
	"definitions.CreateTableInput.properties.KeySchema.description": "\u003cp\u003eSpecifies the attributes that make up the primary key for a table or an index. The attributes in \u003ccode\u003eKeySchema\u003c/code\u003e must also be defined in the \u003ccode\u003eAttributeDefinitions\u003c/code\u003e array. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html\"\u003eData Model\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eEach \u003ccode\u003eKeySchemaElement\u003c/code\u003e in the array is composed of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eAttributeName\u003c/code\u003e - The name of this key attribute.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eKeyType\u003c/code\u003e - The role that the key attribute will assume:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eHASH\u003c/code\u003e - partition key\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eRANGE\u003c/code\u003e - sort key\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e \u003cnote\u003e \u003cp\u003eThe partition key of an item is also known as its \u003ci\u003ehash attribute\u003c/i\u003e. The term \"hash attribute\" derives from DynamoDB' usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\u003c/p\u003e \u003cp\u003eThe sort key of an item is also known as its \u003ci\u003erange attribute\u003c/i\u003e. The term \"range attribute\" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\u003c/p\u003e \u003c/note\u003e \u003cp\u003eFor a simple primary key (partition key), you must provide exactly one element with a \u003ccode\u003eKeyType\u003c/code\u003e of \u003ccode\u003eHASH\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eFor a composite primary key (partition key and sort key), you must provide exactly two elements, in this order: The first element must have a \u003ccode\u003eKeyType\u003c/code\u003e of \u003ccode\u003eHASH\u003c/code\u003e, and the second element must have a \u003ccode\u003eKeyType\u003c/code\u003e of \u003ccode\u003eRANGE\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eFor more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#WorkingWithTables.primary.key\"\u003eSpecifying the Primary Key\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"definitions.CreateTableInput.properties.LocalSecondaryIndexes.$ref": "#/definitions/LocalSecondaryIndexList",
	"definitions.CreateTableInput.properties.LocalSecondaryIndexes.description": "\u003cp\u003eOne or more local secondary indexes (the maximum is five) to be created on the table. Each index is scoped to a given partition key value. There is a 10 GB size limit per partition key value; otherwise, the size of a local secondary index is unconstrained.\u003c/p\u003e \u003cp\u003eEach local secondary index in the array includes the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eIndexName\u003c/code\u003e - The name of the local secondary index. Must be unique only for this table.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eKeySchema\u003c/code\u003e - Specifies the key schema for the local secondary index. The key schema must begin with the same partition key as the table.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eProjection\u003c/code\u003e - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eProjectionType\u003c/code\u003e - One of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eKEYS_ONLY\u003c/code\u003e - Only the index and primary keys are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eINCLUDE\u003c/code\u003e - Only the specified table attributes are projected into the index. The list of projected attributes are in \u003ccode\u003eNonKeyAttributes\u003c/code\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eALL\u003c/code\u003e - All of the table attributes are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eNonKeyAttributes\u003c/code\u003e - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in \u003ccode\u003eNonKeyAttributes\u003c/code\u003e, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e",
	"definitions.CreateTableInput.properties.ProvisionedThroughput.$ref": "#/definitions/ProvisionedThroughput",
	"definitions.CreateTableInput.properties.ProvisionedThroughput.description": "\u003cp\u003eRepresents the provisioned throughput settings for a specified table or index. The settings can be modified using the \u003ccode\u003eUpdateTable\u003c/code\u003e operation.\u003c/p\u003e \u003cp\u003eFor current minimum and maximum provisioned throughput values, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\"\u003eLimits\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"definitions.CreateTableInput.properties.StreamSpecification.$ref": "#/definitions/StreamSpecification",
	"definitions.CreateTableInput.properties.StreamSpecification.description": "\u003cp\u003eThe settings for DynamoDB Streams on the table. These settings consist of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eStreamEnabled\u003c/code\u003e - Indicates whether Streams is to be enabled (true) or disabled (false).\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eStreamViewType\u003c/code\u003e - When an item in the table is modified, \u003ccode\u003eStreamViewType\u003c/code\u003e determines what information is written to the table's stream. Valid values for \u003ccode\u003eStreamViewType\u003c/code\u003e are:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eKEYS_ONLY\u003c/code\u003e - Only the key attributes of the modified item are written to the stream.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eNEW_IMAGE\u003c/code\u003e - The entire item, as it appears after it was modified, is written to the stream.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eOLD_IMAGE\u003c/code\u003e - The entire item, as it appeared before it was modified, is written to the stream.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eNEW_AND_OLD_IMAGES\u003c/code\u003e - Both the new and the old item images of the item are written to the stream.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e",
	"definitions.CreateTableInput.properties.TableName.$ref": "#/definitions/TableName",
	"definitions.CreateTableInput.properties.TableName.description": "The name of the table to create.",
	"definitions.CreateTableInput.required.length": 4,
	"definitions.CreateTableInput.required[0]": "AttributeDefinitions",
	"definitions.CreateTableInput.required[1]": "TableName",
	"definitions.CreateTableInput.required[2]": "KeySchema",
	"definitions.CreateTableInput.required[3]": "ProvisionedThroughput",
	"definitions.CreateTableInput.type": "object",
	"definitions.CreateTableOutput.description": "Represents the output of a \u003ccode\u003eCreateTable\u003c/code\u003e operation.",
	"definitions.CreateTableOutput.example.TableDescription.AttributeDefinitions.length": 2,
	"definitions.CreateTableOutput.example.TableDescription.AttributeDefinitions[0].AttributeName": "Artist",
	"definitions.CreateTableOutput.example.TableDescription.AttributeDefinitions[0].AttributeType": "S",
	"definitions.CreateTableOutput.example.TableDescription.AttributeDefinitions[1].AttributeName": "SongTitle",
	"definitions.CreateTableOutput.example.TableDescription.AttributeDefinitions[1].AttributeType": "S",
	"definitions.CreateTableOutput.example.TableDescription.CreationDateTime": "1421866952.062",
	"definitions.CreateTableOutput.example.TableDescription.ItemCount": 0,
	"definitions.CreateTableOutput.example.TableDescription.KeySchema.length": 2,
	"definitions.CreateTableOutput.example.TableDescription.KeySchema[0].AttributeName": "Artist",
	"definitions.CreateTableOutput.example.TableDescription.KeySchema[0].KeyType": "HASH",
	"definitions.CreateTableOutput.example.TableDescription.KeySchema[1].AttributeName": "SongTitle",
	"definitions.CreateTableOutput.example.TableDescription.KeySchema[1].KeyType": "RANGE",
	"definitions.CreateTableOutput.example.TableDescription.ProvisionedThroughput.ReadCapacityUnits": 5,
	"definitions.CreateTableOutput.example.TableDescription.ProvisionedThroughput.WriteCapacityUnits": 5,
	"definitions.CreateTableOutput.example.TableDescription.TableName": "Music",
	"definitions.CreateTableOutput.example.TableDescription.TableSizeBytes": 0,
	"definitions.CreateTableOutput.example.TableDescription.TableStatus": "CREATING",
	"definitions.CreateTableOutput.properties.TableDescription.$ref": "#/definitions/TableDescription",
	"definitions.CreateTableOutput.properties.TableDescription.description": "Represents the properties of the table.",
	"definitions.CreateTableOutput.type": "object",
	"definitions.Date.format": "date-time",
	"definitions.Date.type": "string",
	"definitions.DeleteGlobalSecondaryIndexAction.description": "Represents a global secondary index to be deleted from an existing table.",
	"definitions.DeleteGlobalSecondaryIndexAction.properties.IndexName.$ref": "#/definitions/IndexName",
	"definitions.DeleteGlobalSecondaryIndexAction.properties.IndexName.description": "The name of the global secondary index to be deleted.",
	"definitions.DeleteGlobalSecondaryIndexAction.required.length": 1,
	"definitions.DeleteGlobalSecondaryIndexAction.required[0]": "IndexName",
	"definitions.DeleteGlobalSecondaryIndexAction.type": "object",
	"definitions.DeleteItemInput.description": "Represents the input of a \u003ccode\u003eDeleteItem\u003c/code\u003e operation.",
	"definitions.DeleteItemInput.example.Key.Artist.S": "No One You Know",
	"definitions.DeleteItemInput.example.Key.SongTitle.S": "Scared of My Shadow",
	"definitions.DeleteItemInput.example.TableName": "Music",
	"definitions.DeleteItemInput.properties.ConditionExpression.$ref": "#/definitions/ConditionExpression",
	"definitions.DeleteItemInput.properties.ConditionExpression.description": "\u003cp\u003eA condition that must be satisfied in order for a conditional \u003ccode\u003eDeleteItem\u003c/code\u003e to succeed.\u003c/p\u003e \u003cp\u003eAn expression can contain any of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eFunctions: \u003ccode\u003eattribute_exists | attribute_not_exists | attribute_type | contains | begins_with | size\u003c/code\u003e \u003c/p\u003e \u003cp\u003eThese function names are case-sensitive.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eComparison operators: \u003ccode\u003e= | \u0026lt;\u0026gt; | \u0026lt; | \u0026gt; | \u0026lt;= | \u0026gt;= | BETWEEN | IN \u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e Logical operators: \u003ccode\u003eAND | OR | NOT\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eFor more information on condition expressions, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html\"\u003eSpecifying Conditions\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"definitions.DeleteItemInput.properties.ConditionalOperator.$ref": "#/definitions/ConditionalOperator",
	"definitions.DeleteItemInput.properties.ConditionalOperator.description": "This is a legacy parameter. Use \u003ccode\u003eConditionExpression\u003c/code\u003e instead. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html\"\u003eConditionalOperator\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.",
	"definitions.DeleteItemInput.properties.Expected.$ref": "#/definitions/ExpectedAttributeMap",
	"definitions.DeleteItemInput.properties.Expected.description": "This is a legacy parameter. Use \u003ccode\u003eConditionExpression\u003c/code\u003e instead. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.Expected.html\"\u003eExpected\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.",
	"definitions.DeleteItemInput.properties.ExpressionAttributeNames.$ref": "#/definitions/ExpressionAttributeNameMap",
	"definitions.DeleteItemInput.properties.ExpressionAttributeNames.description": "\u003cp\u003eOne or more substitution tokens for attribute names in an expression. The following are some use cases for using \u003ccode\u003eExpressionAttributeNames\u003c/code\u003e:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eTo access an attribute whose name conflicts with a DynamoDB reserved word.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo create a placeholder for repeating occurrences of an attribute name in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo prevent special characters in an attribute name from being misinterpreted in an expression.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eUse the \u003cb\u003e#\u003c/b\u003e character in an expression to dereference an attribute name. For example, consider the following attribute name:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003ePercentile\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eThe name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html\"\u003eReserved Words\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e). To work around this, you could specify the following for \u003ccode\u003eExpressionAttributeNames\u003c/code\u003e:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003e{\"#P\":\"Percentile\"}\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eYou could then use this substitution in an expression, as in this example:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003e#P = :val\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cnote\u003e \u003cp\u003eTokens that begin with the \u003cb\u003e:\u003c/b\u003e character are \u003ci\u003eexpression attribute values\u003c/i\u003e, which are placeholders for the actual value at runtime.\u003c/p\u003e \u003c/note\u003e \u003cp\u003eFor more information on expression attribute names, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\u003eAccessing Item Attributes\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"definitions.DeleteItemInput.properties.ExpressionAttributeValues.$ref": "#/definitions/ExpressionAttributeValueMap",
	"definitions.DeleteItemInput.properties.ExpressionAttributeValues.description": "\u003cp\u003eOne or more values that can be substituted in an expression.\u003c/p\u003e \u003cp\u003eUse the \u003cb\u003e:\u003c/b\u003e (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the \u003ci\u003eProductStatus\u003c/i\u003e attribute was one of the following: \u003c/p\u003e \u003cp\u003e \u003ccode\u003eAvailable | Backordered | Discontinued\u003c/code\u003e \u003c/p\u003e \u003cp\u003eYou would first need to specify \u003ccode\u003eExpressionAttributeValues\u003c/code\u003e as follows:\u003c/p\u003e \u003cp\u003e \u003ccode\u003e{ \":avail\":{\"S\":\"Available\"}, \":back\":{\"S\":\"Backordered\"}, \":disc\":{\"S\":\"Discontinued\"} }\u003c/code\u003e \u003c/p\u003e \u003cp\u003eYou could then use these values in an expression, such as this:\u003c/p\u003e \u003cp\u003e \u003ccode\u003eProductStatus IN (:avail, :back, :disc)\u003c/code\u003e \u003c/p\u003e \u003cp\u003eFor more information on expression attribute values, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html\"\u003eSpecifying Conditions\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"definitions.DeleteItemInput.properties.Key.$ref": "#/definitions/Key",
	"definitions.DeleteItemInput.properties.Key.description": "\u003cp\u003eA map of attribute names to \u003ccode\u003eAttributeValue\u003c/code\u003e objects, representing the primary key of the item to delete.\u003c/p\u003e \u003cp\u003eFor the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.\u003c/p\u003e",
	"definitions.DeleteItemInput.properties.ReturnConsumedCapacity.$ref": "#/definitions/ReturnConsumedCapacity",
	"definitions.DeleteItemInput.properties.ReturnItemCollectionMetrics.$ref": "#/definitions/ReturnItemCollectionMetrics",
	"definitions.DeleteItemInput.properties.ReturnItemCollectionMetrics.description": "Determines whether item collection metrics are returned. If set to \u003ccode\u003eSIZE\u003c/code\u003e, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to \u003ccode\u003eNONE\u003c/code\u003e (the default), no statistics are returned.",
	"definitions.DeleteItemInput.properties.ReturnValues.$ref": "#/definitions/ReturnValue",
	"definitions.DeleteItemInput.properties.ReturnValues.description": "\u003cp\u003eUse \u003ccode\u003eReturnValues\u003c/code\u003e if you want to get the item attributes as they appeared before they were deleted. For \u003ccode\u003eDeleteItem\u003c/code\u003e, the valid values are:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eNONE\u003c/code\u003e - If \u003ccode\u003eReturnValues\u003c/code\u003e is not specified, or if its value is \u003ccode\u003eNONE\u003c/code\u003e, then nothing is returned. (This setting is the default for \u003ccode\u003eReturnValues\u003c/code\u003e.)\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eALL_OLD\u003c/code\u003e - The content of the old item is returned.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cnote\u003e \u003cp\u003eThe \u003ccode\u003eReturnValues\u003c/code\u003e parameter is used by several DynamoDB operations; however, \u003ccode\u003eDeleteItem\u003c/code\u003e does not recognize any values other than \u003ccode\u003eNONE\u003c/code\u003e or \u003ccode\u003eALL_OLD\u003c/code\u003e.\u003c/p\u003e \u003c/note\u003e",
	"definitions.DeleteItemInput.properties.TableName.$ref": "#/definitions/TableName",
	"definitions.DeleteItemInput.properties.TableName.description": "The name of the table from which to delete the item.",
	"definitions.DeleteItemInput.required.length": 2,
	"definitions.DeleteItemInput.required[0]": "TableName",
	"definitions.DeleteItemInput.required[1]": "Key",
	"definitions.DeleteItemInput.type": "object",
	"definitions.DeleteItemOutput.description": "Represents the output of a \u003ccode\u003eDeleteItem\u003c/code\u003e operation.",
	"definitions.DeleteItemOutput.example.ConsumedCapacity.CapacityUnits": 1,
	"definitions.DeleteItemOutput.example.ConsumedCapacity.TableName": "Music",
	"definitions.DeleteItemOutput.properties.Attributes.$ref": "#/definitions/AttributeMap",
	"definitions.DeleteItemOutput.properties.Attributes.description": "A map of attribute names to \u003ccode\u003eAttributeValue\u003c/code\u003e objects, representing the item as it appeared before the \u003ccode\u003eDeleteItem\u003c/code\u003e operation. This map appears in the response only if \u003ccode\u003eReturnValues\u003c/code\u003e was specified as \u003ccode\u003eALL_OLD\u003c/code\u003e in the request.",
	"definitions.DeleteItemOutput.properties.ConsumedCapacity.$ref": "#/definitions/ConsumedCapacity",
	"definitions.DeleteItemOutput.properties.ConsumedCapacity.description": "The capacity units consumed by the \u003ccode\u003eDeleteItem\u003c/code\u003e operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. \u003ccode\u003eConsumedCapacity\u003c/code\u003e is only returned if the \u003ccode\u003eReturnConsumedCapacity\u003c/code\u003e parameter was specified. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html\"\u003eProvisioned Throughput\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.",
	"definitions.DeleteItemOutput.properties.ItemCollectionMetrics.$ref": "#/definitions/ItemCollectionMetrics",
	"definitions.DeleteItemOutput.properties.ItemCollectionMetrics.description": "\u003cp\u003eInformation about item collections, if any, that were affected by the \u003ccode\u003eDeleteItem\u003c/code\u003e operation. \u003ccode\u003eItemCollectionMetrics\u003c/code\u003e is only returned if the \u003ccode\u003eReturnItemCollectionMetrics\u003c/code\u003e parameter was specified. If the table does not have any local secondary indexes, this information is not returned in the response.\u003c/p\u003e \u003cp\u003eEach \u003ccode\u003eItemCollectionMetrics\u003c/code\u003e element consists of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eItemCollectionKey\u003c/code\u003e - The partition key value of the item collection. This is the same as the partition key value of the item itself.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eSizeEstimateRange\u003c/code\u003e - An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit.\u003c/p\u003e \u003cp\u003eThe estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
	"definitions.DeleteItemOutput.type": "object",
	"definitions.DeleteRequest.description": "Represents a request to perform a \u003ccode\u003eDeleteItem\u003c/code\u003e operation on an item.",
	"definitions.DeleteRequest.properties.Key.$ref": "#/definitions/Key",
	"definitions.DeleteRequest.properties.Key.description": "A map of attribute name to attribute values, representing the primary key of the item to delete. All of the table's primary key attributes must be specified, and their data types must match those of the table's key schema.",
	"definitions.DeleteRequest.required.length": 1,
	"definitions.DeleteRequest.required[0]": "Key",
	"definitions.DeleteRequest.type": "object",
	"definitions.DeleteTableInput.description": "Represents the input of a \u003ccode\u003eDeleteTable\u003c/code\u003e operation.",
	"definitions.DeleteTableInput.example.TableName": "Music",
	"definitions.DeleteTableInput.properties.TableName.$ref": "#/definitions/TableName",
	"definitions.DeleteTableInput.properties.TableName.description": "The name of the table to delete.",
	"definitions.DeleteTableInput.required.length": 1,
	"definitions.DeleteTableInput.required[0]": "TableName",
	"definitions.DeleteTableInput.type": "object",
	"definitions.DeleteTableOutput.description": "Represents the output of a \u003ccode\u003eDeleteTable\u003c/code\u003e operation.",
	"definitions.DeleteTableOutput.example.TableDescription.ItemCount": 0,
	"definitions.DeleteTableOutput.example.TableDescription.ProvisionedThroughput.NumberOfDecreasesToday": 1,
	"definitions.DeleteTableOutput.example.TableDescription.ProvisionedThroughput.ReadCapacityUnits": 5,
	"definitions.DeleteTableOutput.example.TableDescription.ProvisionedThroughput.WriteCapacityUnits": 5,
	"definitions.DeleteTableOutput.example.TableDescription.TableName": "Music",
	"definitions.DeleteTableOutput.example.TableDescription.TableSizeBytes": 0,
	"definitions.DeleteTableOutput.example.TableDescription.TableStatus": "DELETING",
	"definitions.DeleteTableOutput.properties.TableDescription.$ref": "#/definitions/TableDescription",
	"definitions.DeleteTableOutput.properties.TableDescription.description": "Represents the properties of a table.",
	"definitions.DeleteTableOutput.type": "object",
	"definitions.DescribeLimitsInput.description": "Represents the input of a \u003ccode\u003eDescribeLimits\u003c/code\u003e operation. Has no content.",
	"definitions.DescribeLimitsInput.type": "object",
	"definitions.DescribeLimitsOutput.description": "Represents the output of a \u003ccode\u003eDescribeLimits\u003c/code\u003e operation.",
	"definitions.DescribeLimitsOutput.example.AccountMaxReadCapacityUnits": 20000,
	"definitions.DescribeLimitsOutput.example.AccountMaxWriteCapacityUnits": 20000,
	"definitions.DescribeLimitsOutput.example.TableMaxReadCapacityUnits": 10000,
	"definitions.DescribeLimitsOutput.example.TableMaxWriteCapacityUnits": 10000,
	"definitions.DescribeLimitsOutput.properties.AccountMaxReadCapacityUnits.$ref": "#/definitions/PositiveLongObject",
	"definitions.DescribeLimitsOutput.properties.AccountMaxReadCapacityUnits.description": "The maximum total read capacity units that your account allows you to provision across all of your tables in this region.",
	"definitions.DescribeLimitsOutput.properties.AccountMaxWriteCapacityUnits.$ref": "#/definitions/PositiveLongObject",
	"definitions.DescribeLimitsOutput.properties.AccountMaxWriteCapacityUnits.description": "The maximum total write capacity units that your account allows you to provision across all of your tables in this region.",
	"definitions.DescribeLimitsOutput.properties.TableMaxReadCapacityUnits.$ref": "#/definitions/PositiveLongObject",
	"definitions.DescribeLimitsOutput.properties.TableMaxReadCapacityUnits.description": "The maximum read capacity units that your account allows you to provision for a new table that you are creating in this region, including the read capacity units provisioned for its global secondary indexes (GSIs).",
	"definitions.DescribeLimitsOutput.properties.TableMaxWriteCapacityUnits.$ref": "#/definitions/PositiveLongObject",
	"definitions.DescribeLimitsOutput.properties.TableMaxWriteCapacityUnits.description": "The maximum write capacity units that your account allows you to provision for a new table that you are creating in this region, including the write capacity units provisioned for its global secondary indexes (GSIs).",
	"definitions.DescribeLimitsOutput.type": "object",
	"definitions.DescribeTableInput.description": "Represents the input of a \u003ccode\u003eDescribeTable\u003c/code\u003e operation.",
	"definitions.DescribeTableInput.example.TableName": "Music",
	"definitions.DescribeTableInput.properties.TableName.$ref": "#/definitions/TableName",
	"definitions.DescribeTableInput.properties.TableName.description": "The name of the table to describe.",
	"definitions.DescribeTableInput.required.length": 1,
	"definitions.DescribeTableInput.required[0]": "TableName",
	"definitions.DescribeTableInput.type": "object",
	"definitions.DescribeTableOutput.description": "Represents the output of a \u003ccode\u003eDescribeTable\u003c/code\u003e operation.",
	"definitions.DescribeTableOutput.example.Table.AttributeDefinitions.length": 2,
	"definitions.DescribeTableOutput.example.Table.AttributeDefinitions[0].AttributeName": "Artist",
	"definitions.DescribeTableOutput.example.Table.AttributeDefinitions[0].AttributeType": "S",
	"definitions.DescribeTableOutput.example.Table.AttributeDefinitions[1].AttributeName": "SongTitle",
	"definitions.DescribeTableOutput.example.Table.AttributeDefinitions[1].AttributeType": "S",
	"definitions.DescribeTableOutput.example.Table.CreationDateTime": "1421866952.062",
	"definitions.DescribeTableOutput.example.Table.ItemCount": 0,
	"definitions.DescribeTableOutput.example.Table.KeySchema.length": 2,
	"definitions.DescribeTableOutput.example.Table.KeySchema[0].AttributeName": "Artist",
	"definitions.DescribeTableOutput.example.Table.KeySchema[0].KeyType": "HASH",
	"definitions.DescribeTableOutput.example.Table.KeySchema[1].AttributeName": "SongTitle",
	"definitions.DescribeTableOutput.example.Table.KeySchema[1].KeyType": "RANGE",
	"definitions.DescribeTableOutput.example.Table.ProvisionedThroughput.NumberOfDecreasesToday": 1,
	"definitions.DescribeTableOutput.example.Table.ProvisionedThroughput.ReadCapacityUnits": 5,
	"definitions.DescribeTableOutput.example.Table.ProvisionedThroughput.WriteCapacityUnits": 5,
	"definitions.DescribeTableOutput.example.Table.TableName": "Music",
	"definitions.DescribeTableOutput.example.Table.TableSizeBytes": 0,
	"definitions.DescribeTableOutput.example.Table.TableStatus": "ACTIVE",
	"definitions.DescribeTableOutput.properties.Table.$ref": "#/definitions/TableDescription",
	"definitions.DescribeTableOutput.properties.Table.description": "The properties of the table.",
	"definitions.DescribeTableOutput.type": "object",
	"definitions.DescribeTimeToLiveInput.properties.TableName.$ref": "#/definitions/TableName",
	"definitions.DescribeTimeToLiveInput.properties.TableName.description": "The name of the table to be described.",
	"definitions.DescribeTimeToLiveInput.required.length": 1,
	"definitions.DescribeTimeToLiveInput.required[0]": "TableName",
	"definitions.DescribeTimeToLiveInput.type": "object",
	"definitions.DescribeTimeToLiveOutput.properties.TimeToLiveDescription.$ref": "#/definitions/TimeToLiveDescription",
	"definitions.DescribeTimeToLiveOutput.properties.TimeToLiveDescription.description": "\u003cp/\u003e",
	"definitions.DescribeTimeToLiveOutput.type": "object",
	"definitions.ErrorMessage.type": "string",
	"definitions.ExpectedAttributeMap.items.properties.key.$ref": "#/definitions/AttributeName",
	"definitions.ExpectedAttributeMap.items.properties.value.$ref": "#/definitions/ExpectedAttributeValue",
	"definitions.ExpectedAttributeMap.items.type": "object",
	"definitions.ExpectedAttributeMap.type": "array",
	"definitions.ExpectedAttributeValue.description": "\u003cp\u003eRepresents a condition to be compared with an attribute value. This condition can be used with \u003ccode\u003eDeleteItem\u003c/code\u003e, \u003ccode\u003ePutItem\u003c/code\u003e or \u003ccode\u003eUpdateItem\u003c/code\u003e operations; if the comparison evaluates to true, the operation succeeds; if not, the operation fails. You can use \u003ccode\u003eExpectedAttributeValue\u003c/code\u003e in one of two different ways:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eUse \u003ccode\u003eAttributeValueList\u003c/code\u003e to specify one or more values to compare against an attribute. Use \u003ccode\u003eComparisonOperator\u003c/code\u003e to specify how you want to perform the comparison. If the comparison evaluates to true, then the conditional operation succeeds.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eUse \u003ccode\u003eValue\u003c/code\u003e to specify a value that DynamoDB will compare against an attribute. If the values match, then \u003ccode\u003eExpectedAttributeValue\u003c/code\u003e evaluates to true and the conditional operation succeeds. Optionally, you can also set \u003ccode\u003eExists\u003c/code\u003e to false, indicating that you \u003ci\u003edo not\u003c/i\u003e expect to find the attribute value in the table. In this case, the conditional operation succeeds only if the comparison evaluates to false.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003e \u003ccode\u003eValue\u003c/code\u003e and \u003ccode\u003eExists\u003c/code\u003e are incompatible with \u003ccode\u003eAttributeValueList\u003c/code\u003e and \u003ccode\u003eComparisonOperator\u003c/code\u003e. Note that if you use both sets of parameters at once, DynamoDB will return a \u003ccode\u003eValidationException\u003c/code\u003e exception.\u003c/p\u003e",
	"definitions.ExpectedAttributeValue.properties.AttributeValueList.$ref": "#/definitions/AttributeValueList",
	"definitions.ExpectedAttributeValue.properties.AttributeValueList.description": "\u003cp\u003eOne or more values to evaluate against the supplied attribute. The number of values in the list depends on the \u003ccode\u003eComparisonOperator\u003c/code\u003e being used.\u003c/p\u003e \u003cp\u003eFor type Number, value comparisons are numeric.\u003c/p\u003e \u003cp\u003eString value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, \u003ccode\u003ea\u003c/code\u003e is greater than \u003ccode\u003eA\u003c/code\u003e, and \u003ccode\u003ea\u003c/code\u003e is greater than \u003ccode\u003eB\u003c/code\u003e. For a list of code values, see \u003ca href=\"http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\"\u003ehttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eFor Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values.\u003c/p\u003e \u003cp\u003eFor information on specifying data types in JSON, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html\"\u003eJSON Data Format\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"definitions.ExpectedAttributeValue.properties.ComparisonOperator.$ref": "#/definitions/ComparisonOperator",
	"definitions.ExpectedAttributeValue.properties.ComparisonOperator.description": "\u003cp\u003eA comparator for evaluating attributes in the \u003ccode\u003eAttributeValueList\u003c/code\u003e. For example, equals, greater than, less than, etc.\u003c/p\u003e \u003cp\u003eThe following comparison operators are available:\u003c/p\u003e \u003cp\u003e \u003ccode\u003eEQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN\u003c/code\u003e \u003c/p\u003e \u003cp\u003eThe following are descriptions of each comparison operator.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eEQ\u003c/code\u003e : Equal. \u003ccode\u003eEQ\u003c/code\u003e is supported for all data types, including lists and maps.\u003c/p\u003e \u003cp\u003e \u003ccode\u003eAttributeValueList\u003c/code\u003e can contain only one \u003ccode\u003eAttributeValue\u003c/code\u003e element of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an \u003ccode\u003eAttributeValue\u003c/code\u003e element of a different type than the one provided in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eNE\u003c/code\u003e : Not equal. \u003ccode\u003eNE\u003c/code\u003e is supported for all data types, including lists and maps.\u003c/p\u003e \u003cp\u003e \u003ccode\u003eAttributeValueList\u003c/code\u003e can contain only one \u003ccode\u003eAttributeValue\u003c/code\u003e of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an \u003ccode\u003eAttributeValue\u003c/code\u003e of a different type than the one provided in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eLE\u003c/code\u003e : Less than or equal. \u003c/p\u003e \u003cp\u003e \u003ccode\u003eAttributeValueList\u003c/code\u003e can contain only one \u003ccode\u003eAttributeValue\u003c/code\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ccode\u003eAttributeValue\u003c/code\u003e element of a different type than the one provided in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eLT\u003c/code\u003e : Less than. \u003c/p\u003e \u003cp\u003e \u003ccode\u003eAttributeValueList\u003c/code\u003e can contain only one \u003ccode\u003eAttributeValue\u003c/code\u003e of type String, Number, or Binary (not a set type). If an item contains an \u003ccode\u003eAttributeValue\u003c/code\u003e element of a different type than the one provided in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eGE\u003c/code\u003e : Greater than or equal. \u003c/p\u003e \u003cp\u003e \u003ccode\u003eAttributeValueList\u003c/code\u003e can contain only one \u003ccode\u003eAttributeValue\u003c/code\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ccode\u003eAttributeValue\u003c/code\u003e element of a different type than the one provided in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eGT\u003c/code\u003e : Greater than. \u003c/p\u003e \u003cp\u003e \u003ccode\u003eAttributeValueList\u003c/code\u003e can contain only one \u003ccode\u003eAttributeValue\u003c/code\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ccode\u003eAttributeValue\u003c/code\u003e element of a different type than the one provided in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eNOT_NULL\u003c/code\u003e : The attribute exists. \u003ccode\u003eNOT_NULL\u003c/code\u003e is supported for all data types, including lists and maps.\u003c/p\u003e \u003cnote\u003e \u003cp\u003eThis operator tests for the existence of an attribute, not its data type. If the data type of attribute \"\u003ccode\u003ea\u003c/code\u003e\" is null, and you evaluate it using \u003ccode\u003eNOT_NULL\u003c/code\u003e, the result is a Boolean \u003ccode\u003etrue\u003c/code\u003e. This result is because the attribute \"\u003ccode\u003ea\u003c/code\u003e\" exists; its data type is not relevant to the \u003ccode\u003eNOT_NULL\u003c/code\u003e comparison operator.\u003c/p\u003e \u003c/note\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eNULL\u003c/code\u003e : The attribute does not exist. \u003ccode\u003eNULL\u003c/code\u003e is supported for all data types, including lists and maps.\u003c/p\u003e \u003cnote\u003e \u003cp\u003eThis operator tests for the nonexistence of an attribute, not its data type. If the data type of attribute \"\u003ccode\u003ea\u003c/code\u003e\" is null, and you evaluate it using \u003ccode\u003eNULL\u003c/code\u003e, the result is a Boolean \u003ccode\u003efalse\u003c/code\u003e. This is because the attribute \"\u003ccode\u003ea\u003c/code\u003e\" exists; its data type is not relevant to the \u003ccode\u003eNULL\u003c/code\u003e comparison operator.\u003c/p\u003e \u003c/note\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eCONTAINS\u003c/code\u003e : Checks for a subsequence, or value in a set.\u003c/p\u003e \u003cp\u003e \u003ccode\u003eAttributeValueList\u003c/code\u003e can contain only one \u003ccode\u003eAttributeValue\u003c/code\u003e element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is of type String, then the operator checks for a substring match. If the target attribute of the comparison is of type Binary, then the operator looks for a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\"\u003ccode\u003eSS\u003c/code\u003e\", \"\u003ccode\u003eNS\u003c/code\u003e\", or \"\u003ccode\u003eBS\u003c/code\u003e\"), then the operator evaluates to true if it finds an exact match with any member of the set.\u003c/p\u003e \u003cp\u003eCONTAINS is supported for lists: When evaluating \"\u003ccode\u003ea CONTAINS b\u003c/code\u003e\", \"\u003ccode\u003ea\u003c/code\u003e\" can be a list; however, \"\u003ccode\u003eb\u003c/code\u003e\" cannot be a set, a map, or a list.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eNOT_CONTAINS\u003c/code\u003e : Checks for absence of a subsequence, or absence of a value in a set.\u003c/p\u003e \u003cp\u003e \u003ccode\u003eAttributeValueList\u003c/code\u003e can contain only one \u003ccode\u003eAttributeValue\u003c/code\u003e element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is a String, then the operator checks for the absence of a substring match. If the target attribute of the comparison is Binary, then the operator checks for the absence of a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\"\u003ccode\u003eSS\u003c/code\u003e\", \"\u003ccode\u003eNS\u003c/code\u003e\", or \"\u003ccode\u003eBS\u003c/code\u003e\"), then the operator evaluates to true if it \u003ci\u003edoes not\u003c/i\u003e find an exact match with any member of the set.\u003c/p\u003e \u003cp\u003eNOT_CONTAINS is supported for lists: When evaluating \"\u003ccode\u003ea NOT CONTAINS b\u003c/code\u003e\", \"\u003ccode\u003ea\u003c/code\u003e\" can be a list; however, \"\u003ccode\u003eb\u003c/code\u003e\" cannot be a set, a map, or a list.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eBEGINS_WITH\u003c/code\u003e : Checks for a prefix. \u003c/p\u003e \u003cp\u003e \u003ccode\u003eAttributeValueList\u003c/code\u003e can contain only one \u003ccode\u003eAttributeValue\u003c/code\u003e of type String or Binary (not a Number or a set type). The target attribute of the comparison must be of type String or Binary (not a Number or a set type).\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eIN\u003c/code\u003e : Checks for matching elements in a list.\u003c/p\u003e \u003cp\u003e \u003ccode\u003eAttributeValueList\u003c/code\u003e can contain one or more \u003ccode\u003eAttributeValue\u003c/code\u003e elements of type String, Number, or Binary. These attributes are compared against an existing attribute of an item. If any elements of the input are equal to the item attribute, the expression evaluates to true.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eBETWEEN\u003c/code\u003e : Greater than or equal to the first value, and less than or equal to the second value. \u003c/p\u003e \u003cp\u003e \u003ccode\u003eAttributeValueList\u003c/code\u003e must contain two \u003ccode\u003eAttributeValue\u003c/code\u003e elements of the same type, either String, Number, or Binary (not a set type). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an \u003ccode\u003eAttributeValue\u003c/code\u003e element of a different type than the one provided in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
	"definitions.ExpectedAttributeValue.properties.Exists.$ref": "#/definitions/BooleanObject",
	"definitions.ExpectedAttributeValue.properties.Exists.description": "\u003cp\u003eCauses DynamoDB to evaluate the value before attempting a conditional operation:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eIf \u003ccode\u003eExists\u003c/code\u003e is \u003ccode\u003etrue\u003c/code\u003e, DynamoDB will check to see if that attribute value already exists in the table. If it is found, then the operation succeeds. If it is not found, the operation fails with a \u003ccode\u003eConditionalCheckFailedException\u003c/code\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eIf \u003ccode\u003eExists\u003c/code\u003e is \u003ccode\u003efalse\u003c/code\u003e, DynamoDB assumes that the attribute value does not exist in the table. If in fact the value does not exist, then the assumption is valid and the operation succeeds. If the value is found, despite the assumption that it does not exist, the operation fails with a \u003ccode\u003eConditionalCheckFailedException\u003c/code\u003e.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eThe default setting for \u003ccode\u003eExists\u003c/code\u003e is \u003ccode\u003etrue\u003c/code\u003e. If you supply a \u003ccode\u003eValue\u003c/code\u003e all by itself, DynamoDB assumes the attribute exists: You don't have to set \u003ccode\u003eExists\u003c/code\u003e to \u003ccode\u003etrue\u003c/code\u003e, because it is implied.\u003c/p\u003e \u003cp\u003eDynamoDB returns a \u003ccode\u003eValidationException\u003c/code\u003e if:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eExists\u003c/code\u003e is \u003ccode\u003etrue\u003c/code\u003e but there is no \u003ccode\u003eValue\u003c/code\u003e to check. (You expect a value to exist, but don't specify what that value is.)\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eExists\u003c/code\u003e is \u003ccode\u003efalse\u003c/code\u003e but you also provide a \u003ccode\u003eValue\u003c/code\u003e. (You cannot expect an attribute to have a value, while also expecting it not to exist.)\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
	"definitions.ExpectedAttributeValue.properties.Value.$ref": "#/definitions/AttributeValue",
	"definitions.ExpectedAttributeValue.properties.Value.description": "\u003cp\u003eRepresents the data for the expected attribute.\u003c/p\u003e \u003cp\u003eEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\u003c/p\u003e \u003cp\u003eFor more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes\"\u003eData Types\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"definitions.ExpectedAttributeValue.type": "object",
	"definitions.ExpressionAttributeNameMap.items.properties.key.$ref": "#/definitions/ExpressionAttributeNameVariable",
	"definitions.ExpressionAttributeNameMap.items.properties.value.$ref": "#/definitions/AttributeName",
	"definitions.ExpressionAttributeNameMap.items.type": "object",
	"definitions.ExpressionAttributeNameMap.type": "array",
	"definitions.ExpressionAttributeNameVariable.type": "string",
	"definitions.ExpressionAttributeValueMap.items.properties.key.$ref": "#/definitions/ExpressionAttributeValueVariable",
	"definitions.ExpressionAttributeValueMap.items.properties.value.$ref": "#/definitions/AttributeValue",
	"definitions.ExpressionAttributeValueMap.items.type": "object",
	"definitions.ExpressionAttributeValueMap.type": "array",
	"definitions.ExpressionAttributeValueVariable.type": "string",
	"definitions.FilterConditionMap.items.properties.key.$ref": "#/definitions/AttributeName",
	"definitions.FilterConditionMap.items.properties.value.$ref": "#/definitions/Condition",
	"definitions.FilterConditionMap.items.type": "object",
	"definitions.FilterConditionMap.type": "array",
	"definitions.GetItemInput.description": "Represents the input of a \u003ccode\u003eGetItem\u003c/code\u003e operation.",
	"definitions.GetItemInput.example.Key.Artist.S": "Acme Band",
	"definitions.GetItemInput.example.Key.SongTitle.S": "Happy Day",
	"definitions.GetItemInput.example.TableName": "Music",
	"definitions.GetItemInput.properties.AttributesToGet.$ref": "#/definitions/AttributeNameList",
	"definitions.GetItemInput.properties.AttributesToGet.description": "This is a legacy parameter. Use \u003ccode\u003eProjectionExpression\u003c/code\u003e instead. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html\"\u003eAttributesToGet\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.",
	"definitions.GetItemInput.properties.ConsistentRead.$ref": "#/definitions/ConsistentRead",
	"definitions.GetItemInput.properties.ConsistentRead.description": "Determines the read consistency model: If set to \u003ccode\u003etrue\u003c/code\u003e, then the operation uses strongly consistent reads; otherwise, the operation uses eventually consistent reads.",
	"definitions.GetItemInput.properties.ExpressionAttributeNames.$ref": "#/definitions/ExpressionAttributeNameMap",
	"definitions.GetItemInput.properties.ExpressionAttributeNames.description": "\u003cp\u003eOne or more substitution tokens for attribute names in an expression. The following are some use cases for using \u003ccode\u003eExpressionAttributeNames\u003c/code\u003e:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eTo access an attribute whose name conflicts with a DynamoDB reserved word.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo create a placeholder for repeating occurrences of an attribute name in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo prevent special characters in an attribute name from being misinterpreted in an expression.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eUse the \u003cb\u003e#\u003c/b\u003e character in an expression to dereference an attribute name. For example, consider the following attribute name:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003ePercentile\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eThe name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html\"\u003eReserved Words\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e). To work around this, you could specify the following for \u003ccode\u003eExpressionAttributeNames\u003c/code\u003e:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003e{\"#P\":\"Percentile\"}\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eYou could then use this substitution in an expression, as in this example:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003e#P = :val\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cnote\u003e \u003cp\u003eTokens that begin with the \u003cb\u003e:\u003c/b\u003e character are \u003ci\u003eexpression attribute values\u003c/i\u003e, which are placeholders for the actual value at runtime.\u003c/p\u003e \u003c/note\u003e \u003cp\u003eFor more information on expression attribute names, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\u003eAccessing Item Attributes\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"definitions.GetItemInput.properties.Key.$ref": "#/definitions/Key",
	"definitions.GetItemInput.properties.Key.description": "\u003cp\u003eA map of attribute names to \u003ccode\u003eAttributeValue\u003c/code\u003e objects, representing the primary key of the item to retrieve.\u003c/p\u003e \u003cp\u003eFor the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.\u003c/p\u003e",
	"definitions.GetItemInput.properties.ProjectionExpression.$ref": "#/definitions/ProjectionExpression",
	"definitions.GetItemInput.properties.ProjectionExpression.description": "\u003cp\u003eA string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.\u003c/p\u003e \u003cp\u003eIf no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.\u003c/p\u003e \u003cp\u003eFor more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\u003eAccessing Item Attributes\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"definitions.GetItemInput.properties.ReturnConsumedCapacity.$ref": "#/definitions/ReturnConsumedCapacity",
	"definitions.GetItemInput.properties.TableName.$ref": "#/definitions/TableName",
	"definitions.GetItemInput.properties.TableName.description": "The name of the table containing the requested item.",
	"definitions.GetItemInput.required.length": 2,
	"definitions.GetItemInput.required[0]": "TableName",
	"definitions.GetItemInput.required[1]": "Key",
	"definitions.GetItemInput.type": "object",
	"definitions.GetItemOutput.description": "Represents the output of a \u003ccode\u003eGetItem\u003c/code\u003e operation.",
	"definitions.GetItemOutput.example.Item.AlbumTitle.S": "Songs About Life",
	"definitions.GetItemOutput.example.Item.Artist.S": "Acme Band",
	"definitions.GetItemOutput.example.Item.SongTitle.S": "Happy Day",
	"definitions.GetItemOutput.properties.ConsumedCapacity.$ref": "#/definitions/ConsumedCapacity",
	"definitions.GetItemOutput.properties.ConsumedCapacity.description": "The capacity units consumed by the \u003ccode\u003eGetItem\u003c/code\u003e operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. \u003ccode\u003eConsumedCapacity\u003c/code\u003e is only returned if the \u003ccode\u003eReturnConsumedCapacity\u003c/code\u003e parameter was specified. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html\"\u003eProvisioned Throughput\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.",
	"definitions.GetItemOutput.properties.Item.$ref": "#/definitions/AttributeMap",
	"definitions.GetItemOutput.properties.Item.description": "A map of attribute names to \u003ccode\u003eAttributeValue\u003c/code\u003e objects, as specified by \u003ccode\u003eProjectionExpression\u003c/code\u003e.",
	"definitions.GetItemOutput.type": "object",
	"definitions.GlobalSecondaryIndex.description": "Represents the properties of a global secondary index.",
	"definitions.GlobalSecondaryIndex.properties.IndexName.$ref": "#/definitions/IndexName",
	"definitions.GlobalSecondaryIndex.properties.IndexName.description": "The name of the global secondary index. The name must be unique among all other indexes on this table.",
	"definitions.GlobalSecondaryIndex.properties.KeySchema.$ref": "#/definitions/KeySchema",
	"definitions.GlobalSecondaryIndex.properties.KeySchema.description": "\u003cp\u003eThe complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eHASH\u003c/code\u003e - partition key\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eRANGE\u003c/code\u003e - sort key\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cnote\u003e \u003cp\u003eThe partition key of an item is also known as its \u003ci\u003ehash attribute\u003c/i\u003e. The term \"hash attribute\" derives from DynamoDB' usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\u003c/p\u003e \u003cp\u003eThe sort key of an item is also known as its \u003ci\u003erange attribute\u003c/i\u003e. The term \"range attribute\" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\u003c/p\u003e \u003c/note\u003e",
	"definitions.GlobalSecondaryIndex.properties.Projection.$ref": "#/definitions/Projection",
	"definitions.GlobalSecondaryIndex.properties.Projection.description": "Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. ",
	"definitions.GlobalSecondaryIndex.properties.ProvisionedThroughput.$ref": "#/definitions/ProvisionedThroughput",
	"definitions.GlobalSecondaryIndex.properties.ProvisionedThroughput.description": "\u003cp\u003eRepresents the provisioned throughput settings for the specified global secondary index.\u003c/p\u003e \u003cp\u003eFor current minimum and maximum provisioned throughput values, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\"\u003eLimits\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"definitions.GlobalSecondaryIndex.required.length": 4,
	"definitions.GlobalSecondaryIndex.required[0]": "IndexName",
	"definitions.GlobalSecondaryIndex.required[1]": "KeySchema",
	"definitions.GlobalSecondaryIndex.required[2]": "Projection",
	"definitions.GlobalSecondaryIndex.required[3]": "ProvisionedThroughput",
	"definitions.GlobalSecondaryIndex.type": "object",
	"definitions.GlobalSecondaryIndexDescription.description": "Represents the properties of a global secondary index.",
	"definitions.GlobalSecondaryIndexDescription.properties.Backfilling.$ref": "#/definitions/Backfilling",
	"definitions.GlobalSecondaryIndexDescription.properties.Backfilling.description": "\u003cp\u003eIndicates whether the index is currently backfilling. \u003ci\u003eBackfilling\u003c/i\u003e is the process of reading items from the table and determining whether they can be added to the index. (Not all items will qualify: For example, a partition key cannot have any duplicate values.) If an item can be added to the index, DynamoDB will do so. After all items have been processed, the backfilling operation is complete and \u003ccode\u003eBackfilling\u003c/code\u003e is false.\u003c/p\u003e \u003cnote\u003e \u003cp\u003eFor indexes that were created during a \u003ccode\u003eCreateTable\u003c/code\u003e operation, the \u003ccode\u003eBackfilling\u003c/code\u003e attribute does not appear in the \u003ccode\u003eDescribeTable\u003c/code\u003e output.\u003c/p\u003e \u003c/note\u003e",
	"definitions.GlobalSecondaryIndexDescription.properties.IndexArn.$ref": "#/definitions/String",
	"definitions.GlobalSecondaryIndexDescription.properties.IndexArn.description": "The Amazon Resource Name (ARN) that uniquely identifies the index.",
	"definitions.GlobalSecondaryIndexDescription.properties.IndexName.$ref": "#/definitions/IndexName",
	"definitions.GlobalSecondaryIndexDescription.properties.IndexName.description": "The name of the global secondary index.",
	"definitions.GlobalSecondaryIndexDescription.properties.IndexSizeBytes.$ref": "#/definitions/Long",
	"definitions.GlobalSecondaryIndexDescription.properties.IndexSizeBytes.description": "The total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.",
	"definitions.GlobalSecondaryIndexDescription.properties.IndexStatus.$ref": "#/definitions/IndexStatus",
	"definitions.GlobalSecondaryIndexDescription.properties.IndexStatus.description": "\u003cp\u003eThe current state of the global secondary index:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eCREATING\u003c/code\u003e - The index is being created.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eUPDATING\u003c/code\u003e - The index is being updated.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eDELETING\u003c/code\u003e - The index is being deleted.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eACTIVE\u003c/code\u003e - The index is ready for use.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
	"definitions.GlobalSecondaryIndexDescription.properties.ItemCount.$ref": "#/definitions/Long",
	"definitions.GlobalSecondaryIndexDescription.properties.ItemCount.description": "The number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.",
	"definitions.GlobalSecondaryIndexDescription.properties.KeySchema.$ref": "#/definitions/KeySchema",
	"definitions.GlobalSecondaryIndexDescription.properties.KeySchema.description": "\u003cp\u003eThe complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eHASH\u003c/code\u003e - partition key\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eRANGE\u003c/code\u003e - sort key\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cnote\u003e \u003cp\u003eThe partition key of an item is also known as its \u003ci\u003ehash attribute\u003c/i\u003e. The term \"hash attribute\" derives from DynamoDB' usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\u003c/p\u003e \u003cp\u003eThe sort key of an item is also known as its \u003ci\u003erange attribute\u003c/i\u003e. The term \"range attribute\" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\u003c/p\u003e \u003c/note\u003e",
	"definitions.GlobalSecondaryIndexDescription.properties.Projection.$ref": "#/definitions/Projection",
	"definitions.GlobalSecondaryIndexDescription.properties.Projection.description": "Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. ",
	"definitions.GlobalSecondaryIndexDescription.properties.ProvisionedThroughput.$ref": "#/definitions/ProvisionedThroughputDescription",
	"definitions.GlobalSecondaryIndexDescription.properties.ProvisionedThroughput.description": "\u003cp\u003eRepresents the provisioned throughput settings for the specified global secondary index.\u003c/p\u003e \u003cp\u003eFor current minimum and maximum provisioned throughput values, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\"\u003eLimits\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"definitions.GlobalSecondaryIndexDescription.type": "object",
	"definitions.GlobalSecondaryIndexDescriptionList.items.$ref": "#/definitions/GlobalSecondaryIndexDescription",
	"definitions.GlobalSecondaryIndexDescriptionList.type": "array",
	"definitions.GlobalSecondaryIndexList.items.$ref": "#/definitions/GlobalSecondaryIndex",
	"definitions.GlobalSecondaryIndexList.type": "array",
	"definitions.GlobalSecondaryIndexUpdate.description": "\u003cp\u003eRepresents one of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eA new global secondary index to be added to an existing table.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eNew provisioned throughput parameters for an existing global secondary index.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eAn existing global secondary index to be removed from an existing table.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
	"definitions.GlobalSecondaryIndexUpdate.properties.Create.$ref": "#/definitions/CreateGlobalSecondaryIndexAction",
	"definitions.GlobalSecondaryIndexUpdate.properties.Create.description": "\u003cp\u003eThe parameters required for creating a global secondary index on an existing table:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eIndexName \u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eKeySchema \u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eAttributeDefinitions \u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eProjection \u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eProvisionedThroughput \u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
	"definitions.GlobalSecondaryIndexUpdate.properties.Delete.$ref": "#/definitions/DeleteGlobalSecondaryIndexAction",
	"definitions.GlobalSecondaryIndexUpdate.properties.Delete.description": "The name of an existing global secondary index to be removed.",
	"definitions.GlobalSecondaryIndexUpdate.properties.Update.$ref": "#/definitions/UpdateGlobalSecondaryIndexAction",
	"definitions.GlobalSecondaryIndexUpdate.properties.Update.description": "The name of an existing global secondary index, along with new provisioned throughput settings to be applied to that index.",
	"definitions.GlobalSecondaryIndexUpdate.type": "object",
	"definitions.GlobalSecondaryIndexUpdateList.items.$ref": "#/definitions/GlobalSecondaryIndexUpdate",
	"definitions.GlobalSecondaryIndexUpdateList.type": "array",
	"definitions.IndexName.maxLength": 255,
	"definitions.IndexName.minLength": 3,
	"definitions.IndexName.pattern": "[a-zA-Z0-9_.-]+",
	"definitions.IndexName.type": "string",
	"definitions.IndexStatus.enum.length": 4,
	"definitions.IndexStatus.enum[0]": "CREATING",
	"definitions.IndexStatus.enum[1]": "UPDATING",
	"definitions.IndexStatus.enum[2]": "DELETING",
	"definitions.IndexStatus.enum[3]": "ACTIVE",
	"definitions.IndexStatus.type": "string",
	"definitions.Integer.type": "integer",
	"definitions.InternalServerError.description": "An error occurred on the server side.",
	"definitions.InternalServerError.properties.message.$ref": "#/definitions/ErrorMessage",
	"definitions.InternalServerError.properties.message.description": "The server encountered an internal error trying to fulfill the request.",
	"definitions.InternalServerError.type": "object",
	"definitions.ItemCollectionKeyAttributeMap.items.properties.key.$ref": "#/definitions/AttributeName",
	"definitions.ItemCollectionKeyAttributeMap.items.properties.value.$ref": "#/definitions/AttributeValue",
	"definitions.ItemCollectionKeyAttributeMap.items.type": "object",
	"definitions.ItemCollectionKeyAttributeMap.type": "array",
	"definitions.ItemCollectionMetrics.description": "Information about item collections, if any, that were affected by the operation. \u003ccode\u003eItemCollectionMetrics\u003c/code\u003e is only returned if the request asked for it. If the table does not have any local secondary indexes, this information is not returned in the response.",
	"definitions.ItemCollectionMetrics.properties.ItemCollectionKey.$ref": "#/definitions/ItemCollectionKeyAttributeMap",
	"definitions.ItemCollectionMetrics.properties.ItemCollectionKey.description": "The partition key value of the item collection. This value is the same as the partition key value of the item.",
	"definitions.ItemCollectionMetrics.properties.SizeEstimateRangeGB.$ref": "#/definitions/ItemCollectionSizeEstimateRange",
	"definitions.ItemCollectionMetrics.properties.SizeEstimateRangeGB.description": "\u003cp\u003eAn estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit.\u003c/p\u003e \u003cp\u003eThe estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.\u003c/p\u003e",
	"definitions.ItemCollectionMetrics.type": "object",
	"definitions.ItemCollectionMetricsMultiple.items.$ref": "#/definitions/ItemCollectionMetrics",
	"definitions.ItemCollectionMetricsMultiple.type": "array",
	"definitions.ItemCollectionMetricsPerTable.items.properties.key.$ref": "#/definitions/TableName",
	"definitions.ItemCollectionMetricsPerTable.items.properties.value.$ref": "#/definitions/ItemCollectionMetricsMultiple",
	"definitions.ItemCollectionMetricsPerTable.items.type": "object",
	"definitions.ItemCollectionMetricsPerTable.type": "array",
	"definitions.ItemCollectionSizeEstimateBound.format": "double",
	"definitions.ItemCollectionSizeEstimateBound.type": "number",
	"definitions.ItemCollectionSizeEstimateRange.items.$ref": "#/definitions/ItemCollectionSizeEstimateBound",
	"definitions.ItemCollectionSizeEstimateRange.type": "array",
	"definitions.ItemCollectionSizeLimitExceededException.description": "An item collection is too large. This exception is only returned for tables that have one or more local secondary indexes.",
	"definitions.ItemCollectionSizeLimitExceededException.properties.message.$ref": "#/definitions/ErrorMessage",
	"definitions.ItemCollectionSizeLimitExceededException.properties.message.description": "The total size of an item collection has exceeded the maximum limit of 10 gigabytes.",
	"definitions.ItemCollectionSizeLimitExceededException.type": "object",
	"definitions.ItemList.items.$ref": "#/definitions/AttributeMap",
	"definitions.ItemList.type": "array",
	"definitions.Key.items.properties.key.$ref": "#/definitions/AttributeName",
	"definitions.Key.items.properties.value.$ref": "#/definitions/AttributeValue",
	"definitions.Key.items.type": "object",
	"definitions.Key.type": "array",
	"definitions.KeyConditions.items.properties.key.$ref": "#/definitions/AttributeName",
	"definitions.KeyConditions.items.properties.value.$ref": "#/definitions/Condition",
	"definitions.KeyConditions.items.type": "object",
	"definitions.KeyConditions.type": "array",
	"definitions.KeyExpression.type": "string",
	"definitions.KeyList.items.$ref": "#/definitions/Key",
	"definitions.KeyList.maxItems": 100,
	"definitions.KeyList.minItems": 1,
	"definitions.KeyList.type": "array",
	"definitions.KeySchema.items.$ref": "#/definitions/KeySchemaElement",
	"definitions.KeySchema.maxItems": 2,
	"definitions.KeySchema.minItems": 1,
	"definitions.KeySchema.type": "array",
	"definitions.KeySchemaAttributeName.maxLength": 255,
	"definitions.KeySchemaAttributeName.minLength": 1,
	"definitions.KeySchemaAttributeName.type": "string",
	"definitions.KeySchemaElement.description": "\u003cp\u003eRepresents \u003ci\u003ea single element\u003c/i\u003e of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.\u003c/p\u003e \u003cp\u003eA \u003ccode\u003eKeySchemaElement\u003c/code\u003e represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one \u003ccode\u003eKeySchemaElement\u003c/code\u003e (for the partition key). A composite primary key would require one \u003ccode\u003eKeySchemaElement\u003c/code\u003e for the partition key, and another \u003ccode\u003eKeySchemaElement\u003c/code\u003e for the sort key.\u003c/p\u003e \u003cp\u003eA \u003ccode\u003eKeySchemaElement\u003c/code\u003e must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.\u003c/p\u003e",
	"definitions.KeySchemaElement.properties.AttributeName.$ref": "#/definitions/KeySchemaAttributeName",
	"definitions.KeySchemaElement.properties.AttributeName.description": "The name of a key attribute.",
	"definitions.KeySchemaElement.properties.KeyType.$ref": "#/definitions/KeyType",
	"definitions.KeySchemaElement.properties.KeyType.description": "\u003cp\u003eThe role that this key attribute will assume:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eHASH\u003c/code\u003e - partition key\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eRANGE\u003c/code\u003e - sort key\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cnote\u003e \u003cp\u003eThe partition key of an item is also known as its \u003ci\u003ehash attribute\u003c/i\u003e. The term \"hash attribute\" derives from DynamoDB' usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\u003c/p\u003e \u003cp\u003eThe sort key of an item is also known as its \u003ci\u003erange attribute\u003c/i\u003e. The term \"range attribute\" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\u003c/p\u003e \u003c/note\u003e",
	"definitions.KeySchemaElement.required.length": 2,
	"definitions.KeySchemaElement.required[0]": "AttributeName",
	"definitions.KeySchemaElement.required[1]": "KeyType",
	"definitions.KeySchemaElement.type": "object",
	"definitions.KeyType.enum.length": 2,
	"definitions.KeyType.enum[0]": "HASH",
	"definitions.KeyType.enum[1]": "RANGE",
	"definitions.KeyType.type": "string",
	"definitions.KeysAndAttributes.description": "\u003cp\u003eRepresents a set of primary keys and, for each key, the attributes to retrieve from the table.\u003c/p\u003e \u003cp\u003eFor each primary key, you must provide \u003ci\u003eall\u003c/i\u003e of the key attributes. For example, with a simple primary key, you only need to provide the partition key. For a composite primary key, you must provide \u003ci\u003eboth\u003c/i\u003e the partition key and the sort key.\u003c/p\u003e",
	"definitions.KeysAndAttributes.properties.AttributesToGet.$ref": "#/definitions/AttributeNameList",
	"definitions.KeysAndAttributes.properties.AttributesToGet.description": "This is a legacy parameter. Use \u003ccode\u003eProjectionExpression\u003c/code\u003e instead. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html\"\u003eLegacy Conditional Parameters\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.",
	"definitions.KeysAndAttributes.properties.ConsistentRead.$ref": "#/definitions/ConsistentRead",
	"definitions.KeysAndAttributes.properties.ConsistentRead.description": "The consistency of a read operation. If set to \u003ccode\u003etrue\u003c/code\u003e, then a strongly consistent read is used; otherwise, an eventually consistent read is used.",
	"definitions.KeysAndAttributes.properties.ExpressionAttributeNames.$ref": "#/definitions/ExpressionAttributeNameMap",
	"definitions.KeysAndAttributes.properties.ExpressionAttributeNames.description": "\u003cp\u003eOne or more substitution tokens for attribute names in an expression. The following are some use cases for using \u003ccode\u003eExpressionAttributeNames\u003c/code\u003e:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eTo access an attribute whose name conflicts with a DynamoDB reserved word.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo create a placeholder for repeating occurrences of an attribute name in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo prevent special characters in an attribute name from being misinterpreted in an expression.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eUse the \u003cb\u003e#\u003c/b\u003e character in an expression to dereference an attribute name. For example, consider the following attribute name:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003ePercentile\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eThe name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html\"\u003eReserved Words\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e). To work around this, you could specify the following for \u003ccode\u003eExpressionAttributeNames\u003c/code\u003e:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003e{\"#P\":\"Percentile\"}\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eYou could then use this substitution in an expression, as in this example:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003e#P = :val\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cnote\u003e \u003cp\u003eTokens that begin with the \u003cb\u003e:\u003c/b\u003e character are \u003ci\u003eexpression attribute values\u003c/i\u003e, which are placeholders for the actual value at runtime.\u003c/p\u003e \u003c/note\u003e \u003cp\u003eFor more information on expression attribute names, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\u003eAccessing Item Attributes\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"definitions.KeysAndAttributes.properties.Keys.$ref": "#/definitions/KeyList",
	"definitions.KeysAndAttributes.properties.Keys.description": "The primary key attribute values that define the items and the attributes associated with the items.",
	"definitions.KeysAndAttributes.properties.ProjectionExpression.$ref": "#/definitions/ProjectionExpression",
	"definitions.KeysAndAttributes.properties.ProjectionExpression.description": "\u003cp\u003eA string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the \u003ccode\u003eProjectionExpression\u003c/code\u003e must be separated by commas.\u003c/p\u003e \u003cp\u003eIf no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.\u003c/p\u003e \u003cp\u003eFor more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\u003eAccessing Item Attributes\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"definitions.KeysAndAttributes.required.length": 1,
	"definitions.KeysAndAttributes.required[0]": "Keys",
	"definitions.KeysAndAttributes.type": "object",
	"definitions.LimitExceededException.description": "\u003cp\u003eThe number of concurrent table requests (cumulative number of tables in the \u003ccode\u003eCREATING\u003c/code\u003e, \u003ccode\u003eDELETING\u003c/code\u003e or \u003ccode\u003eUPDATING\u003c/code\u003e state) exceeds the maximum allowed of 10.\u003c/p\u003e \u003cp\u003eAlso, for tables with secondary indexes, only one of those tables can be in the \u003ccode\u003eCREATING\u003c/code\u003e state at any point in time. Do not attempt to create more than one such table simultaneously.\u003c/p\u003e \u003cp\u003eThe total limit of tables in the \u003ccode\u003eACTIVE\u003c/code\u003e state is 250.\u003c/p\u003e",
	"definitions.LimitExceededException.properties.message.$ref": "#/definitions/ErrorMessage",
	"definitions.LimitExceededException.properties.message.description": "Too many operations for a given subscriber.",
	"definitions.LimitExceededException.type": "object",
	"definitions.ListAttributeValue.items.$ref": "#/definitions/AttributeValue",
	"definitions.ListAttributeValue.type": "array",
	"definitions.ListTablesInput.description": "Represents the input of a \u003ccode\u003eListTables\u003c/code\u003e operation.",
	"definitions.ListTablesInput.properties.ExclusiveStartTableName.$ref": "#/definitions/TableName",
	"definitions.ListTablesInput.properties.ExclusiveStartTableName.description": "The first table name that this operation will evaluate. Use the value that was returned for \u003ccode\u003eLastEvaluatedTableName\u003c/code\u003e in a previous operation, so that you can obtain the next page of results.",
	"definitions.ListTablesInput.properties.Limit.$ref": "#/definitions/ListTablesInputLimit",
	"definitions.ListTablesInput.properties.Limit.description": "A maximum number of table names to return. If this parameter is not specified, the limit is 100.",
	"definitions.ListTablesInput.type": "object",
	"definitions.ListTablesInputLimit.maximum": 100,
	"definitions.ListTablesInputLimit.minimum": 1,
	"definitions.ListTablesInputLimit.type": "integer",
	"definitions.ListTablesOutput.description": "Represents the output of a \u003ccode\u003eListTables\u003c/code\u003e operation.",
	"definitions.ListTablesOutput.example.TableNames.length": 4,
	"definitions.ListTablesOutput.example.TableNames[0]": "Forum",
	"definitions.ListTablesOutput.example.TableNames[1]": "ProductCatalog",
	"definitions.ListTablesOutput.example.TableNames[2]": "Reply",
	"definitions.ListTablesOutput.example.TableNames[3]": "Thread",
	"definitions.ListTablesOutput.properties.LastEvaluatedTableName.$ref": "#/definitions/TableName",
	"definitions.ListTablesOutput.properties.LastEvaluatedTableName.description": "\u003cp\u003eThe name of the last table in the current page of results. Use this value as the \u003ccode\u003eExclusiveStartTableName\u003c/code\u003e in a new request to obtain the next page of results, until all the table names are returned.\u003c/p\u003e \u003cp\u003eIf you do not receive a \u003ccode\u003eLastEvaluatedTableName\u003c/code\u003e value in the response, this means that there are no more table names to be retrieved.\u003c/p\u003e",
	"definitions.ListTablesOutput.properties.TableNames.$ref": "#/definitions/TableNameList",
	"definitions.ListTablesOutput.properties.TableNames.description": "\u003cp\u003eThe names of the tables associated with the current account at the current endpoint. The maximum size of this array is 100.\u003c/p\u003e \u003cp\u003eIf \u003ccode\u003eLastEvaluatedTableName\u003c/code\u003e also appears in the output, you can use this value as the \u003ccode\u003eExclusiveStartTableName\u003c/code\u003e parameter in a subsequent \u003ccode\u003eListTables\u003c/code\u003e request and obtain the next page of results.\u003c/p\u003e",
	"definitions.ListTablesOutput.type": "object",
	"definitions.ListTagsOfResourceInput.properties.NextToken.$ref": "#/definitions/NextTokenString",
	"definitions.ListTagsOfResourceInput.properties.NextToken.description": "An optional string that, if supplied, must be copied from the output of a previous call to ListTagOfResource. When provided in this manner, this API fetches the next page of results.",
	"definitions.ListTagsOfResourceInput.properties.ResourceArn.$ref": "#/definitions/ResourceArnString",
	"definitions.ListTagsOfResourceInput.properties.ResourceArn.description": "The Amazon DynamoDB resource with tags to be listed. This value is an Amazon Resource Name (ARN).",
	"definitions.ListTagsOfResourceInput.required.length": 1,
	"definitions.ListTagsOfResourceInput.required[0]": "ResourceArn",
	"definitions.ListTagsOfResourceInput.type": "object",
	"definitions.ListTagsOfResourceOutput.properties.NextToken.$ref": "#/definitions/NextTokenString",
	"definitions.ListTagsOfResourceOutput.properties.NextToken.description": "If this value is returned, there are additional results to be displayed. To retrieve them, call ListTagsOfResource again, with NextToken set to this value.",
	"definitions.ListTagsOfResourceOutput.properties.Tags.$ref": "#/definitions/TagList",
	"definitions.ListTagsOfResourceOutput.properties.Tags.description": "The tags currently associated with the Amazon DynamoDB resource.",
	"definitions.ListTagsOfResourceOutput.type": "object",
	"definitions.LocalSecondaryIndex.description": "Represents the properties of a local secondary index.",
	"definitions.LocalSecondaryIndex.properties.IndexName.$ref": "#/definitions/IndexName",
	"definitions.LocalSecondaryIndex.properties.IndexName.description": "The name of the local secondary index. The name must be unique among all other indexes on this table.",
	"definitions.LocalSecondaryIndex.properties.KeySchema.$ref": "#/definitions/KeySchema",
	"definitions.LocalSecondaryIndex.properties.KeySchema.description": "\u003cp\u003eThe complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key types:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eHASH\u003c/code\u003e - partition key\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eRANGE\u003c/code\u003e - sort key\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cnote\u003e \u003cp\u003eThe partition key of an item is also known as its \u003ci\u003ehash attribute\u003c/i\u003e. The term \"hash attribute\" derives from DynamoDB' usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\u003c/p\u003e \u003cp\u003eThe sort key of an item is also known as its \u003ci\u003erange attribute\u003c/i\u003e. The term \"range attribute\" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\u003c/p\u003e \u003c/note\u003e",
	"definitions.LocalSecondaryIndex.properties.Projection.$ref": "#/definitions/Projection",
	"definitions.LocalSecondaryIndex.properties.Projection.description": "Represents attributes that are copied (projected) from the table into the local secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. ",
	"definitions.LocalSecondaryIndex.required.length": 3,
	"definitions.LocalSecondaryIndex.required[0]": "IndexName",
	"definitions.LocalSecondaryIndex.required[1]": "KeySchema",
	"definitions.LocalSecondaryIndex.required[2]": "Projection",
	"definitions.LocalSecondaryIndex.type": "object",
	"definitions.LocalSecondaryIndexDescription.description": "Represents the properties of a local secondary index.",
	"definitions.LocalSecondaryIndexDescription.properties.IndexArn.$ref": "#/definitions/String",
	"definitions.LocalSecondaryIndexDescription.properties.IndexArn.description": "The Amazon Resource Name (ARN) that uniquely identifies the index.",
	"definitions.LocalSecondaryIndexDescription.properties.IndexName.$ref": "#/definitions/IndexName",
	"definitions.LocalSecondaryIndexDescription.properties.IndexName.description": "Represents the name of the local secondary index.",
	"definitions.LocalSecondaryIndexDescription.properties.IndexSizeBytes.$ref": "#/definitions/Long",
	"definitions.LocalSecondaryIndexDescription.properties.IndexSizeBytes.description": "The total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.",
	"definitions.LocalSecondaryIndexDescription.properties.ItemCount.$ref": "#/definitions/Long",
	"definitions.LocalSecondaryIndexDescription.properties.ItemCount.description": "The number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.",
	"definitions.LocalSecondaryIndexDescription.properties.KeySchema.$ref": "#/definitions/KeySchema",
	"definitions.LocalSecondaryIndexDescription.properties.KeySchema.description": "\u003cp\u003eThe complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key types:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eHASH\u003c/code\u003e - partition key\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eRANGE\u003c/code\u003e - sort key\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cnote\u003e \u003cp\u003eThe partition key of an item is also known as its \u003ci\u003ehash attribute\u003c/i\u003e. The term \"hash attribute\" derives from DynamoDB' usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\u003c/p\u003e \u003cp\u003eThe sort key of an item is also known as its \u003ci\u003erange attribute\u003c/i\u003e. The term \"range attribute\" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\u003c/p\u003e \u003c/note\u003e",
	"definitions.LocalSecondaryIndexDescription.properties.Projection.$ref": "#/definitions/Projection",
	"definitions.LocalSecondaryIndexDescription.properties.Projection.description": "Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. ",
	"definitions.LocalSecondaryIndexDescription.type": "object",
	"definitions.LocalSecondaryIndexDescriptionList.items.$ref": "#/definitions/LocalSecondaryIndexDescription",
	"definitions.LocalSecondaryIndexDescriptionList.type": "array",
	"definitions.LocalSecondaryIndexList.items.$ref": "#/definitions/LocalSecondaryIndex",
	"definitions.LocalSecondaryIndexList.type": "array",
	"definitions.Long.type": "integer",
	"definitions.MapAttributeValue.items.properties.key.$ref": "#/definitions/AttributeName",
	"definitions.MapAttributeValue.items.properties.value.$ref": "#/definitions/AttributeValue",
	"definitions.MapAttributeValue.items.type": "object",
	"definitions.MapAttributeValue.type": "array",
	"definitions.NextTokenString.type": "string",
	"definitions.NonKeyAttributeName.maxLength": 255,
	"definitions.NonKeyAttributeName.minLength": 1,
	"definitions.NonKeyAttributeName.type": "string",
	"definitions.NonKeyAttributeNameList.items.$ref": "#/definitions/NonKeyAttributeName",
	"definitions.NonKeyAttributeNameList.maxItems": 20,
	"definitions.NonKeyAttributeNameList.minItems": 1,
	"definitions.NonKeyAttributeNameList.type": "array",
	"definitions.NullAttributeValue.type": "boolean",
	"definitions.NumberAttributeValue.type": "string",
	"definitions.NumberSetAttributeValue.items.$ref": "#/definitions/NumberAttributeValue",
	"definitions.NumberSetAttributeValue.type": "array",
	"definitions.PositiveIntegerObject.minimum": 1,
	"definitions.PositiveIntegerObject.type": "integer",
	"definitions.PositiveLongObject.minimum": 1,
	"definitions.PositiveLongObject.type": "integer",
	"definitions.Projection.description": "Represents attributes that are copied (projected) from the table into an index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.",
	"definitions.Projection.properties.NonKeyAttributes.$ref": "#/definitions/NonKeyAttributeNameList",
	"definitions.Projection.properties.NonKeyAttributes.description": "\u003cp\u003eRepresents the non-key attribute names which will be projected into the index.\u003c/p\u003e \u003cp\u003eFor local secondary indexes, the total count of \u003ccode\u003eNonKeyAttributes\u003c/code\u003e summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\u003c/p\u003e",
	"definitions.Projection.properties.ProjectionType.$ref": "#/definitions/ProjectionType",
	"definitions.Projection.properties.ProjectionType.description": "\u003cp\u003eThe set of attributes that are projected into the index:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eKEYS_ONLY\u003c/code\u003e - Only the index and primary keys are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eINCLUDE\u003c/code\u003e - Only the specified table attributes are projected into the index. The list of projected attributes are in \u003ccode\u003eNonKeyAttributes\u003c/code\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eALL\u003c/code\u003e - All of the table attributes are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
	"definitions.Projection.type": "object",
	"definitions.ProjectionExpression.type": "string",
	"definitions.ProjectionType.enum.length": 3,
	"definitions.ProjectionType.enum[0]": "ALL",
	"definitions.ProjectionType.enum[1]": "KEYS_ONLY",
	"definitions.ProjectionType.enum[2]": "INCLUDE",
	"definitions.ProjectionType.type": "string",
	"definitions.ProvisionedThroughput.description": "\u003cp\u003eRepresents the provisioned throughput settings for a specified table or index. The settings can be modified using the \u003ccode\u003eUpdateTable\u003c/code\u003e operation.\u003c/p\u003e \u003cp\u003eFor current minimum and maximum provisioned throughput values, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\"\u003eLimits\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"definitions.ProvisionedThroughput.properties.ReadCapacityUnits.$ref": "#/definitions/PositiveLongObject",
	"definitions.ProvisionedThroughput.properties.ReadCapacityUnits.description": "The maximum number of strongly consistent reads consumed per second before DynamoDB returns a \u003ccode\u003eThrottlingException\u003c/code\u003e. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput\"\u003eSpecifying Read and Write Requirements\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.",
	"definitions.ProvisionedThroughput.properties.WriteCapacityUnits.$ref": "#/definitions/PositiveLongObject",
	"definitions.ProvisionedThroughput.properties.WriteCapacityUnits.description": "The maximum number of writes consumed per second before DynamoDB returns a \u003ccode\u003eThrottlingException\u003c/code\u003e. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput\"\u003eSpecifying Read and Write Requirements\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.",
	"definitions.ProvisionedThroughput.required.length": 2,
	"definitions.ProvisionedThroughput.required[0]": "ReadCapacityUnits",
	"definitions.ProvisionedThroughput.required[1]": "WriteCapacityUnits",
	"definitions.ProvisionedThroughput.type": "object",
	"definitions.ProvisionedThroughputDescription.description": "Represents the provisioned throughput settings for the table, consisting of read and write capacity units, along with data about increases and decreases.",
	"definitions.ProvisionedThroughputDescription.properties.LastDecreaseDateTime.$ref": "#/definitions/Date",
	"definitions.ProvisionedThroughputDescription.properties.LastDecreaseDateTime.description": "The date and time of the last provisioned throughput decrease for this table.",
	"definitions.ProvisionedThroughputDescription.properties.LastIncreaseDateTime.$ref": "#/definitions/Date",
	"definitions.ProvisionedThroughputDescription.properties.LastIncreaseDateTime.description": "The date and time of the last provisioned throughput increase for this table.",
	"definitions.ProvisionedThroughputDescription.properties.NumberOfDecreasesToday.$ref": "#/definitions/PositiveLongObject",
	"definitions.ProvisionedThroughputDescription.properties.NumberOfDecreasesToday.description": "The number of provisioned throughput decreases for this table during this UTC calendar day. For current maximums on provisioned throughput decreases, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\"\u003eLimits\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.",
	"definitions.ProvisionedThroughputDescription.properties.ReadCapacityUnits.$ref": "#/definitions/PositiveLongObject",
	"definitions.ProvisionedThroughputDescription.properties.ReadCapacityUnits.description": "The maximum number of strongly consistent reads consumed per second before DynamoDB returns a \u003ccode\u003eThrottlingException\u003c/code\u003e. Eventually consistent reads require less effort than strongly consistent reads, so a setting of 50 \u003ccode\u003eReadCapacityUnits\u003c/code\u003e per second provides 100 eventually consistent \u003ccode\u003eReadCapacityUnits\u003c/code\u003e per second.",
	"definitions.ProvisionedThroughputDescription.properties.WriteCapacityUnits.$ref": "#/definitions/PositiveLongObject",
	"definitions.ProvisionedThroughputDescription.properties.WriteCapacityUnits.description": "The maximum number of writes consumed per second before DynamoDB returns a \u003ccode\u003eThrottlingException\u003c/code\u003e.",
	"definitions.ProvisionedThroughputDescription.type": "object",
	"definitions.ProvisionedThroughputExceededException.description": "Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests that receive this exception. Your request is eventually successful, unless your retry queue is too large to finish. Reduce the frequency of requests and use exponential backoff. For more information, go to \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff\"\u003eError Retries and Exponential Backoff\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.",
	"definitions.ProvisionedThroughputExceededException.properties.message.$ref": "#/definitions/ErrorMessage",
	"definitions.ProvisionedThroughputExceededException.properties.message.description": "You exceeded your maximum allowed provisioned throughput.",
	"definitions.ProvisionedThroughputExceededException.type": "object",
	"definitions.PutItemInput.description": "Represents the input of a \u003ccode\u003ePutItem\u003c/code\u003e operation.",
	"definitions.PutItemInput.example.Item.AlbumTitle.S": "Somewhat Famous",
	"definitions.PutItemInput.example.Item.Artist.S": "No One You Know",
	"definitions.PutItemInput.example.Item.SongTitle.S": "Call Me Today",
	"definitions.PutItemInput.example.ReturnConsumedCapacity": "TOTAL",
	"definitions.PutItemInput.example.TableName": "Music",
	"definitions.PutItemInput.properties.ConditionExpression.$ref": "#/definitions/ConditionExpression",
	"definitions.PutItemInput.properties.ConditionExpression.description": "\u003cp\u003eA condition that must be satisfied in order for a conditional \u003ccode\u003ePutItem\u003c/code\u003e operation to succeed.\u003c/p\u003e \u003cp\u003eAn expression can contain any of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eFunctions: \u003ccode\u003eattribute_exists | attribute_not_exists | attribute_type | contains | begins_with | size\u003c/code\u003e \u003c/p\u003e \u003cp\u003eThese function names are case-sensitive.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eComparison operators: \u003ccode\u003e= | \u0026lt;\u0026gt; | \u0026lt; | \u0026gt; | \u0026lt;= | \u0026gt;= | BETWEEN | IN \u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e Logical operators: \u003ccode\u003eAND | OR | NOT\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eFor more information on condition expressions, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html\"\u003eSpecifying Conditions\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"definitions.PutItemInput.properties.ConditionalOperator.$ref": "#/definitions/ConditionalOperator",
	"definitions.PutItemInput.properties.ConditionalOperator.description": "This is a legacy parameter. Use \u003ccode\u003eConditionExpression\u003c/code\u003e instead. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html\"\u003eConditionalOperator\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.",
	"definitions.PutItemInput.properties.Expected.$ref": "#/definitions/ExpectedAttributeMap",
	"definitions.PutItemInput.properties.Expected.description": "This is a legacy parameter. Use \u003ccode\u003eConditionExpression\u003c/code\u003e instead. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.Expected.html\"\u003eExpected\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.",
	"definitions.PutItemInput.properties.ExpressionAttributeNames.$ref": "#/definitions/ExpressionAttributeNameMap",
	"definitions.PutItemInput.properties.ExpressionAttributeNames.description": "\u003cp\u003eOne or more substitution tokens for attribute names in an expression. The following are some use cases for using \u003ccode\u003eExpressionAttributeNames\u003c/code\u003e:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eTo access an attribute whose name conflicts with a DynamoDB reserved word.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo create a placeholder for repeating occurrences of an attribute name in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo prevent special characters in an attribute name from being misinterpreted in an expression.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eUse the \u003cb\u003e#\u003c/b\u003e character in an expression to dereference an attribute name. For example, consider the following attribute name:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003ePercentile\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eThe name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html\"\u003eReserved Words\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e). To work around this, you could specify the following for \u003ccode\u003eExpressionAttributeNames\u003c/code\u003e:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003e{\"#P\":\"Percentile\"}\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eYou could then use this substitution in an expression, as in this example:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003e#P = :val\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cnote\u003e \u003cp\u003eTokens that begin with the \u003cb\u003e:\u003c/b\u003e character are \u003ci\u003eexpression attribute values\u003c/i\u003e, which are placeholders for the actual value at runtime.\u003c/p\u003e \u003c/note\u003e \u003cp\u003eFor more information on expression attribute names, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\u003eAccessing Item Attributes\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"definitions.PutItemInput.properties.ExpressionAttributeValues.$ref": "#/definitions/ExpressionAttributeValueMap",
	"definitions.PutItemInput.properties.ExpressionAttributeValues.description": "\u003cp\u003eOne or more values that can be substituted in an expression.\u003c/p\u003e \u003cp\u003eUse the \u003cb\u003e:\u003c/b\u003e (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the \u003ci\u003eProductStatus\u003c/i\u003e attribute was one of the following: \u003c/p\u003e \u003cp\u003e \u003ccode\u003eAvailable | Backordered | Discontinued\u003c/code\u003e \u003c/p\u003e \u003cp\u003eYou would first need to specify \u003ccode\u003eExpressionAttributeValues\u003c/code\u003e as follows:\u003c/p\u003e \u003cp\u003e \u003ccode\u003e{ \":avail\":{\"S\":\"Available\"}, \":back\":{\"S\":\"Backordered\"}, \":disc\":{\"S\":\"Discontinued\"} }\u003c/code\u003e \u003c/p\u003e \u003cp\u003eYou could then use these values in an expression, such as this:\u003c/p\u003e \u003cp\u003e \u003ccode\u003eProductStatus IN (:avail, :back, :disc)\u003c/code\u003e \u003c/p\u003e \u003cp\u003eFor more information on expression attribute values, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html\"\u003eSpecifying Conditions\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"definitions.PutItemInput.properties.Item.$ref": "#/definitions/PutItemInputAttributeMap",
	"definitions.PutItemInput.properties.Item.description": "\u003cp\u003eA map of attribute name/value pairs, one for each attribute. Only the primary key attributes are required; you can optionally provide other attribute name-value pairs for the item.\u003c/p\u003e \u003cp\u003eYou must provide all of the attributes for the primary key. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide both values for both the partition key and the sort key.\u003c/p\u003e \u003cp\u003eIf you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.\u003c/p\u003e \u003cp\u003eFor more information about primary keys, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey\"\u003ePrimary Key\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eEach element in the \u003ccode\u003eItem\u003c/code\u003e map is an \u003ccode\u003eAttributeValue\u003c/code\u003e object.\u003c/p\u003e",
	"definitions.PutItemInput.properties.ReturnConsumedCapacity.$ref": "#/definitions/ReturnConsumedCapacity",
	"definitions.PutItemInput.properties.ReturnItemCollectionMetrics.$ref": "#/definitions/ReturnItemCollectionMetrics",
	"definitions.PutItemInput.properties.ReturnItemCollectionMetrics.description": "Determines whether item collection metrics are returned. If set to \u003ccode\u003eSIZE\u003c/code\u003e, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to \u003ccode\u003eNONE\u003c/code\u003e (the default), no statistics are returned.",
	"definitions.PutItemInput.properties.ReturnValues.$ref": "#/definitions/ReturnValue",
	"definitions.PutItemInput.properties.ReturnValues.description": "\u003cp\u003eUse \u003ccode\u003eReturnValues\u003c/code\u003e if you want to get the item attributes as they appeared before they were updated with the \u003ccode\u003ePutItem\u003c/code\u003e request. For \u003ccode\u003ePutItem\u003c/code\u003e, the valid values are:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eNONE\u003c/code\u003e - If \u003ccode\u003eReturnValues\u003c/code\u003e is not specified, or if its value is \u003ccode\u003eNONE\u003c/code\u003e, then nothing is returned. (This setting is the default for \u003ccode\u003eReturnValues\u003c/code\u003e.)\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eALL_OLD\u003c/code\u003e - If \u003ccode\u003ePutItem\u003c/code\u003e overwrote an attribute name-value pair, then the content of the old item is returned.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cnote\u003e \u003cp\u003eThe \u003ccode\u003eReturnValues\u003c/code\u003e parameter is used by several DynamoDB operations; however, \u003ccode\u003ePutItem\u003c/code\u003e does not recognize any values other than \u003ccode\u003eNONE\u003c/code\u003e or \u003ccode\u003eALL_OLD\u003c/code\u003e.\u003c/p\u003e \u003c/note\u003e",
	"definitions.PutItemInput.properties.TableName.$ref": "#/definitions/TableName",
	"definitions.PutItemInput.properties.TableName.description": "The name of the table to contain the item.",
	"definitions.PutItemInput.required.length": 2,
	"definitions.PutItemInput.required[0]": "TableName",
	"definitions.PutItemInput.required[1]": "Item",
	"definitions.PutItemInput.type": "object",
	"definitions.PutItemInputAttributeMap.items.properties.key.$ref": "#/definitions/AttributeName",
	"definitions.PutItemInputAttributeMap.items.properties.value.$ref": "#/definitions/AttributeValue",
	"definitions.PutItemInputAttributeMap.items.type": "object",
	"definitions.PutItemInputAttributeMap.type": "array",
	"definitions.PutItemOutput.description": "Represents the output of a \u003ccode\u003ePutItem\u003c/code\u003e operation.",
	"definitions.PutItemOutput.example.ConsumedCapacity.CapacityUnits": 1,
	"definitions.PutItemOutput.example.ConsumedCapacity.TableName": "Music",
	"definitions.PutItemOutput.properties.Attributes.$ref": "#/definitions/AttributeMap",
	"definitions.PutItemOutput.properties.Attributes.description": "The attribute values as they appeared before the \u003ccode\u003ePutItem\u003c/code\u003e operation, but only if \u003ccode\u003eReturnValues\u003c/code\u003e is specified as \u003ccode\u003eALL_OLD\u003c/code\u003e in the request. Each element consists of an attribute name and an attribute value.",
	"definitions.PutItemOutput.properties.ConsumedCapacity.$ref": "#/definitions/ConsumedCapacity",
	"definitions.PutItemOutput.properties.ConsumedCapacity.description": "The capacity units consumed by the \u003ccode\u003ePutItem\u003c/code\u003e operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. \u003ccode\u003eConsumedCapacity\u003c/code\u003e is only returned if the \u003ccode\u003eReturnConsumedCapacity\u003c/code\u003e parameter was specified. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html\"\u003eProvisioned Throughput\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.",
	"definitions.PutItemOutput.properties.ItemCollectionMetrics.$ref": "#/definitions/ItemCollectionMetrics",
	"definitions.PutItemOutput.properties.ItemCollectionMetrics.description": "\u003cp\u003eInformation about item collections, if any, that were affected by the \u003ccode\u003ePutItem\u003c/code\u003e operation. \u003ccode\u003eItemCollectionMetrics\u003c/code\u003e is only returned if the \u003ccode\u003eReturnItemCollectionMetrics\u003c/code\u003e parameter was specified. If the table does not have any local secondary indexes, this information is not returned in the response.\u003c/p\u003e \u003cp\u003eEach \u003ccode\u003eItemCollectionMetrics\u003c/code\u003e element consists of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eItemCollectionKey\u003c/code\u003e - The partition key value of the item collection. This is the same as the partition key value of the item itself.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eSizeEstimateRange\u003c/code\u003e - An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit.\u003c/p\u003e \u003cp\u003eThe estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
	"definitions.PutItemOutput.type": "object",
	"definitions.PutRequest.description": "Represents a request to perform a \u003ccode\u003ePutItem\u003c/code\u003e operation on an item.",
	"definitions.PutRequest.properties.Item.$ref": "#/definitions/PutItemInputAttributeMap",
	"definitions.PutRequest.properties.Item.description": "A map of attribute name to attribute values, representing the primary key of an item to be processed by \u003ccode\u003ePutItem\u003c/code\u003e. All of the table's primary key attributes must be specified, and their data types must match those of the table's key schema. If any attributes are present in the item which are part of an index key schema for the table, their types must match the index key schema.",
	"definitions.PutRequest.required.length": 1,
	"definitions.PutRequest.required[0]": "Item",
	"definitions.PutRequest.type": "object",
	"definitions.QueryInput.description": "Represents the input of a \u003ccode\u003eQuery\u003c/code\u003e operation.",
	"definitions.QueryInput.example.ExpressionAttributeValues.:v1.S": "No One You Know",
	"definitions.QueryInput.example.KeyConditionExpression": "Artist = :v1",
	"definitions.QueryInput.example.ProjectionExpression": "SongTitle",
	"definitions.QueryInput.example.TableName": "Music",
	"definitions.QueryInput.properties.AttributesToGet.$ref": "#/definitions/AttributeNameList",
	"definitions.QueryInput.properties.AttributesToGet.description": "This is a legacy parameter. Use \u003ccode\u003eProjectionExpression\u003c/code\u003e instead. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html\"\u003eAttributesToGet\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.",
	"definitions.QueryInput.properties.ConditionalOperator.$ref": "#/definitions/ConditionalOperator",
	"definitions.QueryInput.properties.ConditionalOperator.description": "This is a legacy parameter. Use \u003ccode\u003eFilterExpression\u003c/code\u003e instead. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html\"\u003eConditionalOperator\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.",
	"definitions.QueryInput.properties.ConsistentRead.$ref": "#/definitions/ConsistentRead",
	"definitions.QueryInput.properties.ConsistentRead.description": "\u003cp\u003eDetermines the read consistency model: If set to \u003ccode\u003etrue\u003c/code\u003e, then the operation uses strongly consistent reads; otherwise, the operation uses eventually consistent reads.\u003c/p\u003e \u003cp\u003eStrongly consistent reads are not supported on global secondary indexes. If you query a global secondary index with \u003ccode\u003eConsistentRead\u003c/code\u003e set to \u003ccode\u003etrue\u003c/code\u003e, you will receive a \u003ccode\u003eValidationException\u003c/code\u003e.\u003c/p\u003e",
	"definitions.QueryInput.properties.ExclusiveStartKey.$ref": "#/definitions/Key",
	"definitions.QueryInput.properties.ExclusiveStartKey.description": "\u003cp\u003eThe primary key of the first item that this operation will evaluate. Use the value that was returned for \u003ccode\u003eLastEvaluatedKey\u003c/code\u003e in the previous operation.\u003c/p\u003e \u003cp\u003eThe data type for \u003ccode\u003eExclusiveStartKey\u003c/code\u003e must be String, Number or Binary. No set data types are allowed.\u003c/p\u003e",
	"definitions.QueryInput.properties.ExpressionAttributeNames.$ref": "#/definitions/ExpressionAttributeNameMap",
	"definitions.QueryInput.properties.ExpressionAttributeNames.description": "\u003cp\u003eOne or more substitution tokens for attribute names in an expression. The following are some use cases for using \u003ccode\u003eExpressionAttributeNames\u003c/code\u003e:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eTo access an attribute whose name conflicts with a DynamoDB reserved word.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo create a placeholder for repeating occurrences of an attribute name in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo prevent special characters in an attribute name from being misinterpreted in an expression.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eUse the \u003cb\u003e#\u003c/b\u003e character in an expression to dereference an attribute name. For example, consider the following attribute name:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003ePercentile\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eThe name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html\"\u003eReserved Words\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e). To work around this, you could specify the following for \u003ccode\u003eExpressionAttributeNames\u003c/code\u003e:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003e{\"#P\":\"Percentile\"}\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eYou could then use this substitution in an expression, as in this example:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003e#P = :val\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cnote\u003e \u003cp\u003eTokens that begin with the \u003cb\u003e:\u003c/b\u003e character are \u003ci\u003eexpression attribute values\u003c/i\u003e, which are placeholders for the actual value at runtime.\u003c/p\u003e \u003c/note\u003e \u003cp\u003eFor more information on expression attribute names, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\u003eAccessing Item Attributes\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"definitions.QueryInput.properties.ExpressionAttributeValues.$ref": "#/definitions/ExpressionAttributeValueMap",
	"definitions.QueryInput.properties.ExpressionAttributeValues.description": "\u003cp\u003eOne or more values that can be substituted in an expression.\u003c/p\u003e \u003cp\u003eUse the \u003cb\u003e:\u003c/b\u003e (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the \u003ci\u003eProductStatus\u003c/i\u003e attribute was one of the following: \u003c/p\u003e \u003cp\u003e \u003ccode\u003eAvailable | Backordered | Discontinued\u003c/code\u003e \u003c/p\u003e \u003cp\u003eYou would first need to specify \u003ccode\u003eExpressionAttributeValues\u003c/code\u003e as follows:\u003c/p\u003e \u003cp\u003e \u003ccode\u003e{ \":avail\":{\"S\":\"Available\"}, \":back\":{\"S\":\"Backordered\"}, \":disc\":{\"S\":\"Discontinued\"} }\u003c/code\u003e \u003c/p\u003e \u003cp\u003eYou could then use these values in an expression, such as this:\u003c/p\u003e \u003cp\u003e \u003ccode\u003eProductStatus IN (:avail, :back, :disc)\u003c/code\u003e \u003c/p\u003e \u003cp\u003eFor more information on expression attribute values, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html\"\u003eSpecifying Conditions\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"definitions.QueryInput.properties.FilterExpression.$ref": "#/definitions/ConditionExpression",
	"definitions.QueryInput.properties.FilterExpression.description": "\u003cp\u003eA string that contains conditions that DynamoDB applies after the \u003ccode\u003eQuery\u003c/code\u003e operation, but before the data is returned to you. Items that do not satisfy the \u003ccode\u003eFilterExpression\u003c/code\u003e criteria are not returned.\u003c/p\u003e \u003cp\u003eA \u003ccode\u003eFilterExpression\u003c/code\u003e does not allow key attributes. You cannot define a filter expression based on a partition key or a sort key.\u003c/p\u003e \u003cnote\u003e \u003cp\u003eA \u003ccode\u003eFilterExpression\u003c/code\u003e is applied after the items have already been read; the process of filtering does not consume any additional read capacity units.\u003c/p\u003e \u003c/note\u003e \u003cp\u003eFor more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#FilteringResults\"\u003eFilter Expressions\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"definitions.QueryInput.properties.IndexName.$ref": "#/definitions/IndexName",
	"definitions.QueryInput.properties.IndexName.description": "The name of an index to query. This index can be any local secondary index or global secondary index on the table. Note that if you use the \u003ccode\u003eIndexName\u003c/code\u003e parameter, you must also provide \u003ccode\u003eTableName.\u003c/code\u003e ",
	"definitions.QueryInput.properties.KeyConditionExpression.$ref": "#/definitions/KeyExpression",
	"definitions.QueryInput.properties.KeyConditionExpression.description": "\u003cp\u003eThe condition that specifies the key value(s) for items to be retrieved by the \u003ccode\u003eQuery\u003c/code\u003e action.\u003c/p\u003e \u003cp\u003eThe condition must perform an equality test on a single partition key value. The condition can also perform one of several comparison tests on a single sort key value. \u003ccode\u003eQuery\u003c/code\u003e can use \u003ccode\u003eKeyConditionExpression\u003c/code\u003e to retrieve one item with a given partition key value and sort key value, or several items that have the same partition key value but different sort key values.\u003c/p\u003e \u003cp\u003eThe partition key equality test is required, and must be specified in the following format:\u003c/p\u003e \u003cp\u003e \u003ccode\u003epartitionKeyName\u003c/code\u003e \u003ci\u003e=\u003c/i\u003e \u003ccode\u003e:partitionkeyval\u003c/code\u003e \u003c/p\u003e \u003cp\u003eIf you also want to provide a condition for the sort key, it must be combined using \u003ccode\u003eAND\u003c/code\u003e with the condition for the sort key. Following is an example, using the \u003cb\u003e=\u003c/b\u003e comparison operator for the sort key:\u003c/p\u003e \u003cp\u003e \u003ccode\u003epartitionKeyName\u003c/code\u003e \u003ccode\u003e=\u003c/code\u003e \u003ccode\u003e:partitionkeyval\u003c/code\u003e \u003ccode\u003eAND\u003c/code\u003e \u003ccode\u003esortKeyName\u003c/code\u003e \u003ccode\u003e=\u003c/code\u003e \u003ccode\u003e:sortkeyval\u003c/code\u003e \u003c/p\u003e \u003cp\u003eValid comparisons for the sort key condition are as follows:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003esortKeyName\u003c/code\u003e \u003ccode\u003e=\u003c/code\u003e \u003ccode\u003e:sortkeyval\u003c/code\u003e - true if the sort key value is equal to \u003ccode\u003e:sortkeyval\u003c/code\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003esortKeyName\u003c/code\u003e \u003ccode\u003e\u0026lt;\u003c/code\u003e \u003ccode\u003e:sortkeyval\u003c/code\u003e - true if the sort key value is less than \u003ccode\u003e:sortkeyval\u003c/code\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003esortKeyName\u003c/code\u003e \u003ccode\u003e\u0026lt;=\u003c/code\u003e \u003ccode\u003e:sortkeyval\u003c/code\u003e - true if the sort key value is less than or equal to \u003ccode\u003e:sortkeyval\u003c/code\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003esortKeyName\u003c/code\u003e \u003ccode\u003e\u0026gt;\u003c/code\u003e \u003ccode\u003e:sortkeyval\u003c/code\u003e - true if the sort key value is greater than \u003ccode\u003e:sortkeyval\u003c/code\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003esortKeyName\u003c/code\u003e \u003ccode\u003e\u0026gt;= \u003c/code\u003e \u003ccode\u003e:sortkeyval\u003c/code\u003e - true if the sort key value is greater than or equal to \u003ccode\u003e:sortkeyval\u003c/code\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003esortKeyName\u003c/code\u003e \u003ccode\u003eBETWEEN\u003c/code\u003e \u003ccode\u003e:sortkeyval1\u003c/code\u003e \u003ccode\u003eAND\u003c/code\u003e \u003ccode\u003e:sortkeyval2\u003c/code\u003e - true if the sort key value is greater than or equal to \u003ccode\u003e:sortkeyval1\u003c/code\u003e, and less than or equal to \u003ccode\u003e:sortkeyval2\u003c/code\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003ebegins_with (\u003c/code\u003e \u003ccode\u003esortKeyName\u003c/code\u003e, \u003ccode\u003e:sortkeyval\u003c/code\u003e \u003ccode\u003e)\u003c/code\u003e - true if the sort key value begins with a particular operand. (You cannot use this function with a sort key that is of type Number.) Note that the function name \u003ccode\u003ebegins_with\u003c/code\u003e is case-sensitive.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eUse the \u003ccode\u003eExpressionAttributeValues\u003c/code\u003e parameter to replace tokens such as \u003ccode\u003e:partitionval\u003c/code\u003e and \u003ccode\u003e:sortval\u003c/code\u003e with actual values at runtime.\u003c/p\u003e \u003cp\u003eYou can optionally use the \u003ccode\u003eExpressionAttributeNames\u003c/code\u003e parameter to replace the names of the partition key and sort key with placeholder tokens. This option might be necessary if an attribute name conflicts with a DynamoDB reserved word. For example, the following \u003ccode\u003eKeyConditionExpression\u003c/code\u003e parameter causes an error because \u003ci\u003eSize\u003c/i\u003e is a reserved word:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eSize = :myval\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eTo work around this, define a placeholder (such a \u003ccode\u003e#S\u003c/code\u003e) to represent the attribute name \u003ci\u003eSize\u003c/i\u003e. \u003ccode\u003eKeyConditionExpression\u003c/code\u003e then is as follows:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003e#S = :myval\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eFor a list of reserved words, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html\"\u003eReserved Words\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eFor more information on \u003ccode\u003eExpressionAttributeNames\u003c/code\u003e and \u003ccode\u003eExpressionAttributeValues\u003c/code\u003e, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ExpressionPlaceholders.html\"\u003eUsing Placeholders for Attribute Names and Values\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"definitions.QueryInput.properties.KeyConditions.$ref": "#/definitions/KeyConditions",
	"definitions.QueryInput.properties.KeyConditions.description": "This is a legacy parameter. Use \u003ccode\u003eKeyConditionExpression\u003c/code\u003e instead. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.KeyConditions.html\"\u003eKeyConditions\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.",
	"definitions.QueryInput.properties.Limit.$ref": "#/definitions/PositiveIntegerObject",
	"definitions.QueryInput.properties.Limit.description": "The maximum number of items to evaluate (not necessarily the number of matching items). If DynamoDB processes the number of items up to the limit while processing the results, it stops the operation and returns the matching values up to that point, and a key in \u003ccode\u003eLastEvaluatedKey\u003c/code\u003e to apply in a subsequent operation, so that you can pick up where you left off. Also, if the processed data set size exceeds 1 MB before DynamoDB reaches this limit, it stops the operation and returns the matching values up to the limit, and a key in \u003ccode\u003eLastEvaluatedKey\u003c/code\u003e to apply in a subsequent operation to continue the operation. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html\"\u003eQuery and Scan\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.",
	"definitions.QueryInput.properties.ProjectionExpression.$ref": "#/definitions/ProjectionExpression",
	"definitions.QueryInput.properties.ProjectionExpression.description": "\u003cp\u003eA string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.\u003c/p\u003e \u003cp\u003eIf no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.\u003c/p\u003e \u003cp\u003eFor more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\u003eAccessing Item Attributes\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"definitions.QueryInput.properties.QueryFilter.$ref": "#/definitions/FilterConditionMap",
	"definitions.QueryInput.properties.QueryFilter.description": "This is a legacy parameter. Use \u003ccode\u003eFilterExpression\u003c/code\u003e instead. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.QueryFilter.html\"\u003eQueryFilter\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.",
	"definitions.QueryInput.properties.ReturnConsumedCapacity.$ref": "#/definitions/ReturnConsumedCapacity",
	"definitions.QueryInput.properties.ScanIndexForward.$ref": "#/definitions/BooleanObject",
	"definitions.QueryInput.properties.ScanIndexForward.description": "\u003cp\u003eSpecifies the order for index traversal: If \u003ccode\u003etrue\u003c/code\u003e (default), the traversal is performed in ascending order; if \u003ccode\u003efalse\u003c/code\u003e, the traversal is performed in descending order. \u003c/p\u003e \u003cp\u003eItems with the same partition key value are stored in sorted order by sort key. If the sort key data type is Number, the results are stored in numeric order. For type String, the results are stored in order of ASCII character code values. For type Binary, DynamoDB treats each byte of the binary data as unsigned.\u003c/p\u003e \u003cp\u003eIf \u003ccode\u003eScanIndexForward\u003c/code\u003e is \u003ccode\u003etrue\u003c/code\u003e, DynamoDB returns the results in the order in which they are stored (by sort key value). This is the default behavior. If \u003ccode\u003eScanIndexForward\u003c/code\u003e is \u003ccode\u003efalse\u003c/code\u003e, DynamoDB reads the results in reverse order by sort key value, and then returns the results to the client.\u003c/p\u003e",
	"definitions.QueryInput.properties.Select.$ref": "#/definitions/Select",
	"definitions.QueryInput.properties.Select.description": "\u003cp\u003eThe attributes to be returned in the result. You can retrieve all item attributes, specific item attributes, the count of matching items, or in the case of an index, some or all of the attributes projected into the index.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eALL_ATTRIBUTES\u003c/code\u003e - Returns all of the item attributes from the specified table or index. If you query a local secondary index, then for each matching item in the index DynamoDB will fetch the entire item from the parent table. If the index is configured to project all item attributes, then all of the data can be obtained from the local secondary index, and no fetching is required.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eALL_PROJECTED_ATTRIBUTES\u003c/code\u003e - Allowed only when querying an index. Retrieves all attributes that have been projected into the index. If the index is configured to project all attributes, this return value is equivalent to specifying \u003ccode\u003eALL_ATTRIBUTES\u003c/code\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eCOUNT\u003c/code\u003e - Returns the number of matching items, rather than the matching items themselves.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eSPECIFIC_ATTRIBUTES\u003c/code\u003e - Returns only the attributes listed in \u003ccode\u003eAttributesToGet\u003c/code\u003e. This return value is equivalent to specifying \u003ccode\u003eAttributesToGet\u003c/code\u003e without specifying any value for \u003ccode\u003eSelect\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eIf you query or scan a local secondary index and request only attributes that are projected into that index, the operation will read only the index and not the table. If any of the requested attributes are not projected into the local secondary index, DynamoDB will fetch each of these attributes from the parent table. This extra fetching incurs additional throughput cost and latency.\u003c/p\u003e \u003cp\u003eIf you query or scan a global secondary index, you can only request attributes that are projected into the index. Global secondary index queries cannot fetch attributes from the parent table.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf neither \u003ccode\u003eSelect\u003c/code\u003e nor \u003ccode\u003eAttributesToGet\u003c/code\u003e are specified, DynamoDB defaults to \u003ccode\u003eALL_ATTRIBUTES\u003c/code\u003e when accessing a table, and \u003ccode\u003eALL_PROJECTED_ATTRIBUTES\u003c/code\u003e when accessing an index. You cannot use both \u003ccode\u003eSelect\u003c/code\u003e and \u003ccode\u003eAttributesToGet\u003c/code\u003e together in a single request, unless the value for \u003ccode\u003eSelect\u003c/code\u003e is \u003ccode\u003eSPECIFIC_ATTRIBUTES\u003c/code\u003e. (This usage is equivalent to specifying \u003ccode\u003eAttributesToGet\u003c/code\u003e without any value for \u003ccode\u003eSelect\u003c/code\u003e.)\u003c/p\u003e \u003cnote\u003e \u003cp\u003eIf you use the \u003ccode\u003eProjectionExpression\u003c/code\u003e parameter, then the value for \u003ccode\u003eSelect\u003c/code\u003e can only be \u003ccode\u003eSPECIFIC_ATTRIBUTES\u003c/code\u003e. Any other value for \u003ccode\u003eSelect\u003c/code\u003e will return an error.\u003c/p\u003e \u003c/note\u003e",
	"definitions.QueryInput.properties.TableName.$ref": "#/definitions/TableName",
	"definitions.QueryInput.properties.TableName.description": "The name of the table containing the requested items.",
	"definitions.QueryInput.required.length": 1,
	"definitions.QueryInput.required[0]": "TableName",
	"definitions.QueryInput.type": "object",
	"definitions.QueryOutput.description": "Represents the output of a \u003ccode\u003eQuery\u003c/code\u003e operation.",
	"definitions.QueryOutput.example.Count": 2,
	"definitions.QueryOutput.example.Items.length": 1,
	"definitions.QueryOutput.example.Items[0].SongTitle.S": "Call Me Today",
	"definitions.QueryOutput.example.ScannedCount": 2,
	"definitions.QueryOutput.properties.ConsumedCapacity.$ref": "#/definitions/ConsumedCapacity",
	"definitions.QueryOutput.properties.ConsumedCapacity.description": "The capacity units consumed by the \u003ccode\u003eQuery\u003c/code\u003e operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. \u003ccode\u003eConsumedCapacity\u003c/code\u003e is only returned if the \u003ccode\u003eReturnConsumedCapacity\u003c/code\u003e parameter was specified For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html\"\u003eProvisioned Throughput\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.",
	"definitions.QueryOutput.properties.Count.$ref": "#/definitions/Integer",
	"definitions.QueryOutput.properties.Count.description": "\u003cp\u003eThe number of items in the response.\u003c/p\u003e \u003cp\u003eIf you used a \u003ccode\u003eQueryFilter\u003c/code\u003e in the request, then \u003ccode\u003eCount\u003c/code\u003e is the number of items returned after the filter was applied, and \u003ccode\u003eScannedCount\u003c/code\u003e is the number of matching items before the filter was applied.\u003c/p\u003e \u003cp\u003eIf you did not use a filter in the request, then \u003ccode\u003eCount\u003c/code\u003e and \u003ccode\u003eScannedCount\u003c/code\u003e are the same.\u003c/p\u003e",
	"definitions.QueryOutput.properties.Items.$ref": "#/definitions/ItemList",
	"definitions.QueryOutput.properties.Items.description": "An array of item attributes that match the query criteria. Each element in this array consists of an attribute name and the value for that attribute.",
	"definitions.QueryOutput.properties.LastEvaluatedKey.$ref": "#/definitions/Key",
	"definitions.QueryOutput.properties.LastEvaluatedKey.description": "\u003cp\u003eThe primary key of the item where the operation stopped, inclusive of the previous result set. Use this value to start a new operation, excluding this value in the new request.\u003c/p\u003e \u003cp\u003eIf \u003ccode\u003eLastEvaluatedKey\u003c/code\u003e is empty, then the \"last page\" of results has been processed and there is no more data to be retrieved.\u003c/p\u003e \u003cp\u003eIf \u003ccode\u003eLastEvaluatedKey\u003c/code\u003e is not empty, it does not necessarily mean that there is more data in the result set. The only way to know when you have reached the end of the result set is when \u003ccode\u003eLastEvaluatedKey\u003c/code\u003e is empty.\u003c/p\u003e",
	"definitions.QueryOutput.properties.ScannedCount.$ref": "#/definitions/Integer",
	"definitions.QueryOutput.properties.ScannedCount.description": "\u003cp\u003eThe number of items evaluated, before any \u003ccode\u003eQueryFilter\u003c/code\u003e is applied. A high \u003ccode\u003eScannedCount\u003c/code\u003e value with few, or no, \u003ccode\u003eCount\u003c/code\u003e results indicates an inefficient \u003ccode\u003eQuery\u003c/code\u003e operation. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Count\"\u003eCount and ScannedCount\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eIf you did not use a filter in the request, then \u003ccode\u003eScannedCount\u003c/code\u003e is the same as \u003ccode\u003eCount\u003c/code\u003e.\u003c/p\u003e",
	"definitions.QueryOutput.type": "object",
	"definitions.ResourceArnString.maxLength": 1283,
	"definitions.ResourceArnString.minLength": 1,
	"definitions.ResourceArnString.type": "string",
	"definitions.ResourceInUseException.description": "The operation conflicts with the resource's availability. For example, you attempted to recreate an existing table, or tried to delete a table currently in the \u003ccode\u003eCREATING\u003c/code\u003e state.",
	"definitions.ResourceInUseException.properties.message.$ref": "#/definitions/ErrorMessage",
	"definitions.ResourceInUseException.properties.message.description": "The resource which is being attempted to be changed is in use.",
	"definitions.ResourceInUseException.type": "object",
	"definitions.ResourceNotFoundException.description": "The operation tried to access a nonexistent table or index. The resource might not be specified correctly, or its status might not be \u003ccode\u003eACTIVE\u003c/code\u003e.",
	"definitions.ResourceNotFoundException.properties.message.$ref": "#/definitions/ErrorMessage",
	"definitions.ResourceNotFoundException.properties.message.description": "The resource which is being requested does not exist.",
	"definitions.ResourceNotFoundException.type": "object",
	"definitions.ReturnConsumedCapacity.description": "\u003cp\u003eDetermines the level of detail about provisioned throughput consumption that is returned in the response:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eINDEXES\u003c/code\u003e - The response includes the aggregate \u003ccode\u003eConsumedCapacity\u003c/code\u003e for the operation, together with \u003ccode\u003eConsumedCapacity\u003c/code\u003e for each table and secondary index that was accessed.\u003c/p\u003e \u003cp\u003eNote that some operations, such as \u003ccode\u003eGetItem\u003c/code\u003e and \u003ccode\u003eBatchGetItem\u003c/code\u003e, do not access any indexes at all. In these cases, specifying \u003ccode\u003eINDEXES\u003c/code\u003e will only return \u003ccode\u003eConsumedCapacity\u003c/code\u003e information for table(s).\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eTOTAL\u003c/code\u003e - The response includes only the aggregate \u003ccode\u003eConsumedCapacity\u003c/code\u003e for the operation.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eNONE\u003c/code\u003e - No \u003ccode\u003eConsumedCapacity\u003c/code\u003e details are included in the response.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
	"definitions.ReturnConsumedCapacity.enum.length": 3,
	"definitions.ReturnConsumedCapacity.enum[0]": "INDEXES",
	"definitions.ReturnConsumedCapacity.enum[1]": "TOTAL",
	"definitions.ReturnConsumedCapacity.enum[2]": "NONE",
	"definitions.ReturnConsumedCapacity.type": "string",
	"definitions.ReturnItemCollectionMetrics.enum.length": 2,
	"definitions.ReturnItemCollectionMetrics.enum[0]": "SIZE",
	"definitions.ReturnItemCollectionMetrics.enum[1]": "NONE",
	"definitions.ReturnItemCollectionMetrics.type": "string",
	"definitions.ReturnValue.enum.length": 5,
	"definitions.ReturnValue.enum[0]": "NONE",
	"definitions.ReturnValue.enum[1]": "ALL_OLD",
	"definitions.ReturnValue.enum[2]": "UPDATED_OLD",
	"definitions.ReturnValue.enum[3]": "ALL_NEW",
	"definitions.ReturnValue.enum[4]": "UPDATED_NEW",
	"definitions.ReturnValue.type": "string",
	"definitions.ScalarAttributeType.enum.length": 3,
	"definitions.ScalarAttributeType.enum[0]": "S",
	"definitions.ScalarAttributeType.enum[1]": "N",
	"definitions.ScalarAttributeType.enum[2]": "B",
	"definitions.ScalarAttributeType.type": "string",
	"definitions.ScanInput.description": "Represents the input of a \u003ccode\u003eScan\u003c/code\u003e operation.",
	"definitions.ScanInput.example.ExpressionAttributeNames.AT": "AlbumTitle",
	"definitions.ScanInput.example.ExpressionAttributeNames.ST": "SongTitle",
	"definitions.ScanInput.example.ExpressionAttributeValues.:a.S": "No One You Know",
	"definitions.ScanInput.example.FilterExpression": "Artist = :a",
	"definitions.ScanInput.example.ProjectionExpression": "#ST, #AT",
	"definitions.ScanInput.example.TableName": "Music",
	"definitions.ScanInput.properties.AttributesToGet.$ref": "#/definitions/AttributeNameList",
	"definitions.ScanInput.properties.AttributesToGet.description": "This is a legacy parameter. Use \u003ccode\u003eProjectionExpression\u003c/code\u003e instead. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html\"\u003eAttributesToGet\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.",
	"definitions.ScanInput.properties.ConditionalOperator.$ref": "#/definitions/ConditionalOperator",
	"definitions.ScanInput.properties.ConditionalOperator.description": "This is a legacy parameter. Use \u003ccode\u003eFilterExpression\u003c/code\u003e instead. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html\"\u003eConditionalOperator\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.",
	"definitions.ScanInput.properties.ConsistentRead.$ref": "#/definitions/ConsistentRead",
	"definitions.ScanInput.properties.ConsistentRead.description": "\u003cp\u003eA Boolean value that determines the read consistency model during the scan:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eIf \u003ccode\u003eConsistentRead\u003c/code\u003e is \u003ccode\u003efalse\u003c/code\u003e, then the data returned from \u003ccode\u003eScan\u003c/code\u003e might not contain the results from other recently completed write operations (PutItem, UpdateItem or DeleteItem).\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eIf \u003ccode\u003eConsistentRead\u003c/code\u003e is \u003ccode\u003etrue\u003c/code\u003e, then all of the write operations that completed before the \u003ccode\u003eScan\u003c/code\u003e began are guaranteed to be contained in the \u003ccode\u003eScan\u003c/code\u003e response.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eThe default setting for \u003ccode\u003eConsistentRead\u003c/code\u003e is \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eThe \u003ccode\u003eConsistentRead\u003c/code\u003e parameter is not supported on global secondary indexes. If you scan a global secondary index with \u003ccode\u003eConsistentRead\u003c/code\u003e set to true, you will receive a \u003ccode\u003eValidationException\u003c/code\u003e.\u003c/p\u003e",
	"definitions.ScanInput.properties.ExclusiveStartKey.$ref": "#/definitions/Key",
	"definitions.ScanInput.properties.ExclusiveStartKey.description": "\u003cp\u003eThe primary key of the first item that this operation will evaluate. Use the value that was returned for \u003ccode\u003eLastEvaluatedKey\u003c/code\u003e in the previous operation.\u003c/p\u003e \u003cp\u003eThe data type for \u003ccode\u003eExclusiveStartKey\u003c/code\u003e must be String, Number or Binary. No set data types are allowed.\u003c/p\u003e \u003cp\u003eIn a parallel scan, a \u003ccode\u003eScan\u003c/code\u003e request that includes \u003ccode\u003eExclusiveStartKey\u003c/code\u003e must specify the same segment whose previous \u003ccode\u003eScan\u003c/code\u003e returned the corresponding value of \u003ccode\u003eLastEvaluatedKey\u003c/code\u003e.\u003c/p\u003e",
	"definitions.ScanInput.properties.ExpressionAttributeNames.$ref": "#/definitions/ExpressionAttributeNameMap",
	"definitions.ScanInput.properties.ExpressionAttributeNames.description": "\u003cp\u003eOne or more substitution tokens for attribute names in an expression. The following are some use cases for using \u003ccode\u003eExpressionAttributeNames\u003c/code\u003e:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eTo access an attribute whose name conflicts with a DynamoDB reserved word.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo create a placeholder for repeating occurrences of an attribute name in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo prevent special characters in an attribute name from being misinterpreted in an expression.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eUse the \u003cb\u003e#\u003c/b\u003e character in an expression to dereference an attribute name. For example, consider the following attribute name:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003ePercentile\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eThe name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html\"\u003eReserved Words\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e). To work around this, you could specify the following for \u003ccode\u003eExpressionAttributeNames\u003c/code\u003e:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003e{\"#P\":\"Percentile\"}\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eYou could then use this substitution in an expression, as in this example:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003e#P = :val\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cnote\u003e \u003cp\u003eTokens that begin with the \u003cb\u003e:\u003c/b\u003e character are \u003ci\u003eexpression attribute values\u003c/i\u003e, which are placeholders for the actual value at runtime.\u003c/p\u003e \u003c/note\u003e \u003cp\u003eFor more information on expression attribute names, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\u003eAccessing Item Attributes\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"definitions.ScanInput.properties.ExpressionAttributeValues.$ref": "#/definitions/ExpressionAttributeValueMap",
	"definitions.ScanInput.properties.ExpressionAttributeValues.description": "\u003cp\u003eOne or more values that can be substituted in an expression.\u003c/p\u003e \u003cp\u003eUse the \u003cb\u003e:\u003c/b\u003e (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the \u003ci\u003eProductStatus\u003c/i\u003e attribute was one of the following: \u003c/p\u003e \u003cp\u003e \u003ccode\u003eAvailable | Backordered | Discontinued\u003c/code\u003e \u003c/p\u003e \u003cp\u003eYou would first need to specify \u003ccode\u003eExpressionAttributeValues\u003c/code\u003e as follows:\u003c/p\u003e \u003cp\u003e \u003ccode\u003e{ \":avail\":{\"S\":\"Available\"}, \":back\":{\"S\":\"Backordered\"}, \":disc\":{\"S\":\"Discontinued\"} }\u003c/code\u003e \u003c/p\u003e \u003cp\u003eYou could then use these values in an expression, such as this:\u003c/p\u003e \u003cp\u003e \u003ccode\u003eProductStatus IN (:avail, :back, :disc)\u003c/code\u003e \u003c/p\u003e \u003cp\u003eFor more information on expression attribute values, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html\"\u003eSpecifying Conditions\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"definitions.ScanInput.properties.FilterExpression.$ref": "#/definitions/ConditionExpression",
	"definitions.ScanInput.properties.FilterExpression.description": "\u003cp\u003eA string that contains conditions that DynamoDB applies after the \u003ccode\u003eScan\u003c/code\u003e operation, but before the data is returned to you. Items that do not satisfy the \u003ccode\u003eFilterExpression\u003c/code\u003e criteria are not returned.\u003c/p\u003e \u003cnote\u003e \u003cp\u003eA \u003ccode\u003eFilterExpression\u003c/code\u003e is applied after the items have already been read; the process of filtering does not consume any additional read capacity units.\u003c/p\u003e \u003c/note\u003e \u003cp\u003eFor more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#FilteringResults\"\u003eFilter Expressions\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"definitions.ScanInput.properties.IndexName.$ref": "#/definitions/IndexName",
	"definitions.ScanInput.properties.IndexName.description": "The name of a secondary index to scan. This index can be any local secondary index or global secondary index. Note that if you use the \u003ccode\u003eIndexName\u003c/code\u003e parameter, you must also provide \u003ccode\u003eTableName\u003c/code\u003e.",
	"definitions.ScanInput.properties.Limit.$ref": "#/definitions/PositiveIntegerObject",
	"definitions.ScanInput.properties.Limit.description": "The maximum number of items to evaluate (not necessarily the number of matching items). If DynamoDB processes the number of items up to the limit while processing the results, it stops the operation and returns the matching values up to that point, and a key in \u003ccode\u003eLastEvaluatedKey\u003c/code\u003e to apply in a subsequent operation, so that you can pick up where you left off. Also, if the processed data set size exceeds 1 MB before DynamoDB reaches this limit, it stops the operation and returns the matching values up to the limit, and a key in \u003ccode\u003eLastEvaluatedKey\u003c/code\u003e to apply in a subsequent operation to continue the operation. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html\"\u003eQuery and Scan\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.",
	"definitions.ScanInput.properties.ProjectionExpression.$ref": "#/definitions/ProjectionExpression",
	"definitions.ScanInput.properties.ProjectionExpression.description": "\u003cp\u003eA string that identifies one or more attributes to retrieve from the specified table or index. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.\u003c/p\u003e \u003cp\u003eIf no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.\u003c/p\u003e \u003cp\u003eFor more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\u003eAccessing Item Attributes\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"definitions.ScanInput.properties.ReturnConsumedCapacity.$ref": "#/definitions/ReturnConsumedCapacity",
	"definitions.ScanInput.properties.ScanFilter.$ref": "#/definitions/FilterConditionMap",
	"definitions.ScanInput.properties.ScanFilter.description": "This is a legacy parameter. Use \u003ccode\u003eFilterExpression\u003c/code\u003e instead. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ScanFilter.html\"\u003eScanFilter\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.",
	"definitions.ScanInput.properties.Segment.$ref": "#/definitions/ScanSegment",
	"definitions.ScanInput.properties.Segment.description": "\u003cp\u003eFor a parallel \u003ccode\u003eScan\u003c/code\u003e request, \u003ccode\u003eSegment\u003c/code\u003e identifies an individual segment to be scanned by an application worker.\u003c/p\u003e \u003cp\u003eSegment IDs are zero-based, so the first segment is always 0. For example, if you want to use four application threads to scan a table or an index, then the first thread specifies a \u003ccode\u003eSegment\u003c/code\u003e value of 0, the second thread specifies 1, and so on.\u003c/p\u003e \u003cp\u003eThe value of \u003ccode\u003eLastEvaluatedKey\u003c/code\u003e returned from a parallel \u003ccode\u003eScan\u003c/code\u003e request must be used as \u003ccode\u003eExclusiveStartKey\u003c/code\u003e with the same segment ID in a subsequent \u003ccode\u003eScan\u003c/code\u003e operation.\u003c/p\u003e \u003cp\u003eThe value for \u003ccode\u003eSegment\u003c/code\u003e must be greater than or equal to 0, and less than the value provided for \u003ccode\u003eTotalSegments\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eIf you provide \u003ccode\u003eSegment\u003c/code\u003e, you must also provide \u003ccode\u003eTotalSegments\u003c/code\u003e.\u003c/p\u003e",
	"definitions.ScanInput.properties.Select.$ref": "#/definitions/Select",
	"definitions.ScanInput.properties.Select.description": "\u003cp\u003eThe attributes to be returned in the result. You can retrieve all item attributes, specific item attributes, the count of matching items, or in the case of an index, some or all of the attributes projected into the index.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eALL_ATTRIBUTES\u003c/code\u003e - Returns all of the item attributes from the specified table or index. If you query a local secondary index, then for each matching item in the index DynamoDB will fetch the entire item from the parent table. If the index is configured to project all item attributes, then all of the data can be obtained from the local secondary index, and no fetching is required.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eALL_PROJECTED_ATTRIBUTES\u003c/code\u003e - Allowed only when querying an index. Retrieves all attributes that have been projected into the index. If the index is configured to project all attributes, this return value is equivalent to specifying \u003ccode\u003eALL_ATTRIBUTES\u003c/code\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eCOUNT\u003c/code\u003e - Returns the number of matching items, rather than the matching items themselves.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eSPECIFIC_ATTRIBUTES\u003c/code\u003e - Returns only the attributes listed in \u003ccode\u003eAttributesToGet\u003c/code\u003e. This return value is equivalent to specifying \u003ccode\u003eAttributesToGet\u003c/code\u003e without specifying any value for \u003ccode\u003eSelect\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eIf you query or scan a local secondary index and request only attributes that are projected into that index, the operation will read only the index and not the table. If any of the requested attributes are not projected into the local secondary index, DynamoDB will fetch each of these attributes from the parent table. This extra fetching incurs additional throughput cost and latency.\u003c/p\u003e \u003cp\u003eIf you query or scan a global secondary index, you can only request attributes that are projected into the index. Global secondary index queries cannot fetch attributes from the parent table.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf neither \u003ccode\u003eSelect\u003c/code\u003e nor \u003ccode\u003eAttributesToGet\u003c/code\u003e are specified, DynamoDB defaults to \u003ccode\u003eALL_ATTRIBUTES\u003c/code\u003e when accessing a table, and \u003ccode\u003eALL_PROJECTED_ATTRIBUTES\u003c/code\u003e when accessing an index. You cannot use both \u003ccode\u003eSelect\u003c/code\u003e and \u003ccode\u003eAttributesToGet\u003c/code\u003e together in a single request, unless the value for \u003ccode\u003eSelect\u003c/code\u003e is \u003ccode\u003eSPECIFIC_ATTRIBUTES\u003c/code\u003e. (This usage is equivalent to specifying \u003ccode\u003eAttributesToGet\u003c/code\u003e without any value for \u003ccode\u003eSelect\u003c/code\u003e.)\u003c/p\u003e \u003cnote\u003e \u003cp\u003eIf you use the \u003ccode\u003eProjectionExpression\u003c/code\u003e parameter, then the value for \u003ccode\u003eSelect\u003c/code\u003e can only be \u003ccode\u003eSPECIFIC_ATTRIBUTES\u003c/code\u003e. Any other value for \u003ccode\u003eSelect\u003c/code\u003e will return an error.\u003c/p\u003e \u003c/note\u003e",
	"definitions.ScanInput.properties.TableName.$ref": "#/definitions/TableName",
	"definitions.ScanInput.properties.TableName.description": "The name of the table containing the requested items; or, if you provide \u003ccode\u003eIndexName\u003c/code\u003e, the name of the table to which that index belongs.",
	"definitions.ScanInput.properties.TotalSegments.$ref": "#/definitions/ScanTotalSegments",
	"definitions.ScanInput.properties.TotalSegments.description": "\u003cp\u003eFor a parallel \u003ccode\u003eScan\u003c/code\u003e request, \u003ccode\u003eTotalSegments\u003c/code\u003e represents the total number of segments into which the \u003ccode\u003eScan\u003c/code\u003e operation will be divided. The value of \u003ccode\u003eTotalSegments\u003c/code\u003e corresponds to the number of application workers that will perform the parallel scan. For example, if you want to use four application threads to scan a table or an index, specify a \u003ccode\u003eTotalSegments\u003c/code\u003e value of 4.\u003c/p\u003e \u003cp\u003eThe value for \u003ccode\u003eTotalSegments\u003c/code\u003e must be greater than or equal to 1, and less than or equal to 1000000. If you specify a \u003ccode\u003eTotalSegments\u003c/code\u003e value of 1, the \u003ccode\u003eScan\u003c/code\u003e operation will be sequential rather than parallel.\u003c/p\u003e \u003cp\u003eIf you specify \u003ccode\u003eTotalSegments\u003c/code\u003e, you must also specify \u003ccode\u003eSegment\u003c/code\u003e.\u003c/p\u003e",
	"definitions.ScanInput.required.length": 1,
	"definitions.ScanInput.required[0]": "TableName",
	"definitions.ScanInput.type": "object",
	"definitions.ScanOutput.description": "Represents the output of a \u003ccode\u003eScan\u003c/code\u003e operation.",
	"definitions.ScanOutput.example.Count": 2,
	"definitions.ScanOutput.example.Items.length": 2,
	"definitions.ScanOutput.example.Items[0].AlbumTitle.S": "Somewhat Famous",
	"definitions.ScanOutput.example.Items[0].SongTitle.S": "Call Me Today",
	"definitions.ScanOutput.example.Items[1].AlbumTitle.S": "Blue Sky Blues",
	"definitions.ScanOutput.example.Items[1].SongTitle.S": "Scared of My Shadow",
	"definitions.ScanOutput.example.ScannedCount": 3,
	"definitions.ScanOutput.properties.ConsumedCapacity.$ref": "#/definitions/ConsumedCapacity",
	"definitions.ScanOutput.properties.ConsumedCapacity.description": "The capacity units consumed by the \u003ccode\u003eScan\u003c/code\u003e operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. \u003ccode\u003eConsumedCapacity\u003c/code\u003e is only returned if the \u003ccode\u003eReturnConsumedCapacity\u003c/code\u003e parameter was specified. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html\"\u003eProvisioned Throughput\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.",
	"definitions.ScanOutput.properties.Count.$ref": "#/definitions/Integer",
	"definitions.ScanOutput.properties.Count.description": "\u003cp\u003eThe number of items in the response.\u003c/p\u003e \u003cp\u003eIf you set \u003ccode\u003eScanFilter\u003c/code\u003e in the request, then \u003ccode\u003eCount\u003c/code\u003e is the number of items returned after the filter was applied, and \u003ccode\u003eScannedCount\u003c/code\u003e is the number of matching items before the filter was applied.\u003c/p\u003e \u003cp\u003eIf you did not use a filter in the request, then \u003ccode\u003eCount\u003c/code\u003e is the same as \u003ccode\u003eScannedCount\u003c/code\u003e.\u003c/p\u003e",
	"definitions.ScanOutput.properties.Items.$ref": "#/definitions/ItemList",
	"definitions.ScanOutput.properties.Items.description": "An array of item attributes that match the scan criteria. Each element in this array consists of an attribute name and the value for that attribute.",
	"definitions.ScanOutput.properties.LastEvaluatedKey.$ref": "#/definitions/Key",
	"definitions.ScanOutput.properties.LastEvaluatedKey.description": "\u003cp\u003eThe primary key of the item where the operation stopped, inclusive of the previous result set. Use this value to start a new operation, excluding this value in the new request.\u003c/p\u003e \u003cp\u003eIf \u003ccode\u003eLastEvaluatedKey\u003c/code\u003e is empty, then the \"last page\" of results has been processed and there is no more data to be retrieved.\u003c/p\u003e \u003cp\u003eIf \u003ccode\u003eLastEvaluatedKey\u003c/code\u003e is not empty, it does not necessarily mean that there is more data in the result set. The only way to know when you have reached the end of the result set is when \u003ccode\u003eLastEvaluatedKey\u003c/code\u003e is empty.\u003c/p\u003e",
	"definitions.ScanOutput.properties.ScannedCount.$ref": "#/definitions/Integer",
	"definitions.ScanOutput.properties.ScannedCount.description": "\u003cp\u003eThe number of items evaluated, before any \u003ccode\u003eScanFilter\u003c/code\u003e is applied. A high \u003ccode\u003eScannedCount\u003c/code\u003e value with few, or no, \u003ccode\u003eCount\u003c/code\u003e results indicates an inefficient \u003ccode\u003eScan\u003c/code\u003e operation. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Count\"\u003eCount and ScannedCount\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eIf you did not use a filter in the request, then \u003ccode\u003eScannedCount\u003c/code\u003e is the same as \u003ccode\u003eCount\u003c/code\u003e.\u003c/p\u003e",
	"definitions.ScanOutput.type": "object",
	"definitions.ScanSegment.maximum": 999999,
	"definitions.ScanSegment.minimum": 0,
	"definitions.ScanSegment.type": "integer",
	"definitions.ScanTotalSegments.maximum": 1000000,
	"definitions.ScanTotalSegments.minimum": 1,
	"definitions.ScanTotalSegments.type": "integer",
	"definitions.SecondaryIndexesCapacityMap.items.properties.key.$ref": "#/definitions/IndexName",
	"definitions.SecondaryIndexesCapacityMap.items.properties.value.$ref": "#/definitions/Capacity",
	"definitions.SecondaryIndexesCapacityMap.items.type": "object",
	"definitions.SecondaryIndexesCapacityMap.type": "array",
	"definitions.Select.enum.length": 4,
	"definitions.Select.enum[0]": "ALL_ATTRIBUTES",
	"definitions.Select.enum[1]": "ALL_PROJECTED_ATTRIBUTES",
	"definitions.Select.enum[2]": "SPECIFIC_ATTRIBUTES",
	"definitions.Select.enum[3]": "COUNT",
	"definitions.Select.type": "string",
	"definitions.StreamArn.maxLength": 1024,
	"definitions.StreamArn.minLength": 37,
	"definitions.StreamArn.type": "string",
	"definitions.StreamEnabled.type": "boolean",
	"definitions.StreamSpecification.description": "Represents the DynamoDB Streams configuration for a table in DynamoDB.",
	"definitions.StreamSpecification.properties.StreamEnabled.$ref": "#/definitions/StreamEnabled",
	"definitions.StreamSpecification.properties.StreamEnabled.description": "Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.",
	"definitions.StreamSpecification.properties.StreamViewType.$ref": "#/definitions/StreamViewType",
	"definitions.StreamSpecification.properties.StreamViewType.description": "\u003cp\u003e When an item in the table is modified, \u003ccode\u003eStreamViewType\u003c/code\u003e determines what information is written to the stream for this table. Valid values for \u003ccode\u003eStreamViewType\u003c/code\u003e are:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eKEYS_ONLY\u003c/code\u003e - Only the key attributes of the modified item are written to the stream.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eNEW_IMAGE\u003c/code\u003e - The entire item, as it appears after it was modified, is written to the stream.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eOLD_IMAGE\u003c/code\u003e - The entire item, as it appeared before it was modified, is written to the stream.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eNEW_AND_OLD_IMAGES\u003c/code\u003e - Both the new and the old item images of the item are written to the stream.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
	"definitions.StreamSpecification.type": "object",
	"definitions.StreamViewType.enum.length": 4,
	"definitions.StreamViewType.enum[0]": "NEW_IMAGE",
	"definitions.StreamViewType.enum[1]": "OLD_IMAGE",
	"definitions.StreamViewType.enum[2]": "NEW_AND_OLD_IMAGES",
	"definitions.StreamViewType.enum[3]": "KEYS_ONLY",
	"definitions.StreamViewType.type": "string",
	"definitions.String.type": "string",
	"definitions.StringAttributeValue.type": "string",
	"definitions.StringSetAttributeValue.items.$ref": "#/definitions/StringAttributeValue",
	"definitions.StringSetAttributeValue.type": "array",
	"definitions.TableDescription.description": "Represents the properties of a table.",
	"definitions.TableDescription.properties.AttributeDefinitions.$ref": "#/definitions/AttributeDefinitions",
	"definitions.TableDescription.properties.AttributeDefinitions.description": "\u003cp\u003eAn array of \u003ccode\u003eAttributeDefinition\u003c/code\u003e objects. Each of these objects describes one attribute in the table and index key schema.\u003c/p\u003e \u003cp\u003eEach \u003ccode\u003eAttributeDefinition\u003c/code\u003e object in this array is composed of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eAttributeName\u003c/code\u003e - The name of the attribute.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eAttributeType\u003c/code\u003e - The data type for the attribute.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
	"definitions.TableDescription.properties.CreationDateTime.$ref": "#/definitions/Date",
	"definitions.TableDescription.properties.CreationDateTime.description": "The date and time when the table was created, in \u003ca href=\"http://www.epochconverter.com/\"\u003eUNIX epoch time\u003c/a\u003e format.",
	"definitions.TableDescription.properties.GlobalSecondaryIndexes.$ref": "#/definitions/GlobalSecondaryIndexDescriptionList",
	"definitions.TableDescription.properties.GlobalSecondaryIndexes.description": "\u003cp\u003eThe global secondary indexes, if any, on the table. Each index is scoped to a given partition key value. Each element is composed of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eBackfilling\u003c/code\u003e - If true, then the index is currently in the backfilling phase. Backfilling occurs only when a new global secondary index is added to the table; it is the process by which DynamoDB populates the new index with data from the table. (This attribute does not appear for indexes that were created during a \u003ccode\u003eCreateTable\u003c/code\u003e operation.)\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eIndexName\u003c/code\u003e - The name of the global secondary index.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eIndexSizeBytes\u003c/code\u003e - The total size of the global secondary index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eIndexStatus\u003c/code\u003e - The current status of the global secondary index:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eCREATING\u003c/code\u003e - The index is being created.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eUPDATING\u003c/code\u003e - The index is being updated.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eDELETING\u003c/code\u003e - The index is being deleted.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eACTIVE\u003c/code\u003e - The index is ready for use.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eItemCount\u003c/code\u003e - The number of items in the global secondary index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eKeySchema\u003c/code\u003e - Specifies the complete index key schema. The attribute names in the key schema must be between 1 and 255 characters (inclusive). The key schema must begin with the same partition key as the table.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eProjection\u003c/code\u003e - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eProjectionType\u003c/code\u003e - One of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eKEYS_ONLY\u003c/code\u003e - Only the index and primary keys are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eINCLUDE\u003c/code\u003e - Only the specified table attributes are projected into the index. The list of projected attributes are in \u003ccode\u003eNonKeyAttributes\u003c/code\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eALL\u003c/code\u003e - All of the table attributes are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eNonKeyAttributes\u003c/code\u003e - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in \u003ccode\u003eNonKeyAttributes\u003c/code\u003e, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eProvisionedThroughput\u003c/code\u003e - The provisioned throughput settings for the global secondary index, consisting of read and write capacity units, along with data about increases and decreases. \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf the table is in the \u003ccode\u003eDELETING\u003c/code\u003e state, no information about indexes will be returned.\u003c/p\u003e",
	"definitions.TableDescription.properties.ItemCount.$ref": "#/definitions/Long",
	"definitions.TableDescription.properties.ItemCount.description": "The number of items in the specified table. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.",
	"definitions.TableDescription.properties.KeySchema.$ref": "#/definitions/KeySchema",
	"definitions.TableDescription.properties.KeySchema.description": "\u003cp\u003eThe primary key structure for the table. Each \u003ccode\u003eKeySchemaElement\u003c/code\u003e consists of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eAttributeName\u003c/code\u003e - The name of the attribute.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eKeyType\u003c/code\u003e - The role of the attribute:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eHASH\u003c/code\u003e - partition key\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eRANGE\u003c/code\u003e - sort key\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cnote\u003e \u003cp\u003eThe partition key of an item is also known as its \u003ci\u003ehash attribute\u003c/i\u003e. The term \"hash attribute\" derives from DynamoDB' usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\u003c/p\u003e \u003cp\u003eThe sort key of an item is also known as its \u003ci\u003erange attribute\u003c/i\u003e. The term \"range attribute\" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\u003c/p\u003e \u003c/note\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eFor more information about primary keys, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey\"\u003ePrimary Key\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"definitions.TableDescription.properties.LatestStreamArn.$ref": "#/definitions/StreamArn",
	"definitions.TableDescription.properties.LatestStreamArn.description": "The Amazon Resource Name (ARN) that uniquely identifies the latest stream for this table.",
	"definitions.TableDescription.properties.LatestStreamLabel.$ref": "#/definitions/String",
	"definitions.TableDescription.properties.LatestStreamLabel.description": "\u003cp\u003eA timestamp, in ISO 8601 format, for this stream.\u003c/p\u003e \u003cp\u003eNote that \u003ccode\u003eLatestStreamLabel\u003c/code\u003e is not a unique identifier for the stream, because it is possible that a stream from another table might have the same timestamp. However, the combination of the following three elements is guaranteed to be unique:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003ethe AWS customer ID.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003ethe table name.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003ethe \u003ccode\u003eStreamLabel\u003c/code\u003e.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
	"definitions.TableDescription.properties.LocalSecondaryIndexes.$ref": "#/definitions/LocalSecondaryIndexDescriptionList",
	"definitions.TableDescription.properties.LocalSecondaryIndexes.description": "\u003cp\u003eRepresents one or more local secondary indexes on the table. Each index is scoped to a given partition key value. Tables with one or more local secondary indexes are subject to an item collection size limit, where the amount of data within a given item collection cannot exceed 10 GB. Each element is composed of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eIndexName\u003c/code\u003e - The name of the local secondary index.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eKeySchema\u003c/code\u003e - Specifies the complete index key schema. The attribute names in the key schema must be between 1 and 255 characters (inclusive). The key schema must begin with the same partition key as the table.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eProjection\u003c/code\u003e - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eProjectionType\u003c/code\u003e - One of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eKEYS_ONLY\u003c/code\u003e - Only the index and primary keys are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eINCLUDE\u003c/code\u003e - Only the specified table attributes are projected into the index. The list of projected attributes are in \u003ccode\u003eNonKeyAttributes\u003c/code\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eALL\u003c/code\u003e - All of the table attributes are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eNonKeyAttributes\u003c/code\u003e - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in \u003ccode\u003eNonKeyAttributes\u003c/code\u003e, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eIndexSizeBytes\u003c/code\u003e - Represents the total size of the index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eItemCount\u003c/code\u003e - Represents the number of items in the index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf the table is in the \u003ccode\u003eDELETING\u003c/code\u003e state, no information about indexes will be returned.\u003c/p\u003e",
	"definitions.TableDescription.properties.ProvisionedThroughput.$ref": "#/definitions/ProvisionedThroughputDescription",
	"definitions.TableDescription.properties.ProvisionedThroughput.description": "The provisioned throughput settings for the table, consisting of read and write capacity units, along with data about increases and decreases.",
	"definitions.TableDescription.properties.StreamSpecification.$ref": "#/definitions/StreamSpecification",
	"definitions.TableDescription.properties.StreamSpecification.description": "The current DynamoDB Streams configuration for the table.",
	"definitions.TableDescription.properties.TableArn.$ref": "#/definitions/String",
	"definitions.TableDescription.properties.TableArn.description": "The Amazon Resource Name (ARN) that uniquely identifies the table.",
	"definitions.TableDescription.properties.TableName.$ref": "#/definitions/TableName",
	"definitions.TableDescription.properties.TableName.description": "The name of the table.",
	"definitions.TableDescription.properties.TableSizeBytes.$ref": "#/definitions/Long",
	"definitions.TableDescription.properties.TableSizeBytes.description": "The total size of the specified table, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.",
	"definitions.TableDescription.properties.TableStatus.$ref": "#/definitions/TableStatus",
	"definitions.TableDescription.properties.TableStatus.description": "\u003cp\u003eThe current state of the table:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eCREATING\u003c/code\u003e - The table is being created.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eUPDATING\u003c/code\u003e - The table is being updated.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eDELETING\u003c/code\u003e - The table is being deleted.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eACTIVE\u003c/code\u003e - The table is ready for use.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
	"definitions.TableDescription.type": "object",
	"definitions.TableName.maxLength": 255,
	"definitions.TableName.minLength": 3,
	"definitions.TableName.pattern": "[a-zA-Z0-9_.-]+",
	"definitions.TableName.type": "string",
	"definitions.TableNameList.items.$ref": "#/definitions/TableName",
	"definitions.TableNameList.type": "array",
	"definitions.TableStatus.enum.length": 4,
	"definitions.TableStatus.enum[0]": "CREATING",
	"definitions.TableStatus.enum[1]": "UPDATING",
	"definitions.TableStatus.enum[2]": "DELETING",
	"definitions.TableStatus.enum[3]": "ACTIVE",
	"definitions.TableStatus.type": "string",
	"definitions.Tag.description": "\u003cp\u003eDescribes a tag. A tag is a key-value pair. You can add up to 50 tags to a single DynamoDB table. \u003c/p\u003e \u003cp\u003e AWS-assigned tag names and values are automatically assigned the aws: prefix, which the user cannot assign. AWS-assigned tag names do not count towards the tag limit of 50. User-assigned tag names have the prefix user: in the Cost Allocation Report. You cannot backdate the application of a tag. \u003c/p\u003e \u003cp\u003eFor an overview on tagging DynamoDB resources, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html\"\u003eTagging for DynamoDB\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"definitions.Tag.properties.Key.$ref": "#/definitions/TagKeyString",
	"definitions.Tag.properties.Key.description": "The key of the tag.Tag keys are case sensitive. Each DynamoDB table can only have up to one tag with the same key. If you try to add an existing tag (same key), the existing tag value will be updated to the new value. ",
	"definitions.Tag.properties.Value.$ref": "#/definitions/TagValueString",
	"definitions.Tag.properties.Value.description": "The value of the tag. Tag values are case-sensitive and can be null.",
	"definitions.Tag.required.length": 2,
	"definitions.Tag.required[0]": "Key",
	"definitions.Tag.required[1]": "Value",
	"definitions.Tag.type": "object",
	"definitions.TagKeyList.items.$ref": "#/definitions/TagKeyString",
	"definitions.TagKeyList.type": "array",
	"definitions.TagKeyString.maxLength": 128,
	"definitions.TagKeyString.minLength": 1,
	"definitions.TagKeyString.type": "string",
	"definitions.TagList.items.$ref": "#/definitions/Tag",
	"definitions.TagList.type": "array",
	"definitions.TagResourceInput.properties.ResourceArn.$ref": "#/definitions/ResourceArnString",
	"definitions.TagResourceInput.properties.ResourceArn.description": "Identifies the Amazon DynamoDB resource to which tags should be added. This value is an Amazon Resource Name (ARN).",
	"definitions.TagResourceInput.properties.Tags.$ref": "#/definitions/TagList",
	"definitions.TagResourceInput.properties.Tags.description": "The tags to be assigned to the Amazon DynamoDB resource.",
	"definitions.TagResourceInput.required.length": 2,
	"definitions.TagResourceInput.required[0]": "ResourceArn",
	"definitions.TagResourceInput.required[1]": "Tags",
	"definitions.TagResourceInput.type": "object",
	"definitions.TagValueString.maxLength": 256,
	"definitions.TagValueString.minLength": 0,
	"definitions.TagValueString.type": "string",
	"definitions.TimeToLiveAttributeName.maxLength": 255,
	"definitions.TimeToLiveAttributeName.minLength": 1,
	"definitions.TimeToLiveAttributeName.type": "string",
	"definitions.TimeToLiveDescription.description": "The description of the Time to Live (TTL) status on the specified table. ",
	"definitions.TimeToLiveDescription.properties.AttributeName.$ref": "#/definitions/TimeToLiveAttributeName",
	"definitions.TimeToLiveDescription.properties.AttributeName.description": " The name of the Time to Live attribute for items in the table.",
	"definitions.TimeToLiveDescription.properties.TimeToLiveStatus.$ref": "#/definitions/TimeToLiveStatus",
	"definitions.TimeToLiveDescription.properties.TimeToLiveStatus.description": " The Time to Live status for the table.",
	"definitions.TimeToLiveDescription.type": "object",
	"definitions.TimeToLiveEnabled.type": "boolean",
	"definitions.TimeToLiveSpecification.description": "Represents the settings used to enable or disable Time to Live for the specified table.",
	"definitions.TimeToLiveSpecification.properties.AttributeName.$ref": "#/definitions/TimeToLiveAttributeName",
	"definitions.TimeToLiveSpecification.properties.AttributeName.description": "The name of the Time to Live attribute used to store the expiration time for items in the table.",
	"definitions.TimeToLiveSpecification.properties.Enabled.$ref": "#/definitions/TimeToLiveEnabled",
	"definitions.TimeToLiveSpecification.properties.Enabled.description": "Indicates whether Time To Live is to be enabled (true) or disabled (false) on the table.",
	"definitions.TimeToLiveSpecification.required.length": 2,
	"definitions.TimeToLiveSpecification.required[0]": "Enabled",
	"definitions.TimeToLiveSpecification.required[1]": "AttributeName",
	"definitions.TimeToLiveSpecification.type": "object",
	"definitions.TimeToLiveStatus.enum.length": 4,
	"definitions.TimeToLiveStatus.enum[0]": "ENABLING",
	"definitions.TimeToLiveStatus.enum[1]": "DISABLING",
	"definitions.TimeToLiveStatus.enum[2]": "ENABLED",
	"definitions.TimeToLiveStatus.enum[3]": "DISABLED",
	"definitions.TimeToLiveStatus.type": "string",
	"definitions.UntagResourceInput.properties.ResourceArn.$ref": "#/definitions/ResourceArnString",
	"definitions.UntagResourceInput.properties.ResourceArn.description": "The Amazon DyanamoDB resource the tags will be removed from. This value is an Amazon Resource Name (ARN).",
	"definitions.UntagResourceInput.properties.TagKeys.$ref": "#/definitions/TagKeyList",
	"definitions.UntagResourceInput.properties.TagKeys.description": "A list of tag keys. Existing tags of the resource whose keys are members of this list will be removed from the Amazon DynamoDB resource.",
	"definitions.UntagResourceInput.required.length": 2,
	"definitions.UntagResourceInput.required[0]": "ResourceArn",
	"definitions.UntagResourceInput.required[1]": "TagKeys",
	"definitions.UntagResourceInput.type": "object",
	"definitions.UpdateExpression.type": "string",
	"definitions.UpdateGlobalSecondaryIndexAction.description": "Represents the new provisioned throughput settings to be applied to a global secondary index.",
	"definitions.UpdateGlobalSecondaryIndexAction.properties.IndexName.$ref": "#/definitions/IndexName",
	"definitions.UpdateGlobalSecondaryIndexAction.properties.IndexName.description": "The name of the global secondary index to be updated.",
	"definitions.UpdateGlobalSecondaryIndexAction.properties.ProvisionedThroughput.$ref": "#/definitions/ProvisionedThroughput",
	"definitions.UpdateGlobalSecondaryIndexAction.properties.ProvisionedThroughput.description": "\u003cp\u003eRepresents the provisioned throughput settings for the specified global secondary index.\u003c/p\u003e \u003cp\u003eFor current minimum and maximum provisioned throughput values, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\"\u003eLimits\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"definitions.UpdateGlobalSecondaryIndexAction.required.length": 2,
	"definitions.UpdateGlobalSecondaryIndexAction.required[0]": "IndexName",
	"definitions.UpdateGlobalSecondaryIndexAction.required[1]": "ProvisionedThroughput",
	"definitions.UpdateGlobalSecondaryIndexAction.type": "object",
	"definitions.UpdateItemInput.description": "Represents the input of an \u003ccode\u003eUpdateItem\u003c/code\u003e operation.",
	"definitions.UpdateItemInput.example.ExpressionAttributeNames.#AT": "AlbumTitle",
	"definitions.UpdateItemInput.example.ExpressionAttributeNames.#Y": "Year",
	"definitions.UpdateItemInput.example.ExpressionAttributeValues.:t.S": "Louder Than Ever",
	"definitions.UpdateItemInput.example.ExpressionAttributeValues.:y.N": "2015",
	"definitions.UpdateItemInput.example.Key.Artist.S": "Acme Band",
	"definitions.UpdateItemInput.example.Key.SongTitle.S": "Happy Day",
	"definitions.UpdateItemInput.example.ReturnValues": "ALL_NEW",
	"definitions.UpdateItemInput.example.TableName": "Music",
	"definitions.UpdateItemInput.example.UpdateExpression": "SET #Y = :y, #AT = :t",
	"definitions.UpdateItemInput.properties.AttributeUpdates.$ref": "#/definitions/AttributeUpdates",
	"definitions.UpdateItemInput.properties.AttributeUpdates.description": "This is a legacy parameter. Use \u003ccode\u003eUpdateExpression\u003c/code\u003e instead. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributeUpdates.html\"\u003eAttributeUpdates\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.",
	"definitions.UpdateItemInput.properties.ConditionExpression.$ref": "#/definitions/ConditionExpression",
	"definitions.UpdateItemInput.properties.ConditionExpression.description": "\u003cp\u003eA condition that must be satisfied in order for a conditional update to succeed.\u003c/p\u003e \u003cp\u003eAn expression can contain any of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eFunctions: \u003ccode\u003eattribute_exists | attribute_not_exists | attribute_type | contains | begins_with | size\u003c/code\u003e \u003c/p\u003e \u003cp\u003eThese function names are case-sensitive.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eComparison operators: \u003ccode\u003e= | \u0026lt;\u0026gt; | \u0026lt; | \u0026gt; | \u0026lt;= | \u0026gt;= | BETWEEN | IN \u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e Logical operators: \u003ccode\u003eAND | OR | NOT\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eFor more information on condition expressions, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html\"\u003eSpecifying Conditions\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"definitions.UpdateItemInput.properties.ConditionalOperator.$ref": "#/definitions/ConditionalOperator",
	"definitions.UpdateItemInput.properties.ConditionalOperator.description": "This is a legacy parameter. Use \u003ccode\u003eConditionExpression\u003c/code\u003e instead. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html\"\u003eConditionalOperator\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.",
	"definitions.UpdateItemInput.properties.Expected.$ref": "#/definitions/ExpectedAttributeMap",
	"definitions.UpdateItemInput.properties.Expected.description": "This is a legacy parameter. Use \u003ccode\u003eConditionExpression\u003c/code\u003e instead. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.Expected.html\"\u003eExpected\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.",
	"definitions.UpdateItemInput.properties.ExpressionAttributeNames.$ref": "#/definitions/ExpressionAttributeNameMap",
	"definitions.UpdateItemInput.properties.ExpressionAttributeNames.description": "\u003cp\u003eOne or more substitution tokens for attribute names in an expression. The following are some use cases for using \u003ccode\u003eExpressionAttributeNames\u003c/code\u003e:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eTo access an attribute whose name conflicts with a DynamoDB reserved word.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo create a placeholder for repeating occurrences of an attribute name in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo prevent special characters in an attribute name from being misinterpreted in an expression.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eUse the \u003cb\u003e#\u003c/b\u003e character in an expression to dereference an attribute name. For example, consider the following attribute name:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003ePercentile\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eThe name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html\"\u003eReserved Words\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e). To work around this, you could specify the following for \u003ccode\u003eExpressionAttributeNames\u003c/code\u003e:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003e{\"#P\":\"Percentile\"}\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eYou could then use this substitution in an expression, as in this example:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003e#P = :val\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cnote\u003e \u003cp\u003eTokens that begin with the \u003cb\u003e:\u003c/b\u003e character are \u003ci\u003eexpression attribute values\u003c/i\u003e, which are placeholders for the actual value at runtime.\u003c/p\u003e \u003c/note\u003e \u003cp\u003eFor more information on expression attribute names, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\u003eAccessing Item Attributes\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"definitions.UpdateItemInput.properties.ExpressionAttributeValues.$ref": "#/definitions/ExpressionAttributeValueMap",
	"definitions.UpdateItemInput.properties.ExpressionAttributeValues.description": "\u003cp\u003eOne or more values that can be substituted in an expression.\u003c/p\u003e \u003cp\u003eUse the \u003cb\u003e:\u003c/b\u003e (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the \u003ci\u003eProductStatus\u003c/i\u003e attribute was one of the following: \u003c/p\u003e \u003cp\u003e \u003ccode\u003eAvailable | Backordered | Discontinued\u003c/code\u003e \u003c/p\u003e \u003cp\u003eYou would first need to specify \u003ccode\u003eExpressionAttributeValues\u003c/code\u003e as follows:\u003c/p\u003e \u003cp\u003e \u003ccode\u003e{ \":avail\":{\"S\":\"Available\"}, \":back\":{\"S\":\"Backordered\"}, \":disc\":{\"S\":\"Discontinued\"} }\u003c/code\u003e \u003c/p\u003e \u003cp\u003eYou could then use these values in an expression, such as this:\u003c/p\u003e \u003cp\u003e \u003ccode\u003eProductStatus IN (:avail, :back, :disc)\u003c/code\u003e \u003c/p\u003e \u003cp\u003eFor more information on expression attribute values, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html\"\u003eSpecifying Conditions\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"definitions.UpdateItemInput.properties.Key.$ref": "#/definitions/Key",
	"definitions.UpdateItemInput.properties.Key.description": "\u003cp\u003eThe primary key of the item to be updated. Each element consists of an attribute name and a value for that attribute.\u003c/p\u003e \u003cp\u003eFor the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.\u003c/p\u003e",
	"definitions.UpdateItemInput.properties.ReturnConsumedCapacity.$ref": "#/definitions/ReturnConsumedCapacity",
	"definitions.UpdateItemInput.properties.ReturnItemCollectionMetrics.$ref": "#/definitions/ReturnItemCollectionMetrics",
	"definitions.UpdateItemInput.properties.ReturnItemCollectionMetrics.description": "Determines whether item collection metrics are returned. If set to \u003ccode\u003eSIZE\u003c/code\u003e, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to \u003ccode\u003eNONE\u003c/code\u003e (the default), no statistics are returned.",
	"definitions.UpdateItemInput.properties.ReturnValues.$ref": "#/definitions/ReturnValue",
	"definitions.UpdateItemInput.properties.ReturnValues.description": "\u003cp\u003eUse \u003ccode\u003eReturnValues\u003c/code\u003e if you want to get the item attributes as they appear before or after they are updated. For \u003ccode\u003eUpdateItem\u003c/code\u003e, the valid values are:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eNONE\u003c/code\u003e - If \u003ccode\u003eReturnValues\u003c/code\u003e is not specified, or if its value is \u003ccode\u003eNONE\u003c/code\u003e, then nothing is returned. (This setting is the default for \u003ccode\u003eReturnValues\u003c/code\u003e.)\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eALL_OLD\u003c/code\u003e - Returns all of the attributes of the item, as they appeared before the UpdateItem operation.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eUPDATED_OLD\u003c/code\u003e - Returns only the updated attributes, as they appeared before the UpdateItem operation.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eALL_NEW\u003c/code\u003e - Returns all of the attributes of the item, as they appear after the UpdateItem operation.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eUPDATED_NEW\u003c/code\u003e - Returns only the updated attributes, as they appear after the UpdateItem operation.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eThere is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed.\u003c/p\u003e \u003cp\u003eThe values returned are strongly consistent.\u003c/p\u003e",
	"definitions.UpdateItemInput.properties.TableName.$ref": "#/definitions/TableName",
	"definitions.UpdateItemInput.properties.TableName.description": "The name of the table containing the item to update.",
	"definitions.UpdateItemInput.properties.UpdateExpression.$ref": "#/definitions/UpdateExpression",
	"definitions.UpdateItemInput.properties.UpdateExpression.description": "\u003cp\u003eAn expression that defines one or more attributes to be updated, the action to be performed on them, and new value(s) for them.\u003c/p\u003e \u003cp\u003eThe following action values are available for \u003ccode\u003eUpdateExpression\u003c/code\u003e.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eSET\u003c/code\u003e - Adds one or more attributes and values to an item. If any of these attribute already exist, they are replaced by the new values. You can also use \u003ccode\u003eSET\u003c/code\u003e to add or subtract from an attribute that is of type Number. For example: \u003ccode\u003eSET myNum = myNum + :val\u003c/code\u003e \u003c/p\u003e \u003cp\u003e \u003ccode\u003eSET\u003c/code\u003e supports the following functions:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eif_not_exists (path, operand)\u003c/code\u003e - if the item does not contain an attribute at the specified path, then \u003ccode\u003eif_not_exists\u003c/code\u003e evaluates to operand; otherwise, it evaluates to path. You can use this function to avoid overwriting an attribute that may already be present in the item.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003elist_append (operand, operand)\u003c/code\u003e - evaluates to a list with a new element added to it. You can append the new element to the start or the end of the list by reversing the order of the operands.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eThese function names are case-sensitive.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eREMOVE\u003c/code\u003e - Removes one or more attributes from an item.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eADD\u003c/code\u003e - Adds the specified value to the item, if the attribute does not already exist. If the attribute does exist, then the behavior of \u003ccode\u003eADD\u003c/code\u003e depends on the data type of the attribute:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eIf the existing attribute is a number, and if \u003ccode\u003eValue\u003c/code\u003e is also a number, then \u003ccode\u003eValue\u003c/code\u003e is mathematically added to the existing attribute. If \u003ccode\u003eValue\u003c/code\u003e is a negative number, then it is subtracted from the existing attribute.\u003c/p\u003e \u003cnote\u003e \u003cp\u003eIf you use \u003ccode\u003eADD\u003c/code\u003e to increment or decrement a number value for an item that doesn't exist before the update, DynamoDB uses \u003ccode\u003e0\u003c/code\u003e as the initial value.\u003c/p\u003e \u003cp\u003eSimilarly, if you use \u003ccode\u003eADD\u003c/code\u003e for an existing item to increment or decrement an attribute value that doesn't exist before the update, DynamoDB uses \u003ccode\u003e0\u003c/code\u003e as the initial value. For example, suppose that the item you want to update doesn't have an attribute named \u003ci\u003eitemcount\u003c/i\u003e, but you decide to \u003ccode\u003eADD\u003c/code\u003e the number \u003ccode\u003e3\u003c/code\u003e to this attribute anyway. DynamoDB will create the \u003ci\u003eitemcount\u003c/i\u003e attribute, set its initial value to \u003ccode\u003e0\u003c/code\u003e, and finally add \u003ccode\u003e3\u003c/code\u003e to it. The result will be a new \u003ci\u003eitemcount\u003c/i\u003e attribute in the item, with a value of \u003ccode\u003e3\u003c/code\u003e.\u003c/p\u003e \u003c/note\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eIf the existing data type is a set and if \u003ccode\u003eValue\u003c/code\u003e is also a set, then \u003ccode\u003eValue\u003c/code\u003e is added to the existing set. For example, if the attribute value is the set \u003ccode\u003e[1,2]\u003c/code\u003e, and the \u003ccode\u003eADD\u003c/code\u003e action specified \u003ccode\u003e[3]\u003c/code\u003e, then the final attribute value is \u003ccode\u003e[1,2,3]\u003c/code\u003e. An error occurs if an \u003ccode\u003eADD\u003c/code\u003e action is specified for a set attribute and the attribute type specified does not match the existing set type. \u003c/p\u003e \u003cp\u003eBoth sets must have the same primitive data type. For example, if the existing data type is a set of strings, the \u003ccode\u003eValue\u003c/code\u003e must also be a set of strings.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cimportant\u003e \u003cp\u003eThe \u003ccode\u003eADD\u003c/code\u003e action only supports Number and set data types. In addition, \u003ccode\u003eADD\u003c/code\u003e can only be used on top-level attributes, not nested attributes.\u003c/p\u003e \u003c/important\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eDELETE\u003c/code\u003e - Deletes an element from a set.\u003c/p\u003e \u003cp\u003eIf a set of values is specified, then those values are subtracted from the old set. For example, if the attribute value was the set \u003ccode\u003e[a,b,c]\u003c/code\u003e and the \u003ccode\u003eDELETE\u003c/code\u003e action specifies \u003ccode\u003e[a,c]\u003c/code\u003e, then the final attribute value is \u003ccode\u003e[b]\u003c/code\u003e. Specifying an empty set is an error.\u003c/p\u003e \u003cimportant\u003e \u003cp\u003eThe \u003ccode\u003eDELETE\u003c/code\u003e action only supports set data types. In addition, \u003ccode\u003eDELETE\u003c/code\u003e can only be used on top-level attributes, not nested attributes.\u003c/p\u003e \u003c/important\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eYou can have many actions in a single expression, such as the following: \u003ccode\u003eSET a=:value1, b=:value2 DELETE :value3, :value4, :value5\u003c/code\u003e \u003c/p\u003e \u003cp\u003eFor more information on update expressions, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.Modifying.html\"\u003eModifying Items and Attributes\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"definitions.UpdateItemInput.required.length": 2,
	"definitions.UpdateItemInput.required[0]": "TableName",
	"definitions.UpdateItemInput.required[1]": "Key",
	"definitions.UpdateItemInput.type": "object",
	"definitions.UpdateItemOutput.description": "Represents the output of an \u003ccode\u003eUpdateItem\u003c/code\u003e operation.",
	"definitions.UpdateItemOutput.example.Attributes.AlbumTitle.S": "Louder Than Ever",
	"definitions.UpdateItemOutput.example.Attributes.Artist.S": "Acme Band",
	"definitions.UpdateItemOutput.example.Attributes.SongTitle.S": "Happy Day",
	"definitions.UpdateItemOutput.example.Attributes.Year.N": "2015",
	"definitions.UpdateItemOutput.properties.Attributes.$ref": "#/definitions/AttributeMap",
	"definitions.UpdateItemOutput.properties.Attributes.description": "\u003cp\u003eA map of attribute values as they appear before or after the \u003ccode\u003eUpdateItem\u003c/code\u003e operation, as determined by the \u003ccode\u003eReturnValues\u003c/code\u003e parameter.\u003c/p\u003e \u003cp\u003eThe \u003ccode\u003eAttributes\u003c/code\u003e map is only present if \u003ccode\u003eReturnValues\u003c/code\u003e was specified as something other than \u003ccode\u003eNONE\u003c/code\u003e in the request. Each element represents one attribute.\u003c/p\u003e",
	"definitions.UpdateItemOutput.properties.ConsumedCapacity.$ref": "#/definitions/ConsumedCapacity",
	"definitions.UpdateItemOutput.properties.ConsumedCapacity.description": "The capacity units consumed by the \u003ccode\u003eUpdateItem\u003c/code\u003e operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. \u003ccode\u003eConsumedCapacity\u003c/code\u003e is only returned if the \u003ccode\u003eReturnConsumedCapacity\u003c/code\u003e parameter was specified. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html\"\u003eProvisioned Throughput\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.",
	"definitions.UpdateItemOutput.properties.ItemCollectionMetrics.$ref": "#/definitions/ItemCollectionMetrics",
	"definitions.UpdateItemOutput.properties.ItemCollectionMetrics.description": "\u003cp\u003eInformation about item collections, if any, that were affected by the \u003ccode\u003eUpdateItem\u003c/code\u003e operation. \u003ccode\u003eItemCollectionMetrics\u003c/code\u003e is only returned if the \u003ccode\u003eReturnItemCollectionMetrics\u003c/code\u003e parameter was specified. If the table does not have any local secondary indexes, this information is not returned in the response.\u003c/p\u003e \u003cp\u003eEach \u003ccode\u003eItemCollectionMetrics\u003c/code\u003e element consists of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eItemCollectionKey\u003c/code\u003e - The partition key value of the item collection. This is the same as the partition key value of the item itself.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eSizeEstimateRange\u003c/code\u003e - An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit.\u003c/p\u003e \u003cp\u003eThe estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
	"definitions.UpdateItemOutput.type": "object",
	"definitions.UpdateTableInput.description": "Represents the input of an \u003ccode\u003eUpdateTable\u003c/code\u003e operation.",
	"definitions.UpdateTableInput.example.ProvisionedThroughput.ReadCapacityUnits": 10,
	"definitions.UpdateTableInput.example.ProvisionedThroughput.WriteCapacityUnits": 10,
	"definitions.UpdateTableInput.example.TableName": "MusicCollection",
	"definitions.UpdateTableInput.properties.AttributeDefinitions.$ref": "#/definitions/AttributeDefinitions",
	"definitions.UpdateTableInput.properties.AttributeDefinitions.description": "An array of attributes that describe the key schema for the table and indexes. If you are adding a new global secondary index to the table, \u003ccode\u003eAttributeDefinitions\u003c/code\u003e must include the key element(s) of the new index.",
	"definitions.UpdateTableInput.properties.GlobalSecondaryIndexUpdates.$ref": "#/definitions/GlobalSecondaryIndexUpdateList",
	"definitions.UpdateTableInput.properties.GlobalSecondaryIndexUpdates.description": "\u003cp\u003eAn array of one or more global secondary indexes for the table. For each index in the array, you can request one action:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eCreate\u003c/code\u003e - add a new global secondary index to the table.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eUpdate\u003c/code\u003e - modify the provisioned throughput settings of an existing global secondary index.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eDelete\u003c/code\u003e - remove a global secondary index from the table.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eFor more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GSI.OnlineOps.html\"\u003eManaging Global Secondary Indexes\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e. \u003c/p\u003e",
	"definitions.UpdateTableInput.properties.ProvisionedThroughput.$ref": "#/definitions/ProvisionedThroughput",
	"definitions.UpdateTableInput.properties.ProvisionedThroughput.description": "The new provisioned throughput settings for the specified table or index.",
	"definitions.UpdateTableInput.properties.StreamSpecification.$ref": "#/definitions/StreamSpecification",
	"definitions.UpdateTableInput.properties.StreamSpecification.description": "\u003cp\u003eRepresents the DynamoDB Streams configuration for the table.\u003c/p\u003e \u003cnote\u003e \u003cp\u003eYou will receive a \u003ccode\u003eResourceInUseException\u003c/code\u003e if you attempt to enable a stream on a table that already has a stream, or if you attempt to disable a stream on a table which does not have a stream.\u003c/p\u003e \u003c/note\u003e",
	"definitions.UpdateTableInput.properties.TableName.$ref": "#/definitions/TableName",
	"definitions.UpdateTableInput.properties.TableName.description": "The name of the table to be updated.",
	"definitions.UpdateTableInput.required.length": 1,
	"definitions.UpdateTableInput.required[0]": "TableName",
	"definitions.UpdateTableInput.type": "object",
	"definitions.UpdateTableOutput.description": "Represents the output of an \u003ccode\u003eUpdateTable\u003c/code\u003e operation.",
	"definitions.UpdateTableOutput.example.TableDescription.AttributeDefinitions.length": 2,
	"definitions.UpdateTableOutput.example.TableDescription.AttributeDefinitions[0].AttributeName": "Artist",
	"definitions.UpdateTableOutput.example.TableDescription.AttributeDefinitions[0].AttributeType": "S",
	"definitions.UpdateTableOutput.example.TableDescription.AttributeDefinitions[1].AttributeName": "SongTitle",
	"definitions.UpdateTableOutput.example.TableDescription.AttributeDefinitions[1].AttributeType": "S",
	"definitions.UpdateTableOutput.example.TableDescription.CreationDateTime": "1421866952.062",
	"definitions.UpdateTableOutput.example.TableDescription.ItemCount": 0,
	"definitions.UpdateTableOutput.example.TableDescription.KeySchema.length": 2,
	"definitions.UpdateTableOutput.example.TableDescription.KeySchema[0].AttributeName": "Artist",
	"definitions.UpdateTableOutput.example.TableDescription.KeySchema[0].KeyType": "HASH",
	"definitions.UpdateTableOutput.example.TableDescription.KeySchema[1].AttributeName": "SongTitle",
	"definitions.UpdateTableOutput.example.TableDescription.KeySchema[1].KeyType": "RANGE",
	"definitions.UpdateTableOutput.example.TableDescription.ProvisionedThroughput.LastIncreaseDateTime": "1421874759.194",
	"definitions.UpdateTableOutput.example.TableDescription.ProvisionedThroughput.NumberOfDecreasesToday": 1,
	"definitions.UpdateTableOutput.example.TableDescription.ProvisionedThroughput.ReadCapacityUnits": 1,
	"definitions.UpdateTableOutput.example.TableDescription.ProvisionedThroughput.WriteCapacityUnits": 1,
	"definitions.UpdateTableOutput.example.TableDescription.TableName": "MusicCollection",
	"definitions.UpdateTableOutput.example.TableDescription.TableSizeBytes": 0,
	"definitions.UpdateTableOutput.example.TableDescription.TableStatus": "UPDATING",
	"definitions.UpdateTableOutput.properties.TableDescription.$ref": "#/definitions/TableDescription",
	"definitions.UpdateTableOutput.properties.TableDescription.description": "Represents the properties of the table.",
	"definitions.UpdateTableOutput.type": "object",
	"definitions.UpdateTimeToLiveInput.description": "Represents the input of an \u003ccode\u003eUpdateTimeToLive\u003c/code\u003e operation.",
	"definitions.UpdateTimeToLiveInput.properties.TableName.$ref": "#/definitions/TableName",
	"definitions.UpdateTimeToLiveInput.properties.TableName.description": "The name of the table to be configured.",
	"definitions.UpdateTimeToLiveInput.properties.TimeToLiveSpecification.$ref": "#/definitions/TimeToLiveSpecification",
	"definitions.UpdateTimeToLiveInput.properties.TimeToLiveSpecification.description": "Represents the settings used to enable or disable Time to Live for the specified table.",
	"definitions.UpdateTimeToLiveInput.required.length": 2,
	"definitions.UpdateTimeToLiveInput.required[0]": "TableName",
	"definitions.UpdateTimeToLiveInput.required[1]": "TimeToLiveSpecification",
	"definitions.UpdateTimeToLiveInput.type": "object",
	"definitions.UpdateTimeToLiveOutput.properties.TimeToLiveSpecification.$ref": "#/definitions/TimeToLiveSpecification",
	"definitions.UpdateTimeToLiveOutput.properties.TimeToLiveSpecification.description": "Represents the output of an \u003ccode\u003eUpdateTimeToLive\u003c/code\u003e operation.",
	"definitions.UpdateTimeToLiveOutput.type": "object",
	"definitions.WriteRequest.description": "Represents an operation to perform - either \u003ccode\u003eDeleteItem\u003c/code\u003e or \u003ccode\u003ePutItem\u003c/code\u003e. You can only request one of these operations, not both, in a single \u003ccode\u003eWriteRequest\u003c/code\u003e. If you do need to perform both of these operations, you will need to provide two separate \u003ccode\u003eWriteRequest\u003c/code\u003e objects.",
	"definitions.WriteRequest.properties.DeleteRequest.$ref": "#/definitions/DeleteRequest",
	"definitions.WriteRequest.properties.DeleteRequest.description": "A request to perform a \u003ccode\u003eDeleteItem\u003c/code\u003e operation.",
	"definitions.WriteRequest.properties.PutRequest.$ref": "#/definitions/PutRequest",
	"definitions.WriteRequest.properties.PutRequest.description": "A request to perform a \u003ccode\u003ePutItem\u003c/code\u003e operation.",
	"definitions.WriteRequest.type": "object",
	"definitions.WriteRequests.items.$ref": "#/definitions/WriteRequest",
	"definitions.WriteRequests.maxItems": 25,
	"definitions.WriteRequests.minItems": 1,
	"definitions.WriteRequests.type": "array",
	"externalDocs.description": "Amazon Web Services documentation",
	"externalDocs.url": "https://aws.amazon.com/dynamodb/",
	"host": "dynamodb.amazonaws.com",
	"info.contact.email": "mike.ralphson@gmail.com",
	"info.contact.name": "Mike Ralphson",
	"info.contact.url": "https://github.com/mermade/aws2openapi",
	"info.description": "\u003cfullname\u003eAmazon DynamoDB\u003c/fullname\u003e \u003cp\u003eAmazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.\u003c/p\u003e \u003cp\u003eWith DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the AWS Management Console to monitor resource utilization and performance metrics.\u003c/p\u003e \u003cp\u003eDynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an AWS region, providing built-in high availability and data durability. \u003c/p\u003e",
	"info.license.name": "Apache 2.0 License",
	"info.license.url": "http://www.apache.org/licenses/",
	"info.termsOfService": "https://aws.amazon.com/service-terms/",
	"info.title": "Amazon DynamoDB",
	"info.version": "2012-08-10",
	"info.x-apiClientRegistration.url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct",
	"info.x-apisguru-categories.length": 1,
	"info.x-apisguru-categories[0]": "cloud",
	"info.x-logo.backgroundColor": "#FFFFFF",
	"info.x-logo.url": "https://api.apis.guru/v2/cache/logo/https_media.amazonwebservices.com_blog_2007_big_pbaws_logo_300px.jpg",
	"info.x-origin.length": 1,
	"info.x-origin[0].contentType": "application/json",
	"info.x-origin[0].converter.url": "https://github.com/mermade/aws2openapi",
	"info.x-origin[0].converter.version": "1.0.0",
	"info.x-origin[0].url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/dynamodb-2012-08-10.normal.json",
	"info.x-origin[0].x-apisguru-direct": true,
	"info.x-preferred": true,
	"info.x-providerName": "amazonaws.com",
	"info.x-release": "v4",
	"info.x-serviceName": "dynamodb",
	"parameters.Action.in": "header",
	"parameters.Action.name": "Action",
	"parameters.Action.required": true,
	"parameters.Action.type": "string",
	"parameters.Version.in": "header",
	"parameters.Version.name": "Version",
	"parameters.Version.required": true,
	"parameters.Version.type": "string",
	"parameters.X-Amz-Algorithm.in": "header",
	"parameters.X-Amz-Algorithm.name": "X-Amz-Algorithm",
	"parameters.X-Amz-Algorithm.required": false,
	"parameters.X-Amz-Algorithm.type": "string",
	"parameters.X-Amz-Content-Sha256.in": "header",
	"parameters.X-Amz-Content-Sha256.name": "X-Amz-Content-Sha256",
	"parameters.X-Amz-Content-Sha256.required": false,
	"parameters.X-Amz-Content-Sha256.type": "string",
	"parameters.X-Amz-Credential.in": "header",
	"parameters.X-Amz-Credential.name": "X-Amz-Credential",
	"parameters.X-Amz-Credential.required": false,
	"parameters.X-Amz-Credential.type": "string",
	"parameters.X-Amz-Date.in": "header",
	"parameters.X-Amz-Date.name": "X-Amz-Date",
	"parameters.X-Amz-Date.required": false,
	"parameters.X-Amz-Date.type": "string",
	"parameters.X-Amz-Security-Token.in": "header",
	"parameters.X-Amz-Security-Token.name": "X-Amz-Security-Token",
	"parameters.X-Amz-Security-Token.required": false,
	"parameters.X-Amz-Security-Token.type": "string",
	"parameters.X-Amz-Signature.in": "header",
	"parameters.X-Amz-Signature.name": "X-Amz-Signature",
	"parameters.X-Amz-Signature.required": false,
	"parameters.X-Amz-Signature.type": "string",
	"parameters.X-Amz-SignedHeaders.in": "header",
	"parameters.X-Amz-SignedHeaders.name": "X-Amz-SignedHeaders",
	"parameters.X-Amz-SignedHeaders.required": false,
	"parameters.X-Amz-SignedHeaders.type": "string",
	"paths./#BatchWriteItem.parameters.length": 9,
	"paths./#BatchWriteItem.parameters[0].$ref": "#/parameters/Action",
	"paths./#BatchWriteItem.parameters[1].$ref": "#/parameters/Version",
	"paths./#BatchWriteItem.parameters[2].$ref": "#/parameters/X-Amz-Content-Sha256",
	"paths./#BatchWriteItem.parameters[3].$ref": "#/parameters/X-Amz-Date",
	"paths./#BatchWriteItem.parameters[4].$ref": "#/parameters/X-Amz-Algorithm",
	"paths./#BatchWriteItem.parameters[5].$ref": "#/parameters/X-Amz-Credential",
	"paths./#BatchWriteItem.parameters[6].$ref": "#/parameters/X-Amz-Security-Token",
	"paths./#BatchWriteItem.parameters[7].$ref": "#/parameters/X-Amz-Signature",
	"paths./#BatchWriteItem.parameters[8].$ref": "#/parameters/X-Amz-SignedHeaders",
	"paths./#BatchWriteItem.post.description": "\u003cp\u003eThe \u003ccode\u003eBatchWriteItem\u003c/code\u003e operation puts or deletes multiple items in one or more tables. A single call to \u003ccode\u003eBatchWriteItem\u003c/code\u003e can write up to 16 MB of data, which can comprise as many as 25 put or delete requests. Individual items to be written can be as large as 400 KB.\u003c/p\u003e \u003cnote\u003e \u003cp\u003e \u003ccode\u003eBatchWriteItem\u003c/code\u003e cannot update items. To update items, use the \u003ccode\u003eUpdateItem\u003c/code\u003e action.\u003c/p\u003e \u003c/note\u003e \u003cp\u003eThe individual \u003ccode\u003ePutItem\u003c/code\u003e and \u003ccode\u003eDeleteItem\u003c/code\u003e operations specified in \u003ccode\u003eBatchWriteItem\u003c/code\u003e are atomic; however \u003ccode\u003eBatchWriteItem\u003c/code\u003e as a whole is not. If any requested operations fail because the table's provisioned throughput is exceeded or an internal processing failure occurs, the failed operations are returned in the \u003ccode\u003eUnprocessedItems\u003c/code\u003e response parameter. You can investigate and optionally resend the requests. Typically, you would call \u003ccode\u003eBatchWriteItem\u003c/code\u003e in a loop. Each iteration would check for unprocessed items and submit a new \u003ccode\u003eBatchWriteItem\u003c/code\u003e request with those unprocessed items until all items have been processed.\u003c/p\u003e \u003cp\u003eNote that if \u003ci\u003enone\u003c/i\u003e of the items can be processed due to insufficient provisioned throughput on all of the tables in the request, then \u003ccode\u003eBatchWriteItem\u003c/code\u003e will return a \u003ccode\u003eProvisionedThroughputExceededException\u003c/code\u003e.\u003c/p\u003e \u003cimportant\u003e \u003cp\u003eIf DynamoDB returns any unprocessed items, you should retry the batch operation on those items. However, \u003ci\u003ewe strongly recommend that you use an exponential backoff algorithm\u003c/i\u003e. If you retry the batch operation immediately, the underlying read or write requests can still fail due to throttling on the individual tables. If you delay the batch operation using exponential backoff, the individual requests in the batch are much more likely to succeed.\u003c/p\u003e \u003cp\u003eFor more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#BatchOperations\"\u003eBatch Operations and Error Handling\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003c/important\u003e \u003cp\u003eWith \u003ccode\u003eBatchWriteItem\u003c/code\u003e, you can efficiently write or delete large amounts of data, such as from Amazon Elastic MapReduce (EMR), or copy data from another database into DynamoDB. In order to improve performance with these large-scale operations, \u003ccode\u003eBatchWriteItem\u003c/code\u003e does not behave in the same way as individual \u003ccode\u003ePutItem\u003c/code\u003e and \u003ccode\u003eDeleteItem\u003c/code\u003e calls would. For example, you cannot specify conditions on individual put and delete requests, and \u003ccode\u003eBatchWriteItem\u003c/code\u003e does not return deleted items in the response.\u003c/p\u003e \u003cp\u003eIf you use a programming language that supports concurrency, you can use threads to write items in parallel. Your application must include the necessary logic to manage the threads. With languages that don't support threading, you must update or delete the specified items one at a time. In both situations, \u003ccode\u003eBatchWriteItem\u003c/code\u003e performs the specified put and delete operations in parallel, giving you the power of the thread pool approach without having to introduce complexity into your application.\u003c/p\u003e \u003cp\u003eParallel processing reduces latency, but each specified put and delete request consumes the same number of write capacity units whether it is processed in parallel or not. Delete operations on nonexistent items consume one write capacity unit.\u003c/p\u003e \u003cp\u003eIf one or more of the following is true, DynamoDB rejects the entire batch write operation:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eOne or more tables specified in the \u003ccode\u003eBatchWriteItem\u003c/code\u003e request does not exist.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003ePrimary key attributes specified on an item in the request do not match those in the corresponding table's primary key schema.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eYou try to perform multiple operations on the same item in the same \u003ccode\u003eBatchWriteItem\u003c/code\u003e request. For example, you cannot put and delete the same item in the same \u003ccode\u003eBatchWriteItem\u003c/code\u003e request. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eThere are more than 25 requests in the batch.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eAny individual item in a batch exceeds 400 KB.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eThe total request size exceeds 16 MB.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
	"paths./#BatchWriteItem.post.operationId": "BatchWriteItem",
	"paths./#BatchWriteItem.post.parameters.length": 1,
	"paths./#BatchWriteItem.post.parameters[0].in": "body",
	"paths./#BatchWriteItem.post.parameters[0].name": "body",
	"paths./#BatchWriteItem.post.parameters[0].required": true,
	"paths./#BatchWriteItem.post.parameters[0].schema.$ref": "#/definitions/BatchWriteItemInput",
	"paths./#BatchWriteItem.post.responses.200.description": "Success",
	"paths./#BatchWriteItem.post.responses.200.schema.$ref": "#/definitions/BatchWriteItemOutput",
	"paths./#BatchWriteItem.post.responses.480.description": "ProvisionedThroughputExceededException",
	"paths./#BatchWriteItem.post.responses.480.schema.$ref": "#/definitions/ProvisionedThroughputExceededException",
	"paths./#BatchWriteItem.post.responses.481.description": "ResourceNotFoundException",
	"paths./#BatchWriteItem.post.responses.481.schema.$ref": "#/definitions/ResourceNotFoundException",
	"paths./#BatchWriteItem.post.responses.482.description": "ItemCollectionSizeLimitExceededException",
	"paths./#BatchWriteItem.post.responses.482.schema.$ref": "#/definitions/ItemCollectionSizeLimitExceededException",
	"paths./#BatchWriteItem.post.responses.483.description": "InternalServerError",
	"paths./#BatchWriteItem.post.responses.483.schema.$ref": "#/definitions/InternalServerError",
	"paths./#CreateTable.parameters.length": 9,
	"paths./#CreateTable.parameters[0].$ref": "#/parameters/Action",
	"paths./#CreateTable.parameters[1].$ref": "#/parameters/Version",
	"paths./#CreateTable.parameters[2].$ref": "#/parameters/X-Amz-Content-Sha256",
	"paths./#CreateTable.parameters[3].$ref": "#/parameters/X-Amz-Date",
	"paths./#CreateTable.parameters[4].$ref": "#/parameters/X-Amz-Algorithm",
	"paths./#CreateTable.parameters[5].$ref": "#/parameters/X-Amz-Credential",
	"paths./#CreateTable.parameters[6].$ref": "#/parameters/X-Amz-Security-Token",
	"paths./#CreateTable.parameters[7].$ref": "#/parameters/X-Amz-Signature",
	"paths./#CreateTable.parameters[8].$ref": "#/parameters/X-Amz-SignedHeaders",
	"paths./#CreateTable.post.description": "\u003cp\u003eThe \u003ccode\u003eCreateTable\u003c/code\u003e operation adds a new table to your account. In an AWS account, table names must be unique within each region. That is, you can have two tables with same name if you create the tables in different regions.\u003c/p\u003e \u003cp\u003e \u003ccode\u003eCreateTable\u003c/code\u003e is an asynchronous operation. Upon receiving a \u003ccode\u003eCreateTable\u003c/code\u003e request, DynamoDB immediately returns a response with a \u003ccode\u003eTableStatus\u003c/code\u003e of \u003ccode\u003eCREATING\u003c/code\u003e. After the table is created, DynamoDB sets the \u003ccode\u003eTableStatus\u003c/code\u003e to \u003ccode\u003eACTIVE\u003c/code\u003e. You can perform read and write operations only on an \u003ccode\u003eACTIVE\u003c/code\u003e table. \u003c/p\u003e \u003cp\u003eYou can optionally define secondary indexes on the new table, as part of the \u003ccode\u003eCreateTable\u003c/code\u003e operation. If you want to create multiple tables with secondary indexes on them, you must create the tables sequentially. Only one table with secondary indexes can be in the \u003ccode\u003eCREATING\u003c/code\u003e state at any given time.\u003c/p\u003e \u003cp\u003eYou can use the \u003ccode\u003eDescribeTable\u003c/code\u003e action to check the table status.\u003c/p\u003e",
	"paths./#CreateTable.post.operationId": "CreateTable",
	"paths./#CreateTable.post.parameters.length": 1,
	"paths./#CreateTable.post.parameters[0].in": "body",
	"paths./#CreateTable.post.parameters[0].name": "body",
	"paths./#CreateTable.post.parameters[0].required": true,
	"paths./#CreateTable.post.parameters[0].schema.$ref": "#/definitions/CreateTableInput",
	"paths./#CreateTable.post.responses.200.description": "Success",
	"paths./#CreateTable.post.responses.200.schema.$ref": "#/definitions/CreateTableOutput",
	"paths./#CreateTable.post.responses.480.description": "ResourceInUseException",
	"paths./#CreateTable.post.responses.480.schema.$ref": "#/definitions/ResourceInUseException",
	"paths./#CreateTable.post.responses.481.description": "LimitExceededException",
	"paths./#CreateTable.post.responses.481.schema.$ref": "#/definitions/LimitExceededException",
	"paths./#CreateTable.post.responses.482.description": "InternalServerError",
	"paths./#CreateTable.post.responses.482.schema.$ref": "#/definitions/InternalServerError",
	"paths./#DeleteItem.parameters.length": 9,
	"paths./#DeleteItem.parameters[0].$ref": "#/parameters/Action",
	"paths./#DeleteItem.parameters[1].$ref": "#/parameters/Version",
	"paths./#DeleteItem.parameters[2].$ref": "#/parameters/X-Amz-Content-Sha256",
	"paths./#DeleteItem.parameters[3].$ref": "#/parameters/X-Amz-Date",
	"paths./#DeleteItem.parameters[4].$ref": "#/parameters/X-Amz-Algorithm",
	"paths./#DeleteItem.parameters[5].$ref": "#/parameters/X-Amz-Credential",
	"paths./#DeleteItem.parameters[6].$ref": "#/parameters/X-Amz-Security-Token",
	"paths./#DeleteItem.parameters[7].$ref": "#/parameters/X-Amz-Signature",
	"paths./#DeleteItem.parameters[8].$ref": "#/parameters/X-Amz-SignedHeaders",
	"paths./#DeleteItem.post.description": "\u003cp\u003eDeletes a single item in a table by primary key. You can perform a conditional delete operation that deletes the item if it exists, or if it has an expected attribute value.\u003c/p\u003e \u003cp\u003eIn addition to deleting an item, you can also return the item's attribute values in the same operation, using the \u003ccode\u003eReturnValues\u003c/code\u003e parameter.\u003c/p\u003e \u003cp\u003eUnless you specify conditions, the \u003ccode\u003eDeleteItem\u003c/code\u003e is an idempotent operation; running it multiple times on the same item or attribute does \u003ci\u003enot\u003c/i\u003e result in an error response.\u003c/p\u003e \u003cp\u003eConditional deletes are useful for deleting items only if specific conditions are met. If those conditions are met, DynamoDB performs the delete. Otherwise, the item is not deleted.\u003c/p\u003e",
	"paths./#DeleteItem.post.operationId": "DeleteItem",
	"paths./#DeleteItem.post.parameters.length": 1,
	"paths./#DeleteItem.post.parameters[0].in": "body",
	"paths./#DeleteItem.post.parameters[0].name": "body",
	"paths./#DeleteItem.post.parameters[0].required": true,
	"paths./#DeleteItem.post.parameters[0].schema.$ref": "#/definitions/DeleteItemInput",
	"paths./#DeleteItem.post.responses.200.description": "Success",
	"paths./#DeleteItem.post.responses.200.schema.$ref": "#/definitions/DeleteItemOutput",
	"paths./#DeleteItem.post.responses.480.description": "ConditionalCheckFailedException",
	"paths./#DeleteItem.post.responses.480.schema.$ref": "#/definitions/ConditionalCheckFailedException",
	"paths./#DeleteItem.post.responses.481.description": "ProvisionedThroughputExceededException",
	"paths./#DeleteItem.post.responses.481.schema.$ref": "#/definitions/ProvisionedThroughputExceededException",
	"paths./#DeleteItem.post.responses.482.description": "ResourceNotFoundException",
	"paths./#DeleteItem.post.responses.482.schema.$ref": "#/definitions/ResourceNotFoundException",
	"paths./#DeleteItem.post.responses.483.description": "ItemCollectionSizeLimitExceededException",
	"paths./#DeleteItem.post.responses.483.schema.$ref": "#/definitions/ItemCollectionSizeLimitExceededException",
	"paths./#DeleteItem.post.responses.484.description": "InternalServerError",
	"paths./#DeleteItem.post.responses.484.schema.$ref": "#/definitions/InternalServerError",
	"paths./#DeleteTable.parameters.length": 9,
	"paths./#DeleteTable.parameters[0].$ref": "#/parameters/Action",
	"paths./#DeleteTable.parameters[1].$ref": "#/parameters/Version",
	"paths./#DeleteTable.parameters[2].$ref": "#/parameters/X-Amz-Content-Sha256",
	"paths./#DeleteTable.parameters[3].$ref": "#/parameters/X-Amz-Date",
	"paths./#DeleteTable.parameters[4].$ref": "#/parameters/X-Amz-Algorithm",
	"paths./#DeleteTable.parameters[5].$ref": "#/parameters/X-Amz-Credential",
	"paths./#DeleteTable.parameters[6].$ref": "#/parameters/X-Amz-Security-Token",
	"paths./#DeleteTable.parameters[7].$ref": "#/parameters/X-Amz-Signature",
	"paths./#DeleteTable.parameters[8].$ref": "#/parameters/X-Amz-SignedHeaders",
	"paths./#DeleteTable.post.description": "\u003cp\u003eThe \u003ccode\u003eDeleteTable\u003c/code\u003e operation deletes a table and all of its items. After a \u003ccode\u003eDeleteTable\u003c/code\u003e request, the specified table is in the \u003ccode\u003eDELETING\u003c/code\u003e state until DynamoDB completes the deletion. If the table is in the \u003ccode\u003eACTIVE\u003c/code\u003e state, you can delete it. If a table is in \u003ccode\u003eCREATING\u003c/code\u003e or \u003ccode\u003eUPDATING\u003c/code\u003e states, then DynamoDB returns a \u003ccode\u003eResourceInUseException\u003c/code\u003e. If the specified table does not exist, DynamoDB returns a \u003ccode\u003eResourceNotFoundException\u003c/code\u003e. If table is already in the \u003ccode\u003eDELETING\u003c/code\u003e state, no error is returned. \u003c/p\u003e \u003cnote\u003e \u003cp\u003eDynamoDB might continue to accept data read and write operations, such as \u003ccode\u003eGetItem\u003c/code\u003e and \u003ccode\u003ePutItem\u003c/code\u003e, on a table in the \u003ccode\u003eDELETING\u003c/code\u003e state until the table deletion is complete.\u003c/p\u003e \u003c/note\u003e \u003cp\u003eWhen you delete a table, any indexes on that table are also deleted.\u003c/p\u003e \u003cp\u003eIf you have DynamoDB Streams enabled on the table, then the corresponding stream on that table goes into the \u003ccode\u003eDISABLED\u003c/code\u003e state, and the stream is automatically deleted after 24 hours.\u003c/p\u003e \u003cp\u003eUse the \u003ccode\u003eDescribeTable\u003c/code\u003e action to check the status of the table. \u003c/p\u003e",
	"paths./#DeleteTable.post.operationId": "DeleteTable",
	"paths./#DeleteTable.post.parameters.length": 1,
	"paths./#DeleteTable.post.parameters[0].in": "body",
	"paths./#DeleteTable.post.parameters[0].name": "body",
	"paths./#DeleteTable.post.parameters[0].required": true,
	"paths./#DeleteTable.post.parameters[0].schema.$ref": "#/definitions/DeleteTableInput",
	"paths./#DeleteTable.post.responses.200.description": "Success",
	"paths./#DeleteTable.post.responses.200.schema.$ref": "#/definitions/DeleteTableOutput",
	"paths./#DeleteTable.post.responses.480.description": "ResourceInUseException",
	"paths./#DeleteTable.post.responses.480.schema.$ref": "#/definitions/ResourceInUseException",
	"paths./#DeleteTable.post.responses.481.description": "ResourceNotFoundException",
	"paths./#DeleteTable.post.responses.481.schema.$ref": "#/definitions/ResourceNotFoundException",
	"paths./#DeleteTable.post.responses.482.description": "LimitExceededException",
	"paths./#DeleteTable.post.responses.482.schema.$ref": "#/definitions/LimitExceededException",
	"paths./#DeleteTable.post.responses.483.description": "InternalServerError",
	"paths./#DeleteTable.post.responses.483.schema.$ref": "#/definitions/InternalServerError",
	"paths./#DescribeLimits.parameters.length": 9,
	"paths./#DescribeLimits.parameters[0].$ref": "#/parameters/Action",
	"paths./#DescribeLimits.parameters[1].$ref": "#/parameters/Version",
	"paths./#DescribeLimits.parameters[2].$ref": "#/parameters/X-Amz-Content-Sha256",
	"paths./#DescribeLimits.parameters[3].$ref": "#/parameters/X-Amz-Date",
	"paths./#DescribeLimits.parameters[4].$ref": "#/parameters/X-Amz-Algorithm",
	"paths./#DescribeLimits.parameters[5].$ref": "#/parameters/X-Amz-Credential",
	"paths./#DescribeLimits.parameters[6].$ref": "#/parameters/X-Amz-Security-Token",
	"paths./#DescribeLimits.parameters[7].$ref": "#/parameters/X-Amz-Signature",
	"paths./#DescribeLimits.parameters[8].$ref": "#/parameters/X-Amz-SignedHeaders",
	"paths./#DescribeLimits.post.description": "\u003cp\u003eReturns the current provisioned-capacity limits for your AWS account in a region, both for the region as a whole and for any one DynamoDB table that you create there.\u003c/p\u003e \u003cp\u003eWhen you establish an AWS account, the account has initial limits on the maximum read capacity units and write capacity units that you can provision across all of your DynamoDB tables in a given region. Also, there are per-table limits that apply when you create a table there. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\"\u003eLimits\u003c/a\u003e page in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eAlthough you can increase these limits by filing a case at \u003ca href=\"https://console.aws.amazon.com/support/home#/\"\u003eAWS Support Center\u003c/a\u003e, obtaining the increase is not instantaneous. The \u003ccode\u003eDescribeLimits\u003c/code\u003e action lets you write code to compare the capacity you are currently using to those limits imposed by your account so that you have enough time to apply for an increase before you hit a limit.\u003c/p\u003e \u003cp\u003eFor example, you could use one of the AWS SDKs to do the following:\u003c/p\u003e \u003col\u003e \u003cli\u003e \u003cp\u003eCall \u003ccode\u003eDescribeLimits\u003c/code\u003e for a particular region to obtain your current account limits on provisioned capacity there.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eCreate a variable to hold the aggregate read capacity units provisioned for all your tables in that region, and one to hold the aggregate write capacity units. Zero them both.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eCall \u003ccode\u003eListTables\u003c/code\u003e to obtain a list of all your DynamoDB tables.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eFor each table name listed by \u003ccode\u003eListTables\u003c/code\u003e, do the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eCall \u003ccode\u003eDescribeTable\u003c/code\u003e with the table name.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eUse the data returned by \u003ccode\u003eDescribeTable\u003c/code\u003e to add the read capacity units and write capacity units provisioned for the table itself to your variables.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eIf the table has one or more global secondary indexes (GSIs), loop over these GSIs and add their provisioned capacity values to your variables as well.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eReport the account limits for that region returned by \u003ccode\u003eDescribeLimits\u003c/code\u003e, along with the total current provisioned capacity levels you have calculated.\u003c/p\u003e \u003c/li\u003e \u003c/ol\u003e \u003cp\u003eThis will let you see whether you are getting close to your account-level limits.\u003c/p\u003e \u003cp\u003eThe per-table limits apply only when you are creating a new table. They restrict the sum of the provisioned capacity of the new table itself and all its global secondary indexes.\u003c/p\u003e \u003cp\u003eFor existing tables and their GSIs, DynamoDB will not let you increase provisioned capacity extremely rapidly, but the only upper limit that applies is that the aggregate provisioned capacity over all your tables and GSIs cannot exceed either of the per-account limits.\u003c/p\u003e \u003cnote\u003e \u003cp\u003e \u003ccode\u003eDescribeLimits\u003c/code\u003e should only be called periodically. You can expect throttling errors if you call it more than once in a minute.\u003c/p\u003e \u003c/note\u003e \u003cp\u003eThe \u003ccode\u003eDescribeLimits\u003c/code\u003e Request element has no content.\u003c/p\u003e",
	"paths./#DescribeLimits.post.operationId": "DescribeLimits",
	"paths./#DescribeLimits.post.parameters.length": 1,
	"paths./#DescribeLimits.post.parameters[0].in": "body",
	"paths./#DescribeLimits.post.parameters[0].name": "body",
	"paths./#DescribeLimits.post.parameters[0].required": true,
	"paths./#DescribeLimits.post.parameters[0].schema.$ref": "#/definitions/DescribeLimitsInput",
	"paths./#DescribeLimits.post.responses.200.description": "Success",
	"paths./#DescribeLimits.post.responses.200.schema.$ref": "#/definitions/DescribeLimitsOutput",
	"paths./#DescribeLimits.post.responses.480.description": "InternalServerError",
	"paths./#DescribeLimits.post.responses.480.schema.$ref": "#/definitions/InternalServerError",
	"paths./#DescribeTable.parameters.length": 9,
	"paths./#DescribeTable.parameters[0].$ref": "#/parameters/Action",
	"paths./#DescribeTable.parameters[1].$ref": "#/parameters/Version",
	"paths./#DescribeTable.parameters[2].$ref": "#/parameters/X-Amz-Content-Sha256",
	"paths./#DescribeTable.parameters[3].$ref": "#/parameters/X-Amz-Date",
	"paths./#DescribeTable.parameters[4].$ref": "#/parameters/X-Amz-Algorithm",
	"paths./#DescribeTable.parameters[5].$ref": "#/parameters/X-Amz-Credential",
	"paths./#DescribeTable.parameters[6].$ref": "#/parameters/X-Amz-Security-Token",
	"paths./#DescribeTable.parameters[7].$ref": "#/parameters/X-Amz-Signature",
	"paths./#DescribeTable.parameters[8].$ref": "#/parameters/X-Amz-SignedHeaders",
	"paths./#DescribeTable.post.description": "\u003cp\u003eReturns information about the table, including the current status of the table, when it was created, the primary key schema, and any indexes on the table.\u003c/p\u003e \u003cnote\u003e \u003cp\u003eIf you issue a \u003ccode\u003eDescribeTable\u003c/code\u003e request immediately after a \u003ccode\u003eCreateTable\u003c/code\u003e request, DynamoDB might return a \u003ccode\u003eResourceNotFoundException\u003c/code\u003e. This is because \u003ccode\u003eDescribeTable\u003c/code\u003e uses an eventually consistent query, and the metadata for your table might not be available at that moment. Wait for a few seconds, and then try the \u003ccode\u003eDescribeTable\u003c/code\u003e request again.\u003c/p\u003e \u003c/note\u003e",
	"paths./#DescribeTable.post.operationId": "DescribeTable",
	"paths./#DescribeTable.post.parameters.length": 1,
	"paths./#DescribeTable.post.parameters[0].in": "body",
	"paths./#DescribeTable.post.parameters[0].name": "body",
	"paths./#DescribeTable.post.parameters[0].required": true,
	"paths./#DescribeTable.post.parameters[0].schema.$ref": "#/definitions/DescribeTableInput",
	"paths./#DescribeTable.post.responses.200.description": "Success",
	"paths./#DescribeTable.post.responses.200.schema.$ref": "#/definitions/DescribeTableOutput",
	"paths./#DescribeTable.post.responses.480.description": "ResourceNotFoundException",
	"paths./#DescribeTable.post.responses.480.schema.$ref": "#/definitions/ResourceNotFoundException",
	"paths./#DescribeTable.post.responses.481.description": "InternalServerError",
	"paths./#DescribeTable.post.responses.481.schema.$ref": "#/definitions/InternalServerError",
	"paths./#DescribeTable.post.x-waiters.length": 2,
	"paths./#DescribeTable.post.x-waiters[0].acceptors.length": 2,
	"paths./#DescribeTable.post.x-waiters[0].acceptors[0].argument": "Table.TableStatus",
	"paths./#DescribeTable.post.x-waiters[0].acceptors[0].expected": "ACTIVE",
	"paths./#DescribeTable.post.x-waiters[0].acceptors[0].matcher": "path",
	"paths./#DescribeTable.post.x-waiters[0].acceptors[0].state": "success",
	"paths./#DescribeTable.post.x-waiters[0].acceptors[1].expected": "ResourceNotFoundException",
	"paths./#DescribeTable.post.x-waiters[0].acceptors[1].matcher": "error",
	"paths./#DescribeTable.post.x-waiters[0].acceptors[1].state": "retry",
	"paths./#DescribeTable.post.x-waiters[0].delay": 20,
	"paths./#DescribeTable.post.x-waiters[0].maxAttempts": 25,
	"paths./#DescribeTable.post.x-waiters[0].operation": "DescribeTable",
	"paths./#DescribeTable.post.x-waiters[1].acceptors.length": 1,
	"paths./#DescribeTable.post.x-waiters[1].acceptors[0].expected": "ResourceNotFoundException",
	"paths./#DescribeTable.post.x-waiters[1].acceptors[0].matcher": "error",
	"paths./#DescribeTable.post.x-waiters[1].acceptors[0].state": "success",
	"paths./#DescribeTable.post.x-waiters[1].delay": 20,
	"paths./#DescribeTable.post.x-waiters[1].maxAttempts": 25,
	"paths./#DescribeTable.post.x-waiters[1].operation": "DescribeTable",
	"paths./#DescribeTimeToLive.parameters.length": 9,
	"paths./#DescribeTimeToLive.parameters[0].$ref": "#/parameters/Action",
	"paths./#DescribeTimeToLive.parameters[1].$ref": "#/parameters/Version",
	"paths./#DescribeTimeToLive.parameters[2].$ref": "#/parameters/X-Amz-Content-Sha256",
	"paths./#DescribeTimeToLive.parameters[3].$ref": "#/parameters/X-Amz-Date",
	"paths./#DescribeTimeToLive.parameters[4].$ref": "#/parameters/X-Amz-Algorithm",
	"paths./#DescribeTimeToLive.parameters[5].$ref": "#/parameters/X-Amz-Credential",
	"paths./#DescribeTimeToLive.parameters[6].$ref": "#/parameters/X-Amz-Security-Token",
	"paths./#DescribeTimeToLive.parameters[7].$ref": "#/parameters/X-Amz-Signature",
	"paths./#DescribeTimeToLive.parameters[8].$ref": "#/parameters/X-Amz-SignedHeaders",
	"paths./#DescribeTimeToLive.post.description": "Gives a description of the Time to Live (TTL) status on the specified table. ",
	"paths./#DescribeTimeToLive.post.operationId": "DescribeTimeToLive",
	"paths./#DescribeTimeToLive.post.parameters.length": 1,
	"paths./#DescribeTimeToLive.post.parameters[0].in": "body",
	"paths./#DescribeTimeToLive.post.parameters[0].name": "body",
	"paths./#DescribeTimeToLive.post.parameters[0].required": true,
	"paths./#DescribeTimeToLive.post.parameters[0].schema.$ref": "#/definitions/DescribeTimeToLiveInput",
	"paths./#DescribeTimeToLive.post.responses.200.description": "Success",
	"paths./#DescribeTimeToLive.post.responses.200.schema.$ref": "#/definitions/DescribeTimeToLiveOutput",
	"paths./#DescribeTimeToLive.post.responses.480.description": "ResourceNotFoundException",
	"paths./#DescribeTimeToLive.post.responses.480.schema.$ref": "#/definitions/ResourceNotFoundException",
	"paths./#DescribeTimeToLive.post.responses.481.description": "InternalServerError",
	"paths./#DescribeTimeToLive.post.responses.481.schema.$ref": "#/definitions/InternalServerError",
	"paths./#GetItem.parameters.length": 9,
	"paths./#GetItem.parameters[0].$ref": "#/parameters/Action",
	"paths./#GetItem.parameters[1].$ref": "#/parameters/Version",
	"paths./#GetItem.parameters[2].$ref": "#/parameters/X-Amz-Content-Sha256",
	"paths./#GetItem.parameters[3].$ref": "#/parameters/X-Amz-Date",
	"paths./#GetItem.parameters[4].$ref": "#/parameters/X-Amz-Algorithm",
	"paths./#GetItem.parameters[5].$ref": "#/parameters/X-Amz-Credential",
	"paths./#GetItem.parameters[6].$ref": "#/parameters/X-Amz-Security-Token",
	"paths./#GetItem.parameters[7].$ref": "#/parameters/X-Amz-Signature",
	"paths./#GetItem.parameters[8].$ref": "#/parameters/X-Amz-SignedHeaders",
	"paths./#GetItem.post.description": "\u003cp\u003eThe \u003ccode\u003eGetItem\u003c/code\u003e operation returns a set of attributes for the item with the given primary key. If there is no matching item, \u003ccode\u003eGetItem\u003c/code\u003e does not return any data and there will be no \u003ccode\u003eItem\u003c/code\u003e element in the response.\u003c/p\u003e \u003cp\u003e \u003ccode\u003eGetItem\u003c/code\u003e provides an eventually consistent read by default. If your application requires a strongly consistent read, set \u003ccode\u003eConsistentRead\u003c/code\u003e to \u003ccode\u003etrue\u003c/code\u003e. Although a strongly consistent read might take more time than an eventually consistent read, it always returns the last updated value.\u003c/p\u003e",
	"paths./#GetItem.post.operationId": "GetItem",
	"paths./#GetItem.post.parameters.length": 1,
	"paths./#GetItem.post.parameters[0].in": "body",
	"paths./#GetItem.post.parameters[0].name": "body",
	"paths./#GetItem.post.parameters[0].required": true,
	"paths./#GetItem.post.parameters[0].schema.$ref": "#/definitions/GetItemInput",
	"paths./#GetItem.post.responses.200.description": "Success",
	"paths./#GetItem.post.responses.200.schema.$ref": "#/definitions/GetItemOutput",
	"paths./#GetItem.post.responses.480.description": "ProvisionedThroughputExceededException",
	"paths./#GetItem.post.responses.480.schema.$ref": "#/definitions/ProvisionedThroughputExceededException",
	"paths./#GetItem.post.responses.481.description": "ResourceNotFoundException",
	"paths./#GetItem.post.responses.481.schema.$ref": "#/definitions/ResourceNotFoundException",
	"paths./#GetItem.post.responses.482.description": "InternalServerError",
	"paths./#GetItem.post.responses.482.schema.$ref": "#/definitions/InternalServerError",
	"paths./#ListTables.parameters.length": 9,
	"paths./#ListTables.parameters[0].$ref": "#/parameters/Action",
	"paths./#ListTables.parameters[1].$ref": "#/parameters/Version",
	"paths./#ListTables.parameters[2].$ref": "#/parameters/X-Amz-Content-Sha256",
	"paths./#ListTables.parameters[3].$ref": "#/parameters/X-Amz-Date",
	"paths./#ListTables.parameters[4].$ref": "#/parameters/X-Amz-Algorithm",
	"paths./#ListTables.parameters[5].$ref": "#/parameters/X-Amz-Credential",
	"paths./#ListTables.parameters[6].$ref": "#/parameters/X-Amz-Security-Token",
	"paths./#ListTables.parameters[7].$ref": "#/parameters/X-Amz-Signature",
	"paths./#ListTables.parameters[8].$ref": "#/parameters/X-Amz-SignedHeaders",
	"paths./#ListTables.post.description": "Returns an array of table names associated with the current account and endpoint. The output from \u003ccode\u003eListTables\u003c/code\u003e is paginated, with each page returning a maximum of 100 table names.",
	"paths./#ListTables.post.operationId": "ListTables",
	"paths./#ListTables.post.parameters.length": 3,
	"paths./#ListTables.post.parameters[0].in": "body",
	"paths./#ListTables.post.parameters[0].name": "body",
	"paths./#ListTables.post.parameters[0].required": true,
	"paths./#ListTables.post.parameters[0].schema.$ref": "#/definitions/ListTablesInput",
	"paths./#ListTables.post.parameters[1].description": "Pagination limit",
	"paths./#ListTables.post.parameters[1].in": "query",
	"paths./#ListTables.post.parameters[1].name": "Limit",
	"paths./#ListTables.post.parameters[1].required": false,
	"paths./#ListTables.post.parameters[1].type": "string",
	"paths./#ListTables.post.parameters[2].description": "Pagination token",
	"paths./#ListTables.post.parameters[2].in": "query",
	"paths./#ListTables.post.parameters[2].name": "ExclusiveStartTableName",
	"paths./#ListTables.post.parameters[2].required": false,
	"paths./#ListTables.post.parameters[2].type": "string",
	"paths./#ListTables.post.responses.200.description": "Success",
	"paths./#ListTables.post.responses.200.schema.$ref": "#/definitions/ListTablesOutput",
	"paths./#ListTables.post.responses.480.description": "InternalServerError",
	"paths./#ListTables.post.responses.480.schema.$ref": "#/definitions/InternalServerError",
	"paths./#ListTagsOfResource.parameters.length": 9,
	"paths./#ListTagsOfResource.parameters[0].$ref": "#/parameters/Action",
	"paths./#ListTagsOfResource.parameters[1].$ref": "#/parameters/Version",
	"paths./#ListTagsOfResource.parameters[2].$ref": "#/parameters/X-Amz-Content-Sha256",
	"paths./#ListTagsOfResource.parameters[3].$ref": "#/parameters/X-Amz-Date",
	"paths./#ListTagsOfResource.parameters[4].$ref": "#/parameters/X-Amz-Algorithm",
	"paths./#ListTagsOfResource.parameters[5].$ref": "#/parameters/X-Amz-Credential",
	"paths./#ListTagsOfResource.parameters[6].$ref": "#/parameters/X-Amz-Security-Token",
	"paths./#ListTagsOfResource.parameters[7].$ref": "#/parameters/X-Amz-Signature",
	"paths./#ListTagsOfResource.parameters[8].$ref": "#/parameters/X-Amz-SignedHeaders",
	"paths./#ListTagsOfResource.post.description": "\u003cp\u003eList all tags on an Amazon DynamoDB resource. You can call ListTagsOfResource up to 10 times per second, per account.\u003c/p\u003e \u003cp\u003eFor an overview on tagging DynamoDB resources, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html\"\u003eTagging for DynamoDB\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"paths./#ListTagsOfResource.post.operationId": "ListTagsOfResource",
	"paths./#ListTagsOfResource.post.parameters.length": 1,
	"paths./#ListTagsOfResource.post.parameters[0].in": "body",
	"paths./#ListTagsOfResource.post.parameters[0].name": "body",
	"paths./#ListTagsOfResource.post.parameters[0].required": true,
	"paths./#ListTagsOfResource.post.parameters[0].schema.$ref": "#/definitions/ListTagsOfResourceInput",
	"paths./#ListTagsOfResource.post.responses.200.description": "Success",
	"paths./#ListTagsOfResource.post.responses.200.schema.$ref": "#/definitions/ListTagsOfResourceOutput",
	"paths./#ListTagsOfResource.post.responses.480.description": "ResourceNotFoundException",
	"paths./#ListTagsOfResource.post.responses.480.schema.$ref": "#/definitions/ResourceNotFoundException",
	"paths./#ListTagsOfResource.post.responses.481.description": "InternalServerError",
	"paths./#ListTagsOfResource.post.responses.481.schema.$ref": "#/definitions/InternalServerError",
	"paths./#PutItem.parameters.length": 9,
	"paths./#PutItem.parameters[0].$ref": "#/parameters/Action",
	"paths./#PutItem.parameters[1].$ref": "#/parameters/Version",
	"paths./#PutItem.parameters[2].$ref": "#/parameters/X-Amz-Content-Sha256",
	"paths./#PutItem.parameters[3].$ref": "#/parameters/X-Amz-Date",
	"paths./#PutItem.parameters[4].$ref": "#/parameters/X-Amz-Algorithm",
	"paths./#PutItem.parameters[5].$ref": "#/parameters/X-Amz-Credential",
	"paths./#PutItem.parameters[6].$ref": "#/parameters/X-Amz-Security-Token",
	"paths./#PutItem.parameters[7].$ref": "#/parameters/X-Amz-Signature",
	"paths./#PutItem.parameters[8].$ref": "#/parameters/X-Amz-SignedHeaders",
	"paths./#PutItem.post.description": "\u003cp\u003eCreates a new item, or replaces an old item with a new item. If an item that has the same primary key as the new item already exists in the specified table, the new item completely replaces the existing item. You can perform a conditional put operation (add a new item if one with the specified primary key doesn't exist), or replace an existing item if it has certain attribute values. You can return the item's attribute values in the same operation, using the \u003ccode\u003eReturnValues\u003c/code\u003e parameter.\u003c/p\u003e \u003cimportant\u003e \u003cp\u003eThis topic provides general information about the \u003ccode\u003ePutItem\u003c/code\u003e API.\u003c/p\u003e \u003cp\u003eFor information on how to call the \u003ccode\u003ePutItem\u003c/code\u003e API using the AWS SDK in specific languages, see the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ca href=\"http://docs.aws.amazon.com/goto/aws-cli/dynamodb-2012-08-10/PutItem\"\u003e PutItem in the AWS Command Line Interface \u003c/a\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ca href=\"http://docs.aws.amazon.com/goto/DotNetSDKV3/dynamodb-2012-08-10/PutItem\"\u003e PutItem in the AWS SDK for .NET \u003c/a\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ca href=\"http://docs.aws.amazon.com/goto/SdkForCpp/dynamodb-2012-08-10/PutItem\"\u003e PutItem in the AWS SDK for C++ \u003c/a\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ca href=\"http://docs.aws.amazon.com/goto/SdkForGoV1/dynamodb-2012-08-10/PutItem\"\u003e PutItem in the AWS SDK for Go \u003c/a\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ca href=\"http://docs.aws.amazon.com/goto/SdkForJava/dynamodb-2012-08-10/PutItem\"\u003e PutItem in the AWS SDK for Java \u003c/a\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ca href=\"http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/dynamodb-2012-08-10/PutItem\"\u003e PutItem in the AWS SDK for JavaScript \u003c/a\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ca href=\"http://docs.aws.amazon.com/goto/SdkForPHPV3/dynamodb-2012-08-10/PutItem\"\u003e PutItem in the AWS SDK for PHP V3 \u003c/a\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ca href=\"http://docs.aws.amazon.com/goto/boto3/dynamodb-2012-08-10/PutItem\"\u003e PutItem in the AWS SDK for Python \u003c/a\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ca href=\"http://docs.aws.amazon.com/goto/SdkForRubyV2/dynamodb-2012-08-10/PutItem\"\u003e PutItem in the AWS SDK for Ruby V2 \u003c/a\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/important\u003e \u003cp\u003eWhen you add an item, the primary key attribute(s) are the only required attributes. Attribute values cannot be null. String and Binary type attributes must have lengths greater than zero. Set type attributes cannot be empty. Requests with empty values will be rejected with a \u003ccode\u003eValidationException\u003c/code\u003e exception.\u003c/p\u003e \u003cnote\u003e \u003cp\u003eTo prevent a new item from replacing an existing item, use a conditional expression that contains the \u003ccode\u003eattribute_not_exists\u003c/code\u003e function with the name of the attribute being used as the partition key for the table. Since every record must contain that attribute, the \u003ccode\u003eattribute_not_exists\u003c/code\u003e function will only succeed if no matching item exists.\u003c/p\u003e \u003c/note\u003e \u003cp\u003eFor more information about \u003ccode\u003ePutItem\u003c/code\u003e, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html\"\u003eWorking with Items\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"paths./#PutItem.post.operationId": "PutItem",
	"paths./#PutItem.post.parameters.length": 1,
	"paths./#PutItem.post.parameters[0].in": "body",
	"paths./#PutItem.post.parameters[0].name": "body",
	"paths./#PutItem.post.parameters[0].required": true,
	"paths./#PutItem.post.parameters[0].schema.$ref": "#/definitions/PutItemInput",
	"paths./#PutItem.post.responses.200.description": "Success",
	"paths./#PutItem.post.responses.200.schema.$ref": "#/definitions/PutItemOutput",
	"paths./#PutItem.post.responses.480.description": "ConditionalCheckFailedException",
	"paths./#PutItem.post.responses.480.schema.$ref": "#/definitions/ConditionalCheckFailedException",
	"paths./#PutItem.post.responses.481.description": "ProvisionedThroughputExceededException",
	"paths./#PutItem.post.responses.481.schema.$ref": "#/definitions/ProvisionedThroughputExceededException",
	"paths./#PutItem.post.responses.482.description": "ResourceNotFoundException",
	"paths./#PutItem.post.responses.482.schema.$ref": "#/definitions/ResourceNotFoundException",
	"paths./#PutItem.post.responses.483.description": "ItemCollectionSizeLimitExceededException",
	"paths./#PutItem.post.responses.483.schema.$ref": "#/definitions/ItemCollectionSizeLimitExceededException",
	"paths./#PutItem.post.responses.484.description": "InternalServerError",
	"paths./#PutItem.post.responses.484.schema.$ref": "#/definitions/InternalServerError",
	"paths./#Query.parameters.length": 9,
	"paths./#Query.parameters[0].$ref": "#/parameters/Action",
	"paths./#Query.parameters[1].$ref": "#/parameters/Version",
	"paths./#Query.parameters[2].$ref": "#/parameters/X-Amz-Content-Sha256",
	"paths./#Query.parameters[3].$ref": "#/parameters/X-Amz-Date",
	"paths./#Query.parameters[4].$ref": "#/parameters/X-Amz-Algorithm",
	"paths./#Query.parameters[5].$ref": "#/parameters/X-Amz-Credential",
	"paths./#Query.parameters[6].$ref": "#/parameters/X-Amz-Security-Token",
	"paths./#Query.parameters[7].$ref": "#/parameters/X-Amz-Signature",
	"paths./#Query.parameters[8].$ref": "#/parameters/X-Amz-SignedHeaders",
	"paths./#Query.post.description": "\u003cp\u003eThe \u003ccode\u003eQuery\u003c/code\u003e operation finds items based on primary key values. You can query any table or secondary index that has a composite primary key (a partition key and a sort key). \u003c/p\u003e \u003cp\u003eUse the \u003ccode\u003eKeyConditionExpression\u003c/code\u003e parameter to provide a specific value for the partition key. The \u003ccode\u003eQuery\u003c/code\u003e operation will return all of the items from the table or index with that partition key value. You can optionally narrow the scope of the \u003ccode\u003eQuery\u003c/code\u003e operation by specifying a sort key value and a comparison operator in \u003ccode\u003eKeyConditionExpression\u003c/code\u003e. To further refine the \u003ccode\u003eQuery\u003c/code\u003e results, you can optionally provide a \u003ccode\u003eFilterExpression\u003c/code\u003e. A \u003ccode\u003eFilterExpression\u003c/code\u003e determines which items within the results should be returned to you. All of the other results are discarded. \u003c/p\u003e \u003cp\u003e A \u003ccode\u003eQuery\u003c/code\u003e operation always returns a result set. If no matching items are found, the result set will be empty. Queries that do not return results consume the minimum number of read capacity units for that type of read operation. \u003c/p\u003e \u003cnote\u003e \u003cp\u003e DynamoDB calculates the number of read capacity units consumed based on item size, not on the amount of data that is returned to an application. The number of capacity units consumed will be the same whether you request all of the attributes (the default behavior) or just some of them (using a projection expression). The number will also be the same whether or not you use a \u003ccode\u003eFilterExpression\u003c/code\u003e. \u003c/p\u003e \u003c/note\u003e \u003cp\u003e \u003ccode\u003eQuery\u003c/code\u003e results are always sorted by the sort key value. If the data type of the sort key is Number, the results are returned in numeric order; otherwise, the results are returned in order of UTF-8 bytes. By default, the sort order is ascending. To reverse the order, set the \u003ccode\u003eScanIndexForward\u003c/code\u003e parameter to false. \u003c/p\u003e \u003cp\u003e A single \u003ccode\u003eQuery\u003c/code\u003e operation will read up to the maximum number of items set (if using the \u003ccode\u003eLimit\u003c/code\u003e parameter) or a maximum of 1 MB of data and then apply any filtering to the results using \u003ccode\u003eFilterExpression\u003c/code\u003e. If \u003ccode\u003eLastEvaluatedKey\u003c/code\u003e is present in the response, you will need to paginate the result set. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Query.html#Query.Pagination\"\u003ePaginating the Results\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e. \u003c/p\u003e \u003cp\u003e \u003ccode\u003eFilterExpression\u003c/code\u003e is applied after a \u003ccode\u003eQuery\u003c/code\u003e finishes, but before the results are returned. A \u003ccode\u003eFilterExpression\u003c/code\u003e cannot contain partition key or sort key attributes. You need to specify those attributes in the \u003ccode\u003eKeyConditionExpression\u003c/code\u003e. \u003c/p\u003e \u003cnote\u003e \u003cp\u003e A \u003ccode\u003eQuery\u003c/code\u003e operation can return an empty result set and a \u003ccode\u003eLastEvaluatedKey\u003c/code\u003e if all the items read for the page of results are filtered out. \u003c/p\u003e \u003c/note\u003e \u003cp\u003eYou can query a table, a local secondary index, or a global secondary index. For a query on a table or on a local secondary index, you can set the \u003ccode\u003eConsistentRead\u003c/code\u003e parameter to \u003ccode\u003etrue\u003c/code\u003e and obtain a strongly consistent result. Global secondary indexes support eventually consistent reads only, so do not specify \u003ccode\u003eConsistentRead\u003c/code\u003e when querying a global secondary index.\u003c/p\u003e",
	"paths./#Query.post.operationId": "Query",
	"paths./#Query.post.parameters.length": 3,
	"paths./#Query.post.parameters[0].in": "body",
	"paths./#Query.post.parameters[0].name": "body",
	"paths./#Query.post.parameters[0].required": true,
	"paths./#Query.post.parameters[0].schema.$ref": "#/definitions/QueryInput",
	"paths./#Query.post.parameters[1].description": "Pagination limit",
	"paths./#Query.post.parameters[1].in": "query",
	"paths./#Query.post.parameters[1].name": "Limit",
	"paths./#Query.post.parameters[1].required": false,
	"paths./#Query.post.parameters[1].type": "string",
	"paths./#Query.post.parameters[2].description": "Pagination token",
	"paths./#Query.post.parameters[2].in": "query",
	"paths./#Query.post.parameters[2].name": "ExclusiveStartKey",
	"paths./#Query.post.parameters[2].required": false,
	"paths./#Query.post.parameters[2].type": "string",
	"paths./#Query.post.responses.200.description": "Success",
	"paths./#Query.post.responses.200.schema.$ref": "#/definitions/QueryOutput",
	"paths./#Query.post.responses.480.description": "ProvisionedThroughputExceededException",
	"paths./#Query.post.responses.480.schema.$ref": "#/definitions/ProvisionedThroughputExceededException",
	"paths./#Query.post.responses.481.description": "ResourceNotFoundException",
	"paths./#Query.post.responses.481.schema.$ref": "#/definitions/ResourceNotFoundException",
	"paths./#Query.post.responses.482.description": "InternalServerError",
	"paths./#Query.post.responses.482.schema.$ref": "#/definitions/InternalServerError",
	"paths./#Scan.parameters.length": 9,
	"paths./#Scan.parameters[0].$ref": "#/parameters/Action",
	"paths./#Scan.parameters[1].$ref": "#/parameters/Version",
	"paths./#Scan.parameters[2].$ref": "#/parameters/X-Amz-Content-Sha256",
	"paths./#Scan.parameters[3].$ref": "#/parameters/X-Amz-Date",
	"paths./#Scan.parameters[4].$ref": "#/parameters/X-Amz-Algorithm",
	"paths./#Scan.parameters[5].$ref": "#/parameters/X-Amz-Credential",
	"paths./#Scan.parameters[6].$ref": "#/parameters/X-Amz-Security-Token",
	"paths./#Scan.parameters[7].$ref": "#/parameters/X-Amz-Signature",
	"paths./#Scan.parameters[8].$ref": "#/parameters/X-Amz-SignedHeaders",
	"paths./#Scan.post.description": "\u003cp\u003eThe \u003ccode\u003eScan\u003c/code\u003e operation returns one or more items and item attributes by accessing every item in a table or a secondary index. To have DynamoDB return fewer items, you can provide a \u003ccode\u003eFilterExpression\u003c/code\u003e operation.\u003c/p\u003e \u003cp\u003eIf the total number of scanned items exceeds the maximum data set size limit of 1 MB, the scan stops and results are returned to the user as a \u003ccode\u003eLastEvaluatedKey\u003c/code\u003e value to continue the scan in a subsequent operation. The results also include the number of items exceeding the limit. A scan can result in no table data meeting the filter criteria. \u003c/p\u003e \u003cp\u003eA single \u003ccode\u003eScan\u003c/code\u003e operation will read up to the maximum number of items set (if using the \u003ccode\u003eLimit\u003c/code\u003e parameter) or a maximum of 1 MB of data and then apply any filtering to the results using \u003ccode\u003eFilterExpression\u003c/code\u003e. If \u003ccode\u003eLastEvaluatedKey\u003c/code\u003e is present in the response, you will need to paginate the result set. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.Pagination\"\u003ePaginating the Results\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e. \u003c/p\u003e \u003cp\u003e \u003ccode\u003eScan\u003c/code\u003e operations proceed sequentially; however, for faster performance on a large table or secondary index, applications can request a parallel \u003ccode\u003eScan\u003c/code\u003e operation by providing the \u003ccode\u003eSegment\u003c/code\u003e and \u003ccode\u003eTotalSegments\u003c/code\u003e parameters. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.ParallelScan\"\u003eParallel Scan\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cp\u003e \u003ccode\u003eScan\u003c/code\u003e uses eventually consistent reads when accessing the data in a table; therefore, the result set might not include the changes to data in the table immediately before the operation began. If you need a consistent copy of the data, as of the time that the \u003ccode\u003eScan\u003c/code\u003e begins, you can set the \u003ccode\u003eConsistentRead\u003c/code\u003e parameter to \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e",
	"paths./#Scan.post.operationId": "Scan",
	"paths./#Scan.post.parameters.length": 3,
	"paths./#Scan.post.parameters[0].in": "body",
	"paths./#Scan.post.parameters[0].name": "body",
	"paths./#Scan.post.parameters[0].required": true,
	"paths./#Scan.post.parameters[0].schema.$ref": "#/definitions/ScanInput",
	"paths./#Scan.post.parameters[1].description": "Pagination limit",
	"paths./#Scan.post.parameters[1].in": "query",
	"paths./#Scan.post.parameters[1].name": "Limit",
	"paths./#Scan.post.parameters[1].required": false,
	"paths./#Scan.post.parameters[1].type": "string",
	"paths./#Scan.post.parameters[2].description": "Pagination token",
	"paths./#Scan.post.parameters[2].in": "query",
	"paths./#Scan.post.parameters[2].name": "ExclusiveStartKey",
	"paths./#Scan.post.parameters[2].required": false,
	"paths./#Scan.post.parameters[2].type": "string",
	"paths./#Scan.post.responses.200.description": "Success",
	"paths./#Scan.post.responses.200.schema.$ref": "#/definitions/ScanOutput",
	"paths./#Scan.post.responses.480.description": "ProvisionedThroughputExceededException",
	"paths./#Scan.post.responses.480.schema.$ref": "#/definitions/ProvisionedThroughputExceededException",
	"paths./#Scan.post.responses.481.description": "ResourceNotFoundException",
	"paths./#Scan.post.responses.481.schema.$ref": "#/definitions/ResourceNotFoundException",
	"paths./#Scan.post.responses.482.description": "InternalServerError",
	"paths./#Scan.post.responses.482.schema.$ref": "#/definitions/InternalServerError",
	"paths./#TagResource.parameters.length": 9,
	"paths./#TagResource.parameters[0].$ref": "#/parameters/Action",
	"paths./#TagResource.parameters[1].$ref": "#/parameters/Version",
	"paths./#TagResource.parameters[2].$ref": "#/parameters/X-Amz-Content-Sha256",
	"paths./#TagResource.parameters[3].$ref": "#/parameters/X-Amz-Date",
	"paths./#TagResource.parameters[4].$ref": "#/parameters/X-Amz-Algorithm",
	"paths./#TagResource.parameters[5].$ref": "#/parameters/X-Amz-Credential",
	"paths./#TagResource.parameters[6].$ref": "#/parameters/X-Amz-Security-Token",
	"paths./#TagResource.parameters[7].$ref": "#/parameters/X-Amz-Signature",
	"paths./#TagResource.parameters[8].$ref": "#/parameters/X-Amz-SignedHeaders",
	"paths./#TagResource.post.description": "\u003cp\u003eAssociate a set of tags with an Amazon DynamoDB resource. You can then activate these user-defined tags so that they appear on the Billing and Cost Management console for cost allocation tracking. You can call TagResource up to 5 times per second, per account. \u003c/p\u003e \u003cp\u003eFor an overview on tagging DynamoDB resources, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html\"\u003eTagging for DynamoDB\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"paths./#TagResource.post.operationId": "TagResource",
	"paths./#TagResource.post.parameters.length": 1,
	"paths./#TagResource.post.parameters[0].in": "body",
	"paths./#TagResource.post.parameters[0].name": "body",
	"paths./#TagResource.post.parameters[0].required": true,
	"paths./#TagResource.post.parameters[0].schema.$ref": "#/definitions/TagResourceInput",
	"paths./#TagResource.post.responses.200.description": "Success",
	"paths./#TagResource.post.responses.480.description": "LimitExceededException",
	"paths./#TagResource.post.responses.480.schema.$ref": "#/definitions/LimitExceededException",
	"paths./#TagResource.post.responses.481.description": "ResourceNotFoundException",
	"paths./#TagResource.post.responses.481.schema.$ref": "#/definitions/ResourceNotFoundException",
	"paths./#TagResource.post.responses.482.description": "InternalServerError",
	"paths./#TagResource.post.responses.482.schema.$ref": "#/definitions/InternalServerError",
	"paths./#TagResource.post.responses.483.description": "ResourceInUseException",
	"paths./#TagResource.post.responses.483.schema.$ref": "#/definitions/ResourceInUseException",
	"paths./#UntagResource.parameters.length": 9,
	"paths./#UntagResource.parameters[0].$ref": "#/parameters/Action",
	"paths./#UntagResource.parameters[1].$ref": "#/parameters/Version",
	"paths./#UntagResource.parameters[2].$ref": "#/parameters/X-Amz-Content-Sha256",
	"paths./#UntagResource.parameters[3].$ref": "#/parameters/X-Amz-Date",
	"paths./#UntagResource.parameters[4].$ref": "#/parameters/X-Amz-Algorithm",
	"paths./#UntagResource.parameters[5].$ref": "#/parameters/X-Amz-Credential",
	"paths./#UntagResource.parameters[6].$ref": "#/parameters/X-Amz-Security-Token",
	"paths./#UntagResource.parameters[7].$ref": "#/parameters/X-Amz-Signature",
	"paths./#UntagResource.parameters[8].$ref": "#/parameters/X-Amz-SignedHeaders",
	"paths./#UntagResource.post.description": "\u003cp\u003eRemoves the association of tags from an Amazon DynamoDB resource. You can call UntagResource up to 5 times per second, per account. \u003c/p\u003e \u003cp\u003eFor an overview on tagging DynamoDB resources, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html\"\u003eTagging for DynamoDB\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"paths./#UntagResource.post.operationId": "UntagResource",
	"paths./#UntagResource.post.parameters.length": 1,
	"paths./#UntagResource.post.parameters[0].in": "body",
	"paths./#UntagResource.post.parameters[0].name": "body",
	"paths./#UntagResource.post.parameters[0].required": true,
	"paths./#UntagResource.post.parameters[0].schema.$ref": "#/definitions/UntagResourceInput",
	"paths./#UntagResource.post.responses.200.description": "Success",
	"paths./#UntagResource.post.responses.480.description": "LimitExceededException",
	"paths./#UntagResource.post.responses.480.schema.$ref": "#/definitions/LimitExceededException",
	"paths./#UntagResource.post.responses.481.description": "ResourceNotFoundException",
	"paths./#UntagResource.post.responses.481.schema.$ref": "#/definitions/ResourceNotFoundException",
	"paths./#UntagResource.post.responses.482.description": "InternalServerError",
	"paths./#UntagResource.post.responses.482.schema.$ref": "#/definitions/InternalServerError",
	"paths./#UntagResource.post.responses.483.description": "ResourceInUseException",
	"paths./#UntagResource.post.responses.483.schema.$ref": "#/definitions/ResourceInUseException",
	"paths./#UpdateItem.parameters.length": 9,
	"paths./#UpdateItem.parameters[0].$ref": "#/parameters/Action",
	"paths./#UpdateItem.parameters[1].$ref": "#/parameters/Version",
	"paths./#UpdateItem.parameters[2].$ref": "#/parameters/X-Amz-Content-Sha256",
	"paths./#UpdateItem.parameters[3].$ref": "#/parameters/X-Amz-Date",
	"paths./#UpdateItem.parameters[4].$ref": "#/parameters/X-Amz-Algorithm",
	"paths./#UpdateItem.parameters[5].$ref": "#/parameters/X-Amz-Credential",
	"paths./#UpdateItem.parameters[6].$ref": "#/parameters/X-Amz-Security-Token",
	"paths./#UpdateItem.parameters[7].$ref": "#/parameters/X-Amz-Signature",
	"paths./#UpdateItem.parameters[8].$ref": "#/parameters/X-Amz-SignedHeaders",
	"paths./#UpdateItem.post.description": "\u003cp\u003eEdits an existing item's attributes, or adds a new item to the table if it does not already exist. You can put, delete, or add attribute values. You can also perform a conditional update on an existing item (insert a new attribute name-value pair if it doesn't exist, or replace an existing name-value pair if it has certain expected attribute values).\u003c/p\u003e \u003cp\u003eYou can also return the item's attribute values in the same \u003ccode\u003eUpdateItem\u003c/code\u003e operation using the \u003ccode\u003eReturnValues\u003c/code\u003e parameter.\u003c/p\u003e",
	"paths./#UpdateItem.post.operationId": "UpdateItem",
	"paths./#UpdateItem.post.parameters.length": 1,
	"paths./#UpdateItem.post.parameters[0].in": "body",
	"paths./#UpdateItem.post.parameters[0].name": "body",
	"paths./#UpdateItem.post.parameters[0].required": true,
	"paths./#UpdateItem.post.parameters[0].schema.$ref": "#/definitions/UpdateItemInput",
	"paths./#UpdateItem.post.responses.200.description": "Success",
	"paths./#UpdateItem.post.responses.200.schema.$ref": "#/definitions/UpdateItemOutput",
	"paths./#UpdateItem.post.responses.480.description": "ConditionalCheckFailedException",
	"paths./#UpdateItem.post.responses.480.schema.$ref": "#/definitions/ConditionalCheckFailedException",
	"paths./#UpdateItem.post.responses.481.description": "ProvisionedThroughputExceededException",
	"paths./#UpdateItem.post.responses.481.schema.$ref": "#/definitions/ProvisionedThroughputExceededException",
	"paths./#UpdateItem.post.responses.482.description": "ResourceNotFoundException",
	"paths./#UpdateItem.post.responses.482.schema.$ref": "#/definitions/ResourceNotFoundException",
	"paths./#UpdateItem.post.responses.483.description": "ItemCollectionSizeLimitExceededException",
	"paths./#UpdateItem.post.responses.483.schema.$ref": "#/definitions/ItemCollectionSizeLimitExceededException",
	"paths./#UpdateItem.post.responses.484.description": "InternalServerError",
	"paths./#UpdateItem.post.responses.484.schema.$ref": "#/definitions/InternalServerError",
	"paths./#UpdateTable.parameters.length": 9,
	"paths./#UpdateTable.parameters[0].$ref": "#/parameters/Action",
	"paths./#UpdateTable.parameters[1].$ref": "#/parameters/Version",
	"paths./#UpdateTable.parameters[2].$ref": "#/parameters/X-Amz-Content-Sha256",
	"paths./#UpdateTable.parameters[3].$ref": "#/parameters/X-Amz-Date",
	"paths./#UpdateTable.parameters[4].$ref": "#/parameters/X-Amz-Algorithm",
	"paths./#UpdateTable.parameters[5].$ref": "#/parameters/X-Amz-Credential",
	"paths./#UpdateTable.parameters[6].$ref": "#/parameters/X-Amz-Security-Token",
	"paths./#UpdateTable.parameters[7].$ref": "#/parameters/X-Amz-Signature",
	"paths./#UpdateTable.parameters[8].$ref": "#/parameters/X-Amz-SignedHeaders",
	"paths./#UpdateTable.post.description": "\u003cp\u003eModifies the provisioned throughput settings, global secondary indexes, or DynamoDB Streams settings for a given table.\u003c/p\u003e \u003cp\u003eYou can only perform one of the following operations at once:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eModify the provisioned throughput settings of the table.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eEnable or disable Streams on the table.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eRemove a global secondary index from the table.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eCreate a new global secondary index on the table. Once the index begins backfilling, you can use \u003ccode\u003eUpdateTable\u003c/code\u003e to perform other operations.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003e \u003ccode\u003eUpdateTable\u003c/code\u003e is an asynchronous operation; while it is executing, the table status changes from \u003ccode\u003eACTIVE\u003c/code\u003e to \u003ccode\u003eUPDATING\u003c/code\u003e. While it is \u003ccode\u003eUPDATING\u003c/code\u003e, you cannot issue another \u003ccode\u003eUpdateTable\u003c/code\u003e request. When the table returns to the \u003ccode\u003eACTIVE\u003c/code\u003e state, the \u003ccode\u003eUpdateTable\u003c/code\u003e operation is complete.\u003c/p\u003e",
	"paths./#UpdateTable.post.operationId": "UpdateTable",
	"paths./#UpdateTable.post.parameters.length": 1,
	"paths./#UpdateTable.post.parameters[0].in": "body",
	"paths./#UpdateTable.post.parameters[0].name": "body",
	"paths./#UpdateTable.post.parameters[0].required": true,
	"paths./#UpdateTable.post.parameters[0].schema.$ref": "#/definitions/UpdateTableInput",
	"paths./#UpdateTable.post.responses.200.description": "Success",
	"paths./#UpdateTable.post.responses.200.schema.$ref": "#/definitions/UpdateTableOutput",
	"paths./#UpdateTable.post.responses.480.description": "ResourceInUseException",
	"paths./#UpdateTable.post.responses.480.schema.$ref": "#/definitions/ResourceInUseException",
	"paths./#UpdateTable.post.responses.481.description": "ResourceNotFoundException",
	"paths./#UpdateTable.post.responses.481.schema.$ref": "#/definitions/ResourceNotFoundException",
	"paths./#UpdateTable.post.responses.482.description": "LimitExceededException",
	"paths./#UpdateTable.post.responses.482.schema.$ref": "#/definitions/LimitExceededException",
	"paths./#UpdateTable.post.responses.483.description": "InternalServerError",
	"paths./#UpdateTable.post.responses.483.schema.$ref": "#/definitions/InternalServerError",
	"paths./#UpdateTimeToLive.parameters.length": 9,
	"paths./#UpdateTimeToLive.parameters[0].$ref": "#/parameters/Action",
	"paths./#UpdateTimeToLive.parameters[1].$ref": "#/parameters/Version",
	"paths./#UpdateTimeToLive.parameters[2].$ref": "#/parameters/X-Amz-Content-Sha256",
	"paths./#UpdateTimeToLive.parameters[3].$ref": "#/parameters/X-Amz-Date",
	"paths./#UpdateTimeToLive.parameters[4].$ref": "#/parameters/X-Amz-Algorithm",
	"paths./#UpdateTimeToLive.parameters[5].$ref": "#/parameters/X-Amz-Credential",
	"paths./#UpdateTimeToLive.parameters[6].$ref": "#/parameters/X-Amz-Security-Token",
	"paths./#UpdateTimeToLive.parameters[7].$ref": "#/parameters/X-Amz-Signature",
	"paths./#UpdateTimeToLive.parameters[8].$ref": "#/parameters/X-Amz-SignedHeaders",
	"paths./#UpdateTimeToLive.post.description": "\u003cp\u003eThe UpdateTimeToLive method will enable or disable TTL for the specified table. A successful \u003ccode\u003eUpdateTimeToLive\u003c/code\u003e call returns the current \u003ccode\u003eTimeToLiveSpecification\u003c/code\u003e; it may take up to one hour for the change to fully process. Any additional \u003ccode\u003eUpdateTimeToLive\u003c/code\u003e calls for the same table during this one hour duration result in a \u003ccode\u003eValidationException\u003c/code\u003e. \u003c/p\u003e \u003cp\u003eTTL compares the current time in epoch time format to the time stored in the TTL attribute of an item. If the epoch time value stored in the attribute is less than the current time, the item is marked as expired and subsequently deleted.\u003c/p\u003e \u003cnote\u003e \u003cp\u003e The epoch time format is the number of seconds elapsed since 12:00:00 AM January 1st, 1970 UTC. \u003c/p\u003e \u003c/note\u003e \u003cp\u003eDynamoDB deletes expired items on a best-effort basis to ensure availability of throughput for other data operations. \u003c/p\u003e \u003cimportant\u003e \u003cp\u003eDynamoDB typically deletes expired items within two days of expiration. The exact duration within which an item gets deleted after expiration is specific to the nature of the workload. Items that have expired and not been deleted will still show up in reads, queries, and scans.\u003c/p\u003e \u003c/important\u003e \u003cp\u003eAs items are deleted, they are removed from any Local Secondary Index and Global Secondary Index immediately in the same eventually consistent way as a standard delete operation.\u003c/p\u003e \u003cp\u003eFor more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/TTL.html\"\u003eTime To Live\u003c/a\u003e in the Amazon DynamoDB Developer Guide. \u003c/p\u003e",
	"paths./#UpdateTimeToLive.post.operationId": "UpdateTimeToLive",
	"paths./#UpdateTimeToLive.post.parameters.length": 1,
	"paths./#UpdateTimeToLive.post.parameters[0].in": "body",
	"paths./#UpdateTimeToLive.post.parameters[0].name": "body",
	"paths./#UpdateTimeToLive.post.parameters[0].required": true,
	"paths./#UpdateTimeToLive.post.parameters[0].schema.$ref": "#/definitions/UpdateTimeToLiveInput",
	"paths./#UpdateTimeToLive.post.responses.200.description": "Success",
	"paths./#UpdateTimeToLive.post.responses.200.schema.$ref": "#/definitions/UpdateTimeToLiveOutput",
	"paths./#UpdateTimeToLive.post.responses.480.description": "ResourceInUseException",
	"paths./#UpdateTimeToLive.post.responses.480.schema.$ref": "#/definitions/ResourceInUseException",
	"paths./#UpdateTimeToLive.post.responses.481.description": "ResourceNotFoundException",
	"paths./#UpdateTimeToLive.post.responses.481.schema.$ref": "#/definitions/ResourceNotFoundException",
	"paths./#UpdateTimeToLive.post.responses.482.description": "LimitExceededException",
	"paths./#UpdateTimeToLive.post.responses.482.schema.$ref": "#/definitions/LimitExceededException",
	"paths./#UpdateTimeToLive.post.responses.483.description": "InternalServerError",
	"paths./#UpdateTimeToLive.post.responses.483.schema.$ref": "#/definitions/InternalServerError",
	"paths./.parameters.length": 9,
	"paths./.parameters[0].$ref": "#/parameters/Action",
	"paths./.parameters[1].$ref": "#/parameters/Version",
	"paths./.parameters[2].$ref": "#/parameters/X-Amz-Content-Sha256",
	"paths./.parameters[3].$ref": "#/parameters/X-Amz-Date",
	"paths./.parameters[4].$ref": "#/parameters/X-Amz-Algorithm",
	"paths./.parameters[5].$ref": "#/parameters/X-Amz-Credential",
	"paths./.parameters[6].$ref": "#/parameters/X-Amz-Security-Token",
	"paths./.parameters[7].$ref": "#/parameters/X-Amz-Signature",
	"paths./.parameters[8].$ref": "#/parameters/X-Amz-SignedHeaders",
	"paths./.post.description": "\u003cp\u003eThe \u003ccode\u003eBatchGetItem\u003c/code\u003e operation returns the attributes of one or more items from one or more tables. You identify requested items by primary key.\u003c/p\u003e \u003cp\u003eA single operation can retrieve up to 16 MB of data, which can contain as many as 100 items. \u003ccode\u003eBatchGetItem\u003c/code\u003e will return a partial result if the response size limit is exceeded, the table's provisioned throughput is exceeded, or an internal processing failure occurs. If a partial result is returned, the operation returns a value for \u003ccode\u003eUnprocessedKeys\u003c/code\u003e. You can use this value to retry the operation starting with the next item to get.\u003c/p\u003e \u003cimportant\u003e \u003cp\u003eIf you request more than 100 items \u003ccode\u003eBatchGetItem\u003c/code\u003e will return a \u003ccode\u003eValidationException\u003c/code\u003e with the message \"Too many items requested for the BatchGetItem call\".\u003c/p\u003e \u003c/important\u003e \u003cp\u003eFor example, if you ask to retrieve 100 items, but each individual item is 300 KB in size, the system returns 52 items (so as not to exceed the 16 MB limit). It also returns an appropriate \u003ccode\u003eUnprocessedKeys\u003c/code\u003e value so you can get the next page of results. If desired, your application can include its own logic to assemble the pages of results into one data set.\u003c/p\u003e \u003cp\u003eIf \u003ci\u003enone\u003c/i\u003e of the items can be processed due to insufficient provisioned throughput on all of the tables in the request, then \u003ccode\u003eBatchGetItem\u003c/code\u003e will return a \u003ccode\u003eProvisionedThroughputExceededException\u003c/code\u003e. If \u003ci\u003eat least one\u003c/i\u003e of the items is successfully processed, then \u003ccode\u003eBatchGetItem\u003c/code\u003e completes successfully, while returning the keys of the unread items in \u003ccode\u003eUnprocessedKeys\u003c/code\u003e.\u003c/p\u003e \u003cimportant\u003e \u003cp\u003eIf DynamoDB returns any unprocessed items, you should retry the batch operation on those items. However, \u003ci\u003ewe strongly recommend that you use an exponential backoff algorithm\u003c/i\u003e. If you retry the batch operation immediately, the underlying read or write requests can still fail due to throttling on the individual tables. If you delay the batch operation using exponential backoff, the individual requests in the batch are much more likely to succeed.\u003c/p\u003e \u003cp\u003eFor more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#BatchOperations\"\u003eBatch Operations and Error Handling\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003c/important\u003e \u003cp\u003eBy default, \u003ccode\u003eBatchGetItem\u003c/code\u003e performs eventually consistent reads on every table in the request. If you want strongly consistent reads instead, you can set \u003ccode\u003eConsistentRead\u003c/code\u003e to \u003ccode\u003etrue\u003c/code\u003e for any or all tables.\u003c/p\u003e \u003cp\u003eIn order to minimize response latency, \u003ccode\u003eBatchGetItem\u003c/code\u003e retrieves items in parallel.\u003c/p\u003e \u003cp\u003eWhen designing your application, keep in mind that DynamoDB does not return items in any particular order. To help parse the response by item, include the primary key values for the items in your request in the \u003ccode\u003eProjectionExpression\u003c/code\u003e parameter.\u003c/p\u003e \u003cp\u003eIf a requested item does not exist, it is not returned in the result. Requests for nonexistent items consume the minimum read capacity units according to the type of read. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#CapacityUnitCalculations\"\u003eCapacity Units Calculations\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
	"paths./.post.operationId": "BatchGetItem",
	"paths./.post.parameters.length": 2,
	"paths./.post.parameters[0].in": "body",
	"paths./.post.parameters[0].name": "body",
	"paths./.post.parameters[0].required": true,
	"paths./.post.parameters[0].schema.$ref": "#/definitions/BatchGetItemInput",
	"paths./.post.parameters[1].description": "Pagination token",
	"paths./.post.parameters[1].in": "query",
	"paths./.post.parameters[1].name": "RequestItems",
	"paths./.post.parameters[1].required": false,
	"paths./.post.parameters[1].type": "string",
	"paths./.post.responses.200.description": "Success",
	"paths./.post.responses.200.schema.$ref": "#/definitions/BatchGetItemOutput",
	"paths./.post.responses.480.description": "ProvisionedThroughputExceededException",
	"paths./.post.responses.480.schema.$ref": "#/definitions/ProvisionedThroughputExceededException",
	"paths./.post.responses.481.description": "ResourceNotFoundException",
	"paths./.post.responses.481.schema.$ref": "#/definitions/ResourceNotFoundException",
	"paths./.post.responses.482.description": "InternalServerError",
	"paths./.post.responses.482.schema.$ref": "#/definitions/InternalServerError",
	"produces.length": 1,
	"produces[0]": "application/json",
	"schemes.length": 1,
	"schemes[0]": "http",
	"security.length": 1,
	"securityDefinitions.hmac.description": "Amazon Signature authorization v4",
	"securityDefinitions.hmac.in": "header",
	"securityDefinitions.hmac.name": "Authorization",
	"securityDefinitions.hmac.type": "apiKey",
	"securityDefinitions.hmac.x-amazon-apigateway-authtype": "awsSigv4",
	"security[0].hmac.length": 0,
	"swagger": "2.0",
	"x-hasEquivalentPaths": true
}
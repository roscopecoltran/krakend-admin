syntax = "proto3";

import "google/api/annotations.proto";

package amazondynamodb;

message PostRequest {
    string Action = 1;
    // Pagination token
    string RequestItems = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    BatchGetItemInput body = 11;
}

message Post#BatchWriteItemRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    BatchWriteItemInput body = 10;
}

message Post#CreateTableRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateTableInput body = 10;
}

message Post#DeleteItemRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteItemInput body = 10;
}

message Post#DeleteTableRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteTableInput body = 10;
}

message Post#DescribeTableRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeTableInput body = 10;
}

message Post#GetItemRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetItemInput body = 10;
}

message Post#ListTablesRequest {
    string Action = 1;
    // Pagination token
    string ExclusiveStartTableName = 2;
    // Pagination limit
    string Limit = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    ListTablesInput body = 12;
}

message Post#PutItemRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    PutItemInput body = 10;
}

message Post#QueryRequest {
    string Action = 1;
    // Pagination token
    string ExclusiveStartKey = 2;
    // Pagination limit
    string Limit = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    QueryInput body = 12;
}

message Post#ScanRequest {
    string Action = 1;
    // Pagination token
    string ExclusiveStartKey = 2;
    // Pagination limit
    string Limit = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    ScanInput body = 12;
}

message Post#UpdateItemRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateItemInput body = 10;
}

message Post#UpdateTableRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateTableInput body = 10;
}

enum AttributeAction {
    ADD = 0;
    PUT = 1;
    DELETE = 2;
}

message AttributeMap {
    string key = 1;
    AttributeValue value = 2;
}
repeated AttributeMap AttributeMap = 1



repeated string AttributeNameList = 1

message AttributeUpdate {
    string key = 1;
    AttributeValueUpdate value = 2;
}
repeated AttributeUpdate AttributeUpdates = 1

message AttributeValue {
    // Binary attributes are sequences of unsigned bytes.
    string B = 1;
    // A set of binary attributes.
    array BS = 2;
    // Numbers are positive or negative exact-value decimals and integers. A number can have up to 38 digits precision and can be between 10^-128 to 10^+126.
    string N = 3;
    // A set of numbers.
    array NS = 4;
    // Strings are Unicode with UTF-8 binary encoding. The maximum size is limited by the size of the primary key (1024 bytes as a range part of a key or 2048 bytes as a single part hash key) or the item size (64k).
    string S = 5;
    // A set of strings.
    array SS = 6;
}

repeated AttributeValue AttributeValueList = 1

message AttributeValueUpdate {
    AttributeAction Action = 1;
    AttributeValue Value = 2;
}

message BatchGetItemInput {
    array RequestItems = 1;
}

message BatchGetItemOutput {
    array Responses = 1;
    // Contains a map of tables and their respective keys that were not processed with the current response, possibly due to reaching a limit on the response size. The <code>UnprocessedKeys</code> value is in the same form as a <code>RequestItems</code> parameter (so the value can be provided directly to a subsequent <code>BatchGetItem</code> operation). For more information, see the above <code>RequestItems</code> parameter.
    array UnprocessedKeys = 2;
}

message BatchGetRequestMap {
    string key = 1;
    KeysAndAttributes value = 2;
}
repeated BatchGetRequestMap BatchGetRequestMap = 1

message BatchGetResponseMap {
    string key = 1;
    BatchResponse value = 2;
}
repeated BatchGetResponseMap BatchGetResponseMap = 1

message BatchResponse {
    number ConsumedCapacityUnits = 1;
    array Items = 2;
}

message BatchWriteItemInput {
    // A map of table name to list-of-write-requests. Used as input to the <code>BatchWriteItem</code> API call
    array RequestItems = 1;
}

message BatchWriteItemOutput {
    // The response object as a result of <code>BatchWriteItem</code> call. This is essentially a map of table name to <code>ConsumedCapacityUnits</code>.
    array Responses = 1;
    // The Items which we could not successfully process in a <code>BatchWriteItem</code> call is returned as <code>UnprocessedItems</code>
    array UnprocessedItems = 2;
}

message BatchWriteItemRequestMap {
    string key = 1;
    array value = 2;
}
repeated BatchWriteItemRequestMap BatchWriteItemRequestMap = 1

message BatchWriteResponse {
    number ConsumedCapacityUnits = 1;
}

message BatchWriteResponseMap {
    string key = 1;
    BatchWriteResponse value = 2;
}
repeated BatchWriteResponseMap BatchWriteResponseMap = 1



repeated string BinarySetAttributeValue = 1



enum ComparisonOperator {
    EQ = 0;
    NE = 1;
    IN = 2;
    LE = 3;
    LT = 4;
    GE = 5;
    GT = 6;
    BETWEEN = 7;
    NOT_NULL = 8;
    NULL = 9;
    CONTAINS = 10;
    NOT_CONTAINS = 11;
    BEGINS_WITH = 12;
}

message Condition {
    array AttributeValueList = 1;
    ComparisonOperator ComparisonOperator = 2;
}

message ConditionalCheckFailedException {
    string message = 1;
}

message CreateTableInput {
    KeySchema KeySchema = 1;
    ProvisionedThroughput ProvisionedThroughput = 2;
    // The name of the table you want to create. Allowed characters are <code>a-z</code>, <code>A-Z</code>, <code>0-9</code>, <code>_</code> (underscore), <code>-</code> (hyphen) and <code>.</code> (period).
    string TableName = 3;
}

message CreateTableOutput {
    TableDescription TableDescription = 1;
}

message DeleteItemInput {
    array Expected = 1;
    Key Key = 2;
    ReturnValue ReturnValues = 3;
    // The name of the table in which you want to delete an item. Allowed characters are <code>a-z</code>, <code>A-Z</code>, <code>0-9</code>, <code>_</code> (underscore), <code>-</code> (hyphen) and <code>.</code> (period).
    string TableName = 4;
}

message DeleteItemOutput {
    // If the <code>ReturnValues</code> parameter is provided as <code>ALL_OLD</code> in the request, Amazon DynamoDB returns an array of attribute name-value pairs (essentially, the deleted item). Otherwise, the response contains an empty set.
    array Attributes = 1;
    number ConsumedCapacityUnits = 2;
}

message DeleteRequest {
    // The item's key to be delete
    Key Key = 1;
}

message DeleteTableInput {
    // The name of the table you want to delete. Allowed characters are <code>a-z</code>, <code>A-Z</code>, <code>0-9</code>, <code>_</code> (underscore), <code>-</code> (hyphen) and <code>.</code> (period).
    string TableName = 1;
}

message DeleteTableOutput {
    TableDescription TableDescription = 1;
}

message DescribeTableInput {
    // The name of the table you want to describe. Allowed characters are <code>a-z</code>, <code>A-Z</code>, <code>0-9</code>, <code>_</code> (underscore), <code>-</code> (hyphen) and <code>.</code> (period).
    string TableName = 1;
}

message DescribeTableOutput {
    TableDescription Table = 1;
}

message ExpectedAttributeMap {
    string key = 1;
    ExpectedAttributeValue value = 2;
}
repeated ExpectedAttributeMap ExpectedAttributeMap = 1

message ExpectedAttributeValue {
    // Specify whether or not a value already exists for the attribute name-value pair.
    boolean Exists = 1;
    // Specify whether or not a value already exists and has a specific content for the attribute name-value pair.
    AttributeValue Value = 2;
}

message FilterConditionMap {
    string key = 1;
    Condition value = 2;
}
repeated FilterConditionMap FilterConditionMap = 1

message GetItemInput {
    array AttributesToGet = 1;
    boolean ConsistentRead = 2;
    Key Key = 3;
    // The name of the table in which you want to get an item. Allowed characters are <code>a-z</code>, <code>A-Z</code>, <code>0-9</code>, <code>_</code> (underscore), <code>-</code> (hyphen) and <code>.</code> (period).
    string TableName = 4;
}

message GetItemOutput {
    number ConsumedCapacityUnits = 1;
    // Contains the requested attributes.
    array Item = 2;
}

message InternalServerError {
    string message = 1;
}

repeated array ItemList = 1

message Key {
    // A hash key element is treated as the primary key, and can be a string or a number. Single attribute primary keys have one index value. The value can be <code>String</code>, <code>Number</code>, <code>StringSet</code>, <code>NumberSet</code>.
    AttributeValue HashKeyElement = 1;
    // A range key element is treated as a secondary key (used in conjunction with the primary key), and can be a string or a number, and is only used for hash-and-range primary keys. The value can be <code>String</code>, <code>Number</code>, <code>StringSet</code>, <code>NumberSet</code>.
    AttributeValue RangeKeyElement = 2;
}

repeated Key KeyList = 1

message KeySchema {
    // A hash key element is treated as the primary key, and can be a string or a number. Single attribute primary keys have one index value. The value can be <code>String</code>, <code>Number</code>, <code>StringSet</code>, <code>NumberSet</code>.
    KeySchemaElement HashKeyElement = 1;
    // A range key element is treated as a secondary key (used in conjunction with the primary key), and can be a string or a number, and is only used for hash-and-range primary keys. The value can be <code>String</code>, <code>Number</code>, <code>StringSet</code>, <code>NumberSet</code>.
    KeySchemaElement RangeKeyElement = 2;
}

message KeySchemaElement {
    // The <code>AttributeName</code> of the <code>KeySchemaElement</code>.
    string AttributeName = 1;
    // The <code>AttributeType</code> of the <code>KeySchemaElement</code> which can be a <code>String</code> or a <code>Number</code>.
    ScalarAttributeType AttributeType = 2;
}

message KeysAndAttributes {
    array AttributesToGet = 1;
    boolean ConsistentRead = 2;
    array Keys = 3;
}

message LimitExceededException {
    string message = 1;
}

message ListTablesInput {
    // The name of the table that starts the list. If you already ran a <code>ListTables</code> operation and received a <code>LastEvaluatedTableName</code> value in the response, use that value here to continue the list.
    string ExclusiveStartTableName = 1;
    integer Limit = 2;
}

message ListTablesOutput {
    // The name of the last table in the current list. Use this value as the <code>ExclusiveStartTableName</code> in a new request to continue the list until all the table names are returned. If this value is null, all table names have been returned.
    string LastEvaluatedTableName = 1;
    array TableNames = 2;
}





repeated string NumberSetAttributeValue = 1





message ProvisionedThroughput {
    // <code>ReadCapacityUnits</code> are in terms of strictly consistent reads, assuming items of 1k. 2k items require twice the <code>ReadCapacityUnits</code>. Eventually-consistent reads only require half the <code>ReadCapacityUnits</code> of stirctly consistent reads.
    integer ReadCapacityUnits = 1;
    // <code>WriteCapacityUnits</code> are in terms of strictly consistent reads, assuming items of 1k. 2k items require twice the <code>WriteCapacityUnits</code>.
    integer WriteCapacityUnits = 2;
}

message ProvisionedThroughputDescription {
    string LastDecreaseDateTime = 1;
    string LastIncreaseDateTime = 2;
    integer NumberOfDecreasesToday = 3;
    integer ReadCapacityUnits = 4;
    integer WriteCapacityUnits = 5;
}

message ProvisionedThroughputExceededException {
    string message = 1;
}

message PutItemInput {
    array Expected = 1;
    array Item = 2;
    ReturnValue ReturnValues = 3;
    // The name of the table in which you want to put an item. Allowed characters are <code>a-z</code>, <code>A-Z</code>, <code>0-9</code>, <code>_</code> (underscore), <code>-</code> (hyphen) and <code>.</code> (period).
    string TableName = 4;
}

message PutItemInputAttributeMap {
    string key = 1;
    AttributeValue value = 2;
}
repeated PutItemInputAttributeMap PutItemInputAttributeMap = 1

message PutItemOutput {
    // Attribute values before the put operation, but only if the <code>ReturnValues</code> parameter is specified as <code>ALL_OLD</code> in the request.
    array Attributes = 1;
    number ConsumedCapacityUnits = 2;
}

message PutRequest {
    // The item to put
    array Item = 1;
}

message QueryInput {
    array AttributesToGet = 1;
    boolean ConsistentRead = 2;
    // If set to <code>true</code>, Amazon DynamoDB returns a total number of items that match the query parameters, instead of a list of the matching items and their attributes. Do not set <code>Count</code> to <code>true</code> while providing a list of <code>AttributesToGet</code>, otherwise Amazon DynamoDB returns a validation error.
    boolean Count = 3;
    // Primary key of the item from which to continue an earlier query. An earlier query might provide this value as the <code>LastEvaluatedKey</code> if that query operation was interrupted before completing the query; either because of the result set size or the <code>Limit</code> parameter. The <code>LastEvaluatedKey</code> can be passed back in a new query request to continue the operation from that point.
    Key ExclusiveStartKey = 4;
    // Attribute value of the hash component of the composite primary key.
    AttributeValue HashKeyValue = 5;
    // The maximum number of items to return. If Amazon DynamoDB hits this limit while querying the table, it stops the query and returns the matching values up to the limit, and a <code>LastEvaluatedKey</code> to apply in a subsequent operation to continue the query. Also, if the result set size exceeds 1MB before Amazon DynamoDB hits this limit, it stops the query and returns the matching values, and a <code>LastEvaluatedKey</code> to apply in a subsequent operation to continue the query.
    integer Limit = 6;
    // A container for the attribute values and comparison operators to use for the query.
    Condition RangeKeyCondition = 7;
    // Specifies forward or backward traversal of the index. Amazon DynamoDB returns results reflecting the requested order, determined by the range key. The default value is <code>true</code> (forward).
    boolean ScanIndexForward = 8;
    // The name of the table in which you want to query. Allowed characters are <code>a-z</code>, <code>A-Z</code>, <code>0-9</code>, <code>_</code> (underscore), <code>-</code> (hyphen) and <code>.</code> (period).
    string TableName = 9;
}

message QueryOutput {
    number ConsumedCapacityUnits = 1;
    // Number of items in the response.
    integer Count = 2;
    array Items = 3;
    // Primary key of the item where the query operation stopped, inclusive of the previous result set. Use this value to start a new operation excluding this value in the new request. The <code>LastEvaluatedKey</code> is null when the entire query result set is complete (i.e. the operation processed the "last page").
    Key LastEvaluatedKey = 4;
}

message ResourceInUseException {
    string message = 1;
}

message ResourceNotFoundException {
    string message = 1;
}

enum ReturnValue {
    NONE = 0;
    ALL_OLD = 1;
    UPDATED_OLD = 2;
    ALL_NEW = 3;
    UPDATED_NEW = 4;
}

enum ScalarAttributeType {
    S = 0;
    N = 1;
    B = 2;
}

message ScanInput {
    array AttributesToGet = 1;
    // If set to <code>true</code>, Amazon DynamoDB returns a total number of items for the <code>Scan</code> operation, even if the operation has no matching items for the assigned filter. Do not set <code>Count</code> to <code>true</code> while providing a list of <code>AttributesToGet</code>, otherwise Amazon DynamoDB returns a validation error.
    boolean Count = 2;
    // Primary key of the item from which to continue an earlier scan. An earlier scan might provide this value if that scan operation was interrupted before scanning the entire table; either because of the result set size or the <code>Limit</code> parameter. The <code>LastEvaluatedKey</code> can be passed back in a new scan request to continue the operation from that point.
    Key ExclusiveStartKey = 3;
    // The maximum number of items to return. If Amazon DynamoDB hits this limit while scanning the table, it stops the scan and returns the matching values up to the limit, and a <code>LastEvaluatedKey</code> to apply in a subsequent operation to continue the scan. Also, if the scanned data set size exceeds 1 MB before Amazon DynamoDB hits this limit, it stops the scan and returns the matching values up to the limit, and a <code>LastEvaluatedKey</code> to apply in a subsequent operation to continue the scan.
    integer Limit = 4;
    // Evaluates the scan results and returns only the desired values.
    array ScanFilter = 5;
    // The name of the table in which you want to scan. Allowed characters are <code>a-z</code>, <code>A-Z</code>, <code>0-9</code>, <code>_</code> (underscore), <code>-</code> (hyphen) and <code>.</code> (period).
    string TableName = 6;
}

message ScanOutput {
    number ConsumedCapacityUnits = 1;
    // Number of items in the response.
    integer Count = 2;
    array Items = 3;
    // Primary key of the item where the scan operation stopped. Provide this value in a subsequent scan operation to continue the operation from that point. The <code>LastEvaluatedKey</code> is null when the entire scan result set is complete (i.e. the operation processed the "last page").
    Key LastEvaluatedKey = 4;
    // Number of items in the complete scan before any filters are applied. A high <code>ScannedCount</code> value with few, or no, <code>Count</code> results indicates an inefficient <code>Scan</code> operation.
    integer ScannedCount = 5;
}





repeated string StringSetAttributeValue = 1

message TableDescription {
    string CreationDateTime = 1;
    integer ItemCount = 2;
    KeySchema KeySchema = 3;
    ProvisionedThroughputDescription ProvisionedThroughput = 4;
    // The name of the table being described.
    string TableName = 5;
    integer TableSizeBytes = 6;
    TableStatus TableStatus = 7;
}



repeated string TableNameList = 1

enum TableStatu {
    CREATING = 0;
    UPDATING = 1;
    DELETING = 2;
    ACTIVE = 3;
}

message UpdateItemInput {
    array AttributeUpdates = 1;
    array Expected = 2;
    Key Key = 3;
    ReturnValue ReturnValues = 4;
    // The name of the table in which you want to update an item. Allowed characters are <code>a-z</code>, <code>A-Z</code>, <code>0-9</code>, <code>_</code> (underscore), <code>-</code> (hyphen) and <code>.</code> (period).
    string TableName = 5;
}

message UpdateItemOutput {
    // A map of attribute name-value pairs, but only if the <code>ReturnValues</code> parameter is specified as something other than <code>NONE</code> in the request.
    array Attributes = 1;
    number ConsumedCapacityUnits = 2;
}

message UpdateTableInput {
    ProvisionedThroughput ProvisionedThroughput = 1;
    // The name of the table you want to update. Allowed characters are <code>a-z</code>, <code>A-Z</code>, <code>0-9</code>, <code>_</code> (underscore), <code>-</code> (hyphen) and <code>.</code> (period).
    string TableName = 2;
}

message UpdateTableOutput {
    TableDescription TableDescription = 1;
}

message WriteRequest {
    DeleteRequest DeleteRequest = 1;
    PutRequest PutRequest = 2;
}

repeated WriteRequest WriteRequests = 1















service AmazonDynamoDBService {
    // <p>Retrieves the attributes for multiple items from multiple tables using their primary keys.</p> <p>The maximum number of item attributes that can be retrieved for a single operation is 100. Also, the number of items retrieved is constrained by a 1 MB the size limit. If the response size limit is exceeded or a partial result is returned due to an internal processing failure, Amazon DynamoDB returns an <code>UnprocessedKeys</code> value so you can retry the operation starting with the next item to get.</p> <p>Amazon DynamoDB automatically adjusts the number of items returned per page to enforce this limit. For example, even if you ask to retrieve 100 items, but each individual item is 50k in size, the system returns 20 items and an appropriate <code>UnprocessedKeys</code> value so you can get the next page of results. If necessary, your application needs its own logic to assemble the pages of results into one set.</p>
    rpc Post(PostRequest) returns (BatchGetItemOutput) {
      option (google.api.http) = {
        post: "//"
        body: "body"
      };
    }
    // <p>Allows to execute a batch of Put and/or Delete Requests for many tables in a single call. A total of 25 requests are allowed.</p> <p>There are no transaction guarantees provided by this API. It does not allow conditional puts nor does it support return values.</p>
    rpc Post#BatchWriteItem(Post#BatchWriteItemRequest) returns (BatchWriteItemOutput) {
      option (google.api.http) = {
        post: "//#BatchWriteItem"
        body: "body"
      };
    }
    // <p>Adds a new table to your account.</p> <p>The table name must be unique among those associated with the AWS Account issuing the request, and the AWS Region that receives the request (e.g. <code>us-east-1</code>).</p> <p>The <code>CreateTable</code> operation triggers an asynchronous workflow to begin creating the table. Amazon DynamoDB immediately returns the state of the table (<code>CREATING</code>) until the table is in the <code>ACTIVE</code> state. Once the table is in the <code>ACTIVE</code> state, you can perform data plane operations.</p>
    rpc Post#CreateTable(Post#CreateTableRequest) returns (CreateTableOutput) {
      option (google.api.http) = {
        post: "//#CreateTable"
        body: "body"
      };
    }
    // <p>Deletes a single item in a table by primary key.</p> <p>You can perform a conditional delete operation that deletes the item if it exists, or if it has an expected attribute value.</p>
    rpc Post#DeleteItem(Post#DeleteItemRequest) returns (DeleteItemOutput) {
      option (google.api.http) = {
        post: "//#DeleteItem"
        body: "body"
      };
    }
    // <p>Deletes a table and all of its items.</p> <p>If the table is in the <code>ACTIVE</code> state, you can delete it. If a table is in <code>CREATING</code> or <code>UPDATING</code> states then Amazon DynamoDB returns a <code>ResourceInUseException</code>. If the specified table does not exist, Amazon DynamoDB returns a <code>ResourceNotFoundException</code>.</p>
    rpc Post#DeleteTable(Post#DeleteTableRequest) returns (DeleteTableOutput) {
      option (google.api.http) = {
        post: "//#DeleteTable"
        body: "body"
      };
    }
    // <p>Retrieves information about the table, including the current status of the table, the primary key schema and when the table was created.</p> <p>If the table does not exist, Amazon DynamoDB returns a <code>ResourceNotFoundException</code>.</p>
    rpc Post#DescribeTable(Post#DescribeTableRequest) returns (DescribeTableOutput) {
      option (google.api.http) = {
        post: "//#DescribeTable"
        body: "body"
      };
    }
    // <p>Retrieves a set of Attributes for an item that matches the primary key.</p> <p>The <code>GetItem</code> operation provides an eventually-consistent read by default. If eventually-consistent reads are not acceptable for your application, use <code>ConsistentRead</code>. Although this operation might take longer than a standard read, it always returns the last updated value.</p>
    rpc Post#GetItem(Post#GetItemRequest) returns (GetItemOutput) {
      option (google.api.http) = {
        post: "//#GetItem"
        body: "body"
      };
    }
    // Retrieves a paginated list of table names created by the AWS Account of the caller in the AWS Region (e.g. <code>us-east-1</code>).
    rpc Post#ListTables(Post#ListTablesRequest) returns (ListTablesOutput) {
      option (google.api.http) = {
        post: "//#ListTables"
        body: "body"
      };
    }
    // <p>Creates a new item, or replaces an old item with a new item (including all the attributes).</p> <p>If an item already exists in the specified table with the same primary key, the new item completely replaces the existing item. You can perform a conditional put (insert a new item if one with the specified primary key doesn't exist), or replace an existing item if it has certain attribute values.</p>
    rpc Post#PutItem(Post#PutItemRequest) returns (PutItemOutput) {
      option (google.api.http) = {
        post: "//#PutItem"
        body: "body"
      };
    }
    // <p>Gets the values of one or more items and its attributes by primary key (composite primary key, only).</p> <p>Narrow the scope of the query using comparison operators on the <code>RangeKeyValue</code> of the composite key. Use the <code>ScanIndexForward</code> parameter to get results in forward or reverse order by range key.</p>
    rpc Post#Query(Post#QueryRequest) returns (QueryOutput) {
      option (google.api.http) = {
        post: "//#Query"
        body: "body"
      };
    }
    // <p>Retrieves one or more items and its attributes by performing a full scan of a table.</p> <p>Provide a <code>ScanFilter</code> to get more specific results.</p>
    rpc Post#Scan(Post#ScanRequest) returns (ScanOutput) {
      option (google.api.http) = {
        post: "//#Scan"
        body: "body"
      };
    }
    // <p>Edits an existing item's attributes.</p> <p>You can perform a conditional update (insert a new attribute name-value pair if it doesn't exist, or replace an existing name-value pair if it has certain expected attribute values).</p>
    rpc Post#UpdateItem(Post#UpdateItemRequest) returns (UpdateItemOutput) {
      option (google.api.http) = {
        post: "//#UpdateItem"
        body: "body"
      };
    }
    // <p>Updates the provisioned throughput for the given table.</p> <p>Setting the throughput for a table helps you manage performance and is part of the Provisioned Throughput feature of Amazon DynamoDB.</p>
    rpc Post#UpdateTable(Post#UpdateTableRequest) returns (UpdateTableOutput) {
      option (google.api.http) = {
        post: "//#UpdateTable"
        body: "body"
      };
    }
}

syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package awscodepipeline;

message PostRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AcknowledgeJobInput body = 10;
}

message Post#AcknowledgeThirdPartyJobRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AcknowledgeThirdPartyJobInput body = 10;
}

message Post#CreateCustomActionTypeRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateCustomActionTypeInput body = 10;
}

message Post#CreatePipelineRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreatePipelineInput body = 10;
}

message Post#DeleteCustomActionTypeRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteCustomActionTypeInput body = 10;
}

message Post#DeletePipelineRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeletePipelineInput body = 10;
}

message Post#DisableStageTransitionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DisableStageTransitionInput body = 10;
}

message Post#EnableStageTransitionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    EnableStageTransitionInput body = 10;
}

message Post#GetJobDetailsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetJobDetailsInput body = 10;
}

message Post#GetPipelineRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetPipelineInput body = 10;
}

message Post#GetPipelineExecutionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetPipelineExecutionInput body = 10;
}

message Post#GetPipelineStateRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetPipelineStateInput body = 10;
}

message Post#GetThirdPartyJobDetailsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetThirdPartyJobDetailsInput body = 10;
}

message Post#ListActionTypesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListActionTypesInput body = 10;
}

message Post#ListPipelineExecutionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListPipelineExecutionsInput body = 10;
}

message Post#ListPipelinesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListPipelinesInput body = 10;
}

message Post#PollForJobsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    PollForJobsInput body = 10;
}

message Post#PollForThirdPartyJobsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    PollForThirdPartyJobsInput body = 10;
}

message Post#PutActionRevisionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    PutActionRevisionInput body = 10;
}

message Post#PutApprovalResultRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    PutApprovalResultInput body = 10;
}

message Post#PutJobFailureResultRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    PutJobFailureResultInput body = 10;
}

message Post#PutJobSuccessResultRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    PutJobSuccessResultInput body = 10;
}

message Post#PutThirdPartyJobFailureResultRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    PutThirdPartyJobFailureResultInput body = 10;
}

message Post#PutThirdPartyJobSuccessResultRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    PutThirdPartyJobSuccessResultInput body = 10;
}

message Post#RetryStageExecutionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RetryStageExecutionInput body = 10;
}

message Post#StartPipelineExecutionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StartPipelineExecutionInput body = 10;
}

message Post#UpdatePipelineRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdatePipelineInput body = 10;
}

message AWSSessionCredentials {
    // The access key for the session.
    string accessKeyId = 1;
    // The secret access key for the session.
    string secretAccessKey = 2;
    // The token for the session.
    string sessionToken = 3;
}

message AcknowledgeJobInput {
    // The unique system-generated ID of the job for which you want to confirm receipt.
    string jobId = 1;
    // A system-generated random number that AWS CodePipeline uses to ensure that the job is being worked on by only one job worker. Get this number from the response of the <a>PollForJobs</a> request that returned this job.
    string nonce = 2;
}

message AcknowledgeJobOutput {
    // Whether the job worker has received the specified job.
    JobStatus status = 1;
}

message AcknowledgeThirdPartyJobInput {
    // The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.
    string clientToken = 1;
    // The unique system-generated ID of the job.
    string jobId = 2;
    // A system-generated random number that AWS CodePipeline uses to ensure that the job is being worked on by only one job worker. Get this number from the response to a <a>GetThirdPartyJobDetails</a> request.
    string nonce = 3;
}

message AcknowledgeThirdPartyJobOutput {
    // The status information for the third party job, if any.
    JobStatus status = 1;
}

enum ActionCategory {
    SOURCE = 0;
    BUILD = 1;
    DEPLOY = 2;
    TEST = 3;
    INVOKE = 4;
    APPROVAL = 5;
}

message ActionConfiguration {
    // The configuration data for the action.
    array configuration = 1;
}

message ActionConfigurationMap {
    string key = 1;
    string value = 2;
}
repeated ActionConfigurationMap ActionConfigurationMap = 1

message ActionConfigurationProperty {
    // The description of the action configuration property that will be displayed to users.
    string description = 1;
    // Whether the configuration property is a key.
    boolean key = 2;
    // The name of the action configuration property.
    string name = 3;
    // <p>Indicates that the property will be used in conjunction with PollForJobs. When creating a custom action, an action can have up to one queryable property. If it has one, that property must be both required and not secret.</p> <p>If you create a pipeline with a custom action type, and that custom action contains a queryable property, the value for that configuration property is subject to additional restrictions. The value must be less than or equal to twenty (20) characters. The value can contain only alphanumeric characters, underscores, and hyphens.</p>
    boolean queryable = 4;
    // Whether the configuration property is a required value.
    boolean required = 5;
    // <p>Whether the configuration property is secret. Secrets are hidden from all calls except for GetJobDetails, GetThirdPartyJobDetails, PollForJobs, and PollForThirdPartyJobs.</p> <p>When updating a pipeline, passing * * * * * without changing any other values of the action will preserve the prior value of the secret.</p>
    boolean secret = 6;
    // The type of the configuration property.
    ActionConfigurationPropertyType type = 7;
}

repeated ActionConfigurationProperty ActionConfigurationPropertyList = 1

enum ActionConfigurationPropertyType {
    STRING = 0;
    NUMBER = 1;
    BOOLEAN = 2;
}

message ActionContext {
    // The name of the action within the context of a job.
    string name = 1;
}

message ActionDeclaration {
    // The configuration information for the action type.
    ActionTypeId actionTypeId = 1;
    // The action declaration's configuration.
    array configuration = 2;
    // The name or ID of the artifact consumed by the action, such as a test or build artifact.
    array inputArtifacts = 3;
    // The action declaration's name.
    string name = 4;
    // The name or ID of the result of the action declaration, such as a test or build artifact.
    array outputArtifacts = 5;
    // The ARN of the IAM service role that will perform the declared action. This is assumed through the roleArn for the pipeline.
    string roleArn = 6;
    // The order in which actions are run.
    integer runOrder = 7;
}

message ActionExecution {
    // The details of an error returned by a URL external to AWS.
    ErrorDetails errorDetails = 1;
    // The external ID of the run of the action.
    string externalExecutionId = 2;
    // The URL of a resource external to AWS that will be used when running the action, for example an external repository URL.
    string externalExecutionUrl = 3;
    // The last status change of the action.
    string lastStatusChange = 4;
    // The ARN of the user who last changed the pipeline.
    string lastUpdatedBy = 5;
    // A percentage of completeness of the action as it runs.
    integer percentComplete = 6;
    // The status of the action, or for a completed action, the last status of the action.
    ActionExecutionStatus status = 7;
    // A summary of the run of the action.
    string summary = 8;
    // The system-generated token used to identify a unique approval request. The token for each open approval request can be obtained using the GetPipelineState command and is used to validate that the approval request corresponding to this token is still valid.
    string token = 9;
}

enum ActionExecutionStatu {
    INPROGRESS = 0;
    SUCCEEDED = 1;
    FAILED = 2;
}

message ActionNotFoundException {
}

enum ActionOwner {
    AWS = 0;
    THIRDPARTY = 1;
    CUSTOM = 2;
}

message ActionRevision {
    // The date and time when the most recent version of the action was created, in timestamp format.
    string created = 1;
    // The unique identifier of the change that set the state to this revision, for example a deployment ID or timestamp.
    string revisionChangeId = 2;
    // The system-generated unique ID that identifies the revision number of the action.
    string revisionId = 3;
}

message ActionState {
    // The name of the action.
    string actionName = 1;
    // Represents information about the version (or revision) of an action.
    ActionRevision currentRevision = 2;
    // A URL link for more information about the state of the action, such as a deployment group details page.
    string entityUrl = 3;
    // Represents information about the run of an action.
    ActionExecution latestExecution = 4;
    // A URL link for more information about the revision, such as a commit details page.
    string revisionUrl = 5;
}

repeated ActionState ActionStateList = 1

message ActionType {
    // The configuration properties for the action type.
    array actionConfigurationProperties = 1;
    // Represents information about an action type.
    ActionTypeId id = 2;
    // The details of the input artifact for the action, such as its commit ID.
    ArtifactDetails inputArtifactDetails = 3;
    // The details of the output artifact of the action, such as its commit ID.
    ArtifactDetails outputArtifactDetails = 4;
    // The settings for the action type.
    ActionTypeSettings settings = 5;
}

message ActionTypeId {
    // A category defines what kind of action can be taken in the stage, and constrains the provider type for the action. Valid categories are limited to one of the values below.
    ActionCategory category = 1;
    // The creator of the action being called.
    ActionOwner owner = 2;
    // The provider of the service being called by the action. Valid providers are determined by the action category. For example, an action in the Deploy category type might have a provider of AWS CodeDeploy, which would be specified as CodeDeploy.
    string provider = 3;
    // A string that identifies the action type.
    string version = 4;
}

repeated ActionType ActionTypeList = 1

message ActionTypeNotFoundException {
}

message ActionTypeSettings {
    // The URL returned to the AWS CodePipeline console that provides a deep link to the resources of the external system, such as the configuration page for an AWS CodeDeploy deployment group. This link is provided as part of the action display within the pipeline.
    string entityUrlTemplate = 1;
    // The URL returned to the AWS CodePipeline console that contains a link to the top-level landing page for the external system, such as console page for AWS CodeDeploy. This link is shown on the pipeline view page in the AWS CodePipeline console and provides a link to the execution entity of the external action.
    string executionUrlTemplate = 2;
    // The URL returned to the AWS CodePipeline console that contains a link to the page where customers can update or change the configuration of the external action.
    string revisionUrlTemplate = 3;
    // The URL of a sign-up page where users can sign up for an external service and perform initial configuration of the action provided by that service.
    string thirdPartyConfigurationUrl = 4;
}

message ApprovalAlreadyCompletedException {
}

message ApprovalResult {
    // The response submitted by a reviewer assigned to an approval action request.
    ApprovalStatus status = 1;
    // The summary of the current status of the approval request.
    string summary = 2;
}

enum ApprovalStatu {
    APPROVED = 0;
    REJECTED = 1;
}

message Artifact {
    // The location of an artifact.
    ArtifactLocation location = 1;
    // The artifact's name.
    string name = 2;
    // The artifact's revision ID. Depending on the type of object, this could be a commit ID (GitHub) or a revision ID (Amazon S3).
    string revision = 3;
}

message ArtifactDetails {
    // The maximum number of artifacts allowed for the action type.
    integer maximumCount = 1;
    // The minimum number of artifacts allowed for the action type.
    integer minimumCount = 2;
}

repeated Artifact ArtifactList = 1

message ArtifactLocation {
    // The Amazon S3 bucket that contains the artifact.
    S3ArtifactLocation s3Location = 1;
    // The type of artifact in the location.
    ArtifactLocationType type = 2;
}

enum ArtifactLocationType {
    S3 = 0;
}

message ArtifactRevision {
    // The date and time when the most recent revision of the artifact was created, in timestamp format.
    string created = 1;
    // The name of an artifact. This name might be system-generated, such as "MyApp", or might be defined by the user when an action is created.
    string name = 2;
    // An additional identifier for a revision, such as a commit date or, for artifacts stored in Amazon S3 buckets, the ETag value.
    string revisionChangeIdentifier = 3;
    // The revision ID of the artifact.
    string revisionId = 4;
    // Summary information about the most recent revision of the artifact. For GitHub and AWS CodeCommit repositories, the commit message. For Amazon S3 buckets or actions, the user-provided content of a <code>codepipeline-artifact-revision-summary</code> key specified in the object metadata.
    string revisionSummary = 5;
    // The commit ID for the artifact revision. For artifacts stored in GitHub or AWS CodeCommit repositories, the commit ID is linked to a commit details page.
    string revisionUrl = 6;
}

repeated ArtifactRevision ArtifactRevisionList = 1

message ArtifactStore {
    // The encryption key used to encrypt the data in the artifact store, such as an AWS Key Management Service (AWS KMS) key. If this is undefined, the default key for Amazon S3 is used.
    EncryptionKey encryptionKey = 1;
    // The Amazon S3 bucket used for storing the artifacts for a pipeline. You can specify the name of an S3 bucket but not a folder within the bucket. A folder to contain the pipeline artifacts is created for you based on the name of the pipeline. You can use any Amazon S3 bucket in the same AWS Region as the pipeline to store your pipeline artifacts.
    string location = 2;
    // The type of the artifact store, such as S3.
    ArtifactStoreType type = 3;
}

enum ArtifactStoreType {
    S3 = 0;
}

message BlockerDeclaration {
    // Reserved for future use.
    string name = 1;
    // Reserved for future use.
    BlockerType type = 2;
}

enum BlockerType {
    SCHEDULE = 0;
}

message CreateCustomActionTypeInput {
    // <p>The category of the custom action, such as a build action or a test action.</p> <note> <p>Although Source and Approval are listed as valid values, they are not currently functional. These values are reserved for future use.</p> </note>
    ActionCategory category = 1;
    // <p>The configuration properties for the custom action.</p> <note> <p>You can refer to a name in the configuration properties of the custom action within the URL templates by following the format of {Config:name}, as long as the configuration property is both required and not secret. For more information, see <a href="http://docs.aws.amazon.com/codepipeline/latest/userguide/how-to-create-custom-action.html">Create a Custom Action for a Pipeline</a>.</p> </note>
    array configurationProperties = 2;
    // The details of the input artifact for the action, such as its commit ID.
    ArtifactDetails inputArtifactDetails = 3;
    // The details of the output artifact of the action, such as its commit ID.
    ArtifactDetails outputArtifactDetails = 4;
    // The provider of the service used in the custom action, such as AWS CodeDeploy.
    string provider = 5;
    // Returns information about the settings for an action type.
    ActionTypeSettings settings = 6;
    // The version identifier of the custom action.
    string version = 7;
}

message CreateCustomActionTypeOutput {
    // Returns information about the details of an action type.
    ActionType actionType = 1;
}

message CreatePipelineInput {
    // Represents the structure of actions and stages to be performed in the pipeline.
    PipelineDeclaration pipeline = 1;
}

message CreatePipelineOutput {
    // Represents the structure of actions and stages to be performed in the pipeline.
    PipelineDeclaration pipeline = 1;
}

message CurrentRevision {
    // The change identifier for the current revision.
    string changeIdentifier = 1;
    // The date and time when the most recent revision of the artifact was created, in timestamp format.
    string created = 2;
    // The revision ID of the current version of an artifact.
    string revision = 3;
    // The summary of the most recent revision of the artifact.
    string revisionSummary = 4;
}

message DeleteCustomActionTypeInput {
    // The category of the custom action that you want to delete, such as source or deploy.
    ActionCategory category = 1;
    // The provider of the service used in the custom action, such as AWS CodeDeploy.
    string provider = 2;
    // The version of the custom action to delete.
    string version = 3;
}

message DeletePipelineInput {
    // The name of the pipeline to be deleted.
    string name = 1;
}

message DisableStageTransitionInput {
    // The name of the pipeline in which you want to disable the flow of artifacts from one stage to another.
    string pipelineName = 1;
    // The reason given to the user why a stage is disabled, such as waiting for manual approval or manual tests. This message is displayed in the pipeline console UI.
    string reason = 2;
    // The name of the stage where you want to disable the inbound or outbound transition of artifacts.
    string stageName = 3;
    // Specifies whether artifacts will be prevented from transitioning into the stage and being processed by the actions in that stage (inbound), or prevented from transitioning from the stage after they have been processed by the actions in that stage (outbound).
    StageTransitionType transitionType = 4;
}

message EnableStageTransitionInput {
    // The name of the pipeline in which you want to enable the flow of artifacts from one stage to another.
    string pipelineName = 1;
    // The name of the stage where you want to enable the transition of artifacts, either into the stage (inbound) or from that stage to the next stage (outbound).
    string stageName = 2;
    // Specifies whether artifacts will be allowed to enter the stage and be processed by the actions in that stage (inbound) or whether already-processed artifacts will be allowed to transition to the next stage (outbound).
    StageTransitionType transitionType = 3;
}

message EncryptionKey {
    // The ID used to identify the key. For an AWS KMS key, this is the key ID or key ARN.
    string id = 1;
    // The type of encryption key, such as an AWS Key Management Service (AWS KMS) key. When creating or updating a pipeline, the value must be set to 'KMS'.
    EncryptionKeyType type = 2;
}

enum EncryptionKeyType {
    KMS = 0;
}

message ErrorDetails {
    // The system ID or error number code of the error.
    string code = 1;
    // The text of the error message.
    string message = 2;
}

message ExecutionDetails {
    // The system-generated unique ID of this action used to identify this job worker in any external systems, such as AWS CodeDeploy.
    string externalExecutionId = 1;
    // The percentage of work completed on the action, represented on a scale of zero to one hundred percent.
    integer percentComplete = 2;
    // The summary of the current status of the actions.
    string summary = 3;
}

message FailureDetails {
    // The external ID of the run of the action that failed.
    string externalExecutionId = 1;
    // The message about the failure.
    string message = 2;
    // The type of the failure.
    FailureType type = 3;
}

enum FailureType {
    JOBFAILED = 0;
    CONFIGURATIONERROR = 1;
    PERMISSIONERROR = 2;
    REVISIONOUTOFSYNC = 3;
    REVISIONUNAVAILABLE = 4;
    SYSTEMUNAVAILABLE = 5;
}

message GetJobDetailsInput {
    // The unique system-generated ID for the job.
    string jobId = 1;
}

message GetJobDetailsOutput {
    // <p>The details of the job.</p> <note> <p>If AWSSessionCredentials is used, a long-running job can call GetJobDetails again to obtain new credentials.</p> </note>
    JobDetails jobDetails = 1;
}

message GetPipelineExecutionInput {
    // The ID of the pipeline execution about which you want to get execution details.
    string pipelineExecutionId = 1;
    // The name of the pipeline about which you want to get execution details.
    string pipelineName = 2;
}

message GetPipelineExecutionOutput {
    // Represents information about the execution of a pipeline.
    PipelineExecution pipelineExecution = 1;
}

message GetPipelineInput {
    // The name of the pipeline for which you want to get information. Pipeline names must be unique under an Amazon Web Services (AWS) user account.
    string name = 1;
    // The version number of the pipeline. If you do not specify a version, defaults to the most current version.
    integer version = 2;
}

message GetPipelineOutput {
    // Represents the pipeline metadata information returned as part of the output of a GetPipeline action.
    PipelineMetadata metadata = 1;
    // Represents the structure of actions and stages to be performed in the pipeline.
    PipelineDeclaration pipeline = 2;
}

message GetPipelineStateInput {
    // The name of the pipeline about which you want to get information.
    string name = 1;
}

message GetPipelineStateOutput {
    // The date and time the pipeline was created, in timestamp format.
    string created = 1;
    // The name of the pipeline for which you want to get the state.
    string pipelineName = 2;
    // <p>The version number of the pipeline.</p> <note> <p>A newly-created pipeline is always assigned a version number of <code>1</code>.</p> </note>
    integer pipelineVersion = 3;
    // A list of the pipeline stage output information, including stage name, state, most recent run details, whether the stage is disabled, and other data.
    array stageStates = 4;
    // The date and time the pipeline was last updated, in timestamp format.
    string updated = 5;
}

message GetThirdPartyJobDetailsInput {
    // The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.
    string clientToken = 1;
    // The unique system-generated ID used for identifying the job.
    string jobId = 2;
}

message GetThirdPartyJobDetailsOutput {
    // The details of the job, including any protected values defined for the job.
    ThirdPartyJobDetails jobDetails = 1;
}

message InputArtifact {
    // <p>The name of the artifact to be worked on, for example, "My App".</p> <p>The input artifact of an action must exactly match the output artifact declared in a preceding action, but the input artifact does not have to be the next action in strict sequence from the action that provided the output artifact. Actions in parallel can declare different output artifacts, which are in turn consumed by different following actions.</p>
    string name = 1;
}

repeated InputArtifact InputArtifactList = 1

message InvalidActionDeclarationException {
}

message InvalidApprovalTokenException {
}

message InvalidBlockerDeclarationException {
}

message InvalidClientTokenException {
}

message InvalidJobException {
}

message InvalidJobStateException {
}

message InvalidNextTokenException {
}

message InvalidNonceException {
}

message InvalidStageDeclarationException {
}

message InvalidStructureException {
}

message Job {
    // The ID of the AWS account to use when performing the job.
    string accountId = 1;
    // Additional data about a job.
    JobData data = 2;
    // The unique system-generated ID of the job.
    string id = 3;
    // A system-generated random number that AWS CodePipeline uses to ensure that the job is being worked on by only one job worker. Use this number in an <a>AcknowledgeJob</a> request.
    string nonce = 4;
}

message JobData {
    // Represents information about an action configuration.
    ActionConfiguration actionConfiguration = 1;
    // Represents information about an action type.
    ActionTypeId actionTypeId = 2;
    // Represents an AWS session credentials object. These credentials are temporary credentials that are issued by AWS Secure Token Service (STS). They can be used to access input and output artifacts in the Amazon S3 bucket used to store artifact for the pipeline in AWS CodePipeline.
    AWSSessionCredentials artifactCredentials = 3;
    // A system-generated token, such as a AWS CodeDeploy deployment ID, that a job requires in order to continue the job asynchronously.
    string continuationToken = 4;
    // Represents information about the key used to encrypt data in the artifact store, such as an AWS Key Management Service (AWS KMS) key.
    EncryptionKey encryptionKey = 5;
    // The artifact supplied to the job.
    array inputArtifacts = 6;
    // The output of the job.
    array outputArtifacts = 7;
    // Represents information about a pipeline to a job worker.
    PipelineContext pipelineContext = 8;
}

message JobDetails {
    // The AWS account ID associated with the job.
    string accountId = 1;
    // Represents additional information about a job required for a job worker to complete the job.
    JobData data = 2;
    // The unique system-generated ID of the job.
    string id = 3;
}



repeated Job JobList = 1

message JobNotFoundException {
}

enum JobStatu {
    CREATED = 0;
    QUEUED = 1;
    DISPATCHED = 2;
    INPROGRESS = 3;
    TIMEDOUT = 4;
    SUCCEEDED = 5;
    FAILED = 6;
}

message LimitExceededException {
}

message ListActionTypesInput {
    // Filters the list of action types to those created by a specified entity.
    ActionOwner actionOwnerFilter = 1;
    // An identifier that was returned from the previous list action types call, which can be used to return the next set of action types in the list.
    string nextToken = 2;
}

message ListActionTypesOutput {
    // Provides details of the action types.
    array actionTypes = 1;
    // If the amount of returned information is significantly large, an identifier is also returned which can be used in a subsequent list action types call to return the next set of action types in the list.
    string nextToken = 2;
}

message ListPipelineExecutionsInput {
    // The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned nextToken value. The available pipeline execution history is limited to the most recent 12 months, based on pipeline execution start times. Default value is 100.
    integer maxResults = 1;
    // The token that was returned from the previous ListPipelineExecutions call, which can be used to return the next set of pipeline executions in the list.
    string nextToken = 2;
    // The name of the pipeline for which you want to get execution summary information.
    string pipelineName = 3;
}

message ListPipelineExecutionsOutput {
    // A token that can be used in the next ListPipelineExecutions call. To view all items in the list, continue to call this operation with each subsequent token until no more nextToken values are returned.
    string nextToken = 1;
    // A list of executions in the history of a pipeline.
    array pipelineExecutionSummaries = 2;
}

message ListPipelinesInput {
    // An identifier that was returned from the previous list pipelines call, which can be used to return the next set of pipelines in the list.
    string nextToken = 1;
}

message ListPipelinesOutput {
    // If the amount of returned information is significantly large, an identifier is also returned which can be used in a subsequent list pipelines call to return the next set of pipelines in the list.
    string nextToken = 1;
    // The list of pipelines.
    array pipelines = 2;
}

message NotLatestPipelineExecutionException {
}

message OutputArtifact {
    // <p>The name of the output of an artifact, such as "My App".</p> <p>The input artifact of an action must exactly match the output artifact declared in a preceding action, but the input artifact does not have to be the next action in strict sequence from the action that provided the output artifact. Actions in parallel can declare different output artifacts, which are in turn consumed by different following actions.</p> <p>Output artifact names must be unique within a pipeline.</p>
    string name = 1;
}

repeated OutputArtifact OutputArtifactList = 1





message PipelineContext {
    // The context of an action to a job worker within the stage of a pipeline.
    ActionContext action = 1;
    // The name of the pipeline. This is a user-specified value. Pipeline names must be unique across all pipeline names under an Amazon Web Services account.
    string pipelineName = 2;
    // The stage of the pipeline.
    StageContext stage = 3;
}

message PipelineDeclaration {
    // Represents information about the Amazon S3 bucket where artifacts are stored for the pipeline.
    ArtifactStore artifactStore = 1;
    // The name of the action to be performed.
    string name = 2;
    // The Amazon Resource Name (ARN) for AWS CodePipeline to use to either perform actions with no actionRoleArn, or to use to assume roles for actions with an actionRoleArn.
    string roleArn = 3;
    // The stage in which to perform the action.
    array stages = 4;
    // The version number of the pipeline. A new pipeline always has a version number of 1. This number is automatically incremented when a pipeline is updated.
    integer version = 5;
}

message PipelineExecution {
    // A list of ArtifactRevision objects included in a pipeline execution.
    array artifactRevisions = 1;
    // The ID of the pipeline execution.
    string pipelineExecutionId = 2;
    // The name of the pipeline that was executed.
    string pipelineName = 3;
    // The version number of the pipeline that was executed.
    integer pipelineVersion = 4;
    // <p>The status of the pipeline execution.</p> <ul> <li> <p>InProgress: The pipeline execution is currently running.</p> </li> <li> <p>Succeeded: The pipeline execution was completed successfully. </p> </li> <li> <p>Superseded: While this pipeline execution was waiting for the next stage to be completed, a newer pipeline execution advanced and continued through the pipeline instead. </p> </li> <li> <p>Failed: The pipeline execution was not completed successfully.</p> </li> </ul>
    PipelineExecutionStatus status = 5;
}

message PipelineExecutionNotFoundException {
}

enum PipelineExecutionStatu {
    INPROGRESS = 0;
    SUCCEEDED = 1;
    SUPERSEDED = 2;
    FAILED = 3;
}

message PipelineExecutionSummary {
    // The date and time of the last change to the pipeline execution, in timestamp format.
    string lastUpdateTime = 1;
    // The ID of the pipeline execution.
    string pipelineExecutionId = 2;
    // The date and time when the pipeline execution began, in timestamp format.
    string startTime = 3;
    // <p>The status of the pipeline execution.</p> <ul> <li> <p>InProgress: The pipeline execution is currently running.</p> </li> <li> <p>Succeeded: The pipeline execution was completed successfully. </p> </li> <li> <p>Superseded: While this pipeline execution was waiting for the next stage to be completed, a newer pipeline execution advanced and continued through the pipeline instead. </p> </li> <li> <p>Failed: The pipeline execution was not completed successfully.</p> </li> </ul>
    PipelineExecutionStatus status = 4;
}

repeated PipelineExecutionSummary PipelineExecutionSummaryList = 1

repeated PipelineSummary PipelineList = 1

message PipelineMetadata {
    // The date and time the pipeline was created, in timestamp format.
    string created = 1;
    // The Amazon Resource Name (ARN) of the pipeline.
    string pipelineArn = 2;
    // The date and time the pipeline was last updated, in timestamp format.
    string updated = 3;
}

message PipelineNameInUseException {
}

message PipelineNotFoundException {
}

repeated StageDeclaration PipelineStageDeclarationList = 1

message PipelineSummary {
    // The date and time the pipeline was created, in timestamp format.
    string created = 1;
    // The name of the pipeline.
    string name = 2;
    // The date and time of the last update to the pipeline, in timestamp format.
    string updated = 3;
    // The version number of the pipeline.
    integer version = 4;
}

message PipelineVersionNotFoundException {
}

message PollForJobsInput {
    // Represents information about an action type.
    ActionTypeId actionTypeId = 1;
    // The maximum number of jobs to return in a poll for jobs call.
    integer maxBatchSize = 2;
    // A map of property names and values. For an action type with no queryable properties, this value must be null or an empty map. For an action type with a queryable property, you must supply that property as a key in the map. Only jobs whose action configuration matches the mapped value will be returned.
    array queryParam = 3;
}

message PollForJobsOutput {
    // Information about the jobs to take action on.
    array jobs = 1;
}

message PollForThirdPartyJobsInput {
    // Represents information about an action type.
    ActionTypeId actionTypeId = 1;
    // The maximum number of jobs to return in a poll for jobs call.
    integer maxBatchSize = 2;
}

message PollForThirdPartyJobsOutput {
    // Information about the jobs to take action on.
    array jobs = 1;
}

message PutActionRevisionInput {
    // The name of the action that will process the revision.
    string actionName = 1;
    // Represents information about the version (or revision) of an action.
    ActionRevision actionRevision = 2;
    // The name of the pipeline that will start processing the revision to the source.
    string pipelineName = 3;
    // The name of the stage that contains the action that will act upon the revision.
    string stageName = 4;
}

message PutActionRevisionOutput {
    // Indicates whether the artifact revision was previously used in an execution of the specified pipeline.
    boolean newRevision = 1;
    // The ID of the current workflow state of the pipeline.
    string pipelineExecutionId = 2;
}

message PutApprovalResultInput {
    // The name of the action for which approval is requested.
    string actionName = 1;
    // The name of the pipeline that contains the action.
    string pipelineName = 2;
    // Represents information about the result of the approval request.
    ApprovalResult result = 3;
    // The name of the stage that contains the action.
    string stageName = 4;
    // The system-generated token used to identify a unique approval request. The token for each open approval request can be obtained using the <a>GetPipelineState</a> action and is used to validate that the approval request corresponding to this token is still valid.
    string token = 5;
}

message PutApprovalResultOutput {
    // The timestamp showing when the approval or rejection was submitted.
    string approvedAt = 1;
}

message PutJobFailureResultInput {
    // The details about the failure of a job.
    FailureDetails failureDetails = 1;
    // The unique system-generated ID of the job that failed. This is the same ID returned from PollForJobs.
    string jobId = 2;
}

message PutJobSuccessResultInput {
    // A token generated by a job worker, such as an AWS CodeDeploy deployment ID, that a successful job provides to identify a custom action in progress. Future jobs will use this token in order to identify the running instance of the action. It can be reused to return additional information about the progress of the custom action. When the action is complete, no continuation token should be supplied.
    string continuationToken = 1;
    // The ID of the current revision of the artifact successfully worked upon by the job.
    CurrentRevision currentRevision = 2;
    // The execution details of the successful job, such as the actions taken by the job worker.
    ExecutionDetails executionDetails = 3;
    // The unique system-generated ID of the job that succeeded. This is the same ID returned from PollForJobs.
    string jobId = 4;
}

message PutThirdPartyJobFailureResultInput {
    // The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.
    string clientToken = 1;
    // Represents information about failure details.
    FailureDetails failureDetails = 2;
    // The ID of the job that failed. This is the same ID returned from PollForThirdPartyJobs.
    string jobId = 3;
}

message PutThirdPartyJobSuccessResultInput {
    // The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.
    string clientToken = 1;
    // A token generated by a job worker, such as an AWS CodeDeploy deployment ID, that a successful job provides to identify a partner action in progress. Future jobs will use this token in order to identify the running instance of the action. It can be reused to return additional information about the progress of the partner action. When the action is complete, no continuation token should be supplied.
    string continuationToken = 2;
    // Represents information about a current revision.
    CurrentRevision currentRevision = 3;
    // The details of the actions taken and results produced on an artifact as it passes through stages in the pipeline.
    ExecutionDetails executionDetails = 4;
    // The ID of the job that successfully completed. This is the same ID returned from PollForThirdPartyJobs.
    string jobId = 5;
}

message QueryParamMap {
    string key = 1;
    string value = 2;
}
repeated QueryParamMap QueryParamMap = 1

message RetryStageExecutionInput {
    // The ID of the pipeline execution in the failed stage to be retried. Use the <a>GetPipelineState</a> action to retrieve the current pipelineExecutionId of the failed stage
    string pipelineExecutionId = 1;
    // The name of the pipeline that contains the failed stage.
    string pipelineName = 2;
    // The scope of the retry attempt. Currently, the only supported value is FAILED_ACTIONS.
    StageRetryMode retryMode = 3;
    // The name of the failed stage to be retried.
    string stageName = 4;
}

message RetryStageExecutionOutput {
    // The ID of the current workflow execution in the failed stage.
    string pipelineExecutionId = 1;
}

message S3ArtifactLocation {
    // The name of the Amazon S3 bucket.
    string bucketName = 1;
    // The key of the object in the Amazon S3 bucket, which uniquely identifies the object in the bucket.
    string objectKey = 2;
}









repeated ActionDeclaration StageActionDeclarationList = 1

repeated BlockerDeclaration StageBlockerDeclarationList = 1

message StageContext {
    // The name of the stage.
    string name = 1;
}

message StageDeclaration {
    // The actions included in a stage.
    array actions = 1;
    // Reserved for future use.
    array blockers = 2;
    // The name of the stage.
    string name = 3;
}

message StageExecution {
    // The ID of the pipeline execution associated with the stage.
    string pipelineExecutionId = 1;
    // The status of the stage, or for a completed stage, the last status of the stage.
    StageExecutionStatus status = 2;
}

enum StageExecutionStatu {
    INPROGRESS = 0;
    FAILED = 1;
    SUCCEEDED = 2;
}

message StageNotFoundException {
}

message StageNotRetryableException {
}

enum StageRetryMode {
    FAILED_ACTIONS = 0;
}

message StageState {
    // The state of the stage.
    array actionStates = 1;
    // The state of the inbound transition, which is either enabled or disabled.
    TransitionState inboundTransitionState = 2;
    // Information about the latest execution in the stage, including its ID and status.
    StageExecution latestExecution = 3;
    // The name of the stage.
    string stageName = 4;
}

repeated StageState StageStateList = 1

enum StageTransitionType {
    INBOUND = 0;
    OUTBOUND = 1;
}

message StartPipelineExecutionInput {
    // The name of the pipeline to start.
    string name = 1;
}

message StartPipelineExecutionOutput {
    // The unique system-generated ID of the pipeline execution that was started.
    string pipelineExecutionId = 1;
}

message ThirdPartyJob {
    // The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.
    string clientId = 1;
    // The identifier used to identify the job in AWS CodePipeline.
    string jobId = 2;
}

message ThirdPartyJobData {
    // Represents information about an action configuration.
    ActionConfiguration actionConfiguration = 1;
    // Represents information about an action type.
    ActionTypeId actionTypeId = 2;
    // Represents an AWS session credentials object. These credentials are temporary credentials that are issued by AWS Secure Token Service (STS). They can be used to access input and output artifacts in the Amazon S3 bucket used to store artifact for the pipeline in AWS CodePipeline.
    AWSSessionCredentials artifactCredentials = 3;
    // A system-generated token, such as a AWS CodeDeploy deployment ID, that a job requires in order to continue the job asynchronously.
    string continuationToken = 4;
    // The encryption key used to encrypt and decrypt data in the artifact store for the pipeline, such as an AWS Key Management Service (AWS KMS) key. This is optional and might not be present.
    EncryptionKey encryptionKey = 5;
    // The name of the artifact that will be worked upon by the action, if any. This name might be system-generated, such as "MyApp", or might be defined by the user when the action is created. The input artifact name must match the name of an output artifact generated by an action in an earlier action or stage of the pipeline.
    array inputArtifacts = 6;
    // The name of the artifact that will be the result of the action, if any. This name might be system-generated, such as "MyBuiltApp", or might be defined by the user when the action is created.
    array outputArtifacts = 7;
    // Represents information about a pipeline to a job worker.
    PipelineContext pipelineContext = 8;
}

message ThirdPartyJobDetails {
    // The data to be returned by the third party job worker.
    ThirdPartyJobData data = 1;
    // The identifier used to identify the job details in AWS CodePipeline.
    string id = 2;
    // A system-generated random number that AWS CodePipeline uses to ensure that the job is being worked on by only one job worker. Use this number in an <a>AcknowledgeThirdPartyJob</a> request.
    string nonce = 3;
}



repeated ThirdPartyJob ThirdPartyJobList = 1





message TransitionState {
    // The user-specified reason why the transition between two stages of a pipeline was disabled.
    string disabledReason = 1;
    // Whether the transition between stages is enabled (true) or disabled (false).
    boolean enabled = 2;
    // The timestamp when the transition state was last changed.
    string lastChangedAt = 3;
    // The ID of the user who last changed the transition state.
    string lastChangedBy = 4;
}

message UpdatePipelineInput {
    // The name of the pipeline to be updated.
    PipelineDeclaration pipeline = 1;
}

message UpdatePipelineOutput {
    // The structure of the updated pipeline.
    PipelineDeclaration pipeline = 1;
}

message ValidationException {
}

service AWSCodePipelineService {
    // Returns information about a specified job and whether that job has been received by the job worker. Only used for custom actions.
    rpc Post(PostRequest) returns (AcknowledgeJobOutput) {
      option (google.api.http) = {
        post: "//"
        body: "body"
      };
    }
    // Confirms a job worker has received the specified job. Only used for partner actions.
    rpc Post#AcknowledgeThirdPartyJob(Post#AcknowledgeThirdPartyJobRequest) returns (AcknowledgeThirdPartyJobOutput) {
      option (google.api.http) = {
        post: "//#AcknowledgeThirdPartyJob"
        body: "body"
      };
    }
    // Creates a new custom action that can be used in all pipelines associated with the AWS account. Only used for custom actions.
    rpc Post#CreateCustomActionType(Post#CreateCustomActionTypeRequest) returns (CreateCustomActionTypeOutput) {
      option (google.api.http) = {
        post: "//#CreateCustomActionType"
        body: "body"
      };
    }
    // Creates a pipeline.
    rpc Post#CreatePipeline(Post#CreatePipelineRequest) returns (CreatePipelineOutput) {
      option (google.api.http) = {
        post: "//#CreatePipeline"
        body: "body"
      };
    }
    // <p>Marks a custom action as deleted. PollForJobs for the custom action will fail after the action is marked for deletion. Only used for custom actions.</p> <important> <p>You cannot recreate a custom action after it has been deleted unless you increase the version number of the action.</p> </important>
    rpc Post#DeleteCustomActionType(Post#DeleteCustomActionTypeRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#DeleteCustomActionType"
        body: "body"
      };
    }
    // Deletes the specified pipeline.
    rpc Post#DeletePipeline(Post#DeletePipelineRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#DeletePipeline"
        body: "body"
      };
    }
    // Prevents artifacts in a pipeline from transitioning to the next stage in the pipeline.
    rpc Post#DisableStageTransition(Post#DisableStageTransitionRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#DisableStageTransition"
        body: "body"
      };
    }
    // Enables artifacts in a pipeline to transition to a stage in a pipeline.
    rpc Post#EnableStageTransition(Post#EnableStageTransitionRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#EnableStageTransition"
        body: "body"
      };
    }
    // <p>Returns information about a job. Only used for custom actions.</p> <important> <p>When this API is called, AWS CodePipeline returns temporary credentials for the Amazon S3 bucket used to store artifacts for the pipeline, if the action requires access to that Amazon S3 bucket for input or output artifacts. Additionally, this API returns any secret values defined for the action.</p> </important>
    rpc Post#GetJobDetails(Post#GetJobDetailsRequest) returns (GetJobDetailsOutput) {
      option (google.api.http) = {
        post: "//#GetJobDetails"
        body: "body"
      };
    }
    // Returns the metadata, structure, stages, and actions of a pipeline. Can be used to return the entire structure of a pipeline in JSON format, which can then be modified and used to update the pipeline structure with <a>UpdatePipeline</a>.
    rpc Post#GetPipeline(Post#GetPipelineRequest) returns (GetPipelineOutput) {
      option (google.api.http) = {
        post: "//#GetPipeline"
        body: "body"
      };
    }
    // Returns information about an execution of a pipeline, including details about artifacts, the pipeline execution ID, and the name, version, and status of the pipeline.
    rpc Post#GetPipelineExecution(Post#GetPipelineExecutionRequest) returns (GetPipelineExecutionOutput) {
      option (google.api.http) = {
        post: "//#GetPipelineExecution"
        body: "body"
      };
    }
    // Returns information about the state of a pipeline, including the stages and actions.
    rpc Post#GetPipelineState(Post#GetPipelineStateRequest) returns (GetPipelineStateOutput) {
      option (google.api.http) = {
        post: "//#GetPipelineState"
        body: "body"
      };
    }
    // <p>Requests the details of a job for a third party action. Only used for partner actions.</p> <important> <p>When this API is called, AWS CodePipeline returns temporary credentials for the Amazon S3 bucket used to store artifacts for the pipeline, if the action requires access to that Amazon S3 bucket for input or output artifacts. Additionally, this API returns any secret values defined for the action.</p> </important>
    rpc Post#GetThirdPartyJobDetails(Post#GetThirdPartyJobDetailsRequest) returns (GetThirdPartyJobDetailsOutput) {
      option (google.api.http) = {
        post: "//#GetThirdPartyJobDetails"
        body: "body"
      };
    }
    // Gets a summary of all AWS CodePipeline action types associated with your account.
    rpc Post#ListActionTypes(Post#ListActionTypesRequest) returns (ListActionTypesOutput) {
      option (google.api.http) = {
        post: "//#ListActionTypes"
        body: "body"
      };
    }
    // Gets a summary of the most recent executions for a pipeline.
    rpc Post#ListPipelineExecutions(Post#ListPipelineExecutionsRequest) returns (ListPipelineExecutionsOutput) {
      option (google.api.http) = {
        post: "//#ListPipelineExecutions"
        body: "body"
      };
    }
    // Gets a summary of all of the pipelines associated with your account.
    rpc Post#ListPipelines(Post#ListPipelinesRequest) returns (ListPipelinesOutput) {
      option (google.api.http) = {
        post: "//#ListPipelines"
        body: "body"
      };
    }
    // <p>Returns information about any jobs for AWS CodePipeline to act upon.</p> <important> <p>When this API is called, AWS CodePipeline returns temporary credentials for the Amazon S3 bucket used to store artifacts for the pipeline, if the action requires access to that Amazon S3 bucket for input or output artifacts. Additionally, this API returns any secret values defined for the action.</p> </important>
    rpc Post#PollForJobs(Post#PollForJobsRequest) returns (PollForJobsOutput) {
      option (google.api.http) = {
        post: "//#PollForJobs"
        body: "body"
      };
    }
    // <p>Determines whether there are any third party jobs for a job worker to act on. Only used for partner actions.</p> <important> <p>When this API is called, AWS CodePipeline returns temporary credentials for the Amazon S3 bucket used to store artifacts for the pipeline, if the action requires access to that Amazon S3 bucket for input or output artifacts.</p> </important>
    rpc Post#PollForThirdPartyJobs(Post#PollForThirdPartyJobsRequest) returns (PollForThirdPartyJobsOutput) {
      option (google.api.http) = {
        post: "//#PollForThirdPartyJobs"
        body: "body"
      };
    }
    // Provides information to AWS CodePipeline about new revisions to a source.
    rpc Post#PutActionRevision(Post#PutActionRevisionRequest) returns (PutActionRevisionOutput) {
      option (google.api.http) = {
        post: "//#PutActionRevision"
        body: "body"
      };
    }
    // Provides the response to a manual approval request to AWS CodePipeline. Valid responses include Approved and Rejected.
    rpc Post#PutApprovalResult(Post#PutApprovalResultRequest) returns (PutApprovalResultOutput) {
      option (google.api.http) = {
        post: "//#PutApprovalResult"
        body: "body"
      };
    }
    // Represents the failure of a job as returned to the pipeline by a job worker. Only used for custom actions.
    rpc Post#PutJobFailureResult(Post#PutJobFailureResultRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#PutJobFailureResult"
        body: "body"
      };
    }
    // Represents the success of a job as returned to the pipeline by a job worker. Only used for custom actions.
    rpc Post#PutJobSuccessResult(Post#PutJobSuccessResultRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#PutJobSuccessResult"
        body: "body"
      };
    }
    // Represents the failure of a third party job as returned to the pipeline by a job worker. Only used for partner actions.
    rpc Post#PutThirdPartyJobFailureResult(Post#PutThirdPartyJobFailureResultRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#PutThirdPartyJobFailureResult"
        body: "body"
      };
    }
    // Represents the success of a third party job as returned to the pipeline by a job worker. Only used for partner actions.
    rpc Post#PutThirdPartyJobSuccessResult(Post#PutThirdPartyJobSuccessResultRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#PutThirdPartyJobSuccessResult"
        body: "body"
      };
    }
    // Resumes the pipeline execution by retrying the last failed actions in a stage.
    rpc Post#RetryStageExecution(Post#RetryStageExecutionRequest) returns (RetryStageExecutionOutput) {
      option (google.api.http) = {
        post: "//#RetryStageExecution"
        body: "body"
      };
    }
    // Starts the specified pipeline. Specifically, it begins processing the latest commit to the source location specified as part of the pipeline.
    rpc Post#StartPipelineExecution(Post#StartPipelineExecutionRequest) returns (StartPipelineExecutionOutput) {
      option (google.api.http) = {
        post: "//#StartPipelineExecution"
        body: "body"
      };
    }
    // Updates a specified pipeline with edits or changes to its structure. Use a JSON file with the pipeline structure in conjunction with UpdatePipeline to provide the full structure of the pipeline. Updating the pipeline increases the version number of the pipeline by 1.
    rpc Post#UpdatePipeline(Post#UpdatePipelineRequest) returns (UpdatePipelineOutput) {
      option (google.api.http) = {
        post: "//#UpdatePipeline"
        body: "body"
      };
    }
}

syntax = "proto3";

import "google/api/annotations.proto";

package awsdirectconnect;

message PostRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AllocateConnectionOnInterconnectRequest body = 10;
}

message Post#AllocateHostedConnectionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AllocateHostedConnectionRequest body = 10;
}

message Post#AllocatePrivateVirtualInterfaceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AllocatePrivateVirtualInterfaceRequest body = 10;
}

message Post#AllocatePublicVirtualInterfaceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AllocatePublicVirtualInterfaceRequest body = 10;
}

message Post#AssociateConnectionWithLagRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AssociateConnectionWithLagRequest body = 10;
}

message Post#AssociateHostedConnectionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AssociateHostedConnectionRequest body = 10;
}

message Post#AssociateVirtualInterfaceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AssociateVirtualInterfaceRequest body = 10;
}

message Post#ConfirmConnectionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ConfirmConnectionRequest body = 10;
}

message Post#ConfirmPrivateVirtualInterfaceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ConfirmPrivateVirtualInterfaceRequest body = 10;
}

message Post#ConfirmPublicVirtualInterfaceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ConfirmPublicVirtualInterfaceRequest body = 10;
}

message Post#CreateBGPPeerRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateBGPPeerRequest body = 10;
}

message Post#CreateConnectionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateConnectionRequest body = 10;
}

message Post#CreateInterconnectRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateInterconnectRequest body = 10;
}

message Post#CreateLagRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateLagRequest body = 10;
}

message Post#CreatePrivateVirtualInterfaceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreatePrivateVirtualInterfaceRequest body = 10;
}

message Post#CreatePublicVirtualInterfaceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreatePublicVirtualInterfaceRequest body = 10;
}

message Post#DeleteBGPPeerRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteBGPPeerRequest body = 10;
}

message Post#DeleteConnectionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteConnectionRequest body = 10;
}

message Post#DeleteInterconnectRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteInterconnectRequest body = 10;
}

message Post#DeleteLagRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteLagRequest body = 10;
}

message Post#DeleteVirtualInterfaceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteVirtualInterfaceRequest body = 10;
}

message Post#DescribeConnectionLoaRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeConnectionLoaRequest body = 10;
}

message Post#DescribeConnectionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeConnectionsRequest body = 10;
}

message Post#DescribeConnectionsOnInterconnectRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeConnectionsOnInterconnectRequest body = 10;
}

message Post#DescribeHostedConnectionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeHostedConnectionsRequest body = 10;
}

message Post#DescribeInterconnectLoaRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeInterconnectLoaRequest body = 10;
}

message Post#DescribeInterconnectsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeInterconnectsRequest body = 10;
}

message Post#DescribeLagsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeLagsRequest body = 10;
}

message Post#DescribeLoaRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeLoaRequest body = 10;
}

message Post#DescribeLocationsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
}

message Post#DescribeTagsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeTagsRequest body = 10;
}

message Post#DescribeVirtualGatewaysRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
}

message Post#DescribeVirtualInterfacesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeVirtualInterfacesRequest body = 10;
}

message Post#DisassociateConnectionFromLagRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DisassociateConnectionFromLagRequest body = 10;
}

message Post#TagResourceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    TagResourceRequest body = 10;
}

message Post#UntagResourceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UntagResourceRequest body = 10;
}

message Post#UpdateLagRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateLagRequest body = 10;
}

enum AddressFamily {
    IPV4 = 0;
    IPV6 = 1;
}

message AllocateConnectionOnInterconnectRequest {
    // <p>Bandwidth of the connection.</p> <p>Example: "<i>500Mbps</i>"</p> <p>Default: None</p> <p>Values: 50Mbps, 100Mbps, 200Mbps, 300Mbps, 400Mbps, or 500Mbps</p>
    string bandwidth = 1;
    // <p>Name of the provisioned connection.</p> <p>Example: "<i>500M Connection to AWS</i>"</p> <p>Default: None</p>
    string connectionName = 2;
    // <p>ID of the interconnect on which the connection will be provisioned.</p> <p>Example: dxcon-456abc78</p> <p>Default: None</p>
    string interconnectId = 3;
    // <p>Numeric account Id of the customer for whom the connection will be provisioned.</p> <p>Example: 123443215678</p> <p>Default: None</p>
    string ownerAccount = 4;
    // <p>The dedicated VLAN provisioned to the connection.</p> <p>Example: 101</p> <p>Default: None</p>
    integer vlan = 5;
}

message AllocateHostedConnectionRequest {
    // <p>The bandwidth of the connection.</p> <p>Example: <code>500Mbps</code> </p> <p>Default: None</p> <p>Values: 50Mbps, 100Mbps, 200Mbps, 300Mbps, 400Mbps, or 500Mbps</p>
    string bandwidth = 1;
    // <p>The ID of the interconnect or LAG on which the connection will be provisioned.</p> <p>Example: dxcon-456abc78 or dxlag-abc123</p> <p>Default: None</p>
    string connectionId = 2;
    // <p>The name of the provisioned connection.</p> <p>Example: "<code>500M Connection to AWS</code>"</p> <p>Default: None</p>
    string connectionName = 3;
    // <p>The numeric account ID of the customer for whom the connection will be provisioned.</p> <p>Example: 123443215678</p> <p>Default: None</p>
    string ownerAccount = 4;
    // <p>The dedicated VLAN provisioned to the hosted connection.</p> <p>Example: 101</p> <p>Default: None</p>
    integer vlan = 5;
}

message AllocatePrivateVirtualInterfaceRequest {
    // <p>The connection ID on which the private virtual interface is provisioned.</p> <p>Default: None</p>
    string connectionId = 1;
    // <p>Detailed information for the private virtual interface to be provisioned.</p> <p>Default: None</p>
    NewPrivateVirtualInterfaceAllocation newPrivateVirtualInterfaceAllocation = 2;
    // <p>The AWS account that will own the new private virtual interface.</p> <p>Default: None</p>
    string ownerAccount = 3;
}

message AllocatePublicVirtualInterfaceRequest {
    // <p>The connection ID on which the public virtual interface is provisioned.</p> <p>Default: None</p>
    string connectionId = 1;
    // <p>Detailed information for the public virtual interface to be provisioned.</p> <p>Default: None</p>
    NewPublicVirtualInterfaceAllocation newPublicVirtualInterfaceAllocation = 2;
    // <p>The AWS account that will own the new public virtual interface.</p> <p>Default: None</p>
    string ownerAccount = 3;
}

message AssociateConnectionWithLagRequest {
    // <p>The ID of the connection.</p> <p>Example: dxcon-abc123</p> <p>Default: None</p>
    string connectionId = 1;
    // <p>The ID of the LAG with which to associate the connection.</p> <p>Example: dxlag-abc123</p> <p>Default: None</p>
    string lagId = 2;
}

message AssociateHostedConnectionRequest {
    // <p>The ID of the hosted connection.</p> <p>Example: dxcon-abc123</p> <p>Default: None</p>
    string connectionId = 1;
    // <p>The ID of the interconnect or the LAG.</p> <p>Example: dxcon-abc123 or dxlag-abc123</p> <p>Default: None</p>
    string parentConnectionId = 2;
}

message AssociateVirtualInterfaceRequest {
    // <p>The ID of the LAG or connection with which to associate the virtual interface.</p> <p>Example: dxlag-abc123 or dxcon-abc123</p> <p>Default: None</p>
    string connectionId = 1;
    // <p>The ID of the virtual interface.</p> <p>Example: dxvif-123dfg56</p> <p>Default: None</p>
    string virtualInterfaceId = 2;
}

message BGPPeer {
    AddressFamily addressFamily = 1;
    string amazonAddress = 2;
    integer asn = 3;
    string authKey = 4;
    BGPPeerState bgpPeerState = 5;
    BGPStatus bgpStatus = 6;
    string customerAddress = 7;
}

repeated BGPPeer BGPPeerList = 1

enum BGPPeerState {
    VERIFYING = 0;
    PENDING = 1;
    AVAILABLE = 2;
    DELETING = 3;
    DELETED = 4;
}

enum BGPStatu {
    UP = 0;
    DOWN = 1;
}

message ConfirmConnectionRequest {
    string connectionId = 1;
}

message ConfirmConnectionResponse {
    ConnectionState connectionState = 1;
}

message ConfirmPrivateVirtualInterfaceRequest {
    // <p>ID of the virtual private gateway that will be attached to the virtual interface.</p> <p> A virtual private gateway can be managed via the Amazon Virtual Private Cloud (VPC) console or the <a href="http://docs.aws.amazon.com/AWSEC2/latest/APIReference/ApiReference-query-CreateVpnGateway.html">EC2 CreateVpnGateway</a> action.</p> <p>Default: None</p>
    string virtualGatewayId = 1;
    string virtualInterfaceId = 2;
}

message ConfirmPrivateVirtualInterfaceResponse {
    VirtualInterfaceState virtualInterfaceState = 1;
}

message ConfirmPublicVirtualInterfaceRequest {
    string virtualInterfaceId = 1;
}

message ConfirmPublicVirtualInterfaceResponse {
    VirtualInterfaceState virtualInterfaceState = 1;
}

message Connection {
    // The Direct Connection endpoint which the physical connection terminates on.
    string awsDevice = 1;
    // <p>Bandwidth of the connection.</p> <p>Example: 1Gbps (for regular connections), or 500Mbps (for hosted connections)</p> <p>Default: None</p>
    string bandwidth = 2;
    string connectionId = 3;
    string connectionName = 4;
    ConnectionState connectionState = 5;
    string lagId = 6;
    // The time of the most recent call to <a>DescribeLoa</a> for this connection.
    string loaIssueTime = 7;
    string location = 8;
    // The AWS account that will own the new connection.
    string ownerAccount = 9;
    // The name of the AWS Direct Connect service provider associated with the connection.
    string partnerName = 10;
    string region = 11;
    integer vlan = 12;
}



repeated Connection ConnectionList = 1



enum ConnectionState {
    ORDERING = 0;
    REQUESTED = 1;
    PENDING = 2;
    AVAILABLE = 3;
    DOWN = 4;
    DELETING = 5;
    DELETED = 6;
    REJECTED = 7;
}

message Connections {
    // A list of connections.
    array connections = 1;
}

message CreateBGPPeerRequest {
    // <p>Detailed information for the BGP peer to be created.</p> <p>Default: None</p>
    NewBGPPeer newBGPPeer = 1;
    // <p>The ID of the virtual interface on which the BGP peer will be provisioned.</p> <p>Example: dxvif-456abc78</p> <p>Default: None</p>
    string virtualInterfaceId = 2;
}

message CreateBGPPeerResponse {
    VirtualInterface virtualInterface = 1;
}

message CreateConnectionRequest {
    string bandwidth = 1;
    string connectionName = 2;
    string lagId = 3;
    string location = 4;
}

message CreateInterconnectRequest {
    // <p>The port bandwidth</p> <p>Example: 1Gbps</p> <p>Default: None</p> <p>Available values: 1Gbps,10Gbps</p>
    string bandwidth = 1;
    // <p>The name of the interconnect.</p> <p>Example: "<i>1G Interconnect to AWS</i>"</p> <p>Default: None</p>
    string interconnectName = 2;
    string lagId = 3;
    // <p>Where the interconnect is located</p> <p>Example: EqSV5</p> <p>Default: None</p>
    string location = 4;
}

message CreateLagRequest {
    // <p>The ID of an existing connection to migrate to the LAG.</p> <p>Default: None</p>
    string connectionId = 1;
    // <p>The bandwidth of the individual physical connections bundled by the LAG.</p> <p>Default: None</p> <p>Available values: 1Gbps, 10Gbps</p>
    string connectionsBandwidth = 2;
    // <p>The name of the LAG.</p> <p>Example: "<code>3x10G LAG to AWS</code>"</p> <p>Default: None</p>
    string lagName = 3;
    // <p>The AWS Direct Connect location in which the LAG should be allocated.</p> <p>Example: EqSV5</p> <p>Default: None</p>
    string location = 4;
    // <p>The number of physical connections initially provisioned and bundled by the LAG.</p> <p>Default: None</p>
    integer numberOfConnections = 5;
}

message CreatePrivateVirtualInterfaceRequest {
    string connectionId = 1;
    // <p>Detailed information for the private virtual interface to be created.</p> <p>Default: None</p>
    NewPrivateVirtualInterface newPrivateVirtualInterface = 2;
}

message CreatePublicVirtualInterfaceRequest {
    string connectionId = 1;
    // <p>Detailed information for the public virtual interface to be created.</p> <p>Default: None</p>
    NewPublicVirtualInterface newPublicVirtualInterface = 2;
}

message DeleteBGPPeerRequest {
    integer asn = 1;
    string customerAddress = 2;
    // <p>The ID of the virtual interface from which the BGP peer will be deleted.</p> <p>Example: dxvif-456abc78</p> <p>Default: None</p>
    string virtualInterfaceId = 3;
}

message DeleteBGPPeerResponse {
    VirtualInterface virtualInterface = 1;
}

message DeleteConnectionRequest {
    string connectionId = 1;
}

message DeleteInterconnectRequest {
    string interconnectId = 1;
}

message DeleteInterconnectResponse {
    InterconnectState interconnectState = 1;
}

message DeleteLagRequest {
    // <p>The ID of the LAG to delete.</p> <p>Example: dxlag-abc123</p> <p>Default: None</p>
    string lagId = 1;
}

message DeleteVirtualInterfaceRequest {
    string virtualInterfaceId = 1;
}

message DeleteVirtualInterfaceResponse {
    VirtualInterfaceState virtualInterfaceState = 1;
}

message DescribeConnectionLoaRequest {
    string connectionId = 1;
    LoaContentType loaContentType = 2;
    // <p>The name of the APN partner or service provider who establishes connectivity on your behalf. If you supply this parameter, the LOA-CFA lists the provider name alongside your company name as the requester of the cross connect.</p> <p>Default: None</p>
    string providerName = 3;
}

message DescribeConnectionLoaResponse {
    Loa loa = 1;
}

message DescribeConnectionsOnInterconnectRequest {
    // <p>ID of the interconnect on which a list of connection is provisioned.</p> <p>Example: dxcon-abc123</p> <p>Default: None</p>
    string interconnectId = 1;
}

message DescribeConnectionsRequest {
    string connectionId = 1;
}

message DescribeHostedConnectionsRequest {
    // <p>The ID of the interconnect or LAG on which the hosted connections are provisioned.</p> <p>Example: dxcon-abc123 or dxlag-abc123</p> <p>Default: None</p>
    string connectionId = 1;
}

message DescribeInterconnectLoaRequest {
    string interconnectId = 1;
    LoaContentType loaContentType = 2;
    // <p>The name of the service provider who establishes connectivity on your behalf. If you supply this parameter, the LOA-CFA lists the provider name alongside your company name as the requester of the cross connect.</p> <p>Default: None</p>
    string providerName = 3;
}

message DescribeInterconnectLoaResponse {
    Loa loa = 1;
}

message DescribeInterconnectsRequest {
    string interconnectId = 1;
}

message DescribeLagsRequest {
    // <p>The ID of the LAG.</p> <p>Example: dxlag-abc123</p> <p>Default: None</p>
    string lagId = 1;
}

message DescribeLoaRequest {
    // <p>The ID of a connection, LAG, or interconnect for which to get the LOA-CFA information.</p> <p>Example: dxcon-abc123 or dxlag-abc123</p> <p>Default: None</p>
    string connectionId = 1;
    // <p>A standard media type indicating the content type of the LOA-CFA document. Currently, the only supported value is "application/pdf".</p> <p>Default: application/pdf</p>
    LoaContentType loaContentType = 2;
    // <p>The name of the service provider who establishes connectivity on your behalf. If you supply this parameter, the LOA-CFA lists the provider name alongside your company name as the requester of the cross connect.</p> <p>Default: None</p>
    string providerName = 3;
}

message DescribeTagsRequest {
    // The Amazon Resource Names (ARNs) of the Direct Connect resources.
    array resourceArns = 1;
}

message DescribeTagsResponse {
    // Information about the tags.
    array resourceTags = 1;
}

message DescribeVirtualInterfacesRequest {
    string connectionId = 1;
    string virtualInterfaceId = 2;
}

message DirectConnectClientException {
    // This is an exception thrown when there is an issue with the input provided by the API call. For example, the name provided for a connection contains a pound sign (#). This can also occur when a valid value is provided, but is otherwise constrained. For example, the valid VLAN tag range is 1-4096 but each can only be used once per connection.
    string message = 1;
}

message DirectConnectServerException {
    // This is an exception thrown when there is a backend issue on the server side.
    string message = 1;
}

message DisassociateConnectionFromLagRequest {
    // <p>The ID of the connection to disassociate from the LAG.</p> <p>Example: dxcon-abc123</p> <p>Default: None</p>
    string connectionId = 1;
    // <p>The ID of the LAG.</p> <p>Example: dxlag-abc123</p> <p>Default: None</p>
    string lagId = 2;
}

message DuplicateTagKeysException {
}

message Interconnect {
    // The Direct Connection endpoint which the physical connection terminates on.
    string awsDevice = 1;
    string bandwidth = 2;
    string interconnectId = 3;
    string interconnectName = 4;
    InterconnectState interconnectState = 5;
    string lagId = 6;
    // The time of the most recent call to DescribeInterconnectLoa for this Interconnect.
    string loaIssueTime = 7;
    string location = 8;
    string region = 9;
}



repeated Interconnect InterconnectList = 1



enum InterconnectState {
    REQUESTED = 0;
    PENDING = 1;
    AVAILABLE = 2;
    DOWN = 3;
    DELETING = 4;
    DELETED = 5;
}

message Interconnects {
    // A list of interconnects.
    array interconnects = 1;
}

message Lag {
    // <p>Indicates whether the LAG can host other connections.</p> <note> <p>This is intended for use by AWS Direct Connect partners only.</p> </note>
    boolean allowsHostedConnections = 1;
    // The AWS Direct Connection endpoint that hosts the LAG.
    string awsDevice = 2;
    // A list of connections bundled by this LAG.
    array connections = 3;
    // <p>The individual bandwidth of the physical connections bundled by the LAG.</p> <p>Available values: 1Gbps, 10Gbps</p>
    string connectionsBandwidth = 4;
    string lagId = 5;
    // The name of the LAG.
    string lagName = 6;
    LagState lagState = 7;
    string location = 8;
    // The minimum number of physical connections that must be operational for the LAG itself to be operational. If the number of operational connections drops below this setting, the LAG state changes to <code>down</code>. This value can help to ensure that a LAG is not overutilized if a significant number of its bundled connections go down.
    integer minimumLinks = 9;
    // The number of physical connections bundled by the LAG, up to a maximum of 10.
    integer numberOfConnections = 10;
    // The owner of the LAG.
    string ownerAccount = 11;
    string region = 12;
}



repeated Lag LagList = 1



enum LagState {
    REQUESTED = 0;
    PENDING = 1;
    AVAILABLE = 2;
    DOWN = 3;
    DELETING = 4;
    DELETED = 5;
}

message Lags {
    // A list of LAGs.
    array lags = 1;
}

message Loa {
    string loaContent = 1;
    LoaContentType loaContentType = 2;
}

enum LoaContentType {
    APPLICATIONPDF = 0;
}

message Location {
    // The code used to indicate the AWS Direct Connect location.
    string locationCode = 1;
}



repeated Location LocationList = 1



message Locations {
    // A list of colocation hubs where network providers have equipment. Most regions have multiple locations available.
    array locations = 1;
}

message NewBGPPeer {
    AddressFamily addressFamily = 1;
    string amazonAddress = 2;
    integer asn = 3;
    string authKey = 4;
    string customerAddress = 5;
}

message NewPrivateVirtualInterface {
    AddressFamily addressFamily = 1;
    string amazonAddress = 2;
    integer asn = 3;
    string authKey = 4;
    string customerAddress = 5;
    string virtualGatewayId = 6;
    string virtualInterfaceName = 7;
    integer vlan = 8;
}

message NewPrivateVirtualInterfaceAllocation {
    AddressFamily addressFamily = 1;
    string amazonAddress = 2;
    integer asn = 3;
    string authKey = 4;
    string customerAddress = 5;
    string virtualInterfaceName = 6;
    integer vlan = 7;
}

message NewPublicVirtualInterface {
    AddressFamily addressFamily = 1;
    string amazonAddress = 2;
    integer asn = 3;
    string authKey = 4;
    string customerAddress = 5;
    array routeFilterPrefixes = 6;
    string virtualInterfaceName = 7;
    integer vlan = 8;
}

message NewPublicVirtualInterfaceAllocation {
    AddressFamily addressFamily = 1;
    string amazonAddress = 2;
    integer asn = 3;
    string authKey = 4;
    string customerAddress = 5;
    array routeFilterPrefixes = 6;
    string virtualInterfaceName = 7;
    integer vlan = 8;
}











repeated string ResourceArnList = 1

message ResourceTag {
    // The Amazon Resource Name (ARN) of the Direct Connect resource.
    string resourceArn = 1;
    // The tags.
    array tags = 2;
}

repeated ResourceTag ResourceTagList = 1

message RouteFilterPrefix {
    // <p>CIDR notation for the advertised route. Multiple routes are separated by commas.</p> <p>IPv6 CIDRs must be at least a /64 or shorter</p> <p>Example: 10.10.10.0/24,10.10.11.0/24,2001:db8::/64</p>
    string cidr = 1;
}

repeated RouteFilterPrefix RouteFilterPrefixList = 1



message Tag {
    // The key of the tag.
    string key = 1;
    // The value of the tag.
    string value = 2;
}



repeated string TagKeyList = 1

repeated Tag TagList = 1

message TagResourceRequest {
    // <p>The Amazon Resource Name (ARN) of the Direct Connect resource.</p> <p>Example: arn:aws:directconnect:us-east-1:123456789012:dxcon/dxcon-fg5678gh</p>
    string resourceArn = 1;
    // The list of tags to add.
    array tags = 2;
}

message TagResourceResponse {
}

message TooManyTagsException {
}

message UntagResourceRequest {
    // The Amazon Resource Name (ARN) of the Direct Connect resource.
    string resourceArn = 1;
    // The list of tag keys to remove.
    array tagKeys = 2;
}

message UntagResourceResponse {
}

message UpdateLagRequest {
    // <p>The ID of the LAG to update.</p> <p>Example: dxlag-abc123</p> <p>Default: None</p>
    string lagId = 1;
    // <p>The name for the LAG.</p> <p>Example: "<code>3x10G LAG to AWS</code>"</p> <p>Default: None</p>
    string lagName = 2;
    // <p>The minimum number of physical connections that must be operational for the LAG itself to be operational.</p> <p>Default: None</p>
    integer minimumLinks = 3;
}

message VirtualGateway {
    string virtualGatewayId = 1;
    string virtualGatewayState = 2;
}



repeated VirtualGateway VirtualGatewayList = 1



message VirtualGateways {
    // A list of virtual private gateways.
    array virtualGateways = 1;
}

message VirtualInterface {
    AddressFamily addressFamily = 1;
    string amazonAddress = 2;
    integer asn = 3;
    string authKey = 4;
    array bgpPeers = 5;
    string connectionId = 6;
    string customerAddress = 7;
    // Information for generating the customer router configuration.
    string customerRouterConfig = 8;
    string location = 9;
    // The AWS account that will own the new virtual interface.
    string ownerAccount = 10;
    array routeFilterPrefixes = 11;
    string virtualGatewayId = 12;
    string virtualInterfaceId = 13;
    string virtualInterfaceName = 14;
    VirtualInterfaceState virtualInterfaceState = 15;
    string virtualInterfaceType = 16;
    integer vlan = 17;
}



repeated VirtualInterface VirtualInterfaceList = 1



enum VirtualInterfaceState {
    CONFIRMING = 0;
    VERIFYING = 1;
    PENDING = 2;
    AVAILABLE = 3;
    DOWN = 4;
    DELETING = 5;
    DELETED = 6;
    REJECTED = 7;
}

message VirtualInterfaces {
    // A list of virtual interfaces.
    array virtualInterfaces = 1;
}

service AWSDirectConnectService {
    // <p>Deprecated in favor of <a>AllocateHostedConnection</a>.</p> <p>Creates a hosted connection on an interconnect.</p> <p>Allocates a VLAN number and a specified amount of bandwidth for use by a hosted connection on the given interconnect.</p> <note> <p>This is intended for use by AWS Direct Connect partners only.</p> </note>
    rpc Post(PostRequest) returns (Connection) {
      option (google.api.http) = {
        post: "//"
        body: "body"
      };
    }
    // <p>Creates a hosted connection on an interconnect or a link aggregation group (LAG).</p> <p>Allocates a VLAN number and a specified amount of bandwidth for use by a hosted connection on the given interconnect or LAG.</p> <note> <p>This is intended for use by AWS Direct Connect partners only.</p> </note>
    rpc Post#AllocateHostedConnection(Post#AllocateHostedConnectionRequest) returns (Connection) {
      option (google.api.http) = {
        post: "//#AllocateHostedConnection"
        body: "body"
      };
    }
    // <p>Provisions a private virtual interface to be owned by another AWS customer.</p> <p>Virtual interfaces created using this action must be confirmed by the virtual interface owner by using the <a>ConfirmPrivateVirtualInterface</a> action. Until then, the virtual interface will be in 'Confirming' state, and will not be available for handling traffic.</p>
    rpc Post#AllocatePrivateVirtualInterface(Post#AllocatePrivateVirtualInterfaceRequest) returns (VirtualInterface) {
      option (google.api.http) = {
        post: "//#AllocatePrivateVirtualInterface"
        body: "body"
      };
    }
    // <p>Provisions a public virtual interface to be owned by a different customer.</p> <p>The owner of a connection calls this function to provision a public virtual interface which will be owned by another AWS customer.</p> <p>Virtual interfaces created using this function must be confirmed by the virtual interface owner by calling ConfirmPublicVirtualInterface. Until this step has been completed, the virtual interface will be in 'Confirming' state, and will not be available for handling traffic.</p> <p>When creating an IPv6 public virtual interface (addressFamily is 'ipv6'), the customer and amazon address fields should be left blank to use auto-assigned IPv6 space. Custom IPv6 Addresses are currently not supported.</p>
    rpc Post#AllocatePublicVirtualInterface(Post#AllocatePublicVirtualInterfaceRequest) returns (VirtualInterface) {
      option (google.api.http) = {
        post: "//#AllocatePublicVirtualInterface"
        body: "body"
      };
    }
    // <p>Associates an existing connection with a link aggregation group (LAG). The connection is interrupted and re-established as a member of the LAG (connectivity to AWS will be interrupted). The connection must be hosted on the same AWS Direct Connect endpoint as the LAG, and its bandwidth must match the bandwidth for the LAG. You can reassociate a connection that's currently associated with a different LAG; however, if removing the connection will cause the original LAG to fall below its setting for minimum number of operational connections, the request fails.</p> <p>Any virtual interfaces that are directly associated with the connection are automatically re-associated with the LAG. If the connection was originally associated with a different LAG, the virtual interfaces remain associated with the original LAG.</p> <p>For interconnects, any hosted connections are automatically re-associated with the LAG. If the interconnect was originally associated with a different LAG, the hosted connections remain associated with the original LAG.</p>
    rpc Post#AssociateConnectionWithLag(Post#AssociateConnectionWithLagRequest) returns (Connection) {
      option (google.api.http) = {
        post: "//#AssociateConnectionWithLag"
        body: "body"
      };
    }
    // <p>Associates a hosted connection and its virtual interfaces with a link aggregation group (LAG) or interconnect. If the target interconnect or LAG has an existing hosted connection with a conflicting VLAN number or IP address, the operation fails. This action temporarily interrupts the hosted connection's connectivity to AWS as it is being migrated.</p> <note> <p>This is intended for use by AWS Direct Connect partners only.</p> </note>
    rpc Post#AssociateHostedConnection(Post#AssociateHostedConnectionRequest) returns (Connection) {
      option (google.api.http) = {
        post: "//#AssociateHostedConnection"
        body: "body"
      };
    }
    // <p>Associates a virtual interface with a specified link aggregation group (LAG) or connection. Connectivity to AWS is temporarily interrupted as the virtual interface is being migrated. If the target connection or LAG has an associated virtual interface with a conflicting VLAN number or a conflicting IP address, the operation fails. </p> <p>Virtual interfaces associated with a hosted connection cannot be associated with a LAG; hosted connections must be migrated along with their virtual interfaces using <a>AssociateHostedConnection</a>.</p> <p>Hosted virtual interfaces (an interface for which the owner of the connection is not the owner of physical connection) can only be reassociated by the owner of the physical connection.</p>
    rpc Post#AssociateVirtualInterface(Post#AssociateVirtualInterfaceRequest) returns (VirtualInterface) {
      option (google.api.http) = {
        post: "//#AssociateVirtualInterface"
        body: "body"
      };
    }
    // <p>Confirm the creation of a hosted connection on an interconnect.</p> <p>Upon creation, the hosted connection is initially in the 'Ordering' state, and will remain in this state until the owner calls ConfirmConnection to confirm creation of the hosted connection.</p>
    rpc Post#ConfirmConnection(Post#ConfirmConnectionRequest) returns (ConfirmConnectionResponse) {
      option (google.api.http) = {
        post: "//#ConfirmConnection"
        body: "body"
      };
    }
    // <p>Accept ownership of a private virtual interface created by another customer.</p> <p>After the virtual interface owner calls this function, the virtual interface will be created and attached to the given virtual private gateway, and will be available for handling traffic.</p>
    rpc Post#ConfirmPrivateVirtualInterface(Post#ConfirmPrivateVirtualInterfaceRequest) returns (ConfirmPrivateVirtualInterfaceResponse) {
      option (google.api.http) = {
        post: "//#ConfirmPrivateVirtualInterface"
        body: "body"
      };
    }
    // <p>Accept ownership of a public virtual interface created by another customer.</p> <p>After the virtual interface owner calls this function, the specified virtual interface will be created and made available for handling traffic.</p>
    rpc Post#ConfirmPublicVirtualInterface(Post#ConfirmPublicVirtualInterfaceRequest) returns (ConfirmPublicVirtualInterfaceResponse) {
      option (google.api.http) = {
        post: "//#ConfirmPublicVirtualInterface"
        body: "body"
      };
    }
    // <p>Creates a new BGP peer on a specified virtual interface. The BGP peer cannot be in the same address family (IPv4/IPv6) of an existing BGP peer on the virtual interface.</p> <p>You must create a BGP peer for the corresponding address family in order to access AWS resources that also use that address family.</p> <p>When creating a IPv6 BGP peer, the Amazon address and customer address fields must be left blank. IPv6 addresses are automatically assigned from Amazon's pool of IPv6 addresses; you cannot specify custom IPv6 addresses.</p> <p>For a public virtual interface, the Autonomous System Number (ASN) must be private or already whitelisted for the virtual interface.</p>
    rpc Post#CreateBGPPeer(Post#CreateBGPPeerRequest) returns (CreateBGPPeerResponse) {
      option (google.api.http) = {
        post: "//#CreateBGPPeer"
        body: "body"
      };
    }
    // <p>Creates a new connection between the customer network and a specific AWS Direct Connect location.</p> <p>A connection links your internal network to an AWS Direct Connect location over a standard 1 gigabit or 10 gigabit Ethernet fiber-optic cable. One end of the cable is connected to your router, the other to an AWS Direct Connect router. An AWS Direct Connect location provides access to Amazon Web Services in the region it is associated with. You can establish connections with AWS Direct Connect locations in multiple regions, but a connection in one region does not provide connectivity to other regions.</p> <p>You can automatically add the new connection to a link aggregation group (LAG) by specifying a LAG ID in the request. This ensures that the new connection is allocated on the same AWS Direct Connect endpoint that hosts the specified LAG. If there are no available ports on the endpoint, the request fails and no connection will be created.</p>
    rpc Post#CreateConnection(Post#CreateConnectionRequest) returns (Connection) {
      option (google.api.http) = {
        post: "//#CreateConnection"
        body: "body"
      };
    }
    // <p>Creates a new interconnect between a AWS Direct Connect partner's network and a specific AWS Direct Connect location.</p> <p>An interconnect is a connection which is capable of hosting other connections. The AWS Direct Connect partner can use an interconnect to provide sub-1Gbps AWS Direct Connect service to tier 2 customers who do not have their own connections. Like a standard connection, an interconnect links the AWS Direct Connect partner's network to an AWS Direct Connect location over a standard 1 Gbps or 10 Gbps Ethernet fiber-optic cable. One end is connected to the partner's router, the other to an AWS Direct Connect router.</p> <p>You can automatically add the new interconnect to a link aggregation group (LAG) by specifying a LAG ID in the request. This ensures that the new interconnect is allocated on the same AWS Direct Connect endpoint that hosts the specified LAG. If there are no available ports on the endpoint, the request fails and no interconnect will be created.</p> <p>For each end customer, the AWS Direct Connect partner provisions a connection on their interconnect by calling AllocateConnectionOnInterconnect. The end customer can then connect to AWS resources by creating a virtual interface on their connection, using the VLAN assigned to them by the AWS Direct Connect partner.</p> <note> <p>This is intended for use by AWS Direct Connect partners only.</p> </note>
    rpc Post#CreateInterconnect(Post#CreateInterconnectRequest) returns (Interconnect) {
      option (google.api.http) = {
        post: "//#CreateInterconnect"
        body: "body"
      };
    }
    // <p>Creates a new link aggregation group (LAG) with the specified number of bundled physical connections between the customer network and a specific AWS Direct Connect location. A LAG is a logical interface that uses the Link Aggregation Control Protocol (LACP) to aggregate multiple 1 gigabit or 10 gigabit interfaces, allowing you to treat them as a single interface.</p> <p>All connections in a LAG must use the same bandwidth (for example, 10 Gbps), and must terminate at the same AWS Direct Connect endpoint.</p> <p>You can have up to 10 connections per LAG. Regardless of this limit, if you request more connections for the LAG than AWS Direct Connect can allocate on a single endpoint, no LAG is created.</p> <p>You can specify an existing physical connection or interconnect to include in the LAG (which counts towards the total number of connections). Doing so interrupts the current physical connection or hosted connections, and re-establishes them as a member of the LAG. The LAG will be created on the same AWS Direct Connect endpoint to which the connection terminates. Any virtual interfaces associated with the connection are automatically disassociated and re-associated with the LAG. The connection ID does not change.</p> <p>If the AWS account used to create a LAG is a registered AWS Direct Connect partner, the LAG is automatically enabled to host sub-connections. For a LAG owned by a partner, any associated virtual interfaces cannot be directly configured.</p>
    rpc Post#CreateLag(Post#CreateLagRequest) returns (Lag) {
      option (google.api.http) = {
        post: "//#CreateLag"
        body: "body"
      };
    }
    // Creates a new private virtual interface. A virtual interface is the VLAN that transports AWS Direct Connect traffic. A private virtual interface supports sending traffic to a single virtual private cloud (VPC).
    rpc Post#CreatePrivateVirtualInterface(Post#CreatePrivateVirtualInterfaceRequest) returns (VirtualInterface) {
      option (google.api.http) = {
        post: "//#CreatePrivateVirtualInterface"
        body: "body"
      };
    }
    // <p>Creates a new public virtual interface. A virtual interface is the VLAN that transports AWS Direct Connect traffic. A public virtual interface supports sending traffic to public services of AWS such as Amazon Simple Storage Service (Amazon S3).</p> <p>When creating an IPv6 public virtual interface (addressFamily is 'ipv6'), the customer and amazon address fields should be left blank to use auto-assigned IPv6 space. Custom IPv6 Addresses are currently not supported.</p>
    rpc Post#CreatePublicVirtualInterface(Post#CreatePublicVirtualInterfaceRequest) returns (VirtualInterface) {
      option (google.api.http) = {
        post: "//#CreatePublicVirtualInterface"
        body: "body"
      };
    }
    // Deletes a BGP peer on the specified virtual interface that matches the specified customer address and ASN. You cannot delete the last BGP peer from a virtual interface.
    rpc Post#DeleteBGPPeer(Post#DeleteBGPPeerRequest) returns (DeleteBGPPeerResponse) {
      option (google.api.http) = {
        post: "//#DeleteBGPPeer"
        body: "body"
      };
    }
    // <p>Deletes the connection.</p> <p>Deleting a connection only stops the AWS Direct Connect port hour and data transfer charges. You need to cancel separately with the providers any services or charges for cross-connects or network circuits that connect you to the AWS Direct Connect location.</p>
    rpc Post#DeleteConnection(Post#DeleteConnectionRequest) returns (Connection) {
      option (google.api.http) = {
        post: "//#DeleteConnection"
        body: "body"
      };
    }
    // <p>Deletes the specified interconnect.</p> <note> <p>This is intended for use by AWS Direct Connect partners only.</p> </note>
    rpc Post#DeleteInterconnect(Post#DeleteInterconnectRequest) returns (DeleteInterconnectResponse) {
      option (google.api.http) = {
        post: "//#DeleteInterconnect"
        body: "body"
      };
    }
    // Deletes a link aggregation group (LAG). You cannot delete a LAG if it has active virtual interfaces or hosted connections.
    rpc Post#DeleteLag(Post#DeleteLagRequest) returns (Lag) {
      option (google.api.http) = {
        post: "//#DeleteLag"
        body: "body"
      };
    }
    // Deletes a virtual interface.
    rpc Post#DeleteVirtualInterface(Post#DeleteVirtualInterfaceRequest) returns (DeleteVirtualInterfaceResponse) {
      option (google.api.http) = {
        post: "//#DeleteVirtualInterface"
        body: "body"
      };
    }
    // <p>Deprecated in favor of <a>DescribeLoa</a>.</p> <p>Returns the LOA-CFA for a Connection.</p> <p>The Letter of Authorization - Connecting Facility Assignment (LOA-CFA) is a document that your APN partner or service provider uses when establishing your cross connect to AWS at the colocation facility. For more information, see <a href="http://docs.aws.amazon.com/directconnect/latest/UserGuide/Colocation.html">Requesting Cross Connects at AWS Direct Connect Locations</a> in the AWS Direct Connect user guide.</p>
    rpc Post#DescribeConnectionLoa(Post#DescribeConnectionLoaRequest) returns (DescribeConnectionLoaResponse) {
      option (google.api.http) = {
        post: "//#DescribeConnectionLoa"
        body: "body"
      };
    }
    // <p>Displays all connections in this region.</p> <p>If a connection ID is provided, the call returns only that particular connection.</p>
    rpc Post#DescribeConnections(Post#DescribeConnectionsRequest) returns (Connections) {
      option (google.api.http) = {
        post: "//#DescribeConnections"
        body: "body"
      };
    }
    // <p>Deprecated in favor of <a>DescribeHostedConnections</a>.</p> <p>Returns a list of connections that have been provisioned on the given interconnect.</p> <note> <p>This is intended for use by AWS Direct Connect partners only.</p> </note>
    rpc Post#DescribeConnectionsOnInterconnect(Post#DescribeConnectionsOnInterconnectRequest) returns (Connections) {
      option (google.api.http) = {
        post: "//#DescribeConnectionsOnInterconnect"
        body: "body"
      };
    }
    // <p>Returns a list of hosted connections that have been provisioned on the given interconnect or link aggregation group (LAG).</p> <note> <p>This is intended for use by AWS Direct Connect partners only.</p> </note>
    rpc Post#DescribeHostedConnections(Post#DescribeHostedConnectionsRequest) returns (Connections) {
      option (google.api.http) = {
        post: "//#DescribeHostedConnections"
        body: "body"
      };
    }
    // <p>Deprecated in favor of <a>DescribeLoa</a>.</p> <p>Returns the LOA-CFA for an Interconnect.</p> <p>The Letter of Authorization - Connecting Facility Assignment (LOA-CFA) is a document that is used when establishing your cross connect to AWS at the colocation facility. For more information, see <a href="http://docs.aws.amazon.com/directconnect/latest/UserGuide/Colocation.html">Requesting Cross Connects at AWS Direct Connect Locations</a> in the AWS Direct Connect user guide.</p>
    rpc Post#DescribeInterconnectLoa(Post#DescribeInterconnectLoaRequest) returns (DescribeInterconnectLoaResponse) {
      option (google.api.http) = {
        post: "//#DescribeInterconnectLoa"
        body: "body"
      };
    }
    // <p>Returns a list of interconnects owned by the AWS account.</p> <p>If an interconnect ID is provided, it will only return this particular interconnect.</p>
    rpc Post#DescribeInterconnects(Post#DescribeInterconnectsRequest) returns (Interconnects) {
      option (google.api.http) = {
        post: "//#DescribeInterconnects"
        body: "body"
      };
    }
    // <p>Describes the link aggregation groups (LAGs) in your account. </p> <p>If a LAG ID is provided, only information about the specified LAG is returned.</p>
    rpc Post#DescribeLags(Post#DescribeLagsRequest) returns (Lags) {
      option (google.api.http) = {
        post: "//#DescribeLags"
        body: "body"
      };
    }
    // <p>Returns the LOA-CFA for a connection, interconnect, or link aggregation group (LAG).</p> <p>The Letter of Authorization - Connecting Facility Assignment (LOA-CFA) is a document that is used when establishing your cross connect to AWS at the colocation facility. For more information, see <a href="http://docs.aws.amazon.com/directconnect/latest/UserGuide/Colocation.html">Requesting Cross Connects at AWS Direct Connect Locations</a> in the AWS Direct Connect user guide.</p>
    rpc Post#DescribeLoa(Post#DescribeLoaRequest) returns (Loa) {
      option (google.api.http) = {
        post: "//#DescribeLoa"
        body: "body"
      };
    }
    // Returns the list of AWS Direct Connect locations in the current AWS region. These are the locations that may be selected when calling CreateConnection or CreateInterconnect.
    rpc Post#DescribeLocations(Post#DescribeLocationsRequest) returns (Locations) {
      option (google.api.http) = {
        post: "//#DescribeLocations"
      };
    }
    // Describes the tags associated with the specified Direct Connect resources.
    rpc Post#DescribeTags(Post#DescribeTagsRequest) returns (DescribeTagsResponse) {
      option (google.api.http) = {
        post: "//#DescribeTags"
        body: "body"
      };
    }
    // <p>Returns a list of virtual private gateways owned by the AWS account.</p> <p>You can create one or more AWS Direct Connect private virtual interfaces linking to a virtual private gateway. A virtual private gateway can be managed via Amazon Virtual Private Cloud (VPC) console or the <a href="http://docs.aws.amazon.com/AWSEC2/latest/APIReference/ApiReference-query-CreateVpnGateway.html">EC2 CreateVpnGateway</a> action.</p>
    rpc Post#DescribeVirtualGateways(Post#DescribeVirtualGatewaysRequest) returns (VirtualGateways) {
      option (google.api.http) = {
        post: "//#DescribeVirtualGateways"
      };
    }
    // <p>Displays all virtual interfaces for an AWS account. Virtual interfaces deleted fewer than 15 minutes before you make the request are also returned. If you specify a connection ID, only the virtual interfaces associated with the connection are returned. If you specify a virtual interface ID, then only a single virtual interface is returned.</p> <p>A virtual interface (VLAN) transmits the traffic between the AWS Direct Connect location and the customer.</p>
    rpc Post#DescribeVirtualInterfaces(Post#DescribeVirtualInterfacesRequest) returns (VirtualInterfaces) {
      option (google.api.http) = {
        post: "//#DescribeVirtualInterfaces"
        body: "body"
      };
    }
    // <p>Disassociates a connection from a link aggregation group (LAG). The connection is interrupted and re-established as a standalone connection (the connection is not deleted; to delete the connection, use the <a>DeleteConnection</a> request). If the LAG has associated virtual interfaces or hosted connections, they remain associated with the LAG. A disassociated connection owned by an AWS Direct Connect partner is automatically converted to an interconnect.</p> <p>If disassociating the connection will cause the LAG to fall below its setting for minimum number of operational connections, the request fails, except when it's the last member of the LAG. If all connections are disassociated, the LAG continues to exist as an empty LAG with no physical connections. </p>
    rpc Post#DisassociateConnectionFromLag(Post#DisassociateConnectionFromLagRequest) returns (Connection) {
      option (google.api.http) = {
        post: "//#DisassociateConnectionFromLag"
        body: "body"
      };
    }
    // <p>Adds the specified tags to the specified Direct Connect resource. Each Direct Connect resource can have a maximum of 50 tags.</p> <p>Each tag consists of a key and an optional value. If a tag with the same key is already associated with the Direct Connect resource, this action updates its value.</p>
    rpc Post#TagResource(Post#TagResourceRequest) returns (TagResourceResponse) {
      option (google.api.http) = {
        post: "//#TagResource"
        body: "body"
      };
    }
    // Removes one or more tags from the specified Direct Connect resource.
    rpc Post#UntagResource(Post#UntagResourceRequest) returns (UntagResourceResponse) {
      option (google.api.http) = {
        post: "//#UntagResource"
        body: "body"
      };
    }
    // <p>Updates the attributes of a link aggregation group (LAG). </p> <p>You can update the following attributes: </p> <ul> <li> <p>The name of the LAG.</p> </li> <li> <p>The value for the minimum number of connections that must be operational for the LAG itself to be operational. </p> </li> </ul> <p>When you create a LAG, the default value for the minimum number of operational connections is zero (0). If you update this value, and the number of operational connections falls below the specified value, the LAG will automatically go down to avoid overutilization of the remaining connections. Adjusting this value should be done with care as it could force the LAG down if the value is set higher than the current number of operational connections.</p>
    rpc Post#UpdateLag(Post#UpdateLagRequest) returns (Lag) {
      option (google.api.http) = {
        post: "//#UpdateLag"
        body: "body"
      };
    }
}

syntax = "proto3";

import "google/api/annotations.proto";

package amazonappstream;

message PostRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AssociateFleetRequest body = 10;
}

message Post#CreateDirectoryConfigRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateDirectoryConfigRequest body = 10;
}

message Post#CreateFleetRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateFleetRequest body = 10;
}

message Post#CreateImageBuilderRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateImageBuilderRequest body = 10;
}

message Post#CreateImageBuilderStreamingURLRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateImageBuilderStreamingURLRequest body = 10;
}

message Post#CreateStackRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateStackRequest body = 10;
}

message Post#CreateStreamingURLRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateStreamingURLRequest body = 10;
}

message Post#DeleteDirectoryConfigRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteDirectoryConfigRequest body = 10;
}

message Post#DeleteFleetRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteFleetRequest body = 10;
}

message Post#DeleteImageRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteImageRequest body = 10;
}

message Post#DeleteImageBuilderRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteImageBuilderRequest body = 10;
}

message Post#DeleteStackRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteStackRequest body = 10;
}

message Post#DescribeDirectoryConfigsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeDirectoryConfigsRequest body = 10;
}

message Post#DescribeFleetsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeFleetsRequest body = 10;
}

message Post#DescribeImageBuildersRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeImageBuildersRequest body = 10;
}

message Post#DescribeImagesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeImagesRequest body = 10;
}

message Post#DescribeSessionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeSessionsRequest body = 10;
}

message Post#DescribeStacksRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeStacksRequest body = 10;
}

message Post#DisassociateFleetRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DisassociateFleetRequest body = 10;
}

message Post#ExpireSessionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ExpireSessionRequest body = 10;
}

message Post#ListAssociatedFleetsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListAssociatedFleetsRequest body = 10;
}

message Post#ListAssociatedStacksRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListAssociatedStacksRequest body = 10;
}

message Post#StartFleetRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StartFleetRequest body = 10;
}

message Post#StartImageBuilderRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StartImageBuilderRequest body = 10;
}

message Post#StopFleetRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StopFleetRequest body = 10;
}

message Post#StopImageBuilderRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StopImageBuilderRequest body = 10;
}

message Post#UpdateDirectoryConfigRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateDirectoryConfigRequest body = 10;
}

message Post#UpdateFleetRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateFleetRequest body = 10;
}

message Post#UpdateStackRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateStackRequest body = 10;
}

message Application {
    // The application name displayed to end users.
    string DisplayName = 1;
    // If there is a problem, the application can be disabled after image creation.
    boolean Enabled = 2;
    // The URL for the application icon. This URL might be time-limited.
    string IconURL = 3;
    // The arguments that are passed to the application at launch.
    string LaunchParameters = 4;
    // The path to the application executable in the instance.
    string LaunchPath = 5;
    // Additional attributes that describe the application.
    array Metadata = 6;
    // The name of the application.
    string Name = 7;
}

repeated Application Applications = 1



message AssociateFleetRequest {
    // The name of the fleet.
    string FleetName = 1;
    // The name of the stack.
    string StackName = 2;
}

message AssociateFleetResult {
}

enum AuthenticationType {
    API = 0;
    SAML = 1;
    USERPOOL = 2;
}

message ComputeCapacity {
    // The desired number of streaming instances.
    integer DesiredInstances = 1;
}

message ComputeCapacityStatus {
    // The number of currently available instances that can be used to stream sessions.
    integer Available = 1;
    // The desired number of streaming instances.
    integer Desired = 2;
    // The number of instances in use for streaming.
    integer InUse = 3;
    // The total number of simultaneous streaming instances that are running.
    integer Running = 4;
}

message ConcurrentModificationException {
    string Message = 1;
}

message CreateDirectoryConfigRequest {
    // The fully qualified name of the directory (for example, corp.example.com).
    string DirectoryName = 1;
    // The distinguished names of the organizational units for computer accounts.
    array OrganizationalUnitDistinguishedNames = 2;
    // The credentials for the service account used by the streaming instance to connect to the directory.
    ServiceAccountCredentials ServiceAccountCredentials = 3;
}

message CreateDirectoryConfigResult {
    // Information about the directory configuration.
    DirectoryConfig DirectoryConfig = 1;
}

message CreateFleetRequest {
    // The desired capacity for the fleet.
    ComputeCapacity ComputeCapacity = 1;
    // The description displayed to end users.
    string Description = 2;
    // The time after disconnection when a session is considered to have ended, in seconds. If a user who was disconnected reconnects within this time interval, the user is connected to their previous session. Specify a value between 60 and 57600.
    integer DisconnectTimeoutInSeconds = 3;
    // The fleet name displayed to end users.
    string DisplayName = 4;
    // The information needed for streaming instances to join a domain.
    DomainJoinInfo DomainJoinInfo = 5;
    // Enables or disables default internet access for the fleet.
    boolean EnableDefaultInternetAccess = 6;
    FleetType FleetType = 7;
    // The name of the image used by the fleet.
    string ImageName = 8;
    // <p>The instance type to use when launching fleet instances. The following instance types are available:</p> <ul> <li> <p>stream.standard.medium</p> </li> <li> <p>stream.standard.large</p> </li> <li> <p>stream.compute.large</p> </li> <li> <p>stream.compute.xlarge</p> </li> <li> <p>stream.compute.2xlarge</p> </li> <li> <p>stream.compute.4xlarge</p> </li> <li> <p>stream.compute.8xlarge</p> </li> <li> <p>stream.memory.large</p> </li> <li> <p>stream.memory.xlarge</p> </li> <li> <p>stream.memory.2xlarge</p> </li> <li> <p>stream.memory.4xlarge</p> </li> <li> <p>stream.memory.8xlarge</p> </li> <li> <p>stream.graphics-design.large</p> </li> <li> <p>stream.graphics-design.xlarge</p> </li> <li> <p>stream.graphics-design.2xlarge</p> </li> <li> <p>stream.graphics-design.4xlarge</p> </li> <li> <p>stream.graphics-desktop.2xlarge</p> </li> <li> <p>stream.graphics-pro.4xlarge</p> </li> <li> <p>stream.graphics-pro.8xlarge</p> </li> <li> <p>stream.graphics-pro.16xlarge</p> </li> </ul>
    string InstanceType = 9;
    // The maximum time that a streaming session can run, in seconds. Specify a value between 600 and 57600.
    integer MaxUserDurationInSeconds = 10;
    // A unique name for the fleet.
    string Name = 11;
    // The VPC configuration for the fleet.
    VpcConfig VpcConfig = 12;
}

message CreateFleetResult {
    // Information about the fleet.
    Fleet Fleet = 1;
}

message CreateImageBuilderRequest {
    string Description = 1;
    string DisplayName = 2;
    DomainJoinInfo DomainJoinInfo = 3;
    boolean EnableDefaultInternetAccess = 4;
    string ImageName = 5;
    string InstanceType = 6;
    string Name = 7;
    VpcConfig VpcConfig = 8;
}

message CreateImageBuilderResult {
    ImageBuilder ImageBuilder = 1;
}

message CreateImageBuilderStreamingURLRequest {
    string Name = 1;
    integer Validity = 2;
}

message CreateImageBuilderStreamingURLResult {
    string Expires = 1;
    string StreamingURL = 2;
}

message CreateStackRequest {
    // The description displayed to end users.
    string Description = 1;
    // The stack name displayed to end users.
    string DisplayName = 2;
    // The name of the stack.
    string Name = 3;
    // The storage connectors to enable.
    array StorageConnectors = 4;
}

message CreateStackResult {
    // Information about the stack.
    Stack Stack = 1;
}

message CreateStreamingURLRequest {
    // The ID of the application that must be launched after the session starts.
    string ApplicationId = 1;
    // The name of the fleet.
    string FleetName = 2;
    // The session context of the streaming URL.
    string SessionContext = 3;
    // The name of the stack.
    string StackName = 4;
    // The ID of the user.
    string UserId = 5;
    // The time that the streaming URL will be valid, in seconds. Specify a value between 1 and 604800 seconds.
    integer Validity = 6;
}

message CreateStreamingURLResult {
    // The elapsed time, in seconds after the Unix epoch, when this URL expires.
    string Expires = 1;
    // The URL to start the AppStream 2.0 streaming session.
    string StreamingURL = 2;
}

message DeleteDirectoryConfigRequest {
    // The name of the directory configuration.
    string DirectoryName = 1;
}

message DeleteDirectoryConfigResult {
}

message DeleteFleetRequest {
    // The name of the fleet.
    string Name = 1;
}

message DeleteFleetResult {
}

message DeleteImageBuilderRequest {
    string Name = 1;
}

message DeleteImageBuilderResult {
    ImageBuilder ImageBuilder = 1;
}

message DeleteImageRequest {
    string Name = 1;
}

message DeleteImageResult {
    Image Image = 1;
}

message DeleteStackRequest {
    // The name of the stack.
    string Name = 1;
}

message DeleteStackResult {
}

message DescribeDirectoryConfigsRequest {
    // The directory names.
    array DirectoryNames = 1;
    // The maximum size of each page of results.
    integer MaxResults = 2;
    // The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
    string NextToken = 3;
}

message DescribeDirectoryConfigsResult {
    // Information about the directory configurations.
    array DirectoryConfigs = 1;
    // The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
    string NextToken = 2;
}

message DescribeFleetsRequest {
    // The names of the fleets to describe.
    array Names = 1;
    // The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
    string NextToken = 2;
}

message DescribeFleetsResult {
    // Information about the fleets.
    array Fleets = 1;
    // The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
    string NextToken = 2;
}

message DescribeImageBuildersRequest {
    integer MaxResults = 1;
    array Names = 2;
    string NextToken = 3;
}

message DescribeImageBuildersResult {
    array ImageBuilders = 1;
    string NextToken = 2;
}

message DescribeImagesRequest {
    // The names of the images to describe.
    array Names = 1;
}

message DescribeImagesResult {
    // Information about the images.
    array Images = 1;
}

message DescribeSessionsRequest {
    // The authentication method. Specify <code>API</code> for a user authenticated using a streaming URL or <code>SAML</code> for a SAML federated user. The default is to authenticate users using a streaming URL.
    AuthenticationType AuthenticationType = 1;
    // The name of the fleet.
    string FleetName = 2;
    // The size of each page of results. The default value is 20 and the maximum value is 50.
    integer Limit = 3;
    // The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
    string NextToken = 4;
    // The name of the stack.
    string StackName = 5;
    // The user ID.
    string UserId = 6;
}

message DescribeSessionsResult {
    // The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
    string NextToken = 1;
    // Information about the streaming sessions.
    array Sessions = 2;
}

message DescribeStacksRequest {
    // The names of the stacks to describe.
    array Names = 1;
    // The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
    string NextToken = 2;
}

message DescribeStacksResult {
    // The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
    string NextToken = 1;
    // Information about the stacks.
    array Stacks = 2;
}

message DirectoryConfig {
    // The time the directory configuration was created.
    string CreatedTime = 1;
    // The fully qualified name of the directory (for example, corp.example.com).
    string DirectoryName = 2;
    // The distinguished names of the organizational units for computer accounts.
    array OrganizationalUnitDistinguishedNames = 3;
    // The credentials for the service account used by the streaming instance to connect to the directory.
    ServiceAccountCredentials ServiceAccountCredentials = 4;
}

repeated DirectoryConfig DirectoryConfigList = 1



repeated string DirectoryNameList = 1

message DisassociateFleetRequest {
    // The name of the fleet.
    string FleetName = 1;
    // The name of the stack.
    string StackName = 2;
}

message DisassociateFleetResult {
}

message DomainJoinInfo {
    // The fully qualified name of the directory (for example, corp.example.com).
    string DirectoryName = 1;
    // The distinguished name of the organizational unit for computer accounts.
    string OrganizationalUnitDistinguishedName = 2;
}

message ExpireSessionRequest {
    // The ID of the streaming session.
    string SessionId = 1;
}

message ExpireSessionResult {
}

message Fleet {
    // The ARN for the fleet.
    string Arn = 1;
    // The capacity status for the fleet.
    ComputeCapacityStatus ComputeCapacityStatus = 2;
    // The time the fleet was created.
    string CreatedTime = 3;
    // The description displayed to end users.
    string Description = 4;
    // The time after disconnection when a session is considered to have ended, in seconds. If a user who was disconnected reconnects within this time interval, the user is connected to their previous session. Specify a value between 60 and 57600.
    integer DisconnectTimeoutInSeconds = 5;
    // The fleet name displayed to end users.
    string DisplayName = 6;
    // The information needed for streaming instances to join a domain.
    DomainJoinInfo DomainJoinInfo = 7;
    // Indicates whether default internet access is enabled for the fleet.
    boolean EnableDefaultInternetAccess = 8;
    // The fleet errors.
    array FleetErrors = 9;
    FleetType FleetType = 10;
    // The image used by the fleet.
    string ImageName = 11;
    // The instance type to use when launching fleet instances.
    string InstanceType = 12;
    // The maximum time that a streaming session can run, in seconds. Specify a value between 600 and 57600.
    integer MaxUserDurationInSeconds = 13;
    // The name of the fleet.
    string Name = 14;
    // The current state for the fleet.
    FleetState State = 15;
    // The VPC configuration for the fleet.
    VpcConfig VpcConfig = 16;
}

enum FleetAttribute {
    VPC_CONFIGURATION = 0;
    VPC_CONFIGURATION_SECURITY_GROUP_IDS = 1;
    DOMAIN_JOIN_INFO = 2;
}

repeated FleetAttribute FleetAttributes = 1

message FleetError {
    // The error code.
    FleetErrorCode ErrorCode = 1;
    // The error message.
    string ErrorMessage = 2;
}

enum FleetErrorCode {
    IAM_SERVICE_ROLE_MISSING_ENI_DESCRIBE_ACTION = 0;
    IAM_SERVICE_ROLE_MISSING_ENI_CREATE_ACTION = 1;
    IAM_SERVICE_ROLE_MISSING_ENI_DELETE_ACTION = 2;
    NETWORK_INTERFACE_LIMIT_EXCEEDED = 3;
    INTERNAL_SERVICE_ERROR = 4;
    IAM_SERVICE_ROLE_IS_MISSING = 5;
    SUBNET_HAS_INSUFFICIENT_IP_ADDRESSES = 6;
    IAM_SERVICE_ROLE_MISSING_DESCRIBE_SUBNET_ACTION = 7;
    SUBNET_NOT_FOUND = 8;
    IMAGE_NOT_FOUND = 9;
    INVALID_SUBNET_CONFIGURATION = 10;
    SECURITY_GROUPS_NOT_FOUND = 11;
    IGW_NOT_ATTACHED = 12;
    IAM_SERVICE_ROLE_MISSING_DESCRIBE_SECURITY_GROUPS_ACTION = 13;
    DOMAIN_JOIN_ERROR_FILE_NOT_FOUND = 14;
    DOMAIN_JOIN_ERROR_ACCESS_DENIED = 15;
    DOMAIN_JOIN_ERROR_LOGON_FAILURE = 16;
    DOMAIN_JOIN_ERROR_INVALID_PARAMETER = 17;
    DOMAIN_JOIN_ERROR_MORE_DATA = 18;
    DOMAIN_JOIN_ERROR_NO_SUCH_DOMAIN = 19;
    DOMAIN_JOIN_ERROR_NOT_SUPPORTED = 20;
    DOMAIN_JOIN_NERR_INVALID_WORKGROUP_NAME = 21;
    DOMAIN_JOIN_NERR_WORKSTATION_NOT_STARTED = 22;
    DOMAIN_JOIN_ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED = 23;
    DOMAIN_JOIN_NERR_PASSWORD_EXPIRED = 24;
    DOMAIN_JOIN_INTERNAL_SERVICE_ERROR = 25;
}

repeated FleetError FleetErrors = 1

repeated Fleet FleetList = 1

enum FleetState {
    STARTING = 0;
    RUNNING = 1;
    STOPPING = 2;
    STOPPED = 3;
}

enum FleetType {
    ALWAYS_ON = 0;
    ON_DEMAND = 1;
}

message Image {
    // The applications associated with the image.
    array Applications = 1;
    // The ARN of the image.
    string Arn = 2;
    // The ARN of the image from which this image was created.
    string BaseImageArn = 3;
    // The time the image was created.
    string CreatedTime = 4;
    // The description displayed to end users.
    string Description = 5;
    // The image name displayed to end users.
    string DisplayName = 6;
    // Indicates whether an image builder can be launched from this image.
    boolean ImageBuilderSupported = 7;
    // The name of the image.
    string Name = 8;
    // The operating system platform of the image.
    PlatformType Platform = 9;
    // The release date of the public base image. For private images, this date is the release date of the base image from which the image was created.
    string PublicBaseImageReleasedDate = 10;
    // The image starts in the <code>PENDING</code> state. If image creation succeeds, the state is <code>AVAILABLE</code>. If image creation fails, the state is <code>FAILED</code>.
    ImageState State = 11;
    // The reason why the last state change occurred.
    ImageStateChangeReason StateChangeReason = 12;
    // Indicates whether the image is public or private.
    VisibilityType Visibility = 13;
}

message ImageBuilder {
    string Arn = 1;
    string CreatedTime = 2;
    string Description = 3;
    string DisplayName = 4;
    DomainJoinInfo DomainJoinInfo = 5;
    boolean EnableDefaultInternetAccess = 6;
    string ImageArn = 7;
    array ImageBuilderErrors = 8;
    string InstanceType = 9;
    string Name = 10;
    PlatformType Platform = 11;
    ImageBuilderState State = 12;
    ImageBuilderStateChangeReason StateChangeReason = 13;
    VpcConfig VpcConfig = 14;
}

repeated ImageBuilder ImageBuilderList = 1

enum ImageBuilderState {
    PENDING = 0;
    RUNNING = 1;
    STOPPING = 2;
    STOPPED = 3;
    REBOOTING = 4;
    SNAPSHOTTING = 5;
    DELETING = 6;
    FAILED = 7;
}

message ImageBuilderStateChangeReason {
    ImageBuilderStateChangeReasonCode Code = 1;
    string Message = 2;
}

enum ImageBuilderStateChangeReasonCode {
    INTERNAL_ERROR = 0;
    IMAGE_UNAVAILABLE = 1;
}

repeated Image ImageList = 1

enum ImageState {
    PENDING = 0;
    AVAILABLE = 1;
    FAILED = 2;
    DELETING = 3;
}

message ImageStateChangeReason {
    // The state change reason code.
    ImageStateChangeReasonCode Code = 1;
    // The state change reason message.
    string Message = 2;
}

enum ImageStateChangeReasonCode {
    INTERNAL_ERROR = 0;
    IMAGE_BUILDER_NOT_AVAILABLE = 1;
}

message IncompatibleImageException {
    string Message = 1;
}

message InvalidParameterCombinationException {
    string Message = 1;
}

message InvalidRoleException {
    string Message = 1;
}

message LimitExceededException {
    string Message = 1;
}

message ListAssociatedFleetsRequest {
    // The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
    string NextToken = 1;
    // The name of the stack.
    string StackName = 2;
}

message ListAssociatedFleetsResult {
    // The names of the fleets.
    array Names = 1;
    // The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
    string NextToken = 2;
}

message ListAssociatedStacksRequest {
    // The name of the fleet.
    string FleetName = 1;
    // The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
    string NextToken = 2;
}

message ListAssociatedStacksResult {
    // The names of the stacks.
    array Names = 1;
    // The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
    string NextToken = 2;
}

message Metadata {
    string key = 1;
    string value = 2;
}
repeated Metadata Metadata = 1



message OperationNotPermittedException {
    string Message = 1;
}



repeated string OrganizationalUnitDistinguishedNamesList = 1

enum PlatformType {
    WINDOWS = 0;
}

message ResourceAlreadyExistsException {
    string Message = 1;
}

message ResourceError {
    FleetErrorCode ErrorCode = 1;
    string ErrorMessage = 2;
    string ErrorTimestamp = 3;
}

repeated ResourceError ResourceErrors = 1



message ResourceInUseException {
    string Message = 1;
}

message ResourceNotAvailableException {
    string Message = 1;
}

message ResourceNotFoundException {
    string Message = 1;
}

repeated string SecurityGroupIdList = 1

message ServiceAccountCredentials {
    // The user name of the account. This account must have the following privileges: create computer objects, join computers to the domain, and change/reset the password on descendant computer objects for the organizational units specified.
    string AccountName = 1;
    // The password for the account.
    string AccountPassword = 2;
}

message Session {
    // The authentication method. The user is authenticated using a streaming URL (<code>API</code>) or SAML federation (<code>SAML</code>).
    AuthenticationType AuthenticationType = 1;
    // The name of the fleet for the streaming session.
    string FleetName = 2;
    // The ID of the streaming session.
    string Id = 3;
    // The name of the stack for the streaming session.
    string StackName = 4;
    // The current state of the streaming session.
    SessionState State = 5;
    // The identifier of the user for whom the session was created.
    string UserId = 6;
}

repeated Session SessionList = 1

enum SessionState {
    ACTIVE = 0;
    PENDING = 1;
    EXPIRED = 2;
}

message Stack {
    // The ARN of the stack.
    string Arn = 1;
    // The time the stack was created.
    string CreatedTime = 2;
    // The description displayed to end users.
    string Description = 3;
    // The stack name displayed to end users.
    string DisplayName = 4;
    // The name of the stack.
    string Name = 5;
    // The errors for the stack.
    array StackErrors = 6;
    // The storage connectors to enable.
    array StorageConnectors = 7;
}

message StackError {
    // The error code.
    StackErrorCode ErrorCode = 1;
    // The error message.
    string ErrorMessage = 2;
}

enum StackErrorCode {
    STORAGE_CONNECTOR_ERROR = 0;
    INTERNAL_SERVICE_ERROR = 1;
}

repeated StackError StackErrors = 1

repeated Stack StackList = 1

message StartFleetRequest {
    // The name of the fleet.
    string Name = 1;
}

message StartFleetResult {
}

message StartImageBuilderRequest {
    string Name = 1;
}

message StartImageBuilderResult {
    ImageBuilder ImageBuilder = 1;
}

message StopFleetRequest {
    // The name of the fleet.
    string Name = 1;
}

message StopFleetResult {
}

message StopImageBuilderRequest {
    string Name = 1;
}

message StopImageBuilderResult {
    ImageBuilder ImageBuilder = 1;
}

message StorageConnector {
    // The type of storage connector.
    StorageConnectorType ConnectorType = 1;
    // The ARN of the storage connector.
    string ResourceIdentifier = 2;
}

repeated StorageConnector StorageConnectorList = 1

enum StorageConnectorType {
    HOMEFOLDERS = 0;
}





repeated string StringList = 1

repeated string SubnetIdList = 1



message UpdateDirectoryConfigRequest {
    // The name of the directory configuration.
    string DirectoryName = 1;
    // The distinguished names of the organizational units for computer accounts.
    array OrganizationalUnitDistinguishedNames = 2;
    // The credentials for the service account used by the streaming instance to connect to the directory.
    ServiceAccountCredentials ServiceAccountCredentials = 3;
}

message UpdateDirectoryConfigResult {
    // Information about the directory configuration.
    DirectoryConfig DirectoryConfig = 1;
}

message UpdateFleetRequest {
    // The fleet attributes to delete.
    array AttributesToDelete = 1;
    // The desired capacity for the fleet.
    ComputeCapacity ComputeCapacity = 2;
    // Deletes the VPC association for the specified fleet.
    boolean DeleteVpcConfig = 3;
    // The description displayed to end users.
    string Description = 4;
    // The time after disconnection when a session is considered to have ended, in seconds. If a user who was disconnected reconnects within this time interval, the user is connected to their previous session. Specify a value between 60 and 57600.
    integer DisconnectTimeoutInSeconds = 5;
    // The fleet name displayed to end users.
    string DisplayName = 6;
    // The information needed for streaming instances to join a domain.
    DomainJoinInfo DomainJoinInfo = 7;
    // Enables or disables default internet access for the fleet.
    boolean EnableDefaultInternetAccess = 8;
    // The name of the image used by the fleet.
    string ImageName = 9;
    // <p>The instance type to use when launching fleet instances. The following instance types are available:</p> <ul> <li> <p>stream.standard.medium</p> </li> <li> <p>stream.standard.large</p> </li> <li> <p>stream.compute.large</p> </li> <li> <p>stream.compute.xlarge</p> </li> <li> <p>stream.compute.2xlarge</p> </li> <li> <p>stream.compute.4xlarge</p> </li> <li> <p>stream.compute.8xlarge</p> </li> <li> <p>stream.memory.large</p> </li> <li> <p>stream.memory.xlarge</p> </li> <li> <p>stream.memory.2xlarge</p> </li> <li> <p>stream.memory.4xlarge</p> </li> <li> <p>stream.memory.8xlarge</p> </li> <li> <p>stream.graphics-design.large</p> </li> <li> <p>stream.graphics-design.xlarge</p> </li> <li> <p>stream.graphics-design.2xlarge</p> </li> <li> <p>stream.graphics-design.4xlarge</p> </li> <li> <p>stream.graphics-desktop.2xlarge</p> </li> <li> <p>stream.graphics-pro.4xlarge</p> </li> <li> <p>stream.graphics-pro.8xlarge</p> </li> <li> <p>stream.graphics-pro.16xlarge</p> </li> </ul>
    string InstanceType = 10;
    // The maximum time that a streaming session can run, in seconds. Specify a value between 600 and 57600.
    integer MaxUserDurationInSeconds = 11;
    // A unique name for the fleet.
    string Name = 12;
    // The VPC configuration for the fleet.
    VpcConfig VpcConfig = 13;
}

message UpdateFleetResult {
    // Information about the fleet.
    Fleet Fleet = 1;
}

message UpdateStackRequest {
    // Deletes the storage connectors currently enabled for the stack.
    boolean DeleteStorageConnectors = 1;
    // The description displayed to end users.
    string Description = 2;
    // The stack name displayed to end users.
    string DisplayName = 3;
    // The name of the stack.
    string Name = 4;
    // The storage connectors to enable.
    array StorageConnectors = 5;
}

message UpdateStackResult {
    // Information about the stack.
    Stack Stack = 1;
}

enum VisibilityType {
    PUBLIC = 0;
    PRIVATE = 1;
}

message VpcConfig {
    // The security groups for the fleet.
    array SecurityGroupIds = 1;
    // The subnets to which a network interface is established from the fleet instance.
    array SubnetIds = 2;
}

service AmazonAppStreamService {
    // Associates the specified fleet with the specified stack.
    rpc Post(PostRequest) returns (AssociateFleetResult) {
      option (google.api.http) = {
        post: "//"
        body: "body"
      };
    }
    // Creates a directory configuration.
    rpc Post#CreateDirectoryConfig(Post#CreateDirectoryConfigRequest) returns (CreateDirectoryConfigResult) {
      option (google.api.http) = {
        post: "//#CreateDirectoryConfig"
        body: "body"
      };
    }
    // Creates a fleet.
    rpc Post#CreateFleet(Post#CreateFleetRequest) returns (CreateFleetResult) {
      option (google.api.http) = {
        post: "//#CreateFleet"
        body: "body"
      };
    }
    rpc Post#CreateImageBuilder(Post#CreateImageBuilderRequest) returns (CreateImageBuilderResult) {
      option (google.api.http) = {
        post: "//#CreateImageBuilder"
        body: "body"
      };
    }
    rpc Post#CreateImageBuilderStreamingURL(Post#CreateImageBuilderStreamingURLRequest) returns (CreateImageBuilderStreamingURLResult) {
      option (google.api.http) = {
        post: "//#CreateImageBuilderStreamingURL"
        body: "body"
      };
    }
    // Creates a stack.
    rpc Post#CreateStack(Post#CreateStackRequest) returns (CreateStackResult) {
      option (google.api.http) = {
        post: "//#CreateStack"
        body: "body"
      };
    }
    // <p>Creates a URL to start a streaming session for the specified user.</p> <p>By default, the URL is valid only for one minute from the time that it is generated.</p>
    rpc Post#CreateStreamingURL(Post#CreateStreamingURLRequest) returns (CreateStreamingURLResult) {
      option (google.api.http) = {
        post: "//#CreateStreamingURL"
        body: "body"
      };
    }
    // Deletes the specified directory configuration.
    rpc Post#DeleteDirectoryConfig(Post#DeleteDirectoryConfigRequest) returns (DeleteDirectoryConfigResult) {
      option (google.api.http) = {
        post: "//#DeleteDirectoryConfig"
        body: "body"
      };
    }
    // Deletes the specified fleet.
    rpc Post#DeleteFleet(Post#DeleteFleetRequest) returns (DeleteFleetResult) {
      option (google.api.http) = {
        post: "//#DeleteFleet"
        body: "body"
      };
    }
    rpc Post#DeleteImage(Post#DeleteImageRequest) returns (DeleteImageResult) {
      option (google.api.http) = {
        post: "//#DeleteImage"
        body: "body"
      };
    }
    rpc Post#DeleteImageBuilder(Post#DeleteImageBuilderRequest) returns (DeleteImageBuilderResult) {
      option (google.api.http) = {
        post: "//#DeleteImageBuilder"
        body: "body"
      };
    }
    // Deletes the specified stack. After this operation completes, the environment can no longer be activated and any reservations made for the stack are released.
    rpc Post#DeleteStack(Post#DeleteStackRequest) returns (DeleteStackResult) {
      option (google.api.http) = {
        post: "//#DeleteStack"
        body: "body"
      };
    }
    // Describes the specified directory configurations.
    rpc Post#DescribeDirectoryConfigs(Post#DescribeDirectoryConfigsRequest) returns (DescribeDirectoryConfigsResult) {
      option (google.api.http) = {
        post: "//#DescribeDirectoryConfigs"
        body: "body"
      };
    }
    // Describes the specified fleets or all fleets in the account.
    rpc Post#DescribeFleets(Post#DescribeFleetsRequest) returns (DescribeFleetsResult) {
      option (google.api.http) = {
        post: "//#DescribeFleets"
        body: "body"
      };
    }
    rpc Post#DescribeImageBuilders(Post#DescribeImageBuildersRequest) returns (DescribeImageBuildersResult) {
      option (google.api.http) = {
        post: "//#DescribeImageBuilders"
        body: "body"
      };
    }
    // Describes the specified images or all images in the account.
    rpc Post#DescribeImages(Post#DescribeImagesRequest) returns (DescribeImagesResult) {
      option (google.api.http) = {
        post: "//#DescribeImages"
        body: "body"
      };
    }
    // Describes the streaming sessions for the specified stack and fleet. If a user ID is provided, only the streaming sessions for only that user are returned. If an authentication type is not provided, the default is to authenticate users using a streaming URL.
    rpc Post#DescribeSessions(Post#DescribeSessionsRequest) returns (DescribeSessionsResult) {
      option (google.api.http) = {
        post: "//#DescribeSessions"
        body: "body"
      };
    }
    // Describes the specified stacks or all stacks in the account.
    rpc Post#DescribeStacks(Post#DescribeStacksRequest) returns (DescribeStacksResult) {
      option (google.api.http) = {
        post: "//#DescribeStacks"
        body: "body"
      };
    }
    // Disassociates the specified fleet from the specified stack.
    rpc Post#DisassociateFleet(Post#DisassociateFleetRequest) returns (DisassociateFleetResult) {
      option (google.api.http) = {
        post: "//#DisassociateFleet"
        body: "body"
      };
    }
    // Stops the specified streaming session.
    rpc Post#ExpireSession(Post#ExpireSessionRequest) returns (ExpireSessionResult) {
      option (google.api.http) = {
        post: "//#ExpireSession"
        body: "body"
      };
    }
    // Lists the fleets associated with the specified stack.
    rpc Post#ListAssociatedFleets(Post#ListAssociatedFleetsRequest) returns (ListAssociatedFleetsResult) {
      option (google.api.http) = {
        post: "//#ListAssociatedFleets"
        body: "body"
      };
    }
    // Lists the stacks associated with the specified fleet.
    rpc Post#ListAssociatedStacks(Post#ListAssociatedStacksRequest) returns (ListAssociatedStacksResult) {
      option (google.api.http) = {
        post: "//#ListAssociatedStacks"
        body: "body"
      };
    }
    // Starts the specified fleet.
    rpc Post#StartFleet(Post#StartFleetRequest) returns (StartFleetResult) {
      option (google.api.http) = {
        post: "//#StartFleet"
        body: "body"
      };
    }
    rpc Post#StartImageBuilder(Post#StartImageBuilderRequest) returns (StartImageBuilderResult) {
      option (google.api.http) = {
        post: "//#StartImageBuilder"
        body: "body"
      };
    }
    // Stops the specified fleet.
    rpc Post#StopFleet(Post#StopFleetRequest) returns (StopFleetResult) {
      option (google.api.http) = {
        post: "//#StopFleet"
        body: "body"
      };
    }
    rpc Post#StopImageBuilder(Post#StopImageBuilderRequest) returns (StopImageBuilderResult) {
      option (google.api.http) = {
        post: "//#StopImageBuilder"
        body: "body"
      };
    }
    // Updates the specified directory configuration.
    rpc Post#UpdateDirectoryConfig(Post#UpdateDirectoryConfigRequest) returns (UpdateDirectoryConfigResult) {
      option (google.api.http) = {
        post: "//#UpdateDirectoryConfig"
        body: "body"
      };
    }
    // <p>Updates the specified fleet.</p> <p>If the fleet is in the <code>STOPPED</code> state, you can update any attribute except the fleet name. If the fleet is in the <code>RUNNING</code> state, you can update the <code>DisplayName</code> and <code>ComputeCapacity</code> attributes. If the fleet is in the <code>STARTING</code> or <code>STOPPING</code> state, you can't update it.</p>
    rpc Post#UpdateFleet(Post#UpdateFleetRequest) returns (UpdateFleetResult) {
      option (google.api.http) = {
        post: "//#UpdateFleet"
        body: "body"
      };
    }
    // Updates the specified stack.
    rpc Post#UpdateStack(Post#UpdateStackRequest) returns (UpdateStackResult) {
      option (google.api.http) = {
        post: "//#UpdateStack"
        body: "body"
      };
    }
}

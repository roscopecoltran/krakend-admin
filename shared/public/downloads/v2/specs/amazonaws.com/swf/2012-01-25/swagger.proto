syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package amazonsimpleworkflowservice;

message PostRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CountClosedWorkflowExecutionsInput body = 10;
}

message Post#CountOpenWorkflowExecutionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CountOpenWorkflowExecutionsInput body = 10;
}

message Post#CountPendingActivityTasksRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CountPendingActivityTasksInput body = 10;
}

message Post#CountPendingDecisionTasksRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CountPendingDecisionTasksInput body = 10;
}

message Post#DeprecateActivityTypeRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeprecateActivityTypeInput body = 10;
}

message Post#DeprecateDomainRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeprecateDomainInput body = 10;
}

message Post#DeprecateWorkflowTypeRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeprecateWorkflowTypeInput body = 10;
}

message Post#DescribeActivityTypeRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeActivityTypeInput body = 10;
}

message Post#DescribeDomainRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeDomainInput body = 10;
}

message Post#DescribeWorkflowExecutionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeWorkflowExecutionInput body = 10;
}

message Post#DescribeWorkflowTypeRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeWorkflowTypeInput body = 10;
}

message Post#GetWorkflowExecutionHistoryRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetWorkflowExecutionHistoryInput body = 10;
    // Pagination limit
    string maximumPageSize = 11;
    // Pagination token
    string nextPageToken = 12;
}

message Post#ListActivityTypesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListActivityTypesInput body = 10;
    // Pagination limit
    string maximumPageSize = 11;
    // Pagination token
    string nextPageToken = 12;
}

message Post#ListClosedWorkflowExecutionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListClosedWorkflowExecutionsInput body = 10;
    // Pagination limit
    string maximumPageSize = 11;
    // Pagination token
    string nextPageToken = 12;
}

message Post#ListDomainsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListDomainsInput body = 10;
    // Pagination limit
    string maximumPageSize = 11;
    // Pagination token
    string nextPageToken = 12;
}

message Post#ListOpenWorkflowExecutionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListOpenWorkflowExecutionsInput body = 10;
    // Pagination limit
    string maximumPageSize = 11;
    // Pagination token
    string nextPageToken = 12;
}

message Post#ListWorkflowTypesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListWorkflowTypesInput body = 10;
    // Pagination limit
    string maximumPageSize = 11;
    // Pagination token
    string nextPageToken = 12;
}

message Post#PollForActivityTaskRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    PollForActivityTaskInput body = 10;
}

message Post#PollForDecisionTaskRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    PollForDecisionTaskInput body = 10;
    // Pagination limit
    string maximumPageSize = 11;
    // Pagination token
    string nextPageToken = 12;
}

message Post#RecordActivityTaskHeartbeatRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RecordActivityTaskHeartbeatInput body = 10;
}

message Post#RegisterActivityTypeRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RegisterActivityTypeInput body = 10;
}

message Post#RegisterDomainRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RegisterDomainInput body = 10;
}

message Post#RegisterWorkflowTypeRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RegisterWorkflowTypeInput body = 10;
}

message Post#RequestCancelWorkflowExecutionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RequestCancelWorkflowExecutionInput body = 10;
}

message Post#RespondActivityTaskCanceledRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RespondActivityTaskCanceledInput body = 10;
}

message Post#RespondActivityTaskCompletedRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RespondActivityTaskCompletedInput body = 10;
}

message Post#RespondActivityTaskFailedRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RespondActivityTaskFailedInput body = 10;
}

message Post#RespondDecisionTaskCompletedRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RespondDecisionTaskCompletedInput body = 10;
}

message Post#SignalWorkflowExecutionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    SignalWorkflowExecutionInput body = 10;
}

message Post#StartWorkflowExecutionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StartWorkflowExecutionInput body = 10;
}

message Post#TerminateWorkflowExecutionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    TerminateWorkflowExecutionInput body = 10;
}

message ActivityTask {
    // The unique ID of the task.
    string activityId = 1;
    // The type of this activity task.
    ActivityType activityType = 2;
    // The inputs provided when the activity task was scheduled. The form of the input is user defined and should be meaningful to the activity implementation.
    string input = 3;
    // The ID of the <code>ActivityTaskStarted</code> event recorded in the history.
    integer startedEventId = 4;
    // The opaque string used as a handle on the task. This token is used by workers to communicate progress and response information back to the system about the task.
    string taskToken = 5;
    // The workflow execution that started this activity task.
    WorkflowExecution workflowExecution = 6;
}

message ActivityTaskCancelRequestedEventAttributes {
    // The unique ID of the task.
    string activityId = 1;
    // The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>RequestCancelActivityTask</code> decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer decisionTaskCompletedEventId = 2;
}

message ActivityTaskCanceledEventAttributes {
    // Details of the cancellation.
    string details = 1;
    // If set, contains the ID of the last <code>ActivityTaskCancelRequested</code> event recorded for this activity task. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer latestCancelRequestedEventId = 2;
    // The ID of the <code>ActivityTaskScheduled</code> event that was recorded when this activity task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer scheduledEventId = 3;
    // The ID of the <code>ActivityTaskStarted</code> event recorded when this activity task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer startedEventId = 4;
}

message ActivityTaskCompletedEventAttributes {
    // The results of the activity task.
    string result = 1;
    // The ID of the <code>ActivityTaskScheduled</code> event that was recorded when this activity task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer scheduledEventId = 2;
    // The ID of the <code>ActivityTaskStarted</code> event recorded when this activity task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer startedEventId = 3;
}

message ActivityTaskFailedEventAttributes {
    // The details of the failure.
    string details = 1;
    // The reason provided for the failure.
    string reason = 2;
    // The ID of the <code>ActivityTaskScheduled</code> event that was recorded when this activity task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer scheduledEventId = 3;
    // The ID of the <code>ActivityTaskStarted</code> event recorded when this activity task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer startedEventId = 4;
}

message ActivityTaskScheduledEventAttributes {
    // The unique ID of the activity task.
    string activityId = 1;
    // The type of the activity task.
    ActivityType activityType = 2;
    // Data attached to the event that can be used by the decider in subsequent workflow tasks. This data isn't sent to the activity.
    string control = 3;
    // The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision that resulted in the scheduling of this activity task. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer decisionTaskCompletedEventId = 4;
    // The maximum time before which the worker processing this task must report progress by calling <a>RecordActivityTaskHeartbeat</a>. If the timeout is exceeded, the activity task is automatically timed out. If the worker subsequently attempts to record a heartbeat or return a result, it is ignored.
    string heartbeatTimeout = 5;
    // The input provided to the activity task.
    string input = 6;
    // The maximum amount of time for this activity task.
    string scheduleToCloseTimeout = 7;
    // The maximum amount of time the activity task can wait to be assigned to a worker.
    string scheduleToStartTimeout = 8;
    // The maximum amount of time a worker may take to process the activity task.
    string startToCloseTimeout = 9;
    // The task list in which the activity task has been scheduled.
    TaskList taskList = 10;
    // <p> The priority to assign to the scheduled activity task. If set, this overrides any default priority value that was assigned when the activity type was registered.</p> <p>Valid values are integers that range from Java's <code>Integer.MIN_VALUE</code> (-2147483648) to <code>Integer.MAX_VALUE</code> (2147483647). Higher numbers indicate higher priority.</p> <p>For more information about setting task priority, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html">Setting Task Priority</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    string taskPriority = 11;
}

message ActivityTaskStartedEventAttributes {
    // Identity of the worker that was assigned this task. This aids diagnostics when problems arise. The form of this identity is user defined.
    string identity = 1;
    // The ID of the <code>ActivityTaskScheduled</code> event that was recorded when this activity task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer scheduledEventId = 2;
}

message ActivityTaskStatus {
    // Set to <code>true</code> if cancellation of the task is requested.
    boolean cancelRequested = 1;
}

message ActivityTaskTimedOutEventAttributes {
    // Contains the content of the <code>details</code> parameter for the last call made by the activity to <code>RecordActivityTaskHeartbeat</code>.
    string details = 1;
    // The ID of the <code>ActivityTaskScheduled</code> event that was recorded when this activity task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer scheduledEventId = 2;
    // The ID of the <code>ActivityTaskStarted</code> event recorded when this activity task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer startedEventId = 3;
    // The type of the timeout that caused this event.
    ActivityTaskTimeoutType timeoutType = 4;
}

enum ActivityTaskTimeoutType {
    START_TO_CLOSE = 0;
    SCHEDULE_TO_START = 1;
    SCHEDULE_TO_CLOSE = 2;
    HEARTBEAT = 3;
}

message ActivityType {
    // <p>The name of this activity.</p> <note> <p>The combination of activity type name and version must be unique within a domain.</p> </note>
    string name = 1;
    // <p>The version of this activity.</p> <note> <p>The combination of activity type name and version must be unique with in a domain.</p> </note>
    string version = 2;
}

message ActivityTypeConfiguration {
    // <p> The default maximum time, in seconds, before which a worker processing a task must report progress by calling <a>RecordActivityTaskHeartbeat</a>.</p> <p>You can specify this value only when <i>registering</i> an activity type. The registered default value can be overridden when you schedule a task through the <code>ScheduleActivityTask</code> <a>Decision</a>. If the activity worker subsequently attempts to record a heartbeat or returns a result, the activity worker receives an <code>UnknownResource</code> fault. In this case, Amazon SWF no longer considers the activity task to be valid; the activity worker should clean up the activity task.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    string defaultTaskHeartbeatTimeout = 1;
    //  The default task list specified for this activity type at registration. This default is used if a task list isn't provided when a task is scheduled through the <code>ScheduleActivityTask</code> <a>Decision</a>. You can override the default registered task list when scheduling a task through the <code>ScheduleActivityTask</code> <a>Decision</a>.
    TaskList defaultTaskList = 2;
    // <p> The default task priority for tasks of this activity type, specified at registration. If not set, then <code>0</code> is used as the default priority. This default can be overridden when scheduling an activity task.</p> <p>Valid values are integers that range from Java's <code>Integer.MIN_VALUE</code> (-2147483648) to <code>Integer.MAX_VALUE</code> (2147483647). Higher numbers indicate higher priority.</p> <p>For more information about setting task priority, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html">Setting Task Priority</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    string defaultTaskPriority = 3;
    // <p> The default maximum duration, specified when registering the activity type, for tasks of this activity type. You can override this default when scheduling a task through the <code>ScheduleActivityTask</code> <a>Decision</a>.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    string defaultTaskScheduleToCloseTimeout = 4;
    // <p> The default maximum duration, specified when registering the activity type, that a task of an activity type can wait before being assigned to a worker. You can override this default when scheduling a task through the <code>ScheduleActivityTask</code> <a>Decision</a>.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    string defaultTaskScheduleToStartTimeout = 5;
    // <p> The default maximum duration for tasks of an activity type specified when registering the activity type. You can override this default when scheduling a task through the <code>ScheduleActivityTask</code> <a>Decision</a>.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    string defaultTaskStartToCloseTimeout = 6;
}

message ActivityTypeDetail {
    // The configuration settings registered with the activity type.
    ActivityTypeConfiguration configuration = 1;
    // <p>General information about the activity type.</p> <p>The status of activity type (returned in the ActivityTypeInfo structure) can be one of the following.</p> <ul> <li> <p> <code>REGISTERED</code> – The type is registered and available. Workers supporting this type should be running. </p> </li> <li> <p> <code>DEPRECATED</code> – The type was deprecated using <a>DeprecateActivityType</a>, but is still in use. You should keep workers supporting this type running. You cannot create new tasks of this type. </p> </li> </ul>
    ActivityTypeInfo typeInfo = 2;
}

message ActivityTypeInfo {
    // The <a>ActivityType</a> type structure representing the activity type.
    ActivityType activityType = 1;
    // The date and time this activity type was created through <a>RegisterActivityType</a>.
    string creationDate = 2;
    // If DEPRECATED, the date and time <a>DeprecateActivityType</a> was called.
    string deprecationDate = 3;
    // The description of the activity type provided in <a>RegisterActivityType</a>.
    string description = 4;
    // The current status of the activity type.
    RegistrationStatus status = 5;
}

repeated ActivityTypeInfo ActivityTypeInfoList = 1

message ActivityTypeInfos {
    // <p>If a <code>NextPageToken</code> was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>nextPageToken</code>. Keep all other arguments unchanged.</p> <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call.</p>
    string nextPageToken = 1;
    // List of activity type information.
    array typeInfos = 2;
}

message CancelTimerDecisionAttributes {
    //  The unique ID of the timer to cancel.
    string timerId = 1;
}

enum CancelTimerFailedCause {
    TIMER_ID_UNKNOWN = 0;
    OPERATION_NOT_PERMITTED = 1;
}

message CancelTimerFailedEventAttributes {
    // <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p> <note> <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p> </note>
    CancelTimerFailedCause cause = 1;
    // The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>CancelTimer</code> decision to cancel this timer. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer decisionTaskCompletedEventId = 2;
    // The timerId provided in the <code>CancelTimer</code> decision that failed.
    string timerId = 3;
}

message CancelWorkflowExecutionDecisionAttributes {
    //  Details of the cancellation.
    string details = 1;
}

enum CancelWorkflowExecutionFailedCause {
    UNHANDLED_DECISION = 0;
    OPERATION_NOT_PERMITTED = 1;
}

message CancelWorkflowExecutionFailedEventAttributes {
    // <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p> <note> <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p> </note>
    CancelWorkflowExecutionFailedCause cause = 1;
    // The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>CancelWorkflowExecution</code> decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer decisionTaskCompletedEventId = 2;
}

enum ChildPolicy {
    TERMINATE = 0;
    REQUEST_CANCEL = 1;
    ABANDON = 2;
}

message ChildWorkflowExecutionCanceledEventAttributes {
    // Details of the cancellation (if provided).
    string details = 1;
    // The ID of the <code>StartChildWorkflowExecutionInitiated</code> event corresponding to the <code>StartChildWorkflowExecution</code> <a>Decision</a> to start this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer initiatedEventId = 2;
    // The ID of the <code>ChildWorkflowExecutionStarted</code> event recorded when this child workflow execution was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer startedEventId = 3;
    // The child workflow execution that was canceled.
    WorkflowExecution workflowExecution = 4;
    // The type of the child workflow execution.
    WorkflowType workflowType = 5;
}

message ChildWorkflowExecutionCompletedEventAttributes {
    // The ID of the <code>StartChildWorkflowExecutionInitiated</code> event corresponding to the <code>StartChildWorkflowExecution</code> <a>Decision</a> to start this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer initiatedEventId = 1;
    // The result of the child workflow execution.
    string result = 2;
    // The ID of the <code>ChildWorkflowExecutionStarted</code> event recorded when this child workflow execution was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer startedEventId = 3;
    // The child workflow execution that was completed.
    WorkflowExecution workflowExecution = 4;
    // The type of the child workflow execution.
    WorkflowType workflowType = 5;
}

message ChildWorkflowExecutionFailedEventAttributes {
    // The details of the failure (if provided).
    string details = 1;
    // The ID of the <code>StartChildWorkflowExecutionInitiated</code> event corresponding to the <code>StartChildWorkflowExecution</code> <a>Decision</a> to start this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer initiatedEventId = 2;
    // The reason for the failure (if provided).
    string reason = 3;
    // The ID of the <code>ChildWorkflowExecutionStarted</code> event recorded when this child workflow execution was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer startedEventId = 4;
    // The child workflow execution that failed.
    WorkflowExecution workflowExecution = 5;
    // The type of the child workflow execution.
    WorkflowType workflowType = 6;
}

message ChildWorkflowExecutionStartedEventAttributes {
    // The ID of the <code>StartChildWorkflowExecutionInitiated</code> event corresponding to the <code>StartChildWorkflowExecution</code> <a>Decision</a> to start this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer initiatedEventId = 1;
    // The child workflow execution that was started.
    WorkflowExecution workflowExecution = 2;
    // The type of the child workflow execution.
    WorkflowType workflowType = 3;
}

message ChildWorkflowExecutionTerminatedEventAttributes {
    // The ID of the <code>StartChildWorkflowExecutionInitiated</code> event corresponding to the <code>StartChildWorkflowExecution</code> <a>Decision</a> to start this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer initiatedEventId = 1;
    // The ID of the <code>ChildWorkflowExecutionStarted</code> event recorded when this child workflow execution was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer startedEventId = 2;
    // The child workflow execution that was terminated.
    WorkflowExecution workflowExecution = 3;
    // The type of the child workflow execution.
    WorkflowType workflowType = 4;
}

message ChildWorkflowExecutionTimedOutEventAttributes {
    // The ID of the <code>StartChildWorkflowExecutionInitiated</code> event corresponding to the <code>StartChildWorkflowExecution</code> <a>Decision</a> to start this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer initiatedEventId = 1;
    // The ID of the <code>ChildWorkflowExecutionStarted</code> event recorded when this child workflow execution was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer startedEventId = 2;
    // The type of the timeout that caused the child workflow execution to time out.
    WorkflowExecutionTimeoutType timeoutType = 3;
    // The child workflow execution that timed out.
    WorkflowExecution workflowExecution = 4;
    // The type of the child workflow execution.
    WorkflowType workflowType = 5;
}

enum CloseStatu {
    COMPLETED = 0;
    FAILED = 1;
    CANCELED = 2;
    TERMINATED = 3;
    CONTINUED_AS_NEW = 4;
    TIMED_OUT = 5;
}

message CloseStatusFilter {
    //  The close status that must match the close status of an execution for it to meet the criteria of this filter.
    CloseStatus status = 1;
}

message CompleteWorkflowExecutionDecisionAttributes {
    // The result of the workflow execution. The form of the result is implementation defined.
    string result = 1;
}

enum CompleteWorkflowExecutionFailedCause {
    UNHANDLED_DECISION = 0;
    OPERATION_NOT_PERMITTED = 1;
}

message CompleteWorkflowExecutionFailedEventAttributes {
    // <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p> <note> <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p> </note>
    CompleteWorkflowExecutionFailedCause cause = 1;
    // The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>CompleteWorkflowExecution</code> decision to complete this execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer decisionTaskCompletedEventId = 2;
}

message ContinueAsNewWorkflowExecutionDecisionAttributes {
    // <p>If set, specifies the policy to use for the child workflow executions of the new execution if it is terminated by calling the <a>TerminateWorkflowExecution</a> action explicitly or due to an expired timeout. This policy overrides the default child policy specified when registering the workflow type using <a>RegisterWorkflowType</a>.</p> <p>The supported child policies are:</p> <ul> <li> <p> <code>TERMINATE</code> – The child executions are terminated.</p> </li> <li> <p> <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.</p> </li> <li> <p> <code>ABANDON</code> – No action is taken. The child executions continue to run.</p> </li> </ul> <note> <p>A child policy for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default child policy was specified at registration time then a fault is returned.</p> </note>
    ChildPolicy childPolicy = 1;
    // <p>If set, specifies the total duration for this workflow execution. This overrides the <code>defaultExecutionStartToCloseTimeout</code> specified when registering the workflow type.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p> <note> <p>An execution start-to-close timeout for this workflow execution must be specified either as a default for the workflow type or through this field. If neither this field is set nor a default execution start-to-close timeout was specified at registration time then a fault is returned.</p> </note>
    string executionStartToCloseTimeout = 2;
    // The input provided to the new workflow execution.
    string input = 3;
    // The IAM role to attach to the new (continued) execution.
    string lambdaRole = 4;
    // The list of tags to associate with the new workflow execution. A maximum of 5 tags can be specified. You can list workflow executions with a specific tag by calling <a>ListOpenWorkflowExecutions</a> or <a>ListClosedWorkflowExecutions</a> and specifying a <a>TagFilter</a>.
    array tagList = 5;
    // The task list to use for the decisions of the new (continued) workflow execution.
    TaskList taskList = 6;
    // <p> The task priority that, if set, specifies the priority for the decision tasks for this workflow execution. This overrides the defaultTaskPriority specified when registering the workflow type. Valid values are integers that range from Java's <code>Integer.MIN_VALUE</code> (-2147483648) to <code>Integer.MAX_VALUE</code> (2147483647). Higher numbers indicate higher priority.</p> <p>For more information about setting task priority, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html">Setting Task Priority</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    string taskPriority = 7;
    // <p>Specifies the maximum duration of decision tasks for the new workflow execution. This parameter overrides the <code>defaultTaskStartToCloseTimout</code> specified when registering the workflow type using <a>RegisterWorkflowType</a>.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p> <note> <p>A task start-to-close timeout for the new workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default task start-to-close timeout was specified at registration time then a fault is returned.</p> </note>
    string taskStartToCloseTimeout = 8;
    // The version of the workflow to start.
    string workflowTypeVersion = 9;
}

enum ContinueAsNewWorkflowExecutionFailedCause {
    UNHANDLED_DECISION = 0;
    WORKFLOW_TYPE_DEPRECATED = 1;
    WORKFLOW_TYPE_DOES_NOT_EXIST = 2;
    DEFAULT_EXECUTION_START_TO_CLOSE_TIMEOUT_UNDEFINED = 3;
    DEFAULT_TASK_START_TO_CLOSE_TIMEOUT_UNDEFINED = 4;
    DEFAULT_TASK_LIST_UNDEFINED = 5;
    DEFAULT_CHILD_POLICY_UNDEFINED = 6;
    CONTINUE_AS_NEW_WORKFLOW_EXECUTION_RATE_EXCEEDED = 7;
    OPERATION_NOT_PERMITTED = 8;
}

message ContinueAsNewWorkflowExecutionFailedEventAttributes {
    // <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p> <note> <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p> </note>
    ContinueAsNewWorkflowExecutionFailedCause cause = 1;
    // The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>ContinueAsNewWorkflowExecution</code> decision that started this execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer decisionTaskCompletedEventId = 2;
}

message CountClosedWorkflowExecutionsInput {
    // <p>If specified, only workflow executions that match this close status are counted. This filter has an affect only if <code>executionStatus</code> is specified as <code>CLOSED</code>.</p> <note> <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p> </note>
    CloseStatusFilter closeStatusFilter = 1;
    // <p>If specified, only workflow executions that meet the close time criteria of the filter are counted.</p> <note> <p> <code>startTimeFilter</code> and <code>closeTimeFilter</code> are mutually exclusive. You must specify one of these in a request but not both.</p> </note>
    ExecutionTimeFilter closeTimeFilter = 2;
    // The name of the domain containing the workflow executions to count.
    string domain = 3;
    // <p>If specified, only workflow executions matching the <code>WorkflowId</code> in the filter are counted.</p> <note> <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p> </note>
    WorkflowExecutionFilter executionFilter = 4;
    // <p>If specified, only workflow executions that meet the start time criteria of the filter are counted.</p> <note> <p> <code>startTimeFilter</code> and <code>closeTimeFilter</code> are mutually exclusive. You must specify one of these in a request but not both.</p> </note>
    ExecutionTimeFilter startTimeFilter = 5;
    // <p>If specified, only executions that have a tag that matches the filter are counted.</p> <note> <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p> </note>
    TagFilter tagFilter = 6;
    // <p>If specified, indicates the type of the workflow executions to be counted.</p> <note> <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p> </note>
    WorkflowTypeFilter typeFilter = 7;
}

message CountOpenWorkflowExecutionsInput {
    // The name of the domain containing the workflow executions to count.
    string domain = 1;
    // <p>If specified, only workflow executions matching the <code>WorkflowId</code> in the filter are counted.</p> <note> <p> <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p> </note>
    WorkflowExecutionFilter executionFilter = 2;
    // Specifies the start time criteria that workflow executions must meet in order to be counted.
    ExecutionTimeFilter startTimeFilter = 3;
    // <p>If specified, only executions that have a tag that matches the filter are counted.</p> <note> <p> <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p> </note>
    TagFilter tagFilter = 4;
    // <p>Specifies the type of the workflow executions to be counted.</p> <note> <p> <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p> </note>
    WorkflowTypeFilter typeFilter = 5;
}

message CountPendingActivityTasksInput {
    // The name of the domain that contains the task list.
    string domain = 1;
    // The name of the task list.
    TaskList taskList = 2;
}

message CountPendingDecisionTasksInput {
    // The name of the domain that contains the task list.
    string domain = 1;
    // The name of the task list.
    TaskList taskList = 2;
}

message Decision {
    // Provides the details of the <code>CancelTimer</code> decision. It isn't set for other decision types.
    CancelTimerDecisionAttributes cancelTimerDecisionAttributes = 1;
    // Provides the details of the <code>CancelWorkflowExecution</code> decision. It isn't set for other decision types.
    CancelWorkflowExecutionDecisionAttributes cancelWorkflowExecutionDecisionAttributes = 2;
    // Provides the details of the <code>CompleteWorkflowExecution</code> decision. It isn't set for other decision types.
    CompleteWorkflowExecutionDecisionAttributes completeWorkflowExecutionDecisionAttributes = 3;
    // Provides the details of the <code>ContinueAsNewWorkflowExecution</code> decision. It isn't set for other decision types.
    ContinueAsNewWorkflowExecutionDecisionAttributes continueAsNewWorkflowExecutionDecisionAttributes = 4;
    // Specifies the type of the decision.
    DecisionType decisionType = 5;
    // Provides the details of the <code>FailWorkflowExecution</code> decision. It isn't set for other decision types.
    FailWorkflowExecutionDecisionAttributes failWorkflowExecutionDecisionAttributes = 6;
    // Provides the details of the <code>RecordMarker</code> decision. It isn't set for other decision types.
    RecordMarkerDecisionAttributes recordMarkerDecisionAttributes = 7;
    // Provides the details of the <code>RequestCancelActivityTask</code> decision. It isn't set for other decision types.
    RequestCancelActivityTaskDecisionAttributes requestCancelActivityTaskDecisionAttributes = 8;
    // Provides the details of the <code>RequestCancelExternalWorkflowExecution</code> decision. It isn't set for other decision types.
    RequestCancelExternalWorkflowExecutionDecisionAttributes requestCancelExternalWorkflowExecutionDecisionAttributes = 9;
    // Provides the details of the <code>ScheduleActivityTask</code> decision. It isn't set for other decision types.
    ScheduleActivityTaskDecisionAttributes scheduleActivityTaskDecisionAttributes = 10;
    // Provides the details of the <code>ScheduleLambdaFunction</code> decision. It isn't set for other decision types.
    ScheduleLambdaFunctionDecisionAttributes scheduleLambdaFunctionDecisionAttributes = 11;
    // Provides the details of the <code>SignalExternalWorkflowExecution</code> decision. It isn't set for other decision types.
    SignalExternalWorkflowExecutionDecisionAttributes signalExternalWorkflowExecutionDecisionAttributes = 12;
    // Provides the details of the <code>StartChildWorkflowExecution</code> decision. It isn't set for other decision types.
    StartChildWorkflowExecutionDecisionAttributes startChildWorkflowExecutionDecisionAttributes = 13;
    // Provides the details of the <code>StartTimer</code> decision. It isn't set for other decision types.
    StartTimerDecisionAttributes startTimerDecisionAttributes = 14;
}

repeated Decision DecisionList = 1

message DecisionTask {
    // A paginated list of history events of the workflow execution. The decider uses this during the processing of the decision task.
    array events = 1;
    // <p>If a <code>NextPageToken</code> was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>nextPageToken</code>. Keep all other arguments unchanged.</p> <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call.</p>
    string nextPageToken = 2;
    // The ID of the DecisionTaskStarted event of the previous decision task of this workflow execution that was processed by the decider. This can be used to determine the events in the history new since the last decision task received by the decider.
    integer previousStartedEventId = 3;
    // The ID of the <code>DecisionTaskStarted</code> event recorded in the history.
    integer startedEventId = 4;
    // The opaque string used as a handle on the task. This token is used by workers to communicate progress and response information back to the system about the task.
    string taskToken = 5;
    // The workflow execution for which this decision task was created.
    WorkflowExecution workflowExecution = 6;
    // The type of the workflow execution for which this decision task was created.
    WorkflowType workflowType = 7;
}

message DecisionTaskCompletedEventAttributes {
    // User defined context for the workflow execution.
    string executionContext = 1;
    // The ID of the <code>DecisionTaskScheduled</code> event that was recorded when this decision task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer scheduledEventId = 2;
    // The ID of the <code>DecisionTaskStarted</code> event recorded when this decision task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer startedEventId = 3;
}

message DecisionTaskScheduledEventAttributes {
    // <p>The maximum duration for this decision task. The task is considered timed out if it doesn't completed within this duration.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    string startToCloseTimeout = 1;
    // The name of the task list in which the decision task was scheduled.
    TaskList taskList = 2;
    // <p> A task priority that, if set, specifies the priority for this decision task. Valid values are integers that range from Java's <code>Integer.MIN_VALUE</code> (-2147483648) to <code>Integer.MAX_VALUE</code> (2147483647). Higher numbers indicate higher priority.</p> <p>For more information about setting task priority, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html">Setting Task Priority</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    string taskPriority = 3;
}

message DecisionTaskStartedEventAttributes {
    // Identity of the decider making the request. This enables diagnostic tracing when problems arise. The form of this identity is user defined.
    string identity = 1;
    // The ID of the <code>DecisionTaskScheduled</code> event that was recorded when this decision task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer scheduledEventId = 2;
}

message DecisionTaskTimedOutEventAttributes {
    // The ID of the <code>DecisionTaskScheduled</code> event that was recorded when this decision task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer scheduledEventId = 1;
    // The ID of the <code>DecisionTaskStarted</code> event recorded when this decision task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer startedEventId = 2;
    // The type of timeout that expired before the decision task could be completed.
    DecisionTaskTimeoutType timeoutType = 3;
}

enum DecisionTaskTimeoutType {
    START_TO_CLOSE = 0;
}

enum DecisionType {
    SCHEDULEACTIVITYTASK = 0;
    REQUESTCANCELACTIVITYTASK = 1;
    COMPLETEWORKFLOWEXECUTION = 2;
    FAILWORKFLOWEXECUTION = 3;
    CANCELWORKFLOWEXECUTION = 4;
    CONTINUEASNEWWORKFLOWEXECUTION = 5;
    RECORDMARKER = 6;
    STARTTIMER = 7;
    CANCELTIMER = 8;
    SIGNALEXTERNALWORKFLOWEXECUTION = 9;
    REQUESTCANCELEXTERNALWORKFLOWEXECUTION = 10;
    STARTCHILDWORKFLOWEXECUTION = 11;
    SCHEDULELAMBDAFUNCTION = 12;
}

message DefaultUndefinedFault {
    string message = 1;
}

message DeprecateActivityTypeInput {
    // The activity type to deprecate.
    ActivityType activityType = 1;
    // The name of the domain in which the activity type is registered.
    string domain = 2;
}

message DeprecateDomainInput {
    // The name of the domain to deprecate.
    string name = 1;
}

message DeprecateWorkflowTypeInput {
    // The name of the domain in which the workflow type is registered.
    string domain = 1;
    // The workflow type to deprecate.
    WorkflowType workflowType = 2;
}

message DescribeActivityTypeInput {
    // The activity type to get information about. Activity types are identified by the <code>name</code> and <code>version</code> that were supplied when the activity was registered.
    ActivityType activityType = 1;
    // The name of the domain in which the activity type is registered.
    string domain = 2;
}

message DescribeDomainInput {
    // The name of the domain to describe.
    string name = 1;
}

message DescribeWorkflowExecutionInput {
    // The name of the domain containing the workflow execution.
    string domain = 1;
    // The workflow execution to describe.
    WorkflowExecution execution = 2;
}

message DescribeWorkflowTypeInput {
    // The name of the domain in which this workflow type is registered.
    string domain = 1;
    // The workflow type to describe.
    WorkflowType workflowType = 2;
}

message DomainAlreadyExistsFault {
    // A description that may help with diagnosing the cause of the fault.
    string message = 1;
}

message DomainConfiguration {
    // The retention period for workflow executions in this domain.
    string workflowExecutionRetentionPeriodInDays = 1;
}

message DomainDeprecatedFault {
    // A description that may help with diagnosing the cause of the fault.
    string message = 1;
}

message DomainDetail {
    // The domain configuration. Currently, this includes only the domain's retention period.
    DomainConfiguration configuration = 1;
    // The basic information about a domain, such as its name, status, and description.
    DomainInfo domainInfo = 2;
}

message DomainInfo {
    // The description of the domain provided through <a>RegisterDomain</a>.
    string description = 1;
    // The name of the domain. This name is unique within the account.
    string name = 2;
    // <p>The status of the domain:</p> <ul> <li> <p> <code>REGISTERED</code> – The domain is properly registered and available. You can use this domain for registering types and creating new workflow executions. </p> </li> <li> <p> <code>DEPRECATED</code> – The domain was deprecated using <a>DeprecateDomain</a>, but is still in use. You should not create new workflow executions in this domain. </p> </li> </ul>
    RegistrationStatus status = 3;
}

repeated DomainInfo DomainInfoList = 1

message DomainInfos {
    // A list of DomainInfo structures.
    array domainInfos = 1;
    // <p>If a <code>NextPageToken</code> was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>nextPageToken</code>. Keep all other arguments unchanged.</p> <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call.</p>
    string nextPageToken = 2;
}

enum EventType {
    WORKFLOWEXECUTIONSTARTED = 0;
    WORKFLOWEXECUTIONCANCELREQUESTED = 1;
    WORKFLOWEXECUTIONCOMPLETED = 2;
    COMPLETEWORKFLOWEXECUTIONFAILED = 3;
    WORKFLOWEXECUTIONFAILED = 4;
    FAILWORKFLOWEXECUTIONFAILED = 5;
    WORKFLOWEXECUTIONTIMEDOUT = 6;
    WORKFLOWEXECUTIONCANCELED = 7;
    CANCELWORKFLOWEXECUTIONFAILED = 8;
    WORKFLOWEXECUTIONCONTINUEDASNEW = 9;
    CONTINUEASNEWWORKFLOWEXECUTIONFAILED = 10;
    WORKFLOWEXECUTIONTERMINATED = 11;
    DECISIONTASKSCHEDULED = 12;
    DECISIONTASKSTARTED = 13;
    DECISIONTASKCOMPLETED = 14;
    DECISIONTASKTIMEDOUT = 15;
    ACTIVITYTASKSCHEDULED = 16;
    SCHEDULEACTIVITYTASKFAILED = 17;
    ACTIVITYTASKSTARTED = 18;
    ACTIVITYTASKCOMPLETED = 19;
    ACTIVITYTASKFAILED = 20;
    ACTIVITYTASKTIMEDOUT = 21;
    ACTIVITYTASKCANCELED = 22;
    ACTIVITYTASKCANCELREQUESTED = 23;
    REQUESTCANCELACTIVITYTASKFAILED = 24;
    WORKFLOWEXECUTIONSIGNALED = 25;
    MARKERRECORDED = 26;
    RECORDMARKERFAILED = 27;
    TIMERSTARTED = 28;
    STARTTIMERFAILED = 29;
    TIMERFIRED = 30;
    TIMERCANCELED = 31;
    CANCELTIMERFAILED = 32;
    STARTCHILDWORKFLOWEXECUTIONINITIATED = 33;
    STARTCHILDWORKFLOWEXECUTIONFAILED = 34;
    CHILDWORKFLOWEXECUTIONSTARTED = 35;
    CHILDWORKFLOWEXECUTIONCOMPLETED = 36;
    CHILDWORKFLOWEXECUTIONFAILED = 37;
    CHILDWORKFLOWEXECUTIONTIMEDOUT = 38;
    CHILDWORKFLOWEXECUTIONCANCELED = 39;
    CHILDWORKFLOWEXECUTIONTERMINATED = 40;
    SIGNALEXTERNALWORKFLOWEXECUTIONINITIATED = 41;
    SIGNALEXTERNALWORKFLOWEXECUTIONFAILED = 42;
    EXTERNALWORKFLOWEXECUTIONSIGNALED = 43;
    REQUESTCANCELEXTERNALWORKFLOWEXECUTIONINITIATED = 44;
    REQUESTCANCELEXTERNALWORKFLOWEXECUTIONFAILED = 45;
    EXTERNALWORKFLOWEXECUTIONCANCELREQUESTED = 46;
    LAMBDAFUNCTIONSCHEDULED = 47;
    LAMBDAFUNCTIONSTARTED = 48;
    LAMBDAFUNCTIONCOMPLETED = 49;
    LAMBDAFUNCTIONFAILED = 50;
    LAMBDAFUNCTIONTIMEDOUT = 51;
    SCHEDULELAMBDAFUNCTIONFAILED = 52;
    STARTLAMBDAFUNCTIONFAILED = 53;
}

enum ExecutionStatu {
    OPEN = 0;
    CLOSED = 1;
}

message ExecutionTimeFilter {
    // Specifies the latest start or close date and time to return.
    string latestDate = 1;
    // Specifies the oldest start or close date and time to return.
    string oldestDate = 2;
}

message ExternalWorkflowExecutionCancelRequestedEventAttributes {
    // The ID of the <code>RequestCancelExternalWorkflowExecutionInitiated</code> event corresponding to the <code>RequestCancelExternalWorkflowExecution</code> decision to cancel this external workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer initiatedEventId = 1;
    // The external workflow execution to which the cancellation request was delivered.
    WorkflowExecution workflowExecution = 2;
}

message ExternalWorkflowExecutionSignaledEventAttributes {
    // The ID of the <code>SignalExternalWorkflowExecutionInitiated</code> event corresponding to the <code>SignalExternalWorkflowExecution</code> decision to request this signal. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer initiatedEventId = 1;
    // The external workflow execution that the signal was delivered to.
    WorkflowExecution workflowExecution = 2;
}

message FailWorkflowExecutionDecisionAttributes {
    //  Details of the failure.
    string details = 1;
    // A descriptive reason for the failure that may help in diagnostics.
    string reason = 2;
}

enum FailWorkflowExecutionFailedCause {
    UNHANDLED_DECISION = 0;
    OPERATION_NOT_PERMITTED = 1;
}

message FailWorkflowExecutionFailedEventAttributes {
    // <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p> <note> <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p> </note>
    FailWorkflowExecutionFailedCause cause = 1;
    // The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>FailWorkflowExecution</code> decision to fail this execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer decisionTaskCompletedEventId = 2;
}

message GetWorkflowExecutionHistoryInput {
    // The name of the domain containing the workflow execution.
    string domain = 1;
    // Specifies the workflow execution for which to return the history.
    WorkflowExecution execution = 2;
    // <p>The maximum number of results that are returned per call. <code>nextPageToken</code> can be used to obtain futher pages of results. The default is 1000, which is the maximum allowed page size. You can, however, specify a page size <i>smaller</i> than the maximum.</p> <p>This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.</p>
    integer maximumPageSize = 3;
    // <p>If a <code>NextPageToken</code> was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>nextPageToken</code>. Keep all other arguments unchanged.</p> <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call.</p>
    string nextPageToken = 4;
    // When set to <code>true</code>, returns the events in reverse order. By default the results are returned in ascending order of the <code>eventTimeStamp</code> of the events.
    boolean reverseOrder = 5;
}

message History {
    // The list of history events.
    array events = 1;
    // <p>If a <code>NextPageToken</code> was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>nextPageToken</code>. Keep all other arguments unchanged.</p> <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call.</p>
    string nextPageToken = 2;
}

message HistoryEvent {
    // If the event is of type <code>ActivityTaskcancelRequested</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    ActivityTaskCancelRequestedEventAttributes activityTaskCancelRequestedEventAttributes = 1;
    // If the event is of type <code>ActivityTaskCanceled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    ActivityTaskCanceledEventAttributes activityTaskCanceledEventAttributes = 2;
    // If the event is of type <code>ActivityTaskCompleted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    ActivityTaskCompletedEventAttributes activityTaskCompletedEventAttributes = 3;
    // If the event is of type <code>ActivityTaskFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    ActivityTaskFailedEventAttributes activityTaskFailedEventAttributes = 4;
    // If the event is of type <code>ActivityTaskScheduled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    ActivityTaskScheduledEventAttributes activityTaskScheduledEventAttributes = 5;
    // If the event is of type <code>ActivityTaskStarted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    ActivityTaskStartedEventAttributes activityTaskStartedEventAttributes = 6;
    // If the event is of type <code>ActivityTaskTimedOut</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    ActivityTaskTimedOutEventAttributes activityTaskTimedOutEventAttributes = 7;
    // If the event is of type <code>CancelTimerFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    CancelTimerFailedEventAttributes cancelTimerFailedEventAttributes = 8;
    // If the event is of type <code>CancelWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    CancelWorkflowExecutionFailedEventAttributes cancelWorkflowExecutionFailedEventAttributes = 9;
    // If the event is of type <code>ChildWorkflowExecutionCanceled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    ChildWorkflowExecutionCanceledEventAttributes childWorkflowExecutionCanceledEventAttributes = 10;
    // If the event is of type <code>ChildWorkflowExecutionCompleted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    ChildWorkflowExecutionCompletedEventAttributes childWorkflowExecutionCompletedEventAttributes = 11;
    // If the event is of type <code>ChildWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    ChildWorkflowExecutionFailedEventAttributes childWorkflowExecutionFailedEventAttributes = 12;
    // If the event is of type <code>ChildWorkflowExecutionStarted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    ChildWorkflowExecutionStartedEventAttributes childWorkflowExecutionStartedEventAttributes = 13;
    // If the event is of type <code>ChildWorkflowExecutionTerminated</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    ChildWorkflowExecutionTerminatedEventAttributes childWorkflowExecutionTerminatedEventAttributes = 14;
    // If the event is of type <code>ChildWorkflowExecutionTimedOut</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    ChildWorkflowExecutionTimedOutEventAttributes childWorkflowExecutionTimedOutEventAttributes = 15;
    // If the event is of type <code>CompleteWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    CompleteWorkflowExecutionFailedEventAttributes completeWorkflowExecutionFailedEventAttributes = 16;
    // If the event is of type <code>ContinueAsNewWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    ContinueAsNewWorkflowExecutionFailedEventAttributes continueAsNewWorkflowExecutionFailedEventAttributes = 17;
    // If the event is of type <code>DecisionTaskCompleted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    DecisionTaskCompletedEventAttributes decisionTaskCompletedEventAttributes = 18;
    // If the event is of type <code>DecisionTaskScheduled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    DecisionTaskScheduledEventAttributes decisionTaskScheduledEventAttributes = 19;
    // If the event is of type <code>DecisionTaskStarted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    DecisionTaskStartedEventAttributes decisionTaskStartedEventAttributes = 20;
    // If the event is of type <code>DecisionTaskTimedOut</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    DecisionTaskTimedOutEventAttributes decisionTaskTimedOutEventAttributes = 21;
    // The system generated ID of the event. This ID uniquely identifies the event with in the workflow execution history.
    integer eventId = 22;
    // The date and time when the event occurred.
    string eventTimestamp = 23;
    // The type of the history event.
    EventType eventType = 24;
    // If the event is of type <code>ExternalWorkflowExecutionCancelRequested</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    ExternalWorkflowExecutionCancelRequestedEventAttributes externalWorkflowExecutionCancelRequestedEventAttributes = 25;
    // If the event is of type <code>ExternalWorkflowExecutionSignaled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    ExternalWorkflowExecutionSignaledEventAttributes externalWorkflowExecutionSignaledEventAttributes = 26;
    // If the event is of type <code>FailWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    FailWorkflowExecutionFailedEventAttributes failWorkflowExecutionFailedEventAttributes = 27;
    // Provides the details of the <code>LambdaFunctionCompleted</code> event. It isn't set for other event types.
    LambdaFunctionCompletedEventAttributes lambdaFunctionCompletedEventAttributes = 28;
    // Provides the details of the <code>LambdaFunctionFailed</code> event. It isn't set for other event types.
    LambdaFunctionFailedEventAttributes lambdaFunctionFailedEventAttributes = 29;
    // Provides the details of the <code>LambdaFunctionScheduled</code> event. It isn't set for other event types.
    LambdaFunctionScheduledEventAttributes lambdaFunctionScheduledEventAttributes = 30;
    // Provides the details of the <code>LambdaFunctionStarted</code> event. It isn't set for other event types.
    LambdaFunctionStartedEventAttributes lambdaFunctionStartedEventAttributes = 31;
    // Provides the details of the <code>LambdaFunctionTimedOut</code> event. It isn't set for other event types.
    LambdaFunctionTimedOutEventAttributes lambdaFunctionTimedOutEventAttributes = 32;
    // If the event is of type <code>MarkerRecorded</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    MarkerRecordedEventAttributes markerRecordedEventAttributes = 33;
    // If the event is of type <code>DecisionTaskFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    RecordMarkerFailedEventAttributes recordMarkerFailedEventAttributes = 34;
    // If the event is of type <code>RequestCancelActivityTaskFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    RequestCancelActivityTaskFailedEventAttributes requestCancelActivityTaskFailedEventAttributes = 35;
    // If the event is of type <code>RequestCancelExternalWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    RequestCancelExternalWorkflowExecutionFailedEventAttributes requestCancelExternalWorkflowExecutionFailedEventAttributes = 36;
    // If the event is of type <code>RequestCancelExternalWorkflowExecutionInitiated</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    RequestCancelExternalWorkflowExecutionInitiatedEventAttributes requestCancelExternalWorkflowExecutionInitiatedEventAttributes = 37;
    // If the event is of type <code>ScheduleActivityTaskFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    ScheduleActivityTaskFailedEventAttributes scheduleActivityTaskFailedEventAttributes = 38;
    // Provides the details of the <code>ScheduleLambdaFunctionFailed</code> event. It isn't set for other event types.
    ScheduleLambdaFunctionFailedEventAttributes scheduleLambdaFunctionFailedEventAttributes = 39;
    // If the event is of type <code>SignalExternalWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    SignalExternalWorkflowExecutionFailedEventAttributes signalExternalWorkflowExecutionFailedEventAttributes = 40;
    // If the event is of type <code>SignalExternalWorkflowExecutionInitiated</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    SignalExternalWorkflowExecutionInitiatedEventAttributes signalExternalWorkflowExecutionInitiatedEventAttributes = 41;
    // If the event is of type <code>StartChildWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    StartChildWorkflowExecutionFailedEventAttributes startChildWorkflowExecutionFailedEventAttributes = 42;
    // If the event is of type <code>StartChildWorkflowExecutionInitiated</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    StartChildWorkflowExecutionInitiatedEventAttributes startChildWorkflowExecutionInitiatedEventAttributes = 43;
    // Provides the details of the <code>StartLambdaFunctionFailed</code> event. It isn't set for other event types.
    StartLambdaFunctionFailedEventAttributes startLambdaFunctionFailedEventAttributes = 44;
    // If the event is of type <code>StartTimerFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    StartTimerFailedEventAttributes startTimerFailedEventAttributes = 45;
    // If the event is of type <code>TimerCanceled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    TimerCanceledEventAttributes timerCanceledEventAttributes = 46;
    // If the event is of type <code>TimerFired</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    TimerFiredEventAttributes timerFiredEventAttributes = 47;
    // If the event is of type <code>TimerStarted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    TimerStartedEventAttributes timerStartedEventAttributes = 48;
    // If the event is of type <code>WorkflowExecutionCancelRequested</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    WorkflowExecutionCancelRequestedEventAttributes workflowExecutionCancelRequestedEventAttributes = 49;
    // If the event is of type <code>WorkflowExecutionCanceled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    WorkflowExecutionCanceledEventAttributes workflowExecutionCanceledEventAttributes = 50;
    // If the event is of type <code>WorkflowExecutionCompleted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    WorkflowExecutionCompletedEventAttributes workflowExecutionCompletedEventAttributes = 51;
    // If the event is of type <code>WorkflowExecutionContinuedAsNew</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    WorkflowExecutionContinuedAsNewEventAttributes workflowExecutionContinuedAsNewEventAttributes = 52;
    // If the event is of type <code>WorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    WorkflowExecutionFailedEventAttributes workflowExecutionFailedEventAttributes = 53;
    // If the event is of type <code>WorkflowExecutionSignaled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    WorkflowExecutionSignaledEventAttributes workflowExecutionSignaledEventAttributes = 54;
    // If the event is of type <code>WorkflowExecutionStarted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    WorkflowExecutionStartedEventAttributes workflowExecutionStartedEventAttributes = 55;
    // If the event is of type <code>WorkflowExecutionTerminated</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    WorkflowExecutionTerminatedEventAttributes workflowExecutionTerminatedEventAttributes = 56;
    // If the event is of type <code>WorkflowExecutionTimedOut</code> then this member is set and provides detailed information about the event. It isn't set for other event types.
    WorkflowExecutionTimedOutEventAttributes workflowExecutionTimedOutEventAttributes = 57;
}

repeated HistoryEvent HistoryEventList = 1



message LambdaFunctionCompletedEventAttributes {
    // The results of the Lambda task.
    string result = 1;
    // The ID of the <code>LambdaFunctionScheduled</code> event that was recorded when this Lambda task was scheduled. To help diagnose issues, use this information to trace back the chain of events leading up to this event.
    integer scheduledEventId = 2;
    // The ID of the <code>LambdaFunctionStarted</code> event recorded when this activity task started. To help diagnose issues, use this information to trace back the chain of events leading up to this event.
    integer startedEventId = 3;
}

message LambdaFunctionFailedEventAttributes {
    // The details of the failure.
    string details = 1;
    // The reason provided for the failure.
    string reason = 2;
    // The ID of the <code>LambdaFunctionScheduled</code> event that was recorded when this activity task was scheduled. To help diagnose issues, use this information to trace back the chain of events leading up to this event.
    integer scheduledEventId = 3;
    // The ID of the <code>LambdaFunctionStarted</code> event recorded when this activity task started. To help diagnose issues, use this information to trace back the chain of events leading up to this event.
    integer startedEventId = 4;
}

message LambdaFunctionScheduledEventAttributes {
    // Data attached to the event that the decider can use in subsequent workflow tasks. This data isn't sent to the Lambda task.
    string control = 1;
    // The ID of the <code>LambdaFunctionCompleted</code> event corresponding to the decision that resulted in scheduling this activity task. To help diagnose issues, use this information to trace back the chain of events leading up to this event.
    integer decisionTaskCompletedEventId = 2;
    // The unique ID of the Lambda task.
    string id = 3;
    // The input provided to the Lambda task.
    string input = 4;
    // The name of the Lambda function.
    string name = 5;
    // The maximum amount of time a worker can take to process the Lambda task.
    string startToCloseTimeout = 6;
}

message LambdaFunctionStartedEventAttributes {
    // The ID of the <code>LambdaFunctionScheduled</code> event that was recorded when this activity task was scheduled. To help diagnose issues, use this information to trace back the chain of events leading up to this event.
    integer scheduledEventId = 1;
}

message LambdaFunctionTimedOutEventAttributes {
    // The ID of the <code>LambdaFunctionScheduled</code> event that was recorded when this activity task was scheduled. To help diagnose issues, use this information to trace back the chain of events leading up to this event.
    integer scheduledEventId = 1;
    // The ID of the <code>ActivityTaskStarted</code> event that was recorded when this activity task started. To help diagnose issues, use this information to trace back the chain of events leading up to this event.
    integer startedEventId = 2;
    // The type of the timeout that caused this event.
    LambdaFunctionTimeoutType timeoutType = 3;
}

enum LambdaFunctionTimeoutType {
    START_TO_CLOSE = 0;
}

message LimitExceededFault {
    // A description that may help with diagnosing the cause of the fault.
    string message = 1;
}

message ListActivityTypesInput {
    // The name of the domain in which the activity types have been registered.
    string domain = 1;
    // <p>The maximum number of results that are returned per call. <code>nextPageToken</code> can be used to obtain futher pages of results. The default is 1000, which is the maximum allowed page size. You can, however, specify a page size <i>smaller</i> than the maximum.</p> <p>This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.</p>
    integer maximumPageSize = 2;
    // If specified, only lists the activity types that have this name.
    string name = 3;
    // <p>If a <code>NextPageToken</code> was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>nextPageToken</code>. Keep all other arguments unchanged.</p> <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call.</p>
    string nextPageToken = 4;
    // Specifies the registration status of the activity types to list.
    RegistrationStatus registrationStatus = 5;
    // When set to <code>true</code>, returns the results in reverse order. By default, the results are returned in ascending alphabetical order by <code>name</code> of the activity types.
    boolean reverseOrder = 6;
}

message ListClosedWorkflowExecutionsInput {
    // <p>If specified, only workflow executions that match this <i>close status</i> are listed. For example, if TERMINATED is specified, then only TERMINATED workflow executions are listed.</p> <note> <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p> </note>
    CloseStatusFilter closeStatusFilter = 1;
    // <p>If specified, the workflow executions are included in the returned results based on whether their close times are within the range specified by this filter. Also, if this parameter is specified, the returned results are ordered by their close times.</p> <note> <p> <code>startTimeFilter</code> and <code>closeTimeFilter</code> are mutually exclusive. You must specify one of these in a request but not both.</p> </note>
    ExecutionTimeFilter closeTimeFilter = 2;
    // The name of the domain that contains the workflow executions to list.
    string domain = 3;
    // <p>If specified, only workflow executions matching the workflow ID specified in the filter are returned.</p> <note> <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p> </note>
    WorkflowExecutionFilter executionFilter = 4;
    // <p>The maximum number of results that are returned per call. <code>nextPageToken</code> can be used to obtain futher pages of results. The default is 1000, which is the maximum allowed page size. You can, however, specify a page size <i>smaller</i> than the maximum.</p> <p>This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.</p>
    integer maximumPageSize = 5;
    // <p>If a <code>NextPageToken</code> was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>nextPageToken</code>. Keep all other arguments unchanged.</p> <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call.</p>
    string nextPageToken = 6;
    // When set to <code>true</code>, returns the results in reverse order. By default the results are returned in descending order of the start or the close time of the executions.
    boolean reverseOrder = 7;
    // <p>If specified, the workflow executions are included in the returned results based on whether their start times are within the range specified by this filter. Also, if this parameter is specified, the returned results are ordered by their start times.</p> <note> <p> <code>startTimeFilter</code> and <code>closeTimeFilter</code> are mutually exclusive. You must specify one of these in a request but not both.</p> </note>
    ExecutionTimeFilter startTimeFilter = 8;
    // <p>If specified, only executions that have the matching tag are listed.</p> <note> <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p> </note>
    TagFilter tagFilter = 9;
    // <p>If specified, only executions of the type specified in the filter are returned.</p> <note> <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p> </note>
    WorkflowTypeFilter typeFilter = 10;
}

message ListDomainsInput {
    // <p>The maximum number of results that are returned per call. <code>nextPageToken</code> can be used to obtain futher pages of results. The default is 1000, which is the maximum allowed page size. You can, however, specify a page size <i>smaller</i> than the maximum.</p> <p>This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.</p>
    integer maximumPageSize = 1;
    // <p>If a <code>NextPageToken</code> was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>nextPageToken</code>. Keep all other arguments unchanged.</p> <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call.</p>
    string nextPageToken = 2;
    // Specifies the registration status of the domains to list.
    RegistrationStatus registrationStatus = 3;
    // When set to <code>true</code>, returns the results in reverse order. By default, the results are returned in ascending alphabetical order by <code>name</code> of the domains.
    boolean reverseOrder = 4;
}

message ListOpenWorkflowExecutionsInput {
    // The name of the domain that contains the workflow executions to list.
    string domain = 1;
    // <p>If specified, only workflow executions matching the workflow ID specified in the filter are returned.</p> <note> <p> <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p> </note>
    WorkflowExecutionFilter executionFilter = 2;
    // <p>The maximum number of results that are returned per call. <code>nextPageToken</code> can be used to obtain futher pages of results. The default is 1000, which is the maximum allowed page size. You can, however, specify a page size <i>smaller</i> than the maximum.</p> <p>This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.</p>
    integer maximumPageSize = 3;
    // <p>If a <code>NextPageToken</code> was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>nextPageToken</code>. Keep all other arguments unchanged.</p> <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call.</p>
    string nextPageToken = 4;
    // When set to <code>true</code>, returns the results in reverse order. By default the results are returned in descending order of the start time of the executions.
    boolean reverseOrder = 5;
    // Workflow executions are included in the returned results based on whether their start times are within the range specified by this filter.
    ExecutionTimeFilter startTimeFilter = 6;
    // <p>If specified, only executions that have the matching tag are listed.</p> <note> <p> <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p> </note>
    TagFilter tagFilter = 7;
    // <p>If specified, only executions of the type specified in the filter are returned.</p> <note> <p> <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p> </note>
    WorkflowTypeFilter typeFilter = 8;
}

message ListWorkflowTypesInput {
    // The name of the domain in which the workflow types have been registered.
    string domain = 1;
    // <p>The maximum number of results that are returned per call. <code>nextPageToken</code> can be used to obtain futher pages of results. The default is 1000, which is the maximum allowed page size. You can, however, specify a page size <i>smaller</i> than the maximum.</p> <p>This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.</p>
    integer maximumPageSize = 2;
    // If specified, lists the workflow type with this name.
    string name = 3;
    // <p>If a <code>NextPageToken</code> was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>nextPageToken</code>. Keep all other arguments unchanged.</p> <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call.</p>
    string nextPageToken = 4;
    // Specifies the registration status of the workflow types to list.
    RegistrationStatus registrationStatus = 5;
    // When set to <code>true</code>, returns the results in reverse order. By default the results are returned in ascending alphabetical order of the <code>name</code> of the workflow types.
    boolean reverseOrder = 6;
}

message MarkerRecordedEventAttributes {
    // The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>RecordMarker</code> decision that requested this marker. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer decisionTaskCompletedEventId = 1;
    // The details of the marker.
    string details = 2;
    // The name of the marker.
    string markerName = 3;
}

message OperationNotPermittedFault {
    // A description that may help with diagnosing the cause of the fault.
    string message = 1;
}

message PendingTaskCount {
    // The number of tasks in the task list.
    integer count = 1;
    // If set to true, indicates that the actual count was more than the maximum supported by this API and the count returned is the truncated value.
    boolean truncated = 2;
}

message PollForActivityTaskInput {
    // The name of the domain that contains the task lists being polled.
    string domain = 1;
    // Identity of the worker making the request, recorded in the <code>ActivityTaskStarted</code> event in the workflow history. This enables diagnostic tracing when problems arise. The form of this identity is user defined.
    string identity = 2;
    // <p>Specifies the task list to poll for activity tasks.</p> <p>The specified string must not start or end with whitespace. It must not contain a <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must not contain the literal string <code>arn</code>.</p>
    TaskList taskList = 3;
}

message PollForDecisionTaskInput {
    // The name of the domain containing the task lists to poll.
    string domain = 1;
    // Identity of the decider making the request, which is recorded in the DecisionTaskStarted event in the workflow history. This enables diagnostic tracing when problems arise. The form of this identity is user defined.
    string identity = 2;
    // <p>The maximum number of results that are returned per call. <code>nextPageToken</code> can be used to obtain futher pages of results. The default is 1000, which is the maximum allowed page size. You can, however, specify a page size <i>smaller</i> than the maximum.</p> <p>This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.</p>
    integer maximumPageSize = 3;
    // <p>If a <code>NextPageToken</code> was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>nextPageToken</code>. Keep all other arguments unchanged.</p> <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call.</p> <note> <p>The <code>nextPageToken</code> returned by this action cannot be used with <a>GetWorkflowExecutionHistory</a> to get the next page. You must call <a>PollForDecisionTask</a> again (with the <code>nextPageToken</code>) to retrieve the next page of history records. Calling <a>PollForDecisionTask</a> with a <code>nextPageToken</code> doesn't return a new decision task.</p> </note>
    string nextPageToken = 4;
    // When set to <code>true</code>, returns the events in reverse order. By default the results are returned in ascending order of the <code>eventTimestamp</code> of the events.
    boolean reverseOrder = 5;
    // <p>Specifies the task list to poll for decision tasks.</p> <p>The specified string must not start or end with whitespace. It must not contain a <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must not contain the literal string <code>arn</code>.</p>
    TaskList taskList = 6;
}

message RecordActivityTaskHeartbeatInput {
    // If specified, contains details about the progress of the task.
    string details = 1;
    // <p>The <code>taskToken</code> of the <a>ActivityTask</a>.</p> <important> <p> <code>taskToken</code> is generated by the service and should be treated as an opaque value. If the task is passed to another process, its <code>taskToken</code> must also be passed. This enables it to provide its progress and respond with results. </p> </important>
    string taskToken = 2;
}

message RecordMarkerDecisionAttributes {
    //  The details of the marker.
    string details = 1;
    //  The name of the marker.
    string markerName = 2;
}

enum RecordMarkerFailedCause {
    OPERATION_NOT_PERMITTED = 0;
}

message RecordMarkerFailedEventAttributes {
    // <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p> <note> <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p> </note>
    RecordMarkerFailedCause cause = 1;
    // The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>RecordMarkerFailed</code> decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer decisionTaskCompletedEventId = 2;
    // The marker's name.
    string markerName = 3;
}

message RegisterActivityTypeInput {
    // <p>If set, specifies the default maximum time before which a worker processing a task of this type must report progress by calling <a>RecordActivityTaskHeartbeat</a>. If the timeout is exceeded, the activity task is automatically timed out. This default can be overridden when scheduling an activity task using the <code>ScheduleActivityTask</code> <a>Decision</a>. If the activity worker subsequently attempts to record a heartbeat or returns a result, the activity worker receives an <code>UnknownResource</code> fault. In this case, Amazon SWF no longer considers the activity task to be valid; the activity worker should clean up the activity task.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    string defaultTaskHeartbeatTimeout = 1;
    // If set, specifies the default task list to use for scheduling tasks of this activity type. This default task list is used if a task list isn't provided when a task is scheduled through the <code>ScheduleActivityTask</code> <a>Decision</a>.
    TaskList defaultTaskList = 2;
    // <p>The default task priority to assign to the activity type. If not assigned, then <code>0</code> is used. Valid values are integers that range from Java's <code>Integer.MIN_VALUE</code> (-2147483648) to <code>Integer.MAX_VALUE</code> (2147483647). Higher numbers indicate higher priority.</p> <p>For more information about setting task priority, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html">Setting Task Priority</a> in the <i>in the <i>Amazon SWF Developer Guide</i>.</i>.</p>
    string defaultTaskPriority = 3;
    // <p>If set, specifies the default maximum duration for a task of this activity type. This default can be overridden when scheduling an activity task using the <code>ScheduleActivityTask</code> <a>Decision</a>.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    string defaultTaskScheduleToCloseTimeout = 4;
    // <p>If set, specifies the default maximum duration that a task of this activity type can wait before being assigned to a worker. This default can be overridden when scheduling an activity task using the <code>ScheduleActivityTask</code> <a>Decision</a>.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    string defaultTaskScheduleToStartTimeout = 5;
    // <p>If set, specifies the default maximum duration that a worker can take to process tasks of this activity type. This default can be overridden when scheduling an activity task using the <code>ScheduleActivityTask</code> <a>Decision</a>.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    string defaultTaskStartToCloseTimeout = 6;
    // A textual description of the activity type.
    string description = 7;
    // The name of the domain in which this activity is to be registered.
    string domain = 8;
    // <p>The name of the activity type within the domain.</p> <p>The specified string must not start or end with whitespace. It must not contain a <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must not contain the literal string <code>arn</code>.</p>
    string name = 9;
    // <p>The version of the activity type.</p> <note> <p>The activity type consists of the name and version, the combination of which must be unique within the domain.</p> </note> <p>The specified string must not start or end with whitespace. It must not contain a <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must not contain the literal string <code>arn</code>.</p>
    string version = 10;
}

message RegisterDomainInput {
    // A text description of the domain.
    string description = 1;
    // <p>Name of the domain to register. The name must be unique in the region that the domain is registered in.</p> <p>The specified string must not start or end with whitespace. It must not contain a <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must not contain the literal string <code>arn</code>.</p>
    string name = 2;
    // <p>The duration (in days) that records and histories of workflow executions on the domain should be kept by the service. After the retention period, the workflow execution isn't available in the results of visibility calls.</p> <p>If you pass the value <code>NONE</code> or <code>0</code> (zero), then the workflow execution history isn't retained. As soon as the workflow execution completes, the execution record and its history are deleted.</p> <p>The maximum workflow execution retention period is 90 days. For more information about Amazon SWF service limits, see: <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dg-limits.html">Amazon SWF Service Limits</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    string workflowExecutionRetentionPeriodInDays = 3;
}

message RegisterWorkflowTypeInput {
    // <p>If set, specifies the default policy to use for the child workflow executions when a workflow execution of this type is terminated, by calling the <a>TerminateWorkflowExecution</a> action explicitly or due to an expired timeout. This default can be overridden when starting a workflow execution using the <a>StartWorkflowExecution</a> action or the <code>StartChildWorkflowExecution</code> <a>Decision</a>.</p> <p>The supported child policies are:</p> <ul> <li> <p> <code>TERMINATE</code> – The child executions are terminated.</p> </li> <li> <p> <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.</p> </li> <li> <p> <code>ABANDON</code> – No action is taken. The child executions continue to run.</p> </li> </ul>
    ChildPolicy defaultChildPolicy = 1;
    // <p>If set, specifies the default maximum duration for executions of this workflow type. You can override this default when starting an execution through the <a>StartWorkflowExecution</a> Action or <code>StartChildWorkflowExecution</code> <a>Decision</a>.</p> <p>The duration is specified in seconds; an integer greater than or equal to 0. Unlike some of the other timeout parameters in Amazon SWF, you cannot specify a value of "NONE" for <code>defaultExecutionStartToCloseTimeout</code>; there is a one-year max limit on the time that a workflow execution can run. Exceeding this limit always causes the workflow execution to time out.</p>
    string defaultExecutionStartToCloseTimeout = 2;
    // <p>The default IAM role attached to this workflow type.</p> <note> <p>Executions of this workflow type need IAM roles to invoke Lambda functions. If you don't specify an IAM role when you start this workflow type, the default Lambda role is attached to the execution. For more information, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/lambda-task.html">http://docs.aws.amazon.com/amazonswf/latest/developerguide/lambda-task.html</a> in the <i>Amazon SWF Developer Guide</i>.</p> </note>
    string defaultLambdaRole = 3;
    // If set, specifies the default task list to use for scheduling decision tasks for executions of this workflow type. This default is used only if a task list isn't provided when starting the execution through the <a>StartWorkflowExecution</a> Action or <code>StartChildWorkflowExecution</code> <a>Decision</a>.
    TaskList defaultTaskList = 4;
    // <p>The default task priority to assign to the workflow type. If not assigned, then <code>0</code> is used. Valid values are integers that range from Java's <code>Integer.MIN_VALUE</code> (-2147483648) to <code>Integer.MAX_VALUE</code> (2147483647). Higher numbers indicate higher priority.</p> <p>For more information about setting task priority, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html">Setting Task Priority</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    string defaultTaskPriority = 5;
    // <p>If set, specifies the default maximum duration of decision tasks for this workflow type. This default can be overridden when starting a workflow execution using the <a>StartWorkflowExecution</a> action or the <code>StartChildWorkflowExecution</code> <a>Decision</a>.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    string defaultTaskStartToCloseTimeout = 6;
    // Textual description of the workflow type.
    string description = 7;
    // The name of the domain in which to register the workflow type.
    string domain = 8;
    // <p>The name of the workflow type.</p> <p>The specified string must not start or end with whitespace. It must not contain a <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must not contain the literal string <code>arn</code>.</p>
    string name = 9;
    // <p>The version of the workflow type.</p> <note> <p>The workflow type consists of the name and version, the combination of which must be unique within the domain. To get a list of all currently registered workflow types, use the <a>ListWorkflowTypes</a> action.</p> </note> <p>The specified string must not start or end with whitespace. It must not contain a <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must not contain the literal string <code>arn</code>.</p>
    string version = 10;
}

enum RegistrationStatu {
    REGISTERED = 0;
    DEPRECATED = 1;
}

message RequestCancelActivityTaskDecisionAttributes {
    // The <code>activityId</code> of the activity task to be canceled.
    string activityId = 1;
}

enum RequestCancelActivityTaskFailedCause {
    ACTIVITY_ID_UNKNOWN = 0;
    OPERATION_NOT_PERMITTED = 1;
}

message RequestCancelActivityTaskFailedEventAttributes {
    // The activityId provided in the <code>RequestCancelActivityTask</code> decision that failed.
    string activityId = 1;
    // <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p> <note> <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p> </note>
    RequestCancelActivityTaskFailedCause cause = 2;
    // The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>RequestCancelActivityTask</code> decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer decisionTaskCompletedEventId = 3;
}

message RequestCancelExternalWorkflowExecutionDecisionAttributes {
    // The data attached to the event that can be used by the decider in subsequent workflow tasks.
    string control = 1;
    // The <code>runId</code> of the external workflow execution to cancel.
    string runId = 2;
    //  The <code>workflowId</code> of the external workflow execution to cancel.
    string workflowId = 3;
}

enum RequestCancelExternalWorkflowExecutionFailedCause {
    UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION = 0;
    REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_RATE_EXCEEDED = 1;
    OPERATION_NOT_PERMITTED = 2;
}

message RequestCancelExternalWorkflowExecutionFailedEventAttributes {
    // <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p> <note> <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p> </note>
    RequestCancelExternalWorkflowExecutionFailedCause cause = 1;
    // The data attached to the event that the decider can use in subsequent workflow tasks. This data isn't sent to the workflow execution.
    string control = 2;
    // The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>RequestCancelExternalWorkflowExecution</code> decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer decisionTaskCompletedEventId = 3;
    // The ID of the <code>RequestCancelExternalWorkflowExecutionInitiated</code> event corresponding to the <code>RequestCancelExternalWorkflowExecution</code> decision to cancel this external workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer initiatedEventId = 4;
    // The <code>runId</code> of the external workflow execution.
    string runId = 5;
    // The <code>workflowId</code> of the external workflow to which the cancel request was to be delivered.
    string workflowId = 6;
}

message RequestCancelExternalWorkflowExecutionInitiatedEventAttributes {
    // Data attached to the event that can be used by the decider in subsequent workflow tasks.
    string control = 1;
    // The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>RequestCancelExternalWorkflowExecution</code> decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer decisionTaskCompletedEventId = 2;
    // The <code>runId</code> of the external workflow execution to be canceled.
    string runId = 3;
    // The <code>workflowId</code> of the external workflow execution to be canceled.
    string workflowId = 4;
}

message RequestCancelWorkflowExecutionInput {
    // The name of the domain containing the workflow execution to cancel.
    string domain = 1;
    // The runId of the workflow execution to cancel.
    string runId = 2;
    // The workflowId of the workflow execution to cancel.
    string workflowId = 3;
}

message RespondActivityTaskCanceledInput {
    //  Information about the cancellation.
    string details = 1;
    // <p>The <code>taskToken</code> of the <a>ActivityTask</a>.</p> <important> <p> <code>taskToken</code> is generated by the service and should be treated as an opaque value. If the task is passed to another process, its <code>taskToken</code> must also be passed. This enables it to provide its progress and respond with results.</p> </important>
    string taskToken = 2;
}

message RespondActivityTaskCompletedInput {
    // The result of the activity task. It is a free form string that is implementation specific.
    string result = 1;
    // <p>The <code>taskToken</code> of the <a>ActivityTask</a>.</p> <important> <p> <code>taskToken</code> is generated by the service and should be treated as an opaque value. If the task is passed to another process, its <code>taskToken</code> must also be passed. This enables it to provide its progress and respond with results.</p> </important>
    string taskToken = 2;
}

message RespondActivityTaskFailedInput {
    //  Detailed information about the failure.
    string details = 1;
    // Description of the error that may assist in diagnostics.
    string reason = 2;
    // <p>The <code>taskToken</code> of the <a>ActivityTask</a>.</p> <important> <p> <code>taskToken</code> is generated by the service and should be treated as an opaque value. If the task is passed to another process, its <code>taskToken</code> must also be passed. This enables it to provide its progress and respond with results.</p> </important>
    string taskToken = 3;
}

message RespondDecisionTaskCompletedInput {
    // The list of decisions (possibly empty) made by the decider while processing this decision task. See the docs for the <a>Decision</a> structure for details.
    array decisions = 1;
    // User defined context to add to workflow execution.
    string executionContext = 2;
    // <p>The <code>taskToken</code> from the <a>DecisionTask</a>.</p> <important> <p> <code>taskToken</code> is generated by the service and should be treated as an opaque value. If the task is passed to another process, its <code>taskToken</code> must also be passed. This enables it to provide its progress and respond with results.</p> </important>
    string taskToken = 3;
}

message Run {
    // The <code>runId</code> of a workflow execution. This ID is generated by the service and can be used to uniquely identify the workflow execution within a domain.
    string runId = 1;
}

message ScheduleActivityTaskDecisionAttributes {
    // <p> The <code>activityId</code> of the activity task.</p> <p>The specified string must not start or end with whitespace. It must not contain a <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must not contain the literal string <code>arn</code>.</p>
    string activityId = 1;
    //  The type of the activity task to schedule.
    ActivityType activityType = 2;
    // Data attached to the event that can be used by the decider in subsequent workflow tasks. This data isn't sent to the activity.
    string control = 3;
    // <p>If set, specifies the maximum time before which a worker processing a task of this type must report progress by calling <a>RecordActivityTaskHeartbeat</a>. If the timeout is exceeded, the activity task is automatically timed out. If the worker subsequently attempts to record a heartbeat or returns a result, it is ignored. This overrides the default heartbeat timeout specified when registering the activity type using <a>RegisterActivityType</a>.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    string heartbeatTimeout = 4;
    // The input provided to the activity task.
    string input = 5;
    // <p>The maximum duration for this activity task.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p> <note> <p>A schedule-to-close timeout for this activity task must be specified either as a default for the activity type or through this field. If neither this field is set nor a default schedule-to-close timeout was specified at registration time then a fault is returned.</p> </note>
    string scheduleToCloseTimeout = 6;
    // <p> If set, specifies the maximum duration the activity task can wait to be assigned to a worker. This overrides the default schedule-to-start timeout specified when registering the activity type using <a>RegisterActivityType</a>.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p> <note> <p>A schedule-to-start timeout for this activity task must be specified either as a default for the activity type or through this field. If neither this field is set nor a default schedule-to-start timeout was specified at registration time then a fault is returned.</p> </note>
    string scheduleToStartTimeout = 7;
    // <p>If set, specifies the maximum duration a worker may take to process this activity task. This overrides the default start-to-close timeout specified when registering the activity type using <a>RegisterActivityType</a>.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p> <note> <p>A start-to-close timeout for this activity task must be specified either as a default for the activity type or through this field. If neither this field is set nor a default start-to-close timeout was specified at registration time then a fault is returned.</p> </note>
    string startToCloseTimeout = 8;
    // <p>If set, specifies the name of the task list in which to schedule the activity task. If not specified, the <code>defaultTaskList</code> registered with the activity type is used.</p> <note> <p>A task list for this activity task must be specified either as a default for the activity type or through this field. If neither this field is set nor a default task list was specified at registration time then a fault is returned.</p> </note> <p>The specified string must not start or end with whitespace. It must not contain a <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must not contain the literal string <code>arn</code>.</p>
    TaskList taskList = 9;
    // <p> If set, specifies the priority with which the activity task is to be assigned to a worker. This overrides the defaultTaskPriority specified when registering the activity type using <a>RegisterActivityType</a>. Valid values are integers that range from Java's <code>Integer.MIN_VALUE</code> (-2147483648) to <code>Integer.MAX_VALUE</code> (2147483647). Higher numbers indicate higher priority.</p> <p>For more information about setting task priority, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html">Setting Task Priority</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    string taskPriority = 10;
}

enum ScheduleActivityTaskFailedCause {
    ACTIVITY_TYPE_DEPRECATED = 0;
    ACTIVITY_TYPE_DOES_NOT_EXIST = 1;
    ACTIVITY_ID_ALREADY_IN_USE = 2;
    OPEN_ACTIVITIES_LIMIT_EXCEEDED = 3;
    ACTIVITY_CREATION_RATE_EXCEEDED = 4;
    DEFAULT_SCHEDULE_TO_CLOSE_TIMEOUT_UNDEFINED = 5;
    DEFAULT_TASK_LIST_UNDEFINED = 6;
    DEFAULT_SCHEDULE_TO_START_TIMEOUT_UNDEFINED = 7;
    DEFAULT_START_TO_CLOSE_TIMEOUT_UNDEFINED = 8;
    DEFAULT_HEARTBEAT_TIMEOUT_UNDEFINED = 9;
    OPERATION_NOT_PERMITTED = 10;
}

message ScheduleActivityTaskFailedEventAttributes {
    // The activityId provided in the <code>ScheduleActivityTask</code> decision that failed.
    string activityId = 1;
    // The activity type provided in the <code>ScheduleActivityTask</code> decision that failed.
    ActivityType activityType = 2;
    // <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p> <note> <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p> </note>
    ScheduleActivityTaskFailedCause cause = 3;
    // The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision that resulted in the scheduling of this activity task. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer decisionTaskCompletedEventId = 4;
}

message ScheduleLambdaFunctionDecisionAttributes {
    // The data attached to the event that the decider can use in subsequent workflow tasks. This data isn't sent to the Lambda task.
    string control = 1;
    // A string that identifies the Lambda function execution in the event history.
    string id = 2;
    // The optional input data to be supplied to the Lambda function.
    string input = 3;
    // The name, or ARN, of the Lambda function to schedule.
    string name = 4;
    // The timeout value, in seconds, after which the Lambda function is considered to be failed once it has started. This can be any integer from 1-300 (1s-5m). If no value is supplied, than a default value of 300s is assumed.
    string startToCloseTimeout = 5;
}

enum ScheduleLambdaFunctionFailedCause {
    ID_ALREADY_IN_USE = 0;
    OPEN_LAMBDA_FUNCTIONS_LIMIT_EXCEEDED = 1;
    LAMBDA_FUNCTION_CREATION_RATE_EXCEEDED = 2;
    LAMBDA_SERVICE_NOT_AVAILABLE_IN_REGION = 3;
}

message ScheduleLambdaFunctionFailedEventAttributes {
    // <p>The cause of the failure. To help diagnose issues, use this information to trace back the chain of events leading up to this event.</p> <note> <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p> </note>
    ScheduleLambdaFunctionFailedCause cause = 1;
    // The ID of the <code>LambdaFunctionCompleted</code> event corresponding to the decision that resulted in scheduling this Lambda task. To help diagnose issues, use this information to trace back the chain of events leading up to this event.
    integer decisionTaskCompletedEventId = 2;
    // The ID provided in the <code>ScheduleLambdaFunction</code> decision that failed.
    string id = 3;
    // The name of the Lambda function.
    string name = 4;
}

message SignalExternalWorkflowExecutionDecisionAttributes {
    // The data attached to the event that can be used by the decider in subsequent decision tasks.
    string control = 1;
    //  The input data to be provided with the signal. The target workflow execution uses the signal name and input data to process the signal.
    string input = 2;
    // The <code>runId</code> of the workflow execution to be signaled.
    string runId = 3;
    //  The name of the signal.The target workflow execution uses the signal name and input to process the signal.
    string signalName = 4;
    //  The <code>workflowId</code> of the workflow execution to be signaled.
    string workflowId = 5;
}

enum SignalExternalWorkflowExecutionFailedCause {
    UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION = 0;
    SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_RATE_EXCEEDED = 1;
    OPERATION_NOT_PERMITTED = 2;
}

message SignalExternalWorkflowExecutionFailedEventAttributes {
    // <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p> <note> <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p> </note>
    SignalExternalWorkflowExecutionFailedCause cause = 1;
    // The data attached to the event that the decider can use in subsequent workflow tasks. This data isn't sent to the workflow execution.
    string control = 2;
    // The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>SignalExternalWorkflowExecution</code> decision for this signal. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer decisionTaskCompletedEventId = 3;
    // The ID of the <code>SignalExternalWorkflowExecutionInitiated</code> event corresponding to the <code>SignalExternalWorkflowExecution</code> decision to request this signal. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer initiatedEventId = 4;
    // The <code>runId</code> of the external workflow execution that the signal was being delivered to.
    string runId = 5;
    // The <code>workflowId</code> of the external workflow execution that the signal was being delivered to.
    string workflowId = 6;
}

message SignalExternalWorkflowExecutionInitiatedEventAttributes {
    // Data attached to the event that can be used by the decider in subsequent decision tasks.
    string control = 1;
    // The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>SignalExternalWorkflowExecution</code> decision for this signal. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer decisionTaskCompletedEventId = 2;
    // The input provided to the signal.
    string input = 3;
    // The <code>runId</code> of the external workflow execution to send the signal to.
    string runId = 4;
    // The name of the signal.
    string signalName = 5;
    // The <code>workflowId</code> of the external workflow execution.
    string workflowId = 6;
}

message SignalWorkflowExecutionInput {
    // The name of the domain containing the workflow execution to signal.
    string domain = 1;
    // Data to attach to the <code>WorkflowExecutionSignaled</code> event in the target workflow execution's history.
    string input = 2;
    // The runId of the workflow execution to signal.
    string runId = 3;
    // The name of the signal. This name must be meaningful to the target workflow.
    string signalName = 4;
    // The workflowId of the workflow execution to signal.
    string workflowId = 5;
}

message StartChildWorkflowExecutionDecisionAttributes {
    // <p> If set, specifies the policy to use for the child workflow executions if the workflow execution being started is terminated by calling the <a>TerminateWorkflowExecution</a> action explicitly or due to an expired timeout. This policy overrides the default child policy specified when registering the workflow type using <a>RegisterWorkflowType</a>.</p> <p>The supported child policies are:</p> <ul> <li> <p> <code>TERMINATE</code> – The child executions are terminated.</p> </li> <li> <p> <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.</p> </li> <li> <p> <code>ABANDON</code> – No action is taken. The child executions continue to run.</p> </li> </ul> <note> <p>A child policy for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default child policy was specified at registration time then a fault is returned.</p> </note>
    ChildPolicy childPolicy = 1;
    // The data attached to the event that can be used by the decider in subsequent workflow tasks. This data isn't sent to the child workflow execution.
    string control = 2;
    // <p>The total duration for this workflow execution. This overrides the defaultExecutionStartToCloseTimeout specified when registering the workflow type.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p> <note> <p>An execution start-to-close timeout for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default execution start-to-close timeout was specified at registration time then a fault is returned.</p> </note>
    string executionStartToCloseTimeout = 3;
    // The input to be provided to the workflow execution.
    string input = 4;
    // The IAM role attached to the child workflow execution.
    string lambdaRole = 5;
    // The list of tags to associate with the child workflow execution. A maximum of 5 tags can be specified. You can list workflow executions with a specific tag by calling <a>ListOpenWorkflowExecutions</a> or <a>ListClosedWorkflowExecutions</a> and specifying a <a>TagFilter</a>.
    array tagList = 6;
    // <p>The name of the task list to be used for decision tasks of the child workflow execution.</p> <note> <p>A task list for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default task list was specified at registration time then a fault is returned.</p> </note> <p>The specified string must not start or end with whitespace. It must not contain a <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must not contain the literal string <code>arn</code>.</p>
    TaskList taskList = 7;
    // <p> A task priority that, if set, specifies the priority for a decision task of this workflow execution. This overrides the defaultTaskPriority specified when registering the workflow type. Valid values are integers that range from Java's <code>Integer.MIN_VALUE</code> (-2147483648) to <code>Integer.MAX_VALUE</code> (2147483647). Higher numbers indicate higher priority.</p> <p>For more information about setting task priority, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html">Setting Task Priority</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    string taskPriority = 8;
    // <p>Specifies the maximum duration of decision tasks for this workflow execution. This parameter overrides the <code>defaultTaskStartToCloseTimout</code> specified when registering the workflow type using <a>RegisterWorkflowType</a>.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p> <note> <p>A task start-to-close timeout for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default task start-to-close timeout was specified at registration time then a fault is returned.</p> </note>
    string taskStartToCloseTimeout = 9;
    // <p> The <code>workflowId</code> of the workflow execution.</p> <p>The specified string must not start or end with whitespace. It must not contain a <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must not contain the literal string <code>arn</code>.</p>
    string workflowId = 10;
    //  The type of the workflow execution to be started.
    WorkflowType workflowType = 11;
}

enum StartChildWorkflowExecutionFailedCause {
    WORKFLOW_TYPE_DOES_NOT_EXIST = 0;
    WORKFLOW_TYPE_DEPRECATED = 1;
    OPEN_CHILDREN_LIMIT_EXCEEDED = 2;
    OPEN_WORKFLOWS_LIMIT_EXCEEDED = 3;
    CHILD_CREATION_RATE_EXCEEDED = 4;
    WORKFLOW_ALREADY_RUNNING = 5;
    DEFAULT_EXECUTION_START_TO_CLOSE_TIMEOUT_UNDEFINED = 6;
    DEFAULT_TASK_LIST_UNDEFINED = 7;
    DEFAULT_TASK_START_TO_CLOSE_TIMEOUT_UNDEFINED = 8;
    DEFAULT_CHILD_POLICY_UNDEFINED = 9;
    OPERATION_NOT_PERMITTED = 10;
}

message StartChildWorkflowExecutionFailedEventAttributes {
    // <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p> <note> <p>When <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision fails because it lacks sufficient permissions. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html"> Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p> </note>
    StartChildWorkflowExecutionFailedCause cause = 1;
    // The data attached to the event that the decider can use in subsequent workflow tasks. This data isn't sent to the child workflow execution.
    string control = 2;
    // The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>StartChildWorkflowExecution</code> <a>Decision</a> to request this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events.
    integer decisionTaskCompletedEventId = 3;
    // <p>When the <code>cause</code> is <code>WORKFLOW_ALREADY_RUNNING</code>, <code>initiatedEventId</code> is the ID of the <code>StartChildWorkflowExecutionInitiated</code> event that corresponds to the <code>StartChildWorkflowExecution</code> <a>Decision</a> to start the workflow execution. You can use this information to diagnose problems by tracing back the chain of events leading up to this event.</p> <p>When the <code>cause</code> isn't <code>WORKFLOW_ALREADY_RUNNING</code>, <code>initiatedEventId</code> is set to <code>0</code> because the <code>StartChildWorkflowExecutionInitiated</code> event doesn't exist.</p>
    integer initiatedEventId = 4;
    // The <code>workflowId</code> of the child workflow execution.
    string workflowId = 5;
    // The workflow type provided in the <code>StartChildWorkflowExecution</code> <a>Decision</a> that failed.
    WorkflowType workflowType = 6;
}

message StartChildWorkflowExecutionInitiatedEventAttributes {
    // <p>The policy to use for the child workflow executions if this execution gets terminated by explicitly calling the <a>TerminateWorkflowExecution</a> action or due to an expired timeout.</p> <p>The supported child policies are:</p> <ul> <li> <p> <code>TERMINATE</code> – The child executions are terminated.</p> </li> <li> <p> <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.</p> </li> <li> <p> <code>ABANDON</code> – No action is taken. The child executions continue to run.</p> </li> </ul>
    ChildPolicy childPolicy = 1;
    // Data attached to the event that can be used by the decider in subsequent decision tasks. This data isn't sent to the activity.
    string control = 2;
    // The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>StartChildWorkflowExecution</code> <a>Decision</a> to request this child workflow execution. This information can be useful for diagnosing problems by tracing back the cause of events.
    integer decisionTaskCompletedEventId = 3;
    // <p>The maximum duration for the child workflow execution. If the workflow execution isn't closed within this duration, it is timed out and force-terminated.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    string executionStartToCloseTimeout = 4;
    // The inputs provided to the child workflow execution.
    string input = 5;
    // The IAM role to attach to the child workflow execution.
    string lambdaRole = 6;
    // The list of tags to associated with the child workflow execution.
    array tagList = 7;
    // The name of the task list used for the decision tasks of the child workflow execution.
    TaskList taskList = 8;
    // <p> The priority assigned for the decision tasks for this workflow execution. Valid values are integers that range from Java's <code>Integer.MIN_VALUE</code> (-2147483648) to <code>Integer.MAX_VALUE</code> (2147483647). Higher numbers indicate higher priority.</p> <p>For more information about setting task priority, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html">Setting Task Priority</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    string taskPriority = 9;
    // <p>The maximum duration allowed for the decision tasks for this workflow execution.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    string taskStartToCloseTimeout = 10;
    // The <code>workflowId</code> of the child workflow execution.
    string workflowId = 11;
    // The type of the child workflow execution.
    WorkflowType workflowType = 12;
}

enum StartLambdaFunctionFailedCause {
    ASSUME_ROLE_FAILED = 0;
}

message StartLambdaFunctionFailedEventAttributes {
    // <p>The cause of the failure. To help diagnose issues, use this information to trace back the chain of events leading up to this event.</p> <note> <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed because the IAM role attached to the execution lacked sufficient permissions. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/lambda-task.html">Lambda Tasks</a> in the <i>Amazon SWF Developer Guide</i>.</p> </note>
    StartLambdaFunctionFailedCause cause = 1;
    // A description that can help diagnose the cause of the fault.
    string message = 2;
    // The ID of the <code>ActivityTaskScheduled</code> event that was recorded when this activity task was scheduled. To help diagnose issues, use this information to trace back the chain of events leading up to this event.
    integer scheduledEventId = 3;
}

message StartTimerDecisionAttributes {
    // The data attached to the event that can be used by the decider in subsequent workflow tasks.
    string control = 1;
    // <p> The duration to wait before firing the timer.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>.</p>
    string startToFireTimeout = 2;
    // <p> The unique ID of the timer.</p> <p>The specified string must not start or end with whitespace. It must not contain a <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must not contain the literal string <code>arn</code>.</p>
    string timerId = 3;
}

enum StartTimerFailedCause {
    TIMER_ID_ALREADY_IN_USE = 0;
    OPEN_TIMERS_LIMIT_EXCEEDED = 1;
    TIMER_CREATION_RATE_EXCEEDED = 2;
    OPERATION_NOT_PERMITTED = 3;
}

message StartTimerFailedEventAttributes {
    // <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p> <note> <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p> </note>
    StartTimerFailedCause cause = 1;
    // The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>StartTimer</code> decision for this activity task. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer decisionTaskCompletedEventId = 2;
    // The timerId provided in the <code>StartTimer</code> decision that failed.
    string timerId = 3;
}

message StartWorkflowExecutionInput {
    // <p>If set, specifies the policy to use for the child workflow executions of this workflow execution if it is terminated, by calling the <a>TerminateWorkflowExecution</a> action explicitly or due to an expired timeout. This policy overrides the default child policy specified when registering the workflow type using <a>RegisterWorkflowType</a>.</p> <p>The supported child policies are:</p> <ul> <li> <p> <code>TERMINATE</code> – The child executions are terminated.</p> </li> <li> <p> <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.</p> </li> <li> <p> <code>ABANDON</code> – No action is taken. The child executions continue to run.</p> </li> </ul> <note> <p>A child policy for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default child policy was specified at registration time then a fault is returned.</p> </note>
    ChildPolicy childPolicy = 1;
    // The name of the domain in which the workflow execution is created.
    string domain = 2;
    // <p>The total duration for this workflow execution. This overrides the defaultExecutionStartToCloseTimeout specified when registering the workflow type.</p> <p>The duration is specified in seconds; an integer greater than or equal to <code>0</code>. Exceeding this limit causes the workflow execution to time out. Unlike some of the other timeout parameters in Amazon SWF, you cannot specify a value of "NONE" for this timeout; there is a one-year max limit on the time that a workflow execution can run.</p> <note> <p>An execution start-to-close timeout must be specified either through this parameter or as a default when the workflow type is registered. If neither this parameter nor a default execution start-to-close timeout is specified, a fault is returned.</p> </note>
    string executionStartToCloseTimeout = 3;
    // The input for the workflow execution. This is a free form string which should be meaningful to the workflow you are starting. This <code>input</code> is made available to the new workflow execution in the <code>WorkflowExecutionStarted</code> history event.
    string input = 4;
    // <p>The IAM role to attach to this workflow execution.</p> <note> <p>Executions of this workflow type need IAM roles to invoke Lambda functions. If you don't attach an IAM role, any attempt to schedule a Lambda task fails. This results in a <code>ScheduleLambdaFunctionFailed</code> history event. For more information, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/lambda-task.html">http://docs.aws.amazon.com/amazonswf/latest/developerguide/lambda-task.html</a> in the <i>Amazon SWF Developer Guide</i>.</p> </note>
    string lambdaRole = 5;
    // The list of tags to associate with the workflow execution. You can specify a maximum of 5 tags. You can list workflow executions with a specific tag by calling <a>ListOpenWorkflowExecutions</a> or <a>ListClosedWorkflowExecutions</a> and specifying a <a>TagFilter</a>.
    array tagList = 6;
    // <p>The task list to use for the decision tasks generated for this workflow execution. This overrides the <code>defaultTaskList</code> specified when registering the workflow type.</p> <note> <p>A task list for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default task list was specified at registration time then a fault is returned.</p> </note> <p>The specified string must not start or end with whitespace. It must not contain a <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must not contain the literal string <code>arn</code>.</p>
    TaskList taskList = 7;
    // <p>The task priority to use for this workflow execution. This overrides any default priority that was assigned when the workflow type was registered. If not set, then the default task priority for the workflow type is used. Valid values are integers that range from Java's <code>Integer.MIN_VALUE</code> (-2147483648) to <code>Integer.MAX_VALUE</code> (2147483647). Higher numbers indicate higher priority.</p> <p>For more information about setting task priority, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html">Setting Task Priority</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    string taskPriority = 8;
    // <p>Specifies the maximum duration of decision tasks for this workflow execution. This parameter overrides the <code>defaultTaskStartToCloseTimout</code> specified when registering the workflow type using <a>RegisterWorkflowType</a>.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p> <note> <p>A task start-to-close timeout for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default task start-to-close timeout was specified at registration time then a fault is returned.</p> </note>
    string taskStartToCloseTimeout = 9;
    // <p>The user defined identifier associated with the workflow execution. You can use this to associate a custom identifier with the workflow execution. You may specify the same identifier if a workflow execution is logically a <i>restart</i> of a previous execution. You cannot have two open workflow executions with the same <code>workflowId</code> at the same time.</p> <p>The specified string must not start or end with whitespace. It must not contain a <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must not contain the literal string <code>arn</code>.</p>
    string workflowId = 10;
    // The type of the workflow to start.
    WorkflowType workflowType = 11;
}

message TagFilter {
    //  Specifies the tag that must be associated with the execution for it to meet the filter criteria.
    string tag = 1;
}

repeated string TagList = 1

message TaskList {
    // The name of the task list.
    string name = 1;
}

message TerminateWorkflowExecutionInput {
    // <p>If set, specifies the policy to use for the child workflow executions of the workflow execution being terminated. This policy overrides the child policy specified for the workflow execution at registration time or when starting the execution.</p> <p>The supported child policies are:</p> <ul> <li> <p> <code>TERMINATE</code> – The child executions are terminated.</p> </li> <li> <p> <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.</p> </li> <li> <p> <code>ABANDON</code> – No action is taken. The child executions continue to run.</p> </li> </ul> <note> <p>A child policy for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default child policy was specified at registration time then a fault is returned.</p> </note>
    ChildPolicy childPolicy = 1;
    //  Details for terminating the workflow execution.
    string details = 2;
    // The domain of the workflow execution to terminate.
    string domain = 3;
    //  A descriptive reason for terminating the workflow execution.
    string reason = 4;
    // The runId of the workflow execution to terminate.
    string runId = 5;
    // The workflowId of the workflow execution to terminate.
    string workflowId = 6;
}

message TimerCanceledEventAttributes {
    // The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>CancelTimer</code> decision to cancel this timer. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer decisionTaskCompletedEventId = 1;
    // The ID of the <code>TimerStarted</code> event that was recorded when this timer was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer startedEventId = 2;
    // The unique ID of the timer that was canceled.
    string timerId = 3;
}

message TimerFiredEventAttributes {
    // The ID of the <code>TimerStarted</code> event that was recorded when this timer was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer startedEventId = 1;
    // The unique ID of the timer that fired.
    string timerId = 2;
}

message TimerStartedEventAttributes {
    // Data attached to the event that can be used by the decider in subsequent workflow tasks.
    string control = 1;
    // The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>StartTimer</code> decision for this activity task. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer decisionTaskCompletedEventId = 2;
    // <p>The duration of time after which the timer fires.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>.</p>
    string startToFireTimeout = 3;
    // The unique ID of the timer that was started.
    string timerId = 4;
}

message TypeAlreadyExistsFault {
    // A description that may help with diagnosing the cause of the fault.
    string message = 1;
}

message TypeDeprecatedFault {
    // A description that may help with diagnosing the cause of the fault.
    string message = 1;
}

message UnknownResourceFault {
    // A description that may help with diagnosing the cause of the fault.
    string message = 1;
}

message WorkflowExecution {
    // A system-generated unique identifier for the workflow execution.
    string runId = 1;
    // The user defined identifier associated with the workflow execution.
    string workflowId = 2;
}

message WorkflowExecutionAlreadyStartedFault {
    // A description that may help with diagnosing the cause of the fault.
    string message = 1;
}

enum WorkflowExecutionCancelRequestedCause {
    CHILD_POLICY_APPLIED = 0;
}

message WorkflowExecutionCancelRequestedEventAttributes {
    // If set, indicates that the request to cancel the workflow execution was automatically generated, and specifies the cause. This happens if the parent workflow execution times out or is terminated, and the child policy is set to cancel child executions.
    WorkflowExecutionCancelRequestedCause cause = 1;
    // The ID of the <code>RequestCancelExternalWorkflowExecutionInitiated</code> event corresponding to the <code>RequestCancelExternalWorkflowExecution</code> decision to cancel this workflow execution.The source event with this ID can be found in the history of the source workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer externalInitiatedEventId = 2;
    // The external workflow execution for which the cancellation was requested.
    WorkflowExecution externalWorkflowExecution = 3;
}

message WorkflowExecutionCanceledEventAttributes {
    // The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>CancelWorkflowExecution</code> decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer decisionTaskCompletedEventId = 1;
    // The details of the cancellation.
    string details = 2;
}

message WorkflowExecutionCompletedEventAttributes {
    // The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>CompleteWorkflowExecution</code> decision to complete this execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer decisionTaskCompletedEventId = 1;
    // The result produced by the workflow execution upon successful completion.
    string result = 2;
}

message WorkflowExecutionConfiguration {
    // <p>The policy to use for the child workflow executions if this workflow execution is terminated, by calling the <a>TerminateWorkflowExecution</a> action explicitly or due to an expired timeout.</p> <p>The supported child policies are:</p> <ul> <li> <p> <code>TERMINATE</code> – The child executions are terminated.</p> </li> <li> <p> <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.</p> </li> <li> <p> <code>ABANDON</code> – No action is taken. The child executions continue to run.</p> </li> </ul>
    ChildPolicy childPolicy = 1;
    // <p>The total duration for this workflow execution.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    string executionStartToCloseTimeout = 2;
    // The IAM role attached to the child workflow execution.
    string lambdaRole = 3;
    // The task list used for the decision tasks generated for this workflow execution.
    TaskList taskList = 4;
    // <p>The priority assigned to decision tasks for this workflow execution. Valid values are integers that range from Java's <code>Integer.MIN_VALUE</code> (-2147483648) to <code>Integer.MAX_VALUE</code> (2147483647). Higher numbers indicate higher priority.</p> <p>For more information about setting task priority, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html">Setting Task Priority</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    string taskPriority = 5;
    // <p>The maximum duration allowed for decision tasks for this workflow execution.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    string taskStartToCloseTimeout = 6;
}

message WorkflowExecutionContinuedAsNewEventAttributes {
    // <p>The policy to use for the child workflow executions of the new execution if it is terminated by calling the <a>TerminateWorkflowExecution</a> action explicitly or due to an expired timeout.</p> <p>The supported child policies are:</p> <ul> <li> <p> <code>TERMINATE</code> – The child executions are terminated.</p> </li> <li> <p> <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.</p> </li> <li> <p> <code>ABANDON</code> – No action is taken. The child executions continue to run.</p> </li> </ul>
    ChildPolicy childPolicy = 1;
    // The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>ContinueAsNewWorkflowExecution</code> decision that started this execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer decisionTaskCompletedEventId = 2;
    // <p>The total duration allowed for the new workflow execution.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    string executionStartToCloseTimeout = 3;
    // The input provided to the new workflow execution.
    string input = 4;
    // The IAM role to attach to the new (continued) workflow execution.
    string lambdaRole = 5;
    // The <code>runId</code> of the new workflow execution.
    string newExecutionRunId = 6;
    // The list of tags associated with the new workflow execution.
    array tagList = 7;
    // The task list to use for the decisions of the new (continued) workflow execution.
    TaskList taskList = 8;
    // The priority of the task to use for the decisions of the new (continued) workflow execution.
    string taskPriority = 9;
    // <p>The maximum duration of decision tasks for the new workflow execution.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    string taskStartToCloseTimeout = 10;
    // The workflow type of this execution.
    WorkflowType workflowType = 11;
}

message WorkflowExecutionCount {
    // The number of workflow executions.
    integer count = 1;
    // If set to true, indicates that the actual count was more than the maximum supported by this API and the count returned is the truncated value.
    boolean truncated = 2;
}

message WorkflowExecutionDetail {
    // The configuration settings for this workflow execution including timeout values, tasklist etc.
    WorkflowExecutionConfiguration executionConfiguration = 1;
    // Information about the workflow execution.
    WorkflowExecutionInfo executionInfo = 2;
    // The time when the last activity task was scheduled for this workflow execution. You can use this information to determine if the workflow has not made progress for an unusually long period of time and might require a corrective action.
    string latestActivityTaskTimestamp = 3;
    // The latest executionContext provided by the decider for this workflow execution. A decider can provide an executionContext (a free-form string) when closing a decision task using <a>RespondDecisionTaskCompleted</a>.
    string latestExecutionContext = 4;
    // The number of tasks for this workflow execution. This includes open and closed tasks of all types.
    WorkflowExecutionOpenCounts openCounts = 5;
}

message WorkflowExecutionFailedEventAttributes {
    // The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>FailWorkflowExecution</code> decision to fail this execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer decisionTaskCompletedEventId = 1;
    // The details of the failure.
    string details = 2;
    // The descriptive reason provided for the failure.
    string reason = 3;
}

message WorkflowExecutionFilter {
    // The workflowId to pass of match the criteria of this filter.
    string workflowId = 1;
}

message WorkflowExecutionInfo {
    // Set to true if a cancellation is requested for this workflow execution.
    boolean cancelRequested = 1;
    // <p>If the execution status is closed then this specifies how the execution was closed:</p> <ul> <li> <p> <code>COMPLETED</code> – the execution was successfully completed.</p> </li> <li> <p> <code>CANCELED</code> – the execution was canceled.Cancellation allows the implementation to gracefully clean up before the execution is closed.</p> </li> <li> <p> <code>TERMINATED</code> – the execution was force terminated.</p> </li> <li> <p> <code>FAILED</code> – the execution failed to complete.</p> </li> <li> <p> <code>TIMED_OUT</code> – the execution did not complete in the alloted time and was automatically timed out.</p> </li> <li> <p> <code>CONTINUED_AS_NEW</code> – the execution is logically continued. This means the current execution was completed and a new execution was started to carry on the workflow.</p> </li> </ul>
    CloseStatus closeStatus = 2;
    // The time when the workflow execution was closed. Set only if the execution status is CLOSED.
    string closeTimestamp = 3;
    // The workflow execution this information is about.
    WorkflowExecution execution = 4;
    // The current status of the execution.
    ExecutionStatus executionStatus = 5;
    // If this workflow execution is a child of another execution then contains the workflow execution that started this execution.
    WorkflowExecution parent = 6;
    // The time when the execution was started.
    string startTimestamp = 7;
    // The list of tags associated with the workflow execution. Tags can be used to identify and list workflow executions of interest through the visibility APIs. A workflow execution can have a maximum of 5 tags.
    array tagList = 8;
    // The type of the workflow execution.
    WorkflowType workflowType = 9;
}

repeated WorkflowExecutionInfo WorkflowExecutionInfoList = 1

message WorkflowExecutionInfos {
    // The list of workflow information structures.
    array executionInfos = 1;
    // <p>If a <code>NextPageToken</code> was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>nextPageToken</code>. Keep all other arguments unchanged.</p> <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call.</p>
    string nextPageToken = 2;
}

message WorkflowExecutionOpenCounts {
    // The count of activity tasks whose status is <code>OPEN</code>.
    integer openActivityTasks = 1;
    // The count of child workflow executions whose status is <code>OPEN</code>.
    integer openChildWorkflowExecutions = 2;
    // The count of decision tasks whose status is OPEN. A workflow execution can have at most one open decision task.
    integer openDecisionTasks = 3;
    // The count of Lambda tasks whose status is <code>OPEN</code>.
    integer openLambdaFunctions = 4;
    // The count of timers started by this workflow execution that have not fired yet.
    integer openTimers = 5;
}

message WorkflowExecutionSignaledEventAttributes {
    // The ID of the <code>SignalExternalWorkflowExecutionInitiated</code> event corresponding to the <code>SignalExternalWorkflow</code> decision to signal this workflow execution.The source event with this ID can be found in the history of the source workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event. This field is set only if the signal was initiated by another workflow execution.
    integer externalInitiatedEventId = 1;
    // The workflow execution that sent the signal. This is set only of the signal was sent by another workflow execution.
    WorkflowExecution externalWorkflowExecution = 2;
    // The inputs provided with the signal. The decider can use the signal name and inputs to determine how to process the signal.
    string input = 3;
    // The name of the signal received. The decider can use the signal name and inputs to determine how to the process the signal.
    string signalName = 4;
}

message WorkflowExecutionStartedEventAttributes {
    // <p>The policy to use for the child workflow executions if this workflow execution is terminated, by calling the <a>TerminateWorkflowExecution</a> action explicitly or due to an expired timeout.</p> <p>The supported child policies are:</p> <ul> <li> <p> <code>TERMINATE</code> – The child executions are terminated.</p> </li> <li> <p> <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.</p> </li> <li> <p> <code>ABANDON</code> – No action is taken. The child executions continue to run.</p> </li> </ul>
    ChildPolicy childPolicy = 1;
    // If this workflow execution was started due to a <code>ContinueAsNewWorkflowExecution</code> decision, then it contains the <code>runId</code> of the previous workflow execution that was closed and continued as this execution.
    string continuedExecutionRunId = 2;
    // <p>The maximum duration for this workflow execution.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    string executionStartToCloseTimeout = 3;
    // The input provided to the workflow execution.
    string input = 4;
    // The IAM role attached to the workflow execution.
    string lambdaRole = 5;
    // The ID of the <code>StartChildWorkflowExecutionInitiated</code> event corresponding to the <code>StartChildWorkflowExecution</code> <a>Decision</a> to start this workflow execution. The source event with this ID can be found in the history of the source workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    integer parentInitiatedEventId = 6;
    // The source workflow execution that started this workflow execution. The member isn't set if the workflow execution was not started by a workflow.
    WorkflowExecution parentWorkflowExecution = 7;
    // The list of tags associated with this workflow execution. An execution can have up to 5 tags.
    array tagList = 8;
    // The name of the task list for scheduling the decision tasks for this workflow execution.
    TaskList taskList = 9;
    // The priority of the decision tasks in the workflow execution.
    string taskPriority = 10;
    // <p>The maximum duration of decision tasks for this workflow type.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    string taskStartToCloseTimeout = 11;
    // The workflow type of this execution.
    WorkflowType workflowType = 12;
}

enum WorkflowExecutionTerminatedCause {
    CHILD_POLICY_APPLIED = 0;
    EVENT_LIMIT_EXCEEDED = 1;
    OPERATOR_INITIATED = 2;
}

message WorkflowExecutionTerminatedEventAttributes {
    // If set, indicates that the workflow execution was automatically terminated, and specifies the cause. This happens if the parent workflow execution times out or is terminated and the child policy is set to terminate child executions.
    WorkflowExecutionTerminatedCause cause = 1;
    // <p>The policy used for the child workflow executions of this workflow execution.</p> <p>The supported child policies are:</p> <ul> <li> <p> <code>TERMINATE</code> – The child executions are terminated.</p> </li> <li> <p> <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.</p> </li> <li> <p> <code>ABANDON</code> – No action is taken. The child executions continue to run.</p> </li> </ul>
    ChildPolicy childPolicy = 2;
    // The details provided for the termination.
    string details = 3;
    // The reason provided for the termination.
    string reason = 4;
}

message WorkflowExecutionTimedOutEventAttributes {
    // <p>The policy used for the child workflow executions of this workflow execution.</p> <p>The supported child policies are:</p> <ul> <li> <p> <code>TERMINATE</code> – The child executions are terminated.</p> </li> <li> <p> <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.</p> </li> <li> <p> <code>ABANDON</code> – No action is taken. The child executions continue to run.</p> </li> </ul>
    ChildPolicy childPolicy = 1;
    // The type of timeout that caused this event.
    WorkflowExecutionTimeoutType timeoutType = 2;
}

enum WorkflowExecutionTimeoutType {
    START_TO_CLOSE = 0;
}

message WorkflowType {
    // <p> The name of the workflow type.</p> <note> <p>The combination of workflow type name and version must be unique with in a domain.</p> </note>
    string name = 1;
    // <p> The version of the workflow type.</p> <note> <p>The combination of workflow type name and version must be unique with in a domain.</p> </note>
    string version = 2;
}

message WorkflowTypeConfiguration {
    // <p> The default policy to use for the child workflow executions when a workflow execution of this type is terminated, by calling the <a>TerminateWorkflowExecution</a> action explicitly or due to an expired timeout. This default can be overridden when starting a workflow execution using the <a>StartWorkflowExecution</a> action or the <code>StartChildWorkflowExecution</code> <a>Decision</a>.</p> <p>The supported child policies are:</p> <ul> <li> <p> <code>TERMINATE</code> – The child executions are terminated.</p> </li> <li> <p> <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.</p> </li> <li> <p> <code>ABANDON</code> – No action is taken. The child executions continue to run.</p> </li> </ul>
    ChildPolicy defaultChildPolicy = 1;
    // <p> The default maximum duration, specified when registering the workflow type, for executions of this workflow type. This default can be overridden when starting a workflow execution using the <a>StartWorkflowExecution</a> action or the <code>StartChildWorkflowExecution</code> <a>Decision</a>.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    string defaultExecutionStartToCloseTimeout = 2;
    // <p>The default IAM role attached to this workflow type.</p> <note> <p>Executions of this workflow type need IAM roles to invoke Lambda functions. If you don't specify an IAM role when starting this workflow type, the default Lambda role is attached to the execution. For more information, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/lambda-task.html">http://docs.aws.amazon.com/amazonswf/latest/developerguide/lambda-task.html</a> in the <i>Amazon SWF Developer Guide</i>.</p> </note>
    string defaultLambdaRole = 3;
    //  The default task list, specified when registering the workflow type, for decisions tasks scheduled for workflow executions of this type. This default can be overridden when starting a workflow execution using the <a>StartWorkflowExecution</a> action or the <code>StartChildWorkflowExecution</code> <a>Decision</a>.
    TaskList defaultTaskList = 4;
    // <p> The default task priority, specified when registering the workflow type, for all decision tasks of this workflow type. This default can be overridden when starting a workflow execution using the <a>StartWorkflowExecution</a> action or the <code>StartChildWorkflowExecution</code> decision.</p> <p>Valid values are integers that range from Java's <code>Integer.MIN_VALUE</code> (-2147483648) to <code>Integer.MAX_VALUE</code> (2147483647). Higher numbers indicate higher priority.</p> <p>For more information about setting task priority, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html">Setting Task Priority</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    string defaultTaskPriority = 5;
    // <p> The default maximum duration, specified when registering the workflow type, that a decision task for executions of this workflow type might take before returning completion or failure. If the task doesn'tdo close in the specified time then the task is automatically timed out and rescheduled. If the decider eventually reports a completion or failure, it is ignored. This default can be overridden when starting a workflow execution using the <a>StartWorkflowExecution</a> action or the <code>StartChildWorkflowExecution</code> <a>Decision</a>.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    string defaultTaskStartToCloseTimeout = 6;
}

message WorkflowTypeDetail {
    // Configuration settings of the workflow type registered through <a>RegisterWorkflowType</a>
    WorkflowTypeConfiguration configuration = 1;
    // <p>General information about the workflow type.</p> <p>The status of the workflow type (returned in the WorkflowTypeInfo structure) can be one of the following.</p> <ul> <li> <p> <code>REGISTERED</code> – The type is registered and available. Workers supporting this type should be running.</p> </li> <li> <p> <code>DEPRECATED</code> – The type was deprecated using <a>DeprecateWorkflowType</a>, but is still in use. You should keep workers supporting this type running. You cannot create new workflow executions of this type.</p> </li> </ul>
    WorkflowTypeInfo typeInfo = 2;
}

message WorkflowTypeFilter {
    //  Name of the workflow type.
    string name = 1;
    // Version of the workflow type.
    string version = 2;
}

message WorkflowTypeInfo {
    // The date when this type was registered.
    string creationDate = 1;
    // If the type is in deprecated state, then it is set to the date when the type was deprecated.
    string deprecationDate = 2;
    // The description of the type registered through <a>RegisterWorkflowType</a>.
    string description = 3;
    // The current status of the workflow type.
    RegistrationStatus status = 4;
    // The workflow type this information is about.
    WorkflowType workflowType = 5;
}

repeated WorkflowTypeInfo WorkflowTypeInfoList = 1

message WorkflowTypeInfos {
    // <p>If a <code>NextPageToken</code> was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>nextPageToken</code>. Keep all other arguments unchanged.</p> <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call.</p>
    string nextPageToken = 1;
    // The list of workflow type information.
    array typeInfos = 2;
}

service AmazonSimpleWorkflowServiceService {
    // <p>Returns the number of closed workflow executions within the given domain that meet the specified filtering criteria.</p> <note> <p>This operation is eventually consistent. The results are best effort and may not exactly reflect recent updates and changes.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>tagFilter.tag</code>: String constraint. The key is <code>swf:tagFilter.tag</code>.</p> </li> <li> <p> <code>typeFilter.name</code>: String constraint. The key is <code>swf:typeFilter.name</code>.</p> </li> <li> <p> <code>typeFilter.version</code>: String constraint. The key is <code>swf:typeFilter.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    rpc Post(PostRequest) returns (WorkflowExecutionCount) {
      option (google.api.http) = {
        post: "//"
        body: "body"
      };
    }
    // <p>Returns the number of open workflow executions within the given domain that meet the specified filtering criteria.</p> <note> <p>This operation is eventually consistent. The results are best effort and may not exactly reflect recent updates and changes.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>tagFilter.tag</code>: String constraint. The key is <code>swf:tagFilter.tag</code>.</p> </li> <li> <p> <code>typeFilter.name</code>: String constraint. The key is <code>swf:typeFilter.name</code>.</p> </li> <li> <p> <code>typeFilter.version</code>: String constraint. The key is <code>swf:typeFilter.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    rpc Post#CountOpenWorkflowExecutions(Post#CountOpenWorkflowExecutionsRequest) returns (WorkflowExecutionCount) {
      option (google.api.http) = {
        post: "//#CountOpenWorkflowExecutions"
        body: "body"
      };
    }
    // <p>Returns the estimated number of activity tasks in the specified task list. The count returned is an approximation and isn't guaranteed to be exact. If you specify a task list that no activity task was ever scheduled in then <code>0</code> is returned.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the <code>taskList.name</code> parameter by using a <code>Condition</code> element with the <code>swf:taskList.name</code> key to allow the action to access only certain task lists.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    rpc Post#CountPendingActivityTasks(Post#CountPendingActivityTasksRequest) returns (PendingTaskCount) {
      option (google.api.http) = {
        post: "//#CountPendingActivityTasks"
        body: "body"
      };
    }
    // <p>Returns the estimated number of decision tasks in the specified task list. The count returned is an approximation and isn't guaranteed to be exact. If you specify a task list that no decision task was ever scheduled in then <code>0</code> is returned.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the <code>taskList.name</code> parameter by using a <code>Condition</code> element with the <code>swf:taskList.name</code> key to allow the action to access only certain task lists.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    rpc Post#CountPendingDecisionTasks(Post#CountPendingDecisionTasksRequest) returns (PendingTaskCount) {
      option (google.api.http) = {
        post: "//#CountPendingDecisionTasks"
        body: "body"
      };
    }
    // <p>Deprecates the specified <i>activity type</i>. After an activity type has been deprecated, you cannot create new tasks of that activity type. Tasks of this type that were scheduled before the type was deprecated continue to run.</p> <note> <p>This operation is eventually consistent. The results are best effort and may not exactly reflect recent updates and changes.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>activityType.name</code>: String constraint. The key is <code>swf:activityType.name</code>.</p> </li> <li> <p> <code>activityType.version</code>: String constraint. The key is <code>swf:activityType.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    rpc Post#DeprecateActivityType(Post#DeprecateActivityTypeRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#DeprecateActivityType"
        body: "body"
      };
    }
    // <p>Deprecates the specified domain. After a domain has been deprecated it cannot be used to create new workflow executions or register new types. However, you can still use visibility actions on this domain. Deprecating a domain also deprecates all activity and workflow types registered in the domain. Executions that were started before the domain was deprecated continues to run.</p> <note> <p>This operation is eventually consistent. The results are best effort and may not exactly reflect recent updates and changes.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    rpc Post#DeprecateDomain(Post#DeprecateDomainRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#DeprecateDomain"
        body: "body"
      };
    }
    // <p>Deprecates the specified <i>workflow type</i>. After a workflow type has been deprecated, you cannot create new executions of that type. Executions that were started before the type was deprecated continues to run. A deprecated workflow type may still be used when calling visibility actions.</p> <note> <p>This operation is eventually consistent. The results are best effort and may not exactly reflect recent updates and changes.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>workflowType.name</code>: String constraint. The key is <code>swf:workflowType.name</code>.</p> </li> <li> <p> <code>workflowType.version</code>: String constraint. The key is <code>swf:workflowType.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    rpc Post#DeprecateWorkflowType(Post#DeprecateWorkflowTypeRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#DeprecateWorkflowType"
        body: "body"
      };
    }
    // <p>Returns information about the specified activity type. This includes configuration settings provided when the type was registered and other general information about the type.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>activityType.name</code>: String constraint. The key is <code>swf:activityType.name</code>.</p> </li> <li> <p> <code>activityType.version</code>: String constraint. The key is <code>swf:activityType.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    rpc Post#DescribeActivityType(Post#DescribeActivityTypeRequest) returns (ActivityTypeDetail) {
      option (google.api.http) = {
        post: "//#DescribeActivityType"
        body: "body"
      };
    }
    // <p>Returns information about the specified domain, including description and status.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    rpc Post#DescribeDomain(Post#DescribeDomainRequest) returns (DomainDetail) {
      option (google.api.http) = {
        post: "//#DescribeDomain"
        body: "body"
      };
    }
    // <p>Returns information about the specified workflow execution including its type and some statistics.</p> <note> <p>This operation is eventually consistent. The results are best effort and may not exactly reflect recent updates and changes.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    rpc Post#DescribeWorkflowExecution(Post#DescribeWorkflowExecutionRequest) returns (WorkflowExecutionDetail) {
      option (google.api.http) = {
        post: "//#DescribeWorkflowExecution"
        body: "body"
      };
    }
    // <p>Returns information about the specified <i>workflow type</i>. This includes configuration settings specified when the type was registered and other information such as creation date, current status, etc.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>workflowType.name</code>: String constraint. The key is <code>swf:workflowType.name</code>.</p> </li> <li> <p> <code>workflowType.version</code>: String constraint. The key is <code>swf:workflowType.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    rpc Post#DescribeWorkflowType(Post#DescribeWorkflowTypeRequest) returns (WorkflowTypeDetail) {
      option (google.api.http) = {
        post: "//#DescribeWorkflowType"
        body: "body"
      };
    }
    // <p>Returns the history of the specified workflow execution. The results may be split into multiple pages. To retrieve subsequent pages, make the call again using the <code>nextPageToken</code> returned by the initial call.</p> <note> <p>This operation is eventually consistent. The results are best effort and may not exactly reflect recent updates and changes.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    rpc Post#GetWorkflowExecutionHistory(Post#GetWorkflowExecutionHistoryRequest) returns (History) {
      option (google.api.http) = {
        post: "//#GetWorkflowExecutionHistory"
        body: "body"
      };
    }
    // <p>Returns information about all activities registered in the specified domain that match the specified name and registration status. The result includes information like creation date, current status of the activity, etc. The results may be split into multiple pages. To retrieve subsequent pages, make the call again using the <code>nextPageToken</code> returned by the initial call.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    rpc Post#ListActivityTypes(Post#ListActivityTypesRequest) returns (ActivityTypeInfos) {
      option (google.api.http) = {
        post: "//#ListActivityTypes"
        body: "body"
      };
    }
    // <p>Returns a list of closed workflow executions in the specified domain that meet the filtering criteria. The results may be split into multiple pages. To retrieve subsequent pages, make the call again using the nextPageToken returned by the initial call.</p> <note> <p>This operation is eventually consistent. The results are best effort and may not exactly reflect recent updates and changes.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>tagFilter.tag</code>: String constraint. The key is <code>swf:tagFilter.tag</code>.</p> </li> <li> <p> <code>typeFilter.name</code>: String constraint. The key is <code>swf:typeFilter.name</code>.</p> </li> <li> <p> <code>typeFilter.version</code>: String constraint. The key is <code>swf:typeFilter.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    rpc Post#ListClosedWorkflowExecutions(Post#ListClosedWorkflowExecutionsRequest) returns (WorkflowExecutionInfos) {
      option (google.api.http) = {
        post: "//#ListClosedWorkflowExecutions"
        body: "body"
      };
    }
    // <p>Returns the list of domains registered in the account. The results may be split into multiple pages. To retrieve subsequent pages, make the call again using the nextPageToken returned by the initial call.</p> <note> <p>This operation is eventually consistent. The results are best effort and may not exactly reflect recent updates and changes.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains. The element must be set to <code>arn:aws:swf::AccountID:domain/*</code>, where <i>AccountID</i> is the account ID, with no dashes.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    rpc Post#ListDomains(Post#ListDomainsRequest) returns (DomainInfos) {
      option (google.api.http) = {
        post: "//#ListDomains"
        body: "body"
      };
    }
    // <p>Returns a list of open workflow executions in the specified domain that meet the filtering criteria. The results may be split into multiple pages. To retrieve subsequent pages, make the call again using the nextPageToken returned by the initial call.</p> <note> <p>This operation is eventually consistent. The results are best effort and may not exactly reflect recent updates and changes.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>tagFilter.tag</code>: String constraint. The key is <code>swf:tagFilter.tag</code>.</p> </li> <li> <p> <code>typeFilter.name</code>: String constraint. The key is <code>swf:typeFilter.name</code>.</p> </li> <li> <p> <code>typeFilter.version</code>: String constraint. The key is <code>swf:typeFilter.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    rpc Post#ListOpenWorkflowExecutions(Post#ListOpenWorkflowExecutionsRequest) returns (WorkflowExecutionInfos) {
      option (google.api.http) = {
        post: "//#ListOpenWorkflowExecutions"
        body: "body"
      };
    }
    // <p>Returns information about workflow types in the specified domain. The results may be split into multiple pages that can be retrieved by making the call repeatedly.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    rpc Post#ListWorkflowTypes(Post#ListWorkflowTypesRequest) returns (WorkflowTypeInfos) {
      option (google.api.http) = {
        post: "//#ListWorkflowTypes"
        body: "body"
      };
    }
    // <p>Used by workers to get an <a>ActivityTask</a> from the specified activity <code>taskList</code>. This initiates a long poll, where the service holds the HTTP connection open and responds as soon as a task becomes available. The maximum time the service holds on to the request before responding is 60 seconds. If no task is available within 60 seconds, the poll returns an empty result. An empty result, in this context, means that an ActivityTask is returned, but that the value of taskToken is an empty string. If a task is returned, the worker should use its type to identify and process it correctly.</p> <important> <p>Workers should set their client side socket timeout to at least 70 seconds (10 seconds higher than the maximum time service may hold the poll request).</p> </important> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the <code>taskList.name</code> parameter by using a <code>Condition</code> element with the <code>swf:taskList.name</code> key to allow the action to access only certain task lists.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    rpc Post#PollForActivityTask(Post#PollForActivityTaskRequest) returns (ActivityTask) {
      option (google.api.http) = {
        post: "//#PollForActivityTask"
        body: "body"
      };
    }
    // <p>Used by deciders to get a <a>DecisionTask</a> from the specified decision <code>taskList</code>. A decision task may be returned for any open workflow execution that is using the specified task list. The task includes a paginated view of the history of the workflow execution. The decider should use the workflow type and the history to determine how to properly handle the task.</p> <p>This action initiates a long poll, where the service holds the HTTP connection open and responds as soon a task becomes available. If no decision task is available in the specified task list before the timeout of 60 seconds expires, an empty result is returned. An empty result, in this context, means that a DecisionTask is returned, but that the value of taskToken is an empty string.</p> <important> <p>Deciders should set their client side socket timeout to at least 70 seconds (10 seconds higher than the timeout).</p> </important> <important> <p>Because the number of workflow history events for a single workflow execution might be very large, the result returned might be split up across a number of pages. To retrieve subsequent pages, make additional calls to <code>PollForDecisionTask</code> using the <code>nextPageToken</code> returned by the initial call. Note that you do <i>not</i> call <code>GetWorkflowExecutionHistory</code> with this <code>nextPageToken</code>. Instead, call <code>PollForDecisionTask</code> again.</p> </important> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the <code>taskList.name</code> parameter by using a <code>Condition</code> element with the <code>swf:taskList.name</code> key to allow the action to access only certain task lists.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    rpc Post#PollForDecisionTask(Post#PollForDecisionTaskRequest) returns (DecisionTask) {
      option (google.api.http) = {
        post: "//#PollForDecisionTask"
        body: "body"
      };
    }
    // <p>Used by activity workers to report to the service that the <a>ActivityTask</a> represented by the specified <code>taskToken</code> is still making progress. The worker can also specify details of the progress, for example percent complete, using the <code>details</code> parameter. This action can also be used by the worker as a mechanism to check if cancellation is being requested for the activity task. If a cancellation is being attempted for the specified task, then the boolean <code>cancelRequested</code> flag returned by the service is set to <code>true</code>.</p> <p>This action resets the <code>taskHeartbeatTimeout</code> clock. The <code>taskHeartbeatTimeout</code> is specified in <a>RegisterActivityType</a>.</p> <p>This action doesn't in itself create an event in the workflow execution history. However, if the task times out, the workflow execution history contains a <code>ActivityTaskTimedOut</code> event that contains the information from the last heartbeat generated by the activity worker.</p> <note> <p>The <code>taskStartToCloseTimeout</code> of an activity type is the maximum duration of an activity task, regardless of the number of <a>RecordActivityTaskHeartbeat</a> requests received. The <code>taskStartToCloseTimeout</code> is also specified in <a>RegisterActivityType</a>.</p> </note> <note> <p>This operation is only useful for long-lived activities to report liveliness of the task and to determine if a cancellation is being attempted.</p> </note> <important> <p>If the <code>cancelRequested</code> flag returns <code>true</code>, a cancellation is being attempted. If the worker can cancel the activity, it should respond with <a>RespondActivityTaskCanceled</a>. Otherwise, it should ignore the cancellation request.</p> </important> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    rpc Post#RecordActivityTaskHeartbeat(Post#RecordActivityTaskHeartbeatRequest) returns (ActivityTaskStatus) {
      option (google.api.http) = {
        post: "//#RecordActivityTaskHeartbeat"
        body: "body"
      };
    }
    // <p>Registers a new <i>activity type</i> along with its configuration settings in the specified domain.</p> <important> <p>A <code>TypeAlreadyExists</code> fault is returned if the type already exists in the domain. You cannot change any configuration settings of the type after its registration, and it must be registered as a new version.</p> </important> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>defaultTaskList.name</code>: String constraint. The key is <code>swf:defaultTaskList.name</code>.</p> </li> <li> <p> <code>name</code>: String constraint. The key is <code>swf:name</code>.</p> </li> <li> <p> <code>version</code>: String constraint. The key is <code>swf:version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    rpc Post#RegisterActivityType(Post#RegisterActivityTypeRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#RegisterActivityType"
        body: "body"
      };
    }
    // <p>Registers a new domain.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>You cannot use an IAM policy to control domain access for this action. The name of the domain being registered is available as the resource of this action.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    rpc Post#RegisterDomain(Post#RegisterDomainRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#RegisterDomain"
        body: "body"
      };
    }
    // <p>Registers a new <i>workflow type</i> and its configuration settings in the specified domain.</p> <p>The retention period for the workflow history is set by the <a>RegisterDomain</a> action.</p> <important> <p>If the type already exists, then a <code>TypeAlreadyExists</code> fault is returned. You cannot change the configuration settings of a workflow type once it is registered and it must be registered as a new version.</p> </important> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>defaultTaskList.name</code>: String constraint. The key is <code>swf:defaultTaskList.name</code>.</p> </li> <li> <p> <code>name</code>: String constraint. The key is <code>swf:name</code>.</p> </li> <li> <p> <code>version</code>: String constraint. The key is <code>swf:version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    rpc Post#RegisterWorkflowType(Post#RegisterWorkflowTypeRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#RegisterWorkflowType"
        body: "body"
      };
    }
    // <p>Records a <code>WorkflowExecutionCancelRequested</code> event in the currently running workflow execution identified by the given domain, workflowId, and runId. This logically requests the cancellation of the workflow execution as a whole. It is up to the decider to take appropriate actions when it receives an execution history with this event.</p> <note> <p>If the runId isn't specified, the <code>WorkflowExecutionCancelRequested</code> event is recorded in the history of the current open workflow execution with the specified workflowId in the domain.</p> </note> <note> <p>Because this action allows the workflow to properly clean up and gracefully close, it should be used instead of <a>TerminateWorkflowExecution</a> when possible.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    rpc Post#RequestCancelWorkflowExecution(Post#RequestCancelWorkflowExecutionRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#RequestCancelWorkflowExecution"
        body: "body"
      };
    }
    // <p>Used by workers to tell the service that the <a>ActivityTask</a> identified by the <code>taskToken</code> was successfully canceled. Additional <code>details</code> can be provided using the <code>details</code> argument.</p> <p>These <code>details</code> (if provided) appear in the <code>ActivityTaskCanceled</code> event added to the workflow history.</p> <important> <p>Only use this operation if the <code>canceled</code> flag of a <a>RecordActivityTaskHeartbeat</a> request returns <code>true</code> and if the activity can be safely undone or abandoned.</p> </important> <p>A task is considered open from the time that it is scheduled until it is closed. Therefore a task is reported as open while a worker is processing it. A task is closed after it has been specified in a call to <a>RespondActivityTaskCompleted</a>, RespondActivityTaskCanceled, <a>RespondActivityTaskFailed</a>, or the task has <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dg-basic.html#swf-dev-timeout-types">timed out</a>.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    rpc Post#RespondActivityTaskCanceled(Post#RespondActivityTaskCanceledRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#RespondActivityTaskCanceled"
        body: "body"
      };
    }
    // <p>Used by workers to tell the service that the <a>ActivityTask</a> identified by the <code>taskToken</code> completed successfully with a <code>result</code> (if provided). The <code>result</code> appears in the <code>ActivityTaskCompleted</code> event in the workflow history.</p> <important> <p>If the requested task doesn't complete successfully, use <a>RespondActivityTaskFailed</a> instead. If the worker finds that the task is canceled through the <code>canceled</code> flag returned by <a>RecordActivityTaskHeartbeat</a>, it should cancel the task, clean up and then call <a>RespondActivityTaskCanceled</a>.</p> </important> <p>A task is considered open from the time that it is scheduled until it is closed. Therefore a task is reported as open while a worker is processing it. A task is closed after it has been specified in a call to RespondActivityTaskCompleted, <a>RespondActivityTaskCanceled</a>, <a>RespondActivityTaskFailed</a>, or the task has <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dg-basic.html#swf-dev-timeout-types">timed out</a>.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    rpc Post#RespondActivityTaskCompleted(Post#RespondActivityTaskCompletedRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#RespondActivityTaskCompleted"
        body: "body"
      };
    }
    // <p>Used by workers to tell the service that the <a>ActivityTask</a> identified by the <code>taskToken</code> has failed with <code>reason</code> (if specified). The <code>reason</code> and <code>details</code> appear in the <code>ActivityTaskFailed</code> event added to the workflow history.</p> <p>A task is considered open from the time that it is scheduled until it is closed. Therefore a task is reported as open while a worker is processing it. A task is closed after it has been specified in a call to <a>RespondActivityTaskCompleted</a>, <a>RespondActivityTaskCanceled</a>, RespondActivityTaskFailed, or the task has <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dg-basic.html#swf-dev-timeout-types">timed out</a>.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    rpc Post#RespondActivityTaskFailed(Post#RespondActivityTaskFailedRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#RespondActivityTaskFailed"
        body: "body"
      };
    }
    // <p>Used by deciders to tell the service that the <a>DecisionTask</a> identified by the <code>taskToken</code> has successfully completed. The <code>decisions</code> argument specifies the list of decisions made while processing the task.</p> <p>A <code>DecisionTaskCompleted</code> event is added to the workflow history. The <code>executionContext</code> specified is attached to the event in the workflow execution history.</p> <p> <b>Access Control</b> </p> <p>If an IAM policy grants permission to use <code>RespondDecisionTaskCompleted</code>, it can express permissions for the list of decisions in the <code>decisions</code> parameter. Each of the decisions has one or more parameters, much like a regular API call. To allow for policies to be as readable as possible, you can express permissions on decisions as if they were actual API calls, including applying conditions to some parameters. For more information, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    rpc Post#RespondDecisionTaskCompleted(Post#RespondDecisionTaskCompletedRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#RespondDecisionTaskCompleted"
        body: "body"
      };
    }
    // <p>Records a <code>WorkflowExecutionSignaled</code> event in the workflow execution history and creates a decision task for the workflow execution identified by the given domain, workflowId and runId. The event is recorded with the specified user defined signalName and input (if provided).</p> <note> <p>If a runId isn't specified, then the <code>WorkflowExecutionSignaled</code> event is recorded in the history of the current open workflow with the matching workflowId in the domain.</p> </note> <note> <p>If the specified workflow execution isn't open, this method fails with <code>UnknownResource</code>.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    rpc Post#SignalWorkflowExecution(Post#SignalWorkflowExecutionRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#SignalWorkflowExecution"
        body: "body"
      };
    }
    // <p>Starts an execution of the workflow type in the specified domain using the provided <code>workflowId</code> and input data.</p> <p>This action returns the newly started workflow execution.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>tagList.member.0</code>: The key is <code>swf:tagList.member.0</code>.</p> </li> <li> <p> <code>tagList.member.1</code>: The key is <code>swf:tagList.member.1</code>.</p> </li> <li> <p> <code>tagList.member.2</code>: The key is <code>swf:tagList.member.2</code>.</p> </li> <li> <p> <code>tagList.member.3</code>: The key is <code>swf:tagList.member.3</code>.</p> </li> <li> <p> <code>tagList.member.4</code>: The key is <code>swf:tagList.member.4</code>.</p> </li> <li> <p> <code>taskList</code>: String constraint. The key is <code>swf:taskList.name</code>.</p> </li> <li> <p> <code>workflowType.name</code>: String constraint. The key is <code>swf:workflowType.name</code>.</p> </li> <li> <p> <code>workflowType.version</code>: String constraint. The key is <code>swf:workflowType.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    rpc Post#StartWorkflowExecution(Post#StartWorkflowExecutionRequest) returns (Run) {
      option (google.api.http) = {
        post: "//#StartWorkflowExecution"
        body: "body"
      };
    }
    // <p>Records a <code>WorkflowExecutionTerminated</code> event and forces closure of the workflow execution identified by the given domain, runId, and workflowId. The child policy, registered with the workflow type or specified when starting this execution, is applied to any open child workflow executions of this workflow execution.</p> <important> <p>If the identified workflow execution was in progress, it is terminated immediately.</p> </important> <note> <p>If a runId isn't specified, then the <code>WorkflowExecutionTerminated</code> event is recorded in the history of the current open workflow with the matching workflowId in the domain.</p> </note> <note> <p>You should consider using <a>RequestCancelWorkflowExecution</a> action instead because it allows the workflow to gracefully close while <a>TerminateWorkflowExecution</a> doesn't.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    rpc Post#TerminateWorkflowExecution(Post#TerminateWorkflowExecutionRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#TerminateWorkflowExecution"
        body: "body"
      };
    }
}

syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package amazoncognitoidentity;

message PostRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateIdentityPoolInput body = 10;
}

message Post#DeleteIdentitiesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteIdentitiesInput body = 10;
}

message Post#DeleteIdentityPoolRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteIdentityPoolInput body = 10;
}

message Post#DescribeIdentityRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeIdentityInput body = 10;
}

message Post#DescribeIdentityPoolRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeIdentityPoolInput body = 10;
}

message Post#GetCredentialsForIdentityRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetCredentialsForIdentityInput body = 10;
}

message Post#GetIdRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetIdInput body = 10;
}

message Post#GetIdentityPoolRolesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetIdentityPoolRolesInput body = 10;
}

message Post#GetOpenIdTokenRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetOpenIdTokenInput body = 10;
}

message Post#GetOpenIdTokenForDeveloperIdentityRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetOpenIdTokenForDeveloperIdentityInput body = 10;
}

message Post#ListIdentitiesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListIdentitiesInput body = 10;
}

message Post#ListIdentityPoolsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListIdentityPoolsInput body = 10;
}

message Post#LookupDeveloperIdentityRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    LookupDeveloperIdentityInput body = 10;
}

message Post#MergeDeveloperIdentitiesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    MergeDeveloperIdentitiesInput body = 10;
}

message Post#SetIdentityPoolRolesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    SetIdentityPoolRolesInput body = 10;
}

message Post#UnlinkDeveloperIdentityRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UnlinkDeveloperIdentityInput body = 10;
}

message Post#UnlinkIdentityRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UnlinkIdentityInput body = 10;
}

message Post#UpdateIdentityPoolRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    IdentityPool body = 10;
}

enum AmbiguousRoleResolutionType {
    AUTHENTICATEDROLE = 0;
    DENY = 1;
}

message CognitoIdentityProvider {
    // The client ID for the Amazon Cognito Identity User Pool.
    string ClientId = 1;
    // The provider name for an Amazon Cognito Identity User Pool. For example, <code>cognito-idp.us-east-1.amazonaws.com/us-east-1_123456789</code>.
    string ProviderName = 2;
    // TRUE if server-side token validation is enabled for the identity providerâ€™s token.
    boolean ServerSideTokenCheck = 3;
}



repeated CognitoIdentityProvider CognitoIdentityProviderList = 1





message ConcurrentModificationException {
    // The message returned by a ConcurrentModificationException.
    string message = 1;
}

message CreateIdentityPoolInput {
    // TRUE if the identity pool supports unauthenticated logins.
    boolean AllowUnauthenticatedIdentities = 1;
    // An array of Amazon Cognito Identity user pools and their client IDs.
    array CognitoIdentityProviders = 2;
    // <p>The "domain" by which Cognito will refer to your users. This name acts as a placeholder that allows your backend and the Cognito service to communicate about the developer provider. For the <code>DeveloperProviderName</code>, you can use letters as well as period (<code>.</code>), underscore (<code>_</code>), and dash (<code>-</code>).</p> <p>Once you have set a developer provider name, you cannot change it. Please take care in setting this parameter.</p>
    string DeveloperProviderName = 3;
    // A string that you provide.
    string IdentityPoolName = 4;
    // A list of OpendID Connect provider ARNs.
    array OpenIdConnectProviderARNs = 5;
    // An array of Amazon Resource Names (ARNs) of the SAML provider for your identity pool.
    array SamlProviderARNs = 6;
    // Optional key:value pairs mapping provider names to provider app IDs.
    array SupportedLoginProviders = 7;
}

message Credentials {
    // The Access Key portion of the credentials.
    string AccessKeyId = 1;
    // The date at which these credentials will expire.
    string Expiration = 2;
    // The Secret Access Key portion of the credentials
    string SecretKey = 3;
    // The Session Token portion of the credentials
    string SessionToken = 4;
}

message DeleteIdentitiesInput {
    // A list of 1-60 identities that you want to delete.
    array IdentityIdsToDelete = 1;
}

message DeleteIdentitiesResponse {
    // An array of UnprocessedIdentityId objects, each of which contains an ErrorCode and IdentityId.
    array UnprocessedIdentityIds = 1;
}

message DeleteIdentityPoolInput {
    // An identity pool ID in the format REGION:GUID.
    string IdentityPoolId = 1;
}

message DescribeIdentityInput {
    // A unique identifier in the format REGION:GUID.
    string IdentityId = 1;
}

message DescribeIdentityPoolInput {
    // An identity pool ID in the format REGION:GUID.
    string IdentityPoolId = 1;
}

message DeveloperUserAlreadyRegisteredException {
    // This developer user identifier is already registered with Cognito.
    string message = 1;
}



repeated string DeveloperUserIdentifierList = 1

enum ErrorCode {
    ACCESSDENIED = 0;
    INTERNALSERVERERROR = 1;
}

message ExternalServiceException {
    // The message returned by an ExternalServiceException
    string message = 1;
}

message GetCredentialsForIdentityInput {
    // The Amazon Resource Name (ARN) of the role to be assumed when multiple roles were received in the token from the identity provider. For example, a SAML-based identity provider. This parameter is optional for identity providers that do not support role customization.
    string CustomRoleArn = 1;
    // A unique identifier in the format REGION:GUID.
    string IdentityId = 2;
    // A set of optional name-value pairs that map provider names to provider tokens.
    array Logins = 3;
}

message GetCredentialsForIdentityResponse {
    // Credentials for the provided identity ID.
    Credentials Credentials = 1;
    // A unique identifier in the format REGION:GUID.
    string IdentityId = 2;
}

message GetIdInput {
    // A standard AWS account ID (9+ digits).
    string AccountId = 1;
    // An identity pool ID in the format REGION:GUID.
    string IdentityPoolId = 2;
    // <p>A set of optional name-value pairs that map provider names to provider tokens. The available provider names for <code>Logins</code> are as follows:</p> <ul> <li> <p>Facebook: <code>graph.facebook.com</code> </p> </li> <li> <p>Amazon Cognito Identity Provider: <code>cognito-idp.us-east-1.amazonaws.com/us-east-1_123456789</code> </p> </li> <li> <p>Google: <code>accounts.google.com</code> </p> </li> <li> <p>Amazon: <code>www.amazon.com</code> </p> </li> <li> <p>Twitter: <code>api.twitter.com</code> </p> </li> <li> <p>Digits: <code>www.digits.com</code> </p> </li> </ul>
    array Logins = 3;
}

message GetIdResponse {
    // A unique identifier in the format REGION:GUID.
    string IdentityId = 1;
}

message GetIdentityPoolRolesInput {
    // An identity pool ID in the format REGION:GUID.
    string IdentityPoolId = 1;
}

message GetIdentityPoolRolesResponse {
    // An identity pool ID in the format REGION:GUID.
    string IdentityPoolId = 1;
    // How users for a specific identity provider are to mapped to roles. This is a String-to-<a>RoleMapping</a> object map. The string identifies the identity provider, for example, "graph.facebook.com" or "cognito-idp-east-1.amazonaws.com/us-east-1_abcdefghi:app_client_id".
    array RoleMappings = 2;
    // The map of roles associated with this pool. Currently only authenticated and unauthenticated roles are supported.
    array Roles = 3;
}

message GetOpenIdTokenForDeveloperIdentityInput {
    // A unique identifier in the format REGION:GUID.
    string IdentityId = 1;
    // An identity pool ID in the format REGION:GUID.
    string IdentityPoolId = 2;
    // A set of optional name-value pairs that map provider names to provider tokens. Each name-value pair represents a user from a public provider or developer provider. If the user is from a developer provider, the name-value pair will follow the syntax <code>"developer_provider_name": "developer_user_identifier"</code>. The developer provider is the "domain" by which Cognito will refer to your users; you provided this domain while creating/updating the identity pool. The developer user identifier is an identifier from your backend that uniquely identifies a user. When you create an identity pool, you can specify the supported logins.
    array Logins = 3;
    // The expiration time of the token, in seconds. You can specify a custom expiration time for the token so that you can cache it. If you don't provide an expiration time, the token is valid for 15 minutes. You can exchange the token with Amazon STS for temporary AWS credentials, which are valid for a maximum of one hour. The maximum token duration you can set is 24 hours. You should take care in setting the expiration time for a token, as there are significant security implications: an attacker could use a leaked token to access your AWS resources for the token's duration.
    integer TokenDuration = 4;
}

message GetOpenIdTokenForDeveloperIdentityResponse {
    // A unique identifier in the format REGION:GUID.
    string IdentityId = 1;
    // An OpenID token.
    string Token = 2;
}

message GetOpenIdTokenInput {
    // A unique identifier in the format REGION:GUID.
    string IdentityId = 1;
    // A set of optional name-value pairs that map provider names to provider tokens. When using graph.facebook.com and www.amazon.com, supply the access_token returned from the provider's authflow. For accounts.google.com, an Amazon Cognito Identity Provider, or any other OpenId Connect provider, always include the <code>id_token</code>.
    array Logins = 2;
}

message GetOpenIdTokenResponse {
    // A unique identifier in the format REGION:GUID. Note that the IdentityId returned may not match the one passed on input.
    string IdentityId = 1;
    // An OpenID token, valid for 15 minutes.
    string Token = 2;
}



repeated IdentityDescription IdentitiesList = 1

message IdentityDescription {
    // Date on which the identity was created.
    string CreationDate = 1;
    // A unique identifier in the format REGION:GUID.
    string IdentityId = 2;
    // Date on which the identity was last modified.
    string LastModifiedDate = 3;
    // A set of optional name-value pairs that map provider names to provider tokens.
    array Logins = 4;
}



repeated string IdentityIdList = 1

message IdentityPool {
    // TRUE if the identity pool supports unauthenticated logins.
    boolean AllowUnauthenticatedIdentities = 1;
    // A list representing an Amazon Cognito Identity User Pool and its client ID.
    array CognitoIdentityProviders = 2;
    // The "domain" by which Cognito will refer to your users.
    string DeveloperProviderName = 3;
    // An identity pool ID in the format REGION:GUID.
    string IdentityPoolId = 4;
    // A string that you provide.
    string IdentityPoolName = 5;
    // A list of OpendID Connect provider ARNs.
    array OpenIdConnectProviderARNs = 6;
    // An array of Amazon Resource Names (ARNs) of the SAML provider for your identity pool.
    array SamlProviderARNs = 7;
    // Optional key:value pairs mapping provider names to provider app IDs.
    array SupportedLoginProviders = 8;
}

message IdentityPoolShortDescription {
    // An identity pool ID in the format REGION:GUID.
    string IdentityPoolId = 1;
    // A string that you provide.
    string IdentityPoolName = 2;
}



repeated IdentityPoolShortDescription IdentityPoolsList = 1







message IdentityProvider {
    string key = 1;
    string value = 2;
}
repeated IdentityProvider IdentityProviders = 1

message InternalErrorException {
    // The message returned by an InternalErrorException.
    string message = 1;
}

message InvalidIdentityPoolConfigurationException {
    // The message returned for an <code>InvalidIdentityPoolConfigurationException</code>
    string message = 1;
}

message InvalidParameterException {
    // The message returned by an InvalidParameterException.
    string message = 1;
}

message LimitExceededException {
    // The message returned by a LimitExceededException.
    string message = 1;
}

message ListIdentitiesInput {
    // An optional boolean parameter that allows you to hide disabled identities. If omitted, the ListIdentities API will include disabled identities in the response.
    boolean HideDisabled = 1;
    // An identity pool ID in the format REGION:GUID.
    string IdentityPoolId = 2;
    // The maximum number of identities to return.
    integer MaxResults = 3;
    // A pagination token.
    string NextToken = 4;
}

message ListIdentitiesResponse {
    // An object containing a set of identities and associated mappings.
    array Identities = 1;
    // An identity pool ID in the format REGION:GUID.
    string IdentityPoolId = 2;
    // A pagination token.
    string NextToken = 3;
}

message ListIdentityPoolsInput {
    // The maximum number of identities to return.
    integer MaxResults = 1;
    // A pagination token.
    string NextToken = 2;
}

message ListIdentityPoolsResponse {
    // The identity pools returned by the ListIdentityPools action.
    array IdentityPools = 1;
    // A pagination token.
    string NextToken = 2;
}

repeated string LoginsList = 1

message LoginsMap {
    string key = 1;
    string value = 2;
}
repeated LoginsMap LoginsMap = 1

message LookupDeveloperIdentityInput {
    // A unique ID used by your backend authentication process to identify a user. Typically, a developer identity provider would issue many developer user identifiers, in keeping with the number of users.
    string DeveloperUserIdentifier = 1;
    // A unique identifier in the format REGION:GUID.
    string IdentityId = 2;
    // An identity pool ID in the format REGION:GUID.
    string IdentityPoolId = 3;
    // The maximum number of identities to return.
    integer MaxResults = 4;
    // A pagination token. The first call you make will have <code>NextToken</code> set to null. After that the service will return <code>NextToken</code> values as needed. For example, let's say you make a request with <code>MaxResults</code> set to 10, and there are 20 matches in the database. The service will return a pagination token as a part of the response. This token can be used to call the API again and get results starting from the 11th match.
    string NextToken = 5;
}

message LookupDeveloperIdentityResponse {
    // This is the list of developer user identifiers associated with an identity ID. Cognito supports the association of multiple developer user identifiers with an identity ID.
    array DeveloperUserIdentifierList = 1;
    // A unique identifier in the format REGION:GUID.
    string IdentityId = 2;
    // A pagination token. The first call you make will have <code>NextToken</code> set to null. After that the service will return <code>NextToken</code> values as needed. For example, let's say you make a request with <code>MaxResults</code> set to 10, and there are 20 matches in the database. The service will return a pagination token as a part of the response. This token can be used to call the API again and get results starting from the 11th match.
    string NextToken = 3;
}

message MappingRule {
    // The claim name that must be present in the token, for example, "isAdmin" or "paid".
    string Claim = 1;
    // The match condition that specifies how closely the claim value in the IdP token must match <code>Value</code>.
    MappingRuleMatchType MatchType = 2;
    // The role ARN.
    string RoleARN = 3;
    // A brief string that the claim must match, for example, "paid" or "yes".
    string Value = 4;
}

enum MappingRuleMatchType {
    EQUALS = 0;
    CONTAINS = 1;
    STARTSWITH = 2;
    NOTEQUAL = 3;
}

repeated MappingRule MappingRulesList = 1

message MergeDeveloperIdentitiesInput {
    // User identifier for the destination user. The value should be a <code>DeveloperUserIdentifier</code>.
    string DestinationUserIdentifier = 1;
    // The "domain" by which Cognito will refer to your users. This is a (pseudo) domain name that you provide while creating an identity pool. This name acts as a placeholder that allows your backend and the Cognito service to communicate about the developer provider. For the <code>DeveloperProviderName</code>, you can use letters as well as period (.), underscore (_), and dash (-).
    string DeveloperProviderName = 2;
    // An identity pool ID in the format REGION:GUID.
    string IdentityPoolId = 3;
    // User identifier for the source user. The value should be a <code>DeveloperUserIdentifier</code>.
    string SourceUserIdentifier = 4;
}

message MergeDeveloperIdentitiesResponse {
    // A unique identifier in the format REGION:GUID.
    string IdentityId = 1;
}

message NotAuthorizedException {
    // The message returned by a NotAuthorizedException
    string message = 1;
}

repeated string OIDCProviderList = 1







message ResourceConflictException {
    // The message returned by a ResourceConflictException.
    string message = 1;
}

message ResourceNotFoundException {
    // The message returned by a ResourceNotFoundException.
    string message = 1;
}

message RoleMapping {
    // <p>If you specify Token or Rules as the <code>Type</code>, <code>AmbiguousRoleResolution</code> is required.</p> <p>Specifies the action to be taken if either no rules match the claim value for the <code>Rules</code> type, or there is no <code>cognito:preferred_role</code> claim and there are multiple <code>cognito:roles</code> matches for the <code>Token</code> type.</p>
    AmbiguousRoleResolutionType AmbiguousRoleResolution = 1;
    // <p>The rules to be used for mapping users to roles.</p> <p>If you specify Rules as the role mapping type, <code>RulesConfiguration</code> is required.</p>
    RulesConfigurationType RulesConfiguration = 2;
    // The role mapping type. Token will use <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims from the Cognito identity provider token to map groups to roles. Rules will attempt to match claims from the token to map to a role.
    RoleMappingType Type = 3;
}

message RoleMappingMap {
    string key = 1;
    RoleMapping value = 2;
}
repeated RoleMappingMap RoleMappingMap = 1

enum RoleMappingType {
    TOKEN = 0;
    RULES = 1;
}

message RolesMap {
    string key = 1;
    string value = 2;
}
repeated RolesMap RolesMap = 1

message RulesConfigurationType {
    // <p>An array of rules. You can specify up to 25 rules per identity provider.</p> <p>Rules are evaluated in order. The first one to match specifies the role.</p>
    array Rules = 1;
}

repeated string SAMLProviderList = 1





message SetIdentityPoolRolesInput {
    // An identity pool ID in the format REGION:GUID.
    string IdentityPoolId = 1;
    // <p>How users for a specific identity provider are to mapped to roles. This is a string to <a>RoleMapping</a> object map. The string identifies the identity provider, for example, "graph.facebook.com" or "cognito-idp-east-1.amazonaws.com/us-east-1_abcdefghi:app_client_id".</p> <p>Up to 25 rules can be specified per identity provider.</p>
    array RoleMappings = 2;
    // The map of roles associated with this pool. For a given role, the key will be either "authenticated" or "unauthenticated" and the value will be the Role ARN.
    array Roles = 3;
}

message TooManyRequestsException {
    // Message returned by a TooManyRequestsException
    string message = 1;
}

message UnlinkDeveloperIdentityInput {
    // The "domain" by which Cognito will refer to your users.
    string DeveloperProviderName = 1;
    // A unique ID used by your backend authentication process to identify a user.
    string DeveloperUserIdentifier = 2;
    // A unique identifier in the format REGION:GUID.
    string IdentityId = 3;
    // An identity pool ID in the format REGION:GUID.
    string IdentityPoolId = 4;
}

message UnlinkIdentityInput {
    // A unique identifier in the format REGION:GUID.
    string IdentityId = 1;
    // A set of optional name-value pairs that map provider names to provider tokens.
    array Logins = 2;
    // Provider names to unlink from this identity.
    array LoginsToRemove = 3;
}

message UnprocessedIdentityId {
    // The error code indicating the type of error that occurred.
    ErrorCode ErrorCode = 1;
    // A unique identifier in the format REGION:GUID.
    string IdentityId = 2;
}

repeated UnprocessedIdentityId UnprocessedIdentityIdList = 1

















service AmazonCognitoIdentityService {
    // <p>Creates a new identity pool. The identity pool is a store of user identity information that is specific to your AWS account. The limit on identity pools is 60 per account. The keys for <code>SupportedLoginProviders</code> are as follows:</p> <ul> <li> <p>Facebook: <code>graph.facebook.com</code> </p> </li> <li> <p>Google: <code>accounts.google.com</code> </p> </li> <li> <p>Amazon: <code>www.amazon.com</code> </p> </li> <li> <p>Twitter: <code>api.twitter.com</code> </p> </li> <li> <p>Digits: <code>www.digits.com</code> </p> </li> </ul> <p>You must use AWS Developer credentials to call this API.</p>
    rpc Post(PostRequest) returns (IdentityPool) {
      option (google.api.http) = {
        post: "//"
        body: "body"
      };
    }
    // <p>Deletes identities from an identity pool. You can specify a list of 1-60 identities that you want to delete.</p> <p>You must use AWS Developer credentials to call this API.</p>
    rpc Post#DeleteIdentities(Post#DeleteIdentitiesRequest) returns (DeleteIdentitiesResponse) {
      option (google.api.http) = {
        post: "//#DeleteIdentities"
        body: "body"
      };
    }
    // <p>Deletes a user pool. Once a pool is deleted, users will not be able to authenticate with the pool.</p> <p>You must use AWS Developer credentials to call this API.</p>
    rpc Post#DeleteIdentityPool(Post#DeleteIdentityPoolRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#DeleteIdentityPool"
        body: "body"
      };
    }
    // <p>Returns metadata related to the given identity, including when the identity was created and any associated linked logins.</p> <p>You must use AWS Developer credentials to call this API.</p>
    rpc Post#DescribeIdentity(Post#DescribeIdentityRequest) returns (IdentityDescription) {
      option (google.api.http) = {
        post: "//#DescribeIdentity"
        body: "body"
      };
    }
    // <p>Gets details about a particular identity pool, including the pool name, ID description, creation date, and current number of users.</p> <p>You must use AWS Developer credentials to call this API.</p>
    rpc Post#DescribeIdentityPool(Post#DescribeIdentityPoolRequest) returns (IdentityPool) {
      option (google.api.http) = {
        post: "//#DescribeIdentityPool"
        body: "body"
      };
    }
    // <p>Returns credentials for the provided identity ID. Any provided logins will be validated against supported login providers. If the token is for cognito-identity.amazonaws.com, it will be passed through to AWS Security Token Service with the appropriate role for the token.</p> <p>This is a public API. You do not need any credentials to call this API.</p>
    rpc Post#GetCredentialsForIdentity(Post#GetCredentialsForIdentityRequest) returns (GetCredentialsForIdentityResponse) {
      option (google.api.http) = {
        post: "//#GetCredentialsForIdentity"
        body: "body"
      };
    }
    // <p>Generates (or retrieves) a Cognito ID. Supplying multiple logins will create an implicit linked account.</p> <p>This is a public API. You do not need any credentials to call this API.</p>
    rpc Post#GetId(Post#GetIdRequest) returns (GetIdResponse) {
      option (google.api.http) = {
        post: "//#GetId"
        body: "body"
      };
    }
    // <p>Gets the roles for an identity pool.</p> <p>You must use AWS Developer credentials to call this API.</p>
    rpc Post#GetIdentityPoolRoles(Post#GetIdentityPoolRolesRequest) returns (GetIdentityPoolRolesResponse) {
      option (google.api.http) = {
        post: "//#GetIdentityPoolRoles"
        body: "body"
      };
    }
    // <p>Gets an OpenID token, using a known Cognito ID. This known Cognito ID is returned by <a>GetId</a>. You can optionally add additional logins for the identity. Supplying multiple logins creates an implicit link.</p> <p>The OpenId token is valid for 15 minutes.</p> <p>This is a public API. You do not need any credentials to call this API.</p>
    rpc Post#GetOpenIdToken(Post#GetOpenIdTokenRequest) returns (GetOpenIdTokenResponse) {
      option (google.api.http) = {
        post: "//#GetOpenIdToken"
        body: "body"
      };
    }
    // <p>Registers (or retrieves) a Cognito <code>IdentityId</code> and an OpenID Connect token for a user authenticated by your backend authentication process. Supplying multiple logins will create an implicit linked account. You can only specify one developer provider as part of the <code>Logins</code> map, which is linked to the identity pool. The developer provider is the "domain" by which Cognito will refer to your users.</p> <p>You can use <code>GetOpenIdTokenForDeveloperIdentity</code> to create a new identity and to link new logins (that is, user credentials issued by a public provider or developer provider) to an existing identity. When you want to create a new identity, the <code>IdentityId</code> should be null. When you want to associate a new login with an existing authenticated/unauthenticated identity, you can do so by providing the existing <code>IdentityId</code>. This API will create the identity in the specified <code>IdentityPoolId</code>.</p> <p>You must use AWS Developer credentials to call this API.</p>
    rpc Post#GetOpenIdTokenForDeveloperIdentity(Post#GetOpenIdTokenForDeveloperIdentityRequest) returns (GetOpenIdTokenForDeveloperIdentityResponse) {
      option (google.api.http) = {
        post: "//#GetOpenIdTokenForDeveloperIdentity"
        body: "body"
      };
    }
    // <p>Lists the identities in a pool.</p> <p>You must use AWS Developer credentials to call this API.</p>
    rpc Post#ListIdentities(Post#ListIdentitiesRequest) returns (ListIdentitiesResponse) {
      option (google.api.http) = {
        post: "//#ListIdentities"
        body: "body"
      };
    }
    // <p>Lists all of the Cognito identity pools registered for your account.</p> <p>You must use AWS Developer credentials to call this API.</p>
    rpc Post#ListIdentityPools(Post#ListIdentityPoolsRequest) returns (ListIdentityPoolsResponse) {
      option (google.api.http) = {
        post: "//#ListIdentityPools"
        body: "body"
      };
    }
    // <p>Retrieves the <code>IdentityID</code> associated with a <code>DeveloperUserIdentifier</code> or the list of <code>DeveloperUserIdentifier</code>s associated with an <code>IdentityId</code> for an existing identity. Either <code>IdentityID</code> or <code>DeveloperUserIdentifier</code> must not be null. If you supply only one of these values, the other value will be searched in the database and returned as a part of the response. If you supply both, <code>DeveloperUserIdentifier</code> will be matched against <code>IdentityID</code>. If the values are verified against the database, the response returns both values and is the same as the request. Otherwise a <code>ResourceConflictException</code> is thrown.</p> <p>You must use AWS Developer credentials to call this API.</p>
    rpc Post#LookupDeveloperIdentity(Post#LookupDeveloperIdentityRequest) returns (LookupDeveloperIdentityResponse) {
      option (google.api.http) = {
        post: "//#LookupDeveloperIdentity"
        body: "body"
      };
    }
    // <p>Merges two users having different <code>IdentityId</code>s, existing in the same identity pool, and identified by the same developer provider. You can use this action to request that discrete users be merged and identified as a single user in the Cognito environment. Cognito associates the given source user (<code>SourceUserIdentifier</code>) with the <code>IdentityId</code> of the <code>DestinationUserIdentifier</code>. Only developer-authenticated users can be merged. If the users to be merged are associated with the same public provider, but as two different users, an exception will be thrown.</p> <p>You must use AWS Developer credentials to call this API.</p>
    rpc Post#MergeDeveloperIdentities(Post#MergeDeveloperIdentitiesRequest) returns (MergeDeveloperIdentitiesResponse) {
      option (google.api.http) = {
        post: "//#MergeDeveloperIdentities"
        body: "body"
      };
    }
    // <p>Sets the roles for an identity pool. These roles are used when making calls to <a>GetCredentialsForIdentity</a> action.</p> <p>You must use AWS Developer credentials to call this API.</p>
    rpc Post#SetIdentityPoolRoles(Post#SetIdentityPoolRolesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#SetIdentityPoolRoles"
        body: "body"
      };
    }
    // <p>Unlinks a <code>DeveloperUserIdentifier</code> from an existing identity. Unlinked developer users will be considered new identities next time they are seen. If, for a given Cognito identity, you remove all federated identities as well as the developer user identifier, the Cognito identity becomes inaccessible.</p> <p>You must use AWS Developer credentials to call this API.</p>
    rpc Post#UnlinkDeveloperIdentity(Post#UnlinkDeveloperIdentityRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#UnlinkDeveloperIdentity"
        body: "body"
      };
    }
    // <p>Unlinks a federated identity from an existing account. Unlinked logins will be considered new identities next time they are seen. Removing the last linked login will make this identity inaccessible.</p> <p>This is a public API. You do not need any credentials to call this API.</p>
    rpc Post#UnlinkIdentity(Post#UnlinkIdentityRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#UnlinkIdentity"
        body: "body"
      };
    }
    // <p>Updates a user pool.</p> <p>You must use AWS Developer credentials to call this API.</p>
    rpc Post#UpdateIdentityPool(Post#UpdateIdentityPoolRequest) returns (IdentityPool) {
      option (google.api.http) = {
        post: "//#UpdateIdentityPool"
        body: "body"
      };
    }
}

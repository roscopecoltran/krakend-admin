syntax = "proto3";

import "google/api/annotations.proto";

package amazonrekognition;

message PostRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CompareFacesRequest body = 10;
}

message Post#CreateCollectionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateCollectionRequest body = 10;
}

message Post#DeleteCollectionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteCollectionRequest body = 10;
}

message Post#DeleteFacesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteFacesRequest body = 10;
}

message Post#DetectFacesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DetectFacesRequest body = 10;
}

message Post#DetectLabelsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DetectLabelsRequest body = 10;
}

message Post#DetectModerationLabelsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DetectModerationLabelsRequest body = 10;
}

message Post#GetCelebrityInfoRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetCelebrityInfoRequest body = 10;
}

message Post#IndexFacesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    IndexFacesRequest body = 10;
}

message Post#ListCollectionsRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    ListCollectionsRequest body = 12;
}

message Post#ListFacesRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    ListFacesRequest body = 12;
}

message Post#RecognizeCelebritiesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RecognizeCelebritiesRequest body = 10;
}

message Post#SearchFacesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    SearchFacesRequest body = 10;
}

message Post#SearchFacesByImageRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    SearchFacesByImageRequest body = 10;
}

message AccessDeniedException {
}

message AgeRange {
    // The highest estimated age.
    integer High = 1;
    // The lowest estimated age.
    integer Low = 2;
}

enum Attribute {
    DEFAULT = 0;
    ALL = 1;
}

repeated Attribute Attributes = 1

message Beard {
    // Level of confidence in the determination.
    number Confidence = 1;
    // Boolean value that indicates whether the face has beard or not.
    boolean Value = 2;
}

message BoundingBox {
    // Height of the bounding box as a ratio of the overall image height.
    number Height = 1;
    // Left coordinate of the bounding box as a ratio of overall image width.
    number Left = 2;
    // Top coordinate of the bounding box as a ratio of overall image height.
    number Top = 3;
    // Width of the bounding box as a ratio of the overall image width.
    number Width = 4;
}

message Celebrity {
    // Provides information about the celebrity's face, such as its location on the image.
    ComparedFace Face = 1;
    // A unique identifier for the celebrity.
    string Id = 2;
    // The confidence, in percentage, that Rekognition has that the recognized face is the celebrity.
    number MatchConfidence = 3;
    // The name of the celebrity.
    string Name = 4;
    // An array of URLs pointing to additional information about the celebrity. If there is no additional information about the celebrity, this list is empty.
    array Urls = 5;
}

repeated Celebrity CelebrityList = 1



repeated string CollectionIdList = 1

message CompareFacesMatch {
    // Provides face metadata (bounding box and confidence that the bounding box actually contains a face).
    ComparedFace Face = 1;
    // Level of confidence that the faces match.
    number Similarity = 2;
}

repeated CompareFacesMatch CompareFacesMatchList = 1

message CompareFacesRequest {
    // The minimum level of confidence in the face matches that a match must meet to be included in the <code>FaceMatches</code> array.
    number SimilarityThreshold = 1;
    // The source image, either as bytes or as an S3 object.
    Image SourceImage = 2;
    // The target image, either as bytes or as an S3 object.
    Image TargetImage = 3;
}

message CompareFacesResponse {
    // An array of faces in the target image that match the source image face. Each <code>CompareFacesMatch</code> object provides the bounding box, the confidence level that the bounding box contains a face, and the similarity score for the face in the bounding box and the face in the source image.
    array FaceMatches = 1;
    // The face in the source image that was used for comparison.
    ComparedSourceImageFace SourceImageFace = 2;
    // <p> The orientation of the source image (counterclockwise direction). If your application displays the source image, you can use this value to correct image orientation. The bounding box coordinates returned in <code>SourceImageFace</code> represent the location of the face before the image orientation is corrected. </p> <note> <p>If the source image is in .jpeg format, it might contain exchangeable image (Exif) metadata that includes the image's orientation. If the Exif metadata for the source image populates the orientation field, the value of <code>OrientationCorrection</code> is null and the <code>SourceImageFace</code> bounding box coordinates represent the location of the face after Exif metadata is used to correct the orientation. Images in .png format don't contain Exif metadata.</p> </note>
    OrientationCorrection SourceImageOrientationCorrection = 3;
    // <p> The orientation of the target image (in counterclockwise direction). If your application displays the target image, you can use this value to correct the orientation of the image. The bounding box coordinates returned in <code>FaceMatches</code> and <code>UnmatchedFaces</code> represent face locations before the image orientation is corrected. </p> <note> <p>If the target image is in .jpg format, it might contain Exif metadata that includes the orientation of the image. If the Exif metadata for the target image populates the orientation field, the value of <code>OrientationCorrection</code> is null and the bounding box coordinates in <code>FaceMatches</code> and <code>UnmatchedFaces</code> represent the location of the face after Exif metadata is used to correct the orientation. Images in .png format don't contain Exif metadata.</p> </note>
    OrientationCorrection TargetImageOrientationCorrection = 4;
    // An array of faces in the target image that did not match the source image face.
    array UnmatchedFaces = 5;
}

repeated ComparedFace CompareFacesUnmatchList = 1

message ComparedFace {
    // Bounding box of the face.
    BoundingBox BoundingBox = 1;
    // Level of confidence that what the bounding box contains is a face.
    number Confidence = 2;
    // An array of facial landmarks.
    array Landmarks = 3;
    // Indicates the pose of the face as determined by its pitch, roll, and yaw.
    Pose Pose = 4;
    // Identifies face image brightness and sharpness.
    ImageQuality Quality = 5;
}

repeated ComparedFace ComparedFaceList = 1

message ComparedSourceImageFace {
    // Bounding box of the face.
    BoundingBox BoundingBox = 1;
    // Confidence level that the selected bounding box contains a face.
    number Confidence = 2;
}

message CreateCollectionRequest {
    // ID for the collection that you are creating.
    string CollectionId = 1;
}

message CreateCollectionResponse {
    // Amazon Resource Name (ARN) of the collection. You can use this to manage permissions on your resources.
    string CollectionArn = 1;
    // HTTP status code indicating the result of the operation.
    integer StatusCode = 2;
}

message DeleteCollectionRequest {
    // ID of the collection to delete.
    string CollectionId = 1;
}

message DeleteCollectionResponse {
    // HTTP status code that indicates the result of the operation.
    integer StatusCode = 1;
}

message DeleteFacesRequest {
    // Collection from which to remove the specific faces.
    string CollectionId = 1;
    // An array of face IDs to delete.
    array FaceIds = 2;
}

message DeleteFacesResponse {
    // An array of strings (face IDs) of the faces that were deleted.
    array DeletedFaces = 1;
}

message DetectFacesRequest {
    // <p>An array of facial attributes you want to be returned. This can be the default list of attributes or all attributes. If you don't specify a value for <code>Attributes</code> or if you specify <code>["DEFAULT"]</code>, the API returns the following subset of facial attributes: <code>BoundingBox</code>, <code>Confidence</code>, <code>Pose</code>, <code>Quality</code> and <code>Landmarks</code>. If you provide <code>["ALL"]</code>, all facial attributes are returned but the operation will take longer to complete.</p> <p>If you provide both, <code>["ALL", "DEFAULT"]</code>, the service uses a logical AND operator to determine which attributes to return (in this case, all attributes). </p>
    array Attributes = 1;
    // The image in which you want to detect faces. You can specify a blob or an S3 object.
    Image Image = 2;
}

message DetectFacesResponse {
    // Details of each face found in the image.
    array FaceDetails = 1;
    // <p> The orientation of the input image (counter-clockwise direction). If your application displays the image, you can use this value to correct image orientation. The bounding box coordinates returned in <code>FaceDetails</code> represent face locations before the image orientation is corrected. </p> <note> <p>If the input image is in .jpeg format, it might contain exchangeable image (Exif) metadata that includes the image's orientation. If so, and the Exif metadata for the input image populates the orientation field, the value of <code>OrientationCorrection</code> is null and the <code>FaceDetails</code> bounding box coordinates represent face locations after Exif metadata is used to correct the image orientation. Images in .png format don't contain Exif metadata.</p> </note>
    OrientationCorrection OrientationCorrection = 2;
}

message DetectLabelsRequest {
    // The input image. You can provide a blob of image bytes or an S3 object.
    Image Image = 1;
    // Maximum number of labels you want the service to return in the response. The service returns the specified number of highest confidence labels.
    integer MaxLabels = 2;
    // <p>Specifies the minimum confidence level for the labels to return. Amazon Rekognition doesn't return any labels with confidence lower than this specified value.</p> <p>If <code>MinConfidence</code> is not specified, the operation returns labels with a confidence values greater than or equal to 50 percent.</p>
    number MinConfidence = 3;
}

message DetectLabelsResponse {
    // An array of labels for the real-world objects detected.
    array Labels = 1;
    // <p> The orientation of the input image (counter-clockwise direction). If your application displays the image, you can use this value to correct the orientation. If Amazon Rekognition detects that the input image was rotated (for example, by 90 degrees), it first corrects the orientation before detecting the labels. </p> <note> <p>If the input image Exif metadata populates the orientation field, Amazon Rekognition does not perform orientation correction and the value of OrientationCorrection will be null.</p> </note>
    OrientationCorrection OrientationCorrection = 2;
}

message DetectModerationLabelsRequest {
    // The input image as bytes or an S3 object.
    Image Image = 1;
    // <p>Specifies the minimum confidence level for the labels to return. Amazon Rekognition doesn't return any labels with a confidence level lower than this specified value.</p> <p>If you don't specify <code>MinConfidence</code>, the operation returns labels with confidence values greater than or equal to 50 percent.</p>
    number MinConfidence = 2;
}

message DetectModerationLabelsResponse {
    // An array of labels for explicit or suggestive adult content found in the image. The list includes the top-level label and each child label detected in the image. This is useful for filtering specific categories of content.
    array ModerationLabels = 1;
}

message Emotion {
    // Level of confidence in the determination.
    number Confidence = 1;
    // Type of emotion detected.
    EmotionName Type = 2;
}

enum EmotionName {
    HAPPY = 0;
    SAD = 1;
    ANGRY = 2;
    CONFUSED = 3;
    DISGUSTED = 4;
    SURPRISED = 5;
    CALM = 6;
    UNKNOWN = 7;
}

repeated Emotion Emotions = 1



message EyeOpen {
    // Level of confidence in the determination.
    number Confidence = 1;
    // Boolean value that indicates whether the eyes on the face are open.
    boolean Value = 2;
}

message Eyeglasses {
    // Level of confidence in the determination.
    number Confidence = 1;
    // Boolean value that indicates whether the face is wearing eye glasses or not.
    boolean Value = 2;
}

message Face {
    // Bounding box of the face.
    BoundingBox BoundingBox = 1;
    // Confidence level that the bounding box contains a face (and not a different object such as a tree).
    number Confidence = 2;
    // Identifier that you assign to all the faces in the input image.
    string ExternalImageId = 3;
    // Unique identifier that Amazon Rekognition assigns to the face.
    string FaceId = 4;
    // Unique identifier that Amazon Rekognition assigns to the input image.
    string ImageId = 5;
}

message FaceDetail {
    // The estimated age range, in years, for the face. Low represents the lowest estimated age and High represents the highest estimated age.
    AgeRange AgeRange = 1;
    // Indicates whether or not the face has a beard, and the confidence level in the determination.
    Beard Beard = 2;
    // Bounding box of the face.
    BoundingBox BoundingBox = 3;
    // Confidence level that the bounding box contains a face (and not a different object such as a tree).
    number Confidence = 4;
    // The emotions detected on the face, and the confidence level in the determination. For example, HAPPY, SAD, and ANGRY.
    array Emotions = 5;
    // Indicates whether or not the face is wearing eye glasses, and the confidence level in the determination.
    Eyeglasses Eyeglasses = 6;
    // Indicates whether or not the eyes on the face are open, and the confidence level in the determination.
    EyeOpen EyesOpen = 7;
    // Gender of the face and the confidence level in the determination.
    Gender Gender = 8;
    // Indicates the location of landmarks on the face.
    array Landmarks = 9;
    // Indicates whether or not the mouth on the face is open, and the confidence level in the determination.
    MouthOpen MouthOpen = 10;
    // Indicates whether or not the face has a mustache, and the confidence level in the determination.
    Mustache Mustache = 11;
    // Indicates the pose of the face as determined by its pitch, roll, and yaw.
    Pose Pose = 12;
    // Identifies image brightness and sharpness.
    ImageQuality Quality = 13;
    // Indicates whether or not the face is smiling, and the confidence level in the determination.
    Smile Smile = 14;
    // Indicates whether or not the face is wearing sunglasses, and the confidence level in the determination.
    Sunglasses Sunglasses = 15;
}

repeated FaceDetail FaceDetailList = 1



repeated string FaceIdList = 1

repeated Face FaceList = 1

message FaceMatch {
    // Describes the face properties such as the bounding box, face ID, image ID of the source image, and external image ID that you assigned.
    Face Face = 1;
    // Confidence in the match of this face with the input face.
    number Similarity = 2;
}

repeated FaceMatch FaceMatchList = 1

message FaceRecord {
    // Describes the face properties such as the bounding box, face ID, image ID of the input image, and external image ID that you assigned.
    Face Face = 1;
    // Structure containing attributes of the face that the algorithm detected.
    FaceDetail FaceDetail = 2;
}

repeated FaceRecord FaceRecordList = 1



message Gender {
    // Level of confidence in the determination.
    number Confidence = 1;
    // Gender of the face.
    GenderType Value = 2;
}

enum GenderType {
    MALE = 0;
    FEMALE = 1;
}

message GetCelebrityInfoRequest {
    // The ID for the celebrity. You get the celebrity ID from a call to the operation, which recognizes celebrities in an image.
    string Id = 1;
}

message GetCelebrityInfoResponse {
    // The name of the celebrity.
    string Name = 1;
    // An array of URLs pointing to additional celebrity information.
    array Urls = 2;
}

message Image {
    // Blob of image bytes up to 5 MBs.
    string Bytes = 1;
    // Identifies an S3 object as the image source.
    S3Object S3Object = 2;
}

message ImageQuality {
    // Value representing brightness of the face. The service returns a value between 0 and 100 (inclusive). A higher value indicates a brighter face image.
    number Brightness = 1;
    // Value representing sharpness of the face. The service returns a value between 0 and 100 (inclusive). A higher value indicates a sharper face image.
    number Sharpness = 2;
}

message ImageTooLargeException {
}

message IndexFacesRequest {
    // The ID of an existing collection to which you want to add the faces that are detected in the input images.
    string CollectionId = 1;
    // <p>An array of facial attributes that you want to be returned. This can be the default list of attributes or all attributes. If you don't specify a value for <code>Attributes</code> or if you specify <code>["DEFAULT"]</code>, the API returns the following subset of facial attributes: <code>BoundingBox</code>, <code>Confidence</code>, <code>Pose</code>, <code>Quality</code> and <code>Landmarks</code>. If you provide <code>["ALL"]</code>, all facial attributes are returned but the operation will take longer to complete.</p> <p>If you provide both, <code>["ALL", "DEFAULT"]</code>, the service uses a logical AND operator to determine which attributes to return (in this case, all attributes). </p>
    array DetectionAttributes = 2;
    // ID you want to assign to all the faces detected in the image.
    string ExternalImageId = 3;
    // The input image as bytes or an S3 object.
    Image Image = 4;
}

message IndexFacesResponse {
    // An array of faces detected and added to the collection. For more information, see <a>howitworks-index-faces</a>.
    array FaceRecords = 1;
    // <p>The orientation of the input image (counterclockwise direction). If your application displays the image, you can use this value to correct image orientation. The bounding box coordinates returned in <code>FaceRecords</code> represent face locations before the image orientation is corrected. </p> <note> <p>If the input image is in jpeg format, it might contain exchangeable image (Exif) metadata. If so, and the Exif metadata populates the orientation field, the value of <code>OrientationCorrection</code> is null and the bounding box coordinates in <code>FaceRecords</code> represent face locations after Exif metadata is used to correct the image orientation. Images in .png format don't contain Exif metadata.</p> </note>
    OrientationCorrection OrientationCorrection = 2;
}

message InternalServerError {
}

message InvalidImageFormatException {
}

message InvalidPaginationTokenException {
}

message InvalidParameterException {
}

message InvalidS3ObjectException {
}

message Label {
    // Level of confidence.
    number Confidence = 1;
    // The name (label) of the object.
    string Name = 2;
}

repeated Label Labels = 1

message Landmark {
    // Type of the landmark.
    LandmarkType Type = 1;
    // x-coordinate from the top left of the landmark expressed as the ratio of the width of the image. For example, if the images is 700x200 and the x-coordinate of the landmark is at 350 pixels, this value is 0.5.
    number X = 2;
    // y-coordinate from the top left of the landmark expressed as the ratio of the height of the image. For example, if the images is 700x200 and the y-coordinate of the landmark is at 100 pixels, this value is 0.5.
    number Y = 3;
}

enum LandmarkType {
    EYELEFT = 0;
    EYERIGHT = 1;
    NOSE = 2;
    MOUTHLEFT = 3;
    MOUTHRIGHT = 4;
    LEFTEYEBROWLEFT = 5;
    LEFTEYEBROWRIGHT = 6;
    LEFTEYEBROWUP = 7;
    RIGHTEYEBROWLEFT = 8;
    RIGHTEYEBROWRIGHT = 9;
    RIGHTEYEBROWUP = 10;
    LEFTEYELEFT = 11;
    LEFTEYERIGHT = 12;
    LEFTEYEUP = 13;
    LEFTEYEDOWN = 14;
    RIGHTEYELEFT = 15;
    RIGHTEYERIGHT = 16;
    RIGHTEYEUP = 17;
    RIGHTEYEDOWN = 18;
    NOSELEFT = 19;
    NOSERIGHT = 20;
    MOUTHUP = 21;
    MOUTHDOWN = 22;
    LEFTPUPIL = 23;
    RIGHTPUPIL = 24;
}

repeated Landmark Landmarks = 1

message ListCollectionsRequest {
    // Maximum number of collection IDs to return.
    integer MaxResults = 1;
    // Pagination token from the previous response.
    string NextToken = 2;
}

message ListCollectionsResponse {
    // An array of collection IDs.
    array CollectionIds = 1;
    // If the result is truncated, the response provides a <code>NextToken</code> that you can use in the subsequent request to fetch the next set of collection IDs.
    string NextToken = 2;
}

message ListFacesRequest {
    // ID of the collection from which to list the faces.
    string CollectionId = 1;
    // Maximum number of faces to return.
    integer MaxResults = 2;
    // If the previous response was incomplete (because there is more data to retrieve), Amazon Rekognition returns a pagination token in the response. You can use this pagination token to retrieve the next set of faces.
    string NextToken = 3;
}

message ListFacesResponse {
    // An array of <code>Face</code> objects.
    array Faces = 1;
    // If the response is truncated, Amazon Rekognition returns this token that you can use in the subsequent request to retrieve the next set of faces.
    string NextToken = 2;
}

message ModerationLabel {
    // <p>Specifies the confidence that Amazon Rekognition has that the label has been correctly identified.</p> <p>If you don't specify the <code>MinConfidence</code> parameter in the call to <code>DetectModerationLabels</code>, the operation returns labels with a confidence value greater than or equal to 50 percent.</p>
    number Confidence = 1;
    // The label name for the type of content detected in the image.
    string Name = 2;
    // The name for the parent label. Labels at the top-level of the hierarchy have the parent label <code>""</code>.
    string ParentName = 3;
}

repeated ModerationLabel ModerationLabels = 1

message MouthOpen {
    // Level of confidence in the determination.
    number Confidence = 1;
    // Boolean value that indicates whether the mouth on the face is open or not.
    boolean Value = 2;
}

message Mustache {
    // Level of confidence in the determination.
    number Confidence = 1;
    // Boolean value that indicates whether the face has mustache or not.
    boolean Value = 2;
}

enum OrientationCorrection {
    ROTATE_0 = 0;
    ROTATE_90 = 1;
    ROTATE_180 = 2;
    ROTATE_270 = 3;
}

message Pose {
    // Value representing the face rotation on the pitch axis.
    number Pitch = 1;
    // Value representing the face rotation on the roll axis.
    number Roll = 2;
    // Value representing the face rotation on the yaw axis.
    number Yaw = 3;
}

message ProvisionedThroughputExceededException {
}

message RecognizeCelebritiesRequest {
    // The input image to use for celebrity recognition.
    Image Image = 1;
}

message RecognizeCelebritiesResponse {
    // Details about each celebrity found in the image. Amazon Rekognition can detect a maximum of 15 celebrities in an image.
    array CelebrityFaces = 1;
    // <p>The orientation of the input image (counterclockwise direction). If your application displays the image, you can use this value to correct the orientation. The bounding box coordinates returned in <code>CelebrityFaces</code> and <code>UnrecognizedFaces</code> represent face locations before the image orientation is corrected. </p> <note> <p>If the input image is in .jpeg format, it might contain exchangeable image (Exif) metadata that includes the image's orientation. If so, and the Exif metadata for the input image populates the orientation field, the value of <code>OrientationCorrection</code> is null and the <code>CelebrityFaces</code> and <code>UnrecognizedFaces</code> bounding box coordinates represent face locations after Exif metadata is used to correct the image orientation. Images in .png format don't contain Exif metadata. </p> </note>
    OrientationCorrection OrientationCorrection = 2;
    // Details about each unrecognized face in the image.
    array UnrecognizedFaces = 3;
}

message ResourceAlreadyExistsException {
}

message ResourceNotFoundException {
}

message S3Object {
    // Name of the S3 bucket.
    string Bucket = 1;
    // S3 object key name.
    string Name = 2;
    // If the bucket is versioning enabled, you can specify the object version.
    string Version = 3;
}

message SearchFacesByImageRequest {
    // ID of the collection to search.
    string CollectionId = 1;
    // (Optional) Specifies the minimum confidence in the face match to return. For example, don't return any matches where confidence in matches is less than 70%.
    number FaceMatchThreshold = 2;
    // The input image as bytes or an S3 object.
    Image Image = 3;
    // Maximum number of faces to return. The operation returns the maximum number of faces with the highest confidence in the match.
    integer MaxFaces = 4;
}

message SearchFacesByImageResponse {
    // An array of faces that match the input face, along with the confidence in the match.
    array FaceMatches = 1;
    // The bounding box around the face in the input image that Amazon Rekognition used for the search.
    BoundingBox SearchedFaceBoundingBox = 2;
    // The level of confidence that the <code>searchedFaceBoundingBox</code>, contains a face.
    number SearchedFaceConfidence = 3;
}

message SearchFacesRequest {
    // ID of the collection the face belongs to.
    string CollectionId = 1;
    // ID of a face to find matches for in the collection.
    string FaceId = 2;
    // Optional value specifying the minimum confidence in the face match to return. For example, don't return any matches where confidence in matches is less than 70%.
    number FaceMatchThreshold = 3;
    // Maximum number of faces to return. The operation returns the maximum number of faces with the highest confidence in the match.
    integer MaxFaces = 4;
}

message SearchFacesResponse {
    // An array of faces that matched the input face, along with the confidence in the match.
    array FaceMatches = 1;
    // ID of the face that was searched for matches in a collection.
    string SearchedFaceId = 2;
}

message Smile {
    // Level of confidence in the determination.
    number Confidence = 1;
    // Boolean value that indicates whether the face is smiling or not.
    boolean Value = 2;
}

message Sunglasses {
    // Level of confidence in the determination.
    number Confidence = 1;
    // Boolean value that indicates whether the face is wearing sunglasses or not.
    boolean Value = 2;
}

message ThrottlingException {
}





repeated string Urls = 1

















service AmazonRekognitionService {
    // <p>Compares a face in the <i>source</i> input image with each face detected in the <i>target</i> input image. </p> <note> <p> If the source image contains multiple faces, the service detects the largest face and compares it with each face detected in the target image. </p> </note> <p>In response, the operation returns an array of face matches ordered by similarity score in descending order. For each face match, the response provides a bounding box of the face, facial landmarks, pose details (pitch, role, and yaw), quality (brightness and sharpness), and confidence value (indicating the level of confidence that the bounding box contains a face). The response also provides a similarity score, which indicates how closely the faces match. </p> <note> <p>By default, only faces with a similarity score of greater than or equal to 80% are returned in the response. You can change this value by specifying the <code>SimilarityThreshold</code> parameter.</p> </note> <p> <code>CompareFaces</code> also returns an array of faces that don't match the source image. For each face, it returns a bounding box, confidence value, landmarks, pose details, and quality. The response also returns information about the face in the source image, including the bounding box of the face and confidence value.</p> <p>If the image doesn't contain Exif metadata, <code>CompareFaces</code> returns orientation information for the source and target images. Use these values to display the images with the correct image orientation.</p> <note> <p> This is a stateless API operation. That is, data returned by this operation doesn't persist.</p> </note> <p>For an example, see <a>get-started-exercise-compare-faces</a>.</p> <p>This operation requires permissions to perform the <code>rekognition:CompareFaces</code> action.</p>
    rpc Post(PostRequest) returns (CompareFacesResponse) {
      option (google.api.http) = {
        post: "//"
        body: "body"
      };
    }
    // <p>Creates a collection in an AWS Region. You can add faces to the collection using the operation. </p> <p>For example, you might create collections, one for each of your application users. A user can then index faces using the <code>IndexFaces</code> operation and persist results in a specific collection. Then, a user can search the collection for faces in the user-specific container. </p> <note> <p>Collection names are case-sensitive.</p> </note> <p>For an example, see <a>example1</a>. </p> <p>This operation requires permissions to perform the <code>rekognition:CreateCollection</code> action.</p>
    rpc Post#CreateCollection(Post#CreateCollectionRequest) returns (CreateCollectionResponse) {
      option (google.api.http) = {
        post: "//#CreateCollection"
        body: "body"
      };
    }
    // <p>Deletes the specified collection. Note that this operation removes all faces in the collection. For an example, see <a>example1</a>.</p> <p>This operation requires permissions to perform the <code>rekognition:DeleteCollection</code> action.</p>
    rpc Post#DeleteCollection(Post#DeleteCollectionRequest) returns (DeleteCollectionResponse) {
      option (google.api.http) = {
        post: "//#DeleteCollection"
        body: "body"
      };
    }
    // <p>Deletes faces from a collection. You specify a collection ID and an array of face IDs to remove from the collection.</p> <p>This operation requires permissions to perform the <code>rekognition:DeleteFaces</code> action.</p>
    rpc Post#DeleteFaces(Post#DeleteFacesRequest) returns (DeleteFacesResponse) {
      option (google.api.http) = {
        post: "//#DeleteFaces"
        body: "body"
      };
    }
    // <p>Detects faces within an image (JPEG or PNG) that is provided as input.</p> <p> For each face detected, the operation returns face details including a bounding box of the face, a confidence value (that the bounding box contains a face), and a fixed set of attributes such as facial landmarks (for example, coordinates of eye and mouth), gender, presence of beard, sunglasses, etc. </p> <p>The face-detection algorithm is most effective on frontal faces. For non-frontal or obscured faces, the algorithm may not detect the faces or might detect faces with lower confidence. </p> <note> <p>This is a stateless API operation. That is, the operation does not persist any data.</p> </note> <p>For an example, see <a>get-started-exercise-detect-faces</a>.</p> <p>This operation requires permissions to perform the <code>rekognition:DetectFaces</code> action. </p>
    rpc Post#DetectFaces(Post#DetectFacesRequest) returns (DetectFacesResponse) {
      option (google.api.http) = {
        post: "//#DetectFaces"
        body: "body"
      };
    }
    // <p>Detects instances of real-world labels within an image (JPEG or PNG) provided as input. This includes objects like flower, tree, and table; events like wedding, graduation, and birthday party; and concepts like landscape, evening, and nature. For an example, see <a>get-started-exercise-detect-labels</a>.</p> <p> For each object, scene, and concept the API returns one or more labels. Each label provides the object name, and the level of confidence that the image contains the object. For example, suppose the input image has a lighthouse, the sea, and a rock. The response will include all three labels, one for each object. </p> <p> <code>{Name: lighthouse, Confidence: 98.4629}</code> </p> <p> <code>{Name: rock,Confidence: 79.2097}</code> </p> <p> <code> {Name: sea,Confidence: 75.061}</code> </p> <p> In the preceding example, the operation returns one label for each of the three objects. The operation can also return multiple labels for the same object in the image. For example, if the input image shows a flower (for example, a tulip), the operation might return the following three labels. </p> <p> <code>{Name: flower,Confidence: 99.0562}</code> </p> <p> <code>{Name: plant,Confidence: 99.0562}</code> </p> <p> <code>{Name: tulip,Confidence: 99.0562}</code> </p> <p>In this example, the detection algorithm more precisely identifies the flower as a tulip.</p> <p>You can provide the input image as an S3 object or as base64-encoded bytes. In response, the API returns an array of labels. In addition, the response also includes the orientation correction. Optionally, you can specify <code>MinConfidence</code> to control the confidence threshold for the labels returned. The default is 50%. You can also add the <code>MaxLabels</code> parameter to limit the number of labels returned. </p> <note> <p>If the object detected is a person, the operation doesn't provide the same facial details that the <a>DetectFaces</a> operation provides.</p> </note> <p>This is a stateless API operation. That is, the operation does not persist any data.</p> <p>This operation requires permissions to perform the <code>rekognition:DetectLabels</code> action. </p>
    rpc Post#DetectLabels(Post#DetectLabelsRequest) returns (DetectLabelsResponse) {
      option (google.api.http) = {
        post: "//#DetectLabels"
        body: "body"
      };
    }
    // <p>Detects explicit or suggestive adult content in a specified JPEG or PNG format image. Use <code>DetectModerationLabels</code> to moderate images depending on your requirements. For example, you might want to filter images that contain nudity, but not images containing suggestive content.</p> <p>To filter images, use the labels returned by <code>DetectModerationLabels</code> to determine which types of content are appropriate. For information about moderation labels, see <a>image-moderation</a>.</p>
    rpc Post#DetectModerationLabels(Post#DetectModerationLabelsRequest) returns (DetectModerationLabelsResponse) {
      option (google.api.http) = {
        post: "//#DetectModerationLabels"
        body: "body"
      };
    }
    // <p>Gets the name and additional information about a celebrity based on his or her Rekognition ID. The additional information is returned as an array of URLs. If there is no additional information about the celebrity, this list is empty. For more information, see <a>celebrity-recognition</a>.</p> <p>This operation requires permissions to perform the <code>rekognition:GetCelebrityInfo</code> action. </p>
    rpc Post#GetCelebrityInfo(Post#GetCelebrityInfoRequest) returns (GetCelebrityInfoResponse) {
      option (google.api.http) = {
        post: "//#GetCelebrityInfo"
        body: "body"
      };
    }
    // <p>Detects faces in the input image and adds them to the specified collection. </p> <p> Amazon Rekognition does not save the actual faces detected. Instead, the underlying detection algorithm first detects the faces in the input image, and for each face extracts facial features into a feature vector, and stores it in the back-end database. Amazon Rekognition uses feature vectors when performing face match and search operations using the and operations. </p> <p>If you provide the optional <code>externalImageID</code> for the input image you provided, Amazon Rekognition associates this ID with all faces that it detects. When you call the operation, the response returns the external ID. You can use this external image ID to create a client-side index to associate the faces with each image. You can then use the index to find all faces in an image. </p> <p>In response, the operation returns an array of metadata for all detected faces. This includes, the bounding box of the detected face, confidence value (indicating the bounding box contains a face), a face ID assigned by the service for each face that is detected and stored, and an image ID assigned by the service for the input image. If you request all facial attributes (using the <code>detectionAttributes</code> parameter, Amazon Rekognition returns detailed facial attributes such as facial landmarks (for example, location of eye and mount) and other facial attributes such gender. If you provide the same image, specify the same collection, and use the same external ID in the <code>IndexFaces</code> operation, Amazon Rekognition doesn't save duplicate face metadata. </p> <p>For an example, see <a>example2</a>.</p> <p>This operation requires permissions to perform the <code>rekognition:IndexFaces</code> action.</p>
    rpc Post#IndexFaces(Post#IndexFacesRequest) returns (IndexFacesResponse) {
      option (google.api.http) = {
        post: "//#IndexFaces"
        body: "body"
      };
    }
    // <p>Returns list of collection IDs in your account. If the result is truncated, the response also provides a <code>NextToken</code> that you can use in the subsequent request to fetch the next set of collection IDs.</p> <p>For an example, see <a>example1</a>.</p> <p>This operation requires permissions to perform the <code>rekognition:ListCollections</code> action.</p>
    rpc Post#ListCollections(Post#ListCollectionsRequest) returns (ListCollectionsResponse) {
      option (google.api.http) = {
        post: "//#ListCollections"
        body: "body"
      };
    }
    // <p>Returns metadata for faces in the specified collection. This metadata includes information such as the bounding box coordinates, the confidence (that the bounding box contains a face), and face ID. For an example, see <a>example3</a>. </p> <p>This operation requires permissions to perform the <code>rekognition:ListFaces</code> action.</p>
    rpc Post#ListFaces(Post#ListFacesRequest) returns (ListFacesResponse) {
      option (google.api.http) = {
        post: "//#ListFaces"
        body: "body"
      };
    }
    // <p>Returns an array of celebrities recognized in the input image. The image is passed either as base64-encoded image bytes or as a reference to an image in an Amazon S3 bucket. The image must be either a PNG or JPEG formatted file. For more information, see <a>celebrity-recognition</a>. </p> <p> <code>RecognizeCelebrities</code> returns the 15 largest faces in the image. It lists recognized celebrities in the <code>CelebrityFaces</code> list and unrecognized faces in the <code>UnrecognizedFaces</code> list. The operation doesn't return celebrities whose face sizes are smaller than the largest 15 faces in the image.</p> <p>For each celebrity recognized, the API returns a <code>Celebrity</code> object. The <code>Celebrity</code> object contains the celebrity name, ID, URL links to additional information, match confidence, and a <code>ComparedFace</code> object that you can use to locate the celebrity's face on the image.</p> <p>Rekognition does not retain information about which images a celebrity has been recognized in. Your application must store this information and use the <code>Celebrity</code> ID property as a unique identifier for the celebrity. If you don't store the celebrity name or additional information URLs returned by <code>RecognizeCelebrities</code>, you will need the ID to identify the celebrity in a call to the operation.</p> <p>For an example, see <a>recognize-celebrities-tutorial</a>.</p> <p>This operation requires permissions to perform the <code>rekognition:RecognizeCelebrities</code> operation.</p>
    rpc Post#RecognizeCelebrities(Post#RecognizeCelebritiesRequest) returns (RecognizeCelebritiesResponse) {
      option (google.api.http) = {
        post: "//#RecognizeCelebrities"
        body: "body"
      };
    }
    // <p>For a given input face ID, searches for matching faces in the collection the face belongs to. You get a face ID when you add a face to the collection using the <a>IndexFaces</a> operation. The operation compares the features of the input face with faces in the specified collection. </p> <note> <p>You can also search faces without indexing faces by using the <code>SearchFacesByImage</code> operation.</p> </note> <p> The operation response returns an array of faces that match, ordered by similarity score with the highest similarity first. More specifically, it is an array of metadata for each face match that is found. Along with the metadata, the response also includes a <code>confidence</code> value for each face match, indicating the confidence that the specific face matches the input face. </p> <p>For an example, see <a>example3</a>.</p> <p>This operation requires permissions to perform the <code>rekognition:SearchFaces</code> action.</p>
    rpc Post#SearchFaces(Post#SearchFacesRequest) returns (SearchFacesResponse) {
      option (google.api.http) = {
        post: "//#SearchFaces"
        body: "body"
      };
    }
    // <p>For a given input image, first detects the largest face in the image, and then searches the specified collection for matching faces. The operation compares the features of the input face with faces in the specified collection. </p> <note> <p> To search for all faces in an input image, you might first call the operation, and then use the face IDs returned in subsequent calls to the operation. </p> <p> You can also call the <code>DetectFaces</code> operation and use the bounding boxes in the response to make face crops, which then you can pass in to the <code>SearchFacesByImage</code> operation. </p> </note> <p> The response returns an array of faces that match, ordered by similarity score with the highest similarity first. More specifically, it is an array of metadata for each face match found. Along with the metadata, the response also includes a <code>similarity</code> indicating how similar the face is to the input face. In the response, the operation also returns the bounding box (and a confidence level that the bounding box contains a face) of the face that Amazon Rekognition used for the input image. </p> <p>For an example, see <a>example3</a>.</p> <p>This operation requires permissions to perform the <code>rekognition:SearchFacesByImage</code> action.</p>
    rpc Post#SearchFacesByImage(Post#SearchFacesByImageRequest) returns (SearchFacesByImageResponse) {
      option (google.api.http) = {
        post: "//#SearchFacesByImage"
        body: "body"
      };
    }
}

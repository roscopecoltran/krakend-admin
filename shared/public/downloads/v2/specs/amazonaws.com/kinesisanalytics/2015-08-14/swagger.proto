syntax = "proto3";

import "google/api/annotations.proto";

package amazonkinesisanalytics;

message PostRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AddApplicationCloudWatchLoggingOptionRequest body = 10;
}

message Post#AddApplicationInputRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AddApplicationInputRequest body = 10;
}

message Post#AddApplicationOutputRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AddApplicationOutputRequest body = 10;
}

message Post#AddApplicationReferenceDataSourceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AddApplicationReferenceDataSourceRequest body = 10;
}

message Post#CreateApplicationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateApplicationRequest body = 10;
}

message Post#DeleteApplicationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteApplicationRequest body = 10;
}

message Post#DeleteApplicationCloudWatchLoggingOptionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteApplicationCloudWatchLoggingOptionRequest body = 10;
}

message Post#DeleteApplicationOutputRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteApplicationOutputRequest body = 10;
}

message Post#DeleteApplicationReferenceDataSourceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteApplicationReferenceDataSourceRequest body = 10;
}

message Post#DescribeApplicationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeApplicationRequest body = 10;
}

message Post#DiscoverInputSchemaRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DiscoverInputSchemaRequest body = 10;
}

message Post#ListApplicationsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListApplicationsRequest body = 10;
}

message Post#StartApplicationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StartApplicationRequest body = 10;
}

message Post#StopApplicationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StopApplicationRequest body = 10;
}

message Post#UpdateApplicationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateApplicationRequest body = 10;
}

message AddApplicationCloudWatchLoggingOptionRequest {
    // The Kinesis Analytics application name.
    string ApplicationName = 1;
    // Provides the CloudWatch log stream Amazon Resource Name (ARN) and the IAM role ARN. Note: To write application messages to CloudWatch, the IAM role that is used must have the <code>PutLogEvents</code> policy action enabled.
    CloudWatchLoggingOption CloudWatchLoggingOption = 2;
    // The version ID of the Kinesis Analytics application.
    integer CurrentApplicationVersionId = 3;
}

message AddApplicationCloudWatchLoggingOptionResponse {
}

message AddApplicationInputRequest {
    // Name of your existing Amazon Kinesis Analytics application to which you want to add the streaming source.
    string ApplicationName = 1;
    // Current version of your Amazon Kinesis Analytics application. You can use the <a>DescribeApplication</a> operation to find the current application version.
    integer CurrentApplicationVersionId = 2;
    // <p/>
    Input Input = 3;
}

message AddApplicationInputResponse {
}

message AddApplicationOutputRequest {
    // Name of the application to which you want to add the output configuration.
    string ApplicationName = 1;
    // Version of the application to which you want add the output configuration. You can use the <a>DescribeApplication</a> operation to get the current application version. If the version specified is not the current version, the <code>ConcurrentModificationException</code> is returned.
    integer CurrentApplicationVersionId = 2;
    // An array of objects, each describing one output configuration. In the output configuration, you specify the name of an in-application stream, a destination (that is, an Amazon Kinesis stream or an Amazon Kinesis Firehose delivery stream), and record the formation to use when writing to the destination.
    Output Output = 3;
}

message AddApplicationOutputResponse {
}

message AddApplicationReferenceDataSourceRequest {
    // Name of an existing application.
    string ApplicationName = 1;
    // Version of the application for which you are adding the reference data source. You can use the <a>DescribeApplication</a> operation to get the current application version. If the version specified is not the current version, the <code>ConcurrentModificationException</code> is returned.
    integer CurrentApplicationVersionId = 2;
    // The reference data source can be an object in your Amazon S3 bucket. Amazon Kinesis Analytics reads the object and copies the data into the in-application table that is created. You provide an S3 bucket, object key name, and the resulting in-application table that is created. You must also provide an IAM role with the necessary permissions that Amazon Kinesis Analytics can assume to read the object from your S3 bucket on your behalf.
    ReferenceDataSource ReferenceDataSource = 3;
}

message AddApplicationReferenceDataSourceResponse {
}

message ApplicationDetail {
    // ARN of the application.
    string ApplicationARN = 1;
    // Returns the application code that you provided to perform data analysis on any of the in-application streams in your application.
    string ApplicationCode = 2;
    // Description of the application.
    string ApplicationDescription = 3;
    // Name of the application.
    string ApplicationName = 4;
    // Status of the application.
    ApplicationStatus ApplicationStatus = 5;
    // Provides the current application version.
    integer ApplicationVersionId = 6;
    // Describes the CloudWatch log streams that are configured to receive application messages. For more information about using CloudWatch log streams with Amazon Kinesis Analytics applications, see <a href="http://docs.aws.amazon.com/kinesisanalytics/latest/dev/cloudwatch-logs.html">Working with Amazon CloudWatch Logs</a>.
    array CloudWatchLoggingOptionDescriptions = 7;
    // Timestamp when the application version was created.
    string CreateTimestamp = 8;
    // Describes the application input configuration. For more information, see <a href="http://docs.aws.amazon.com/kinesisanalytics/latest/dev/how-it-works-input.html">Configuring Application Input</a>.
    array InputDescriptions = 9;
    // Timestamp when the application was last updated.
    string LastUpdateTimestamp = 10;
    // Describes the application output configuration. For more information, see <a href="http://docs.aws.amazon.com/kinesisanalytics/latest/dev/how-it-works-output.html">Configuring Application Output</a>.
    array OutputDescriptions = 11;
    // Describes reference data sources configured for the application. For more information, see <a href="http://docs.aws.amazon.com/kinesisanalytics/latest/dev/how-it-works-input.html">Configuring Application Input</a>.
    array ReferenceDataSourceDescriptions = 12;
}

enum ApplicationStatu {
    DELETING = 0;
    STARTING = 1;
    STOPPING = 2;
    READY = 3;
    RUNNING = 4;
    UPDATING = 5;
}

repeated ApplicationSummary ApplicationSummaries = 1

message ApplicationSummary {
    // ARN of the application.
    string ApplicationARN = 1;
    // Name of the application.
    string ApplicationName = 2;
    // Status of the application.
    ApplicationStatus ApplicationStatus = 3;
}

message ApplicationUpdate {
    // Describes application code updates.
    string ApplicationCodeUpdate = 1;
    // Describes application CloudWatch logging option updates.
    array CloudWatchLoggingOptionUpdates = 2;
    // Describes application input configuration updates.
    array InputUpdates = 3;
    // Describes application output configuration updates.
    array OutputUpdates = 4;
    // Describes application reference data source updates.
    array ReferenceDataSourceUpdates = 5;
}

message CSVMappingParameters {
    // Column delimiter. For example, in a CSV format, a comma (",") is the typical column delimiter.
    string RecordColumnDelimiter = 1;
    // Row delimiter. For example, in a CSV format, <i>'\n'</i> is the typical row delimiter.
    string RecordRowDelimiter = 2;
}

message CloudWatchLoggingOption {
    // ARN of the CloudWatch log to receive application messages.
    string LogStreamARN = 1;
    // IAM ARN of the role to use to send application messages. Note: To write application messages to CloudWatch, the IAM role that is used must have the <code>PutLogEvents</code> policy action enabled.
    string RoleARN = 2;
}

message CloudWatchLoggingOptionDescription {
    // ID of the CloudWatch logging option description.
    string CloudWatchLoggingOptionId = 1;
    // ARN of the CloudWatch log to receive application messages.
    string LogStreamARN = 2;
    // IAM ARN of the role to use to send application messages. Note: To write application messages to CloudWatch, the IAM role used must have the <code>PutLogEvents</code> policy action enabled.
    string RoleARN = 3;
}

repeated CloudWatchLoggingOptionDescription CloudWatchLoggingOptionDescriptions = 1

message CloudWatchLoggingOptionUpdate {
    // ID of the CloudWatch logging option to update
    string CloudWatchLoggingOptionId = 1;
    // ARN of the CloudWatch log to receive application messages.
    string LogStreamARNUpdate = 2;
    // IAM ARN of the role to use to send application messages. Note: To write application messages to CloudWatch, the IAM role used must have the <code>PutLogEvents</code> policy action enabled.
    string RoleARNUpdate = 3;
}

repeated CloudWatchLoggingOptionUpdate CloudWatchLoggingOptionUpdates = 1

repeated CloudWatchLoggingOption CloudWatchLoggingOptions = 1

message CodeValidationException {
    // Test
    string message = 1;
}

message ConcurrentModificationException {
    // <p/>
    string message = 1;
}

message CreateApplicationRequest {
    // <p>One or more SQL statements that read input data, transform it, and generate output. For example, you can write a SQL statement that reads data from one in-application stream, generates a running average of the number of advertisement clicks by vendor, and insert resulting rows in another in-application stream using pumps. For more inforamtion about the typical pattern, see <a href="http://docs.aws.amazon.com/kinesisanalytics/latest/dev/how-it-works-app-code.html">Application Code</a>. </p> <p>You can provide such series of SQL statements, where output of one statement can be used as the input for the next statement. You store intermediate results by creating in-application streams and pumps.</p> <p>Note that the application code must create the streams with names specified in the <code>Outputs</code>. For example, if your <code>Outputs</code> defines output streams named <code>ExampleOutputStream1</code> and <code>ExampleOutputStream2</code>, then your application code must create these streams. </p>
    string ApplicationCode = 1;
    // Summary description of the application.
    string ApplicationDescription = 2;
    // Name of your Amazon Kinesis Analytics application (for example, <code>sample-app</code>).
    string ApplicationName = 3;
    // Use this parameter to configure a CloudWatch log stream to monitor application configuration errors. For more information, see <a href="http://docs.aws.amazon.com/kinesisanalytics/latest/dev/cloudwatch-logs.html">Working with Amazon CloudWatch Logs</a>.
    array CloudWatchLoggingOptions = 4;
    // <p>Use this parameter to configure the application input.</p> <p>You can configure your application to receive input from a single streaming source. In this configuration, you map this streaming source to an in-application stream that is created. Your application code can then query the in-application stream like a table (you can think of it as a constantly updating table).</p> <p>For the streaming source, you provide its Amazon Resource Name (ARN) and format of data on the stream (for example, JSON, CSV, etc). You also must provide an IAM role that Amazon Kinesis Analytics can assume to read this stream on your behalf.</p> <p>To create the in-application stream, you need to specify a schema to transform your data into a schematized version used in SQL. In the schema, you provide the necessary mapping of the data elements in the streaming source to record columns in the in-app stream.</p>
    array Inputs = 5;
    // <p>You can configure application output to write data from any of the in-application streams to up to five destinations.</p> <p>These destinations can be Amazon Kinesis streams, Amazon Kinesis Firehose delivery streams, or both.</p> <p>In the configuration, you specify the in-application stream name, the destination stream Amazon Resource Name (ARN), and the format to use when writing data. You must also provide an IAM role that Amazon Kinesis Analytics can assume to write to the destination stream on your behalf.</p> <p>In the output configuration, you also provide the output stream Amazon Resource Name (ARN) and the format of data in the stream (for example, JSON, CSV). You also must provide an IAM role that Amazon Kinesis Analytics can assume to write to this stream on your behalf.</p>
    array Outputs = 6;
}

message CreateApplicationResponse {
    // In response to your <code>CreateApplication</code> request, Amazon Kinesis Analytics returns a response with a summary of the application it created, including the application Amazon Resource Name (ARN), name, and status.
    ApplicationSummary ApplicationSummary = 1;
}

message DeleteApplicationCloudWatchLoggingOptionRequest {
    // The Kinesis Analytics application name.
    string ApplicationName = 1;
    // The <code>CloudWatchLoggingOptionId</code> of the CloudWatch logging option to delete. You can use the <a>DescribeApplication</a> operation to get the <code>CloudWatchLoggingOptionId</code>.
    string CloudWatchLoggingOptionId = 2;
    // The version ID of the Kinesis Analytics application.
    integer CurrentApplicationVersionId = 3;
}

message DeleteApplicationCloudWatchLoggingOptionResponse {
}

message DeleteApplicationOutputRequest {
    // Amazon Kinesis Analytics application name.
    string ApplicationName = 1;
    // Amazon Kinesis Analytics application version. You can use the <a>DescribeApplication</a> operation to get the current application version. If the version specified is not the current version, the <code>ConcurrentModificationException</code> is returned.
    integer CurrentApplicationVersionId = 2;
    // The ID of the configuration to delete. Each output configuration that is added to the application, either when the application is created or later using the <a>AddApplicationOutput</a> operation, has a unique ID. You need to provide the ID to uniquely identify the output configuration that you want to delete from the application configuration. You can use the <a>DescribeApplication</a> operation to get the specific <code>OutputId</code>.
    string OutputId = 3;
}

message DeleteApplicationOutputResponse {
}

message DeleteApplicationReferenceDataSourceRequest {
    // Name of an existing application.
    string ApplicationName = 1;
    // Version of the application. You can use the <a>DescribeApplication</a> operation to get the current application version. If the version specified is not the current version, the <code>ConcurrentModificationException</code> is returned.
    integer CurrentApplicationVersionId = 2;
    // ID of the reference data source. When you add a reference data source to your application using the <a>AddApplicationReferenceDataSource</a>, Amazon Kinesis Analytics assigns an ID. You can use the <a>DescribeApplication</a> operation to get the reference ID.
    string ReferenceId = 3;
}

message DeleteApplicationReferenceDataSourceResponse {
}

message DeleteApplicationRequest {
    // Name of the Amazon Kinesis Analytics application to delete.
    string ApplicationName = 1;
    //  You can use the <code>DescribeApplication</code> operation to get this value.
    string CreateTimestamp = 2;
}

message DeleteApplicationResponse {
}

message DescribeApplicationRequest {
    // Name of the application.
    string ApplicationName = 1;
}

message DescribeApplicationResponse {
    // Provides a description of the application, such as the application Amazon Resource Name (ARN), status, latest version, and input and output configuration details.
    ApplicationDetail ApplicationDetail = 1;
}

message DestinationSchema {
    // Specifies the format of the records on the output stream.
    RecordFormatType RecordFormatType = 1;
}

message DiscoverInputSchemaRequest {
    // Point at which you want Amazon Kinesis Analytics to start reading records from the specified streaming source discovery purposes.
    InputStartingPositionConfiguration InputStartingPositionConfiguration = 1;
    // Amazon Resource Name (ARN) of the streaming source.
    string ResourceARN = 2;
    // ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf.
    string RoleARN = 3;
}

message DiscoverInputSchemaResponse {
    // Schema inferred from the streaming source. It identifies the format of the data in the streaming source and how each data element maps to corresponding columns in the in-application stream that you can create.
    SourceSchema InputSchema = 1;
    // An array of elements, where each element corresponds to a row in a stream record (a stream record can have more than one row).
    array ParsedInputRecords = 2;
    // Raw stream data that was sampled to infer the schema.
    array RawInputRecords = 3;
}









repeated string InAppStreamNames = 1



message Input {
    // <p>Describes the number of in-application streams to create. </p> <p>Data from your source will be routed to these in-application input streams.</p> <p> (see <a href="http://docs.aws.amazon.com/kinesisanalytics/latest/dev/how-it-works-input.html">Configuring Application Input</a>.</p>
    InputParallelism InputParallelism = 1;
    // <p>Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created.</p> <p>Also used to describe the format of the reference data source.</p>
    SourceSchema InputSchema = 2;
    // <p>If the streaming source is an Amazon Kinesis Firehose delivery stream, identifies the Firehose delivery stream's ARN and an IAM role that enables Amazon Kinesis Analytics to access the stream on your behalf.</p> <p>Note: Either <code>KinesisStreamsInput</code> or <code>KinesisFirehoseInput</code> is required.</p>
    KinesisFirehoseInput KinesisFirehoseInput = 3;
    // <p>If the streaming source is an Amazon Kinesis stream, identifies the stream's Amazon Resource Name (ARN) and an IAM role that enables Amazon Kinesis Analytics to access the stream on your behalf.</p> <p>Note: Either <code>KinesisStreamsInput</code> or <code>KinesisFirehoseInput</code> is required.</p>
    KinesisStreamsInput KinesisStreamsInput = 4;
    // Name prefix to use when creating in-application stream. Suppose you specify a prefix "MyInApplicationStream". Amazon Kinesis Analytics will then create one or more (as per the <code>InputParallelism</code> count you specified) in-application streams with names "MyInApplicationStream_001", "MyInApplicationStream_002" and so on.
    string NamePrefix = 5;
}

message InputConfiguration {
    // Input source ID. You can get this ID by calling the <a>DescribeApplication</a> operation.
    string Id = 1;
    // Point at which you want the application to start processing records from the streaming source.
    InputStartingPositionConfiguration InputStartingPositionConfiguration = 2;
}

repeated InputConfiguration InputConfigurations = 1

message InputDescription {
    // Returns the in-application stream names that are mapped to the stream source.
    array InAppStreamNames = 1;
    // Input ID associated with the application input. This is the ID that Amazon Kinesis Analytics assigns to each input configuration you add to your application.
    string InputId = 2;
    // Describes the configured parallelism (number of in-application streams mapped to the streaming source).
    InputParallelism InputParallelism = 3;
    SourceSchema InputSchema = 4;
    // Point at which the application is configured to read from the input stream.
    InputStartingPositionConfiguration InputStartingPositionConfiguration = 5;
    // If an Amazon Kinesis Firehose delivery stream is configured as a streaming source, provides the Firehose delivery stream's Amazon Resource Name (ARN) and an IAM role that enables Amazon Kinesis Analytics to access the stream on your behalf.
    KinesisFirehoseInputDescription KinesisFirehoseInputDescription = 6;
    // If an Amazon Kinesis stream is configured as streaming source, provides Amazon Kinesis stream's ARN and an IAM role that enables Amazon Kinesis Analytics to access the stream on your behalf.
    KinesisStreamsInputDescription KinesisStreamsInputDescription = 7;
    // In-application name prefix.
    string NamePrefix = 8;
}

repeated InputDescription InputDescriptions = 1

message InputParallelism {
    // Number of in-application streams to create. For more information, see <a href="http://docs.aws.amazon.com/kinesisanalytics/latest/dev/limits.html">Limits</a>.
    integer Count = 1;
}

message InputParallelismUpdate {
    // Number of in-application streams to create for the specified streaming source.
    integer CountUpdate = 1;
}

message InputSchemaUpdate {
    // A list of <code>RecordColumn</code> objects. Each object describes the mapping of the streaming source element to the corresponding column in the in-application stream.
    array RecordColumnUpdates = 1;
    // Specifies the encoding of the records in the streaming source. For example, UTF-8.
    string RecordEncodingUpdate = 2;
    // Specifies the format of the records on the streaming source.
    RecordFormat RecordFormatUpdate = 3;
}

enum InputStartingPosition {
    NOW = 0;
    TRIM_HORIZON = 1;
    LAST_STOPPED_POINT = 2;
}

message InputStartingPositionConfiguration {
    // <p>The starting position on the stream.</p> <ul> <li> <p> <code>NOW</code> - Start reading just after the most recent record in the stream, start at the request timestamp that the customer issued.</p> </li> <li> <p> <code>TRIM_HORIZON</code> - Start reading at the last untrimmed record in the stream, which is the oldest record available in the stream. This option is not available for an Amazon Kinesis Firehose delivery stream.</p> </li> <li> <p> <code>LAST_STOPPED_POINT</code> - Resume reading from where the application last stopped reading.</p> </li> </ul>
    InputStartingPosition InputStartingPosition = 1;
}

message InputUpdate {
    // Input ID of the application input to be updated.
    string InputId = 1;
    // Describes the parallelism updates (the number in-application streams Amazon Kinesis Analytics creates for the specific streaming source).
    InputParallelismUpdate InputParallelismUpdate = 2;
    // Describes the data format on the streaming source, and how record elements on the streaming source map to columns of the in-application stream that is created.
    InputSchemaUpdate InputSchemaUpdate = 3;
    // If an Amazon Kinesis Firehose delivery stream is the streaming source to be updated, provides an updated stream Amazon Resource Name (ARN) and IAM role ARN.
    KinesisFirehoseInputUpdate KinesisFirehoseInputUpdate = 4;
    // If a Amazon Kinesis stream is the streaming source to be updated, provides an updated stream ARN and IAM role ARN.
    KinesisStreamsInputUpdate KinesisStreamsInputUpdate = 5;
    // Name prefix for in-application streams that Amazon Kinesis Analytics creates for the specific streaming source.
    string NamePrefixUpdate = 6;
}

repeated InputUpdate InputUpdates = 1

repeated Input Inputs = 1

message InvalidApplicationConfigurationException {
    // test
    string message = 1;
}

message InvalidArgumentException {
    // <p/>
    string message = 1;
}

message JSONMappingParameters {
    // Path to the top-level parent that contains the records.
    string RecordRowPath = 1;
}

message KinesisFirehoseInput {
    // ARN of the input Firehose delivery stream.
    string ResourceARN = 1;
    // ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf. You need to make sure the role has necessary permissions to access the stream.
    string RoleARN = 2;
}

message KinesisFirehoseInputDescription {
    // Amazon Resource Name (ARN) of the Amazon Kinesis Firehose delivery stream.
    string ResourceARN = 1;
    // ARN of the IAM role that Amazon Kinesis Analytics assumes to access the stream.
    string RoleARN = 2;
}

message KinesisFirehoseInputUpdate {
    // ARN of the input Amazon Kinesis Firehose delivery stream to read.
    string ResourceARNUpdate = 1;
    // Amazon Resource Name (ARN) of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf. You need to grant necessary permissions to this role.
    string RoleARNUpdate = 2;
}

message KinesisFirehoseOutput {
    // ARN of the destination Amazon Kinesis Firehose delivery stream to write to.
    string ResourceARN = 1;
    // ARN of the IAM role that Amazon Kinesis Analytics can assume to write to the destination stream on your behalf. You need to grant the necessary permissions to this role.
    string RoleARN = 2;
}

message KinesisFirehoseOutputDescription {
    // Amazon Resource Name (ARN) of the Amazon Kinesis Firehose delivery stream.
    string ResourceARN = 1;
    // ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream.
    string RoleARN = 2;
}

message KinesisFirehoseOutputUpdate {
    // Amazon Resource Name (ARN) of the Amazon Kinesis Firehose delivery stream to write to.
    string ResourceARNUpdate = 1;
    // ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf. You need to grant necessary permissions to this role.
    string RoleARNUpdate = 2;
}

message KinesisStreamsInput {
    // ARN of the input Amazon Kinesis stream to read.
    string ResourceARN = 1;
    // ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf. You need to grant the necessary permissions to this role.
    string RoleARN = 2;
}

message KinesisStreamsInputDescription {
    // Amazon Resource Name (ARN) of the Amazon Kinesis stream.
    string ResourceARN = 1;
    // ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream.
    string RoleARN = 2;
}

message KinesisStreamsInputUpdate {
    // Amazon Resource Name (ARN) of the input Amazon Kinesis stream to read.
    string ResourceARNUpdate = 1;
    // ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf. You need to grant the necessary permissions to this role.
    string RoleARNUpdate = 2;
}

message KinesisStreamsOutput {
    // ARN of the destination Amazon Kinesis stream to write to.
    string ResourceARN = 1;
    // ARN of the IAM role that Amazon Kinesis Analytics can assume to write to the destination stream on your behalf. You need to grant the necessary permissions to this role.
    string RoleARN = 2;
}

message KinesisStreamsOutputDescription {
    // Amazon Resource Name (ARN) of the Amazon Kinesis stream.
    string ResourceARN = 1;
    // ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream.
    string RoleARN = 2;
}

message KinesisStreamsOutputUpdate {
    // Amazon Resource Name (ARN) of the Amazon Kinesis stream where you want to write the output.
    string ResourceARNUpdate = 1;
    // ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf. You need to grant the necessary permissions to this role.
    string RoleARNUpdate = 2;
}

message LimitExceededException {
    // <p/>
    string message = 1;
}

message ListApplicationsRequest {
    // Name of the application to start the list with. When using pagination to retrieve the list, you don't need to specify this parameter in the first request. However, in subsequent requests, you add the last application name from the previous response to get the next page of applications.
    string ExclusiveStartApplicationName = 1;
    // Maximum number of applications to list.
    integer Limit = 2;
}

message ListApplicationsResponse {
    // List of <code>ApplicationSummary</code> objects.
    array ApplicationSummaries = 1;
    // Returns true if there are more applications to retrieve.
    boolean HasMoreApplications = 2;
}

message MappingParameters {
    // Provides additional mapping information when the record format uses delimiters (for example, CSV).
    CSVMappingParameters CSVMappingParameters = 1;
    // Provides additional mapping information when JSON is the record format on the streaming source.
    JSONMappingParameters JSONMappingParameters = 2;
}

message Output {
    DestinationSchema DestinationSchema = 1;
    // Identifies an Amazon Kinesis Firehose delivery stream as the destination.
    KinesisFirehoseOutput KinesisFirehoseOutput = 2;
    // Identifies an Amazon Kinesis stream as the destination.
    KinesisStreamsOutput KinesisStreamsOutput = 3;
    // Name of the in-application stream.
    string Name = 4;
}

message OutputDescription {
    // Data format used for writing data to the destination.
    DestinationSchema DestinationSchema = 1;
    // Describes the Amazon Kinesis Firehose delivery stream configured as the destination where output is written.
    KinesisFirehoseOutputDescription KinesisFirehoseOutputDescription = 2;
    // Describes Amazon Kinesis stream configured as the destination where output is written.
    KinesisStreamsOutputDescription KinesisStreamsOutputDescription = 3;
    // Name of the in-application stream configured as output.
    string Name = 4;
    // A unique identifier for the output configuration.
    string OutputId = 5;
}

repeated OutputDescription OutputDescriptions = 1

message OutputUpdate {
    DestinationSchema DestinationSchemaUpdate = 1;
    // Describes a Amazon Kinesis Firehose delivery stream as the destination for the output.
    KinesisFirehoseOutputUpdate KinesisFirehoseOutputUpdate = 2;
    // Describes an Amazon Kinesis stream as the destination for the output.
    KinesisStreamsOutputUpdate KinesisStreamsOutputUpdate = 3;
    // If you want to specify a different in-application stream for this output configuration, use this field to specify the new in-application stream name.
    string NameUpdate = 4;
    // Identifies the specific output configuration that you want to update.
    string OutputId = 5;
}

repeated OutputUpdate OutputUpdates = 1

repeated Output Outputs = 1

repeated string ParsedInputRecord = 1



repeated array ParsedInputRecords = 1



repeated string RawInputRecords = 1

message RecordColumn {
    // Reference to the data element in the streaming input of the reference data source.
    string Mapping = 1;
    // Name of the column created in the in-application input stream or reference table.
    string Name = 2;
    // Type of column created in the in-application input stream or reference table.
    string SqlType = 3;
}









repeated RecordColumn RecordColumns = 1



message RecordFormat {
    MappingParameters MappingParameters = 1;
    // The type of record format.
    RecordFormatType RecordFormatType = 2;
}

enum RecordFormatType {
    JSON = 0;
    CSV = 1;
}

message ReferenceDataSource {
    SourceSchema ReferenceSchema = 1;
    S3ReferenceDataSource S3ReferenceDataSource = 2;
    // Name of the in-application table to create.
    string TableName = 3;
}

message ReferenceDataSourceDescription {
    // ID of the reference data source. This is the ID that Amazon Kinesis Analytics assigns when you add the reference data source to your application using the <a>AddApplicationReferenceDataSource</a> operation.
    string ReferenceId = 1;
    SourceSchema ReferenceSchema = 2;
    // Provides the S3 bucket name, the object key name that contains the reference data. It also provides the Amazon Resource Name (ARN) of the IAM role that Amazon Kinesis Analytics can assume to read the Amazon S3 object and populate the in-application reference table.
    S3ReferenceDataSourceDescription S3ReferenceDataSourceDescription = 3;
    // The in-application table name created by the specific reference data source configuration.
    string TableName = 4;
}

repeated ReferenceDataSourceDescription ReferenceDataSourceDescriptions = 1

message ReferenceDataSourceUpdate {
    // ID of the reference data source being updated. You can use the <a>DescribeApplication</a> operation to get this value.
    string ReferenceId = 1;
    SourceSchema ReferenceSchemaUpdate = 2;
    // Describes the S3 bucket name, object key name, and IAM role that Amazon Kinesis Analytics can assume to read the Amazon S3 object on your behalf and populate the in-application reference table.
    S3ReferenceDataSourceUpdate S3ReferenceDataSourceUpdate = 3;
    // In-application table name that is created by this update.
    string TableNameUpdate = 4;
}

repeated ReferenceDataSourceUpdate ReferenceDataSourceUpdates = 1



message ResourceInUseException {
    // <p/>
    string message = 1;
}

message ResourceNotFoundException {
    // <p/>
    string message = 1;
}

message ResourceProvisionedThroughputExceededException {
    string message = 1;
}

message S3ReferenceDataSource {
    // Amazon Resource Name (ARN) of the S3 bucket.
    string BucketARN = 1;
    // Object key name containing reference data.
    string FileKey = 2;
    // ARN of the IAM role that the service can assume to read data on your behalf. This role must have permission for the <code>s3:GetObject</code> action on the object and trust policy that allows Amazon Kinesis Analytics service principal to assume this role.
    string ReferenceRoleARN = 3;
}

message S3ReferenceDataSourceDescription {
    // Amazon Resource Name (ARN) of the S3 bucket.
    string BucketARN = 1;
    // Amazon S3 object key name.
    string FileKey = 2;
    // ARN of the IAM role that Amazon Kinesis Analytics can assume to read the Amazon S3 object on your behalf to populate the in-application reference table.
    string ReferenceRoleARN = 3;
}

message S3ReferenceDataSourceUpdate {
    // Amazon Resource Name (ARN) of the S3 bucket.
    string BucketARNUpdate = 1;
    // Object key name.
    string FileKeyUpdate = 2;
    // ARN of the IAM role that Amazon Kinesis Analytics can assume to read the Amazon S3 object and populate the in-application.
    string ReferenceRoleARNUpdate = 3;
}

message ServiceUnavailableException {
    string message = 1;
}

message SourceSchema {
    // A list of <code>RecordColumn</code> objects.
    array RecordColumns = 1;
    // Specifies the encoding of the records in the streaming source. For example, UTF-8.
    string RecordEncoding = 2;
    // Specifies the format of the records on the streaming source.
    RecordFormat RecordFormat = 3;
}

message StartApplicationRequest {
    // Name of the application.
    string ApplicationName = 1;
    // Identifies the specific input, by ID, that the application starts consuming. Amazon Kinesis Analytics starts reading the streaming source associated with the input. You can also specify where in the streaming source you want Amazon Kinesis Analytics to start reading.
    array InputConfigurations = 2;
}

message StartApplicationResponse {
}

message StopApplicationRequest {
    // Name of the running application to stop.
    string ApplicationName = 1;
}

message StopApplicationResponse {
}

message UnableToDetectSchemaException {
    array RawInputRecords = 1;
    string message = 2;
}

message UpdateApplicationRequest {
    // Name of the Amazon Kinesis Analytics application to update.
    string ApplicationName = 1;
    // Describes application updates.
    ApplicationUpdate ApplicationUpdate = 2;
    // The current application version ID. You can use the <a>DescribeApplication</a> operation to get this value.
    integer CurrentApplicationVersionId = 3;
}

message UpdateApplicationResponse {
}

service AmazonKinesisAnalyticsService {
    // Adds a CloudWatch log stream to monitor application configuration errors. For more information about using CloudWatch log streams with Amazon Kinesis Analytics applications, see <a href="http://docs.aws.amazon.com/kinesisanalytics/latest/dev/cloudwatch-logs.html">Working with Amazon CloudWatch Logs</a>.
    rpc Post(PostRequest) returns (AddApplicationCloudWatchLoggingOptionResponse) {
      option (google.api.http) = {
        post: "//"
        body: "body"
      };
    }
    // <p> Adds a streaming source to your Amazon Kinesis application. For conceptual information, see <a href="http://docs.aws.amazon.com/kinesisanalytics/latest/dev/how-it-works-input.html">Configuring Application Input</a>. </p> <p>You can add a streaming source either when you create an application or you can use this operation to add a streaming source after you create an application. For more information, see <a>CreateApplication</a>.</p> <p>Any configuration update, including adding a streaming source using this operation, results in a new version of the application. You can use the <a>DescribeApplication</a> operation to find the current application version. </p> <p>This operation requires permissions to perform the <code>kinesisanalytics:AddApplicationInput</code> action.</p>
    rpc Post#AddApplicationInput(Post#AddApplicationInputRequest) returns (AddApplicationInputResponse) {
      option (google.api.http) = {
        post: "//#AddApplicationInput"
        body: "body"
      };
    }
    // <p>Adds an external destination to your Amazon Kinesis Analytics application.</p> <p>If you want Amazon Kinesis Analytics to deliver data from an in-application stream within your application to an external destination (such as an Amazon Kinesis stream or a Firehose delivery stream), you add the relevant configuration to your application using this operation. You can configure one or more outputs for your application. Each output configuration maps an in-application stream and an external destination.</p> <p> You can use one of the output configurations to deliver data from your in-application error stream to an external destination so that you can analyze the errors. For conceptual information, see <a href="http://docs.aws.amazon.com/kinesisanalytics/latest/dev/how-it-works-output.html">Understanding Application Output (Destination)</a>. </p> <p> Note that any configuration update, including adding a streaming source using this operation, results in a new version of the application. You can use the <a>DescribeApplication</a> operation to find the current application version.</p> <p>For the limits on the number of application inputs and outputs you can configure, see <a href="http://docs.aws.amazon.com/kinesisanalytics/latest/dev/limits.html">Limits</a>.</p> <p>This operation requires permissions to perform the <code>kinesisanalytics:AddApplicationOutput</code> action.</p>
    rpc Post#AddApplicationOutput(Post#AddApplicationOutputRequest) returns (AddApplicationOutputResponse) {
      option (google.api.http) = {
        post: "//#AddApplicationOutput"
        body: "body"
      };
    }
    // <p>Adds a reference data source to an existing application.</p> <p>Amazon Kinesis Analytics reads reference data (that is, an Amazon S3 object) and creates an in-application table within your application. In the request, you provide the source (S3 bucket name and object key name), name of the in-application table to create, and the necessary mapping information that describes how data in Amazon S3 object maps to columns in the resulting in-application table.</p> <p> For conceptual information, see <a href="http://docs.aws.amazon.com/kinesisanalytics/latest/dev/how-it-works-input.html">Configuring Application Input</a>. For the limits on data sources you can add to your application, see <a href="http://docs.aws.amazon.com/kinesisanalytics/latest/dev/limits.html">Limits</a>. </p> <p> This operation requires permissions to perform the <code>kinesisanalytics:AddApplicationOutput</code> action. </p>
    rpc Post#AddApplicationReferenceDataSource(Post#AddApplicationReferenceDataSourceRequest) returns (AddApplicationReferenceDataSourceResponse) {
      option (google.api.http) = {
        post: "//#AddApplicationReferenceDataSource"
        body: "body"
      };
    }
    // <p> Creates an Amazon Kinesis Analytics application. You can configure each application with one streaming source as input, application code to process the input, and up to five streaming destinations where you want Amazon Kinesis Analytics to write the output data from your application. For an overview, see <a href="http://docs.aws.amazon.com/kinesisanalytics/latest/dev/how-it-works.html">How it Works</a>. </p> <p>In the input configuration, you map the streaming source to an in-application stream, which you can think of as a constantly updating table. In the mapping, you must provide a schema for the in-application stream and map each data column in the in-application stream to a data element in the streaming source.</p> <p>Your application code is one or more SQL statements that read input data, transform it, and generate output. Your application code can create one or more SQL artifacts like SQL streams or pumps.</p> <p>In the output configuration, you can configure the application to write data from in-application streams created in your applications to up to five streaming destinations.</p> <p> To read data from your source stream or write data to destination streams, Amazon Kinesis Analytics needs your permissions. You grant these permissions by creating IAM roles. This operation requires permissions to perform the <code>kinesisanalytics:CreateApplication</code> action. </p> <p> For introductory exercises to create an Amazon Kinesis Analytics application, see <a href="http://docs.aws.amazon.com/kinesisanalytics/latest/dev/getting-started.html">Getting Started</a>. </p>
    rpc Post#CreateApplication(Post#CreateApplicationRequest) returns (CreateApplicationResponse) {
      option (google.api.http) = {
        post: "//#CreateApplication"
        body: "body"
      };
    }
    // <p>Deletes the specified application. Amazon Kinesis Analytics halts application execution and deletes the application, including any application artifacts (such as in-application streams, reference table, and application code).</p> <p>This operation requires permissions to perform the <code>kinesisanalytics:DeleteApplication</code> action.</p>
    rpc Post#DeleteApplication(Post#DeleteApplicationRequest) returns (DeleteApplicationResponse) {
      option (google.api.http) = {
        post: "//#DeleteApplication"
        body: "body"
      };
    }
    // Deletes a CloudWatch log stream from an application. For more information about using CloudWatch log streams with Amazon Kinesis Analytics applications, see <a href="http://docs.aws.amazon.com/kinesisanalytics/latest/dev/cloudwatch-logs.html">Working with Amazon CloudWatch Logs</a>.
    rpc Post#DeleteApplicationCloudWatchLoggingOption(Post#DeleteApplicationCloudWatchLoggingOptionRequest) returns (DeleteApplicationCloudWatchLoggingOptionResponse) {
      option (google.api.http) = {
        post: "//#DeleteApplicationCloudWatchLoggingOption"
        body: "body"
      };
    }
    // <p>Deletes output destination configuration from your application configuration. Amazon Kinesis Analytics will no longer write data from the corresponding in-application stream to the external output destination.</p> <p>This operation requires permissions to perform the <code>kinesisanalytics:DeleteApplicationOutput</code> action.</p>
    rpc Post#DeleteApplicationOutput(Post#DeleteApplicationOutputRequest) returns (DeleteApplicationOutputResponse) {
      option (google.api.http) = {
        post: "//#DeleteApplicationOutput"
        body: "body"
      };
    }
    // <p>Deletes a reference data source configuration from the specified application configuration.</p> <p>If the application is running, Amazon Kinesis Analytics immediately removes the in-application table that you created using the <a>AddApplicationReferenceDataSource</a> operation. </p> <p>This operation requires permissions to perform the <code>kinesisanalytics.DeleteApplicationReferenceDataSource</code> action.</p>
    rpc Post#DeleteApplicationReferenceDataSource(Post#DeleteApplicationReferenceDataSourceRequest) returns (DeleteApplicationReferenceDataSourceResponse) {
      option (google.api.http) = {
        post: "//#DeleteApplicationReferenceDataSource"
        body: "body"
      };
    }
    // <p>Returns information about a specific Amazon Kinesis Analytics application.</p> <p>If you want to retrieve a list of all applications in your account, use the <a>ListApplications</a> operation.</p> <p>This operation requires permissions to perform the <code>kinesisanalytics:DescribeApplication</code> action. You can use <code>DescribeApplication</code> to get the current application versionId, which you need to call other operations such as <code>Update</code>. </p>
    rpc Post#DescribeApplication(Post#DescribeApplicationRequest) returns (DescribeApplicationResponse) {
      option (google.api.http) = {
        post: "//#DescribeApplication"
        body: "body"
      };
    }
    // <p>Infers a schema by evaluating sample records on the specified streaming source (Amazon Kinesis stream or Amazon Kinesis Firehose delivery stream). In the response, the operation returns the inferred schema and also the sample records that the operation used to infer the schema.</p> <p> You can use the inferred schema when configuring a streaming source for your application. For conceptual information, see <a href="http://docs.aws.amazon.com/kinesisanalytics/latest/dev/how-it-works-input.html">Configuring Application Input</a>. Note that when you create an application using the Amazon Kinesis Analytics console, the console uses this operation to infer a schema and show it in the console user interface. </p> <p> This operation requires permissions to perform the <code>kinesisanalytics:DiscoverInputSchema</code> action. </p>
    rpc Post#DiscoverInputSchema(Post#DiscoverInputSchemaRequest) returns (DiscoverInputSchemaResponse) {
      option (google.api.http) = {
        post: "//#DiscoverInputSchema"
        body: "body"
      };
    }
    // <p>Returns a list of Amazon Kinesis Analytics applications in your account. For each application, the response includes the application name, Amazon Resource Name (ARN), and status. If the response returns the <code>HasMoreApplications</code> value as true, you can send another request by adding the <code>ExclusiveStartApplicationName</code> in the request body, and set the value of this to the last application name from the previous response. </p> <p>If you want detailed information about a specific application, use <a>DescribeApplication</a>.</p> <p>This operation requires permissions to perform the <code>kinesisanalytics:ListApplications</code> action.</p>
    rpc Post#ListApplications(Post#ListApplicationsRequest) returns (ListApplicationsResponse) {
      option (google.api.http) = {
        post: "//#ListApplications"
        body: "body"
      };
    }
    // <p>Starts the specified Amazon Kinesis Analytics application. After creating an application, you must exclusively call this operation to start your application.</p> <p>After the application starts, it begins consuming the input data, processes it, and writes the output to the configured destination.</p> <p> The application status must be <code>READY</code> for you to start an application. You can get the application status in the console or using the <a>DescribeApplication</a> operation.</p> <p>After you start the application, you can stop the application from processing the input by calling the <a>StopApplication</a> operation.</p> <p>This operation requires permissions to perform the <code>kinesisanalytics:StartApplication</code> action.</p>
    rpc Post#StartApplication(Post#StartApplicationRequest) returns (StartApplicationResponse) {
      option (google.api.http) = {
        post: "//#StartApplication"
        body: "body"
      };
    }
    // <p>Stops the application from processing input data. You can stop an application only if it is in the running state. You can use the <a>DescribeApplication</a> operation to find the application state. After the application is stopped, Amazon Kinesis Analytics stops reading data from the input, the application stops processing data, and there is no output written to the destination. </p> <p>This operation requires permissions to perform the <code>kinesisanalytics:StopApplication</code> action.</p>
    rpc Post#StopApplication(Post#StopApplicationRequest) returns (StopApplicationResponse) {
      option (google.api.http) = {
        post: "//#StopApplication"
        body: "body"
      };
    }
    // <p>Updates an existing Amazon Kinesis Analytics application. Using this API, you can update application code, input configuration, and output configuration. </p> <p>Note that Amazon Kinesis Analytics updates the <code>CurrentApplicationVersionId</code> each time you update your application. </p> <p>This operation requires permission for the <code>kinesisanalytics:UpdateApplication</code> action.</p>
    rpc Post#UpdateApplication(Post#UpdateApplicationRequest) returns (UpdateApplicationResponse) {
      option (google.api.http) = {
        post: "//#UpdateApplication"
        body: "body"
      };
    }
}

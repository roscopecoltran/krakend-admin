syntax = "proto3";

import "google/api/annotations.proto";

package awsstepfunctions;

message PostRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateActivityInput body = 10;
}

message Post#CreateStateMachineRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateStateMachineInput body = 10;
}

message Post#DeleteActivityRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteActivityInput body = 10;
}

message Post#DeleteStateMachineRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteStateMachineInput body = 10;
}

message Post#DescribeActivityRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeActivityInput body = 10;
}

message Post#DescribeExecutionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeExecutionInput body = 10;
}

message Post#DescribeStateMachineRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeStateMachineInput body = 10;
}

message Post#GetActivityTaskRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetActivityTaskInput body = 10;
}

message Post#GetExecutionHistoryRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetExecutionHistoryInput body = 10;
    // Pagination limit
    string maxResults = 11;
    // Pagination token
    string nextToken = 12;
}

message Post#ListActivitiesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListActivitiesInput body = 10;
    // Pagination limit
    string maxResults = 11;
    // Pagination token
    string nextToken = 12;
}

message Post#ListExecutionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListExecutionsInput body = 10;
    // Pagination limit
    string maxResults = 11;
    // Pagination token
    string nextToken = 12;
}

message Post#ListStateMachinesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListStateMachinesInput body = 10;
    // Pagination limit
    string maxResults = 11;
    // Pagination token
    string nextToken = 12;
}

message Post#SendTaskFailureRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    SendTaskFailureInput body = 10;
}

message Post#SendTaskHeartbeatRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    SendTaskHeartbeatInput body = 10;
}

message Post#SendTaskSuccessRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    SendTaskSuccessInput body = 10;
}

message Post#StartExecutionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StartExecutionInput body = 10;
}

message Post#StopExecutionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StopExecutionInput body = 10;
}

message ActivityDoesNotExist {
    string message = 1;
}

message ActivityFailedEventDetails {
    // A more detailed explanation of the cause of the failure.
    string cause = 1;
    // The error code of the failure.
    string error = 2;
}

message ActivityLimitExceeded {
    string message = 1;
}

repeated ActivityListItem ActivityList = 1

message ActivityListItem {
    // The Amazon Resource Name (ARN) that identifies the activity.
    string activityArn = 1;
    // The date the activity was created.
    string creationDate = 2;
    // The name of the activity.
    string name = 3;
}

message ActivityScheduleFailedEventDetails {
    // A more detailed explanation of the cause of the failure.
    string cause = 1;
    // The error code of the failure.
    string error = 2;
}

message ActivityScheduledEventDetails {
    // The maximum allowed duration between two heartbeats for the activity task.
    integer heartbeatInSeconds = 1;
    // The JSON data input to the activity task.
    string input = 2;
    // The Amazon Resource Name (ARN) of the scheduled activity.
    string resource = 3;
    // The maximum allowed duration of the activity task.
    integer timeoutInSeconds = 4;
}

message ActivityStartedEventDetails {
    // The name of the worker that the task was assigned to. These names are provided by the workers when calling <a>GetActivityTask</a>.
    string workerName = 1;
}

message ActivitySucceededEventDetails {
    // The JSON data output by the activity task.
    string output = 1;
}

message ActivityTimedOutEventDetails {
    // A more detailed explanation of the cause of the timeout.
    string cause = 1;
    // The error code of the failure.
    string error = 2;
}

message ActivityWorkerLimitExceeded {
    string message = 1;
}

message CreateActivityInput {
    // The name of the activity to create. This name must be unique for your AWS account and region.
    string name = 1;
}

message CreateActivityOutput {
    // The Amazon Resource Name (ARN) that identifies the created activity.
    string activityArn = 1;
    // The date the activity was created.
    string creationDate = 2;
}

message CreateStateMachineInput {
    // The Amazon States Language definition of the state machine.
    string definition = 1;
    // The name of the state machine. This name must be unique for your AWS account and region.
    string name = 2;
    // The Amazon Resource Name (ARN) of the IAM role to use for this state machine.
    string roleArn = 3;
}

message CreateStateMachineOutput {
    // The date the state machine was created.
    string creationDate = 1;
    // The Amazon Resource Name (ARN) that identifies the created state machine.
    string stateMachineArn = 2;
}

message DeleteActivityInput {
    // The Amazon Resource Name (ARN) of the activity to delete.
    string activityArn = 1;
}

message DeleteActivityOutput {
}

message DeleteStateMachineInput {
    // The Amazon Resource Name (ARN) of the state machine to delete.
    string stateMachineArn = 1;
}

message DeleteStateMachineOutput {
}

message DescribeActivityInput {
    // The Amazon Resource Name (ARN) of the activity to describe.
    string activityArn = 1;
}

message DescribeActivityOutput {
    // The Amazon Resource Name (ARN) that identifies the activity.
    string activityArn = 1;
    // The date the activity was created.
    string creationDate = 2;
    // The name of the activity.
    string name = 3;
}

message DescribeExecutionInput {
    // The Amazon Resource Name (ARN) of the execution to describe.
    string executionArn = 1;
}

message DescribeExecutionOutput {
    // The Amazon Resource Name (ARN) that identifies the execution.
    string executionArn = 1;
    // The JSON input data of the execution.
    string input = 2;
    // The name of the execution.
    string name = 3;
    // The JSON output data of the execution.
    string output = 4;
    // The date the execution was started.
    string startDate = 5;
    // The Amazon Resource Name (ARN) of the executed stated machine.
    string stateMachineArn = 6;
    // The current status of the execution.
    ExecutionStatus status = 7;
    // If the execution has already ended, the date the execution stopped.
    string stopDate = 8;
}

message DescribeStateMachineInput {
    // The Amazon Resource Name (ARN) of the state machine to describe.
    string stateMachineArn = 1;
}

message DescribeStateMachineOutput {
    // The date the state machine was created.
    string creationDate = 1;
    // The Amazon States Language definition of the state machine.
    string definition = 2;
    // The name of the state machine.
    string name = 3;
    // The Amazon Resource Name (ARN) of the IAM role used for executing this state machine.
    string roleArn = 4;
    // The Amazon Resource Name (ARN) that identifies the state machine.
    string stateMachineArn = 5;
    // The current status of the state machine.
    StateMachineStatus status = 6;
}

message ExecutionAbortedEventDetails {
    // A more detailed explanation of the cause of the failure.
    string cause = 1;
    // The error code of the failure.
    string error = 2;
}

message ExecutionAlreadyExists {
    string message = 1;
}

message ExecutionDoesNotExist {
    string message = 1;
}

message ExecutionFailedEventDetails {
    // A more detailed explanation of the cause of the failure.
    string cause = 1;
    // The error code of the failure.
    string error = 2;
}

message ExecutionLimitExceeded {
    string message = 1;
}

repeated ExecutionListItem ExecutionList = 1

message ExecutionListItem {
    // The Amazon Resource Name (ARN) that identifies the execution.
    string executionArn = 1;
    // The name of the execution.
    string name = 2;
    // The date the execution started.
    string startDate = 3;
    // The Amazon Resource Name (ARN) of the executed state machine.
    string stateMachineArn = 4;
    // The current status of the execution.
    ExecutionStatus status = 5;
    // If the execution already ended, the date the execution stopped.
    string stopDate = 6;
}

message ExecutionStartedEventDetails {
    // The JSON data input to the execution.
    string input = 1;
    // The Amazon Resource Name (ARN) of the IAM role used for executing AWS Lambda tasks.
    string roleArn = 2;
}

enum ExecutionStatu {
    RUNNING = 0;
    SUCCEEDED = 1;
    FAILED = 2;
    TIMED_OUT = 3;
    ABORTED = 4;
}

message ExecutionSucceededEventDetails {
    // The JSON data output by the execution.
    string output = 1;
}

message ExecutionTimedOutEventDetails {
    // A more detailed explanation of the cause of the timeout.
    string cause = 1;
    // The error code of the failure.
    string error = 2;
}

message GetActivityTaskInput {
    // The Amazon Resource Name (ARN) of the activity to retrieve tasks from.
    string activityArn = 1;
    // An arbitrary name may be provided in order to identify the worker that the task is assigned to. This name will be used when it is logged in the execution history.
    string workerName = 2;
}

message GetActivityTaskOutput {
    // The JSON input data for the task.
    string input = 1;
    // A token that identifies the scheduled task. This token must be copied and included in subsequent calls to <a>SendTaskHeartbeat</a>, <a>SendTaskSuccess</a> or <a>SendTaskFailure</a> in order to report the progress or completion of the task.
    string taskToken = 2;
}

message GetExecutionHistoryInput {
    // The Amazon Resource Name (ARN) of the execution.
    string executionArn = 1;
    // <p>The maximum number of results that will be returned per call. <code>nextToken</code> can be used to obtain further pages of results. The default is 100 and the maximum allowed page size is 1000.</p> <p>This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.</p>
    integer maxResults = 2;
    // <p>If a <code>nextToken</code> was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>nextToken</code>. Keep all other arguments unchanged.</p> <p>The configured <code>maxResults</code> determines how many results can be returned in a single call.</p>
    string nextToken = 3;
    // Lists events in descending order of their <code>timeStamp</code>.
    boolean reverseOrder = 4;
}

message GetExecutionHistoryOutput {
    // The list of events that occurred in the execution.
    array events = 1;
    // <p>If a <code>nextToken</code> is returned, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>nextToken</code>. Keep all other arguments unchanged.</p> <p>The configured <code>maxResults</code> determines how many results can be returned in a single call.</p>
    string nextToken = 2;
}

message HistoryEvent {
    ActivityFailedEventDetails activityFailedEventDetails = 1;
    ActivityScheduleFailedEventDetails activityScheduleFailedEventDetails = 2;
    ActivityScheduledEventDetails activityScheduledEventDetails = 3;
    ActivityStartedEventDetails activityStartedEventDetails = 4;
    ActivitySucceededEventDetails activitySucceededEventDetails = 5;
    ActivityTimedOutEventDetails activityTimedOutEventDetails = 6;
    ExecutionAbortedEventDetails executionAbortedEventDetails = 7;
    ExecutionFailedEventDetails executionFailedEventDetails = 8;
    ExecutionStartedEventDetails executionStartedEventDetails = 9;
    ExecutionSucceededEventDetails executionSucceededEventDetails = 10;
    ExecutionTimedOutEventDetails executionTimedOutEventDetails = 11;
    // The id of the event. Events are numbered sequentially, starting at one.
    integer id = 12;
    LambdaFunctionFailedEventDetails lambdaFunctionFailedEventDetails = 13;
    LambdaFunctionScheduleFailedEventDetails lambdaFunctionScheduleFailedEventDetails = 14;
    LambdaFunctionScheduledEventDetails lambdaFunctionScheduledEventDetails = 15;
    LambdaFunctionStartFailedEventDetails lambdaFunctionStartFailedEventDetails = 16;
    LambdaFunctionSucceededEventDetails lambdaFunctionSucceededEventDetails = 17;
    LambdaFunctionTimedOutEventDetails lambdaFunctionTimedOutEventDetails = 18;
    // The id of the previous event.
    integer previousEventId = 19;
    StateEnteredEventDetails stateEnteredEventDetails = 20;
    StateExitedEventDetails stateExitedEventDetails = 21;
    // The date the event occured.
    string timestamp = 22;
    // The type of the event.
    HistoryEventType type = 23;
}

repeated HistoryEvent HistoryEventList = 1

enum HistoryEventType {
    ACTIVITYFAILED = 0;
    ACTIVITYSCHEDULEFAILED = 1;
    ACTIVITYSCHEDULED = 2;
    ACTIVITYSTARTED = 3;
    ACTIVITYSUCCEEDED = 4;
    ACTIVITYTIMEDOUT = 5;
    CHOICESTATEENTERED = 6;
    CHOICESTATEEXITED = 7;
    EXECUTIONFAILED = 8;
    EXECUTIONSTARTED = 9;
    EXECUTIONSUCCEEDED = 10;
    EXECUTIONABORTED = 11;
    EXECUTIONTIMEDOUT = 12;
    FAILSTATEENTERED = 13;
    LAMBDAFUNCTIONFAILED = 14;
    LAMBDAFUNCTIONSCHEDULEFAILED = 15;
    LAMBDAFUNCTIONSCHEDULED = 16;
    LAMBDAFUNCTIONSTARTFAILED = 17;
    LAMBDAFUNCTIONSTARTED = 18;
    LAMBDAFUNCTIONSUCCEEDED = 19;
    LAMBDAFUNCTIONTIMEDOUT = 20;
    SUCCEEDSTATEENTERED = 21;
    SUCCEEDSTATEEXITED = 22;
    TASKSTATEENTERED = 23;
    TASKSTATEEXITED = 24;
    PASSSTATEENTERED = 25;
    PASSSTATEEXITED = 26;
    PARALLELSTATEENTERED = 27;
    PARALLELSTATEEXITED = 28;
    WAITSTATEENTERED = 29;
    WAITSTATEEXITED = 30;
}

message InvalidArn {
    string message = 1;
}

message InvalidDefinition {
    string message = 1;
}

message InvalidExecutionInput {
    string message = 1;
}

message InvalidName {
    string message = 1;
}

message InvalidOutput {
    string message = 1;
}

message InvalidToken {
    string message = 1;
}

message LambdaFunctionFailedEventDetails {
    // A more detailed explanation of the cause of the failure.
    string cause = 1;
    // The error code of the failure.
    string error = 2;
}

message LambdaFunctionScheduleFailedEventDetails {
    // A more detailed explanation of the cause of the failure.
    string cause = 1;
    // The error code of the failure.
    string error = 2;
}

message LambdaFunctionScheduledEventDetails {
    // The JSON data input to the lambda function.
    string input = 1;
    // The Amazon Resource Name (ARN) of the scheduled lambda function.
    string resource = 2;
    // The maximum allowed duration of the lambda function.
    integer timeoutInSeconds = 3;
}

message LambdaFunctionStartFailedEventDetails {
    // A more detailed explanation of the cause of the failure.
    string cause = 1;
    // The error code of the failure.
    string error = 2;
}

message LambdaFunctionSucceededEventDetails {
    // The JSON data output by the lambda function.
    string output = 1;
}

message LambdaFunctionTimedOutEventDetails {
    // A more detailed explanation of the cause of the timeout.
    string cause = 1;
    // The error code of the failure.
    string error = 2;
}

message ListActivitiesInput {
    // <p>The maximum number of results that will be returned per call. <code>nextToken</code> can be used to obtain further pages of results. The default is 100 and the maximum allowed page size is 1000.</p> <p>This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.</p>
    integer maxResults = 1;
    // <p>If a <code>nextToken</code> was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>nextToken</code>. Keep all other arguments unchanged.</p> <p>The configured <code>maxResults</code> determines how many results can be returned in a single call.</p>
    string nextToken = 2;
}

message ListActivitiesOutput {
    // The list of activities.
    array activities = 1;
    // <p>If a <code>nextToken</code> is returned, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>nextToken</code>. Keep all other arguments unchanged.</p> <p>The configured <code>maxResults</code> determines how many results can be returned in a single call.</p>
    string nextToken = 2;
}

message ListExecutionsInput {
    // <p>The maximum number of results that will be returned per call. <code>nextToken</code> can be used to obtain further pages of results. The default is 100 and the maximum allowed page size is 1000.</p> <p>This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.</p>
    integer maxResults = 1;
    // <p>If a <code>nextToken</code> was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>nextToken</code>. Keep all other arguments unchanged.</p> <p>The configured <code>maxResults</code> determines how many results can be returned in a single call.</p>
    string nextToken = 2;
    // The Amazon Resource Name (ARN) of the state machine whose executions will be listed.
    string stateMachineArn = 3;
    // If specified, only list the executions whose current execution status matches the given filter.
    ExecutionStatus statusFilter = 4;
}

message ListExecutionsOutput {
    // The list of matching executions.
    array executions = 1;
    // <p>If a <code>nextToken</code> is returned, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>nextToken</code>. Keep all other arguments unchanged.</p> <p>The configured <code>maxResults</code> determines how many results can be returned in a single call.</p>
    string nextToken = 2;
}

message ListStateMachinesInput {
    // <p>The maximum number of results that will be returned per call. <code>nextToken</code> can be used to obtain further pages of results. The default is 100 and the maximum allowed page size is 1000.</p> <p>This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.</p>
    integer maxResults = 1;
    // <p>If a <code>nextToken</code> was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>nextToken</code>. Keep all other arguments unchanged.</p> <p>The configured <code>maxResults</code> determines how many results can be returned in a single call.</p>
    string nextToken = 2;
}

message ListStateMachinesOutput {
    // <p>If a <code>nextToken</code> is returned, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>nextToken</code>. Keep all other arguments unchanged.</p> <p>The configured <code>maxResults</code> determines how many results can be returned in a single call.</p>
    string nextToken = 1;
    array stateMachines = 2;
}

message SendTaskFailureInput {
    // A more detailed explanation of the cause of the failure.
    string cause = 1;
    // An arbitrary error code that identifies the cause of the failure.
    string error = 2;
    // The token that represents this task. Task tokens are generated by the service when the tasks are assigned to a worker (see GetActivityTask::taskToken).
    string taskToken = 3;
}

message SendTaskFailureOutput {
}

message SendTaskHeartbeatInput {
    // The token that represents this task. Task tokens are generated by the service when the tasks are assigned to a worker (see GetActivityTask::taskToken).
    string taskToken = 1;
}

message SendTaskHeartbeatOutput {
}

message SendTaskSuccessInput {
    // The JSON output of the task.
    string output = 1;
    // The token that represents this task. Task tokens are generated by the service when the tasks are assigned to a worker (see GetActivityTask::taskToken).
    string taskToken = 2;
}

message SendTaskSuccessOutput {
}

message StartExecutionInput {
    // The JSON input data for the execution.
    string input = 1;
    // The name of the execution. This name must be unique for your AWS account and region.
    string name = 2;
    // The Amazon Resource Name (ARN) of the state machine to execute.
    string stateMachineArn = 3;
}

message StartExecutionOutput {
    // The Amazon Resource Name (ARN) that identifies the execution.
    string executionArn = 1;
    // The date the execution was started.
    string startDate = 2;
}

message StateEnteredEventDetails {
    // The JSON input data to the state.
    string input = 1;
    // The name of the state.
    string name = 2;
}

message StateExitedEventDetails {
    // The name of the state.
    string name = 1;
    // The JSON output data of the state.
    string output = 2;
}

message StateMachineAlreadyExists {
    string message = 1;
}

message StateMachineDeleting {
    string message = 1;
}

message StateMachineDoesNotExist {
    string message = 1;
}

message StateMachineLimitExceeded {
    string message = 1;
}

repeated StateMachineListItem StateMachineList = 1

message StateMachineListItem {
    // The date the state machine was created.
    string creationDate = 1;
    // The name of the state machine.
    string name = 2;
    // The Amazon Resource Name (ARN) that identifies the state machine.
    string stateMachineArn = 3;
}

enum StateMachineStatu {
    ACTIVE = 0;
    DELETING = 1;
}

message StopExecutionInput {
    // A more detailed explanation of the cause of the termination.
    string cause = 1;
    // An arbitrary error code that identifies the cause of the termination.
    string error = 2;
    // The Amazon Resource Name (ARN) of the execution to stop.
    string executionArn = 3;
}

message StopExecutionOutput {
    // The date the execution was stopped.
    string stopDate = 1;
}

message TaskDoesNotExist {
    string message = 1;
}

message TaskTimedOut {
    string message = 1;
}

service AWSStepFunctionsService {
    // Creates an activity.
    rpc Post(PostRequest) returns (CreateActivityOutput) {
      option (google.api.http) = {
        post: "//"
        body: "body"
      };
    }
    // Creates a state machine.
    rpc Post#CreateStateMachine(Post#CreateStateMachineRequest) returns (CreateStateMachineOutput) {
      option (google.api.http) = {
        post: "//#CreateStateMachine"
        body: "body"
      };
    }
    // Deletes an activity.
    rpc Post#DeleteActivity(Post#DeleteActivityRequest) returns (DeleteActivityOutput) {
      option (google.api.http) = {
        post: "//#DeleteActivity"
        body: "body"
      };
    }
    // Deletes a state machine. This is an asynchronous operation-- it sets the state machine's status to "DELETING" and begins the delete process.
    rpc Post#DeleteStateMachine(Post#DeleteStateMachineRequest) returns (DeleteStateMachineOutput) {
      option (google.api.http) = {
        post: "//#DeleteStateMachine"
        body: "body"
      };
    }
    // Describes an activity.
    rpc Post#DescribeActivity(Post#DescribeActivityRequest) returns (DescribeActivityOutput) {
      option (google.api.http) = {
        post: "//#DescribeActivity"
        body: "body"
      };
    }
    // Describes an execution.
    rpc Post#DescribeExecution(Post#DescribeExecutionRequest) returns (DescribeExecutionOutput) {
      option (google.api.http) = {
        post: "//#DescribeExecution"
        body: "body"
      };
    }
    // Describes a state machine.
    rpc Post#DescribeStateMachine(Post#DescribeStateMachineRequest) returns (DescribeStateMachineOutput) {
      option (google.api.http) = {
        post: "//#DescribeStateMachine"
        body: "body"
      };
    }
    // <p>Used by workers to retrieve a task (with the specified activity ARN) scheduled for execution by a running state machine. This initiates a long poll, where the service holds the HTTP connection open and responds as soon as a task becomes available (i.e. an execution of a task of this type is needed.) The maximum time the service holds on to the request before responding is 60 seconds. If no task is available within 60 seconds, the poll will return an empty result, that is, the <code>taskToken</code> returned is an empty string.</p> <important> <p>Workers should set their client side socket timeout to at least 65 seconds (5 seconds higher than the maximum time the service may hold the poll request).</p> </important>
    rpc Post#GetActivityTask(Post#GetActivityTaskRequest) returns (GetActivityTaskOutput) {
      option (google.api.http) = {
        post: "//#GetActivityTask"
        body: "body"
      };
    }
    // Returns the history of the specified execution as a list of events. By default, the results are returned in ascending order of the <code>timeStamp</code> of the events. Use the <code>reverseOrder</code> parameter to get the latest events first. The results may be split into multiple pages. To retrieve subsequent pages, make the call again using the <code>nextToken</code> returned by the previous call.
    rpc Post#GetExecutionHistory(Post#GetExecutionHistoryRequest) returns (GetExecutionHistoryOutput) {
      option (google.api.http) = {
        post: "//#GetExecutionHistory"
        body: "body"
      };
    }
    // Lists the existing activities. The results may be split into multiple pages. To retrieve subsequent pages, make the call again using the <code>nextToken</code> returned by the previous call.
    rpc Post#ListActivities(Post#ListActivitiesRequest) returns (ListActivitiesOutput) {
      option (google.api.http) = {
        post: "//#ListActivities"
        body: "body"
      };
    }
    // Lists the executions of a state machine that meet the filtering criteria. The results may be split into multiple pages. To retrieve subsequent pages, make the call again using the <code>nextToken</code> returned by the previous call.
    rpc Post#ListExecutions(Post#ListExecutionsRequest) returns (ListExecutionsOutput) {
      option (google.api.http) = {
        post: "//#ListExecutions"
        body: "body"
      };
    }
    // Lists the existing state machines. The results may be split into multiple pages. To retrieve subsequent pages, make the call again using the <code>nextToken</code> returned by the previous call.
    rpc Post#ListStateMachines(Post#ListStateMachinesRequest) returns (ListStateMachinesOutput) {
      option (google.api.http) = {
        post: "//#ListStateMachines"
        body: "body"
      };
    }
    // Used by workers to report that the task identified by the <code>taskToken</code> failed.
    rpc Post#SendTaskFailure(Post#SendTaskFailureRequest) returns (SendTaskFailureOutput) {
      option (google.api.http) = {
        post: "//#SendTaskFailure"
        body: "body"
      };
    }
    // <p>Used by workers to report to the service that the task represented by the specified <code>taskToken</code> is still making progress. This action resets the <code>Heartbeat</code> clock. The <code>Heartbeat</code> threshold is specified in the state machine's Amazon States Language definition. This action does not in itself create an event in the execution history. However, if the task times out, the execution history will contain an <code>ActivityTimedOut</code> event.</p> <note> <p>The <code>Timeout</code> of a task, defined in the state machine's Amazon States Language definition, is its maximum allowed duration, regardless of the number of <a>SendTaskHeartbeat</a> requests received.</p> </note> <note> <p>This operation is only useful for long-lived tasks to report the liveliness of the task.</p> </note>
    rpc Post#SendTaskHeartbeat(Post#SendTaskHeartbeatRequest) returns (SendTaskHeartbeatOutput) {
      option (google.api.http) = {
        post: "//#SendTaskHeartbeat"
        body: "body"
      };
    }
    // Used by workers to report that the task identified by the <code>taskToken</code> completed successfully.
    rpc Post#SendTaskSuccess(Post#SendTaskSuccessRequest) returns (SendTaskSuccessOutput) {
      option (google.api.http) = {
        post: "//#SendTaskSuccess"
        body: "body"
      };
    }
    // Starts a state machine execution.
    rpc Post#StartExecution(Post#StartExecutionRequest) returns (StartExecutionOutput) {
      option (google.api.http) = {
        post: "//#StartExecution"
        body: "body"
      };
    }
    // Stops an execution.
    rpc Post#StopExecution(Post#StopExecutionRequest) returns (StopExecutionOutput) {
      option (google.api.http) = {
        post: "//#StopExecution"
        body: "body"
      };
    }
}

{
  "swagger": "2.0",
  "schemes": [
    "http"
  ],
  "host": "lambda.amazonaws.com",
  "basePath": "/",
  "x-hasEquivalentPaths": true,
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi"
    },
    "description": "<fullname>AWS Lambda</fullname> <p><b>Overview</b></p> <p>This is the AWS Lambda API Reference. The AWS Lambda Developer Guide provides additional information. For the service overview, go to <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/welcome.html\">What is AWS Lambda</a>, and for information about how the service works, go to <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/lambda-introduction.html\">AWS LambdaL How it Works</a> in the AWS Lambda Developer Guide.</p>",
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "AWS Lambda",
    "version": "2014-11-11",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": [
      "cloud"
    ],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_media.amazonwebservices.com_blog_2007_big_pbaws_logo_300px.jpg"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": {
          "url": "https://github.com/mermade/aws2openapi",
          "version": "1.0.0"
        },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/lambda-2014-11-11.normal.json",
        "x-apisguru-direct": true
      }
    ],
    "x-preferred": false,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "lambda"
  },
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://aws.amazon.com/lambda/"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "hmac": {
      "description": "Amazon Signature authorization v4",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey",
      "x-amazon-apigateway-authtype": "awsSigv4"
    }
  },
  "security": [
    {
      "hmac": []
    }
  ],
  "parameters": {
    "Action": {
      "in": "header",
      "name": "Action",
      "required": true,
      "type": "string"
    },
    "Version": {
      "in": "header",
      "name": "Version",
      "required": true,
      "type": "string"
    },
    "X-Amz-Algorithm": {
      "in": "header",
      "name": "X-Amz-Algorithm",
      "required": false,
      "type": "string"
    },
    "X-Amz-Content-Sha256": {
      "in": "header",
      "name": "X-Amz-Content-Sha256",
      "required": false,
      "type": "string"
    },
    "X-Amz-Credential": {
      "in": "header",
      "name": "X-Amz-Credential",
      "required": false,
      "type": "string"
    },
    "X-Amz-Date": {
      "in": "header",
      "name": "X-Amz-Date",
      "required": false,
      "type": "string"
    },
    "X-Amz-Security-Token": {
      "in": "header",
      "name": "X-Amz-Security-Token",
      "required": false,
      "type": "string"
    },
    "X-Amz-Signature": {
      "in": "header",
      "name": "X-Amz-Signature",
      "required": false,
      "type": "string"
    },
    "X-Amz-SignedHeaders": {
      "in": "header",
      "name": "X-Amz-SignedHeaders",
      "required": false,
      "type": "string"
    }
  },
  "paths": {
    "/2014-11-13/event-source-mappings/": {
      "get": {
        "description": "<p>Returns a list of event source mappings you created using the <code>AddEventSource</code> (see <a>AddEventSource</a>), where you identify a stream as event source. This list does not include Amazon S3 event sources. </p> <p>For each mapping, the API returns configuration information. You can optionally specify filters to retrieve specific event source mappings.</p> <p>This operation requires permission for the <code>lambda:ListEventSources</code> action.</p>",
        "operationId": "ListEventSources",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListEventSourcesRequest"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxItems",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "Marker",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListEventSourcesResponse"
            }
          },
          "400": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            },
            "x-aws-exception": true
          },
          "404": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            },
            "x-aws-exception": true
          },
          "500": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            },
            "x-aws-exception": true
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/2014-11-13/event-source-mappings/{UUID}": {
      "delete": {
        "description": "<p>Removes an event source mapping. This means AWS Lambda will no longer invoke the function for events in the associated source.</p> <p>This operation requires permission for the <code>lambda:RemoveEventSource</code> action.</p>",
        "operationId": "RemoveEventSource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemoveEventSourceRequest"
            }
          },
          {
            "in": "path",
            "name": "UUID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            },
            "x-aws-exception": true
          },
          "404": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            },
            "x-aws-exception": true
          },
          "500": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            },
            "x-aws-exception": true
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/2014-11-13/functions/": {
      "get": {
        "description": "<p>Returns a list of your Lambda functions. For each function, the response includes the function configuration information. You must use <a>GetFunction</a> to retrieve the code for your function.</p> <p>This operation requires permission for the <code>lambda:ListFunctions</code> action.</p>",
        "operationId": "ListFunctions",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListFunctionsRequest"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxItems",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "Marker",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListFunctionsResponse"
            }
          },
          "500": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            },
            "x-aws-exception": true
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/2014-11-13/functions/{FunctionName}": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "put": {
        "description": "<p>Creates a new Lambda function or updates an existing function. The function metadata is created from the request parameters, and the code for the function is provided by a .zip file in the request body. If the function name already exists, the existing Lambda function is updated with the new code and metadata. </p> <p>This operation requires permission for the <code>lambda:UploadFunction</code> action.</p>",
        "operationId": "UploadFunction",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UploadFunctionRequest"
            }
          },
          {
            "in": "path",
            "name": "FunctionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "FunctionName",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/FunctionConfiguration"
            }
          },
          "400": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            },
            "x-aws-exception": true
          },
          "404": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            },
            "x-aws-exception": true
          },
          "500": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            },
            "x-aws-exception": true
          }
        }
      }
    },
    "/2014-11-13/functions/{FunctionName}/configuration": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "put": {
        "description": "<p>Updates the configuration parameters for the specified Lambda function by using the values provided in the request. You provide only the parameters you want to change. This operation must only be used on an existing Lambda function and cannot be used to update the function's code. </p> <p>This operation requires permission for the <code>lambda:UpdateFunctionConfiguration</code> action.</p>",
        "operationId": "UpdateFunctionConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateFunctionConfigurationRequest"
            }
          },
          {
            "in": "path",
            "name": "FunctionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "FunctionName",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/FunctionConfiguration"
            }
          },
          "400": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            },
            "x-aws-exception": true
          },
          "404": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            },
            "x-aws-exception": true
          },
          "500": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            },
            "x-aws-exception": true
          }
        }
      }
    },
    "/2014-11-13/functions/{FunctionName}/invoke-async/": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Submits an invocation request to AWS Lambda. Upon receiving the request, Lambda executes the specified function asynchronously. To see the logs generated by the Lambda function execution, see the CloudWatch logs console.</p> <p>This operation requires permission for the <code>lambda:InvokeAsync</code> action.</p>",
        "operationId": "InvokeAsync",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InvokeAsyncRequest"
            }
          },
          {
            "in": "path",
            "name": "FunctionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "FunctionName",
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/InvokeAsyncResponse"
            }
          },
          "400": {
            "description": "InvalidRequestContentException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestContentException"
            },
            "x-aws-exception": true
          },
          "404": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            },
            "x-aws-exception": true
          },
          "500": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            },
            "x-aws-exception": true
          }
        }
      }
    }
  },
  "definitions": {
    "AddEventSourceRequest": {
      "properties": {
        "BatchSize": {
          "$ref": "#/definitions/Integer",
          "description": "The largest number of records that AWS Lambda will give to your function in a single event. The default is 100 records."
        },
        "EventSource": {
          "$ref": "#/definitions/String",
          "description": "The Amazon Resource Name (ARN) of the Amazon Kinesis stream that is the event source. Any record added to this stream causes AWS Lambda to invoke your Lambda function. AWS Lambda POSTs the Amazon Kinesis event, containing records, to your Lambda function as JSON."
        },
        "FunctionName": {
          "$ref": "#/definitions/FunctionName",
          "description": "The Lambda function to invoke when AWS Lambda detects an event on the stream."
        },
        "Parameters": {
          "$ref": "#/definitions/Map",
          "description": "A map (key-value pairs) defining the configuration for AWS Lambda to use when reading the event source. Currently, AWS Lambda supports only the <code>InitialPositionInStream</code> key. The valid values are: \"TRIM_HORIZON\" and \"LATEST\". The default value is \"TRIM_HORIZON\". For more information, go to <a href=\"http://docs.aws.amazon.com/kinesis/latest/APIReference/API_GetShardIterator.html#Kinesis-GetShardIterator-request-ShardIteratorType\">ShardIteratorType</a> in the Amazon Kinesis Service API Reference. "
        },
        "Role": {
          "$ref": "#/definitions/RoleArn",
          "description": "The ARN of the IAM role (invocation role) that AWS Lambda can assume to read from the stream and invoke the function."
        }
      },
      "required": [
        "EventSource",
        "FunctionName",
        "Role"
      ],
      "type": "object"
    },
    "Blob": {
      "type": "string"
    },
    "Boolean": {
      "type": "boolean"
    },
    "DeleteFunctionRequest": {
      "properties": {},
      "type": "object"
    },
    "Description": {
      "maxLength": 256,
      "minLength": 0,
      "type": "string"
    },
    "EventSourceConfiguration": {
      "description": "Describes mapping between an Amazon Kinesis stream and a Lambda function.",
      "properties": {
        "BatchSize": {
          "$ref": "#/definitions/Integer",
          "description": "The largest number of records that AWS Lambda will POST in the invocation request to your function."
        },
        "EventSource": {
          "$ref": "#/definitions/String",
          "description": "The Amazon Resource Name (ARN) of the Amazon Kinesis stream that is the source of events."
        },
        "FunctionName": {
          "$ref": "#/definitions/FunctionName",
          "description": "The Lambda function to invoke when AWS Lambda detects an event on the stream."
        },
        "IsActive": {
          "$ref": "#/definitions/Boolean",
          "description": "Indicates whether the event source mapping is currently honored. Events are only processes if IsActive is true."
        },
        "LastModified": {
          "$ref": "#/definitions/Timestamp",
          "description": "The UTC time string indicating the last time the event mapping was updated."
        },
        "Parameters": {
          "$ref": "#/definitions/Map",
          "description": "The map (key-value pairs) defining the configuration for AWS Lambda to use when reading the event source."
        },
        "Role": {
          "$ref": "#/definitions/RoleArn",
          "description": "The ARN of the IAM role (invocation role) that AWS Lambda can assume to read from the stream and invoke the function."
        },
        "Status": {
          "$ref": "#/definitions/String",
          "description": "The description of the health of the event source mapping. Valid values are: \"PENDING\", \"OK\", and \"PROBLEM:<i>message</i>\". Initially this staus is \"PENDING\". When AWS Lambda begins processing events, it changes the status to \"OK\"."
        },
        "UUID": {
          "$ref": "#/definitions/String",
          "description": "The AWS Lambda assigned opaque identifier for the mapping."
        }
      },
      "type": "object"
    },
    "EventSourceList": {
      "items": {
        "$ref": "#/definitions/EventSourceConfiguration"
      },
      "type": "array"
    },
    "FunctionArn": {
      "pattern": "arn:aws:lambda:[a-z]{2}-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_]+(\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})?",
      "type": "string"
    },
    "FunctionCodeLocation": {
      "description": "The object for the Lambda function location.",
      "properties": {
        "Location": {
          "$ref": "#/definitions/String",
          "description": "The presigned URL you can use to download the function's .zip file that you previously uploaded. The URL is valid for up to 10 minutes."
        },
        "RepositoryType": {
          "$ref": "#/definitions/String",
          "description": "The repository from which you can download the function."
        }
      },
      "type": "object"
    },
    "FunctionConfiguration": {
      "description": "A complex type that describes function metadata.",
      "properties": {
        "CodeSize": {
          "$ref": "#/definitions/Long",
          "description": "The size, in bytes, of the function .zip file you uploaded."
        },
        "ConfigurationId": {
          "$ref": "#/definitions/String",
          "description": "A Lambda-assigned unique identifier for the current function code and related configuration."
        },
        "Description": {
          "$ref": "#/definitions/Description",
          "description": "The user-provided description."
        },
        "FunctionARN": {
          "$ref": "#/definitions/FunctionArn",
          "description": "The Amazon Resource Name (ARN) assigned to the function."
        },
        "FunctionName": {
          "$ref": "#/definitions/FunctionName",
          "description": "The name of the function."
        },
        "Handler": {
          "$ref": "#/definitions/Handler",
          "description": "The function Lambda calls to begin executing your function."
        },
        "LastModified": {
          "$ref": "#/definitions/Timestamp",
          "description": "The timestamp of the last time you updated the function."
        },
        "MemorySize": {
          "$ref": "#/definitions/MemorySize",
          "description": "The memory size, in MB, you configured for the function. Must be a multiple of 64 MB."
        },
        "Mode": {
          "$ref": "#/definitions/Mode",
          "description": "The type of the Lambda function you uploaded. "
        },
        "Role": {
          "$ref": "#/definitions/RoleArn",
          "description": "The Amazon Resource Name (ARN) of the IAM role that Lambda assumes when it executes your function to access any other Amazon Web Services (AWS) resources."
        },
        "Runtime": {
          "$ref": "#/definitions/Runtime",
          "description": "The runtime environment for the Lambda function."
        },
        "Timeout": {
          "$ref": "#/definitions/Timeout",
          "description": "The function execution time at which Lambda should terminate the function. Because the execution time has cost implications, we recommend you set this value based on your expected execution time. The default is 3 seconds. "
        }
      },
      "type": "object"
    },
    "FunctionList": {
      "items": {
        "$ref": "#/definitions/FunctionConfiguration"
      },
      "type": "array"
    },
    "FunctionName": {
      "maxLength": 64,
      "minLength": 1,
      "pattern": "[a-zA-Z0-9-_]+",
      "type": "string"
    },
    "GetEventSourceRequest": {
      "properties": {},
      "type": "object"
    },
    "GetFunctionConfigurationRequest": {
      "properties": {},
      "type": "object"
    },
    "GetFunctionRequest": {
      "properties": {},
      "type": "object"
    },
    "GetFunctionResponse": {
      "description": "This response contains the object for AWS Lambda function location (see <a>API_FunctionCodeLocation</a>",
      "properties": {
        "Code": {
          "$ref": "#/definitions/FunctionCodeLocation"
        },
        "Configuration": {
          "$ref": "#/definitions/FunctionConfiguration"
        }
      },
      "type": "object"
    },
    "Handler": {
      "pattern": "[a-zA-Z0-9./\\-_]+",
      "type": "string"
    },
    "HttpStatus": {
      "type": "integer"
    },
    "Integer": {
      "type": "integer"
    },
    "InvalidParameterValueException": {
      "description": "One of the parameters in the request is invalid. For example, if you provided an IAM role for AWS Lambda to assume in the <code>UploadFunction</code> or the <code>UpdateFunctionConfiguration</code> API, that AWS Lambda is unable to assume you will get this exception. ",
      "properties": {
        "Type": {
          "$ref": "#/definitions/String"
        },
        "message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "InvalidRequestContentException": {
      "description": "The request body could not be parsed as JSON.",
      "properties": {
        "Type": {
          "$ref": "#/definitions/String"
        },
        "message": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "InvokeAsyncRequest": {
      "properties": {
        "InvokeArgs": {
          "$ref": "#/definitions/Blob",
          "description": "JSON that you want to provide to your Lambda function as input."
        }
      },
      "required": [
        "InvokeArgs"
      ],
      "type": "object"
    },
    "InvokeAsyncResponse": {
      "description": "Upon success, it returns empty response. Otherwise, throws an exception.",
      "properties": {},
      "type": "object"
    },
    "ListEventSourcesRequest": {
      "properties": {},
      "type": "object"
    },
    "ListEventSourcesResponse": {
      "description": "Contains a list of event sources (see <a>API_EventSourceConfiguration</a>)",
      "properties": {
        "EventSources": {
          "$ref": "#/definitions/EventSourceList",
          "description": "An arrary of <code>EventSourceConfiguration</code> objects."
        },
        "NextMarker": {
          "$ref": "#/definitions/String",
          "description": "A string, present if there are more event source mappings."
        }
      },
      "type": "object"
    },
    "ListFunctionsRequest": {
      "properties": {},
      "type": "object"
    },
    "ListFunctionsResponse": {
      "description": "Contains a list of AWS Lambda function configurations (see <a>API_FunctionConfiguration</a>.",
      "properties": {
        "Functions": {
          "$ref": "#/definitions/FunctionList",
          "description": "A list of Lambda functions."
        },
        "NextMarker": {
          "$ref": "#/definitions/String",
          "description": "A string, present if there are more functions."
        }
      },
      "type": "object"
    },
    "Long": {
      "type": "integer"
    },
    "Map": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/String"
          },
          "value": {
            "$ref": "#/definitions/String"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "MaxListItems": {
      "maximum": 10000,
      "minimum": 1,
      "type": "integer"
    },
    "MemorySize": {
      "maximum": 1024,
      "minimum": 128,
      "type": "integer"
    },
    "Mode": {
      "enum": [
        "event"
      ],
      "type": "string"
    },
    "RemoveEventSourceRequest": {
      "properties": {},
      "type": "object"
    },
    "ResourceNotFoundException": {
      "description": "The function or the event source specified in the request does not exist.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        },
        "Type": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "RoleArn": {
      "pattern": "arn:aws:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+",
      "type": "string"
    },
    "Runtime": {
      "enum": [
        "nodejs"
      ],
      "type": "string"
    },
    "ServiceException": {
      "description": "The AWS Lambda service encountered an internal error.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/String"
        },
        "Type": {
          "$ref": "#/definitions/String"
        }
      },
      "type": "object"
    },
    "String": {
      "type": "string"
    },
    "Timeout": {
      "maximum": 60,
      "minimum": 1,
      "type": "integer"
    },
    "Timestamp": {
      "format": "date-time",
      "type": "string"
    },
    "UpdateFunctionConfigurationRequest": {
      "properties": {},
      "type": "object"
    },
    "UploadFunctionRequest": {
      "properties": {
        "FunctionZip": {
          "$ref": "#/definitions/Blob",
          "description": "A .zip file containing your packaged source code. For more information about creating a .zip file, go to <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/walkthrough-custom-events.html\">AWS LambdaL How it Works</a> in the AWS Lambda Developer Guide. "
        }
      },
      "required": [
        "FunctionZip"
      ],
      "type": "object"
    }
  }
}

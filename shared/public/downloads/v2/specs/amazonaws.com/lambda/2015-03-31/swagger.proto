syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package awslambda;

message Post20141113FunctionsFunctionNameInvokeAsyncRequest {
    string Action = 1;
    string FunctionName = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    InvokeAsyncRequest body = 11;
}

message Get20150331EventSourceMappingsRequest {
    string Action = 1;
    // Pagination token
    string Marker = 2;
    // Pagination limit
    string MaxItems = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    ListEventSourceMappingsRequest body = 12;
}

message Put20150331EventSourceMappingsUUIDRequest {
    string Action = 1;
    string UUID = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    UpdateEventSourceMappingRequest body = 11;
}

message Post20150331FunctionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateFunctionRequest body = 10;
}

message Get20150331FunctionsRequest {
    string Action = 1;
    // Pagination token
    string Marker = 2;
    // Pagination limit
    string MaxItems = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    ListFunctionsRequest body = 12;
}

message Get20150331FunctionsFunctionNameRequest {
    string Action = 1;
    string FunctionName = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    GetFunctionRequest body = 11;
}

message Get20150331FunctionsFunctionNameAliasesRequest {
    string Action = 1;
    string FunctionName = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    ListAliasesRequest body = 11;
}

message Put20150331FunctionsFunctionNameAliasesNameRequest {
    string Action = 1;
    string FunctionName = 2;
    string Name = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    UpdateAliasRequest body = 12;
}

message Put20150331FunctionsFunctionNameCodeRequest {
    string Action = 1;
    string FunctionName = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    UpdateFunctionCodeRequest body = 11;
}

message Put20150331FunctionsFunctionNameConfigurationRequest {
    string Action = 1;
    string FunctionName = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    UpdateFunctionConfigurationRequest body = 11;
}

message Post20150331FunctionsFunctionNameInvocationsRequest {
    string Action = 1;
    string FunctionName = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    InvocationRequest body = 11;
}

message Get20150331FunctionsFunctionNamePolicyRequest {
    string Action = 1;
    string FunctionName = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    GetPolicyRequest body = 11;
}

message Delete20150331FunctionsFunctionNamePolicyStatementIdRequest {
    string Action = 1;
    string FunctionName = 2;
    string StatementId = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    RemovePermissionRequest body = 12;
}

message Post20150331FunctionsFunctionNameVersionsRequest {
    string Action = 1;
    string FunctionName = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    PublishVersionRequest body = 11;
}

message Get20160819AccountSettingsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetAccountSettingsRequest body = 10;
}

message Delete20170331TagsARNRequest {
    string ARN = 1;
    string Action = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    UntagResourceRequest body = 11;
}

message AccountLimit {
    // Size, in bytes, of code/dependencies that you can zip into a deployment package (uncompressed zip/jar size) for uploading. The default limit is 250 MB.
    integer CodeSizeUnzipped = 1;
    // Size, in bytes, of a single zipped code/dependencies package you can upload for your Lambda function(.zip/.jar file). Try using Amazon S3 for uploading larger files. Default limit is 50 MB.
    integer CodeSizeZipped = 2;
    // Number of simultaneous executions of your function per region. For more information or to request a limit increase for concurrent executions, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html">Lambda Function Concurrent Executions</a>. The default limit is 100.
    integer ConcurrentExecutions = 3;
    // Maximum size, in bytes, of a code package you can upload per region. The default size is 75 GB.
    integer TotalCodeSize = 4;
}

message AccountUsage {
    // The number of your account's existing functions per region.
    integer FunctionCount = 1;
    // Total size, in bytes, of the account's deployment packages per region.
    integer TotalCodeSize = 2;
}

message AddPermissionRequest {
    // The AWS Lambda action you want to allow in this statement. Each Lambda action is a string starting with <code>lambda:</code> followed by the API name . For example, <code>lambda:CreateFunction</code>. You can use wildcard (<code>lambda:*</code>) to grant permission for all AWS Lambda actions.
    string Action = 1;
    // A unique token that must be supplied by the principal invoking the function. This is currently only used for Alexa Smart Home functions.
    string EventSourceToken = 2;
    // The principal who is getting this permission. It can be Amazon S3 service Principal (<code>s3.amazonaws.com</code>) if you want Amazon S3 to invoke the function, an AWS account ID if you are granting cross-account permission, or any valid AWS service principal such as <code>sns.amazonaws.com</code>. For example, you might want to allow a custom application in another AWS account to push events to AWS Lambda by invoking your function.
    string Principal = 3;
    // This parameter is used for S3 and SES. The AWS account ID (without a hyphen) of the source owner. For example, if the <code>SourceArn</code> identifies a bucket, then this is the bucket owner's account ID. You can use this additional condition to ensure the bucket you specify is owned by a specific account (it is possible the bucket owner deleted the bucket and some other AWS account created the bucket). You can also use this condition to specify all sources (that is, you don't specify the <code>SourceArn</code>) owned by a specific account.
    string SourceAccount = 4;
    // <p>This is optional; however, when granting permission to invoke your function, you should specify this field with the Amazon Resource Name (ARN) as its value. This ensures that only events generated from the specified source can invoke the function.</p> <important> <p>If you add a permission without providing the source ARN, any AWS account that creates a mapping to your function ARN can send events to invoke your Lambda function.</p> </important>
    string SourceArn = 5;
    // A unique statement identifier.
    string StatementId = 6;
}

message AddPermissionResponse {
    // The permission statement you specified in the request. The response returns the same as a string using a backslash ("\") as an escape character in the JSON.
    string Statement = 1;
}

message AliasConfiguration {
    // Lambda function ARN that is qualified using the alias name as the suffix. For example, if you create an alias called <code>BETA</code> that points to a helloworld function version, the ARN is <code>arn:aws:lambda:aws-regions:acct-id:function:helloworld:BETA</code>.
    string AliasArn = 1;
    // Alias description.
    string Description = 2;
    // Function version to which the alias points.
    string FunctionVersion = 3;
    // Alias name.
    string Name = 4;
}

repeated AliasConfiguration AliasList = 1











message CodeStorageExceededException {
    // <p/>
    string Type = 1;
    string message = 2;
}

message CreateAliasRequest {
    // Description of the alias.
    string Description = 1;
    // Lambda function version for which you are creating the alias.
    string FunctionVersion = 2;
    // Name for the alias you are creating.
    string Name = 3;
}

message CreateEventSourceMappingRequest {
    // The largest number of records that AWS Lambda will retrieve from your event source at the time of invoking your function. Your function receives an event with all the retrieved records. The default is 100 records.
    integer BatchSize = 1;
    // Indicates whether AWS Lambda should begin polling the event source. By default, <code>Enabled</code> is true.
    boolean Enabled = 2;
    // The Amazon Resource Name (ARN) of the Amazon Kinesis or the Amazon DynamoDB stream that is the event source. Any record added to this stream could cause AWS Lambda to invoke your Lambda function, it depends on the <code>BatchSize</code>. AWS Lambda POSTs the Amazon Kinesis event, containing records, to your Lambda function as JSON.
    string EventSourceArn = 3;
    // <p>The Lambda function to invoke when AWS Lambda detects an event on the stream.</p> <p> You can specify the function name (for example, <code>Thumbnail</code>) or you can specify Amazon Resource Name (ARN) of the function (for example, <code>arn:aws:lambda:us-west-2:account-id:function:ThumbNail</code>). </p> <p> If you are using versioning, you can also provide a qualified function ARN (ARN that is qualified with function version or alias name as suffix). For more information about versioning, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS Lambda Function Versioning and Aliases</a> </p> <p>AWS Lambda also allows you to specify only the function name with the account ID qualifier (for example, <code>account-id:Thumbnail</code>). </p> <p>Note that the length constraint applies only to the ARN. If you specify only the function name, it is limited to 64 characters in length.</p>
    string FunctionName = 4;
    // The position in the stream where AWS Lambda should start reading. Valid only for Kinesis streams. For more information, see <a href="http://docs.aws.amazon.com/kinesis/latest/APIReference/API_GetShardIterator.html#Kinesis-GetShardIterator-request-ShardIteratorType">ShardIteratorType</a> in the <i>Amazon Kinesis API Reference</i>.
    EventSourcePosition StartingPosition = 5;
    // The timestamp of the data record from which to start reading. Used with <a href="http://docs.aws.amazon.com/kinesis/latest/APIReference/API_GetShardIterator.html#Kinesis-GetShardIterator-request-ShardIteratorType">shard iterator type</a> AT_TIMESTAMP. If a record with this exact timestamp does not exist, the iterator returned is for the next (later) record. If the timestamp is older than the current trim horizon, the iterator returned is for the oldest untrimmed data record (TRIM_HORIZON). Valid only for Kinesis streams.
    string StartingPositionTimestamp = 6;
}

message CreateFunctionRequest {
    // The code for the Lambda function.
    FunctionCode Code = 1;
    // The parent object that contains the target ARN (Amazon Resource Name) of an Amazon SQS queue or Amazon SNS topic.
    DeadLetterConfig DeadLetterConfig = 2;
    // A short, user-defined function description. Lambda does not use this value. Assign a meaningful description as you see fit.
    string Description = 3;
    Environment Environment = 4;
    // The name you want to assign to the function you are uploading. The function names appear in the console and are returned in the <a>ListFunctions</a> API. Function names are used to specify functions to other AWS Lambda API operations, such as <a>Invoke</a>. Note that the length constraint applies only to the ARN. If you specify only the function name, it is limited to 64 characters in length.
    string FunctionName = 5;
    // The function within your code that Lambda calls to begin execution. For Node.js, it is the <i>module-name</i>.<i>export</i> value in your function. For Java, it can be <code>package.class-name::handler</code> or <code>package.class-name</code>. For more information, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/java-programming-model-handler-types.html">Lambda Function Handler (Java)</a>.
    string Handler = 6;
    // The Amazon Resource Name (ARN) of the KMS key used to encrypt your function's environment variables. If not provided, AWS Lambda will use a default service key.
    string KMSKeyArn = 7;
    // The amount of memory, in MB, your Lambda function is given. Lambda uses this memory size to infer the amount of CPU and memory allocated to your function. Your function use-case determines your CPU and memory requirements. For example, a database operation might need less memory compared to an image processing function. The default value is 128 MB. The value must be a multiple of 64 MB.
    integer MemorySize = 8;
    // This boolean parameter can be used to request AWS Lambda to create the Lambda function and publish a version as an atomic operation.
    boolean Publish = 9;
    // The Amazon Resource Name (ARN) of the IAM role that Lambda assumes when it executes your function to access any other Amazon Web Services (AWS) resources. For more information, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/lambda-introduction.html">AWS Lambda: How it Works</a>.
    string Role = 10;
    // <p>The runtime environment for the Lambda function you are uploading.</p> <p>To use the Python runtime v3.6, set the value to "python3.6". To use the Python runtime v2.7, set the value to "python2.7". To use the Node.js runtime v6.10, set the value to "nodejs6.10". To use the Node.js runtime v4.3, set the value to "nodejs4.3".</p> <note> <p>Node v0.10.42 is currently marked as deprecated. You must migrate existing functions to the newer Node.js runtime versions available on AWS Lambda (nodejs4.3 or nodejs6.10) as soon as possible. You can request a one-time extension until June 30, 2017 by going to the Lambda console and following the instructions provided. Failure to do so will result in an invalid parmaeter error being returned. Note that you will have to follow this procedure for each region that contains functions written in the Node v0.10.42 runtime.</p> </note>
    Runtime Runtime = 11;
    // The list of tags (key-value pairs) assigned to the new function.
    array Tags = 12;
    // The function execution time at which Lambda should terminate the function. Because the execution time has cost implications, we recommend you set this value based on your expected execution time. The default is 3 seconds.
    integer Timeout = 13;
    // The parent object that contains your function's tracing settings.
    TracingConfig TracingConfig = 14;
    // If your Lambda function accesses resources in a VPC, you provide this parameter identifying the list of security group IDs and subnet IDs. These must belong to the same VPC. You must provide at least one security group and one subnet ID.
    VpcConfig VpcConfig = 15;
}

message DeadLetterConfig {
    // The Amazon Resource Name (ARN) of an Amazon SQS queue or Amazon SNS topic you specify as your Dead Letter Queue (DLQ).
    string TargetArn = 1;
}

message DeleteAliasRequest {
}

message DeleteEventSourceMappingRequest {
}

message DeleteFunctionRequest {
}

message EC2AccessDeniedException {
    string Message = 1;
    string Type = 2;
}

message EC2ThrottledException {
    string Message = 1;
    string Type = 2;
}

message EC2UnexpectedException {
    string EC2ErrorCode = 1;
    string Message = 2;
    string Type = 3;
}

message ENILimitReachedException {
    string Message = 1;
    string Type = 2;
}

message Environment {
    // The key-value pairs that represent your environment's configuration settings.
    array Variables = 1;
}

message EnvironmentError {
    // The error code returned by the environment error object.
    string ErrorCode = 1;
    // The message returned by the environment error object.
    string Message = 2;
}

message EnvironmentResponse {
    EnvironmentError Error = 1;
    // The key-value pairs returned that represent your environment's configuration settings or error information.
    array Variables = 2;
}

message EnvironmentVariable {
    string key = 1;
    string value = 2;
}
repeated EnvironmentVariable EnvironmentVariables = 1

message EventSourceMappingConfiguration {
    // The largest number of records that AWS Lambda will retrieve from your event source at the time of invoking your function. Your function receives an event with all the retrieved records.
    integer BatchSize = 1;
    // The Amazon Resource Name (ARN) of the Amazon Kinesis stream that is the source of events.
    string EventSourceArn = 2;
    // The Lambda function to invoke when AWS Lambda detects an event on the stream.
    string FunctionArn = 3;
    // The UTC time string indicating the last time the event mapping was updated.
    string LastModified = 4;
    // The result of the last AWS Lambda invocation of your Lambda function.
    string LastProcessingResult = 5;
    // The state of the event source mapping. It can be <code>Creating</code>, <code>Enabled</code>, <code>Disabled</code>, <code>Enabling</code>, <code>Disabling</code>, <code>Updating</code>, or <code>Deleting</code>.
    string State = 6;
    // The reason the event source mapping is in its current state. It is either user-requested or an AWS Lambda-initiated state transition.
    string StateTransitionReason = 7;
    // The AWS Lambda assigned opaque identifier for the mapping.
    string UUID = 8;
}

repeated EventSourceMappingConfiguration EventSourceMappingsList = 1

enum EventSourcePosition {
    TRIM_HORIZON = 0;
    LATEST = 1;
    AT_TIMESTAMP = 2;
}

message FunctionCode {
    // Amazon S3 bucket name where the .zip file containing your deployment package is stored. This bucket must reside in the same AWS region where you are creating the Lambda function.
    string S3Bucket = 1;
    // The Amazon S3 object (the deployment package) key name you want to upload.
    string S3Key = 2;
    // The Amazon S3 object (the deployment package) version you want to upload.
    string S3ObjectVersion = 3;
    // The contents of your zip file containing your deployment package. If you are using the web API directly, the contents of the zip file must be base64-encoded. If you are using the AWS SDKs or the AWS CLI, the SDKs or CLI will do the encoding for you. For more information about creating a .zip file, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html#lambda-intro-execution-role.html">Execution Permissions</a> in the <i>AWS Lambda Developer Guide</i>.
    string ZipFile = 4;
}

message FunctionCodeLocation {
    // The presigned URL you can use to download the function's .zip file that you previously uploaded. The URL is valid for up to 10 minutes.
    string Location = 1;
    // The repository from which you can download the function.
    string RepositoryType = 2;
}

message FunctionConfiguration {
    // It is the SHA256 hash of your function deployment package.
    string CodeSha256 = 1;
    // The size, in bytes, of the function .zip file you uploaded.
    integer CodeSize = 2;
    // The parent object that contains the target ARN (Amazon Resource Name) of an Amazon SQS queue or Amazon SNS topic.
    DeadLetterConfig DeadLetterConfig = 3;
    // The user-provided description.
    string Description = 4;
    // The parent object that contains your environment's configuration settings.
    EnvironmentResponse Environment = 5;
    // The Amazon Resource Name (ARN) assigned to the function.
    string FunctionArn = 6;
    // The name of the function. Note that the length constraint applies only to the ARN. If you specify only the function name, it is limited to 64 characters in length.
    string FunctionName = 7;
    // The function Lambda calls to begin executing your function.
    string Handler = 8;
    // The Amazon Resource Name (ARN) of the KMS key used to encrypt your function's environment variables. If empty, it means you are using the AWS Lambda default service key.
    string KMSKeyArn = 9;
    // The time stamp of the last time you updated the function. The time stamp is conveyed as a string complying with ISO-8601 in this way YYYY-MM-DDThh:mm:ssTZD (e.g., 1997-07-16T19:20:30+01:00). For more information, see <a href="https://www.w3.org/TR/NOTE-datetime">Date and Time Formats</a>.
    string LastModified = 10;
    // Returns the ARN (Amazon Resource Name) of the master function.
    string MasterArn = 11;
    // The memory size, in MB, you configured for the function. Must be a multiple of 64 MB.
    integer MemorySize = 12;
    // The Amazon Resource Name (ARN) of the IAM role that Lambda assumes when it executes your function to access any other Amazon Web Services (AWS) resources.
    string Role = 13;
    // The runtime environment for the Lambda function.
    Runtime Runtime = 14;
    // The function execution time at which Lambda should terminate the function. Because the execution time has cost implications, we recommend you set this value based on your expected execution time. The default is 3 seconds.
    integer Timeout = 15;
    // The parent object that contains your function's tracing settings.
    TracingConfigResponse TracingConfig = 16;
    // The version of the Lambda function.
    string Version = 17;
    // VPC configuration associated with your Lambda function.
    VpcConfigResponse VpcConfig = 18;
}

repeated FunctionConfiguration FunctionList = 1



enum FunctionVersion {
    ALL = 0;
}

message GetAccountSettingsRequest {
}

message GetAccountSettingsResponse {
    AccountLimit AccountLimit = 1;
    AccountUsage AccountUsage = 2;
}

message GetAliasRequest {
}

message GetEventSourceMappingRequest {
}

message GetFunctionConfigurationRequest {
}

message GetFunctionRequest {
}

message GetFunctionResponse {
    FunctionCodeLocation Code = 1;
    FunctionConfiguration Configuration = 2;
    // Returns the list of tags associated with the function.
    array Tags = 3;
}

message GetPolicyRequest {
}

message GetPolicyResponse {
    // The resource policy associated with the specified function. The response returns the same as a string using a backslash ("\") as an escape character in the JSON.
    string Policy = 1;
}

message InvalidParameterValueException {
    // <p/>
    string Type = 1;
    // <p/>
    string message = 2;
}

message InvalidRequestContentException {
    // <p/>
    string Type = 1;
    // <p/>
    string message = 2;
}

message InvalidRuntimeException {
    string Message = 1;
    string Type = 2;
}

message InvalidSecurityGroupIDException {
    string Message = 1;
    string Type = 2;
}

message InvalidSubnetIDException {
    string Message = 1;
    string Type = 2;
}

message InvalidZipFileException {
    string Message = 1;
    string Type = 2;
}

message InvocationRequest {
    // JSON that you want to provide to your Lambda function as input.
    string Payload = 1;
}

message InvocationResponse {
    // <p> It is the JSON representation of the object returned by the Lambda function. This is present only if the invocation type is <code>RequestResponse</code>. </p> <p>In the event of a function error this field contains a message describing the error. For the <code>Handled</code> errors the Lambda function will report this message. For <code>Unhandled</code> errors AWS Lambda reports the message. </p>
    string Payload = 1;
}

enum InvocationType {
    EVENT = 0;
    REQUESTRESPONSE = 1;
    DRYRUN = 2;
}

message InvokeAsyncRequest {
    // JSON that you want to provide to your Lambda function as input.
    string InvokeArgs = 1;
}

message InvokeAsyncResponse {
}

message KMSAccessDeniedException {
    string Message = 1;
    string Type = 2;
}

message KMSDisabledException {
    string Message = 1;
    string Type = 2;
}

message KMSInvalidStateException {
    string Message = 1;
    string Type = 2;
}

message KMSNotFoundException {
    string Message = 1;
    string Type = 2;
}

message ListAliasesRequest {
}

message ListAliasesResponse {
    // A list of aliases.
    array Aliases = 1;
    // A string, present if there are more aliases.
    string NextMarker = 2;
}

message ListEventSourceMappingsRequest {
}

message ListEventSourceMappingsResponse {
    // An array of <code>EventSourceMappingConfiguration</code> objects.
    array EventSourceMappings = 1;
    // A string, present if there are more event source mappings.
    string NextMarker = 2;
}

message ListFunctionsRequest {
}

message ListFunctionsResponse {
    // A list of Lambda functions.
    array Functions = 1;
    // A string, present if there are more functions.
    string NextMarker = 2;
}

message ListTagsRequest {
}

message ListTagsResponse {
    // The list of tags assigned to the function.
    array Tags = 1;
}

message ListVersionsByFunctionRequest {
}

message ListVersionsByFunctionResponse {
    // A string, present if there are more function versions.
    string NextMarker = 1;
    // A list of Lambda function versions.
    array Versions = 2;
}

enum LogType {
    NONE = 0;
    TAIL = 1;
}

message PolicyLengthExceededException {
    string Type = 1;
    string message = 2;
}

message PublishVersionRequest {
    // The SHA256 hash of the deployment package you want to publish. This provides validation on the code you are publishing. If you provide this parameter value must match the SHA256 of the $LATEST version for the publication to succeed.
    string CodeSha256 = 1;
    // The description for the version you are publishing. If not provided, AWS Lambda copies the description from the $LATEST version.
    string Description = 2;
}

message RemovePermissionRequest {
}

message RequestTooLargeException {
    string Type = 1;
    string message = 2;
}

message ResourceConflictException {
    // <p/>
    string Type = 1;
    // <p/>
    string message = 2;
}

message ResourceNotFoundException {
    string Message = 1;
    string Type = 2;
}

enum Runtime {
    NODEJS = 0;
    NODEJS43 = 1;
    NODEJS610 = 2;
    JAVA8 = 3;
    PYTHON27 = 4;
    PYTHON36 = 5;
    DOTNETCORE10 = 6;
    NODEJS43EDGE = 7;
}









repeated string SecurityGroupIds = 1



message ServiceException {
    string Message = 1;
    string Type = 2;
}

message SubnetIPAddressLimitReachedException {
    string Message = 1;
    string Type = 2;
}



repeated string SubnetIds = 1



repeated string TagKeyList = 1

message TagResourceRequest {
    // The list of tags (key-value pairs) you are assigning to the Lambda function.
    array Tags = 1;
}

message Tag {
    string key = 1;
    string value = 2;
}
repeated Tag Tags = 1

enum ThrottleReason {
    CONCURRENTINVOCATIONLIMITEXCEEDED = 0;
    FUNCTIONINVOCATIONRATELIMITEXCEEDED = 1;
    CALLERRATELIMITEXCEEDED = 2;
}

message TooManyRequestsException {
    ThrottleReason Reason = 1;
    string Type = 2;
    string message = 3;
}

message TracingConfig {
    // Can be either PassThrough or Active. If PassThrough, Lambda will only trace the request from an upstream service if it contains a tracing header with "sampled=1". If Active, Lambda will respect any tracing header it receives from an upstream service. If no tracing header is received, Lambda will call X-Ray for a tracing decision.
    TracingMode Mode = 1;
}

message TracingConfigResponse {
    // The tracing mode associated with your Lambda function.
    TracingMode Mode = 1;
}

enum TracingMode {
    ACTIVE = 0;
    PASSTHROUGH = 1;
}

message UnsupportedMediaTypeException {
    string Type = 1;
    string message = 2;
}

message UntagResourceRequest {
}

message UpdateAliasRequest {
    // You can change the description of the alias using this parameter.
    string Description = 1;
    // Using this parameter you can change the Lambda function version to which the alias points.
    string FunctionVersion = 2;
}

message UpdateEventSourceMappingRequest {
    // The maximum number of stream records that can be sent to your Lambda function for a single invocation.
    integer BatchSize = 1;
    // Specifies whether AWS Lambda should actively poll the stream or not. If disabled, AWS Lambda will not poll the stream.
    boolean Enabled = 2;
    // <p>The Lambda function to which you want the stream records sent.</p> <p> You can specify a function name (for example, <code>Thumbnail</code>) or you can specify Amazon Resource Name (ARN) of the function (for example, <code>arn:aws:lambda:us-west-2:account-id:function:ThumbNail</code>). AWS Lambda also allows you to specify a partial ARN (for example, <code>account-id:Thumbnail</code>). Note that the length constraint applies only to the ARN. If you specify only the function name, it is limited to 64 characters in length. </p> <p>If you are using versioning, you can also provide a qualified function ARN (ARN that is qualified with function version or alias name as suffix). For more information about versioning, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS Lambda Function Versioning and Aliases</a> </p> <p>Note that the length constraint applies only to the ARN. If you specify only the function name, it is limited to 64 character in length.</p>
    string FunctionName = 3;
}

message UpdateFunctionCodeRequest {
    // This boolean parameter can be used to test your request to AWS Lambda to update the Lambda function and publish a version as an atomic operation. It will do all necessary computation and validation of your code but will not upload it or a publish a version. Each time this operation is invoked, the <code>CodeSha256</code> hash value the provided code will also be computed and returned in the response.
    boolean DryRun = 1;
    // This boolean parameter can be used to request AWS Lambda to update the Lambda function and publish a version as an atomic operation.
    boolean Publish = 2;
    // Amazon S3 bucket name where the .zip file containing your deployment package is stored. This bucket must reside in the same AWS Region where you are creating the Lambda function.
    string S3Bucket = 3;
    // The Amazon S3 object (the deployment package) key name you want to upload.
    string S3Key = 4;
    // The Amazon S3 object (the deployment package) version you want to upload.
    string S3ObjectVersion = 5;
    // The contents of your zip file containing your deployment package. If you are using the web API directly, the contents of the zip file must be base64-encoded. If you are using the AWS SDKs or the AWS CLI, the SDKs or CLI will do the encoding for you. For more information about creating a .zip file, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html#lambda-intro-execution-role.html">Execution Permissions</a> in the <i>AWS Lambda Developer Guide</i>.
    string ZipFile = 6;
}

message UpdateFunctionConfigurationRequest {
    // The parent object that contains the target ARN (Amazon Resource Name) of an Amazon SQS queue or Amazon SNS topic.
    DeadLetterConfig DeadLetterConfig = 1;
    // A short user-defined function description. AWS Lambda does not use this value. Assign a meaningful description as you see fit.
    string Description = 2;
    // The parent object that contains your environment's configuration settings.
    Environment Environment = 3;
    // The function that Lambda calls to begin executing your function. For Node.js, it is the <code>module-name.export</code> value in your function.
    string Handler = 4;
    // The Amazon Resource Name (ARN) of the KMS key used to encrypt your function's environment variables. If you elect to use the AWS Lambda default service key, pass in an empty string ("") for this parameter.
    string KMSKeyArn = 5;
    // The amount of memory, in MB, your Lambda function is given. AWS Lambda uses this memory size to infer the amount of CPU allocated to your function. Your function use-case determines your CPU and memory requirements. For example, a database operation might need less memory compared to an image processing function. The default value is 128 MB. The value must be a multiple of 64 MB.
    integer MemorySize = 6;
    // The Amazon Resource Name (ARN) of the IAM role that Lambda will assume when it executes your function.
    string Role = 7;
    // <p>The runtime environment for the Lambda function.</p> <p>To use the Python runtime v3.6, set the value to "python3.6". To use the Python runtime v2.7, set the value to "python2.7". To use the Node.js runtime v6.10, set the value to "nodejs6.10". To use the Node.js runtime v4.3, set the value to "nodejs4.3". To use the Python runtime v3.6, set the value to "python3.6".</p> <note> <p>Node v0.10.42 is currently marked as deprecated. You must migrate existing functions to the newer Node.js runtime versions available on AWS Lambda (nodejs4.3 or nodejs6.10) as soon as possible. You can request a one-time extension until June 30, 2017 by going to the Lambda console and following the instructions provided. Failure to do so will result in an invalid parameter error being returned. Note that you will have to follow this procedure for each region that contains functions written in the Node v0.10.42 runtime.</p> </note>
    Runtime Runtime = 8;
    // The function execution time at which AWS Lambda should terminate the function. Because the execution time has cost implications, we recommend you set this value based on your expected execution time. The default is 3 seconds.
    integer Timeout = 9;
    // The parent object that contains your function's tracing settings.
    TracingConfig TracingConfig = 10;
    VpcConfig VpcConfig = 11;
}

message VpcConfig {
    // A list of one or more security groups IDs in your VPC.
    array SecurityGroupIds = 1;
    // A list of one or more subnet IDs in your VPC.
    array SubnetIds = 2;
}

message VpcConfigResponse {
    // A list of security group IDs associated with the Lambda function.
    array SecurityGroupIds = 1;
    // A list of subnet IDs associated with the Lambda function.
    array SubnetIds = 2;
    // The VPC ID associated with you Lambda function.
    string VpcId = 3;
}

service AWSLambdaService {
    // <important> <p>This API is deprecated. We recommend you use <code>Invoke</code> API (see <a>Invoke</a>).</p> </important> <p>Submits an invocation request to AWS Lambda. Upon receiving the request, Lambda executes the specified function asynchronously. To see the logs generated by the Lambda function execution, see the CloudWatch Logs console.</p> <p>This operation requires permission for the <code>lambda:InvokeFunction</code> action.</p>
    rpc Post20141113FunctionsFunctionNameInvokeAsync(Post20141113FunctionsFunctionNameInvokeAsyncRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//2014-11-13/functions/{FunctionName}/invoke-async/"
        body: "body"
      };
    }
    // <p>Returns a list of event source mappings you created using the <code>CreateEventSourceMapping</code> (see <a>CreateEventSourceMapping</a>). </p> <p>For each mapping, the API returns configuration information. You can optionally specify filters to retrieve specific event source mappings.</p> <p>If you are using the versioning feature, you can get list of event source mappings for a specific Lambda function version or an alias as described in the <code>FunctionName</code> parameter. For information about the versioning feature, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS Lambda Function Versioning and Aliases</a>. </p> <p>This operation requires permission for the <code>lambda:ListEventSourceMappings</code> action.</p>
    rpc Get20150331EventSourceMappings(Get20150331EventSourceMappingsRequest) returns (ListEventSourceMappingsResponse) {
      option (google.api.http) = {
        get: "//2015-03-31/event-source-mappings/"
        body: "body"
      };
    }
    // <p>You can update an event source mapping. This is useful if you want to change the parameters of the existing mapping without losing your position in the stream. You can change which function will receive the stream records, but to change the stream itself, you must create a new mapping.</p> <p>If you are using the versioning feature, you can update the event source mapping to map to a specific Lambda function version or alias as described in the <code>FunctionName</code> parameter. For information about the versioning feature, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS Lambda Function Versioning and Aliases</a>. </p> <p>If you disable the event source mapping, AWS Lambda stops polling. If you enable again, it will resume polling from the time it had stopped polling, so you don't lose processing of any records. However, if you delete event source mapping and create it again, it will reset.</p> <p>This operation requires permission for the <code>lambda:UpdateEventSourceMapping</code> action.</p>
    rpc Put20150331EventSourceMappingsUUID(Put20150331EventSourceMappingsUUIDRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "//2015-03-31/event-source-mappings/{UUID}"
        body: "body"
      };
    }
    // <p>Creates a new Lambda function. The function metadata is created from the request parameters, and the code for the function is provided by a .zip file in the request body. If the function name already exists, the operation will fail. Note that the function name is case-sensitive.</p> <p> If you are using versioning, you can also publish a version of the Lambda function you are creating using the <code>Publish</code> parameter. For more information about versioning, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS Lambda Function Versioning and Aliases</a>. </p> <p>This operation requires permission for the <code>lambda:CreateFunction</code> action.</p>
    rpc Post20150331Functions(Post20150331FunctionsRequest) returns (FunctionConfiguration) {
      option (google.api.http) = {
        post: "//2015-03-31/functions"
        body: "body"
      };
    }
    // <p>Returns a list of your Lambda functions. For each function, the response includes the function configuration information. You must use <a>GetFunction</a> to retrieve the code for your function.</p> <p>This operation requires permission for the <code>lambda:ListFunctions</code> action.</p> <p>If you are using the versioning feature, you can list all of your functions or only <code>$LATEST</code> versions. For information about the versioning feature, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS Lambda Function Versioning and Aliases</a>. </p>
    rpc Get20150331Functions(Get20150331FunctionsRequest) returns (ListFunctionsResponse) {
      option (google.api.http) = {
        get: "//2015-03-31/functions/"
        body: "body"
      };
    }
    // <p>Returns the configuration information of the Lambda function and a presigned URL link to the .zip file you uploaded with <a>CreateFunction</a> so you can download the .zip file. Note that the URL is valid for up to 10 minutes. The configuration information is the same information you provided as parameters when uploading the function.</p> <p>Using the optional <code>Qualifier</code> parameter, you can specify a specific function version for which you want this information. If you don't specify this parameter, the API uses unqualified function ARN which return information about the <code>$LATEST</code> version of the Lambda function. For more information, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS Lambda Function Versioning and Aliases</a>.</p> <p>This operation requires permission for the <code>lambda:GetFunction</code> action.</p>
    rpc Get20150331FunctionsFunctionName(Get20150331FunctionsFunctionNameRequest) returns (GetFunctionResponse) {
      option (google.api.http) = {
        get: "//2015-03-31/functions/{FunctionName}"
        body: "body"
      };
    }
    // <p>Returns list of aliases created for a Lambda function. For each alias, the response includes information such as the alias ARN, description, alias name, and the function version to which it points. For more information, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/aliases-intro.html">Introduction to AWS Lambda Aliases</a>.</p> <p>This requires permission for the lambda:ListAliases action.</p>
    rpc Get20150331FunctionsFunctionNameAliases(Get20150331FunctionsFunctionNameAliasesRequest) returns (ListAliasesResponse) {
      option (google.api.http) = {
        get: "//2015-03-31/functions/{FunctionName}/aliases"
        body: "body"
      };
    }
    // <p>Using this API you can update the function version to which the alias points and the alias description. For more information, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/aliases-intro.html">Introduction to AWS Lambda Aliases</a>.</p> <p>This requires permission for the lambda:UpdateAlias action.</p>
    rpc Put20150331FunctionsFunctionNameAliasesName(Put20150331FunctionsFunctionNameAliasesNameRequest) returns (AliasConfiguration) {
      option (google.api.http) = {
        put: "//2015-03-31/functions/{FunctionName}/aliases/{Name}"
        body: "body"
      };
    }
    // <p>Updates the code for the specified Lambda function. This operation must only be used on an existing Lambda function and cannot be used to update the function configuration.</p> <p>If you are using the versioning feature, note this API will always update the $LATEST version of your Lambda function. For information about the versioning feature, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS Lambda Function Versioning and Aliases</a>. </p> <p>This operation requires permission for the <code>lambda:UpdateFunctionCode</code> action.</p>
    rpc Put20150331FunctionsFunctionNameCode(Put20150331FunctionsFunctionNameCodeRequest) returns (FunctionConfiguration) {
      option (google.api.http) = {
        put: "//2015-03-31/functions/{FunctionName}/code"
        body: "body"
      };
    }
    // <p>Updates the configuration parameters for the specified Lambda function by using the values provided in the request. You provide only the parameters you want to change. This operation must only be used on an existing Lambda function and cannot be used to update the function's code.</p> <p>If you are using the versioning feature, note this API will always update the $LATEST version of your Lambda function. For information about the versioning feature, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS Lambda Function Versioning and Aliases</a>. </p> <p>This operation requires permission for the <code>lambda:UpdateFunctionConfiguration</code> action.</p>
    rpc Put20150331FunctionsFunctionNameConfiguration(Put20150331FunctionsFunctionNameConfigurationRequest) returns (FunctionConfiguration) {
      option (google.api.http) = {
        put: "//2015-03-31/functions/{FunctionName}/configuration"
        body: "body"
      };
    }
    // <p>Invokes a specific Lambda function. For an example, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/with-dynamodb-create-function.html#with-dbb-invoke-manually">Create the Lambda Function and Test It Manually</a>. </p> <p>If you are using the versioning feature, you can invoke the specific function version by providing function version or alias name that is pointing to the function version using the <code>Qualifier</code> parameter in the request. If you don't provide the <code>Qualifier</code> parameter, the <code>$LATEST</code> version of the Lambda function is invoked. Invocations occur at least once in response to an event and functions must be idempotent to handle this. For information about the versioning feature, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS Lambda Function Versioning and Aliases</a>. </p> <p>This operation requires permission for the <code>lambda:InvokeFunction</code> action.</p>
    rpc Post20150331FunctionsFunctionNameInvocations(Post20150331FunctionsFunctionNameInvocationsRequest) returns (InvocationResponse) {
      option (google.api.http) = {
        post: "//2015-03-31/functions/{FunctionName}/invocations"
        body: "body"
      };
    }
    // <p>Returns the resource policy associated with the specified Lambda function.</p> <p> If you are using the versioning feature, you can get the resource policy associated with the specific Lambda function version or alias by specifying the version or alias name using the <code>Qualifier</code> parameter. For more information about versioning, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS Lambda Function Versioning and Aliases</a>. </p> <p>You need permission for the <code>lambda:GetPolicy action.</code> </p>
    rpc Get20150331FunctionsFunctionNamePolicy(Get20150331FunctionsFunctionNamePolicyRequest) returns (GetPolicyResponse) {
      option (google.api.http) = {
        get: "//2015-03-31/functions/{FunctionName}/policy"
        body: "body"
      };
    }
    // <p>You can remove individual permissions from an resource policy associated with a Lambda function by providing a statement ID that you provided when you added the permission.</p> <p>If you are using versioning, the permissions you remove are specific to the Lambda function version or alias you specify in the <code>AddPermission</code> request via the <code>Qualifier</code> parameter. For more information about versioning, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS Lambda Function Versioning and Aliases</a>. </p> <p>Note that removal of a permission will cause an active event source to lose permission to the function.</p> <p>You need permission for the <code>lambda:RemovePermission</code> action.</p>
    rpc Delete20150331FunctionsFunctionNamePolicyStatementId(Delete20150331FunctionsFunctionNamePolicyStatementIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//2015-03-31/functions/{FunctionName}/policy/{StatementId}"
        body: "body"
      };
    }
    // Publishes a version of your function from the current snapshot of $LATEST. That is, AWS Lambda takes a snapshot of the function code and configuration information from $LATEST and publishes a new version. The code and configuration cannot be modified after publication. For information about the versioning feature, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS Lambda Function Versioning and Aliases</a>.
    rpc Post20150331FunctionsFunctionNameVersions(Post20150331FunctionsFunctionNameVersionsRequest) returns (FunctionConfiguration) {
      option (google.api.http) = {
        post: "//2015-03-31/functions/{FunctionName}/versions"
        body: "body"
      };
    }
    // <p>Returns a customer's account settings.</p> <p>You can use this operation to retrieve Lambda limits information, such as code size and concurrency limits. For more information about limits, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/limits.html">AWS Lambda Limits</a>. You can also retrieve resource usage statistics, such as code storage usage and function count.</p>
    rpc Get20160819AccountSettings(Get20160819AccountSettingsRequest) returns (GetAccountSettingsResponse) {
      option (google.api.http) = {
        get: "//2016-08-19/account-settings/"
        body: "body"
      };
    }
    // Removes tags from a Lambda function. Requires the function ARN (Amazon Resource Name).
    rpc Delete20170331TagsARN(Delete20170331TagsARNRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//2017-03-31/tags/{ARN}"
        body: "body"
      };
    }
}

syntax = "proto3";

import "google/api/annotations.proto";

package amazonkinesisfirehose;

message PostRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateDeliveryStreamInput body = 10;
}

message Post#DeleteDeliveryStreamRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteDeliveryStreamInput body = 10;
}

message Post#DescribeDeliveryStreamRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeDeliveryStreamInput body = 10;
}

message Post#GetKinesisStreamRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetKinesisStreamInput body = 10;
}

message Post#ListDeliveryStreamsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListDeliveryStreamsInput body = 10;
}

message Post#PutRecordRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    PutRecordInput body = 10;
}

message Post#PutRecordBatchRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    PutRecordBatchInput body = 10;
}

message Post#UpdateDestinationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateDestinationInput body = 10;
}

message BufferingHints {
    // Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300.
    integer IntervalInSeconds = 1;
    // <p>Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5.</p> <p>We recommend setting this parameter to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec, the value should be 10 MB or higher.</p>
    integer SizeInMBs = 2;
}

message CloudWatchLoggingOptions {
    // Enables or disables CloudWatch logging.
    boolean Enabled = 1;
    // The CloudWatch group name for logging. This value is required if CloudWatch logging is enabled.
    string LogGroupName = 2;
    // The CloudWatch log stream name for logging. This value is required if CloudWatch logging is enabled.
    string LogStreamName = 3;
}

enum CompressionFormat {
    UNCOMPRESSED = 0;
    GZIP = 1;
    ZIP = 2;
    SNAPPY = 3;
}

message ConcurrentModificationException {
    // A message that provides information about the error.
    string message = 1;
}

message CopyCommand {
    // <p>Optional parameters to use with the Amazon Redshift <code>COPY</code> command. For more information, see the "Optional Parameters" section of <a href="http://docs.aws.amazon.com/redshift/latest/dg/r_COPY.html">Amazon Redshift COPY command</a>. Some possible examples that would apply to Kinesis Firehose are as follows:</p> <p> <code>delimiter '\t' lzop;</code> - fields are delimited with "\t" (TAB character) and compressed using lzop.</p> <p> <code>delimiter '|'</code> - fields are delimited with "|" (this is the default delimiter).</p> <p> <code>delimiter '|' escape</code> - the delimiter should be escaped.</p> <p> <code>fixedwidth 'venueid:3,venuename:25,venuecity:12,venuestate:2,venueseats:6'</code> - fields are fixed width in the source, with each width specified after every column in the table.</p> <p> <code>JSON 's3://mybucket/jsonpaths.txt'</code> - data is in JSON format, and the path specified is the format of the data.</p> <p>For more examples, see <a href="http://docs.aws.amazon.com/redshift/latest/dg/r_COPY_command_examples.html">Amazon Redshift COPY command examples</a>.</p>
    string CopyOptions = 1;
    // A comma-separated list of column names.
    string DataTableColumns = 2;
    // The name of the target table. The table must already exist in the database.
    string DataTableName = 3;
}

message CreateDeliveryStreamInput {
    // The name of the delivery stream. This name must be unique per AWS account in the same region. If the delivery streams are in different accounts or different regions, you can have multiple delivery streams with the same name.
    string DeliveryStreamName = 1;
    // <p>The delivery stream type. This parameter can be one of the following values:</p> <ul> <li> <p> <code>DirectPut</code>: Provider applications access the delivery stream directly.</p> </li> <li> <p> <code>KinesisStreamAsSource</code>: The delivery stream uses a Kinesis stream as a source.</p> </li> </ul>
    DeliveryStreamType DeliveryStreamType = 2;
    // The destination in Amazon ES. You can specify only one destination.
    ElasticsearchDestinationConfiguration ElasticsearchDestinationConfiguration = 3;
    // The destination in Amazon S3. You can specify only one destination.
    ExtendedS3DestinationConfiguration ExtendedS3DestinationConfiguration = 4;
    // When a Kinesis stream is used as the source for the delivery stream, a <a>KinesisStreamSourceConfiguration</a> containing the Kinesis stream ARN and the role ARN for the source stream.
    KinesisStreamSourceConfiguration KinesisStreamSourceConfiguration = 5;
    // The destination in Amazon Redshift. You can specify only one destination.
    RedshiftDestinationConfiguration RedshiftDestinationConfiguration = 6;
    // [Deprecated] The destination in Amazon S3. You can specify only one destination.
    S3DestinationConfiguration S3DestinationConfiguration = 7;
}

message CreateDeliveryStreamOutput {
    // The ARN of the delivery stream.
    string DeliveryStreamARN = 1;
}

message DeleteDeliveryStreamInput {
    // The name of the delivery stream.
    string DeliveryStreamName = 1;
}

message DeleteDeliveryStreamOutput {
}

message DeliveryStreamDescription {
    // The date and time that the delivery stream was created.
    string CreateTimestamp = 1;
    // The Amazon Resource Name (ARN) of the delivery stream.
    string DeliveryStreamARN = 2;
    // The name of the delivery stream.
    string DeliveryStreamName = 3;
    // The status of the delivery stream.
    DeliveryStreamStatus DeliveryStreamStatus = 4;
    // <p>The delivery stream type. This can be one of the following values:</p> <ul> <li> <p> <code>DirectPut</code>: Provider applications access the delivery stream directly.</p> </li> <li> <p> <code>KinesisStreamAsSource</code>: The delivery stream uses a Kinesis stream as a source.</p> </li> </ul>
    DeliveryStreamType DeliveryStreamType = 5;
    // The destinations.
    array Destinations = 6;
    // Indicates whether there are more destinations available to list.
    boolean HasMoreDestinations = 7;
    // The date and time that the delivery stream was last updated.
    string LastUpdateTimestamp = 8;
    // If the <code>DeliveryStreamType</code> parameter is <code>KinesisStreamAsSource</code>, a <a>SourceDescription</a> object describing the source Kinesis stream.
    SourceDescription Source = 9;
    // Each time the destination is updated for a delivery stream, the version ID is changed, and the current version ID is required when updating the destination. This is so that the service knows it is applying the changes to the correct version of the delivery stream.
    string VersionId = 10;
}



repeated string DeliveryStreamNameList = 1

enum DeliveryStreamStatu {
    CREATING = 0;
    DELETING = 1;
    ACTIVE = 2;
}

enum DeliveryStreamType {
    DIRECTPUT = 0;
    KINESISSTREAMASSOURCE = 1;
}

message DescribeDeliveryStreamInput {
    // The name of the delivery stream.
    string DeliveryStreamName = 1;
    // The ID of the destination to start returning the destination information. Currently, Kinesis Firehose supports one destination per delivery stream.
    string ExclusiveStartDestinationId = 2;
    // The limit on the number of destinations to return. Currently, you can have one destination per delivery stream.
    integer Limit = 3;
}

message DescribeDeliveryStreamOutput {
    // Information about the delivery stream.
    DeliveryStreamDescription DeliveryStreamDescription = 1;
}

message DestinationDescription {
    // The ID of the destination.
    string DestinationId = 1;
    // The destination in Amazon ES.
    ElasticsearchDestinationDescription ElasticsearchDestinationDescription = 2;
    // The destination in Amazon S3.
    ExtendedS3DestinationDescription ExtendedS3DestinationDescription = 3;
    // The destination in Amazon Redshift.
    RedshiftDestinationDescription RedshiftDestinationDescription = 4;
    // [Deprecated] The destination in Amazon S3.
    S3DestinationDescription S3DestinationDescription = 5;
}

repeated DestinationDescription DestinationDescriptionList = 1



message ElasticsearchBufferingHints {
    // Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300 (5 minutes).
    integer IntervalInSeconds = 1;
    // <p>Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5.</p> <p>We recommend setting this parameter to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec, the value should be 10 MB or higher.</p>
    integer SizeInMBs = 2;
}

message ElasticsearchDestinationConfiguration {
    // The buffering options. If no value is specified, the default values for <b>ElasticsearchBufferingHints</b> are used.
    ElasticsearchBufferingHints BufferingHints = 1;
    // The CloudWatch logging options for your delivery stream.
    CloudWatchLoggingOptions CloudWatchLoggingOptions = 2;
    // The ARN of the Amazon ES domain. The IAM role must have permissions for <code>DescribeElasticsearchDomain</code>, <code>DescribeElasticsearchDomains</code>, and <code>DescribeElasticsearchDomainConfig</code> after assuming the role specified in <b>RoleARN</b>.
    string DomainARN = 3;
    // The Elasticsearch index name.
    string IndexName = 4;
    // The Elasticsearch index rotation period. Index rotation appends a time stamp to the IndexName to facilitate the expiration of old data. For more information, see <a href="http://docs.aws.amazon.com/firehose/latest/dev/basic-deliver.html#es-index-rotation">Index Rotation for Amazon Elasticsearch Service Destination</a>. The default value is <code>OneDay</code>.
    ElasticsearchIndexRotationPeriod IndexRotationPeriod = 5;
    // The data processing configuration.
    ProcessingConfiguration ProcessingConfiguration = 6;
    // The retry behavior in case Kinesis Firehose is unable to deliver documents to Amazon ES. The default value is 300 (5 minutes).
    ElasticsearchRetryOptions RetryOptions = 7;
    // The ARN of the IAM role to be assumed by Kinesis Firehose for calling the Amazon ES Configuration API and for indexing documents. For more information, see <a href="http://docs.aws.amazon.com/firehose/latest/dev/controlling-access.html#using-iam-s3">Amazon S3 Bucket Access</a>.
    string RoleARN = 8;
    // Defines how documents should be delivered to Amazon S3. When set to FailedDocumentsOnly, Kinesis Firehose writes any documents that could not be indexed to the configured Amazon S3 destination, with elasticsearch-failed/ appended to the key prefix. When set to AllDocuments, Kinesis Firehose delivers all incoming records to Amazon S3, and also writes failed documents with elasticsearch-failed/ appended to the prefix. For more information, see <a href="http://docs.aws.amazon.com/firehose/latest/dev/basic-deliver.html#es-s3-backup">Amazon S3 Backup for Amazon Elasticsearch Service Destination</a>. Default value is FailedDocumentsOnly.
    ElasticsearchS3BackupMode S3BackupMode = 9;
    // The configuration for the backup Amazon S3 location.
    S3DestinationConfiguration S3Configuration = 10;
    // The Elasticsearch type name.
    string TypeName = 11;
}

message ElasticsearchDestinationDescription {
    // The buffering options.
    ElasticsearchBufferingHints BufferingHints = 1;
    // The CloudWatch logging options.
    CloudWatchLoggingOptions CloudWatchLoggingOptions = 2;
    // The ARN of the Amazon ES domain.
    string DomainARN = 3;
    // The Elasticsearch index name.
    string IndexName = 4;
    // The Elasticsearch index rotation period
    ElasticsearchIndexRotationPeriod IndexRotationPeriod = 5;
    // The data processing configuration.
    ProcessingConfiguration ProcessingConfiguration = 6;
    // The Amazon ES retry options.
    ElasticsearchRetryOptions RetryOptions = 7;
    // The ARN of the AWS credentials.
    string RoleARN = 8;
    // The Amazon S3 backup mode.
    ElasticsearchS3BackupMode S3BackupMode = 9;
    // The Amazon S3 destination.
    S3DestinationDescription S3DestinationDescription = 10;
    // The Elasticsearch type name.
    string TypeName = 11;
}

message ElasticsearchDestinationUpdate {
    // The buffering options. If no value is specified, <b>ElasticsearchBufferingHints</b> object default values are used.
    ElasticsearchBufferingHints BufferingHints = 1;
    // The CloudWatch logging options for your delivery stream.
    CloudWatchLoggingOptions CloudWatchLoggingOptions = 2;
    // The ARN of the Amazon ES domain. The IAM role must have permissions for <code>DescribeElasticsearchDomain</code>, <code>DescribeElasticsearchDomains</code>, and <code>DescribeElasticsearchDomainConfig</code> after assuming the IAM role specified in <b>RoleARN</b>.
    string DomainARN = 3;
    // The Elasticsearch index name.
    string IndexName = 4;
    // The Elasticsearch index rotation period. Index rotation appends a time stamp to IndexName to facilitate the expiration of old data. For more information, see <a href="http://docs.aws.amazon.com/firehose/latest/dev/basic-deliver.html#es-index-rotation">Index Rotation for Amazon Elasticsearch Service Destination</a>. Default value is <code>OneDay</code>.
    ElasticsearchIndexRotationPeriod IndexRotationPeriod = 5;
    // The data processing configuration.
    ProcessingConfiguration ProcessingConfiguration = 6;
    // The retry behavior in case Kinesis Firehose is unable to deliver documents to Amazon ES. The default value is 300 (5 minutes).
    ElasticsearchRetryOptions RetryOptions = 7;
    // The ARN of the IAM role to be assumed by Kinesis Firehose for calling the Amazon ES Configuration API and for indexing documents. For more information, see <a href="http://docs.aws.amazon.com/firehose/latest/dev/controlling-access.html#using-iam-s3">Amazon S3 Bucket Access</a>.
    string RoleARN = 8;
    // The Amazon S3 destination.
    S3DestinationUpdate S3Update = 9;
    // The Elasticsearch type name.
    string TypeName = 10;
}

enum ElasticsearchIndexRotationPeriod {
    NOROTATION = 0;
    ONEHOUR = 1;
    ONEDAY = 2;
    ONEWEEK = 3;
    ONEMONTH = 4;
}

message ElasticsearchRetryOptions {
    // After an initial failure to deliver to Amazon ES, the total amount of time during which Kinesis Firehose re-attempts delivery (including the first attempt). After this time has elapsed, the failed documents are written to Amazon S3. Default value is 300 seconds (5 minutes). A value of 0 (zero) results in no retries.
    integer DurationInSeconds = 1;
}

enum ElasticsearchS3BackupMode {
    FAILEDDOCUMENTSONLY = 0;
    ALLDOCUMENTS = 1;
}

message EncryptionConfiguration {
    // The encryption key.
    KMSEncryptionConfig KMSEncryptionConfig = 1;
    // Specifically override existing encryption information to ensure that no encryption is used.
    NoEncryptionConfig NoEncryptionConfig = 2;
}

message ExtendedS3DestinationConfiguration {
    // The ARN of the S3 bucket.
    string BucketARN = 1;
    // The buffering option.
    BufferingHints BufferingHints = 2;
    // The CloudWatch logging options for your delivery stream.
    CloudWatchLoggingOptions CloudWatchLoggingOptions = 3;
    // The compression format. If no value is specified, the default is UNCOMPRESSED.
    CompressionFormat CompressionFormat = 4;
    // The encryption configuration. If no value is specified, the default is no encryption.
    EncryptionConfiguration EncryptionConfiguration = 5;
    // The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. If the prefix ends with a slash, it appears as a folder in the S3 bucket. For more information, see <a href="http://docs.aws.amazon.com/firehose/latest/dev/basic-deliver.html">Amazon S3 Object Name Format</a> in the <i>Amazon Kinesis Firehose Developer Guide</i>.
    string Prefix = 6;
    // The data processing configuration.
    ProcessingConfiguration ProcessingConfiguration = 7;
    // The ARN of the AWS credentials.
    string RoleARN = 8;
    // The configuration for backup in Amazon S3.
    S3DestinationConfiguration S3BackupConfiguration = 9;
    // The Amazon S3 backup mode.
    S3BackupMode S3BackupMode = 10;
}

message ExtendedS3DestinationDescription {
    // The ARN of the S3 bucket.
    string BucketARN = 1;
    // The buffering option.
    BufferingHints BufferingHints = 2;
    // The CloudWatch logging options for your delivery stream.
    CloudWatchLoggingOptions CloudWatchLoggingOptions = 3;
    // The compression format. If no value is specified, the default is <code>UNCOMPRESSED</code>.
    CompressionFormat CompressionFormat = 4;
    // The encryption configuration. If no value is specified, the default is no encryption.
    EncryptionConfiguration EncryptionConfiguration = 5;
    // The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. If the prefix ends with a slash, it appears as a folder in the S3 bucket. For more information, see <a href="http://docs.aws.amazon.com/firehose/latest/dev/basic-deliver.html">Amazon S3 Object Name Format</a> in the <i>Amazon Kinesis Firehose Developer Guide</i>.
    string Prefix = 6;
    // The data processing configuration.
    ProcessingConfiguration ProcessingConfiguration = 7;
    // The ARN of the AWS credentials.
    string RoleARN = 8;
    // The configuration for backup in Amazon S3.
    S3DestinationDescription S3BackupDescription = 9;
    // The Amazon S3 backup mode.
    S3BackupMode S3BackupMode = 10;
}

message ExtendedS3DestinationUpdate {
    // The ARN of the S3 bucket.
    string BucketARN = 1;
    // The buffering option.
    BufferingHints BufferingHints = 2;
    // The CloudWatch logging options for your delivery stream.
    CloudWatchLoggingOptions CloudWatchLoggingOptions = 3;
    // The compression format. If no value is specified, the default is <code>UNCOMPRESSED</code>.
    CompressionFormat CompressionFormat = 4;
    // The encryption configuration. If no value is specified, the default is no encryption.
    EncryptionConfiguration EncryptionConfiguration = 5;
    // The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. If the prefix ends with a slash, it appears as a folder in the S3 bucket. For more information, see <a href="http://docs.aws.amazon.com/firehose/latest/dev/basic-deliver.html">Amazon S3 Object Name Format</a> in the <i>Amazon Kinesis Firehose Developer Guide</i>.
    string Prefix = 6;
    // The data processing configuration.
    ProcessingConfiguration ProcessingConfiguration = 7;
    // The ARN of the AWS credentials.
    string RoleARN = 8;
    // Enables or disables Amazon S3 backup mode.
    S3BackupMode S3BackupMode = 9;
    // The Amazon S3 destination for backup.
    S3DestinationUpdate S3BackupUpdate = 10;
}

message GetKinesisStreamInput {
    string DeliveryStreamARN = 1;
}

message GetKinesisStreamOutput {
    SessionCredentials CredentialsForReadingKinesisStream = 1;
    string KinesisStreamARN = 2;
}

message InvalidArgumentException {
    // A message that provides information about the error.
    string message = 1;
}

message InvalidStreamTypeException {
    string message = 1;
    string source = 2;
}

message KMSEncryptionConfig {
    // The ARN of the encryption key. Must belong to the same region as the destination Amazon S3 bucket.
    string AWSKMSKeyARN = 1;
}

message KinesisStreamSourceConfiguration {
    // The ARN of the source Kinesis stream.
    string KinesisStreamARN = 1;
    // The ARN of the role that provides access to the source Kinesis stream.
    string RoleARN = 2;
}

message KinesisStreamSourceDescription {
    // Kinesis Firehose starts retrieving records from the Kinesis stream starting with this time stamp.
    string DeliveryStartTimestamp = 1;
    // The ARN of the source Kinesis stream.
    string KinesisStreamARN = 2;
    // The ARN of the role used by the source Kinesis stream.
    string RoleARN = 3;
}

message LimitExceededException {
    // A message that provides information about the error.
    string message = 1;
}

message ListDeliveryStreamsInput {
    // <p>The delivery stream type. This can be one of the following values:</p> <ul> <li> <p> <code>DirectPut</code>: Provider applications access the delivery stream directly.</p> </li> <li> <p> <code>KinesisStreamAsSource</code>: The delivery stream uses a Kinesis stream as a source.</p> </li> </ul> <p>This parameter is optional. If this parameter is omitted, delivery streams of all types are returned.</p>
    DeliveryStreamType DeliveryStreamType = 1;
    // The name of the delivery stream to start the list with.
    string ExclusiveStartDeliveryStreamName = 2;
    // The maximum number of delivery streams to list.
    integer Limit = 3;
}

message ListDeliveryStreamsOutput {
    // The names of the delivery streams.
    array DeliveryStreamNames = 1;
    // Indicates whether there are more delivery streams available to list.
    boolean HasMoreDeliveryStreams = 2;
}

enum NoEncryptionConfig {
    NOENCRYPTION = 0;
}

message ProcessingConfiguration {
    // Enables or disables data processing.
    boolean Enabled = 1;
    // The data processors.
    array Processors = 2;
}

message Processor {
    // The processor parameters.
    array Parameters = 1;
    // The type of processor.
    ProcessorType Type = 2;
}

repeated Processor ProcessorList = 1

message ProcessorParameter {
    // The name of the parameter.
    ProcessorParameterName ParameterName = 1;
    // The parameter value.
    string ParameterValue = 2;
}

repeated ProcessorParameter ProcessorParameterList = 1

enum ProcessorParameterName {
    LAMBDAARN = 0;
    NUMBEROFRETRIES = 1;
}

enum ProcessorType {
    LAMBDA = 0;
}

message PutRecordBatchInput {
    // The name of the delivery stream.
    string DeliveryStreamName = 1;
    // One or more records.
    array Records = 2;
}

message PutRecordBatchOutput {
    // The number of records that might have failed processing.
    integer FailedPutCount = 1;
    // The results array. For each record, the index of the response element is the same as the index used in the request array.
    array RequestResponses = 2;
}

repeated Record PutRecordBatchRequestEntryList = 1

message PutRecordBatchResponseEntry {
    // The error code for an individual record result.
    string ErrorCode = 1;
    // The error message for an individual record result.
    string ErrorMessage = 2;
    // The ID of the record.
    string RecordId = 3;
}

repeated PutRecordBatchResponseEntry PutRecordBatchResponseEntryList = 1

message PutRecordInput {
    // The name of the delivery stream.
    string DeliveryStreamName = 1;
    // The record.
    Record Record = 2;
}

message PutRecordOutput {
    // The ID of the record.
    string RecordId = 1;
}

message Record {
    // The data blob, which is base64-encoded when the blob is serialized. The maximum size of the data blob, before base64-encoding, is 1,000 KB.
    string Data = 1;
}

message RedshiftDestinationConfiguration {
    // The CloudWatch logging options for your delivery stream.
    CloudWatchLoggingOptions CloudWatchLoggingOptions = 1;
    // The database connection string.
    string ClusterJDBCURL = 2;
    // The <code>COPY</code> command.
    CopyCommand CopyCommand = 3;
    // The user password.
    string Password = 4;
    // The data processing configuration.
    ProcessingConfiguration ProcessingConfiguration = 5;
    // The retry behavior in case Kinesis Firehose is unable to deliver documents to Amazon Redshift. Default value is 3600 (60 minutes).
    RedshiftRetryOptions RetryOptions = 6;
    // The ARN of the AWS credentials.
    string RoleARN = 7;
    // The configuration for backup in Amazon S3.
    S3DestinationConfiguration S3BackupConfiguration = 8;
    // The Amazon S3 backup mode.
    RedshiftS3BackupMode S3BackupMode = 9;
    // <p>The configuration for the intermediate Amazon S3 location from which Amazon Redshift obtains data. Restrictions are described in the topic for <a>CreateDeliveryStream</a>.</p> <p>The compression formats <code>SNAPPY</code> or <code>ZIP</code> cannot be specified in <b>RedshiftDestinationConfiguration.S3Configuration</b> because the Amazon Redshift <code>COPY</code> operation that reads from the S3 bucket doesn't support these compression formats.</p>
    S3DestinationConfiguration S3Configuration = 10;
    // The name of the user.
    string Username = 11;
}

message RedshiftDestinationDescription {
    // The CloudWatch logging options for your delivery stream.
    CloudWatchLoggingOptions CloudWatchLoggingOptions = 1;
    // The database connection string.
    string ClusterJDBCURL = 2;
    // The <code>COPY</code> command.
    CopyCommand CopyCommand = 3;
    // The data processing configuration.
    ProcessingConfiguration ProcessingConfiguration = 4;
    // The retry behavior in case Kinesis Firehose is unable to deliver documents to Amazon Redshift. Default value is 3600 (60 minutes).
    RedshiftRetryOptions RetryOptions = 5;
    // The ARN of the AWS credentials.
    string RoleARN = 6;
    // The configuration for backup in Amazon S3.
    S3DestinationDescription S3BackupDescription = 7;
    // The Amazon S3 backup mode.
    RedshiftS3BackupMode S3BackupMode = 8;
    // The Amazon S3 destination.
    S3DestinationDescription S3DestinationDescription = 9;
    // The name of the user.
    string Username = 10;
}

message RedshiftDestinationUpdate {
    // The CloudWatch logging options for your delivery stream.
    CloudWatchLoggingOptions CloudWatchLoggingOptions = 1;
    // The database connection string.
    string ClusterJDBCURL = 2;
    // The <code>COPY</code> command.
    CopyCommand CopyCommand = 3;
    // The user password.
    string Password = 4;
    // The data processing configuration.
    ProcessingConfiguration ProcessingConfiguration = 5;
    // The retry behavior in case Kinesis Firehose is unable to deliver documents to Amazon Redshift. Default value is 3600 (60 minutes).
    RedshiftRetryOptions RetryOptions = 6;
    // The ARN of the AWS credentials.
    string RoleARN = 7;
    // The Amazon S3 backup mode.
    RedshiftS3BackupMode S3BackupMode = 8;
    // The Amazon S3 destination for backup.
    S3DestinationUpdate S3BackupUpdate = 9;
    // <p>The Amazon S3 destination.</p> <p>The compression formats <code>SNAPPY</code> or <code>ZIP</code> cannot be specified in <b>RedshiftDestinationUpdate.S3Update</b> because the Amazon Redshift <code>COPY</code> operation that reads from the S3 bucket doesn't support these compression formats.</p>
    S3DestinationUpdate S3Update = 10;
    // The name of the user.
    string Username = 11;
}

message RedshiftRetryOptions {
    // The length of time during which Kinesis Firehose retries delivery after a failure, starting from the initial request and including the first attempt. The default value is 3600 seconds (60 minutes). Kinesis Firehose does not retry if the value of <code>DurationInSeconds</code> is 0 (zero) or if the first delivery attempt takes longer than the current value.
    integer DurationInSeconds = 1;
}

enum RedshiftS3BackupMode {
    DISABLED = 0;
    ENABLED = 1;
}

message ResourceInUseException {
    // A message that provides information about the error.
    string message = 1;
}

message ResourceNotFoundException {
    // A message that provides information about the error.
    string message = 1;
}

enum S3BackupMode {
    DISABLED = 0;
    ENABLED = 1;
}

message S3DestinationConfiguration {
    // The ARN of the S3 bucket.
    string BucketARN = 1;
    // The buffering option. If no value is specified, <b>BufferingHints</b> object default values are used.
    BufferingHints BufferingHints = 2;
    // The CloudWatch logging options for your delivery stream.
    CloudWatchLoggingOptions CloudWatchLoggingOptions = 3;
    // <p>The compression format. If no value is specified, the default is <code>UNCOMPRESSED</code>.</p> <p>The compression formats <code>SNAPPY</code> or <code>ZIP</code> cannot be specified for Amazon Redshift destinations because they are not supported by the Amazon Redshift <code>COPY</code> operation that reads from the S3 bucket.</p>
    CompressionFormat CompressionFormat = 4;
    // The encryption configuration. If no value is specified, the default is no encryption.
    EncryptionConfiguration EncryptionConfiguration = 5;
    // The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. If the prefix ends with a slash, it appears as a folder in the S3 bucket. For more information, see <a href="http://docs.aws.amazon.com/firehose/latest/dev/basic-deliver.html">Amazon S3 Object Name Format</a> in the <i>Amazon Kinesis Firehose Developer Guide</i>.
    string Prefix = 6;
    // The ARN of the AWS credentials.
    string RoleARN = 7;
}

message S3DestinationDescription {
    // The ARN of the S3 bucket.
    string BucketARN = 1;
    // The buffering option. If no value is specified, <b>BufferingHints</b> object default values are used.
    BufferingHints BufferingHints = 2;
    // The CloudWatch logging options for your delivery stream.
    CloudWatchLoggingOptions CloudWatchLoggingOptions = 3;
    // The compression format. If no value is specified, the default is <code>UNCOMPRESSED</code>.
    CompressionFormat CompressionFormat = 4;
    // The encryption configuration. If no value is specified, the default is no encryption.
    EncryptionConfiguration EncryptionConfiguration = 5;
    // The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. If the prefix ends with a slash, it appears as a folder in the S3 bucket. For more information, see <a href="http://docs.aws.amazon.com/firehose/latest/dev/basic-deliver.html">Amazon S3 Object Name Format</a> in the <i>Amazon Kinesis Firehose Developer Guide</i>.
    string Prefix = 6;
    // The ARN of the AWS credentials.
    string RoleARN = 7;
}

message S3DestinationUpdate {
    // The ARN of the S3 bucket.
    string BucketARN = 1;
    // The buffering option. If no value is specified, <b>BufferingHints</b> object default values are used.
    BufferingHints BufferingHints = 2;
    // The CloudWatch logging options for your delivery stream.
    CloudWatchLoggingOptions CloudWatchLoggingOptions = 3;
    // <p>The compression format. If no value is specified, the default is <code>UNCOMPRESSED</code>.</p> <p>The compression formats <code>SNAPPY</code> or <code>ZIP</code> cannot be specified for Amazon Redshift destinations because they are not supported by the Amazon Redshift <code>COPY</code> operation that reads from the S3 bucket.</p>
    CompressionFormat CompressionFormat = 4;
    // The encryption configuration. If no value is specified, the default is no encryption.
    EncryptionConfiguration EncryptionConfiguration = 5;
    // The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. If the prefix ends with a slash, it appears as a folder in the S3 bucket. For more information, see <a href="http://docs.aws.amazon.com/firehose/latest/dev/basic-deliver.html">Amazon S3 Object Name Format</a> in the <i>Amazon Kinesis Firehose Developer Guide</i>.
    string Prefix = 6;
    // The ARN of the AWS credentials.
    string RoleARN = 7;
}

message ServiceUnavailableException {
    // A message that provides information about the error.
    string message = 1;
}

message SessionCredentials {
    string AccessKeyId = 1;
    string Expiration = 2;
    string SecretAccessKey = 3;
    string SessionToken = 4;
}

message SourceDescription {
    // The <a>KinesisStreamSourceDescription</a> value for the source Kinesis stream.
    KinesisStreamSourceDescription KinesisStreamSourceDescription = 1;
}

message UpdateDestinationInput {
    // Obtain this value from the <b>VersionId</b> result of <a>DeliveryStreamDescription</a>. This value is required, and helps the service to perform conditional operations. For example, if there is an interleaving update and this value is null, then the update destination fails. After the update is successful, the <b>VersionId</b> value is updated. The service then performs a merge of the old configuration with the new configuration.
    string CurrentDeliveryStreamVersionId = 1;
    // The name of the delivery stream.
    string DeliveryStreamName = 2;
    // The ID of the destination.
    string DestinationId = 3;
    // Describes an update for a destination in Amazon ES.
    ElasticsearchDestinationUpdate ElasticsearchDestinationUpdate = 4;
    // Describes an update for a destination in Amazon S3.
    ExtendedS3DestinationUpdate ExtendedS3DestinationUpdate = 5;
    // Describes an update for a destination in Amazon Redshift.
    RedshiftDestinationUpdate RedshiftDestinationUpdate = 6;
    // [Deprecated] Describes an update for a destination in Amazon S3.
    S3DestinationUpdate S3DestinationUpdate = 7;
}

message UpdateDestinationOutput {
}

service AmazonKinesisFirehoseService {
    // <p>Creates a delivery stream.</p> <p>By default, you can create up to 20 delivery streams per region.</p> <p>This is an asynchronous operation that immediately returns. The initial status of the delivery stream is <code>CREATING</code>. After the delivery stream is created, its status is <code>ACTIVE</code> and it now accepts data. Attempts to send data to a delivery stream that is not in the <code>ACTIVE</code> state cause an exception. To check the state of a delivery stream, use <a>DescribeDeliveryStream</a>.</p> <p>A Kinesis Firehose delivery stream can be configured to receive records directly from providers using <a>PutRecord</a> or <a>PutRecordBatch</a>, or it can be configured to use an existing Kinesis stream as its source. To specify a Kinesis stream as input, set the <code>DeliveryStreamType</code> parameter to <code>KinesisStreamAsSource</code>, and provide the Kinesis stream ARN and role ARN in the <code>KinesisStreamSourceConfiguration</code> parameter.</p> <p>A delivery stream is configured with a single destination: Amazon S3, Amazon ES, or Amazon Redshift. You must specify only one of the following destination configuration parameters: <b>ExtendedS3DestinationConfiguration</b>, <b>S3DestinationConfiguration</b>, <b>ElasticsearchDestinationConfiguration</b>, or <b>RedshiftDestinationConfiguration</b>.</p> <p>When you specify <b>S3DestinationConfiguration</b>, you can also provide the following optional values: <b>BufferingHints</b>, <b>EncryptionConfiguration</b>, and <b>CompressionFormat</b>. By default, if no <b>BufferingHints</b> value is provided, Kinesis Firehose buffers data up to 5 MB or for 5 minutes, whichever condition is satisfied first. Note that <b>BufferingHints</b> is a hint, so there are some cases where the service cannot adhere to these conditions strictly; for example, record boundaries are such that the size is a little over or under the configured buffering size. By default, no encryption is performed. We strongly recommend that you enable encryption to ensure secure data storage in Amazon S3.</p> <p>A few notes about Amazon Redshift as a destination:</p> <ul> <li> <p>An Amazon Redshift destination requires an S3 bucket as intermediate location, as Kinesis Firehose first delivers data to S3 and then uses <code>COPY</code> syntax to load data into an Amazon Redshift table. This is specified in the <b>RedshiftDestinationConfiguration.S3Configuration</b> parameter.</p> </li> <li> <p>The compression formats <code>SNAPPY</code> or <code>ZIP</code> cannot be specified in <b>RedshiftDestinationConfiguration.S3Configuration</b> because the Amazon Redshift <code>COPY</code> operation that reads from the S3 bucket doesn't support these compression formats.</p> </li> <li> <p>We strongly recommend that you use the user name and password you provide exclusively with Kinesis Firehose, and that the permissions for the account are restricted for Amazon Redshift <code>INSERT</code> permissions.</p> </li> </ul> <p>Kinesis Firehose assumes the IAM role that is configured as part of the destination. The role should allow the Kinesis Firehose principal to assume the role, and the role should have permissions that allow the service to deliver the data. For more information, see <a href="http://docs.aws.amazon.com/firehose/latest/dev/controlling-access.html#using-iam-s3">Amazon S3 Bucket Access</a> in the <i>Amazon Kinesis Firehose Developer Guide</i>.</p>
    rpc Post(PostRequest) returns (CreateDeliveryStreamOutput) {
      option (google.api.http) = {
        post: "//"
        body: "body"
      };
    }
    // <p>Deletes a delivery stream and its data.</p> <p>You can delete a delivery stream only if it is in <code>ACTIVE</code> or <code>DELETING</code> state, and not in the <code>CREATING</code> state. While the deletion request is in process, the delivery stream is in the <code>DELETING</code> state.</p> <p>To check the state of a delivery stream, use <a>DescribeDeliveryStream</a>.</p> <p>While the delivery stream is <code>DELETING</code> state, the service may continue to accept the records, but the service doesn't make any guarantees with respect to delivering the data. Therefore, as a best practice, you should first stop any applications that are sending records before deleting a delivery stream.</p>
    rpc Post#DeleteDeliveryStream(Post#DeleteDeliveryStreamRequest) returns (DeleteDeliveryStreamOutput) {
      option (google.api.http) = {
        post: "//#DeleteDeliveryStream"
        body: "body"
      };
    }
    // Describes the specified delivery stream and gets the status. For example, after your delivery stream is created, call <a>DescribeDeliveryStream</a> to see if the delivery stream is <code>ACTIVE</code> and therefore ready for data to be sent to it.
    rpc Post#DescribeDeliveryStream(Post#DescribeDeliveryStreamRequest) returns (DescribeDeliveryStreamOutput) {
      option (google.api.http) = {
        post: "//#DescribeDeliveryStream"
        body: "body"
      };
    }
    rpc Post#GetKinesisStream(Post#GetKinesisStreamRequest) returns (GetKinesisStreamOutput) {
      option (google.api.http) = {
        post: "//#GetKinesisStream"
        body: "body"
      };
    }
    // <p>Lists your delivery streams.</p> <p>The number of delivery streams might be too large to return using a single call to <a>ListDeliveryStreams</a>. You can limit the number of delivery streams returned, using the <b>Limit</b> parameter. To determine whether there are more delivery streams to list, check the value of <b>HasMoreDeliveryStreams</b> in the output. If there are more delivery streams to list, you can request them by specifying the name of the last delivery stream returned in the call in the <b>ExclusiveStartDeliveryStreamName</b> parameter of a subsequent call.</p>
    rpc Post#ListDeliveryStreams(Post#ListDeliveryStreamsRequest) returns (ListDeliveryStreamsOutput) {
      option (google.api.http) = {
        post: "//#ListDeliveryStreams"
        body: "body"
      };
    }
    // <p>Writes a single data record into an Amazon Kinesis Firehose delivery stream. To write multiple data records into a delivery stream, use <a>PutRecordBatch</a>. Applications using these operations are referred to as producers.</p> <p>By default, each delivery stream can take in up to 2,000 transactions per second, 5,000 records per second, or 5 MB per second. Note that if you use <a>PutRecord</a> and <a>PutRecordBatch</a>, the limits are an aggregate across these two operations for each delivery stream. For more information about limits and how to request an increase, see <a href="http://docs.aws.amazon.com/firehose/latest/dev/limits.html">Amazon Kinesis Firehose Limits</a>. </p> <p>You must specify the name of the delivery stream and the data record when using <a>PutRecord</a>. The data record consists of a data blob that can be up to 1,000 KB in size, and any kind of data, for example, a segment from a log file, geographic location data, website clickstream data, and so on.</p> <p>Kinesis Firehose buffers records before delivering them to the destination. To disambiguate the data blobs at the destination, a common solution is to use delimiters in the data, such as a newline (<code>\n</code>) or some other character unique within the data. This allows the consumer application to parse individual data items when reading the data from the destination.</p> <p>The <a>PutRecord</a> operation returns a <b>RecordId</b>, which is a unique string assigned to each record. Producer applications can use this ID for purposes such as auditability and investigation.</p> <p>If the <a>PutRecord</a> operation throws a <b>ServiceUnavailableException</b>, back off and retry. If the exception persists, it is possible that the throughput limits have been exceeded for the delivery stream. </p> <p>Data records sent to Kinesis Firehose are stored for 24 hours from the time they are added to a delivery stream as it attempts to send the records to the destination. If the destination is unreachable for more than 24 hours, the data is no longer available.</p>
    rpc Post#PutRecord(Post#PutRecordRequest) returns (PutRecordOutput) {
      option (google.api.http) = {
        post: "//#PutRecord"
        body: "body"
      };
    }
    // <p>Writes multiple data records into a delivery stream in a single call, which can achieve higher throughput per producer than when writing single records. To write single data records into a delivery stream, use <a>PutRecord</a>. Applications using these operations are referred to as producers.</p> <p>By default, each delivery stream can take in up to 2,000 transactions per second, 5,000 records per second, or 5 MB per second. If you use <a>PutRecord</a> and <a>PutRecordBatch</a>, the limits are an aggregate across these two operations for each delivery stream. For more information about limits, see <a href="http://docs.aws.amazon.com/firehose/latest/dev/limits.html">Amazon Kinesis Firehose Limits</a>.</p> <p>Each <a>PutRecordBatch</a> request supports up to 500 records. Each record in the request can be as large as 1,000 KB (before 64-bit encoding), up to a limit of 4 MB for the entire request. These limits cannot be changed.</p> <p>You must specify the name of the delivery stream and the data record when using <a>PutRecord</a>. The data record consists of a data blob that can be up to 1,000 KB in size, and any kind of data. For example, it could be a segment from a log file, geographic location data, web site clickstream data, and so on.</p> <p>Kinesis Firehose buffers records before delivering them to the destination. To disambiguate the data blobs at the destination, a common solution is to use delimiters in the data, such as a newline (<code>\n</code>) or some other character unique within the data. This allows the consumer application to parse individual data items when reading the data from the destination.</p> <p>The <a>PutRecordBatch</a> response includes a count of failed records, <b>FailedPutCount</b>, and an array of responses, <b>RequestResponses</b>. Each entry in the <b>RequestResponses</b> array provides additional information about the processed record. It directly correlates with a record in the request array using the same ordering, from the top to the bottom. The response array always includes the same number of records as the request array. <b>RequestResponses</b> includes both successfully and unsuccessfully processed records. Kinesis Firehose attempts to process all records in each <a>PutRecordBatch</a> request. A single record failure does not stop the processing of subsequent records.</p> <p>A successfully processed record includes a <b>RecordId</b> value, which is unique for the record. An unsuccessfully processed record includes <b>ErrorCode</b> and <b>ErrorMessage</b> values. <b>ErrorCode</b> reflects the type of error, and is one of the following values: <code>ServiceUnavailable</code> or <code>InternalFailure</code>. <b>ErrorMessage</b> provides more detailed information about the error.</p> <p>If there is an internal server error or a timeout, the write might have completed or it might have failed. If <b>FailedPutCount</b> is greater than 0, retry the request, resending only those records that might have failed processing. This minimizes the possible duplicate records and also reduces the total bytes sent (and corresponding charges). We recommend that you handle any duplicates at the destination.</p> <p>If <a>PutRecordBatch</a> throws <b>ServiceUnavailableException</b>, back off and retry. If the exception persists, it is possible that the throughput limits have been exceeded for the delivery stream.</p> <p>Data records sent to Kinesis Firehose are stored for 24 hours from the time they are added to a delivery stream as it attempts to send the records to the destination. If the destination is unreachable for more than 24 hours, the data is no longer available.</p>
    rpc Post#PutRecordBatch(Post#PutRecordBatchRequest) returns (PutRecordBatchOutput) {
      option (google.api.http) = {
        post: "//#PutRecordBatch"
        body: "body"
      };
    }
    // <p>Updates the specified destination of the specified delivery stream.</p> <p>You can use this operation to change the destination type (for example, to replace the Amazon S3 destination with Amazon Redshift) or change the parameters associated with a destination (for example, to change the bucket name of the Amazon S3 destination). The update might not occur immediately. The target delivery stream remains active while the configurations are updated, so data writes to the delivery stream can continue during this process. The updated configurations are usually effective within a few minutes.</p> <p>Note that switching between Amazon ES and other services is not supported. For an Amazon ES destination, you can only update to another Amazon ES destination.</p> <p>If the destination type is the same, Kinesis Firehose merges the configuration parameters specified with the destination configuration that already exists on the delivery stream. If any of the parameters are not specified in the call, the existing values are retained. For example, in the Amazon S3 destination, if <a>EncryptionConfiguration</a> is not specified, then the existing <a>EncryptionConfiguration</a> is maintained on the destination.</p> <p>If the destination type is not the same, for example, changing the destination from Amazon S3 to Amazon Redshift, Kinesis Firehose does not merge any parameters. In this case, all parameters must be specified.</p> <p>Kinesis Firehose uses <b>CurrentDeliveryStreamVersionId</b> to avoid race conditions and conflicting merges. This is a required field, and the service updates the configuration only if the existing configuration has a version ID that matches. After the update is applied successfully, the version ID is updated, and can be retrieved using <a>DescribeDeliveryStream</a>. Use the new version ID to set <b>CurrentDeliveryStreamVersionId</b> in the next call.</p>
    rpc Post#UpdateDestination(Post#UpdateDestinationRequest) returns (UpdateDestinationOutput) {
      option (google.api.http) = {
        post: "//#UpdateDestination"
        body: "body"
      };
    }
}

syntax = "proto3";

import "google/api/annotations.proto";

package amazonathena;

message PostRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    BatchGetNamedQueryInput body = 10;
}

message Post#BatchGetQueryExecutionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    BatchGetQueryExecutionInput body = 10;
}

message Post#CreateNamedQueryRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateNamedQueryInput body = 10;
}

message Post#DeleteNamedQueryRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteNamedQueryInput body = 10;
}

message Post#GetNamedQueryRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetNamedQueryInput body = 10;
}

message Post#GetQueryExecutionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetQueryExecutionInput body = 10;
}

message Post#GetQueryResultsRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    GetQueryResultsInput body = 12;
}

message Post#ListNamedQueriesRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    ListNamedQueriesInput body = 12;
}

message Post#ListQueryExecutionsRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    ListQueryExecutionsInput body = 12;
}

message Post#StartQueryExecutionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StartQueryExecutionInput body = 10;
}

message Post#StopQueryExecutionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StopQueryExecutionInput body = 10;
}

message BatchGetNamedQueryInput {
    // An array of query IDs.
    array NamedQueryIds = 1;
}

message BatchGetNamedQueryOutput {
    // Information about the named query IDs submitted.
    array NamedQueries = 1;
    // Information about provided query IDs.
    array UnprocessedNamedQueryIds = 2;
}

message BatchGetQueryExecutionInput {
    // An array of query execution IDs.
    array QueryExecutionIds = 1;
}

message BatchGetQueryExecutionOutput {
    // Information about a query execution.
    array QueryExecutions = 1;
    // Information about the query executions that failed to run.
    array UnprocessedQueryExecutionIds = 2;
}

message ColumnInfo {
    // Indicates whether values in the column are case-sensitive.
    boolean CaseSensitive = 1;
    // The catalog to which the query results belong.
    string CatalogName = 2;
    // A column label.
    string Label = 3;
    // The name of the column.
    string Name = 4;
    // Indicates the column's nullable status.
    ColumnNullable Nullable = 5;
    // For <code>DECIMAL</code> data types, specifies the total number of digits, up to 38. For performance reasons, we recommend up to 18 digits.
    integer Precision = 6;
    // For <code>DECIMAL</code> data types, specifies the total number of digits in the fractional part of the value. Defaults to 0.
    integer Scale = 7;
    // The schema name (database name) to which the query results belong.
    string SchemaName = 8;
    // The table name for the query results.
    string TableName = 9;
    // The data type of the column.
    string Type = 10;
}

repeated ColumnInfo ColumnInfoList = 1

enum ColumnNullable {
    NOT_NULL = 0;
    NULLABLE = 1;
    UNKNOWN = 2;
}

message CreateNamedQueryInput {
    // <p>A unique case-sensitive string used to ensure the request to create the query is idempotent (executes only once). If another <code>CreateNamedQuery</code> request is received, the same response is returned and another query is not created. If a parameter has changed, for example, the <code>QueryString</code>, an error is returned.</p> <important> <p>This token is listed as not required because AWS SDKs (for example the AWS SDK for Java) auto-generate the token for users. If you are not using the AWS SDK or the AWS CLI, you must provide this token or the action will fail.</p> </important>
    string ClientRequestToken = 1;
    // The database to which the query belongs.
    string Database = 2;
    // A brief explanation of the query.
    string Description = 3;
    // The plain language name for the query.
    string Name = 4;
    // The text of the query itself. In other words, all query statements.
    string QueryString = 5;
}

message CreateNamedQueryOutput {
    // The unique ID of the query.
    string NamedQueryId = 1;
}

message Datum {
    // The value of the datum.
    string VarCharValue = 1;
}

message DeleteNamedQueryInput {
    // The unique ID of the query to delete.
    string NamedQueryId = 1;
}

message DeleteNamedQueryOutput {
}

message EncryptionConfiguration {
    // Indicates whether Amazon S3 server-side encryption with Amazon S3-managed keys (<code>SSE-S3</code>), server-side encryption with KMS-managed keys (<code>SSE-KMS</code>), or client-side encryption with KMS-managed keys (CSE-KMS) is used.
    EncryptionOption EncryptionOption = 1;
    // For <code>SSE-KMS</code> and <code>CSE-KMS</code>, this is the KMS key ARN or ID.
    string KmsKey = 2;
}

enum EncryptionOption {
    SSE_S3 = 0;
    SSE_KMS = 1;
    CSE_KMS = 2;
}

message GetNamedQueryInput {
    // The unique ID of the query. Use <a>ListNamedQueries</a> to get query IDs.
    string NamedQueryId = 1;
}

message GetNamedQueryOutput {
    // Information about the query.
    NamedQuery NamedQuery = 1;
}

message GetQueryExecutionInput {
    // The unique ID of the query execution.
    string QueryExecutionId = 1;
}

message GetQueryExecutionOutput {
    // Information about the query execution.
    QueryExecution QueryExecution = 1;
}

message GetQueryResultsInput {
    // The maximum number of results (rows) to return in this request.
    integer MaxResults = 1;
    // The token that specifies where to start pagination if a previous request was truncated.
    string NextToken = 2;
    // The unique ID of the query execution.
    string QueryExecutionId = 3;
}

message GetQueryResultsOutput {
    // A token to be used by the next request if this request is truncated.
    string NextToken = 1;
    // The results of the query execution.
    ResultSet ResultSet = 2;
}

message InternalServerException {
    string Message = 1;
}

message InvalidRequestException {
    string AthenaErrorCode = 1;
    string Message = 2;
}

message ListNamedQueriesInput {
    // The maximum number of queries to return in this request.
    integer MaxResults = 1;
    // The token that specifies where to start pagination if a previous request was truncated.
    string NextToken = 2;
}

message ListNamedQueriesOutput {
    // The list of unique query IDs.
    array NamedQueryIds = 1;
    // A token to be used by the next request if this request is truncated.
    string NextToken = 2;
}

message ListQueryExecutionsInput {
    // The maximum number of query executions to return in this request.
    integer MaxResults = 1;
    // The token that specifies where to start pagination if a previous request was truncated.
    string NextToken = 2;
}

message ListQueryExecutionsOutput {
    // A token to be used by the next request if this request is truncated.
    string NextToken = 1;
    // The unique IDs of each query execution as an array of strings.
    array QueryExecutionIds = 2;
}

message NamedQuery {
    // The database to which the query belongs.
    string Database = 1;
    // A brief description of the query.
    string Description = 2;
    // The plain-language name of the query.
    string Name = 3;
    // The unique identifier of the query.
    string NamedQueryId = 4;
    // The SQL query statements that comprise the query.
    string QueryString = 5;
}



repeated string NamedQueryIdList = 1

repeated NamedQuery NamedQueryList = 1

message QueryExecution {
    // The SQL query statements which the query execution ran.
    string Query = 1;
    // The database in which the query execution occurred.
    QueryExecutionContext QueryExecutionContext = 2;
    // The unique identifier for each query execution.
    string QueryExecutionId = 3;
    // The location in Amazon S3 where query results were stored and the encryption option, if any, used for query results.
    ResultConfiguration ResultConfiguration = 4;
    // The amount of data scanned during the query execution and the amount of time that it took to execute.
    QueryExecutionStatistics Statistics = 5;
    // The completion date, current state, submission time, and state change reason (if applicable) for the query execution.
    QueryExecutionStatus Status = 6;
}

message QueryExecutionContext {
    // The name of the database.
    string Database = 1;
}



repeated string QueryExecutionIdList = 1

repeated QueryExecution QueryExecutionList = 1

enum QueryExecutionState {
    QUEUED = 0;
    RUNNING = 1;
    SUCCEEDED = 2;
    FAILED = 3;
    CANCELLED = 4;
}

message QueryExecutionStatistics {
    // The number of bytes in the data that was queried.
    integer DataScannedInBytes = 1;
    // The number of milliseconds that the query took to execute.
    integer EngineExecutionTimeInMillis = 2;
}

message QueryExecutionStatus {
    // The date and time that the query completed.
    string CompletionDateTime = 1;
    // The state of query execution. <code>SUBMITTED</code> indicates that the query is queued for execution. <code>RUNNING</code> indicates that the query is scanning data and returning results. <code>SUCCEEDED</code> indicates that the query completed without error. <code>FAILED</code> indicates that the query experienced an error and did not complete processing. <code>CANCELLED</code> indicates that user input interrupted query execution.
    QueryExecutionState State = 2;
    // Further detail about the status of the query.
    string StateChangeReason = 3;
    // The date and time that the query was submitted.
    string SubmissionDateTime = 4;
}

message ResultConfiguration {
    // If query results are encrypted in S3, indicates the S3 encryption option used (for example, <code>SSE-KMS</code> or <code>CSE-KMS</code> and key information.
    EncryptionConfiguration EncryptionConfiguration = 1;
    // The location in S3 where query results are stored.
    string OutputLocation = 2;
}

message ResultSet {
    // The metadata that describes the column structure and data types of a table of query results.
    ResultSetMetadata ResultSetMetadata = 1;
    // The rows in the table.
    array Rows = 2;
}

message ResultSetMetadata {
    // Information about the columns in a query execution result.
    array ColumnInfo = 1;
}

message Row {
    // The data that populates a row in a query result table.
    array Data = 1;
}

repeated Row RowList = 1

message StartQueryExecutionInput {
    // <p>A unique case-sensitive string used to ensure the request to create the query is idempotent (executes only once). If another <code>StartQueryExecution</code> request is received, the same response is returned and another query is not created. If a parameter has changed, for example, the <code>QueryString</code>, an error is returned.</p> <important> <p>This token is listed as not required because AWS SDKs (for example the AWS SDK for Java) auto-generate the token for users. If you are not using the AWS SDK or the AWS CLI, you must provide this token or the action will fail.</p> </important>
    string ClientRequestToken = 1;
    // The database within which the query executes.
    QueryExecutionContext QueryExecutionContext = 2;
    // The SQL query statements to be executed.
    string QueryString = 3;
    // Specifies information about where and how to save the results of the query execution.
    ResultConfiguration ResultConfiguration = 4;
}

message StartQueryExecutionOutput {
    // The unique ID of the query that ran as a result of this request.
    string QueryExecutionId = 1;
}

message StopQueryExecutionInput {
    // The unique ID of the query execution to stop.
    string QueryExecutionId = 1;
}

message StopQueryExecutionOutput {
}

enum ThrottleReason {
    CONCURRENT_QUERY_LIMIT_EXCEEDED = 0;
}

message TooManyRequestsException {
    string Message = 1;
    ThrottleReason Reason = 2;
}

message UnprocessedNamedQueryId {
    // The error code returned when the processing request for the named query failed, if applicable.
    string ErrorCode = 1;
    // The error message returned when the processing request for the named query failed, if applicable.
    string ErrorMessage = 2;
    // The unique identifier of the named query.
    string NamedQueryId = 3;
}

repeated UnprocessedNamedQueryId UnprocessedNamedQueryIdList = 1

message UnprocessedQueryExecutionId {
    // The error code returned when the query execution failed to process, if applicable.
    string ErrorCode = 1;
    // The error message returned when the query execution failed to process, if applicable.
    string ErrorMessage = 2;
    // The unique identifier of the query execution.
    string QueryExecutionId = 3;
}

repeated UnprocessedQueryExecutionId UnprocessedQueryExecutionIdList = 1

















repeated Datum datumList = 1



service AmazonAthenaService {
    // Returns the details of a single named query or a list of up to 50 queries, which you provide as an array of query ID strings. Use <a>ListNamedQueries</a> to get the list of named query IDs. If information could not be retrieved for a submitted query ID, information about the query ID submitted is listed under <a>UnprocessedNamedQueryId</a>. Named queries are different from executed queries. Use <a>BatchGetQueryExecution</a> to get details about each unique query execution, and <a>ListQueryExecutions</a> to get a list of query execution IDs.
    rpc Post(PostRequest) returns (BatchGetNamedQueryOutput) {
      option (google.api.http) = {
        post: "//"
        body: "body"
      };
    }
    // Returns the details of a single query execution or a list of up to 50 query executions, which you provide as an array of query execution ID strings. To get a list of query execution IDs, use <a>ListQueryExecutions</a>. Query executions are different from named (saved) queries. Use <a>BatchGetNamedQuery</a> to get details about named queries.
    rpc Post#BatchGetQueryExecution(Post#BatchGetQueryExecutionRequest) returns (BatchGetQueryExecutionOutput) {
      option (google.api.http) = {
        post: "//#BatchGetQueryExecution"
        body: "body"
      };
    }
    // <p>Creates a named query.</p> <p>For code samples using the AWS SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and Code Samples</a> in the <i>Amazon Athena User Guide</i>.</p>
    rpc Post#CreateNamedQuery(Post#CreateNamedQueryRequest) returns (CreateNamedQueryOutput) {
      option (google.api.http) = {
        post: "//#CreateNamedQuery"
        body: "body"
      };
    }
    // <p>Deletes a named query.</p> <p>For code samples using the AWS SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and Code Samples</a> in the <i>Amazon Athena User Guide</i>.</p>
    rpc Post#DeleteNamedQuery(Post#DeleteNamedQueryRequest) returns (DeleteNamedQueryOutput) {
      option (google.api.http) = {
        post: "//#DeleteNamedQuery"
        body: "body"
      };
    }
    // Returns information about a single query.
    rpc Post#GetNamedQuery(Post#GetNamedQueryRequest) returns (GetNamedQueryOutput) {
      option (google.api.http) = {
        post: "//#GetNamedQuery"
        body: "body"
      };
    }
    // Returns information about a single execution of a query. Each time a query executes, information about the query execution is saved with a unique ID.
    rpc Post#GetQueryExecution(Post#GetQueryExecutionRequest) returns (GetQueryExecutionOutput) {
      option (google.api.http) = {
        post: "//#GetQueryExecution"
        body: "body"
      };
    }
    // Returns the results of a single query execution specified by <code>QueryExecutionId</code>. This request does not execute the query but returns results. Use <a>StartQueryExecution</a> to run a query.
    rpc Post#GetQueryResults(Post#GetQueryResultsRequest) returns (GetQueryResultsOutput) {
      option (google.api.http) = {
        post: "//#GetQueryResults"
        body: "body"
      };
    }
    // <p>Provides a list of all available query IDs.</p> <p>For code samples using the AWS SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and Code Samples</a> in the <i>Amazon Athena User Guide</i>.</p>
    rpc Post#ListNamedQueries(Post#ListNamedQueriesRequest) returns (ListNamedQueriesOutput) {
      option (google.api.http) = {
        post: "//#ListNamedQueries"
        body: "body"
      };
    }
    // <p>Provides a list of all available query execution IDs.</p> <p>For code samples using the AWS SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and Code Samples</a> in the <i>Amazon Athena User Guide</i>.</p>
    rpc Post#ListQueryExecutions(Post#ListQueryExecutionsRequest) returns (ListQueryExecutionsOutput) {
      option (google.api.http) = {
        post: "//#ListQueryExecutions"
        body: "body"
      };
    }
    // <p>Runs (executes) the SQL query statements contained in the <code>Query</code> string.</p> <p>For code samples using the AWS SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and Code Samples</a> in the <i>Amazon Athena User Guide</i>.</p>
    rpc Post#StartQueryExecution(Post#StartQueryExecutionRequest) returns (StartQueryExecutionOutput) {
      option (google.api.http) = {
        post: "//#StartQueryExecution"
        body: "body"
      };
    }
    // <p>Stops a query execution.</p> <p>For code samples using the AWS SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and Code Samples</a> in the <i>Amazon Athena User Guide</i>.</p>
    rpc Post#StopQueryExecution(Post#StopQueryExecutionRequest) returns (StopQueryExecutionOutput) {
      option (google.api.http) = {
        post: "//#StopQueryExecution"
        body: "body"
      };
    }
}

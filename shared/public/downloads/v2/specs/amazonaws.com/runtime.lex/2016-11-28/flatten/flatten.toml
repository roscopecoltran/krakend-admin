basePath = "/"
"consumes.length" = 1
"consumes[0]" = "application/json"
"definitions.Accept.type" = "string"
"definitions.AttributesString.format" = "password"
"definitions.AttributesString.type" = "string"
"definitions.BadGatewayException.description" = "Either the Amazon Lex bot is still building, or one of the dependent services (Amazon Polly, AWS Lambda) failed with an internal service error."
"definitions.BadGatewayException.properties.Message.$ref" = "#/definitions/ErrorMessage"
"definitions.BadGatewayException.type" = "object"
"definitions.BadRequestException.description" = " Request validation failed, there is no usable message in the context, or the bot build failed, is still in progress, or contains unbuilt changes. "
"definitions.BadRequestException.properties.message.$ref" = "#/definitions/String"
"definitions.BadRequestException.type" = "object"
"definitions.BlobStream.type" = "string"
"definitions.BotAlias.type" = "string"
"definitions.BotName.type" = "string"
"definitions.Button.description" = "Represents an option to be shown on the client platform (Facebook, Slack, etc.)"
"definitions.Button.properties.text.$ref" = "#/definitions/ButtonTextStringWithLength"
"definitions.Button.properties.text.description" = "Text that is visible to the user on the button."
"definitions.Button.properties.value.$ref" = "#/definitions/ButtonValueStringWithLength"
"definitions.Button.properties.value.description" = "The value sent to Amazon Lex when a user chooses the button. For example, consider button text \"NYC.\" When the user chooses the button, the value sent can be \"New York City.\""
"definitions.Button.required.length" = 2
"definitions.Button.required[0]" = "text"
"definitions.Button.required[1]" = "value"
"definitions.Button.type" = "object"
"definitions.ButtonTextStringWithLength.maxLength" = 15.0
"definitions.ButtonTextStringWithLength.minLength" = 1.0
"definitions.ButtonTextStringWithLength.type" = "string"
"definitions.ButtonValueStringWithLength.maxLength" = 1000.0
"definitions.ButtonValueStringWithLength.minLength" = 1.0
"definitions.ButtonValueStringWithLength.type" = "string"
"definitions.ConflictException.description" = " Two clients are using the same AWS account, Amazon Lex bot, and user ID. "
"definitions.ConflictException.properties.message.$ref" = "#/definitions/String"
"definitions.ConflictException.type" = "object"
"definitions.ContentType.enum.length" = 1
"definitions.ContentType.enum[0]" = "application/vnd.amazonaws.card.generic"
"definitions.ContentType.type" = "string"
"definitions.DependencyFailedException.description" = "<p> One of the dependencies, such as AWS Lambda or Amazon Polly, threw an exception. For example, </p> <ul> <li> <p>If Amazon Lex does not have sufficient permissions to call a Lambda function.</p> </li> <li> <p>If a Lambda function takes longer than 30 seconds to execute.</p> </li> <li> <p>If a fulfillment Lambda function returns a <code>Delegate</code> dialog action without removing any slot values.</p> </li> </ul>"
"definitions.DependencyFailedException.properties.Message.$ref" = "#/definitions/ErrorMessage"
"definitions.DependencyFailedException.type" = "object"
"definitions.DialogState.enum.length" = 6
"definitions.DialogState.enum[0]" = "ElicitIntent"
"definitions.DialogState.enum[1]" = "ConfirmIntent"
"definitions.DialogState.enum[2]" = "ElicitSlot"
"definitions.DialogState.enum[3]" = "Fulfilled"
"definitions.DialogState.enum[4]" = "ReadyForFulfillment"
"definitions.DialogState.enum[5]" = "Failed"
"definitions.DialogState.type" = "string"
"definitions.ErrorMessage.type" = "string"
"definitions.GenericAttachment.description" = "Represents an option rendered to the user when a prompt is shown. It could be an image, a button, a link, or text. "
"definitions.GenericAttachment.properties.attachmentLinkUrl.$ref" = "#/definitions/StringUrlWithLength"
"definitions.GenericAttachment.properties.attachmentLinkUrl.description" = "The URL of an attachment to the response card."
"definitions.GenericAttachment.properties.buttons.$ref" = "#/definitions/listOfButtons"
"definitions.GenericAttachment.properties.buttons.description" = "The list of options to show to the user."
"definitions.GenericAttachment.properties.imageUrl.$ref" = "#/definitions/StringUrlWithLength"
"definitions.GenericAttachment.properties.imageUrl.description" = "The URL of an image that is displayed to the user."
"definitions.GenericAttachment.properties.subTitle.$ref" = "#/definitions/StringWithLength"
"definitions.GenericAttachment.properties.subTitle.description" = "The subtitle shown below the title."
"definitions.GenericAttachment.properties.title.$ref" = "#/definitions/StringWithLength"
"definitions.GenericAttachment.properties.title.description" = "The title of the option."
"definitions.GenericAttachment.type" = "object"
"definitions.HttpContentType.type" = "string"
"definitions.IntentName.type" = "string"
"definitions.InternalFailureException.description" = "Internal service error. Retry the call."
"definitions.InternalFailureException.properties.message.$ref" = "#/definitions/String"
"definitions.InternalFailureException.type" = "object"
"definitions.LimitExceededException.description" = "Exceeded a limit."
"definitions.LimitExceededException.properties.message.$ref" = "#/definitions/String"
"definitions.LimitExceededException.type" = "object"
"definitions.LoopDetectedException.description" = "This exception is not used."
"definitions.LoopDetectedException.properties.Message.$ref" = "#/definitions/ErrorMessage"
"definitions.LoopDetectedException.type" = "object"
"definitions.NotAcceptableException.description" = "The accept header in the request does not have a valid value."
"definitions.NotAcceptableException.properties.message.$ref" = "#/definitions/String"
"definitions.NotAcceptableException.type" = "object"
"definitions.NotFoundException.description" = "The resource (such as the Amazon Lex bot or an alias) that is referred to is not found."
"definitions.NotFoundException.properties.message.$ref" = "#/definitions/String"
"definitions.NotFoundException.type" = "object"
"definitions.PostContentRequest.properties.inputStream.$ref" = "#/definitions/BlobStream"
"definitions.PostContentRequest.properties.inputStream.description" = "<p> User input in PCM or Opus audio format or text format as described in the <code>Content-Type</code> HTTP header. </p> <p>You can stream audio data to Amazon Lex or you can create a local buffer that captures all of the audio data before sending. In general, you get better performance if you stream audio data rather than buffering the data locally.</p>"
"definitions.PostContentRequest.required.length" = 1
"definitions.PostContentRequest.required[0]" = "inputStream"
"definitions.PostContentRequest.type" = "object"
"definitions.PostContentResponse.properties.audioStream.$ref" = "#/definitions/BlobStream"
"definitions.PostContentResponse.properties.audioStream.description" = "The prompt (or statement) to convey to the user. This is based on the bot configuration and context. For example, if Amazon Lex did not understand the user intent, it sends the <code>clarificationPrompt</code> configured for the bot. If the intent requires confirmation before taking the fulfillment action, it sends the <code>confirmationPrompt</code>. Another example: Suppose that the Lambda function successfully fulfilled the intent, and sent a message to convey to the user. Then Amazon Lex sends that message in the response. "
"definitions.PostContentResponse.type" = "object"
"definitions.PostTextRequest.properties.inputText.$ref" = "#/definitions/Text"
"definitions.PostTextRequest.properties.inputText.description" = "The text that the user entered (Amazon Lex interprets this text)."
"definitions.PostTextRequest.properties.requestAttributes.$ref" = "#/definitions/StringMap"
"definitions.PostTextRequest.properties.requestAttributes.description" = "<p>Request-specific information passed between Amazon Lex and a client application.</p> <p>The namespace <code>x-amz-lex:</code> is reserved for special attributes. Don't create any request attributes with the prefix <code>x-amz-lex:</code>.</p> <p>For more information, see <a href=\"http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs\">Setting Request Attributes</a>.</p>"
"definitions.PostTextRequest.properties.sessionAttributes.$ref" = "#/definitions/StringMap"
"definitions.PostTextRequest.properties.sessionAttributes.description" = "<p>Application-specific information passed between Amazon Lex and a client application.</p> <p>For more information, see <a href=\"http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs\">Setting Session Attributes</a>.</p>"
"definitions.PostTextRequest.required.length" = 1
"definitions.PostTextRequest.required[0]" = "inputText"
"definitions.PostTextRequest.type" = "object"
"definitions.PostTextResponse.properties.dialogState.$ref" = "#/definitions/DialogState"
"definitions.PostTextResponse.properties.dialogState.description" = "<p> Identifies the current state of the user interaction. Amazon Lex returns one of the following values as <code>dialogState</code>. The client can optionally use this information to customize the user interface. </p> <ul> <li> <p> <code>ElicitIntent</code> - Amazon Lex wants to elicit user intent. </p> <p>For example, a user might utter an intent (\"I want to order a pizza\"). If Amazon Lex cannot infer the user intent from this utterance, it will return this dialogState.</p> </li> <li> <p> <code>ConfirmIntent</code> - Amazon Lex is expecting a \"yes\" or \"no\" response. </p> <p> For example, Amazon Lex wants user confirmation before fulfilling an intent. </p> <p>Instead of a simple \"yes\" or \"no,\" a user might respond with additional information. For example, \"yes, but make it thick crust pizza\" or \"no, I want to order a drink\". Amazon Lex can process such additional information (in these examples, update the crust type slot value, or change intent from OrderPizza to OrderDrink).</p> </li> <li> <p> <code>ElicitSlot</code> - Amazon Lex is expecting a slot value for the current intent. </p> <p>For example, suppose that in the response Amazon Lex sends this message: \"What size pizza would you like?\". A user might reply with the slot value (e.g., \"medium\"). The user might also provide additional information in the response (e.g., \"medium thick crust pizza\"). Amazon Lex can process such additional information appropriately. </p> </li> <li> <p> <code>Fulfilled</code> - Conveys that the Lambda function configured for the intent has successfully fulfilled the intent. </p> </li> <li> <p> <code>ReadyForFulfillment</code> - Conveys that the client has to fulfill the intent. </p> </li> <li> <p> <code>Failed</code> - Conveys that the conversation with the user failed. </p> <p> This can happen for various reasons including that the user did not provide an appropriate response to prompts from the service (you can configure how many times Amazon Lex can prompt a user for specific information), or the Lambda function failed to fulfill the intent. </p> </li> </ul>"
"definitions.PostTextResponse.properties.intentName.$ref" = "#/definitions/IntentName"
"definitions.PostTextResponse.properties.intentName.description" = "The current user intent that Amazon Lex is aware of."
"definitions.PostTextResponse.properties.message.$ref" = "#/definitions/Text"
"definitions.PostTextResponse.properties.message.description" = " A message to convey to the user. It can come from the bot's configuration or a code hook (Lambda function). If the current intent is not configured with a code hook or the code hook returned <code>Delegate</code> as the <code>dialogAction.type</code> in its response, then Amazon Lex decides the next course of action and selects an appropriate message from the bot configuration based on the current user interaction context. For example, if Amazon Lex is not able to understand the user input, it uses a clarification prompt message (for more information, see the Error Handling section in the Amazon Lex console). Another example: if the intent requires confirmation before fulfillment, then Amazon Lex uses the confirmation prompt message in the intent configuration. If the code hook returns a message, Amazon Lex passes it as-is in its response to the client. "
"definitions.PostTextResponse.properties.responseCard.$ref" = "#/definitions/ResponseCard"
"definitions.PostTextResponse.properties.responseCard.description" = "Represents the options that the user has to respond to the current prompt. Response Card can come from the bot configuration (in the Amazon Lex console, choose the settings button next to a slot) or from a code hook (Lambda function). "
"definitions.PostTextResponse.properties.sessionAttributes.$ref" = "#/definitions/StringMap"
"definitions.PostTextResponse.properties.sessionAttributes.description" = "A map of key-value pairs representing the session-specific context information."
"definitions.PostTextResponse.properties.slotToElicit.$ref" = "#/definitions/String"
"definitions.PostTextResponse.properties.slotToElicit.description" = "If the <code>dialogState</code> value is <code>ElicitSlot</code>, returns the name of the slot for which Amazon Lex is eliciting a value. "
"definitions.PostTextResponse.properties.slots.$ref" = "#/definitions/StringMap"
"definitions.PostTextResponse.properties.slots.description" = "<p> The intent slots that Amazon Lex detected from the user input in the conversation. </p> <p>Amazon Lex creates a resolution list containing likely values for a slot. The value that it returns is determined by the <code>valueSelectionStrategy</code> selected when the slot type was created or updated. If <code>valueSelectionStrategy</code> is set to <code>ORIGINAL_VALUE</code>, the value provided by the user is returned, if the user value is similar to the slot values. If <code>valueSelectionStrategy</code> is set to <code>TOP_RESOLUTION</code> Amazon Lex returns the first value in the resolution list or, if there is no resolution list, null. If you don't specify a <code>valueSelectionStrategy</code>, the default is <code>ORIGINAL_VALUE</code>.</p>"
"definitions.PostTextResponse.type" = "object"
"definitions.RequestTimeoutException.description" = "The input speech is too long."
"definitions.RequestTimeoutException.properties.message.$ref" = "#/definitions/String"
"definitions.RequestTimeoutException.type" = "object"
"definitions.ResponseCard.description" = "If you configure a response card when creating your bots, Amazon Lex substitutes the session attributes and slot values that are available, and then returns it. The response card can also come from a Lambda function ( <code>dialogCodeHook</code> and <code>fulfillmentActivity</code> on an intent)."
"definitions.ResponseCard.properties.contentType.$ref" = "#/definitions/ContentType"
"definitions.ResponseCard.properties.contentType.description" = "The content type of the response."
"definitions.ResponseCard.properties.genericAttachments.$ref" = "#/definitions/genericAttachmentList"
"definitions.ResponseCard.properties.genericAttachments.description" = "An array of attachment objects representing options."
"definitions.ResponseCard.properties.version.$ref" = "#/definitions/String"
"definitions.ResponseCard.properties.version.description" = "The version of the response card format."
"definitions.ResponseCard.type" = "object"
"definitions.String.type" = "string"
"definitions.StringMap.items.properties.key.$ref" = "#/definitions/String"
"definitions.StringMap.items.properties.value.$ref" = "#/definitions/String"
"definitions.StringMap.items.type" = "object"
"definitions.StringMap.type" = "array"
"definitions.StringUrlWithLength.maxLength" = 2048.0
"definitions.StringUrlWithLength.minLength" = 1.0
"definitions.StringUrlWithLength.type" = "string"
"definitions.StringWithLength.maxLength" = 80.0
"definitions.StringWithLength.minLength" = 1.0
"definitions.StringWithLength.type" = "string"
"definitions.Text.format" = "password"
"definitions.Text.maxLength" = 1024.0
"definitions.Text.minLength" = 1.0
"definitions.Text.type" = "string"
"definitions.UnsupportedMediaTypeException.description" = "The Content-Type header (<code>PostContent</code> API) has an invalid value. "
"definitions.UnsupportedMediaTypeException.properties.message.$ref" = "#/definitions/String"
"definitions.UnsupportedMediaTypeException.type" = "object"
"definitions.UserId.maxLength" = 100.0
"definitions.UserId.minLength" = 2.0
"definitions.UserId.pattern" = "[0-9a-zA-Z._:-]+"
"definitions.UserId.type" = "string"
"definitions.genericAttachmentList.items.$ref" = "#/definitions/GenericAttachment"
"definitions.genericAttachmentList.maxItems" = 10.0
"definitions.genericAttachmentList.minItems" = 0.0
"definitions.genericAttachmentList.type" = "array"
"definitions.listOfButtons.items.$ref" = "#/definitions/Button"
"definitions.listOfButtons.maxItems" = 5.0
"definitions.listOfButtons.minItems" = 0.0
"definitions.listOfButtons.type" = "array"
"externalDocs.description" = "Amazon Web Services documentation"
"externalDocs.url" = "https://aws.amazon.com/lex/"
host = "runtime.lex.amazonaws.com"
"info.contact.email" = "mike.ralphson@gmail.com"
"info.contact.name" = "Mike Ralphson"
"info.contact.url" = "https://github.com/mermade/aws2openapi"
"info.description" = "Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . "
"info.license.name" = "Apache 2.0 License"
"info.license.url" = "http://www.apache.org/licenses/"
"info.termsOfService" = "https://aws.amazon.com/service-terms/"
"info.title" = "Amazon Lex Runtime Service"
"info.version" = "2016-11-28"
"info.x-apiClientRegistration.url" = "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
"info.x-apisguru-categories.length" = 1
"info.x-apisguru-categories[0]" = "cloud"
"info.x-logo.backgroundColor" = "#FFFFFF"
"info.x-logo.url" = "https://api.apis.guru/v2/cache/logo/https_media.amazonwebservices.com_blog_2007_big_pbaws_logo_300px.jpg"
"info.x-origin.length" = 1
"info.x-origin[0].contentType" = "application/json"
"info.x-origin[0].converter.url" = "https://github.com/mermade/aws2openapi"
"info.x-origin[0].converter.version" = "1.0.0"
"info.x-origin[0].url" = "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/runtime.lex-2016-11-28.normal.json"
"info.x-origin[0].x-apisguru-direct" = true
"info.x-preferred" = true
"info.x-providerName" = "amazonaws.com"
"info.x-release" = "v4"
"info.x-serviceName" = "runtime.lex"
"parameters.Action.in" = "header"
"parameters.Action.name" = "Action"
"parameters.Action.required" = true
"parameters.Action.type" = "string"
"parameters.Version.in" = "header"
"parameters.Version.name" = "Version"
"parameters.Version.required" = true
"parameters.Version.type" = "string"
"parameters.X-Amz-Algorithm.in" = "header"
"parameters.X-Amz-Algorithm.name" = "X-Amz-Algorithm"
"parameters.X-Amz-Algorithm.required" = false
"parameters.X-Amz-Algorithm.type" = "string"
"parameters.X-Amz-Content-Sha256.in" = "header"
"parameters.X-Amz-Content-Sha256.name" = "X-Amz-Content-Sha256"
"parameters.X-Amz-Content-Sha256.required" = false
"parameters.X-Amz-Content-Sha256.type" = "string"
"parameters.X-Amz-Credential.in" = "header"
"parameters.X-Amz-Credential.name" = "X-Amz-Credential"
"parameters.X-Amz-Credential.required" = false
"parameters.X-Amz-Credential.type" = "string"
"parameters.X-Amz-Date.in" = "header"
"parameters.X-Amz-Date.name" = "X-Amz-Date"
"parameters.X-Amz-Date.required" = false
"parameters.X-Amz-Date.type" = "string"
"parameters.X-Amz-Security-Token.in" = "header"
"parameters.X-Amz-Security-Token.name" = "X-Amz-Security-Token"
"parameters.X-Amz-Security-Token.required" = false
"parameters.X-Amz-Security-Token.type" = "string"
"parameters.X-Amz-Signature.in" = "header"
"parameters.X-Amz-Signature.name" = "X-Amz-Signature"
"parameters.X-Amz-Signature.required" = false
"parameters.X-Amz-Signature.type" = "string"
"parameters.X-Amz-SignedHeaders.in" = "header"
"parameters.X-Amz-SignedHeaders.name" = "X-Amz-SignedHeaders"
"parameters.X-Amz-SignedHeaders.required" = false
"parameters.X-Amz-SignedHeaders.type" = "string"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.parameters.length" = 9
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.parameters[0].$ref" = "#/parameters/Action"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.parameters[1].$ref" = "#/parameters/Version"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.parameters[2].$ref" = "#/parameters/X-Amz-Content-Sha256"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.parameters[3].$ref" = "#/parameters/X-Amz-Date"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.parameters[4].$ref" = "#/parameters/X-Amz-Algorithm"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.parameters[5].$ref" = "#/parameters/X-Amz-Credential"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.parameters[6].$ref" = "#/parameters/X-Amz-Security-Token"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.parameters[7].$ref" = "#/parameters/X-Amz-Signature"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.parameters[8].$ref" = "#/parameters/X-Amz-SignedHeaders"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.description" = "<p> Sends user input (text or speech) to Amazon Lex. Clients use this API to send text and audio requests to Amazon Lex at runtime. Amazon Lex interprets the user input using the machine learning model that it built for the bot. </p> <p>The <code>PostContent</code> operation supports audio input at 8kHz and 16kHz. You can use 8kHz audio to achieve higher speech recognition accuracy in telephone audio applications. </p> <p> In response, Amazon Lex returns the next message to convey to the user. Consider the following example messages: </p> <ul> <li> <p> For a user input \"I would like a pizza,\" Amazon Lex might return a response with a message eliciting slot data (for example, <code>PizzaSize</code>): \"What size pizza would you like?\". </p> </li> <li> <p> After the user provides all of the pizza order information, Amazon Lex might return a response with a message to get user confirmation: \"Order the pizza?\". </p> </li> <li> <p> After the user replies \"Yes\" to the confirmation prompt, Amazon Lex might return a conclusion statement: \"Thank you, your cheese pizza has been ordered.\". </p> </li> </ul> <p> Not all Amazon Lex messages require a response from the user. For example, conclusion statements do not require a response. Some messages require only a yes or no response. In addition to the <code>message</code>, Amazon Lex provides additional context about the message in the response that you can use to enhance client behavior, such as displaying the appropriate client user interface. Consider the following examples: </p> <ul> <li> <p> If the message is to elicit slot data, Amazon Lex returns the following context information: </p> <ul> <li> <p> <code>x-amz-lex-dialog-state</code> header set to <code>ElicitSlot</code> </p> </li> <li> <p> <code>x-amz-lex-intent-name</code> header set to the intent name in the current context </p> </li> <li> <p> <code>x-amz-lex-slot-to-elicit</code> header set to the slot name for which the <code>message</code> is eliciting information </p> </li> <li> <p> <code>x-amz-lex-slots</code> header set to a map of slots configured for the intent with their current values </p> </li> </ul> </li> <li> <p> If the message is a confirmation prompt, the <code>x-amz-lex-dialog-state</code> header is set to <code>Confirmation</code> and the <code>x-amz-lex-slot-to-elicit</code> header is omitted. </p> </li> <li> <p> If the message is a clarification prompt configured for the intent, indicating that the user intent is not understood, the <code>x-amz-dialog-state</code> header is set to <code>ElicitIntent</code> and the <code>x-amz-slot-to-elicit</code> header is omitted. </p> </li> </ul> <p> In addition, Amazon Lex also returns your application-specific <code>sessionAttributes</code>. For more information, see <a href=\"http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html\">Managing Conversation Context</a>. </p>"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.operationId" = "PostContent"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.parameters.length" = 4
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.parameters[0].in" = "body"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.parameters[0].name" = "body"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.parameters[0].required" = true
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.parameters[0].schema.$ref" = "#/definitions/PostContentRequest"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.parameters[1].in" = "path"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.parameters[1].name" = "botName"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.parameters[1].required" = true
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.parameters[1].type" = "string"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.parameters[2].in" = "path"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.parameters[2].name" = "botAlias"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.parameters[2].required" = true
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.parameters[2].type" = "string"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.parameters[3].in" = "path"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.parameters[3].name" = "userId"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.parameters[3].required" = true
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.parameters[3].type" = "string"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.responses.200.description" = "Success"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.responses.200.schema.$ref" = "#/definitions/PostContentResponse"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.responses.480.description" = "NotFoundException"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.responses.480.schema.$ref" = "#/definitions/NotFoundException"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.responses.481.description" = "BadRequestException"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.responses.481.schema.$ref" = "#/definitions/BadRequestException"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.responses.482.description" = "LimitExceededException"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.responses.482.schema.$ref" = "#/definitions/LimitExceededException"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.responses.483.description" = "InternalFailureException"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.responses.483.schema.$ref" = "#/definitions/InternalFailureException"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.responses.484.description" = "ConflictException"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.responses.484.schema.$ref" = "#/definitions/ConflictException"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.responses.485.description" = "UnsupportedMediaTypeException"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.responses.485.schema.$ref" = "#/definitions/UnsupportedMediaTypeException"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.responses.486.description" = "NotAcceptableException"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.responses.486.schema.$ref" = "#/definitions/NotAcceptableException"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.responses.487.description" = "RequestTimeoutException"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.responses.487.schema.$ref" = "#/definitions/RequestTimeoutException"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.responses.488.description" = "DependencyFailedException"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.responses.488.schema.$ref" = "#/definitions/DependencyFailedException"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.responses.489.description" = "BadGatewayException"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.responses.489.schema.$ref" = "#/definitions/BadGatewayException"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.responses.490.description" = "LoopDetectedException"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/content.post.responses.490.schema.$ref" = "#/definitions/LoopDetectedException"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.parameters.length" = 9
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.parameters[0].$ref" = "#/parameters/Action"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.parameters[1].$ref" = "#/parameters/Version"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.parameters[2].$ref" = "#/parameters/X-Amz-Content-Sha256"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.parameters[3].$ref" = "#/parameters/X-Amz-Date"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.parameters[4].$ref" = "#/parameters/X-Amz-Algorithm"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.parameters[5].$ref" = "#/parameters/X-Amz-Credential"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.parameters[6].$ref" = "#/parameters/X-Amz-Security-Token"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.parameters[7].$ref" = "#/parameters/X-Amz-Signature"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.parameters[8].$ref" = "#/parameters/X-Amz-SignedHeaders"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.post.description" = "<p>Sends user input (text-only) to Amazon Lex. Client applications can use this API to send requests to Amazon Lex at runtime. Amazon Lex then interprets the user input using the machine learning model it built for the bot. </p> <p> In response, Amazon Lex returns the next <code>message</code> to convey to the user an optional <code>responseCard</code> to display. Consider the following example messages: </p> <ul> <li> <p> For a user input \"I would like a pizza\", Amazon Lex might return a response with a message eliciting slot data (for example, PizzaSize): \"What size pizza would you like?\" </p> </li> <li> <p> After the user provides all of the pizza order information, Amazon Lex might return a response with a message to obtain user confirmation \"Proceed with the pizza order?\". </p> </li> <li> <p> After the user replies to a confirmation prompt with a \"yes\", Amazon Lex might return a conclusion statement: \"Thank you, your cheese pizza has been ordered.\". </p> </li> </ul> <p> Not all Amazon Lex messages require a user response. For example, a conclusion statement does not require a response. Some messages require only a \"yes\" or \"no\" user response. In addition to the <code>message</code>, Amazon Lex provides additional context about the message in the response that you might use to enhance client behavior, for example, to display the appropriate client user interface. These are the <code>slotToElicit</code>, <code>dialogState</code>, <code>intentName</code>, and <code>slots</code> fields in the response. Consider the following examples: </p> <ul> <li> <p>If the message is to elicit slot data, Amazon Lex returns the following context information:</p> <ul> <li> <p> <code>dialogState</code> set to ElicitSlot </p> </li> <li> <p> <code>intentName</code> set to the intent name in the current context </p> </li> <li> <p> <code>slotToElicit</code> set to the slot name for which the <code>message</code> is eliciting information </p> </li> <li> <p> <code>slots</code> set to a map of slots, configured for the intent, with currently known values </p> </li> </ul> </li> <li> <p> If the message is a confirmation prompt, the <code>dialogState</code> is set to ConfirmIntent and <code>SlotToElicit</code> is set to null. </p> </li> <li> <p>If the message is a clarification prompt (configured for the intent) that indicates that user intent is not understood, the <code>dialogState</code> is set to ElicitIntent and <code>slotToElicit</code> is set to null. </p> </li> </ul> <p> In addition, Amazon Lex also returns your application-specific <code>sessionAttributes</code>. For more information, see <a href=\"http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html\">Managing Conversation Context</a>. </p>"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.post.operationId" = "PostText"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.post.parameters.length" = 4
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.post.parameters[0].in" = "body"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.post.parameters[0].name" = "body"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.post.parameters[0].required" = true
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.post.parameters[0].schema.$ref" = "#/definitions/PostTextRequest"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.post.parameters[1].in" = "path"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.post.parameters[1].name" = "botName"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.post.parameters[1].required" = true
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.post.parameters[1].type" = "string"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.post.parameters[2].in" = "path"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.post.parameters[2].name" = "botAlias"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.post.parameters[2].required" = true
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.post.parameters[2].type" = "string"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.post.parameters[3].in" = "path"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.post.parameters[3].name" = "userId"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.post.parameters[3].required" = true
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.post.parameters[3].type" = "string"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.post.responses.200.description" = "Success"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.post.responses.200.schema.$ref" = "#/definitions/PostTextResponse"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.post.responses.480.description" = "NotFoundException"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.post.responses.480.schema.$ref" = "#/definitions/NotFoundException"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.post.responses.481.description" = "BadRequestException"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.post.responses.481.schema.$ref" = "#/definitions/BadRequestException"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.post.responses.482.description" = "LimitExceededException"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.post.responses.482.schema.$ref" = "#/definitions/LimitExceededException"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.post.responses.483.description" = "InternalFailureException"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.post.responses.483.schema.$ref" = "#/definitions/InternalFailureException"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.post.responses.484.description" = "ConflictException"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.post.responses.484.schema.$ref" = "#/definitions/ConflictException"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.post.responses.485.description" = "DependencyFailedException"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.post.responses.485.schema.$ref" = "#/definitions/DependencyFailedException"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.post.responses.486.description" = "BadGatewayException"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.post.responses.486.schema.$ref" = "#/definitions/BadGatewayException"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.post.responses.487.description" = "LoopDetectedException"
"paths./bot/{botName}/alias/{botAlias}/user/{userId}/text.post.responses.487.schema.$ref" = "#/definitions/LoopDetectedException"
"produces.length" = 1
"produces[0]" = "application/json"
"schemes.length" = 1
"schemes[0]" = "http"
"security.length" = 1
"securityDefinitions.hmac.description" = "Amazon Signature authorization v4"
"securityDefinitions.hmac.in" = "header"
"securityDefinitions.hmac.name" = "Authorization"
"securityDefinitions.hmac.type" = "apiKey"
"securityDefinitions.hmac.x-amazon-apigateway-authtype" = "awsSigv4"
"security[0].hmac.length" = 0
swagger = "2.0"

syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package awsdatapipeline;

message PostRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ActivatePipelineInput body = 10;
}

message Post#AddTagsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AddTagsInput body = 10;
}

message Post#CreatePipelineRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreatePipelineInput body = 10;
}

message Post#DeactivatePipelineRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeactivatePipelineInput body = 10;
}

message Post#DeletePipelineRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeletePipelineInput body = 10;
}

message Post#DescribeObjectsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeObjectsInput body = 10;
    // Pagination token
    string marker = 11;
}

message Post#DescribePipelinesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribePipelinesInput body = 10;
}

message Post#EvaluateExpressionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    EvaluateExpressionInput body = 10;
}

message Post#GetPipelineDefinitionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetPipelineDefinitionInput body = 10;
}

message Post#ListPipelinesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListPipelinesInput body = 10;
    // Pagination token
    string marker = 11;
}

message Post#PollForTaskRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    PollForTaskInput body = 10;
}

message Post#PutPipelineDefinitionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    PutPipelineDefinitionInput body = 10;
}

message Post#QueryObjectsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    QueryObjectsInput body = 10;
    // Pagination limit
    string limit = 11;
    // Pagination token
    string marker = 12;
}

message Post#RemoveTagsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RemoveTagsInput body = 10;
}

message Post#ReportTaskProgressRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ReportTaskProgressInput body = 10;
}

message Post#ReportTaskRunnerHeartbeatRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ReportTaskRunnerHeartbeatInput body = 10;
}

message Post#SetStatusRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    SetStatusInput body = 10;
}

message Post#SetTaskStatusRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    SetTaskStatusInput body = 10;
}

message Post#ValidatePipelineDefinitionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ValidatePipelineDefinitionInput body = 10;
}

message ActivatePipelineInput {
    // A list of parameter values to pass to the pipeline at activation.
    array parameterValues = 1;
    // The ID of the pipeline.
    string pipelineId = 2;
    // The date and time to resume the pipeline. By default, the pipeline resumes from the last completed execution.
    string startTimestamp = 3;
}

message ActivatePipelineOutput {
}

message AddTagsInput {
    // The ID of the pipeline.
    string pipelineId = 1;
    // The tags to add, as key/value pairs.
    array tags = 2;
}

message AddTagsOutput {
}

message CreatePipelineInput {
    // The description for the pipeline.
    string description = 1;
    // The name for the pipeline. You can use the same name for multiple pipelines associated with your AWS account, because AWS Data Pipeline assigns each pipeline a unique pipeline identifier.
    string name = 2;
    // A list of tags to associate with the pipeline at creation. Tags let you control access to pipelines. For more information, see <a href="http://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-control-access.html">Controlling User Access to Pipelines</a> in the <i>AWS Data Pipeline Developer Guide</i>.
    array tags = 3;
    // A unique identifier. This identifier is not the same as the pipeline identifier assigned by AWS Data Pipeline. You are responsible for defining the format and ensuring the uniqueness of this identifier. You use this parameter to ensure idempotency during repeated calls to <code>CreatePipeline</code>. For example, if the first call to <code>CreatePipeline</code> does not succeed, you can pass in the same unique identifier and pipeline name combination on a subsequent call to <code>CreatePipeline</code>. <code>CreatePipeline</code> ensures that if a pipeline already exists with the same name and unique identifier, a new pipeline is not created. Instead, you'll receive the pipeline identifier from the previous attempt. The uniqueness of the name and unique identifier combination is scoped to the AWS account or IAM user credentials.
    string uniqueId = 4;
}

message CreatePipelineOutput {
    // The ID that AWS Data Pipeline assigns the newly created pipeline. For example, <code>df-06372391ZG65EXAMPLE</code>.
    string pipelineId = 1;
}

message DeactivatePipelineInput {
    // Indicates whether to cancel any running objects. The default is true, which sets the state of any running objects to <code>CANCELED</code>. If this value is false, the pipeline is deactivated after all running objects finish.
    boolean cancelActive = 1;
    // The ID of the pipeline.
    string pipelineId = 2;
}

message DeactivatePipelineOutput {
}

message DeletePipelineInput {
    // The ID of the pipeline.
    string pipelineId = 1;
}

message DescribeObjectsInput {
    // Indicates whether any expressions in the object should be evaluated when the object descriptions are returned.
    boolean evaluateExpressions = 1;
    // The starting point for the results to be returned. For the first call, this value should be empty. As long as there are more results, continue to call <code>DescribeObjects</code> with the marker value from the previous call to retrieve the next set of results.
    string marker = 2;
    // The IDs of the pipeline objects that contain the definitions to be described. You can pass as many as 25 identifiers in a single call to <code>DescribeObjects</code>.
    array objectIds = 3;
    // The ID of the pipeline that contains the object definitions.
    string pipelineId = 4;
}

message DescribeObjectsOutput {
    // Indicates whether there are more results to return.
    boolean hasMoreResults = 1;
    // The starting point for the next page of results. To view the next page of results, call <code>DescribeObjects</code> again with this marker value. If the value is null, there are no more results.
    string marker = 2;
    // An array of object definitions.
    array pipelineObjects = 3;
}

message DescribePipelinesInput {
    // The IDs of the pipelines to describe. You can pass as many as 25 identifiers in a single call. To obtain pipeline IDs, call <a>ListPipelines</a>.
    array pipelineIds = 1;
}

message DescribePipelinesOutput {
    // An array of descriptions for the specified pipelines.
    array pipelineDescriptionList = 1;
}

message EvaluateExpressionInput {
    // The expression to evaluate.
    string expression = 1;
    // The ID of the object.
    string objectId = 2;
    // The ID of the pipeline.
    string pipelineId = 3;
}

message EvaluateExpressionOutput {
    // The evaluated expression.
    string evaluatedExpression = 1;
}

message Field {
    // The field identifier.
    string key = 1;
    // The field value, expressed as the identifier of another object.
    string refValue = 2;
    // The field value, expressed as a String.
    string stringValue = 3;
}

message GetPipelineDefinitionInput {
    // The ID of the pipeline.
    string pipelineId = 1;
    // The version of the pipeline definition to retrieve. Set this parameter to <code>latest</code> (default) to use the last definition saved to the pipeline or <code>active</code> to use the last definition that was activated.
    string version = 2;
}

message GetPipelineDefinitionOutput {
    // The parameter objects used in the pipeline definition.
    array parameterObjects = 1;
    // The parameter values used in the pipeline definition.
    array parameterValues = 2;
    // The objects defined in the pipeline.
    array pipelineObjects = 3;
}

message InstanceIdentity {
    // A description of an EC2 instance that is generated when the instance is launched and exposed to the instance via the instance metadata service in the form of a JSON representation of an object.
    string document = 1;
    // A signature which can be used to verify the accuracy and authenticity of the information provided in the instance identity document.
    string signature = 2;
}

message InternalServiceError {
    // Description of the error message.
    string message = 1;
}

message InvalidRequestException {
    // Description of the error message.
    string message = 1;
}

message ListPipelinesInput {
    // The starting point for the results to be returned. For the first call, this value should be empty. As long as there are more results, continue to call <code>ListPipelines</code> with the marker value from the previous call to retrieve the next set of results.
    string marker = 1;
}

message ListPipelinesOutput {
    // Indicates whether there are more results that can be obtained by a subsequent call.
    boolean hasMoreResults = 1;
    // The starting point for the next page of results. To view the next page of results, call <code>ListPipelinesOutput</code> again with this marker value. If the value is null, there are no more results.
    string marker = 2;
    // The pipeline identifiers. If you require additional information about the pipelines, you can use these identifiers to call <a>DescribePipelines</a> and <a>GetPipelineDefinition</a>.
    array pipelineIdList = 3;
}

message Operator {
    // <p> The logical operation to be performed: equal (<code>EQ</code>), equal reference (<code>REF_EQ</code>), less than or equal (<code>LE</code>), greater than or equal (<code>GE</code>), or between (<code>BETWEEN</code>). Equal reference (<code>REF_EQ</code>) can be used only with reference fields. The other comparison types can be used only with String fields. The comparison types you can use apply only to certain object fields, as detailed below. </p> <p> The comparison operators EQ and REF_EQ act on the following fields: </p> <ul> <li>name</li> <li>@sphere</li> <li>parent</li> <li>@componentParent</li> <li>@instanceParent</li> <li>@status</li> <li>@scheduledStartTime</li> <li>@scheduledEndTime</li> <li>@actualStartTime</li> <li>@actualEndTime</li> </ul> <p> The comparison operators <code>GE</code>, <code>LE</code>, and <code>BETWEEN</code> act on the following fields: </p> <ul> <li>@scheduledStartTime</li> <li>@scheduledEndTime</li> <li>@actualStartTime</li> <li>@actualEndTime</li> </ul> <p>Note that fields beginning with the at sign (@) are read-only and set by the web service. When you name fields, you should choose names containing only alpha-numeric values, as symbols may be reserved by AWS Data Pipeline. User-defined fields that you add to a pipeline should prefix their name with the string "my".</p>
    OperatorType type = 1;
    // The value that the actual field value will be compared with.
    array values = 2;
}

enum OperatorType {
    EQ = 0;
    REF_EQ = 1;
    LE = 2;
    GE = 3;
    BETWEEN = 4;
}

message ParameterAttribute {
    // The field identifier.
    string key = 1;
    // The field value, expressed as a String.
    string stringValue = 2;
}

repeated ParameterAttribute ParameterAttributeList = 1

message ParameterObject {
    // The attributes of the parameter object.
    array attributes = 1;
    // The ID of the parameter object.
    string id = 2;
}

repeated ParameterObject ParameterObjectList = 1

message ParameterValue {
    // The ID of the parameter value.
    string id = 1;
    // The field value, expressed as a String.
    string stringValue = 2;
}

repeated ParameterValue ParameterValueList = 1

message PipelineDeletedException {
    // Description of the error message.
    string message = 1;
}

message PipelineDescription {
    // Description of the pipeline.
    string description = 1;
    // A list of read-only fields that contain metadata about the pipeline: @userId, @accountId, and @pipelineState.
    array fields = 2;
    // The name of the pipeline.
    string name = 3;
    // The pipeline identifier that was assigned by AWS Data Pipeline. This is a string of the form <code>df-297EG78HU43EEXAMPLE</code>.
    string pipelineId = 4;
    // A list of tags to associated with a pipeline. Tags let you control access to pipelines. For more information, see <a href="http://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-control-access.html">Controlling User Access to Pipelines</a> in the <i>AWS Data Pipeline Developer Guide</i>.
    array tags = 5;
}

repeated PipelineDescription PipelineDescriptionList = 1

message PipelineIdName {
    // The ID of the pipeline that was assigned by AWS Data Pipeline. This is a string of the form <code>df-297EG78HU43EEXAMPLE</code>.
    string id = 1;
    // The name of the pipeline.
    string name = 2;
}

message PipelineNotFoundException {
    // Description of the error message.
    string message = 1;
}

message PipelineObject {
    // Key-value pairs that define the properties of the object.
    array fields = 1;
    // The ID of the object.
    string id = 2;
    // The name of the object.
    string name = 3;
}

repeated PipelineObject PipelineObjectList = 1

message PipelineObjectMap {
    string key = 1;
    PipelineObject value = 2;
}
repeated PipelineObjectMap PipelineObjectMap = 1

message PollForTaskInput {
    // The public DNS name of the calling task runner.
    string hostname = 1;
    // Identity information for the EC2 instance that is hosting the task runner. You can get this value from the instance using <code>http://169.254.169.254/latest/meta-data/instance-id</code>. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AESDG-chapter-instancedata.html">Instance Metadata</a> in the <i>Amazon Elastic Compute Cloud User Guide.</i> Passing in this value proves that your task runner is running on an EC2 instance, and ensures the proper AWS Data Pipeline service charges are applied to your pipeline.
    InstanceIdentity instanceIdentity = 2;
    // The type of task the task runner is configured to accept and process. The worker group is set as a field on objects in the pipeline when they are created. You can only specify a single value for <code>workerGroup</code> in the call to <code>PollForTask</code>. There are no wildcard values permitted in <code>workerGroup</code>; the string must be an exact, case-sensitive, match.
    string workerGroup = 3;
}

message PollForTaskOutput {
    // The information needed to complete the task that is being assigned to the task runner. One of the fields returned in this object is <code>taskId</code>, which contains an identifier for the task being assigned. The calling task runner uses <code>taskId</code> in subsequent calls to <a>ReportTaskProgress</a> and <a>SetTaskStatus</a>.
    TaskObject taskObject = 1;
}

message PutPipelineDefinitionInput {
    // The parameter objects used with the pipeline.
    array parameterObjects = 1;
    // The parameter values used with the pipeline.
    array parameterValues = 2;
    // The ID of the pipeline.
    string pipelineId = 3;
    // The objects that define the pipeline. These objects overwrite the existing pipeline definition.
    array pipelineObjects = 4;
}

message PutPipelineDefinitionOutput {
    // Indicates whether there were validation errors, and the pipeline definition is stored but cannot be activated until you correct the pipeline and call <code>PutPipelineDefinition</code> to commit the corrected pipeline.
    boolean errored = 1;
    // The validation errors that are associated with the objects defined in <code>pipelineObjects</code>.
    array validationErrors = 2;
    // The validation warnings that are associated with the objects defined in <code>pipelineObjects</code>.
    array validationWarnings = 3;
}

message Query {
    // List of selectors that define the query. An object must satisfy all of the selectors to match the query.
    array selectors = 1;
}

message QueryObjectsInput {
    // The maximum number of object names that <code>QueryObjects</code> will return in a single call. The default value is 100.
    integer limit = 1;
    // The starting point for the results to be returned. For the first call, this value should be empty. As long as there are more results, continue to call <code>QueryObjects</code> with the marker value from the previous call to retrieve the next set of results.
    string marker = 2;
    // The ID of the pipeline.
    string pipelineId = 3;
    // The query that defines the objects to be returned. The <code>Query</code> object can contain a maximum of ten selectors. The conditions in the query are limited to top-level String fields in the object. These filters can be applied to components, instances, and attempts.
    Query query = 4;
    // Indicates whether the query applies to components or instances. The possible values are: <code>COMPONENT</code>, <code>INSTANCE</code>, and <code>ATTEMPT</code>.
    string sphere = 5;
}

message QueryObjectsOutput {
    // Indicates whether there are more results that can be obtained by a subsequent call.
    boolean hasMoreResults = 1;
    // The identifiers that match the query selectors.
    array ids = 2;
    // The starting point for the next page of results. To view the next page of results, call <code>QueryObjects</code> again with this marker value. If the value is null, there are no more results.
    string marker = 3;
}

message RemoveTagsInput {
    // The ID of the pipeline.
    string pipelineId = 1;
    // The keys of the tags to remove.
    array tagKeys = 2;
}

message RemoveTagsOutput {
}

message ReportTaskProgressInput {
    // Key-value pairs that define the properties of the ReportTaskProgressInput object.
    array fields = 1;
    // The ID of the task assigned to the task runner. This value is provided in the response for <a>PollForTask</a>.
    string taskId = 2;
}

message ReportTaskProgressOutput {
    // If true, the calling task runner should cancel processing of the task. The task runner does not need to call <a>SetTaskStatus</a> for canceled tasks.
    boolean canceled = 1;
}

message ReportTaskRunnerHeartbeatInput {
    // The public DNS name of the task runner.
    string hostname = 1;
    // The ID of the task runner. This value should be unique across your AWS account. In the case of AWS Data Pipeline Task Runner launched on a resource managed by AWS Data Pipeline, the web service provides a unique identifier when it launches the application. If you have written a custom task runner, you should assign a unique identifier for the task runner.
    string taskrunnerId = 2;
    // The type of task the task runner is configured to accept and process. The worker group is set as a field on objects in the pipeline when they are created. You can only specify a single value for <code>workerGroup</code>. There are no wildcard values permitted in <code>workerGroup</code>; the string must be an exact, case-sensitive, match.
    string workerGroup = 3;
}

message ReportTaskRunnerHeartbeatOutput {
    // Indicates whether the calling task runner should terminate.
    boolean terminate = 1;
}

message Selector {
    // The name of the field that the operator will be applied to. The field name is the "key" portion of the field definition in the pipeline definition syntax that is used by the AWS Data Pipeline API. If the field is not set on the object, the condition fails.
    string fieldName = 1;
    Operator operator = 2;
}

repeated Selector SelectorList = 1

message SetStatusInput {
    // The IDs of the objects. The corresponding objects can be either physical or components, but not a mix of both types.
    array objectIds = 1;
    // The ID of the pipeline that contains the objects.
    string pipelineId = 2;
    // The status to be set on all the objects specified in <code>objectIds</code>. For components, use <code>PAUSE</code> or <code>RESUME</code>. For instances, use <code>TRY_CANCEL</code>, <code>RERUN</code>, or <code>MARK_FINISHED</code>.
    string status = 3;
}

message SetTaskStatusInput {
    // If an error occurred during the task, this value specifies the error code. This value is set on the physical attempt object. It is used to display error information to the user. It should not start with string "Service_" which is reserved by the system.
    string errorId = 1;
    // If an error occurred during the task, this value specifies a text description of the error. This value is set on the physical attempt object. It is used to display error information to the user. The web service does not parse this value.
    string errorMessage = 2;
    // If an error occurred during the task, this value specifies the stack trace associated with the error. This value is set on the physical attempt object. It is used to display error information to the user. The web service does not parse this value.
    string errorStackTrace = 3;
    // The ID of the task assigned to the task runner. This value is provided in the response for <a>PollForTask</a>.
    string taskId = 4;
    // If <code>FINISHED</code>, the task successfully completed. If <code>FAILED</code>, the task ended unsuccessfully. Preconditions use false.
    TaskStatus taskStatus = 5;
}

message SetTaskStatusOutput {
}

message Tag {
    // The key name of a tag defined by a user. For more information, see <a href="http://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-control-access.html">Controlling User Access to Pipelines</a> in the <i>AWS Data Pipeline Developer Guide</i>.
    string key = 1;
    // The optional value portion of a tag defined by a user. For more information, see <a href="http://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-control-access.html">Controlling User Access to Pipelines</a> in the <i>AWS Data Pipeline Developer Guide</i>.
    string value = 2;
}

message TaskNotFoundException {
    // Description of the error message.
    string message = 1;
}

message TaskObject {
    // The ID of the pipeline task attempt object. AWS Data Pipeline uses this value to track how many times a task is attempted.
    string attemptId = 1;
    // Connection information for the location where the task runner will publish the output of the task.
    array objects = 2;
    // The ID of the pipeline that provided the task.
    string pipelineId = 3;
    // An internal identifier for the task. This ID is passed to the <a>SetTaskStatus</a> and <a>ReportTaskProgress</a> actions.
    string taskId = 4;
}

enum TaskStatu {
    FINISHED = 0;
    FAILED = 1;
    FALSE = 2;
}

message ValidatePipelineDefinitionInput {
    // The parameter objects used with the pipeline.
    array parameterObjects = 1;
    // The parameter values used with the pipeline.
    array parameterValues = 2;
    // The ID of the pipeline.
    string pipelineId = 3;
    // The objects that define the pipeline changes to validate against the pipeline.
    array pipelineObjects = 4;
}

message ValidatePipelineDefinitionOutput {
    // Indicates whether there were validation errors.
    boolean errored = 1;
    // Any validation errors that were found.
    array validationErrors = 2;
    // Any validation warnings that were found.
    array validationWarnings = 3;
}

message ValidationError {
    // A description of the validation error.
    array errors = 1;
    // The identifier of the object that contains the validation error.
    string id = 2;
}

repeated ValidationError ValidationErrors = 1

message ValidationWarning {
    // The identifier of the object that contains the validation warning.
    string id = 1;
    // A description of the validation warning.
    array warnings = 2;
}

repeated ValidationWarning ValidationWarnings = 1



























repeated Field fieldList = 1







repeated string idList = 1





repeated PipelineIdName pipelineList = 1



repeated string stringList = 1



repeated Tag tagList = 1









repeated string validationMessages = 1

service AWSDataPipelineService {
    // <p>Validates the specified pipeline and starts processing pipeline tasks. If the pipeline does not pass validation, activation fails.</p> <p>If you need to pause the pipeline to investigate an issue with a component, such as a data source or script, call <a>DeactivatePipeline</a>.</p> <p>To activate a finished pipeline, modify the end date for the pipeline and then activate it.</p>
    rpc Post(PostRequest) returns (ActivatePipelineOutput) {
      option (google.api.http) = {
        post: "//"
        body: "body"
      };
    }
    // Adds or modifies tags for the specified pipeline.
    rpc Post#AddTags(Post#AddTagsRequest) returns (AddTagsOutput) {
      option (google.api.http) = {
        post: "//#AddTags"
        body: "body"
      };
    }
    // Creates a new, empty pipeline. Use <a>PutPipelineDefinition</a> to populate the pipeline.
    rpc Post#CreatePipeline(Post#CreatePipelineRequest) returns (CreatePipelineOutput) {
      option (google.api.http) = {
        post: "//#CreatePipeline"
        body: "body"
      };
    }
    // <p>Deactivates the specified running pipeline. The pipeline is set to the <code>DEACTIVATING</code> state until the deactivation process completes.</p> <p>To resume a deactivated pipeline, use <a>ActivatePipeline</a>. By default, the pipeline resumes from the last completed execution. Optionally, you can specify the date and time to resume the pipeline.</p>
    rpc Post#DeactivatePipeline(Post#DeactivatePipelineRequest) returns (DeactivatePipelineOutput) {
      option (google.api.http) = {
        post: "//#DeactivatePipeline"
        body: "body"
      };
    }
    // <p>Deletes a pipeline, its pipeline definition, and its run history. AWS Data Pipeline attempts to cancel instances associated with the pipeline that are currently being processed by task runners.</p> <p>Deleting a pipeline cannot be undone. You cannot query or restore a deleted pipeline. To temporarily pause a pipeline instead of deleting it, call <a>SetStatus</a> with the status set to <code>PAUSE</code> on individual components. Components that are paused by <a>SetStatus</a> can be resumed.</p>
    rpc Post#DeletePipeline(Post#DeletePipelineRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#DeletePipeline"
        body: "body"
      };
    }
    // Gets the object definitions for a set of objects associated with the pipeline. Object definitions are composed of a set of fields that define the properties of the object.
    rpc Post#DescribeObjects(Post#DescribeObjectsRequest) returns (DescribeObjectsOutput) {
      option (google.api.http) = {
        post: "//#DescribeObjects"
        body: "body"
      };
    }
    // <p>Retrieves metadata about one or more pipelines. The information retrieved includes the name of the pipeline, the pipeline identifier, its current state, and the user account that owns the pipeline. Using account credentials, you can retrieve metadata about pipelines that you or your IAM users have created. If you are using an IAM user account, you can retrieve metadata about only those pipelines for which you have read permissions.</p> <p>To retrieve the full pipeline definition instead of metadata about the pipeline, call <a>GetPipelineDefinition</a>.</p>
    rpc Post#DescribePipelines(Post#DescribePipelinesRequest) returns (DescribePipelinesOutput) {
      option (google.api.http) = {
        post: "//#DescribePipelines"
        body: "body"
      };
    }
    // Task runners call <code>EvaluateExpression</code> to evaluate a string in the context of the specified object. For example, a task runner can evaluate SQL queries stored in Amazon S3.
    rpc Post#EvaluateExpression(Post#EvaluateExpressionRequest) returns (EvaluateExpressionOutput) {
      option (google.api.http) = {
        post: "//#EvaluateExpression"
        body: "body"
      };
    }
    // Gets the definition of the specified pipeline. You can call <code>GetPipelineDefinition</code> to retrieve the pipeline definition that you provided using <a>PutPipelineDefinition</a>.
    rpc Post#GetPipelineDefinition(Post#GetPipelineDefinitionRequest) returns (GetPipelineDefinitionOutput) {
      option (google.api.http) = {
        post: "//#GetPipelineDefinition"
        body: "body"
      };
    }
    // Lists the pipeline identifiers for all active pipelines that you have permission to access.
    rpc Post#ListPipelines(Post#ListPipelinesRequest) returns (ListPipelinesOutput) {
      option (google.api.http) = {
        post: "//#ListPipelines"
        body: "body"
      };
    }
    // <p>Task runners call <code>PollForTask</code> to receive a task to perform from AWS Data Pipeline. The task runner specifies which tasks it can perform by setting a value for the <code>workerGroup</code> parameter. The task returned can come from any of the pipelines that match the <code>workerGroup</code> value passed in by the task runner and that was launched using the IAM user credentials specified by the task runner.</p> <p>If tasks are ready in the work queue, <code>PollForTask</code> returns a response immediately. If no tasks are available in the queue, <code>PollForTask</code> uses long-polling and holds on to a poll connection for up to a 90 seconds, during which time the first newly scheduled task is handed to the task runner. To accomodate this, set the socket timeout in your task runner to 90 seconds. The task runner should not call <code>PollForTask</code> again on the same <code>workerGroup</code> until it receives a response, and this can take up to 90 seconds. </p>
    rpc Post#PollForTask(Post#PollForTaskRequest) returns (PollForTaskOutput) {
      option (google.api.http) = {
        post: "//#PollForTask"
        body: "body"
      };
    }
    // <p>Adds tasks, schedules, and preconditions to the specified pipeline. You can use <code>PutPipelineDefinition</code> to populate a new pipeline.</p> <p> <code>PutPipelineDefinition</code> also validates the configuration as it adds it to the pipeline. Changes to the pipeline are saved unless one of the following three validation errors exists in the pipeline. </p> <ol> <li>An object is missing a name or identifier field.</li> <li>A string or reference field is empty.</li> <li>The number of objects in the pipeline exceeds the maximum allowed objects.</li> <li>The pipeline is in a FINISHED state.</li> </ol> <p> Pipeline object definitions are passed to the <code>PutPipelineDefinition</code> action and returned by the <a>GetPipelineDefinition</a> action. </p>
    rpc Post#PutPipelineDefinition(Post#PutPipelineDefinitionRequest) returns (PutPipelineDefinitionOutput) {
      option (google.api.http) = {
        post: "//#PutPipelineDefinition"
        body: "body"
      };
    }
    // Queries the specified pipeline for the names of objects that match the specified set of conditions.
    rpc Post#QueryObjects(Post#QueryObjectsRequest) returns (QueryObjectsOutput) {
      option (google.api.http) = {
        post: "//#QueryObjects"
        body: "body"
      };
    }
    // Removes existing tags from the specified pipeline.
    rpc Post#RemoveTags(Post#RemoveTagsRequest) returns (RemoveTagsOutput) {
      option (google.api.http) = {
        post: "//#RemoveTags"
        body: "body"
      };
    }
    // <p>Task runners call <code>ReportTaskProgress</code> when assigned a task to acknowledge that it has the task. If the web service does not receive this acknowledgement within 2 minutes, it assigns the task in a subsequent <a>PollForTask</a> call. After this initial acknowledgement, the task runner only needs to report progress every 15 minutes to maintain its ownership of the task. You can change this reporting time from 15 minutes by specifying a <code>reportProgressTimeout</code> field in your pipeline.</p> <p>If a task runner does not report its status after 5 minutes, AWS Data Pipeline assumes that the task runner is unable to process the task and reassigns the task in a subsequent response to <a>PollForTask</a>. Task runners should call <code>ReportTaskProgress</code> every 60 seconds.</p>
    rpc Post#ReportTaskProgress(Post#ReportTaskProgressRequest) returns (ReportTaskProgressOutput) {
      option (google.api.http) = {
        post: "//#ReportTaskProgress"
        body: "body"
      };
    }
    // Task runners call <code>ReportTaskRunnerHeartbeat</code> every 15 minutes to indicate that they are operational. If the AWS Data Pipeline Task Runner is launched on a resource managed by AWS Data Pipeline, the web service can use this call to detect when the task runner application has failed and restart a new instance.
    rpc Post#ReportTaskRunnerHeartbeat(Post#ReportTaskRunnerHeartbeatRequest) returns (ReportTaskRunnerHeartbeatOutput) {
      option (google.api.http) = {
        post: "//#ReportTaskRunnerHeartbeat"
        body: "body"
      };
    }
    // Requests that the status of the specified physical or logical pipeline objects be updated in the specified pipeline. This update might not occur immediately, but is eventually consistent. The status that can be set depends on the type of object (for example, DataNode or Activity). You cannot perform this operation on <code>FINISHED</code> pipelines and attempting to do so returns <code>InvalidRequestException</code>.
    rpc Post#SetStatus(Post#SetStatusRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#SetStatus"
        body: "body"
      };
    }
    // Task runners call <code>SetTaskStatus</code> to notify AWS Data Pipeline that a task is completed and provide information about the final status. A task runner makes this call regardless of whether the task was sucessful. A task runner does not need to call <code>SetTaskStatus</code> for tasks that are canceled by the web service during a call to <a>ReportTaskProgress</a>.
    rpc Post#SetTaskStatus(Post#SetTaskStatusRequest) returns (SetTaskStatusOutput) {
      option (google.api.http) = {
        post: "//#SetTaskStatus"
        body: "body"
      };
    }
    // Validates the specified pipeline definition to ensure that it is well formed and can be run without error.
    rpc Post#ValidatePipelineDefinition(Post#ValidatePipelineDefinitionRequest) returns (ValidatePipelineDefinitionOutput) {
      option (google.api.http) = {
        post: "//#ValidatePipelineDefinition"
        body: "body"
      };
    }
}

syntax = "proto3";

import "google/api/annotations.proto";

package awsgreengrass;

message GetGreengrassDefinitionCoresRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListCoreDefinitionsRequest body = 10;
}

message PutGreengrassDefinitionCoresCoreDefinitionIdRequest {
    string Action = 1;
    string CoreDefinitionId = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    UpdateCoreDefinitionRequest body = 11;
}

message GetGreengrassDefinitionCoresCoreDefinitionIdVersionsRequest {
    string Action = 1;
    string CoreDefinitionId = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    ListCoreDefinitionVersionsRequest body = 11;
}

message GetGreengrassDefinitionCoresCoreDefinitionIdVersionsCoreDefinitionVersionIdRequest {
    string Action = 1;
    string CoreDefinitionId = 2;
    string CoreDefinitionVersionId = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    GetCoreDefinitionVersionRequest body = 12;
}

message GetGreengrassDefinitionDevicesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListDeviceDefinitionsRequest body = 10;
}

message PutGreengrassDefinitionDevicesDeviceDefinitionIdRequest {
    string Action = 1;
    string DeviceDefinitionId = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    UpdateDeviceDefinitionRequest body = 11;
}

message GetGreengrassDefinitionDevicesDeviceDefinitionIdVersionsRequest {
    string Action = 1;
    string DeviceDefinitionId = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    ListDeviceDefinitionVersionsRequest body = 11;
}

message GetGreengrassDefinitionDevicesDeviceDefinitionIdVersionsDeviceDefinitionVersionIdRequest {
    string Action = 1;
    string DeviceDefinitionId = 2;
    string DeviceDefinitionVersionId = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    GetDeviceDefinitionVersionRequest body = 12;
}

message GetGreengrassDefinitionFunctionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListFunctionDefinitionsRequest body = 10;
}

message PutGreengrassDefinitionFunctionsFunctionDefinitionIdRequest {
    string Action = 1;
    string FunctionDefinitionId = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    UpdateFunctionDefinitionRequest body = 11;
}

message GetGreengrassDefinitionFunctionsFunctionDefinitionIdVersionsRequest {
    string Action = 1;
    string FunctionDefinitionId = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    ListFunctionDefinitionVersionsRequest body = 11;
}

message GetGreengrassDefinitionFunctionsFunctionDefinitionIdVersionsFunctionDefinitionVersionIdRequest {
    string Action = 1;
    string FunctionDefinitionId = 2;
    string FunctionDefinitionVersionId = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    GetFunctionDefinitionVersionRequest body = 12;
}

message GetGreengrassDefinitionLoggersRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListLoggerDefinitionsRequest body = 10;
}

message PutGreengrassDefinitionLoggersLoggerDefinitionIdRequest {
    string Action = 1;
    string LoggerDefinitionId = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    UpdateLoggerDefinitionRequest body = 11;
}

message GetGreengrassDefinitionLoggersLoggerDefinitionIdVersionsRequest {
    string Action = 1;
    string LoggerDefinitionId = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    ListLoggerDefinitionVersionsRequest body = 11;
}

message GetGreengrassDefinitionLoggersLoggerDefinitionIdVersionsLoggerDefinitionVersionIdRequest {
    string Action = 1;
    string LoggerDefinitionId = 2;
    string LoggerDefinitionVersionId = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    GetLoggerDefinitionVersionRequest body = 12;
}

message GetGreengrassDefinitionSubscriptionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListSubscriptionDefinitionsRequest body = 10;
}

message PutGreengrassDefinitionSubscriptionsSubscriptionDefinitionIdRequest {
    string Action = 1;
    string SubscriptionDefinitionId = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    UpdateSubscriptionDefinitionRequest body = 11;
}

message GetGreengrassDefinitionSubscriptionsSubscriptionDefinitionIdVersionsRequest {
    string Action = 1;
    string SubscriptionDefinitionId = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    ListSubscriptionDefinitionVersionsRequest body = 11;
}

message GetGreengrassDefinitionSubscriptionsSubscriptionDefinitionIdVersionsSubscriptionDefinitionVersionIdRequest {
    string Action = 1;
    string SubscriptionDefinitionId = 2;
    string SubscriptionDefinitionVersionId = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    GetSubscriptionDefinitionVersionRequest body = 12;
}

message GetGreengrassGroupsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListGroupsRequest body = 10;
}

message PutGreengrassGroupsGroupIdRequest {
    string Action = 1;
    string GroupId = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    UpdateGroupRequest body = 11;
}

message GetGreengrassGroupsGroupIdCertificateauthoritiesRequest {
    string Action = 1;
    string GroupId = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    ListGroupCertificateAuthoritiesRequest body = 11;
}

message PutGreengrassGroupsGroupIdCertificateauthoritiesConfigurationExpiryRequest {
    string Action = 1;
    string GroupId = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    UpdateGroupCertificateConfigurationRequest body = 11;
}

message GetGreengrassGroupsGroupIdCertificateauthoritiesCertificateAuthorityIdRequest {
    string Action = 1;
    string CertificateAuthorityId = 2;
    string GroupId = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    GetGroupCertificateAuthorityRequest body = 12;
}

message GetGreengrassGroupsGroupIdDeploymentsRequest {
    string Action = 1;
    string GroupId = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    ListDeploymentsRequest body = 11;
}

message PostGreengrassGroupsGroupIdDeployments$ResetRequest {
    string Action = 1;
    string GroupId = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    ResetDeploymentsRequest body = 11;
}

message GetGreengrassGroupsGroupIdDeploymentsDeploymentIdStatusRequest {
    string Action = 1;
    string DeploymentId = 2;
    string GroupId = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    GetDeploymentStatusRequest body = 12;
}

message GetGreengrassGroupsGroupIdRoleRequest {
    string Action = 1;
    string GroupId = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    GetAssociatedRoleRequest body = 11;
}

message GetGreengrassGroupsGroupIdVersionsRequest {
    string Action = 1;
    string GroupId = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    ListGroupVersionsRequest body = 11;
}

message GetGreengrassGroupsGroupIdVersionsGroupVersionIdRequest {
    string Action = 1;
    string GroupId = 2;
    string GroupVersionId = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    GetGroupVersionRequest body = 12;
}

message GetGreengrassServiceroleRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetServiceRoleForAccountRequest body = 10;
}

message PutGreengrassThingsThingNameConnectivityInfoRequest {
    string Action = 1;
    string ThingName = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    UpdateConnectivityInfoRequest body = 11;
}

message AssociateRoleToGroupRequest {
    // Role arn you wish to associate with this group.
    string RoleArn = 1;
}

message AssociateRoleToGroupResponse {
    // Time the role arn was associated to your group.
    string AssociatedAt = 1;
}

message AssociateServiceRoleToAccountRequest {
    // Role arn you wish to associate with this account.
    string RoleArn = 1;
}

message AssociateServiceRoleToAccountResponse {
    // Time when the service role was associated to the account.
    string AssociatedAt = 1;
}

message BadRequestException {
    // Error Details
    array ErrorDetails = 1;
    // Message containing information about the error
    string Message = 2;
}

message ConnectivityInfo {
    // Endpoint for the GGC. Can be an IP address or DNS.
    string HostAddress = 1;
    // Element Id for this entry in the list.
    string Id = 2;
    // Metadata for this endpoint.
    string Metadata = 3;
    // Port of the GGC. Usually 8883.
    integer PortNumber = 4;
}

message Core {
    // Certificate arn of the core.
    string CertificateArn = 1;
    // Element Id for this entry in the list.
    string Id = 2;
    // If true, the local shadow value automatically syncs with the cloud's shadow state.
    boolean SyncShadow = 3;
    // Thing arn of the core.
    string ThingArn = 4;
}

message CoreDefinitionVersion {
    // Cores in the definition version.
    array Cores = 1;
}

message CreateCoreDefinitionRequest {
    // Information on the initial version
    CoreDefinitionVersion InitialVersion = 1;
    // name of the core definition
    string Name = 2;
}

message CreateCoreDefinitionResponse {
    // Arn of the definition.
    string Arn = 1;
    // Timestamp of when the definition was created.
    string CreationTimestamp = 2;
    // Id of the definition.
    string Id = 3;
    // Last updated timestamp of the definition.
    string LastUpdatedTimestamp = 4;
    // Last version of the definition.
    string LatestVersion = 5;
    // Latest version arn of the definition.
    string LatestVersionArn = 6;
    // Name of the definition.
    string Name = 7;
}

message CreateCoreDefinitionVersionRequest {
    // Cores in the definition version.
    array Cores = 1;
}

message CreateCoreDefinitionVersionResponse {
    // Arn of the version.
    string Arn = 1;
    // Timestamp of when the version was created.
    string CreationTimestamp = 2;
    // Id of the resource container.
    string Id = 3;
    // Unique Id of a version.
    string Version = 4;
}

message CreateDeploymentRequest {
    // Id of the deployment if you wish to redeploy a previous deployment.
    string DeploymentId = 1;
    // Type of deployment. When used in CreateDeployment, only NewDeployment and Redeployment are valid.
    DeploymentType DeploymentType = 2;
    // Group Version you wish to deploy.
    string GroupVersionId = 3;
}

message CreateDeploymentResponse {
    // The arn of the deployment.
    string DeploymentArn = 1;
    // The id of the deployment.
    string DeploymentId = 2;
}

message CreateDeviceDefinitionRequest {
    // Information on the initial version
    DeviceDefinitionVersion InitialVersion = 1;
    // name of the device definition
    string Name = 2;
}

message CreateDeviceDefinitionResponse {
    // Arn of the definition.
    string Arn = 1;
    // Timestamp of when the definition was created.
    string CreationTimestamp = 2;
    // Id of the definition.
    string Id = 3;
    // Last updated timestamp of the definition.
    string LastUpdatedTimestamp = 4;
    // Last version of the definition.
    string LatestVersion = 5;
    // Latest version arn of the definition.
    string LatestVersionArn = 6;
    // Name of the definition.
    string Name = 7;
}

message CreateDeviceDefinitionVersionRequest {
    // Devices in the definition version.
    array Devices = 1;
}

message CreateDeviceDefinitionVersionResponse {
    // Arn of the version.
    string Arn = 1;
    // Timestamp of when the version was created.
    string CreationTimestamp = 2;
    // Id of the resource container.
    string Id = 3;
    // Unique Id of a version.
    string Version = 4;
}

message CreateFunctionDefinitionRequest {
    // Information on the initial version
    FunctionDefinitionVersion InitialVersion = 1;
    // name of the function definition
    string Name = 2;
}

message CreateFunctionDefinitionResponse {
    // Arn of the definition.
    string Arn = 1;
    // Timestamp of when the definition was created.
    string CreationTimestamp = 2;
    // Id of the definition.
    string Id = 3;
    // Last updated timestamp of the definition.
    string LastUpdatedTimestamp = 4;
    // Last version of the definition.
    string LatestVersion = 5;
    // Latest version arn of the definition.
    string LatestVersionArn = 6;
    // Name of the definition.
    string Name = 7;
}

message CreateFunctionDefinitionVersionRequest {
    // Lambda functions in this function definition version.
    array Functions = 1;
}

message CreateFunctionDefinitionVersionResponse {
    // Arn of the version.
    string Arn = 1;
    // Timestamp of when the version was created.
    string CreationTimestamp = 2;
    // Id of the resource container.
    string Id = 3;
    // Unique Id of a version.
    string Version = 4;
}

message CreateGroupCertificateAuthorityRequest {
}

message CreateGroupCertificateAuthorityResponse {
    // Arn of the group certificate authority.
    string GroupCertificateAuthorityArn = 1;
}

message CreateGroupRequest {
    // Information on the initial version
    GroupVersion InitialVersion = 1;
    // name of the group
    string Name = 2;
}

message CreateGroupResponse {
    // Arn of the definition.
    string Arn = 1;
    // Timestamp of when the definition was created.
    string CreationTimestamp = 2;
    // Id of the definition.
    string Id = 3;
    // Last updated timestamp of the definition.
    string LastUpdatedTimestamp = 4;
    // Last version of the definition.
    string LatestVersion = 5;
    // Latest version arn of the definition.
    string LatestVersionArn = 6;
    // Name of the definition.
    string Name = 7;
}

message CreateGroupVersionRequest {
    // Core definition version arn for this group.
    string CoreDefinitionVersionArn = 1;
    // Device definition version arn for this group.
    string DeviceDefinitionVersionArn = 2;
    // Function definition version arn for this group.
    string FunctionDefinitionVersionArn = 3;
    // Logger definitionv ersion arn for this group.
    string LoggerDefinitionVersionArn = 4;
    // Subscription definition version arn for this group.
    string SubscriptionDefinitionVersionArn = 5;
}

message CreateGroupVersionResponse {
    // Arn of the version.
    string Arn = 1;
    // Timestamp of when the version was created.
    string CreationTimestamp = 2;
    // Id of the resource container.
    string Id = 3;
    // Unique Id of a version.
    string Version = 4;
}

message CreateLoggerDefinitionRequest {
    // Information on the initial version
    LoggerDefinitionVersion InitialVersion = 1;
    // name of the logger definition
    string Name = 2;
}

message CreateLoggerDefinitionResponse {
    // Arn of the definition.
    string Arn = 1;
    // Timestamp of when the definition was created.
    string CreationTimestamp = 2;
    // Id of the definition.
    string Id = 3;
    // Last updated timestamp of the definition.
    string LastUpdatedTimestamp = 4;
    // Last version of the definition.
    string LatestVersion = 5;
    // Latest version arn of the definition.
    string LatestVersionArn = 6;
    // Name of the definition.
    string Name = 7;
}

message CreateLoggerDefinitionVersionRequest {
    // List of loggers.
    array Loggers = 1;
}

message CreateLoggerDefinitionVersionResponse {
    // Arn of the version.
    string Arn = 1;
    // Timestamp of when the version was created.
    string CreationTimestamp = 2;
    // Id of the resource container.
    string Id = 3;
    // Unique Id of a version.
    string Version = 4;
}

message CreateSubscriptionDefinitionRequest {
    // Information on the initial version
    SubscriptionDefinitionVersion InitialVersion = 1;
    // name of the subscription definition
    string Name = 2;
}

message CreateSubscriptionDefinitionResponse {
    // Arn of the definition.
    string Arn = 1;
    // Timestamp of when the definition was created.
    string CreationTimestamp = 2;
    // Id of the definition.
    string Id = 3;
    // Last updated timestamp of the definition.
    string LastUpdatedTimestamp = 4;
    // Last version of the definition.
    string LatestVersion = 5;
    // Latest version arn of the definition.
    string LatestVersionArn = 6;
    // Name of the definition.
    string Name = 7;
}

message CreateSubscriptionDefinitionVersionRequest {
    // Subscriptions in the version.
    array Subscriptions = 1;
}

message CreateSubscriptionDefinitionVersionResponse {
    // Arn of the version.
    string Arn = 1;
    // Timestamp of when the version was created.
    string CreationTimestamp = 2;
    // Id of the resource container.
    string Id = 3;
    // Unique Id of a version.
    string Version = 4;
}

message DefinitionInformation {
    // Arn of the definition.
    string Arn = 1;
    // Timestamp of when the definition was created.
    string CreationTimestamp = 2;
    // Id of the definition.
    string Id = 3;
    // Last updated timestamp of the definition.
    string LastUpdatedTimestamp = 4;
    // Last version of the definition.
    string LatestVersion = 5;
    // Latest version arn of the definition.
    string LatestVersionArn = 6;
    // Name of the definition.
    string Name = 7;
}

message DeleteCoreDefinitionRequest {
}

message DeleteCoreDefinitionResponse {
}

message DeleteDeviceDefinitionRequest {
}

message DeleteDeviceDefinitionResponse {
}

message DeleteFunctionDefinitionRequest {
}

message DeleteFunctionDefinitionResponse {
}

message DeleteGroupRequest {
}

message DeleteGroupResponse {
}

message DeleteLoggerDefinitionRequest {
}

message DeleteLoggerDefinitionResponse {
}

message DeleteSubscriptionDefinitionRequest {
}

message DeleteSubscriptionDefinitionResponse {
}

message Deployment {
    // Timestamp when the deployment was created.
    string CreatedAt = 1;
    // Arn of the deployment.
    string DeploymentArn = 2;
    // Id of the deployment.
    string DeploymentId = 3;
    // The type of deployment.
    DeploymentType DeploymentType = 4;
    // Arn of the group for this deployment.
    string GroupArn = 5;
}

enum DeploymentType {
    NEWDEPLOYMENT = 0;
    REDEPLOYMENT = 1;
    RESETDEPLOYMENT = 2;
    FORCERESETDEPLOYMENT = 3;
}

repeated Deployment Deployments = 1

message Device {
    // Certificate arn of the device.
    string CertificateArn = 1;
    // Element Id for this entry in the list.
    string Id = 2;
    // If true, the local shadow value automatically syncs with the cloud's shadow state.
    boolean SyncShadow = 3;
    // Thing arn of the device.
    string ThingArn = 4;
}

message DeviceDefinitionVersion {
    // Devices in the definition version.
    array Devices = 1;
}

message DisassociateRoleFromGroupRequest {
}

message DisassociateRoleFromGroupResponse {
    // Time when the role was disassociated from the group.
    string DisassociatedAt = 1;
}

message DisassociateServiceRoleFromAccountRequest {
}

message DisassociateServiceRoleFromAccountResponse {
    // Time when the service role was disassociated from the account.
    string DisassociatedAt = 1;
}

message Empty {
}

message ErrorDetail {
    // Detailed Error Code
    string DetailedErrorCode = 1;
    // Detailed Error Message
    string DetailedErrorMessage = 2;
}

repeated ErrorDetail ErrorDetails = 1

message Function {
    // Arn of the Lambda function.
    string FunctionArn = 1;
    // Configuration of the function
    FunctionConfiguration FunctionConfiguration = 2;
    // Id of the function in this version.
    string Id = 3;
}

message FunctionConfiguration {
    // Environment of the function configuration
    FunctionConfigurationEnvironment Environment = 1;
    // Execution Arguments
    string ExecArgs = 2;
    // Executable
    string Executable = 3;
    // The memory size, in KB, you configured for the function.
    integer MemorySize = 4;
    // Whether the function is pinned or not. Pinned means the function is long-lived and starts when the core starts.
    boolean Pinned = 5;
    // The function execution time at which Lambda should terminate the function. This timeout still applies to pinned lambdas for each request.
    integer Timeout = 6;
}

message FunctionConfigurationEnvironment {
    // Environment variables for the lambda function.
    array Variables = 1;
}

message FunctionDefinitionVersion {
    // Lambda functions in this function definition version.
    array Functions = 1;
}

message GeneralError {
    // Error Details
    array ErrorDetails = 1;
    // Message containing information about the error
    string Message = 2;
}

message GetAssociatedRoleRequest {
}

message GetAssociatedRoleResponse {
    // Time when the role was associated for the group.
    string AssociatedAt = 1;
    // Arn of the role that is associated with the group.
    string RoleArn = 2;
}

message GetConnectivityInfoRequest {
}

message GetConnectivityInfoResponse {
    // Connectivity info list
    array ConnectivityInfo = 1;
    // Response Text
    string Message = 2;
}

message GetCoreDefinitionRequest {
}

message GetCoreDefinitionResponse {
    // Arn of the definition.
    string Arn = 1;
    // Timestamp of when the definition was created.
    string CreationTimestamp = 2;
    // Id of the definition.
    string Id = 3;
    // Last updated timestamp of the definition.
    string LastUpdatedTimestamp = 4;
    // Last version of the definition.
    string LatestVersion = 5;
    // Latest version arn of the definition.
    string LatestVersionArn = 6;
    // Name of the definition.
    string Name = 7;
}

message GetCoreDefinitionVersionRequest {
}

message GetCoreDefinitionVersionResponse {
    // Arn of the core definition version.
    string Arn = 1;
    // Timestamp of when the core definition version was created.
    string CreationTimestamp = 2;
    // Information on definition
    CoreDefinitionVersion Definition = 3;
    // Id of the core definition the version belongs to.
    string Id = 4;
    // Version of the core definition version.
    string Version = 5;
}

message GetDeploymentStatusRequest {
}

message GetDeploymentStatusResponse {
    // Status of the deployment.
    string DeploymentStatus = 1;
    // The type of the deployment.
    DeploymentType DeploymentType = 2;
    // The error Details
    array ErrorDetails = 3;
    // Error Message
    string ErrorMessage = 4;
    // Last time the deployment status was updated.
    string UpdatedAt = 5;
}

message GetDeviceDefinitionRequest {
}

message GetDeviceDefinitionResponse {
    // Arn of the definition.
    string Arn = 1;
    // Timestamp of when the definition was created.
    string CreationTimestamp = 2;
    // Id of the definition.
    string Id = 3;
    // Last updated timestamp of the definition.
    string LastUpdatedTimestamp = 4;
    // Last version of the definition.
    string LatestVersion = 5;
    // Latest version arn of the definition.
    string LatestVersionArn = 6;
    // Name of the definition.
    string Name = 7;
}

message GetDeviceDefinitionVersionRequest {
}

message GetDeviceDefinitionVersionResponse {
    // Arn of the device definition version.
    string Arn = 1;
    // Timestamp of when the device definition version was created.
    string CreationTimestamp = 2;
    // Device definition version
    DeviceDefinitionVersion Definition = 3;
    // Id of the device definition the version belongs to.
    string Id = 4;
    // Version of the device definition version.
    string Version = 5;
}

message GetFunctionDefinitionRequest {
}

message GetFunctionDefinitionResponse {
    // Arn of the definition.
    string Arn = 1;
    // Timestamp of when the definition was created.
    string CreationTimestamp = 2;
    // Id of the definition.
    string Id = 3;
    // Last updated timestamp of the definition.
    string LastUpdatedTimestamp = 4;
    // Last version of the definition.
    string LatestVersion = 5;
    // Latest version arn of the definition.
    string LatestVersionArn = 6;
    // Name of the definition.
    string Name = 7;
}

message GetFunctionDefinitionVersionRequest {
}

message GetFunctionDefinitionVersionResponse {
    // Arn of the function definition version.
    string Arn = 1;
    // Timestamp when the funtion definition version was created.
    string CreationTimestamp = 2;
    // Information on the definition.
    FunctionDefinitionVersion Definition = 3;
    // Id of the function definition the version belongs to.
    string Id = 4;
    // Version of the function definition version.
    string Version = 5;
}

message GetGroupCertificateAuthorityRequest {
}

message GetGroupCertificateAuthorityResponse {
    // Arn of the certificate authority for the group.
    string GroupCertificateAuthorityArn = 1;
    // Id of the certificate authority for the group.
    string GroupCertificateAuthorityId = 2;
    // PEM encoded certificate for the group.
    string PemEncodedCertificate = 3;
}

message GetGroupCertificateConfigurationRequest {
}

message GetGroupCertificateConfigurationResponse {
    // Amount of time when the certificate authority expires in milliseconds.
    string CertificateAuthorityExpiryInMilliseconds = 1;
    // Amount of time when the certificate expires in milliseconds.
    string CertificateExpiryInMilliseconds = 2;
    // Id of the group the certificate configuration belongs to.
    string GroupId = 3;
}

message GetGroupRequest {
}

message GetGroupResponse {
    // Arn of the definition.
    string Arn = 1;
    // Timestamp of when the definition was created.
    string CreationTimestamp = 2;
    // Id of the definition.
    string Id = 3;
    // Last updated timestamp of the definition.
    string LastUpdatedTimestamp = 4;
    // Last version of the definition.
    string LatestVersion = 5;
    // Latest version arn of the definition.
    string LatestVersionArn = 6;
    // Name of the definition.
    string Name = 7;
}

message GetGroupVersionRequest {
}

message GetGroupVersionResponse {
    // Arn of the group version.
    string Arn = 1;
    // Timestamp when the group version was created.
    string CreationTimestamp = 2;
    // Information on the definition
    GroupVersion Definition = 3;
    // Id of the group version.
    string Id = 4;
    // Unique Id for a version of the Group.
    string Version = 5;
}

message GetLoggerDefinitionRequest {
}

message GetLoggerDefinitionResponse {
    // Arn of the definition.
    string Arn = 1;
    // Timestamp of when the definition was created.
    string CreationTimestamp = 2;
    // Id of the definition.
    string Id = 3;
    // Last updated timestamp of the definition.
    string LastUpdatedTimestamp = 4;
    // Last version of the definition.
    string LatestVersion = 5;
    // Latest version arn of the definition.
    string LatestVersionArn = 6;
    // Name of the definition.
    string Name = 7;
}

message GetLoggerDefinitionVersionRequest {
}

message GetLoggerDefinitionVersionResponse {
    // Arn of the logger definition version.
    string Arn = 1;
    // Timestamp of when the logger definition version was created.
    string CreationTimestamp = 2;
    // Information on definition
    LoggerDefinitionVersion Definition = 3;
    // Id of the logger definition the version belongs to.
    string Id = 4;
    // Version of the logger definition version.
    string Version = 5;
}

message GetServiceRoleForAccountRequest {
}

message GetServiceRoleForAccountResponse {
    // Time when the service role was associated to the account.
    string AssociatedAt = 1;
    // Role arn which is associated to the account.
    string RoleArn = 2;
}

message GetSubscriptionDefinitionRequest {
}

message GetSubscriptionDefinitionResponse {
    // Arn of the definition.
    string Arn = 1;
    // Timestamp of when the definition was created.
    string CreationTimestamp = 2;
    // Id of the definition.
    string Id = 3;
    // Last updated timestamp of the definition.
    string LastUpdatedTimestamp = 4;
    // Last version of the definition.
    string LatestVersion = 5;
    // Latest version arn of the definition.
    string LatestVersionArn = 6;
    // Name of the definition.
    string Name = 7;
}

message GetSubscriptionDefinitionVersionRequest {
}

message GetSubscriptionDefinitionVersionResponse {
    // Arn of the subscription definition version.
    string Arn = 1;
    // Timestamp of when the subscription definition version was created.
    string CreationTimestamp = 2;
    // Information on the definition
    SubscriptionDefinitionVersion Definition = 3;
    // Id of the subscription definition the version belongs to.
    string Id = 4;
    // Version of the subscription definition version.
    string Version = 5;
}

message GroupCertificateAuthorityProperties {
    // Arn of the certificate authority for the group.
    string GroupCertificateAuthorityArn = 1;
    // Id of the certificate authority for the group.
    string GroupCertificateAuthorityId = 2;
}

message GroupCertificateConfiguration {
    // Amount of time when the certificate authority expires in milliseconds.
    string CertificateAuthorityExpiryInMilliseconds = 1;
    // Amount of time when the certificate expires in milliseconds.
    string CertificateExpiryInMilliseconds = 2;
    // Id of the group the certificate configuration belongs to.
    string GroupId = 3;
}

message GroupInformation {
    // Arn of a group.
    string Arn = 1;
    // Timestamp of when the group was created.
    string CreationTimestamp = 2;
    // Id of a group.
    string Id = 3;
    // Last updated timestamp of the group.
    string LastUpdatedTimestamp = 4;
    // Last version of the group.
    string LatestVersion = 5;
    // Latest version arn of the group.
    string LatestVersionArn = 6;
    // Name of a group.
    string Name = 7;
}

message GroupVersion {
    // Core definition version arn for this group.
    string CoreDefinitionVersionArn = 1;
    // Device definition version arn for this group.
    string DeviceDefinitionVersionArn = 2;
    // Function definition version arn for this group.
    string FunctionDefinitionVersionArn = 3;
    // Logger definitionv ersion arn for this group.
    string LoggerDefinitionVersionArn = 4;
    // Subscription definition version arn for this group.
    string SubscriptionDefinitionVersionArn = 5;
}

message InternalServerErrorException {
    // Error Details
    array ErrorDetails = 1;
    // Message containing information about the error
    string Message = 2;
}

message ListCoreDefinitionVersionsRequest {
}

message ListCoreDefinitionVersionsResponse {
    // The token for the next set of results, or ''null'' if there are no additional results.
    string NextToken = 1;
    // Versions
    array Versions = 2;
}

message ListCoreDefinitionsRequest {
}

message ListCoreDefinitionsResponse {
    // Definitions
    array Definitions = 1;
    // The token for the next set of results, or ''null'' if there are no additional results.
    string NextToken = 2;
}

message ListDefinitionsResponse {
    // Definitions
    array Definitions = 1;
    // The token for the next set of results, or ''null'' if there are no additional results.
    string NextToken = 2;
}

message ListDeploymentsRequest {
}

message ListDeploymentsResponse {
    // List of deployments for the requested groups
    array Deployments = 1;
    // The token for the next set of results, or ''null'' if there are no additional results.
    string NextToken = 2;
}

message ListDeviceDefinitionVersionsRequest {
}

message ListDeviceDefinitionVersionsResponse {
    // The token for the next set of results, or ''null'' if there are no additional results.
    string NextToken = 1;
    // Versions
    array Versions = 2;
}

message ListDeviceDefinitionsRequest {
}

message ListDeviceDefinitionsResponse {
    // Definitions
    array Definitions = 1;
    // The token for the next set of results, or ''null'' if there are no additional results.
    string NextToken = 2;
}

message ListFunctionDefinitionVersionsRequest {
}

message ListFunctionDefinitionVersionsResponse {
    // The token for the next set of results, or ''null'' if there are no additional results.
    string NextToken = 1;
    // Versions
    array Versions = 2;
}

message ListFunctionDefinitionsRequest {
}

message ListFunctionDefinitionsResponse {
    // Definitions
    array Definitions = 1;
    // The token for the next set of results, or ''null'' if there are no additional results.
    string NextToken = 2;
}

message ListGroupCertificateAuthoritiesRequest {
}

message ListGroupCertificateAuthoritiesResponse {
    // List of certificate authorities associated with the group.
    array GroupCertificateAuthorities = 1;
}

message ListGroupVersionsRequest {
}

message ListGroupVersionsResponse {
    // The token for the next set of results, or ''null'' if there are no additional results.
    string NextToken = 1;
    // Versions
    array Versions = 2;
}

message ListGroupsRequest {
}

message ListGroupsResponse {
    // Groups
    array Groups = 1;
    // The token for the next set of results, or ''null'' if there are no additional results.
    string NextToken = 2;
}

message ListLoggerDefinitionVersionsRequest {
}

message ListLoggerDefinitionVersionsResponse {
    // The token for the next set of results, or ''null'' if there are no additional results.
    string NextToken = 1;
    // Versions
    array Versions = 2;
}

message ListLoggerDefinitionsRequest {
}

message ListLoggerDefinitionsResponse {
    // Definitions
    array Definitions = 1;
    // The token for the next set of results, or ''null'' if there are no additional results.
    string NextToken = 2;
}

repeated ConnectivityInfo ListOfConnectivityInfo = 1

repeated Core ListOfCore = 1

repeated DefinitionInformation ListOfDefinitionInformation = 1

repeated Device ListOfDevice = 1

repeated Function ListOfFunction = 1

repeated GroupCertificateAuthorityProperties ListOfGroupCertificateAuthorityProperties = 1

repeated GroupInformation ListOfGroupInformation = 1

repeated Logger ListOfLogger = 1

repeated Subscription ListOfSubscription = 1

repeated VersionInformation ListOfVersionInformation = 1

message ListSubscriptionDefinitionVersionsRequest {
}

message ListSubscriptionDefinitionVersionsResponse {
    // The token for the next set of results, or ''null'' if there are no additional results.
    string NextToken = 1;
    // Versions
    array Versions = 2;
}

message ListSubscriptionDefinitionsRequest {
}

message ListSubscriptionDefinitionsResponse {
    // Definitions
    array Definitions = 1;
    // The token for the next set of results, or ''null'' if there are no additional results.
    string NextToken = 2;
}

message ListVersionsResponse {
    // The token for the next set of results, or ''null'' if there are no additional results.
    string NextToken = 1;
    // Versions
    array Versions = 2;
}

message Logger {
    // The component that will be subject to logs
    LoggerComponent Component = 1;
    // Element Id for this entry in the list.
    string Id = 2;
    // The level of the logs
    LoggerLevel Level = 3;
    // Amount of hardware space, in KB, to use if file system is used for logging purposes.
    integer Space = 4;
    // The type which will be use for log output
    LoggerType Type = 5;
}

enum LoggerComponent {
    GREENGRASSSYSTEM = 0;
    LAMBDA = 1;
}

message LoggerDefinitionVersion {
    // List of loggers.
    array Loggers = 1;
}

enum LoggerLevel {
    DEBUG = 0;
    INFO = 1;
    WARN = 2;
    ERROR = 3;
    FATAL = 4;
}

enum LoggerType {
    FILESYSTEM = 0;
    AWSCLOUDWATCH = 1;
}

message MapOf__string {
    string key = 1;
    string value = 2;
}
repeated MapOf__string MapOf__string = 1

message ResetDeploymentsRequest {
    // When set to true, perform a best-effort only core reset.
    boolean Force = 1;
}

message ResetDeploymentsResponse {
    // The arn of the reset deployment.
    string DeploymentArn = 1;
    // The id of the reset deployment.
    string DeploymentId = 2;
}

message Subscription {
    // Element Id for this entry in the list.
    string Id = 1;
    // Source of the subscription. Can be a thing arn, lambda arn or word 'cloud'
    string Source = 2;
    // Subject of the message.
    string Subject = 3;
    // Where the message is sent to. Can be a thing arn, lambda arn or word 'cloud'.
    string Target = 4;
}

message SubscriptionDefinitionVersion {
    // Subscriptions in the version.
    array Subscriptions = 1;
}

message UpdateConnectivityInfoRequest {
    // Connectivity info list
    array ConnectivityInfo = 1;
}

message UpdateConnectivityInfoResponse {
    // Response Text
    string Message = 1;
    // New Version
    string Version = 2;
}

message UpdateCoreDefinitionRequest {
    // name of the definition
    string Name = 1;
}

message UpdateCoreDefinitionResponse {
}

message UpdateDeviceDefinitionRequest {
    // name of the definition
    string Name = 1;
}

message UpdateDeviceDefinitionResponse {
}

message UpdateFunctionDefinitionRequest {
    // name of the definition
    string Name = 1;
}

message UpdateFunctionDefinitionResponse {
}

message UpdateGroupCertificateConfigurationRequest {
    // Amount of time when the certificate expires in milliseconds.
    string CertificateExpiryInMilliseconds = 1;
}

message UpdateGroupCertificateConfigurationResponse {
    // Amount of time when the certificate authority expires in milliseconds.
    string CertificateAuthorityExpiryInMilliseconds = 1;
    // Amount of time when the certificate expires in milliseconds.
    string CertificateExpiryInMilliseconds = 2;
    // Id of the group the certificate configuration belongs to.
    string GroupId = 3;
}

message UpdateGroupRequest {
    // name of the definition
    string Name = 1;
}

message UpdateGroupResponse {
}

message UpdateLoggerDefinitionRequest {
    // name of the definition
    string Name = 1;
}

message UpdateLoggerDefinitionResponse {
}

message UpdateSubscriptionDefinitionRequest {
    // name of the definition
    string Name = 1;
}

message UpdateSubscriptionDefinitionResponse {
}

message VersionInformation {
    // Arn of the version.
    string Arn = 1;
    // Timestamp of when the version was created.
    string CreationTimestamp = 2;
    // Id of the resource container.
    string Id = 3;
    // Unique Id of a version.
    string Version = 4;
}

service AWSGreengrassService {
    // Retrieves a list of core definitions.
    rpc GetGreengrassDefinitionCores(GetGreengrassDefinitionCoresRequest) returns (ListCoreDefinitionsResponse) {
      option (google.api.http) = {
        get: "//greengrass/definition/cores"
        body: "body"
      };
    }
    // Updates a core definition.
    rpc PutGreengrassDefinitionCoresCoreDefinitionId(PutGreengrassDefinitionCoresCoreDefinitionIdRequest) returns (UpdateCoreDefinitionResponse) {
      option (google.api.http) = {
        put: "//greengrass/definition/cores/{CoreDefinitionId}"
        body: "body"
      };
    }
    // Lists versions of a core definition.
    rpc GetGreengrassDefinitionCoresCoreDefinitionIdVersions(GetGreengrassDefinitionCoresCoreDefinitionIdVersionsRequest) returns (ListCoreDefinitionVersionsResponse) {
      option (google.api.http) = {
        get: "//greengrass/definition/cores/{CoreDefinitionId}/versions"
        body: "body"
      };
    }
    // Retrieves information about a core definition version.
    rpc GetGreengrassDefinitionCoresCoreDefinitionIdVersionsCoreDefinitionVersionId(GetGreengrassDefinitionCoresCoreDefinitionIdVersionsCoreDefinitionVersionIdRequest) returns (GetCoreDefinitionVersionResponse) {
      option (google.api.http) = {
        get: "//greengrass/definition/cores/{CoreDefinitionId}/versions/{CoreDefinitionVersionId}"
        body: "body"
      };
    }
    // Retrieves a list of device definitions.
    rpc GetGreengrassDefinitionDevices(GetGreengrassDefinitionDevicesRequest) returns (ListDeviceDefinitionsResponse) {
      option (google.api.http) = {
        get: "//greengrass/definition/devices"
        body: "body"
      };
    }
    // Updates a device definition.
    rpc PutGreengrassDefinitionDevicesDeviceDefinitionId(PutGreengrassDefinitionDevicesDeviceDefinitionIdRequest) returns (UpdateDeviceDefinitionResponse) {
      option (google.api.http) = {
        put: "//greengrass/definition/devices/{DeviceDefinitionId}"
        body: "body"
      };
    }
    // Lists the versions of a device definition.
    rpc GetGreengrassDefinitionDevicesDeviceDefinitionIdVersions(GetGreengrassDefinitionDevicesDeviceDefinitionIdVersionsRequest) returns (ListDeviceDefinitionVersionsResponse) {
      option (google.api.http) = {
        get: "//greengrass/definition/devices/{DeviceDefinitionId}/versions"
        body: "body"
      };
    }
    // Retrieves information about a device definition version.
    rpc GetGreengrassDefinitionDevicesDeviceDefinitionIdVersionsDeviceDefinitionVersionId(GetGreengrassDefinitionDevicesDeviceDefinitionIdVersionsDeviceDefinitionVersionIdRequest) returns (GetDeviceDefinitionVersionResponse) {
      option (google.api.http) = {
        get: "//greengrass/definition/devices/{DeviceDefinitionId}/versions/{DeviceDefinitionVersionId}"
        body: "body"
      };
    }
    // Retrieves a list of Lambda function definitions.
    rpc GetGreengrassDefinitionFunctions(GetGreengrassDefinitionFunctionsRequest) returns (ListFunctionDefinitionsResponse) {
      option (google.api.http) = {
        get: "//greengrass/definition/functions"
        body: "body"
      };
    }
    // Updates a Lambda function definition.
    rpc PutGreengrassDefinitionFunctionsFunctionDefinitionId(PutGreengrassDefinitionFunctionsFunctionDefinitionIdRequest) returns (UpdateFunctionDefinitionResponse) {
      option (google.api.http) = {
        put: "//greengrass/definition/functions/{FunctionDefinitionId}"
        body: "body"
      };
    }
    // Lists the versions of a Lambda function definition.
    rpc GetGreengrassDefinitionFunctionsFunctionDefinitionIdVersions(GetGreengrassDefinitionFunctionsFunctionDefinitionIdVersionsRequest) returns (ListFunctionDefinitionVersionsResponse) {
      option (google.api.http) = {
        get: "//greengrass/definition/functions/{FunctionDefinitionId}/versions"
        body: "body"
      };
    }
    // Retrieves information about a Lambda function definition version, such as which Lambda functions are included in the version and their configurations.
    rpc GetGreengrassDefinitionFunctionsFunctionDefinitionIdVersionsFunctionDefinitionVersionId(GetGreengrassDefinitionFunctionsFunctionDefinitionIdVersionsFunctionDefinitionVersionIdRequest) returns (GetFunctionDefinitionVersionResponse) {
      option (google.api.http) = {
        get: "//greengrass/definition/functions/{FunctionDefinitionId}/versions/{FunctionDefinitionVersionId}"
        body: "body"
      };
    }
    // Retrieves a list of logger definitions.
    rpc GetGreengrassDefinitionLoggers(GetGreengrassDefinitionLoggersRequest) returns (ListLoggerDefinitionsResponse) {
      option (google.api.http) = {
        get: "//greengrass/definition/loggers"
        body: "body"
      };
    }
    // Updates a logger definition.
    rpc PutGreengrassDefinitionLoggersLoggerDefinitionId(PutGreengrassDefinitionLoggersLoggerDefinitionIdRequest) returns (UpdateLoggerDefinitionResponse) {
      option (google.api.http) = {
        put: "//greengrass/definition/loggers/{LoggerDefinitionId}"
        body: "body"
      };
    }
    // Lists the versions of a logger definition.
    rpc GetGreengrassDefinitionLoggersLoggerDefinitionIdVersions(GetGreengrassDefinitionLoggersLoggerDefinitionIdVersionsRequest) returns (ListLoggerDefinitionVersionsResponse) {
      option (google.api.http) = {
        get: "//greengrass/definition/loggers/{LoggerDefinitionId}/versions"
        body: "body"
      };
    }
    // Retrieves information about a logger definition version.
    rpc GetGreengrassDefinitionLoggersLoggerDefinitionIdVersionsLoggerDefinitionVersionId(GetGreengrassDefinitionLoggersLoggerDefinitionIdVersionsLoggerDefinitionVersionIdRequest) returns (GetLoggerDefinitionVersionResponse) {
      option (google.api.http) = {
        get: "//greengrass/definition/loggers/{LoggerDefinitionId}/versions/{LoggerDefinitionVersionId}"
        body: "body"
      };
    }
    // Retrieves a list of subscription definitions.
    rpc GetGreengrassDefinitionSubscriptions(GetGreengrassDefinitionSubscriptionsRequest) returns (ListSubscriptionDefinitionsResponse) {
      option (google.api.http) = {
        get: "//greengrass/definition/subscriptions"
        body: "body"
      };
    }
    // Updates a subscription definition.
    rpc PutGreengrassDefinitionSubscriptionsSubscriptionDefinitionId(PutGreengrassDefinitionSubscriptionsSubscriptionDefinitionIdRequest) returns (UpdateSubscriptionDefinitionResponse) {
      option (google.api.http) = {
        put: "//greengrass/definition/subscriptions/{SubscriptionDefinitionId}"
        body: "body"
      };
    }
    // Lists the versions of a subscription definition.
    rpc GetGreengrassDefinitionSubscriptionsSubscriptionDefinitionIdVersions(GetGreengrassDefinitionSubscriptionsSubscriptionDefinitionIdVersionsRequest) returns (ListSubscriptionDefinitionVersionsResponse) {
      option (google.api.http) = {
        get: "//greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions"
        body: "body"
      };
    }
    // Retrieves information about a subscription definition version.
    rpc GetGreengrassDefinitionSubscriptionsSubscriptionDefinitionIdVersionsSubscriptionDefinitionVersionId(GetGreengrassDefinitionSubscriptionsSubscriptionDefinitionIdVersionsSubscriptionDefinitionVersionIdRequest) returns (GetSubscriptionDefinitionVersionResponse) {
      option (google.api.http) = {
        get: "//greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions/{SubscriptionDefinitionVersionId}"
        body: "body"
      };
    }
    // Retrieves a list of groups.
    rpc GetGreengrassGroups(GetGreengrassGroupsRequest) returns (ListGroupsResponse) {
      option (google.api.http) = {
        get: "//greengrass/groups"
        body: "body"
      };
    }
    // Updates a group.
    rpc PutGreengrassGroupsGroupId(PutGreengrassGroupsGroupIdRequest) returns (UpdateGroupResponse) {
      option (google.api.http) = {
        put: "//greengrass/groups/{GroupId}"
        body: "body"
      };
    }
    // Retrieves the current CAs for a group.
    rpc GetGreengrassGroupsGroupIdCertificateauthorities(GetGreengrassGroupsGroupIdCertificateauthoritiesRequest) returns (ListGroupCertificateAuthoritiesResponse) {
      option (google.api.http) = {
        get: "//greengrass/groups/{GroupId}/certificateauthorities"
        body: "body"
      };
    }
    // Updates the Cert expiry time for a group.
    rpc PutGreengrassGroupsGroupIdCertificateauthoritiesConfigurationExpiry(PutGreengrassGroupsGroupIdCertificateauthoritiesConfigurationExpiryRequest) returns (UpdateGroupCertificateConfigurationResponse) {
      option (google.api.http) = {
        put: "//greengrass/groups/{GroupId}/certificateauthorities/configuration/expiry"
        body: "body"
      };
    }
    // Retreives the CA associated with a group. Returns the public key of the CA.
    rpc GetGreengrassGroupsGroupIdCertificateauthoritiesCertificateAuthorityId(GetGreengrassGroupsGroupIdCertificateauthoritiesCertificateAuthorityIdRequest) returns (GetGroupCertificateAuthorityResponse) {
      option (google.api.http) = {
        get: "//greengrass/groups/{GroupId}/certificateauthorities/{CertificateAuthorityId}"
        body: "body"
      };
    }
    // Returns a history of deployments for the group.
    rpc GetGreengrassGroupsGroupIdDeployments(GetGreengrassGroupsGroupIdDeploymentsRequest) returns (ListDeploymentsResponse) {
      option (google.api.http) = {
        get: "//greengrass/groups/{GroupId}/deployments"
        body: "body"
      };
    }
    // Resets a group's deployments.
    rpc PostGreengrassGroupsGroupIdDeployments$Reset(PostGreengrassGroupsGroupIdDeployments$ResetRequest) returns (ResetDeploymentsResponse) {
      option (google.api.http) = {
        post: "//greengrass/groups/{GroupId}/deployments/$reset"
        body: "body"
      };
    }
    // Returns the status of a deployment.
    rpc GetGreengrassGroupsGroupIdDeploymentsDeploymentIdStatus(GetGreengrassGroupsGroupIdDeploymentsDeploymentIdStatusRequest) returns (GetDeploymentStatusResponse) {
      option (google.api.http) = {
        get: "//greengrass/groups/{GroupId}/deployments/{DeploymentId}/status"
        body: "body"
      };
    }
    // Retrieves the role associated with a particular group.
    rpc GetGreengrassGroupsGroupIdRole(GetGreengrassGroupsGroupIdRoleRequest) returns (GetAssociatedRoleResponse) {
      option (google.api.http) = {
        get: "//greengrass/groups/{GroupId}/role"
        body: "body"
      };
    }
    // List the versions of a group.
    rpc GetGreengrassGroupsGroupIdVersions(GetGreengrassGroupsGroupIdVersionsRequest) returns (ListGroupVersionsResponse) {
      option (google.api.http) = {
        get: "//greengrass/groups/{GroupId}/versions"
        body: "body"
      };
    }
    // Retrieves information about a group version.
    rpc GetGreengrassGroupsGroupIdVersionsGroupVersionId(GetGreengrassGroupsGroupIdVersionsGroupVersionIdRequest) returns (GetGroupVersionResponse) {
      option (google.api.http) = {
        get: "//greengrass/groups/{GroupId}/versions/{GroupVersionId}"
        body: "body"
      };
    }
    // Retrieves the service role that is attached to the account.
    rpc GetGreengrassServicerole(GetGreengrassServiceroleRequest) returns (GetServiceRoleForAccountResponse) {
      option (google.api.http) = {
        get: "//greengrass/servicerole"
        body: "body"
      };
    }
    // Updates the connectivity information for the core. Any devices that belong to the group which has this core will receive this information in order to find the location of the core and connect to it.
    rpc PutGreengrassThingsThingNameConnectivityInfo(PutGreengrassThingsThingNameConnectivityInfoRequest) returns (UpdateConnectivityInfoResponse) {
      option (google.api.http) = {
        put: "//greengrass/things/{ThingName}/connectivityInfo"
        body: "body"
      };
    }
}

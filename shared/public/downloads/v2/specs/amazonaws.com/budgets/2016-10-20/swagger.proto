syntax = "proto3";

import "google/api/annotations.proto";

package awsbudgets;

message PostRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateBudgetRequest body = 10;
}

message Post#CreateNotificationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateNotificationRequest body = 10;
}

message Post#CreateSubscriberRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateSubscriberRequest body = 10;
}

message Post#DeleteBudgetRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteBudgetRequest body = 10;
}

message Post#DeleteNotificationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteNotificationRequest body = 10;
}

message Post#DeleteSubscriberRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteSubscriberRequest body = 10;
}

message Post#DescribeBudgetRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeBudgetRequest body = 10;
}

message Post#DescribeBudgetsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeBudgetsRequest body = 10;
}

message Post#DescribeNotificationsForBudgetRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeNotificationsForBudgetRequest body = 10;
}

message Post#DescribeSubscribersForNotificationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeSubscribersForNotificationRequest body = 10;
}

message Post#UpdateBudgetRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateBudgetRequest body = 10;
}

message Post#UpdateNotificationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateNotificationRequest body = 10;
}

message Post#UpdateSubscriberRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateSubscriberRequest body = 10;
}

message Budget {
    Spend BudgetLimit = 1;
    string BudgetName = 2;
    BudgetType BudgetType = 3;
    CalculatedSpend CalculatedSpend = 4;
    array CostFilters = 5;
    CostTypes CostTypes = 6;
    TimePeriod TimePeriod = 7;
    TimeUnit TimeUnit = 8;
}

enum BudgetType {
    USAGE = 0;
    COST = 1;
    RI_UTILIZATION = 2;
}

repeated Budget Budgets = 1

message CalculatedSpend {
    Spend ActualSpend = 1;
    Spend ForecastedSpend = 2;
}

enum ComparisonOperator {
    GREATER_THAN = 0;
    LESS_THAN = 1;
    EQUAL_TO = 2;
}

message CostFilter {
    string key = 1;
    array value = 2;
}
repeated CostFilter CostFilters = 1

message CostTypes {
    boolean IncludeSubscription = 1;
    boolean IncludeTax = 2;
    boolean UseBlended = 3;
}

message CreateBudgetRequest {
    string AccountId = 1;
    Budget Budget = 2;
    array NotificationsWithSubscribers = 3;
}

message CreateBudgetResponse {
}

message CreateNotificationRequest {
    string AccountId = 1;
    string BudgetName = 2;
    Notification Notification = 3;
    array Subscribers = 4;
}

message CreateNotificationResponse {
}

message CreateSubscriberRequest {
    string AccountId = 1;
    string BudgetName = 2;
    Notification Notification = 3;
    Subscriber Subscriber = 4;
}

message CreateSubscriberResponse {
}

message CreationLimitExceededException {
    string Message = 1;
}

message DeleteBudgetRequest {
    string AccountId = 1;
    string BudgetName = 2;
}

message DeleteBudgetResponse {
}

message DeleteNotificationRequest {
    string AccountId = 1;
    string BudgetName = 2;
    Notification Notification = 3;
}

message DeleteNotificationResponse {
}

message DeleteSubscriberRequest {
    string AccountId = 1;
    string BudgetName = 2;
    Notification Notification = 3;
    Subscriber Subscriber = 4;
}

message DeleteSubscriberResponse {
}

message DescribeBudgetRequest {
    string AccountId = 1;
    string BudgetName = 2;
}

message DescribeBudgetResponse {
    Budget Budget = 1;
}

message DescribeBudgetsRequest {
    string AccountId = 1;
    integer MaxResults = 2;
    string NextToken = 3;
}

message DescribeBudgetsResponse {
    array Budgets = 1;
    string NextToken = 2;
}

message DescribeNotificationsForBudgetRequest {
    string AccountId = 1;
    string BudgetName = 2;
    integer MaxResults = 3;
    string NextToken = 4;
}

message DescribeNotificationsForBudgetResponse {
    string NextToken = 1;
    array Notifications = 2;
}

message DescribeSubscribersForNotificationRequest {
    string AccountId = 1;
    string BudgetName = 2;
    integer MaxResults = 3;
    string NextToken = 4;
    Notification Notification = 5;
}

message DescribeSubscribersForNotificationResponse {
    string NextToken = 1;
    array Subscribers = 2;
}

repeated string DimensionValues = 1

message DuplicateRecordException {
    string Message = 1;
}

message ExpiredNextTokenException {
    string Message = 1;
}

message InternalErrorException {
    string Message = 1;
}

message InvalidNextTokenException {
    string Message = 1;
}

message InvalidParameterException {
    string Message = 1;
}

message NotFoundException {
    string Message = 1;
}

message Notification {
    ComparisonOperator ComparisonOperator = 1;
    NotificationType NotificationType = 2;
    number Threshold = 3;
    ThresholdType ThresholdType = 4;
}

enum NotificationType {
    ACTUAL = 0;
    FORECASTED = 1;
}

message NotificationWithSubscribers {
    Notification Notification = 1;
    array Subscribers = 2;
}

repeated NotificationWithSubscribers NotificationWithSubscribersList = 1

repeated Notification Notifications = 1



message Spend {
    string Amount = 1;
    string Unit = 2;
}

message Subscriber {
    string Address = 1;
    SubscriptionType SubscriptionType = 2;
}

repeated Subscriber Subscribers = 1

enum SubscriptionType {
    SNS = 0;
    EMAIL = 1;
}

enum ThresholdType {
    PERCENTAGE = 0;
    ABSOLUTE_VALUE = 1;
}

message TimePeriod {
    string End = 1;
    string Start = 2;
}

enum TimeUnit {
    DAILY = 0;
    MONTHLY = 1;
    QUARTERLY = 2;
    ANNUALLY = 3;
}

message UpdateBudgetRequest {
    string AccountId = 1;
    Budget NewBudget = 2;
}

message UpdateBudgetResponse {
}

message UpdateNotificationRequest {
    string AccountId = 1;
    string BudgetName = 2;
    Notification NewNotification = 3;
    Notification OldNotification = 4;
}

message UpdateNotificationResponse {
}

message UpdateSubscriberRequest {
    string AccountId = 1;
    string BudgetName = 2;
    Subscriber NewSubscriber = 3;
    Notification Notification = 4;
    Subscriber OldSubscriber = 5;
}

message UpdateSubscriberResponse {
}

service AWSBudgetsService {
    // Create a new budget
    rpc Post(PostRequest) returns (CreateBudgetResponse) {
      option (google.api.http) = {
        post: "//"
        body: "body"
      };
    }
    // Create a new Notification with subscribers for a budget
    rpc Post#CreateNotification(Post#CreateNotificationRequest) returns (CreateNotificationResponse) {
      option (google.api.http) = {
        post: "//#CreateNotification"
        body: "body"
      };
    }
    // Create a new Subscriber for a notification
    rpc Post#CreateSubscriber(Post#CreateSubscriberRequest) returns (CreateSubscriberResponse) {
      option (google.api.http) = {
        post: "//#CreateSubscriber"
        body: "body"
      };
    }
    // Delete a budget and related notifications
    rpc Post#DeleteBudget(Post#DeleteBudgetRequest) returns (DeleteBudgetResponse) {
      option (google.api.http) = {
        post: "//#DeleteBudget"
        body: "body"
      };
    }
    // Delete a notification and related subscribers
    rpc Post#DeleteNotification(Post#DeleteNotificationRequest) returns (DeleteNotificationResponse) {
      option (google.api.http) = {
        post: "//#DeleteNotification"
        body: "body"
      };
    }
    // Delete a Subscriber for a notification
    rpc Post#DeleteSubscriber(Post#DeleteSubscriberRequest) returns (DeleteSubscriberResponse) {
      option (google.api.http) = {
        post: "//#DeleteSubscriber"
        body: "body"
      };
    }
    // Get a single budget
    rpc Post#DescribeBudget(Post#DescribeBudgetRequest) returns (DescribeBudgetResponse) {
      option (google.api.http) = {
        post: "//#DescribeBudget"
        body: "body"
      };
    }
    // Get all budgets for an account
    rpc Post#DescribeBudgets(Post#DescribeBudgetsRequest) returns (DescribeBudgetsResponse) {
      option (google.api.http) = {
        post: "//#DescribeBudgets"
        body: "body"
      };
    }
    // Get notifications of a budget
    rpc Post#DescribeNotificationsForBudget(Post#DescribeNotificationsForBudgetRequest) returns (DescribeNotificationsForBudgetResponse) {
      option (google.api.http) = {
        post: "//#DescribeNotificationsForBudget"
        body: "body"
      };
    }
    // Get subscribers of a notification
    rpc Post#DescribeSubscribersForNotification(Post#DescribeSubscribersForNotificationRequest) returns (DescribeSubscribersForNotificationResponse) {
      option (google.api.http) = {
        post: "//#DescribeSubscribersForNotification"
        body: "body"
      };
    }
    // Update the information of a budget already created
    rpc Post#UpdateBudget(Post#UpdateBudgetRequest) returns (UpdateBudgetResponse) {
      option (google.api.http) = {
        post: "//#UpdateBudget"
        body: "body"
      };
    }
    // Update the information about a notification already created
    rpc Post#UpdateNotification(Post#UpdateNotificationRequest) returns (UpdateNotificationResponse) {
      option (google.api.http) = {
        post: "//#UpdateNotification"
        body: "body"
      };
    }
    // Update a subscriber
    rpc Post#UpdateSubscriber(Post#UpdateSubscriberRequest) returns (UpdateSubscriberResponse) {
      option (google.api.http) = {
        post: "//#UpdateSubscriber"
        body: "body"
      };
    }
}

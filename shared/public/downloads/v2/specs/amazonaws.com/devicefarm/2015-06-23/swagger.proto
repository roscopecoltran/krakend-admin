syntax = "proto3";

import "google/api/annotations.proto";

package awsdevicefarm;

message PostRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateDevicePoolRequest body = 10;
}

message Post#CreateNetworkProfileRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateNetworkProfileRequest body = 10;
}

message Post#CreateProjectRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateProjectRequest body = 10;
}

message Post#CreateRemoteAccessSessionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateRemoteAccessSessionRequest body = 10;
}

message Post#CreateUploadRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateUploadRequest body = 10;
}

message Post#DeleteDevicePoolRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteDevicePoolRequest body = 10;
}

message Post#DeleteNetworkProfileRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteNetworkProfileRequest body = 10;
}

message Post#DeleteProjectRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteProjectRequest body = 10;
}

message Post#DeleteRemoteAccessSessionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteRemoteAccessSessionRequest body = 10;
}

message Post#DeleteRunRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteRunRequest body = 10;
}

message Post#DeleteUploadRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteUploadRequest body = 10;
}

message Post#GetAccountSettingsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetAccountSettingsRequest body = 10;
}

message Post#GetDeviceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetDeviceRequest body = 10;
}

message Post#GetDevicePoolRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetDevicePoolRequest body = 10;
}

message Post#GetDevicePoolCompatibilityRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetDevicePoolCompatibilityRequest body = 10;
}

message Post#GetJobRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetJobRequest body = 10;
}

message Post#GetNetworkProfileRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetNetworkProfileRequest body = 10;
}

message Post#GetOfferingStatusRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetOfferingStatusRequest body = 10;
    // Pagination token
    string nextToken = 11;
}

message Post#GetProjectRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetProjectRequest body = 10;
}

message Post#GetRemoteAccessSessionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetRemoteAccessSessionRequest body = 10;
}

message Post#GetRunRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetRunRequest body = 10;
}

message Post#GetSuiteRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetSuiteRequest body = 10;
}

message Post#GetTestRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetTestRequest body = 10;
}

message Post#GetUploadRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetUploadRequest body = 10;
}

message Post#InstallToRemoteAccessSessionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    InstallToRemoteAccessSessionRequest body = 10;
}

message Post#ListArtifactsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListArtifactsRequest body = 10;
    // Pagination token
    string nextToken = 11;
}

message Post#ListDevicePoolsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListDevicePoolsRequest body = 10;
    // Pagination token
    string nextToken = 11;
}

message Post#ListDevicesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListDevicesRequest body = 10;
    // Pagination token
    string nextToken = 11;
}

message Post#ListJobsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListJobsRequest body = 10;
    // Pagination token
    string nextToken = 11;
}

message Post#ListNetworkProfilesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListNetworkProfilesRequest body = 10;
}

message Post#ListOfferingPromotionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListOfferingPromotionsRequest body = 10;
}

message Post#ListOfferingTransactionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListOfferingTransactionsRequest body = 10;
    // Pagination token
    string nextToken = 11;
}

message Post#ListOfferingsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListOfferingsRequest body = 10;
    // Pagination token
    string nextToken = 11;
}

message Post#ListProjectsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListProjectsRequest body = 10;
    // Pagination token
    string nextToken = 11;
}

message Post#ListRemoteAccessSessionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListRemoteAccessSessionsRequest body = 10;
}

message Post#ListRunsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListRunsRequest body = 10;
    // Pagination token
    string nextToken = 11;
}

message Post#ListSamplesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListSamplesRequest body = 10;
    // Pagination token
    string nextToken = 11;
}

message Post#ListSuitesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListSuitesRequest body = 10;
    // Pagination token
    string nextToken = 11;
}

message Post#ListTestsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListTestsRequest body = 10;
    // Pagination token
    string nextToken = 11;
}

message Post#ListUniqueProblemsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListUniqueProblemsRequest body = 10;
    // Pagination token
    string nextToken = 11;
}

message Post#ListUploadsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListUploadsRequest body = 10;
    // Pagination token
    string nextToken = 11;
}

message Post#PurchaseOfferingRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    PurchaseOfferingRequest body = 10;
}

message Post#RenewOfferingRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RenewOfferingRequest body = 10;
}

message Post#ScheduleRunRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ScheduleRunRequest body = 10;
}

message Post#StopRemoteAccessSessionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StopRemoteAccessSessionRequest body = 10;
}

message Post#StopRunRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StopRunRequest body = 10;
}

message Post#UpdateDevicePoolRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateDevicePoolRequest body = 10;
}

message Post#UpdateNetworkProfileRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateNetworkProfileRequest body = 10;
}

message Post#UpdateProjectRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateProjectRequest body = 10;
}

message AccountSettings {
    // The AWS account number specified in the <code>AccountSettings</code> container.
    string awsAccountNumber = 1;
    // The default number of minutes (at the account level) a test run will execute before it times out. Default value is 60 minutes.
    integer defaultJobTimeoutMinutes = 2;
    // The maximum number of minutes a test run will execute before it times out.
    integer maxJobTimeoutMinutes = 3;
    // The maximum number of device slots that the AWS account can purchase. Each maximum is expressed as an <code>offering-id:number</code> pair, where the <code>offering-id</code> represents one of the IDs returned by the <code>ListOfferings</code> command.
    array maxSlots = 4;
    // Information about an AWS account's usage of free trial device minutes.
    TrialMinutes trialMinutes = 5;
    // Returns the unmetered devices you have purchased or want to purchase.
    array unmeteredDevices = 6;
    // Returns the unmetered remote access devices you have purchased or want to purchase.
    array unmeteredRemoteAccessDevices = 7;
}







repeated string AmazonResourceNames = 1

repeated string AndroidPaths = 1



message ArgumentException {
    // Any additional information about the exception.
    string message = 1;
}

message Artifact {
    // The artifact's ARN.
    string arn = 1;
    // The artifact's file extension.
    string extension = 2;
    // The artifact's name.
    string name = 3;
    // <p>The artifact's type.</p> <p>Allowed values include the following:</p> <ul> <li> <p>UNKNOWN: An unknown type.</p> </li> <li> <p>SCREENSHOT: The screenshot type.</p> </li> <li> <p>DEVICE_LOG: The device log type.</p> </li> <li> <p>MESSAGE_LOG: The message log type.</p> </li> <li> <p>RESULT_LOG: The result log type.</p> </li> <li> <p>SERVICE_LOG: The service log type.</p> </li> <li> <p>WEBKIT_LOG: The web kit log type.</p> </li> <li> <p>INSTRUMENTATION_OUTPUT: The instrumentation type.</p> </li> <li> <p>EXERCISER_MONKEY_OUTPUT: For Android, the artifact (log) generated by an Android fuzz test.</p> </li> <li> <p>CALABASH_JSON_OUTPUT: The Calabash JSON output type.</p> </li> <li> <p>CALABASH_PRETTY_OUTPUT: The Calabash pretty output type.</p> </li> <li> <p>CALABASH_STANDARD_OUTPUT: The Calabash standard output type.</p> </li> <li> <p>CALABASH_JAVA_XML_OUTPUT: The Calabash Java XML output type.</p> </li> <li> <p>AUTOMATION_OUTPUT: The automation output type.</p> </li> <li> <p>APPIUM_SERVER_OUTPUT: The Appium server output type.</p> </li> <li> <p>APPIUM_JAVA_OUTPUT: The Appium Java output type.</p> </li> <li> <p>APPIUM_JAVA_XML_OUTPUT: The Appium Java XML output type.</p> </li> <li> <p>APPIUM_PYTHON_OUTPUT: The Appium Python output type.</p> </li> <li> <p>APPIUM_PYTHON_XML_OUTPUT: The Appium Python XML output type.</p> </li> <li> <p>EXPLORER_EVENT_LOG: The Explorer event log output type.</p> </li> <li> <p>EXPLORER_SUMMARY_LOG: The Explorer summary log output type.</p> </li> <li> <p>APPLICATION_CRASH_REPORT: The application crash report output type.</p> </li> <li> <p>XCTEST_LOG: The XCode test output type.</p> </li> </ul>
    ArtifactType type = 4;
    // The pre-signed Amazon S3 URL that can be used with a corresponding GET request to download the artifact's file.
    string url = 5;
}

enum ArtifactCategory {
    SCREENSHOT = 0;
    FILE = 1;
    LOG = 2;
}

enum ArtifactType {
    UNKNOWN = 0;
    SCREENSHOT = 1;
    DEVICE_LOG = 2;
    MESSAGE_LOG = 3;
    VIDEO_LOG = 4;
    RESULT_LOG = 5;
    SERVICE_LOG = 6;
    WEBKIT_LOG = 7;
    INSTRUMENTATION_OUTPUT = 8;
    EXERCISER_MONKEY_OUTPUT = 9;
    CALABASH_JSON_OUTPUT = 10;
    CALABASH_PRETTY_OUTPUT = 11;
    CALABASH_STANDARD_OUTPUT = 12;
    CALABASH_JAVA_XML_OUTPUT = 13;
    AUTOMATION_OUTPUT = 14;
    APPIUM_SERVER_OUTPUT = 15;
    APPIUM_JAVA_OUTPUT = 16;
    APPIUM_JAVA_XML_OUTPUT = 17;
    APPIUM_PYTHON_OUTPUT = 18;
    APPIUM_PYTHON_XML_OUTPUT = 19;
    EXPLORER_EVENT_LOG = 20;
    EXPLORER_SUMMARY_LOG = 21;
    APPLICATION_CRASH_REPORT = 22;
    XCTEST_LOG = 23;
    VIDEO = 24;
    CUSTOMER_ARTIFACT = 25;
    CUSTOMER_ARTIFACT_LOG = 26;
}

repeated Artifact Artifacts = 1

enum BillingMethod {
    METERED = 0;
    UNMETERED = 1;
}

message CPU {
    // The CPU's architecture, for example x86 or ARM.
    string architecture = 1;
    // The clock speed of the device's CPU, expressed in hertz (Hz). For example, a 1.2 GHz CPU is expressed as 1200000000.
    number clock = 2;
    // The CPU's frequency.
    string frequency = 3;
}

message Counters {
    // The number of errored entities.
    integer errored = 1;
    // The number of failed entities.
    integer failed = 2;
    // The number of passed entities.
    integer passed = 3;
    // The number of skipped entities.
    integer skipped = 4;
    // The number of stopped entities.
    integer stopped = 5;
    // The total number of entities.
    integer total = 6;
    // The number of warned entities.
    integer warned = 7;
}

message CreateDevicePoolRequest {
    // The device pool's description.
    string description = 1;
    // The device pool's name.
    string name = 2;
    // The ARN of the project for the device pool.
    string projectArn = 3;
    // The device pool's rules.
    array rules = 4;
}

message CreateDevicePoolResult {
    // The newly created device pool.
    DevicePool devicePool = 1;
}

message CreateNetworkProfileRequest {
    // The description of the network profile.
    string description = 1;
    // The data throughput rate in bits per second, as an integer from 0 to 104857600.
    integer downlinkBandwidthBits = 2;
    // Delay time for all packets to destination in milliseconds as an integer from 0 to 2000.
    integer downlinkDelayMs = 3;
    // Time variation in the delay of received packets in milliseconds as an integer from 0 to 2000.
    integer downlinkJitterMs = 4;
    // Proportion of received packets that fail to arrive from 0 to 100 percent.
    integer downlinkLossPercent = 5;
    // The name you wish to specify for the new network profile.
    string name = 6;
    // The Amazon Resource Name (ARN) of the project for which you want to create a network profile.
    string projectArn = 7;
    // The type of network profile you wish to create. Valid values are listed below.
    NetworkProfileType type = 8;
    // The data throughput rate in bits per second, as an integer from 0 to 104857600.
    integer uplinkBandwidthBits = 9;
    // Delay time for all packets to destination in milliseconds as an integer from 0 to 2000.
    integer uplinkDelayMs = 10;
    // Time variation in the delay of received packets in milliseconds as an integer from 0 to 2000.
    integer uplinkJitterMs = 11;
    // Proportion of transmitted packets that fail to arrive from 0 to 100 percent.
    integer uplinkLossPercent = 12;
}

message CreateNetworkProfileResult {
    // The network profile that is returned by the create network profile request.
    NetworkProfile networkProfile = 1;
}

message CreateProjectRequest {
    // Sets the execution timeout value (in minutes) for a project. All test runs in this project will use the specified execution timeout value unless overridden when scheduling a run.
    integer defaultJobTimeoutMinutes = 1;
    // The project's name.
    string name = 2;
}

message CreateProjectResult {
    // The newly created project.
    Project project = 1;
}

message CreateRemoteAccessSessionConfiguration {
    // Returns the billing method for purposes of configuring a remote access session.
    BillingMethod billingMethod = 1;
}

message CreateRemoteAccessSessionRequest {
    // Unique identifier for the client. If you want access to multiple devices on the same client, you should pass the same <code>clientId</code> value in each call to <code>CreateRemoteAccessSession</code>. This is required only if <code>remoteDebugEnabled</code> is set to true <code>true</code>.
    string clientId = 1;
    // The configuration information for the remote access session request.
    CreateRemoteAccessSessionConfiguration configuration = 2;
    // The Amazon Resource Name (ARN) of the device for which you want to create a remote access session.
    string deviceArn = 3;
    // The name of the remote access session that you wish to create.
    string name = 4;
    // The Amazon Resource Name (ARN) of the project for which you want to create a remote access session.
    string projectArn = 5;
    // Set to <code>true</code> if you want to access devices remotely for debugging in your remote access session.
    boolean remoteDebugEnabled = 6;
    // The public key of the <code>ssh</code> key pair you want to use for connecting to remote devices in your remote debugging session. This is only required if <code>remoteDebugEnabled</code> is set to <code>true</code>.
    string sshPublicKey = 7;
}

message CreateRemoteAccessSessionResult {
    // A container that describes the remote access session when the request to create a remote access session is sent.
    RemoteAccessSession remoteAccessSession = 1;
}

message CreateUploadRequest {
    // The upload's content type (for example, "application/octet-stream").
    string contentType = 1;
    // The upload's file name. The name should not contain the '/' character. If uploading an iOS app, the file name needs to end with the <code>.ipa</code> extension. If uploading an Android app, the file name needs to end with the <code>.apk</code> extension. For all others, the file name must end with the <code>.zip</code> file extension.
    string name = 2;
    // The ARN of the project for the upload.
    string projectArn = 3;
    // <p>The upload's upload type.</p> <p>Must be one of the following values:</p> <ul> <li> <p>ANDROID_APP: An Android upload.</p> </li> <li> <p>IOS_APP: An iOS upload.</p> </li> <li> <p>WEB_APP: A web appliction upload.</p> </li> <li> <p>EXTERNAL_DATA: An external data upload.</p> </li> <li> <p>APPIUM_JAVA_JUNIT_TEST_PACKAGE: An Appium Java JUnit test package upload.</p> </li> <li> <p>APPIUM_JAVA_TESTNG_TEST_PACKAGE: An Appium Java TestNG test package upload.</p> </li> <li> <p>APPIUM_PYTHON_TEST_PACKAGE: An Appium Python test package upload.</p> </li> <li> <p>APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE: An Appium Java JUnit test package upload.</p> </li> <li> <p>APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE: An Appium Java TestNG test package upload.</p> </li> <li> <p>APPIUM_WEB_PYTHON_TEST_PACKAGE: An Appium Python test package upload.</p> </li> <li> <p>CALABASH_TEST_PACKAGE: A Calabash test package upload.</p> </li> <li> <p>INSTRUMENTATION_TEST_PACKAGE: An instrumentation upload.</p> </li> <li> <p>UIAUTOMATION_TEST_PACKAGE: A uiautomation test package upload.</p> </li> <li> <p>UIAUTOMATOR_TEST_PACKAGE: A uiautomator test package upload.</p> </li> <li> <p>XCTEST_TEST_PACKAGE: An XCode test package upload.</p> </li> <li> <p>XCTEST_UI_TEST_PACKAGE: An XCode UI test package upload.</p> </li> </ul> <p> <b>Note</b> If you call <code>CreateUpload</code> with <code>WEB_APP</code> specified, AWS Device Farm throws an <code>ArgumentException</code> error.</p>
    UploadType type = 4;
}

message CreateUploadResult {
    // The newly created upload.
    Upload upload = 1;
}

enum CurrencyCode {
    USD = 0;
}

message CustomerArtifactPaths {
    // Comma-separated list of paths on the Android device where the artifacts generated by the customer's tests will be pulled from.
    array androidPaths = 1;
    // Comma-separated list of paths in the test execution environment where the artifacts generated by the customer's tests will be pulled from.
    array deviceHostPaths = 2;
    // Comma-separated list of paths on the iOS device where the artifacts generated by the customer's tests will be pulled from.
    array iosPaths = 3;
}

message DeleteDevicePoolRequest {
    // Represents the Amazon Resource Name (ARN) of the Device Farm device pool you wish to delete.
    string arn = 1;
}

message DeleteDevicePoolResult {
}

message DeleteNetworkProfileRequest {
    // The Amazon Resource Name (ARN) of the network profile you want to delete.
    string arn = 1;
}

message DeleteNetworkProfileResult {
}

message DeleteProjectRequest {
    // Represents the Amazon Resource Name (ARN) of the Device Farm project you wish to delete.
    string arn = 1;
}

message DeleteProjectResult {
}

message DeleteRemoteAccessSessionRequest {
    // The Amazon Resource Name (ARN) of the sesssion for which you want to delete remote access.
    string arn = 1;
}

message DeleteRemoteAccessSessionResult {
}

message DeleteRunRequest {
    // The Amazon Resource Name (ARN) for the run you wish to delete.
    string arn = 1;
}

message DeleteRunResult {
}

message DeleteUploadRequest {
    // Represents the Amazon Resource Name (ARN) of the Device Farm upload you wish to delete.
    string arn = 1;
}

message DeleteUploadResult {
}

message Device {
    // The device's ARN.
    string arn = 1;
    // The device's carrier.
    string carrier = 2;
    // Information about the device's CPU.
    CPU cpu = 3;
    // The name of the fleet to which this device belongs.
    string fleetName = 4;
    // The type of fleet to which this device belongs. Possible values for fleet type are PRIVATE and PUBLIC.
    string fleetType = 5;
    // <p>The device's form factor.</p> <p>Allowed values include:</p> <ul> <li> <p>PHONE: The phone form factor.</p> </li> <li> <p>TABLET: The tablet form factor.</p> </li> </ul>
    DeviceFormFactor formFactor = 6;
    // The device's heap size, expressed in bytes.
    integer heapSize = 7;
    // The device's image name.
    string image = 8;
    // The device's manufacturer name.
    string manufacturer = 9;
    // The device's total memory size, expressed in bytes.
    integer memory = 10;
    // The device's model name.
    string model = 11;
    // The device's display name.
    string name = 12;
    // The device's operating system type.
    string os = 13;
    // <p>The device's platform.</p> <p>Allowed values include:</p> <ul> <li> <p>ANDROID: The Android platform.</p> </li> <li> <p>IOS: The iOS platform.</p> </li> </ul>
    DevicePlatform platform = 14;
    // The device's radio.
    string radio = 15;
    // Specifies whether remote access has been enabled for the specified device.
    boolean remoteAccessEnabled = 16;
    // This flag is set to <code>true</code> if remote debugging is enabled for the device.
    boolean remoteDebugEnabled = 17;
    // The resolution of the device.
    Resolution resolution = 18;
}

enum DeviceAttribute {
    ARN = 0;
    PLATFORM = 1;
    FORM_FACTOR = 2;
    MANUFACTURER = 3;
    REMOTE_ACCESS_ENABLED = 4;
    REMOTE_DEBUG_ENABLED = 5;
    APPIUM_VERSION = 6;
}

enum DeviceFormFactor {
    PHONE = 0;
    TABLET = 1;
}

repeated string DeviceHostPaths = 1

message DeviceMinutes {
    // When specified, represents only the sum of metered minutes used by the resource to run tests.
    number metered = 1;
    // When specified, represents the total minutes used by the resource to run tests.
    number total = 2;
    // When specified, represents only the sum of unmetered minutes used by the resource to run tests.
    number unmetered = 3;
}

enum DevicePlatform {
    ANDROID = 0;
    IOS = 1;
}

message DevicePool {
    // The device pool's ARN.
    string arn = 1;
    // The device pool's description.
    string description = 2;
    // The device pool's name.
    string name = 3;
    // Information about the device pool's rules.
    array rules = 4;
    // <p>The device pool's type.</p> <p>Allowed values include:</p> <ul> <li> <p>CURATED: A device pool that is created and managed by AWS Device Farm.</p> </li> <li> <p>PRIVATE: A device pool that is created and managed by the device pool developer.</p> </li> </ul>
    DevicePoolType type = 5;
}

message DevicePoolCompatibilityResult {
    // Whether the result was compatible with the device pool.
    boolean compatible = 1;
    // The device (phone or tablet) that you wish to return information about.
    Device device = 2;
    // Information about the compatibility.
    array incompatibilityMessages = 3;
}

repeated DevicePoolCompatibilityResult DevicePoolCompatibilityResults = 1

enum DevicePoolType {
    CURATED = 0;
    PRIVATE = 1;
}

repeated DevicePool DevicePools = 1

repeated Device Devices = 1



message ExecutionConfiguration {
    // True if account cleanup is enabled at the beginning of the test; otherwise, false.
    boolean accountsCleanup = 1;
    // True if app package cleanup is enabled at the beginning of the test; otherwise, false.
    boolean appPackagesCleanup = 2;
    // The number of minutes a test run will execute before it times out.
    integer jobTimeoutMinutes = 3;
}

enum ExecutionResult {
    PENDING = 0;
    PASSED = 1;
    WARNED = 2;
    FAILED = 3;
    SKIPPED = 4;
    ERRORED = 5;
    STOPPED = 6;
}

enum ExecutionResultCode {
    PARSING_FAILED = 0;
}

enum ExecutionStatu {
    PENDING = 0;
    PENDING_CONCURRENCY = 1;
    PENDING_DEVICE = 2;
    PROCESSING = 3;
    SCHEDULING = 4;
    PREPARING = 5;
    RUNNING = 6;
    COMPLETED = 7;
    STOPPING = 8;
}

message GetAccountSettingsRequest {
}

message GetAccountSettingsResult {
    // The account settings.
    AccountSettings accountSettings = 1;
}

message GetDevicePoolCompatibilityRequest {
    // The ARN of the app that is associated with the specified device pool.
    string appArn = 1;
    // The device pool's ARN.
    string devicePoolArn = 2;
    // Information about the uploaded test to be run against the device pool.
    ScheduleRunTest test = 3;
    // <p>The test type for the specified device pool.</p> <p>Allowed values include the following:</p> <ul> <li> <p>BUILTIN_FUZZ: The built-in fuzz type.</p> </li> <li> <p>BUILTIN_EXPLORER: For Android, an app explorer that will traverse an Android app, interacting with it and capturing screenshots at the same time.</p> </li> <li> <p>APPIUM_JAVA_JUNIT: The Appium Java JUnit type.</p> </li> <li> <p>APPIUM_JAVA_TESTNG: The Appium Java TestNG type.</p> </li> <li> <p>APPIUM_PYTHON: The Appium Python type.</p> </li> <li> <p>APPIUM_WEB_JAVA_JUNIT: The Appium Java JUnit type for Web apps.</p> </li> <li> <p>APPIUM_WEB_JAVA_TESTNG: The Appium Java TestNG type for Web apps.</p> </li> <li> <p>APPIUM_WEB_PYTHON: The Appium Python type for Web apps.</p> </li> <li> <p>CALABASH: The Calabash type.</p> </li> <li> <p>INSTRUMENTATION: The Instrumentation type.</p> </li> <li> <p>UIAUTOMATION: The uiautomation type.</p> </li> <li> <p>UIAUTOMATOR: The uiautomator type.</p> </li> <li> <p>XCTEST: The XCode test type.</p> </li> <li> <p>XCTEST_UI: The XCode UI test type.</p> </li> </ul>
    TestType testType = 4;
}

message GetDevicePoolCompatibilityResult {
    // Information about compatible devices.
    array compatibleDevices = 1;
    // Information about incompatible devices.
    array incompatibleDevices = 2;
}

message GetDevicePoolRequest {
    // The device pool's ARN.
    string arn = 1;
}

message GetDevicePoolResult {
    // An object containing information about the requested device pool.
    DevicePool devicePool = 1;
}

message GetDeviceRequest {
    // The device type's ARN.
    string arn = 1;
}

message GetDeviceResult {
    // An object containing information about the requested device.
    Device device = 1;
}

message GetJobRequest {
    // The job's ARN.
    string arn = 1;
}

message GetJobResult {
    // An object containing information about the requested job.
    Job job = 1;
}

message GetNetworkProfileRequest {
    // The Amazon Resource Name (ARN) of the network profile you want to return information about.
    string arn = 1;
}

message GetNetworkProfileResult {
    // The network profile.
    NetworkProfile networkProfile = 1;
}

message GetOfferingStatusRequest {
    // An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    string nextToken = 1;
}

message GetOfferingStatusResult {
    // When specified, gets the offering status for the current period.
    array current = 1;
    // When specified, gets the offering status for the next period.
    array nextPeriod = 2;
    // An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    string nextToken = 3;
}

message GetProjectRequest {
    // The project's ARN.
    string arn = 1;
}

message GetProjectResult {
    // The project you wish to get information about.
    Project project = 1;
}

message GetRemoteAccessSessionRequest {
    // The Amazon Resource Name (ARN) of the remote access session about which you want to get session information.
    string arn = 1;
}

message GetRemoteAccessSessionResult {
    // A container that lists detailed information about the remote access session.
    RemoteAccessSession remoteAccessSession = 1;
}

message GetRunRequest {
    // The run's ARN.
    string arn = 1;
}

message GetRunResult {
    // The run you wish to get results from.
    Run run = 1;
}

message GetSuiteRequest {
    // The suite's ARN.
    string arn = 1;
}

message GetSuiteResult {
    // A collection of one or more tests.
    Suite suite = 1;
}

message GetTestRequest {
    // The test's ARN.
    string arn = 1;
}

message GetTestResult {
    // A test condition that is evaluated.
    Test test = 1;
}

message GetUploadRequest {
    // The upload's ARN.
    string arn = 1;
}

message GetUploadResult {
    // An app or a set of one or more tests to upload or that have been uploaded.
    Upload upload = 1;
}

message IdempotencyException {
    // Any additional information about the exception.
    string message = 1;
}

message IncompatibilityMessage {
    // A message about the incompatibility.
    string message = 1;
    // <p>The type of incompatibility.</p> <p>Allowed values include:</p> <ul> <li> <p>ARN: The ARN.</p> </li> <li> <p>FORM_FACTOR: The form factor (for example, phone or tablet).</p> </li> <li> <p>MANUFACTURER: The manufacturer.</p> </li> <li> <p>PLATFORM: The platform (for example, Android or iOS).</p> </li> <li> <p>REMOTE_ACCESS_ENABLED: Whether the device is enabled for remote access.</p> </li> <li> <p>APPIUM_VERSION: The Appium version for the test.</p> </li> </ul>
    DeviceAttribute type = 2;
}

repeated IncompatibilityMessage IncompatibilityMessages = 1

message InstallToRemoteAccessSessionRequest {
    // The Amazon Resource Name (ARN) of the app about which you are requesting information.
    string appArn = 1;
    // The Amazon Resource Name (ARN) of the remote access session about which you are requesting information.
    string remoteAccessSessionArn = 2;
}

message InstallToRemoteAccessSessionResult {
    // An app to upload or that has been uploaded.
    Upload appUpload = 1;
}



repeated string IosPaths = 1

message Job {
    // The job's ARN.
    string arn = 1;
    // The job's result counters.
    Counters counters = 2;
    // When the job was created.
    string created = 3;
    // The device (phone or tablet).
    Device device = 4;
    // Represents the total (metered or unmetered) minutes used by the job.
    DeviceMinutes deviceMinutes = 5;
    // A message about the job's result.
    string message = 6;
    // The job's name.
    string name = 7;
    // <p>The job's result.</p> <p>Allowed values include:</p> <ul> <li> <p>PENDING: A pending condition.</p> </li> <li> <p>PASSED: A passing condition.</p> </li> <li> <p>WARNED: A warning condition.</p> </li> <li> <p>FAILED: A failed condition.</p> </li> <li> <p>SKIPPED: A skipped condition.</p> </li> <li> <p>ERRORED: An error condition.</p> </li> <li> <p>STOPPED: A stopped condition.</p> </li> </ul>
    ExecutionResult result = 8;
    // The job's start time.
    string started = 9;
    // <p>The job's status.</p> <p>Allowed values include:</p> <ul> <li> <p>PENDING: A pending status.</p> </li> <li> <p>PENDING_CONCURRENCY: A pending concurrency status.</p> </li> <li> <p>PENDING_DEVICE: A pending device status.</p> </li> <li> <p>PROCESSING: A processing status.</p> </li> <li> <p>SCHEDULING: A scheduling status.</p> </li> <li> <p>PREPARING: A preparing status.</p> </li> <li> <p>RUNNING: A running status.</p> </li> <li> <p>COMPLETED: A completed status.</p> </li> <li> <p>STOPPING: A stopping status.</p> </li> </ul>
    ExecutionStatus status = 10;
    // The job's stop time.
    string stopped = 11;
    // <p>The job's type.</p> <p>Allowed values include the following:</p> <ul> <li> <p>BUILTIN_FUZZ: The built-in fuzz type.</p> </li> <li> <p>BUILTIN_EXPLORER: For Android, an app explorer that will traverse an Android app, interacting with it and capturing screenshots at the same time.</p> </li> <li> <p>APPIUM_JAVA_JUNIT: The Appium Java JUnit type.</p> </li> <li> <p>APPIUM_JAVA_TESTNG: The Appium Java TestNG type.</p> </li> <li> <p>APPIUM_PYTHON: The Appium Python type.</p> </li> <li> <p>APPIUM_WEB_JAVA_JUNIT: The Appium Java JUnit type for Web apps.</p> </li> <li> <p>APPIUM_WEB_JAVA_TESTNG: The Appium Java TestNG type for Web apps.</p> </li> <li> <p>APPIUM_WEB_PYTHON: The Appium Python type for Web apps.</p> </li> <li> <p>CALABASH: The Calabash type.</p> </li> <li> <p>INSTRUMENTATION: The Instrumentation type.</p> </li> <li> <p>UIAUTOMATION: The uiautomation type.</p> </li> <li> <p>UIAUTOMATOR: The uiautomator type.</p> </li> <li> <p>XCTEST: The XCode test type.</p> </li> <li> <p>XCTEST_UI: The XCode UI test type.</p> </li> </ul>
    TestType type = 12;
}



repeated Job Jobs = 1

message LimitExceededException {
    // Any additional information about the exception.
    string message = 1;
}

message ListArtifactsRequest {
    // The Run, Job, Suite, or Test ARN.
    string arn = 1;
    // An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    string nextToken = 2;
    // <p>The artifacts' type.</p> <p>Allowed values include:</p> <ul> <li> <p>FILE: The artifacts are files.</p> </li> <li> <p>LOG: The artifacts are logs.</p> </li> <li> <p>SCREENSHOT: The artifacts are screenshots.</p> </li> </ul>
    ArtifactCategory type = 3;
}

message ListArtifactsResult {
    // Information about the artifacts.
    array artifacts = 1;
    // If the number of items that are returned is significantly large, this is an identifier that is also returned, which can be used in a subsequent call to this operation to return the next set of items in the list.
    string nextToken = 2;
}

message ListDevicePoolsRequest {
    // The project ARN.
    string arn = 1;
    // An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    string nextToken = 2;
    // <p>The device pools' type.</p> <p>Allowed values include:</p> <ul> <li> <p>CURATED: A device pool that is created and managed by AWS Device Farm.</p> </li> <li> <p>PRIVATE: A device pool that is created and managed by the device pool developer.</p> </li> </ul>
    DevicePoolType type = 3;
}

message ListDevicePoolsResult {
    // Information about the device pools.
    array devicePools = 1;
    // If the number of items that are returned is significantly large, this is an identifier that is also returned, which can be used in a subsequent call to this operation to return the next set of items in the list.
    string nextToken = 2;
}

message ListDevicesRequest {
    // The Amazon Resource Name (ARN) of the project.
    string arn = 1;
    // An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    string nextToken = 2;
}

message ListDevicesResult {
    // Information about the devices.
    array devices = 1;
    // If the number of items that are returned is significantly large, this is an identifier that is also returned, which can be used in a subsequent call to this operation to return the next set of items in the list.
    string nextToken = 2;
}

message ListJobsRequest {
    // The jobs' ARNs.
    string arn = 1;
    // An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    string nextToken = 2;
}

message ListJobsResult {
    // Information about the jobs.
    array jobs = 1;
    // If the number of items that are returned is significantly large, this is an identifier that is also returned, which can be used in a subsequent call to this operation to return the next set of items in the list.
    string nextToken = 2;
}

message ListNetworkProfilesRequest {
    // The Amazon Resource Name (ARN) of the project for which you want to list network profiles.
    string arn = 1;
    // An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    string nextToken = 2;
    // The type of network profile you wish to return information about. Valid values are listed below.
    NetworkProfileType type = 3;
}

message ListNetworkProfilesResult {
    // A list of the available network profiles.
    array networkProfiles = 1;
    // An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    string nextToken = 2;
}

message ListOfferingPromotionsRequest {
    // An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    string nextToken = 1;
}

message ListOfferingPromotionsResult {
    // An identifier to be used in the next call to this operation, to return the next set of items in the list.
    string nextToken = 1;
    // Information about the offering promotions.
    array offeringPromotions = 2;
}

message ListOfferingTransactionsRequest {
    // An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    string nextToken = 1;
}

message ListOfferingTransactionsResult {
    // An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    string nextToken = 1;
    // The audit log of subscriptions you have purchased and modified through AWS Device Farm.
    array offeringTransactions = 2;
}

message ListOfferingsRequest {
    // An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    string nextToken = 1;
}

message ListOfferingsResult {
    // An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    string nextToken = 1;
    // A value representing the list offering results.
    array offerings = 2;
}

message ListProjectsRequest {
    // Optional. If no Amazon Resource Name (ARN) is specified, then AWS Device Farm returns a list of all projects for the AWS account. You can also specify a project ARN.
    string arn = 1;
    // An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    string nextToken = 2;
}

message ListProjectsResult {
    // If the number of items that are returned is significantly large, this is an identifier that is also returned, which can be used in a subsequent call to this operation to return the next set of items in the list.
    string nextToken = 1;
    // Information about the projects.
    array projects = 2;
}

message ListRemoteAccessSessionsRequest {
    // The Amazon Resource Name (ARN) of the remote access session about which you are requesting information.
    string arn = 1;
    // An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    string nextToken = 2;
}

message ListRemoteAccessSessionsResult {
    // An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    string nextToken = 1;
    // A container representing the metadata from the service about each remote access session you are requesting.
    array remoteAccessSessions = 2;
}

message ListRunsRequest {
    // The Amazon Resource Name (ARN) of the project for which you want to list runs.
    string arn = 1;
    // An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    string nextToken = 2;
}

message ListRunsResult {
    // If the number of items that are returned is significantly large, this is an identifier that is also returned, which can be used in a subsequent call to this operation to return the next set of items in the list.
    string nextToken = 1;
    // Information about the runs.
    array runs = 2;
}

message ListSamplesRequest {
    // The Amazon Resource Name (ARN) of the project for which you want to list samples.
    string arn = 1;
    // An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    string nextToken = 2;
}

message ListSamplesResult {
    // If the number of items that are returned is significantly large, this is an identifier that is also returned, which can be used in a subsequent call to this operation to return the next set of items in the list.
    string nextToken = 1;
    // Information about the samples.
    array samples = 2;
}

message ListSuitesRequest {
    // The suites' ARNs.
    string arn = 1;
    // An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    string nextToken = 2;
}

message ListSuitesResult {
    // If the number of items that are returned is significantly large, this is an identifier that is also returned, which can be used in a subsequent call to this operation to return the next set of items in the list.
    string nextToken = 1;
    // Information about the suites.
    array suites = 2;
}

message ListTestsRequest {
    // The tests' ARNs.
    string arn = 1;
    // An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    string nextToken = 2;
}

message ListTestsResult {
    // If the number of items that are returned is significantly large, this is an identifier that is also returned, which can be used in a subsequent call to this operation to return the next set of items in the list.
    string nextToken = 1;
    // Information about the tests.
    array tests = 2;
}

message ListUniqueProblemsRequest {
    // The unique problems' ARNs.
    string arn = 1;
    // An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    string nextToken = 2;
}

message ListUniqueProblemsResult {
    // If the number of items that are returned is significantly large, this is an identifier that is also returned, which can be used in a subsequent call to this operation to return the next set of items in the list.
    string nextToken = 1;
    // <p>Information about the unique problems.</p> <p>Allowed values include:</p> <ul> <li> <p>PENDING: A pending condition.</p> </li> <li> <p>PASSED: A passing condition.</p> </li> <li> <p>WARNED: A warning condition.</p> </li> <li> <p>FAILED: A failed condition.</p> </li> <li> <p>SKIPPED: A skipped condition.</p> </li> <li> <p>ERRORED: An error condition.</p> </li> <li> <p>STOPPED: A stopped condition.</p> </li> </ul>
    array uniqueProblems = 2;
}

message ListUploadsRequest {
    // The Amazon Resource Name (ARN) of the project for which you want to list uploads.
    string arn = 1;
    // An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    string nextToken = 2;
}

message ListUploadsResult {
    // If the number of items that are returned is significantly large, this is an identifier that is also returned, which can be used in a subsequent call to this operation to return the next set of items in the list.
    string nextToken = 1;
    // Information about the uploads.
    array uploads = 2;
}

message Location {
    // The latitude.
    number latitude = 1;
    // The longitude.
    number longitude = 2;
}

message MaxSlotMap {
    string key = 1;
    integer value = 2;
}
repeated MaxSlotMap MaxSlotMap = 1





message MonetaryAmount {
    // The numerical amount of an offering or transaction.
    number amount = 1;
    // The currency code of a monetary amount. For example, <code>USD</code> means "U.S. dollars."
    CurrencyCode currencyCode = 2;
}

message NetworkProfile {
    // The Amazon Resource Name (ARN) of the network profile.
    string arn = 1;
    // The description of the network profile.
    string description = 2;
    // The data throughput rate in bits per second, as an integer from 0 to 104857600.
    integer downlinkBandwidthBits = 3;
    // Delay time for all packets to destination in milliseconds as an integer from 0 to 2000.
    integer downlinkDelayMs = 4;
    // Time variation in the delay of received packets in milliseconds as an integer from 0 to 2000.
    integer downlinkJitterMs = 5;
    // Proportion of received packets that fail to arrive from 0 to 100 percent.
    integer downlinkLossPercent = 6;
    // The name of the network profile.
    string name = 7;
    // The type of network profile. Valid values are listed below.
    NetworkProfileType type = 8;
    // The data throughput rate in bits per second, as an integer from 0 to 104857600.
    integer uplinkBandwidthBits = 9;
    // Delay time for all packets to destination in milliseconds as an integer from 0 to 2000.
    integer uplinkDelayMs = 10;
    // Time variation in the delay of received packets in milliseconds as an integer from 0 to 2000.
    integer uplinkJitterMs = 11;
    // Proportion of transmitted packets that fail to arrive from 0 to 100 percent.
    integer uplinkLossPercent = 12;
}

enum NetworkProfileType {
    CURATED = 0;
    PRIVATE = 1;
}

repeated NetworkProfile NetworkProfiles = 1

message NotEligibleException {
    // The HTTP response code of a Not Eligible exception.
    string message = 1;
}

message NotFoundException {
    // Any additional information about the exception.
    string message = 1;
}

message Offering {
    // A string describing the offering.
    string description = 1;
    // The ID that corresponds to a device offering.
    string id = 2;
    // The platform of the device (e.g., ANDROID or IOS).
    DevicePlatform platform = 3;
    // Specifies whether there are recurring charges for the offering.
    array recurringCharges = 4;
    // The type of offering (e.g., "RECURRING") for a device.
    OfferingType type = 5;
}

message OfferingPromotion {
    // A string describing the offering promotion.
    string description = 1;
    // The ID of the offering promotion.
    string id = 2;
}



repeated OfferingPromotion OfferingPromotions = 1

message OfferingStatus {
    // The date on which the offering is effective.
    string effectiveOn = 1;
    // Represents the metadata of an offering status.
    Offering offering = 2;
    // The number of available devices in the offering.
    integer quantity = 3;
    // The type specified for the offering status.
    OfferingTransactionType type = 4;
}

message OfferingStatusMap {
    string key = 1;
    OfferingStatus value = 2;
}
repeated OfferingStatusMap OfferingStatusMap = 1

message OfferingTransaction {
    // The cost of an offering transaction.
    MonetaryAmount cost = 1;
    // The date on which an offering transaction was created.
    string createdOn = 2;
    // The ID that corresponds to a device offering promotion.
    string offeringPromotionId = 3;
    // The status of an offering transaction.
    OfferingStatus offeringStatus = 4;
    // The transaction ID of the offering transaction.
    string transactionId = 5;
}

enum OfferingTransactionType {
    PURCHASE = 0;
    RENEW = 1;
    SYSTEM = 2;
}

repeated OfferingTransaction OfferingTransactions = 1

enum OfferingType {
    RECURRING = 0;
}

repeated Offering Offerings = 1





message Problem {
    // Information about the associated device.
    Device device = 1;
    // Information about the associated job.
    ProblemDetail job = 2;
    // A message about the problem's result.
    string message = 3;
    // <p>The problem's result.</p> <p>Allowed values include:</p> <ul> <li> <p>PENDING: A pending condition.</p> </li> <li> <p>PASSED: A passing condition.</p> </li> <li> <p>WARNED: A warning condition.</p> </li> <li> <p>FAILED: A failed condition.</p> </li> <li> <p>SKIPPED: A skipped condition.</p> </li> <li> <p>ERRORED: An error condition.</p> </li> <li> <p>STOPPED: A stopped condition.</p> </li> </ul>
    ExecutionResult result = 4;
    // Information about the associated run.
    ProblemDetail run = 5;
    // Information about the associated suite.
    ProblemDetail suite = 6;
    // Information about the associated test.
    ProblemDetail test = 7;
}

message ProblemDetail {
    // The problem detail's ARN.
    string arn = 1;
    // The problem detail's name.
    string name = 2;
}

repeated Problem Problems = 1

message Project {
    // The project's ARN.
    string arn = 1;
    // When the project was created.
    string created = 2;
    // The default number of minutes (at the project level) a test run will execute before it times out. Default value is 60 minutes.
    integer defaultJobTimeoutMinutes = 3;
    // The project's name.
    string name = 4;
}

repeated Project Projects = 1

message PurchaseOfferingRequest {
    // The ID of the offering.
    string offeringId = 1;
    // The ID of the offering promotion to be applied to the purchase.
    string offeringPromotionId = 2;
    // The number of device slots you wish to purchase in an offering request.
    integer quantity = 3;
}

message PurchaseOfferingResult {
    // Represents the offering transaction for the purchase result.
    OfferingTransaction offeringTransaction = 1;
}

message PurchasedDevicesMap {
    DevicePlatform key = 1;
    integer value = 2;
}
repeated PurchasedDevicesMap PurchasedDevicesMap = 1

message Radios {
    // True if Bluetooth is enabled at the beginning of the test; otherwise, false.
    boolean bluetooth = 1;
    // True if GPS is enabled at the beginning of the test; otherwise, false.
    boolean gps = 2;
    // True if NFC is enabled at the beginning of the test; otherwise, false.
    boolean nfc = 3;
    // True if Wi-Fi is enabled at the beginning of the test; otherwise, false.
    boolean wifi = 4;
}

message RecurringCharge {
    // The cost of the recurring charge.
    MonetaryAmount cost = 1;
    // The frequency in which charges will recur.
    RecurringChargeFrequency frequency = 2;
}

enum RecurringChargeFrequency {
    MONTHLY = 0;
}

repeated RecurringCharge RecurringCharges = 1

message RemoteAccessSession {
    // The Amazon Resource Name (ARN) of the remote access session.
    string arn = 1;
    // The billing method of the remote access session. Possible values include <code>METERED</code> or <code>UNMETERED</code>. For more information about metered devices, see <a href="http://docs.aws.amazon.com/devicefarm/latest/developerguide/welcome.html#welcome-terminology">AWS Device Farm terminology</a>."
    BillingMethod billingMethod = 2;
    // Unique identifier of your client for the remote access session. Only returned if remote debugging is enabled for the remote access session.
    string clientId = 3;
    // The date and time the remote access session was created.
    string created = 4;
    // The device (phone or tablet) used in the remote access session.
    Device device = 5;
    // The number of minutes a device is used in a remote access sesssion (including setup and teardown minutes).
    DeviceMinutes deviceMinutes = 6;
    // Unique device identifier for the remote device. Only returned if remote debugging is enabled for the remote access session.
    string deviceUdid = 7;
    // The endpoint for the remote access sesssion.
    string endpoint = 8;
    // IP address of the EC2 host where you need to connect to remotely debug devices. Only returned if remote debugging is enabled for the remote access session.
    string hostAddress = 9;
    // A message about the remote access session.
    string message = 10;
    // The name of the remote access session.
    string name = 11;
    // This flag is set to <code>true</code> if remote debugging is enabled for the remote access session.
    boolean remoteDebugEnabled = 12;
    // <p>The result of the remote access session. Can be any of the following:</p> <ul> <li> <p>PENDING: A pending condition.</p> </li> <li> <p>PASSED: A passing condition.</p> </li> <li> <p>WARNED: A warning condition.</p> </li> <li> <p>FAILED: A failed condition.</p> </li> <li> <p>SKIPPED: A skipped condition.</p> </li> <li> <p>ERRORED: An error condition.</p> </li> <li> <p>STOPPED: A stopped condition.</p> </li> </ul>
    ExecutionResult result = 13;
    // The date and time the remote access session was started.
    string started = 14;
    // <p>The status of the remote access session. Can be any of the following:</p> <ul> <li> <p>PENDING: A pending status.</p> </li> <li> <p>PENDING_CONCURRENCY: A pending concurrency status.</p> </li> <li> <p>PENDING_DEVICE: A pending device status.</p> </li> <li> <p>PROCESSING: A processing status.</p> </li> <li> <p>SCHEDULING: A scheduling status.</p> </li> <li> <p>PREPARING: A preparing status.</p> </li> <li> <p>RUNNING: A running status.</p> </li> <li> <p>COMPLETED: A completed status.</p> </li> <li> <p>STOPPING: A stopping status.</p> </li> </ul>
    ExecutionStatus status = 15;
    // The date and time the remote access session was stopped.
    string stopped = 16;
}

repeated RemoteAccessSession RemoteAccessSessions = 1

message RenewOfferingRequest {
    // The ID of a request to renew an offering.
    string offeringId = 1;
    // The quantity requested in an offering renewal.
    integer quantity = 2;
}

message RenewOfferingResult {
    // Represents the status of the offering transaction for the renewal.
    OfferingTransaction offeringTransaction = 1;
}

message Resolution {
    // The screen resolution's height, expressed in pixels.
    integer height = 1;
    // The screen resolution's width, expressed in pixels.
    integer width = 2;
}

message Rule {
    // <p>The rule's stringified attribute. For example, specify the value as <code>"\"abc\""</code>.</p> <p>Allowed values include:</p> <ul> <li> <p>ARN: The ARN.</p> </li> <li> <p>FORM_FACTOR: The form factor (for example, phone or tablet).</p> </li> <li> <p>MANUFACTURER: The manufacturer.</p> </li> <li> <p>PLATFORM: The platform (for example, Android or iOS).</p> </li> <li> <p>REMOTE_ACCESS_ENABLED: Whether the device is enabled for remote access.</p> </li> <li> <p>APPIUM_VERSION: The Appium version for the test.</p> </li> </ul>
    DeviceAttribute attribute = 1;
    // <p>The rule's operator.</p> <ul> <li> <p>EQUALS: The equals operator.</p> </li> <li> <p>GREATER_THAN: The greater-than operator.</p> </li> <li> <p>IN: The in operator.</p> </li> <li> <p>LESS_THAN: The less-than operator.</p> </li> <li> <p>NOT_IN: The not-in operator.</p> </li> <li> <p>CONTAINS: The contains operator.</p> </li> </ul>
    RuleOperator operator = 2;
    // The rule's value.
    string value = 3;
}

enum RuleOperator {
    EQUALS = 0;
    LESS_THAN = 1;
    GREATER_THAN = 2;
    IN = 3;
    NOT_IN = 4;
    CONTAINS = 5;
}

repeated Rule Rules = 1

message Run {
    // The run's ARN.
    string arn = 1;
    // Specifies the billing method for a test run: <code>metered</code> or <code>unmetered</code>. If the parameter is not specified, the default value is <code>metered</code>.
    BillingMethod billingMethod = 2;
    // The total number of completed jobs.
    integer completedJobs = 3;
    // The run's result counters.
    Counters counters = 4;
    // When the run was created.
    string created = 5;
    // Output <code>CustomerArtifactPaths</code> object for the test run.
    CustomerArtifactPaths customerArtifactPaths = 6;
    // Represents the total (metered or unmetered) minutes used by the test run.
    DeviceMinutes deviceMinutes = 7;
    // A message about the run's result.
    string message = 8;
    // The run's name.
    string name = 9;
    // The network profile being used for a test run.
    NetworkProfile networkProfile = 10;
    // Read-only URL for an object in S3 bucket where you can get the parsing results of the test package. If the test package doesn't parse, the reason why it doesn't parse appears in the file that this URL points to.
    string parsingResultUrl = 11;
    // <p>The run's platform.</p> <p>Allowed values include:</p> <ul> <li> <p>ANDROID: The Android platform.</p> </li> <li> <p>IOS: The iOS platform.</p> </li> </ul>
    DevicePlatform platform = 12;
    // <p>The run's result.</p> <p>Allowed values include:</p> <ul> <li> <p>PENDING: A pending condition.</p> </li> <li> <p>PASSED: A passing condition.</p> </li> <li> <p>WARNED: A warning condition.</p> </li> <li> <p>FAILED: A failed condition.</p> </li> <li> <p>SKIPPED: A skipped condition.</p> </li> <li> <p>ERRORED: An error condition.</p> </li> <li> <p>STOPPED: A stopped condition.</p> </li> </ul>
    ExecutionResult result = 13;
    // Supporting field for the result field. Set only if <code>result</code> is <code>SKIPPED</code>. <code>PARSING_FAILED</code> if the result is skipped because of test package parsing failure.
    ExecutionResultCode resultCode = 14;
    // The run's start time.
    string started = 15;
    // <p>The run's status.</p> <p>Allowed values include:</p> <ul> <li> <p>PENDING: A pending status.</p> </li> <li> <p>PENDING_CONCURRENCY: A pending concurrency status.</p> </li> <li> <p>PENDING_DEVICE: A pending device status.</p> </li> <li> <p>PROCESSING: A processing status.</p> </li> <li> <p>SCHEDULING: A scheduling status.</p> </li> <li> <p>PREPARING: A preparing status.</p> </li> <li> <p>RUNNING: A running status.</p> </li> <li> <p>COMPLETED: A completed status.</p> </li> <li> <p>STOPPING: A stopping status.</p> </li> </ul>
    ExecutionStatus status = 16;
    // The run's stop time.
    string stopped = 17;
    // The total number of jobs for the run.
    integer totalJobs = 18;
    // <p>The run's type.</p> <p>Must be one of the following values:</p> <ul> <li> <p>BUILTIN_FUZZ: The built-in fuzz type.</p> </li> <li> <p>BUILTIN_EXPLORER: For Android, an app explorer that will traverse an Android app, interacting with it and capturing screenshots at the same time.</p> </li> <li> <p>APPIUM_JAVA_JUNIT: The Appium Java JUnit type.</p> </li> <li> <p>APPIUM_JAVA_TESTNG: The Appium Java TestNG type.</p> </li> <li> <p>APPIUM_PYTHON: The Appium Python type.</p> </li> <li> <p>APPIUM_WEB_JAVA_JUNIT: The Appium Java JUnit type for Web apps.</p> </li> <li> <p>APPIUM_WEB_JAVA_TESTNG: The Appium Java TestNG type for Web apps.</p> </li> <li> <p>APPIUM_WEB_PYTHON: The Appium Python type for Web apps.</p> </li> <li> <p>CALABASH: The Calabash type.</p> </li> <li> <p>INSTRUMENTATION: The Instrumentation type.</p> </li> <li> <p>UIAUTOMATION: The uiautomation type.</p> </li> <li> <p>UIAUTOMATOR: The uiautomator type.</p> </li> <li> <p>XCTEST: The XCode test type.</p> </li> <li> <p>XCTEST_UI: The XCode UI test type.</p> </li> </ul>
    TestType type = 19;
}

repeated Run Runs = 1

message Sample {
    // The sample's ARN.
    string arn = 1;
    // <p>The sample's type.</p> <p>Must be one of the following values:</p> <ul> <li> <p>CPU: A CPU sample type. This is expressed as the app processing CPU time (including child processes) as reported by process, as a percentage.</p> </li> <li> <p>MEMORY: A memory usage sample type. This is expressed as the total proportional set size of an app process, in kilobytes.</p> </li> <li> <p>NATIVE_AVG_DRAWTIME</p> </li> <li> <p>NATIVE_FPS</p> </li> <li> <p>NATIVE_FRAMES</p> </li> <li> <p>NATIVE_MAX_DRAWTIME</p> </li> <li> <p>NATIVE_MIN_DRAWTIME</p> </li> <li> <p>OPENGL_AVG_DRAWTIME</p> </li> <li> <p>OPENGL_FPS</p> </li> <li> <p>OPENGL_FRAMES</p> </li> <li> <p>OPENGL_MAX_DRAWTIME</p> </li> <li> <p>OPENGL_MIN_DRAWTIME</p> </li> <li> <p>RX</p> </li> <li> <p>RX_RATE: The total number of bytes per second (TCP and UDP) that are sent, by app process.</p> </li> <li> <p>THREADS: A threads sample type. This is expressed as the total number of threads per app process.</p> </li> <li> <p>TX</p> </li> <li> <p>TX_RATE: The total number of bytes per second (TCP and UDP) that are received, by app process.</p> </li> </ul>
    SampleType type = 2;
    // The pre-signed Amazon S3 URL that can be used with a corresponding GET request to download the sample's file.
    string url = 3;
}

enum SampleType {
    CPU = 0;
    MEMORY = 1;
    THREADS = 2;
    RX_RATE = 3;
    TX_RATE = 4;
    RX = 5;
    TX = 6;
    NATIVE_FRAMES = 7;
    NATIVE_FPS = 8;
    NATIVE_MIN_DRAWTIME = 9;
    NATIVE_AVG_DRAWTIME = 10;
    NATIVE_MAX_DRAWTIME = 11;
    OPENGL_FRAMES = 12;
    OPENGL_FPS = 13;
    OPENGL_MIN_DRAWTIME = 14;
    OPENGL_AVG_DRAWTIME = 15;
    OPENGL_MAX_DRAWTIME = 16;
}

repeated Sample Samples = 1

message ScheduleRunConfiguration {
    // A list of auxiliary apps for the run.
    array auxiliaryApps = 1;
    // Specifies the billing method for a test run: <code>metered</code> or <code>unmetered</code>. If the parameter is not specified, the default value is <code>metered</code>.
    BillingMethod billingMethod = 2;
    // Input <code>CustomerArtifactPaths</code> object for the scheduled run configuration.
    CustomerArtifactPaths customerArtifactPaths = 3;
    // The ARN of the extra data for the run. The extra data is a .zip file that AWS Device Farm will extract to external data for Android or the app's sandbox for iOS.
    string extraDataPackageArn = 4;
    // Information about the locale that is used for the run.
    string locale = 5;
    // Information about the location that is used for the run.
    Location location = 6;
    // Reserved for internal use.
    string networkProfileArn = 7;
    // Information about the radio states for the run.
    Radios radios = 8;
}

message ScheduleRunRequest {
    // The ARN of the app to schedule a run.
    string appArn = 1;
    // Information about the settings for the run to be scheduled.
    ScheduleRunConfiguration configuration = 2;
    // The ARN of the device pool for the run to be scheduled.
    string devicePoolArn = 3;
    // Specifies configuration information about a test run, such as the execution timeout (in minutes).
    ExecutionConfiguration executionConfiguration = 4;
    // The name for the run to be scheduled.
    string name = 5;
    // The ARN of the project for the run to be scheduled.
    string projectArn = 6;
    // Information about the test for the run to be scheduled.
    ScheduleRunTest test = 7;
}

message ScheduleRunResult {
    // Information about the scheduled run.
    Run run = 1;
}

message ScheduleRunTest {
    // The test's filter.
    string filter = 1;
    // <p>The test's parameters, such as the following test framework parameters and fixture settings:</p> <p>For Calabash tests:</p> <ul> <li> <p>profile: A cucumber profile, for example, "my_profile_name".</p> </li> <li> <p>tags: You can limit execution to features or scenarios that have (or don't have) certain tags, for example, "@smoke" or "@smoke,~@wip".</p> </li> </ul> <p>For Appium tests (all types):</p> <ul> <li> <p>appium_version: The Appium version. Currently supported values are "1.4.16", "1.6.3", "latest", and "default".</p> <ul> <li> <p>“latest” will run the latest Appium version supported by Device Farm (1.6.3).</p> </li> <li> <p>For “default”, Device Farm will choose a compatible version of Appium for the device. The current behavior is to run 1.4.16 on Android devices and iOS 9 and earlier, 1.6.3 for iOS 10 and later.</p> </li> <li> <p>This behavior is subject to change.</p> </li> </ul> </li> </ul> <p>For Fuzz tests (Android only):</p> <ul> <li> <p>event_count: The number of events, between 1 and 10000, that the UI fuzz test should perform.</p> </li> <li> <p>throttle: The time, in ms, between 0 and 1000, that the UI fuzz test should wait between events.</p> </li> <li> <p>seed: A seed to use for randomizing the UI fuzz test. Using the same seed value between tests ensures identical event sequences.</p> </li> </ul> <p>For Explorer tests:</p> <ul> <li> <p>username: A username to use if the Explorer encounters a login form. If not supplied, no username will be inserted.</p> </li> <li> <p>password: A password to use if the Explorer encounters a login form. If not supplied, no password will be inserted.</p> </li> </ul> <p>For Instrumentation:</p> <ul> <li> <p>filter: A test filter string. Examples:</p> <ul> <li> <p>Running a single test case: "com.android.abc.Test1"</p> </li> <li> <p>Running a single test: "com.android.abc.Test1#smoke"</p> </li> <li> <p>Running multiple tests: "com.android.abc.Test1,com.android.abc.Test2"</p> </li> </ul> </li> </ul> <p>For XCTest and XCTestUI:</p> <ul> <li> <p>filter: A test filter string. Examples:</p> <ul> <li> <p>Running a single test class: "LoginTests"</p> </li> <li> <p>Running a multiple test classes: "LoginTests,SmokeTests"</p> </li> <li> <p>Running a single test: "LoginTests/testValid"</p> </li> <li> <p>Running multiple tests: "LoginTests/testValid,LoginTests/testInvalid"</p> </li> </ul> </li> </ul> <p>For UIAutomator:</p> <ul> <li> <p>filter: A test filter string. Examples:</p> <ul> <li> <p>Running a single test case: "com.android.abc.Test1"</p> </li> <li> <p>Running a single test: "com.android.abc.Test1#smoke"</p> </li> <li> <p>Running multiple tests: "com.android.abc.Test1,com.android.abc.Test2"</p> </li> </ul> </li> </ul>
    array parameters = 2;
    // The ARN of the uploaded test that will be run.
    string testPackageArn = 3;
    // <p>The test's type.</p> <p>Must be one of the following values:</p> <ul> <li> <p>BUILTIN_FUZZ: The built-in fuzz type.</p> </li> <li> <p>BUILTIN_EXPLORER: For Android, an app explorer that will traverse an Android app, interacting with it and capturing screenshots at the same time.</p> </li> <li> <p>APPIUM_JAVA_JUNIT: The Appium Java JUnit type.</p> </li> <li> <p>APPIUM_JAVA_TESTNG: The Appium Java TestNG type.</p> </li> <li> <p>APPIUM_PYTHON: The Appium Python type.</p> </li> <li> <p>APPIUM_WEB_JAVA_JUNIT: The Appium Java JUnit type for Web apps.</p> </li> <li> <p>APPIUM_WEB_JAVA_TESTNG: The Appium Java TestNG type for Web apps.</p> </li> <li> <p>APPIUM_WEB_PYTHON: The Appium Python type for Web apps.</p> </li> <li> <p>CALABASH: The Calabash type.</p> </li> <li> <p>INSTRUMENTATION: The Instrumentation type.</p> </li> <li> <p>UIAUTOMATION: The uiautomation type.</p> </li> <li> <p>UIAUTOMATOR: The uiautomator type.</p> </li> <li> <p>XCTEST: The XCode test type.</p> </li> <li> <p>XCTEST_UI: The XCode UI test type.</p> </li> </ul>
    TestType type = 4;
}

message ServiceAccountException {
    // Any additional information about the exception.
    string message = 1;
}

message StopRemoteAccessSessionRequest {
    // The Amazon Resource Name (ARN) of the remote access session you wish to stop.
    string arn = 1;
}

message StopRemoteAccessSessionResult {
    // A container representing the metadata from the service about the remote access session you are stopping.
    RemoteAccessSession remoteAccessSession = 1;
}

message StopRunRequest {
    // Represents the Amazon Resource Name (ARN) of the Device Farm run you wish to stop.
    string arn = 1;
}

message StopRunResult {
    // The run that was stopped.
    Run run = 1;
}

message Suite {
    // The suite's ARN.
    string arn = 1;
    // The suite's result counters.
    Counters counters = 2;
    // When the suite was created.
    string created = 3;
    // Represents the total (metered or unmetered) minutes used by the test suite.
    DeviceMinutes deviceMinutes = 4;
    // A message about the suite's result.
    string message = 5;
    // The suite's name.
    string name = 6;
    // <p>The suite's result.</p> <p>Allowed values include:</p> <ul> <li> <p>PENDING: A pending condition.</p> </li> <li> <p>PASSED: A passing condition.</p> </li> <li> <p>WARNED: A warning condition.</p> </li> <li> <p>FAILED: A failed condition.</p> </li> <li> <p>SKIPPED: A skipped condition.</p> </li> <li> <p>ERRORED: An error condition.</p> </li> <li> <p>STOPPED: A stopped condition.</p> </li> </ul>
    ExecutionResult result = 7;
    // The suite's start time.
    string started = 8;
    // <p>The suite's status.</p> <p>Allowed values include:</p> <ul> <li> <p>PENDING: A pending status.</p> </li> <li> <p>PENDING_CONCURRENCY: A pending concurrency status.</p> </li> <li> <p>PENDING_DEVICE: A pending device status.</p> </li> <li> <p>PROCESSING: A processing status.</p> </li> <li> <p>SCHEDULING: A scheduling status.</p> </li> <li> <p>PREPARING: A preparing status.</p> </li> <li> <p>RUNNING: A running status.</p> </li> <li> <p>COMPLETED: A completed status.</p> </li> <li> <p>STOPPING: A stopping status.</p> </li> </ul>
    ExecutionStatus status = 9;
    // The suite's stop time.
    string stopped = 10;
    // <p>The suite's type.</p> <p>Must be one of the following values:</p> <ul> <li> <p>BUILTIN_FUZZ: The built-in fuzz type.</p> </li> <li> <p>BUILTIN_EXPLORER: For Android, an app explorer that will traverse an Android app, interacting with it and capturing screenshots at the same time.</p> </li> <li> <p>APPIUM_JAVA_JUNIT: The Appium Java JUnit type.</p> </li> <li> <p>APPIUM_JAVA_TESTNG: The Appium Java TestNG type.</p> </li> <li> <p>APPIUM_PYTHON: The Appium Python type.</p> </li> <li> <p>APPIUM_WEB_JAVA_JUNIT: The Appium Java JUnit type for Web apps.</p> </li> <li> <p>APPIUM_WEB_JAVA_TESTNG: The Appium Java TestNG type for Web apps.</p> </li> <li> <p>APPIUM_WEB_PYTHON: The Appium Python type for Web apps.</p> </li> <li> <p>CALABASH: The Calabash type.</p> </li> <li> <p>INSTRUMENTATION: The Instrumentation type.</p> </li> <li> <p>UIAUTOMATION: The uiautomation type.</p> </li> <li> <p>UIAUTOMATOR: The uiautomator type.</p> </li> <li> <p>XCTEST: The XCode test type.</p> </li> <li> <p>XCTEST_UI: The XCode UI test type.</p> </li> </ul>
    TestType type = 11;
}

repeated Suite Suites = 1

message Test {
    // The test's ARN.
    string arn = 1;
    // The test's result counters.
    Counters counters = 2;
    // When the test was created.
    string created = 3;
    // Represents the total (metered or unmetered) minutes used by the test.
    DeviceMinutes deviceMinutes = 4;
    // A message about the test's result.
    string message = 5;
    // The test's name.
    string name = 6;
    // <p>The test's result.</p> <p>Allowed values include:</p> <ul> <li> <p>PENDING: A pending condition.</p> </li> <li> <p>PASSED: A passing condition.</p> </li> <li> <p>WARNED: A warning condition.</p> </li> <li> <p>FAILED: A failed condition.</p> </li> <li> <p>SKIPPED: A skipped condition.</p> </li> <li> <p>ERRORED: An error condition.</p> </li> <li> <p>STOPPED: A stopped condition.</p> </li> </ul>
    ExecutionResult result = 7;
    // The test's start time.
    string started = 8;
    // <p>The test's status.</p> <p>Allowed values include:</p> <ul> <li> <p>PENDING: A pending status.</p> </li> <li> <p>PENDING_CONCURRENCY: A pending concurrency status.</p> </li> <li> <p>PENDING_DEVICE: A pending device status.</p> </li> <li> <p>PROCESSING: A processing status.</p> </li> <li> <p>SCHEDULING: A scheduling status.</p> </li> <li> <p>PREPARING: A preparing status.</p> </li> <li> <p>RUNNING: A running status.</p> </li> <li> <p>COMPLETED: A completed status.</p> </li> <li> <p>STOPPING: A stopping status.</p> </li> </ul>
    ExecutionStatus status = 9;
    // The test's stop time.
    string stopped = 10;
    // <p>The test's type.</p> <p>Must be one of the following values:</p> <ul> <li> <p>BUILTIN_FUZZ: The built-in fuzz type.</p> </li> <li> <p>BUILTIN_EXPLORER: For Android, an app explorer that will traverse an Android app, interacting with it and capturing screenshots at the same time.</p> </li> <li> <p>APPIUM_JAVA_JUNIT: The Appium Java JUnit type.</p> </li> <li> <p>APPIUM_JAVA_TESTNG: The Appium Java TestNG type.</p> </li> <li> <p>APPIUM_PYTHON: The Appium Python type.</p> </li> <li> <p>APPIUM_WEB_JAVA_JUNIT: The Appium Java JUnit type for Web apps.</p> </li> <li> <p>APPIUM_WEB_JAVA_TESTNG: The Appium Java TestNG type for Web apps.</p> </li> <li> <p>APPIUM_WEB_PYTHON: The Appium Python type for Web apps.</p> </li> <li> <p>CALABASH: The Calabash type.</p> </li> <li> <p>INSTRUMENTATION: The Instrumentation type.</p> </li> <li> <p>UIAUTOMATION: The uiautomation type.</p> </li> <li> <p>UIAUTOMATOR: The uiautomator type.</p> </li> <li> <p>XCTEST: The XCode test type.</p> </li> <li> <p>XCTEST_UI: The XCode UI test type.</p> </li> </ul>
    TestType type = 11;
}

message TestParameter {
    string key = 1;
    string value = 2;
}
repeated TestParameter TestParameters = 1

enum TestType {
    BUILTIN_FUZZ = 0;
    BUILTIN_EXPLORER = 1;
    APPIUM_JAVA_JUNIT = 2;
    APPIUM_JAVA_TESTNG = 3;
    APPIUM_PYTHON = 4;
    APPIUM_WEB_JAVA_JUNIT = 5;
    APPIUM_WEB_JAVA_TESTNG = 6;
    APPIUM_WEB_PYTHON = 7;
    CALABASH = 8;
    INSTRUMENTATION = 9;
    UIAUTOMATION = 10;
    UIAUTOMATOR = 11;
    XCTEST = 12;
    XCTEST_UI = 13;
}

repeated Test Tests = 1



message TrialMinutes {
    // The number of free trial minutes remaining in the account.
    number remaining = 1;
    // The total number of free trial minutes that the account started with.
    number total = 2;
}

message UniqueProblem {
    // A message about the unique problems' result.
    string message = 1;
    // Information about the problems.
    array problems = 2;
}

repeated UniqueProblem UniqueProblems = 1

message UniqueProblemsByExecutionResultMap {
    ExecutionResult key = 1;
    array value = 2;
}
repeated UniqueProblemsByExecutionResultMap UniqueProblemsByExecutionResultMap = 1

message UpdateDevicePoolRequest {
    // The Amazon Resourc Name (ARN) of the Device Farm device pool you wish to update.
    string arn = 1;
    // A description of the device pool you wish to update.
    string description = 2;
    // A string representing the name of the device pool you wish to update.
    string name = 3;
    // Represents the rules you wish to modify for the device pool. Updating rules is optional; however, if you choose to update rules for your request, the update will replace the existing rules.
    array rules = 4;
}

message UpdateDevicePoolResult {
    // The device pool you just updated.
    DevicePool devicePool = 1;
}

message UpdateNetworkProfileRequest {
    // The Amazon Resource Name (ARN) of the project that you wish to update network profile settings.
    string arn = 1;
    // The descriptoin of the network profile about which you are returning information.
    string description = 2;
    // The data throughput rate in bits per second, as an integer from 0 to 104857600.
    integer downlinkBandwidthBits = 3;
    // Delay time for all packets to destination in milliseconds as an integer from 0 to 2000.
    integer downlinkDelayMs = 4;
    // Time variation in the delay of received packets in milliseconds as an integer from 0 to 2000.
    integer downlinkJitterMs = 5;
    // Proportion of received packets that fail to arrive from 0 to 100 percent.
    integer downlinkLossPercent = 6;
    // The name of the network profile about which you are returning information.
    string name = 7;
    // The type of network profile you wish to return information about. Valid values are listed below.
    NetworkProfileType type = 8;
    // The data throughput rate in bits per second, as an integer from 0 to 104857600.
    integer uplinkBandwidthBits = 9;
    // Delay time for all packets to destination in milliseconds as an integer from 0 to 2000.
    integer uplinkDelayMs = 10;
    // Time variation in the delay of received packets in milliseconds as an integer from 0 to 2000.
    integer uplinkJitterMs = 11;
    // Proportion of transmitted packets that fail to arrive from 0 to 100 percent.
    integer uplinkLossPercent = 12;
}

message UpdateNetworkProfileResult {
    // A list of the available network profiles.
    NetworkProfile networkProfile = 1;
}

message UpdateProjectRequest {
    // The Amazon Resource Name (ARN) of the project whose name you wish to update.
    string arn = 1;
    // The number of minutes a test run in the project will execute before it times out.
    integer defaultJobTimeoutMinutes = 2;
    // A string representing the new name of the project that you are updating.
    string name = 3;
}

message UpdateProjectResult {
    // The project you wish to update.
    Project project = 1;
}

message Upload {
    // The upload's ARN.
    string arn = 1;
    // The upload's content type (for example, "application/octet-stream").
    string contentType = 2;
    // When the upload was created.
    string created = 3;
    // A message about the upload's result.
    string message = 4;
    // The upload's metadata. For example, for Android, this contains information that is parsed from the manifest and is displayed in the AWS Device Farm console after the associated app is uploaded.
    string metadata = 5;
    // The upload's file name.
    string name = 6;
    // <p>The upload's status.</p> <p>Must be one of the following values:</p> <ul> <li> <p>FAILED: A failed status.</p> </li> <li> <p>INITIALIZED: An initialized status.</p> </li> <li> <p>PROCESSING: A processing status.</p> </li> <li> <p>SUCCEEDED: A succeeded status.</p> </li> </ul>
    UploadStatus status = 7;
    // <p>The upload's type.</p> <p>Must be one of the following values:</p> <ul> <li> <p>ANDROID_APP: An Android upload.</p> </li> <li> <p>IOS_APP: An iOS upload.</p> </li> <li> <p>WEB_APP: A web appliction upload.</p> </li> <li> <p>EXTERNAL_DATA: An external data upload.</p> </li> <li> <p>APPIUM_JAVA_JUNIT_TEST_PACKAGE: An Appium Java JUnit test package upload.</p> </li> <li> <p>APPIUM_JAVA_TESTNG_TEST_PACKAGE: An Appium Java TestNG test package upload.</p> </li> <li> <p>APPIUM_PYTHON_TEST_PACKAGE: An Appium Python test package upload.</p> </li> <li> <p>APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE: An Appium Java JUnit test package upload.</p> </li> <li> <p>APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE: An Appium Java TestNG test package upload.</p> </li> <li> <p>APPIUM_WEB_PYTHON_TEST_PACKAGE: An Appium Python test package upload.</p> </li> <li> <p>CALABASH_TEST_PACKAGE: A Calabash test package upload.</p> </li> <li> <p>INSTRUMENTATION_TEST_PACKAGE: An instrumentation upload.</p> </li> <li> <p>UIAUTOMATION_TEST_PACKAGE: A uiautomation test package upload.</p> </li> <li> <p>UIAUTOMATOR_TEST_PACKAGE: A uiautomator test package upload.</p> </li> <li> <p>XCTEST_TEST_PACKAGE: An XCode test package upload.</p> </li> <li> <p>XCTEST_UI_TEST_PACKAGE: An XCode UI test package upload.</p> </li> </ul>
    UploadType type = 8;
    // The pre-signed Amazon S3 URL that was used to store a file through a corresponding PUT request.
    string url = 9;
}

enum UploadStatu {
    INITIALIZED = 0;
    PROCESSING = 1;
    SUCCEEDED = 2;
    FAILED = 3;
}

enum UploadType {
    ANDROID_APP = 0;
    IOS_APP = 1;
    WEB_APP = 2;
    EXTERNAL_DATA = 3;
    APPIUM_JAVA_JUNIT_TEST_PACKAGE = 4;
    APPIUM_JAVA_TESTNG_TEST_PACKAGE = 5;
    APPIUM_PYTHON_TEST_PACKAGE = 6;
    APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE = 7;
    APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE = 8;
    APPIUM_WEB_PYTHON_TEST_PACKAGE = 9;
    CALABASH_TEST_PACKAGE = 10;
    INSTRUMENTATION_TEST_PACKAGE = 11;
    UIAUTOMATION_TEST_PACKAGE = 12;
    UIAUTOMATOR_TEST_PACKAGE = 13;
    XCTEST_TEST_PACKAGE = 14;
    XCTEST_UI_TEST_PACKAGE = 15;
}

repeated Upload Uploads = 1

















service AWSDeviceFarmService {
    // Creates a device pool.
    rpc Post(PostRequest) returns (CreateDevicePoolResult) {
      option (google.api.http) = {
        post: "//"
        body: "body"
      };
    }
    // Creates a network profile.
    rpc Post#CreateNetworkProfile(Post#CreateNetworkProfileRequest) returns (CreateNetworkProfileResult) {
      option (google.api.http) = {
        post: "//#CreateNetworkProfile"
        body: "body"
      };
    }
    // Creates a new project.
    rpc Post#CreateProject(Post#CreateProjectRequest) returns (CreateProjectResult) {
      option (google.api.http) = {
        post: "//#CreateProject"
        body: "body"
      };
    }
    // Specifies and starts a remote access session.
    rpc Post#CreateRemoteAccessSession(Post#CreateRemoteAccessSessionRequest) returns (CreateRemoteAccessSessionResult) {
      option (google.api.http) = {
        post: "//#CreateRemoteAccessSession"
        body: "body"
      };
    }
    // Uploads an app or test scripts.
    rpc Post#CreateUpload(Post#CreateUploadRequest) returns (CreateUploadResult) {
      option (google.api.http) = {
        post: "//#CreateUpload"
        body: "body"
      };
    }
    // Deletes a device pool given the pool ARN. Does not allow deletion of curated pools owned by the system.
    rpc Post#DeleteDevicePool(Post#DeleteDevicePoolRequest) returns (DeleteDevicePoolResult) {
      option (google.api.http) = {
        post: "//#DeleteDevicePool"
        body: "body"
      };
    }
    // Deletes a network profile.
    rpc Post#DeleteNetworkProfile(Post#DeleteNetworkProfileRequest) returns (DeleteNetworkProfileResult) {
      option (google.api.http) = {
        post: "//#DeleteNetworkProfile"
        body: "body"
      };
    }
    // <p>Deletes an AWS Device Farm project, given the project ARN.</p> <p> <b>Note</b> Deleting this resource does not stop an in-progress run.</p>
    rpc Post#DeleteProject(Post#DeleteProjectRequest) returns (DeleteProjectResult) {
      option (google.api.http) = {
        post: "//#DeleteProject"
        body: "body"
      };
    }
    // Deletes a completed remote access session and its results.
    rpc Post#DeleteRemoteAccessSession(Post#DeleteRemoteAccessSessionRequest) returns (DeleteRemoteAccessSessionResult) {
      option (google.api.http) = {
        post: "//#DeleteRemoteAccessSession"
        body: "body"
      };
    }
    // <p>Deletes the run, given the run ARN.</p> <p> <b>Note</b> Deleting this resource does not stop an in-progress run.</p>
    rpc Post#DeleteRun(Post#DeleteRunRequest) returns (DeleteRunResult) {
      option (google.api.http) = {
        post: "//#DeleteRun"
        body: "body"
      };
    }
    // Deletes an upload given the upload ARN.
    rpc Post#DeleteUpload(Post#DeleteUploadRequest) returns (DeleteUploadResult) {
      option (google.api.http) = {
        post: "//#DeleteUpload"
        body: "body"
      };
    }
    // Returns the number of unmetered iOS and/or unmetered Android devices that have been purchased by the account.
    rpc Post#GetAccountSettings(Post#GetAccountSettingsRequest) returns (GetAccountSettingsResult) {
      option (google.api.http) = {
        post: "//#GetAccountSettings"
        body: "body"
      };
    }
    // Gets information about a unique device type.
    rpc Post#GetDevice(Post#GetDeviceRequest) returns (GetDeviceResult) {
      option (google.api.http) = {
        post: "//#GetDevice"
        body: "body"
      };
    }
    // Gets information about a device pool.
    rpc Post#GetDevicePool(Post#GetDevicePoolRequest) returns (GetDevicePoolResult) {
      option (google.api.http) = {
        post: "//#GetDevicePool"
        body: "body"
      };
    }
    // Gets information about compatibility with a device pool.
    rpc Post#GetDevicePoolCompatibility(Post#GetDevicePoolCompatibilityRequest) returns (GetDevicePoolCompatibilityResult) {
      option (google.api.http) = {
        post: "//#GetDevicePoolCompatibility"
        body: "body"
      };
    }
    // Gets information about a job.
    rpc Post#GetJob(Post#GetJobRequest) returns (GetJobResult) {
      option (google.api.http) = {
        post: "//#GetJob"
        body: "body"
      };
    }
    // Returns information about a network profile.
    rpc Post#GetNetworkProfile(Post#GetNetworkProfileRequest) returns (GetNetworkProfileResult) {
      option (google.api.http) = {
        post: "//#GetNetworkProfile"
        body: "body"
      };
    }
    // Gets the current status and future status of all offerings purchased by an AWS account. The response indicates how many offerings are currently available and the offerings that will be available in the next period. The API returns a <code>NotEligible</code> error if the user is not permitted to invoke the operation. Please contact <a href="mailto:aws-devicefarm-support@amazon.com">aws-devicefarm-support@amazon.com</a> if you believe that you should be able to invoke this operation.
    rpc Post#GetOfferingStatus(Post#GetOfferingStatusRequest) returns (GetOfferingStatusResult) {
      option (google.api.http) = {
        post: "//#GetOfferingStatus"
        body: "body"
      };
    }
    // Gets information about a project.
    rpc Post#GetProject(Post#GetProjectRequest) returns (GetProjectResult) {
      option (google.api.http) = {
        post: "//#GetProject"
        body: "body"
      };
    }
    // Returns a link to a currently running remote access session.
    rpc Post#GetRemoteAccessSession(Post#GetRemoteAccessSessionRequest) returns (GetRemoteAccessSessionResult) {
      option (google.api.http) = {
        post: "//#GetRemoteAccessSession"
        body: "body"
      };
    }
    // Gets information about a run.
    rpc Post#GetRun(Post#GetRunRequest) returns (GetRunResult) {
      option (google.api.http) = {
        post: "//#GetRun"
        body: "body"
      };
    }
    // Gets information about a suite.
    rpc Post#GetSuite(Post#GetSuiteRequest) returns (GetSuiteResult) {
      option (google.api.http) = {
        post: "//#GetSuite"
        body: "body"
      };
    }
    // Gets information about a test.
    rpc Post#GetTest(Post#GetTestRequest) returns (GetTestResult) {
      option (google.api.http) = {
        post: "//#GetTest"
        body: "body"
      };
    }
    // Gets information about an upload.
    rpc Post#GetUpload(Post#GetUploadRequest) returns (GetUploadResult) {
      option (google.api.http) = {
        post: "//#GetUpload"
        body: "body"
      };
    }
    // Installs an application to the device in a remote access session. For Android applications, the file must be in .apk format. For iOS applications, the file must be in .ipa format.
    rpc Post#InstallToRemoteAccessSession(Post#InstallToRemoteAccessSessionRequest) returns (InstallToRemoteAccessSessionResult) {
      option (google.api.http) = {
        post: "//#InstallToRemoteAccessSession"
        body: "body"
      };
    }
    // Gets information about artifacts.
    rpc Post#ListArtifacts(Post#ListArtifactsRequest) returns (ListArtifactsResult) {
      option (google.api.http) = {
        post: "//#ListArtifacts"
        body: "body"
      };
    }
    // Gets information about device pools.
    rpc Post#ListDevicePools(Post#ListDevicePoolsRequest) returns (ListDevicePoolsResult) {
      option (google.api.http) = {
        post: "//#ListDevicePools"
        body: "body"
      };
    }
    // Gets information about unique device types.
    rpc Post#ListDevices(Post#ListDevicesRequest) returns (ListDevicesResult) {
      option (google.api.http) = {
        post: "//#ListDevices"
        body: "body"
      };
    }
    // Gets information about jobs.
    rpc Post#ListJobs(Post#ListJobsRequest) returns (ListJobsResult) {
      option (google.api.http) = {
        post: "//#ListJobs"
        body: "body"
      };
    }
    // Returns the list of available network profiles.
    rpc Post#ListNetworkProfiles(Post#ListNetworkProfilesRequest) returns (ListNetworkProfilesResult) {
      option (google.api.http) = {
        post: "//#ListNetworkProfiles"
        body: "body"
      };
    }
    // Returns a list of offering promotions. Each offering promotion record contains the ID and description of the promotion. The API returns a <code>NotEligible</code> error if the caller is not permitted to invoke the operation. Contact <a href="mailto:aws-devicefarm-support@amazon.com">aws-devicefarm-support@amazon.com</a> if you believe that you should be able to invoke this operation.
    rpc Post#ListOfferingPromotions(Post#ListOfferingPromotionsRequest) returns (ListOfferingPromotionsResult) {
      option (google.api.http) = {
        post: "//#ListOfferingPromotions"
        body: "body"
      };
    }
    // Returns a list of all historical purchases, renewals, and system renewal transactions for an AWS account. The list is paginated and ordered by a descending timestamp (most recent transactions are first). The API returns a <code>NotEligible</code> error if the user is not permitted to invoke the operation. Please contact <a href="mailto:aws-devicefarm-support@amazon.com">aws-devicefarm-support@amazon.com</a> if you believe that you should be able to invoke this operation.
    rpc Post#ListOfferingTransactions(Post#ListOfferingTransactionsRequest) returns (ListOfferingTransactionsResult) {
      option (google.api.http) = {
        post: "//#ListOfferingTransactions"
        body: "body"
      };
    }
    // Returns a list of products or offerings that the user can manage through the API. Each offering record indicates the recurring price per unit and the frequency for that offering. The API returns a <code>NotEligible</code> error if the user is not permitted to invoke the operation. Please contact <a href="mailto:aws-devicefarm-support@amazon.com">aws-devicefarm-support@amazon.com</a> if you believe that you should be able to invoke this operation.
    rpc Post#ListOfferings(Post#ListOfferingsRequest) returns (ListOfferingsResult) {
      option (google.api.http) = {
        post: "//#ListOfferings"
        body: "body"
      };
    }
    // Gets information about projects.
    rpc Post#ListProjects(Post#ListProjectsRequest) returns (ListProjectsResult) {
      option (google.api.http) = {
        post: "//#ListProjects"
        body: "body"
      };
    }
    // Returns a list of all currently running remote access sessions.
    rpc Post#ListRemoteAccessSessions(Post#ListRemoteAccessSessionsRequest) returns (ListRemoteAccessSessionsResult) {
      option (google.api.http) = {
        post: "//#ListRemoteAccessSessions"
        body: "body"
      };
    }
    // Gets information about runs, given an AWS Device Farm project ARN.
    rpc Post#ListRuns(Post#ListRunsRequest) returns (ListRunsResult) {
      option (google.api.http) = {
        post: "//#ListRuns"
        body: "body"
      };
    }
    // Gets information about samples, given an AWS Device Farm project ARN
    rpc Post#ListSamples(Post#ListSamplesRequest) returns (ListSamplesResult) {
      option (google.api.http) = {
        post: "//#ListSamples"
        body: "body"
      };
    }
    // Gets information about suites.
    rpc Post#ListSuites(Post#ListSuitesRequest) returns (ListSuitesResult) {
      option (google.api.http) = {
        post: "//#ListSuites"
        body: "body"
      };
    }
    // Gets information about tests.
    rpc Post#ListTests(Post#ListTestsRequest) returns (ListTestsResult) {
      option (google.api.http) = {
        post: "//#ListTests"
        body: "body"
      };
    }
    // Gets information about unique problems.
    rpc Post#ListUniqueProblems(Post#ListUniqueProblemsRequest) returns (ListUniqueProblemsResult) {
      option (google.api.http) = {
        post: "//#ListUniqueProblems"
        body: "body"
      };
    }
    // Gets information about uploads, given an AWS Device Farm project ARN.
    rpc Post#ListUploads(Post#ListUploadsRequest) returns (ListUploadsResult) {
      option (google.api.http) = {
        post: "//#ListUploads"
        body: "body"
      };
    }
    // Immediately purchases offerings for an AWS account. Offerings renew with the latest total purchased quantity for an offering, unless the renewal was overridden. The API returns a <code>NotEligible</code> error if the user is not permitted to invoke the operation. Please contact <a href="mailto:aws-devicefarm-support@amazon.com">aws-devicefarm-support@amazon.com</a> if you believe that you should be able to invoke this operation.
    rpc Post#PurchaseOffering(Post#PurchaseOfferingRequest) returns (PurchaseOfferingResult) {
      option (google.api.http) = {
        post: "//#PurchaseOffering"
        body: "body"
      };
    }
    // Explicitly sets the quantity of devices to renew for an offering, starting from the <code>effectiveDate</code> of the next period. The API returns a <code>NotEligible</code> error if the user is not permitted to invoke the operation. Please contact <a href="mailto:aws-devicefarm-support@amazon.com">aws-devicefarm-support@amazon.com</a> if you believe that you should be able to invoke this operation.
    rpc Post#RenewOffering(Post#RenewOfferingRequest) returns (RenewOfferingResult) {
      option (google.api.http) = {
        post: "//#RenewOffering"
        body: "body"
      };
    }
    // Schedules a run.
    rpc Post#ScheduleRun(Post#ScheduleRunRequest) returns (ScheduleRunResult) {
      option (google.api.http) = {
        post: "//#ScheduleRun"
        body: "body"
      };
    }
    // Ends a specified remote access session.
    rpc Post#StopRemoteAccessSession(Post#StopRemoteAccessSessionRequest) returns (StopRemoteAccessSessionResult) {
      option (google.api.http) = {
        post: "//#StopRemoteAccessSession"
        body: "body"
      };
    }
    // Initiates a stop request for the current test run. AWS Device Farm will immediately stop the run on devices where tests have not started executing, and you will not be billed for these devices. On devices where tests have started executing, Setup Suite and Teardown Suite tests will run to completion before stopping execution on those devices. You will be billed for Setup, Teardown, and any tests that were in progress or already completed.
    rpc Post#StopRun(Post#StopRunRequest) returns (StopRunResult) {
      option (google.api.http) = {
        post: "//#StopRun"
        body: "body"
      };
    }
    // Modifies the name, description, and rules in a device pool given the attributes and the pool ARN. Rule updates are all-or-nothing, meaning they can only be updated as a whole (or not at all).
    rpc Post#UpdateDevicePool(Post#UpdateDevicePoolRequest) returns (UpdateDevicePoolResult) {
      option (google.api.http) = {
        post: "//#UpdateDevicePool"
        body: "body"
      };
    }
    // Updates the network profile with specific settings.
    rpc Post#UpdateNetworkProfile(Post#UpdateNetworkProfileRequest) returns (UpdateNetworkProfileResult) {
      option (google.api.http) = {
        post: "//#UpdateNetworkProfile"
        body: "body"
      };
    }
    // Modifies the specified project name, given the project ARN and a new name.
    rpc Post#UpdateProject(Post#UpdateProjectRequest) returns (UpdateProjectResult) {
      option (google.api.http) = {
        post: "//#UpdateProject"
        body: "body"
      };
    }
}

syntax = "proto3";

import "google/api/annotations.proto";

package amazondynamodbaccelerator(dax);

message PostRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateClusterRequest body = 10;
}

message Post#CreateParameterGroupRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateParameterGroupRequest body = 10;
}

message Post#CreateSubnetGroupRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateSubnetGroupRequest body = 10;
}

message Post#DecreaseReplicationFactorRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DecreaseReplicationFactorRequest body = 10;
}

message Post#DeleteClusterRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteClusterRequest body = 10;
}

message Post#DeleteParameterGroupRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteParameterGroupRequest body = 10;
}

message Post#DeleteSubnetGroupRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteSubnetGroupRequest body = 10;
}

message Post#DescribeClustersRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeClustersRequest body = 10;
}

message Post#DescribeDefaultParametersRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeDefaultParametersRequest body = 10;
}

message Post#DescribeEventsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeEventsRequest body = 10;
}

message Post#DescribeParameterGroupsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeParameterGroupsRequest body = 10;
}

message Post#DescribeParametersRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeParametersRequest body = 10;
}

message Post#DescribeSubnetGroupsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeSubnetGroupsRequest body = 10;
}

message Post#IncreaseReplicationFactorRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    IncreaseReplicationFactorRequest body = 10;
}

message Post#ListTagsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListTagsRequest body = 10;
}

message Post#RebootNodeRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RebootNodeRequest body = 10;
}

message Post#TagResourceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    TagResourceRequest body = 10;
}

message Post#UntagResourceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UntagResourceRequest body = 10;
}

message Post#UpdateClusterRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateClusterRequest body = 10;
}

message Post#UpdateParameterGroupRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateParameterGroupRequest body = 10;
}

message Post#UpdateSubnetGroupRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateSubnetGroupRequest body = 10;
}





repeated string AvailabilityZoneList = 1



enum ChangeType {
    IMMEDIATE = 0;
    REQUIRES_REBOOT = 1;
}

message Cluster {
    // The number of nodes in the cluster that are active (i.e., capable of serving requests).
    integer ActiveNodes = 1;
    // The Amazon Resource Name (ARN) that uniquely identifies the cluster.
    string ClusterArn = 2;
    // The configuration endpoint for this DAX cluster, consisting of a DNS name and a port number. Client applications can specify this endpoint, rather than an individual node endpoint, and allow the DAX client software to intelligently route requests and responses to nodes in the DAX cluster.
    Endpoint ClusterDiscoveryEndpoint = 3;
    // The name of the DAX cluster.
    string ClusterName = 4;
    // The description of the cluster.
    string Description = 5;
    // A valid Amazon Resource Name (ARN) that identifies an IAM role. At runtime, DAX will assume this role and use the role's permissions to access DynamoDB on your behalf.
    string IamRoleArn = 6;
    // A list of nodes to be removed from the cluster.
    array NodeIdsToRemove = 7;
    // The node type for the nodes in the cluster. (All nodes in a DAX cluster are of the same type.)
    string NodeType = 8;
    // A list of nodes that are currently in the cluster.
    array Nodes = 9;
    // Describes a notification topic and its status. Notification topics are used for publishing DAX events to subscribers using Amazon Simple Notification Service (SNS).
    NotificationConfiguration NotificationConfiguration = 10;
    // The parameter group being used by nodes in the cluster.
    ParameterGroupStatus ParameterGroup = 11;
    // A range of time when maintenance of DAX cluster software will be performed. For example: <code>sun:01:00-sun:09:00</code>. Cluster maintenance normally takes less than 30 minutes, and is performed automatically within the maintenance window.
    string PreferredMaintenanceWindow = 12;
    // A list of security groups, and the status of each, for the nodes in the cluster.
    array SecurityGroups = 13;
    // The current status of the cluster.
    string Status = 14;
    // The subnet group where the DAX cluster is running.
    string SubnetGroup = 15;
    // The total number of nodes in the cluster.
    integer TotalNodes = 16;
}

message ClusterAlreadyExistsFault {
}

repeated Cluster ClusterList = 1

repeated string ClusterNameList = 1

message ClusterNotFoundFault {
}

message ClusterQuotaForCustomerExceededFault {
}

message CreateClusterRequest {
    // The Availability Zones (AZs) in which the cluster nodes will be created. All nodes belonging to the cluster are placed in these Availability Zones. Use this parameter if you want to distribute the nodes across multiple AZs.
    array AvailabilityZones = 1;
    // <p>The cluster identifier. This parameter is stored as a lowercase string.</p> <p> <b>Constraints:</b> </p> <ul> <li> <p>A name must contain from 1 to 20 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
    string ClusterName = 2;
    // A description of the cluster.
    string Description = 3;
    // A valid Amazon Resource Name (ARN) that identifies an IAM role. At runtime, DAX will assume this role and use the role's permissions to access DynamoDB on your behalf.
    string IamRoleArn = 4;
    // The compute and memory capacity of the nodes in the cluster.
    string NodeType = 5;
    // <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications will be sent.</p> <note> <p>The Amazon SNS topic owner must be same as the DAX cluster owner.</p> </note>
    string NotificationTopicArn = 6;
    // The parameter group to be associated with the DAX cluster.
    string ParameterGroupName = 7;
    // <p>Specifies the weekly time range during which maintenance on the DAX cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:05:00-sun:09:00</code> </p> <note> <p>If you don't specify a preferred maintenance window when you create or modify a cache cluster, DAX assigns a 60-minute maintenance window on a randomly selected day of the week.</p> </note>
    string PreferredMaintenanceWindow = 8;
    // <p>The number of nodes in the DAX cluster. A replication factor of 1 will create a single-node cluster, without any read replicas. For additional fault tolerance, you can create a multiple node cluster with one or more read replicas. To do this, set <i>ReplicationFactor</i> to 2 or more.</p> <note> <p>AWS recommends that you have at least two read replicas per cluster.</p> </note>
    integer ReplicationFactor = 9;
    // <p>A list of security group IDs to be assigned to each node in the DAX cluster. (Each of the security group ID is system-generated.)</p> <p>If this parameter is not specified, DAX assigns the default VPC security group to each node.</p>
    array SecurityGroupIds = 10;
    // <p>The name of the subnet group to be used for the replication group.</p> <important> <p>DAX clusters can only run in an Amazon VPC environment. All of the subnets that you specify in a subnet group must exist in the same VPC.</p> </important>
    string SubnetGroupName = 11;
    // A set of tags to associate with the DAX cluster.
    array Tags = 12;
}

message CreateClusterResponse {
    // A description of the DAX cluster that you have created.
    Cluster Cluster = 1;
}

message CreateParameterGroupRequest {
    // A description of the parameter group.
    string Description = 1;
    // The name of the parameter group to apply to all of the clusters in this replication group.
    string ParameterGroupName = 2;
}

message CreateParameterGroupResponse {
    // Represents the output of a <i>CreateParameterGroup</i> action.
    ParameterGroup ParameterGroup = 1;
}

message CreateSubnetGroupRequest {
    // A description for the subnet group
    string Description = 1;
    // A name for the subnet group. This value is stored as a lowercase string.
    string SubnetGroupName = 2;
    // A list of VPC subnet IDs for the subnet group.
    array SubnetIds = 3;
}

message CreateSubnetGroupResponse {
    // Represents the output of a <i>CreateSubnetGroup</i> operation.
    SubnetGroup SubnetGroup = 1;
}

message DecreaseReplicationFactorRequest {
    // The Availability Zone(s) from which to remove nodes.
    array AvailabilityZones = 1;
    // The name of the DAX cluster from which you want to remove nodes.
    string ClusterName = 2;
    // The new number of nodes for the DAX cluster.
    integer NewReplicationFactor = 3;
    // The unique identifiers of the nodes to be removed from the cluster.
    array NodeIdsToRemove = 4;
}

message DecreaseReplicationFactorResponse {
    // A description of the DAX cluster, after you have decreased its replication factor.
    Cluster Cluster = 1;
}

message DeleteClusterRequest {
    // The name of the cluster to be deleted.
    string ClusterName = 1;
}

message DeleteClusterResponse {
    // A description of the DAX cluster that is being deleted.
    Cluster Cluster = 1;
}

message DeleteParameterGroupRequest {
    // The name of the parameter group to delete.
    string ParameterGroupName = 1;
}

message DeleteParameterGroupResponse {
    // A user-specified message for this action (i.e., a reason for deleting the parameter group).
    string DeletionMessage = 1;
}

message DeleteSubnetGroupRequest {
    // The name of the subnet group to delete.
    string SubnetGroupName = 1;
}

message DeleteSubnetGroupResponse {
    // A user-specified message for this action (i.e., a reason for deleting the subnet group).
    string DeletionMessage = 1;
}

message DescribeClustersRequest {
    // The names of the DAX clusters being described.
    array ClusterNames = 1;
    // <p>The maximum number of results to include in the response. If more results exist than the specified <code>MaxResults</code> value, a token is included in the response so that the remaining results can be retrieved.</p> <p>The value for <code>MaxResults</code> must be between 20 and 100.</p>
    integer MaxResults = 2;
    // An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by <code>MaxResults</code>.
    string NextToken = 3;
}

message DescribeClustersResponse {
    // The descriptions of your DAX clusters, in response to a <i>DescribeClusters</i> request.
    array Clusters = 1;
    // Provides an identifier to allow retrieval of paginated results.
    string NextToken = 2;
}

message DescribeDefaultParametersRequest {
    // <p>The maximum number of results to include in the response. If more results exist than the specified <code>MaxResults</code> value, a token is included in the response so that the remaining results can be retrieved.</p> <p>The value for <code>MaxResults</code> must be between 20 and 100.</p>
    integer MaxResults = 1;
    // An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by <code>MaxResults</code>.
    string NextToken = 2;
}

message DescribeDefaultParametersResponse {
    // Provides an identifier to allow retrieval of paginated results.
    string NextToken = 1;
    // A list of parameters. Each element in the list represents one parameter.
    array Parameters = 2;
}

message DescribeEventsRequest {
    // The number of minutes' worth of events to retrieve.
    integer Duration = 1;
    // The end of the time interval for which to retrieve events, specified in ISO 8601 format.
    string EndTime = 2;
    // <p>The maximum number of results to include in the response. If more results exist than the specified <code>MaxResults</code> value, a token is included in the response so that the remaining results can be retrieved.</p> <p>The value for <code>MaxResults</code> must be between 20 and 100.</p>
    integer MaxResults = 3;
    // An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by <code>MaxResults</code>.
    string NextToken = 4;
    // The identifier of the event source for which events will be returned. If not specified, then all sources are included in the response.
    string SourceName = 5;
    // The event source to retrieve events for. If no value is specified, all events are returned.
    SourceType SourceType = 6;
    // The beginning of the time interval to retrieve events for, specified in ISO 8601 format.
    string StartTime = 7;
}

message DescribeEventsResponse {
    // An array of events. Each element in the array represents one event.
    array Events = 1;
    // Provides an identifier to allow retrieval of paginated results.
    string NextToken = 2;
}

message DescribeParameterGroupsRequest {
    // <p>The maximum number of results to include in the response. If more results exist than the specified <code>MaxResults</code> value, a token is included in the response so that the remaining results can be retrieved.</p> <p>The value for <code>MaxResults</code> must be between 20 and 100.</p>
    integer MaxResults = 1;
    // An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by <code>MaxResults</code>.
    string NextToken = 2;
    // The names of the parameter groups.
    array ParameterGroupNames = 3;
}

message DescribeParameterGroupsResponse {
    // Provides an identifier to allow retrieval of paginated results.
    string NextToken = 1;
    // An array of parameter groups. Each element in the array represents one parameter group.
    array ParameterGroups = 2;
}

message DescribeParametersRequest {
    // <p>The maximum number of results to include in the response. If more results exist than the specified <code>MaxResults</code> value, a token is included in the response so that the remaining results can be retrieved.</p> <p>The value for <code>MaxResults</code> must be between 20 and 100.</p>
    integer MaxResults = 1;
    // An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by <code>MaxResults</code>.
    string NextToken = 2;
    // The name of the parameter group.
    string ParameterGroupName = 3;
    // How the parameter is defined. For example, <code>system</code> denotes a system-defined parameter.
    string Source = 4;
}

message DescribeParametersResponse {
    // Provides an identifier to allow retrieval of paginated results.
    string NextToken = 1;
    // A list of parameters within a parameter group. Each element in the list represents one parameter.
    array Parameters = 2;
}

message DescribeSubnetGroupsRequest {
    // <p>The maximum number of results to include in the response. If more results exist than the specified <code>MaxResults</code> value, a token is included in the response so that the remaining results can be retrieved.</p> <p>The value for <code>MaxResults</code> must be between 20 and 100.</p>
    integer MaxResults = 1;
    // An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by <code>MaxResults</code>.
    string NextToken = 2;
    // The name of the subnet group.
    array SubnetGroupNames = 3;
}

message DescribeSubnetGroupsResponse {
    // Provides an identifier to allow retrieval of paginated results.
    string NextToken = 1;
    // An array of subnet groups. Each element in the array represents a single subnet group.
    array SubnetGroups = 2;
}

message Endpoint {
    // The DNS hostname of the endpoint.
    string Address = 1;
    // The port number that applications should use to connect to the endpoint.
    integer Port = 2;
}

message Event {
    // The date and time when the event occurred.
    string Date = 1;
    // A user-defined message associated with the event.
    string Message = 2;
    // The source of the event. For example, if the event occurred at the node level, the source would be the node ID.
    string SourceName = 3;
    // Specifies the origin of this event - a cluster, a parameter group, a node ID, etc.
    SourceType SourceType = 4;
}

repeated Event EventList = 1

message IncreaseReplicationFactorRequest {
    // The Availability Zones (AZs) in which the cluster nodes will be created. All nodes belonging to the cluster are placed in these Availability Zones. Use this parameter if you want to distribute the nodes across multiple AZs.
    array AvailabilityZones = 1;
    // The name of the DAX cluster that will receive additional nodes.
    string ClusterName = 2;
    // The new number of nodes for the DAX cluster.
    integer NewReplicationFactor = 3;
}

message IncreaseReplicationFactorResponse {
    // A description of the DAX cluster. with its new replication factor.
    Cluster Cluster = 1;
}

message InsufficientClusterCapacityFault {
}

message InvalidARNFault {
}

message InvalidClusterStateFault {
}

message InvalidParameterCombinationException {
    string message = 1;
}

message InvalidParameterGroupStateFault {
}

message InvalidParameterValueException {
    string message = 1;
}

message InvalidSubnet {
}

message InvalidVPCNetworkStateFault {
}

enum IsModifiable {
    TRUE = 0;
    FALSE = 1;
    CONDITIONAL = 2;
}

repeated string KeyList = 1

message ListTagsRequest {
    // An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token.
    string NextToken = 1;
    // The name of the DAX resource to which the tags belong.
    string ResourceName = 2;
}

message ListTagsResponse {
    // If this value is present, there are additional results to be displayed. To retrieve them, call <code>ListTags</code> again, with <code>NextToken</code> set to this value.
    string NextToken = 1;
    // A list of tags currently associated with the DAX cluster.
    array Tags = 2;
}

message Node {
    // The Availability Zone (AZ) in which the node has been deployed.
    string AvailabilityZone = 1;
    // The endpoint for the node, consisting of a DNS name and a port number. Client applications can connect directly to a node endpoint, if desired (as an alternative to allowing DAX client software to intelligently route requests and responses to nodes in the DAX cluster.
    Endpoint Endpoint = 2;
    // The date and time (in UNIX epoch format) when the node was launched.
    string NodeCreateTime = 3;
    // A system-generated identifier for the node.
    string NodeId = 4;
    // The current status of the node. For example: <code>available</code>.
    string NodeStatus = 5;
    // The status of the parameter group associated with this node. For example, <code>in-sync</code>.
    string ParameterGroupStatus = 6;
}

repeated string NodeIdentifierList = 1

repeated Node NodeList = 1

message NodeNotFoundFault {
}

message NodeQuotaForClusterExceededFault {
}

message NodeQuotaForCustomerExceededFault {
}

message NodeTypeSpecificValue {
    // A node type to which the parameter value applies.
    string NodeType = 1;
    // The parameter value for this node type.
    string Value = 2;
}

repeated NodeTypeSpecificValue NodeTypeSpecificValueList = 1

message NotificationConfiguration {
    // The Amazon Resource Name (ARN) that identifies the topic.
    string TopicArn = 1;
    // The current state of the topic.
    string TopicStatus = 2;
}

message Parameter {
    // A range of values within which the parameter can be set.
    string AllowedValues = 1;
    // The conditions under which changes to this parameter can be applied. For example, <code>requires-reboot</code> indicates that a new value for this parameter will only take effect if a node is rebooted.
    ChangeType ChangeType = 2;
    // The data type of the parameter. For example, <code>integer</code>:
    string DataType = 3;
    // A description of the parameter
    string Description = 4;
    // Whether the customer is allowed to modify the parameter.
    IsModifiable IsModifiable = 5;
    // A list of node types, and specific parameter values for each node.
    array NodeTypeSpecificValues = 6;
    // The name of the parameter.
    string ParameterName = 7;
    // Determines whether the parameter can be applied to any nodes, or only nodes of a particular type.
    ParameterType ParameterType = 8;
    // The value for the parameter.
    string ParameterValue = 9;
    // How the parameter is defined. For example, <code>system</code> denotes a system-defined parameter.
    string Source = 10;
}

message ParameterGroup {
    // A description of the parameter group.
    string Description = 1;
    // The name of the parameter group.
    string ParameterGroupName = 2;
}

message ParameterGroupAlreadyExistsFault {
}

repeated ParameterGroup ParameterGroupList = 1

repeated string ParameterGroupNameList = 1

message ParameterGroupNotFoundFault {
}

message ParameterGroupQuotaExceededFault {
}

message ParameterGroupStatus {
    // The node IDs of one or more nodes to be rebooted.
    array NodeIdsToReboot = 1;
    // The status of parameter updates.
    string ParameterApplyStatus = 2;
    // The name of the parameter group.
    string ParameterGroupName = 3;
}

repeated Parameter ParameterList = 1

message ParameterNameValue {
    // The name of the parameter.
    string ParameterName = 1;
    // The value of the parameter.
    string ParameterValue = 2;
}

repeated ParameterNameValue ParameterNameValueList = 1

enum ParameterType {
    DEFAULT = 0;
    NODE_TYPE_SPECIFIC = 1;
}

message RebootNodeRequest {
    // The name of the DAX cluster containing the node to be rebooted.
    string ClusterName = 1;
    // The system-assigned ID of the node to be rebooted.
    string NodeId = 2;
}

message RebootNodeResponse {
    // A description of the DAX cluster after a node has been rebooted.
    Cluster Cluster = 1;
}

repeated string SecurityGroupIdentifierList = 1

message SecurityGroupMembership {
    // The unique ID for this security group.
    string SecurityGroupIdentifier = 1;
    // The status of this security group.
    string Status = 2;
}

repeated SecurityGroupMembership SecurityGroupMembershipList = 1

enum SourceType {
    CLUSTER = 0;
    PARAMETER_GROUP = 1;
    SUBNET_GROUP = 2;
}

message Subnet {
    // The Availability Zone (AZ) for subnet subnet.
    string SubnetAvailabilityZone = 1;
    // The system-assigned identifier for the subnet.
    string SubnetIdentifier = 2;
}

message SubnetGroup {
    // The description of the subnet group.
    string Description = 1;
    // The name of the subnet group.
    string SubnetGroupName = 2;
    // A list of subnets associated with the subnet group.
    array Subnets = 3;
    // The Amazon Virtual Private Cloud identifier (VPC ID) of the subnet group.
    string VpcId = 4;
}

message SubnetGroupAlreadyExistsFault {
}

message SubnetGroupInUseFault {
}

repeated SubnetGroup SubnetGroupList = 1

repeated string SubnetGroupNameList = 1

message SubnetGroupNotFoundFault {
}

message SubnetGroupQuotaExceededFault {
}

repeated string SubnetIdentifierList = 1

message SubnetInUse {
}

repeated Subnet SubnetList = 1

message SubnetQuotaExceededFault {
}

message Tag {
    // The key for the tag. Tag keys are case sensitive. Every DAX cluster can only have one tag with the same key. If you try to add an existing tag (same key), the existing tag value will be updated to the new value.
    string Key = 1;
    // The value of the tag. Tag values are case-sensitive and can be null.
    string Value = 2;
}

repeated Tag TagList = 1

message TagNotFoundFault {
}

message TagQuotaPerResourceExceeded {
}

message TagResourceRequest {
    // The name of the DAX resource to which tags should be added.
    string ResourceName = 1;
    // The tags to be assigned to the DAX resource.
    array Tags = 2;
}

message TagResourceResponse {
    // The list of tags that are associated with the DAX resource.
    array Tags = 1;
}

message UntagResourceRequest {
    // The name of the DAX resource from which the tags should be removed.
    string ResourceName = 1;
    // A list of tag keys. If the DAX cluster has any tags with these keys, then the tags are removed from the cluster.
    array TagKeys = 2;
}

message UntagResourceResponse {
    // The tag keys that have been removed from the cluster.
    array Tags = 1;
}

message UpdateClusterRequest {
    // The name of the DAX cluster to be modified.
    string ClusterName = 1;
    // A description of the changes being made to the cluster.
    string Description = 2;
    // The Amazon Resource Name (ARN) that identifies the topic.
    string NotificationTopicArn = 3;
    // The current state of the topic.
    string NotificationTopicStatus = 4;
    // The name of a parameter group for this cluster.
    string ParameterGroupName = 5;
    // A range of time when maintenance of DAX cluster software will be performed. For example: <code>sun:01:00-sun:09:00</code>. Cluster maintenance normally takes less than 30 minutes, and is performed automatically within the maintenance window.
    string PreferredMaintenanceWindow = 6;
    // A list of user-specified security group IDs to be assigned to each node in the DAX cluster. If this parameter is not specified, DAX assigns the default VPC security group to each node.
    array SecurityGroupIds = 7;
}

message UpdateClusterResponse {
    // A description of the DAX cluster, after it has been modified.
    Cluster Cluster = 1;
}

message UpdateParameterGroupRequest {
    // The name of the parameter group.
    string ParameterGroupName = 1;
    // An array of name-value pairs for the parameters in the group. Each element in the array represents a single parameter.
    array ParameterNameValues = 2;
}

message UpdateParameterGroupResponse {
    // The parameter group that has been modified.
    ParameterGroup ParameterGroup = 1;
}

message UpdateSubnetGroupRequest {
    // A description of the subnet group.
    string Description = 1;
    // The name of the subnet group.
    string SubnetGroupName = 2;
    // A list of subnet IDs in the subnet group.
    array SubnetIds = 3;
}

message UpdateSubnetGroupResponse {
    // The subnet group that has been modified.
    SubnetGroup SubnetGroup = 1;
}

service AmazonDynamoDBAccelerator(DAX)Service {
    // Creates a DAX cluster. All nodes in the cluster run the same DAX caching software.
    rpc Post(PostRequest) returns (CreateClusterResponse) {
      option (google.api.http) = {
        post: "//"
        body: "body"
      };
    }
    // Creates a new parameter group. A parameter group is a collection of parameters that you apply to all of the nodes in a DAX cluster.
    rpc Post#CreateParameterGroup(Post#CreateParameterGroupRequest) returns (CreateParameterGroupResponse) {
      option (google.api.http) = {
        post: "//#CreateParameterGroup"
        body: "body"
      };
    }
    // Creates a new subnet group.
    rpc Post#CreateSubnetGroup(Post#CreateSubnetGroupRequest) returns (CreateSubnetGroupResponse) {
      option (google.api.http) = {
        post: "//#CreateSubnetGroup"
        body: "body"
      };
    }
    // <p>Removes one or more nodes from a DAX cluster.</p> <note> <p>You cannot use <code>DecreaseReplicationFactor</code> to remove the last node in a DAX cluster. If you need to do this, use <code>DeleteCluster</code> instead.</p> </note>
    rpc Post#DecreaseReplicationFactor(Post#DecreaseReplicationFactorRequest) returns (DecreaseReplicationFactorResponse) {
      option (google.api.http) = {
        post: "//#DecreaseReplicationFactor"
        body: "body"
      };
    }
    // Deletes a previously provisioned DAX cluster. <i>DeleteCluster</i> deletes all associated nodes, node endpoints and the DAX cluster itself. When you receive a successful response from this action, DAX immediately begins deleting the cluster; you cannot cancel or revert this action.
    rpc Post#DeleteCluster(Post#DeleteClusterRequest) returns (DeleteClusterResponse) {
      option (google.api.http) = {
        post: "//#DeleteCluster"
        body: "body"
      };
    }
    // Deletes the specified parameter group. You cannot delete a parameter group if it is associated with any DAX clusters.
    rpc Post#DeleteParameterGroup(Post#DeleteParameterGroupRequest) returns (DeleteParameterGroupResponse) {
      option (google.api.http) = {
        post: "//#DeleteParameterGroup"
        body: "body"
      };
    }
    // <p>Deletes a subnet group.</p> <note> <p>You cannot delete a subnet group if it is associated with any DAX clusters.</p> </note>
    rpc Post#DeleteSubnetGroup(Post#DeleteSubnetGroupRequest) returns (DeleteSubnetGroupResponse) {
      option (google.api.http) = {
        post: "//#DeleteSubnetGroup"
        body: "body"
      };
    }
    // <p>Returns information about all provisioned DAX clusters if no cluster identifier is specified, or about a specific DAX cluster if a cluster identifier is supplied.</p> <p>If the cluster is in the CREATING state, only cluster level information will be displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the DELETING state, only cluster level information will be displayed.</p> <p>If nodes are currently being added to the DAX cluster, node endpoint information and creation time for the additional nodes will not be displayed until they are completely provisioned. When the DAX cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If nodes are currently being removed from the DAX cluster, no endpoint information for the removed nodes is displayed.</p>
    rpc Post#DescribeClusters(Post#DescribeClustersRequest) returns (DescribeClustersResponse) {
      option (google.api.http) = {
        post: "//#DescribeClusters"
        body: "body"
      };
    }
    // Returns the default system parameter information for the DAX caching software.
    rpc Post#DescribeDefaultParameters(Post#DescribeDefaultParametersRequest) returns (DescribeDefaultParametersResponse) {
      option (google.api.http) = {
        post: "//#DescribeDefaultParameters"
        body: "body"
      };
    }
    // <p>Returns events related to DAX clusters and parameter groups. You can obtain events specific to a particular DAX cluster or parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
    rpc Post#DescribeEvents(Post#DescribeEventsRequest) returns (DescribeEventsResponse) {
      option (google.api.http) = {
        post: "//#DescribeEvents"
        body: "body"
      };
    }
    // Returns a list of parameter group descriptions. If a parameter group name is specified, the list will contain only the descriptions for that group.
    rpc Post#DescribeParameterGroups(Post#DescribeParameterGroupsRequest) returns (DescribeParameterGroupsResponse) {
      option (google.api.http) = {
        post: "//#DescribeParameterGroups"
        body: "body"
      };
    }
    // Returns the detailed parameter list for a particular parameter group.
    rpc Post#DescribeParameters(Post#DescribeParametersRequest) returns (DescribeParametersResponse) {
      option (google.api.http) = {
        post: "//#DescribeParameters"
        body: "body"
      };
    }
    // Returns a list of subnet group descriptions. If a subnet group name is specified, the list will contain only the description of that group.
    rpc Post#DescribeSubnetGroups(Post#DescribeSubnetGroupsRequest) returns (DescribeSubnetGroupsResponse) {
      option (google.api.http) = {
        post: "//#DescribeSubnetGroups"
        body: "body"
      };
    }
    // Adds one or more nodes to a DAX cluster.
    rpc Post#IncreaseReplicationFactor(Post#IncreaseReplicationFactorRequest) returns (IncreaseReplicationFactorResponse) {
      option (google.api.http) = {
        post: "//#IncreaseReplicationFactor"
        body: "body"
      };
    }
    // List all of the tags for a DAX cluster. You can call <code>ListTags</code> up to 10 times per second, per account.
    rpc Post#ListTags(Post#ListTagsRequest) returns (ListTagsResponse) {
      option (google.api.http) = {
        post: "//#ListTags"
        body: "body"
      };
    }
    // Reboots a single node of a DAX cluster. The reboot action takes place as soon as possible. During the reboot, the node status is set to REBOOTING.
    rpc Post#RebootNode(Post#RebootNodeRequest) returns (RebootNodeResponse) {
      option (google.api.http) = {
        post: "//#RebootNode"
        body: "body"
      };
    }
    // Associates a set of tags with a DAX resource. You can call <code>TagResource</code> up to 5 times per second, per account.
    rpc Post#TagResource(Post#TagResourceRequest) returns (TagResourceResponse) {
      option (google.api.http) = {
        post: "//#TagResource"
        body: "body"
      };
    }
    // Removes the association of tags from a DAX resource. You can call <code>UntagResource</code> up to 5 times per second, per account.
    rpc Post#UntagResource(Post#UntagResourceRequest) returns (UntagResourceResponse) {
      option (google.api.http) = {
        post: "//#UntagResource"
        body: "body"
      };
    }
    // Modifies the settings for a DAX cluster. You can use this action to change one or more cluster configuration parameters by specifying the parameters and the new values.
    rpc Post#UpdateCluster(Post#UpdateClusterRequest) returns (UpdateClusterResponse) {
      option (google.api.http) = {
        post: "//#UpdateCluster"
        body: "body"
      };
    }
    // Modifies the parameters of a parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
    rpc Post#UpdateParameterGroup(Post#UpdateParameterGroupRequest) returns (UpdateParameterGroupResponse) {
      option (google.api.http) = {
        post: "//#UpdateParameterGroup"
        body: "body"
      };
    }
    // Modifies an existing subnet group.
    rpc Post#UpdateSubnetGroup(Post#UpdateSubnetGroupRequest) returns (UpdateSubnetGroupResponse) {
      option (google.api.http) = {
        post: "//#UpdateSubnetGroup"
        body: "body"
      };
    }
}

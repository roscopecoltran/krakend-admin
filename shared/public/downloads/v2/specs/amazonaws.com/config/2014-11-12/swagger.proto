syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package awsconfig;

message PostRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteConfigRuleRequest body = 10;
}

message Post#DeleteConfigurationRecorderRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteConfigurationRecorderRequest body = 10;
}

message Post#DeleteDeliveryChannelRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteDeliveryChannelRequest body = 10;
}

message Post#DeleteEvaluationResultsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteEvaluationResultsRequest body = 10;
}

message Post#DeliverConfigSnapshotRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeliverConfigSnapshotRequest body = 10;
}

message Post#DescribeComplianceByConfigRuleRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeComplianceByConfigRuleRequest body = 10;
}

message Post#DescribeComplianceByResourceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeComplianceByResourceRequest body = 10;
}

message Post#DescribeConfigRuleEvaluationStatusRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeConfigRuleEvaluationStatusRequest body = 10;
}

message Post#DescribeConfigRulesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeConfigRulesRequest body = 10;
}

message Post#DescribeConfigurationRecorderStatusRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeConfigurationRecorderStatusRequest body = 10;
}

message Post#DescribeConfigurationRecordersRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeConfigurationRecordersRequest body = 10;
}

message Post#DescribeDeliveryChannelStatusRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeDeliveryChannelStatusRequest body = 10;
}

message Post#DescribeDeliveryChannelsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeDeliveryChannelsRequest body = 10;
}

message Post#GetComplianceDetailsByConfigRuleRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetComplianceDetailsByConfigRuleRequest body = 10;
}

message Post#GetComplianceDetailsByResourceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetComplianceDetailsByResourceRequest body = 10;
}

message Post#GetComplianceSummaryByConfigRuleRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
}

message Post#GetComplianceSummaryByResourceTypeRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetComplianceSummaryByResourceTypeRequest body = 10;
}

message Post#GetDiscoveredResourceCountsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetDiscoveredResourceCountsRequest body = 10;
}

message Post#GetResourceConfigHistoryRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetResourceConfigHistoryRequest body = 10;
    // Pagination limit
    string limit = 11;
    // Pagination token
    string nextToken = 12;
}

message Post#ListDiscoveredResourcesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListDiscoveredResourcesRequest body = 10;
}

message Post#PutConfigRuleRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    PutConfigRuleRequest body = 10;
}

message Post#PutConfigurationRecorderRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    PutConfigurationRecorderRequest body = 10;
}

message Post#PutDeliveryChannelRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    PutDeliveryChannelRequest body = 10;
}

message Post#PutEvaluationsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    PutEvaluationsRequest body = 10;
}

message Post#StartConfigRulesEvaluationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StartConfigRulesEvaluationRequest body = 10;
}

message Post#StartConfigurationRecorderRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StartConfigurationRecorderRequest body = 10;
}

message Post#StopConfigurationRecorderRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StopConfigurationRecorderRequest body = 10;
}

enum ChronologicalOrder {
    REVERSE = 0;
    FORWARD = 1;
}

message Compliance {
    // The number of AWS resources or AWS Config rules that cause a result of <code>NON_COMPLIANT</code>, up to a maximum number.
    ComplianceContributorCount ComplianceContributorCount = 1;
    // <p>Indicates whether an AWS resource or AWS Config rule is compliant.</p> <p>A resource is compliant if it complies with all of the AWS Config rules that evaluate it, and it is noncompliant if it does not comply with one or more of these rules.</p> <p>A rule is compliant if all of the resources that the rule evaluates comply with it, and it is noncompliant if any of these resources do not comply.</p> <p>AWS Config returns the <code>INSUFFICIENT_DATA</code> value when no evaluation results are available for the AWS resource or Config rule.</p> <p>For the <code>Compliance</code> data type, AWS Config supports only <code>COMPLIANT</code>, <code>NON_COMPLIANT</code>, and <code>INSUFFICIENT_DATA</code> values. AWS Config does not support the <code>NOT_APPLICABLE</code> value for the <code>Compliance</code> data type.</p>
    ComplianceType ComplianceType = 2;
}

message ComplianceByConfigRule {
    // Indicates whether the AWS Config rule is compliant.
    Compliance Compliance = 1;
    // The name of the AWS Config rule.
    string ConfigRuleName = 2;
}

repeated ComplianceByConfigRule ComplianceByConfigRules = 1

message ComplianceByResource {
    // Indicates whether the AWS resource complies with all of the AWS Config rules that evaluated it.
    Compliance Compliance = 1;
    // The ID of the AWS resource that was evaluated.
    string ResourceId = 2;
    // The type of the AWS resource that was evaluated.
    string ResourceType = 3;
}

repeated ComplianceByResource ComplianceByResources = 1

message ComplianceContributorCount {
    // Indicates whether the maximum count is reached.
    boolean CapExceeded = 1;
    // The number of AWS resources or AWS Config rules responsible for the current compliance of the item.
    integer CappedCount = 2;
}

repeated string ComplianceResourceTypes = 1

repeated ComplianceSummaryByResourceType ComplianceSummariesByResourceType = 1

message ComplianceSummary {
    // The time that AWS Config created the compliance summary.
    string ComplianceSummaryTimestamp = 1;
    // The number of AWS Config rules or AWS resources that are compliant, up to a maximum of 25 for rules and 100 for resources.
    ComplianceContributorCount CompliantResourceCount = 2;
    // The number of AWS Config rules or AWS resources that are noncompliant, up to a maximum of 25 for rules and 100 for resources.
    ComplianceContributorCount NonCompliantResourceCount = 3;
}

message ComplianceSummaryByResourceType {
    // The number of AWS resources that are compliant or noncompliant, up to a maximum of 100 for each compliance.
    ComplianceSummary ComplianceSummary = 1;
    // The type of AWS resource.
    string ResourceType = 2;
}

enum ComplianceType {
    COMPLIANT = 0;
    NON_COMPLIANT = 1;
    NOT_APPLICABLE = 2;
    INSUFFICIENT_DATA = 3;
}

repeated ComplianceType ComplianceTypes = 1

message ConfigExportDeliveryInfo {
    // The time of the last attempted delivery.
    string lastAttemptTime = 1;
    // The error code from the last attempted delivery.
    string lastErrorCode = 2;
    // The error message from the last attempted delivery.
    string lastErrorMessage = 3;
    // Status of the last attempted delivery.
    DeliveryStatus lastStatus = 4;
    // The time of the last successful delivery.
    string lastSuccessfulTime = 5;
    // The time that the next delivery occurs.
    string nextDeliveryTime = 6;
}

message ConfigRule {
    // The Amazon Resource Name (ARN) of the AWS Config rule.
    string ConfigRuleArn = 1;
    // The ID of the AWS Config rule.
    string ConfigRuleId = 2;
    // The name that you assign to the AWS Config rule. The name is required if you are adding a new rule.
    string ConfigRuleName = 3;
    // <p>Indicates whether the AWS Config rule is active or is currently being deleted by AWS Config. It can also indicate the evaluation status for the Config rule.</p> <p>AWS Config sets the state of the rule to <code>EVALUATING</code> temporarily after you use the <code>StartConfigRulesEvaluation</code> request to evaluate your resources against the Config rule.</p> <p>AWS Config sets the state of the rule to <code>DELETING_RESULTS</code> temporarily after you use the <code>DeleteEvaluationResults</code> request to delete the current evaluation results for the Config rule.</p> <p>AWS Config sets the state of a rule to <code>DELETING</code> temporarily after you use the <code>DeleteConfigRule</code> request to delete the rule. After AWS Config deletes the rule, the rule and all of its evaluations are erased and are no longer available.</p>
    ConfigRuleState ConfigRuleState = 4;
    // The description that you provide for the AWS Config rule.
    string Description = 5;
    // A string in JSON format that is passed to the AWS Config rule Lambda function.
    string InputParameters = 6;
    // <p>The maximum frequency with which AWS Config runs evaluations for a rule. You can specify a value for <code>MaximumExecutionFrequency</code> when:</p> <ul> <li> <p>You are using an AWS managed rule that is triggered at a periodic frequency.</p> </li> <li> <p>Your custom rule is triggered when AWS Config delivers the configuration snapshot. For more information, see <a>ConfigSnapshotDeliveryProperties</a>.</p> </li> </ul> <note> <p>By default, rules with a periodic trigger are evaluated every 24 hours. To change the frequency, specify a valid value for the <code>MaximumExecutionFrequency</code> parameter.</p> </note>
    MaximumExecutionFrequency MaximumExecutionFrequency = 7;
    // Defines which resources can trigger an evaluation for the rule. The scope can include one or more resource types, a combination of one resource type and one resource ID, or a combination of a tag key and value. Specify a scope to constrain the resources that can trigger an evaluation for the rule. If you do not specify a scope, evaluations are triggered when any resource in the recording group changes.
    Scope Scope = 8;
    // Provides the rule owner (AWS or customer), the rule identifier, and the notifications that cause the function to evaluate your AWS resources.
    Source Source = 9;
}

message ConfigRuleEvaluationStatus {
    // The Amazon Resource Name (ARN) of the AWS Config rule.
    string ConfigRuleArn = 1;
    // The ID of the AWS Config rule.
    string ConfigRuleId = 2;
    // The name of the AWS Config rule.
    string ConfigRuleName = 3;
    // The time that you first activated the AWS Config rule.
    string FirstActivatedTime = 4;
    // <p>Indicates whether AWS Config has evaluated your resources against the rule at least once.</p> <ul> <li> <p> <code>true</code> - AWS Config has evaluated your AWS resources against the rule at least once.</p> </li> <li> <p> <code>false</code> - AWS Config has not once finished evaluating your AWS resources against the rule.</p> </li> </ul>
    boolean FirstEvaluationStarted = 5;
    // The error code that AWS Config returned when the rule last failed.
    string LastErrorCode = 6;
    // The error message that AWS Config returned when the rule last failed.
    string LastErrorMessage = 7;
    // The time that AWS Config last failed to evaluate your AWS resources against the rule.
    string LastFailedEvaluationTime = 8;
    // The time that AWS Config last failed to invoke the AWS Config rule to evaluate your AWS resources.
    string LastFailedInvocationTime = 9;
    // The time that AWS Config last successfully evaluated your AWS resources against the rule.
    string LastSuccessfulEvaluationTime = 10;
    // The time that AWS Config last successfully invoked the AWS Config rule to evaluate your AWS resources.
    string LastSuccessfulInvocationTime = 11;
}

repeated ConfigRuleEvaluationStatus ConfigRuleEvaluationStatusList = 1

repeated string ConfigRuleNames = 1

enum ConfigRuleState {
    ACTIVE = 0;
    DELETING = 1;
    DELETING_RESULTS = 2;
    EVALUATING = 3;
}

repeated ConfigRule ConfigRules = 1

message ConfigSnapshotDeliveryProperties {
    // The frequency with which AWS Config delivers configuration snapshots.
    MaximumExecutionFrequency deliveryFrequency = 1;
}

message ConfigStreamDeliveryInfo {
    // The error code from the last attempted delivery.
    string lastErrorCode = 1;
    // The error message from the last attempted delivery.
    string lastErrorMessage = 2;
    // <p>Status of the last attempted delivery.</p> <p> <b>Note</b> Providing an SNS topic on a <a href="http://docs.aws.amazon.com/config/latest/APIReference/API_DeliveryChannel.html">DeliveryChannel</a> for AWS Config is optional. If the SNS delivery is turned off, the last status will be <b>Not_Applicable</b>.</p>
    DeliveryStatus lastStatus = 3;
    // The time from the last status change.
    string lastStatusChangeTime = 4;
}

message ConfigurationItem {
    // The 12 digit AWS account ID associated with the resource.
    string accountId = 1;
    // The Amazon Resource Name (ARN) of the resource.
    string arn = 2;
    // The Availability Zone associated with the resource.
    string availabilityZone = 3;
    // The region where the resource resides.
    string awsRegion = 4;
    // The description of the resource configuration.
    string configuration = 5;
    // The time when the configuration recording was initiated.
    string configurationItemCaptureTime = 6;
    // <p>Unique MD5 hash that represents the configuration item's state.</p> <p>You can use MD5 hash to compare the states of two or more configuration items that are associated with the same resource.</p>
    string configurationItemMD5Hash = 7;
    // The configuration item status.
    ConfigurationItemStatus configurationItemStatus = 8;
    // An identifier that indicates the ordering of the configuration items of a resource.
    string configurationStateId = 9;
    // <p>A list of CloudTrail event IDs.</p> <p>A populated field indicates that the current configuration was initiated by the events recorded in the CloudTrail log. For more information about CloudTrail, see <a href="http://docs.aws.amazon.com/awscloudtrail/latest/userguide/what_is_cloud_trail_top_level.html">What is AWS CloudTrail?</a>.</p> <p>An empty field indicates that the current configuration was not initiated by any event.</p>
    array relatedEvents = 10;
    // A list of related AWS resources.
    array relationships = 11;
    // The time stamp when the resource was created.
    string resourceCreationTime = 12;
    // The ID of the resource (for example., <code>sg-xxxxxx</code>).
    string resourceId = 13;
    // The custom name of the resource, if available.
    string resourceName = 14;
    // The type of AWS resource.
    ResourceType resourceType = 15;
    // Configuration attributes that AWS Config returns for certain resource types to supplement the information returned for the <code>configuration</code> parameter.
    array supplementaryConfiguration = 16;
    // A mapping of key value tags associated with the resource.
    array tags = 17;
    // The version number of the resource configuration.
    string version = 18;
}



repeated ConfigurationItem ConfigurationItemList = 1



enum ConfigurationItemStatu {
    OK = 0;
    FAILED = 1;
    DISCOVERED = 2;
    DELETED = 3;
}

message ConfigurationRecorder {
    // The name of the recorder. By default, AWS Config automatically assigns the name "default" when creating the configuration recorder. You cannot change the assigned name.
    string name = 1;
    // Specifies the types of AWS resource for which AWS Config records configuration changes.
    RecordingGroup recordingGroup = 2;
    // Amazon Resource Name (ARN) of the IAM role used to describe the AWS resources associated with the account.
    string roleARN = 3;
}

repeated ConfigurationRecorder ConfigurationRecorderList = 1

repeated string ConfigurationRecorderNameList = 1

message ConfigurationRecorderStatus {
    // The error code indicating that the recording failed.
    string lastErrorCode = 1;
    // The message indicating that the recording failed due to an error.
    string lastErrorMessage = 2;
    // The time the recorder was last started.
    string lastStartTime = 3;
    // The last (previous) status of the recorder.
    RecorderStatus lastStatus = 4;
    // The time when the status was last changed.
    string lastStatusChangeTime = 5;
    // The time the recorder was last stopped.
    string lastStopTime = 6;
    // The name of the configuration recorder.
    string name = 7;
    // Specifies whether the recorder is currently recording or not.
    boolean recording = 8;
}

repeated ConfigurationRecorderStatus ConfigurationRecorderStatusList = 1





message DeleteConfigRuleRequest {
    // The name of the AWS Config rule that you want to delete.
    string ConfigRuleName = 1;
}

message DeleteConfigurationRecorderRequest {
    // The name of the configuration recorder to be deleted. You can retrieve the name of your configuration recorder by using the <code>DescribeConfigurationRecorders</code> action.
    string ConfigurationRecorderName = 1;
}

message DeleteDeliveryChannelRequest {
    // The name of the delivery channel to delete.
    string DeliveryChannelName = 1;
}

message DeleteEvaluationResultsRequest {
    // The name of the Config rule for which you want to delete the evaluation results.
    string ConfigRuleName = 1;
}

message DeleteEvaluationResultsResponse {
}

message DeliverConfigSnapshotRequest {
    // The name of the delivery channel through which the snapshot is delivered.
    string deliveryChannelName = 1;
}

message DeliverConfigSnapshotResponse {
    // The ID of the snapshot that is being created.
    string configSnapshotId = 1;
}

message DeliveryChannel {
    // The options for how often AWS Config delivers configuration snapshots to the Amazon S3 bucket.
    ConfigSnapshotDeliveryProperties configSnapshotDeliveryProperties = 1;
    // The name of the delivery channel. By default, AWS Config assigns the name "default" when creating the delivery channel. To change the delivery channel name, you must use the DeleteDeliveryChannel action to delete your current delivery channel, and then you must use the PutDeliveryChannel command to create a delivery channel that has the desired name.
    string name = 2;
    // <p>The name of the Amazon S3 bucket to which AWS Config delivers configuration snapshots and configuration history files.</p> <p>If you specify a bucket that belongs to another AWS account, that bucket must have policies that grant access permissions to AWS Config. For more information, see <a href="http://docs.aws.amazon.com/config/latest/developerguide/s3-bucket-policy.html">Permissions for the Amazon S3 Bucket</a> in the AWS Config Developer Guide.</p>
    string s3BucketName = 3;
    // The prefix for the specified Amazon S3 bucket.
    string s3KeyPrefix = 4;
    // <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which AWS Config sends notifications about configuration changes.</p> <p>If you choose a topic from another account, the topic must have policies that grant access permissions to AWS Config. For more information, see <a href="http://docs.aws.amazon.com/config/latest/developerguide/sns-topic-policy.html">Permissions for the Amazon SNS Topic</a> in the AWS Config Developer Guide.</p>
    string snsTopicARN = 5;
}

repeated DeliveryChannel DeliveryChannelList = 1

repeated string DeliveryChannelNameList = 1

message DeliveryChannelStatus {
    // A list that contains the status of the delivery of the configuration history to the specified Amazon S3 bucket.
    ConfigExportDeliveryInfo configHistoryDeliveryInfo = 1;
    // A list containing the status of the delivery of the snapshot to the specified Amazon S3 bucket.
    ConfigExportDeliveryInfo configSnapshotDeliveryInfo = 2;
    // A list containing the status of the delivery of the configuration stream notification to the specified Amazon SNS topic.
    ConfigStreamDeliveryInfo configStreamDeliveryInfo = 3;
    // The name of the delivery channel.
    string name = 4;
}

repeated DeliveryChannelStatus DeliveryChannelStatusList = 1

enum DeliveryStatu {
    SUCCESS = 0;
    FAILURE = 1;
    NOT_APPLICABLE = 2;
}

message DescribeComplianceByConfigRuleRequest {
    // <p>Filters the results by compliance.</p> <p>The allowed values are <code>COMPLIANT</code>, <code>NON_COMPLIANT</code>, and <code>INSUFFICIENT_DATA</code>.</p>
    array ComplianceTypes = 1;
    // Specify one or more AWS Config rule names to filter the results by rule.
    array ConfigRuleNames = 2;
    // The <code>NextToken</code> string returned on a previous page that you use to get the next page of results in a paginated response.
    string NextToken = 3;
}

message DescribeComplianceByConfigRuleResponse {
    // Indicates whether each of the specified AWS Config rules is compliant.
    array ComplianceByConfigRules = 1;
    // The string that you use in a subsequent request to get the next page of results in a paginated response.
    string NextToken = 2;
}

message DescribeComplianceByResourceRequest {
    // <p>Filters the results by compliance.</p> <p>The allowed values are <code>COMPLIANT</code>, <code>NON_COMPLIANT</code>, and <code>INSUFFICIENT_DATA</code>.</p>
    array ComplianceTypes = 1;
    // The maximum number of evaluation results returned on each page. The default is 10. You cannot specify a limit greater than 100. If you specify 0, AWS Config uses the default.
    integer Limit = 2;
    // The <code>NextToken</code> string returned on a previous page that you use to get the next page of results in a paginated response.
    string NextToken = 3;
    // The ID of the AWS resource for which you want compliance information. You can specify only one resource ID. If you specify a resource ID, you must also specify a type for <code>ResourceType</code>.
    string ResourceId = 4;
    // The types of AWS resources for which you want compliance information; for example, <code>AWS::EC2::Instance</code>. For this action, you can specify that the resource type is an AWS account by specifying <code>AWS::::Account</code>.
    string ResourceType = 5;
}

message DescribeComplianceByResourceResponse {
    // Indicates whether the specified AWS resource complies with all of the AWS Config rules that evaluate it.
    array ComplianceByResources = 1;
    // The string that you use in a subsequent request to get the next page of results in a paginated response.
    string NextToken = 2;
}

message DescribeConfigRuleEvaluationStatusRequest {
    // The name of the AWS managed Config rules for which you want status information. If you do not specify any names, AWS Config returns status information for all AWS managed Config rules that you use.
    array ConfigRuleNames = 1;
    // <p>The number of rule evaluation results that you want returned.</p> <p>This parameter is required if the rule limit for your account is more than the default of 50 rules.</p> <p>For more information about requesting a rule limit increase, see <a href="http://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html#limits_config">AWS Config Limits</a> in the <i>AWS General Reference Guide</i>.</p>
    integer Limit = 2;
    // The <code>NextToken</code> string returned on a previous page that you use to get the next page of results in a paginated response.
    string NextToken = 3;
}

message DescribeConfigRuleEvaluationStatusResponse {
    // Status information about your AWS managed Config rules.
    array ConfigRulesEvaluationStatus = 1;
    // The string that you use in a subsequent request to get the next page of results in a paginated response.
    string NextToken = 2;
}

message DescribeConfigRulesRequest {
    // The names of the AWS Config rules for which you want details. If you do not specify any names, AWS Config returns details for all your rules.
    array ConfigRuleNames = 1;
    // The <code>NextToken</code> string returned on a previous page that you use to get the next page of results in a paginated response.
    string NextToken = 2;
}

message DescribeConfigRulesResponse {
    // The details about your AWS Config rules.
    array ConfigRules = 1;
    // The string that you use in a subsequent request to get the next page of results in a paginated response.
    string NextToken = 2;
}

message DescribeConfigurationRecorderStatusRequest {
    // The name(s) of the configuration recorder. If the name is not specified, the action returns the current status of all the configuration recorders associated with the account.
    array ConfigurationRecorderNames = 1;
}

message DescribeConfigurationRecorderStatusResponse {
    // A list that contains status of the specified recorders.
    array ConfigurationRecordersStatus = 1;
}

message DescribeConfigurationRecordersRequest {
    // A list of configuration recorder names.
    array ConfigurationRecorderNames = 1;
}

message DescribeConfigurationRecordersResponse {
    // A list that contains the descriptions of the specified configuration recorders.
    array ConfigurationRecorders = 1;
}

message DescribeDeliveryChannelStatusRequest {
    // A list of delivery channel names.
    array DeliveryChannelNames = 1;
}

message DescribeDeliveryChannelStatusResponse {
    // A list that contains the status of a specified delivery channel.
    array DeliveryChannelsStatus = 1;
}

message DescribeDeliveryChannelsRequest {
    // A list of delivery channel names.
    array DeliveryChannelNames = 1;
}

message DescribeDeliveryChannelsResponse {
    // A list that contains the descriptions of the specified delivery channel.
    array DeliveryChannels = 1;
}

message Evaluation {
    // Supplementary information about how the evaluation determined the compliance.
    string Annotation = 1;
    // The ID of the AWS resource that was evaluated.
    string ComplianceResourceId = 2;
    // The type of AWS resource that was evaluated.
    string ComplianceResourceType = 3;
    // <p>Indicates whether the AWS resource complies with the AWS Config rule that it was evaluated against.</p> <p>For the <code>Evaluation</code> data type, AWS Config supports only the <code>COMPLIANT</code>, <code>NON_COMPLIANT</code>, and <code>NOT_APPLICABLE</code> values. AWS Config does not support the <code>INSUFFICIENT_DATA</code> value for this data type.</p> <p>Similarly, AWS Config does not accept <code>INSUFFICIENT_DATA</code> as the value for <code>ComplianceType</code> from a <code>PutEvaluations</code> request. For example, an AWS Lambda function for a custom Config rule cannot pass an <code>INSUFFICIENT_DATA</code> value to AWS Config.</p>
    ComplianceType ComplianceType = 4;
    // The time of the event in AWS Config that triggered the evaluation. For event-based evaluations, the time indicates when AWS Config created the configuration item that triggered the evaluation. For periodic evaluations, the time indicates when AWS Config triggered the evaluation at the frequency that you specified (for example, every 24 hours).
    string OrderingTimestamp = 5;
}

message EvaluationResult {
    // Supplementary information about how the evaluation determined the compliance.
    string Annotation = 1;
    // <p>Indicates whether the AWS resource complies with the AWS Config rule that evaluated it.</p> <p>For the <code>EvaluationResult</code> data type, AWS Config supports only the <code>COMPLIANT</code>, <code>NON_COMPLIANT</code>, and <code>NOT_APPLICABLE</code> values. AWS Config does not support the <code>INSUFFICIENT_DATA</code> value for the <code>EvaluationResult</code> data type.</p>
    ComplianceType ComplianceType = 2;
    // The time when the AWS Config rule evaluated the AWS resource.
    string ConfigRuleInvokedTime = 3;
    // Uniquely identifies the evaluation result.
    EvaluationResultIdentifier EvaluationResultIdentifier = 4;
    // The time when AWS Config recorded the evaluation result.
    string ResultRecordedTime = 5;
    // An encrypted token that associates an evaluation with an AWS Config rule. The token identifies the rule, the AWS resource being evaluated, and the event that triggered the evaluation.
    string ResultToken = 6;
}

message EvaluationResultIdentifier {
    // Identifies an AWS Config rule used to evaluate an AWS resource, and provides the type and ID of the evaluated resource.
    EvaluationResultQualifier EvaluationResultQualifier = 1;
    // The time of the event that triggered the evaluation of your AWS resources. The time can indicate when AWS Config delivered a configuration item change notification, or it can indicate when AWS Config delivered the configuration snapshot, depending on which event triggered the evaluation.
    string OrderingTimestamp = 2;
}

message EvaluationResultQualifier {
    // The name of the AWS Config rule that was used in the evaluation.
    string ConfigRuleName = 1;
    // The ID of the evaluated AWS resource.
    string ResourceId = 2;
    // The type of AWS resource that was evaluated.
    string ResourceType = 3;
}

repeated EvaluationResult EvaluationResults = 1

repeated Evaluation Evaluations = 1

enum EventSource {
    AWSCONFIG = 0;
}

message GetComplianceDetailsByConfigRuleRequest {
    // <p>Filters the results by compliance.</p> <p>The allowed values are <code>COMPLIANT</code>, <code>NON_COMPLIANT</code>, and <code>NOT_APPLICABLE</code>.</p>
    array ComplianceTypes = 1;
    // The name of the AWS Config rule for which you want compliance information.
    string ConfigRuleName = 2;
    // The maximum number of evaluation results returned on each page. The default is 10. You cannot specify a limit greater than 100. If you specify 0, AWS Config uses the default.
    integer Limit = 3;
    // The <code>NextToken</code> string returned on a previous page that you use to get the next page of results in a paginated response.
    string NextToken = 4;
}

message GetComplianceDetailsByConfigRuleResponse {
    // Indicates whether the AWS resource complies with the specified AWS Config rule.
    array EvaluationResults = 1;
    // The string that you use in a subsequent request to get the next page of results in a paginated response.
    string NextToken = 2;
}

message GetComplianceDetailsByResourceRequest {
    // <p>Filters the results by compliance.</p> <p>The allowed values are <code>COMPLIANT</code>, <code>NON_COMPLIANT</code>, and <code>NOT_APPLICABLE</code>.</p>
    array ComplianceTypes = 1;
    // The <code>NextToken</code> string returned on a previous page that you use to get the next page of results in a paginated response.
    string NextToken = 2;
    // The ID of the AWS resource for which you want compliance information.
    string ResourceId = 3;
    // The type of the AWS resource for which you want compliance information.
    string ResourceType = 4;
}

message GetComplianceDetailsByResourceResponse {
    // Indicates whether the specified AWS resource complies each AWS Config rule.
    array EvaluationResults = 1;
    // The string that you use in a subsequent request to get the next page of results in a paginated response.
    string NextToken = 2;
}

message GetComplianceSummaryByConfigRuleResponse {
    // The number of AWS Config rules that are compliant and the number that are noncompliant, up to a maximum of 25 for each.
    ComplianceSummary ComplianceSummary = 1;
}

message GetComplianceSummaryByResourceTypeRequest {
    // <p>Specify one or more resource types to get the number of resources that are compliant and the number that are noncompliant for each resource type.</p> <p>For this request, you can specify an AWS resource type such as <code>AWS::EC2::Instance</code>, and you can specify that the resource type is an AWS account by specifying <code>AWS::::Account</code>.</p>
    array ResourceTypes = 1;
}

message GetComplianceSummaryByResourceTypeResponse {
    // The number of resources that are compliant and the number that are noncompliant. If one or more resource types were provided with the request, the numbers are returned for each resource type. The maximum number returned is 100.
    array ComplianceSummariesByResourceType = 1;
}

message GetDiscoveredResourceCountsRequest {
    // The maximum number of <a>ResourceCount</a> objects returned on each page. The default is 100. You cannot specify a limit greater than 100. If you specify 0, AWS Config uses the default.
    integer limit = 1;
    // The <code>nextToken</code> string returned on a previous page that you use to get the next page of results in a paginated response.
    string nextToken = 2;
    // <p>The comma-separated list that specifies the resource types that you want the AWS Config to return. For example, (<code>"AWS::EC2::Instance"</code>, <code>"AWS::IAM::User"</code>).</p> <p>If a value for <code>resourceTypes</code> is not specified, AWS Config returns all resource types that AWS Config is recording in the region for your account.</p> <note> <p>If the configuration recorder is turned off, AWS Config returns an empty list of <a>ResourceCount</a> objects. If the configuration recorder is not recording a specific resource type (for example, S3 buckets), that resource type is not returned in the list of <a>ResourceCount</a> objects.</p> </note>
    array resourceTypes = 3;
}

message GetDiscoveredResourceCountsResponse {
    // The string that you use in a subsequent request to get the next page of results in a paginated response.
    string nextToken = 1;
    // The list of <code>ResourceCount</code> objects. Each object is listed in descending order by the number of resources.
    array resourceCounts = 2;
    // <p>The total number of resources that AWS Config is recording in the region for your account. If you specify resource types in the request, AWS Config returns only the total number of resources for those resource types.</p> <p class="title"> <b>Example</b> </p> <ol> <li> <p>AWS Config is recording three resource types in the US East (Ohio) Region for your account: 25 EC2 instances, 20 IAM users, and 15 S3 buckets, for a total of 60 resources.</p> </li> <li> <p>You make a call to the <code>GetDiscoveredResourceCounts</code> action and specify the resource type, <code>"AWS::EC2::Instances"</code> in the request.</p> </li> <li> <p>AWS Config returns 25 for <code>totalDiscoveredResources</code>.</p> </li> </ol>
    integer totalDiscoveredResources = 3;
}

message GetResourceConfigHistoryRequest {
    // The chronological order for configuration items listed. By default the results are listed in reverse chronological order.
    ChronologicalOrder chronologicalOrder = 1;
    // The time stamp that indicates an earlier time. If not specified, the action returns paginated results that contain configuration items that start from when the first configuration item was recorded.
    string earlierTime = 2;
    // The time stamp that indicates a later time. If not specified, current time is taken.
    string laterTime = 3;
    // The maximum number of configuration items returned on each page. The default is 10. You cannot specify a limit greater than 100. If you specify 0, AWS Config uses the default.
    integer limit = 4;
    // The <code>nextToken</code> string returned on a previous page that you use to get the next page of results in a paginated response.
    string nextToken = 5;
    // The ID of the resource (for example., <code>sg-xxxxxx</code>).
    string resourceId = 6;
    // The resource type.
    ResourceType resourceType = 7;
}

message GetResourceConfigHistoryResponse {
    // A list that contains the configuration history of one or more resources.
    array configurationItems = 1;
    // The string that you use in a subsequent request to get the next page of results in a paginated response.
    string nextToken = 2;
}

message InsufficientDeliveryPolicyException {
}

message InsufficientPermissionsException {
}

message InvalidConfigurationRecorderNameException {
}

message InvalidDeliveryChannelNameException {
}

message InvalidLimitException {
}

message InvalidNextTokenException {
}

message InvalidParameterValueException {
}

message InvalidRecordingGroupException {
}

message InvalidResultTokenException {
}

message InvalidRoleException {
}

message InvalidS3KeyPrefixException {
}

message InvalidSNSTopicARNException {
}

message InvalidTimeRangeException {
}

message LastDeliveryChannelDeleteFailedException {
}

message LimitExceededException {
}

message ListDiscoveredResourcesRequest {
    // Specifies whether AWS Config includes deleted resources in the results. By default, deleted resources are not included.
    boolean includeDeletedResources = 1;
    // The maximum number of resource identifiers returned on each page. The default is 100. You cannot specify a limit greater than 100. If you specify 0, AWS Config uses the default.
    integer limit = 2;
    // The <code>nextToken</code> string returned on a previous page that you use to get the next page of results in a paginated response.
    string nextToken = 3;
    // The IDs of only those resources that you want AWS Config to list in the response. If you do not specify this parameter, AWS Config lists all resources of the specified type that it has discovered.
    array resourceIds = 4;
    // The custom name of only those resources that you want AWS Config to list in the response. If you do not specify this parameter, AWS Config lists all resources of the specified type that it has discovered.
    string resourceName = 5;
    // The type of resources that you want AWS Config to list in the response.
    ResourceType resourceType = 6;
}

message ListDiscoveredResourcesResponse {
    // The string that you use in a subsequent request to get the next page of results in a paginated response.
    string nextToken = 1;
    // The details that identify a resource that is discovered by AWS Config, including the resource type, ID, and (if available) the custom resource name.
    array resourceIdentifiers = 2;
}

message MaxNumberOfConfigRulesExceededException {
}

message MaxNumberOfConfigurationRecordersExceededException {
}

message MaxNumberOfDeliveryChannelsExceededException {
}

enum MaximumExecutionFrequency {
    ONE_HOUR = 0;
    THREE_HOURS = 1;
    SIX_HOURS = 2;
    TWELVE_HOURS = 3;
    TWENTYFOUR_HOURS = 4;
}

enum MessageType {
    CONFIGURATIONITEMCHANGENOTIFICATION = 0;
    CONFIGURATIONSNAPSHOTDELIVERYCOMPLETED = 1;
    SCHEDULEDNOTIFICATION = 2;
    OVERSIZEDCONFIGURATIONITEMCHANGENOTIFICATION = 3;
}

message NoAvailableConfigurationRecorderException {
}

message NoAvailableDeliveryChannelException {
}

message NoRunningConfigurationRecorderException {
}

message NoSuchBucketException {
}

message NoSuchConfigRuleException {
}

message NoSuchConfigurationRecorderException {
}

message NoSuchDeliveryChannelException {
}

enum Owner {
    CUSTOM_LAMBDA = 0;
    AWS = 1;
}

message PutConfigRuleRequest {
    // The rule that you want to add to your account.
    ConfigRule ConfigRule = 1;
}

message PutConfigurationRecorderRequest {
    // The configuration recorder object that records each configuration change made to the resources.
    ConfigurationRecorder ConfigurationRecorder = 1;
}

message PutDeliveryChannelRequest {
    // The configuration delivery channel object that delivers the configuration information to an Amazon S3 bucket, and to an Amazon SNS topic.
    DeliveryChannel DeliveryChannel = 1;
}

message PutEvaluationsRequest {
    // The assessments that the AWS Lambda function performs. Each evaluation identifies an AWS resource and indicates whether it complies with the AWS Config rule that invokes the AWS Lambda function.
    array Evaluations = 1;
    // An encrypted token that associates an evaluation with an AWS Config rule. Identifies the rule and the event that triggered the evaluation
    string ResultToken = 2;
    // <p>Use this parameter to specify a test run for <code>PutEvaluations</code>. You can verify whether your AWS Lambda function will deliver evaluation results to AWS Config. No updates occur to your existing evaluations, and evaluation results are not sent to AWS Config.</p> <note> <p>When <code>TestMode</code> is <code>true</code>, <code>PutEvaluations</code> doesn't require a valid value for the <code>ResultToken</code> parameter, but the value cannot be null.</p> </note>
    boolean TestMode = 3;
}

message PutEvaluationsResponse {
    // Requests that failed because of a client or server error.
    array FailedEvaluations = 1;
}

enum RecorderStatu {
    PENDING = 0;
    SUCCESS = 1;
    FAILURE = 2;
}

message RecordingGroup {
    // <p>Specifies whether AWS Config records configuration changes for every supported type of regional resource.</p> <p>If you set this option to <code>true</code>, when AWS Config adds support for a new type of regional resource, it automatically starts recording resources of that type.</p> <p>If you set this option to <code>true</code>, you cannot enumerate a list of <code>resourceTypes</code>.</p>
    boolean allSupported = 1;
    // <p>Specifies whether AWS Config includes all supported types of global resources (for example, IAM resources) with the resources that it records.</p> <p>Before you can set this option to <code>true</code>, you must set the <code>allSupported</code> option to <code>true</code>.</p> <p>If you set this option to <code>true</code>, when AWS Config adds support for a new type of global resource, it automatically starts recording resources of that type.</p> <p>The configuration details for any global resource are the same in all regions. To prevent duplicate configuration items, you should consider customizing AWS Config in only one region to record global resources.</p>
    boolean includeGlobalResourceTypes = 2;
    // <p>A comma-separated list that specifies the types of AWS resources for which AWS Config records configuration changes (for example, <code>AWS::EC2::Instance</code> or <code>AWS::CloudTrail::Trail</code>).</p> <p>Before you can set this option to <code>true</code>, you must set the <code>allSupported</code> option to <code>false</code>.</p> <p>If you set this option to <code>true</code>, when AWS Config adds support for a new type of resource, it will not record resources of that type unless you manually add that type to your recording group.</p> <p>For a list of valid <code>resourceTypes</code> values, see the <b>resourceType Value</b> column in <a href="http://docs.aws.amazon.com/config/latest/developerguide/resource-config-reference.html#supported-resources">Supported AWS Resource Types</a>.</p>
    array resourceTypes = 3;
}

repeated string ReevaluateConfigRuleNames = 1



repeated string RelatedEventList = 1

message Relationship {
    // The type of relationship with the related resource.
    string relationshipName = 1;
    // The ID of the related resource (for example, <code>sg-xxxxxx</code>).
    string resourceId = 2;
    // The custom name of the related resource, if available.
    string resourceName = 3;
    // The resource type of the related resource.
    ResourceType resourceType = 4;
}

repeated Relationship RelationshipList = 1



message ResourceCount {
    // The number of resources.
    integer count = 1;
    // The resource type, for example <code>"AWS::EC2::Instance"</code>.
    ResourceType resourceType = 2;
}

repeated ResourceCount ResourceCounts = 1







repeated string ResourceIdList = 1

message ResourceIdentifier {
    // The time that the resource was deleted.
    string resourceDeletionTime = 1;
    // The ID of the resource (for example., <code>sg-xxxxxx</code>).
    string resourceId = 2;
    // The custom name of the resource (if available).
    string resourceName = 3;
    // The type of resource.
    ResourceType resourceType = 4;
}

repeated ResourceIdentifier ResourceIdentifierList = 1

message ResourceInUseException {
}

message ResourceNotDiscoveredException {
}

enum ResourceType {
    AWS::EC2::CUSTOMERGATEWAY = 0;
    AWS::EC2::EIP = 1;
    AWS::EC2::HOST = 2;
    AWS::EC2::INSTANCE = 3;
    AWS::EC2::INTERNETGATEWAY = 4;
    AWS::EC2::NETWORKACL = 5;
    AWS::EC2::NETWORKINTERFACE = 6;
    AWS::EC2::ROUTETABLE = 7;
    AWS::EC2::SECURITYGROUP = 8;
    AWS::EC2::SUBNET = 9;
    AWS::CLOUDTRAIL::TRAIL = 10;
    AWS::EC2::VOLUME = 11;
    AWS::EC2::VPC = 12;
    AWS::EC2::VPNCONNECTION = 13;
    AWS::EC2::VPNGATEWAY = 14;
    AWS::IAM::GROUP = 15;
    AWS::IAM::POLICY = 16;
    AWS::IAM::ROLE = 17;
    AWS::IAM::USER = 18;
    AWS::ACM::CERTIFICATE = 19;
    AWS::RDS::DBINSTANCE = 20;
    AWS::RDS::DBSUBNETGROUP = 21;
    AWS::RDS::DBSECURITYGROUP = 22;
    AWS::RDS::DBSNAPSHOT = 23;
    AWS::RDS::EVENTSUBSCRIPTION = 24;
    AWS::ELASTICLOADBALANCINGV2::LOADBALANCER = 25;
    AWS::S3::BUCKET = 26;
    AWS::SSM::MANAGEDINSTANCEINVENTORY = 27;
    AWS::REDSHIFT::CLUSTER = 28;
    AWS::REDSHIFT::CLUSTERSNAPSHOT = 29;
    AWS::REDSHIFT::CLUSTERPARAMETERGROUP = 30;
    AWS::REDSHIFT::CLUSTERSECURITYGROUP = 31;
    AWS::REDSHIFT::CLUSTERSUBNETGROUP = 32;
    AWS::REDSHIFT::EVENTSUBSCRIPTION = 33;
    AWS::CLOUDWATCH::ALARM = 34;
    AWS::CLOUDFORMATION::STACK = 35;
    AWS::DYNAMODB::TABLE = 36;
    AWS::AUTOSCALING::AUTOSCALINGGROUP = 37;
    AWS::AUTOSCALING::LAUNCHCONFIGURATION = 38;
    AWS::AUTOSCALING::SCALINGPOLICY = 39;
    AWS::AUTOSCALING::SCHEDULEDACTION = 40;
}

repeated ResourceType ResourceTypeList = 1

repeated string ResourceTypes = 1



message Scope {
    // The IDs of the only AWS resource that you want to trigger an evaluation for the rule. If you specify a resource ID, you must specify one resource type for <code>ComplianceResourceTypes</code>.
    string ComplianceResourceId = 1;
    // The resource types of only those AWS resources that you want to trigger an evaluation for the rule. You can only specify one type if you also specify a resource ID for <code>ComplianceResourceId</code>.
    array ComplianceResourceTypes = 2;
    // The tag key that is applied to only those AWS resources that you want to trigger an evaluation for the rule.
    string TagKey = 3;
    // The tag value applied to only those AWS resources that you want to trigger an evaluation for the rule. If you specify a value for <code>TagValue</code>, you must also specify a value for <code>TagKey</code>.
    string TagValue = 4;
}

message Source {
    // Indicates whether AWS or the customer owns and manages the AWS Config rule.
    Owner Owner = 1;
    // Provides the source and type of the event that causes AWS Config to evaluate your AWS resources.
    array SourceDetails = 2;
    // <p>For AWS Config managed rules, a predefined identifier from a list. For example, <code>IAM_PASSWORD_POLICY</code> is a managed rule. To reference a managed rule, see <a href="http://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_use-managed-rules.html">Using AWS Managed Config Rules</a>.</p> <p>For custom rules, the identifier is the Amazon Resource Name (ARN) of the rule's AWS Lambda function, such as <code>arn:aws:lambda:us-east-2:123456789012:function:custom_rule_name</code>.</p>
    string SourceIdentifier = 3;
}

message SourceDetail {
    // The source of the event, such as an AWS service, that triggers AWS Config to evaluate your AWS resources.
    EventSource EventSource = 1;
    // <p>The frequency that you want AWS Config to run evaluations for a custom rule with a periodic trigger. If you specify a value for <code>MaximumExecutionFrequency</code>, then <code>MessageType</code> must use the <code>ScheduledNotification</code> value.</p> <note> <p>By default, rules with a periodic trigger are evaluated every 24 hours. To change the frequency, specify a valid value for the <code>MaximumExecutionFrequency</code> parameter.</p> </note>
    MaximumExecutionFrequency MaximumExecutionFrequency = 2;
    // <p>The type of notification that triggers AWS Config to run an evaluation for a rule. You can specify the following notification types:</p> <ul> <li> <p> <code>ConfigurationItemChangeNotification</code> - Triggers an evaluation when AWS Config delivers a configuration item as a result of a resource change.</p> </li> <li> <p> <code>OversizedConfigurationItemChangeNotification</code> - Triggers an evaluation when AWS Config delivers an oversized configuration item. AWS Config may generate this notification type when a resource changes and the notification exceeds the maximum size allowed by Amazon SNS.</p> </li> <li> <p> <code>ScheduledNotification</code> - Triggers a periodic evaluation at the frequency specified for <code>MaximumExecutionFrequency</code>.</p> </li> <li> <p> <code>ConfigurationSnapshotDeliveryCompleted</code> - Triggers a periodic evaluation when AWS Config delivers a configuration snapshot.</p> </li> </ul> <p>If you want your custom rule to be triggered by configuration changes, specify both <code>ConfigurationItemChangeNotification</code> and <code>OversizedConfigurationItemChangeNotification</code>. </p>
    MessageType MessageType = 3;
}

repeated SourceDetail SourceDetails = 1

message StartConfigRulesEvaluationRequest {
    // The list of names of Config rules that you want to run evaluations for.
    array ConfigRuleNames = 1;
}

message StartConfigRulesEvaluationResponse {
}

message StartConfigurationRecorderRequest {
    // The name of the recorder object that records each configuration change made to the resources.
    string ConfigurationRecorderName = 1;
}

message StopConfigurationRecorderRequest {
    // The name of the recorder object that records each configuration change made to the resources.
    string ConfigurationRecorderName = 1;
}

message SupplementaryConfiguration {
    string key = 1;
    string value = 2;
}
repeated SupplementaryConfiguration SupplementaryConfiguration = 1





message Tag {
    string key = 1;
    string value = 2;
}
repeated Tag Tags = 1

message ValidationException {
}

service AWSConfigService {
    // <p>Deletes the specified AWS Config rule and all of its evaluation results.</p> <p>AWS Config sets the state of a rule to <code>DELETING</code> until the deletion is complete. You cannot update a rule while it is in this state. If you make a <code>PutConfigRule</code> or <code>DeleteConfigRule</code> request for the rule, you will receive a <code>ResourceInUseException</code>.</p> <p>You can check the state of a rule by using the <code>DescribeConfigRules</code> request.</p>
    rpc Post(PostRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//"
        body: "body"
      };
    }
    // <p>Deletes the configuration recorder.</p> <p>After the configuration recorder is deleted, AWS Config will not record resource configuration changes until you create a new configuration recorder.</p> <p>This action does not delete the configuration information that was previously recorded. You will be able to access the previously recorded information by using the <code>GetResourceConfigHistory</code> action, but you will not be able to access this information in the AWS Config console until you create a new configuration recorder.</p>
    rpc Post#DeleteConfigurationRecorder(Post#DeleteConfigurationRecorderRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#DeleteConfigurationRecorder"
        body: "body"
      };
    }
    // <p>Deletes the delivery channel.</p> <p>Before you can delete the delivery channel, you must stop the configuration recorder by using the <a>StopConfigurationRecorder</a> action.</p>
    rpc Post#DeleteDeliveryChannel(Post#DeleteDeliveryChannelRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#DeleteDeliveryChannel"
        body: "body"
      };
    }
    // Deletes the evaluation results for the specified Config rule. You can specify one Config rule per request. After you delete the evaluation results, you can call the <a>StartConfigRulesEvaluation</a> API to start evaluating your AWS resources against the rule.
    rpc Post#DeleteEvaluationResults(Post#DeleteEvaluationResultsRequest) returns (DeleteEvaluationResultsResponse) {
      option (google.api.http) = {
        post: "//#DeleteEvaluationResults"
        body: "body"
      };
    }
    // <p>Schedules delivery of a configuration snapshot to the Amazon S3 bucket in the specified delivery channel. After the delivery has started, AWS Config sends following notifications using an Amazon SNS topic that you have specified.</p> <ul> <li> <p>Notification of starting the delivery.</p> </li> <li> <p>Notification of delivery completed, if the delivery was successfully completed.</p> </li> <li> <p>Notification of delivery failure, if the delivery failed to complete.</p> </li> </ul>
    rpc Post#DeliverConfigSnapshot(Post#DeliverConfigSnapshotRequest) returns (DeliverConfigSnapshotResponse) {
      option (google.api.http) = {
        post: "//#DeliverConfigSnapshot"
        body: "body"
      };
    }
    // <p>Indicates whether the specified AWS Config rules are compliant. If a rule is noncompliant, this action returns the number of AWS resources that do not comply with the rule.</p> <p>A rule is compliant if all of the evaluated resources comply with it, and it is noncompliant if any of these resources do not comply.</p> <p>If AWS Config has no current evaluation results for the rule, it returns <code>INSUFFICIENT_DATA</code>. This result might indicate one of the following conditions:</p> <ul> <li> <p>AWS Config has never invoked an evaluation for the rule. To check whether it has, use the <code>DescribeConfigRuleEvaluationStatus</code> action to get the <code>LastSuccessfulInvocationTime</code> and <code>LastFailedInvocationTime</code>.</p> </li> <li> <p>The rule's AWS Lambda function is failing to send evaluation results to AWS Config. Verify that the role that you assigned to your configuration recorder includes the <code>config:PutEvaluations</code> permission. If the rule is a custom rule, verify that the AWS Lambda execution role includes the <code>config:PutEvaluations</code> permission.</p> </li> <li> <p>The rule's AWS Lambda function has returned <code>NOT_APPLICABLE</code> for all evaluation results. This can occur if the resources were deleted or removed from the rule's scope.</p> </li> </ul>
    rpc Post#DescribeComplianceByConfigRule(Post#DescribeComplianceByConfigRuleRequest) returns (DescribeComplianceByConfigRuleResponse) {
      option (google.api.http) = {
        post: "//#DescribeComplianceByConfigRule"
        body: "body"
      };
    }
    // <p>Indicates whether the specified AWS resources are compliant. If a resource is noncompliant, this action returns the number of AWS Config rules that the resource does not comply with.</p> <p>A resource is compliant if it complies with all the AWS Config rules that evaluate it. It is noncompliant if it does not comply with one or more of these rules.</p> <p>If AWS Config has no current evaluation results for the resource, it returns <code>INSUFFICIENT_DATA</code>. This result might indicate one of the following conditions about the rules that evaluate the resource:</p> <ul> <li> <p>AWS Config has never invoked an evaluation for the rule. To check whether it has, use the <code>DescribeConfigRuleEvaluationStatus</code> action to get the <code>LastSuccessfulInvocationTime</code> and <code>LastFailedInvocationTime</code>.</p> </li> <li> <p>The rule's AWS Lambda function is failing to send evaluation results to AWS Config. Verify that the role that you assigned to your configuration recorder includes the <code>config:PutEvaluations</code> permission. If the rule is a custom rule, verify that the AWS Lambda execution role includes the <code>config:PutEvaluations</code> permission.</p> </li> <li> <p>The rule's AWS Lambda function has returned <code>NOT_APPLICABLE</code> for all evaluation results. This can occur if the resources were deleted or removed from the rule's scope.</p> </li> </ul>
    rpc Post#DescribeComplianceByResource(Post#DescribeComplianceByResourceRequest) returns (DescribeComplianceByResourceResponse) {
      option (google.api.http) = {
        post: "//#DescribeComplianceByResource"
        body: "body"
      };
    }
    // Returns status information for each of your AWS managed Config rules. The status includes information such as the last time AWS Config invoked the rule, the last time AWS Config failed to invoke the rule, and the related error for the last failure.
    rpc Post#DescribeConfigRuleEvaluationStatus(Post#DescribeConfigRuleEvaluationStatusRequest) returns (DescribeConfigRuleEvaluationStatusResponse) {
      option (google.api.http) = {
        post: "//#DescribeConfigRuleEvaluationStatus"
        body: "body"
      };
    }
    // Returns details about your AWS Config rules.
    rpc Post#DescribeConfigRules(Post#DescribeConfigRulesRequest) returns (DescribeConfigRulesResponse) {
      option (google.api.http) = {
        post: "//#DescribeConfigRules"
        body: "body"
      };
    }
    // <p>Returns the current status of the specified configuration recorder. If a configuration recorder is not specified, this action returns the status of all configuration recorder associated with the account.</p> <note> <p>Currently, you can specify only one configuration recorder per region in your account.</p> </note>
    rpc Post#DescribeConfigurationRecorderStatus(Post#DescribeConfigurationRecorderStatusRequest) returns (DescribeConfigurationRecorderStatusResponse) {
      option (google.api.http) = {
        post: "//#DescribeConfigurationRecorderStatus"
        body: "body"
      };
    }
    // <p>Returns the details for the specified configuration recorders. If the configuration recorder is not specified, this action returns the details for all configuration recorders associated with the account.</p> <note> <p>Currently, you can specify only one configuration recorder per region in your account.</p> </note>
    rpc Post#DescribeConfigurationRecorders(Post#DescribeConfigurationRecordersRequest) returns (DescribeConfigurationRecordersResponse) {
      option (google.api.http) = {
        post: "//#DescribeConfigurationRecorders"
        body: "body"
      };
    }
    // <p>Returns the current status of the specified delivery channel. If a delivery channel is not specified, this action returns the current status of all delivery channels associated with the account.</p> <note> <p>Currently, you can specify only one delivery channel per region in your account.</p> </note>
    rpc Post#DescribeDeliveryChannelStatus(Post#DescribeDeliveryChannelStatusRequest) returns (DescribeDeliveryChannelStatusResponse) {
      option (google.api.http) = {
        post: "//#DescribeDeliveryChannelStatus"
        body: "body"
      };
    }
    // <p>Returns details about the specified delivery channel. If a delivery channel is not specified, this action returns the details of all delivery channels associated with the account.</p> <note> <p>Currently, you can specify only one delivery channel per region in your account.</p> </note>
    rpc Post#DescribeDeliveryChannels(Post#DescribeDeliveryChannelsRequest) returns (DescribeDeliveryChannelsResponse) {
      option (google.api.http) = {
        post: "//#DescribeDeliveryChannels"
        body: "body"
      };
    }
    // Returns the evaluation results for the specified AWS Config rule. The results indicate which AWS resources were evaluated by the rule, when each resource was last evaluated, and whether each resource complies with the rule.
    rpc Post#GetComplianceDetailsByConfigRule(Post#GetComplianceDetailsByConfigRuleRequest) returns (GetComplianceDetailsByConfigRuleResponse) {
      option (google.api.http) = {
        post: "//#GetComplianceDetailsByConfigRule"
        body: "body"
      };
    }
    // Returns the evaluation results for the specified AWS resource. The results indicate which AWS Config rules were used to evaluate the resource, when each rule was last used, and whether the resource complies with each rule.
    rpc Post#GetComplianceDetailsByResource(Post#GetComplianceDetailsByResourceRequest) returns (GetComplianceDetailsByResourceResponse) {
      option (google.api.http) = {
        post: "//#GetComplianceDetailsByResource"
        body: "body"
      };
    }
    // Returns the number of AWS Config rules that are compliant and noncompliant, up to a maximum of 25 for each.
    rpc Post#GetComplianceSummaryByConfigRule(Post#GetComplianceSummaryByConfigRuleRequest) returns (GetComplianceSummaryByConfigRuleResponse) {
      option (google.api.http) = {
        post: "//#GetComplianceSummaryByConfigRule"
      };
    }
    // Returns the number of resources that are compliant and the number that are noncompliant. You can specify one or more resource types to get these numbers for each resource type. The maximum number returned is 100.
    rpc Post#GetComplianceSummaryByResourceType(Post#GetComplianceSummaryByResourceTypeRequest) returns (GetComplianceSummaryByResourceTypeResponse) {
      option (google.api.http) = {
        post: "//#GetComplianceSummaryByResourceType"
        body: "body"
      };
    }
    // <p>Returns the resource types, the number of each resource type, and the total number of resources that AWS Config is recording in this region for your AWS account. </p> <p class="title"> <b>Example</b> </p> <ol> <li> <p>AWS Config is recording three resource types in the US East (Ohio) Region for your account: 25 EC2 instances, 20 IAM users, and 15 S3 buckets.</p> </li> <li> <p>You make a call to the <code>GetDiscoveredResourceCounts</code> action and specify that you want all resource types. </p> </li> <li> <p>AWS Config returns the following:</p> <ul> <li> <p>The resource types (EC2 instances, IAM users, and S3 buckets)</p> </li> <li> <p>The number of each resource type (25, 20, and 15)</p> </li> <li> <p>The total number of all resources (60)</p> </li> </ul> </li> </ol> <p>The response is paginated. By default, AWS Config lists 100 <a>ResourceCount</a> objects on each page. You can customize this number with the <code>limit</code> parameter. The response includes a <code>nextToken</code> string. To get the next page of results, run the request again and specify the string for the <code>nextToken</code> parameter.</p> <note> <p>If you make a call to the <a>GetDiscoveredResourceCounts</a> action, you may not immediately receive resource counts in the following situations:</p> <ul> <li> <p>You are a new AWS Config customer</p> </li> <li> <p>You just enabled resource recording</p> </li> </ul> <p>It may take a few minutes for AWS Config to record and count your resources. Wait a few minutes and then retry the <a>GetDiscoveredResourceCounts</a> action. </p> </note>
    rpc Post#GetDiscoveredResourceCounts(Post#GetDiscoveredResourceCountsRequest) returns (GetDiscoveredResourceCountsResponse) {
      option (google.api.http) = {
        post: "//#GetDiscoveredResourceCounts"
        body: "body"
      };
    }
    // <p>Returns a list of configuration items for the specified resource. The list contains details about each state of the resource during the specified time interval.</p> <p>The response is paginated. By default, AWS Config returns a limit of 10 configuration items per page. You can customize this number with the <code>limit</code> parameter. The response includes a <code>nextToken</code> string. To get the next page of results, run the request again and specify the string for the <code>nextToken</code> parameter.</p> <note> <p>Each call to the API is limited to span a duration of seven days. It is likely that the number of records returned is smaller than the specified <code>limit</code>. In such cases, you can make another call, using the <code>nextToken</code>.</p> </note>
    rpc Post#GetResourceConfigHistory(Post#GetResourceConfigHistoryRequest) returns (GetResourceConfigHistoryResponse) {
      option (google.api.http) = {
        post: "//#GetResourceConfigHistory"
        body: "body"
      };
    }
    // <p>Accepts a resource type and returns a list of resource identifiers for the resources of that type. A resource identifier includes the resource type, ID, and (if available) the custom resource name. The results consist of resources that AWS Config has discovered, including those that AWS Config is not currently recording. You can narrow the results to include only resources that have specific resource IDs or a resource name.</p> <note> <p>You can specify either resource IDs or a resource name but not both in the same request.</p> </note> <p>The response is paginated. By default, AWS Config lists 100 resource identifiers on each page. You can customize this number with the <code>limit</code> parameter. The response includes a <code>nextToken</code> string. To get the next page of results, run the request again and specify the string for the <code>nextToken</code> parameter.</p>
    rpc Post#ListDiscoveredResources(Post#ListDiscoveredResourcesRequest) returns (ListDiscoveredResourcesResponse) {
      option (google.api.http) = {
        post: "//#ListDiscoveredResources"
        body: "body"
      };
    }
    // <p>Adds or updates an AWS Config rule for evaluating whether your AWS resources comply with your desired configurations.</p> <p>You can use this action for custom Config rules and AWS managed Config rules. A custom Config rule is a rule that you develop and maintain. An AWS managed Config rule is a customizable, predefined rule that AWS Config provides.</p> <p>If you are adding a new custom Config rule, you must first create the AWS Lambda function that the rule invokes to evaluate your resources. When you use the <code>PutConfigRule</code> action to add the rule to AWS Config, you must specify the Amazon Resource Name (ARN) that AWS Lambda assigns to the function. Specify the ARN for the <code>SourceIdentifier</code> key. This key is part of the <code>Source</code> object, which is part of the <code>ConfigRule</code> object. </p> <p>If you are adding an AWS managed Config rule, specify the rule's identifier for the <code>SourceIdentifier</code> key. To reference AWS managed Config rule identifiers, see <a href="http://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_use-managed-rules.html">About AWS Managed Config Rules</a>.</p> <p>For any new rule that you add, specify the <code>ConfigRuleName</code> in the <code>ConfigRule</code> object. Do not specify the <code>ConfigRuleArn</code> or the <code>ConfigRuleId</code>. These values are generated by AWS Config for new rules.</p> <p>If you are updating a rule that you added previously, you can specify the rule by <code>ConfigRuleName</code>, <code>ConfigRuleId</code>, or <code>ConfigRuleArn</code> in the <code>ConfigRule</code> data type that you use in this request.</p> <p>The maximum number of rules that AWS Config supports is 50.</p> <p>For more information about requesting a rule limit increase, see <a href="http://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html#limits_config">AWS Config Limits</a> in the <i>AWS General Reference Guide</i>.</p> <p>For more information about developing and using AWS Config rules, see <a href="http://docs.aws.amazon.com/config/latest/developerguide/evaluate-config.html">Evaluating AWS Resource Configurations with AWS Config</a> in the <i>AWS Config Developer Guide</i>.</p>
    rpc Post#PutConfigRule(Post#PutConfigRuleRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#PutConfigRule"
        body: "body"
      };
    }
    // <p>Creates a new configuration recorder to record the selected resource configurations.</p> <p>You can use this action to change the role <code>roleARN</code> and/or the <code>recordingGroup</code> of an existing recorder. To change the role, call the action on the existing configuration recorder and specify a role.</p> <note> <p>Currently, you can specify only one configuration recorder per region in your account.</p> <p>If <code>ConfigurationRecorder</code> does not have the <b>recordingGroup</b> parameter specified, the default is to record all supported resource types.</p> </note>
    rpc Post#PutConfigurationRecorder(Post#PutConfigurationRecorderRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#PutConfigurationRecorder"
        body: "body"
      };
    }
    // <p>Creates a delivery channel object to deliver configuration information to an Amazon S3 bucket and Amazon SNS topic.</p> <p>Before you can create a delivery channel, you must create a configuration recorder.</p> <p>You can use this action to change the Amazon S3 bucket or an Amazon SNS topic of the existing delivery channel. To change the Amazon S3 bucket or an Amazon SNS topic, call this action and specify the changed values for the S3 bucket and the SNS topic. If you specify a different value for either the S3 bucket or the SNS topic, this action will keep the existing value for the parameter that is not changed.</p> <note> <p>You can have only one delivery channel per region in your account.</p> </note>
    rpc Post#PutDeliveryChannel(Post#PutDeliveryChannelRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#PutDeliveryChannel"
        body: "body"
      };
    }
    // Used by an AWS Lambda function to deliver evaluation results to AWS Config. This action is required in every AWS Lambda function that is invoked by an AWS Config rule.
    rpc Post#PutEvaluations(Post#PutEvaluationsRequest) returns (PutEvaluationsResponse) {
      option (google.api.http) = {
        post: "//#PutEvaluations"
        body: "body"
      };
    }
    // <p>Runs an on-demand evaluation for the specified Config rules against the last known configuration state of the resources. Use <code>StartConfigRulesEvaluation</code> when you want to test a rule that you updated is working as expected. <code>StartConfigRulesEvaluation</code> does not re-record the latest configuration state for your resources; it re-runs an evaluation against the last known state of your resources. </p> <p>You can specify up to 25 Config rules per request. </p> <p>An existing <code>StartConfigRulesEvaluation</code> call must complete for the specified rules before you can call the API again. If you chose to have AWS Config stream to an Amazon SNS topic, you will receive a <code>ConfigRuleEvaluationStarted</code> notification when the evaluation starts.</p> <note> <p>You don't need to call the <code>StartConfigRulesEvaluation</code> API to run an evaluation for a new rule. When you create a new rule, AWS Config automatically evaluates your resources against the rule. </p> </note> <p>The <code>StartConfigRulesEvaluation</code> API is useful if you want to run on-demand evaluations, such as the following example:</p> <ol> <li> <p>You have a custom rule that evaluates your IAM resources every 24 hours.</p> </li> <li> <p>You update your Lambda function to add additional conditions to your rule.</p> </li> <li> <p>Instead of waiting for the next periodic evaluation, you call the <code>StartConfigRulesEvaluation</code> API.</p> </li> <li> <p>AWS Config invokes your Lambda function and evaluates your IAM resources.</p> </li> <li> <p>Your custom rule will still run periodic evaluations every 24 hours.</p> </li> </ol>
    rpc Post#StartConfigRulesEvaluation(Post#StartConfigRulesEvaluationRequest) returns (StartConfigRulesEvaluationResponse) {
      option (google.api.http) = {
        post: "//#StartConfigRulesEvaluation"
        body: "body"
      };
    }
    // <p>Starts recording configurations of the AWS resources you have selected to record in your AWS account.</p> <p>You must have created at least one delivery channel to successfully start the configuration recorder.</p>
    rpc Post#StartConfigurationRecorder(Post#StartConfigurationRecorderRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#StartConfigurationRecorder"
        body: "body"
      };
    }
    // Stops recording configurations of the AWS resources you have selected to record in your AWS account.
    rpc Post#StopConfigurationRecorder(Post#StopConfigurationRecorderRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#StopConfigurationRecorder"
        body: "body"
      };
    }
}

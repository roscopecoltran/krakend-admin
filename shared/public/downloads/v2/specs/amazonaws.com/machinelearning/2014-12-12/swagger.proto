syntax = "proto3";

import "google/api/annotations.proto";

package amazonmachinelearning;

message PostRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AddTagsInput body = 10;
}

message Post#CreateBatchPredictionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateBatchPredictionInput body = 10;
}

message Post#CreateDataSourceFromRDSRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateDataSourceFromRDSInput body = 10;
}

message Post#CreateDataSourceFromRedshiftRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateDataSourceFromRedshiftInput body = 10;
}

message Post#CreateDataSourceFromS3Request {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateDataSourceFromS3Input body = 10;
}

message Post#CreateEvaluationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateEvaluationInput body = 10;
}

message Post#CreateMLModelRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateMLModelInput body = 10;
}

message Post#CreateRealtimeEndpointRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateRealtimeEndpointInput body = 10;
}

message Post#DeleteBatchPredictionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteBatchPredictionInput body = 10;
}

message Post#DeleteDataSourceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteDataSourceInput body = 10;
}

message Post#DeleteEvaluationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteEvaluationInput body = 10;
}

message Post#DeleteMLModelRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteMLModelInput body = 10;
}

message Post#DeleteRealtimeEndpointRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteRealtimeEndpointInput body = 10;
}

message Post#DeleteTagsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteTagsInput body = 10;
}

message Post#DescribeBatchPredictionsRequest {
    string Action = 1;
    // Pagination limit
    string Limit = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    DescribeBatchPredictionsInput body = 12;
}

message Post#DescribeDataSourcesRequest {
    string Action = 1;
    // Pagination limit
    string Limit = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    DescribeDataSourcesInput body = 12;
}

message Post#DescribeEvaluationsRequest {
    string Action = 1;
    // Pagination limit
    string Limit = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    DescribeEvaluationsInput body = 12;
}

message Post#DescribeMLModelsRequest {
    string Action = 1;
    // Pagination limit
    string Limit = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    DescribeMLModelsInput body = 12;
}

message Post#DescribeTagsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeTagsInput body = 10;
}

message Post#GetBatchPredictionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetBatchPredictionInput body = 10;
}

message Post#GetDataSourceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetDataSourceInput body = 10;
}

message Post#GetEvaluationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetEvaluationInput body = 10;
}

message Post#GetMLModelRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetMLModelInput body = 10;
}

message Post#PredictRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    PredictInput body = 10;
}

message Post#UpdateBatchPredictionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateBatchPredictionInput body = 10;
}

message Post#UpdateDataSourceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateDataSourceInput body = 10;
}

message Post#UpdateEvaluationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateEvaluationInput body = 10;
}

message Post#UpdateMLModelRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateMLModelInput body = 10;
}

message AddTagsInput {
    // The ID of the ML object to tag. For example, <code>exampleModelId</code>.
    string ResourceId = 1;
    // The type of the ML object to tag.
    TaggableResourceType ResourceType = 2;
    // The key-value pairs to use to create tags. If you specify a key without specifying a value, Amazon ML creates a tag with the specified key and a value of null.
    array Tags = 3;
}

message AddTagsOutput {
    // The ID of the ML object that was tagged.
    string ResourceId = 1;
    // The type of the ML object that was tagged.
    TaggableResourceType ResourceType = 2;
}

enum Algorithm {
    SGD = 0;
}

message BatchPrediction {
    // The ID of the <code>DataSource</code> that points to the group of observations to predict.
    string BatchPredictionDataSourceId = 1;
    // The ID assigned to the <code>BatchPrediction</code> at creation. This value should be identical to the value of the <code>BatchPredictionID</code> in the request.
    string BatchPredictionId = 2;
    integer ComputeTime = 3;
    // The time that the <code>BatchPrediction</code> was created. The time is expressed in epoch time.
    string CreatedAt = 4;
    // The AWS user account that invoked the <code>BatchPrediction</code>. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.
    string CreatedByIamUser = 5;
    string FinishedAt = 6;
    // The location of the data file or directory in Amazon Simple Storage Service (Amazon S3).
    string InputDataLocationS3 = 7;
    integer InvalidRecordCount = 8;
    // The time of the most recent edit to the <code>BatchPrediction</code>. The time is expressed in epoch time.
    string LastUpdatedAt = 9;
    // The ID of the <code>MLModel</code> that generated predictions for the <code>BatchPrediction</code> request.
    string MLModelId = 10;
    // A description of the most recent details about processing the batch prediction request.
    string Message = 11;
    // A user-supplied name or description of the <code>BatchPrediction</code>.
    string Name = 12;
    // The location of an Amazon S3 bucket or directory to receive the operation results. The following substrings are not allowed in the <code>s3 key</code> portion of the <code>outputURI</code> field: ':', '//', '/./', '/../'.
    string OutputUri = 13;
    string StartedAt = 14;
    // <p>The status of the <code>BatchPrediction</code>. This element can have one of the following values:</p> <ul> <li> <code>PENDING</code> - Amazon Machine Learning (Amazon ML) submitted a request to generate predictions for a batch of observations.</li> <li> <code>INPROGRESS</code> - The process is underway.</li> <li> <code>FAILED</code> - The request to perform a batch prediction did not run to completion. It is not usable.</li> <li> <code>COMPLETED</code> - The batch prediction process completed successfully.</li> <li> <code>DELETED</code> - The <code>BatchPrediction</code> is marked as deleted. It is not usable.</li> </ul>
    EntityStatus Status = 15;
    integer TotalRecordCount = 16;
}

enum BatchPredictionFilterVariable {
    CREATEDAT = 0;
    LASTUPDATEDAT = 1;
    STATUS = 2;
    NAME = 3;
    IAMUSER = 4;
    MLMODELID = 5;
    DATASOURCEID = 6;
    DATAURI = 7;
}

repeated BatchPrediction BatchPredictions = 1





message CreateBatchPredictionInput {
    // The ID of the <code>DataSource</code> that points to the group of observations to predict.
    string BatchPredictionDataSourceId = 1;
    // A user-supplied ID that uniquely identifies the <code>BatchPrediction</code>.
    string BatchPredictionId = 2;
    // A user-supplied name or description of the <code>BatchPrediction</code>. <code>BatchPredictionName</code> can only use the UTF-8 character set.
    string BatchPredictionName = 3;
    // The ID of the <code>MLModel</code> that will generate predictions for the group of observations.
    string MLModelId = 4;
    // <p>The location of an Amazon Simple Storage Service (Amazon S3) bucket or directory to store the batch prediction results. The following substrings are not allowed in the <code>s3 key</code> portion of the <code>outputURI</code> field: ':', '//', '/./', '/../'.</p> <p>Amazon ML needs permissions to store and retrieve the logs on your behalf. For information about how to set permissions, see the <a href="http://docs.aws.amazon.com/machine-learning/latest/dg">Amazon Machine Learning Developer Guide</a>.</p>
    string OutputUri = 5;
}

message CreateBatchPredictionOutput {
    // A user-supplied ID that uniquely identifies the <code>BatchPrediction</code>. This value is identical to the value of the <code>BatchPredictionId</code> in the request.
    string BatchPredictionId = 1;
}

message CreateDataSourceFromRDSInput {
    // The compute statistics for a <code>DataSource</code>. The statistics are generated from the observation data referenced by a <code>DataSource</code>. Amazon ML uses the statistics internally during <code>MLModel</code> training. This parameter must be set to <code>true</code> if the <code></code>DataSource<code></code> needs to be used for <code>MLModel</code> training.
    boolean ComputeStatistics = 1;
    // A user-supplied ID that uniquely identifies the <code>DataSource</code>. Typically, an Amazon Resource Number (ARN) becomes the ID for a <code>DataSource</code>.
    string DataSourceId = 2;
    // A user-supplied name or description of the <code>DataSource</code>.
    string DataSourceName = 3;
    // <p>The data specification of an Amazon RDS <code>DataSource</code>:</p> <ul> <li><p>DatabaseInformation - <ul> <li> <code>DatabaseName</code> - The name of the Amazon RDS database.</li> <li> <code>InstanceIdentifier </code> - A unique identifier for the Amazon RDS database instance.</li> </ul> </p></li> <li><p>DatabaseCredentials - AWS Identity and Access Management (IAM) credentials that are used to connect to the Amazon RDS database.</p></li> <li><p>ResourceRole - A role (DataPipelineDefaultResourceRole) assumed by an EC2 instance to carry out the copy task from Amazon RDS to Amazon Simple Storage Service (Amazon S3). For more information, see <a href="http://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-iam-roles.html">Role templates</a> for data pipelines.</p></li> <li><p>ServiceRole - A role (DataPipelineDefaultRole) assumed by the AWS Data Pipeline service to monitor the progress of the copy task from Amazon RDS to Amazon S3. For more information, see <a href="http://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-iam-roles.html">Role templates</a> for data pipelines.</p></li> <li><p>SecurityInfo - The security information to use to access an RDS DB instance. You need to set up appropriate ingress rules for the security entity IDs provided to allow access to the Amazon RDS instance. Specify a [<code>SubnetId</code>, <code>SecurityGroupIds</code>] pair for a VPC-based RDS DB instance.</p></li> <li><p>SelectSqlQuery - A query that is used to retrieve the observation data for the <code>Datasource</code>.</p></li> <li><p>S3StagingLocation - The Amazon S3 location for staging Amazon RDS data. The data retrieved from Amazon RDS using <code>SelectSqlQuery</code> is stored in this location.</p></li> <li><p>DataSchemaUri - The Amazon S3 location of the <code>DataSchema</code>.</p></li> <li><p>DataSchema - A JSON string representing the schema. This is not required if <code>DataSchemaUri</code> is specified. </p></li> <li> <p>DataRearrangement - A JSON string that represents the splitting and rearrangement requirements for the <code>Datasource</code>. </p> <br> <p> Sample - <code> "{\"splitting\":{\"percentBegin\":10,\"percentEnd\":60}}"</code> </p> </li> </ul>
    RDSDataSpec RDSData = 4;
    // <p>The role that Amazon ML assumes on behalf of the user to create and activate a data pipeline in the user's account and copy data using the <code>SelectSqlQuery</code> query from Amazon RDS to Amazon S3.</p> <p> </p>
    string RoleARN = 5;
}

message CreateDataSourceFromRDSOutput {
    // A user-supplied ID that uniquely identifies the datasource. This value should be identical to the value of the <code>DataSourceID</code> in the request.
    string DataSourceId = 1;
}

message CreateDataSourceFromRedshiftInput {
    // The compute statistics for a <code>DataSource</code>. The statistics are generated from the observation data referenced by a <code>DataSource</code>. Amazon ML uses the statistics internally during <code>MLModel</code> training. This parameter must be set to <code>true</code> if the <code>DataSource</code> needs to be used for <code>MLModel</code> training.
    boolean ComputeStatistics = 1;
    // A user-supplied ID that uniquely identifies the <code>DataSource</code>.
    string DataSourceId = 2;
    // A user-supplied name or description of the <code>DataSource</code>.
    string DataSourceName = 3;
    // <p>The data specification of an Amazon Redshift <code>DataSource</code>:</p> <ul> <li><p>DatabaseInformation - <ul> <li> <code>DatabaseName</code> - The name of the Amazon Redshift database. </li> <li> <code> ClusterIdentifier</code> - The unique ID for the Amazon Redshift cluster.</li> </ul></p></li> <li><p>DatabaseCredentials - The AWS Identity and Access Management (IAM) credentials that are used to connect to the Amazon Redshift database.</p></li> <li><p>SelectSqlQuery - The query that is used to retrieve the observation data for the <code>Datasource</code>.</p></li> <li><p>S3StagingLocation - The Amazon Simple Storage Service (Amazon S3) location for staging Amazon Redshift data. The data retrieved from Amazon Redshift using the <code>SelectSqlQuery</code> query is stored in this location.</p></li> <li><p>DataSchemaUri - The Amazon S3 location of the <code>DataSchema</code>.</p></li> <li><p>DataSchema - A JSON string representing the schema. This is not required if <code>DataSchemaUri</code> is specified. </p></li> <li> <p>DataRearrangement - A JSON string that represents the splitting and rearrangement requirements for the <code>DataSource</code>.</p> <p> Sample - <code> "{\"splitting\":{\"percentBegin\":10,\"percentEnd\":60}}"</code> </p> </li> </ul>
    RedshiftDataSpec DataSpec = 4;
    // <p>A fully specified role Amazon Resource Name (ARN). Amazon ML assumes the role on behalf of the user to create the following: </p> <p> <ul> <li><p>A security group to allow Amazon ML to execute the <code>SelectSqlQuery</code> query on an Amazon Redshift cluster</p></li> <li><p>An Amazon S3 bucket policy to grant Amazon ML read/write permissions on the <code>S3StagingLocation</code></p></li> </ul> </p>
    string RoleARN = 5;
}

message CreateDataSourceFromRedshiftOutput {
    // A user-supplied ID that uniquely identifies the datasource. This value should be identical to the value of the <code>DataSourceID</code> in the request.
    string DataSourceId = 1;
}

message CreateDataSourceFromS3Input {
    // The compute statistics for a <code>DataSource</code>. The statistics are generated from the observation data referenced by a <code>DataSource</code>. Amazon ML uses the statistics internally during <code>MLModel</code> training. This parameter must be set to <code>true</code> if the <code></code>DataSource<code></code> needs to be used for <code>MLModel</code> training.
    boolean ComputeStatistics = 1;
    // A user-supplied identifier that uniquely identifies the <code>DataSource</code>.
    string DataSourceId = 2;
    // A user-supplied name or description of the <code>DataSource</code>.
    string DataSourceName = 3;
    // <p>The data specification of a <code>DataSource</code>:</p> <ul> <li><p>DataLocationS3 - The Amazon S3 location of the observation data.</p></li> <li><p>DataSchemaLocationS3 - The Amazon S3 location of the <code>DataSchema</code>.</p></li> <li><p>DataSchema - A JSON string representing the schema. This is not required if <code>DataSchemaUri</code> is specified. </p></li> <li> <p>DataRearrangement - A JSON string that represents the splitting and rearrangement requirements for the <code>Datasource</code>. </p> <p> Sample - <code> "{\"splitting\":{\"percentBegin\":10,\"percentEnd\":60}}"</code> </p> </li> </ul>
    S3DataSpec DataSpec = 4;
}

message CreateDataSourceFromS3Output {
    // A user-supplied ID that uniquely identifies the <code>DataSource</code>. This value should be identical to the value of the <code>DataSourceID</code> in the request.
    string DataSourceId = 1;
}

message CreateEvaluationInput {
    // The ID of the <code>DataSource</code> for the evaluation. The schema of the <code>DataSource</code> must match the schema used to create the <code>MLModel</code>.
    string EvaluationDataSourceId = 1;
    // A user-supplied ID that uniquely identifies the <code>Evaluation</code>.
    string EvaluationId = 2;
    // A user-supplied name or description of the <code>Evaluation</code>.
    string EvaluationName = 3;
    // <p>The ID of the <code>MLModel</code> to evaluate.</p> <p>The schema used in creating the <code>MLModel</code> must match the schema of the <code>DataSource</code> used in the <code>Evaluation</code>.</p>
    string MLModelId = 4;
}

message CreateEvaluationOutput {
    // The user-supplied ID that uniquely identifies the <code>Evaluation</code>. This value should be identical to the value of the <code>EvaluationId</code> in the request.
    string EvaluationId = 1;
}

message CreateMLModelInput {
    // A user-supplied ID that uniquely identifies the <code>MLModel</code>.
    string MLModelId = 1;
    // A user-supplied name or description of the <code>MLModel</code>.
    string MLModelName = 2;
    // <p>The category of supervised learning that this <code>MLModel</code> will address. Choose from the following types:</p> <ul> <li>Choose <code>REGRESSION</code> if the <code>MLModel</code> will be used to predict a numeric value.</li> <li>Choose <code>BINARY</code> if the <code>MLModel</code> result has two possible values.</li> <li>Choose <code>MULTICLASS</code> if the <code>MLModel</code> result has a limited number of values. </li> </ul> <p> For more information, see the <a href="http://docs.aws.amazon.com/machine-learning/latest/dg">Amazon Machine Learning Developer Guide</a>.</p>
    MLModelType MLModelType = 3;
    // <p>A list of the training parameters in the <code>MLModel</code>. The list is implemented as a map of key-value pairs.</p> <p>The following is the current set of training parameters: </p> <ul> <li> <p><code>sgd.maxMLModelSizeInBytes</code> - The maximum allowed size of the model. Depending on the input data, the size of the model might affect its performance.</p> <p> The value is an integer that ranges from <code>100000</code> to <code>2147483648</code>. The default value is <code>33554432</code>.</p> </li> <li><p><code>sgd.maxPasses</code> - The number of times that the training process traverses the observations to build the <code>MLModel</code>. The value is an integer that ranges from <code>1</code> to <code>10000</code>. The default value is <code>10</code>.</p></li> <li> <p><code>sgd.shuffleType</code> - Whether Amazon ML shuffles the training data. Shuffling the data improves a model's ability to find the optimal solution for a variety of data types. The valid values are <code>auto</code> and <code>none</code>. The default value is <code>none</code>. We <?oxy_insert_start author="laurama" timestamp="20160329T131121-0700">strongly recommend that you shuffle your data.<?oxy_insert_end></p> </li> <li> <p><code>sgd.l1RegularizationAmount</code> - The coefficient regularization L1 norm. It controls overfitting the data by penalizing large coefficients. This tends to drive coefficients to zero, resulting in a sparse feature set. If you use this parameter, start by specifying a small value, such as <code>1.0E-08</code>.</p> <p>The value is a double that ranges from <code>0</code> to <code>MAX_DOUBLE</code>. The default is to not use L1 normalization. This parameter can't be used when <code>L2</code> is specified. Use this parameter sparingly.</p> </li> <li> <p><code>sgd.l2RegularizationAmount</code> - The coefficient regularization L2 norm. It controls overfitting the data by penalizing large coefficients. This tends to drive coefficients to small, nonzero values. If you use this parameter, start by specifying a small value, such as <code>1.0E-08</code>.</p> <p>The value is a double that ranges from <code>0</code> to <code>MAX_DOUBLE</code>. The default is to not use L2 normalization. This parameter can't be used when <code>L1</code> is specified. Use this parameter sparingly.</p> </li> </ul>
    array Parameters = 4;
    // The data recipe for creating the <code>MLModel</code>. You must specify either the recipe or its URI. If you don't specify a recipe or its URI, Amazon ML creates a default.
    string Recipe = 5;
    // The Amazon Simple Storage Service (Amazon S3) location and file name that contains the <code>MLModel</code> recipe. You must specify either the recipe or its URI. If you don't specify a recipe or its URI, Amazon ML creates a default.
    string RecipeUri = 6;
    // The <code>DataSource</code> that points to the training data.
    string TrainingDataSourceId = 7;
}

message CreateMLModelOutput {
    // A user-supplied ID that uniquely identifies the <code>MLModel</code>. This value should be identical to the value of the <code>MLModelId</code> in the request.
    string MLModelId = 1;
}

message CreateRealtimeEndpointInput {
    // The ID assigned to the <code>MLModel</code> during creation.
    string MLModelId = 1;
}

message CreateRealtimeEndpointOutput {
    // A user-supplied ID that uniquely identifies the <code>MLModel</code>. This value should be identical to the value of the <code>MLModelId</code> in the request.
    string MLModelId = 1;
    // The endpoint information of the <code>MLModel</code>
    RealtimeEndpointInfo RealtimeEndpointInfo = 2;
}

message DataSource {
    //  The parameter is <code>true</code> if statistics need to be generated from the observation data.
    boolean ComputeStatistics = 1;
    integer ComputeTime = 2;
    // The time that the <code>DataSource</code> was created. The time is expressed in epoch time.
    string CreatedAt = 3;
    // The AWS user account from which the <code>DataSource</code> was created. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.
    string CreatedByIamUser = 4;
    // The location and name of the data in Amazon Simple Storage Service (Amazon S3) that is used by a <code>DataSource</code>.
    string DataLocationS3 = 5;
    // A JSON string that represents the splitting and rearrangement requirement used when this <code>DataSource</code> was created.
    string DataRearrangement = 6;
    // The total number of observations contained in the data files that the <code>DataSource</code> references.
    integer DataSizeInBytes = 7;
    // The ID that is assigned to the <code>DataSource</code> during creation.
    string DataSourceId = 8;
    string FinishedAt = 9;
    // The time of the most recent edit to the <code>BatchPrediction</code>. The time is expressed in epoch time.
    string LastUpdatedAt = 10;
    // A description of the most recent details about creating the <code>DataSource</code>.
    string Message = 11;
    // A user-supplied name or description of the <code>DataSource</code>.
    string Name = 12;
    // The number of data files referenced by the <code>DataSource</code>.
    integer NumberOfFiles = 13;
    RDSMetadata RDSMetadata = 14;
    RedshiftMetadata RedshiftMetadata = 15;
    string RoleARN = 16;
    string StartedAt = 17;
    // <p>The current status of the <code>DataSource</code>. This element can have one of the following values: </p> <ul> <li>PENDING - Amazon Machine Learning (Amazon ML) submitted a request to create a <code>DataSource</code>.</li> <li>INPROGRESS - The creation process is underway.</li> <li>FAILED - The request to create a <code>DataSource</code> did not run to completion. It is not usable.</li> <li>COMPLETED - The creation process completed successfully.</li> <li>DELETED - The <code>DataSource</code> is marked as deleted. It is not usable.</li> </ul>
    EntityStatus Status = 18;
}

enum DataSourceFilterVariable {
    CREATEDAT = 0;
    LASTUPDATEDAT = 1;
    STATUS = 2;
    NAME = 3;
    DATALOCATIONS3 = 4;
    IAMUSER = 5;
}

repeated DataSource DataSources = 1

message DeleteBatchPredictionInput {
    // A user-supplied ID that uniquely identifies the <code>BatchPrediction</code>.
    string BatchPredictionId = 1;
}

message DeleteBatchPredictionOutput {
    // A user-supplied ID that uniquely identifies the <code>BatchPrediction</code>. This value should be identical to the value of the <code>BatchPredictionID</code> in the request.
    string BatchPredictionId = 1;
}

message DeleteDataSourceInput {
    // A user-supplied ID that uniquely identifies the <code>DataSource</code>.
    string DataSourceId = 1;
}

message DeleteDataSourceOutput {
    // A user-supplied ID that uniquely identifies the <code>DataSource</code>. This value should be identical to the value of the <code>DataSourceID</code> in the request.
    string DataSourceId = 1;
}

message DeleteEvaluationInput {
    // A user-supplied ID that uniquely identifies the <code>Evaluation</code> to delete.
    string EvaluationId = 1;
}

message DeleteEvaluationOutput {
    // A user-supplied ID that uniquely identifies the <code>Evaluation</code>. This value should be identical to the value of the <code>EvaluationId</code> in the request.
    string EvaluationId = 1;
}

message DeleteMLModelInput {
    // A user-supplied ID that uniquely identifies the <code>MLModel</code>.
    string MLModelId = 1;
}

message DeleteMLModelOutput {
    // A user-supplied ID that uniquely identifies the <code>MLModel</code>. This value should be identical to the value of the <code>MLModelID</code> in the request.
    string MLModelId = 1;
}

message DeleteRealtimeEndpointInput {
    // The ID assigned to the <code>MLModel</code> during creation.
    string MLModelId = 1;
}

message DeleteRealtimeEndpointOutput {
    // A user-supplied ID that uniquely identifies the <code>MLModel</code>. This value should be identical to the value of the <code>MLModelId</code> in the request.
    string MLModelId = 1;
    // The endpoint information of the <code>MLModel</code>
    RealtimeEndpointInfo RealtimeEndpointInfo = 2;
}

message DeleteTagsInput {
    // The ID of the tagged ML object. For example, <code>exampleModelId</code>.
    string ResourceId = 1;
    // The type of the tagged ML object.
    TaggableResourceType ResourceType = 2;
    // One or more tags to delete.
    array TagKeys = 3;
}

message DeleteTagsOutput {
    // The ID of the ML object from which tags were deleted.
    string ResourceId = 1;
    // The type of the ML object from which tags were deleted.
    TaggableResourceType ResourceType = 2;
}

message DescribeBatchPredictionsInput {
    // The equal to operator. The <code>BatchPrediction</code> results will have <code>FilterVariable</code> values that exactly match the value specified with <code>EQ</code>.
    string EQ = 1;
    // <p>Use one of the following variables to filter a list of <code>BatchPrediction</code>:</p> <ul> <li> <code>CreatedAt</code> - Sets the search criteria to the <code>BatchPrediction</code> creation date.</li> <li> <code>Status</code> - Sets the search criteria to the <code>BatchPrediction</code> status.</li> <li> <code>Name</code> - Sets the search criteria to the contents of the <code>BatchPrediction</code><b> </b> <code>Name</code>.</li> <li> <code>IAMUser</code> - Sets the search criteria to the user account that invoked the <code>BatchPrediction</code> creation.</li> <li> <code>MLModelId</code> - Sets the search criteria to the <code>MLModel</code> used in the <code>BatchPrediction</code>.</li> <li> <code>DataSourceId</code> - Sets the search criteria to the <code>DataSource</code> used in the <code>BatchPrediction</code>.</li> <li> <code>DataURI</code> - Sets the search criteria to the data file(s) used in the <code>BatchPrediction</code>. The URL can identify either a file or an Amazon Simple Storage Solution (Amazon S3) bucket or directory.</li> </ul>
    BatchPredictionFilterVariable FilterVariable = 2;
    // The greater than or equal to operator. The <code>BatchPrediction</code> results will have <code>FilterVariable</code> values that are greater than or equal to the value specified with <code>GE</code>.
    string GE = 3;
    // The greater than operator. The <code>BatchPrediction</code> results will have <code>FilterVariable</code> values that are greater than the value specified with <code>GT</code>.
    string GT = 4;
    // The less than or equal to operator. The <code>BatchPrediction</code> results will have <code>FilterVariable</code> values that are less than or equal to the value specified with <code>LE</code>.
    string LE = 5;
    // The less than operator. The <code>BatchPrediction</code> results will have <code>FilterVariable</code> values that are less than the value specified with <code>LT</code>.
    string LT = 6;
    // The number of pages of information to include in the result. The range of acceptable values is <code>1</code> through <code>100</code>. The default value is <code>100</code>.
    integer Limit = 7;
    // The not equal to operator. The <code>BatchPrediction</code> results will have <code>FilterVariable</code> values not equal to the value specified with <code>NE</code>.
    string NE = 8;
    // An ID of the page in the paginated results.
    string NextToken = 9;
    // <p>A string that is found at the beginning of a variable, such as <code>Name</code> or <code>Id</code>.</p> <p>For example, a <code>Batch Prediction</code> operation could have the <code>Name</code> <code>2014-09-09-HolidayGiftMailer</code>. To search for this <code>BatchPrediction</code>, select <code>Name</code> for the <code>FilterVariable</code> and any of the following strings for the <code>Prefix</code>: </p> <ul> <li><p>2014-09</p></li> <li><p>2014-09-09</p></li> <li><p>2014-09-09-Holiday</p></li> </ul>
    string Prefix = 10;
    // <p>A two-value parameter that determines the sequence of the resulting list of <code>MLModel</code>s.</p> <ul> <li> <code>asc</code> - Arranges the list in ascending order (A-Z, 0-9).</li> <li> <code>dsc</code> - Arranges the list in descending order (Z-A, 9-0).</li> </ul> <p>Results are sorted by <code>FilterVariable</code>.</p>
    SortOrder SortOrder = 11;
}

message DescribeBatchPredictionsOutput {
    // The ID of the next page in the paginated results that indicates at least one more page follows.
    string NextToken = 1;
    // A list of <code>BatchPrediction</code> objects that meet the search criteria.
    array Results = 2;
}

message DescribeDataSourcesInput {
    // The equal to operator. The <code>DataSource</code> results will have <code>FilterVariable</code> values that exactly match the value specified with <code>EQ</code>.
    string EQ = 1;
    // <p>Use one of the following variables to filter a list of <code>DataSource</code>:</p> <ul> <li> <code>CreatedAt</code> - Sets the search criteria to <code>DataSource</code> creation dates.</li> <li> <code>Status</code> - Sets the search criteria to <code>DataSource</code> statuses.</li> <li> <code>Name</code> - Sets the search criteria to the contents of <code>DataSource</code> <b> </b> <code>Name</code>.</li> <li> <code>DataUri</code> - Sets the search criteria to the URI of data files used to create the <code>DataSource</code>. The URI can identify either a file or an Amazon Simple Storage Service (Amazon S3) bucket or directory.</li> <li> <code>IAMUser</code> - Sets the search criteria to the user account that invoked the <code>DataSource</code> creation.</li> </ul>
    DataSourceFilterVariable FilterVariable = 2;
    // The greater than or equal to operator. The <code>DataSource</code> results will have <code>FilterVariable</code> values that are greater than or equal to the value specified with <code>GE</code>.
    string GE = 3;
    // The greater than operator. The <code>DataSource</code> results will have <code>FilterVariable</code> values that are greater than the value specified with <code>GT</code>.
    string GT = 4;
    // The less than or equal to operator. The <code>DataSource</code> results will have <code>FilterVariable</code> values that are less than or equal to the value specified with <code>LE</code>.
    string LE = 5;
    // The less than operator. The <code>DataSource</code> results will have <code>FilterVariable</code> values that are less than the value specified with <code>LT</code>.
    string LT = 6;
    //  The maximum number of <code>DataSource</code> to include in the result.
    integer Limit = 7;
    // The not equal to operator. The <code>DataSource</code> results will have <code>FilterVariable</code> values not equal to the value specified with <code>NE</code>.
    string NE = 8;
    // The ID of the page in the paginated results.
    string NextToken = 9;
    // <p>A string that is found at the beginning of a variable, such as <code>Name</code> or <code>Id</code>.</p> <p>For example, a <code>DataSource</code> could have the <code>Name</code> <code>2014-09-09-HolidayGiftMailer</code>. To search for this <code>DataSource</code>, select <code>Name</code> for the <code>FilterVariable</code> and any of the following strings for the <code>Prefix</code>: </p> <ul> <li><p>2014-09</p></li> <li><p>2014-09-09</p></li> <li><p>2014-09-09-Holiday</p></li> </ul>
    string Prefix = 10;
    // <p>A two-value parameter that determines the sequence of the resulting list of <code>DataSource</code>.</p> <ul> <li> <code>asc</code> - Arranges the list in ascending order (A-Z, 0-9).</li> <li> <code>dsc</code> - Arranges the list in descending order (Z-A, 9-0).</li> </ul> <p>Results are sorted by <code>FilterVariable</code>.</p>
    SortOrder SortOrder = 11;
}

message DescribeDataSourcesOutput {
    // An ID of the next page in the paginated results that indicates at least one more page follows.
    string NextToken = 1;
    // A list of <code>DataSource</code> that meet the search criteria.
    array Results = 2;
}

message DescribeEvaluationsInput {
    // The equal to operator. The <code>Evaluation</code> results will have <code>FilterVariable</code> values that exactly match the value specified with <code>EQ</code>.
    string EQ = 1;
    // <p>Use one of the following variable to filter a list of <code>Evaluation</code> objects:</p> <ul> <li> <code>CreatedAt</code> - Sets the search criteria to the <code>Evaluation</code> creation date.</li> <li> <code>Status</code> - Sets the search criteria to the <code>Evaluation</code> status.</li> <li> <code>Name</code> - Sets the search criteria to the contents of <code>Evaluation</code> <b> </b> <code>Name</code>.</li> <li> <code>IAMUser</code> - Sets the search criteria to the user account that invoked an <code>Evaluation</code>.</li> <li> <code>MLModelId</code> - Sets the search criteria to the <code>MLModel</code> that was evaluated.</li> <li> <code>DataSourceId</code> - Sets the search criteria to the <code>DataSource</code> used in <code>Evaluation</code>.</li> <li> <code>DataUri</code> - Sets the search criteria to the data file(s) used in <code>Evaluation</code>. The URL can identify either a file or an Amazon Simple Storage Solution (Amazon S3) bucket or directory.</li> </ul>
    EvaluationFilterVariable FilterVariable = 2;
    // The greater than or equal to operator. The <code>Evaluation</code> results will have <code>FilterVariable</code> values that are greater than or equal to the value specified with <code>GE</code>.
    string GE = 3;
    // The greater than operator. The <code>Evaluation</code> results will have <code>FilterVariable</code> values that are greater than the value specified with <code>GT</code>.
    string GT = 4;
    // The less than or equal to operator. The <code>Evaluation</code> results will have <code>FilterVariable</code> values that are less than or equal to the value specified with <code>LE</code>.
    string LE = 5;
    // The less than operator. The <code>Evaluation</code> results will have <code>FilterVariable</code> values that are less than the value specified with <code>LT</code>.
    string LT = 6;
    //  The maximum number of <code>Evaluation</code> to include in the result.
    integer Limit = 7;
    // The not equal to operator. The <code>Evaluation</code> results will have <code>FilterVariable</code> values not equal to the value specified with <code>NE</code>.
    string NE = 8;
    // The ID of the page in the paginated results.
    string NextToken = 9;
    // <p>A string that is found at the beginning of a variable, such as <code>Name</code> or <code>Id</code>.</p> <p>For example, an <code>Evaluation</code> could have the <code>Name</code> <code>2014-09-09-HolidayGiftMailer</code>. To search for this <code>Evaluation</code>, select <code>Name</code> for the <code>FilterVariable</code> and any of the following strings for the <code>Prefix</code>: </p> <ul> <li><p>2014-09</p></li> <li><p>2014-09-09</p></li> <li><p>2014-09-09-Holiday</p></li> </ul>
    string Prefix = 10;
    // <p>A two-value parameter that determines the sequence of the resulting list of <code>Evaluation</code>.</p> <ul> <li> <code>asc</code> - Arranges the list in ascending order (A-Z, 0-9).</li> <li> <code>dsc</code> - Arranges the list in descending order (Z-A, 9-0).</li> </ul> <p>Results are sorted by <code>FilterVariable</code>.</p>
    SortOrder SortOrder = 11;
}

message DescribeEvaluationsOutput {
    // The ID of the next page in the paginated results that indicates at least one more page follows.
    string NextToken = 1;
    // A list of <code>Evaluation</code> that meet the search criteria.
    array Results = 2;
}

message DescribeMLModelsInput {
    // The equal to operator. The <code>MLModel</code> results will have <code>FilterVariable</code> values that exactly match the value specified with <code>EQ</code>.
    string EQ = 1;
    // <p>Use one of the following variables to filter a list of <code>MLModel</code>:</p> <ul> <li> <code>CreatedAt</code> - Sets the search criteria to <code>MLModel</code> creation date.</li> <li> <code>Status</code> - Sets the search criteria to <code>MLModel</code> status.</li> <li> <code>Name</code> - Sets the search criteria to the contents of <code>MLModel</code><b> </b> <code>Name</code>.</li> <li> <code>IAMUser</code> - Sets the search criteria to the user account that invoked the <code>MLModel</code> creation.</li> <li> <code>TrainingDataSourceId</code> - Sets the search criteria to the <code>DataSource</code> used to train one or more <code>MLModel</code>.</li> <li> <code>RealtimeEndpointStatus</code> - Sets the search criteria to the <code>MLModel</code> real-time endpoint status.</li> <li> <code>MLModelType</code> - Sets the search criteria to <code>MLModel</code> type: binary, regression, or multi-class.</li> <li> <code>Algorithm</code> - Sets the search criteria to the algorithm that the <code>MLModel</code> uses.</li> <li> <code>TrainingDataURI</code> - Sets the search criteria to the data file(s) used in training a <code>MLModel</code>. The URL can identify either a file or an Amazon Simple Storage Service (Amazon S3) bucket or directory.</li> </ul>
    MLModelFilterVariable FilterVariable = 2;
    // The greater than or equal to operator. The <code>MLModel</code> results will have <code>FilterVariable</code> values that are greater than or equal to the value specified with <code>GE</code>.
    string GE = 3;
    // The greater than operator. The <code>MLModel</code> results will have <code>FilterVariable</code> values that are greater than the value specified with <code>GT</code>.
    string GT = 4;
    // The less than or equal to operator. The <code>MLModel</code> results will have <code>FilterVariable</code> values that are less than or equal to the value specified with <code>LE</code>.
    string LE = 5;
    // The less than operator. The <code>MLModel</code> results will have <code>FilterVariable</code> values that are less than the value specified with <code>LT</code>.
    string LT = 6;
    // The number of pages of information to include in the result. The range of acceptable values is <code>1</code> through <code>100</code>. The default value is <code>100</code>.
    integer Limit = 7;
    // The not equal to operator. The <code>MLModel</code> results will have <code>FilterVariable</code> values not equal to the value specified with <code>NE</code>.
    string NE = 8;
    // The ID of the page in the paginated results.
    string NextToken = 9;
    // <p>A string that is found at the beginning of a variable, such as <code>Name</code> or <code>Id</code>.</p> <p>For example, an <code>MLModel</code> could have the <code>Name</code> <code>2014-09-09-HolidayGiftMailer</code>. To search for this <code>MLModel</code>, select <code>Name</code> for the <code>FilterVariable</code> and any of the following strings for the <code>Prefix</code>: </p> <ul> <li><p>2014-09</p></li> <li><p>2014-09-09</p></li> <li><p>2014-09-09-Holiday</p></li> </ul>
    string Prefix = 10;
    // <p>A two-value parameter that determines the sequence of the resulting list of <code>MLModel</code>.</p> <ul> <li> <code>asc</code> - Arranges the list in ascending order (A-Z, 0-9).</li> <li> <code>dsc</code> - Arranges the list in descending order (Z-A, 9-0).</li> </ul> <p>Results are sorted by <code>FilterVariable</code>.</p>
    SortOrder SortOrder = 11;
}

message DescribeMLModelsOutput {
    // The ID of the next page in the paginated results that indicates at least one more page follows.
    string NextToken = 1;
    // A list of <code>MLModel</code> that meet the search criteria.
    array Results = 2;
}

message DescribeTagsInput {
    // The ID of the ML object. For example, <code>exampleModelId</code>.
    string ResourceId = 1;
    // The type of the ML object.
    TaggableResourceType ResourceType = 2;
}

message DescribeTagsOutput {
    // The ID of the tagged ML object.
    string ResourceId = 1;
    // The type of the tagged ML object.
    TaggableResourceType ResourceType = 2;
    // A list of tags associated with the ML object.
    array Tags = 3;
}

enum DetailsAttribute {
    PREDICTIVEMODELTYPE = 0;
    ALGORITHM = 1;
}

message DetailsMap {
    DetailsAttributes key = 1;
    string value = 2;
}
repeated DetailsMap DetailsMap = 1









repeated string EDPSecurityGroupIds = 1









enum EntityStatu {
    PENDING = 0;
    INPROGRESS = 1;
    FAILED = 2;
    COMPLETED = 3;
    DELETED = 4;
}

message Evaluation {
    integer ComputeTime = 1;
    // The time that the <code>Evaluation</code> was created. The time is expressed in epoch time.
    string CreatedAt = 2;
    // The AWS user account that invoked the evaluation. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.
    string CreatedByIamUser = 3;
    // The ID of the <code>DataSource</code> that is used to evaluate the <code>MLModel</code>.
    string EvaluationDataSourceId = 4;
    // The ID that is assigned to the <code>Evaluation</code> at creation.
    string EvaluationId = 5;
    string FinishedAt = 6;
    // The location and name of the data in Amazon Simple Storage Server (Amazon S3) that is used in the evaluation.
    string InputDataLocationS3 = 7;
    // The time of the most recent edit to the <code>Evaluation</code>. The time is expressed in epoch time.
    string LastUpdatedAt = 8;
    // The ID of the <code>MLModel</code> that is the focus of the evaluation.
    string MLModelId = 9;
    // A description of the most recent details about evaluating the <code>MLModel</code>.
    string Message = 10;
    // A user-supplied name or description of the <code>Evaluation</code>.
    string Name = 11;
    // <p>Measurements of how well the <code>MLModel</code> performed, using observations referenced by the <code>DataSource</code>. One of the following metrics is returned, based on the type of the <code>MLModel</code>: </p> <ul> <li> <p>BinaryAUC: A binary <code>MLModel</code> uses the Area Under the Curve (AUC) technique to measure performance. </p> </li> <li> <p>RegressionRMSE: A regression <code>MLModel</code> uses the Root Mean Square Error (RMSE) technique to measure performance. RMSE measures the difference between predicted and actual values for a single variable.</p> </li> <li> <p>MulticlassAvgFScore: A multiclass <code>MLModel</code> uses the F1 score technique to measure performance. </p> </li> </ul> <p> For more information about performance metrics, please see the <a href="http://docs.aws.amazon.com/machine-learning/latest/dg">Amazon Machine Learning Developer Guide</a>. </p>
    PerformanceMetrics PerformanceMetrics = 12;
    string StartedAt = 13;
    // <p>The status of the evaluation. This element can have one of the following values:</p> <ul> <li> <code>PENDING</code> - Amazon Machine Learning (Amazon ML) submitted a request to evaluate an <code>MLModel</code>.</li> <li> <code>INPROGRESS</code> - The evaluation is underway.</li> <li> <code>FAILED</code> - The request to evaluate an <code>MLModel</code> did not run to completion. It is not usable.</li> <li> <code>COMPLETED</code> - The evaluation process completed successfully.</li> <li> <code>DELETED</code> - The <code>Evaluation</code> is marked as deleted. It is not usable.</li> </ul>
    EntityStatus Status = 14;
}

enum EvaluationFilterVariable {
    CREATEDAT = 0;
    LASTUPDATEDAT = 1;
    STATUS = 2;
    NAME = 3;
    IAMUSER = 4;
    MLMODELID = 5;
    DATASOURCEID = 6;
    DATAURI = 7;
}

repeated Evaluation Evaluations = 1

message GetBatchPredictionInput {
    // An ID assigned to the <code>BatchPrediction</code> at creation.
    string BatchPredictionId = 1;
}

message GetBatchPredictionOutput {
    // The ID of the <code>DataSource</code> that was used to create the <code>BatchPrediction</code>.
    string BatchPredictionDataSourceId = 1;
    // An ID assigned to the <code>BatchPrediction</code> at creation. This value should be identical to the value of the <code>BatchPredictionID</code> in the request.
    string BatchPredictionId = 2;
    // The approximate CPU time in milliseconds that Amazon Machine Learning spent processing the <code>BatchPrediction</code>, normalized and scaled on computation resources. <code>ComputeTime</code> is only available if the <code>BatchPrediction</code> is in the <code>COMPLETED</code> state.
    integer ComputeTime = 3;
    // The time when the <code>BatchPrediction</code> was created. The time is expressed in epoch time.
    string CreatedAt = 4;
    // The AWS user account that invoked the <code>BatchPrediction</code>. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.
    string CreatedByIamUser = 5;
    // The epoch time when Amazon Machine Learning marked the <code>BatchPrediction</code> as <code>COMPLETED</code> or <code>FAILED</code>. <code>FinishedAt</code> is only available when the <code>BatchPrediction</code> is in the <code>COMPLETED</code> or <code>FAILED</code> state.
    string FinishedAt = 6;
    // The location of the data file or directory in Amazon Simple Storage Service (Amazon S3).
    string InputDataLocationS3 = 7;
    // The number of invalid records that Amazon Machine Learning saw while processing the <code>BatchPrediction</code>.
    integer InvalidRecordCount = 8;
    // The time of the most recent edit to <code>BatchPrediction</code>. The time is expressed in epoch time.
    string LastUpdatedAt = 9;
    // A link to the file that contains logs of the <code>CreateBatchPrediction</code> operation.
    string LogUri = 10;
    // The ID of the <code>MLModel</code> that generated predictions for the <code>BatchPrediction</code> request.
    string MLModelId = 11;
    // A description of the most recent details about processing the batch prediction request.
    string Message = 12;
    // A user-supplied name or description of the <code>BatchPrediction</code>.
    string Name = 13;
    // The location of an Amazon S3 bucket or directory to receive the operation results.
    string OutputUri = 14;
    // The epoch time when Amazon Machine Learning marked the <code>BatchPrediction</code> as <code>INPROGRESS</code>. <code>StartedAt</code> isn't available if the <code>BatchPrediction</code> is in the <code>PENDING</code> state.
    string StartedAt = 15;
    // <p>The status of the <code>BatchPrediction</code>, which can be one of the following values:</p> <ul> <li> <code>PENDING</code> - Amazon Machine Learning (Amazon ML) submitted a request to generate batch predictions.</li> <li> <code>INPROGRESS</code> - The batch predictions are in progress.</li> <li> <code>FAILED</code> - The request to perform a batch prediction did not run to completion. It is not usable.</li> <li> <code>COMPLETED</code> - The batch prediction process completed successfully.</li> <li> <code>DELETED</code> - The <code>BatchPrediction</code> is marked as deleted. It is not usable.</li> </ul>
    EntityStatus Status = 16;
    // The number of total records that Amazon Machine Learning saw while processing the <code>BatchPrediction</code>.
    integer TotalRecordCount = 17;
}

message GetDataSourceInput {
    // The ID assigned to the <code>DataSource</code> at creation.
    string DataSourceId = 1;
    // <p>Specifies whether the <code>GetDataSource</code> operation should return <code>DataSourceSchema</code>.</p> <p>If true, <code>DataSourceSchema</code> is returned.</p> <p>If false, <code>DataSourceSchema</code> is not returned.</p>
    boolean Verbose = 2;
}

message GetDataSourceOutput {
    //  The parameter is <code>true</code> if statistics need to be generated from the observation data.
    boolean ComputeStatistics = 1;
    // The approximate CPU time in milliseconds that Amazon Machine Learning spent processing the <code>DataSource</code>, normalized and scaled on computation resources. <code>ComputeTime</code> is only available if the <code>DataSource</code> is in the <code>COMPLETED</code> state and the <code>ComputeStatistics</code> is set to true.
    integer ComputeTime = 2;
    // The time that the <code>DataSource</code> was created. The time is expressed in epoch time.
    string CreatedAt = 3;
    // The AWS user account from which the <code>DataSource</code> was created. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.
    string CreatedByIamUser = 4;
    // The location of the data file or directory in Amazon Simple Storage Service (Amazon S3).
    string DataLocationS3 = 5;
    // A JSON string that represents the splitting and rearrangement requirement used when this <code>DataSource</code> was created.
    string DataRearrangement = 6;
    // The total size of observations in the data files.
    integer DataSizeInBytes = 7;
    // The ID assigned to the <code>DataSource</code> at creation. This value should be identical to the value of the <code>DataSourceId</code> in the request.
    string DataSourceId = 8;
    // <p>The schema used by all of the data files of this <code>DataSource</code>.</p> <note><title>Note</title> <p>This parameter is provided as part of the verbose format.</p></note>
    string DataSourceSchema = 9;
    // The epoch time when Amazon Machine Learning marked the <code>DataSource</code> as <code>COMPLETED</code> or <code>FAILED</code>. <code>FinishedAt</code> is only available when the <code>DataSource</code> is in the <code>COMPLETED</code> or <code>FAILED</code> state.
    string FinishedAt = 10;
    // The time of the most recent edit to the <code>DataSource</code>. The time is expressed in epoch time.
    string LastUpdatedAt = 11;
    // A link to the file containing logs of <code>CreateDataSourceFrom*</code> operations.
    string LogUri = 12;
    // The user-supplied description of the most recent details about creating the <code>DataSource</code>.
    string Message = 13;
    // A user-supplied name or description of the <code>DataSource</code>.
    string Name = 14;
    // The number of data files referenced by the <code>DataSource</code>.
    integer NumberOfFiles = 15;
    RDSMetadata RDSMetadata = 16;
    RedshiftMetadata RedshiftMetadata = 17;
    string RoleARN = 18;
    // The epoch time when Amazon Machine Learning marked the <code>DataSource</code> as <code>INPROGRESS</code>. <code>StartedAt</code> isn't available if the <code>DataSource</code> is in the <code>PENDING</code> state.
    string StartedAt = 19;
    // <p>The current status of the <code>DataSource</code>. This element can have one of the following values:</p> <ul> <li> <code>PENDING</code> - Amazon ML submitted a request to create a <code>DataSource</code>.</li> <li> <code>INPROGRESS</code> - The creation process is underway.</li> <li> <code>FAILED</code> - The request to create a <code>DataSource</code> did not run to completion. It is not usable.</li> <li> <code>COMPLETED</code> - The creation process completed successfully.</li> <li> <code>DELETED</code> - The <code>DataSource</code> is marked as deleted. It is not usable.</li> </ul>
    EntityStatus Status = 20;
}

message GetEvaluationInput {
    // The ID of the <code>Evaluation</code> to retrieve. The evaluation of each <code>MLModel</code> is recorded and cataloged. The ID provides the means to access the information.
    string EvaluationId = 1;
}

message GetEvaluationOutput {
    // The approximate CPU time in milliseconds that Amazon Machine Learning spent processing the <code>Evaluation</code>, normalized and scaled on computation resources. <code>ComputeTime</code> is only available if the <code>Evaluation</code> is in the <code>COMPLETED</code> state.
    integer ComputeTime = 1;
    // The time that the <code>Evaluation</code> was created. The time is expressed in epoch time.
    string CreatedAt = 2;
    // The AWS user account that invoked the evaluation. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.
    string CreatedByIamUser = 3;
    // The <code>DataSource</code> used for this evaluation.
    string EvaluationDataSourceId = 4;
    // The evaluation ID which is same as the <code>EvaluationId</code> in the request.
    string EvaluationId = 5;
    // The epoch time when Amazon Machine Learning marked the <code>Evaluation</code> as <code>COMPLETED</code> or <code>FAILED</code>. <code>FinishedAt</code> is only available when the <code>Evaluation</code> is in the <code>COMPLETED</code> or <code>FAILED</code> state.
    string FinishedAt = 6;
    // The location of the data file or directory in Amazon Simple Storage Service (Amazon S3).
    string InputDataLocationS3 = 7;
    // The time of the most recent edit to the <code>Evaluation</code>. The time is expressed in epoch time.
    string LastUpdatedAt = 8;
    // A link to the file that contains logs of the <code>CreateEvaluation</code> operation.
    string LogUri = 9;
    // The ID of the <code>MLModel</code> that was the focus of the evaluation.
    string MLModelId = 10;
    // A description of the most recent details about evaluating the <code>MLModel</code>.
    string Message = 11;
    // A user-supplied name or description of the <code>Evaluation</code>.
    string Name = 12;
    // <p>Measurements of how well the <code>MLModel</code> performed using observations referenced by the <code>DataSource</code>. One of the following metric is returned based on the type of the <code>MLModel</code>: </p> <ul> <li> <p>BinaryAUC: A binary <code>MLModel</code> uses the Area Under the Curve (AUC) technique to measure performance. </p> </li> <li> <p>RegressionRMSE: A regression <code>MLModel</code> uses the Root Mean Square Error (RMSE) technique to measure performance. RMSE measures the difference between predicted and actual values for a single variable.</p> </li> <li> <p>MulticlassAvgFScore: A multiclass <code>MLModel</code> uses the F1 score technique to measure performance. </p> </li> </ul> <p> For more information about performance metrics, please see the <a href="http://docs.aws.amazon.com/machine-learning/latest/dg">Amazon Machine Learning Developer Guide</a>. </p>
    PerformanceMetrics PerformanceMetrics = 13;
    // The epoch time when Amazon Machine Learning marked the <code>Evaluation</code> as <code>INPROGRESS</code>. <code>StartedAt</code> isn't available if the <code>Evaluation</code> is in the <code>PENDING</code> state.
    string StartedAt = 14;
    // <p>The status of the evaluation. This element can have one of the following values:</p> <ul> <li> <code>PENDING</code> - Amazon Machine Language (Amazon ML) submitted a request to evaluate an <code>MLModel</code>.</li> <li> <code>INPROGRESS</code> - The evaluation is underway.</li> <li> <code>FAILED</code> - The request to evaluate an <code>MLModel</code> did not run to completion. It is not usable.</li> <li> <code>COMPLETED</code> - The evaluation process completed successfully.</li> <li> <code>DELETED</code> - The <code>Evaluation</code> is marked as deleted. It is not usable.</li> </ul>
    EntityStatus Status = 15;
}

message GetMLModelInput {
    // The ID assigned to the <code>MLModel</code> at creation.
    string MLModelId = 1;
    // <p>Specifies whether the <code>GetMLModel</code> operation should return <code>Recipe</code>.</p> <p>If true, <code>Recipe</code> is returned.</p> <p>If false, <code>Recipe</code> is not returned.</p>
    boolean Verbose = 2;
}

message GetMLModelOutput {
    // The approximate CPU time in milliseconds that Amazon Machine Learning spent processing the <code>MLModel</code>, normalized and scaled on computation resources. <code>ComputeTime</code> is only available if the <code>MLModel</code> is in the <code>COMPLETED</code> state.
    integer ComputeTime = 1;
    // The time that the <code>MLModel</code> was created. The time is expressed in epoch time.
    string CreatedAt = 2;
    // The AWS user account from which the <code>MLModel</code> was created. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.
    string CreatedByIamUser = 3;
    // The current endpoint of the <code>MLModel</code>
    RealtimeEndpointInfo EndpointInfo = 4;
    // The epoch time when Amazon Machine Learning marked the <code>MLModel</code> as <code>COMPLETED</code> or <code>FAILED</code>. <code>FinishedAt</code> is only available when the <code>MLModel</code> is in the <code>COMPLETED</code> or <code>FAILED</code> state.
    string FinishedAt = 5;
    // The location of the data file or directory in Amazon Simple Storage Service (Amazon S3).
    string InputDataLocationS3 = 6;
    // The time of the most recent edit to the <code>MLModel</code>. The time is expressed in epoch time.
    string LastUpdatedAt = 7;
    // A link to the file that contains logs of the <code>CreateMLModel</code> operation.
    string LogUri = 8;
    // The MLModel ID<?oxy_insert_start author="annbech" timestamp="20160328T151251-0700">,<?oxy_insert_end> which is same as the <code>MLModelId</code> in the request.
    string MLModelId = 9;
    // <p>Identifies the <code>MLModel</code> category. The following are the available types: </p> <ul> <li>REGRESSION -- Produces a numeric result. For example, "What price should a house be listed at?"</li> <li>BINARY -- Produces one of two possible results. For example, "Is this an e-commerce website?"</li> <li>MULTICLASS -- Produces one of several possible results. For example, "Is this a HIGH, LOW or MEDIUM risk trade?"</li> </ul>
    MLModelType MLModelType = 10;
    // A description of the most recent details about accessing the <code>MLModel</code>.
    string Message = 11;
    // A user-supplied name or description of the <code>MLModel</code>.
    string Name = 12;
    // <p>The recipe to use when training the <code>MLModel</code>. The <code>Recipe</code> provides detailed information about the observation data to use during training, and manipulations to perform on the observation data during training.</p> <note><title>Note</title> <p>This parameter is provided as part of the verbose format.</p></note>
    string Recipe = 13;
    // <p>The schema used by all of the data files referenced by the <code>DataSource</code>.</p> <note><title>Note</title> <p>This parameter is provided as part of the verbose format.</p></note>
    string Schema = 14;
    // <p>The scoring threshold is used in binary classification <code>MLModel</code><?oxy_insert_start author="laurama" timestamp="20160329T114851-0700"> <?oxy_insert_end>models. It marks the boundary between a positive prediction and a negative prediction.</p> <p>Output values greater than or equal to the threshold receive a positive result from the MLModel, such as <code>true</code>. Output values less than the threshold receive a negative response from the MLModel, such as <code>false</code>.</p>
    number ScoreThreshold = 15;
    // The time of the most recent edit to the <code>ScoreThreshold</code>. The time is expressed in epoch time.
    string ScoreThresholdLastUpdatedAt = 16;
    integer SizeInBytes = 17;
    // The epoch time when Amazon Machine Learning marked the <code>MLModel</code> as <code>INPROGRESS</code>. <code>StartedAt</code> isn't available if the <code>MLModel</code> is in the <code>PENDING</code> state.
    string StartedAt = 18;
    // <p>The current status of the <code>MLModel</code>. This element can have one of the following values:</p> <ul> <li> <code>PENDING</code> - Amazon Machine Learning (Amazon ML) submitted a request to describe a <code>MLModel</code>.</li> <li> <code>INPROGRESS</code> - The request is processing.</li> <li> <code>FAILED</code> - The request did not run to completion. The ML model isn't usable.</li> <li> <code>COMPLETED</code> - The request completed successfully.</li> <li> <code>DELETED</code> - The <code>MLModel</code> is marked as deleted. It isn't usable.</li> </ul>
    EntityStatus Status = 19;
    // The ID of the training <code>DataSource</code>.
    string TrainingDataSourceId = 20;
    // <p>A list of the training parameters in the <code>MLModel</code>. The list is implemented as a map of key-value pairs.</p> <p>The following is the current set of training parameters: </p> <ul> <li> <p><code>sgd.maxMLModelSizeInBytes</code> - The maximum allowed size of the model. Depending on the input data, the size of the model might affect its performance.</p> <p> The value is an integer that ranges from <code>100000</code> to <code>2147483648</code>. The default value is <code>33554432</code>.</p> </li> <li><p><code>sgd.maxPasses</code> - The number of times that the training process traverses the observations to build the <code>MLModel</code>. The value is an integer that ranges from <code>1</code> to <code>10000</code>. The default value is <code>10</code>.</p></li> <li><p><code>sgd.shuffleType</code> - Whether Amazon ML shuffles the training data. Shuffling data improves a model's ability to find the optimal solution for a variety of data types. The valid values are <code>auto</code> and <code>none</code>. The default value is <code>none</code>. We strongly recommend that you shuffle your data.</p></li> <li> <p><code>sgd.l1RegularizationAmount</code> - The coefficient regularization L1 norm. It controls overfitting the data by penalizing large coefficients. This tends to drive coefficients to zero, resulting in a sparse feature set. If you use this parameter, start by specifying a small value, such as <code>1.0E-08</code>.</p> <p>The value is a double that ranges from <code>0</code> to <code>MAX_DOUBLE</code>. The default is to not use L1 normalization. This parameter can't be used when <code>L2</code> is specified. Use this parameter sparingly.</p> </li> <li> <p><code>sgd.l2RegularizationAmount</code> - The coefficient regularization L2 norm. It controls overfitting the data by penalizing large coefficients. This tends to drive coefficients to small, nonzero values. If you use this parameter, start by specifying a small value, such as <code>1.0E-08</code>.</p> <p>The value is a double that ranges from <code>0</code> to <code>MAX_DOUBLE</code>. The default is to not use L2 normalization. This parameter can't be used when <code>L1</code> is specified. Use this parameter sparingly.</p> </li> </ul>
    array TrainingParameters = 21;
}

message IdempotentParameterMismatchException {
    integer code = 1;
    string message = 2;
}

message InternalServerException {
    integer code = 1;
    string message = 2;
}

message InvalidInputException {
    integer code = 1;
    string message = 2;
}

message InvalidTagException {
    string message = 1;
}

message LimitExceededException {
    integer code = 1;
    string message = 2;
}

message MLModel {
    // <p>The algorithm used to train the <code>MLModel</code>. The following algorithm is supported:</p> <ul> <li> <code>SGD</code> -- Stochastic gradient descent. The goal of <code>SGD</code> is to minimize the gradient of the loss function. </li> </ul>
    Algorithm Algorithm = 1;
    integer ComputeTime = 2;
    // The time that the <code>MLModel</code> was created. The time is expressed in epoch time.
    string CreatedAt = 3;
    // The AWS user account from which the <code>MLModel</code> was created. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.
    string CreatedByIamUser = 4;
    // The current endpoint of the <code>MLModel</code>.
    RealtimeEndpointInfo EndpointInfo = 5;
    string FinishedAt = 6;
    // The location of the data file or directory in Amazon Simple Storage Service (Amazon S3).
    string InputDataLocationS3 = 7;
    // The time of the most recent edit to the <code>MLModel</code>. The time is expressed in epoch time.
    string LastUpdatedAt = 8;
    // The ID assigned to the <code>MLModel</code> at creation.
    string MLModelId = 9;
    // <p>Identifies the <code>MLModel</code> category. The following are the available types:</p> <ul> <li> <code>REGRESSION</code> - Produces a numeric result. For example, "What price should a house be listed at?"</li> <li> <code>BINARY</code> - Produces one of two possible results. For example, "Is this a child-friendly web site?".</li> <li> <code>MULTICLASS</code> - Produces one of several possible results. For example, "Is this a HIGH-, LOW-, or MEDIUM<?oxy_delete author="annbech" timestamp="20160328T175050-0700" content=" "><?oxy_insert_start author="annbech" timestamp="20160328T175050-0700">-<?oxy_insert_end>risk trade?".</li> </ul>
    MLModelType MLModelType = 10;
    // A description of the most recent details about accessing the <code>MLModel</code>.
    string Message = 11;
    // A user-supplied name or description of the <code>MLModel</code>.
    string Name = 12;
    number ScoreThreshold = 13;
    // The time of the most recent edit to the <code>ScoreThreshold</code>. The time is expressed in epoch time.
    string ScoreThresholdLastUpdatedAt = 14;
    integer SizeInBytes = 15;
    string StartedAt = 16;
    // <p>The current status of an <code>MLModel</code>. This element can have one of the following values: </p> <ul> <li> <code>PENDING</code> - Amazon Machine Learning (Amazon ML) submitted a request to create an <code>MLModel</code>.</li> <li> <code>INPROGRESS</code> - The creation process is underway.</li> <li> <code>FAILED</code> - The request to create an <code>MLModel</code> didn't run to completion. The model isn't usable.</li> <li> <code>COMPLETED</code> - The creation process completed successfully.</li> <li> <code>DELETED</code> - The <code>MLModel</code> is marked as deleted. It isn't usable.</li> </ul>
    EntityStatus Status = 17;
    // The ID of the training <code>DataSource</code>. The <code>CreateMLModel</code> operation uses the <code>TrainingDataSourceId</code>.
    string TrainingDataSourceId = 18;
    // <p>A list of the training parameters in the <code>MLModel</code>. The list is implemented as a map of key-value pairs.</p> <p>The following is the current set of training parameters: </p> <ul> <li> <p><code>sgd.maxMLModelSizeInBytes</code> - The maximum allowed size of the model. Depending on the input data, the size of the model might affect its performance.</p> <p> The value is an integer that ranges from <code>100000</code> to <code>2147483648</code>. The default value is <code>33554432</code>.</p> </li> <li><p><code>sgd.maxPasses</code> - The number of times that the training process traverses the observations to build the <code>MLModel</code>. The value is an integer that ranges from <code>1</code> to <code>10000</code>. The default value is <code>10</code>.</p></li> <li><p><code>sgd.shuffleType</code> - Whether Amazon ML shuffles the training data. Shuffling the data improves a model's ability to find the optimal solution for a variety of data types. The valid values are <code>auto</code> and <code>none</code>. The default value is <code>none</code>.</p></li> <li> <p><code>sgd.l1RegularizationAmount</code> - The coefficient regularization L1 norm, which controls overfitting the data by penalizing large coefficients. This parameter tends to drive coefficients to zero, resulting in sparse feature set. If you use this parameter, start by specifying a small value, such as <code>1.0E-08</code>.</p> <p>The value is a double that ranges from <code>0</code> to <code>MAX_DOUBLE</code>. The default is to not use L1 normalization. This parameter can't be used when <code>L2</code> is specified. Use this parameter sparingly.</p> </li> <li> <p><code>sgd.l2RegularizationAmount</code> - The coefficient regularization L2 norm, which controls overfitting the data by penalizing large coefficients. This tends to drive coefficients to small, nonzero values. If you use this parameter, start by specifying a small value, such as <code>1.0E-08</code>.</p> <p>The value is a double that ranges from <code>0</code> to <code>MAX_DOUBLE</code>. The default is to not use L2 normalization. This parameter can't be used when <code>L1</code> is specified. Use this parameter sparingly.</p> </li> </ul>
    array TrainingParameters = 19;
}

enum MLModelFilterVariable {
    CREATEDAT = 0;
    LASTUPDATEDAT = 1;
    STATUS = 2;
    NAME = 3;
    IAMUSER = 4;
    TRAININGDATASOURCEID = 5;
    REALTIMEENDPOINTSTATUS = 6;
    MLMODELTYPE = 7;
    ALGORITHM = 8;
    TRAININGDATAURI = 9;
}

enum MLModelType {
    REGRESSION = 0;
    BINARY = 1;
    MULTICLASS = 2;
}

repeated MLModel MLModels = 1





message PerformanceMetrics {
    array Properties = 1;
}

message PerformanceMetricsPropertie {
    string key = 1;
    string value = 2;
}
repeated PerformanceMetricsPropertie PerformanceMetricsProperties = 1





message PredictInput {
    // A unique identifier of the <code>MLModel</code>.
    string MLModelId = 1;
    string PredictEndpoint = 2;
    array Record = 3;
}

message PredictOutput {
    Prediction Prediction = 1;
}

message Prediction {
    array details = 1;
    // The prediction label for either a <code>BINARY</code> or <code>MULTICLASS</code> <code>MLModel</code>.
    string predictedLabel = 2;
    array predictedScores = 3;
    // The prediction value for <code>REGRESSION</code> <code>MLModel</code>.
    number predictedValue = 4;
}

message PredictorNotMountedException {
    string message = 1;
}

message RDSDataSpec {
    // <p>A JSON string that represents the splitting and rearrangement processing to be applied to a <code>DataSource</code>. If the <code>DataRearrangement</code> parameter is not provided, all of the input data is used to create the <code>Datasource</code>.</p> <p>There are multiple parameters that control what data is used to create a datasource:</p> <ul> <li><p><b><code>percentBegin</code></b></p> <p>Use <code>percentBegin</code> to indicate the beginning of the range of the data used to create the Datasource. If you do not include <code>percentBegin</code> and <code>percentEnd</code>, Amazon ML includes all of the data when creating the datasource.</p></li> <li><p><b><code>percentEnd</code></b></p> <p>Use <code>percentEnd</code> to indicate the end of the range of the data used to create the Datasource. If you do not include <code>percentBegin</code> and <code>percentEnd</code>, Amazon ML includes all of the data when creating the datasource.</p></li> <li><p><b><code>complement</code></b></p> <p>The <code>complement</code> parameter instructs Amazon ML to use the data that is not included in the range of <code>percentBegin</code> to <code>percentEnd</code> to create a datasource. The <code>complement</code> parameter is useful if you need to create complementary datasources for training and evaluation. To create a complementary datasource, use the same values for <code>percentBegin</code> and <code>percentEnd</code>, along with the <code>complement</code> parameter.</p> <p>For example, the following two datasources do not share any data, and can be used to train and evaluate a model. The first datasource has 25 percent of the data, and the second one has 75 percent of the data.</p> <p>Datasource for evaluation: <code>{"splitting":{"percentBegin":0, "percentEnd":25}}</code></p> <p>Datasource for training: <code>{"splitting":{"percentBegin":0, "percentEnd":25, "complement":"true"}}</code></p> </li> <li><p><b><code>strategy</code></b></p> <p>To change how Amazon ML splits the data for a datasource, use the <code>strategy</code> parameter.</p> <p>The default value for the <code>strategy</code> parameter is <code>sequential</code>, meaning that Amazon ML takes all of the data records between the <code>percentBegin</code> and <code>percentEnd</code> parameters for the datasource, in the order that the records appear in the input data.</p> <p>The following two <code>DataRearrangement</code> lines are examples of sequentially ordered training and evaluation datasources:</p> <p>Datasource for evaluation: <code>{"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"sequential"}}</code></p> <p>Datasource for training: <code>{"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"sequential", "complement":"true"}}</code></p> <p>To randomly split the input data into the proportions indicated by the percentBegin and percentEnd parameters, set the <code>strategy</code> parameter to <code>random</code> and provide a string that is used as the seed value for the random data splitting (for example, you can use the S3 path to your data as the random seed string). If you choose the random split strategy, Amazon ML assigns each row of data a pseudo-random number between 0 and 100, and then selects the rows that have an assigned number between <code>percentBegin</code> and <code>percentEnd</code>. Pseudo-random numbers are assigned using both the input seed string value and the byte offset as a seed, so changing the data results in a different split. Any existing ordering is preserved. The random splitting strategy ensures that variables in the training and evaluation data are distributed similarly. It is useful in the cases where the input data may have an implicit sort order, which would otherwise result in training and evaluation datasources containing non-similar data records.</p> <p>The following two <code>DataRearrangement</code> lines are examples of non-sequentially ordered training and evaluation datasources:</p> <p>Datasource for evaluation: <code>{"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"random", "randomSeed"="s3://my_s3_path/bucket/file.csv"}}</code></p> <p>Datasource for training: <code>{"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"random", "randomSeed"="s3://my_s3_path/bucket/file.csv", "complement":"true"}}</code></p> </li> </ul>
    string DataRearrangement = 1;
    // <p>A JSON string that represents the schema for an Amazon RDS <code>DataSource</code>. The <code>DataSchema</code> defines the structure of the observation data in the data file(s) referenced in the <code>DataSource</code>.</p> <p>A <code>DataSchema</code> is not required if you specify a <code>DataSchemaUri</code></p> <p>Define your <code>DataSchema</code> as a series of key-value pairs. <code>attributes</code> and <code>excludedVariableNames</code> have an array of key-value pairs for their value. Use the following format to define your <code>DataSchema</code>.</p> <p>{ "version": "1.0",</p> <p> "recordAnnotationFieldName": "F1",</p> <p> "recordWeightFieldName": "F2",</p> <p> "targetFieldName": "F3",</p> <p> "dataFormat": "CSV",</p> <p> "dataFileContainsHeader": true,</p> <p> "attributes": [</p> <p> { "fieldName": "F1", "fieldType": "TEXT" }, { "fieldName": "F2", "fieldType": "NUMERIC" }, { "fieldName": "F3", "fieldType": "CATEGORICAL" }, { "fieldName": "F4", "fieldType": "NUMERIC" }, { "fieldName": "F5", "fieldType": "CATEGORICAL" }, { "fieldName": "F6", "fieldType": "TEXT" }, { "fieldName": "F7", "fieldType": "WEIGHTED_INT_SEQUENCE" }, { "fieldName": "F8", "fieldType": "WEIGHTED_STRING_SEQUENCE" } ],</p> <p> "excludedVariableNames": [ "F6" ] } </p> <?oxy_insert_end>
    string DataSchema = 2;
    // The Amazon S3 location of the <code>DataSchema</code>.
    string DataSchemaUri = 3;
    // The AWS Identity and Access Management (IAM) credentials that are used connect to the Amazon RDS database.
    RDSDatabaseCredentials DatabaseCredentials = 4;
    // Describes the <code>DatabaseName</code> and <code>InstanceIdentifier</code> of an Amazon RDS database.
    RDSDatabase DatabaseInformation = 5;
    // The role (DataPipelineDefaultResourceRole) assumed by an Amazon Elastic Compute Cloud (Amazon EC2) instance to carry out the copy operation from Amazon RDS to an Amazon S3 task. For more information, see <a href="http://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-iam-roles.html">Role templates</a> for data pipelines.
    string ResourceRole = 6;
    // The Amazon S3 location for staging Amazon RDS data. The data retrieved from Amazon RDS using <code>SelectSqlQuery</code> is stored in this location.
    string S3StagingLocation = 7;
    // The security group IDs to be used to access a VPC-based RDS DB instance. Ensure that there are appropriate ingress rules set up to allow access to the RDS DB instance. This attribute is used by Data Pipeline to carry out the copy operation from Amazon RDS to an Amazon S3 task.
    array SecurityGroupIds = 8;
    // The query that is used to retrieve the observation data for the <code>DataSource</code>.
    string SelectSqlQuery = 9;
    // The role (DataPipelineDefaultRole) assumed by AWS Data Pipeline service to monitor the progress of the copy task from Amazon RDS to Amazon S3. For more information, see <a href="http://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-iam-roles.html">Role templates</a> for data pipelines.
    string ServiceRole = 10;
    // The subnet ID to be used to access a VPC-based RDS DB instance. This attribute is used by Data Pipeline to carry out the copy task from Amazon RDS to Amazon S3.
    string SubnetId = 11;
}

message RDSDatabase {
    string DatabaseName = 1;
    // The ID of an RDS DB instance.
    string InstanceIdentifier = 2;
}

message RDSDatabaseCredentials {
    string Password = 1;
    string Username = 2;
}

message RDSMetadata {
    // The ID of the Data Pipeline instance that is used to carry to copy data from Amazon RDS to Amazon S3. You can use the ID to find details about the instance in the Data Pipeline console.
    string DataPipelineId = 1;
    // The database details required to connect to an Amazon RDS.
    RDSDatabase Database = 2;
    string DatabaseUserName = 3;
    // The role (DataPipelineDefaultResourceRole) assumed by an Amazon EC2 instance to carry out the copy task from Amazon RDS to Amazon S3. For more information, see <a href="http://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-iam-roles.html">Role templates</a> for data pipelines.
    string ResourceRole = 4;
    // The SQL query that is supplied during <a>CreateDataSourceFromRDS</a>. Returns only if <code>Verbose</code> is true in <code>GetDataSourceInput</code>.
    string SelectSqlQuery = 5;
    // The role (DataPipelineDefaultRole) assumed by the Data Pipeline service to monitor the progress of the copy task from Amazon RDS to Amazon S3. For more information, see <a href="http://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-iam-roles.html">Role templates</a> for data pipelines.
    string ServiceRole = 6;
}

message RealtimeEndpointInfo {
    // The time that the request to create the real-time endpoint for the <code>MLModel</code> was received. The time is expressed in epoch time.
    string CreatedAt = 1;
    // <p> The current status of the real-time endpoint for the <code>MLModel</code>. This element can have one of the following values: </p> <ul> <li> <code>NONE</code> - Endpoint does not exist or was previously deleted.</li> <li> <code>READY</code> - Endpoint is ready to be used for real-time predictions.</li> <li> <code>UPDATING</code> - Updating/creating the endpoint. </li> </ul>
    RealtimeEndpointStatus EndpointStatus = 2;
    // <p>The URI that specifies where to send real-time prediction requests for the <code>MLModel</code>.</p> <note><title>Note</title> <p>The application must wait until the real-time endpoint is ready before using this URI.</p> </note>
    string EndpointUrl = 3;
    //  The maximum processing rate for the real-time endpoint for <code>MLModel</code>, measured in incoming requests per second.
    integer PeakRequestsPerSecond = 4;
}

enum RealtimeEndpointStatu {
    NONE = 0;
    READY = 1;
    UPDATING = 2;
    FAILED = 3;
}

message Record {
    string key = 1;
    string value = 2;
}
repeated Record Record = 1



message RedshiftDataSpec {
    // <p>A JSON string that represents the splitting and rearrangement processing to be applied to a <code>DataSource</code>. If the <code>DataRearrangement</code> parameter is not provided, all of the input data is used to create the <code>Datasource</code>.</p> <p>There are multiple parameters that control what data is used to create a datasource:</p> <ul> <li><p><b><code>percentBegin</code></b></p> <p>Use <code>percentBegin</code> to indicate the beginning of the range of the data used to create the Datasource. If you do not include <code>percentBegin</code> and <code>percentEnd</code>, Amazon ML includes all of the data when creating the datasource.</p></li> <li><p><b><code>percentEnd</code></b></p> <p>Use <code>percentEnd</code> to indicate the end of the range of the data used to create the Datasource. If you do not include <code>percentBegin</code> and <code>percentEnd</code>, Amazon ML includes all of the data when creating the datasource.</p></li> <li><p><b><code>complement</code></b></p> <p>The <code>complement</code> parameter instructs Amazon ML to use the data that is not included in the range of <code>percentBegin</code> to <code>percentEnd</code> to create a datasource. The <code>complement</code> parameter is useful if you need to create complementary datasources for training and evaluation. To create a complementary datasource, use the same values for <code>percentBegin</code> and <code>percentEnd</code>, along with the <code>complement</code> parameter.</p> <p>For example, the following two datasources do not share any data, and can be used to train and evaluate a model. The first datasource has 25 percent of the data, and the second one has 75 percent of the data.</p> <p>Datasource for evaluation: <code>{"splitting":{"percentBegin":0, "percentEnd":25}}</code></p> <p>Datasource for training: <code>{"splitting":{"percentBegin":0, "percentEnd":25, "complement":"true"}}</code></p> </li> <li><p><b><code>strategy</code></b></p> <p>To change how Amazon ML splits the data for a datasource, use the <code>strategy</code> parameter.</p> <p>The default value for the <code>strategy</code> parameter is <code>sequential</code>, meaning that Amazon ML takes all of the data records between the <code>percentBegin</code> and <code>percentEnd</code> parameters for the datasource, in the order that the records appear in the input data.</p> <p>The following two <code>DataRearrangement</code> lines are examples of sequentially ordered training and evaluation datasources:</p> <p>Datasource for evaluation: <code>{"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"sequential"}}</code></p> <p>Datasource for training: <code>{"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"sequential", "complement":"true"}}</code></p> <p>To randomly split the input data into the proportions indicated by the percentBegin and percentEnd parameters, set the <code>strategy</code> parameter to <code>random</code> and provide a string that is used as the seed value for the random data splitting (for example, you can use the S3 path to your data as the random seed string). If you choose the random split strategy, Amazon ML assigns each row of data a pseudo-random number between 0 and 100, and then selects the rows that have an assigned number between <code>percentBegin</code> and <code>percentEnd</code>. Pseudo-random numbers are assigned using both the input seed string value and the byte offset as a seed, so changing the data results in a different split. Any existing ordering is preserved. The random splitting strategy ensures that variables in the training and evaluation data are distributed similarly. It is useful in the cases where the input data may have an implicit sort order, which would otherwise result in training and evaluation datasources containing non-similar data records.</p> <p>The following two <code>DataRearrangement</code> lines are examples of non-sequentially ordered training and evaluation datasources:</p> <p>Datasource for evaluation: <code>{"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"random", "randomSeed"="s3://my_s3_path/bucket/file.csv"}}</code></p> <p>Datasource for training: <code>{"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"random", "randomSeed"="s3://my_s3_path/bucket/file.csv", "complement":"true"}}</code></p> </li> </ul>
    string DataRearrangement = 1;
    // <p>A JSON string that represents the schema for an Amazon Redshift <code>DataSource</code>. The <code>DataSchema</code> defines the structure of the observation data in the data file(s) referenced in the <code>DataSource</code>.</p> <p>A <code>DataSchema</code> is not required if you specify a <code>DataSchemaUri</code>.</p> <p>Define your <code>DataSchema</code> as a series of key-value pairs. <code>attributes</code> and <code>excludedVariableNames</code> have an array of key-value pairs for their value. Use the following format to define your <code>DataSchema</code>.</p> <p>{ "version": "1.0",</p> <p> "recordAnnotationFieldName": "F1",</p> <p> "recordWeightFieldName": "F2",</p> <p> "targetFieldName": "F3",</p> <p> "dataFormat": "CSV",</p> <p> "dataFileContainsHeader": true,</p> <p> "attributes": [</p> <p> { "fieldName": "F1", "fieldType": "TEXT" }, { "fieldName": "F2", "fieldType": "NUMERIC" }, { "fieldName": "F3", "fieldType": "CATEGORICAL" }, { "fieldName": "F4", "fieldType": "NUMERIC" }, { "fieldName": "F5", "fieldType": "CATEGORICAL" }, { "fieldName": "F6", "fieldType": "TEXT" }, { "fieldName": "F7", "fieldType": "WEIGHTED_INT_SEQUENCE" }, { "fieldName": "F8", "fieldType": "WEIGHTED_STRING_SEQUENCE" } ],</p> <p> "excludedVariableNames": [ "F6" ] } </p>
    string DataSchema = 2;
    // Describes the schema location for an Amazon Redshift <code>DataSource</code>.
    string DataSchemaUri = 3;
    // Describes AWS Identity and Access Management (IAM) credentials that are used connect to the Amazon Redshift database.
    RedshiftDatabaseCredentials DatabaseCredentials = 4;
    // Describes the <code>DatabaseName</code> and <code>ClusterIdentifier</code> for an Amazon Redshift <code>DataSource</code>.
    RedshiftDatabase DatabaseInformation = 5;
    // Describes an Amazon S3 location to store the result set of the <code>SelectSqlQuery</code> query.
    string S3StagingLocation = 6;
    // Describes the SQL Query to execute on an Amazon Redshift database for an Amazon Redshift <code>DataSource</code>.
    string SelectSqlQuery = 7;
}

message RedshiftDatabase {
    string ClusterIdentifier = 1;
    string DatabaseName = 2;
}

message RedshiftDatabaseCredentials {
    string Password = 1;
    string Username = 2;
}

message RedshiftMetadata {
    string DatabaseUserName = 1;
    RedshiftDatabase RedshiftDatabase = 2;
    //  The SQL query that is specified during <a>CreateDataSourceFromRedshift</a>. Returns only if <code>Verbose</code> is true in GetDataSourceInput.
    string SelectSqlQuery = 3;
}

message ResourceNotFoundException {
    integer code = 1;
    string message = 2;
}

message S3DataSpec {
    // The location of the data file(s) used by a <code>DataSource</code>. The URI specifies a data file or an Amazon Simple Storage Service (Amazon S3) directory or bucket containing data files.
    string DataLocationS3 = 1;
    // <p>A JSON string that represents the splitting and rearrangement processing to be applied to a <code>DataSource</code>. If the <code>DataRearrangement</code> parameter is not provided, all of the input data is used to create the <code>Datasource</code>.</p> <p>There are multiple parameters that control what data is used to create a datasource:</p> <ul> <li><p><b><code>percentBegin</code></b></p> <p>Use <code>percentBegin</code> to indicate the beginning of the range of the data used to create the Datasource. If you do not include <code>percentBegin</code> and <code>percentEnd</code>, Amazon ML includes all of the data when creating the datasource.</p></li> <li><p><b><code>percentEnd</code></b></p> <p>Use <code>percentEnd</code> to indicate the end of the range of the data used to create the Datasource. If you do not include <code>percentBegin</code> and <code>percentEnd</code>, Amazon ML includes all of the data when creating the datasource.</p></li> <li><p><b><code>complement</code></b></p> <p>The <code>complement</code> parameter instructs Amazon ML to use the data that is not included in the range of <code>percentBegin</code> to <code>percentEnd</code> to create a datasource. The <code>complement</code> parameter is useful if you need to create complementary datasources for training and evaluation. To create a complementary datasource, use the same values for <code>percentBegin</code> and <code>percentEnd</code>, along with the <code>complement</code> parameter.</p> <p>For example, the following two datasources do not share any data, and can be used to train and evaluate a model. The first datasource has 25 percent of the data, and the second one has 75 percent of the data.</p> <p>Datasource for evaluation: <code>{"splitting":{"percentBegin":0, "percentEnd":25}}</code></p> <p>Datasource for training: <code>{"splitting":{"percentBegin":0, "percentEnd":25, "complement":"true"}}</code></p> </li> <li><p><b><code>strategy</code></b></p> <p>To change how Amazon ML splits the data for a datasource, use the <code>strategy</code> parameter.</p> <p>The default value for the <code>strategy</code> parameter is <code>sequential</code>, meaning that Amazon ML takes all of the data records between the <code>percentBegin</code> and <code>percentEnd</code> parameters for the datasource, in the order that the records appear in the input data.</p> <p>The following two <code>DataRearrangement</code> lines are examples of sequentially ordered training and evaluation datasources:</p> <p>Datasource for evaluation: <code>{"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"sequential"}}</code></p> <p>Datasource for training: <code>{"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"sequential", "complement":"true"}}</code></p> <p>To randomly split the input data into the proportions indicated by the percentBegin and percentEnd parameters, set the <code>strategy</code> parameter to <code>random</code> and provide a string that is used as the seed value for the random data splitting (for example, you can use the S3 path to your data as the random seed string). If you choose the random split strategy, Amazon ML assigns each row of data a pseudo-random number between 0 and 100, and then selects the rows that have an assigned number between <code>percentBegin</code> and <code>percentEnd</code>. Pseudo-random numbers are assigned using both the input seed string value and the byte offset as a seed, so changing the data results in a different split. Any existing ordering is preserved. The random splitting strategy ensures that variables in the training and evaluation data are distributed similarly. It is useful in the cases where the input data may have an implicit sort order, which would otherwise result in training and evaluation datasources containing non-similar data records.</p> <p>The following two <code>DataRearrangement</code> lines are examples of non-sequentially ordered training and evaluation datasources:</p> <p>Datasource for evaluation: <code>{"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"random", "randomSeed"="s3://my_s3_path/bucket/file.csv"}}</code></p> <p>Datasource for training: <code>{"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"random", "randomSeed"="s3://my_s3_path/bucket/file.csv", "complement":"true"}}</code></p> </li> </ul>
    string DataRearrangement = 2;
    // <p> A JSON string that represents the schema for an Amazon S3 <code>DataSource</code>. The <code>DataSchema</code> defines the structure of the observation data in the data file(s) referenced in the <code>DataSource</code>.</p> <p>You must provide either the <code>DataSchema</code> or the <code>DataSchemaLocationS3</code>.</p> <p>Define your <code>DataSchema</code> as a series of key-value pairs. <code>attributes</code> and <code>excludedVariableNames</code> have an array of key-value pairs for their value. Use the following format to define your <code>DataSchema</code>.</p> <p>{ "version": "1.0",</p> <p> "recordAnnotationFieldName": "F1",</p> <p> "recordWeightFieldName": "F2",</p> <p> "targetFieldName": "F3",</p> <p> "dataFormat": "CSV",</p> <p> "dataFileContainsHeader": true,</p> <p> "attributes": [</p> <p> { "fieldName": "F1", "fieldType": "TEXT" }, { "fieldName": "F2", "fieldType": "NUMERIC" }, { "fieldName": "F3", "fieldType": "CATEGORICAL" }, { "fieldName": "F4", "fieldType": "NUMERIC" }, { "fieldName": "F5", "fieldType": "CATEGORICAL" }, { "fieldName": "F6", "fieldType": "TEXT" }, { "fieldName": "F7", "fieldType": "WEIGHTED_INT_SEQUENCE" }, { "fieldName": "F8", "fieldType": "WEIGHTED_STRING_SEQUENCE" } ],</p> <p> "excludedVariableNames": [ "F6" ] } </p> <?oxy_insert_end>
    string DataSchema = 3;
    // Describes the schema location in Amazon S3. You must provide either the <code>DataSchema</code> or the <code>DataSchemaLocationS3</code>.
    string DataSchemaLocationS3 = 4;
}

message ScoreValuePerLabelMap {
    string key = 1;
    number value = 2;
}
repeated ScoreValuePerLabelMap ScoreValuePerLabelMap = 1

enum SortOrder {
    ASC = 0;
    DSC = 1;
}

message Tag {
    // A unique identifier for the tag. Valid characters include Unicode letters, digits, white space, _, ., /, =, +, -, %, and @.
    string Key = 1;
    // An optional string, typically used to describe or define the tag. Valid characters include Unicode letters, digits, white space, _, ., /, =, +, -, %, and @.
    string Value = 2;
}



repeated string TagKeyList = 1

message TagLimitExceededException {
    string message = 1;
}

repeated Tag TagList = 1



enum TaggableResourceType {
    BATCHPREDICTION = 0;
    DATASOURCE = 1;
    EVALUATION = 2;
    MLMODEL = 3;
}

message TrainingParameter {
    string key = 1;
    string value = 2;
}
repeated TrainingParameter TrainingParameters = 1

message UpdateBatchPredictionInput {
    // The ID assigned to the <code>BatchPrediction</code> during creation.
    string BatchPredictionId = 1;
    // A new user-supplied name or description of the <code>BatchPrediction</code>.
    string BatchPredictionName = 2;
}

message UpdateBatchPredictionOutput {
    // The ID assigned to the <code>BatchPrediction</code> during creation. This value should be identical to the value of the <code>BatchPredictionId</code> in the request.
    string BatchPredictionId = 1;
}

message UpdateDataSourceInput {
    // The ID assigned to the <code>DataSource</code> during creation.
    string DataSourceId = 1;
    // A new user-supplied name or description of the <code>DataSource</code> that will replace the current description.
    string DataSourceName = 2;
}

message UpdateDataSourceOutput {
    // The ID assigned to the <code>DataSource</code> during creation. This value should be identical to the value of the <code>DataSourceID</code> in the request.
    string DataSourceId = 1;
}

message UpdateEvaluationInput {
    // The ID assigned to the <code>Evaluation</code> during creation.
    string EvaluationId = 1;
    // A new user-supplied name or description of the <code>Evaluation</code> that will replace the current content.
    string EvaluationName = 2;
}

message UpdateEvaluationOutput {
    // The ID assigned to the <code>Evaluation</code> during creation. This value should be identical to the value of the <code>Evaluation</code> in the request.
    string EvaluationId = 1;
}

message UpdateMLModelInput {
    // The ID assigned to the <code>MLModel</code> during creation.
    string MLModelId = 1;
    // A user-supplied name or description of the <code>MLModel</code>.
    string MLModelName = 2;
    // <p>The <code>ScoreThreshold</code> used in binary classification <code>MLModel</code> that marks the boundary between a positive prediction and a negative prediction.</p> <p>Output values greater than or equal to the <code>ScoreThreshold</code> receive a positive result from the <code>MLModel</code>, such as <code>true</code>. Output values less than the <code>ScoreThreshold</code> receive a negative response from the <code>MLModel</code>, such as <code>false</code>.</p>
    number ScoreThreshold = 3;
}

message UpdateMLModelOutput {
    // The ID assigned to the <code>MLModel</code> during creation. This value should be identical to the value of the <code>MLModelID</code> in the request.
    string MLModelId = 1;
}

service AmazonMachineLearningService {
    // Adds one or more tags to an object, up to a limit of 10. Each tag consists of a key and an optional value. If you add a tag using a key that is already associated with the ML object, <code>AddTags</code> updates the tag's value.
    rpc Post(PostRequest) returns (AddTagsOutput) {
      option (google.api.http) = {
        post: "//"
        body: "body"
      };
    }
    // <p>Generates predictions for a group of observations. The observations to process exist in one or more data files referenced by a <code>DataSource</code>. This operation creates a new <code>BatchPrediction</code>, and uses an <code>MLModel</code> and the data files referenced by the <code>DataSource</code> as information sources. </p> <p><code>CreateBatchPrediction</code> is an asynchronous operation. In response to <code>CreateBatchPrediction</code>, Amazon Machine Learning (Amazon ML) immediately returns and sets the <code>BatchPrediction</code> status to <code>PENDING</code>. After the <code>BatchPrediction</code> completes, Amazon ML sets the status to <code>COMPLETED</code>. </p> <p>You can poll for status updates by using the <a>GetBatchPrediction</a> operation and checking the <code>Status</code> parameter of the result. After the <code>COMPLETED</code> status appears, the results are available in the location specified by the <code>OutputUri</code> parameter.</p>
    rpc Post#CreateBatchPrediction(Post#CreateBatchPredictionRequest) returns (CreateBatchPredictionOutput) {
      option (google.api.http) = {
        post: "//#CreateBatchPrediction"
        body: "body"
      };
    }
    // <p>Creates a <code>DataSource</code> object from an <a href="http://aws.amazon.com/rds/"> Amazon Relational Database Service</a> (Amazon RDS). A <code>DataSource</code> references data that can be used to perform <code>CreateMLModel</code>, <code>CreateEvaluation</code>, or <code>CreateBatchPrediction</code> operations.</p> <p><code>CreateDataSourceFromRDS</code> is an asynchronous operation. In response to <code>CreateDataSourceFromRDS</code>, Amazon Machine Learning (Amazon ML) immediately returns and sets the <code>DataSource</code> status to <code>PENDING</code>. After the <code>DataSource</code> is created and ready for use, Amazon ML sets the <code>Status</code> parameter to <code>COMPLETED</code>. <code>DataSource</code> in the <code>COMPLETED</code> or <code>PENDING</code> state can be used only to perform <code>&gt;CreateMLModel</code>&gt;, <code>CreateEvaluation</code>, or <code>CreateBatchPrediction</code> operations. </p> <p> If Amazon ML cannot accept the input source, it sets the <code>Status</code> parameter to <code>FAILED</code> and includes an error message in the <code>Message</code> attribute of the <code>GetDataSource</code> operation response. </p>
    rpc Post#CreateDataSourceFromRDS(Post#CreateDataSourceFromRDSRequest) returns (CreateDataSourceFromRDSOutput) {
      option (google.api.http) = {
        post: "//#CreateDataSourceFromRDS"
        body: "body"
      };
    }
    // <p>Creates a <code>DataSource</code> from a database hosted on an Amazon Redshift cluster. A <code>DataSource</code> references data that can be used to perform either <code>CreateMLModel</code>, <code>CreateEvaluation</code>, or <code>CreateBatchPrediction</code> operations.</p> <p><code>CreateDataSourceFromRedshift</code> is an asynchronous operation. In response to <code>CreateDataSourceFromRedshift</code>, Amazon Machine Learning (Amazon ML) immediately returns and sets the <code>DataSource</code> status to <code>PENDING</code>. After the <code>DataSource</code> is created and ready for use, Amazon ML sets the <code>Status</code> parameter to <code>COMPLETED</code>. <code>DataSource</code> in <code>COMPLETED</code> or <code>PENDING</code> states can be used to perform only <code>CreateMLModel</code>, <code>CreateEvaluation</code>, or <code>CreateBatchPrediction</code> operations. </p> <p> If Amazon ML can't accept the input source, it sets the <code>Status</code> parameter to <code>FAILED</code> and includes an error message in the <code>Message</code> attribute of the <code>GetDataSource</code> operation response. </p> <p>The observations should be contained in the database hosted on an Amazon Redshift cluster and should be specified by a <code>SelectSqlQuery</code> query. Amazon ML executes an <code>Unload</code> command in Amazon Redshift to transfer the result set of the <code>SelectSqlQuery</code> query to <code>S3StagingLocation</code>.</p> <p>After the <code>DataSource</code> has been created, it's ready for use in evaluations and batch predictions. If you plan to use the <code>DataSource</code> to train an <code>MLModel</code>, the <code>DataSource</code> also requires a recipe. A recipe describes how each input variable will be used in training an <code>MLModel</code>. Will the variable be included or excluded from training? Will the variable be manipulated; for example, will it be combined with another variable or will it be split apart into word combinations? The recipe provides answers to these questions.</p> <?oxy_insert_start author="laurama" timestamp="20160406T153842-0700"><p>You can't change an existing datasource, but you can copy and modify the settings from an existing Amazon Redshift datasource to create a new datasource. To do so, call <code>GetDataSource</code> for an existing datasource and copy the values to a <code>CreateDataSource</code> call. Change the settings that you want to change and make sure that all required fields have the appropriate values.</p> <?oxy_insert_end>
    rpc Post#CreateDataSourceFromRedshift(Post#CreateDataSourceFromRedshiftRequest) returns (CreateDataSourceFromRedshiftOutput) {
      option (google.api.http) = {
        post: "//#CreateDataSourceFromRedshift"
        body: "body"
      };
    }
    // <p>Creates a <code>DataSource</code> object. A <code>DataSource</code> references data that can be used to perform <code>CreateMLModel</code>, <code>CreateEvaluation</code>, or <code>CreateBatchPrediction</code> operations.</p> <p><code>CreateDataSourceFromS3</code> is an asynchronous operation. In response to <code>CreateDataSourceFromS3</code>, Amazon Machine Learning (Amazon ML) immediately returns and sets the <code>DataSource</code> status to <code>PENDING</code>. After the <code>DataSource</code> has been created and is ready for use, Amazon ML sets the <code>Status</code> parameter to <code>COMPLETED</code>. <code>DataSource</code> in the <code>COMPLETED</code> or <code>PENDING</code> state can be used to perform only <code>CreateMLModel</code>, <code>CreateEvaluation</code> or <code>CreateBatchPrediction</code> operations. </p> <p> If Amazon ML can't accept the input source, it sets the <code>Status</code> parameter to <code>FAILED</code> and includes an error message in the <code>Message</code> attribute of the <code>GetDataSource</code> operation response. </p> <p>The observation data used in a <code>DataSource</code> should be ready to use; that is, it should have a consistent structure, and missing data values should be kept to a minimum. The observation data must reside in one or more .csv files in an Amazon Simple Storage Service (Amazon S3) location, along with a schema that describes the data items by name and type. The same schema must be used for all of the data files referenced by the <code>DataSource</code>. </p> <p>After the <code>DataSource</code> has been created, it's ready to use in evaluations and batch predictions. If you plan to use the <code>DataSource</code> to train an <code>MLModel</code>, the <code>DataSource</code> also needs a recipe. A recipe describes how each input variable will be used in training an <code>MLModel</code>. Will the variable be included or excluded from training? Will the variable be manipulated; for example, will it be combined with another variable or will it be split apart into word combinations? The recipe provides answers to these questions.</p>
    rpc Post#CreateDataSourceFromS3(Post#CreateDataSourceFromS3Request) returns (CreateDataSourceFromS3Output) {
      option (google.api.http) = {
        post: "//#CreateDataSourceFromS3"
        body: "body"
      };
    }
    // <p>Creates a new <code>Evaluation</code> of an <code>MLModel</code>. An <code>MLModel</code> is evaluated on a set of observations associated to a <code>DataSource</code>. Like a <code>DataSource</code> for an <code>MLModel</code>, the <code>DataSource</code> for an <code>Evaluation</code> contains values for the <code>Target Variable</code>. The <code>Evaluation</code> compares the predicted result for each observation to the actual outcome and provides a summary so that you know how effective the <code>MLModel</code> functions on the test data. Evaluation generates a relevant performance metric, such as BinaryAUC, RegressionRMSE or MulticlassAvgFScore based on the corresponding <code>MLModelType</code>: <code>BINARY</code>, <code>REGRESSION</code> or <code>MULTICLASS</code>. </p> <p><code>CreateEvaluation</code> is an asynchronous operation. In response to <code>CreateEvaluation</code>, Amazon Machine Learning (Amazon ML) immediately returns and sets the evaluation status to <code>PENDING</code>. After the <code>Evaluation</code> is created and ready for use, Amazon ML sets the status to <code>COMPLETED</code>. </p> <p>You can use the <code>GetEvaluation</code> operation to check progress of the evaluation during the creation operation.</p>
    rpc Post#CreateEvaluation(Post#CreateEvaluationRequest) returns (CreateEvaluationOutput) {
      option (google.api.http) = {
        post: "//#CreateEvaluation"
        body: "body"
      };
    }
    // <p>Creates a new <code>MLModel</code> using the <code>DataSource</code> and the recipe as information sources. </p> <p>An <code>MLModel</code> is nearly immutable. Users can update only the <code>MLModelName</code> and the <code>ScoreThreshold</code> in an <code>MLModel</code> without creating a new <code>MLModel</code>. </p> <p><code>CreateMLModel</code> is an asynchronous operation. In response to <code>CreateMLModel</code>, Amazon Machine Learning (Amazon ML) immediately returns and sets the <code>MLModel</code> status to <code>PENDING</code>. After the <code>MLModel</code> has been created and ready is for use, Amazon ML sets the status to <code>COMPLETED</code>. </p> <p>You can use the <code>GetMLModel</code> operation to check the progress of the <code>MLModel</code> during the creation operation.</p> <p> <code>CreateMLModel</code> requires a <code>DataSource</code> with computed statistics, which can be created by setting <code>ComputeStatistics</code> to <code>true</code> in <code>CreateDataSourceFromRDS</code>, <code>CreateDataSourceFromS3</code>, or <code>CreateDataSourceFromRedshift</code> operations. </p>
    rpc Post#CreateMLModel(Post#CreateMLModelRequest) returns (CreateMLModelOutput) {
      option (google.api.http) = {
        post: "//#CreateMLModel"
        body: "body"
      };
    }
    // Creates a real-time endpoint for the <code>MLModel</code>. The endpoint contains the URI of the <code>MLModel</code>; that is, the location to send real-time prediction requests for the specified <code>MLModel</code>.
    rpc Post#CreateRealtimeEndpoint(Post#CreateRealtimeEndpointRequest) returns (CreateRealtimeEndpointOutput) {
      option (google.api.http) = {
        post: "//#CreateRealtimeEndpoint"
        body: "body"
      };
    }
    // <p>Assigns the DELETED status to a <code>BatchPrediction</code>, rendering it unusable.</p> <p>After using the <code>DeleteBatchPrediction</code> operation, you can use the <a>GetBatchPrediction</a> operation to verify that the status of the <code>BatchPrediction</code> changed to DELETED.</p> <p><b>Caution:</b> The result of the <code>DeleteBatchPrediction</code> operation is irreversible.</p>
    rpc Post#DeleteBatchPrediction(Post#DeleteBatchPredictionRequest) returns (DeleteBatchPredictionOutput) {
      option (google.api.http) = {
        post: "//#DeleteBatchPrediction"
        body: "body"
      };
    }
    // <p>Assigns the DELETED status to a <code>DataSource</code>, rendering it unusable.</p> <p>After using the <code>DeleteDataSource</code> operation, you can use the <a>GetDataSource</a> operation to verify that the status of the <code>DataSource</code> changed to DELETED.</p> <p><b>Caution:</b> The results of the <code>DeleteDataSource</code> operation are irreversible.</p>
    rpc Post#DeleteDataSource(Post#DeleteDataSourceRequest) returns (DeleteDataSourceOutput) {
      option (google.api.http) = {
        post: "//#DeleteDataSource"
        body: "body"
      };
    }
    // <p>Assigns the <code>DELETED</code> status to an <code>Evaluation</code>, rendering it unusable.</p> <p>After invoking the <code>DeleteEvaluation</code> operation, you can use the <code>GetEvaluation</code> operation to verify that the status of the <code>Evaluation</code> changed to <code>DELETED</code>.</p> <caution><title>Caution</title> <p>The results of the <code>DeleteEvaluation</code> operation are irreversible.</p></caution>
    rpc Post#DeleteEvaluation(Post#DeleteEvaluationRequest) returns (DeleteEvaluationOutput) {
      option (google.api.http) = {
        post: "//#DeleteEvaluation"
        body: "body"
      };
    }
    // <p>Assigns the <code>DELETED</code> status to an <code>MLModel</code>, rendering it unusable.</p> <p>After using the <code>DeleteMLModel</code> operation, you can use the <code>GetMLModel</code> operation to verify that the status of the <code>MLModel</code> changed to DELETED.</p> <p><b>Caution:</b> The result of the <code>DeleteMLModel</code> operation is irreversible.</p>
    rpc Post#DeleteMLModel(Post#DeleteMLModelRequest) returns (DeleteMLModelOutput) {
      option (google.api.http) = {
        post: "//#DeleteMLModel"
        body: "body"
      };
    }
    // Deletes a real time endpoint of an <code>MLModel</code>.
    rpc Post#DeleteRealtimeEndpoint(Post#DeleteRealtimeEndpointRequest) returns (DeleteRealtimeEndpointOutput) {
      option (google.api.http) = {
        post: "//#DeleteRealtimeEndpoint"
        body: "body"
      };
    }
    // <p>Deletes the specified tags associated with an ML object. After this operation is complete, you can't recover deleted tags.</p> <p>If you specify a tag that doesn't exist, Amazon ML ignores it.</p>
    rpc Post#DeleteTags(Post#DeleteTagsRequest) returns (DeleteTagsOutput) {
      option (google.api.http) = {
        post: "//#DeleteTags"
        body: "body"
      };
    }
    // Returns a list of <code>BatchPrediction</code> operations that match the search criteria in the request.
    rpc Post#DescribeBatchPredictions(Post#DescribeBatchPredictionsRequest) returns (DescribeBatchPredictionsOutput) {
      option (google.api.http) = {
        post: "//#DescribeBatchPredictions"
        body: "body"
      };
    }
    // Returns a list of <code>DataSource</code> that match the search criteria in the request.
    rpc Post#DescribeDataSources(Post#DescribeDataSourcesRequest) returns (DescribeDataSourcesOutput) {
      option (google.api.http) = {
        post: "//#DescribeDataSources"
        body: "body"
      };
    }
    // Returns a list of <code>DescribeEvaluations</code> that match the search criteria in the request.
    rpc Post#DescribeEvaluations(Post#DescribeEvaluationsRequest) returns (DescribeEvaluationsOutput) {
      option (google.api.http) = {
        post: "//#DescribeEvaluations"
        body: "body"
      };
    }
    // Returns a list of <code>MLModel</code> that match the search criteria in the request.
    rpc Post#DescribeMLModels(Post#DescribeMLModelsRequest) returns (DescribeMLModelsOutput) {
      option (google.api.http) = {
        post: "//#DescribeMLModels"
        body: "body"
      };
    }
    // Describes one or more of the tags for your Amazon ML object.
    rpc Post#DescribeTags(Post#DescribeTagsRequest) returns (DescribeTagsOutput) {
      option (google.api.http) = {
        post: "//#DescribeTags"
        body: "body"
      };
    }
    // Returns a <code>BatchPrediction</code> that includes detailed metadata, status, and data file information for a <code>Batch Prediction</code> request.
    rpc Post#GetBatchPrediction(Post#GetBatchPredictionRequest) returns (GetBatchPredictionOutput) {
      option (google.api.http) = {
        post: "//#GetBatchPrediction"
        body: "body"
      };
    }
    // <p>Returns a <code>DataSource</code> that includes metadata and data file information, as well as the current status of the <code>DataSource</code>.</p> <p><code>GetDataSource</code> provides results in normal or verbose format. The verbose format adds the schema description and the list of files pointed to by the DataSource to the normal format.</p>
    rpc Post#GetDataSource(Post#GetDataSourceRequest) returns (GetDataSourceOutput) {
      option (google.api.http) = {
        post: "//#GetDataSource"
        body: "body"
      };
    }
    // Returns an <code>Evaluation</code> that includes metadata as well as the current status of the <code>Evaluation</code>.
    rpc Post#GetEvaluation(Post#GetEvaluationRequest) returns (GetEvaluationOutput) {
      option (google.api.http) = {
        post: "//#GetEvaluation"
        body: "body"
      };
    }
    // <p>Returns an <code>MLModel</code> that includes detailed metadata, data source information, and the current status of the <code>MLModel</code>.</p> <p><code>GetMLModel</code> provides results in normal or verbose format. </p>
    rpc Post#GetMLModel(Post#GetMLModelRequest) returns (GetMLModelOutput) {
      option (google.api.http) = {
        post: "//#GetMLModel"
        body: "body"
      };
    }
    // <p>Generates a prediction for the observation using the specified <code>ML Model</code>.</p> <note><title>Note</title> <p>Not all response parameters will be populated. Whether a response parameter is populated depends on the type of model requested.</p></note>
    rpc Post#Predict(Post#PredictRequest) returns (PredictOutput) {
      option (google.api.http) = {
        post: "//#Predict"
        body: "body"
      };
    }
    // <p>Updates the <code>BatchPredictionName</code> of a <code>BatchPrediction</code>.</p> <p>You can use the <code>GetBatchPrediction</code> operation to view the contents of the updated data element.</p>
    rpc Post#UpdateBatchPrediction(Post#UpdateBatchPredictionRequest) returns (UpdateBatchPredictionOutput) {
      option (google.api.http) = {
        post: "//#UpdateBatchPrediction"
        body: "body"
      };
    }
    // <p>Updates the <code>DataSourceName</code> of a <code>DataSource</code>.</p> <p>You can use the <code>GetDataSource</code> operation to view the contents of the updated data element.</p>
    rpc Post#UpdateDataSource(Post#UpdateDataSourceRequest) returns (UpdateDataSourceOutput) {
      option (google.api.http) = {
        post: "//#UpdateDataSource"
        body: "body"
      };
    }
    // <p>Updates the <code>EvaluationName</code> of an <code>Evaluation</code>.</p> <p>You can use the <code>GetEvaluation</code> operation to view the contents of the updated data element.</p>
    rpc Post#UpdateEvaluation(Post#UpdateEvaluationRequest) returns (UpdateEvaluationOutput) {
      option (google.api.http) = {
        post: "//#UpdateEvaluation"
        body: "body"
      };
    }
    // <p>Updates the <code>MLModelName</code> and the <code>ScoreThreshold</code> of an <code>MLModel</code>.</p> <p>You can use the <code>GetMLModel</code> operation to view the contents of the updated data element.</p>
    rpc Post#UpdateMLModel(Post#UpdateMLModelRequest) returns (UpdateMLModelOutput) {
      option (google.api.http) = {
        post: "//#UpdateMLModel"
        body: "body"
      };
    }
}

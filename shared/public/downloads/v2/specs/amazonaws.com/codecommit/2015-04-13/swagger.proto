syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package awscodecommit;

message PostRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    BatchGetRepositoriesInput body = 10;
}

message Post#CreateBranchRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateBranchInput body = 10;
}

message Post#CreateRepositoryRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateRepositoryInput body = 10;
}

message Post#DeleteRepositoryRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteRepositoryInput body = 10;
}

message Post#GetBlobRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetBlobInput body = 10;
}

message Post#GetBranchRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetBranchInput body = 10;
}

message Post#GetCommitRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetCommitInput body = 10;
}

message Post#GetDifferencesRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    GetDifferencesInput body = 12;
}

message Post#GetRepositoryRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetRepositoryInput body = 10;
}

message Post#GetRepositoryTriggersRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetRepositoryTriggersInput body = 10;
}

message Post#ListBranchesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListBranchesInput body = 10;
    // Pagination token
    string nextToken = 11;
}

message Post#ListRepositoriesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListRepositoriesInput body = 10;
    // Pagination token
    string nextToken = 11;
}

message Post#PutRepositoryTriggersRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    PutRepositoryTriggersInput body = 10;
}

message Post#TestRepositoryTriggersRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    TestRepositoryTriggersInput body = 10;
}

message Post#UpdateDefaultBranchRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateDefaultBranchInput body = 10;
}

message Post#UpdateRepositoryDescriptionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateRepositoryDescriptionInput body = 10;
}

message Post#UpdateRepositoryNameRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateRepositoryNameInput body = 10;
}

message BatchGetRepositoriesInput {
    // The names of the repositories to get information about.
    array repositoryNames = 1;
}

message BatchGetRepositoriesOutput {
    // A list of repositories returned by the batch get repositories operation.
    array repositories = 1;
    // Returns a list of repository names for which information could not be found.
    array repositoriesNotFound = 2;
}

message BlobIdDoesNotExistException {
}

message BlobIdRequiredException {
}

message BlobMetadata {
    // The full ID of the blob.
    string blobId = 1;
    // <p>The file mode permissions of the blob. File mode permission codes include:</p> <ul> <li> <p> <code>100644</code> indicates read/write</p> </li> <li> <p> <code>100755</code> indicates read/write/execute</p> </li> <li> <p> <code>160000</code> indicates a submodule</p> </li> <li> <p> <code>120000</code> indicates a symlink</p> </li> </ul>
    string mode = 2;
    // The path to the blob and any associated file name, if any.
    string path = 3;
}

message BranchDoesNotExistException {
}

message BranchInfo {
    // The name of the branch.
    string branchName = 1;
    // The ID of the last commit made to the branch.
    string commitId = 2;
}

message BranchNameExistsException {
}

repeated string BranchNameList = 1

message BranchNameRequiredException {
}

enum ChangeTypeEnum {
    A = 0;
    M = 1;
    D = 2;
}

message Commit {
    // Any additional data associated with the specified commit.
    string additionalData = 1;
    // Information about the author of the specified commit. Information includes the date in timestamp format with GMT offset, the name of the author, and the email address for the author, as configured in Git.
    UserInfo author = 2;
    // <p>Information about the person who committed the specified commit, also known as the committer. Information includes the date in timestamp format with GMT offset, the name of the committer, and the email address for the committer, as configured in Git.</p> <p>For more information about the difference between an author and a committer in Git, see <a href="http://git-scm.com/book/ch2-3.html">Viewing the Commit History</a> in Pro Git by Scott Chacon and Ben Straub.</p>
    UserInfo committer = 3;
    // The commit message associated with the specified commit.
    string message = 4;
    // The parent list for the specified commit.
    array parents = 5;
    // Tree information for the specified commit.
    string treeId = 6;
}

message CommitDoesNotExistException {
}

message CommitIdDoesNotExistException {
}

message CommitIdRequiredException {
}

message CommitRequiredException {
}

message CreateBranchInput {
    // The name of the new branch to create.
    string branchName = 1;
    // The ID of the commit to point the new branch to.
    string commitId = 2;
    // The name of the repository in which you want to create the new branch.
    string repositoryName = 3;
}

message CreateRepositoryInput {
    // <p>A comment or description about the new repository.</p> <note> <p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a web page could expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a web page.</p> </note>
    string repositoryDescription = 1;
    // <p>The name of the new repository to be created.</p> <note> <p>The repository name must be unique across the calling AWS account. In addition, repository names are limited to 100 alphanumeric, dash, and underscore characters, and cannot include certain characters. For a full description of the limits on repository names, see <a href="http://docs.aws.amazon.com/codecommit/latest/userguide/limits.html">Limits</a> in the AWS CodeCommit User Guide. The suffix ".git" is prohibited.</p> </note>
    string repositoryName = 2;
}

message CreateRepositoryOutput {
    // Information about the newly created repository.
    RepositoryMetadata repositoryMetadata = 1;
}

message DeleteRepositoryInput {
    // The name of the repository to delete.
    string repositoryName = 1;
}

message DeleteRepositoryOutput {
    // The ID of the repository that was deleted.
    string repositoryId = 1;
}

message Difference {
    // Information about an <code>afterBlob</code> data type object, including the ID, the file mode permission code, and the path.
    BlobMetadata afterBlob = 1;
    // Information about a <code>beforeBlob</code> data type object, including the ID, the file mode permission code, and the path.
    BlobMetadata beforeBlob = 2;
    // Whether the change type of the difference is an addition (A), deletion (D), or modification (M).
    ChangeTypeEnum changeType = 3;
}

repeated Difference DifferenceList = 1



message EncryptionIntegrityChecksFailedException {
}

message EncryptionKeyAccessDeniedException {
}

message EncryptionKeyDisabledException {
}

message EncryptionKeyNotFoundException {
}

message EncryptionKeyUnavailableException {
}

message FileTooLargeException {
}

message GetBlobInput {
    // The ID of the blob, which is its SHA-1 pointer.
    string blobId = 1;
    // The name of the repository that contains the blob.
    string repositoryName = 2;
}

message GetBlobOutput {
    // The content of the blob, usually a file.
    string content = 1;
}

message GetBranchInput {
    // The name of the branch for which you want to retrieve information.
    string branchName = 1;
    // The name of the repository that contains the branch for which you want to retrieve information.
    string repositoryName = 2;
}

message GetBranchOutput {
    // The name of the branch.
    BranchInfo branch = 1;
}

message GetCommitInput {
    // The commit ID.
    string commitId = 1;
    // The name of the repository to which the commit was made.
    string repositoryName = 2;
}

message GetCommitOutput {
    // A commit data type object that contains information about the specified commit.
    Commit commit = 1;
}

message GetDifferencesInput {
    // A non-negative integer used to limit the number of returned results.
    integer MaxResults = 1;
    // An enumeration token that when provided in a request, returns the next batch of the results.
    string NextToken = 2;
    // The branch, tag, HEAD, or other fully qualified reference used to identify a commit.
    string afterCommitSpecifier = 3;
    // The file path in which to check differences. Limits the results to this path. Can also be used to specify the changed name of a directory or folder, if it has changed. If not specified, differences will be shown for all paths.
    string afterPath = 4;
    // The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, the full commit ID. Optional. If not specified, all changes prior to the <code>afterCommitSpecifier</code> value will be shown. If you do not use <code>beforeCommitSpecifier</code> in your request, consider limiting the results with <code>maxResults</code>.
    string beforeCommitSpecifier = 5;
    // The file path in which to check for differences. Limits the results to this path. Can also be used to specify the previous name of a directory or folder. If <code>beforePath</code> and <code>afterPath</code> are not specified, differences will be shown for all paths.
    string beforePath = 6;
    // The name of the repository where you want to get differences.
    string repositoryName = 7;
}

message GetDifferencesOutput {
    // An enumeration token that can be used in a request to return the next batch of the results.
    string NextToken = 1;
    // A differences data type object that contains information about the differences, including whether the difference is added, modified, or deleted (A, D, M).
    array differences = 2;
}

message GetRepositoryInput {
    // The name of the repository to get information about.
    string repositoryName = 1;
}

message GetRepositoryOutput {
    // Information about the repository.
    RepositoryMetadata repositoryMetadata = 1;
}

message GetRepositoryTriggersInput {
    // The name of the repository for which the trigger is configured.
    string repositoryName = 1;
}

message GetRepositoryTriggersOutput {
    // The system-generated unique ID for the trigger.
    string configurationId = 1;
    // The JSON block of configuration information for each trigger.
    array triggers = 2;
}

message InvalidBlobIdException {
}

message InvalidBranchNameException {
}

message InvalidCommitException {
}

message InvalidCommitIdException {
}

message InvalidContinuationTokenException {
}

message InvalidMaxResultsException {
}

message InvalidOrderException {
}

message InvalidPathException {
}

message InvalidRepositoryDescriptionException {
}

message InvalidRepositoryNameException {
}

message InvalidRepositoryTriggerBranchNameException {
}

message InvalidRepositoryTriggerCustomDataException {
}

message InvalidRepositoryTriggerDestinationArnException {
}

message InvalidRepositoryTriggerEventsException {
}

message InvalidRepositoryTriggerNameException {
}

message InvalidRepositoryTriggerRegionException {
}

message InvalidSortByException {
}

message ListBranchesInput {
    // An enumeration token that allows the operation to batch the results.
    string nextToken = 1;
    // The name of the repository that contains the branches.
    string repositoryName = 2;
}

message ListBranchesOutput {
    // The list of branch names.
    array branches = 1;
    // An enumeration token that returns the batch of the results.
    string nextToken = 2;
}

message ListRepositoriesInput {
    // An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.
    string nextToken = 1;
    // The order in which to sort the results of a list repositories operation.
    OrderEnum order = 2;
    // The criteria used to sort the results of a list repositories operation.
    SortByEnum sortBy = 3;
}

message ListRepositoriesOutput {
    // An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.
    string nextToken = 1;
    // Lists the repositories called by the list repositories operation.
    array repositories = 2;
}

message MaximumBranchesExceededException {
}

message MaximumRepositoryNamesExceededException {
}

message MaximumRepositoryTriggersExceededException {
}

enum OrderEnum {
    ASCENDING = 0;
    DESCENDING = 1;
}

repeated string ParentList = 1



message PathDoesNotExistException {
}

message PutRepositoryTriggersInput {
    // The name of the repository where you want to create or update the trigger.
    string repositoryName = 1;
    // The JSON block of configuration information for each trigger.
    array triggers = 2;
}

message PutRepositoryTriggersOutput {
    // The system-generated unique ID for the create or update operation.
    string configurationId = 1;
}

message RepositoryDoesNotExistException {
}

message RepositoryLimitExceededException {
}

message RepositoryMetadata {
    // The Amazon Resource Name (ARN) of the repository.
    string Arn = 1;
    // The ID of the AWS account associated with the repository.
    string accountId = 2;
    // The URL to use for cloning the repository over HTTPS.
    string cloneUrlHttp = 3;
    // The URL to use for cloning the repository over SSH.
    string cloneUrlSsh = 4;
    // The date and time the repository was created, in timestamp format.
    string creationDate = 5;
    // The repository's default branch name.
    string defaultBranch = 6;
    // The date and time the repository was last modified, in timestamp format.
    string lastModifiedDate = 7;
    // A comment or description about the repository.
    string repositoryDescription = 8;
    // The ID of the repository.
    string repositoryId = 9;
    // The repository's name.
    string repositoryName = 10;
}

repeated RepositoryMetadata RepositoryMetadataList = 1



message RepositoryNameExistsException {
}

message RepositoryNameIdPair {
    // The ID associated with the repository.
    string repositoryId = 1;
    // The name associated with the repository.
    string repositoryName = 2;
}

repeated RepositoryNameIdPair RepositoryNameIdPairList = 1

repeated string RepositoryNameList = 1

message RepositoryNameRequiredException {
}

message RepositoryNamesRequiredException {
}

repeated string RepositoryNotFoundList = 1

message RepositoryTrigger {
    // The branches that will be included in the trigger configuration. If no branches are specified, the trigger will apply to all branches.
    array branches = 1;
    // Any custom data associated with the trigger that will be included in the information sent to the target of the trigger.
    string customData = 2;
    // The ARN of the resource that is the target for a trigger. For example, the ARN of a topic in Amazon Simple Notification Service (SNS).
    string destinationArn = 3;
    // <p>The repository events that will cause the trigger to run actions in another service, such as sending a notification through Amazon Simple Notification Service (SNS). </p> <note> <p>The valid value "all" cannot be used with any other values.</p> </note>
    array events = 4;
    // The name of the trigger.
    string name = 5;
}

message RepositoryTriggerBranchNameListRequiredException {
}

message RepositoryTriggerDestinationArnRequiredException {
}

enum RepositoryTriggerEventEnum {
    ALL = 0;
    UPDATEREFERENCE = 1;
    CREATEREFERENCE = 2;
    DELETEREFERENCE = 3;
}

repeated RepositoryTriggerEventEnum RepositoryTriggerEventList = 1

message RepositoryTriggerEventsListRequiredException {
}

message RepositoryTriggerExecutionFailure {
    // Additional message information about the trigger that did not run.
    string failureMessage = 1;
    // The name of the trigger that did not run.
    string trigger = 2;
}

repeated RepositoryTriggerExecutionFailure RepositoryTriggerExecutionFailureList = 1





repeated string RepositoryTriggerNameList = 1

message RepositoryTriggerNameRequiredException {
}



repeated RepositoryTrigger RepositoryTriggersList = 1

message RepositoryTriggersListRequiredException {
}

enum SortByEnum {
    REPOSITORYNAME = 0;
    LASTMODIFIEDDATE = 1;
}

message TestRepositoryTriggersInput {
    // The name of the repository in which to test the triggers.
    string repositoryName = 1;
    // The list of triggers to test.
    array triggers = 2;
}

message TestRepositoryTriggersOutput {
    // The list of triggers that were not able to be tested. This list provides the names of the triggers that could not be tested, separated by commas.
    array failedExecutions = 1;
    // The list of triggers that were successfully tested. This list provides the names of the triggers that were successfully tested, separated by commas.
    array successfulExecutions = 2;
}

message UpdateDefaultBranchInput {
    // The name of the branch to set as the default.
    string defaultBranchName = 1;
    // The name of the repository to set or change the default branch for.
    string repositoryName = 2;
}

message UpdateRepositoryDescriptionInput {
    // The new comment or description for the specified repository. Repository descriptions are limited to 1,000 characters.
    string repositoryDescription = 1;
    // The name of the repository to set or change the comment or description for.
    string repositoryName = 2;
}

message UpdateRepositoryNameInput {
    // The new name for the repository.
    string newName = 1;
    // The existing name of the repository.
    string oldName = 2;
}

message UserInfo {
    // The date when the specified commit was pushed to the repository.
    string date = 1;
    // The email address associated with the user who made the commit, if any.
    string email = 2;
    // The name of the user who made the specified commit.
    string name = 3;
}

service AWSCodeCommitService {
    // <p>Returns information about one or more repositories.</p> <note> <p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a web page could expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a web page.</p> </note>
    rpc Post(PostRequest) returns (BatchGetRepositoriesOutput) {
      option (google.api.http) = {
        post: "//"
        body: "body"
      };
    }
    // <p>Creates a new branch in a repository and points the branch to a commit.</p> <note> <p>Calling the create branch operation does not set a repository's default branch. To do this, call the update default branch operation.</p> </note>
    rpc Post#CreateBranch(Post#CreateBranchRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#CreateBranch"
        body: "body"
      };
    }
    // Creates a new, empty repository.
    rpc Post#CreateRepository(Post#CreateRepositoryRequest) returns (CreateRepositoryOutput) {
      option (google.api.http) = {
        post: "//#CreateRepository"
        body: "body"
      };
    }
    // <p>Deletes a repository. If a specified repository was already deleted, a null repository ID will be returned.</p> <important><p>Deleting a repository also deletes all associated objects and metadata. After a repository is deleted, all future push calls to the deleted repository will fail.</p> </important>
    rpc Post#DeleteRepository(Post#DeleteRepositoryRequest) returns (DeleteRepositoryOutput) {
      option (google.api.http) = {
        post: "//#DeleteRepository"
        body: "body"
      };
    }
    // Returns the base-64 encoded content of an individual blob within a repository.
    rpc Post#GetBlob(Post#GetBlobRequest) returns (GetBlobOutput) {
      option (google.api.http) = {
        post: "//#GetBlob"
        body: "body"
      };
    }
    // Returns information about a repository branch, including its name and the last commit ID.
    rpc Post#GetBranch(Post#GetBranchRequest) returns (GetBranchOutput) {
      option (google.api.http) = {
        post: "//#GetBranch"
        body: "body"
      };
    }
    // Returns information about a commit, including commit message and committer information.
    rpc Post#GetCommit(Post#GetCommitRequest) returns (GetCommitOutput) {
      option (google.api.http) = {
        post: "//#GetCommit"
        body: "body"
      };
    }
    // Returns information about the differences in a valid commit specifier (such as a branch, tag, HEAD, commit ID or other fully qualified reference). Results can be limited to a specified path.
    rpc Post#GetDifferences(Post#GetDifferencesRequest) returns (GetDifferencesOutput) {
      option (google.api.http) = {
        post: "//#GetDifferences"
        body: "body"
      };
    }
    // <p>Returns information about a repository.</p> <note> <p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a web page could expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a web page.</p> </note>
    rpc Post#GetRepository(Post#GetRepositoryRequest) returns (GetRepositoryOutput) {
      option (google.api.http) = {
        post: "//#GetRepository"
        body: "body"
      };
    }
    // Gets information about triggers configured for a repository.
    rpc Post#GetRepositoryTriggers(Post#GetRepositoryTriggersRequest) returns (GetRepositoryTriggersOutput) {
      option (google.api.http) = {
        post: "//#GetRepositoryTriggers"
        body: "body"
      };
    }
    // Gets information about one or more branches in a repository.
    rpc Post#ListBranches(Post#ListBranchesRequest) returns (ListBranchesOutput) {
      option (google.api.http) = {
        post: "//#ListBranches"
        body: "body"
      };
    }
    // Gets information about one or more repositories.
    rpc Post#ListRepositories(Post#ListRepositoriesRequest) returns (ListRepositoriesOutput) {
      option (google.api.http) = {
        post: "//#ListRepositories"
        body: "body"
      };
    }
    // Replaces all triggers for a repository. This can be used to create or delete triggers.
    rpc Post#PutRepositoryTriggers(Post#PutRepositoryTriggersRequest) returns (PutRepositoryTriggersOutput) {
      option (google.api.http) = {
        post: "//#PutRepositoryTriggers"
        body: "body"
      };
    }
    // Tests the functionality of repository triggers by sending information to the trigger target. If real data is available in the repository, the test will send data from the last commit. If no data is available, sample data will be generated.
    rpc Post#TestRepositoryTriggers(Post#TestRepositoryTriggersRequest) returns (TestRepositoryTriggersOutput) {
      option (google.api.http) = {
        post: "//#TestRepositoryTriggers"
        body: "body"
      };
    }
    // <p>Sets or changes the default branch name for the specified repository.</p> <note> <p>If you use this operation to change the default branch name to the current default branch name, a success message is returned even though the default branch did not change.</p> </note>
    rpc Post#UpdateDefaultBranch(Post#UpdateDefaultBranchRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#UpdateDefaultBranch"
        body: "body"
      };
    }
    // <p>Sets or changes the comment or description for a repository.</p> <note> <p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a web page could expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a web page.</p> </note>
    rpc Post#UpdateRepositoryDescription(Post#UpdateRepositoryDescriptionRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#UpdateRepositoryDescription"
        body: "body"
      };
    }
    // Renames a repository. The repository name must be unique across the calling AWS account. In addition, repository names are limited to 100 alphanumeric, dash, and underscore characters, and cannot include certain characters. The suffix ".git" is prohibited. For a full description of the limits on repository names, see <a href="http://docs.aws.amazon.com/codecommit/latest/userguide/limits.html">Limits</a> in the AWS CodeCommit User Guide.
    rpc Post#UpdateRepositoryName(Post#UpdateRepositoryNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#UpdateRepositoryName"
        body: "body"
      };
    }
}

syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package amazonelasticmapreduce;

message PostRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AddInstanceFleetInput body = 10;
}

message Post#AddInstanceGroupsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AddInstanceGroupsInput body = 10;
}

message Post#AddJobFlowStepsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AddJobFlowStepsInput body = 10;
}

message Post#AddTagsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AddTagsInput body = 10;
}

message Post#CancelStepsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CancelStepsInput body = 10;
}

message Post#CreateSecurityConfigurationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateSecurityConfigurationInput body = 10;
}

message Post#DeleteSecurityConfigurationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteSecurityConfigurationInput body = 10;
}

message Post#DescribeClusterRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeClusterInput body = 10;
}

message Post#DescribeJobFlowsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeJobFlowsInput body = 10;
}

message Post#DescribeSecurityConfigurationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeSecurityConfigurationInput body = 10;
}

message Post#DescribeStepRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeStepInput body = 10;
}

message Post#ListBootstrapActionsRequest {
    string Action = 1;
    // Pagination token
    string Marker = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    ListBootstrapActionsInput body = 11;
}

message Post#ListClustersRequest {
    string Action = 1;
    // Pagination token
    string Marker = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    ListClustersInput body = 11;
}

message Post#ListInstanceFleetsRequest {
    string Action = 1;
    // Pagination token
    string Marker = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    ListInstanceFleetsInput body = 11;
}

message Post#ListInstanceGroupsRequest {
    string Action = 1;
    // Pagination token
    string Marker = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    ListInstanceGroupsInput body = 11;
}

message Post#ListInstancesRequest {
    string Action = 1;
    // Pagination token
    string Marker = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    ListInstancesInput body = 11;
}

message Post#ListSecurityConfigurationsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListSecurityConfigurationsInput body = 10;
}

message Post#ListStepsRequest {
    string Action = 1;
    // Pagination token
    string Marker = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    ListStepsInput body = 11;
}

message Post#ModifyInstanceFleetRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ModifyInstanceFleetInput body = 10;
}

message Post#ModifyInstanceGroupsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ModifyInstanceGroupsInput body = 10;
}

message Post#PutAutoScalingPolicyRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    PutAutoScalingPolicyInput body = 10;
}

message Post#RemoveAutoScalingPolicyRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RemoveAutoScalingPolicyInput body = 10;
}

message Post#RemoveTagsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RemoveTagsInput body = 10;
}

message Post#RunJobFlowRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RunJobFlowInput body = 10;
}

message Post#SetTerminationProtectionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    SetTerminationProtectionInput body = 10;
}

message Post#SetVisibleToAllUsersRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    SetVisibleToAllUsersInput body = 10;
}

message Post#TerminateJobFlowsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    TerminateJobFlowsInput body = 10;
}

enum ActionOnFailure {
    TERMINATE_JOB_FLOW = 0;
    TERMINATE_CLUSTER = 1;
    CANCEL_AND_WAIT = 2;
    CONTINUE = 3;
}

message AddInstanceFleetInput {
    // The unique identifier of the cluster.
    string ClusterId = 1;
    // Specifies the configuration of the instance fleet.
    InstanceFleetConfig InstanceFleet = 2;
}

message AddInstanceFleetOutput {
    // The unique identifier of the cluster.
    string ClusterId = 1;
    // The unique identifier of the instance fleet.
    string InstanceFleetId = 2;
}

message AddInstanceGroupsInput {
    // Instance groups to add.
    array InstanceGroups = 1;
    // Job flow in which to add the instance groups.
    string JobFlowId = 2;
}

message AddInstanceGroupsOutput {
    // Instance group IDs of the newly created instance groups.
    array InstanceGroupIds = 1;
    // The job flow ID in which the instance groups are added.
    string JobFlowId = 2;
}

message AddJobFlowStepsInput {
    // A string that uniquely identifies the job flow. This identifier is returned by <a>RunJobFlow</a> and can also be obtained from <a>ListClusters</a>.
    string JobFlowId = 1;
    //  A list of <a>StepConfig</a> to be executed by the job flow.
    array Steps = 2;
}

message AddJobFlowStepsOutput {
    // The identifiers of the list of steps added to the job flow.
    array StepIds = 1;
}

message AddTagsInput {
    // The Amazon EMR resource identifier to which tags will be added. This value must be a cluster identifier.
    string ResourceId = 1;
    // A list of tags to associate with a cluster and propagate to EC2 instances. Tags are user-defined key/value pairs that consist of a required key string with a maximum of 128 characters, and an optional value string with a maximum of 256 characters.
    array Tags = 2;
}

message AddTagsOutput {
}

enum AdjustmentType {
    CHANGE_IN_CAPACITY = 0;
    PERCENT_CHANGE_IN_CAPACITY = 1;
    EXACT_CAPACITY = 2;
}

message Application {
    // This option is for advanced users only. This is meta information about third-party applications that third-party vendors use for testing purposes.
    array AdditionalInfo = 1;
    // Arguments for Amazon EMR to pass to the application.
    array Args = 2;
    // The name of the application.
    string Name = 3;
    // The version of the application.
    string Version = 4;
}

repeated Application ApplicationList = 1

message AutoScalingPolicy {
    // The upper and lower EC2 instance limits for an automatic scaling policy. Automatic scaling activity will not cause an instance group to grow above or below these limits.
    ScalingConstraints Constraints = 1;
    // The scale-in and scale-out rules that comprise the automatic scaling policy.
    array Rules = 2;
}

message AutoScalingPolicyDescription {
    // The upper and lower EC2 instance limits for an automatic scaling policy. Automatic scaling activity will not cause an instance group to grow above or below these limits.
    ScalingConstraints Constraints = 1;
    // The scale-in and scale-out rules that comprise the automatic scaling policy.
    array Rules = 2;
    // The status of an automatic scaling policy.
    AutoScalingPolicyStatus Status = 3;
}

enum AutoScalingPolicyState {
    PENDING = 0;
    ATTACHING = 1;
    ATTACHED = 2;
    DETACHING = 3;
    DETACHED = 4;
    FAILED = 5;
}

message AutoScalingPolicyStateChangeReason {
    // The code indicating the reason for the change in status.<code>USER_REQUEST</code> indicates that the scaling policy status was changed by a user. <code>PROVISION_FAILURE</code> indicates that the status change was because the policy failed to provision. <code>CLEANUP_FAILURE</code> indicates an error.
    AutoScalingPolicyStateChangeReasonCode Code = 1;
    // A friendly, more verbose message that accompanies an automatic scaling policy state change.
    string Message = 2;
}

enum AutoScalingPolicyStateChangeReasonCode {
    USER_REQUEST = 0;
    PROVISION_FAILURE = 1;
    CLEANUP_FAILURE = 2;
}

message AutoScalingPolicyStatus {
    // Indicates the status of the automatic scaling policy.
    AutoScalingPolicyState State = 1;
    // The reason for a change in status.
    AutoScalingPolicyStateChangeReason StateChangeReason = 2;
}

message BootstrapActionConfig {
    // The name of the bootstrap action.
    string Name = 1;
    // The script run by the bootstrap action.
    ScriptBootstrapActionConfig ScriptBootstrapAction = 2;
}

repeated BootstrapActionConfig BootstrapActionConfigList = 1

message BootstrapActionDetail {
    // A description of the bootstrap action.
    BootstrapActionConfig BootstrapActionConfig = 1;
}

repeated BootstrapActionDetail BootstrapActionDetailList = 1

message CancelStepsInfo {
    // The reason for the failure if the CancelSteps request fails.
    string Reason = 1;
    // The status of a CancelSteps Request. The value may be SUBMITTED or FAILED.
    CancelStepsRequestStatus Status = 2;
    // The encrypted StepId of a step.
    string StepId = 3;
}

repeated CancelStepsInfo CancelStepsInfoList = 1

message CancelStepsInput {
    // The <code>ClusterID</code> for which specified steps will be canceled. Use <a>RunJobFlow</a> and <a>ListClusters</a> to get ClusterIDs.
    string ClusterId = 1;
    // The list of <code>StepIDs</code> to cancel. Use <a>ListSteps</a> to get steps and their states for the specified cluster.
    array StepIds = 2;
}

message CancelStepsOutput {
    // A list of <a>CancelStepsInfo</a>, which shows the status of specified cancel requests for each <code>StepID</code> specified.
    array CancelStepsInfoList = 1;
}

enum CancelStepsRequestStatu {
    SUBMITTED = 0;
    FAILED = 1;
}

message CloudWatchAlarmDefinition {
    // Determines how the metric specified by <code>MetricName</code> is compared to the value specified by <code>Threshold</code>.
    ComparisonOperator ComparisonOperator = 1;
    // A CloudWatch metric dimension.
    array Dimensions = 2;
    // The number of periods, expressed in seconds using <code>Period</code>, during which the alarm condition must exist before the alarm triggers automatic scaling activity. The default value is <code>1</code>.
    integer EvaluationPeriods = 3;
    // The name of the CloudWatch metric that is watched to determine an alarm condition.
    string MetricName = 4;
    // The namespace for the CloudWatch metric. The default is <code>AWS/ElasticMapReduce</code>.
    string Namespace = 5;
    // The period, in seconds, over which the statistic is applied. EMR CloudWatch metrics are emitted every five minutes (300 seconds), so if an EMR CloudWatch metric is specified, specify <code>300</code>.
    integer Period = 6;
    // The statistic to apply to the metric associated with the alarm. The default is <code>AVERAGE</code>.
    Statistic Statistic = 7;
    // The value against which the specified statistic is compared.
    number Threshold = 8;
    // The unit of measure associated with the CloudWatch metric being watched. The value specified for <code>Unit</code> must correspond to the units specified in the CloudWatch metric.
    Unit Unit = 9;
}

message Cluster {
    // The applications installed on this cluster.
    array Applications = 1;
    // An IAM role for automatic scaling policies. The default role is <code>EMR_AutoScaling_DefaultRole</code>. The IAM role provides permissions that the automatic scaling feature requires to launch and terminate EC2 instances in an instance group.
    string AutoScalingRole = 2;
    // Specifies whether the cluster should terminate after completing all steps.
    boolean AutoTerminate = 3;
    // Applies only to Amazon EMR releases 4.x and later. The list of Configurations supplied to the EMR cluster.
    array Configurations = 4;
    // Available only in Amazon EMR version 5.7.0 and later. The ID of a custom Amazon EBS-backed Linux AMI if the cluster uses a custom AMI.
    string CustomAmiId = 5;
    // The size, in GiB, of the EBS root device volume of the Linux AMI that is used for each EC2 instance. Available in Amazon EMR version 4.x and later.
    integer EbsRootVolumeSize = 6;
    // Provides information about the EC2 instances in a cluster grouped by category. For example, key name, subnet ID, IAM instance profile, and so on.
    Ec2InstanceAttributes Ec2InstanceAttributes = 7;
    // The unique identifier for the cluster.
    string Id = 8;
    // <note> <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.</p> </note> <p>The instance group configuration of the cluster. A value of <code>INSTANCE_GROUP</code> indicates a uniform instance group configuration. A value of <code>INSTANCE_FLEET</code> indicates an instance fleets configuration.</p>
    InstanceCollectionType InstanceCollectionType = 9;
    // The path to the Amazon S3 location where logs for this cluster are stored.
    string LogUri = 10;
    // The public DNS name of the master EC2 instance.
    string MasterPublicDnsName = 11;
    // The name of the cluster.
    string Name = 12;
    // An approximation of the cost of the cluster, represented in m1.small/hours. This value is incremented one time for every hour an m1.small instance runs. Larger instances are weighted more, so an EC2 instance that is roughly four times more expensive would result in the normalized instance hours being incremented by four. This result is only an approximation and does not reflect the actual billing rate.
    integer NormalizedInstanceHours = 13;
    // The release label for the Amazon EMR release.
    string ReleaseLabel = 14;
    // Applies only when <code>CustomAmiID</code> is used. Specifies the type of updates that are applied from the Amazon Linux AMI package repositories when an instance boots using the AMI.
    RepoUpgradeOnBoot RepoUpgradeOnBoot = 15;
    // The AMI version requested for this cluster.
    string RequestedAmiVersion = 16;
    // The AMI version running on this cluster.
    string RunningAmiVersion = 17;
    // The way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized. <code>TERMINATE_AT_INSTANCE_HOUR</code> indicates that Amazon EMR terminates nodes at the instance-hour boundary, regardless of when the request to terminate the instance was submitted. This option is only available with Amazon EMR 5.1.0 and later and is the default for clusters created using that version. <code>TERMINATE_AT_TASK_COMPLETION</code> indicates that Amazon EMR blacklists and drains tasks from nodes before terminating the Amazon EC2 instances, regardless of the instance-hour boundary. With either behavior, Amazon EMR removes the least active nodes first and blocks instance termination if it could lead to HDFS corruption. <code>TERMINATE_AT_TASK_COMPLETION</code> is available only in Amazon EMR version 4.1.0 and later, and is the default for versions of Amazon EMR earlier than 5.1.0.
    ScaleDownBehavior ScaleDownBehavior = 18;
    // The name of the security configuration applied to the cluster.
    string SecurityConfiguration = 19;
    // The IAM role that will be assumed by the Amazon EMR service to access AWS resources on your behalf.
    string ServiceRole = 20;
    // The current status details about the cluster.
    ClusterStatus Status = 21;
    // A list of tags associated with a cluster.
    array Tags = 22;
    // Indicates whether Amazon EMR will lock the cluster to prevent the EC2 instances from being terminated by an API call or user intervention, or in the event of a cluster error.
    boolean TerminationProtected = 23;
    // Indicates whether the cluster is visible to all IAM users of the AWS account associated with the cluster. If this value is set to <code>true</code>, all IAM users of that AWS account can view and manage the cluster if they have the proper policy permissions set. If this value is <code>false</code>, only the IAM user that created the cluster can view and manage it. This value can be changed using the <a>SetVisibleToAllUsers</a> action.
    boolean VisibleToAllUsers = 24;
}

enum ClusterState {
    STARTING = 0;
    BOOTSTRAPPING = 1;
    RUNNING = 2;
    WAITING = 3;
    TERMINATING = 4;
    TERMINATED = 5;
    TERMINATED_WITH_ERRORS = 6;
}

message ClusterStateChangeReason {
    // The programmatic code for the state change reason.
    ClusterStateChangeReasonCode Code = 1;
    // The descriptive message for the state change reason.
    string Message = 2;
}

enum ClusterStateChangeReasonCode {
    INTERNAL_ERROR = 0;
    VALIDATION_ERROR = 1;
    INSTANCE_FAILURE = 2;
    INSTANCE_FLEET_TIMEOUT = 3;
    BOOTSTRAP_FAILURE = 4;
    USER_REQUEST = 5;
    STEP_FAILURE = 6;
    ALL_STEPS_COMPLETED = 7;
}

repeated ClusterState ClusterStateList = 1

message ClusterStatus {
    // The current state of the cluster.
    ClusterState State = 1;
    // The reason for the cluster status change.
    ClusterStateChangeReason StateChangeReason = 2;
    // A timeline that represents the status of a cluster over the lifetime of the cluster.
    ClusterTimeline Timeline = 3;
}

message ClusterSummary {
    // The unique identifier for the cluster.
    string Id = 1;
    // The name of the cluster.
    string Name = 2;
    // An approximation of the cost of the cluster, represented in m1.small/hours. This value is incremented one time for every hour an m1.small instance runs. Larger instances are weighted more, so an EC2 instance that is roughly four times more expensive would result in the normalized instance hours being incremented by four. This result is only an approximation and does not reflect the actual billing rate.
    integer NormalizedInstanceHours = 3;
    // The details about the current status of the cluster.
    ClusterStatus Status = 4;
}

repeated ClusterSummary ClusterSummaryList = 1

message ClusterTimeline {
    // The creation date and time of the cluster.
    string CreationDateTime = 1;
    // The date and time when the cluster was terminated.
    string EndDateTime = 2;
    // The date and time when the cluster was ready to execute steps.
    string ReadyDateTime = 3;
}

message Command {
    // Arguments for Amazon EMR to pass to the command for execution.
    array Args = 1;
    // The name of the command.
    string Name = 2;
    // The Amazon S3 location of the command script.
    string ScriptPath = 3;
}

repeated Command CommandList = 1

enum ComparisonOperator {
    GREATER_THAN_OR_EQUAL = 0;
    GREATER_THAN = 1;
    LESS_THAN = 2;
    LESS_THAN_OR_EQUAL = 3;
}

message Configuration {
    // The classification within a configuration.
    string Classification = 1;
    // A list of additional configurations to apply within a configuration object.
    array Configurations = 2;
    // A set of properties specified within a configuration classification.
    array Properties = 3;
}

repeated Configuration ConfigurationList = 1

message CreateSecurityConfigurationInput {
    // The name of the security configuration.
    string Name = 1;
    // The security configuration details in JSON format.
    string SecurityConfiguration = 2;
}

message CreateSecurityConfigurationOutput {
    // The date and time the security configuration was created.
    string CreationDateTime = 1;
    // The name of the security configuration.
    string Name = 2;
}

message DeleteSecurityConfigurationInput {
    // The name of the security configuration.
    string Name = 1;
}

message DeleteSecurityConfigurationOutput {
}

message DescribeClusterInput {
    // The identifier of the cluster to describe.
    string ClusterId = 1;
}

message DescribeClusterOutput {
    // This output contains the details for the requested cluster.
    Cluster Cluster = 1;
}

message DescribeJobFlowsInput {
    // Return only job flows created after this date and time.
    string CreatedAfter = 1;
    // Return only job flows created before this date and time.
    string CreatedBefore = 2;
    // Return only job flows whose job flow ID is contained in this list.
    array JobFlowIds = 3;
    // Return only job flows whose state is contained in this list.
    array JobFlowStates = 4;
}

message DescribeJobFlowsOutput {
    // A list of job flows matching the parameters supplied.
    array JobFlows = 1;
}

message DescribeSecurityConfigurationInput {
    // The name of the security configuration.
    string Name = 1;
}

message DescribeSecurityConfigurationOutput {
    // The date and time the security configuration was created
    string CreationDateTime = 1;
    // The name of the security configuration.
    string Name = 2;
    // The security configuration details in JSON format.
    string SecurityConfiguration = 3;
}

message DescribeStepInput {
    // The identifier of the cluster with steps to describe.
    string ClusterId = 1;
    // The identifier of the step to describe.
    string StepId = 2;
}

message DescribeStepOutput {
    // The step details for the requested step identifier.
    Step Step = 1;
}

repeated string EC2InstanceIdsList = 1

repeated string EC2InstanceIdsToTerminateList = 1

message EbsBlockDevice {
    // The device name that is exposed to the instance, such as /dev/sdh.
    string Device = 1;
    // EBS volume specifications such as volume type, IOPS, and size (GiB) that will be requested for the EBS volume attached to an EC2 instance in the cluster.
    VolumeSpecification VolumeSpecification = 2;
}

message EbsBlockDeviceConfig {
    // EBS volume specifications such as volume type, IOPS, and size (GiB) that will be requested for the EBS volume attached to an EC2 instance in the cluster.
    VolumeSpecification VolumeSpecification = 1;
    // Number of EBS volumes with a specific volume configuration that will be associated with every instance in the instance group
    integer VolumesPerInstance = 2;
}

repeated EbsBlockDeviceConfig EbsBlockDeviceConfigList = 1

repeated EbsBlockDevice EbsBlockDeviceList = 1

message EbsConfiguration {
    // An array of Amazon EBS volume specifications attached to a cluster instance.
    array EbsBlockDeviceConfigs = 1;
    // Indicates whether an Amazon EBS volume is EBS-optimized.
    boolean EbsOptimized = 2;
}

message EbsVolume {
    // The device name that is exposed to the instance, such as /dev/sdh.
    string Device = 1;
    // The volume identifier of the EBS volume.
    string VolumeId = 2;
}

repeated EbsVolume EbsVolumeList = 1

message Ec2InstanceAttributes {
    // A list of additional Amazon EC2 security group IDs for the master node.
    array AdditionalMasterSecurityGroups = 1;
    // A list of additional Amazon EC2 security group IDs for the slave nodes.
    array AdditionalSlaveSecurityGroups = 2;
    // The Availability Zone in which the cluster will run.
    string Ec2AvailabilityZone = 3;
    // The name of the Amazon EC2 key pair to use when connecting with SSH into the master node as a user named "hadoop".
    string Ec2KeyName = 4;
    // <p>To launch the cluster in Amazon VPC, set this parameter to the identifier of the Amazon VPC subnet where you want the cluster to launch. If you do not specify this value, the cluster is launched in the normal AWS cloud, outside of a VPC.</p> <p>Amazon VPC currently does not support cluster compute quadruple extra large (cc1.4xlarge) instances. Thus, you cannot specify the cc1.4xlarge instance type for nodes of a cluster launched in a VPC.</p>
    string Ec2SubnetId = 5;
    // The identifier of the Amazon EC2 security group for the master node.
    string EmrManagedMasterSecurityGroup = 6;
    // The identifier of the Amazon EC2 security group for the slave nodes.
    string EmrManagedSlaveSecurityGroup = 7;
    // The IAM role that was specified when the cluster was launched. The EC2 instances of the cluster assume this role.
    string IamInstanceProfile = 8;
    // Applies to clusters configured with the instance fleets option. Specifies one or more Availability Zones in which to launch EC2 cluster instances when the EC2-Classic network configuration is supported. Amazon EMR chooses the Availability Zone with the best fit from among the list of <code>RequestedEc2AvailabilityZones</code>, and then launches all cluster instances within that Availability Zone. If you do not specify this value, Amazon EMR chooses the Availability Zone for you. <code>RequestedEc2SubnetIDs</code> and <code>RequestedEc2AvailabilityZones</code> cannot be specified together.
    array RequestedEc2AvailabilityZones = 9;
    // Applies to clusters configured with the instance fleets option. Specifies the unique identifier of one or more Amazon EC2 subnets in which to launch EC2 cluster instances. Subnets must exist within the same VPC. Amazon EMR chooses the EC2 subnet with the best fit from among the list of <code>RequestedEc2SubnetIds</code>, and then launches all cluster instances within that Subnet. If this value is not specified, and the account and region support EC2-Classic networks, the cluster launches instances in the EC2-Classic network and uses <code>RequestedEc2AvailabilityZones</code> instead of this setting. If EC2-Classic is not supported, and no Subnet is specified, Amazon EMR chooses the subnet for you. <code>RequestedEc2SubnetIDs</code> and <code>RequestedEc2AvailabilityZones</code> cannot be specified together.
    array RequestedEc2SubnetIds = 10;
    // The identifier of the Amazon EC2 security group for the Amazon EMR service to access clusters in VPC private subnets.
    string ServiceAccessSecurityGroup = 11;
}

message FailureDetails {
    // The path to the log file where the step failure root cause was originally recorded.
    string LogFile = 1;
    // The descriptive message including the error the EMR service has identified as the cause of step failure. This is text from an error log that describes the root cause of the failure.
    string Message = 2;
    // The reason for the step failure. In the case where the service cannot successfully determine the root cause of the failure, it returns "Unknown Error" as a reason.
    string Reason = 3;
}

message HadoopJarStepConfig {
    // A list of command line arguments passed to the JAR file's main function when executed.
    array Args = 1;
    // A path to a JAR file run during the step.
    string Jar = 2;
    // The name of the main class in the specified Java file. If not specified, the JAR file should specify a Main-Class in its manifest file.
    string MainClass = 3;
    // A list of Java properties that are set when the step runs. You can use these properties to pass key value pairs to your main function.
    array Properties = 4;
}

message HadoopStepConfig {
    // The list of command line arguments to pass to the JAR file's main function for execution.
    array Args = 1;
    // The path to the JAR file that runs during the step.
    string Jar = 2;
    // The name of the main class in the specified Java file. If not specified, the JAR file should specify a main class in its manifest file.
    string MainClass = 3;
    // The list of Java properties that are set when the step runs. You can use these properties to pass key value pairs to your main function.
    array Properties = 4;
}

message Instance {
    // The list of EBS volumes that are attached to this instance.
    array EbsVolumes = 1;
    // The unique identifier of the instance in Amazon EC2.
    string Ec2InstanceId = 2;
    // The unique identifier for the instance in Amazon EMR.
    string Id = 3;
    // The unique identifier of the instance fleet to which an EC2 instance belongs.
    string InstanceFleetId = 4;
    // The identifier of the instance group to which this instance belongs.
    string InstanceGroupId = 5;
    // The EC2 instance type, for example <code>m3.xlarge</code>.
    string InstanceType = 6;
    // The instance purchasing option. Valid values are <code>ON_DEMAND</code> or <code>SPOT</code>.
    MarketType Market = 7;
    // The private DNS name of the instance.
    string PrivateDnsName = 8;
    // The private IP address of the instance.
    string PrivateIpAddress = 9;
    // The public DNS name of the instance.
    string PublicDnsName = 10;
    // The public IP address of the instance.
    string PublicIpAddress = 11;
    // The current status of the instance.
    InstanceStatus Status = 12;
}

enum InstanceCollectionType {
    INSTANCE_FLEET = 0;
    INSTANCE_GROUP = 1;
}

message InstanceFleet {
    // The unique identifier of the instance fleet.
    string Id = 1;
    // The node type that the instance fleet hosts. Valid values are MASTER, CORE, or TASK.
    InstanceFleetType InstanceFleetType = 2;
    // The specification for the instance types that comprise an instance fleet. Up to five unique instance specifications may be defined for each instance fleet.
    array InstanceTypeSpecifications = 3;
    // Describes the launch specification for an instance fleet.
    InstanceFleetProvisioningSpecifications LaunchSpecifications = 4;
    // A friendly name for the instance fleet.
    string Name = 5;
    // The number of On-Demand units that have been provisioned for the instance fleet to fulfill <code>TargetOnDemandCapacity</code>. This provisioned capacity might be less than or greater than <code>TargetOnDemandCapacity</code>.
    integer ProvisionedOnDemandCapacity = 6;
    // The number of Spot units that have been provisioned for this instance fleet to fulfill <code>TargetSpotCapacity</code>. This provisioned capacity might be less than or greater than <code>TargetSpotCapacity</code>.
    integer ProvisionedSpotCapacity = 7;
    // The current status of the instance fleet.
    InstanceFleetStatus Status = 8;
    // <p>The target capacity of On-Demand units for the instance fleet, which determines how many On-Demand instances to provision. When the instance fleet launches, Amazon EMR tries to provision On-Demand instances as specified by <a>InstanceTypeConfig</a>. Each instance configuration has a specified <code>WeightedCapacity</code>. When an On-Demand instance is provisioned, the <code>WeightedCapacity</code> units count toward the target capacity. Amazon EMR provisions instances until the target capacity is totally fulfilled, even if this results in an overage. For example, if there are 2 units remaining to fulfill capacity, and Amazon EMR can only provision an instance with a <code>WeightedCapacity</code> of 5 units, the instance is provisioned, and the target capacity is exceeded by 3 units. You can use <a>InstanceFleet$ProvisionedOnDemandCapacity</a> to determine the Spot capacity units that have been provisioned for the instance fleet.</p> <note> <p>If not specified or set to 0, only Spot instances are provisioned for the instance fleet using <code>TargetSpotCapacity</code>. At least one of <code>TargetSpotCapacity</code> and <code>TargetOnDemandCapacity</code> should be greater than 0. For a master instance fleet, only one of <code>TargetSpotCapacity</code> and <code>TargetOnDemandCapacity</code> can be specified, and its value must be 1.</p> </note>
    integer TargetOnDemandCapacity = 9;
    // <p>The target capacity of Spot units for the instance fleet, which determines how many Spot instances to provision. When the instance fleet launches, Amazon EMR tries to provision Spot instances as specified by <a>InstanceTypeConfig</a>. Each instance configuration has a specified <code>WeightedCapacity</code>. When a Spot instance is provisioned, the <code>WeightedCapacity</code> units count toward the target capacity. Amazon EMR provisions instances until the target capacity is totally fulfilled, even if this results in an overage. For example, if there are 2 units remaining to fulfill capacity, and Amazon EMR can only provision an instance with a <code>WeightedCapacity</code> of 5 units, the instance is provisioned, and the target capacity is exceeded by 3 units. You can use <a>InstanceFleet$ProvisionedSpotCapacity</a> to determine the Spot capacity units that have been provisioned for the instance fleet.</p> <note> <p>If not specified or set to 0, only On-Demand instances are provisioned for the instance fleet. At least one of <code>TargetSpotCapacity</code> and <code>TargetOnDemandCapacity</code> should be greater than 0. For a master instance fleet, only one of <code>TargetSpotCapacity</code> and <code>TargetOnDemandCapacity</code> can be specified, and its value must be 1.</p> </note>
    integer TargetSpotCapacity = 10;
}

message InstanceFleetConfig {
    // The node type that the instance fleet hosts. Valid values are MASTER,CORE,and TASK.
    InstanceFleetType InstanceFleetType = 1;
    // The instance type configurations that define the EC2 instances in the instance fleet.
    array InstanceTypeConfigs = 2;
    // The launch specification for the instance fleet.
    InstanceFleetProvisioningSpecifications LaunchSpecifications = 3;
    // The friendly name of the instance fleet.
    string Name = 4;
    // <p>The target capacity of On-Demand units for the instance fleet, which determines how many On-Demand instances to provision. When the instance fleet launches, Amazon EMR tries to provision On-Demand instances as specified by <a>InstanceTypeConfig</a>. Each instance configuration has a specified <code>WeightedCapacity</code>. When an On-Demand instance is provisioned, the <code>WeightedCapacity</code> units count toward the target capacity. Amazon EMR provisions instances until the target capacity is totally fulfilled, even if this results in an overage. For example, if there are 2 units remaining to fulfill capacity, and Amazon EMR can only provision an instance with a <code>WeightedCapacity</code> of 5 units, the instance is provisioned, and the target capacity is exceeded by 3 units.</p> <note> <p>If not specified or set to 0, only Spot instances are provisioned for the instance fleet using <code>TargetSpotCapacity</code>. At least one of <code>TargetSpotCapacity</code> and <code>TargetOnDemandCapacity</code> should be greater than 0. For a master instance fleet, only one of <code>TargetSpotCapacity</code> and <code>TargetOnDemandCapacity</code> can be specified, and its value must be 1.</p> </note>
    integer TargetOnDemandCapacity = 5;
    // <p>The target capacity of Spot units for the instance fleet, which determines how many Spot instances to provision. When the instance fleet launches, Amazon EMR tries to provision Spot instances as specified by <a>InstanceTypeConfig</a>. Each instance configuration has a specified <code>WeightedCapacity</code>. When a Spot instance is provisioned, the <code>WeightedCapacity</code> units count toward the target capacity. Amazon EMR provisions instances until the target capacity is totally fulfilled, even if this results in an overage. For example, if there are 2 units remaining to fulfill capacity, and Amazon EMR can only provision an instance with a <code>WeightedCapacity</code> of 5 units, the instance is provisioned, and the target capacity is exceeded by 3 units.</p> <note> <p>If not specified or set to 0, only On-Demand instances are provisioned for the instance fleet. At least one of <code>TargetSpotCapacity</code> and <code>TargetOnDemandCapacity</code> should be greater than 0. For a master instance fleet, only one of <code>TargetSpotCapacity</code> and <code>TargetOnDemandCapacity</code> can be specified, and its value must be 1.</p> </note>
    integer TargetSpotCapacity = 6;
}

repeated InstanceFleetConfig InstanceFleetConfigList = 1



repeated InstanceFleet InstanceFleetList = 1

message InstanceFleetModifyConfig {
    // A unique identifier for the instance fleet.
    string InstanceFleetId = 1;
    // The target capacity of On-Demand units for the instance fleet. For more information see <a>InstanceFleetConfig$TargetOnDemandCapacity</a>.
    integer TargetOnDemandCapacity = 2;
    // The target capacity of Spot units for the instance fleet. For more information, see <a>InstanceFleetConfig$TargetSpotCapacity</a>.
    integer TargetSpotCapacity = 3;
}

message InstanceFleetProvisioningSpecifications {
    // The launch specification for Spot instances in the fleet, which determines the defined duration and provisioning timeout behavior.
    SpotProvisioningSpecification SpotSpecification = 1;
}

enum InstanceFleetState {
    PROVISIONING = 0;
    BOOTSTRAPPING = 1;
    RUNNING = 2;
    RESIZING = 3;
    SUSPENDED = 4;
    TERMINATING = 5;
    TERMINATED = 6;
}

message InstanceFleetStateChangeReason {
    // A code corresponding to the reason the state change occurred.
    InstanceFleetStateChangeReasonCode Code = 1;
    // An explanatory message.
    string Message = 2;
}

enum InstanceFleetStateChangeReasonCode {
    INTERNAL_ERROR = 0;
    VALIDATION_ERROR = 1;
    INSTANCE_FAILURE = 2;
    CLUSTER_TERMINATED = 3;
}

message InstanceFleetStatus {
    // A code representing the instance fleet status.
    InstanceFleetState State = 1;
    // Provides status change reason details for the instance fleet.
    InstanceFleetStateChangeReason StateChangeReason = 2;
    // Provides historical timestamps for the instance fleet, including the time of creation, the time it became ready to run jobs, and the time of termination.
    InstanceFleetTimeline Timeline = 3;
}

message InstanceFleetTimeline {
    // The time and date the instance fleet was created.
    string CreationDateTime = 1;
    // The time and date the instance fleet terminated.
    string EndDateTime = 2;
    // The time and date the instance fleet was ready to run jobs.
    string ReadyDateTime = 3;
}

enum InstanceFleetType {
    MASTER = 0;
    CORE = 1;
    TASK = 2;
}

message InstanceGroup {
    // An automatic scaling policy for a core instance group or task instance group in an Amazon EMR cluster. The automatic scaling policy defines how an instance group dynamically adds and terminates EC2 instances in response to the value of a CloudWatch metric. See PutAutoScalingPolicy.
    AutoScalingPolicyDescription AutoScalingPolicy = 1;
    // The bid price for each EC2 instance in the instance group when launching nodes as Spot Instances, expressed in USD.
    string BidPrice = 2;
    // <note> <p>Amazon EMR releases 4.x or later.</p> </note> <p>The list of configurations supplied for an EMR cluster instance group. You can specify a separate configuration for each instance group (master, core, and task).</p>
    array Configurations = 3;
    // The EBS block devices that are mapped to this instance group.
    array EbsBlockDevices = 4;
    // If the instance group is EBS-optimized. An Amazon EBS-optimized instance uses an optimized configuration stack and provides additional, dedicated capacity for Amazon EBS I/O.
    boolean EbsOptimized = 5;
    // The identifier of the instance group.
    string Id = 6;
    // The type of the instance group. Valid values are MASTER, CORE or TASK.
    InstanceGroupType InstanceGroupType = 7;
    // The EC2 instance type for all instances in the instance group.
    string InstanceType = 8;
    // The marketplace to provision instances for this group. Valid values are ON_DEMAND or SPOT.
    MarketType Market = 9;
    // The name of the instance group.
    string Name = 10;
    // The target number of instances for the instance group.
    integer RequestedInstanceCount = 11;
    // The number of instances currently running in this instance group.
    integer RunningInstanceCount = 12;
    // Policy for customizing shrink operations.
    ShrinkPolicy ShrinkPolicy = 13;
    // The current status of the instance group.
    InstanceGroupStatus Status = 14;
}

message InstanceGroupConfig {
    // An automatic scaling policy for a core instance group or task instance group in an Amazon EMR cluster. The automatic scaling policy defines how an instance group dynamically adds and terminates EC2 instances in response to the value of a CloudWatch metric. See <a>PutAutoScalingPolicy</a>.
    AutoScalingPolicy AutoScalingPolicy = 1;
    // Bid price for each EC2 instance in the instance group when launching nodes as Spot Instances, expressed in USD.
    string BidPrice = 2;
    // <note> <p>Amazon EMR releases 4.x or later.</p> </note> <p>The list of configurations supplied for an EMR cluster instance group. You can specify a separate configuration for each instance group (master, core, and task).</p>
    array Configurations = 3;
    // EBS configurations that will be attached to each EC2 instance in the instance group.
    EbsConfiguration EbsConfiguration = 4;
    // Target number of instances for the instance group.
    integer InstanceCount = 5;
    // The role of the instance group in the cluster.
    InstanceRoleType InstanceRole = 6;
    // The EC2 instance type for all instances in the instance group.
    string InstanceType = 7;
    // Market type of the EC2 instances used to create a cluster node.
    MarketType Market = 8;
    // Friendly name given to the instance group.
    string Name = 9;
}

repeated InstanceGroupConfig InstanceGroupConfigList = 1

message InstanceGroupDetail {
    // Bid price for EC2 Instances when launching nodes as Spot Instances, expressed in USD.
    string BidPrice = 1;
    // The date/time the instance group was created.
    string CreationDateTime = 2;
    // The date/time the instance group was terminated.
    string EndDateTime = 3;
    // Unique identifier for the instance group.
    string InstanceGroupId = 4;
    // Target number of instances to run in the instance group.
    integer InstanceRequestCount = 5;
    // Instance group role in the cluster
    InstanceRoleType InstanceRole = 6;
    // Actual count of running instances.
    integer InstanceRunningCount = 7;
    // EC2 instance type.
    string InstanceType = 8;
    // Details regarding the state of the instance group.
    string LastStateChangeReason = 9;
    // Market type of the EC2 instances used to create a cluster node.
    MarketType Market = 10;
    // Friendly name for the instance group.
    string Name = 11;
    // The date/time the instance group was available to the cluster.
    string ReadyDateTime = 12;
    // The date/time the instance group was started.
    string StartDateTime = 13;
    // State of instance group. The following values are deprecated: STARTING, TERMINATED, and FAILED.
    InstanceGroupState State = 14;
}

repeated InstanceGroupDetail InstanceGroupDetailList = 1



repeated string InstanceGroupIdsList = 1

repeated InstanceGroup InstanceGroupList = 1

message InstanceGroupModifyConfig {
    // The EC2 InstanceIds to terminate. After you terminate the instances, the instance group will not return to its original requested size.
    array EC2InstanceIdsToTerminate = 1;
    // Target size for the instance group.
    integer InstanceCount = 2;
    // Unique ID of the instance group to expand or shrink.
    string InstanceGroupId = 3;
    // Policy for customizing shrink operations.
    ShrinkPolicy ShrinkPolicy = 4;
}

repeated InstanceGroupModifyConfig InstanceGroupModifyConfigList = 1

enum InstanceGroupState {
    PROVISIONING = 0;
    BOOTSTRAPPING = 1;
    RUNNING = 2;
    RESIZING = 3;
    SUSPENDED = 4;
    TERMINATING = 5;
    TERMINATED = 6;
    ARRESTED = 7;
    SHUTTING_DOWN = 8;
    ENDED = 9;
}

message InstanceGroupStateChangeReason {
    // The programmable code for the state change reason.
    InstanceGroupStateChangeReasonCode Code = 1;
    // The status change reason description.
    string Message = 2;
}

enum InstanceGroupStateChangeReasonCode {
    INTERNAL_ERROR = 0;
    VALIDATION_ERROR = 1;
    INSTANCE_FAILURE = 2;
    CLUSTER_TERMINATED = 3;
}

message InstanceGroupStatus {
    // The current state of the instance group.
    InstanceGroupState State = 1;
    // The status change reason details for the instance group.
    InstanceGroupStateChangeReason StateChangeReason = 2;
    // The timeline of the instance group status over time.
    InstanceGroupTimeline Timeline = 3;
}

message InstanceGroupTimeline {
    // The creation date and time of the instance group.
    string CreationDateTime = 1;
    // The date and time when the instance group terminated.
    string EndDateTime = 2;
    // The date and time when the instance group became ready to perform tasks.
    string ReadyDateTime = 3;
}

enum InstanceGroupType {
    MASTER = 0;
    CORE = 1;
    TASK = 2;
}

repeated InstanceGroupType InstanceGroupTypeList = 1



repeated Instance InstanceList = 1

message InstanceResizePolicy {
    // Decommissioning timeout override for the specific list of instances to be terminated.
    integer InstanceTerminationTimeout = 1;
    // Specific list of instances to be protected when shrinking an instance group.
    array InstancesToProtect = 2;
    // Specific list of instances to be terminated when shrinking an instance group.
    array InstancesToTerminate = 3;
}

enum InstanceRoleType {
    MASTER = 0;
    CORE = 1;
    TASK = 2;
}

enum InstanceState {
    AWAITING_FULFILLMENT = 0;
    PROVISIONING = 1;
    BOOTSTRAPPING = 2;
    RUNNING = 3;
    TERMINATED = 4;
}

message InstanceStateChangeReason {
    // The programmable code for the state change reason.
    InstanceStateChangeReasonCode Code = 1;
    // The status change reason description.
    string Message = 2;
}

enum InstanceStateChangeReasonCode {
    INTERNAL_ERROR = 0;
    VALIDATION_ERROR = 1;
    INSTANCE_FAILURE = 2;
    BOOTSTRAP_FAILURE = 3;
    CLUSTER_TERMINATED = 4;
}

repeated InstanceState InstanceStateList = 1

message InstanceStatus {
    // The current state of the instance.
    InstanceState State = 1;
    // The details of the status change reason for the instance.
    InstanceStateChangeReason StateChangeReason = 2;
    // The timeline of the instance status over time.
    InstanceTimeline Timeline = 3;
}

message InstanceTimeline {
    // The creation date and time of the instance.
    string CreationDateTime = 1;
    // The date and time when the instance was terminated.
    string EndDateTime = 2;
    // The date and time when the instance was ready to perform tasks.
    string ReadyDateTime = 3;
}

message InstanceTypeConfig {
    // The bid price for each EC2 Spot instance type as defined by <code>InstanceType</code>. Expressed in USD. If neither <code>BidPrice</code> nor <code>BidPriceAsPercentageOfOnDemandPrice</code> is provided, <code>BidPriceAsPercentageOfOnDemandPrice</code> defaults to 100%.
    string BidPrice = 1;
    // The bid price, as a percentage of On-Demand price, for each EC2 Spot instance as defined by <code>InstanceType</code>. Expressed as a number (for example, 20 specifies 20%). If neither <code>BidPrice</code> nor <code>BidPriceAsPercentageOfOnDemandPrice</code> is provided, <code>BidPriceAsPercentageOfOnDemandPrice</code> defaults to 100%.
    number BidPriceAsPercentageOfOnDemandPrice = 2;
    // A configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software that run on the cluster.
    array Configurations = 3;
    // The configuration of Amazon Elastic Block Storage (EBS) attached to each instance as defined by <code>InstanceType</code>.
    EbsConfiguration EbsConfiguration = 4;
    // An EC2 instance type, such as <code>m3.xlarge</code>.
    string InstanceType = 5;
    // The number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in <a>InstanceFleetConfig</a>. This value is 1 for a master instance fleet, and must be 1 or greater for core and task instance fleets. Defaults to 1 if not specified.
    integer WeightedCapacity = 6;
}

repeated InstanceTypeConfig InstanceTypeConfigList = 1

message InstanceTypeSpecification {
    // The bid price for each EC2 Spot instance type as defined by <code>InstanceType</code>. Expressed in USD.
    string BidPrice = 1;
    // The bid price, as a percentage of On-Demand price, for each EC2 Spot instance as defined by <code>InstanceType</code>. Expressed as a number (for example, 20 specifies 20%).
    number BidPriceAsPercentageOfOnDemandPrice = 2;
    // A configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software bundled with Amazon EMR.
    array Configurations = 3;
    // The configuration of Amazon Elastic Block Storage (EBS) attached to each instance as defined by <code>InstanceType</code>.
    array EbsBlockDevices = 4;
    // Evaluates to <code>TRUE</code> when the specified <code>InstanceType</code> is EBS-optimized.
    boolean EbsOptimized = 5;
    // The EC2 instance type, for example <code>m3.xlarge</code>.
    string InstanceType = 6;
    // The number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in <a>InstanceFleetConfig</a>. Capacity values represent performance characteristics such as vCPUs, memory, or I/O. If not specified, the default value is 1.
    integer WeightedCapacity = 7;
}

repeated InstanceTypeSpecification InstanceTypeSpecificationList = 1



message InternalServerError {
}

message InternalServerException {
    // The message associated with the exception.
    string Message = 1;
}

message InvalidRequestException {
    // The error code associated with the exception.
    string ErrorCode = 1;
    // The message associated with the exception.
    string Message = 2;
}

message JobFlowDetail {
    // Used only for version 2.x and 3.x of Amazon EMR. The version of the AMI used to initialize Amazon EC2 instances in the job flow. For a list of AMI versions supported by Amazon EMR, see <a href="http://docs.aws.amazon.com/ElasticMapReduce/latest/DeveloperGuide/EnvironmentConfig_AMIVersion.html#ami-versions-supported">AMI Versions Supported in EMR</a> in the <i>Amazon EMR Developer Guide.</i>
    string AmiVersion = 1;
    // An IAM role for automatic scaling policies. The default role is <code>EMR_AutoScaling_DefaultRole</code>. The IAM role provides a way for the automatic scaling feature to get the required permissions it needs to launch and terminate EC2 instances in an instance group.
    string AutoScalingRole = 2;
    // A list of the bootstrap actions run by the job flow.
    array BootstrapActions = 3;
    // Describes the execution status of the job flow.
    JobFlowExecutionStatusDetail ExecutionStatusDetail = 4;
    // Describes the Amazon EC2 instances of the job flow.
    JobFlowInstancesDetail Instances = 5;
    // The job flow identifier.
    string JobFlowId = 6;
    // The IAM role that was specified when the job flow was launched. The EC2 instances of the job flow assume this role.
    string JobFlowRole = 7;
    // The location in Amazon S3 where log files for the job are stored.
    string LogUri = 8;
    // The name of the job flow.
    string Name = 9;
    // The way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized. <code>TERMINATE_AT_INSTANCE_HOUR</code> indicates that Amazon EMR terminates nodes at the instance-hour boundary, regardless of when the request to terminate the instance was submitted. This option is only available with Amazon EMR 5.1.0 and later and is the default for clusters created using that version. <code>TERMINATE_AT_TASK_COMPLETION</code> indicates that Amazon EMR blacklists and drains tasks from nodes before terminating the Amazon EC2 instances, regardless of the instance-hour boundary. With either behavior, Amazon EMR removes the least active nodes first and blocks instance termination if it could lead to HDFS corruption. <code>TERMINATE_AT_TASK_COMPLETION</code> available only in Amazon EMR version 4.1.0 and later, and is the default for versions of Amazon EMR earlier than 5.1.0.
    ScaleDownBehavior ScaleDownBehavior = 10;
    // The IAM role that will be assumed by the Amazon EMR service to access AWS resources on your behalf.
    string ServiceRole = 11;
    // A list of steps run by the job flow.
    array Steps = 12;
    // A list of strings set by third party software when the job flow is launched. If you are not using third party software to manage the job flow this value is empty.
    array SupportedProducts = 13;
    // Specifies whether the cluster is visible to all IAM users of the AWS account associated with the cluster. If this value is set to <code>true</code>, all IAM users of that AWS account can view and (if they have the proper policy permissions set) manage the cluster. If it is set to <code>false</code>, only the IAM user that created the cluster can view and manage it. This value can be changed using the <a>SetVisibleToAllUsers</a> action.
    boolean VisibleToAllUsers = 14;
}

repeated JobFlowDetail JobFlowDetailList = 1

enum JobFlowExecutionState {
    STARTING = 0;
    BOOTSTRAPPING = 1;
    RUNNING = 2;
    WAITING = 3;
    SHUTTING_DOWN = 4;
    TERMINATED = 5;
    COMPLETED = 6;
    FAILED = 7;
}

repeated JobFlowExecutionState JobFlowExecutionStateList = 1

message JobFlowExecutionStatusDetail {
    // The creation date and time of the job flow.
    string CreationDateTime = 1;
    // The completion date and time of the job flow.
    string EndDateTime = 2;
    // Description of the job flow last changed state.
    string LastStateChangeReason = 3;
    // The date and time when the job flow was ready to start running bootstrap actions.
    string ReadyDateTime = 4;
    // The start date and time of the job flow.
    string StartDateTime = 5;
    // The state of the job flow.
    JobFlowExecutionState State = 6;
}

message JobFlowInstancesConfig {
    // A list of additional Amazon EC2 security group IDs for the master node.
    array AdditionalMasterSecurityGroups = 1;
    // A list of additional Amazon EC2 security group IDs for the slave nodes.
    array AdditionalSlaveSecurityGroups = 2;
    // The name of the EC2 key pair that can be used to ssh to the master node as the user called "hadoop."
    string Ec2KeyName = 3;
    // <p>Applies to clusters that use the uniform instance group configuration. To launch the cluster in Amazon Virtual Private Cloud (Amazon VPC), set this parameter to the identifier of the Amazon VPC subnet where you want the cluster to launch. If you do not specify this value, the cluster launches in the normal Amazon Web Services cloud, outside of an Amazon VPC, if the account launching the cluster supports EC2 Classic networks in the region where the cluster launches.</p> <p>Amazon VPC currently does not support cluster compute quadruple extra large (cc1.4xlarge) instances. Thus you cannot specify the cc1.4xlarge instance type for clusters launched in an Amazon VPC.</p>
    string Ec2SubnetId = 4;
    // <p>Applies to clusters that use the instance fleet configuration. When multiple EC2 subnet IDs are specified, Amazon EMR evaluates them and launches instances in the optimal subnet.</p> <note> <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.</p> </note>
    array Ec2SubnetIds = 5;
    // The identifier of the Amazon EC2 security group for the master node.
    string EmrManagedMasterSecurityGroup = 6;
    // The identifier of the Amazon EC2 security group for the slave nodes.
    string EmrManagedSlaveSecurityGroup = 7;
    // The Hadoop version for the cluster. Valid inputs are "0.18" (deprecated), "0.20" (deprecated), "0.20.205" (deprecated), "1.0.3", "2.2.0", or "2.4.0". If you do not set this value, the default of 0.18 is used, unless the AmiVersion parameter is set in the RunJobFlow call, in which case the default version of Hadoop for that AMI version is used.
    string HadoopVersion = 8;
    // The number of EC2 instances in the cluster.
    integer InstanceCount = 9;
    // <note> <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.</p> </note> <p>Describes the EC2 instances and instance configurations for clusters that use the instance fleet configuration.</p>
    array InstanceFleets = 10;
    // Configuration for the instance groups in a cluster.
    array InstanceGroups = 11;
    // Specifies whether the cluster should remain available after completing all steps.
    boolean KeepJobFlowAliveWhenNoSteps = 12;
    // The EC2 instance type of the master node.
    string MasterInstanceType = 13;
    // The Availability Zone in which the cluster runs.
    PlacementType Placement = 14;
    // The identifier of the Amazon EC2 security group for the Amazon EMR service to access clusters in VPC private subnets.
    string ServiceAccessSecurityGroup = 15;
    // The EC2 instance type of the slave nodes.
    string SlaveInstanceType = 16;
    // Specifies whether to lock the cluster to prevent the Amazon EC2 instances from being terminated by API call, user intervention, or in the event of a job-flow error.
    boolean TerminationProtected = 17;
}

message JobFlowInstancesDetail {
    // The name of an Amazon EC2 key pair that can be used to ssh to the master node.
    string Ec2KeyName = 1;
    // For clusters launched within Amazon Virtual Private Cloud, this is the identifier of the subnet where the cluster was launched.
    string Ec2SubnetId = 2;
    // The Hadoop version for the cluster.
    string HadoopVersion = 3;
    // The number of Amazon EC2 instances in the cluster. If the value is 1, the same instance serves as both the master and slave node. If the value is greater than 1, one instance is the master node and all others are slave nodes.
    integer InstanceCount = 4;
    // Details about the instance groups in a cluster.
    array InstanceGroups = 5;
    // Specifies whether the cluster should remain available after completing all steps.
    boolean KeepJobFlowAliveWhenNoSteps = 6;
    // The Amazon EC2 instance identifier of the master node.
    string MasterInstanceId = 7;
    // The Amazon EC2 master node instance type.
    string MasterInstanceType = 8;
    // The DNS name of the master node.
    string MasterPublicDnsName = 9;
    // An approximation of the cost of the cluster, represented in m1.small/hours. This value is incremented one time for every hour that an m1.small runs. Larger instances are weighted more, so an Amazon EC2 instance that is roughly four times more expensive would result in the normalized instance hours being incremented by four. This result is only an approximation and does not reflect the actual billing rate.
    integer NormalizedInstanceHours = 10;
    // The Amazon EC2 Availability Zone for the cluster.
    PlacementType Placement = 11;
    // The Amazon EC2 slave node instance type.
    string SlaveInstanceType = 12;
    // Specifies whether the Amazon EC2 instances in the cluster are protected from termination by API calls, user intervention, or in the event of a job-flow error.
    boolean TerminationProtected = 13;
}

message KeyValue {
    // The unique identifier of a key value pair.
    string Key = 1;
    // The value part of the identified key.
    string Value = 2;
}

repeated KeyValue KeyValueList = 1

message ListBootstrapActionsInput {
    // The cluster identifier for the bootstrap actions to list.
    string ClusterId = 1;
    // The pagination token that indicates the next set of results to retrieve.
    string Marker = 2;
}

message ListBootstrapActionsOutput {
    // The bootstrap actions associated with the cluster.
    array BootstrapActions = 1;
    // The pagination token that indicates the next set of results to retrieve.
    string Marker = 2;
}

message ListClustersInput {
    // The cluster state filters to apply when listing clusters.
    array ClusterStates = 1;
    // The creation date and time beginning value filter for listing clusters.
    string CreatedAfter = 2;
    // The creation date and time end value filter for listing clusters.
    string CreatedBefore = 3;
    // The pagination token that indicates the next set of results to retrieve.
    string Marker = 4;
}

message ListClustersOutput {
    // The list of clusters for the account based on the given filters.
    array Clusters = 1;
    // The pagination token that indicates the next set of results to retrieve.
    string Marker = 2;
}

message ListInstanceFleetsInput {
    // The unique identifier of the cluster.
    string ClusterId = 1;
    // The pagination token that indicates the next set of results to retrieve.
    string Marker = 2;
}

message ListInstanceFleetsOutput {
    // The list of instance fleets for the cluster and given filters.
    array InstanceFleets = 1;
    // The pagination token that indicates the next set of results to retrieve.
    string Marker = 2;
}

message ListInstanceGroupsInput {
    // The identifier of the cluster for which to list the instance groups.
    string ClusterId = 1;
    // The pagination token that indicates the next set of results to retrieve.
    string Marker = 2;
}

message ListInstanceGroupsOutput {
    // The list of instance groups for the cluster and given filters.
    array InstanceGroups = 1;
    // The pagination token that indicates the next set of results to retrieve.
    string Marker = 2;
}

message ListInstancesInput {
    // The identifier of the cluster for which to list the instances.
    string ClusterId = 1;
    // The unique identifier of the instance fleet.
    string InstanceFleetId = 2;
    // The node type of the instance fleet. For example MASTER, CORE, or TASK.
    InstanceFleetType InstanceFleetType = 3;
    // The identifier of the instance group for which to list the instances.
    string InstanceGroupId = 4;
    // The type of instance group for which to list the instances.
    array InstanceGroupTypes = 5;
    // A list of instance states that will filter the instances returned with this request.
    array InstanceStates = 6;
    // The pagination token that indicates the next set of results to retrieve.
    string Marker = 7;
}

message ListInstancesOutput {
    // The list of instances for the cluster and given filters.
    array Instances = 1;
    // The pagination token that indicates the next set of results to retrieve.
    string Marker = 2;
}

message ListSecurityConfigurationsInput {
    // The pagination token that indicates the set of results to retrieve.
    string Marker = 1;
}

message ListSecurityConfigurationsOutput {
    // A pagination token that indicates the next set of results to retrieve. Include the marker in the next ListSecurityConfiguration call to retrieve the next page of results, if required.
    string Marker = 1;
    // The creation date and time, and name, of each security configuration.
    array SecurityConfigurations = 2;
}

message ListStepsInput {
    // The identifier of the cluster for which to list the steps.
    string ClusterId = 1;
    // The pagination token that indicates the next set of results to retrieve.
    string Marker = 2;
    // The filter to limit the step list based on the identifier of the steps.
    array StepIds = 3;
    // The filter to limit the step list based on certain states.
    array StepStates = 4;
}

message ListStepsOutput {
    // The pagination token that indicates the next set of results to retrieve.
    string Marker = 1;
    // The filtered list of steps for the cluster.
    array Steps = 2;
}

enum MarketType {
    ON_DEMAND = 0;
    SPOT = 1;
}

message MetricDimension {
    // The dimension name.
    string Key = 1;
    // The dimension value.
    string Value = 2;
}

repeated MetricDimension MetricDimensionList = 1

message ModifyInstanceFleetInput {
    // The unique identifier of the cluster.
    string ClusterId = 1;
    // The unique identifier of the instance fleet.
    InstanceFleetModifyConfig InstanceFleet = 2;
}

message ModifyInstanceGroupsInput {
    // The ID of the cluster to which the instance group belongs.
    string ClusterId = 1;
    // Instance groups to change.
    array InstanceGroups = 2;
}

repeated SupportedProductConfig NewSupportedProductsList = 1



message PlacementType {
    // The Amazon EC2 Availability Zone for the cluster. <code>AvailabilityZone</code> is used for uniform instance groups, while <code>AvailabilityZones</code> (plural) is used for instance fleets.
    string AvailabilityZone = 1;
    // <p>When multiple Availability Zones are specified, Amazon EMR evaluates them and launches instances in the optimal Availability Zone. <code>AvailabilityZones</code> is used for instance fleets, while <code>AvailabilityZone</code> (singular) is used for uniform instance groups.</p> <note> <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.</p> </note>
    array AvailabilityZones = 2;
}

message PutAutoScalingPolicyInput {
    // Specifies the definition of the automatic scaling policy.
    AutoScalingPolicy AutoScalingPolicy = 1;
    // Specifies the ID of a cluster. The instance group to which the automatic scaling policy is applied is within this cluster.
    string ClusterId = 2;
    // Specifies the ID of the instance group to which the automatic scaling policy is applied.
    string InstanceGroupId = 3;
}

message PutAutoScalingPolicyOutput {
    // The automatic scaling policy definition.
    AutoScalingPolicyDescription AutoScalingPolicy = 1;
    // Specifies the ID of a cluster. The instance group to which the automatic scaling policy is applied is within this cluster.
    string ClusterId = 2;
    // Specifies the ID of the instance group to which the scaling policy is applied.
    string InstanceGroupId = 3;
}

message RemoveAutoScalingPolicyInput {
    // Specifies the ID of a cluster. The instance group to which the automatic scaling policy is applied is within this cluster.
    string ClusterId = 1;
    // Specifies the ID of the instance group to which the scaling policy is applied.
    string InstanceGroupId = 2;
}

message RemoveAutoScalingPolicyOutput {
}

message RemoveTagsInput {
    // The Amazon EMR resource identifier from which tags will be removed. This value must be a cluster identifier.
    string ResourceId = 1;
    // A list of tag keys to remove from a resource.
    array TagKeys = 2;
}

message RemoveTagsOutput {
}

enum RepoUpgradeOnBoot {
    SECURITY = 0;
    NONE = 1;
}

message RunJobFlowInput {
    // A JSON string for selecting additional features.
    string AdditionalInfo = 1;
    // <p>For Amazon EMR AMI versions 3.x and 2.x. For Amazon EMR releases 4.0 and later, the Linux AMI is determined by the <code>ReleaseLabel</code> specified or by <code>CustomAmiID</code>. The version of the Amazon Machine Image (AMI) to use when launching Amazon EC2 instances in the job flow. For details about the AMI versions currently supported in EMR version 3.x and 2.x, see <a href="ElasticMapReduce/latest/DeveloperGuide/emr-dg.pdf#nameddest=ami-versions-supported">AMI Versions Supported in EMR</a> in the <i>Amazon EMR Developer Guide</i>. </p> <p>If the AMI supports multiple versions of Hadoop (for example, AMI 1.0 supports both Hadoop 0.18 and 0.20), you can use the <a>JobFlowInstancesConfig</a> <code>HadoopVersion</code> parameter to modify the version of Hadoop from the defaults shown above.</p> <note> <p>Previously, the EMR AMI version API parameter options allowed you to use latest for the latest AMI version rather than specify a numerical value. Some regions no longer support this deprecated option as they only have a newer release label version of EMR, which requires you to specify an EMR release label release (EMR 4.x or later).</p> </note>
    string AmiVersion = 2;
    // For Amazon EMR releases 4.0 and later. A list of applications for the cluster. Valid values are: "Hadoop", "Hive", "Mahout", "Pig", and "Spark." They are case insensitive.
    array Applications = 3;
    // An IAM role for automatic scaling policies. The default role is <code>EMR_AutoScaling_DefaultRole</code>. The IAM role provides permissions that the automatic scaling feature requires to launch and terminate EC2 instances in an instance group.
    string AutoScalingRole = 4;
    // A list of bootstrap actions to run before Hadoop starts on the cluster nodes.
    array BootstrapActions = 5;
    // For Amazon EMR releases 4.0 and later. The list of configurations supplied for the EMR cluster you are creating.
    array Configurations = 6;
    // <p>Available only in Amazon EMR version 5.7.0 and later. The ID of a custom Amazon EBS-backed Linux AMI. If specified, Amazon EMR uses this AMI when it launches cluster EC2 instances. For more information about custom AMIs in Amazon EMR, see <a href="http://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-custom-ami.html">Using a Custom AMI</a> in the <i>Amazon EMR Management Guide</i>. If omitted, the cluster uses the base Linux AMI for the <code>ReleaseLabel</code> specified. For Amazon EMR versions 2.x and 3.x, use <code>AmiVersion</code> instead.</p> <p>For information about creating a custom AMI, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-ebs.html">Creating an Amazon EBS-Backed Linux AMI</a> in the <i>Amazon Elastic Compute Cloud User Guide for Linux Instances</i>. For information about finding an AMI ID, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding a Linux AMI</a>. </p>
    string CustomAmiId = 7;
    // The size, in GiB, of the EBS root device volume of the Linux AMI that is used for each EC2 instance. Available in Amazon EMR version 4.x and later.
    integer EbsRootVolumeSize = 8;
    // A specification of the number and type of Amazon EC2 instances.
    JobFlowInstancesConfig Instances = 9;
    // Also called instance profile and EC2 role. An IAM role for an EMR cluster. The EC2 instances of the cluster assume this role. The default role is <code>EMR_EC2_DefaultRole</code>. In order to use the default role, you must have already created it using the CLI or console.
    string JobFlowRole = 10;
    // The location in Amazon S3 to write the log files of the job flow. If a value is not provided, logs are not created.
    string LogUri = 11;
    // The name of the job flow.
    string Name = 12;
    // <note> <p>For Amazon EMR releases 3.x and 2.x. For Amazon EMR releases 4.x and later, use Applications.</p> </note> <p>A list of strings that indicates third-party software to use with the job flow that accepts a user argument list. EMR accepts and forwards the argument list to the corresponding installation script as bootstrap action arguments. For more information, see "Launch a Job Flow on the MapR Distribution for Hadoop" in the <a href="http://docs.aws.amazon.com/http:/docs.aws.amazon.com/emr/latest/DeveloperGuide/emr-dg.pdf">Amazon EMR Developer Guide</a>. Supported values are:</p> <ul> <li> <p>"mapr-m3" - launch the cluster using MapR M3 Edition.</p> </li> <li> <p>"mapr-m5" - launch the cluster using MapR M5 Edition.</p> </li> <li> <p>"mapr" with the user arguments specifying "--edition,m3" or "--edition,m5" - launch the job flow using MapR M3 or M5 Edition respectively.</p> </li> <li> <p>"mapr-m7" - launch the cluster using MapR M7 Edition.</p> </li> <li> <p>"hunk" - launch the cluster with the Hunk Big Data Analtics Platform.</p> </li> <li> <p>"hue"- launch the cluster with Hue installed.</p> </li> <li> <p>"spark" - launch the cluster with Apache Spark installed.</p> </li> <li> <p>"ganglia" - launch the cluster with the Ganglia Monitoring System installed.</p> </li> </ul>
    array NewSupportedProducts = 13;
    //  The release label for the Amazon EMR release. For Amazon EMR 3.x and 2.x AMIs, use <code>AmiVersion</code> instead.
    string ReleaseLabel = 14;
    // Applies only when <code>CustomAmiID</code> is used. Specifies which updates from the Amazon Linux AMI package repositories to apply automatically when the instance boots using the AMI. If omitted, the default is <code>SECURITY</code>, which indicates that only security updates are applied. If <code>NONE</code> is specified, no updates are applied, and all updates must be applied manually.
    RepoUpgradeOnBoot RepoUpgradeOnBoot = 15;
    // Specifies the way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized. <code>TERMINATE_AT_INSTANCE_HOUR</code> indicates that Amazon EMR terminates nodes at the instance-hour boundary, regardless of when the request to terminate the instance was submitted. This option is only available with Amazon EMR 5.1.0 and later and is the default for clusters created using that version. <code>TERMINATE_AT_TASK_COMPLETION</code> indicates that Amazon EMR blacklists and drains tasks from nodes before terminating the Amazon EC2 instances, regardless of the instance-hour boundary. With either behavior, Amazon EMR removes the least active nodes first and blocks instance termination if it could lead to HDFS corruption. <code>TERMINATE_AT_TASK_COMPLETION</code> available only in Amazon EMR version 4.1.0 and later, and is the default for versions of Amazon EMR earlier than 5.1.0.
    ScaleDownBehavior ScaleDownBehavior = 16;
    // The name of a security configuration to apply to the cluster.
    string SecurityConfiguration = 17;
    // The IAM role that will be assumed by the Amazon EMR service to access AWS resources on your behalf.
    string ServiceRole = 18;
    // A list of steps to run.
    array Steps = 19;
    // <note> <p>For Amazon EMR releases 3.x and 2.x. For Amazon EMR releases 4.x and later, use Applications.</p> </note> <p>A list of strings that indicates third-party software to use. For more information, see <a href="http://docs.aws.amazon.com/ElasticMapReduce/latest/DeveloperGuide/emr-supported-products.html">Use Third Party Applications with Amazon EMR</a>. Currently supported values are:</p> <ul> <li> <p>"mapr-m3" - launch the job flow using MapR M3 Edition.</p> </li> <li> <p>"mapr-m5" - launch the job flow using MapR M5 Edition.</p> </li> </ul>
    array SupportedProducts = 20;
    // A list of tags to associate with a cluster and propagate to Amazon EC2 instances.
    array Tags = 21;
    // Whether the cluster is visible to all IAM users of the AWS account associated with the cluster. If this value is set to <code>true</code>, all IAM users of that AWS account can view and (if they have the proper policy permissions set) manage the cluster. If it is set to <code>false</code>, only the IAM user that created the cluster can view and manage it.
    boolean VisibleToAllUsers = 22;
}

message RunJobFlowOutput {
    // An unique identifier for the job flow.
    string JobFlowId = 1;
}

enum ScaleDownBehavior {
    TERMINATE_AT_INSTANCE_HOUR = 0;
    TERMINATE_AT_TASK_COMPLETION = 1;
}

message ScalingAction {
    // Not available for instance groups. Instance groups use the market type specified for the group.
    MarketType Market = 1;
    // The type of adjustment the automatic scaling activity makes when triggered, and the periodicity of the adjustment.
    SimpleScalingPolicyConfiguration SimpleScalingPolicyConfiguration = 2;
}

message ScalingConstraints {
    // The upper boundary of EC2 instances in an instance group beyond which scaling activities are not allowed to grow. Scale-out activities will not add instances beyond this boundary.
    integer MaxCapacity = 1;
    // The lower boundary of EC2 instances in an instance group below which scaling activities are not allowed to shrink. Scale-in activities will not terminate instances below this boundary.
    integer MinCapacity = 2;
}

message ScalingRule {
    // The conditions that trigger an automatic scaling activity.
    ScalingAction Action = 1;
    // A friendly, more verbose description of the automatic scaling rule.
    string Description = 2;
    // The name used to identify an automatic scaling rule. Rule names must be unique within a scaling policy.
    string Name = 3;
    // The CloudWatch alarm definition that determines when automatic scaling activity is triggered.
    ScalingTrigger Trigger = 4;
}

repeated ScalingRule ScalingRuleList = 1

message ScalingTrigger {
    // The definition of a CloudWatch metric alarm. When the defined alarm conditions are met along with other trigger parameters, scaling activity begins.
    CloudWatchAlarmDefinition CloudWatchAlarmDefinition = 1;
}

message ScriptBootstrapActionConfig {
    // A list of command line arguments to pass to the bootstrap action script.
    array Args = 1;
    // Location of the script to run during a bootstrap action. Can be either a location in Amazon S3 or on a local file system.
    string Path = 2;
}

repeated SecurityConfigurationSummary SecurityConfigurationList = 1

message SecurityConfigurationSummary {
    // The date and time the security configuration was created.
    string CreationDateTime = 1;
    // The name of the security configuration.
    string Name = 2;
}

repeated string SecurityGroupsList = 1

message SetTerminationProtectionInput {
    //  A list of strings that uniquely identify the clusters to protect. This identifier is returned by <a>RunJobFlow</a> and can also be obtained from <a>DescribeJobFlows</a> .
    array JobFlowIds = 1;
    // A Boolean that indicates whether to protect the cluster and prevent the Amazon EC2 instances in the cluster from shutting down due to API calls, user intervention, or job-flow error.
    boolean TerminationProtected = 2;
}

message SetVisibleToAllUsersInput {
    // Identifiers of the job flows to receive the new visibility setting.
    array JobFlowIds = 1;
    // Whether the specified clusters are visible to all IAM users of the AWS account associated with the cluster. If this value is set to True, all IAM users of that AWS account can view and, if they have the proper IAM policy permissions set, manage the clusters. If it is set to False, only the IAM user that created a cluster can view and manage it.
    boolean VisibleToAllUsers = 2;
}

message ShrinkPolicy {
    // The desired timeout for decommissioning an instance. Overrides the default YARN decommissioning timeout.
    integer DecommissionTimeout = 1;
    // Custom policy for requesting termination protection or termination of specific instances when shrinking an instance group.
    InstanceResizePolicy InstanceResizePolicy = 2;
}

message SimpleScalingPolicyConfiguration {
    // The way in which EC2 instances are added (if <code>ScalingAdjustment</code> is a positive number) or terminated (if <code>ScalingAdjustment</code> is a negative number) each time the scaling activity is triggered. <code>CHANGE_IN_CAPACITY</code> is the default. <code>CHANGE_IN_CAPACITY</code> indicates that the EC2 instance count increments or decrements by <code>ScalingAdjustment</code>, which should be expressed as an integer. <code>PERCENT_CHANGE_IN_CAPACITY</code> indicates the instance count increments or decrements by the percentage specified by <code>ScalingAdjustment</code>, which should be expressed as a decimal. For example, 0.20 indicates an increase in 20% increments of cluster capacity. <code>EXACT_CAPACITY</code> indicates the scaling activity results in an instance group with the number of EC2 instances specified by <code>ScalingAdjustment</code>, which should be expressed as a positive integer.
    AdjustmentType AdjustmentType = 1;
    // The amount of time, in seconds, after a scaling activity completes before any further trigger-related scaling activities can start. The default value is 0.
    integer CoolDown = 2;
    // The amount by which to scale in or scale out, based on the specified <code>AdjustmentType</code>. A positive value adds to the instance group's EC2 instance count while a negative number removes instances. If <code>AdjustmentType</code> is set to <code>EXACT_CAPACITY</code>, the number should only be a positive integer. If <code>AdjustmentType</code> is set to <code>PERCENT_CHANGE_IN_CAPACITY</code>, the value should express the percentage as a decimal. For example, -0.20 indicates a decrease in 20% increments of cluster capacity.
    integer ScalingAdjustment = 3;
}

message SpotProvisioningSpecification {
    // The defined duration for Spot instances (also known as Spot blocks) in minutes. When specified, the Spot instance does not terminate before the defined duration expires, and defined duration pricing for Spot instances applies. Valid values are 60, 120, 180, 240, 300, or 360. The duration period starts as soon as a Spot instance receives its instance ID. At the end of the duration, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.
    integer BlockDurationMinutes = 1;
    // The action to take when <code>TargetSpotCapacity</code> has not been fulfilled when the <code>TimeoutDurationMinutes</code> has expired. Spot instances are not uprovisioned within the Spot provisioining timeout. Valid values are <code>TERMINATE_CLUSTER</code> and <code>SWITCH_TO_ON_DEMAND</code>. SWITCH_TO_ON_DEMAND specifies that if no Spot instances are available, On-Demand Instances should be provisioned to fulfill any remaining Spot capacity.
    SpotProvisioningTimeoutAction TimeoutAction = 2;
    // The spot provisioning timeout period in minutes. If Spot instances are not provisioned within this time period, the <code>TimeOutAction</code> is taken. Minimum value is 5 and maximum value is 1440. The timeout applies only during initial provisioning, when the cluster is first created.
    integer TimeoutDurationMinutes = 3;
}

enum SpotProvisioningTimeoutAction {
    SWITCH_TO_ON_DEMAND = 0;
    TERMINATE_CLUSTER = 1;
}

enum Statistic {
    SAMPLE_COUNT = 0;
    AVERAGE = 1;
    SUM = 2;
    MINIMUM = 3;
    MAXIMUM = 4;
}

message Step {
    // This specifies what action to take when the cluster step fails. Possible values are TERMINATE_CLUSTER, CANCEL_AND_WAIT, and CONTINUE.
    ActionOnFailure ActionOnFailure = 1;
    // The Hadoop job configuration of the cluster step.
    HadoopStepConfig Config = 2;
    // The identifier of the cluster step.
    string Id = 3;
    // The name of the cluster step.
    string Name = 4;
    // The current execution status details of the cluster step.
    StepStatus Status = 5;
}

message StepConfig {
    // The action to take if the step fails.
    ActionOnFailure ActionOnFailure = 1;
    // The JAR file used for the step.
    HadoopJarStepConfig HadoopJarStep = 2;
    // The name of the step.
    string Name = 3;
}

repeated StepConfig StepConfigList = 1

message StepDetail {
    // The description of the step status.
    StepExecutionStatusDetail ExecutionStatusDetail = 1;
    // The step configuration.
    StepConfig StepConfig = 2;
}

repeated StepDetail StepDetailList = 1

enum StepExecutionState {
    PENDING = 0;
    RUNNING = 1;
    CONTINUE = 2;
    COMPLETED = 3;
    CANCELLED = 4;
    FAILED = 5;
    INTERRUPTED = 6;
}

message StepExecutionStatusDetail {
    // The creation date and time of the step.
    string CreationDateTime = 1;
    // The completion date and time of the step.
    string EndDateTime = 2;
    // A description of the step's current state.
    string LastStateChangeReason = 3;
    // The start date and time of the step.
    string StartDateTime = 4;
    // The state of the step.
    StepExecutionState State = 5;
}



repeated string StepIdsList = 1

enum StepState {
    PENDING = 0;
    CANCEL_PENDING = 1;
    RUNNING = 2;
    COMPLETED = 3;
    CANCELLED = 4;
    FAILED = 5;
    INTERRUPTED = 6;
}

message StepStateChangeReason {
    // The programmable code for the state change reason. Note: Currently, the service provides no code for the state change.
    StepStateChangeReasonCode Code = 1;
    // The descriptive message for the state change reason.
    string Message = 2;
}

enum StepStateChangeReasonCode {
    NONE = 0;
}

repeated StepState StepStateList = 1

message StepStatus {
    // The details for the step failure including reason, message, and log file path where the root cause was identified.
    FailureDetails FailureDetails = 1;
    // The execution state of the cluster step.
    StepState State = 2;
    // The reason for the step execution status change.
    StepStateChangeReason StateChangeReason = 3;
    // The timeline of the cluster step status over time.
    StepTimeline Timeline = 4;
}

message StepSummary {
    // This specifies what action to take when the cluster step fails. Possible values are TERMINATE_CLUSTER, CANCEL_AND_WAIT, and CONTINUE.
    ActionOnFailure ActionOnFailure = 1;
    // The Hadoop job configuration of the cluster step.
    HadoopStepConfig Config = 2;
    // The identifier of the cluster step.
    string Id = 3;
    // The name of the cluster step.
    string Name = 4;
    // The current execution status details of the cluster step.
    StepStatus Status = 5;
}

repeated StepSummary StepSummaryList = 1

message StepTimeline {
    // The date and time when the cluster step was created.
    string CreationDateTime = 1;
    // The date and time when the cluster step execution completed or failed.
    string EndDateTime = 2;
    // The date and time when the cluster step execution started.
    string StartDateTime = 3;
}



repeated string StringList = 1

message StringMap {
    string key = 1;
    string value = 2;
}
repeated StringMap StringMap = 1

message SupportedProductConfig {
    // The list of user-supplied arguments.
    array Args = 1;
    // The name of the product configuration.
    string Name = 2;
}

repeated string SupportedProductsList = 1

message Tag {
    // A user-defined key, which is the minimum required information for a valid tag. For more information, see <a href="http://docs.aws.amazon.com/ElasticMapReduce/latest/DeveloperGuide/emr-plan-tags.html">Tagging Amazon EMR Resources</a>.
    string Key = 1;
    // A user-defined value, which is optional in a tag. For more information, see <a href="http://docs.aws.amazon.com/ElasticMapReduce/latest/DeveloperGuide/emr-plan-tags.html">Tagging Amazon EMR Resources</a>.
    string Value = 2;
}

repeated Tag TagList = 1

message TerminateJobFlowsInput {
    // A list of job flows to be shutdown.
    array JobFlowIds = 1;
}

enum Unit {
    NONE = 0;
    SECONDS = 1;
    MICRO_SECONDS = 2;
    MILLI_SECONDS = 3;
    BYTES = 4;
    KILO_BYTES = 5;
    MEGA_BYTES = 6;
    GIGA_BYTES = 7;
    TERA_BYTES = 8;
    BITS = 9;
    KILO_BITS = 10;
    MEGA_BITS = 11;
    GIGA_BITS = 12;
    TERA_BITS = 13;
    PERCENT = 14;
    COUNT = 15;
    BYTES_PER_SECOND = 16;
    KILO_BYTES_PER_SECOND = 17;
    MEGA_BYTES_PER_SECOND = 18;
    GIGA_BYTES_PER_SECOND = 19;
    TERA_BYTES_PER_SECOND = 20;
    BITS_PER_SECOND = 21;
    KILO_BITS_PER_SECOND = 22;
    MEGA_BITS_PER_SECOND = 23;
    GIGA_BITS_PER_SECOND = 24;
    TERA_BITS_PER_SECOND = 25;
    COUNT_PER_SECOND = 26;
}

message VolumeSpecification {
    // The number of I/O operations per second (IOPS) that the volume supports.
    integer Iops = 1;
    // The volume size, in gibibytes (GiB). This can be a number from 1 - 1024. If the volume type is EBS-optimized, the minimum value is 10.
    integer SizeInGB = 2;
    // The volume type. Volume types supported are gp2, io1, standard.
    string VolumeType = 3;
}



















repeated string XmlStringList = 1



repeated string XmlStringMaxLen256List = 1

service AmazonElasticMapReduceService {
    // <p>Adds an instance fleet to a running cluster.</p> <note> <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x.</p> </note>
    rpc Post(PostRequest) returns (AddInstanceFleetOutput) {
      option (google.api.http) = {
        post: "//"
        body: "body"
      };
    }
    // Adds one or more instance groups to a running cluster.
    rpc Post#AddInstanceGroups(Post#AddInstanceGroupsRequest) returns (AddInstanceGroupsOutput) {
      option (google.api.http) = {
        post: "//#AddInstanceGroups"
        body: "body"
      };
    }
    // <p>AddJobFlowSteps adds new steps to a running cluster. A maximum of 256 steps are allowed in each job flow.</p> <p>If your cluster is long-running (such as a Hive data warehouse) or complex, you may require more than 256 steps to process your data. You can bypass the 256-step limitation in various ways, including using SSH to connect to the master node and submitting queries directly to the software running on the master node, such as Hive and Hadoop. For more information on how to do this, see <a href="http://docs.aws.amazon.com/ElasticMapReduce/latest/ManagementGuide/AddMoreThan256Steps.html">Add More than 256 Steps to a Cluster</a> in the <i>Amazon EMR Management Guide</i>.</p> <p>A step specifies the location of a JAR file stored either on the master node of the cluster or in Amazon S3. Each step is performed by the main function of the main class of the JAR file. The main class can be specified either in the manifest of the JAR or by using the MainFunction parameter of the step.</p> <p>Amazon EMR executes each step in the order listed. For a step to be considered complete, the main function must exit with a zero exit code and all Hadoop jobs started while the step was running must have completed and run successfully.</p> <p>You can only add steps to a cluster that is in one of the following states: STARTING, BOOTSTRAPPING, RUNNING, or WAITING.</p>
    rpc Post#AddJobFlowSteps(Post#AddJobFlowStepsRequest) returns (AddJobFlowStepsOutput) {
      option (google.api.http) = {
        post: "//#AddJobFlowSteps"
        body: "body"
      };
    }
    // Adds tags to an Amazon EMR resource. Tags make it easier to associate clusters in various ways, such as grouping clusters to track your Amazon EMR resource allocation costs. For more information, see <a href="http://docs.aws.amazon.com/ElasticMapReduce/latest/DeveloperGuide/emr-plan-tags.html">Tagging Amazon EMR Resources</a>.
    rpc Post#AddTags(Post#AddTagsRequest) returns (AddTagsOutput) {
      option (google.api.http) = {
        post: "//#AddTags"
        body: "body"
      };
    }
    // Cancels a pending step or steps in a running cluster. Available only in Amazon EMR versions 4.8.0 and later, excluding version 5.0.0. A maximum of 256 steps are allowed in each CancelSteps request. CancelSteps is idempotent but asynchronous; it does not guarantee a step will be canceled, even if the request is successfully submitted. You can only cancel steps that are in a <code>PENDING</code> state.
    rpc Post#CancelSteps(Post#CancelStepsRequest) returns (CancelStepsOutput) {
      option (google.api.http) = {
        post: "//#CancelSteps"
        body: "body"
      };
    }
    // Creates a security configuration, which is stored in the service and can be specified when a cluster is created.
    rpc Post#CreateSecurityConfiguration(Post#CreateSecurityConfigurationRequest) returns (CreateSecurityConfigurationOutput) {
      option (google.api.http) = {
        post: "//#CreateSecurityConfiguration"
        body: "body"
      };
    }
    // Deletes a security configuration.
    rpc Post#DeleteSecurityConfiguration(Post#DeleteSecurityConfigurationRequest) returns (DeleteSecurityConfigurationOutput) {
      option (google.api.http) = {
        post: "//#DeleteSecurityConfiguration"
        body: "body"
      };
    }
    // Provides cluster-level details including status, hardware and software configuration, VPC settings, and so on. For information about the cluster steps, see <a>ListSteps</a>.
    rpc Post#DescribeCluster(Post#DescribeClusterRequest) returns (DescribeClusterOutput) {
      option (google.api.http) = {
        post: "//#DescribeCluster"
        body: "body"
      };
    }
    // <p>This API is deprecated and will eventually be removed. We recommend you use <a>ListClusters</a>, <a>DescribeCluster</a>, <a>ListSteps</a>, <a>ListInstanceGroups</a> and <a>ListBootstrapActions</a> instead.</p> <p>DescribeJobFlows returns a list of job flows that match all of the supplied parameters. The parameters can include a list of job flow IDs, job flow states, and restrictions on job flow creation date and time.</p> <p>Regardless of supplied parameters, only job flows created within the last two months are returned.</p> <p>If no parameters are supplied, then job flows matching either of the following criteria are returned:</p> <ul> <li> <p>Job flows created and completed in the last two weeks</p> </li> <li> <p> Job flows created within the last two months that are in one of the following states: <code>RUNNING</code>, <code>WAITING</code>, <code>SHUTTING_DOWN</code>, <code>STARTING</code> </p> </li> </ul> <p>Amazon EMR can return a maximum of 512 job flow descriptions.</p>
    rpc Post#DescribeJobFlows(Post#DescribeJobFlowsRequest) returns (DescribeJobFlowsOutput) {
      option (google.api.http) = {
        post: "//#DescribeJobFlows"
        body: "body"
      };
    }
    // Provides the details of a security configuration by returning the configuration JSON.
    rpc Post#DescribeSecurityConfiguration(Post#DescribeSecurityConfigurationRequest) returns (DescribeSecurityConfigurationOutput) {
      option (google.api.http) = {
        post: "//#DescribeSecurityConfiguration"
        body: "body"
      };
    }
    // Provides more detail about the cluster step.
    rpc Post#DescribeStep(Post#DescribeStepRequest) returns (DescribeStepOutput) {
      option (google.api.http) = {
        post: "//#DescribeStep"
        body: "body"
      };
    }
    // Provides information about the bootstrap actions associated with a cluster.
    rpc Post#ListBootstrapActions(Post#ListBootstrapActionsRequest) returns (ListBootstrapActionsOutput) {
      option (google.api.http) = {
        post: "//#ListBootstrapActions"
        body: "body"
      };
    }
    // Provides the status of all clusters visible to this AWS account. Allows you to filter the list of clusters based on certain criteria; for example, filtering by cluster creation date and time or by status. This call returns a maximum of 50 clusters per call, but returns a marker to track the paging of the cluster list across multiple ListClusters calls.
    rpc Post#ListClusters(Post#ListClustersRequest) returns (ListClustersOutput) {
      option (google.api.http) = {
        post: "//#ListClusters"
        body: "body"
      };
    }
    // <p>Lists all available details about the instance fleets in a cluster.</p> <note> <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.</p> </note>
    rpc Post#ListInstanceFleets(Post#ListInstanceFleetsRequest) returns (ListInstanceFleetsOutput) {
      option (google.api.http) = {
        post: "//#ListInstanceFleets"
        body: "body"
      };
    }
    // Provides all available details about the instance groups in a cluster.
    rpc Post#ListInstanceGroups(Post#ListInstanceGroupsRequest) returns (ListInstanceGroupsOutput) {
      option (google.api.http) = {
        post: "//#ListInstanceGroups"
        body: "body"
      };
    }
    // Provides information for all active EC2 instances and EC2 instances terminated in the last 30 days, up to a maximum of 2,000. EC2 instances in any of the following states are considered active: AWAITING_FULFILLMENT, PROVISIONING, BOOTSTRAPPING, RUNNING.
    rpc Post#ListInstances(Post#ListInstancesRequest) returns (ListInstancesOutput) {
      option (google.api.http) = {
        post: "//#ListInstances"
        body: "body"
      };
    }
    // Lists all the security configurations visible to this account, providing their creation dates and times, and their names. This call returns a maximum of 50 clusters per call, but returns a marker to track the paging of the cluster list across multiple ListSecurityConfigurations calls.
    rpc Post#ListSecurityConfigurations(Post#ListSecurityConfigurationsRequest) returns (ListSecurityConfigurationsOutput) {
      option (google.api.http) = {
        post: "//#ListSecurityConfigurations"
        body: "body"
      };
    }
    // Provides a list of steps for the cluster in reverse order unless you specify stepIds with the request.
    rpc Post#ListSteps(Post#ListStepsRequest) returns (ListStepsOutput) {
      option (google.api.http) = {
        post: "//#ListSteps"
        body: "body"
      };
    }
    // <p>Modifies the target On-Demand and target Spot capacities for the instance fleet with the specified InstanceFleetID within the cluster specified using ClusterID. The call either succeeds or fails atomically.</p> <note> <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.</p> </note>
    rpc Post#ModifyInstanceFleet(Post#ModifyInstanceFleetRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#ModifyInstanceFleet"
        body: "body"
      };
    }
    // ModifyInstanceGroups modifies the number of nodes and configuration settings of an instance group. The input parameters include the new target instance count for the group and the instance group ID. The call will either succeed or fail atomically.
    rpc Post#ModifyInstanceGroups(Post#ModifyInstanceGroupsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#ModifyInstanceGroups"
        body: "body"
      };
    }
    // Creates or updates an automatic scaling policy for a core instance group or task instance group in an Amazon EMR cluster. The automatic scaling policy defines how an instance group dynamically adds and terminates EC2 instances in response to the value of a CloudWatch metric.
    rpc Post#PutAutoScalingPolicy(Post#PutAutoScalingPolicyRequest) returns (PutAutoScalingPolicyOutput) {
      option (google.api.http) = {
        post: "//#PutAutoScalingPolicy"
        body: "body"
      };
    }
    // Removes an automatic scaling policy from a specified instance group within an EMR cluster.
    rpc Post#RemoveAutoScalingPolicy(Post#RemoveAutoScalingPolicyRequest) returns (RemoveAutoScalingPolicyOutput) {
      option (google.api.http) = {
        post: "//#RemoveAutoScalingPolicy"
        body: "body"
      };
    }
    // <p>Removes tags from an Amazon EMR resource. Tags make it easier to associate clusters in various ways, such as grouping clusters to track your Amazon EMR resource allocation costs. For more information, see <a href="http://docs.aws.amazon.com/ElasticMapReduce/latest/DeveloperGuide/emr-plan-tags.html">Tagging Amazon EMR Resources</a>. </p> <p>The following example removes the stack tag with value Prod from a cluster:</p>
    rpc Post#RemoveTags(Post#RemoveTagsRequest) returns (RemoveTagsOutput) {
      option (google.api.http) = {
        post: "//#RemoveTags"
        body: "body"
      };
    }
    // <p>RunJobFlow creates and starts running a new cluster (job flow). The cluster runs the steps specified. After the steps complete, the cluster stops and the HDFS partition is lost. To prevent loss of data, configure the last step of the job flow to store results in Amazon S3. If the <a>JobFlowInstancesConfig</a> <code>KeepJobFlowAliveWhenNoSteps</code> parameter is set to <code>TRUE</code>, the cluster transitions to the WAITING state rather than shutting down after the steps have completed. </p> <p>For additional protection, you can set the <a>JobFlowInstancesConfig</a> <code>TerminationProtected</code> parameter to <code>TRUE</code> to lock the cluster and prevent it from being terminated by API call, user intervention, or in the event of a job flow error.</p> <p>A maximum of 256 steps are allowed in each job flow.</p> <p>If your cluster is long-running (such as a Hive data warehouse) or complex, you may require more than 256 steps to process your data. You can bypass the 256-step limitation in various ways, including using the SSH shell to connect to the master node and submitting queries directly to the software running on the master node, such as Hive and Hadoop. For more information on how to do this, see <a href="http://docs.aws.amazon.com/ElasticMapReduce/latest/Management/Guide/AddMoreThan256Steps.html">Add More than 256 Steps to a Cluster</a> in the <i>Amazon EMR Management Guide</i>.</p> <p>For long running clusters, we recommend that you periodically store your results.</p> <note> <p>The instance fleets configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions. The RunJobFlow request can contain InstanceFleets parameters or InstanceGroups parameters, but not both.</p> </note>
    rpc Post#RunJobFlow(Post#RunJobFlowRequest) returns (RunJobFlowOutput) {
      option (google.api.http) = {
        post: "//#RunJobFlow"
        body: "body"
      };
    }
    // <p>SetTerminationProtection locks a cluster (job flow) so the EC2 instances in the cluster cannot be terminated by user intervention, an API call, or in the event of a job-flow error. The cluster still terminates upon successful completion of the job flow. Calling <code>SetTerminationProtection</code> on a cluster is similar to calling the Amazon EC2 <code>DisableAPITermination</code> API on all EC2 instances in a cluster.</p> <p> <code>SetTerminationProtection</code> is used to prevent accidental termination of a cluster and to ensure that in the event of an error, the instances persist so that you can recover any data stored in their ephemeral instance storage.</p> <p> To terminate a cluster that has been locked by setting <code>SetTerminationProtection</code> to <code>true</code>, you must first unlock the job flow by a subsequent call to <code>SetTerminationProtection</code> in which you set the value to <code>false</code>. </p> <p> For more information, see<a href="http://docs.aws.amazon.com/emr/latest/ManagementGuide/UsingEMR_TerminationProtection.html">Managing Cluster Termination</a> in the <i>Amazon EMR Management Guide</i>. </p>
    rpc Post#SetTerminationProtection(Post#SetTerminationProtectionRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#SetTerminationProtection"
        body: "body"
      };
    }
    // Sets whether all AWS Identity and Access Management (IAM) users under your account can access the specified clusters (job flows). This action works on running clusters. You can also set the visibility of a cluster when you launch it using the <code>VisibleToAllUsers</code> parameter of <a>RunJobFlow</a>. The SetVisibleToAllUsers action can be called only by an IAM user who created the cluster or the AWS account that owns the cluster.
    rpc Post#SetVisibleToAllUsers(Post#SetVisibleToAllUsersRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#SetVisibleToAllUsers"
        body: "body"
      };
    }
    // <p>TerminateJobFlows shuts a list of clusters (job flows) down. When a job flow is shut down, any step not yet completed is canceled and the EC2 instances on which the cluster is running are stopped. Any log files not already saved are uploaded to Amazon S3 if a LogUri was specified when the cluster was created.</p> <p>The maximum number of clusters allowed is 10. The call to <code>TerminateJobFlows</code> is asynchronous. Depending on the configuration of the cluster, it may take up to 1-5 minutes for the cluster to completely terminate and release allocated resources, such as Amazon EC2 instances.</p>
    rpc Post#TerminateJobFlows(Post#TerminateJobFlowsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#TerminateJobFlows"
        body: "body"
      };
    }
}

syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package amazonelasticfilesystem;

message Post20150201CreateTagsFileSystemIdRequest {
    string Action = 1;
    string FileSystemId = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    CreateTagsRequest body = 11;
}

message Post20150201DeleteTagsFileSystemIdRequest {
    string Action = 1;
    string FileSystemId = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    DeleteTagsRequest body = 11;
}

message Get20150201FileSystemsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeFileSystemsRequest body = 10;
}

message Delete20150201FileSystemsFileSystemIdRequest {
    string Action = 1;
    string FileSystemId = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    DeleteFileSystemRequest body = 11;
}

message Get20150201MountTargetsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeMountTargetsRequest body = 10;
}

message Delete20150201MountTargetsMountTargetIdRequest {
    string Action = 1;
    string MountTargetId = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    DeleteMountTargetRequest body = 11;
}

message Put20150201MountTargetsMountTargetIdSecurityGroupsRequest {
    string Action = 1;
    string MountTargetId = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    ModifyMountTargetSecurityGroupsRequest body = 11;
}

message Get20150201TagsFileSystemIdRequest {
    string Action = 1;
    string FileSystemId = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    DescribeTagsRequest body = 11;
}

message BadRequest {
    string ErrorCode = 1;
    string Message = 2;
}

message CreateFileSystemRequest {
    // String of up to 64 ASCII characters. Amazon EFS uses this to ensure idempotent creation.
    string CreationToken = 1;
    // A boolean value that, if true, creates an encrypted file system. When creating an encrypted file system, you have the option of specifying a <a>CreateFileSystemRequest$KmsKeyId</a> for an existing AWS Key Management Service (AWS KMS) customer master key (CMK). If you don't specify a CMK, then the default CMK for Amazon EFS, <code>/aws/elasticfilesystem</code>, is used to protect the encrypted file system.
    boolean Encrypted = 2;
    // <p>The id of the AWS KMS CMK that will be used to protect the encrypted file system. This parameter is only required if you want to use a non-default CMK. If this parameter is not specified, the default CMK for Amazon EFS is used. This id can be in one of the following formats:</p> <ul> <li> <p>Key ID - A unique identifier of the key. For example, <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p> </li> <li> <p>ARN - An Amazon Resource Name for the key. For example, <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p> </li> <li> <p>Key alias - A previously created display name for a key. For example, <code>alias/projectKey1</code>.</p> </li> <li> <p>Key alias ARN - An Amazon Resource Name for a key alias. For example, <code>arn:aws:kms:us-west-2:444455556666:alias/projectKey1</code>.</p> </li> </ul> <p>Note that if the KmsKeyId is specified, the <a>CreateFileSystemRequest$Encrypted</a> parameter must be set to true.</p>
    string KmsKeyId = 3;
    // The <code>PerformanceMode</code> of the file system. We recommend <code>generalPurpose</code> performance mode for most file systems. File systems using the <code>maxIO</code> performance mode can scale to higher levels of aggregate throughput and operations per second with a tradeoff of slightly higher latencies for most file operations. This can't be changed after the file system has been created.
    PerformanceMode PerformanceMode = 4;
}

message CreateMountTargetRequest {
    // ID of the file system for which to create the mount target.
    string FileSystemId = 1;
    // Valid IPv4 address within the address range of the specified subnet.
    string IpAddress = 2;
    // Up to five VPC security group IDs, of the form <code>sg-xxxxxxxx</code>. These must be for the same VPC as subnet specified.
    array SecurityGroups = 3;
    // ID of the subnet to add the mount target in.
    string SubnetId = 4;
}

message CreateTagsRequest {
    // Array of <code>Tag</code> objects to add. Each <code>Tag</code> object is a key-value pair.
    array Tags = 1;
}

message DeleteFileSystemRequest {
}

message DeleteMountTargetRequest {
}

message DeleteTagsRequest {
    // List of tag keys to delete.
    array TagKeys = 1;
}

message DependencyTimeout {
    string ErrorCode = 1;
    string Message = 2;
}

message DescribeFileSystemsRequest {
}

message DescribeFileSystemsResponse {
    // Array of file system descriptions.
    array FileSystems = 1;
    // Present if provided by caller in the request (String).
    string Marker = 2;
    // Present if there are more file systems than returned in the response (String). You can use the <code>NextMarker</code> in the subsequent request to fetch the descriptions.
    string NextMarker = 3;
}

message DescribeMountTargetSecurityGroupsRequest {
}

message DescribeMountTargetSecurityGroupsResponse {
    // Array of security groups.
    array SecurityGroups = 1;
}

message DescribeMountTargetsRequest {
}

message DescribeMountTargetsResponse {
    // If the request included the <code>Marker</code>, the response returns that value in this field.
    string Marker = 1;
    // Returns the file system's mount targets as an array of <code>MountTargetDescription</code> objects.
    array MountTargets = 2;
    // If a value is present, there are more mount targets to return. In a subsequent request, you can provide <code>Marker</code> in your request with this value to retrieve the next set of mount targets.
    string NextMarker = 3;
}

message DescribeTagsRequest {
}

message DescribeTagsResponse {
    // If the request included a <code>Marker</code>, the response returns that value in this field.
    string Marker = 1;
    // If a value is present, there are more tags to return. In a subsequent request, you can provide the value of <code>NextMarker</code> as the value of the <code>Marker</code> parameter in your next request to retrieve the next set of tags.
    string NextMarker = 2;
    // Returns tags associated with the file system as an array of <code>Tag</code> objects.
    array Tags = 3;
}

message FileSystemAlreadyExists {
    string ErrorCode = 1;
    string FileSystemId = 2;
    string Message = 3;
}

message FileSystemDescription {
    // Time that the file system was created, in seconds (since 1970-01-01T00:00:00Z).
    string CreationTime = 1;
    // Opaque string specified in the request.
    string CreationToken = 2;
    // A boolean value that, if true, indicates that the file system is encrypted.
    boolean Encrypted = 3;
    // ID of the file system, assigned by Amazon EFS.
    string FileSystemId = 4;
    // The id of an AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to protect the encrypted file system.
    string KmsKeyId = 5;
    // Lifecycle phase of the file system.
    LifeCycleState LifeCycleState = 6;
    // You can add tags to a file system, including a <code>Name</code> tag. For more information, see <a>CreateTags</a>. If the file system has a <code>Name</code> tag, Amazon EFS returns the value in this field.
    string Name = 7;
    // Current number of mount targets that the file system has. For more information, see <a>CreateMountTarget</a>.
    integer NumberOfMountTargets = 8;
    // AWS account that created the file system. If the file system was created by an IAM user, the parent account to which the user belongs is the owner.
    string OwnerId = 9;
    // The <code>PerformanceMode</code> of the file system.
    PerformanceMode PerformanceMode = 10;
    // Latest known metered size (in bytes) of data stored in the file system, in bytes, in its <code>Value</code> field, and the time at which that size was determined in its <code>Timestamp</code> field. The <code>Timestamp</code> value is the integer number of seconds since 1970-01-01T00:00:00Z. Note that the value does not represent the size of a consistent snapshot of the file system, but it is eventually consistent when there are no writes to the file system. That is, the value will represent actual size only if the file system is not modified for a period longer than a couple of hours. Otherwise, the value is not the exact size the file system was at any instant in time.
    FileSystemSize SizeInBytes = 11;
}

repeated FileSystemDescription FileSystemDescriptions = 1



message FileSystemInUse {
    string ErrorCode = 1;
    string Message = 2;
}

message FileSystemLimitExceeded {
    string ErrorCode = 1;
    string Message = 2;
}

message FileSystemNotFound {
    string ErrorCode = 1;
    string Message = 2;
}

message FileSystemSize {
    // Time at which the size of data, returned in the <code>Value</code> field, was determined. The value is the integer number of seconds since 1970-01-01T00:00:00Z.
    string Timestamp = 1;
    // Latest known metered size (in bytes) of data stored in the file system.
    integer Value = 2;
}

message IncorrectFileSystemLifeCycleState {
    string ErrorCode = 1;
    string Message = 2;
}

message IncorrectMountTargetState {
    string ErrorCode = 1;
    string Message = 2;
}

message InternalServerError {
    string ErrorCode = 1;
    string Message = 2;
}

message IpAddressInUse {
    string ErrorCode = 1;
    string Message = 2;
}

enum LifeCycleState {
    CREATING = 0;
    AVAILABLE = 1;
    DELETING = 2;
    DELETED = 3;
}

message ModifyMountTargetSecurityGroupsRequest {
    // Array of up to five VPC security group IDs.
    array SecurityGroups = 1;
}

message MountTargetConflict {
    string ErrorCode = 1;
    string Message = 2;
}

message MountTargetDescription {
    // ID of the file system for which the mount target is intended.
    string FileSystemId = 1;
    // Address at which the file system may be mounted via the mount target.
    string IpAddress = 2;
    // Lifecycle state of the mount target.
    LifeCycleState LifeCycleState = 3;
    // System-assigned mount target ID.
    string MountTargetId = 4;
    // ID of the network interface that Amazon EFS created when it created the mount target.
    string NetworkInterfaceId = 5;
    // AWS account ID that owns the resource.
    string OwnerId = 6;
    // ID of the mount target's subnet.
    string SubnetId = 7;
}

repeated MountTargetDescription MountTargetDescriptions = 1



message MountTargetNotFound {
    string ErrorCode = 1;
    string Message = 2;
}

message NetworkInterfaceLimitExceeded {
    string ErrorCode = 1;
    string Message = 2;
}

message NoFreeAddressesInSubnet {
    string ErrorCode = 1;
    string Message = 2;
}

enum PerformanceMode {
    GENERALPURPOSE = 0;
    MAXIO = 1;
}

message SecurityGroupLimitExceeded {
    string ErrorCode = 1;
    string Message = 2;
}

message SecurityGroupNotFound {
    string ErrorCode = 1;
    string Message = 2;
}

repeated string SecurityGroups = 1



message SubnetNotFound {
    string ErrorCode = 1;
    string Message = 2;
}

message Tag {
    // Tag key (String). The key can't start with <code>aws:</code>.
    string Key = 1;
    // Value of the tag key.
    string Value = 2;
}



repeated string TagKeys = 1



repeated Tag Tags = 1



message UnsupportedAvailabilityZone {
    string ErrorCode = 1;
    string Message = 2;
}

service AmazonElasticFileSystemService {
    // <p>Creates or overwrites tags associated with a file system. Each tag is a key-value pair. If a tag key specified in the request already exists on the file system, this operation overwrites its value with the value provided in the request. If you add the <code>Name</code> tag to your file system, Amazon EFS returns it in the response to the <a>DescribeFileSystems</a> operation. </p> <p>This operation requires permission for the <code>elasticfilesystem:CreateTags</code> action.</p>
    rpc Post20150201CreateTagsFileSystemId(Post20150201CreateTagsFileSystemIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//2015-02-01/create-tags/{FileSystemId}"
        body: "body"
      };
    }
    // <p>Deletes the specified tags from a file system. If the <code>DeleteTags</code> request includes a tag key that does not exist, Amazon EFS ignores it and doesn't cause an error. For more information about tags and related restrictions, see <a href="http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html">Tag Restrictions</a> in the <i>AWS Billing and Cost Management User Guide</i>.</p> <p>This operation requires permissions for the <code>elasticfilesystem:DeleteTags</code> action.</p>
    rpc Post20150201DeleteTagsFileSystemId(Post20150201DeleteTagsFileSystemIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//2015-02-01/delete-tags/{FileSystemId}"
        body: "body"
      };
    }
    // <p>Returns the description of a specific Amazon EFS file system if either the file system <code>CreationToken</code> or the <code>FileSystemId</code> is provided. Otherwise, it returns descriptions of all file systems owned by the caller's AWS account in the AWS Region of the endpoint that you're calling.</p> <p> When retrieving all file system descriptions, you can optionally specify the <code>MaxItems</code> parameter to limit the number of descriptions in a response. If more file system descriptions remain, Amazon EFS returns a <code>NextMarker</code>, an opaque token, in the response. In this case, you should send a subsequent request with the <code>Marker</code> request parameter set to the value of <code>NextMarker</code>. </p> <p>To retrieve a list of your file system descriptions, this operation is used in an iterative process, where <code>DescribeFileSystems</code> is called first without the <code>Marker</code> and then the operation continues to call it with the <code>Marker</code> parameter set to the value of the <code>NextMarker</code> from the previous response until the response has no <code>NextMarker</code>. </p> <p>The implementation may return fewer than <code>MaxItems</code> file system descriptions while still including a <code>NextMarker</code> value. </p> <p> The order of file systems returned in the response of one <code>DescribeFileSystems</code> call and the order of file systems returned across the responses of a multi-call iteration is unspecified. </p> <p> This operation requires permissions for the <code>elasticfilesystem:DescribeFileSystems</code> action. </p>
    rpc Get20150201FileSystems(Get20150201FileSystemsRequest) returns (DescribeFileSystemsResponse) {
      option (google.api.http) = {
        get: "//2015-02-01/file-systems"
        body: "body"
      };
    }
    // <p>Deletes a file system, permanently severing access to its contents. Upon return, the file system no longer exists and you can't access any contents of the deleted file system.</p> <p> You can't delete a file system that is in use. That is, if the file system has any mount targets, you must first delete them. For more information, see <a>DescribeMountTargets</a> and <a>DeleteMountTarget</a>. </p> <note> <p>The <code>DeleteFileSystem</code> call returns while the file system state is still <code>deleting</code>. You can check the file system deletion status by calling the <a>DescribeFileSystems</a> operation, which returns a list of file systems in your account. If you pass file system ID or creation token for the deleted file system, the <a>DescribeFileSystems</a> returns a <code>404 FileSystemNotFound</code> error.</p> </note> <p>This operation requires permissions for the <code>elasticfilesystem:DeleteFileSystem</code> action.</p>
    rpc Delete20150201FileSystemsFileSystemId(Delete20150201FileSystemsFileSystemIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//2015-02-01/file-systems/{FileSystemId}"
        body: "body"
      };
    }
    // <p>Returns the descriptions of all the current mount targets, or a specific mount target, for a file system. When requesting all of the current mount targets, the order of mount targets returned in the response is unspecified.</p> <p>This operation requires permissions for the <code>elasticfilesystem:DescribeMountTargets</code> action, on either the file system ID that you specify in <code>FileSystemId</code>, or on the file system of the mount target that you specify in <code>MountTargetId</code>.</p>
    rpc Get20150201MountTargets(Get20150201MountTargetsRequest) returns (DescribeMountTargetsResponse) {
      option (google.api.http) = {
        get: "//2015-02-01/mount-targets"
        body: "body"
      };
    }
    // <p>Deletes the specified mount target.</p> <p>This operation forcibly breaks any mounts of the file system via the mount target that is being deleted, which might disrupt instances or applications using those mounts. To avoid applications getting cut off abruptly, you might consider unmounting any mounts of the mount target, if feasible. The operation also deletes the associated network interface. Uncommitted writes may be lost, but breaking a mount target using this operation does not corrupt the file system itself. The file system you created remains. You can mount an EC2 instance in your VPC via another mount target.</p> <p>This operation requires permissions for the following action on the file system:</p> <ul> <li> <p> <code>elasticfilesystem:DeleteMountTarget</code> </p> </li> </ul> <note> <p>The <code>DeleteMountTarget</code> call returns while the mount target state is still <code>deleting</code>. You can check the mount target deletion by calling the <a>DescribeMountTargets</a> operation, which returns a list of mount target descriptions for the given file system. </p> </note> <p>The operation also requires permissions for the following Amazon EC2 action on the mount target's network interface:</p> <ul> <li> <p> <code>ec2:DeleteNetworkInterface</code> </p> </li> </ul>
    rpc Delete20150201MountTargetsMountTargetId(Delete20150201MountTargetsMountTargetIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//2015-02-01/mount-targets/{MountTargetId}"
        body: "body"
      };
    }
    // <p>Modifies the set of security groups in effect for a mount target.</p> <p>When you create a mount target, Amazon EFS also creates a new network interface. For more information, see <a>CreateMountTarget</a>. This operation replaces the security groups in effect for the network interface associated with a mount target, with the <code>SecurityGroups</code> provided in the request. This operation requires that the network interface of the mount target has been created and the lifecycle state of the mount target is not <code>deleted</code>. </p> <p>The operation requires permissions for the following actions:</p> <ul> <li> <p> <code>elasticfilesystem:ModifyMountTargetSecurityGroups</code> action on the mount target's file system. </p> </li> <li> <p> <code>ec2:ModifyNetworkInterfaceAttribute</code> action on the mount target's network interface. </p> </li> </ul>
    rpc Put20150201MountTargetsMountTargetIdSecurityGroups(Put20150201MountTargetsMountTargetIdSecurityGroupsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "//2015-02-01/mount-targets/{MountTargetId}/security-groups"
        body: "body"
      };
    }
    // <p>Returns the tags associated with a file system. The order of tags returned in the response of one <code>DescribeTags</code> call and the order of tags returned across the responses of a multi-call iteration (when using pagination) is unspecified. </p> <p> This operation requires permissions for the <code>elasticfilesystem:DescribeTags</code> action. </p>
    rpc Get20150201TagsFileSystemId(Get20150201TagsFileSystemIdRequest) returns (DescribeTagsResponse) {
      option (google.api.http) = {
        get: "//2015-02-01/tags/{FileSystemId}/"
        body: "body"
      };
    }
}

syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package amazonlexmodelbuildingservice;

message GetBotsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetBotsRequest body = 10;
    // Pagination limit
    string maxResults = 11;
    // Pagination token
    string nextToken = 12;
}

message GetBotsBotNameAliasesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetBotAliasesRequest body = 10;
    string botName = 11;
    // Pagination limit
    string maxResults = 12;
    // Pagination token
    string nextToken = 13;
}

message GetBotsBotNameAliasesAliasNameChannelsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    string aliasName = 10;
    GetBotChannelAssociationsRequest body = 11;
    string botName = 12;
    // Pagination limit
    string maxResults = 13;
    // Pagination token
    string nextToken = 14;
}

message GetBotsBotNameAliasesAliasNameChannelsNameRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    string aliasName = 10;
    GetBotChannelAssociationRequest body = 11;
    string botName = 12;
    string name = 13;
}

message PutBotsBotNameAliasesNameRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    PutBotAliasRequest body = 10;
    string botName = 11;
    string name = 12;
}

message DeleteBotsBotNameUtterancesUserIdRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteUtterancesRequest body = 10;
    string botName = 11;
    string userId = 12;
}

message GetBotsBotnameUtterancesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetUtterancesViewRequest body = 10;
    string botname = 11;
}

message DeleteBotsNameRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteBotRequest body = 10;
    string name = 11;
}

message PostBotsNameVersionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateBotVersionRequest body = 10;
    string name = 11;
}

message GetBotsNameVersionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetBotVersionsRequest body = 10;
    // Pagination limit
    string maxResults = 11;
    string name = 12;
    // Pagination token
    string nextToken = 13;
}

message PutBotsNameVersions$LATESTRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    PutBotRequest body = 10;
    string name = 11;
}

message GetBotsNameVersionsVersionoraliasRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetBotRequest body = 10;
    string name = 11;
    string versionoralias = 12;
}

message DeleteBotsNameVersionsVersionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteBotVersionRequest body = 10;
    string name = 11;
    string version = 12;
}

message GetBuiltinsIntentsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetBuiltinIntentsRequest body = 10;
    // Pagination limit
    string maxResults = 11;
    // Pagination token
    string nextToken = 12;
}

message GetBuiltinsIntentsSignatureRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetBuiltinIntentRequest body = 10;
    string signature = 11;
}

message GetBuiltinsSlottypesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetBuiltinSlotTypesRequest body = 10;
    // Pagination limit
    string maxResults = 11;
    // Pagination token
    string nextToken = 12;
}

message GetExportsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetExportRequest body = 10;
}

message GetIntentsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetIntentsRequest body = 10;
    // Pagination limit
    string maxResults = 11;
    // Pagination token
    string nextToken = 12;
}

message DeleteIntentsNameRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteIntentRequest body = 10;
    string name = 11;
}

message PostIntentsNameVersionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateIntentVersionRequest body = 10;
    string name = 11;
}

message GetIntentsNameVersionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetIntentVersionsRequest body = 10;
    // Pagination limit
    string maxResults = 11;
    string name = 12;
    // Pagination token
    string nextToken = 13;
}

message PutIntentsNameVersions$LATESTRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    PutIntentRequest body = 10;
    string name = 11;
}

message GetIntentsNameVersionsVersionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetIntentRequest body = 10;
    string name = 11;
    string version = 12;
}

message GetSlottypesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetSlotTypesRequest body = 10;
    // Pagination limit
    string maxResults = 11;
    // Pagination token
    string nextToken = 12;
}

message DeleteSlottypesNameRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteSlotTypeRequest body = 10;
    string name = 11;
}

message DeleteSlottypesNameVersionVersionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteSlotTypeVersionRequest body = 10;
    string name = 11;
    string version = 12;
}

message PostSlottypesNameVersionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateSlotTypeVersionRequest body = 10;
    string name = 11;
}

message GetSlottypesNameVersionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetSlotTypeVersionsRequest body = 10;
    // Pagination limit
    string maxResults = 11;
    string name = 12;
    // Pagination token
    string nextToken = 13;
}

message PutSlottypesNameVersions$LATESTRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    PutSlotTypeRequest body = 10;
    string name = 11;
}

message GetSlottypesNameVersionsVersionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetSlotTypeRequest body = 10;
    string name = 11;
    string version = 12;
}

message BadRequestException {
    string message = 1;
}

message BotAliasMetadata {
    // The name of the bot to which the alias points.
    string botName = 1;
    // The version of the Amazon Lex bot to which the alias points.
    string botVersion = 2;
    // Checksum of the bot alias.
    string checksum = 3;
    // The date that the bot alias was created.
    string createdDate = 4;
    // A description of the bot alias.
    string description = 5;
    // The date that the bot alias was updated. When you create a resource, the creation date and last updated date are the same.
    string lastUpdatedDate = 6;
    // The name of the bot alias.
    string name = 7;
}

repeated BotAliasMetadata BotAliasMetadataList = 1

message BotChannelAssociation {
    // An alias pointing to the specific version of the Amazon Lex bot to which this association is being made.
    string botAlias = 1;
    // Provides information necessary to communicate with the messaging platform.
    array botConfiguration = 2;
    // <p>The name of the Amazon Lex bot to which this association is being made. </p> <note> <p>Currently, Amazon Lex supports associations with Facebook and Slack, and Twilio.</p> </note>
    string botName = 3;
    // The date that the association between the Amazon Lex bot and the channel was created.
    string createdDate = 4;
    // A text description of the association you are creating.
    string description = 5;
    // The name of the association between the bot and the channel.
    string name = 6;
    // Specifies the type of association by indicating the type of channel being established between the Amazon Lex bot and the external messaging platform.
    ChannelType type = 7;
}

repeated BotChannelAssociation BotChannelAssociationList = 1



message BotMetadata {
    // The date that the bot was created.
    string createdDate = 1;
    // A description of the bot.
    string description = 2;
    // The date that the bot was updated. When you create a bot, the creation date and last updated date are the same.
    string lastUpdatedDate = 3;
    // The name of the bot.
    string name = 4;
    // The status of the bot.
    Status status = 5;
    // The version of the bot. For a new bot, the version is always <code>$LATEST</code>.
    string version = 6;
}

repeated BotMetadata BotMetadataList = 1



repeated string BotVersions = 1

message BuiltinIntentMetadata {
    // A unique identifier for the built-in intent. To find the signature for an intent, see <a href="https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents">Standard Built-in Intents</a> in the <i>Alexa Skills Kit</i>.
    string signature = 1;
    // A list of identifiers for the locales that the intent supports.
    array supportedLocales = 2;
}

repeated BuiltinIntentMetadata BuiltinIntentMetadataList = 1



message BuiltinIntentSlot {
    // A list of the slots defined for the intent.
    string name = 1;
}

repeated BuiltinIntentSlot BuiltinIntentSlotList = 1

message BuiltinSlotTypeMetadata {
    // A unique identifier for the built-in slot type. To find the signature for a slot type, see <a href="https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/slot-type-reference">Slot Type Reference</a> in the <i>Alexa Skills Kit</i>.
    string signature = 1;
    // A list of target locales for the slot.
    array supportedLocales = 2;
}

repeated BuiltinSlotTypeMetadata BuiltinSlotTypeMetadataList = 1



message ChannelConfigurationMap {
    string key = 1;
    string value = 2;
}
repeated ChannelConfigurationMap ChannelConfigurationMap = 1

enum ChannelType {
    FACEBOOK = 0;
    SLACK = 1;
    TWILIOSMS = 2;
}

message CodeHook {
    // The version of the request-response that you want Amazon Lex to use to invoke your Lambda function. For more information, see <a>using-lambda</a>.
    string messageVersion = 1;
    // The Amazon Resource Name (ARN) of the Lambda function.
    string uri = 2;
}

message ConflictException {
    string message = 1;
}

enum ContentType {
    PLAINTEXT = 0;
    SSML = 1;
}

message CreateBotVersionRequest {
    // Identifies a specific revision of the <code>$LATEST</code> version of the bot. If you specify a checksum and the <code>$LATEST</code> version of the bot has a different checksum, a <code>PreconditionFailedException</code> exception is returned and Amazon Lex doesn't publish a new version. If you don't specify a checksum, Amazon Lex publishes the <code>$LATEST</code> version.
    string checksum = 1;
}

message CreateBotVersionResponse {
    // The message that Amazon Lex uses to abort a conversation. For more information, see <a>PutBot</a>.
    Statement abortStatement = 1;
    // Checksum identifying the version of the bot that was created.
    string checksum = 2;
    // <p>For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children's Online Privacy Protection Act (COPPA) by specifying <code>true</code> or <code>false</code> in the <code>childDirected</code> field. By specifying <code>true</code> in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is</b> related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By specifying <code>false</code> in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is not</b> related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. You may not specify a default value for the <code>childDirected</code> field that does not accurately reflect whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA.</p> <p>If your use of Amazon Lex relates to a website, program, or other application that is directed in whole or in part, to children under age 13, you must obtain any required verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in connection with websites, programs, or other applications that are directed or targeted, in whole or in part, to children under age 13, see the <a href="https://aws.amazon.com/lex/faqs#data-security">Amazon Lex FAQ.</a> </p>
    boolean childDirected = 3;
    // The message that Amazon Lex uses when it doesn't understand the user's request. For more information, see <a>PutBot</a>.
    Prompt clarificationPrompt = 4;
    // The date when the bot version was created.
    string createdDate = 5;
    // A description of the bot.
    string description = 6;
    // If <code>status</code> is <code>FAILED</code>, Amazon Lex provides the reason that it failed to build the bot.
    string failureReason = 7;
    // The maximum time in seconds that Amazon Lex retains the data gathered in a conversation. For more information, see <a>PutBot</a>.
    integer idleSessionTTLInSeconds = 8;
    // An array of <code>Intent</code> objects. For more information, see <a>PutBot</a>.
    array intents = 9;
    // The date when the <code>$LATEST</code> version of this bot was updated.
    string lastUpdatedDate = 10;
    //  Specifies the target locale for the bot.
    Locale locale = 11;
    // The name of the bot.
    string name = 12;
    //  When you send a request to create or update a bot, Amazon Lex sets the <code>status</code> response element to <code>BUILDING</code>. After Amazon Lex builds the bot, it sets <code>status</code> to <code>READY</code>. If Amazon Lex can't build the bot, it sets <code>status</code> to <code>FAILED</code>. Amazon Lex returns the reason for the failure in the <code>failureReason</code> response element.
    Status status = 13;
    // The version of the bot.
    string version = 14;
    // The Amazon Polly voice ID that Amazon Lex uses for voice interactions with the user.
    string voiceId = 15;
}

message CreateIntentVersionRequest {
    // Checksum of the <code>$LATEST</code> version of the intent that should be used to create the new version. If you specify a checksum and the <code>$LATEST</code> version of the intent has a different checksum, Amazon Lex returns a <code>PreconditionFailedException</code> exception and doesn't publish a new version. If you don't specify a checksum, Amazon Lex publishes the <code>$LATEST</code> version.
    string checksum = 1;
}

message CreateIntentVersionResponse {
    // Checksum of the intent version created.
    string checksum = 1;
    // After the Lambda function specified in the <code>fulfillmentActivity</code> field fulfills the intent, Amazon Lex conveys this statement to the user.
    Statement conclusionStatement = 2;
    // If defined, the prompt that Amazon Lex uses to confirm the user's intent before fulfilling it.
    Prompt confirmationPrompt = 3;
    // The date that the intent was created.
    string createdDate = 4;
    // A description of the intent.
    string description = 5;
    // If defined, Amazon Lex invokes this Lambda function for each user input.
    CodeHook dialogCodeHook = 6;
    // If defined, Amazon Lex uses this prompt to solicit additional user activity after the intent is fulfilled.
    FollowUpPrompt followUpPrompt = 7;
    //  Describes how the intent is fulfilled.
    FulfillmentActivity fulfillmentActivity = 8;
    // The date that the intent was updated.
    string lastUpdatedDate = 9;
    // The name of the intent.
    string name = 10;
    // A unique identifier for a built-in intent.
    string parentIntentSignature = 11;
    // If the user answers "no" to the question defined in <code>confirmationPrompt</code>, Amazon Lex responds with this statement to acknowledge that the intent was canceled.
    Statement rejectionStatement = 12;
    // An array of sample utterances configured for the intent.
    array sampleUtterances = 13;
    // An array of slot types that defines the information required to fulfill the intent.
    array slots = 14;
    // The version number assigned to the new version of the intent.
    string version = 15;
}

message CreateSlotTypeVersionRequest {
    // Checksum for the <code>$LATEST</code> version of the slot type that you want to publish. If you specify a checksum and the <code>$LATEST</code> version of the slot type has a different checksum, Amazon Lex returns a <code>PreconditionFailedException</code> exception and doesn't publish the new version. If you don't specify a checksum, Amazon Lex publishes the <code>$LATEST</code> version.
    string checksum = 1;
}

message CreateSlotTypeVersionResponse {
    // Checksum of the <code>$LATEST</code> version of the slot type.
    string checksum = 1;
    // The date that the slot type was created.
    string createdDate = 2;
    // A description of the slot type.
    string description = 3;
    // A list of <code>EnumerationValue</code> objects that defines the values that the slot type can take.
    array enumerationValues = 4;
    // The date that the slot type was updated. When you create a resource, the creation date and last update date are the same.
    string lastUpdatedDate = 5;
    // The name of the slot type.
    string name = 6;
    // The strategy that Amazon Lex uses to determine the value of the slot. For more information, see <a>PutSlotType</a>.
    SlotValueSelectionStrategy valueSelectionStrategy = 7;
    // The version assigned to the new slot type version.
    string version = 8;
}

message DeleteBotAliasRequest {
}

message DeleteBotChannelAssociationRequest {
}

message DeleteBotRequest {
}

message DeleteBotVersionRequest {
}

message DeleteIntentRequest {
}

message DeleteIntentVersionRequest {
}

message DeleteSlotTypeRequest {
}

message DeleteSlotTypeVersionRequest {
}

message DeleteUtterancesRequest {
}

message EnumerationValue {
    // Additional values related to the slot type value.
    array synonyms = 1;
    // The value of the slot type.
    string value = 2;
}

repeated EnumerationValue EnumerationValues = 1

enum ExportStatu {
    IN_PROGRESS = 0;
    READY = 1;
    FAILED = 2;
}

enum ExportType {
    ALEXA_SKILLS_KIT = 0;
}

message FollowUpPrompt {
    // Prompts for information from the user.
    Prompt prompt = 1;
    // If the user answers "no" to the question defined in the <code>prompt</code> field, Amazon Lex responds with this statement to acknowledge that the intent was canceled.
    Statement rejectionStatement = 2;
}

message FulfillmentActivity {
    //  A description of the Lambda function that is run to fulfill the intent.
    CodeHook codeHook = 1;
    //  How the intent should be fulfilled, either by running a Lambda function or by returning the slot data to the client application.
    FulfillmentActivityType type = 2;
}

enum FulfillmentActivityType {
    RETURNINTENT = 0;
    CODEHOOK = 1;
}

message GetBotAliasRequest {
}

message GetBotAliasResponse {
    // The name of the bot that the alias points to.
    string botName = 1;
    // The version of the bot that the alias points to.
    string botVersion = 2;
    // Checksum of the bot alias.
    string checksum = 3;
    // The date that the bot alias was created.
    string createdDate = 4;
    // A description of the bot alias.
    string description = 5;
    // The date that the bot alias was updated. When you create a resource, the creation date and the last updated date are the same.
    string lastUpdatedDate = 6;
    // The name of the bot alias.
    string name = 7;
}

message GetBotAliasesRequest {
}

message GetBotAliasesResponse {
    // An array of <code>BotAliasMetadata</code> objects, each describing a bot alias.
    array BotAliases = 1;
    // A pagination token for fetching next page of aliases. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of aliases, specify the pagination token in the next request.
    string nextToken = 2;
}

message GetBotChannelAssociationRequest {
}

message GetBotChannelAssociationResponse {
    // An alias pointing to the specific version of the Amazon Lex bot to which this association is being made.
    string botAlias = 1;
    // Provides information that the messaging platform needs to communicate with the Amazon Lex bot.
    array botConfiguration = 2;
    // The name of the Amazon Lex bot.
    string botName = 3;
    // The date that the association between the bot and the channel was created.
    string createdDate = 4;
    // A description of the association between the bot and the channel.
    string description = 5;
    // The name of the association between the bot and the channel.
    string name = 6;
    // The type of the messaging platform.
    ChannelType type = 7;
}

message GetBotChannelAssociationsRequest {
}

message GetBotChannelAssociationsResponse {
    // An array of objects, one for each association, that provides information about the Amazon Lex bot and its association with the channel.
    array botChannelAssociations = 1;
    // A pagination token that fetches the next page of associations. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of associations, specify the pagination token in the next request.
    string nextToken = 2;
}

message GetBotRequest {
}

message GetBotResponse {
    // The message that Amazon Lex returns when the user elects to end the conversation without completing it. For more information, see <a>PutBot</a>.
    Statement abortStatement = 1;
    // Checksum of the bot used to identify a specific revision of the bot's <code>$LATEST</code> version.
    string checksum = 2;
    // <p>For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children's Online Privacy Protection Act (COPPA) by specifying <code>true</code> or <code>false</code> in the <code>childDirected</code> field. By specifying <code>true</code> in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is</b> related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By specifying <code>false</code> in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is not</b> related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. You may not specify a default value for the <code>childDirected</code> field that does not accurately reflect whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA.</p> <p>If your use of Amazon Lex relates to a website, program, or other application that is directed in whole or in part, to children under age 13, you must obtain any required verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in connection with websites, programs, or other applications that are directed or targeted, in whole or in part, to children under age 13, see the <a href="https://aws.amazon.com/lex/faqs#data-security">Amazon Lex FAQ.</a> </p>
    boolean childDirected = 3;
    // The message Amazon Lex uses when it doesn't understand the user's request. For more information, see <a>PutBot</a>.
    Prompt clarificationPrompt = 4;
    // The date that the bot was created.
    string createdDate = 5;
    // A description of the bot.
    string description = 6;
    // If <code>status</code> is <code>FAILED</code>, Amazon Lex explains why it failed to build the bot.
    string failureReason = 7;
    // The maximum time in seconds that Amazon Lex retains the data gathered in a conversation. For more information, see <a>PutBot</a>.
    integer idleSessionTTLInSeconds = 8;
    // An array of <code>intent</code> objects. For more information, see <a>PutBot</a>.
    array intents = 9;
    // The date that the bot was updated. When you create a resource, the creation date and last updated date are the same.
    string lastUpdatedDate = 10;
    //  The target locale for the bot.
    Locale locale = 11;
    // The name of the bot.
    string name = 12;
    // The status of the bot. If the bot is ready to run, the status is <code>READY</code>. If there was a problem with building the bot, the status is <code>FAILED</code> and the <code>failureReason</code> explains why the bot did not build. If the bot was saved but not built, the status is <code>NOT BUILT</code>.
    Status status = 13;
    // The version of the bot. For a new bot, the version is always <code>$LATEST</code>.
    string version = 14;
    // The Amazon Polly voice ID that Amazon Lex uses for voice interaction with the user. For more information, see <a>PutBot</a>.
    string voiceId = 15;
}

message GetBotVersionsRequest {
}

message GetBotVersionsResponse {
    // An array of <code>BotMetadata</code> objects, one for each numbered version of the bot plus one for the <code>$LATEST</code> version.
    array bots = 1;
    // A pagination token for fetching the next page of bot versions. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of versions, specify the pagination token in the next request.
    string nextToken = 2;
}

message GetBotsRequest {
}

message GetBotsResponse {
    // An array of <code>botMetadata</code> objects, with one entry for each bot.
    array bots = 1;
    // If the response is truncated, it includes a pagination token that you can specify in your next request to fetch the next page of bots.
    string nextToken = 2;
}

message GetBuiltinIntentRequest {
}

message GetBuiltinIntentResponse {
    // The unique identifier for a built-in intent.
    string signature = 1;
    // An array of <code>BuiltinIntentSlot</code> objects, one entry for each slot type in the intent.
    array slots = 2;
    // A list of locales that the intent supports.
    array supportedLocales = 3;
}

message GetBuiltinIntentsRequest {
}

message GetBuiltinIntentsResponse {
    // An array of <code>builtinIntentMetadata</code> objects, one for each intent in the response.
    array intents = 1;
    // A pagination token that fetches the next page of intents. If the response to this API call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of intents, specify the pagination token in the next request.
    string nextToken = 2;
}

message GetBuiltinSlotTypesRequest {
}

message GetBuiltinSlotTypesResponse {
    // If the response is truncated, the response includes a pagination token that you can use in your next request to fetch the next page of slot types.
    string nextToken = 1;
    // An array of <code>BuiltInSlotTypeMetadata</code> objects, one entry for each slot type returned.
    array slotTypes = 2;
}

message GetExportRequest {
}

message GetExportResponse {
    // <p>The status of the export. </p> <ul> <li> <p> <code>IN_PROGRESS</code> - The export is in progress.</p> </li> <li> <p> <code>READY</code> - The export is complete.</p> </li> <li> <p> <code>FAILED</code> - The export could not be completed.</p> </li> </ul>
    ExportStatus exportStatus = 1;
    // The format of the exported data.
    ExportType exportType = 2;
    // If <code>status</code> is <code>FAILED</code>, Amazon Lex provides the reason that it failed to export the resource.
    string failureReason = 3;
    // The name of the bot being exported.
    string name = 4;
    // The type of the exported resource.
    ResourceType resourceType = 5;
    // An S3 pre-signed URL that provides the location of the exported resource. The exported resource is a ZIP archive that contains the exported resource in JSON format. The structure of the archive may change. Your code should not rely on the archive structure.
    string url = 6;
    // The version of the bot being exported.
    string version = 7;
}

message GetIntentRequest {
}

message GetIntentResponse {
    // Checksum of the intent.
    string checksum = 1;
    // After the Lambda function specified in the <code>fulfillmentActivity</code> element fulfills the intent, Amazon Lex conveys this statement to the user.
    Statement conclusionStatement = 2;
    // If defined in the bot, Amazon Lex uses prompt to confirm the intent before fulfilling the user's request. For more information, see <a>PutIntent</a>.
    Prompt confirmationPrompt = 3;
    // The date that the intent was created.
    string createdDate = 4;
    // A description of the intent.
    string description = 5;
    // If defined in the bot, Amazon Amazon Lex invokes this Lambda function for each user input. For more information, see <a>PutIntent</a>.
    CodeHook dialogCodeHook = 6;
    // If defined in the bot, Amazon Lex uses this prompt to solicit additional user activity after the intent is fulfilled. For more information, see <a>PutIntent</a>.
    FollowUpPrompt followUpPrompt = 7;
    // Describes how the intent is fulfilled. For more information, see <a>PutIntent</a>.
    FulfillmentActivity fulfillmentActivity = 8;
    // The date that the intent was updated. When you create a resource, the creation date and the last updated date are the same.
    string lastUpdatedDate = 9;
    // The name of the intent.
    string name = 10;
    // A unique identifier for a built-in intent.
    string parentIntentSignature = 11;
    // If the user answers "no" to the question defined in <code>confirmationPrompt</code>, Amazon Lex responds with this statement to acknowledge that the intent was canceled.
    Statement rejectionStatement = 12;
    // An array of sample utterances configured for the intent.
    array sampleUtterances = 13;
    // An array of intent slots configured for the intent.
    array slots = 14;
    // The version of the intent.
    string version = 15;
}

message GetIntentVersionsRequest {
}

message GetIntentVersionsResponse {
    // An array of <code>IntentMetadata</code> objects, one for each numbered version of the intent plus one for the <code>$LATEST</code> version.
    array intents = 1;
    // A pagination token for fetching the next page of intent versions. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of versions, specify the pagination token in the next request.
    string nextToken = 2;
}

message GetIntentsRequest {
}

message GetIntentsResponse {
    // An array of <code>Intent</code> objects. For more information, see <a>PutBot</a>.
    array intents = 1;
    // If the response is truncated, the response includes a pagination token that you can specify in your next request to fetch the next page of intents.
    string nextToken = 2;
}

message GetSlotTypeRequest {
}

message GetSlotTypeResponse {
    // Checksum of the <code>$LATEST</code> version of the slot type.
    string checksum = 1;
    // The date that the slot type was created.
    string createdDate = 2;
    // A description of the slot type.
    string description = 3;
    // A list of <code>EnumerationValue</code> objects that defines the values that the slot type can take.
    array enumerationValues = 4;
    // The date that the slot type was updated. When you create a resource, the creation date and last update date are the same.
    string lastUpdatedDate = 5;
    // The name of the slot type.
    string name = 6;
    // The strategy that Amazon Lex uses to determine the value of the slot. For more information, see <a>PutSlotType</a>.
    SlotValueSelectionStrategy valueSelectionStrategy = 7;
    // The version of the slot type.
    string version = 8;
}

message GetSlotTypeVersionsRequest {
}

message GetSlotTypeVersionsResponse {
    // A pagination token for fetching the next page of slot type versions. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of versions, specify the pagination token in the next request.
    string nextToken = 1;
    // An array of <code>SlotTypeMetadata</code> objects, one for each numbered version of the slot type plus one for the <code>$LATEST</code> version.
    array slotTypes = 2;
}

message GetSlotTypesRequest {
}

message GetSlotTypesResponse {
    // If the response is truncated, it includes a pagination token that you can specify in your next request to fetch the next page of slot types.
    string nextToken = 1;
    // An array of objects, one for each slot type, that provides information such as the name of the slot type, the version, and a description.
    array slotTypes = 2;
}

message GetUtterancesViewRequest {
}

message GetUtterancesViewResponse {
    // The name of the bot for which utterance information was returned.
    string botName = 1;
    // An array of <a>UtteranceList</a> objects, each containing a list of <a>UtteranceData</a> objects describing the utterances that were processed by your bot. The response contains a maximum of 100 <code>UtteranceData</code> objects for each version.
    array utterances = 2;
}

message Intent {
    // The name of the intent.
    string intentName = 1;
    // The version of the intent.
    string intentVersion = 2;
}

repeated Intent IntentList = 1

message IntentMetadata {
    // The date that the intent was created.
    string createdDate = 1;
    // A description of the intent.
    string description = 2;
    // The date that the intent was updated. When you create an intent, the creation date and last updated date are the same.
    string lastUpdatedDate = 3;
    // The name of the intent.
    string name = 4;
    // The version of the intent.
    string version = 5;
}

repeated IntentMetadata IntentMetadataList = 1



repeated string IntentUtteranceList = 1

message InternalFailureException {
    string message = 1;
}

message LimitExceededException {
    string message = 1;
}

repeated UtteranceData ListOfUtterance = 1

repeated UtteranceList ListsOfUtterances = 1

enum Locale {
    ENUS = 0;
}

repeated Locale LocaleList = 1



message Message {
    // The text of the message.
    string content = 1;
    // The content type of the message string.
    ContentType contentType = 2;
}

repeated Message MessageList = 1







message NotFoundException {
    string message = 1;
}

message PreconditionFailedException {
    string message = 1;
}

enum ProcessBehavior {
    SAVE = 0;
    BUILD = 1;
}

message Prompt {
    // The number of times to prompt the user for information.
    integer maxAttempts = 1;
    // An array of objects, each of which provides a message string and its type. You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
    array messages = 2;
    // A response card. Amazon Lex uses this prompt at runtime, in the <code>PostText</code> API response. It substitutes session attributes and slot values for placeholders in the response card. For more information, see <a>ex-resp-card</a>.
    string responseCard = 3;
}

message PutBotAliasRequest {
    // The version of the bot.
    string botVersion = 1;
    // <p>Identifies a specific revision of the <code>$LATEST</code> version.</p> <p>When you create a new bot alias, leave the <code>checksum</code> field blank. If you specify a checksum you get a <code>BadRequestException</code> exception.</p> <p>When you want to update a bot alias, set the <code>checksum</code> field to the checksum of the most recent revision of the <code>$LATEST</code> version. If you don't specify the <code> checksum</code> field, or if the checksum does not match the <code>$LATEST</code> version, you get a <code>PreconditionFailedException</code> exception.</p>
    string checksum = 2;
    // A description of the alias.
    string description = 3;
}

message PutBotAliasResponse {
    // The name of the bot that the alias points to.
    string botName = 1;
    // The version of the bot that the alias points to.
    string botVersion = 2;
    // The checksum for the current version of the alias.
    string checksum = 3;
    // The date that the bot alias was created.
    string createdDate = 4;
    // A description of the alias.
    string description = 5;
    // The date that the bot alias was updated. When you create a resource, the creation date and the last updated date are the same.
    string lastUpdatedDate = 6;
    // The name of the alias.
    string name = 7;
}

message PutBotRequest {
    // <p>When Amazon Lex can't understand the user's input in context, it tries to elicit the information a few times. After that, Amazon Lex sends the message defined in <code>abortStatement</code> to the user, and then aborts the conversation. To set the number of retries, use the <code>valueElicitationPrompt</code> field for the slot type. </p> <p>For example, in a pizza ordering bot, Amazon Lex might ask a user "What type of crust would you like?" If the user's response is not one of the expected responses (for example, "thin crust, "deep dish," etc.), Amazon Lex tries to elicit a correct response a few more times. </p> <p>For example, in a pizza ordering application, <code>OrderPizza</code> might be one of the intents. This intent might require the <code>CrustType</code> slot. You specify the <code>valueElicitationPrompt</code> field when you create the <code>CrustType</code> slot.</p>
    Statement abortStatement = 1;
    // <p>Identifies a specific revision of the <code>$LATEST</code> version.</p> <p>When you create a new bot, leave the <code>checksum</code> field blank. If you specify a checksum you get a <code>BadRequestException</code> exception.</p> <p>When you want to update a bot, set the <code>checksum</code> field to the checksum of the most recent revision of the <code>$LATEST</code> version. If you don't specify the <code> checksum</code> field, or if the checksum does not match the <code>$LATEST</code> version, you get a <code>PreconditionFailedException</code> exception.</p>
    string checksum = 2;
    // <p>For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children's Online Privacy Protection Act (COPPA) by specifying <code>true</code> or <code>false</code> in the <code>childDirected</code> field. By specifying <code>true</code> in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is</b> related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By specifying <code>false</code> in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is not</b> related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. You may not specify a default value for the <code>childDirected</code> field that does not accurately reflect whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA.</p> <p>If your use of Amazon Lex relates to a website, program, or other application that is directed in whole or in part, to children under age 13, you must obtain any required verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in connection with websites, programs, or other applications that are directed or targeted, in whole or in part, to children under age 13, see the <a href="https://aws.amazon.com/lex/faqs#data-security">Amazon Lex FAQ.</a> </p>
    boolean childDirected = 3;
    // <p>When Amazon Lex doesn't understand the user's intent, it uses this message to get clarification. To specify how many times Amazon Lex should repeate the clarification prompt, use the <code>maxAttempts</code> field. If Amazon Lex still doesn't understand, it sends the message in the <code>abortStatement</code> field. </p> <p>When you create a clarification prompt, make sure that it suggests the correct response from the user. for example, for a bot that orders pizza and drinks, you might create this clarification prompt: "What would you like to do? You can say 'Order a pizza' or 'Order a drink.'"</p>
    Prompt clarificationPrompt = 4;
    // A description of the bot.
    string description = 5;
    // <p>The maximum time in seconds that Amazon Lex retains the data gathered in a conversation.</p> <p>A user interaction session remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout.</p> <p>For example, suppose that a user chooses the OrderPizza intent, but gets sidetracked halfway through placing an order. If the user doesn't complete the order within the specified time, Amazon Lex discards the slot information that it gathered, and the user must start over.</p> <p>If you don't include the <code>idleSessionTTLInSeconds</code> element in a <code>PutBot</code> operation request, Amazon Lex uses the default value. This is also true if the request replaces an existing bot.</p> <p>The default is 300 seconds (5 minutes).</p>
    integer idleSessionTTLInSeconds = 6;
    // An array of <code>Intent</code> objects. Each intent represents a command that a user can express. For example, a pizza ordering bot might support an OrderPizza intent. For more information, see <a>how-it-works</a>.
    array intents = 7;
    // <p> Specifies the target locale for the bot. Any intent used in the bot must be compatible with the locale of the bot. </p> <p>The default is <code>en-US</code>.</p>
    Locale locale = 8;
    // <p>If you set the <code>processBehavior</code> element to <code>Build</code>, Amazon Lex builds the bot so that it can be run. If you set the element to <code>Save</code>Amazon Lex saves the bot, but doesn't build it. </p> <p>If you don't specify this value, the default value is <code>Save</code>.</p>
    ProcessBehavior processBehavior = 9;
    // The Amazon Polly voice ID that you want Amazon Lex to use for voice interactions with the user. The locale configured for the voice must match the locale of the bot. For more information, see <a href="http://docs.aws.amazon.com/polly/latest/dg/voicelist.html">Available Voices</a> in the <i>Amazon Polly Developer Guide</i>.
    string voiceId = 10;
}

message PutBotResponse {
    // The message that Amazon Lex uses to abort a conversation. For more information, see <a>PutBot</a>.
    Statement abortStatement = 1;
    // Checksum of the bot that you created.
    string checksum = 2;
    // <p>For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children's Online Privacy Protection Act (COPPA) by specifying <code>true</code> or <code>false</code> in the <code>childDirected</code> field. By specifying <code>true</code> in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is</b> related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By specifying <code>false</code> in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is not</b> related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. You may not specify a default value for the <code>childDirected</code> field that does not accurately reflect whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA.</p> <p>If your use of Amazon Lex relates to a website, program, or other application that is directed in whole or in part, to children under age 13, you must obtain any required verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in connection with websites, programs, or other applications that are directed or targeted, in whole or in part, to children under age 13, see the <a href="https://aws.amazon.com/lex/faqs#data-security">Amazon Lex FAQ.</a> </p>
    boolean childDirected = 3;
    //  The prompts that Amazon Lex uses when it doesn't understand the user's intent. For more information, see <a>PutBot</a>.
    Prompt clarificationPrompt = 4;
    // The date that the bot was created.
    string createdDate = 5;
    // A description of the bot.
    string description = 6;
    // If <code>status</code> is <code>FAILED</code>, Amazon Lex provides the reason that it failed to build the bot.
    string failureReason = 7;
    // The maximum length of time that Amazon Lex retains the data gathered in a conversation. For more information, see <a>PutBot</a>.
    integer idleSessionTTLInSeconds = 8;
    // An array of <code>Intent</code> objects. For more information, see <a>PutBot</a>.
    array intents = 9;
    // The date that the bot was updated. When you create a resource, the creation date and last updated date are the same.
    string lastUpdatedDate = 10;
    //  The target locale for the bot.
    Locale locale = 11;
    // The name of the bot.
    string name = 12;
    // <p> When you send a request to create a bot with <code>processBehavior</code> set to <code>BUILD</code>, Amazon Lex sets the <code>status</code> response element to <code>BUILDING</code>. After Amazon Lex builds the bot, it sets <code>status</code> to <code>READY</code>. If Amazon Lex can't build the bot, Amazon Lex sets <code>status</code> to <code>FAILED</code>. Amazon Lex returns the reason for the failure in the <code>failureReason</code> response element. </p> <p>When you set <code>processBehavior</code>to <code>SAVE</code>, Amazon Lex sets the status code to <code>NOT BUILT</code>.</p>
    Status status = 13;
    // The version of the bot. For a new bot, the version is always <code>$LATEST</code>.
    string version = 14;
    // The Amazon Polly voice ID that Amazon Lex uses for voice interaction with the user. For more information, see <a>PutBot</a>.
    string voiceId = 15;
}

message PutIntentRequest {
    // <p>Identifies a specific revision of the <code>$LATEST</code> version.</p> <p>When you create a new intent, leave the <code>checksum</code> field blank. If you specify a checksum you get a <code>BadRequestException</code> exception.</p> <p>When you want to update a intent, set the <code>checksum</code> field to the checksum of the most recent revision of the <code>$LATEST</code> version. If you don't specify the <code> checksum</code> field, or if the checksum does not match the <code>$LATEST</code> version, you get a <code>PreconditionFailedException</code> exception.</p>
    string checksum = 1;
    // <p> The statement that you want Amazon Lex to convey to the user after the intent is successfully fulfilled by the Lambda function. </p> <p>This element is relevant only if you provide a Lambda function in the <code>fulfillmentActivity</code>. If you return the intent to the client application, you can't specify this element.</p> <note> <p>The <code>followUpPrompt</code> and <code>conclusionStatement</code> are mutually exclusive. You can specify only one.</p> </note>
    Statement conclusionStatement = 2;
    // <p>Prompts the user to confirm the intent. This question should have a yes or no answer.</p> <p>Amazon Lex uses this prompt to ensure that the user acknowledges that the intent is ready for fulfillment. For example, with the <code>OrderPizza</code> intent, you might want to confirm that the order is correct before placing it. For other intents, such as intents that simply respond to user questions, you might not need to ask the user for confirmation before providing the information. </p> <note> <p>You you must provide both the <code>rejectionStatement</code> and the <code>confirmationPrompt</code>, or neither.</p> </note>
    Prompt confirmationPrompt = 3;
    // A description of the intent.
    string description = 4;
    // <p> Specifies a Lambda function to invoke for each user input. You can invoke this Lambda function to personalize user interaction. </p> <p>For example, suppose your bot determines that the user is John. Your Lambda function might retrieve John's information from a backend database and prepopulate some of the values. For example, if you find that John is gluten intolerant, you might set the corresponding intent slot, <code>GlutenIntolerant</code>, to true. You might find John's phone number and set the corresponding session attribute. </p>
    CodeHook dialogCodeHook = 5;
    // <p>Amazon Lex uses this prompt to solicit additional activity after fulfilling an intent. For example, after the <code>OrderPizza</code> intent is fulfilled, you might prompt the user to order a drink.</p> <p>The action that Amazon Lex takes depends on the user's response, as follows:</p> <ul> <li> <p>If the user says "Yes" it responds with the clarification prompt that is configured for the bot.</p> </li> <li> <p>if the user says "Yes" and continues with an utterance that triggers an intent it starts a conversation for the intent.</p> </li> <li> <p>If the user says "No" it responds with the rejection statement configured for the the follow-up prompt.</p> </li> <li> <p>If it doesn't recognize the utterance it repeats the follow-up prompt again.</p> </li> </ul> <p>The <code>followUpPrompt</code> field and the <code>conclusionStatement</code> field are mutually exclusive. You can specify only one. </p>
    FollowUpPrompt followUpPrompt = 6;
    // <p>Required. Describes how the intent is fulfilled. For example, after a user provides all of the information for a pizza order, <code>fulfillmentActivity</code> defines how the bot places an order with a local pizza store. </p> <p> You might configure Amazon Lex to return all of the intent information to the client application, or direct it to invoke a Lambda function that can process the intent (for example, place an order with a pizzeria). </p>
    FulfillmentActivity fulfillmentActivity = 7;
    // A unique identifier for the built-in intent to base this intent on. To find the signature for an intent, see <a href="https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents">Standard Built-in Intents</a> in the <i>Alexa Skills Kit</i>.
    string parentIntentSignature = 8;
    // <p>When the user answers "no" to the question defined in <code>confirmationPrompt</code>, Amazon Lex responds with this statement to acknowledge that the intent was canceled. </p> <note> <p>You must provide both the <code>rejectionStatement</code> and the <code>confirmationPrompt</code>, or neither.</p> </note>
    Statement rejectionStatement = 9;
    // <p>An array of utterances (strings) that a user might say to signal the intent. For example, "I want {PizzaSize} pizza", "Order {Quantity} {PizzaSize} pizzas". </p> <p>In each utterance, a slot name is enclosed in curly braces. </p>
    array sampleUtterances = 10;
    // An array of intent slots. At runtime, Amazon Lex elicits required slot values from the user using prompts defined in the slots. For more information, see <a>how-it-works</a>.
    array slots = 11;
}

message PutIntentResponse {
    // Checksum of the <code>$LATEST</code>version of the intent created or updated.
    string checksum = 1;
    // After the Lambda function specified in the<code>fulfillmentActivity</code>intent fulfills the intent, Amazon Lex conveys this statement to the user.
    Statement conclusionStatement = 2;
    // If defined in the intent, Amazon Lex prompts the user to confirm the intent before fulfilling it.
    Prompt confirmationPrompt = 3;
    // The date that the intent was created.
    string createdDate = 4;
    // A description of the intent.
    string description = 5;
    // If defined in the intent, Amazon Lex invokes this Lambda function for each user input.
    CodeHook dialogCodeHook = 6;
    // If defined in the intent, Amazon Lex uses this prompt to solicit additional user activity after the intent is fulfilled.
    FollowUpPrompt followUpPrompt = 7;
    // If defined in the intent, Amazon Lex invokes this Lambda function to fulfill the intent after the user provides all of the information required by the intent.
    FulfillmentActivity fulfillmentActivity = 8;
    // The date that the intent was updated. When you create a resource, the creation date and last update dates are the same.
    string lastUpdatedDate = 9;
    // The name of the intent.
    string name = 10;
    // A unique identifier for the built-in intent that this intent is based on.
    string parentIntentSignature = 11;
    // If the user answers "no" to the question defined in <code>confirmationPrompt</code> Amazon Lex responds with this statement to acknowledge that the intent was canceled.
    Statement rejectionStatement = 12;
    //  An array of sample utterances that are configured for the intent.
    array sampleUtterances = 13;
    // An array of intent slots that are configured for the intent.
    array slots = 14;
    // The version of the intent. For a new intent, the version is always <code>$LATEST</code>.
    string version = 15;
}

message PutSlotTypeRequest {
    // <p>Identifies a specific revision of the <code>$LATEST</code> version.</p> <p>When you create a new slot type, leave the <code>checksum</code> field blank. If you specify a checksum you get a <code>BadRequestException</code> exception.</p> <p>When you want to update a slot type, set the <code>checksum</code> field to the checksum of the most recent revision of the <code>$LATEST</code> version. If you don't specify the <code> checksum</code> field, or if the checksum does not match the <code>$LATEST</code> version, you get a <code>PreconditionFailedException</code> exception.</p>
    string checksum = 1;
    // A description of the slot type.
    string description = 2;
    // <p>A list of <code>EnumerationValue</code> objects that defines the values that the slot type can take. Each value can have a list of <code>synonyms</code>, which are additional values that help train the machine learning model about the values that it resolves for a slot. </p> <p>When Amazon Lex resolves a slot value, it generates a resolution list that contains up to five possible values for the slot. If you are using a Lambda function, this resolution list is passed to the function. If you are not using a Lambda function you can choose to return the value that the user entered or the first value in the resolution list as the slot value. The <code>valueSelectionStrategy</code> field indicates the option to use. </p>
    array enumerationValues = 3;
    // <p>Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The field can be set to one of the following values:</p> <ul> <li> <p> <code>ORIGINAL_VALUE</code> - Returns the value entered by the user, if the user value is similar to the slot value.</p> </li> <li> <p> <code>TOP_RESOLUTION</code> - If there is a resolution list for the slot, return the first value in the resolution list as the slot type value. If there is no resolution list, null is returned.</p> </li> </ul> <p>If you don't specify the <code>valueSelectionStrategy</code>, the default is <code>ORIGINAL_VALUE</code>.</p>
    SlotValueSelectionStrategy valueSelectionStrategy = 4;
}

message PutSlotTypeResponse {
    // Checksum of the <code>$LATEST</code> version of the slot type.
    string checksum = 1;
    // The date that the slot type was created.
    string createdDate = 2;
    // A description of the slot type.
    string description = 3;
    // A list of <code>EnumerationValue</code> objects that defines the values that the slot type can take.
    array enumerationValues = 4;
    // The date that the slot type was updated. When you create a slot type, the creation date and last update date are the same.
    string lastUpdatedDate = 5;
    // The name of the slot type.
    string name = 6;
    // The slot resolution strategy that Amazon Lex uses to determine the value of the slot. For more information, see <a>PutSlotType</a>.
    SlotValueSelectionStrategy valueSelectionStrategy = 7;
    // The version of the slot type. For a new slot type, the version is always <code>$LATEST</code>.
    string version = 8;
}

enum ReferenceType {
    INTENT = 0;
    BOT = 1;
    BOTALIAS = 2;
    BOTCHANNEL = 3;
}

message ResourceInUseException {
    ResourceReference exampleReference = 1;
    ReferenceType referenceType = 2;
}

message ResourceReference {
    // The name of the resource that is using the resource that you are trying to delete.
    string name = 1;
    // The version of the resource that is using the resource that you are trying to delete.
    string version = 2;
}

enum ResourceType {
    BOT = 0;
}

message Slot {
    // A description of the slot.
    string description = 1;
    // The name of the slot.
    string name = 2;
    // <p> Directs Lex the order in which to elicit this slot value from the user. For example, if the intent has two slots with priorities 1 and 2, AWS Lex first elicits a value for the slot with priority 1.</p> <p>If multiple slots share the same priority, the order in which Lex elicits values is arbitrary.</p>
    integer priority = 3;
    //  A set of possible responses for the slot type used by text-based clients. A user chooses an option from the response card, instead of using text to reply.
    string responseCard = 4;
    //  If you know a specific pattern with which users might respond to an Amazon Lex request for a slot value, you can provide those utterances to improve accuracy. This is optional. In most cases, Amazon Lex is capable of understanding user utterances.
    array sampleUtterances = 5;
    // Specifies whether the slot is required or optional.
    SlotConstraint slotConstraint = 6;
    // The type of the slot, either a custom slot type that you defined or one of the built-in slot types.
    string slotType = 7;
    // The version of the slot type.
    string slotTypeVersion = 8;
    // The prompt that Amazon Lex uses to elicit the slot value from the user.
    Prompt valueElicitationPrompt = 9;
}

enum SlotConstraint {
    REQUIRED = 0;
    OPTIONAL = 1;
}

repeated Slot SlotList = 1



message SlotTypeMetadata {
    // The date that the slot type was created.
    string createdDate = 1;
    // A description of the slot type.
    string description = 2;
    // The date that the slot type was updated. When you create a resource, the creation date and last updated date are the same.
    string lastUpdatedDate = 3;
    // The name of the slot type.
    string name = 4;
    // The version of the slot type.
    string version = 5;
}

repeated SlotTypeMetadata SlotTypeMetadataList = 1



repeated string SlotUtteranceList = 1

enum SlotValueSelectionStrategy {
    ORIGINAL_VALUE = 0;
    TOP_RESOLUTION = 1;
}

message Statement {
    // A collection of message objects.
    array messages = 1;
    //  At runtime, if the client is using the <a href="http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html">PostText</a> API, Amazon Lex includes the response card in the response. It substitutes all of the session attributes and slot values for placeholders in the response card.
    string responseCard = 2;
}

enum Statu {
    BUILDING = 0;
    READY = 1;
    FAILED = 2;
    NOT_BUILT = 3;
}

enum StatusType {
    DETECTED = 0;
    MISSED = 1;
}



repeated string SynonymList = 1







message UtteranceData {
    // The number of times that the utterance was processed.
    integer count = 1;
    // The total number of individuals that used the utterance.
    integer distinctUsers = 2;
    // The date that the utterance was first recorded.
    string firstUtteredDate = 3;
    // The date that the utterance was last recorded.
    string lastUtteredDate = 4;
    // The text that was entered by the user or the text representation of an audio clip.
    string utteranceString = 5;
}

message UtteranceList {
    // The version of the bot that processed the list.
    string botVersion = 1;
    // One or more <a>UtteranceData</a> objects that contain information about the utterances that have been made to a bot. The maximum number of object is 100.
    array utterances = 2;
}

service AmazonLexModelBuildingServiceService {
    // <p>Returns bot information as follows: </p> <ul> <li> <p>If you provide the <code>nameContains</code> field, the response includes information for the <code>$LATEST</code> version of all bots whose name contains the specified string.</p> </li> <li> <p>If you don't specify the <code>nameContains</code> field, the operation returns information about the <code>$LATEST</code> version of all of your bots.</p> </li> </ul> <p>This operation requires permission for the <code>lex:GetBots</code> action.</p>
    rpc GetBots(GetBotsRequest) returns (GetBotsResponse) {
      option (google.api.http) = {
        get: "//bots/"
        body: "body"
      };
    }
    // <p>Returns a list of aliases for a specified Amazon Lex bot.</p> <p>This operation requires permissions for the <code>lex:GetBotAliases</code> action.</p>
    rpc GetBotsBotNameAliases(GetBotsBotNameAliasesRequest) returns (GetBotAliasesResponse) {
      option (google.api.http) = {
        get: "//bots/{botName}/aliases/"
        body: "body"
      };
    }
    // <p> Returns a list of all of the channels associated with the specified bot. </p> <p>The <code>GetBotChannelAssociations</code> operation requires permissions for the <code>lex:GetBotChannelAssociations</code> action.</p>
    rpc GetBotsBotNameAliasesAliasNameChannels(GetBotsBotNameAliasesAliasNameChannelsRequest) returns (GetBotChannelAssociationsResponse) {
      option (google.api.http) = {
        get: "//bots/{botName}/aliases/{aliasName}/channels/"
        body: "body"
      };
    }
    // <p>Returns information about the association between an Amazon Lex bot and a messaging platform.</p> <p>This operation requires permissions for the <code>lex:GetBotChannelAssociation</code> action.</p>
    rpc GetBotsBotNameAliasesAliasNameChannelsName(GetBotsBotNameAliasesAliasNameChannelsNameRequest) returns (GetBotChannelAssociationResponse) {
      option (google.api.http) = {
        get: "//bots/{botName}/aliases/{aliasName}/channels/{name}"
        body: "body"
      };
    }
    // <p>Creates an alias for the specified version of the bot or replaces an alias for the specified bot. To change the version of the bot that the alias points to, replace the alias. For more information about aliases, see <a>versioning-aliases</a>.</p> <p>This operation requires permissions for the <code>lex:PutBotAlias</code> action. </p>
    rpc PutBotsBotNameAliasesName(PutBotsBotNameAliasesNameRequest) returns (PutBotAliasResponse) {
      option (google.api.http) = {
        put: "//bots/{botName}/aliases/{name}"
        body: "body"
      };
    }
    // <p>Deletes stored utterances.</p> <p>Amazon Lex stores the utterances that users send to your bot unless the <code>childDirected</code> field in the bot is set to <code>true</code>. Utterances are stored for 15 days for use with the <a>GetUtterancesView</a> operation, and then stored indefinately for use in improving the ability of your bot to respond to user input.</p> <p>Use the <code>DeleteStoredUtterances</code> operation to manually delete stored utterances for a specific user.</p> <p>This operation requires permissions for the <code>lex:DeleteUtterances</code> action.</p>
    rpc DeleteBotsBotNameUtterancesUserId(DeleteBotsBotNameUtterancesUserIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//bots/{botName}/utterances/{userId}"
        body: "body"
      };
    }
    // <p>Use the <code>GetUtterancesView</code> operation to get information about the utterances that your users have made to your bot. You can use this list to tune the utterances that your bot responds to.</p> <p>For example, say that you have created a bot to order flowers. After your users have used your bot for a while, use the <code>GetUtterancesView</code> operation to see the requests that they have made and whether they have been successful. You might find that the utterance "I want flowers" is not being recognized. You could add this utterance to the <code>OrderFlowers</code> intent so that your bot recognizes that utterance.</p> <p>After you publish a new version of a bot, you can get information about the old version and the new so that you can compare the performance across the two versions. </p> <p>Data is available for the last 15 days. You can request information for up to 5 versions in each request. The response contains information about a maximum of 100 utterances for each version.</p> <p>If the bot's <code>childDirected</code> field is set to <code>true</code>, utterances for the bot are not stored and cannot be retrieved with the <code>GetUtterancesView</code> operation. For more information, see <a>PutBot</a>.</p> <p>This operation requires permissions for the <code>lex:GetUtterancesView</code> action.</p>
    rpc GetBotsBotnameUtterances(GetBotsBotnameUtterancesRequest) returns (GetUtterancesViewResponse) {
      option (google.api.http) = {
        get: "//bots/{botname}/utterances?view=aggregation"
        body: "body"
      };
    }
    // <p>Deletes all versions of the bot, including the <code>$LATEST</code> version. To delete a specific version of the bot, use the <a>DeleteBotVersion</a> operation.</p> <p>If a bot has an alias, you can't delete it. Instead, the <code>DeleteBot</code> operation returns a <code>ResourceInUseException</code> exception that includes a reference to the alias that refers to the bot. To remove the reference to the bot, delete the alias. If you get the same exception again, delete the referring alias until the <code>DeleteBot</code> operation is successful.</p> <p>This operation requires permissions for the <code>lex:DeleteBot</code> action.</p>
    rpc DeleteBotsName(DeleteBotsNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//bots/{name}"
        body: "body"
      };
    }
    // <p>Creates a new version of the bot based on the <code>$LATEST</code> version. If the <code>$LATEST</code> version of this resource hasn't changed since you created the last version, Amazon Lex doesn't create a new version. It returns the last created version.</p> <note> <p>You can update only the <code>$LATEST</code> version of the bot. You can't update the numbered versions that you create with the <code>CreateBotVersion</code> operation.</p> </note> <p> When you create the first version of a bot, Amazon Lex sets the version to 1. Subsequent versions increment by 1. For more information, see <a>versioning-intro</a>. </p> <p> This operation requires permission for the <code>lex:CreateBotVersion</code> action. </p>
    rpc PostBotsNameVersions(PostBotsNameVersionsRequest) returns (CreateBotVersionResponse) {
      option (google.api.http) = {
        post: "//bots/{name}/versions"
        body: "body"
      };
    }
    // <p>Gets information about all of the versions of a bot.</p> <p>The <code>GetBotVersions</code> operation returns a <code>BotMetadata</code> object for each version of a bot. For example, if a bot has three numbered versions, the <code>GetBotVersions</code> operation returns four <code>BotMetadata</code> objects in the response, one for each numbered version and one for the <code>$LATEST</code> version. </p> <p>The <code>GetBotVersions</code> operation always returns at least one version, the <code>$LATEST</code> version.</p> <p>This operation requires permissions for the <code>lex:GetBotVersions</code> action.</p>
    rpc GetBotsNameVersions(GetBotsNameVersionsRequest) returns (GetBotVersionsResponse) {
      option (google.api.http) = {
        get: "//bots/{name}/versions/"
        body: "body"
      };
    }
    // <p>Creates an Amazon Lex conversational bot or replaces an existing bot. When you create or update a bot you are only required to specify a name. You can use this to add intents later, or to remove intents from an existing bot. When you create a bot with a name only, the bot is created or updated but Amazon Lex returns the <code/> response <code>FAILED</code>. You can build the bot after you add one or more intents. For more information about Amazon Lex bots, see <a>how-it-works</a>. </p> <p>If you specify the name of an existing bot, the fields in the request replace the existing values in the <code>$LATEST</code> version of the bot. Amazon Lex removes any fields that you don't provide values for in the request, except for the <code>idleTTLInSeconds</code> and <code>privacySettings</code> fields, which are set to their default values. If you don't specify values for required fields, Amazon Lex throws an exception.</p> <p>This operation requires permissions for the <code>lex:PutBot</code> action. For more information, see <a>auth-and-access-control</a>.</p>
    rpc PutBotsNameVersions$LATEST(PutBotsNameVersions$LATESTRequest) returns (PutBotResponse) {
      option (google.api.http) = {
        put: "//bots/{name}/versions/$LATEST"
        body: "body"
      };
    }
    // <p>Returns metadata information for a specific bot. You must provide the bot name and the bot version or alias. </p> <p> This operation requires permissions for the <code>lex:GetBot</code> action. </p>
    rpc GetBotsNameVersionsVersionoralias(GetBotsNameVersionsVersionoraliasRequest) returns (GetBotResponse) {
      option (google.api.http) = {
        get: "//bots/{name}/versions/{versionoralias}"
        body: "body"
      };
    }
    // <p>Deletes a specific version of a bot. To delete all versions of a bot, use the <a>DeleteBot</a> operation. </p> <p>This operation requires permissions for the <code>lex:DeleteBotVersion</code> action.</p>
    rpc DeleteBotsNameVersionsVersion(DeleteBotsNameVersionsVersionRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//bots/{name}/versions/{version}"
        body: "body"
      };
    }
    // <p>Gets a list of built-in intents that meet the specified criteria.</p> <p>This operation requires permission for the <code>lex:GetBuiltinIntents</code> action.</p>
    rpc GetBuiltinsIntents(GetBuiltinsIntentsRequest) returns (GetBuiltinIntentsResponse) {
      option (google.api.http) = {
        get: "//builtins/intents/"
        body: "body"
      };
    }
    // <p>Returns information about a built-in intent.</p> <p>This operation requires permission for the <code>lex:GetBuiltinIntent</code> action.</p>
    rpc GetBuiltinsIntentsSignature(GetBuiltinsIntentsSignatureRequest) returns (GetBuiltinIntentResponse) {
      option (google.api.http) = {
        get: "//builtins/intents/{signature}"
        body: "body"
      };
    }
    // <p>Gets a list of built-in slot types that meet the specified criteria.</p> <p>For a list of built-in slot types, see <a href="https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/slot-type-reference">Slot Type Reference</a> in the <i>Alexa Skills Kit</i>.</p> <p>This operation requires permission for the <code>lex:GetBuiltInSlotTypes</code> action.</p>
    rpc GetBuiltinsSlottypes(GetBuiltinsSlottypesRequest) returns (GetBuiltinSlotTypesResponse) {
      option (google.api.http) = {
        get: "//builtins/slottypes/"
        body: "body"
      };
    }
    // Exports the contents of a Amazon Lex resource in a specified format.
    rpc GetExports(GetExportsRequest) returns (GetExportResponse) {
      option (google.api.http) = {
        get: "//exports/"
        body: "body"
      };
    }
    // <p>Returns intent information as follows: </p> <ul> <li> <p>If you specify the <code>nameContains</code> field, returns the <code>$LATEST</code> version of all intents that contain the specified string.</p> </li> <li> <p> If you don't specify the <code>nameContains</code> field, returns information about the <code>$LATEST</code> version of all intents. </p> </li> </ul> <p> The operation requires permission for the <code>lex:GetIntents</code> action. </p>
    rpc GetIntents(GetIntentsRequest) returns (GetIntentsResponse) {
      option (google.api.http) = {
        get: "//intents/"
        body: "body"
      };
    }
    // <p>Deletes all versions of the intent, including the <code>$LATEST</code> version. To delete a specific version of the intent, use the <a>DeleteIntentVersion</a> operation.</p> <p> You can delete a version of an intent only if it is not referenced. To delete an intent that is referred to in one or more bots (see <a>how-it-works</a>), you must remove those references first. </p> <note> <p> If you get the <code>ResourceInUseException</code> exception, it provides an example reference that shows where the intent is referenced. To remove the reference to the intent, either update the bot or delete it. If you get the same exception when you attempt to delete the intent again, repeat until the intent has no references and the call to <code>DeleteIntent</code> is successful. </p> </note> <p> This operation requires permission for the <code>lex:DeleteIntent</code> action. </p>
    rpc DeleteIntentsName(DeleteIntentsNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//intents/{name}"
        body: "body"
      };
    }
    // <p>Creates a new version of an intent based on the <code>$LATEST</code> version of the intent. If the <code>$LATEST</code> version of this intent hasn't changed since you last updated it, Amazon Lex doesn't create a new version. It returns the last version you created.</p> <note> <p>You can update only the <code>$LATEST</code> version of the intent. You can't update the numbered versions that you create with the <code>CreateIntentVersion</code> operation.</p> </note> <p> When you create a version of an intent, Amazon Lex sets the version to 1. Subsequent versions increment by 1. For more information, see <a>versioning-intro</a>. </p> <p>This operation requires permissions to perform the <code>lex:CreateIntentVersion</code> action. </p>
    rpc PostIntentsNameVersions(PostIntentsNameVersionsRequest) returns (CreateIntentVersionResponse) {
      option (google.api.http) = {
        post: "//intents/{name}/versions"
        body: "body"
      };
    }
    // <p>Gets information about all of the versions of an intent.</p> <p>The <code>GetIntentVersions</code> operation returns an <code>IntentMetadata</code> object for each version of an intent. For example, if an intent has three numbered versions, the <code>GetIntentVersions</code> operation returns four <code>IntentMetadata</code> objects in the response, one for each numbered version and one for the <code>$LATEST</code> version. </p> <p>The <code>GetIntentVersions</code> operation always returns at least one version, the <code>$LATEST</code> version.</p> <p>This operation requires permissions for the <code>lex:GetIntentVersions</code> action.</p>
    rpc GetIntentsNameVersions(GetIntentsNameVersionsRequest) returns (GetIntentVersionsResponse) {
      option (google.api.http) = {
        get: "//intents/{name}/versions/"
        body: "body"
      };
    }
    // <p>Creates an intent or replaces an existing intent.</p> <p>To define the interaction between the user and your bot, you use one or more intents. For a pizza ordering bot, for example, you would create an <code>OrderPizza</code> intent. </p> <p>To create an intent or replace an existing intent, you must provide the following:</p> <ul> <li> <p>Intent name. For example, <code>OrderPizza</code>.</p> </li> <li> <p>Sample utterances. For example, "Can I order a pizza, please." and "I want to order a pizza."</p> </li> <li> <p>Information to be gathered. You specify slot types for the information that your bot will request from the user. You can specify standard slot types, such as a date or a time, or custom slot types such as the size and crust of a pizza.</p> </li> <li> <p>How the intent will be fulfilled. You can provide a Lambda function or configure the intent to return the intent information to the client application. If you use a Lambda function, when all of the intent information is available, Amazon Lex invokes your Lambda function. If you configure your intent to return the intent information to the client application. </p> </li> </ul> <p>You can specify other optional information in the request, such as:</p> <ul> <li> <p>A confirmation prompt to ask the user to confirm an intent. For example, "Shall I order your pizza?"</p> </li> <li> <p>A conclusion statement to send to the user after the intent has been fulfilled. For example, "I placed your pizza order."</p> </li> <li> <p>A follow-up prompt that asks the user for additional activity. For example, asking "Do you want to order a drink with your pizza?"</p> </li> </ul> <p>If you specify an existing intent name to update the intent, Amazon Lex replaces the values in the <code>$LATEST</code> version of the slot type with the values in the request. Amazon Lex removes fields that you don't provide in the request. If you don't specify the required fields, Amazon Lex throws an exception.</p> <p>For more information, see <a>how-it-works</a>.</p> <p>This operation requires permissions for the <code>lex:PutIntent</code> action.</p>
    rpc PutIntentsNameVersions$LATEST(PutIntentsNameVersions$LATESTRequest) returns (PutIntentResponse) {
      option (google.api.http) = {
        put: "//intents/{name}/versions/$LATEST"
        body: "body"
      };
    }
    // <p> Returns information about an intent. In addition to the intent name, you must specify the intent version. </p> <p> This operation requires permissions to perform the <code>lex:GetIntent</code> action. </p>
    rpc GetIntentsNameVersionsVersion(GetIntentsNameVersionsVersionRequest) returns (GetIntentResponse) {
      option (google.api.http) = {
        get: "//intents/{name}/versions/{version}"
        body: "body"
      };
    }
    // <p>Returns slot type information as follows: </p> <ul> <li> <p>If you specify the <code>nameContains</code> field, returns the <code>$LATEST</code> version of all slot types that contain the specified string.</p> </li> <li> <p> If you don't specify the <code>nameContains</code> field, returns information about the <code>$LATEST</code> version of all slot types. </p> </li> </ul> <p> The operation requires permission for the <code>lex:GetSlotTypes</code> action. </p>
    rpc GetSlottypes(GetSlottypesRequest) returns (GetSlotTypesResponse) {
      option (google.api.http) = {
        get: "//slottypes/"
        body: "body"
      };
    }
    // <p>Deletes all versions of the slot type, including the <code>$LATEST</code> version. To delete a specific version of the slot type, use the <a>DeleteSlotTypeVersion</a> operation.</p> <p> You can delete a version of a slot type only if it is not referenced. To delete a slot type that is referred to in one or more intents, you must remove those references first. </p> <note> <p> If you get the <code>ResourceInUseException</code> exception, the exception provides an example reference that shows the intent where the slot type is referenced. To remove the reference to the slot type, either update the intent or delete it. If you get the same exception when you attempt to delete the slot type again, repeat until the slot type has no references and the <code>DeleteSlotType</code> call is successful. </p> </note> <p>This operation requires permission for the <code>lex:DeleteSlotType</code> action.</p>
    rpc DeleteSlottypesName(DeleteSlottypesNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//slottypes/{name}"
        body: "body"
      };
    }
    // <p>Deletes a specific version of a slot type. To delete all versions of a slot type, use the <a>DeleteSlotType</a> operation. </p> <p>This operation requires permissions for the <code>lex:DeleteSlotTypeVersion</code> action.</p>
    rpc DeleteSlottypesNameVersionVersion(DeleteSlottypesNameVersionVersionRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//slottypes/{name}/version/{version}"
        body: "body"
      };
    }
    // <p>Creates a new version of a slot type based on the <code>$LATEST</code> version of the specified slot type. If the <code>$LATEST</code> version of this resource has not changed since the last version that you created, Amazon Lex doesn't create a new version. It returns the last version that you created. </p> <note> <p>You can update only the <code>$LATEST</code> version of a slot type. You can't update the numbered versions that you create with the <code>CreateSlotTypeVersion</code> operation.</p> </note> <p>When you create a version of a slot type, Amazon Lex sets the version to 1. Subsequent versions increment by 1. For more information, see <a>versioning-intro</a>. </p> <p>This operation requires permissions for the <code>lex:CreateSlotTypeVersion</code> action.</p>
    rpc PostSlottypesNameVersions(PostSlottypesNameVersionsRequest) returns (CreateSlotTypeVersionResponse) {
      option (google.api.http) = {
        post: "//slottypes/{name}/versions"
        body: "body"
      };
    }
    // <p>Gets information about all versions of a slot type.</p> <p>The <code>GetSlotTypeVersions</code> operation returns a <code>SlotTypeMetadata</code> object for each version of a slot type. For example, if a slot type has three numbered versions, the <code>GetSlotTypeVersions</code> operation returns four <code>SlotTypeMetadata</code> objects in the response, one for each numbered version and one for the <code>$LATEST</code> version. </p> <p>The <code>GetSlotTypeVersions</code> operation always returns at least one version, the <code>$LATEST</code> version.</p> <p>This operation requires permissions for the <code>lex:GetSlotTypeVersions</code> action.</p>
    rpc GetSlottypesNameVersions(GetSlottypesNameVersionsRequest) returns (GetSlotTypeVersionsResponse) {
      option (google.api.http) = {
        get: "//slottypes/{name}/versions/"
        body: "body"
      };
    }
    // <p>Creates a custom slot type or replaces an existing custom slot type.</p> <p>To create a custom slot type, specify a name for the slot type and a set of enumeration values, which are the values that a slot of this type can assume. For more information, see <a>how-it-works</a>.</p> <p>If you specify the name of an existing slot type, the fields in the request replace the existing values in the <code>$LATEST</code> version of the slot type. Amazon Lex removes the fields that you don't provide in the request. If you don't specify required fields, Amazon Lex throws an exception.</p> <p>This operation requires permissions for the <code>lex:PutSlotType</code> action.</p>
    rpc PutSlottypesNameVersions$LATEST(PutSlottypesNameVersions$LATESTRequest) returns (PutSlotTypeResponse) {
      option (google.api.http) = {
        put: "//slottypes/{name}/versions/$LATEST"
        body: "body"
      };
    }
    // <p>Returns information about a specific version of a slot type. In addition to specifying the slot type name, you must specify the slot type version.</p> <p>This operation requires permissions for the <code>lex:GetSlotType</code> action.</p>
    rpc GetSlottypesNameVersionsVersion(GetSlottypesNameVersionsVersionRequest) returns (GetSlotTypeResponse) {
      option (google.api.http) = {
        get: "//slottypes/{name}/versions/{version}"
        body: "body"
      };
    }
}

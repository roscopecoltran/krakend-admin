syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package awsiot;

message PostCacertificateRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RegisterCACertificateRequest body = 10;
}

message PutCacertificateCaCertificateIdRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateCACertificateRequest body = 10;
    string caCertificateId = 11;
}

message GetCacertificatesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListCACertificatesRequest body = 10;
}

message PostCertificateRegisterRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RegisterCertificateRequest body = 10;
}

message GetCertificatesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListCertificatesRequest body = 10;
}

message GetCertificatesByCaCaCertificateIdRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListCertificatesByCARequest body = 10;
    string caCertificateId = 11;
}

message GetCertificatesOutGoingRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListOutgoingCertificatesRequest body = 10;
}

message PutCertificatesCertificateIdRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateCertificateRequest body = 10;
    string certificateId = 11;
}

message GetEndpointRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeEndpointRequest body = 10;
}

message PostKeysAndCertificateRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateKeysAndCertificateRequest body = 10;
}

message PostLoggingOptionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    SetLoggingOptionsRequest body = 10;
}

message GetPoliciesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListPoliciesRequest body = 10;
}

message GetPoliciesPolicyNameRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetPolicyRequest body = 10;
    string policyName = 11;
}

message GetPoliciesPolicyNameVersionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListPolicyVersionsRequest body = 10;
    string policyName = 11;
}

message GetPolicyPrincipalsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListPolicyPrincipalsRequest body = 10;
}

message GetPrincipalPoliciesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListPrincipalPoliciesRequest body = 10;
}

message DeletePrincipalPoliciesPolicyNameRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DetachPrincipalPolicyRequest body = 10;
    string policyName = 11;
}

message GetPrincipalsThingsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListPrincipalThingsRequest body = 10;
}

message GetRegistrationcodeRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetRegistrationCodeRequest body = 10;
}

message GetRulesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListTopicRulesRequest body = 10;
}

message PostRulesRuleNameDisableRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DisableTopicRuleRequest body = 10;
    string ruleName = 11;
}

message PostRulesRuleNameEnableRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    EnableTopicRuleRequest body = 10;
    string ruleName = 11;
}

message GetThingTypesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListThingTypesRequest body = 10;
}

message GetThingTypesThingTypeNameRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeThingTypeRequest body = 10;
    string thingTypeName = 11;
}

message PostThingTypesThingTypeNameDeprecateRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeprecateThingTypeRequest body = 10;
    string thingTypeName = 11;
}

message GetThingsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListThingsRequest body = 10;
}

message GetThingsThingNamePrincipalsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListThingPrincipalsRequest body = 10;
    string thingName = 11;
}

message AcceptCertificateTransferRequest {
}



repeated string ActionList = 1







message AttachPrincipalPolicyRequest {
}

message AttachThingPrincipalRequest {
}

message AttachThingPrincipalResponse {
}

message AttributePayload {
    // <p>A JSON string containing up to three key-value pair in JSON format. For example:</p> <p> <code>{\"attributes\":{\"string1\":\"string2\"}}</code> </p>
    array attributes = 1;
    // <p>Specifies whether the list of attributes provided in the <code>AttributePayload</code> is merged with the attributes stored in the registry, instead of overwriting them.</p> <p>To remove an attribute, call <code>UpdateThing</code> with an empty attribute value.</p> <note> <p>The <code>merge</code> attribute is only valid when calling <code>UpdateThing</code>.</p> </note>
    boolean merge = 2;
}

message Attribute {
    string key = 1;
    string value = 2;
}
repeated Attribute Attributes = 1

enum AutoRegistrationStatu {
    ENABLE = 0;
    DISABLE = 1;
}

message CACertificate {
    // The ARN of the CA certificate.
    string certificateArn = 1;
    // The ID of the CA certificate.
    string certificateId = 2;
    // The date the CA certificate was created.
    string creationDate = 3;
    // <p>The status of the CA certificate.</p> <p>The status value REGISTER_INACTIVE is deprecated and should not be used.</p>
    CACertificateStatus status = 4;
}

message CACertificateDescription {
    // Whether the CA certificate configured for auto registration of device certificates. Valid values are "ENABLE" and "DISABLE"
    AutoRegistrationStatus autoRegistrationStatus = 1;
    // The CA certificate ARN.
    string certificateArn = 2;
    // The CA certificate ID.
    string certificateId = 3;
    // The CA certificate data, in PEM format.
    string certificatePem = 4;
    // The date the CA certificate was created.
    string creationDate = 5;
    // The owner of the CA certificate.
    string ownedBy = 6;
    // The status of a CA certificate.
    CACertificateStatus status = 7;
}

enum CACertificateStatu {
    ACTIVE = 0;
    INACTIVE = 1;
}

repeated CACertificate CACertificates = 1

message CancelCertificateTransferRequest {
}

enum CannedAccessControlList {
    PRIVATE = 0;
    PUBLICREAD = 1;
    PUBLICREADWRITE = 2;
    AWSEXECREAD = 3;
    AUTHENTICATEDREAD = 4;
    BUCKETOWNERREAD = 5;
    BUCKETOWNERFULLCONTROL = 6;
    LOGDELIVERYWRITE = 7;
}

message Certificate {
    // The ARN of the certificate.
    string certificateArn = 1;
    // The ID of the certificate.
    string certificateId = 2;
    // The date and time the certificate was created.
    string creationDate = 3;
    // <p>The status of the certificate.</p> <p>The status value REGISTER_INACTIVE is deprecated and should not be used.</p>
    CertificateStatus status = 4;
}

message CertificateConflictException {
    // The message for the exception.
    string message = 1;
}

message CertificateDescription {
    // The certificate ID of the CA certificate used to sign this certificate.
    string caCertificateId = 1;
    // The ARN of the certificate.
    string certificateArn = 2;
    // The ID of the certificate.
    string certificateId = 3;
    // The certificate data, in PEM format.
    string certificatePem = 4;
    // The date and time the certificate was created.
    string creationDate = 5;
    // The date and time the certificate was last modified.
    string lastModifiedDate = 6;
    // The ID of the AWS account that owns the certificate.
    string ownedBy = 7;
    // The ID of the AWS account of the previous owner of the certificate.
    string previousOwnedBy = 8;
    // The status of the certificate.
    CertificateStatus status = 9;
    // The transfer data.
    TransferData transferData = 10;
}

message CertificateStateException {
    // The message for the exception.
    string message = 1;
}

enum CertificateStatu {
    ACTIVE = 0;
    INACTIVE = 1;
    REVOKED = 2;
    PENDING_TRANSFER = 3;
    REGISTER_INACTIVE = 4;
    PENDING_ACTIVATION = 5;
}

message CertificateValidationException {
    // Additional information about the exception.
    string message = 1;
}

repeated Certificate Certificates = 1



message CloudwatchAlarmAction {
    // The CloudWatch alarm name.
    string alarmName = 1;
    // The IAM role that allows access to the CloudWatch alarm.
    string roleArn = 2;
    // The reason for the alarm change.
    string stateReason = 3;
    // The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA.
    string stateValue = 4;
}

message CloudwatchMetricAction {
    // The CloudWatch metric name.
    string metricName = 1;
    // The CloudWatch metric namespace name.
    string metricNamespace = 2;
    // An optional <a href="http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp">Unix timestamp</a>.
    string metricTimestamp = 3;
    // The <a href="http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit">metric unit</a> supported by CloudWatch.
    string metricUnit = 4;
    // The CloudWatch metric value.
    string metricValue = 5;
    // The IAM role that allows access to the CloudWatch metric.
    string roleArn = 6;
}

message CreateCertificateFromCsrRequest {
    // The certificate signing request (CSR).
    string certificateSigningRequest = 1;
}

message CreateCertificateFromCsrResponse {
    // The Amazon Resource Name (ARN) of the certificate. You can use the ARN as a principal for policy operations.
    string certificateArn = 1;
    // The ID of the certificate. Certificate management operations only take a certificateId.
    string certificateId = 2;
    // The certificate data, in PEM format.
    string certificatePem = 3;
}

message CreateKeysAndCertificateRequest {
}

message CreateKeysAndCertificateResponse {
    // The ARN of the certificate.
    string certificateArn = 1;
    // The ID of the certificate. AWS IoT issues a default subject name for the certificate (for example, AWS IoT Certificate).
    string certificateId = 2;
    // The certificate data, in PEM format.
    string certificatePem = 3;
    // The generated key pair.
    KeyPair keyPair = 4;
}

message CreatePolicyRequest {
    // The JSON document that describes the policy. <b>policyDocument</b> must have a minimum length of 1, with a maximum length of 2048, excluding whitespace.
    string policyDocument = 1;
}

message CreatePolicyResponse {
    // The policy ARN.
    string policyArn = 1;
    // The JSON document that describes the policy.
    string policyDocument = 2;
    // The policy name.
    string policyName = 3;
    // The policy version ID.
    string policyVersionId = 4;
}

message CreatePolicyVersionRequest {
    // The JSON document that describes the policy. Minimum length of 1. Maximum length of 2048, excluding whitespaces
    string policyDocument = 1;
}

message CreatePolicyVersionResponse {
    // Specifies whether the policy version is the default.
    boolean isDefaultVersion = 1;
    // The policy ARN.
    string policyArn = 2;
    // The JSON document that describes the policy.
    string policyDocument = 3;
    // The policy version ID.
    string policyVersionId = 4;
}

message CreateThingRequest {
    // <p>The attribute payload, which consists of up to three name/value pairs in a JSON document. For example:</p> <p> <code>{\"attributes\":{\"string1\":\"string2\"}}</code> </p>
    AttributePayload attributePayload = 1;
    // The name of the thing type associated with the new thing.
    string thingTypeName = 2;
}

message CreateThingResponse {
    // The ARN of the new thing.
    string thingArn = 1;
    // The name of the new thing.
    string thingName = 2;
}

message CreateThingTypeRequest {
    // The ThingTypeProperties for the thing type to create. It contains information about the new thing type including a description, and a list of searchable thing attribute names.
    ThingTypeProperties thingTypeProperties = 1;
}

message CreateThingTypeResponse {
    // The Amazon Resource Name (ARN) of the thing type.
    string thingTypeArn = 1;
    // The name of the thing type.
    string thingTypeName = 2;
}

message CreateTopicRuleRequest {
    // The rule payload.
    TopicRulePayload topicRulePayload = 1;
}

message DeleteCACertificateRequest {
}

message DeleteCACertificateResponse {
}

message DeleteCertificateRequest {
}

message DeleteConflictException {
    // The message for the exception.
    string message = 1;
}

message DeletePolicyRequest {
}

message DeletePolicyVersionRequest {
}

message DeleteRegistrationCodeRequest {
}

message DeleteRegistrationCodeResponse {
}

message DeleteThingRequest {
}

message DeleteThingResponse {
}

message DeleteThingTypeRequest {
}

message DeleteThingTypeResponse {
}

message DeleteTopicRuleRequest {
}

message DeprecateThingTypeRequest {
    // Whether to undeprecate a deprecated thing type. If <b>true</b>, the thing type will not be deprecated anymore and you can associate it with things.
    boolean undoDeprecate = 1;
}

message DeprecateThingTypeResponse {
}

message DescribeCACertificateRequest {
}

message DescribeCACertificateResponse {
    // The CA certificate description.
    CACertificateDescription certificateDescription = 1;
}

message DescribeCertificateRequest {
}

message DescribeCertificateResponse {
    // The description of the certificate.
    CertificateDescription certificateDescription = 1;
}

message DescribeEndpointRequest {
}

message DescribeEndpointResponse {
    // The endpoint. The format of the endpoint is as follows: <i>identifier</i>.iot.<i>region</i>.amazonaws.com.
    string endpointAddress = 1;
}

message DescribeThingRequest {
}

message DescribeThingResponse {
    // The thing attributes.
    array attributes = 1;
    // The default client ID.
    string defaultClientId = 2;
    // The name of the thing.
    string thingName = 3;
    // The thing type name.
    string thingTypeName = 4;
    // <p>The current version of the thing record in the registry.</p> <note> <p>To avoid unintentional changes to the information in the registry, you can pass the version information in the <code>expectedVersion</code> parameter of the <code>UpdateThing</code> and <code>DeleteThing</code> calls.</p> </note>
    string version = 5;
}

message DescribeThingTypeRequest {
}

message DescribeThingTypeResponse {
    // The ThingTypeMetadata contains additional information about the thing type including: creation date and time, a value indicating whether the thing type is deprecated, and a date and time when it was deprecated.
    ThingTypeMetadata thingTypeMetadata = 1;
    // The name of the thing type.
    string thingTypeName = 2;
    // The ThingTypeProperties contains information about the thing type including description, and a list of searchable thing attribute names.
    ThingTypeProperties thingTypeProperties = 3;
}

message DetachPrincipalPolicyRequest {
}

message DetachThingPrincipalRequest {
}

message DetachThingPrincipalResponse {
}

message DisableTopicRuleRequest {
}

message DynamoDBAction {
    // The hash key name.
    string hashKeyField = 1;
    // The hash key type. Valid values are "STRING" or "NUMBER"
    DynamoKeyType hashKeyType = 2;
    // The hash key value.
    string hashKeyValue = 3;
    // The type of operation to be performed. This follows the substitution template, so it can be <code>${operation}</code>, but the substitution must result in one of the following: <code>INSERT</code>, <code>UPDATE</code>, or <code>DELETE</code>.
    string operation = 4;
    // The action payload. This name can be customized.
    string payloadField = 5;
    // The range key name.
    string rangeKeyField = 6;
    // The range key type. Valid values are "STRING" or "NUMBER"
    DynamoKeyType rangeKeyType = 7;
    // The range key value.
    string rangeKeyValue = 8;
    // The ARN of the IAM role that grants access to the DynamoDB table.
    string roleArn = 9;
    // The name of the DynamoDB table.
    string tableName = 10;
}

message DynamoDBv2Action {
    // <p>Specifies the DynamoDB table to which the message data will be written. For example:</p> <p> <code>{ "dynamoDBv2": { "roleArn": "aws:iam:12341251:my-role" "putItem": { "tableName": "my-table" } } }</code> </p> <p>Each attribute in the message payload will be written to a separate column in the DynamoDB database.</p>
    PutItemInput putItem = 1;
    // The ARN of the IAM role that grants access to the DynamoDB table.
    string roleArn = 2;
}

enum DynamoKeyType {
    STRING = 0;
    NUMBER = 1;
}

message ElasticsearchAction {
    // The endpoint of your Elasticsearch domain.
    string endpoint = 1;
    // The unique identifier for the document you are storing.
    string id = 2;
    // The Elasticsearch index where you want to store your data.
    string index = 3;
    // The IAM role ARN that has access to Elasticsearch.
    string roleArn = 4;
    // The type of document you are storing.
    string type = 5;
}

message EnableTopicRuleRequest {
}

message FirehoseAction {
    // The delivery stream name.
    string deliveryStreamName = 1;
    // The IAM role that grants access to the Amazon Kinesis Firehost stream.
    string roleArn = 2;
    // A character separator that will be used to separate records written to the Firehose stream. Valid values are: '\n' (newline), '\t' (tab), '\r\n' (Windows newline), ',' (comma).
    string separator = 3;
}

message GetLoggingOptionsRequest {
}

message GetLoggingOptionsResponse {
    // The logging level.
    LogLevel logLevel = 1;
    // The ARN of the IAM role that grants access.
    string roleArn = 2;
}

message GetPolicyRequest {
}

message GetPolicyResponse {
    // The default policy version ID.
    string defaultVersionId = 1;
    // The policy ARN.
    string policyArn = 2;
    // The JSON document that describes the policy.
    string policyDocument = 3;
    // The policy name.
    string policyName = 4;
}

message GetPolicyVersionRequest {
}

message GetPolicyVersionResponse {
    // Specifies whether the policy version is the default.
    boolean isDefaultVersion = 1;
    // The policy ARN.
    string policyArn = 2;
    // The JSON document that describes the policy.
    string policyDocument = 3;
    // The policy name.
    string policyName = 4;
    // The policy version ID.
    string policyVersionId = 5;
}

message GetRegistrationCodeRequest {
}

message GetRegistrationCodeResponse {
    // The CA certificate registration code.
    string registrationCode = 1;
}

message GetTopicRuleRequest {
}

message GetTopicRuleResponse {
    // The rule.
    TopicRule rule = 1;
    // The rule ARN.
    string ruleArn = 2;
}

message InternalException {
    // The message for the exception.
    string message = 1;
}

message InternalFailureException {
    // The message for the exception.
    string message = 1;
}

message InvalidRequestException {
    // The message for the exception.
    string message = 1;
}

message KeyPair {
    // The private key.
    string PrivateKey = 1;
    // The public key.
    string PublicKey = 2;
}

message KinesisAction {
    // The partition key.
    string partitionKey = 1;
    // The ARN of the IAM role that grants access to the Amazon Kinesis stream.
    string roleArn = 2;
    // The name of the Amazon Kinesis stream.
    string streamName = 3;
}

message LambdaAction {
    // The ARN of the Lambda function.
    string functionArn = 1;
}

message LimitExceededException {
    // The message for the exception.
    string message = 1;
}

message ListCACertificatesRequest {
}

message ListCACertificatesResponse {
    // The CA certificates registered in your AWS account.
    array certificates = 1;
    // The current position within the list of CA certificates.
    string nextMarker = 2;
}

message ListCertificatesByCARequest {
}

message ListCertificatesByCAResponse {
    // The device certificates signed by the specified CA certificate.
    array certificates = 1;
    // The marker for the next set of results, or null if there are no additional results.
    string nextMarker = 2;
}

message ListCertificatesRequest {
}

message ListCertificatesResponse {
    // The descriptions of the certificates.
    array certificates = 1;
    // The marker for the next set of results, or null if there are no additional results.
    string nextMarker = 2;
}

message ListOutgoingCertificatesRequest {
}

message ListOutgoingCertificatesResponse {
    // The marker for the next set of results.
    string nextMarker = 1;
    // The certificates that are being transfered but not yet accepted.
    array outgoingCertificates = 2;
}

message ListPoliciesRequest {
}

message ListPoliciesResponse {
    // The marker for the next set of results, or null if there are no additional results.
    string nextMarker = 1;
    // The descriptions of the policies.
    array policies = 2;
}

message ListPolicyPrincipalsRequest {
}

message ListPolicyPrincipalsResponse {
    // The marker for the next set of results, or null if there are no additional results.
    string nextMarker = 1;
    // The descriptions of the principals.
    array principals = 2;
}

message ListPolicyVersionsRequest {
}

message ListPolicyVersionsResponse {
    // The policy versions.
    array policyVersions = 1;
}

message ListPrincipalPoliciesRequest {
}

message ListPrincipalPoliciesResponse {
    // The marker for the next set of results, or null if there are no additional results.
    string nextMarker = 1;
    // The policies.
    array policies = 2;
}

message ListPrincipalThingsRequest {
}

message ListPrincipalThingsResponse {
    // The token for the next set of results, or <b>null</b> if there are no additional results.
    string nextToken = 1;
    // The things.
    array things = 2;
}

message ListThingPrincipalsRequest {
}

message ListThingPrincipalsResponse {
    // The principals associated with the thing.
    array principals = 1;
}

message ListThingTypesRequest {
}

message ListThingTypesResponse {
    // The token for the next set of results, or <b>null</b> if there are no additional results.
    string nextToken = 1;
    // The thing types.
    array thingTypes = 2;
}

message ListThingsRequest {
}

message ListThingsResponse {
    // The token for the next set of results, or <b>null</b> if there are no additional results.
    string nextToken = 1;
    // The things.
    array things = 2;
}

message ListTopicRulesRequest {
}

message ListTopicRulesResponse {
    // A token used to retrieve the next value.
    string nextToken = 1;
    // The rules.
    array rules = 2;
}

enum LogLevel {
    DEBUG = 0;
    INFO = 1;
    ERROR = 2;
    WARN = 3;
    DISABLED = 4;
}

message LoggingOptionsPayload {
    // The logging level.
    LogLevel logLevel = 1;
    // The ARN of the IAM role that grants access.
    string roleArn = 2;
}

message MalformedPolicyException {
    // The message for the exception.
    string message = 1;
}

enum MessageFormat {
    RAW = 0;
    JSON = 1;
}

message OutgoingCertificate {
    // The certificate ARN.
    string certificateArn = 1;
    // The certificate ID.
    string certificateId = 2;
    // The certificate creation date.
    string creationDate = 3;
    // The date the transfer was initiated.
    string transferDate = 4;
    // The transfer message.
    string transferMessage = 5;
    // The AWS account to which the transfer was made.
    string transferredTo = 6;
}

repeated OutgoingCertificate OutgoingCertificates = 1







repeated Policy Policies = 1

message Policy {
    // The policy ARN.
    string policyArn = 1;
    // The policy name.
    string policyName = 2;
}

message PolicyVersion {
    // The date and time the policy was created.
    string createDate = 1;
    // Specifies whether the policy version is the default.
    boolean isDefaultVersion = 2;
    // The policy version ID.
    string versionId = 3;
}



repeated PolicyVersion PolicyVersions = 1





repeated string Principals = 1





message PutItemInput {
    // The table where the message data will be written
    string tableName = 1;
}

message RegisterCACertificateRequest {
    // The CA certificate.
    string caCertificate = 1;
    // The private key verification certificate.
    string verificationCertificate = 2;
}

message RegisterCACertificateResponse {
    // The CA certificate ARN.
    string certificateArn = 1;
    // The CA certificate identifier.
    string certificateId = 2;
}

message RegisterCertificateRequest {
    // The CA certificate used to sign the device certificate being registered.
    string caCertificatePem = 1;
    // The certificate data, in PEM format.
    string certificatePem = 2;
    // The status of the register certificate request.
    CertificateStatus status = 3;
}

message RegisterCertificateResponse {
    // The certificate ARN.
    string certificateArn = 1;
    // The certificate identifier.
    string certificateId = 2;
}

message RegistrationCodeValidationException {
    // Additional information about the exception.
    string message = 1;
}

message RejectCertificateTransferRequest {
    // The reason the certificate transfer was rejected.
    string rejectReason = 1;
}

message ReplaceTopicRuleRequest {
    // The rule payload.
    TopicRulePayload topicRulePayload = 1;
}

message RepublishAction {
    // The ARN of the IAM role that grants access.
    string roleArn = 1;
    // The name of the MQTT topic.
    string topic = 2;
}

message ResourceAlreadyExistsException {
    // The message for the exception.
    string message = 1;
    // The ARN of the resource that caused the exception.
    string resourceArn = 2;
    // The ID of the resource that caused the exception.
    string resourceId = 3;
}

message ResourceNotFoundException {
    // The message for the exception.
    string message = 1;
}

message S3Action {
    // The Amazon S3 bucket.
    string bucketName = 1;
    // The Amazon S3 canned ACL that controls access to the object identified by the object key. For more information, see <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl">S3 canned ACLs</a>.
    CannedAccessControlList cannedAcl = 2;
    // The object key.
    string key = 3;
    // The ARN of the IAM role that grants access.
    string roleArn = 4;
}

message SalesforceAction {
    // The token used to authenticate access to the Salesforce IoT Cloud Input Stream. The token is available from the Salesforce IoT Cloud platform after creation of the Input Stream.
    string token = 1;
    // The URL exposed by the Salesforce IoT Cloud Input Stream. The URL is available from the Salesforce IoT Cloud platform after creation of the Input Stream.
    string url = 2;
}





repeated string SearchableAttributes = 1

message ServiceUnavailableException {
    // The message for the exception.
    string message = 1;
}

message SetDefaultPolicyVersionRequest {
}

message SetLoggingOptionsRequest {
    // The logging options payload.
    LoggingOptionsPayload loggingOptionsPayload = 1;
}

message SnsAction {
    // The message format of the message to publish. Optional. Accepted values are "JSON" and "RAW". The default value of the attribute is "RAW". SNS uses this setting to determine if the payload should be parsed and relevant platform-specific bits of the payload should be extracted. To read more about SNS message formats, see <a href="http://docs.aws.amazon.com/sns/latest/dg/json-formats.html">http://docs.aws.amazon.com/sns/latest/dg/json-formats.html</a> refer to their official documentation.
    MessageFormat messageFormat = 1;
    // The ARN of the IAM role that grants access.
    string roleArn = 2;
    // The ARN of the SNS topic.
    string targetArn = 3;
}

message SqlParseException {
    // The message for the exception.
    string message = 1;
}

message SqsAction {
    // The URL of the Amazon SQS queue.
    string queueUrl = 1;
    // The ARN of the IAM role that grants access.
    string roleArn = 2;
    // Specifies whether to use Base64 encoding.
    boolean useBase64 = 3;
}

message ThingAttribute {
    // A list of thing attributes which are name-value pairs.
    array attributes = 1;
    // The name of the thing.
    string thingName = 2;
    // The name of the thing type, if the thing has been associated with a type.
    string thingTypeName = 3;
    // The version of the thing record in the registry.
    string version = 4;
}

repeated ThingAttribute ThingAttributeList = 1



repeated string ThingNameList = 1



message ThingTypeDefinition {
    // The ThingTypeMetadata contains additional information about the thing type including: creation date and time, a value indicating whether the thing type is deprecated, and a date and time when it was deprecated.
    ThingTypeMetadata thingTypeMetadata = 1;
    // The name of the thing type.
    string thingTypeName = 2;
    // The ThingTypeProperties for the thing type.
    ThingTypeProperties thingTypeProperties = 3;
}



repeated ThingTypeDefinition ThingTypeList = 1

message ThingTypeMetadata {
    // The date and time when the thing type was created.
    string creationDate = 1;
    // The date and time when the thing type was deprecated.
    string deprecationDate = 2;
}

message ThingTypeProperties {
    // A list of searchable thing attribute names.
    array searchableAttributes = 1;
    // The description of the thing type.
    string thingTypeDescription = 2;
}

message ThrottlingException {
    // The message for the exception.
    string message = 1;
}

message TopicRule {
    // The actions associated with the rule.
    array actions = 1;
    // The version of the SQL rules engine to use when evaluating the rule.
    string awsIotSqlVersion = 2;
    // The date and time the rule was created.
    string createdAt = 3;
    // The description of the rule.
    string description = 4;
    // Specifies whether the rule is disabled.
    boolean ruleDisabled = 5;
    // The name of the rule.
    string ruleName = 6;
    // The SQL statement used to query the topic. When using a SQL query with multiple lines, be sure to escape the newline characters.
    string sql = 7;
}

repeated TopicRuleListItem TopicRuleList = 1

message TopicRuleListItem {
    // The date and time the rule was created.
    string createdAt = 1;
    // The rule ARN.
    string ruleArn = 2;
    // Specifies whether the rule is disabled.
    boolean ruleDisabled = 3;
    // The name of the rule.
    string ruleName = 4;
    // The pattern for the topic names that apply.
    string topicPattern = 5;
}

message TopicRulePayload {
    // The actions associated with the rule.
    array actions = 1;
    // The version of the SQL rules engine to use when evaluating the rule.
    string awsIotSqlVersion = 2;
    // The description of the rule.
    string description = 3;
    // Specifies whether the rule is disabled.
    boolean ruleDisabled = 4;
    // The SQL statement used to query the topic. For more information, see <a href="http://docs.aws.amazon.com/iot/latest/developerguide/iot-rules.html#aws-iot-sql-reference">AWS IoT SQL Reference</a> in the <i>AWS IoT Developer Guide</i>.
    string sql = 5;
}

message TransferAlreadyCompletedException {
    // The message for the exception.
    string message = 1;
}

message TransferCertificateRequest {
    // The transfer message.
    string transferMessage = 1;
}

message TransferCertificateResponse {
    // The ARN of the certificate.
    string transferredCertificateArn = 1;
}

message TransferConflictException {
    // The message for the exception.
    string message = 1;
}

message TransferData {
    // The date the transfer was accepted.
    string acceptDate = 1;
    // The date the transfer was rejected.
    string rejectDate = 2;
    // The reason why the transfer was rejected.
    string rejectReason = 3;
    // The date the transfer took place.
    string transferDate = 4;
    // The transfer message.
    string transferMessage = 5;
}

message UnauthorizedException {
    // The message for the exception.
    string message = 1;
}

message UpdateCACertificateRequest {
}

message UpdateCertificateRequest {
}

message UpdateThingRequest {
    // <p>A list of thing attributes, a JSON string containing name-value pairs. For example:</p> <p> <code>{\"attributes\":{\"name1\":\"value2\"}}</code> </p> <p>This data is used to add new attributes or update existing attributes.</p>
    AttributePayload attributePayload = 1;
    // The expected version of the thing record in the registry. If the version of the record in the registry does not match the expected version specified in the request, the <code>UpdateThing</code> request is rejected with a <code>VersionConflictException</code>.
    integer expectedVersion = 2;
    // Remove a thing type association. If <b>true</b>, the assocation is removed.
    boolean removeThingType = 3;
    // The name of the thing type.
    string thingTypeName = 4;
}

message UpdateThingResponse {
}

message VersionConflictException {
    // The message for the exception.
    string message = 1;
}

message VersionsLimitExceededException {
    // The message for the exception.
    string message = 1;
}

service AWSIoTService {

    // Registers a CA certificate with AWS IoT. This CA certificate can then be used to sign device certificates, which can be then registered with AWS IoT. You can register up to 10 CA certificates per AWS account that have the same subject field. This enables you to have up to 10 certificate authorities sign your device certificates. If you have more than one CA certificate registered, make sure you pass the CA certificate when you register your device certificates with the RegisterCertificate API.
    rpc PostCacertificate(PostCacertificateRequest) returns (RegisterCACertificateResponse) {
      option (google.api.http) = {
        post: "//cacertificate"
        body: "body"
      };
    }
    // Updates a registered CA certificate.
    rpc PutCacertificateCaCertificateId(PutCacertificateCaCertificateIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "//cacertificate/{caCertificateId}"
        body: "body"
      };
    }
    // <p>Lists the CA certificates registered for your AWS account.</p> <p>The results are paginated with a default page size of 25. You can use the returned marker to retrieve additional results.</p>
    rpc GetCacertificates(GetCacertificatesRequest) returns (ListCACertificatesResponse) {
      option (google.api.http) = {
        get: "//cacertificates"
        body: "body"
      };
    }

    // Registers a device certificate with AWS IoT. If you have more than one CA certificate that has the same subject field, you must specify the CA certificate that was used to sign the device certificate being registered.
    rpc PostCertificateRegister(PostCertificateRegisterRequest) returns (RegisterCertificateResponse) {
      option (google.api.http) = {
        post: "//certificate/register"
        body: "body"
      };
    }
    // <p>Lists the certificates registered in your AWS account.</p> <p>The results are paginated with a default page size of 25. You can use the returned marker to retrieve additional results.</p>
    rpc GetCertificates(GetCertificatesRequest) returns (ListCertificatesResponse) {
      option (google.api.http) = {
        get: "//certificates"
        body: "body"
      };
    }
    // List the device certificates signed by the specified CA certificate.
    rpc GetCertificatesByCaCaCertificateId(GetCertificatesByCaCaCertificateIdRequest) returns (ListCertificatesByCAResponse) {
      option (google.api.http) = {
        get: "//certificates-by-ca/{caCertificateId}"
        body: "body"
      };
    }
    // Lists certificates that are being transfered but not yet accepted.
    rpc GetCertificatesOutGoing(GetCertificatesOutGoingRequest) returns (ListOutgoingCertificatesResponse) {
      option (google.api.http) = {
        get: "//certificates-out-going"
        body: "body"
      };
    }
    // <p>Updates the status of the specified certificate. This operation is idempotent.</p> <p>Moving a certificate from the ACTIVE state (including REVOKED) will not disconnect currently connected devices, but these devices will be unable to reconnect.</p> <p>The ACTIVE state is required to authenticate devices connecting to AWS IoT using a certificate.</p>
    rpc PutCertificatesCertificateId(PutCertificatesCertificateIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "//certificates/{certificateId}"
        body: "body"
      };
    }
    // Returns a unique endpoint specific to the AWS account making the call.
    rpc GetEndpoint(GetEndpointRequest) returns (DescribeEndpointResponse) {
      option (google.api.http) = {
        get: "//endpoint"
        body: "body"
      };
    }
    // <p>Creates a 2048-bit RSA key pair and issues an X.509 certificate using the issued public key.</p> <p> <b>Note</b> This is the only time AWS IoT issues the private key for this certificate, so it is important to keep it in a secure location.</p>
    rpc PostKeysAndCertificate(PostKeysAndCertificateRequest) returns (CreateKeysAndCertificateResponse) {
      option (google.api.http) = {
        post: "//keys-and-certificate"
        body: "body"
      };
    }
    // Sets the logging options.
    rpc PostLoggingOptions(PostLoggingOptionsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//loggingOptions"
        body: "body"
      };
    }
    // Lists your policies.
    rpc GetPolicies(GetPoliciesRequest) returns (ListPoliciesResponse) {
      option (google.api.http) = {
        get: "//policies"
        body: "body"
      };
    }
    // Gets information about the specified policy with the policy document of the default version.
    rpc GetPoliciesPolicyName(GetPoliciesPolicyNameRequest) returns (GetPolicyResponse) {
      option (google.api.http) = {
        get: "//policies/{policyName}"
        body: "body"
      };
    }
    // Lists the versions of the specified policy and identifies the default version.
    rpc GetPoliciesPolicyNameVersion(GetPoliciesPolicyNameVersionRequest) returns (ListPolicyVersionsResponse) {
      option (google.api.http) = {
        get: "//policies/{policyName}/version"
        body: "body"
      };
    }

    // Lists the principals associated with the specified policy.
    rpc GetPolicyPrincipals(GetPolicyPrincipalsRequest) returns (ListPolicyPrincipalsResponse) {
      option (google.api.http) = {
        get: "//policy-principals"
        body: "body"
      };
    }
    // Lists the policies attached to the specified principal. If you use an Cognito identity, the ID must be in <a href="http://docs.aws.amazon.com/cognitoidentity/latest/APIReference/API_GetCredentialsForIdentity.html#API_GetCredentialsForIdentity_RequestSyntax">AmazonCognito Identity format</a>.
    rpc GetPrincipalPolicies(GetPrincipalPoliciesRequest) returns (ListPrincipalPoliciesResponse) {
      option (google.api.http) = {
        get: "//principal-policies"
        body: "body"
      };
    }
    // Removes the specified policy from the specified certificate.
    rpc DeletePrincipalPoliciesPolicyName(DeletePrincipalPoliciesPolicyNameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//principal-policies/{policyName}"
        body: "body"
      };
    }
    // Lists the things associated with the specified principal.
    rpc GetPrincipalsThings(GetPrincipalsThingsRequest) returns (ListPrincipalThingsResponse) {
      option (google.api.http) = {
        get: "//principals/things"
        body: "body"
      };
    }
    // Gets a registration code used to register a CA certificate with AWS IoT.
    rpc GetRegistrationcode(GetRegistrationcodeRequest) returns (GetRegistrationCodeResponse) {
      option (google.api.http) = {
        get: "//registrationcode"
        body: "body"
      };
    }

    // Lists the rules for the specific topic.
    rpc GetRules(GetRulesRequest) returns (ListTopicRulesResponse) {
      option (google.api.http) = {
        get: "//rules"
        body: "body"
      };
    }

    // Disables the specified rule.
    rpc PostRulesRuleNameDisable(PostRulesRuleNameDisableRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//rules/{ruleName}/disable"
        body: "body"
      };
    }
    // Enables the specified rule.
    rpc PostRulesRuleNameEnable(PostRulesRuleNameEnableRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//rules/{ruleName}/enable"
        body: "body"
      };
    }
    // Lists the existing thing types.
    rpc GetThingTypes(GetThingTypesRequest) returns (ListThingTypesResponse) {
      option (google.api.http) = {
        get: "//thing-types"
        body: "body"
      };
    }
    // Gets information about the specified thing type.
    rpc GetThingTypesThingTypeName(GetThingTypesThingTypeNameRequest) returns (DescribeThingTypeResponse) {
      option (google.api.http) = {
        get: "//thing-types/{thingTypeName}"
        body: "body"
      };
    }
    // Deprecates a thing type. You can not associate new things with deprecated thing type.
    rpc PostThingTypesThingTypeNameDeprecate(PostThingTypesThingTypeNameDeprecateRequest) returns (DeprecateThingTypeResponse) {
      option (google.api.http) = {
        post: "//thing-types/{thingTypeName}/deprecate"
        body: "body"
      };
    }
    // Lists your things. Use the <b>attributeName</b> and <b>attributeValue</b> parameters to filter your things. For example, calling <code>ListThings</code> with attributeName=Color and attributeValue=Red retrieves all things in the registry that contain an attribute <b>Color</b> with the value <b>Red</b>.
    rpc GetThings(GetThingsRequest) returns (ListThingsResponse) {
      option (google.api.http) = {
        get: "//things"
        body: "body"
      };
    }

    // Lists the principals associated with the specified thing.
    rpc GetThingsThingNamePrincipals(GetThingsThingNamePrincipalsRequest) returns (ListThingPrincipalsResponse) {
      option (google.api.http) = {
        get: "//things/{thingName}/principals"
        body: "body"
      };
    }

}

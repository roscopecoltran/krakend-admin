syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package amazonsimplestorageservice;

message Get#ListBucketsRequest {
    string x_amz_security_token = 1;
}

message DeleteBucketRequest {
    string Bucket = 1;
    DeleteBucketRequest body = 2;
    string x_amz_security_token = 3;
}

message GetBucket#ListObjectsRequest {
    string Bucket = 1;
    // Pagination token
    string Marker = 2;
    // Pagination limit
    string MaxKeys = 3;
    ListObjectsRequest body = 4;
    string x_amz_security_token = 5;
}

message DeleteBucketKeyRequest {
    string Bucket = 1;
    repeated string Key = 2;
    DeleteObjectRequest body = 3;
    string x_amz_security_token = 4;
}

message GetBucketKey#GetObjectRequest {
    string Bucket = 1;
    string Key = 2;
    GetObjectRequest body = 3;
    string x_amz_security_token = 4;
}

message GetBucketKey#ListPartsRequest {
    string Bucket = 1;
    string Key = 2;
    // Pagination limit
    string MaxParts = 3;
    // Pagination token
    string PartNumberMarker = 4;
    ListPartsRequest body = 5;
    string x_amz_security_token = 6;
}

message PutBucketKey#PutObjectRequest {
    string Bucket = 1;
    string Key = 2;
    PutObjectRequest body = 3;
    string x_amz_security_token = 4;
}

message PutBucketKey#UploadPartRequest {
    string Bucket = 1;
    string Key = 2;
    UploadPartRequest body = 3;
    string x_amz_security_token = 4;
}

message PutBucketKey#UploadPartCopyRequest {
    string Bucket = 1;
    string Key = 2;
    UploadPartCopyRequest body = 3;
    string x_amz_security_token = 4;
}

message GetBucketKeyRequest {
    string Bucket = 1;
    string Key = 2;
    GetObjectAclRequest body = 3;
    string x_amz_security_token = 4;
}

message PutBucketKeyRequest {
    string Bucket = 1;
    string Key = 2;
    PutObjectAclRequest body = 3;
    string x_amz_security_token = 4;
}

message PostBucketKeyRequest {
    string Bucket = 1;
    string Key = 2;
    RestoreObjectRequest body = 3;
    string x_amz_security_token = 4;
}

message DeleteBucketKeyRequest {
    string Bucket = 1;
    repeated string Key = 2;
    DeleteObjectTaggingRequest body = 3;
    string x_amz_security_token = 4;
}

message GetBucketKeyRequest {
    string Bucket = 1;
    string Key = 2;
    GetObjectTaggingRequest body = 3;
    string x_amz_security_token = 4;
}

message PutBucketKeyRequest {
    string Bucket = 1;
    string Key = 2;
    PutObjectTaggingRequest body = 3;
    string x_amz_security_token = 4;
}

message GetBucketKeyRequest {
    string Bucket = 1;
    string Key = 2;
    GetObjectTorrentRequest body = 3;
    string x_amz_security_token = 4;
}

message PostBucketKeyRequest {
    string Bucket = 1;
    repeated string Key = 2;
    CreateMultipartUploadRequest body = 3;
    string x_amz_security_token = 4;
}

message GetBucketRequest {
    string Bucket = 1;
    GetBucketAccelerateConfigurationRequest body = 2;
    string x_amz_security_token = 3;
}

message PutBucketRequest {
    string Bucket = 1;
    PutBucketAccelerateConfigurationRequest body = 2;
    string x_amz_security_token = 3;
}

message GetBucketRequest {
    string Bucket = 1;
    GetBucketAclRequest body = 2;
    string x_amz_security_token = 3;
}

message PutBucketRequest {
    string Bucket = 1;
    PutBucketAclRequest body = 2;
    string x_amz_security_token = 3;
}

message GetBucketRequest {
    string Bucket = 1;
    GetBucketAnalyticsConfigurationRequest body = 2;
    string x_amz_security_token = 3;
}

message GetBucketRequest {
    string Bucket = 1;
    ListBucketAnalyticsConfigurationsRequest body = 2;
    string x_amz_security_token = 3;
}

message PutBucketRequest {
    string Bucket = 1;
    PutBucketAnalyticsConfigurationRequest body = 2;
    string x_amz_security_token = 3;
}

message GetBucketRequest {
    string Bucket = 1;
    GetBucketCorsRequest body = 2;
    string x_amz_security_token = 3;
}

message PutBucketRequest {
    string Bucket = 1;
    PutBucketCorsRequest body = 2;
    string x_amz_security_token = 3;
}

message PostBucketRequest {
    string Bucket = 1;
    DeleteObjectsRequest body = 2;
    string x_amz_security_token = 3;
}

message GetBucketRequest {
    string Bucket = 1;
    GetBucketInventoryConfigurationRequest body = 2;
    string x_amz_security_token = 3;
}

message GetBucketRequest {
    string Bucket = 1;
    ListBucketInventoryConfigurationsRequest body = 2;
    string x_amz_security_token = 3;
}

message PutBucketRequest {
    string Bucket = 1;
    PutBucketInventoryConfigurationRequest body = 2;
    string x_amz_security_token = 3;
}

message GetBucketRequest {
    string Bucket = 1;
    GetBucketLifecycleRequest body = 2;
    string x_amz_security_token = 3;
}

message GetBucketRequest {
    string Bucket = 1;
    GetBucketLifecycleConfigurationRequest body = 2;
    string x_amz_security_token = 3;
}

message PutBucketRequest {
    string Bucket = 1;
    PutBucketLifecycleRequest body = 2;
    string x_amz_security_token = 3;
}

message PutBucketRequest {
    string Bucket = 1;
    PutBucketLifecycleConfigurationRequest body = 2;
    string x_amz_security_token = 3;
}

message GetBucketRequest {
    string Bucket = 1;
    // Pagination token
    string ContinuationToken = 2;
    // Pagination limit
    string MaxKeys = 3;
    ListObjectsV2Request body = 4;
    string x_amz_security_token = 5;
}

message GetBucketRequest {
    string Bucket = 1;
    GetBucketLocationRequest body = 2;
    string x_amz_security_token = 3;
}

message GetBucketRequest {
    string Bucket = 1;
    GetBucketLoggingRequest body = 2;
    string x_amz_security_token = 3;
}

message PutBucketRequest {
    string Bucket = 1;
    PutBucketLoggingRequest body = 2;
    string x_amz_security_token = 3;
}

message DeleteBucketRequest {
    string Bucket = 1;
    DeleteBucketMetricsConfigurationRequest body = 2;
    string x_amz_security_token = 3;
}

message GetBucketRequest {
    string Bucket = 1;
    GetBucketMetricsConfigurationRequest body = 2;
    string x_amz_security_token = 3;
}

message GetBucketRequest {
    string Bucket = 1;
    ListBucketMetricsConfigurationsRequest body = 2;
    string x_amz_security_token = 3;
}

message PutBucketRequest {
    string Bucket = 1;
    PutBucketMetricsConfigurationRequest body = 2;
    string x_amz_security_token = 3;
}

message GetBucketRequest {
    string Bucket = 1;
    GetBucketNotificationConfigurationRequest body = 2;
    string x_amz_security_token = 3;
}

message GetBucketRequest {
    string Bucket = 1;
    GetBucketNotificationConfigurationRequest body = 2;
    string x_amz_security_token = 3;
}

message PutBucketRequest {
    string Bucket = 1;
    PutBucketNotificationRequest body = 2;
    string x_amz_security_token = 3;
}

message PutBucketRequest {
    string Bucket = 1;
    PutBucketNotificationConfigurationRequest body = 2;
    string x_amz_security_token = 3;
}

message DeleteBucketRequest {
    string Bucket = 1;
    DeleteBucketPolicyRequest body = 2;
    string x_amz_security_token = 3;
}

message GetBucketRequest {
    string Bucket = 1;
    GetBucketPolicyRequest body = 2;
    string x_amz_security_token = 3;
}

message PutBucketRequest {
    string Bucket = 1;
    PutBucketPolicyRequest body = 2;
    string x_amz_security_token = 3;
}

message DeleteBucketRequest {
    string Bucket = 1;
    DeleteBucketReplicationRequest body = 2;
    string x_amz_security_token = 3;
}

message GetBucketRequest {
    string Bucket = 1;
    GetBucketReplicationRequest body = 2;
    string x_amz_security_token = 3;
}

message PutBucketRequest {
    string Bucket = 1;
    PutBucketReplicationRequest body = 2;
    string x_amz_security_token = 3;
}

message GetBucketRequest {
    string Bucket = 1;
    GetBucketRequestPaymentRequest body = 2;
    string x_amz_security_token = 3;
}

message PutBucketRequest {
    string Bucket = 1;
    PutBucketRequestPaymentRequest body = 2;
    string x_amz_security_token = 3;
}

message DeleteBucketRequest {
    string Bucket = 1;
    DeleteBucketTaggingRequest body = 2;
    string x_amz_security_token = 3;
}

message GetBucketRequest {
    string Bucket = 1;
    GetBucketTaggingRequest body = 2;
    string x_amz_security_token = 3;
}

message PutBucketRequest {
    string Bucket = 1;
    PutBucketTaggingRequest body = 2;
    string x_amz_security_token = 3;
}

message GetBucketRequest {
    string Bucket = 1;
    // Pagination token
    string KeyMarker = 2;
    // Pagination limit
    string MaxUploads = 3;
    // Pagination token
    string UploadIdMarker = 4;
    ListMultipartUploadsRequest body = 5;
    string x_amz_security_token = 6;
}

message GetBucketRequest {
    string Bucket = 1;
    GetBucketVersioningRequest body = 2;
    string x_amz_security_token = 3;
}

message PutBucketRequest {
    string Bucket = 1;
    PutBucketVersioningRequest body = 2;
    string x_amz_security_token = 3;
}

message GetBucketRequest {
    string Bucket = 1;
    // Pagination token
    string KeyMarker = 2;
    // Pagination limit
    string MaxKeys = 3;
    // Pagination token
    string VersionIdMarker = 4;
    ListObjectVersionsRequest body = 5;
    string x_amz_security_token = 6;
}

message DeleteBucketRequest {
    string Bucket = 1;
    DeleteBucketWebsiteRequest body = 2;
    string x_amz_security_token = 3;
}

message GetBucketRequest {
    string Bucket = 1;
    GetBucketWebsiteRequest body = 2;
    string x_amz_security_token = 3;
}

message PutBucketRequest {
    string Bucket = 1;
    PutBucketWebsiteRequest body = 2;
    string x_amz_security_token = 3;
}

message AbortIncompleteMultipartUpload {
    // Indicates the number of days that must pass since initiation for Lifecycle to abort an Incomplete Multipart Upload.
    integer DaysAfterInitiation = 1;
}

message AbortMultipartUploadOutput {
}

message AbortMultipartUploadRequest {
}

message AccelerateConfiguration {
    // The accelerate configuration of the bucket.
    BucketAccelerateStatus Status = 1;
}

message AccessControlPolicy {
    // A list of grants.
    array Grants = 1;
    Owner Owner = 2;
}





repeated string AllowedHeaders = 1



repeated string AllowedMethods = 1



repeated string AllowedOrigins = 1

message AnalyticsAndOperator {
    // The prefix to use when evaluating an AND predicate.
    string Prefix = 1;
    // The list of tags to use when evaluating an AND predicate.
    array Tags = 2;
}

message AnalyticsConfiguration {
    // The filter used to describe a set of objects for analyses. A filter must have exactly one prefix, one tag, or one conjunction (AnalyticsAndOperator). If no filter is provided, all objects will be considered in any analysis.
    AnalyticsFilter Filter = 1;
    // The identifier used to represent an analytics configuration.
    string Id = 2;
    // If present, it indicates that data related to access patterns will be collected and made available to analyze the tradeoffs between different storage classes.
    StorageClassAnalysis StorageClassAnalysis = 3;
}

repeated AnalyticsConfiguration AnalyticsConfigurationList = 1

message AnalyticsExportDestination {
    // A destination signifying output to an S3 bucket.
    AnalyticsS3BucketDestination S3BucketDestination = 1;
}

message AnalyticsFilter {
    // A conjunction (logical AND) of predicates, which is used in evaluating an analytics filter. The operator must have at least two predicates.
    AnalyticsAndOperator And = 1;
    // The prefix to use when evaluating an analytics filter.
    string Prefix = 2;
    // The tag to use when evaluating an analytics filter.
    Tag Tag = 3;
}

message AnalyticsS3BucketDestination {
    // The Amazon resource name (ARN) of the bucket to which data is exported.
    string Bucket = 1;
    // The account ID that owns the destination bucket. If no account ID is provided, the owner will not be validated prior to exporting data.
    string BucketAccountId = 2;
    // The file format used when exporting data to Amazon S3.
    AnalyticsS3ExportFileFormat Format = 3;
    // The prefix to use when exporting data. The exported data begins with this prefix.
    string Prefix = 4;
}

enum AnalyticsS3ExportFileFormat {
    CSV = 0;
}

message Bucket {
    // Date the bucket was created.
    string CreationDate = 1;
    // The name of the bucket.
    string Name = 2;
}

enum BucketAccelerateStatu {
    ENABLED = 0;
    SUSPENDED = 1;
}

message BucketAlreadyExists {
}

message BucketAlreadyOwnedByYou {
}

enum BucketCannedACL {
    PRIVATE = 0;
    PUBLICREAD = 1;
    PUBLICREADWRITE = 2;
    AUTHENTICATEDREAD = 3;
}

message BucketLifecycleConfiguration {
    array Rules = 1;
}

enum BucketLocationConstraint {
    EU = 0;
    EUWEST1 = 1;
    USWEST1 = 2;
    USWEST2 = 3;
    APSOUTH1 = 4;
    APSOUTHEAST1 = 5;
    APSOUTHEAST2 = 6;
    APNORTHEAST1 = 7;
    SAEAST1 = 8;
    CNNORTH1 = 9;
    EUCENTRAL1 = 10;
}

message BucketLoggingStatus {
    LoggingEnabled LoggingEnabled = 1;
}

enum BucketLogsPermission {
    FULL_CONTROL = 0;
    READ = 1;
    WRITE = 2;
}

enum BucketVersioningStatu {
    ENABLED = 0;
    SUSPENDED = 1;
}

repeated Bucket Buckets = 1

message CORSConfiguration {
    array CORSRules = 1;
}

message CORSRule {
    // Specifies which headers are allowed in a pre-flight OPTIONS request.
    array AllowedHeaders = 1;
    // Identifies HTTP methods that the domain/origin specified in the rule is allowed to execute.
    array AllowedMethods = 2;
    // One or more origins you want customers to be able to access the bucket from.
    array AllowedOrigins = 3;
    // One or more headers in the response that you want customers to be able to access from their applications (for example, from a JavaScript XMLHttpRequest object).
    array ExposeHeaders = 4;
    // The time in seconds that your browser is to cache the preflight response for the specified resource.
    integer MaxAgeSeconds = 5;
}

repeated CORSRule CORSRules = 1





message CloudFunctionConfiguration {
    string CloudFunction = 1;
    Event Event = 2;
    array Events = 3;
    string Id = 4;
    string InvocationRole = 5;
}

message CommonPrefix {
    string Prefix = 1;
}

repeated CommonPrefix CommonPrefixList = 1

message CompleteMultipartUploadOutput {
    string Bucket = 1;
    // Entity tag of the object.
    string ETag = 2;
    string Key = 3;
    string Location = 4;
}

message CompleteMultipartUploadRequest {
    CompletedMultipartUpload MultipartUpload = 1;
}

message CompletedMultipartUpload {
    array Parts = 1;
}

message CompletedPart {
    // Entity tag returned when the part was uploaded.
    string ETag = 1;
    // Part number that identifies the part. This is a positive integer between 1 and 10,000.
    integer PartNumber = 2;
}

repeated CompletedPart CompletedPartList = 1

message Condition {
    // The HTTP error code when the redirect is applied. In the event of an error, if the error code equals this value, then the specified redirect is applied. Required when parent element Condition is specified and sibling KeyPrefixEquals is not specified. If both are specified, then both must be true for the redirect to be applied.
    string HttpErrorCodeReturnedEquals = 1;
    // The object key name prefix when the redirect is applied. For example, to redirect requests for ExamplePage.html, the key prefix will be ExamplePage.html. To redirect request for all pages with the prefix docs/, the key prefix will be /docs, which identifies all objects in the docs/ folder. Required when the parent element Condition is specified and sibling HttpErrorCodeReturnedEquals is not specified. If both conditions are specified, both must be true for the redirect to be applied.
    string KeyPrefixEquals = 2;
}

message CopyObjectOutput {
    CopyObjectResult CopyObjectResult = 1;
}

message CopyObjectRequest {
}

message CopyObjectResult {
    string ETag = 1;
    string LastModified = 2;
}

message CopyPartResult {
    // Entity tag of the object.
    string ETag = 1;
    // Date and time at which the object was uploaded.
    string LastModified = 2;
}

message CreateBucketConfiguration {
    // Specifies the region where the bucket will be created. If you don't specify a region, the bucket will be created in US Standard.
    BucketLocationConstraint LocationConstraint = 1;
}

message CreateBucketOutput {
}

message CreateBucketRequest {
    CreateBucketConfiguration CreateBucketConfiguration = 1;
}

message CreateMultipartUploadOutput {
    // Name of the bucket to which the multipart upload was initiated.
    string Bucket = 1;
    // Object key for which the multipart upload was initiated.
    string Key = 2;
    // ID for the initiated multipart upload.
    string UploadId = 3;
}

message CreateMultipartUploadRequest {
}

message Delete {
    array Objects = 1;
    // Element to enable quiet mode for the request. When you add this element, you must set its value to true.
    boolean Quiet = 2;
}

message DeleteBucketAnalyticsConfigurationRequest {
}

message DeleteBucketCorsRequest {
}

message DeleteBucketInventoryConfigurationRequest {
}

message DeleteBucketLifecycleRequest {
}

message DeleteBucketMetricsConfigurationRequest {
}

message DeleteBucketPolicyRequest {
}

message DeleteBucketReplicationRequest {
}

message DeleteBucketRequest {
}

message DeleteBucketTaggingRequest {
}

message DeleteBucketWebsiteRequest {
}

message DeleteMarkerEntry {
    // Specifies whether the object is (true) or is not (false) the latest version of an object.
    boolean IsLatest = 1;
    // The object key.
    string Key = 2;
    // Date and time the object was last modified.
    string LastModified = 3;
    Owner Owner = 4;
    // Version ID of an object.
    string VersionId = 5;
}



repeated DeleteMarkerEntry DeleteMarkers = 1

message DeleteObjectOutput {
}

message DeleteObjectRequest {
}

message DeleteObjectTaggingOutput {
}

message DeleteObjectTaggingRequest {
}

message DeleteObjectsOutput {
    array Deleted = 1;
    array Errors = 2;
}

message DeleteObjectsRequest {
    Delete Delete = 1;
}

message DeletedObject {
    boolean DeleteMarker = 1;
    string DeleteMarkerVersionId = 2;
    string Key = 3;
    string VersionId = 4;
}

repeated DeletedObject DeletedObjects = 1



message Destination {
    // Amazon resource name (ARN) of the bucket where you want Amazon S3 to store replicas of the object identified by the rule.
    string Bucket = 1;
    // The class of storage used to store the object.
    StorageClass StorageClass = 2;
}

enum EncodingType {
    URL = 0;
}

message Error {
    string Code = 1;
    string Key = 2;
    string Message = 3;
    string VersionId = 4;
}

message ErrorDocument {
    // The object key name to use when a 4XX class error occurs.
    string Key = 1;
}

repeated Error Errors = 1

enum Event {
    S3:REDUCEDREDUNDANCYLOSTOBJECT = 0;
    S3:OBJECTCREATED:* = 1;
    S3:OBJECTCREATED:PUT = 2;
    S3:OBJECTCREATED:POST = 3;
    S3:OBJECTCREATED:COPY = 4;
    S3:OBJECTCREATED:COMPLETEMULTIPARTUPLOAD = 5;
    S3:OBJECTREMOVED:* = 6;
    S3:OBJECTREMOVED:DELETE = 7;
    S3:OBJECTREMOVED:DELETEMARKERCREATED = 8;
}

repeated Event EventList = 1



enum ExpirationStatu {
    ENABLED = 0;
    DISABLED = 1;
}







repeated string ExposeHeaders = 1



message FilterRule {
    // Object key name prefix or suffix identifying one or more objects to which the filtering rule applies. Maximum prefix length can be up to 1,024 characters. Overlapping prefixes and suffixes are not supported. For more information, go to <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html">Configuring Event Notifications</a> in the Amazon Simple Storage Service Developer Guide.
    FilterRuleName Name = 1;
    string Value = 2;
}

repeated FilterRule FilterRuleList = 1

enum FilterRuleName {
    PREFIX = 0;
    SUFFIX = 1;
}

message GetBucketAccelerateConfigurationOutput {
    // The accelerate configuration of the bucket.
    BucketAccelerateStatus Status = 1;
}

message GetBucketAccelerateConfigurationRequest {
}

message GetBucketAclOutput {
    // A list of grants.
    array Grants = 1;
    Owner Owner = 2;
}

message GetBucketAclRequest {
}

message GetBucketAnalyticsConfigurationOutput {
    // The configuration and any analyses for the analytics filter.
    AnalyticsConfiguration AnalyticsConfiguration = 1;
}

message GetBucketAnalyticsConfigurationRequest {
}

message GetBucketCorsOutput {
    array CORSRules = 1;
}

message GetBucketCorsRequest {
}

message GetBucketInventoryConfigurationOutput {
    // Specifies the inventory configuration.
    InventoryConfiguration InventoryConfiguration = 1;
}

message GetBucketInventoryConfigurationRequest {
}

message GetBucketLifecycleConfigurationOutput {
    array Rules = 1;
}

message GetBucketLifecycleConfigurationRequest {
}

message GetBucketLifecycleOutput {
    array Rules = 1;
}

message GetBucketLifecycleRequest {
}

message GetBucketLocationOutput {
    BucketLocationConstraint LocationConstraint = 1;
}

message GetBucketLocationRequest {
}

message GetBucketLoggingOutput {
    LoggingEnabled LoggingEnabled = 1;
}

message GetBucketLoggingRequest {
}

message GetBucketMetricsConfigurationOutput {
    // Specifies the metrics configuration.
    MetricsConfiguration MetricsConfiguration = 1;
}

message GetBucketMetricsConfigurationRequest {
}

message GetBucketNotificationConfigurationRequest {
}

message GetBucketPolicyOutput {
    // The bucket policy as a JSON document.
    string Policy = 1;
}

message GetBucketPolicyRequest {
}

message GetBucketReplicationOutput {
    ReplicationConfiguration ReplicationConfiguration = 1;
}

message GetBucketReplicationRequest {
}

message GetBucketRequestPaymentOutput {
    // Specifies who pays for the download and request fees.
    Payer Payer = 1;
}

message GetBucketRequestPaymentRequest {
}

message GetBucketTaggingOutput {
    array TagSet = 1;
}

message GetBucketTaggingRequest {
}

message GetBucketVersioningOutput {
    // Specifies whether MFA delete is enabled in the bucket versioning configuration. This element is only returned if the bucket has been configured with MFA delete. If the bucket has never been so configured, this element is not returned.
    MFADeleteStatus MFADelete = 1;
    // The versioning state of the bucket.
    BucketVersioningStatus Status = 2;
}

message GetBucketVersioningRequest {
}

message GetBucketWebsiteOutput {
    ErrorDocument ErrorDocument = 1;
    IndexDocument IndexDocument = 2;
    RedirectAllRequestsTo RedirectAllRequestsTo = 3;
    array RoutingRules = 4;
}

message GetBucketWebsiteRequest {
}

message GetObjectAclOutput {
    // A list of grants.
    array Grants = 1;
    Owner Owner = 2;
}

message GetObjectAclRequest {
}

message GetObjectOutput {
    // Object data.
    string Body = 1;
}

message GetObjectRequest {
}

message GetObjectTaggingOutput {
    array TagSet = 1;
}

message GetObjectTaggingRequest {
}

message GetObjectTorrentOutput {
    string Body = 1;
}

message GetObjectTorrentRequest {
}

message GlacierJobParameters {
    // Glacier retrieval tier at which the restore will be processed.
    Tier Tier = 1;
}

message Grant {
    Grantee Grantee = 1;
    // Specifies the permission given to the grantee.
    Permission Permission = 2;
}

message Grantee {
    // Screen name of the grantee.
    string DisplayName = 1;
    // Email address of the grantee.
    string EmailAddress = 2;
    // The canonical user ID of the grantee.
    string ID = 3;
    // Type of grantee
    Type Type = 4;
    // URI of the grantee group.
    string URI = 5;
}

repeated Grant Grants = 1

message HeadBucketRequest {
}

message HeadObjectOutput {
}

message HeadObjectRequest {
}

message IndexDocument {
    // A suffix that is appended to a request that is for a directory on the website endpoint (e.g. if the suffix is index.html and you make a request to samplebucket/images/ the data that is returned will be for the object with the key name images/index.html) The suffix must not be empty and must not include a slash character.
    string Suffix = 1;
}

message Initiator {
    // Name of the Principal.
    string DisplayName = 1;
    // If the principal is an AWS account, it provides the Canonical User ID. If the principal is an IAM User, it provides a user ARN value.
    string ID = 2;
}

message InventoryConfiguration {
    // Contains information about where to publish the inventory results.
    InventoryDestination Destination = 1;
    // Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria.
    InventoryFilter Filter = 2;
    // The ID used to identify the inventory configuration.
    string Id = 3;
    // Specifies which object version(s) to included in the inventory results.
    InventoryIncludedObjectVersions IncludedObjectVersions = 4;
    // Specifies whether the inventory is enabled or disabled.
    boolean IsEnabled = 5;
    // Contains the optional fields that are included in the inventory results.
    array OptionalFields = 6;
    // Specifies the schedule for generating inventory results.
    InventorySchedule Schedule = 7;
}

repeated InventoryConfiguration InventoryConfigurationList = 1

message InventoryDestination {
    // Contains the bucket name, file format, bucket owner (optional), and prefix (optional) where inventory results are published.
    InventoryS3BucketDestination S3BucketDestination = 1;
}

message InventoryFilter {
    // The prefix that an object must have to be included in the inventory results.
    string Prefix = 1;
}

enum InventoryFormat {
    CSV = 0;
}

enum InventoryFrequency {
    DAILY = 0;
    WEEKLY = 1;
}

enum InventoryIncludedObjectVersion {
    ALL = 0;
    CURRENT = 1;
}

enum InventoryOptionalField {
    SIZE = 0;
    LASTMODIFIEDDATE = 1;
    STORAGECLASS = 2;
    ETAG = 3;
    ISMULTIPARTUPLOADED = 4;
    REPLICATIONSTATUS = 5;
}

repeated InventoryOptionalField InventoryOptionalFields = 1

message InventoryS3BucketDestination {
    // The ID of the account that owns the destination bucket.
    string AccountId = 1;
    // The Amazon resource name (ARN) of the bucket where inventory results will be published.
    string Bucket = 2;
    // Specifies the output format of the inventory results.
    InventoryFormat Format = 3;
    // The prefix that is prepended to all inventory results.
    string Prefix = 4;
}

message InventorySchedule {
    // Specifies how frequently inventory results are produced.
    InventoryFrequency Frequency = 1;
}

message LambdaFunctionConfiguration {
    array Events = 1;
    NotificationConfigurationFilter Filter = 2;
    string Id = 3;
    // Lambda cloud function ARN that Amazon S3 can invoke when it detects events of the specified type.
    string LambdaFunctionArn = 4;
}

repeated LambdaFunctionConfiguration LambdaFunctionConfigurationList = 1



message LifecycleConfiguration {
    array Rules = 1;
}

message LifecycleExpiration {
    // Indicates at what date the object is to be moved or deleted. Should be in GMT ISO 8601 Format.
    string Date = 1;
    // Indicates the lifetime, in days, of the objects that are subject to the rule. The value must be a non-zero positive integer.
    integer Days = 2;
    // Indicates whether Amazon S3 will remove a delete marker with no noncurrent versions. If set to true, the delete marker will be expired; if set to false the policy takes no action. This cannot be specified with Days or Date in a Lifecycle Expiration Policy.
    boolean ExpiredObjectDeleteMarker = 3;
}

message LifecycleRule {
    AbortIncompleteMultipartUpload AbortIncompleteMultipartUpload = 1;
    LifecycleExpiration Expiration = 2;
    LifecycleRuleFilter Filter = 3;
    // Unique identifier for the rule. The value cannot be longer than 255 characters.
    string ID = 4;
    NoncurrentVersionExpiration NoncurrentVersionExpiration = 5;
    array NoncurrentVersionTransitions = 6;
    // Prefix identifying one or more objects to which the rule applies. This is deprecated; use Filter instead.
    string Prefix = 7;
    // If 'Enabled', the rule is currently being applied. If 'Disabled', the rule is not currently being applied.
    ExpirationStatus Status = 8;
    array Transitions = 9;
}

message LifecycleRuleAndOperator {
    string Prefix = 1;
    // All of these tags must exist in the object's tag set in order for the rule to apply.
    array Tags = 2;
}

message LifecycleRuleFilter {
    LifecycleRuleAndOperator And = 1;
    // Prefix identifying one or more objects to which the rule applies.
    string Prefix = 2;
    // This tag must exist in the object's tag set in order for the rule to apply.
    Tag Tag = 3;
}

repeated LifecycleRule LifecycleRules = 1

message ListBucketAnalyticsConfigurationsOutput {
    // The list of analytics configurations for a bucket.
    array AnalyticsConfigurationList = 1;
    // The ContinuationToken that represents where this request began.
    string ContinuationToken = 2;
    // Indicates whether the returned list of analytics configurations is complete. A value of true indicates that the list is not complete and the NextContinuationToken will be provided for a subsequent request.
    boolean IsTruncated = 3;
    // NextContinuationToken is sent when isTruncated is true, which indicates that there are more analytics configurations to list. The next request must include this NextContinuationToken. The token is obfuscated and is not a usable value.
    string NextContinuationToken = 4;
}

message ListBucketAnalyticsConfigurationsRequest {
}

message ListBucketInventoryConfigurationsOutput {
    // If sent in the request, the marker that is used as a starting point for this inventory configuration list response.
    string ContinuationToken = 1;
    // The list of inventory configurations for a bucket.
    array InventoryConfigurationList = 2;
    // Indicates whether the returned list of inventory configurations is truncated in this response. A value of true indicates that the list is truncated.
    boolean IsTruncated = 3;
    // The marker used to continue this inventory configuration listing. Use the NextContinuationToken from this response to continue the listing in a subsequent request. The continuation token is an opaque value that Amazon S3 understands.
    string NextContinuationToken = 4;
}

message ListBucketInventoryConfigurationsRequest {
}

message ListBucketMetricsConfigurationsOutput {
    // The marker that is used as a starting point for this metrics configuration list response. This value is present if it was sent in the request.
    string ContinuationToken = 1;
    // Indicates whether the returned list of metrics configurations is complete. A value of true indicates that the list is not complete and the NextContinuationToken will be provided for a subsequent request.
    boolean IsTruncated = 2;
    // The list of metrics configurations for a bucket.
    array MetricsConfigurationList = 3;
    // The marker used to continue a metrics configuration listing that has been truncated. Use the NextContinuationToken from a previously truncated list response to continue the listing. The continuation token is an opaque value that Amazon S3 understands.
    string NextContinuationToken = 4;
}

message ListBucketMetricsConfigurationsRequest {
}

message ListBucketsOutput {
    array Buckets = 1;
    Owner Owner = 2;
}

message ListMultipartUploadsOutput {
    // Name of the bucket to which the multipart upload was initiated.
    string Bucket = 1;
    array CommonPrefixes = 2;
    string Delimiter = 3;
    // Encoding type used by Amazon S3 to encode object keys in the response.
    EncodingType EncodingType = 4;
    // Indicates whether the returned list of multipart uploads is truncated. A value of true indicates that the list was truncated. The list can be truncated if the number of multipart uploads exceeds the limit allowed or specified by max uploads.
    boolean IsTruncated = 5;
    // The key at or after which the listing began.
    string KeyMarker = 6;
    // Maximum number of multipart uploads that could have been included in the response.
    integer MaxUploads = 7;
    // When a list is truncated, this element specifies the value that should be used for the key-marker request parameter in a subsequent request.
    string NextKeyMarker = 8;
    // When a list is truncated, this element specifies the value that should be used for the upload-id-marker request parameter in a subsequent request.
    string NextUploadIdMarker = 9;
    // When a prefix is provided in the request, this field contains the specified prefix. The result contains only keys starting with the specified prefix.
    string Prefix = 10;
    // Upload ID after which listing began.
    string UploadIdMarker = 11;
    array Uploads = 12;
}

message ListMultipartUploadsRequest {
}

message ListObjectVersionsOutput {
    array CommonPrefixes = 1;
    array DeleteMarkers = 2;
    string Delimiter = 3;
    // Encoding type used by Amazon S3 to encode object keys in the response.
    EncodingType EncodingType = 4;
    // A flag that indicates whether or not Amazon S3 returned all of the results that satisfied the search criteria. If your results were truncated, you can make a follow-up paginated request using the NextKeyMarker and NextVersionIdMarker response parameters as a starting place in another request to return the rest of the results.
    boolean IsTruncated = 5;
    // Marks the last Key returned in a truncated response.
    string KeyMarker = 6;
    integer MaxKeys = 7;
    string Name = 8;
    // Use this value for the key marker request parameter in a subsequent request.
    string NextKeyMarker = 9;
    // Use this value for the next version id marker parameter in a subsequent request.
    string NextVersionIdMarker = 10;
    string Prefix = 11;
    string VersionIdMarker = 12;
    array Versions = 13;
}

message ListObjectVersionsRequest {
}

message ListObjectsOutput {
    array CommonPrefixes = 1;
    array Contents = 2;
    string Delimiter = 3;
    // Encoding type used by Amazon S3 to encode object keys in the response.
    EncodingType EncodingType = 4;
    // A flag that indicates whether or not Amazon S3 returned all of the results that satisfied the search criteria.
    boolean IsTruncated = 5;
    string Marker = 6;
    integer MaxKeys = 7;
    string Name = 8;
    // When response is truncated (the IsTruncated element value in the response is true), you can use the key name in this field as marker in the subsequent request to get next set of objects. Amazon S3 lists objects in alphabetical order Note: This element is returned only if you have delimiter request parameter specified. If response does not include the NextMaker and it is truncated, you can use the value of the last Key in the response as the marker in the subsequent request to get the next set of object keys.
    string NextMarker = 9;
    string Prefix = 10;
}

message ListObjectsRequest {
}

message ListObjectsV2Output {
    // CommonPrefixes contains all (if there are any) keys between Prefix and the next occurrence of the string specified by delimiter
    array CommonPrefixes = 1;
    // Metadata about each object returned.
    array Contents = 2;
    // ContinuationToken indicates Amazon S3 that the list is being continued on this bucket with a token. ContinuationToken is obfuscated and is not a real key
    string ContinuationToken = 3;
    // A delimiter is a character you use to group keys.
    string Delimiter = 4;
    // Encoding type used by Amazon S3 to encode object keys in the response.
    EncodingType EncodingType = 5;
    // A flag that indicates whether or not Amazon S3 returned all of the results that satisfied the search criteria.
    boolean IsTruncated = 6;
    // KeyCount is the number of keys returned with this request. KeyCount will always be less than equals to MaxKeys field. Say you ask for 50 keys, your result will include less than equals 50 keys
    integer KeyCount = 7;
    // Sets the maximum number of keys returned in the response. The response might contain fewer keys but will never contain more.
    integer MaxKeys = 8;
    // Name of the bucket to list.
    string Name = 9;
    // NextContinuationToken is sent when isTruncated is true which means there are more keys in the bucket that can be listed. The next list requests to Amazon S3 can be continued with this NextContinuationToken. NextContinuationToken is obfuscated and is not a real key
    string NextContinuationToken = 10;
    // Limits the response to keys that begin with the specified prefix.
    string Prefix = 11;
    // StartAfter is where you want Amazon S3 to start listing from. Amazon S3 starts listing after this specified key. StartAfter can be any key in the bucket
    string StartAfter = 12;
}

message ListObjectsV2Request {
}

message ListPartsOutput {
    // Name of the bucket to which the multipart upload was initiated.
    string Bucket = 1;
    // Identifies who initiated the multipart upload.
    Initiator Initiator = 2;
    // Indicates whether the returned list of parts is truncated.
    boolean IsTruncated = 3;
    // Object key for which the multipart upload was initiated.
    string Key = 4;
    // Maximum number of parts that were allowed in the response.
    integer MaxParts = 5;
    // When a list is truncated, this element specifies the last part in the list, as well as the value to use for the part-number-marker request parameter in a subsequent request.
    integer NextPartNumberMarker = 6;
    Owner Owner = 7;
    // Part number after which listing begins.
    integer PartNumberMarker = 8;
    array Parts = 9;
    // The class of storage used to store the object.
    StorageClass StorageClass = 10;
    // Upload ID identifying the multipart upload whose parts are being listed.
    string UploadId = 11;
}

message ListPartsRequest {
}

message LoggingEnabled {
    // Specifies the bucket where you want Amazon S3 to store server access logs. You can have your logs delivered to any bucket that you own, including the same bucket that is being logged. You can also configure multiple buckets to deliver their logs to the same target bucket. In this case you should choose a different TargetPrefix for each source bucket so that the delivered log files can be distinguished by key.
    string TargetBucket = 1;
    array TargetGrants = 2;
    // This element lets you specify a prefix for the keys that the log files will be stored under.
    string TargetPrefix = 3;
}

enum MFADelete {
    ENABLED = 0;
    DISABLED = 1;
}

enum MFADeleteStatu {
    ENABLED = 0;
    DISABLED = 1;
}

message Metadata {
    string key = 1;
    string value = 2;
}
repeated Metadata Metadata = 1

enum MetadataDirective {
    COPY = 0;
    REPLACE = 1;
}

message MetricsAndOperator {
    // The prefix used when evaluating an AND predicate.
    string Prefix = 1;
    // The list of tags used when evaluating an AND predicate.
    array Tags = 2;
}

message MetricsConfiguration {
    // Specifies a metrics configuration filter. The metrics configuration will only include objects that meet the filter's criteria. A filter must be a prefix, a tag, or a conjunction (MetricsAndOperator).
    MetricsFilter Filter = 1;
    // The ID used to identify the metrics configuration.
    string Id = 2;
}

repeated MetricsConfiguration MetricsConfigurationList = 1

message MetricsFilter {
    // A conjunction (logical AND) of predicates, which is used in evaluating a metrics filter. The operator must have at least two predicates, and an object must match all of the predicates in order for the filter to apply.
    MetricsAndOperator And = 1;
    // The prefix used when evaluating a metrics filter.
    string Prefix = 2;
    // The tag used when evaluating a metrics filter.
    Tag Tag = 3;
}

message MultipartUpload {
    // Date and time at which the multipart upload was initiated.
    string Initiated = 1;
    // Identifies who initiated the multipart upload.
    Initiator Initiator = 2;
    // Key of the object for which the multipart upload was initiated.
    string Key = 3;
    Owner Owner = 4;
    // The class of storage used to store the object.
    StorageClass StorageClass = 5;
    // Upload ID that identifies the multipart upload.
    string UploadId = 6;
}



repeated MultipartUpload MultipartUploadList = 1













message NoSuchBucket {
}

message NoSuchKey {
}

message NoSuchUpload {
}

message NoncurrentVersionExpiration {
    // Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action. For information about the noncurrent days calculations, see <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html">How Amazon S3 Calculates When an Object Became Noncurrent</a> in the Amazon Simple Storage Service Developer Guide.
    integer NoncurrentDays = 1;
}

message NoncurrentVersionTransition {
    // Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action. For information about the noncurrent days calculations, see <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html">How Amazon S3 Calculates When an Object Became Noncurrent</a> in the Amazon Simple Storage Service Developer Guide.
    integer NoncurrentDays = 1;
    // The class of storage used to store the object.
    TransitionStorageClass StorageClass = 2;
}

repeated NoncurrentVersionTransition NoncurrentVersionTransitionList = 1

message NotificationConfiguration {
    array LambdaFunctionConfigurations = 1;
    array QueueConfigurations = 2;
    array TopicConfigurations = 3;
}

message NotificationConfigurationDeprecated {
    CloudFunctionConfiguration CloudFunctionConfiguration = 1;
    QueueConfigurationDeprecated QueueConfiguration = 2;
    TopicConfigurationDeprecated TopicConfiguration = 3;
}

message NotificationConfigurationFilter {
    S3KeyFilter Key = 1;
}

message Object {
    string ETag = 1;
    string Key = 2;
    string LastModified = 3;
    Owner Owner = 4;
    integer Size = 5;
    // The class of storage used to store the object.
    ObjectStorageClass StorageClass = 6;
}

message ObjectAlreadyInActiveTierError {
}

enum ObjectCannedACL {
    PRIVATE = 0;
    PUBLICREAD = 1;
    PUBLICREADWRITE = 2;
    AUTHENTICATEDREAD = 3;
    AWSEXECREAD = 4;
    BUCKETOWNERREAD = 5;
    BUCKETOWNERFULLCONTROL = 6;
}

message ObjectIdentifier {
    // Key name of the object to delete.
    string Key = 1;
    // VersionId for the specific version of the object to delete.
    string VersionId = 2;
}

repeated ObjectIdentifier ObjectIdentifierList = 1



repeated Object ObjectList = 1

message ObjectNotInActiveTierError {
}

enum ObjectStorageClass {
    STANDARD = 0;
    REDUCED_REDUNDANCY = 1;
    GLACIER = 2;
}

message ObjectVersion {
    string ETag = 1;
    // Specifies whether the object is (true) or is not (false) the latest version of an object.
    boolean IsLatest = 2;
    // The object key.
    string Key = 3;
    // Date and time the object was last modified.
    string LastModified = 4;
    Owner Owner = 5;
    // Size in bytes of the object.
    integer Size = 6;
    // The class of storage used to store the object.
    ObjectVersionStorageClass StorageClass = 7;
    // Version ID of an object.
    string VersionId = 8;
}



repeated ObjectVersion ObjectVersionList = 1

enum ObjectVersionStorageClass {
    STANDARD = 0;
}

message Owner {
    string DisplayName = 1;
    string ID = 2;
}

message Part {
    // Entity tag returned when the part was uploaded.
    string ETag = 1;
    // Date and time at which the part was uploaded.
    string LastModified = 2;
    // Part number identifying the part. This is a positive integer between 1 and 10,000.
    integer PartNumber = 3;
    // Size of the uploaded part data.
    integer Size = 4;
}





repeated Part Parts = 1



enum Payer {
    REQUESTER = 0;
    BUCKETOWNER = 1;
}

enum Permission {
    FULL_CONTROL = 0;
    WRITE = 1;
    WRITE_ACP = 2;
    READ = 3;
    READ_ACP = 4;
}

enum Protocol {
    HTTP = 0;
    HTTPS = 1;
}

message PutBucketAccelerateConfigurationRequest {
    // Specifies the Accelerate Configuration you want to set for the bucket.
    AccelerateConfiguration AccelerateConfiguration = 1;
}

message PutBucketAclRequest {
    AccessControlPolicy AccessControlPolicy = 1;
}

message PutBucketAnalyticsConfigurationRequest {
    // The configuration and any analyses for the analytics filter.
    AnalyticsConfiguration AnalyticsConfiguration = 1;
}

message PutBucketCorsRequest {
    CORSConfiguration CORSConfiguration = 1;
}

message PutBucketInventoryConfigurationRequest {
    // Specifies the inventory configuration.
    InventoryConfiguration InventoryConfiguration = 1;
}

message PutBucketLifecycleConfigurationRequest {
    BucketLifecycleConfiguration LifecycleConfiguration = 1;
}

message PutBucketLifecycleRequest {
    LifecycleConfiguration LifecycleConfiguration = 1;
}

message PutBucketLoggingRequest {
    BucketLoggingStatus BucketLoggingStatus = 1;
}

message PutBucketMetricsConfigurationRequest {
    // Specifies the metrics configuration.
    MetricsConfiguration MetricsConfiguration = 1;
}

message PutBucketNotificationConfigurationRequest {
    NotificationConfiguration NotificationConfiguration = 1;
}

message PutBucketNotificationRequest {
    NotificationConfigurationDeprecated NotificationConfiguration = 1;
}

message PutBucketPolicyRequest {
    // The bucket policy as a JSON document.
    string Policy = 1;
}

message PutBucketReplicationRequest {
    ReplicationConfiguration ReplicationConfiguration = 1;
}

message PutBucketRequestPaymentRequest {
    RequestPaymentConfiguration RequestPaymentConfiguration = 1;
}

message PutBucketTaggingRequest {
    Tagging Tagging = 1;
}

message PutBucketVersioningRequest {
    VersioningConfiguration VersioningConfiguration = 1;
}

message PutBucketWebsiteRequest {
    WebsiteConfiguration WebsiteConfiguration = 1;
}

message PutObjectAclOutput {
}

message PutObjectAclRequest {
    AccessControlPolicy AccessControlPolicy = 1;
}

message PutObjectOutput {
}

message PutObjectRequest {
    // Object data.
    string Body = 1;
}

message PutObjectTaggingOutput {
}

message PutObjectTaggingRequest {
    Tagging Tagging = 1;
}

message QueueConfiguration {
    array Events = 1;
    NotificationConfigurationFilter Filter = 2;
    string Id = 3;
    // Amazon SQS queue ARN to which Amazon S3 will publish a message when it detects events of specified type.
    string QueueArn = 4;
}

message QueueConfigurationDeprecated {
    Event Event = 1;
    array Events = 2;
    string Id = 3;
    string Queue = 4;
}

repeated QueueConfiguration QueueConfigurationList = 1





message Redirect {
    // The host name to use in the redirect request.
    string HostName = 1;
    // The HTTP redirect code to use on the response. Not required if one of the siblings is present.
    string HttpRedirectCode = 2;
    // Protocol to use (http, https) when redirecting requests. The default is the protocol that is used in the original request.
    Protocol Protocol = 3;
    // The object key prefix to use in the redirect request. For example, to redirect requests for all pages with prefix docs/ (objects in the docs/ folder) to documents/, you can set a condition block with KeyPrefixEquals set to docs/ and in the Redirect set ReplaceKeyPrefixWith to /documents. Not required if one of the siblings is present. Can be present only if ReplaceKeyWith is not provided.
    string ReplaceKeyPrefixWith = 4;
    // The specific object key to use in the redirect request. For example, redirect request to error.html. Not required if one of the sibling is present. Can be present only if ReplaceKeyPrefixWith is not provided.
    string ReplaceKeyWith = 5;
}

message RedirectAllRequestsTo {
    // Name of the host where requests will be redirected.
    string HostName = 1;
    // Protocol to use (http, https) when redirecting requests. The default is the protocol that is used in the original request.
    Protocol Protocol = 2;
}

message ReplicationConfiguration {
    // Amazon Resource Name (ARN) of an IAM role for Amazon S3 to assume when replicating the objects.
    string Role = 1;
    // Container for information about a particular replication rule. Replication configuration must have at least one rule and can contain up to 1,000 rules.
    array Rules = 2;
}

message ReplicationRule {
    Destination Destination = 1;
    // Unique identifier for the rule. The value cannot be longer than 255 characters.
    string ID = 2;
    // Object keyname prefix identifying one or more objects to which the rule applies. Maximum prefix length can be up to 1,024 characters. Overlapping prefixes are not supported.
    string Prefix = 3;
    // The rule is ignored if status is not Enabled.
    ReplicationRuleStatus Status = 4;
}

enum ReplicationRuleStatu {
    ENABLED = 0;
    DISABLED = 1;
}

repeated ReplicationRule ReplicationRules = 1

enum ReplicationStatu {
    COMPLETE = 0;
    PENDING = 1;
    FAILED = 2;
    REPLICA = 3;
}

enum RequestCharged {
    REQUESTER = 0;
}

enum RequestPayer {
    REQUESTER = 0;
}

message RequestPaymentConfiguration {
    // Specifies who pays for the download and request fees.
    Payer Payer = 1;
}

message RestoreObjectOutput {
}

message RestoreObjectRequest {
    RestoreRequest RestoreRequest = 1;
}

message RestoreRequest {
    // Lifetime of the active copy in days
    integer Days = 1;
    // Glacier related prameters pertaining to this job.
    GlacierJobParameters GlacierJobParameters = 2;
}

message RoutingRule {
    // A container for describing a condition that must be met for the specified redirect to apply. For example, 1. If request is for pages in the /docs folder, redirect to the /documents folder. 2. If request results in HTTP error 4xx, redirect request to another host where you might process the error.
    Condition Condition = 1;
    // Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can can specify a different error code to return.
    Redirect Redirect = 2;
}

repeated RoutingRule RoutingRules = 1

message Rule {
    AbortIncompleteMultipartUpload AbortIncompleteMultipartUpload = 1;
    LifecycleExpiration Expiration = 2;
    // Unique identifier for the rule. The value cannot be longer than 255 characters.
    string ID = 3;
    NoncurrentVersionExpiration NoncurrentVersionExpiration = 4;
    NoncurrentVersionTransition NoncurrentVersionTransition = 5;
    // Prefix identifying one or more objects to which the rule applies.
    string Prefix = 6;
    // If 'Enabled', the rule is currently being applied. If 'Disabled', the rule is not currently being applied.
    ExpirationStatus Status = 7;
    Transition Transition = 8;
}

repeated Rule Rules = 1

message S3KeyFilter {
    array FilterRules = 1;
}

enum ServerSideEncryption {
    AES256 = 0;
    AWS:KMS = 1;
}

enum StorageClass {
    STANDARD = 0;
    REDUCED_REDUNDANCY = 1;
    STANDARD_IA = 2;
}

message StorageClassAnalysis {
    // A container used to describe how data related to the storage class analysis should be exported.
    StorageClassAnalysisDataExport DataExport = 1;
}

message StorageClassAnalysisDataExport {
    // The place to store the data for an analysis.
    AnalyticsExportDestination Destination = 1;
    // The version of the output schema to use when exporting data. Must be V_1.
    StorageClassAnalysisSchemaVersion OutputSchemaVersion = 2;
}

enum StorageClassAnalysisSchemaVersion {
    V_1 = 0;
}

message Tag {
    // Name of the tag.
    string Key = 1;
    // Value of the tag.
    string Value = 2;
}



repeated Tag TagSet = 1

message Tagging {
    array TagSet = 1;
}

enum TaggingDirective {
    COPY = 0;
    REPLACE = 1;
}

message TargetGrant {
    Grantee Grantee = 1;
    // Logging permissions assigned to the Grantee for the bucket.
    BucketLogsPermission Permission = 2;
}

repeated TargetGrant TargetGrants = 1



enum Tier {
    STANDARD = 0;
    BULK = 1;
    EXPEDITED = 2;
}

message TopicConfiguration {
    array Events = 1;
    NotificationConfigurationFilter Filter = 2;
    string Id = 3;
    // Amazon SNS topic ARN to which Amazon S3 will publish a message when it detects events of specified type.
    string TopicArn = 4;
}

message TopicConfigurationDeprecated {
    // Bucket event for which to send notifications.
    Event Event = 1;
    array Events = 2;
    string Id = 3;
    // Amazon SNS topic to which Amazon S3 will publish a message to report the specified events for the bucket.
    string Topic = 4;
}

repeated TopicConfiguration TopicConfigurationList = 1

message Transition {
    // Indicates at what date the object is to be moved or deleted. Should be in GMT ISO 8601 Format.
    string Date = 1;
    // Indicates the lifetime, in days, of the objects that are subject to the rule. The value must be a non-zero positive integer.
    integer Days = 2;
    // The class of storage used to store the object.
    TransitionStorageClass StorageClass = 3;
}

repeated Transition TransitionList = 1

enum TransitionStorageClass {
    GLACIER = 0;
    STANDARD_IA = 1;
}

enum Type {
    CANONICALUSER = 0;
    AMAZONCUSTOMERBYEMAIL = 1;
    GROUP = 2;
}

message UploadPartCopyOutput {
    CopyPartResult CopyPartResult = 1;
}

message UploadPartCopyRequest {
}

message UploadPartOutput {
}

message UploadPartRequest {
    // Object data.
    string Body = 1;
}

message VersioningConfiguration {
    // Specifies whether MFA delete is enabled in the bucket versioning configuration. This element is only returned if the bucket has been configured with MFA delete. If the bucket has never been so configured, this element is not returned.
    MFADelete MFADelete = 1;
    // The versioning state of the bucket.
    BucketVersioningStatus Status = 2;
}

message WebsiteConfiguration {
    ErrorDocument ErrorDocument = 1;
    IndexDocument IndexDocument = 2;
    RedirectAllRequestsTo RedirectAllRequestsTo = 3;
    array RoutingRules = 4;
}

service AmazonSimpleStorageServiceService {
    // Returns a list of all buckets owned by the authenticated sender of the request.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTServiceGET.html</p>
    rpc Get#ListBuckets(Get#ListBucketsRequest) returns (ListBucketsOutput) {
      option (google.api.http) = {
        get: "//#ListBuckets"
      };
    }
    // Deletes the bucket. All objects (including all object versions and Delete Markers) in the bucket must be deleted before the bucket itself can be deleted.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketDELETE.html</p>
    rpc DeleteBucket(DeleteBucketRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//{Bucket}"
        body: "body"
      };
    }

    // Returns some or all (up to 1000) of the objects in a bucket. You can use the request parameters as selection criteria to return a subset of the objects in a bucket.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGET.html</p>
    rpc GetBucket#ListObjects(GetBucket#ListObjectsRequest) returns (ListObjectsOutput) {
      option (google.api.http) = {
        get: "//{Bucket}#ListObjects"
        body: "body"
      };
    }
    // Removes the null version (if there is one) of an object and inserts a delete marker, which becomes the latest version of the object. If there isn't a null version, Amazon S3 does not remove any objects.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTObjectDELETE.html</p>
    rpc DeleteBucketKey(DeleteBucketKeyRequest) returns (DeleteObjectOutput) {
      option (google.api.http) = {
        delete: "//{Bucket}/{Key}"
        body: "body"
      };
    }
    // Retrieves objects from Amazon S3.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTObjectGET.html</p>
    rpc GetBucketKey#GetObject(GetBucketKey#GetObjectRequest) returns (GetObjectOutput) {
      option (google.api.http) = {
        get: "//{Bucket}/{Key}#GetObject"
        body: "body"
      };
    }

    // Lists the parts that have been uploaded for a specific multipart upload.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/mpUploadListParts.html</p>
    rpc GetBucketKey#ListParts(GetBucketKey#ListPartsRequest) returns (ListPartsOutput) {
      option (google.api.http) = {
        get: "//{Bucket}/{Key}#ListParts"
        body: "body"
      };
    }
    // Adds an object to a bucket.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTObjectPUT.html</p>
    rpc PutBucketKey#PutObject(PutBucketKey#PutObjectRequest) returns (PutObjectOutput) {
      option (google.api.http) = {
        put: "//{Bucket}/{Key}#PutObject"
        body: "body"
      };
    }
    // <p>Uploads a part in a multipart upload.</p><p><b>Note:</b> After you initiate multipart upload and upload one or more parts, you must either complete or abort multipart upload in order to stop getting charged for storage of the uploaded parts. Only after you either complete or abort multipart upload, Amazon S3 frees up the parts storage and stops charging you for the parts storage.</p><p>http://docs.amazonwebservices.com/AmazonS3/latest/API/mpUploadUploadPart.html</p>
    rpc PutBucketKey#UploadPart(PutBucketKey#UploadPartRequest) returns (UploadPartOutput) {
      option (google.api.http) = {
        put: "//{Bucket}/{Key}#UploadPart"
        body: "body"
      };
    }
    // Uploads a part by copying data from an existing object as data source.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/mpUploadUploadPartCopy.html</p>
    rpc PutBucketKey#UploadPartCopy(PutBucketKey#UploadPartCopyRequest) returns (UploadPartCopyOutput) {
      option (google.api.http) = {
        put: "//{Bucket}/{Key}#UploadPartCopy"
        body: "body"
      };
    }
    // Returns the access control list (ACL) of an object.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTObjectGETacl.html</p>
    rpc GetBucketKey(GetBucketKeyRequest) returns (GetObjectAclOutput) {
      option (google.api.http) = {
        get: "//{Bucket}/{Key}?acl#GetObjectAcl"
        body: "body"
      };
    }
    // uses the acl subresource to set the access control list (ACL) permissions for an object that already exists in a bucket<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTObjectPUTacl.html</p>
    rpc PutBucketKey(PutBucketKeyRequest) returns (PutObjectAclOutput) {
      option (google.api.http) = {
        put: "//{Bucket}/{Key}?acl#PutObjectAcl"
        body: "body"
      };
    }
    // Restores an archived copy of an object back into Amazon S3<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTObjectRestore.html</p>
    rpc PostBucketKey(PostBucketKeyRequest) returns (RestoreObjectOutput) {
      option (google.api.http) = {
        post: "//{Bucket}/{Key}?restore#RestoreObject"
        body: "body"
      };
    }
    // Removes the tag-set from an existing object.
    rpc DeleteBucketKey(DeleteBucketKeyRequest) returns (DeleteObjectTaggingOutput) {
      option (google.api.http) = {
        delete: "//{Bucket}/{Key}?tagging"
        body: "body"
      };
    }
    // Returns the tag-set of an object.
    rpc GetBucketKey(GetBucketKeyRequest) returns (GetObjectTaggingOutput) {
      option (google.api.http) = {
        get: "//{Bucket}/{Key}?tagging#GetObjectTagging"
        body: "body"
      };
    }
    // Sets the supplied tag-set to an object that already exists in a bucket
    rpc PutBucketKey(PutBucketKeyRequest) returns (PutObjectTaggingOutput) {
      option (google.api.http) = {
        put: "//{Bucket}/{Key}?tagging#PutObjectTagging"
        body: "body"
      };
    }
    // Return torrent files from a bucket.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTObjectGETtorrent.html</p>
    rpc GetBucketKey(GetBucketKeyRequest) returns (GetObjectTorrentOutput) {
      option (google.api.http) = {
        get: "//{Bucket}/{Key}?torrent#GetObjectTorrent"
        body: "body"
      };
    }
    // <p>Initiates a multipart upload and returns an upload ID.</p><p><b>Note:</b> After you initiate multipart upload and upload one or more parts, you must either complete or abort multipart upload in order to stop getting charged for storage of the uploaded parts. Only after you either complete or abort multipart upload, Amazon S3 frees up the parts storage and stops charging you for the parts storage.</p><p>http://docs.amazonwebservices.com/AmazonS3/latest/API/mpUploadInitiate.html</p>
    rpc PostBucketKey(PostBucketKeyRequest) returns (CreateMultipartUploadOutput) {
      option (google.api.http) = {
        post: "//{Bucket}/{Key}?uploads"
        body: "body"
      };
    }
    // Returns the accelerate configuration of a bucket.
    rpc GetBucket(GetBucketRequest) returns (GetBucketAccelerateConfigurationOutput) {
      option (google.api.http) = {
        get: "//{Bucket}?accelerate"
        body: "body"
      };
    }
    // Sets the accelerate configuration of an existing bucket.
    rpc PutBucket(PutBucketRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "//{Bucket}?accelerate#PutBucketAccelerateConfiguration"
        body: "body"
      };
    }
    // Gets the access control policy for the bucket.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGETacl.html</p>
    rpc GetBucket(GetBucketRequest) returns (GetBucketAclOutput) {
      option (google.api.http) = {
        get: "//{Bucket}?acl"
        body: "body"
      };
    }
    // Sets the permissions on a bucket using access control lists (ACL).<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketPUTacl.html</p>
    rpc PutBucket(PutBucketRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "//{Bucket}?acl#PutBucketAcl"
        body: "body"
      };
    }
    // Gets an analytics configuration for the bucket (specified by the analytics configuration ID).
    rpc GetBucket(GetBucketRequest) returns (GetBucketAnalyticsConfigurationOutput) {
      option (google.api.http) = {
        get: "//{Bucket}?analytics"
        body: "body"
      };
    }
    // Lists the analytics configurations for the bucket.
    rpc GetBucket(GetBucketRequest) returns (ListBucketAnalyticsConfigurationsOutput) {
      option (google.api.http) = {
        get: "//{Bucket}?analytics#ListBucketAnalyticsConfigurations"
        body: "body"
      };
    }
    // Sets an analytics configuration for the bucket (specified by the analytics configuration ID).
    rpc PutBucket(PutBucketRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "//{Bucket}?analytics#PutBucketAnalyticsConfiguration"
        body: "body"
      };
    }
    // Returns the cors configuration for the bucket.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGETcors.html</p>
    rpc GetBucket(GetBucketRequest) returns (GetBucketCorsOutput) {
      option (google.api.http) = {
        get: "//{Bucket}?cors"
        body: "body"
      };
    }
    // Sets the cors configuration for a bucket.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketPUTcors.html</p>
    rpc PutBucket(PutBucketRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "//{Bucket}?cors#PutBucketCors"
        body: "body"
      };
    }
    // This operation enables you to delete multiple objects from a bucket using a single HTTP request. You may specify up to 1000 keys.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/multiobjectdeleteapi.html</p>
    rpc PostBucket(PostBucketRequest) returns (DeleteObjectsOutput) {
      option (google.api.http) = {
        post: "//{Bucket}?delete"
        body: "body"
      };
    }
    // Returns an inventory configuration (identified by the inventory ID) from the bucket.
    rpc GetBucket(GetBucketRequest) returns (GetBucketInventoryConfigurationOutput) {
      option (google.api.http) = {
        get: "//{Bucket}?inventory"
        body: "body"
      };
    }
    // Returns a list of inventory configurations for the bucket.
    rpc GetBucket(GetBucketRequest) returns (ListBucketInventoryConfigurationsOutput) {
      option (google.api.http) = {
        get: "//{Bucket}?inventory#ListBucketInventoryConfigurations"
        body: "body"
      };
    }
    // Adds an inventory configuration (identified by the inventory ID) from the bucket.
    rpc PutBucket(PutBucketRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "//{Bucket}?inventory#PutBucketInventoryConfiguration"
        body: "body"
      };
    }
    // Deprecated, see the GetBucketLifecycleConfiguration operation.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGETlifecycle.html</p>
    rpc GetBucket(GetBucketRequest) returns (GetBucketLifecycleOutput) {
      option (google.api.http) = {
        get: "//{Bucket}?lifecycle"
        body: "body"
      };
    }
    // Returns the lifecycle configuration information set on the bucket.
    rpc GetBucket(GetBucketRequest) returns (GetBucketLifecycleConfigurationOutput) {
      option (google.api.http) = {
        get: "//{Bucket}?lifecycle#GetBucketLifecycleConfiguration"
        body: "body"
      };
    }
    // Deprecated, see the PutBucketLifecycleConfiguration operation.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketPUTlifecycle.html</p>
    rpc PutBucket(PutBucketRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "//{Bucket}?lifecycle#PutBucketLifecycle"
        body: "body"
      };
    }
    // Sets lifecycle configuration for your bucket. If a lifecycle configuration exists, it replaces it.
    rpc PutBucket(PutBucketRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "//{Bucket}?lifecycle#PutBucketLifecycleConfiguration"
        body: "body"
      };
    }
    // Returns some or all (up to 1000) of the objects in a bucket. You can use the request parameters as selection criteria to return a subset of the objects in a bucket. Note: ListObjectsV2 is the revised List Objects API and we recommend you use this revised API for new application development.
    rpc GetBucket(GetBucketRequest) returns (ListObjectsV2Output) {
      option (google.api.http) = {
        get: "//{Bucket}?list-type=2#ListObjectsV2"
        body: "body"
      };
    }
    // Returns the region the bucket resides in.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGETlocation.html</p>
    rpc GetBucket(GetBucketRequest) returns (GetBucketLocationOutput) {
      option (google.api.http) = {
        get: "//{Bucket}?location#GetBucketLocation"
        body: "body"
      };
    }
    // Returns the logging status of a bucket and the permissions users have to view and modify that status. To use GET, you must be the bucket owner.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGETlogging.html</p>
    rpc GetBucket(GetBucketRequest) returns (GetBucketLoggingOutput) {
      option (google.api.http) = {
        get: "//{Bucket}?logging#GetBucketLogging"
        body: "body"
      };
    }
    // Set the logging parameters for a bucket and to specify permissions for who can view and modify the logging parameters. To set the logging status of a bucket, you must be the bucket owner.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketPUTlogging.html</p>
    rpc PutBucket(PutBucketRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "//{Bucket}?logging#PutBucketLogging"
        body: "body"
      };
    }
    // Deletes a metrics configuration (specified by the metrics configuration ID) from the bucket.
    rpc DeleteBucket(DeleteBucketRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//{Bucket}?metrics"
        body: "body"
      };
    }
    // Gets a metrics configuration (specified by the metrics configuration ID) from the bucket.
    rpc GetBucket(GetBucketRequest) returns (GetBucketMetricsConfigurationOutput) {
      option (google.api.http) = {
        get: "//{Bucket}?metrics#GetBucketMetricsConfiguration"
        body: "body"
      };
    }
    // Lists the metrics configurations for the bucket.
    rpc GetBucket(GetBucketRequest) returns (ListBucketMetricsConfigurationsOutput) {
      option (google.api.http) = {
        get: "//{Bucket}?metrics#ListBucketMetricsConfigurations"
        body: "body"
      };
    }
    // Sets a metrics configuration (specified by the metrics configuration ID) for the bucket.
    rpc PutBucket(PutBucketRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "//{Bucket}?metrics#PutBucketMetricsConfiguration"
        body: "body"
      };
    }
    // Deprecated, see the GetBucketNotificationConfiguration operation.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGETnotification.html</p>
    rpc GetBucket(GetBucketRequest) returns (NotificationConfigurationDeprecated) {
      option (google.api.http) = {
        get: "//{Bucket}?notification#GetBucketNotification"
        body: "body"
      };
    }
    // Returns the notification configuration of a bucket.
    rpc GetBucket(GetBucketRequest) returns (NotificationConfiguration) {
      option (google.api.http) = {
        get: "//{Bucket}?notification#GetBucketNotificationConfiguration"
        body: "body"
      };
    }
    // Deprecated, see the PutBucketNotificationConfiguraiton operation.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketPUTnotification.html</p>
    rpc PutBucket(PutBucketRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "//{Bucket}?notification#PutBucketNotification"
        body: "body"
      };
    }
    // Enables notifications of specified events for a bucket.
    rpc PutBucket(PutBucketRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "//{Bucket}?notification#PutBucketNotificationConfiguration"
        body: "body"
      };
    }
    // Deletes the policy from the bucket.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketDELETEpolicy.html</p>
    rpc DeleteBucket(DeleteBucketRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//{Bucket}?policy"
        body: "body"
      };
    }
    // Returns the policy of a specified bucket.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGETpolicy.html</p>
    rpc GetBucket(GetBucketRequest) returns (GetBucketPolicyOutput) {
      option (google.api.http) = {
        get: "//{Bucket}?policy#GetBucketPolicy"
        body: "body"
      };
    }
    // Replaces a policy on a bucket. If the bucket already has a policy, the one in this request completely replaces it.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketPUTpolicy.html</p>
    rpc PutBucket(PutBucketRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "//{Bucket}?policy#PutBucketPolicy"
        body: "body"
      };
    }
    // Deletes the replication configuration from the bucket.
    rpc DeleteBucket(DeleteBucketRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//{Bucket}?replication"
        body: "body"
      };
    }
    // Returns the replication configuration of a bucket.
    rpc GetBucket(GetBucketRequest) returns (GetBucketReplicationOutput) {
      option (google.api.http) = {
        get: "//{Bucket}?replication#GetBucketReplication"
        body: "body"
      };
    }
    // Creates a new replication configuration (or replaces an existing one, if present).
    rpc PutBucket(PutBucketRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "//{Bucket}?replication#PutBucketReplication"
        body: "body"
      };
    }
    // Returns the request payment configuration of a bucket.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTrequestPaymentGET.html</p>
    rpc GetBucket(GetBucketRequest) returns (GetBucketRequestPaymentOutput) {
      option (google.api.http) = {
        get: "//{Bucket}?requestPayment#GetBucketRequestPayment"
        body: "body"
      };
    }
    // Sets the request payment configuration for a bucket. By default, the bucket owner pays for downloads from the bucket. This configuration parameter enables the bucket owner (only) to specify that the person requesting the download will be charged for the download. Documentation on requester pays buckets can be found at http://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTrequestPaymentPUT.html</p>
    rpc PutBucket(PutBucketRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "//{Bucket}?requestPayment#PutBucketRequestPayment"
        body: "body"
      };
    }
    // Deletes the tags from the bucket.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketDELETEtagging.html</p>
    rpc DeleteBucket(DeleteBucketRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//{Bucket}?tagging"
        body: "body"
      };
    }
    // Returns the tag set associated with the bucket.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGETtagging.html</p>
    rpc GetBucket(GetBucketRequest) returns (GetBucketTaggingOutput) {
      option (google.api.http) = {
        get: "//{Bucket}?tagging#GetBucketTagging"
        body: "body"
      };
    }
    // Sets the tags for a bucket.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketPUTtagging.html</p>
    rpc PutBucket(PutBucketRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "//{Bucket}?tagging#PutBucketTagging"
        body: "body"
      };
    }
    // This operation lists in-progress multipart uploads.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/mpUploadListMPUpload.html</p>
    rpc GetBucket(GetBucketRequest) returns (ListMultipartUploadsOutput) {
      option (google.api.http) = {
        get: "//{Bucket}?uploads#ListMultipartUploads"
        body: "body"
      };
    }
    // Returns the versioning state of a bucket.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGETversioningStatus.html</p>
    rpc GetBucket(GetBucketRequest) returns (GetBucketVersioningOutput) {
      option (google.api.http) = {
        get: "//{Bucket}?versioning#GetBucketVersioning"
        body: "body"
      };
    }
    // Sets the versioning state of an existing bucket. To set the versioning state, you must be the bucket owner.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketPUTVersioningStatus.html</p>
    rpc PutBucket(PutBucketRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "//{Bucket}?versioning#PutBucketVersioning"
        body: "body"
      };
    }
    // Returns metadata about all of the versions of objects in a bucket.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGETVersion.html</p>
    rpc GetBucket(GetBucketRequest) returns (ListObjectVersionsOutput) {
      option (google.api.http) = {
        get: "//{Bucket}?versions#ListObjectVersions"
        body: "body"
      };
    }
    // This operation removes the website configuration from the bucket.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketDELETEwebsite.html</p>
    rpc DeleteBucket(DeleteBucketRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//{Bucket}?website"
        body: "body"
      };
    }
    // Returns the website configuration for a bucket.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGETwebsite.html</p>
    rpc GetBucket(GetBucketRequest) returns (GetBucketWebsiteOutput) {
      option (google.api.http) = {
        get: "//{Bucket}?website#GetBucketWebsite"
        body: "body"
      };
    }
    // Set the website configuration for a bucket.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketPUTwebsite.html</p>
    rpc PutBucket(PutBucketRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "//{Bucket}?website#PutBucketWebsite"
        body: "body"
      };
    }
}

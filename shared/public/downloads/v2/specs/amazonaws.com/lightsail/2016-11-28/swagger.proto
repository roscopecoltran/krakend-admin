syntax = "proto3";

import "google/api/annotations.proto";

package amazonlightsail;

message PostRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AllocateStaticIpRequest body = 10;
}

message Post#AttachStaticIpRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AttachStaticIpRequest body = 10;
}

message Post#CloseInstancePublicPortsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CloseInstancePublicPortsRequest body = 10;
}

message Post#CreateDomainRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateDomainRequest body = 10;
}

message Post#CreateDomainEntryRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateDomainEntryRequest body = 10;
}

message Post#CreateInstanceSnapshotRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateInstanceSnapshotRequest body = 10;
}

message Post#CreateInstancesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateInstancesRequest body = 10;
}

message Post#CreateInstancesFromSnapshotRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateInstancesFromSnapshotRequest body = 10;
}

message Post#CreateKeyPairRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateKeyPairRequest body = 10;
}

message Post#DeleteDomainRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteDomainRequest body = 10;
}

message Post#DeleteDomainEntryRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteDomainEntryRequest body = 10;
}

message Post#DeleteInstanceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteInstanceRequest body = 10;
}

message Post#DeleteInstanceSnapshotRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteInstanceSnapshotRequest body = 10;
}

message Post#DeleteKeyPairRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteKeyPairRequest body = 10;
}

message Post#DetachStaticIpRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DetachStaticIpRequest body = 10;
}

message Post#DownloadDefaultKeyPairRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DownloadDefaultKeyPairRequest body = 10;
}

message Post#GetActiveNamesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetActiveNamesRequest body = 10;
}

message Post#GetBlueprintsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetBlueprintsRequest body = 10;
}

message Post#GetBundlesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetBundlesRequest body = 10;
}

message Post#GetDomainRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetDomainRequest body = 10;
}

message Post#GetDomainsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetDomainsRequest body = 10;
}

message Post#GetInstanceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetInstanceRequest body = 10;
}

message Post#GetInstanceAccessDetailsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetInstanceAccessDetailsRequest body = 10;
}

message Post#GetInstanceMetricDataRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetInstanceMetricDataRequest body = 10;
}

message Post#GetInstancePortStatesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetInstancePortStatesRequest body = 10;
}

message Post#GetInstanceSnapshotRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetInstanceSnapshotRequest body = 10;
}

message Post#GetInstanceSnapshotsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetInstanceSnapshotsRequest body = 10;
}

message Post#GetInstanceStateRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetInstanceStateRequest body = 10;
}

message Post#GetInstancesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetInstancesRequest body = 10;
}

message Post#GetKeyPairRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetKeyPairRequest body = 10;
}

message Post#GetKeyPairsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetKeyPairsRequest body = 10;
}

message Post#GetOperationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetOperationRequest body = 10;
}

message Post#GetOperationsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetOperationsRequest body = 10;
}

message Post#GetOperationsForResourceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetOperationsForResourceRequest body = 10;
}

message Post#GetRegionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetRegionsRequest body = 10;
}

message Post#GetStaticIpRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetStaticIpRequest body = 10;
}

message Post#GetStaticIpsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetStaticIpsRequest body = 10;
}

message Post#ImportKeyPairRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ImportKeyPairRequest body = 10;
}

message Post#IsVpcPeeredRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    IsVpcPeeredRequest body = 10;
}

message Post#OpenInstancePublicPortsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    OpenInstancePublicPortsRequest body = 10;
}

message Post#PeerVpcRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    PeerVpcRequest body = 10;
}

message Post#PutInstancePublicPortsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    PutInstancePublicPortsRequest body = 10;
}

message Post#RebootInstanceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RebootInstanceRequest body = 10;
}

message Post#ReleaseStaticIpRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ReleaseStaticIpRequest body = 10;
}

message Post#StartInstanceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StartInstanceRequest body = 10;
}

message Post#StopInstanceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StopInstanceRequest body = 10;
}

message Post#UnpeerVpcRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UnpeerVpcRequest body = 10;
}

message Post#UpdateDomainEntryRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateDomainEntryRequest body = 10;
}

message AccessDeniedException {
    string code = 1;
    string docs = 2;
    string message = 3;
    string tip = 4;
}

enum AccessDirection {
    INBOUND = 0;
    OUTBOUND = 1;
}

message AccountSetupInProgressException {
    string code = 1;
    string docs = 2;
    string message = 3;
    string tip = 4;
}

message AllocateStaticIpRequest {
    // The name of the static IP address.
    string staticIpName = 1;
}

message AllocateStaticIpResult {
    // An array of key-value pairs containing information about the static IP address you allocated.
    array operations = 1;
}

message AttachStaticIpRequest {
    // The instance name to which you want to attach the static IP address.
    string instanceName = 1;
    // The name of the static IP.
    string staticIpName = 2;
}

message AttachStaticIpResult {
    // An array of key-value pairs containing information about your API operations.
    array operations = 1;
}

message AvailabilityZone {
    // The state of the Availability Zone.
    string state = 1;
    // The name of the Availability Zone. The format is <code>us-east-1a</code> (case-sensitive).
    string zoneName = 2;
}

repeated AvailabilityZone AvailabilityZoneList = 1



message Blueprint {
    // The ID for the virtual private server image (e.g., <code>app_wordpress_4_4</code> or <code>app_lamp_7_0</code>).
    string blueprintId = 1;
    // The description of the blueprint.
    string description = 2;
    // The group name of the blueprint (e.g., <code>amazon-linux</code>).
    string group = 3;
    // A Boolean value indicating whether the blueprint is active. When you update your blueprints, you will inactivate old blueprints and keep the most recent versions active.
    boolean isActive = 4;
    // The end-user license agreement URL for the image or blueprint.
    string licenseUrl = 5;
    // The minimum machine size required to run this blueprint. <code>0</code> indicates that the blueprint runs on all instances.
    integer minPower = 6;
    // The friendly name of the blueprint (e.g., <code>Amazon Linux</code>).
    string name = 7;
    // The product URL to learn more about the image or blueprint.
    string productUrl = 8;
    // The type of the blueprint (e.g., <code>os</code> or <code>app</code>).
    BlueprintType type = 9;
    // The version number of the operating system, application, or stack (e.g., <code>2016.03.0</code>).
    string version = 10;
    // The version code.
    string versionCode = 11;
}

repeated Blueprint BlueprintList = 1

enum BlueprintType {
    OS = 0;
    APP = 1;
}

message Bundle {
    // The bundle ID (e.g., <code>micro_1_0</code>).
    string bundleId = 1;
    // The number of vCPUs included in the bundle (e.g., <code>2</code>).
    integer cpuCount = 2;
    // The size of the SSD (e.g., <code>30</code>).
    integer diskSizeInGb = 3;
    // The Amazon EC2 instance type (e.g., <code>t2.micro</code>).
    string instanceType = 4;
    // A Boolean value indicating whether the bundle is active.
    boolean isActive = 5;
    // A friendly name for the bundle (e.g., <code>Micro</code>).
    string name = 6;
    // The power of the bundle (e.g., <code>500</code>).
    integer power = 7;
    // The price in US dollars (e.g., <code>5.0</code>).
    number price = 8;
    // The amount of RAM in GB (e.g., <code>2.0</code>).
    number ramSizeInGb = 9;
    // The data transfer rate per month in GB (e.g., <code>2000</code>).
    integer transferPerMonthInGb = 10;
}

repeated Bundle BundleList = 1

message CloseInstancePublicPortsRequest {
    // The name of the instance on which you're attempting to close the public ports.
    string instanceName = 1;
    // Information about the public port you are trying to close.
    PortInfo portInfo = 2;
}

message CloseInstancePublicPortsResult {
    // An array of key-value pairs that contains information about the operation.
    Operation operation = 1;
}

message CreateDomainEntryRequest {
    // An array of key-value pairs containing information about the domain entry request.
    DomainEntry domainEntry = 1;
    // The domain name (e.g., <code>example.com</code>) for which you want to create the domain entry.
    string domainName = 2;
}

message CreateDomainEntryResult {
    // An array of key-value pairs containing information about the operation.
    Operation operation = 1;
}

message CreateDomainRequest {
    // <p>The domain name to manage (e.g., <code>example.com</code>).</p> <note> <p>You cannot register a new domain name using Lightsail. You must register a domain name using Amazon Route 53 or another domain name registrar. If you have already registered your domain, you can enter its name in this parameter to manage the DNS records for that domain.</p> </note>
    string domainName = 1;
}

message CreateDomainResult {
    // An array of key-value pairs containing information about the domain resource you created.
    Operation operation = 1;
}

message CreateInstanceSnapshotRequest {
    // The Lightsail instance on which to base your snapshot.
    string instanceName = 1;
    // The name for your new snapshot.
    string instanceSnapshotName = 2;
}

message CreateInstanceSnapshotResult {
    // An array of key-value pairs containing information about the results of your create instances snapshot request.
    array operations = 1;
}

message CreateInstancesFromSnapshotRequest {
    // The Availability Zone where you want to create your instances. Use the following formatting: <code>us-east-1a</code> (case sensitive). You can get a list of availability zones by using the <a href="http://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetRegions.html">get regions</a> operation. Be sure to add the <code>include availability zones</code> parameter to your request.
    string availabilityZone = 1;
    // The bundle of specification information for your virtual private server (or <i>instance</i>), including the pricing plan (e.g., <code>micro_1_0</code>).
    string bundleId = 2;
    // The names for your new instances.
    array instanceNames = 3;
    // The name of the instance snapshot on which you are basing your new instances. Use the get instance snapshots operation to return information about your existing snapshots.
    string instanceSnapshotName = 4;
    // The name for your key pair.
    string keyPairName = 5;
    // <p>You can create a launch script that configures a server with additional user data. For example, <code>apt-get –y update</code>.</p> <note> <p>Depending on the machine image you choose, the command to get software on your instance varies. Amazon Linux and CentOS use <code>yum</code>, Debian and Ubuntu use <code>apt-get</code>, and FreeBSD uses <code>pkg</code>. For a complete list, see the <a href="http://lightsail.aws.amazon.com/ls/docs/getting-started/articles/pre-installed-apps">Dev Guide</a>.</p> </note>
    string userData = 6;
}

message CreateInstancesFromSnapshotResult {
    // An array of key-value pairs containing information about the results of your create instances from snapshot request.
    array operations = 1;
}

message CreateInstancesRequest {
    // The Availability Zone in which to create your instance. Use the following format: <code>us-east-1a</code> (case sensitive). You can get a list of availability zones by using the <a href="http://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetRegions.html">get regions</a> operation. Be sure to add the <code>include availability zones</code> parameter to your request.
    string availabilityZone = 1;
    // The ID for a virtual private server image (e.g., <code>app_wordpress_4_4</code> or <code>app_lamp_7_0</code>). Use the get blueprints operation to return a list of available images (or <i>blueprints</i>).
    string blueprintId = 2;
    // The bundle of specification information for your virtual private server (or <i>instance</i>), including the pricing plan (e.g., <code>micro_1_0</code>).
    string bundleId = 3;
    // <p>(Deprecated) The name for your custom image.</p> <note> <p>In releases prior to June 12, 2017, this parameter was ignored by the API. It is now deprecated.</p> </note>
    string customImageName = 4;
    // The names to use for your new Lightsail instances. Separate multiple values using quotation marks and commas, for example: <code>["MyFirstInstance","MySecondInstance"]</code>
    array instanceNames = 5;
    // The name of your key pair.
    string keyPairName = 6;
    // <p>A launch script you can create that configures a server with additional user data. For example, you might want to run <code>apt-get –y update</code>.</p> <note> <p>Depending on the machine image you choose, the command to get software on your instance varies. Amazon Linux and CentOS use <code>yum</code>, Debian and Ubuntu use <code>apt-get</code>, and FreeBSD uses <code>pkg</code>. For a complete list, see the <a href="http://lightsail.aws.amazon.com/ls/docs/getting-started/articles/pre-installed-apps">Dev Guide</a>.</p> </note>
    string userData = 7;
}

message CreateInstancesResult {
    // An array of key-value pairs containing information about the results of your create instances request.
    array operations = 1;
}

message CreateKeyPairRequest {
    // The name for your new key pair.
    string keyPairName = 1;
}

message CreateKeyPairResult {
    // An array of key-value pairs containing information about the new key pair you just created.
    KeyPair keyPair = 1;
    // An array of key-value pairs containing information about the results of your create key pair request.
    Operation operation = 2;
    // A base64-encoded RSA private key.
    string privateKeyBase64 = 3;
    // A base64-encoded public key of the <code>ssh-rsa</code> type.
    string publicKeyBase64 = 4;
}

message DeleteDomainEntryRequest {
    // An array of key-value pairs containing information about your domain entries.
    DomainEntry domainEntry = 1;
    // The name of the domain entry to delete.
    string domainName = 2;
}

message DeleteDomainEntryResult {
    // An array of key-value pairs containing information about the results of your delete domain entry request.
    Operation operation = 1;
}

message DeleteDomainRequest {
    // The specific domain name to delete.
    string domainName = 1;
}

message DeleteDomainResult {
    // An array of key-value pairs containing information about the results of your delete domain request.
    Operation operation = 1;
}

message DeleteInstanceRequest {
    // The name of the instance to delete.
    string instanceName = 1;
}

message DeleteInstanceResult {
    // An array of key-value pairs containing information about the results of your delete instance request.
    array operations = 1;
}

message DeleteInstanceSnapshotRequest {
    // The name of the snapshot to delete.
    string instanceSnapshotName = 1;
}

message DeleteInstanceSnapshotResult {
    // An array of key-value pairs containing information about the results of your delete instance snapshot request.
    array operations = 1;
}

message DeleteKeyPairRequest {
    // The name of the key pair to delete.
    string keyPairName = 1;
}

message DeleteKeyPairResult {
    // An array of key-value pairs containing information about the results of your delete key pair request.
    Operation operation = 1;
}

message DetachStaticIpRequest {
    // The name of the static IP to detach from the instance.
    string staticIpName = 1;
}

message DetachStaticIpResult {
    // An array of key-value pairs containing information about the results of your detach static IP request.
    array operations = 1;
}

message Disk {
    // The Amazon Resource Name (ARN) of the disk.
    string arn = 1;
    // The resources to which the disk is attached.
    string attachedTo = 2;
    // The attachment state of the disk.
    string attachmentState = 3;
    // The date when the disk was created.
    string createdAt = 4;
    // The number of GB in use by the disk.
    integer gbInUse = 5;
    // The input/output operations per second (IOPS) of the disk.
    integer iops = 6;
    // A Boolean value indicating whether the disk is attached.
    boolean isAttached = 7;
    // A Boolean value indicating whether this disk is a system disk (has an operating system loaded on it).
    boolean isSystemDisk = 8;
    // The region and Availability Zone where the disk is located.
    ResourceLocation location = 9;
    // The name of the disk.
    string name = 10;
    // The disk path.
    string path = 11;
    // The resource type of the disk.
    ResourceType resourceType = 12;
    // The size of the disk in GB.
    integer sizeInGb = 13;
    // The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
    string supportCode = 14;
}

repeated Disk DiskList = 1

message Domain {
    // The Amazon Resource Name (ARN) of the domain recordset (e.g., <code>arn:aws:lightsail:global:123456789101:Domain/824cede0-abc7-4f84-8dbc-12345EXAMPLE</code>).
    string arn = 1;
    // The date when the domain recordset was created.
    string createdAt = 2;
    // An array of key-value pairs containing information about the domain entries.
    array domainEntries = 3;
    // The AWS Region and Availability Zones where the domain recordset was created.
    ResourceLocation location = 4;
    // The name of the domain.
    string name = 5;
    // The resource type.
    ResourceType resourceType = 6;
    // The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
    string supportCode = 7;
}

message DomainEntry {
    // The ID of the domain recordset entry.
    string id = 1;
    // The name of the domain.
    string name = 2;
    // The options for the domain entry.
    array options = 3;
    // The target AWS name server (e.g., <code>ns-111.awsdns-22.com.</code>).
    string target = 4;
    // The type of domain entry (e.g., <code>SOA</code> or <code>NS</code>).
    string type = 5;
}

repeated DomainEntry DomainEntryList = 1

message DomainEntryOption {
    string key = 1;
    string value = 2;
}
repeated DomainEntryOption DomainEntryOptions = 1





repeated Domain DomainList = 1



message DownloadDefaultKeyPairRequest {
}

message DownloadDefaultKeyPairResult {
    // A base64-encoded RSA private key.
    string privateKeyBase64 = 1;
    // A base64-encoded public key of the <code>ssh-rsa</code> type.
    string publicKeyBase64 = 2;
}

message GetActiveNamesRequest {
    // A token used for paginating results from your get active names request.
    string pageToken = 1;
}

message GetActiveNamesResult {
    // The list of active names returned by the get active names request.
    array activeNames = 1;
    // A token used for advancing to the next page of results from your get active names request.
    string nextPageToken = 2;
}

message GetBlueprintsRequest {
    // A Boolean value indicating whether to include inactive results in your request.
    boolean includeInactive = 1;
    // A token used for advancing to the next page of results from your get blueprints request.
    string pageToken = 2;
}

message GetBlueprintsResult {
    // An array of key-value pairs that contains information about the available blueprints.
    array blueprints = 1;
    // A token used for advancing to the next page of results from your get blueprints request.
    string nextPageToken = 2;
}

message GetBundlesRequest {
    // A Boolean value that indicates whether to include inactive bundle results in your request.
    boolean includeInactive = 1;
    // A token used for advancing to the next page of results from your get bundles request.
    string pageToken = 2;
}

message GetBundlesResult {
    // An array of key-value pairs that contains information about the available bundles.
    array bundles = 1;
    // A token used for advancing to the next page of results from your get active names request.
    string nextPageToken = 2;
}

message GetDomainRequest {
    // The domain name for which your want to return information about.
    string domainName = 1;
}

message GetDomainResult {
    // An array of key-value pairs containing information about your get domain request.
    Domain domain = 1;
}

message GetDomainsRequest {
    // A token used for advancing to the next page of results from your get domains request.
    string pageToken = 1;
}

message GetDomainsResult {
    // An array of key-value pairs containing information about each of the domain entries in the user's account.
    array domains = 1;
    // A token used for advancing to the next page of results from your get active names request.
    string nextPageToken = 2;
}

message GetInstanceAccessDetailsRequest {
    // The name of the instance to access.
    string instanceName = 1;
    // The protocol to use to connect to your instance. Defaults to <code>ssh</code>.
    InstanceAccessProtocol protocol = 2;
}

message GetInstanceAccessDetailsResult {
    // An array of key-value pairs containing information about a get instance access request.
    InstanceAccessDetails accessDetails = 1;
}

message GetInstanceMetricDataRequest {
    // The end time of the time period.
    string endTime = 1;
    // The name of the instance for which you want to get metrics data.
    string instanceName = 2;
    // The metric name to get data about.
    InstanceMetricName metricName = 3;
    // The time period for which you are requesting data.
    integer period = 4;
    // The start time of the time period.
    string startTime = 5;
    // The instance statistics.
    array statistics = 6;
    // The unit. The list of valid values is below.
    MetricUnit unit = 7;
}

message GetInstanceMetricDataResult {
    // An array of key-value pairs containing information about the results of your get instance metric data request.
    array metricData = 1;
    // The metric name to return data for.
    InstanceMetricName metricName = 2;
}

message GetInstancePortStatesRequest {
    // The name of the instance.
    string instanceName = 1;
}

message GetInstancePortStatesResult {
    // Information about the port states resulting from your request.
    array portStates = 1;
}

message GetInstanceRequest {
    // The name of the instance.
    string instanceName = 1;
}

message GetInstanceResult {
    // An array of key-value pairs containing information about the specified instance.
    Instance instance = 1;
}

message GetInstanceSnapshotRequest {
    // The name of the snapshot for which you are requesting information.
    string instanceSnapshotName = 1;
}

message GetInstanceSnapshotResult {
    // An array of key-value pairs containing information about the results of your get instance snapshot request.
    InstanceSnapshot instanceSnapshot = 1;
}

message GetInstanceSnapshotsRequest {
    // A token used for advancing to the next page of results from your get instance snapshots request.
    string pageToken = 1;
}

message GetInstanceSnapshotsResult {
    // An array of key-value pairs containing information about the results of your get instance snapshots request.
    array instanceSnapshots = 1;
    // A token used for advancing to the next page of results from your get instance snapshots request.
    string nextPageToken = 2;
}

message GetInstanceStateRequest {
    // The name of the instance to get state information about.
    string instanceName = 1;
}

message GetInstanceStateResult {
    // The state of the instance.
    InstanceState state = 1;
}

message GetInstancesRequest {
    // A token used for advancing to the next page of results from your get instances request.
    string pageToken = 1;
}

message GetInstancesResult {
    // An array of key-value pairs containing information about your instances.
    array instances = 1;
    // A token used for advancing to the next page of results from your get instances request.
    string nextPageToken = 2;
}

message GetKeyPairRequest {
    // The name of the key pair for which you are requesting information.
    string keyPairName = 1;
}

message GetKeyPairResult {
    // An array of key-value pairs containing information about the key pair.
    KeyPair keyPair = 1;
}

message GetKeyPairsRequest {
    // A token used for advancing to the next page of results from your get key pairs request.
    string pageToken = 1;
}

message GetKeyPairsResult {
    // An array of key-value pairs containing information about the key pairs.
    array keyPairs = 1;
    // A token used for advancing to the next page of results from your get key pairs request.
    string nextPageToken = 2;
}

message GetOperationRequest {
    // A GUID used to identify the operation.
    string operationId = 1;
}

message GetOperationResult {
    // An array of key-value pairs containing information about the results of your get operation request.
    Operation operation = 1;
}

message GetOperationsForResourceRequest {
    // A token used for advancing to the next page of results from your get operations for resource request.
    string pageToken = 1;
    // The name of the resource for which you are requesting information.
    string resourceName = 2;
}

message GetOperationsForResourceResult {
    // <p>(Deprecated) Returns the number of pages of results that remain.</p> <note> <p>In releases prior to June 12, 2017, this parameter returned <code>null</code> by the API. It is now deprecated, and the API returns the <code>nextPageToken</code> parameter instead.</p> </note>
    string nextPageCount = 1;
    // An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    string nextPageToken = 2;
    // An array of key-value pairs containing information about the results of your get operations for resource request.
    array operations = 3;
}

message GetOperationsRequest {
    // A token used for advancing to the next page of results from your get operations request.
    string pageToken = 1;
}

message GetOperationsResult {
    // A token used for advancing to the next page of results from your get operations request.
    string nextPageToken = 1;
    // An array of key-value pairs containing information about the results of your get operations request.
    array operations = 2;
}

message GetRegionsRequest {
    // A Boolean value indicating whether to also include Availability Zones in your get regions request. Availability Zones are indicated with a letter: e.g., <code>us-east-1a</code>.
    boolean includeAvailabilityZones = 1;
}

message GetRegionsResult {
    // An array of key-value pairs containing information about your get regions request.
    array regions = 1;
}

message GetStaticIpRequest {
    // The name of the static IP in Lightsail.
    string staticIpName = 1;
}

message GetStaticIpResult {
    // An array of key-value pairs containing information about the requested static IP.
    StaticIp staticIp = 1;
}

message GetStaticIpsRequest {
    // A token used for advancing to the next page of results from your get static IPs request.
    string pageToken = 1;
}

message GetStaticIpsResult {
    // A token used for advancing to the next page of results from your get static IPs request.
    string nextPageToken = 1;
    // An array of key-value pairs containing information about your get static IPs request.
    array staticIps = 2;
}

message ImportKeyPairRequest {
    // The name of the key pair for which you want to import the public key.
    string keyPairName = 1;
    // A base64-encoded public key of the <code>ssh-rsa</code> type.
    string publicKeyBase64 = 2;
}

message ImportKeyPairResult {
    // An array of key-value pairs containing information about the request operation.
    Operation operation = 1;
}

message Instance {
    // The Amazon Resource Name (ARN) of the instance (e.g., <code>arn:aws:lightsail:us-east-1:123456789101:Instance/244ad76f-8aad-4741-809f-12345EXAMPLE</code>).
    string arn = 1;
    // The blueprint ID (e.g., <code>os_amlinux_2016_03</code>).
    string blueprintId = 2;
    // The friendly name of the blueprint (e.g., <code>Amazon Linux</code>).
    string blueprintName = 3;
    // The bundle for the instance (e.g., <code>micro_1_0</code>).
    string bundleId = 4;
    // The timestamp when the instance was created (e.g., <code>1479734909.17</code>).
    string createdAt = 5;
    // The size of the vCPU and the amount of RAM for the instance.
    InstanceHardware hardware = 6;
    // The IPv6 address of the instance.
    string ipv6Address = 7;
    // A Boolean value indicating whether this instance has a static IP assigned to it.
    boolean isStaticIp = 8;
    // The region name and availability zone where the instance is located.
    ResourceLocation location = 9;
    // The name the user gave the instance (e.g., <code>Amazon_Linux-1GB-Virginia-1</code>).
    string name = 10;
    // Information about the public ports and monthly data transfer rates for the instance.
    InstanceNetworking networking = 11;
    // The private IP address of the instance.
    string privateIpAddress = 12;
    // The public IP address of the instance.
    string publicIpAddress = 13;
    // The type of resource (usually <code>Instance</code>).
    ResourceType resourceType = 14;
    // The name of the SSH key being used to connect to the instance (e.g., <code>LightsailDefaultKeyPair</code>).
    string sshKeyName = 15;
    // The status code and the state (e.g., <code>running</code>) for the instance.
    InstanceState state = 16;
    // The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
    string supportCode = 17;
    // The user name for connecting to the instance (e.g., <code>ec2-user</code>).
    string username = 18;
}

message InstanceAccessDetails {
    // For SSH access, the public key to use when accessing your instance For OpenSSH clients (e.g., command line SSH), you should save this value to <code>tempkey-cert.pub</code>.
    string certKey = 1;
    // For SSH access, the date on which the temporary keys expire.
    string expiresAt = 2;
    // The name of this Amazon Lightsail instance.
    string instanceName = 3;
    // The public IP address of the Amazon Lightsail instance.
    string ipAddress = 4;
    // For RDP access, the temporary password of the Amazon EC2 instance.
    string password = 5;
    // For SSH access, the temporary private key. For OpenSSH clients (e.g., command line SSH), you should save this value to <code>tempkey</code>).
    string privateKey = 6;
    // The protocol for these Amazon Lightsail instance access details.
    InstanceAccessProtocol protocol = 7;
    // The user name to use when logging in to the Amazon Lightsail instance.
    string username = 8;
}

enum InstanceAccessProtocol {
    SSH = 0;
    RDP = 1;
}

message InstanceHardware {
    // The number of vCPUs the instance has.
    integer cpuCount = 1;
    // The disks attached to the instance.
    array disks = 2;
    // The amount of RAM in GB on the instance (e.g., <code>1.0</code>).
    number ramSizeInGb = 3;
}

repeated Instance InstanceList = 1

enum InstanceMetricName {
    CPUUTILIZATION = 0;
    NETWORKIN = 1;
    NETWORKOUT = 2;
    STATUSCHECKFAILED = 3;
    STATUSCHECKFAILED_INSTANCE = 4;
    STATUSCHECKFAILED_SYSTEM = 5;
}

message InstanceNetworking {
    // The amount of data in GB allocated for monthly data transfers.
    MonthlyTransfer monthlyTransfer = 1;
    // An array of key-value pairs containing information about the ports on the instance.
    array ports = 2;
}

message InstancePortInfo {
    // The access direction (<code>inbound</code> or <code>outbound</code>).
    AccessDirection accessDirection = 1;
    // The location from which access is allowed (e.g., <code>Anywhere (0.0.0.0/0)</code>).
    string accessFrom = 2;
    // The type of access (<code>Public</code> or <code>Private</code>).
    PortAccessType accessType = 3;
    // The common name.
    string commonName = 4;
    // The first port in the range.
    integer fromPort = 5;
    // <p>The protocol being used. Can be one of the following.</p> <ul> <li> <p> <code>tcp</code> - Transmission Control Protocol (TCP) provides reliable, ordered, and error-checked delivery of streamed data between applications running on hosts communicating by an IP network. If you have an application that doesn't require reliable data stream service, use UDP instead.</p> </li> <li> <p> <code>all</code> - All transport layer protocol types. For more general information, see <a href="https://en.wikipedia.org/wiki/Transport_layer">Transport layer</a> on Wikipedia.</p> </li> <li> <p> <code>udp</code> - With User Datagram Protocol (UDP), computer applications can send messages (or datagrams) to other hosts on an Internet Protocol (IP) network. Prior communications are not required to set up transmission channels or data paths. Applications that don't require reliable data stream service can use UDP, which provides a connectionless datagram service that emphasizes reduced latency over reliability. If you do require reliable data stream service, use TCP instead.</p> </li> </ul>
    NetworkProtocol protocol = 6;
    // The last port in the range.
    integer toPort = 7;
}

repeated InstancePortInfo InstancePortInfoList = 1

message InstancePortState {
    // The first port in the range.
    integer fromPort = 1;
    // <p>The protocol being used. Can be one of the following.</p> <ul> <li> <p> <code>tcp</code> - Transmission Control Protocol (TCP) provides reliable, ordered, and error-checked delivery of streamed data between applications running on hosts communicating by an IP network. If you have an application that doesn't require reliable data stream service, use UDP instead.</p> </li> <li> <p> <code>all</code> - All transport layer protocol types. For more general information, see <a href="https://en.wikipedia.org/wiki/Transport_layer">Transport layer</a> on Wikipedia.</p> </li> <li> <p> <code>udp</code> - With User Datagram Protocol (UDP), computer applications can send messages (or datagrams) to other hosts on an Internet Protocol (IP) network. Prior communications are not required to set up transmission channels or data paths. Applications that don't require reliable data stream service can use UDP, which provides a connectionless datagram service that emphasizes reduced latency over reliability. If you do require reliable data stream service, use TCP instead.</p> </li> </ul>
    NetworkProtocol protocol = 2;
    // Specifies whether the instance port is <code>open</code> or <code>closed</code>.
    PortState state = 3;
    // The last port in the range.
    integer toPort = 4;
}

repeated InstancePortState InstancePortStateList = 1

message InstanceSnapshot {
    // The Amazon Resource Name (ARN) of the snapshot (e.g., <code>arn:aws:lightsail:us-east-1:123456789101:InstanceSnapshot/d23b5706-3322-4d83-81e5-12345EXAMPLE</code>).
    string arn = 1;
    // The timestamp when the snapshot was created (e.g., <code>1479907467.024</code>).
    string createdAt = 2;
    // The blueprint ID from which you created the snapshot (e.g., <code>os_debian_8_3</code>). A blueprint is a virtual private server (or <i>instance</i>) image used to create instances quickly.
    string fromBlueprintId = 3;
    // The bundle ID from which you created the snapshot (e.g., <code>micro_1_0</code>).
    string fromBundleId = 4;
    // The Amazon Resource Name (ARN) of the instance from which the snapshot was created (e.g., <code>arn:aws:lightsail:us-east-1:123456789101:Instance/64b8404c-ccb1-430b-8daf-12345EXAMPLE</code>).
    string fromInstanceArn = 5;
    // The instance from which the snapshot was created.
    string fromInstanceName = 6;
    // The region name and availability zone where you created the snapshot.
    ResourceLocation location = 7;
    // The name of the snapshot.
    string name = 8;
    // The progress of the snapshot.
    string progress = 9;
    // The type of resource (usually <code>InstanceSnapshot</code>).
    ResourceType resourceType = 10;
    // The size in GB of the SSD.
    integer sizeInGb = 11;
    // The state the snapshot is in.
    InstanceSnapshotState state = 12;
    // The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
    string supportCode = 13;
}

repeated InstanceSnapshot InstanceSnapshotList = 1

enum InstanceSnapshotState {
    PENDING = 0;
    ERROR = 1;
    AVAILABLE = 2;
}

message InstanceState {
    // The status code for the instance.
    integer code = 1;
    // The state of the instance (e.g., <code>running</code> or <code>pending</code>).
    string name = 2;
}

message InvalidInputException {
    string code = 1;
    string docs = 2;
    string message = 3;
    string tip = 4;
}

message IsVpcPeeredRequest {
}

message IsVpcPeeredResult {
    // Returns <code>true</code> if the Lightsail VPC is peered; otherwise, <code>false</code>.
    boolean isPeered = 1;
}

message KeyPair {
    // The Amazon Resource Name (ARN) of the key pair (e.g., <code>arn:aws:lightsail:us-east-1:123456789101:KeyPair/05859e3d-331d-48ba-9034-12345EXAMPLE</code>).
    string arn = 1;
    // The timestamp when the key pair was created (e.g., <code>1479816991.349</code>).
    string createdAt = 2;
    // The RSA fingerprint of the key pair.
    string fingerprint = 3;
    // The region name and Availability Zone where the key pair was created.
    ResourceLocation location = 4;
    // The friendly name of the SSH key pair.
    string name = 5;
    // The resource type (usually <code>KeyPair</code>).
    ResourceType resourceType = 6;
    // The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
    string supportCode = 7;
}

repeated KeyPair KeyPairList = 1

message MetricDatapoint {
    // The average.
    number average = 1;
    // The maximum.
    number maximum = 2;
    // The minimum.
    number minimum = 3;
    // The sample count.
    number sampleCount = 4;
    // The sum.
    number sum = 5;
    // The timestamp (e.g., <code>1479816991.349</code>).
    string timestamp = 6;
    // The unit.
    MetricUnit unit = 7;
}

repeated MetricDatapoint MetricDatapointList = 1



enum MetricStatistic {
    MINIMUM = 0;
    MAXIMUM = 1;
    SUM = 2;
    AVERAGE = 3;
    SAMPLECOUNT = 4;
}

repeated MetricStatistic MetricStatisticList = 1

enum MetricUnit {
    SECONDS = 0;
    MICROSECONDS = 1;
    MILLISECONDS = 2;
    BYTES = 3;
    KILOBYTES = 4;
    MEGABYTES = 5;
    GIGABYTES = 6;
    TERABYTES = 7;
    BITS = 8;
    KILOBITS = 9;
    MEGABITS = 10;
    GIGABITS = 11;
    TERABITS = 12;
    PERCENT = 13;
    COUNT = 14;
    BYTESSECOND = 15;
    KILOBYTESSECOND = 16;
    MEGABYTESSECOND = 17;
    GIGABYTESSECOND = 18;
    TERABYTESSECOND = 19;
    BITSSECOND = 20;
    KILOBITSSECOND = 21;
    MEGABITSSECOND = 22;
    GIGABITSSECOND = 23;
    TERABITSSECOND = 24;
    COUNTSECOND = 25;
    NONE = 26;
}

message MonthlyTransfer {
    // The amount allocated per month (in GB).
    integer gbPerMonthAllocated = 1;
}

enum NetworkProtocol {
    TCP = 0;
    ALL = 1;
    UDP = 2;
}

message NotFoundException {
    string code = 1;
    string docs = 2;
    string message = 3;
    string tip = 4;
}

message OpenInstancePublicPortsRequest {
    // The name of the instance for which you want to open the public ports.
    string instanceName = 1;
    // An array of key-value pairs containing information about the port mappings.
    PortInfo portInfo = 2;
}

message OpenInstancePublicPortsResult {
    // An array of key-value pairs containing information about the request operation.
    Operation operation = 1;
}

message Operation {
    // The timestamp when the operation was initialized (e.g., <code>1479816991.349</code>).
    string createdAt = 1;
    // The error code.
    string errorCode = 2;
    // The error details.
    string errorDetails = 3;
    // The ID of the operation.
    string id = 4;
    // A Boolean value indicating whether the operation is terminal.
    boolean isTerminal = 5;
    // The region and Availability Zone.
    ResourceLocation location = 6;
    // Details about the operation (e.g., <code>Debian-1GB-Virginia-1</code>).
    string operationDetails = 7;
    // The type of operation.
    OperationType operationType = 8;
    // The resource name.
    string resourceName = 9;
    // The resource type.
    ResourceType resourceType = 10;
    // The status of the operation.
    OperationStatus status = 11;
    // The timestamp when the status was changed (e.g., <code>1479816991.349</code>).
    string statusChangedAt = 12;
}

message OperationFailureException {
    string code = 1;
    string docs = 2;
    string message = 3;
    string tip = 4;
}

repeated Operation OperationList = 1

enum OperationStatu {
    NOTSTARTED = 0;
    STARTED = 1;
    FAILED = 2;
    COMPLETED = 3;
}

enum OperationType {
    DELETEINSTANCE = 0;
    CREATEINSTANCE = 1;
    STOPINSTANCE = 2;
    STARTINSTANCE = 3;
    REBOOTINSTANCE = 4;
    OPENINSTANCEPUBLICPORTS = 5;
    PUTINSTANCEPUBLICPORTS = 6;
    CLOSEINSTANCEPUBLICPORTS = 7;
    ALLOCATESTATICIP = 8;
    RELEASESTATICIP = 9;
    ATTACHSTATICIP = 10;
    DETACHSTATICIP = 11;
    UPDATEDOMAINENTRY = 12;
    DELETEDOMAINENTRY = 13;
    CREATEDOMAIN = 14;
    DELETEDOMAIN = 15;
    CREATEINSTANCESNAPSHOT = 16;
    DELETEINSTANCESNAPSHOT = 17;
    CREATEINSTANCESFROMSNAPSHOT = 18;
}

message PeerVpcRequest {
}

message PeerVpcResult {
    // An array of key-value pairs containing information about the request operation.
    Operation operation = 1;
}

enum PortAccessType {
    PUBLIC = 0;
    PRIVATE = 1;
}

message PortInfo {
    // The first port in the range.
    integer fromPort = 1;
    // The protocol.
    NetworkProtocol protocol = 2;
    // The last port in the range.
    integer toPort = 3;
}

repeated PortInfo PortInfoList = 1

enum PortState {
    OPEN = 0;
    CLOSED = 1;
}

message PutInstancePublicPortsRequest {
    // The Lightsail instance name of the public port(s) you are setting.
    string instanceName = 1;
    // Specifies information about the public port(s).
    array portInfos = 2;
}

message PutInstancePublicPortsResult {
    // Describes metadata about the operation you just executed.
    Operation operation = 1;
}

message RebootInstanceRequest {
    // The name of the instance to reboot.
    string instanceName = 1;
}

message RebootInstanceResult {
    // An array of key-value pairs containing information about the request operation.
    array operations = 1;
}

message Region {
    // The Availability Zones. Follows the format <code>us-east-1a</code> (case-sensitive).
    array availabilityZones = 1;
    // The continent code (e.g., <code>NA</code>, meaning North America).
    string continentCode = 2;
    // The description of the AWS Region (e.g., <code>This region is recommended to serve users in the eastern United States and eastern Canada</code>).
    string description = 3;
    // The display name (e.g., <code>Virginia</code>).
    string displayName = 4;
    // The region name (e.g., <code>us-east-1</code>).
    RegionName name = 5;
}

repeated Region RegionList = 1

enum RegionName {
    USEAST1 = 0;
    USEAST2 = 1;
    USWEST1 = 2;
    USWEST2 = 3;
    EUWEST1 = 4;
    EUCENTRAL1 = 5;
    APSOUTH1 = 6;
    APSOUTHEAST1 = 7;
    APSOUTHEAST2 = 8;
    APNORTHEAST1 = 9;
    APNORTHEAST2 = 10;
}

message ReleaseStaticIpRequest {
    // The name of the static IP to delete.
    string staticIpName = 1;
}

message ReleaseStaticIpResult {
    // An array of key-value pairs containing information about the request operation.
    array operations = 1;
}

message ResourceLocation {
    // The Availability Zone. Follows the format <code>us-east-1a</code> (case-sensitive).
    string availabilityZone = 1;
    // The AWS Region name.
    RegionName regionName = 2;
}

enum ResourceType {
    INSTANCE = 0;
    STATICIP = 1;
    KEYPAIR = 2;
    INSTANCESNAPSHOT = 3;
    DOMAIN = 4;
    PEEREDVPC = 5;
}

message ServiceException {
    string code = 1;
    string docs = 2;
    string message = 3;
    string tip = 4;
}

message StartInstanceRequest {
    // The name of the instance (a virtual private server) to start.
    string instanceName = 1;
}

message StartInstanceResult {
    // An array of key-value pairs containing information about the request operation.
    array operations = 1;
}

message StaticIp {
    // The Amazon Resource Name (ARN) of the static IP (e.g., <code>arn:aws:lightsail:us-east-1:123456789101:StaticIp/9cbb4a9e-f8e3-4dfe-b57e-12345EXAMPLE</code>).
    string arn = 1;
    // The instance where the static IP is attached (e.g., <code>Amazon_Linux-1GB-Virginia-1</code>).
    string attachedTo = 2;
    // The timestamp when the static IP was created (e.g., <code>1479735304.222</code>).
    string createdAt = 3;
    // The static IP address.
    string ipAddress = 4;
    // A Boolean value indicating whether the static IP is attached.
    boolean isAttached = 5;
    // The region and Availability Zone where the static IP was created.
    ResourceLocation location = 6;
    // The name of the static IP (e.g., <code>StaticIP-Virginia-EXAMPLE</code>).
    string name = 7;
    // The resource type (usually <code>StaticIp</code>).
    ResourceType resourceType = 8;
    // The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
    string supportCode = 9;
}

repeated StaticIp StaticIpList = 1

message StopInstanceRequest {
    // The name of the instance (a virtual private server) to stop.
    string instanceName = 1;
}

message StopInstanceResult {
    // An array of key-value pairs containing information about the request operation.
    array operations = 1;
}

repeated string StringList = 1

message UnauthenticatedException {
    string code = 1;
    string docs = 2;
    string message = 3;
    string tip = 4;
}

message UnpeerVpcRequest {
}

message UnpeerVpcResult {
    // An array of key-value pairs containing information about the request operation.
    Operation operation = 1;
}

message UpdateDomainEntryRequest {
    // An array of key-value pairs containing information about the domain entry.
    DomainEntry domainEntry = 1;
    // The name of the domain recordset to update.
    string domainName = 2;
}

message UpdateDomainEntryResult {
    // An array of key-value pairs containing information about the request operation.
    array operations = 1;
}

service AmazonLightsailService {
    // Allocates a static IP address.
    rpc Post(PostRequest) returns (AllocateStaticIpResult) {
      option (google.api.http) = {
        post: "//"
        body: "body"
      };
    }
    // Attaches a static IP address to a specific Amazon Lightsail instance.
    rpc Post#AttachStaticIp(Post#AttachStaticIpRequest) returns (AttachStaticIpResult) {
      option (google.api.http) = {
        post: "//#AttachStaticIp"
        body: "body"
      };
    }
    // Closes the public ports on a specific Amazon Lightsail instance.
    rpc Post#CloseInstancePublicPorts(Post#CloseInstancePublicPortsRequest) returns (CloseInstancePublicPortsResult) {
      option (google.api.http) = {
        post: "//#CloseInstancePublicPorts"
        body: "body"
      };
    }
    // Creates a domain resource for the specified domain (e.g., example.com).
    rpc Post#CreateDomain(Post#CreateDomainRequest) returns (CreateDomainResult) {
      option (google.api.http) = {
        post: "//#CreateDomain"
        body: "body"
      };
    }
    // Creates one of the following entry records associated with the domain: A record, CNAME record, TXT record, or MX record.
    rpc Post#CreateDomainEntry(Post#CreateDomainEntryRequest) returns (CreateDomainEntryResult) {
      option (google.api.http) = {
        post: "//#CreateDomainEntry"
        body: "body"
      };
    }
    // Creates a snapshot of a specific virtual private server, or <i>instance</i>. You can use a snapshot to create a new instance that is based on that snapshot.
    rpc Post#CreateInstanceSnapshot(Post#CreateInstanceSnapshotRequest) returns (CreateInstanceSnapshotResult) {
      option (google.api.http) = {
        post: "//#CreateInstanceSnapshot"
        body: "body"
      };
    }
    // Creates one or more Amazon Lightsail virtual private servers, or <i>instances</i>.
    rpc Post#CreateInstances(Post#CreateInstancesRequest) returns (CreateInstancesResult) {
      option (google.api.http) = {
        post: "//#CreateInstances"
        body: "body"
      };
    }
    // Uses a specific snapshot as a blueprint for creating one or more new instances that are based on that identical configuration.
    rpc Post#CreateInstancesFromSnapshot(Post#CreateInstancesFromSnapshotRequest) returns (CreateInstancesFromSnapshotResult) {
      option (google.api.http) = {
        post: "//#CreateInstancesFromSnapshot"
        body: "body"
      };
    }
    // Creates sn SSH key pair.
    rpc Post#CreateKeyPair(Post#CreateKeyPairRequest) returns (CreateKeyPairResult) {
      option (google.api.http) = {
        post: "//#CreateKeyPair"
        body: "body"
      };
    }
    // Deletes the specified domain recordset and all of its domain records.
    rpc Post#DeleteDomain(Post#DeleteDomainRequest) returns (DeleteDomainResult) {
      option (google.api.http) = {
        post: "//#DeleteDomain"
        body: "body"
      };
    }
    // Deletes a specific domain entry.
    rpc Post#DeleteDomainEntry(Post#DeleteDomainEntryRequest) returns (DeleteDomainEntryResult) {
      option (google.api.http) = {
        post: "//#DeleteDomainEntry"
        body: "body"
      };
    }
    // Deletes a specific Amazon Lightsail virtual private server, or <i>instance</i>.
    rpc Post#DeleteInstance(Post#DeleteInstanceRequest) returns (DeleteInstanceResult) {
      option (google.api.http) = {
        post: "//#DeleteInstance"
        body: "body"
      };
    }
    // Deletes a specific snapshot of a virtual private server (or <i>instance</i>).
    rpc Post#DeleteInstanceSnapshot(Post#DeleteInstanceSnapshotRequest) returns (DeleteInstanceSnapshotResult) {
      option (google.api.http) = {
        post: "//#DeleteInstanceSnapshot"
        body: "body"
      };
    }
    // Deletes a specific SSH key pair.
    rpc Post#DeleteKeyPair(Post#DeleteKeyPairRequest) returns (DeleteKeyPairResult) {
      option (google.api.http) = {
        post: "//#DeleteKeyPair"
        body: "body"
      };
    }
    // Detaches a static IP from the Amazon Lightsail instance to which it is attached.
    rpc Post#DetachStaticIp(Post#DetachStaticIpRequest) returns (DetachStaticIpResult) {
      option (google.api.http) = {
        post: "//#DetachStaticIp"
        body: "body"
      };
    }
    // Downloads the default SSH key pair from the user's account.
    rpc Post#DownloadDefaultKeyPair(Post#DownloadDefaultKeyPairRequest) returns (DownloadDefaultKeyPairResult) {
      option (google.api.http) = {
        post: "//#DownloadDefaultKeyPair"
        body: "body"
      };
    }
    // Returns the names of all active (not deleted) resources.
    rpc Post#GetActiveNames(Post#GetActiveNamesRequest) returns (GetActiveNamesResult) {
      option (google.api.http) = {
        post: "//#GetActiveNames"
        body: "body"
      };
    }
    // Returns the list of available instance images, or <i>blueprints</i>. You can use a blueprint to create a new virtual private server already running a specific operating system, as well as a preinstalled app or development stack. The software each instance is running depends on the blueprint image you choose.
    rpc Post#GetBlueprints(Post#GetBlueprintsRequest) returns (GetBlueprintsResult) {
      option (google.api.http) = {
        post: "//#GetBlueprints"
        body: "body"
      };
    }
    // Returns the list of bundles that are available for purchase. A bundle describes the specs for your virtual private server (or <i>instance</i>).
    rpc Post#GetBundles(Post#GetBundlesRequest) returns (GetBundlesResult) {
      option (google.api.http) = {
        post: "//#GetBundles"
        body: "body"
      };
    }
    // Returns information about a specific domain recordset.
    rpc Post#GetDomain(Post#GetDomainRequest) returns (GetDomainResult) {
      option (google.api.http) = {
        post: "//#GetDomain"
        body: "body"
      };
    }
    // Returns a list of all domains in the user's account.
    rpc Post#GetDomains(Post#GetDomainsRequest) returns (GetDomainsResult) {
      option (google.api.http) = {
        post: "//#GetDomains"
        body: "body"
      };
    }
    // Returns information about a specific Amazon Lightsail instance, which is a virtual private server.
    rpc Post#GetInstance(Post#GetInstanceRequest) returns (GetInstanceResult) {
      option (google.api.http) = {
        post: "//#GetInstance"
        body: "body"
      };
    }
    // Returns temporary SSH keys you can use to connect to a specific virtual private server, or <i>instance</i>.
    rpc Post#GetInstanceAccessDetails(Post#GetInstanceAccessDetailsRequest) returns (GetInstanceAccessDetailsResult) {
      option (google.api.http) = {
        post: "//#GetInstanceAccessDetails"
        body: "body"
      };
    }
    // Returns the data points for the specified Amazon Lightsail instance metric, given an instance name.
    rpc Post#GetInstanceMetricData(Post#GetInstanceMetricDataRequest) returns (GetInstanceMetricDataResult) {
      option (google.api.http) = {
        post: "//#GetInstanceMetricData"
        body: "body"
      };
    }
    // Returns the port states for a specific virtual private server, or <i>instance</i>.
    rpc Post#GetInstancePortStates(Post#GetInstancePortStatesRequest) returns (GetInstancePortStatesResult) {
      option (google.api.http) = {
        post: "//#GetInstancePortStates"
        body: "body"
      };
    }
    // Returns information about a specific instance snapshot.
    rpc Post#GetInstanceSnapshot(Post#GetInstanceSnapshotRequest) returns (GetInstanceSnapshotResult) {
      option (google.api.http) = {
        post: "//#GetInstanceSnapshot"
        body: "body"
      };
    }
    // Returns all instance snapshots for the user's account.
    rpc Post#GetInstanceSnapshots(Post#GetInstanceSnapshotsRequest) returns (GetInstanceSnapshotsResult) {
      option (google.api.http) = {
        post: "//#GetInstanceSnapshots"
        body: "body"
      };
    }
    // Returns the state of a specific instance. Works on one instance at a time.
    rpc Post#GetInstanceState(Post#GetInstanceStateRequest) returns (GetInstanceStateResult) {
      option (google.api.http) = {
        post: "//#GetInstanceState"
        body: "body"
      };
    }
    // Returns information about all Amazon Lightsail virtual private servers, or <i>instances</i>.
    rpc Post#GetInstances(Post#GetInstancesRequest) returns (GetInstancesResult) {
      option (google.api.http) = {
        post: "//#GetInstances"
        body: "body"
      };
    }
    // Returns information about a specific key pair.
    rpc Post#GetKeyPair(Post#GetKeyPairRequest) returns (GetKeyPairResult) {
      option (google.api.http) = {
        post: "//#GetKeyPair"
        body: "body"
      };
    }
    // Returns information about all key pairs in the user's account.
    rpc Post#GetKeyPairs(Post#GetKeyPairsRequest) returns (GetKeyPairsResult) {
      option (google.api.http) = {
        post: "//#GetKeyPairs"
        body: "body"
      };
    }
    // Returns information about a specific operation. Operations include events such as when you create an instance, allocate a static IP, attach a static IP, and so on.
    rpc Post#GetOperation(Post#GetOperationRequest) returns (GetOperationResult) {
      option (google.api.http) = {
        post: "//#GetOperation"
        body: "body"
      };
    }
    // <p>Returns information about all operations.</p> <p>Results are returned from oldest to newest, up to a maximum of 200. Results can be paged by making each subsequent call to <code>GetOperations</code> use the maximum (last) <code>statusChangedAt</code> value from the previous request.</p>
    rpc Post#GetOperations(Post#GetOperationsRequest) returns (GetOperationsResult) {
      option (google.api.http) = {
        post: "//#GetOperations"
        body: "body"
      };
    }
    // Gets operations for a specific resource (e.g., an instance or a static IP).
    rpc Post#GetOperationsForResource(Post#GetOperationsForResourceRequest) returns (GetOperationsForResourceResult) {
      option (google.api.http) = {
        post: "//#GetOperationsForResource"
        body: "body"
      };
    }
    // Returns a list of all valid regions for Amazon Lightsail. Use the <code>include availability zones</code> parameter to also return the availability zones in a region.
    rpc Post#GetRegions(Post#GetRegionsRequest) returns (GetRegionsResult) {
      option (google.api.http) = {
        post: "//#GetRegions"
        body: "body"
      };
    }
    // Returns information about a specific static IP.
    rpc Post#GetStaticIp(Post#GetStaticIpRequest) returns (GetStaticIpResult) {
      option (google.api.http) = {
        post: "//#GetStaticIp"
        body: "body"
      };
    }
    // Returns information about all static IPs in the user's account.
    rpc Post#GetStaticIps(Post#GetStaticIpsRequest) returns (GetStaticIpsResult) {
      option (google.api.http) = {
        post: "//#GetStaticIps"
        body: "body"
      };
    }
    // Imports a public SSH key from a specific key pair.
    rpc Post#ImportKeyPair(Post#ImportKeyPairRequest) returns (ImportKeyPairResult) {
      option (google.api.http) = {
        post: "//#ImportKeyPair"
        body: "body"
      };
    }
    // Returns a Boolean value indicating whether your Lightsail VPC is peered.
    rpc Post#IsVpcPeered(Post#IsVpcPeeredRequest) returns (IsVpcPeeredResult) {
      option (google.api.http) = {
        post: "//#IsVpcPeered"
        body: "body"
      };
    }
    // Adds public ports to an Amazon Lightsail instance.
    rpc Post#OpenInstancePublicPorts(Post#OpenInstancePublicPortsRequest) returns (OpenInstancePublicPortsResult) {
      option (google.api.http) = {
        post: "//#OpenInstancePublicPorts"
        body: "body"
      };
    }
    // Tries to peer the Lightsail VPC with the user's default VPC.
    rpc Post#PeerVpc(Post#PeerVpcRequest) returns (PeerVpcResult) {
      option (google.api.http) = {
        post: "//#PeerVpc"
        body: "body"
      };
    }
    // Sets the specified open ports for an Amazon Lightsail instance, and closes all ports for every protocol not included in the current request.
    rpc Post#PutInstancePublicPorts(Post#PutInstancePublicPortsRequest) returns (PutInstancePublicPortsResult) {
      option (google.api.http) = {
        post: "//#PutInstancePublicPorts"
        body: "body"
      };
    }
    // Restarts a specific instance. When your Amazon Lightsail instance is finished rebooting, Lightsail assigns a new public IP address. To use the same IP address after restarting, create a static IP address and attach it to the instance.
    rpc Post#RebootInstance(Post#RebootInstanceRequest) returns (RebootInstanceResult) {
      option (google.api.http) = {
        post: "//#RebootInstance"
        body: "body"
      };
    }
    // Deletes a specific static IP from your account.
    rpc Post#ReleaseStaticIp(Post#ReleaseStaticIpRequest) returns (ReleaseStaticIpResult) {
      option (google.api.http) = {
        post: "//#ReleaseStaticIp"
        body: "body"
      };
    }
    // Starts a specific Amazon Lightsail instance from a stopped state. To restart an instance, use the reboot instance operation.
    rpc Post#StartInstance(Post#StartInstanceRequest) returns (StartInstanceResult) {
      option (google.api.http) = {
        post: "//#StartInstance"
        body: "body"
      };
    }
    // Stops a specific Amazon Lightsail instance that is currently running.
    rpc Post#StopInstance(Post#StopInstanceRequest) returns (StopInstanceResult) {
      option (google.api.http) = {
        post: "//#StopInstance"
        body: "body"
      };
    }
    // Attempts to unpeer the Lightsail VPC from the user's default VPC.
    rpc Post#UnpeerVpc(Post#UnpeerVpcRequest) returns (UnpeerVpcResult) {
      option (google.api.http) = {
        post: "//#UnpeerVpc"
        body: "body"
      };
    }
    // Updates a domain recordset after it is created.
    rpc Post#UpdateDomainEntry(Post#UpdateDomainEntryRequest) returns (UpdateDomainEntryResult) {
      option (google.api.http) = {
        post: "//#UpdateDomainEntry"
        body: "body"
      };
    }
}

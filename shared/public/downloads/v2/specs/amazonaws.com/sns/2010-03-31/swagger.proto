syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package amazonsimplenotificationservice;

message PostRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AddPermissionInput body = 10;
}

message Post#CheckIfPhoneNumberIsOptedOutRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CheckIfPhoneNumberIsOptedOutInput body = 10;
}

message Post#ConfirmSubscriptionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ConfirmSubscriptionInput body = 10;
}

message Post#CreatePlatformApplicationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreatePlatformApplicationInput body = 10;
}

message Post#CreatePlatformEndpointRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreatePlatformEndpointInput body = 10;
}

message Post#CreateTopicRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateTopicInput body = 10;
}

message Post#DeleteEndpointRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteEndpointInput body = 10;
}

message Post#DeletePlatformApplicationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeletePlatformApplicationInput body = 10;
}

message Post#DeleteTopicRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteTopicInput body = 10;
}

message Post#GetEndpointAttributesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetEndpointAttributesInput body = 10;
}

message Post#GetPlatformApplicationAttributesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetPlatformApplicationAttributesInput body = 10;
}

message Post#GetSMSAttributesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetSMSAttributesInput body = 10;
}

message Post#GetSubscriptionAttributesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetSubscriptionAttributesInput body = 10;
}

message Post#GetTopicAttributesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetTopicAttributesInput body = 10;
}

message Post#ListEndpointsByPlatformApplicationRequest {
    string Action = 1;
    // Pagination token
    string NextToken = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    ListEndpointsByPlatformApplicationInput body = 11;
}

message Post#ListPhoneNumbersOptedOutRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListPhoneNumbersOptedOutInput body = 10;
}

message Post#ListPlatformApplicationsRequest {
    string Action = 1;
    // Pagination token
    string NextToken = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    ListPlatformApplicationsInput body = 11;
}

message Post#ListSubscriptionsRequest {
    string Action = 1;
    // Pagination token
    string NextToken = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    ListSubscriptionsInput body = 11;
}

message Post#ListSubscriptionsByTopicRequest {
    string Action = 1;
    // Pagination token
    string NextToken = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    ListSubscriptionsByTopicInput body = 11;
}

message Post#ListTopicsRequest {
    string Action = 1;
    // Pagination token
    string NextToken = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    ListTopicsInput body = 11;
}

message Post#OptInPhoneNumberRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    OptInPhoneNumberInput body = 10;
}

message Post#PublishRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    PublishInput body = 10;
}

message Post#RemovePermissionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RemovePermissionInput body = 10;
}

message Post#SetEndpointAttributesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    SetEndpointAttributesInput body = 10;
}

message Post#SetPlatformApplicationAttributesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    SetPlatformApplicationAttributesInput body = 10;
}

message Post#SetSMSAttributesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    SetSMSAttributesInput body = 10;
}

message Post#SetSubscriptionAttributesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    SetSubscriptionAttributesInput body = 10;
}

message Post#SetTopicAttributesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    SetTopicAttributesInput body = 10;
}

message Post#SubscribeRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    SubscribeInput body = 10;
}

message Post#UnsubscribeRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UnsubscribeInput body = 10;
}





repeated string ActionsList = 1

message AddPermissionInput {
    // The AWS account IDs of the users (principals) who will be given access to the specified actions. The users must have AWS accounts, but do not need to be signed up for this service.
    array AWSAccountId = 1;
    // <p>The action you want to allow for the specified principal(s).</p> <p>Valid values: any Amazon SNS action name.</p>
    array ActionName = 2;
    // A unique identifier for the new policy statement.
    string Label = 3;
    // The ARN of the topic whose access control policy you wish to modify.
    string TopicArn = 4;
}

message AuthorizationErrorException {
    string message = 1;
}

message CheckIfPhoneNumberIsOptedOutInput {
    // The phone number for which you want to check the opt out status.
    string phoneNumber = 1;
}

message CheckIfPhoneNumberIsOptedOutResponse {
    // <p>Indicates whether the phone number is opted out:</p> <ul> <li> <p> <code>true</code> – The phone number is opted out, meaning you cannot publish SMS messages to it.</p> </li> <li> <p> <code>false</code> – The phone number is opted in, meaning you can publish SMS messages to it.</p> </li> </ul>
    boolean isOptedOut = 1;
}

message ConfirmSubscriptionInput {
    // Disallows unauthenticated unsubscribes of the subscription. If the value of this parameter is <code>true</code> and the request has an AWS signature, then only the topic owner and the subscription owner can unsubscribe the endpoint. The unsubscribe action requires AWS authentication.
    string AuthenticateOnUnsubscribe = 1;
    // Short-lived token sent to an endpoint during the <code>Subscribe</code> action.
    string Token = 2;
    // The ARN of the topic for which you wish to confirm a subscription.
    string TopicArn = 3;
}

message ConfirmSubscriptionResponse {
    // The ARN of the created subscription.
    string SubscriptionArn = 1;
}

message CreateEndpointResponse {
    // EndpointArn returned from CreateEndpoint action.
    string EndpointArn = 1;
}

message CreatePlatformApplicationInput {
    // For a list of attributes, see <a href="http://docs.aws.amazon.com/sns/latest/api/API_SetPlatformApplicationAttributes.html">SetPlatformApplicationAttributes</a>
    array Attributes = 1;
    // Application names must be made up of only uppercase and lowercase ASCII letters, numbers, underscores, hyphens, and periods, and must be between 1 and 256 characters long.
    string Name = 2;
    // The following platforms are supported: ADM (Amazon Device Messaging), APNS (Apple Push Notification Service), APNS_SANDBOX, and GCM (Google Cloud Messaging).
    string Platform = 3;
}

message CreatePlatformApplicationResponse {
    // PlatformApplicationArn is returned.
    string PlatformApplicationArn = 1;
}

message CreatePlatformEndpointInput {
    // For a list of attributes, see <a href="http://docs.aws.amazon.com/sns/latest/api/API_SetEndpointAttributes.html">SetEndpointAttributes</a>.
    array Attributes = 1;
    // Arbitrary user data to associate with the endpoint. Amazon SNS does not use this data. The data must be in UTF-8 format and less than 2KB.
    string CustomUserData = 2;
    // PlatformApplicationArn returned from CreatePlatformApplication is used to create a an endpoint.
    string PlatformApplicationArn = 3;
    // Unique identifier created by the notification service for an app on a device. The specific name for Token will vary, depending on which notification service is being used. For example, when using APNS as the notification service, you need the device token. Alternatively, when using GCM or ADM, the device token equivalent is called the registration ID.
    string Token = 4;
}

message CreateTopicInput {
    // <p>The name of the topic you want to create.</p> <p>Constraints: Topic names must be made up of only uppercase and lowercase ASCII letters, numbers, underscores, and hyphens, and must be between 1 and 256 characters long.</p>
    string Name = 1;
}

message CreateTopicResponse {
    // The Amazon Resource Name (ARN) assigned to the created topic.
    string TopicArn = 1;
}

repeated string DelegatesList = 1

message DeleteEndpointInput {
    // EndpointArn of endpoint to delete.
    string EndpointArn = 1;
}

message DeletePlatformApplicationInput {
    // PlatformApplicationArn of platform application object to delete.
    string PlatformApplicationArn = 1;
}

message DeleteTopicInput {
    // The ARN of the topic you want to delete.
    string TopicArn = 1;
}

message Endpoint {
    // Attributes for endpoint.
    array Attributes = 1;
    // EndpointArn for mobile app and device.
    string EndpointArn = 2;
}

message EndpointDisabledException {
    // Message for endpoint disabled.
    string message = 1;
}

message GetEndpointAttributesInput {
    // EndpointArn for GetEndpointAttributes input.
    string EndpointArn = 1;
}

message GetEndpointAttributesResponse {
    // <p>Attributes include the following:</p> <ul> <li> <p> <code>CustomUserData</code> -- arbitrary user data to associate with the endpoint. Amazon SNS does not use this data. The data must be in UTF-8 format and less than 2KB.</p> </li> <li> <p> <code>Enabled</code> -- flag that enables/disables delivery to the endpoint. Amazon SNS will set this to false when a notification service indicates to Amazon SNS that the endpoint is invalid. Users can set it back to true, typically after updating Token.</p> </li> <li> <p> <code>Token</code> -- device token, also referred to as a registration id, for an app and mobile device. This is returned from the notification service when an app and mobile device are registered with the notification service.</p> </li> </ul>
    array Attributes = 1;
}

message GetPlatformApplicationAttributesInput {
    // PlatformApplicationArn for GetPlatformApplicationAttributesInput.
    string PlatformApplicationArn = 1;
}

message GetPlatformApplicationAttributesResponse {
    // <p>Attributes include the following:</p> <ul> <li> <p> <code>EventEndpointCreated</code> -- Topic ARN to which EndpointCreated event notifications should be sent.</p> </li> <li> <p> <code>EventEndpointDeleted</code> -- Topic ARN to which EndpointDeleted event notifications should be sent.</p> </li> <li> <p> <code>EventEndpointUpdated</code> -- Topic ARN to which EndpointUpdate event notifications should be sent.</p> </li> <li> <p> <code>EventDeliveryFailure</code> -- Topic ARN to which DeliveryFailure event notifications should be sent upon Direct Publish delivery failure (permanent) to one of the application's endpoints.</p> </li> </ul>
    array Attributes = 1;
}

message GetSMSAttributesInput {
    // <p>A list of the individual attribute names, such as <code>MonthlySpendLimit</code>, for which you want values.</p> <p>For all attribute names, see <a href="http://docs.aws.amazon.com/sns/latest/api/API_SetSMSAttributes.html">SetSMSAttributes</a>.</p> <p>If you don't use this parameter, Amazon SNS returns all SMS attributes.</p>
    array attributes = 1;
}

message GetSMSAttributesResponse {
    // The SMS attribute names and their values.
    array attributes = 1;
}

message GetSubscriptionAttributesInput {
    // The ARN of the subscription whose properties you want to get.
    string SubscriptionArn = 1;
}

message GetSubscriptionAttributesResponse {
    // <p>A map of the subscription's attributes. Attributes in this map include the following:</p> <ul> <li> <p> <code>SubscriptionArn</code> -- the subscription's ARN</p> </li> <li> <p> <code>TopicArn</code> -- the topic ARN that the subscription is associated with</p> </li> <li> <p> <code>Owner</code> -- the AWS account ID of the subscription's owner</p> </li> <li> <p> <code>ConfirmationWasAuthenticated</code> -- true if the subscription confirmation request was authenticated</p> </li> <li> <p> <code>DeliveryPolicy</code> -- the JSON serialization of the subscription's delivery policy</p> </li> <li> <p> <code>EffectiveDeliveryPolicy</code> -- the JSON serialization of the effective delivery policy that takes into account the topic delivery policy and account system defaults</p> </li> </ul>
    array Attributes = 1;
}

message GetTopicAttributesInput {
    // The ARN of the topic whose properties you want to get.
    string TopicArn = 1;
}

message GetTopicAttributesResponse {
    // <p>A map of the topic's attributes. Attributes in this map include the following:</p> <ul> <li> <p> <code>TopicArn</code> -- the topic's ARN</p> </li> <li> <p> <code>Owner</code> -- the AWS account ID of the topic's owner</p> </li> <li> <p> <code>Policy</code> -- the JSON serialization of the topic's access control policy</p> </li> <li> <p> <code>DisplayName</code> -- the human-readable name used in the "From" field for notifications to email and email-json endpoints</p> </li> <li> <p> <code>SubscriptionsPending</code> -- the number of subscriptions pending confirmation on this topic</p> </li> <li> <p> <code>SubscriptionsConfirmed</code> -- the number of confirmed subscriptions on this topic</p> </li> <li> <p> <code>SubscriptionsDeleted</code> -- the number of deleted subscriptions on this topic</p> </li> <li> <p> <code>DeliveryPolicy</code> -- the JSON serialization of the topic's delivery policy</p> </li> <li> <p> <code>EffectiveDeliveryPolicy</code> -- the JSON serialization of the effective delivery policy that takes into account system defaults</p> </li> </ul>
    array Attributes = 1;
}

message InternalErrorException {
    string message = 1;
}

message InvalidParameterException {
    string message = 1;
}

message InvalidParameterValueException {
    // The parameter value is invalid.
    string message = 1;
}

message ListEndpointsByPlatformApplicationInput {
    // NextToken string is used when calling ListEndpointsByPlatformApplication action to retrieve additional records that are available after the first page results.
    string NextToken = 1;
    // PlatformApplicationArn for ListEndpointsByPlatformApplicationInput action.
    string PlatformApplicationArn = 2;
}

message ListEndpointsByPlatformApplicationResponse {
    // Endpoints returned for ListEndpointsByPlatformApplication action.
    array Endpoints = 1;
    // NextToken string is returned when calling ListEndpointsByPlatformApplication action if additional records are available after the first page results.
    string NextToken = 2;
}

repeated Endpoint ListOfEndpoints = 1

repeated PlatformApplication ListOfPlatformApplications = 1

message ListPhoneNumbersOptedOutInput {
    // A <code>NextToken</code> string is used when you call the <code>ListPhoneNumbersOptedOut</code> action to retrieve additional records that are available after the first page of results.
    string nextToken = 1;
}

message ListPhoneNumbersOptedOutResponse {
    // A <code>NextToken</code> string is returned when you call the <code>ListPhoneNumbersOptedOut</code> action if additional records are available after the first page of results.
    string nextToken = 1;
    // A list of phone numbers that are opted out of receiving SMS messages. The list is paginated, and each page can contain up to 100 phone numbers.
    array phoneNumbers = 2;
}

message ListPlatformApplicationsInput {
    // NextToken string is used when calling ListPlatformApplications action to retrieve additional records that are available after the first page results.
    string NextToken = 1;
}

message ListPlatformApplicationsResponse {
    // NextToken string is returned when calling ListPlatformApplications action if additional records are available after the first page results.
    string NextToken = 1;
    // Platform applications returned when calling ListPlatformApplications action.
    array PlatformApplications = 2;
}

repeated string ListString = 1

message ListSubscriptionsByTopicInput {
    // Token returned by the previous <code>ListSubscriptionsByTopic</code> request.
    string NextToken = 1;
    // The ARN of the topic for which you wish to find subscriptions.
    string TopicArn = 2;
}

message ListSubscriptionsByTopicResponse {
    // Token to pass along to the next <code>ListSubscriptionsByTopic</code> request. This element is returned if there are more subscriptions to retrieve.
    string NextToken = 1;
    // A list of subscriptions.
    array Subscriptions = 2;
}

message ListSubscriptionsInput {
    // Token returned by the previous <code>ListSubscriptions</code> request.
    string NextToken = 1;
}

message ListSubscriptionsResponse {
    // Token to pass along to the next <code>ListSubscriptions</code> request. This element is returned if there are more subscriptions to retrieve.
    string NextToken = 1;
    // A list of subscriptions.
    array Subscriptions = 2;
}

message ListTopicsInput {
    // Token returned by the previous <code>ListTopics</code> request.
    string NextToken = 1;
}

message ListTopicsResponse {
    // Token to pass along to the next <code>ListTopics</code> request. This element is returned if there are additional topics to retrieve.
    string NextToken = 1;
    // A list of topic ARNs.
    array Topics = 2;
}

message MapStringToString {
    string key = 1;
    string value = 2;
}
repeated MapStringToString MapStringToString = 1

message MessageAttributeMap {
    string key = 1;
    MessageAttributeValue value = 2;
}
repeated MessageAttributeMap MessageAttributeMap = 1

message MessageAttributeValue {
    // Binary type attributes can store any binary data, for example, compressed data, encrypted data, or images.
    string BinaryValue = 1;
    // Amazon SNS supports the following logical data types: String, Number, and Binary. For more information, see <a href="http://docs.aws.amazon.com/sns/latest/dg/SNSMessageAttributes.html#SNSMessageAttributes.DataTypes">Message Attribute Data Types</a>.
    string DataType = 2;
    // Strings are Unicode with UTF8 binary encoding. For a list of code values, see <a href="http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters">http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters</a>.
    string StringValue = 3;
}

message NotFoundException {
    string message = 1;
}

message OptInPhoneNumberInput {
    // The phone number to opt in.
    string phoneNumber = 1;
}

message OptInPhoneNumberResponse {
}



repeated string PhoneNumberList = 1

message PlatformApplication {
    // Attributes for platform application object.
    array Attributes = 1;
    // PlatformApplicationArn for platform application object.
    string PlatformApplicationArn = 2;
}

message PlatformApplicationDisabledException {
    // Message for platform application disabled.
    string message = 1;
}

message PublishInput {
    // <p>The message you want to send to the topic.</p> <p>If you want to send the same message to all transport protocols, include the text of the message as a String value.</p> <p>If you want to send different messages for each transport protocol, set the value of the <code>MessageStructure</code> parameter to <code>json</code> and use a JSON object for the <code>Message</code> parameter. </p> <p>Constraints: Messages must be UTF-8 encoded strings at most 256 KB in size (262144 bytes, not 262144 characters).</p> <p>JSON-specific constraints:</p> <ul> <li> <p>Keys in the JSON object that correspond to supported transport protocols must have simple JSON string values.</p> </li> <li> <p>The values will be parsed (unescaped) before they are used in outgoing messages.</p> </li> <li> <p>Outbound notifications are JSON encoded (meaning that the characters will be reescaped for sending).</p> </li> <li> <p>Values have a minimum length of 0 (the empty string, "", is allowed).</p> </li> <li> <p>Values have a maximum length bounded by the overall message size (so, including multiple protocols may limit message sizes).</p> </li> <li> <p>Non-string values will cause the key to be ignored.</p> </li> <li> <p>Keys that do not correspond to supported transport protocols are ignored.</p> </li> <li> <p>Duplicate keys are not allowed.</p> </li> <li> <p>Failure to parse or validate any key or value in the message will cause the <code>Publish</code> call to return an error (no partial delivery).</p> </li> </ul>
    string Message = 1;
    // Message attributes for Publish action.
    array MessageAttributes = 2;
    // <p>Set <code>MessageStructure</code> to <code>json</code> if you want to send a different message for each protocol. For example, using one publish action, you can send a short message to your SMS subscribers and a longer message to your email subscribers. If you set <code>MessageStructure</code> to <code>json</code>, the value of the <code>Message</code> parameter must: </p> <ul> <li> <p>be a syntactically valid JSON object; and</p> </li> <li> <p>contain at least a top-level JSON key of "default" with a value that is a string.</p> </li> </ul> <p>You can define other top-level keys that define the message you want to send to a specific transport protocol (e.g., "http").</p> <p>For information about sending different messages for each protocol using the AWS Management Console, go to <a href="http://docs.aws.amazon.com/sns/latest/gsg/Publish.html#sns-message-formatting-by-protocol">Create Different Messages for Each Protocol</a> in the <i>Amazon Simple Notification Service Getting Started Guide</i>. </p> <p>Valid value: <code>json</code> </p>
    string MessageStructure = 3;
    // <p>The phone number to which you want to deliver an SMS message. Use E.164 format.</p> <p>If you don't specify a value for the <code>PhoneNumber</code> parameter, you must specify a value for the <code>TargetArn</code> or <code>TopicArn</code> parameters.</p>
    string PhoneNumber = 4;
    // <p>Optional parameter to be used as the "Subject" line when the message is delivered to email endpoints. This field will also be included, if present, in the standard JSON messages delivered to other endpoints.</p> <p>Constraints: Subjects must be ASCII text that begins with a letter, number, or punctuation mark; must not include line breaks or control characters; and must be less than 100 characters long.</p>
    string Subject = 5;
    // <p>Either TopicArn or EndpointArn, but not both.</p> <p>If you don't specify a value for the <code>TargetArn</code> parameter, you must specify a value for the <code>PhoneNumber</code> or <code>TopicArn</code> parameters.</p>
    string TargetArn = 6;
    // <p>The topic you want to publish to.</p> <p>If you don't specify a value for the <code>TopicArn</code> parameter, you must specify a value for the <code>PhoneNumber</code> or <code>TargetArn</code> parameters.</p>
    string TopicArn = 7;
}

message PublishResponse {
    // <p>Unique identifier assigned to the published message.</p> <p>Length Constraint: Maximum 100 characters</p>
    string MessageId = 1;
}

message RemovePermissionInput {
    // The unique label of the statement you want to remove.
    string Label = 1;
    // The ARN of the topic whose access control policy you wish to modify.
    string TopicArn = 2;
}

message SetEndpointAttributesInput {
    // <p>A map of the endpoint attributes. Attributes in this map include the following:</p> <ul> <li> <p> <code>CustomUserData</code> -- arbitrary user data to associate with the endpoint. Amazon SNS does not use this data. The data must be in UTF-8 format and less than 2KB.</p> </li> <li> <p> <code>Enabled</code> -- flag that enables/disables delivery to the endpoint. Amazon SNS will set this to false when a notification service indicates to Amazon SNS that the endpoint is invalid. Users can set it back to true, typically after updating Token.</p> </li> <li> <p> <code>Token</code> -- device token, also referred to as a registration id, for an app and mobile device. This is returned from the notification service when an app and mobile device are registered with the notification service.</p> </li> </ul>
    array Attributes = 1;
    // EndpointArn used for SetEndpointAttributes action.
    string EndpointArn = 2;
}

message SetPlatformApplicationAttributesInput {
    // <p>A map of the platform application attributes. Attributes in this map include the following:</p> <ul> <li> <p> <code>PlatformCredential</code> -- The credential received from the notification service. For APNS/APNS_SANDBOX, PlatformCredential is private key. For GCM, PlatformCredential is "API key". For ADM, PlatformCredential is "client secret".</p> </li> <li> <p> <code>PlatformPrincipal</code> -- The principal received from the notification service. For APNS/APNS_SANDBOX, PlatformPrincipal is SSL certificate. For GCM, PlatformPrincipal is not applicable. For ADM, PlatformPrincipal is "client id".</p> </li> <li> <p> <code>EventEndpointCreated</code> -- Topic ARN to which EndpointCreated event notifications should be sent.</p> </li> <li> <p> <code>EventEndpointDeleted</code> -- Topic ARN to which EndpointDeleted event notifications should be sent.</p> </li> <li> <p> <code>EventEndpointUpdated</code> -- Topic ARN to which EndpointUpdate event notifications should be sent.</p> </li> <li> <p> <code>EventDeliveryFailure</code> -- Topic ARN to which DeliveryFailure event notifications should be sent upon Direct Publish delivery failure (permanent) to one of the application's endpoints.</p> </li> <li> <p> <code>SuccessFeedbackRoleArn</code> -- IAM role ARN used to give Amazon SNS write access to use CloudWatch Logs on your behalf.</p> </li> <li> <p> <code>FailureFeedbackRoleArn</code> -- IAM role ARN used to give Amazon SNS write access to use CloudWatch Logs on your behalf.</p> </li> <li> <p> <code>SuccessFeedbackSampleRate</code> -- Sample rate percentage (0-100) of successfully delivered messages.</p> </li> </ul>
    array Attributes = 1;
    // PlatformApplicationArn for SetPlatformApplicationAttributes action.
    string PlatformApplicationArn = 2;
}

message SetSMSAttributesInput {
    // <p>The default settings for sending SMS messages from your account. You can set values for the following attribute names:</p> <p> <code>MonthlySpendLimit</code> – The maximum amount in USD that you are willing to spend each month to send SMS messages. When Amazon SNS determines that sending an SMS message would incur a cost that exceeds this limit, it stops sending SMS messages within minutes.</p> <important> <p>Amazon SNS stops sending SMS messages within minutes of the limit being crossed. During that interval, if you continue to send SMS messages, you will incur costs that exceed your limit.</p> </important> <p>By default, the spend limit is set to the maximum allowed by Amazon SNS. If you want to exceed the maximum, contact <a href="https://aws.amazon.com/premiumsupport/">AWS Support</a> or your AWS sales representative for a service limit increase.</p> <p> <code>DeliveryStatusIAMRole</code> – The ARN of the IAM role that allows Amazon SNS to write logs about SMS deliveries in CloudWatch Logs. For each SMS message that you send, Amazon SNS writes a log that includes the message price, the success or failure status, the reason for failure (if the message failed), the message dwell time, and other information.</p> <p> <code>DeliveryStatusSuccessSamplingRate</code> – The percentage of successful SMS deliveries for which Amazon SNS will write logs in CloudWatch Logs. The value can be an integer from 0 - 100. For example, to write logs only for failed deliveries, set this value to <code>0</code>. To write logs for 10% of your successful deliveries, set it to <code>10</code>.</p> <p> <code>DefaultSenderID</code> – A string, such as your business brand, that is displayed as the sender on the receiving device. Support for sender IDs varies by country. The sender ID can be 1 - 11 alphanumeric characters, and it must contain at least one letter.</p> <p> <code>DefaultSMSType</code> – The type of SMS message that you will send by default. You can assign the following values:</p> <ul> <li> <p> <code>Promotional</code> – (Default) Noncritical messages, such as marketing messages. Amazon SNS optimizes the message delivery to incur the lowest cost.</p> </li> <li> <p> <code>Transactional</code> – Critical messages that support customer transactions, such as one-time passcodes for multi-factor authentication. Amazon SNS optimizes the message delivery to achieve the highest reliability.</p> </li> </ul> <p> <code>UsageReportS3Bucket</code> – The name of the Amazon S3 bucket to receive daily SMS usage reports from Amazon SNS. Each day, Amazon SNS will deliver a usage report as a CSV file to the bucket. The report includes the following information for each SMS message that was successfully delivered by your account:</p> <ul> <li> <p>Time that the message was published (in UTC)</p> </li> <li> <p>Message ID</p> </li> <li> <p>Destination phone number</p> </li> <li> <p>Message type</p> </li> <li> <p>Delivery status</p> </li> <li> <p>Message price (in USD)</p> </li> <li> <p>Part number (a message is split into multiple parts if it is too long for a single message)</p> </li> <li> <p>Total number of parts</p> </li> </ul> <p>To receive the report, the bucket must have a policy that allows the Amazon SNS service principle to perform the <code>s3:PutObject</code> and <code>s3:GetBucketLocation</code> actions.</p> <p>For an example bucket policy and usage report, see <a href="http://docs.aws.amazon.com/sns/latest/dg/sms_stats.html">Monitoring SMS Activity</a> in the <i>Amazon SNS Developer Guide</i>.</p>
    array attributes = 1;
}

message SetSMSAttributesResponse {
}

message SetSubscriptionAttributesInput {
    // <p>The name of the attribute you want to set. Only a subset of the subscriptions attributes are mutable.</p> <p>Valid values: <code>DeliveryPolicy</code> | <code>RawMessageDelivery</code> </p>
    string AttributeName = 1;
    // The new value for the attribute in JSON format.
    string AttributeValue = 2;
    // The ARN of the subscription to modify.
    string SubscriptionArn = 3;
}

message SetTopicAttributesInput {
    // <p>The name of the attribute you want to set. Only a subset of the topic's attributes are mutable.</p> <p>Valid values: <code>Policy</code> | <code>DisplayName</code> | <code>DeliveryPolicy</code> </p>
    string AttributeName = 1;
    // The new value for the attribute.
    string AttributeValue = 2;
    // The ARN of the topic to modify.
    string TopicArn = 3;
}

message SubscribeInput {
    // <p>The endpoint that you want to receive notifications. Endpoints vary by protocol:</p> <ul> <li> <p>For the <code>http</code> protocol, the endpoint is an URL beginning with "http://"</p> </li> <li> <p>For the <code>https</code> protocol, the endpoint is a URL beginning with "https://"</p> </li> <li> <p>For the <code>email</code> protocol, the endpoint is an email address</p> </li> <li> <p>For the <code>email-json</code> protocol, the endpoint is an email address</p> </li> <li> <p>For the <code>sms</code> protocol, the endpoint is a phone number of an SMS-enabled device</p> </li> <li> <p>For the <code>sqs</code> protocol, the endpoint is the ARN of an Amazon SQS queue</p> </li> <li> <p>For the <code>application</code> protocol, the endpoint is the EndpointArn of a mobile app and device.</p> </li> <li> <p>For the <code>lambda</code> protocol, the endpoint is the ARN of an AWS Lambda function.</p> </li> </ul>
    string Endpoint = 1;
    // <p>The protocol you want to use. Supported protocols include:</p> <ul> <li> <p> <code>http</code> -- delivery of JSON-encoded message via HTTP POST</p> </li> <li> <p> <code>https</code> -- delivery of JSON-encoded message via HTTPS POST</p> </li> <li> <p> <code>email</code> -- delivery of message via SMTP</p> </li> <li> <p> <code>email-json</code> -- delivery of JSON-encoded message via SMTP</p> </li> <li> <p> <code>sms</code> -- delivery of message via SMS</p> </li> <li> <p> <code>sqs</code> -- delivery of JSON-encoded message to an Amazon SQS queue</p> </li> <li> <p> <code>application</code> -- delivery of JSON-encoded message to an EndpointArn for a mobile app and device.</p> </li> <li> <p> <code>lambda</code> -- delivery of JSON-encoded message to an AWS Lambda function.</p> </li> </ul>
    string Protocol = 2;
    // The ARN of the topic you want to subscribe to.
    string TopicArn = 3;
}

message SubscribeResponse {
    // The ARN of the subscription, if the service was able to create a subscription immediately (without requiring endpoint owner confirmation).
    string SubscriptionArn = 1;
}

message Subscription {
    // The subscription's endpoint (format depends on the protocol).
    string Endpoint = 1;
    // The subscription's owner.
    string Owner = 2;
    // The subscription's protocol.
    string Protocol = 3;
    // The subscription's ARN.
    string SubscriptionArn = 4;
    // The ARN of the subscription's topic.
    string TopicArn = 5;
}

message SubscriptionAttributesMap {
    string key = 1;
    string value = 2;
}
repeated SubscriptionAttributesMap SubscriptionAttributesMap = 1

message SubscriptionLimitExceededException {
    string message = 1;
}

repeated Subscription SubscriptionsList = 1

message ThrottledException {
    // Throttled request.
    string message = 1;
}

message Topic {
    // The topic's ARN.
    string TopicArn = 1;
}

message TopicAttributesMap {
    string key = 1;
    string value = 2;
}
repeated TopicAttributesMap TopicAttributesMap = 1

message TopicLimitExceededException {
    string message = 1;
}

repeated Topic TopicsList = 1

message UnsubscribeInput {
    // The ARN of the subscription to be deleted.
    string SubscriptionArn = 1;
}

service AmazonSimpleNotificationServiceService {
    // Adds a statement to a topic's access control policy, granting access for the specified AWS accounts to the specified actions.
    rpc Post(PostRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//"
        body: "body"
      };
    }
    // <p>Accepts a phone number and indicates whether the phone holder has opted out of receiving SMS messages from your account. You cannot send SMS messages to a number that is opted out.</p> <p>To resume sending messages, you can opt in the number by using the <code>OptInPhoneNumber</code> action.</p>
    rpc Post#CheckIfPhoneNumberIsOptedOut(Post#CheckIfPhoneNumberIsOptedOutRequest) returns (CheckIfPhoneNumberIsOptedOutResponse) {
      option (google.api.http) = {
        post: "//#CheckIfPhoneNumberIsOptedOut"
        body: "body"
      };
    }
    // Verifies an endpoint owner's intent to receive messages by validating the token sent to the endpoint by an earlier <code>Subscribe</code> action. If the token is valid, the action creates a new subscription and returns its Amazon Resource Name (ARN). This call requires an AWS signature only when the <code>AuthenticateOnUnsubscribe</code> flag is set to "true".
    rpc Post#ConfirmSubscription(Post#ConfirmSubscriptionRequest) returns (ConfirmSubscriptionResponse) {
      option (google.api.http) = {
        post: "//#ConfirmSubscription"
        body: "body"
      };
    }
    // <p>Creates a platform application object for one of the supported push notification services, such as APNS and GCM, to which devices and mobile apps may register. You must specify PlatformPrincipal and PlatformCredential attributes when using the <code>CreatePlatformApplication</code> action. The PlatformPrincipal is received from the notification service. For APNS/APNS_SANDBOX, PlatformPrincipal is "SSL certificate". For GCM, PlatformPrincipal is not applicable. For ADM, PlatformPrincipal is "client id". The PlatformCredential is also received from the notification service. For WNS, PlatformPrincipal is "Package Security Identifier". For MPNS, PlatformPrincipal is "TLS certificate". For Baidu, PlatformPrincipal is "API key".</p> <p>For APNS/APNS_SANDBOX, PlatformCredential is "private key". For GCM, PlatformCredential is "API key". For ADM, PlatformCredential is "client secret". For WNS, PlatformCredential is "secret key". For MPNS, PlatformCredential is "private key". For Baidu, PlatformCredential is "secret key". The PlatformApplicationArn that is returned when using <code>CreatePlatformApplication</code> is then used as an attribute for the <code>CreatePlatformEndpoint</code> action. For more information, see <a href="http://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push Notifications</a>. For more information about obtaining the PlatformPrincipal and PlatformCredential for each of the supported push notification services, see <a href="http://docs.aws.amazon.com/sns/latest/dg/mobile-push-apns.html">Getting Started with Apple Push Notification Service</a>, <a href="http://docs.aws.amazon.com/sns/latest/dg/mobile-push-adm.html">Getting Started with Amazon Device Messaging</a>, <a href="http://docs.aws.amazon.com/sns/latest/dg/mobile-push-baidu.html">Getting Started with Baidu Cloud Push</a>, <a href="http://docs.aws.amazon.com/sns/latest/dg/mobile-push-gcm.html">Getting Started with Google Cloud Messaging for Android</a>, <a href="http://docs.aws.amazon.com/sns/latest/dg/mobile-push-mpns.html">Getting Started with MPNS</a>, or <a href="http://docs.aws.amazon.com/sns/latest/dg/mobile-push-wns.html">Getting Started with WNS</a>. </p>
    rpc Post#CreatePlatformApplication(Post#CreatePlatformApplicationRequest) returns (CreatePlatformApplicationResponse) {
      option (google.api.http) = {
        post: "//#CreatePlatformApplication"
        body: "body"
      };
    }
    // <p>Creates an endpoint for a device and mobile app on one of the supported push notification services, such as GCM and APNS. <code>CreatePlatformEndpoint</code> requires the PlatformApplicationArn that is returned from <code>CreatePlatformApplication</code>. The EndpointArn that is returned when using <code>CreatePlatformEndpoint</code> can then be used by the <code>Publish</code> action to send a message to a mobile app or by the <code>Subscribe</code> action for subscription to a topic. The <code>CreatePlatformEndpoint</code> action is idempotent, so if the requester already owns an endpoint with the same device token and attributes, that endpoint's ARN is returned without creating a new endpoint. For more information, see <a href="http://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push Notifications</a>. </p> <p>When using <code>CreatePlatformEndpoint</code> with Baidu, two attributes must be provided: ChannelId and UserId. The token field must also contain the ChannelId. For more information, see <a href="http://docs.aws.amazon.com/sns/latest/dg/SNSMobilePushBaiduEndpoint.html">Creating an Amazon SNS Endpoint for Baidu</a>. </p>
    rpc Post#CreatePlatformEndpoint(Post#CreatePlatformEndpointRequest) returns (CreateEndpointResponse) {
      option (google.api.http) = {
        post: "//#CreatePlatformEndpoint"
        body: "body"
      };
    }
    // Creates a topic to which notifications can be published. Users can create at most 100,000 topics. For more information, see <a href="http://aws.amazon.com/sns/">http://aws.amazon.com/sns</a>. This action is idempotent, so if the requester already owns a topic with the specified name, that topic's ARN is returned without creating a new topic.
    rpc Post#CreateTopic(Post#CreateTopicRequest) returns (CreateTopicResponse) {
      option (google.api.http) = {
        post: "//#CreateTopic"
        body: "body"
      };
    }
    // <p>Deletes the endpoint for a device and mobile app from Amazon SNS. This action is idempotent. For more information, see <a href="http://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push Notifications</a>. </p> <p>When you delete an endpoint that is also subscribed to a topic, then you must also unsubscribe the endpoint from the topic.</p>
    rpc Post#DeleteEndpoint(Post#DeleteEndpointRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#DeleteEndpoint"
        body: "body"
      };
    }
    // Deletes a platform application object for one of the supported push notification services, such as APNS and GCM. For more information, see <a href="http://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push Notifications</a>.
    rpc Post#DeletePlatformApplication(Post#DeletePlatformApplicationRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#DeletePlatformApplication"
        body: "body"
      };
    }
    // Deletes a topic and all its subscriptions. Deleting a topic might prevent some messages previously sent to the topic from being delivered to subscribers. This action is idempotent, so deleting a topic that does not exist does not result in an error.
    rpc Post#DeleteTopic(Post#DeleteTopicRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#DeleteTopic"
        body: "body"
      };
    }
    // Retrieves the endpoint attributes for a device on one of the supported push notification services, such as GCM and APNS. For more information, see <a href="http://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push Notifications</a>.
    rpc Post#GetEndpointAttributes(Post#GetEndpointAttributesRequest) returns (GetEndpointAttributesResponse) {
      option (google.api.http) = {
        post: "//#GetEndpointAttributes"
        body: "body"
      };
    }
    // Retrieves the attributes of the platform application object for the supported push notification services, such as APNS and GCM. For more information, see <a href="http://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push Notifications</a>.
    rpc Post#GetPlatformApplicationAttributes(Post#GetPlatformApplicationAttributesRequest) returns (GetPlatformApplicationAttributesResponse) {
      option (google.api.http) = {
        post: "//#GetPlatformApplicationAttributes"
        body: "body"
      };
    }
    // <p>Returns the settings for sending SMS messages from your account.</p> <p>These settings are set with the <code>SetSMSAttributes</code> action.</p>
    rpc Post#GetSMSAttributes(Post#GetSMSAttributesRequest) returns (GetSMSAttributesResponse) {
      option (google.api.http) = {
        post: "//#GetSMSAttributes"
        body: "body"
      };
    }
    // Returns all of the properties of a subscription.
    rpc Post#GetSubscriptionAttributes(Post#GetSubscriptionAttributesRequest) returns (GetSubscriptionAttributesResponse) {
      option (google.api.http) = {
        post: "//#GetSubscriptionAttributes"
        body: "body"
      };
    }
    // Returns all of the properties of a topic. Topic properties returned might differ based on the authorization of the user.
    rpc Post#GetTopicAttributes(Post#GetTopicAttributesRequest) returns (GetTopicAttributesResponse) {
      option (google.api.http) = {
        post: "//#GetTopicAttributes"
        body: "body"
      };
    }
    // Lists the endpoints and endpoint attributes for devices in a supported push notification service, such as GCM and APNS. The results for <code>ListEndpointsByPlatformApplication</code> are paginated and return a limited list of endpoints, up to 100. If additional records are available after the first page results, then a NextToken string will be returned. To receive the next page, you call <code>ListEndpointsByPlatformApplication</code> again using the NextToken string received from the previous call. When there are no more records to return, NextToken will be null. For more information, see <a href="http://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push Notifications</a>.
    rpc Post#ListEndpointsByPlatformApplication(Post#ListEndpointsByPlatformApplicationRequest) returns (ListEndpointsByPlatformApplicationResponse) {
      option (google.api.http) = {
        post: "//#ListEndpointsByPlatformApplication"
        body: "body"
      };
    }
    // <p>Returns a list of phone numbers that are opted out, meaning you cannot send SMS messages to them.</p> <p>The results for <code>ListPhoneNumbersOptedOut</code> are paginated, and each page returns up to 100 phone numbers. If additional phone numbers are available after the first page of results, then a <code>NextToken</code> string will be returned. To receive the next page, you call <code>ListPhoneNumbersOptedOut</code> again using the <code>NextToken</code> string received from the previous call. When there are no more records to return, <code>NextToken</code> will be null.</p>
    rpc Post#ListPhoneNumbersOptedOut(Post#ListPhoneNumbersOptedOutRequest) returns (ListPhoneNumbersOptedOutResponse) {
      option (google.api.http) = {
        post: "//#ListPhoneNumbersOptedOut"
        body: "body"
      };
    }
    // Lists the platform application objects for the supported push notification services, such as APNS and GCM. The results for <code>ListPlatformApplications</code> are paginated and return a limited list of applications, up to 100. If additional records are available after the first page results, then a NextToken string will be returned. To receive the next page, you call <code>ListPlatformApplications</code> using the NextToken string received from the previous call. When there are no more records to return, NextToken will be null. For more information, see <a href="http://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push Notifications</a>.
    rpc Post#ListPlatformApplications(Post#ListPlatformApplicationsRequest) returns (ListPlatformApplicationsResponse) {
      option (google.api.http) = {
        post: "//#ListPlatformApplications"
        body: "body"
      };
    }
    // Returns a list of the requester's subscriptions. Each call returns a limited list of subscriptions, up to 100. If there are more subscriptions, a <code>NextToken</code> is also returned. Use the <code>NextToken</code> parameter in a new <code>ListSubscriptions</code> call to get further results.
    rpc Post#ListSubscriptions(Post#ListSubscriptionsRequest) returns (ListSubscriptionsResponse) {
      option (google.api.http) = {
        post: "//#ListSubscriptions"
        body: "body"
      };
    }
    // Returns a list of the subscriptions to a specific topic. Each call returns a limited list of subscriptions, up to 100. If there are more subscriptions, a <code>NextToken</code> is also returned. Use the <code>NextToken</code> parameter in a new <code>ListSubscriptionsByTopic</code> call to get further results.
    rpc Post#ListSubscriptionsByTopic(Post#ListSubscriptionsByTopicRequest) returns (ListSubscriptionsByTopicResponse) {
      option (google.api.http) = {
        post: "//#ListSubscriptionsByTopic"
        body: "body"
      };
    }
    // Returns a list of the requester's topics. Each call returns a limited list of topics, up to 100. If there are more topics, a <code>NextToken</code> is also returned. Use the <code>NextToken</code> parameter in a new <code>ListTopics</code> call to get further results.
    rpc Post#ListTopics(Post#ListTopicsRequest) returns (ListTopicsResponse) {
      option (google.api.http) = {
        post: "//#ListTopics"
        body: "body"
      };
    }
    // <p>Use this request to opt in a phone number that is opted out, which enables you to resume sending SMS messages to the number.</p> <p>You can opt in a phone number only once every 30 days.</p>
    rpc Post#OptInPhoneNumber(Post#OptInPhoneNumberRequest) returns (OptInPhoneNumberResponse) {
      option (google.api.http) = {
        post: "//#OptInPhoneNumber"
        body: "body"
      };
    }
    // <p>Sends a message to all of a topic's subscribed endpoints. When a <code>messageId</code> is returned, the message has been saved and Amazon SNS will attempt to deliver it to the topic's subscribers shortly. The format of the outgoing message to each subscribed endpoint depends on the notification protocol.</p> <p>To use the <code>Publish</code> action for sending a message to a mobile endpoint, such as an app on a Kindle device or mobile phone, you must specify the EndpointArn for the TargetArn parameter. The EndpointArn is returned when making a call with the <code>CreatePlatformEndpoint</code> action. </p> <p>For more information about formatting messages, see <a href="http://docs.aws.amazon.com/sns/latest/dg/mobile-push-send-custommessage.html">Send Custom Platform-Specific Payloads in Messages to Mobile Devices</a>. </p>
    rpc Post#Publish(Post#PublishRequest) returns (PublishResponse) {
      option (google.api.http) = {
        post: "//#Publish"
        body: "body"
      };
    }
    // Removes a statement from a topic's access control policy.
    rpc Post#RemovePermission(Post#RemovePermissionRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#RemovePermission"
        body: "body"
      };
    }
    // Sets the attributes for an endpoint for a device on one of the supported push notification services, such as GCM and APNS. For more information, see <a href="http://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push Notifications</a>.
    rpc Post#SetEndpointAttributes(Post#SetEndpointAttributesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#SetEndpointAttributes"
        body: "body"
      };
    }
    // Sets the attributes of the platform application object for the supported push notification services, such as APNS and GCM. For more information, see <a href="http://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push Notifications</a>. For information on configuring attributes for message delivery status, see <a href="http://docs.aws.amazon.com/sns/latest/dg/sns-msg-status.html">Using Amazon SNS Application Attributes for Message Delivery Status</a>.
    rpc Post#SetPlatformApplicationAttributes(Post#SetPlatformApplicationAttributesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#SetPlatformApplicationAttributes"
        body: "body"
      };
    }
    // <p>Use this request to set the default settings for sending SMS messages and receiving daily SMS usage reports.</p> <p>You can override some of these settings for a single message when you use the <code>Publish</code> action with the <code>MessageAttributes.entry.N</code> parameter. For more information, see <a href="http://docs.aws.amazon.com/sns/latest/dg/sms_publish-to-phone.html">Sending an SMS Message</a> in the <i>Amazon SNS Developer Guide</i>.</p>
    rpc Post#SetSMSAttributes(Post#SetSMSAttributesRequest) returns (SetSMSAttributesResponse) {
      option (google.api.http) = {
        post: "//#SetSMSAttributes"
        body: "body"
      };
    }
    // Allows a subscription owner to set an attribute of the topic to a new value.
    rpc Post#SetSubscriptionAttributes(Post#SetSubscriptionAttributesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#SetSubscriptionAttributes"
        body: "body"
      };
    }
    // Allows a topic owner to set an attribute of the topic to a new value.
    rpc Post#SetTopicAttributes(Post#SetTopicAttributesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#SetTopicAttributes"
        body: "body"
      };
    }
    // Prepares to subscribe an endpoint by sending the endpoint a confirmation message. To actually create a subscription, the endpoint owner must call the <code>ConfirmSubscription</code> action with the token from the confirmation message. Confirmation tokens are valid for three days.
    rpc Post#Subscribe(Post#SubscribeRequest) returns (SubscribeResponse) {
      option (google.api.http) = {
        post: "//#Subscribe"
        body: "body"
      };
    }
    // Deletes a subscription. If the subscription requires authentication for deletion, only the owner of the subscription or the topic's owner can unsubscribe, and an AWS signature is required. If the <code>Unsubscribe</code> call does not require authentication and the requester is not the subscription owner, a final cancellation message is delivered to the endpoint, so that the endpoint owner can easily resubscribe to the topic if the <code>Unsubscribe</code> request was unintended.
    rpc Post#Unsubscribe(Post#UnsubscribeRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#Unsubscribe"
        body: "body"
      };
    }
}

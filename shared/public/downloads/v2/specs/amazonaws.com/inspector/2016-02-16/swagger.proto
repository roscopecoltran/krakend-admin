syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package amazoninspector;

message PostRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AddAttributesToFindingsRequest body = 10;
}

message Post#CreateAssessmentTargetRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateAssessmentTargetRequest body = 10;
}

message Post#CreateAssessmentTemplateRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateAssessmentTemplateRequest body = 10;
}

message Post#CreateResourceGroupRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateResourceGroupRequest body = 10;
}

message Post#DeleteAssessmentRunRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteAssessmentRunRequest body = 10;
}

message Post#DeleteAssessmentTargetRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteAssessmentTargetRequest body = 10;
}

message Post#DeleteAssessmentTemplateRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteAssessmentTemplateRequest body = 10;
}

message Post#DescribeAssessmentRunsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeAssessmentRunsRequest body = 10;
}

message Post#DescribeAssessmentTargetsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeAssessmentTargetsRequest body = 10;
}

message Post#DescribeAssessmentTemplatesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeAssessmentTemplatesRequest body = 10;
}

message Post#DescribeCrossAccountAccessRoleRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
}

message Post#DescribeFindingsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeFindingsRequest body = 10;
}

message Post#DescribeResourceGroupsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeResourceGroupsRequest body = 10;
}

message Post#DescribeRulesPackagesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeRulesPackagesRequest body = 10;
}

message Post#GetAssessmentReportRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetAssessmentReportRequest body = 10;
}

message Post#GetTelemetryMetadataRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetTelemetryMetadataRequest body = 10;
}

message Post#ListAssessmentRunAgentsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListAssessmentRunAgentsRequest body = 10;
    // Pagination limit
    string maxResults = 11;
    // Pagination token
    string nextToken = 12;
}

message Post#ListAssessmentRunsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListAssessmentRunsRequest body = 10;
    // Pagination limit
    string maxResults = 11;
    // Pagination token
    string nextToken = 12;
}

message Post#ListAssessmentTargetsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListAssessmentTargetsRequest body = 10;
    // Pagination limit
    string maxResults = 11;
    // Pagination token
    string nextToken = 12;
}

message Post#ListAssessmentTemplatesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListAssessmentTemplatesRequest body = 10;
    // Pagination limit
    string maxResults = 11;
    // Pagination token
    string nextToken = 12;
}

message Post#ListEventSubscriptionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListEventSubscriptionsRequest body = 10;
    // Pagination limit
    string maxResults = 11;
    // Pagination token
    string nextToken = 12;
}

message Post#ListFindingsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListFindingsRequest body = 10;
    // Pagination limit
    string maxResults = 11;
    // Pagination token
    string nextToken = 12;
}

message Post#ListRulesPackagesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListRulesPackagesRequest body = 10;
    // Pagination limit
    string maxResults = 11;
    // Pagination token
    string nextToken = 12;
}

message Post#ListTagsForResourceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListTagsForResourceRequest body = 10;
}

message Post#PreviewAgentsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    PreviewAgentsRequest body = 10;
    // Pagination limit
    string maxResults = 11;
    // Pagination token
    string nextToken = 12;
}

message Post#RegisterCrossAccountAccessRoleRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RegisterCrossAccountAccessRoleRequest body = 10;
}

message Post#RemoveAttributesFromFindingsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RemoveAttributesFromFindingsRequest body = 10;
}

message Post#SetTagsForResourceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    SetTagsForResourceRequest body = 10;
}

message Post#StartAssessmentRunRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StartAssessmentRunRequest body = 10;
}

message Post#StopAssessmentRunRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StopAssessmentRunRequest body = 10;
}

message Post#SubscribeToEventRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    SubscribeToEventRequest body = 10;
}

message Post#UnsubscribeFromEventRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UnsubscribeFromEventRequest body = 10;
}

message Post#UpdateAssessmentTargetRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateAssessmentTargetRequest body = 10;
}

enum AccessDeniedErrorCode {
    ACCESS_DENIED_TO_ASSESSMENT_TARGET = 0;
    ACCESS_DENIED_TO_ASSESSMENT_TEMPLATE = 1;
    ACCESS_DENIED_TO_ASSESSMENT_RUN = 2;
    ACCESS_DENIED_TO_FINDING = 3;
    ACCESS_DENIED_TO_RESOURCE_GROUP = 4;
    ACCESS_DENIED_TO_RULES_PACKAGE = 5;
    ACCESS_DENIED_TO_SNS_TOPIC = 6;
    ACCESS_DENIED_TO_IAM_ROLE = 7;
}

message AccessDeniedException {
    // You can immediately retry your request.
    boolean canRetry = 1;
    // Code that indicates the type of error that is generated.
    AccessDeniedErrorCode errorCode = 2;
    // Details of the exception error.
    string message = 3;
}

message AddAttributesToFindingsRequest {
    // The array of attributes that you want to assign to specified findings.
    array attributes = 1;
    // The ARNs that specify the findings that you want to assign attributes to.
    array findingArns = 2;
}

message AddAttributesToFindingsResponse {
    // Attribute details that cannot be described. An error code is provided for each failed item.
    array failedItems = 1;
}

repeated string AddRemoveAttributesFindingArnList = 1

message AgentAlreadyRunningAssessment {
    // ID of the agent that is running on an EC2 instance that is already participating in another started assessment run.
    string agentId = 1;
    // The ARN of the assessment run that has already been started.
    string assessmentRunArn = 2;
}

repeated AgentAlreadyRunningAssessment AgentAlreadyRunningAssessmentList = 1

message AgentFilter {
    // The detailed health state of the agent. Values can be set to <b>IDLE</b>, <b>RUNNING</b>, <b>SHUTDOWN</b>, <b>UNHEALTHY</b>, <b>THROTTLED</b>, and <b>UNKNOWN</b>.
    array agentHealthCodes = 1;
    // The current health state of the agent. Values can be set to <b>HEALTHY</b> or <b>UNHEALTHY</b>.
    array agentHealths = 2;
}

enum AgentHealth {
    HEALTHY = 0;
    UNHEALTHY = 1;
}

enum AgentHealthCode {
    IDLE = 0;
    RUNNING = 1;
    SHUTDOWN = 2;
    UNHEALTHY = 3;
    THROTTLED = 4;
    UNKNOWN = 5;
}

repeated AgentHealthCode AgentHealthCodeList = 1

repeated AgentHealth AgentHealthList = 1



repeated string AgentIdList = 1

message AgentPreview {
    // The ID of the EC2 instance where the agent is installed.
    string agentId = 1;
    // The Auto Scaling group for the EC2 instance where the agent is installed.
    string autoScalingGroup = 2;
}

repeated AgentPreview AgentPreviewList = 1

message AgentsAlreadyRunningAssessmentException {
    // <p/>
    array agents = 1;
    // <p/>
    boolean agentsTruncated = 2;
    // You can immediately retry your request.
    boolean canRetry = 3;
    // Details of the exception error.
    string message = 4;
}





repeated string AssessmentRulesPackageArnList = 1

message AssessmentRun {
    // The ARN of the assessment run.
    string arn = 1;
    // The ARN of the assessment template that is associated with the assessment run.
    string assessmentTemplateArn = 2;
    // The assessment run completion time that corresponds to the rules packages evaluation completion time or failure.
    string completedAt = 3;
    // The time when <a>StartAssessmentRun</a> was called.
    string createdAt = 4;
    // A Boolean value (true or false) that specifies whether the process of collecting data from the agents is completed.
    boolean dataCollected = 5;
    // The duration of the assessment run.
    integer durationInSeconds = 6;
    // Provides a total count of generated findings per severity.
    array findingCounts = 7;
    // The auto-generated name for the assessment run.
    string name = 8;
    // A list of notifications for the event subscriptions. A notification about a particular generated finding is added to this list only once.
    array notifications = 9;
    // The rules packages selected for the assessment run.
    array rulesPackageArns = 10;
    // The time when <a>StartAssessmentRun</a> was called.
    string startedAt = 11;
    // The state of the assessment run.
    AssessmentRunState state = 12;
    // The last time when the assessment run's state changed.
    string stateChangedAt = 13;
    // A list of the assessment run state changes.
    array stateChanges = 14;
    // The user-defined attributes that are assigned to every generated finding.
    array userAttributesForFindings = 15;
}

message AssessmentRunAgent {
    // The current health state of the agent.
    AgentHealth agentHealth = 1;
    // The detailed health state of the agent.
    AgentHealthCode agentHealthCode = 2;
    // The description for the agent health code.
    string agentHealthDetails = 3;
    // The AWS account of the EC2 instance where the agent is installed.
    string agentId = 4;
    // The ARN of the assessment run that is associated with the agent.
    string assessmentRunArn = 5;
    // The Auto Scaling group of the EC2 instance that is specified by the agent ID.
    string autoScalingGroup = 6;
    // The Amazon Inspector application data metrics that are collected by the agent.
    array telemetryMetadata = 7;
}

repeated AssessmentRunAgent AssessmentRunAgentList = 1



message AssessmentRunFilter {
    // For a record to match a filter, the value that is specified for this data type property must inclusively match any value between the specified minimum and maximum values of the <b>completedAt</b> property of the <a>AssessmentRun</a> data type.
    TimestampRange completionTimeRange = 1;
    // For a record to match a filter, the value that is specified for this data type property must inclusively match any value between the specified minimum and maximum values of the <b>durationInSeconds</b> property of the <a>AssessmentRun</a> data type.
    DurationRange durationRange = 2;
    // For a record to match a filter, an explicit value or a string containing a wildcard that is specified for this data type property must match the value of the <b>assessmentRunName</b> property of the <a>AssessmentRun</a> data type.
    string namePattern = 3;
    // For a record to match a filter, the value that is specified for this data type property must be contained in the list of values of the <b>rulesPackages</b> property of the <a>AssessmentRun</a> data type.
    array rulesPackageArns = 4;
    // For a record to match a filter, the value that is specified for this data type property must inclusively match any value between the specified minimum and maximum values of the <b>startTime</b> property of the <a>AssessmentRun</a> data type.
    TimestampRange startTimeRange = 5;
    // For a record to match a filter, the value that is specified for this data type property must match the <b>stateChangedAt</b> property of the <a>AssessmentRun</a> data type.
    TimestampRange stateChangeTimeRange = 6;
    // For a record to match a filter, one of the values specified for this data type property must be the exact match of the value of the <b>assessmentRunState</b> property of the <a>AssessmentRun</a> data type.
    array states = 7;
}

message AssessmentRunFindingCount {
    Severity key = 1;
    integer value = 2;
}
repeated AssessmentRunFindingCount AssessmentRunFindingCounts = 1

repeated string AssessmentRunInProgressArnList = 1

message AssessmentRunInProgressException {
    // The ARNs of the assessment runs that are currently in progress.
    array assessmentRunArns = 1;
    // Boolean value that indicates whether the ARN list of the assessment runs is truncated.
    boolean assessmentRunArnsTruncated = 2;
    // You can immediately retry your request.
    boolean canRetry = 3;
    // Details of the exception error.
    string message = 4;
}

repeated AssessmentRun AssessmentRunList = 1



message AssessmentRunNotification {
    // The date of the notification.
    string date = 1;
    // The Boolean value that specifies whether the notification represents an error.
    boolean error = 2;
    // The event for which a notification is sent.
    InspectorEvent event = 3;
    // The message included in the notification.
    string message = 4;
    // The status code of the SNS notification.
    AssessmentRunNotificationSnsStatusCode snsPublishStatusCode = 5;
    // The SNS topic to which the SNS notification is sent.
    string snsTopicArn = 6;
}

repeated AssessmentRunNotification AssessmentRunNotificationList = 1

enum AssessmentRunNotificationSnsStatusCode {
    SUCCESS = 0;
    TOPIC_DOES_NOT_EXIST = 1;
    ACCESS_DENIED = 2;
    INTERNAL_ERROR = 3;
}

enum AssessmentRunState {
    CREATED = 0;
    START_DATA_COLLECTION_PENDING = 1;
    START_DATA_COLLECTION_IN_PROGRESS = 2;
    COLLECTING_DATA = 3;
    STOP_DATA_COLLECTION_PENDING = 4;
    DATA_COLLECTED = 5;
    START_EVALUATING_RULES_PENDING = 6;
    EVALUATING_RULES = 7;
    FAILED = 8;
    ERROR = 9;
    COMPLETED = 10;
    COMPLETED_WITH_ERRORS = 11;
    CANCELED = 12;
}

message AssessmentRunStateChange {
    // The assessment run state.
    AssessmentRunState state = 1;
    // The last time the assessment run state changed.
    string stateChangedAt = 2;
}

repeated AssessmentRunStateChange AssessmentRunStateChangeList = 1

repeated AssessmentRunState AssessmentRunStateList = 1

message AssessmentTarget {
    // The ARN that specifies the Amazon Inspector assessment target.
    string arn = 1;
    // The time at which the assessment target is created.
    string createdAt = 2;
    // The name of the Amazon Inspector assessment target.
    string name = 3;
    // The ARN that specifies the resource group that is associated with the assessment target.
    string resourceGroupArn = 4;
    // The time at which <a>UpdateAssessmentTarget</a> is called.
    string updatedAt = 5;
}

message AssessmentTargetFilter {
    // For a record to match a filter, an explicit value or a string that contains a wildcard that is specified for this data type property must match the value of the <b>assessmentTargetName</b> property of the <a>AssessmentTarget</a> data type.
    string assessmentTargetNamePattern = 1;
}

repeated AssessmentTarget AssessmentTargetList = 1



message AssessmentTemplate {
    // The ARN of the assessment template.
    string arn = 1;
    // The ARN of the assessment target that corresponds to this assessment template.
    string assessmentTargetArn = 2;
    // The time at which the assessment template is created.
    string createdAt = 3;
    // The duration in seconds specified for this assessment tempate. The default value is 3600 seconds (one hour). The maximum value is 86400 seconds (one day).
    integer durationInSeconds = 4;
    // The name of the assessment template.
    string name = 5;
    // The rules packages that are specified for this assessment template.
    array rulesPackageArns = 6;
    // The user-defined attributes that are assigned to every generated finding from the assessment run that uses this assessment template.
    array userAttributesForFindings = 7;
}

message AssessmentTemplateFilter {
    // For a record to match a filter, the value specified for this data type property must inclusively match any value between the specified minimum and maximum values of the <b>durationInSeconds</b> property of the <a>AssessmentTemplate</a> data type.
    DurationRange durationRange = 1;
    // For a record to match a filter, an explicit value or a string that contains a wildcard that is specified for this data type property must match the value of the <b>assessmentTemplateName</b> property of the <a>AssessmentTemplate</a> data type.
    string namePattern = 2;
    // For a record to match a filter, the values that are specified for this data type property must be contained in the list of values of the <b>rulesPackageArns</b> property of the <a>AssessmentTemplate</a> data type.
    array rulesPackageArns = 3;
}

repeated AssessmentTemplate AssessmentTemplateList = 1



repeated string AssessmentTemplateRulesPackageArnList = 1

message AssetAttributes {
    // The ID of the agent that is installed on the EC2 instance where the finding is generated.
    string agentId = 1;
    // The ID of the Amazon Machine Image (AMI) that is installed on the EC2 instance where the finding is generated.
    string amiId = 2;
    // The Auto Scaling group of the EC2 instance where the finding is generated.
    string autoScalingGroup = 3;
    // The hostname of the EC2 instance where the finding is generated.
    string hostname = 4;
    // The list of IP v4 addresses of the EC2 instance where the finding is generated.
    array ipv4Addresses = 5;
    // The schema version of this data type.
    integer schemaVersion = 6;
}

enum AssetType {
    EC2INSTANCE = 0;
}

message Attribute {
    // The attribute key.
    string key = 1;
    // The value assigned to the attribute key.
    string value = 2;
}



repeated Attribute AttributeList = 1





repeated string AutoScalingGroupList = 1

repeated string BatchDescribeArnList = 1



message CreateAssessmentTargetRequest {
    // The user-defined name that identifies the assessment target that you want to create. The name must be unique within the AWS account.
    string assessmentTargetName = 1;
    // The ARN that specifies the resource group that is used to create the assessment target.
    string resourceGroupArn = 2;
}

message CreateAssessmentTargetResponse {
    // The ARN that specifies the assessment target that is created.
    string assessmentTargetArn = 1;
}

message CreateAssessmentTemplateRequest {
    // The ARN that specifies the assessment target for which you want to create the assessment template.
    string assessmentTargetArn = 1;
    // The user-defined name that identifies the assessment template that you want to create. You can create several assessment templates for an assessment target. The names of the assessment templates that correspond to a particular assessment target must be unique.
    string assessmentTemplateName = 2;
    // The duration of the assessment run in seconds. The default value is 3600 seconds (one hour).
    integer durationInSeconds = 3;
    // The ARNs that specify the rules packages that you want to attach to the assessment template.
    array rulesPackageArns = 4;
    // The user-defined attributes that are assigned to every finding that is generated by the assessment run that uses this assessment template. An attribute is a key and value pair (an <a>Attribute</a> object). Within an assessment template, each key must be unique.
    array userAttributesForFindings = 5;
}

message CreateAssessmentTemplateResponse {
    // The ARN that specifies the assessment template that is created.
    string assessmentTemplateArn = 1;
}

message CreateResourceGroupRequest {
    // <p>A collection of keys and an array of possible values, '[{"key":"key1","values":["Value1","Value2"]},{"key":"Key2","values":["Value3"]}]'.</p> <p>For example,'[{"key":"Name","values":["TestEC2Instance"]}]'.</p>
    array resourceGroupTags = 1;
}

message CreateResourceGroupResponse {
    // The ARN that specifies the resource group that is created.
    string resourceGroupArn = 1;
}

message DeleteAssessmentRunRequest {
    // The ARN that specifies the assessment run that you want to delete.
    string assessmentRunArn = 1;
}

message DeleteAssessmentTargetRequest {
    // The ARN that specifies the assessment target that you want to delete.
    string assessmentTargetArn = 1;
}

message DeleteAssessmentTemplateRequest {
    // The ARN that specifies the assessment template that you want to delete.
    string assessmentTemplateArn = 1;
}

message DescribeAssessmentRunsRequest {
    // The ARN that specifies the assessment run that you want to describe.
    array assessmentRunArns = 1;
}

message DescribeAssessmentRunsResponse {
    // Information about the assessment run.
    array assessmentRuns = 1;
    // Assessment run details that cannot be described. An error code is provided for each failed item.
    array failedItems = 2;
}

message DescribeAssessmentTargetsRequest {
    // The ARNs that specifies the assessment targets that you want to describe.
    array assessmentTargetArns = 1;
}

message DescribeAssessmentTargetsResponse {
    // Information about the assessment targets.
    array assessmentTargets = 1;
    // Assessment target details that cannot be described. An error code is provided for each failed item.
    array failedItems = 2;
}

message DescribeAssessmentTemplatesRequest {
    array assessmentTemplateArns = 1;
}

message DescribeAssessmentTemplatesResponse {
    // Information about the assessment templates.
    array assessmentTemplates = 1;
    // Assessment template details that cannot be described. An error code is provided for each failed item.
    array failedItems = 2;
}

message DescribeCrossAccountAccessRoleResponse {
    // The date when the cross-account access role was registered.
    string registeredAt = 1;
    // The ARN that specifies the IAM role that Amazon Inspector uses to access your AWS account.
    string roleArn = 2;
    // A Boolean value that specifies whether the IAM role has the necessary policies attached to enable Amazon Inspector to access your AWS account.
    boolean valid = 3;
}

message DescribeFindingsRequest {
    // The ARN that specifies the finding that you want to describe.
    array findingArns = 1;
    // The locale into which you want to translate a finding description, recommendation, and the short description that identifies the finding.
    Locale locale = 2;
}

message DescribeFindingsResponse {
    // Finding details that cannot be described. An error code is provided for each failed item.
    array failedItems = 1;
    // Information about the finding.
    array findings = 2;
}

message DescribeResourceGroupsRequest {
    // The ARN that specifies the resource group that you want to describe.
    array resourceGroupArns = 1;
}

message DescribeResourceGroupsResponse {
    // Resource group details that cannot be described. An error code is provided for each failed item.
    array failedItems = 1;
    // Information about a resource group.
    array resourceGroups = 2;
}

message DescribeRulesPackagesRequest {
    // The locale that you want to translate a rules package description into.
    Locale locale = 1;
    // The ARN that specifies the rules package that you want to describe.
    array rulesPackageArns = 2;
}

message DescribeRulesPackagesResponse {
    // Rules package details that cannot be described. An error code is provided for each failed item.
    array failedItems = 1;
    // Information about the rules package.
    array rulesPackages = 2;
}

message DurationRange {
    // The maximum value of the duration range. Must be less than or equal to 604800 seconds (1 week).
    integer maxSeconds = 1;
    // The minimum value of the duration range. Must be greater than zero.
    integer minSeconds = 2;
}

message EventSubscription {
    // The event for which Amazon Simple Notification Service (SNS) notifications are sent.
    InspectorEvent event = 1;
    // The time at which <a>SubscribeToEvent</a> is called.
    string subscribedAt = 2;
}

repeated EventSubscription EventSubscriptionList = 1

message FailedItemDetails {
    // The status code of a failed item.
    FailedItemErrorCode failureCode = 1;
    // Indicates whether you can immediately retry a request for this item for a specified resource.
    boolean retryable = 2;
}

enum FailedItemErrorCode {
    INVALID_ARN = 0;
    DUPLICATE_ARN = 1;
    ITEM_DOES_NOT_EXIST = 2;
    ACCESS_DENIED = 3;
    LIMIT_EXCEEDED = 4;
    INTERNAL_ERROR = 5;
}

message FailedItem {
    string key = 1;
    FailedItemDetails value = 2;
}
repeated FailedItem FailedItems = 1

repeated string FilterRulesPackageArnList = 1

message Finding {
    // The ARN that specifies the finding.
    string arn = 1;
    // A collection of attributes of the host from which the finding is generated.
    AssetAttributes assetAttributes = 2;
    // The type of the host from which the finding is generated.
    AssetType assetType = 3;
    // The system-defined attributes for the finding.
    array attributes = 4;
    // This data element is currently not used.
    integer confidence = 5;
    // The time when the finding was generated.
    string createdAt = 6;
    // The description of the finding.
    string description = 7;
    // The ID of the finding.
    string id = 8;
    // This data element is currently not used.
    boolean indicatorOfCompromise = 9;
    // The numeric value of the finding severity.
    number numericSeverity = 10;
    // The recommendation for the finding.
    string recommendation = 11;
    // The schema version of this data type.
    integer schemaVersion = 12;
    // The data element is set to "Inspector".
    string service = 13;
    // This data type is used in the <a>Finding</a> data type.
    InspectorServiceAttributes serviceAttributes = 14;
    // The finding severity. Values can be set to High, Medium, Low, and Informational.
    Severity severity = 15;
    // The name of the finding.
    string title = 16;
    // The time when <a>AddAttributesToFindings</a> is called.
    string updatedAt = 17;
    // The user-defined attributes that are assigned to the finding.
    array userAttributes = 18;
}

message FindingFilter {
    // For a record to match a filter, one of the values that is specified for this data type property must be the exact match of the value of the <b>agentId</b> property of the <a>Finding</a> data type.
    array agentIds = 1;
    // For a record to match a filter, the list of values that are specified for this data type property must be contained in the list of values of the <b>attributes</b> property of the <a>Finding</a> data type.
    array attributes = 2;
    // For a record to match a filter, one of the values that is specified for this data type property must be the exact match of the value of the <b>autoScalingGroup</b> property of the <a>Finding</a> data type.
    array autoScalingGroups = 3;
    // The time range during which the finding is generated.
    TimestampRange creationTimeRange = 4;
    // For a record to match a filter, one of the values that is specified for this data type property must be the exact match of the value of the <b>ruleName</b> property of the <a>Finding</a> data type.
    array ruleNames = 5;
    // For a record to match a filter, one of the values that is specified for this data type property must be the exact match of the value of the <b>rulesPackageArn</b> property of the <a>Finding</a> data type.
    array rulesPackageArns = 6;
    // For a record to match a filter, one of the values that is specified for this data type property must be the exact match of the value of the <b>severity</b> property of the <a>Finding</a> data type.
    array severities = 7;
    // For a record to match a filter, the value that is specified for this data type property must be contained in the list of values of the <b>userAttributes</b> property of the <a>Finding</a> data type.
    array userAttributes = 8;
}



repeated Finding FindingList = 1

message GetAssessmentReportRequest {
    // The ARN that specifies the assessment run for which you want to generate a report.
    string assessmentRunArn = 1;
    // Specifies the file format (html or pdf) of the assessment report that you want to generate.
    ReportFileFormat reportFileFormat = 2;
    // Specifies the type of the assessment report that you want to generate. There are two types of assessment reports: a finding report and a full report. For more information, see <a href="http://docs.aws.amazon.com/inspector/latest/userguide/inspector_reports.html">Assessment Reports</a>.
    ReportType reportType = 3;
}

message GetAssessmentReportResponse {
    // Specifies the status of the request to generate an assessment report.
    ReportStatus status = 1;
    // Specifies the URL where you can find the generated assessment report. This parameter is only returned if the report is successfully generated.
    string url = 2;
}

message GetTelemetryMetadataRequest {
    // The ARN that specifies the assessment run that has the telemetry data that you want to obtain.
    string assessmentRunArn = 1;
}

message GetTelemetryMetadataResponse {
    // Telemetry details.
    array telemetryMetadata = 1;
}

enum InspectorEvent {
    ASSESSMENT_RUN_STARTED = 0;
    ASSESSMENT_RUN_COMPLETED = 1;
    ASSESSMENT_RUN_STATE_CHANGED = 2;
    FINDING_REPORTED = 3;
    OTHER = 4;
}

message InspectorServiceAttributes {
    // The ARN of the assessment run during which the finding is generated.
    string assessmentRunArn = 1;
    // The ARN of the rules package that is used to generate the finding.
    string rulesPackageArn = 2;
    // The schema version of this data type.
    integer schemaVersion = 3;
}

message InternalException {
    // You can immediately retry your request.
    boolean canRetry = 1;
    // Details of the exception error.
    string message = 2;
}

enum InvalidCrossAccountRoleErrorCode {
    ROLE_DOES_NOT_EXIST_OR_INVALID_TRUST_RELATIONSHIP = 0;
    ROLE_DOES_NOT_HAVE_CORRECT_POLICY = 1;
}

message InvalidCrossAccountRoleException {
    // You can immediately retry your request.
    boolean canRetry = 1;
    // Code that indicates the type of error that is generated.
    InvalidCrossAccountRoleErrorCode errorCode = 2;
    // Details of the exception error.
    string message = 3;
}

enum InvalidInputErrorCode {
    INVALID_ASSESSMENT_TARGET_ARN = 0;
    INVALID_ASSESSMENT_TEMPLATE_ARN = 1;
    INVALID_ASSESSMENT_RUN_ARN = 2;
    INVALID_FINDING_ARN = 3;
    INVALID_RESOURCE_GROUP_ARN = 4;
    INVALID_RULES_PACKAGE_ARN = 5;
    INVALID_RESOURCE_ARN = 6;
    INVALID_SNS_TOPIC_ARN = 7;
    INVALID_IAM_ROLE_ARN = 8;
    INVALID_ASSESSMENT_TARGET_NAME = 9;
    INVALID_ASSESSMENT_TARGET_NAME_PATTERN = 10;
    INVALID_ASSESSMENT_TEMPLATE_NAME = 11;
    INVALID_ASSESSMENT_TEMPLATE_NAME_PATTERN = 12;
    INVALID_ASSESSMENT_TEMPLATE_DURATION = 13;
    INVALID_ASSESSMENT_TEMPLATE_DURATION_RANGE = 14;
    INVALID_ASSESSMENT_RUN_DURATION_RANGE = 15;
    INVALID_ASSESSMENT_RUN_START_TIME_RANGE = 16;
    INVALID_ASSESSMENT_RUN_COMPLETION_TIME_RANGE = 17;
    INVALID_ASSESSMENT_RUN_STATE_CHANGE_TIME_RANGE = 18;
    INVALID_ASSESSMENT_RUN_STATE = 19;
    INVALID_TAG = 20;
    INVALID_TAG_KEY = 21;
    INVALID_TAG_VALUE = 22;
    INVALID_RESOURCE_GROUP_TAG_KEY = 23;
    INVALID_RESOURCE_GROUP_TAG_VALUE = 24;
    INVALID_ATTRIBUTE = 25;
    INVALID_USER_ATTRIBUTE = 26;
    INVALID_USER_ATTRIBUTE_KEY = 27;
    INVALID_USER_ATTRIBUTE_VALUE = 28;
    INVALID_PAGINATION_TOKEN = 29;
    INVALID_MAX_RESULTS = 30;
    INVALID_AGENT_ID = 31;
    INVALID_AUTO_SCALING_GROUP = 32;
    INVALID_RULE_NAME = 33;
    INVALID_SEVERITY = 34;
    INVALID_LOCALE = 35;
    INVALID_EVENT = 36;
    ASSESSMENT_TARGET_NAME_ALREADY_TAKEN = 37;
    ASSESSMENT_TEMPLATE_NAME_ALREADY_TAKEN = 38;
    INVALID_NUMBER_OF_ASSESSMENT_TARGET_ARNS = 39;
    INVALID_NUMBER_OF_ASSESSMENT_TEMPLATE_ARNS = 40;
    INVALID_NUMBER_OF_ASSESSMENT_RUN_ARNS = 41;
    INVALID_NUMBER_OF_FINDING_ARNS = 42;
    INVALID_NUMBER_OF_RESOURCE_GROUP_ARNS = 43;
    INVALID_NUMBER_OF_RULES_PACKAGE_ARNS = 44;
    INVALID_NUMBER_OF_ASSESSMENT_RUN_STATES = 45;
    INVALID_NUMBER_OF_TAGS = 46;
    INVALID_NUMBER_OF_RESOURCE_GROUP_TAGS = 47;
    INVALID_NUMBER_OF_ATTRIBUTES = 48;
    INVALID_NUMBER_OF_USER_ATTRIBUTES = 49;
    INVALID_NUMBER_OF_AGENT_IDS = 50;
    INVALID_NUMBER_OF_AUTO_SCALING_GROUPS = 51;
    INVALID_NUMBER_OF_RULE_NAMES = 52;
    INVALID_NUMBER_OF_SEVERITIES = 53;
}

message InvalidInputException {
    // You can immediately retry your request.
    boolean canRetry = 1;
    // Code that indicates the type of error that is generated.
    InvalidInputErrorCode errorCode = 2;
    // Details of the exception error.
    string message = 3;
}





repeated string Ipv4AddressList = 1

enum LimitExceededErrorCode {
    ASSESSMENT_TARGET_LIMIT_EXCEEDED = 0;
    ASSESSMENT_TEMPLATE_LIMIT_EXCEEDED = 1;
    ASSESSMENT_RUN_LIMIT_EXCEEDED = 2;
    RESOURCE_GROUP_LIMIT_EXCEEDED = 3;
    EVENT_SUBSCRIPTION_LIMIT_EXCEEDED = 4;
}

message LimitExceededException {
    // You can immediately retry your request.
    boolean canRetry = 1;
    // Code that indicates the type of error that is generated.
    LimitExceededErrorCode errorCode = 2;
    // Details of the exception error.
    string message = 3;
}

message ListAssessmentRunAgentsRequest {
    // The ARN that specifies the assessment run whose agents you want to list.
    string assessmentRunArn = 1;
    // <p>You can use this parameter to specify a subset of data to be included in the action's response.</p> <p>For a record to match a filter, all specified filter attributes must match. When multiple values are specified for a filter attribute, any of the values can match.</p>
    AgentFilter filter = 2;
    // You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 10. The maximum value is 500.
    integer maxResults = 3;
    // You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the <b>ListAssessmentRunAgents</b> action. Subsequent calls to the action fill <b>nextToken</b> in the request with the value of <b>NextToken</b> from the previous response to continue listing data.
    string nextToken = 4;
}

message ListAssessmentRunAgentsResponse {
    // A list of ARNs that specifies the agents returned by the action.
    array assessmentRunAgents = 1;
    //  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
    string nextToken = 2;
}

message ListAssessmentRunsRequest {
    // The ARNs that specify the assessment templates whose assessment runs you want to list.
    array assessmentTemplateArns = 1;
    // <p>You can use this parameter to specify a subset of data to be included in the action's response.</p> <p>For a record to match a filter, all specified filter attributes must match. When multiple values are specified for a filter attribute, any of the values can match.</p>
    AssessmentRunFilter filter = 2;
    // You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 10. The maximum value is 500.
    integer maxResults = 3;
    // You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the <b>ListAssessmentRuns</b> action. Subsequent calls to the action fill <b>nextToken</b> in the request with the value of <b>NextToken</b> from the previous response to continue listing data.
    string nextToken = 4;
}

message ListAssessmentRunsResponse {
    // A list of ARNs that specifies the assessment runs that are returned by the action.
    array assessmentRunArns = 1;
    //  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
    string nextToken = 2;
}

message ListAssessmentTargetsRequest {
    // <p>You can use this parameter to specify a subset of data to be included in the action's response.</p> <p>For a record to match a filter, all specified filter attributes must match. When multiple values are specified for a filter attribute, any of the values can match.</p>
    AssessmentTargetFilter filter = 1;
    // You can use this parameter to indicate the maximum number of items you want in the response. The default value is 10. The maximum value is 500.
    integer maxResults = 2;
    // You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the <b>ListAssessmentTargets</b> action. Subsequent calls to the action fill <b>nextToken</b> in the request with the value of <b>NextToken</b> from the previous response to continue listing data.
    string nextToken = 3;
}

message ListAssessmentTargetsResponse {
    // A list of ARNs that specifies the assessment targets that are returned by the action.
    array assessmentTargetArns = 1;
    //  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
    string nextToken = 2;
}

message ListAssessmentTemplatesRequest {
    // A list of ARNs that specifies the assessment targets whose assessment templates you want to list.
    array assessmentTargetArns = 1;
    // <p>You can use this parameter to specify a subset of data to be included in the action's response.</p> <p>For a record to match a filter, all specified filter attributes must match. When multiple values are specified for a filter attribute, any of the values can match.</p>
    AssessmentTemplateFilter filter = 2;
    // You can use this parameter to indicate the maximum number of items you want in the response. The default value is 10. The maximum value is 500.
    integer maxResults = 3;
    // You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the <b>ListAssessmentTemplates</b> action. Subsequent calls to the action fill <b>nextToken</b> in the request with the value of <b>NextToken</b> from the previous response to continue listing data.
    string nextToken = 4;
}

message ListAssessmentTemplatesResponse {
    // A list of ARNs that specifies the assessment templates returned by the action.
    array assessmentTemplateArns = 1;
    //  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
    string nextToken = 2;
}

message ListEventSubscriptionsRequest {
    // You can use this parameter to indicate the maximum number of items you want in the response. The default value is 10. The maximum value is 500.
    integer maxResults = 1;
    // You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the <b>ListEventSubscriptions</b> action. Subsequent calls to the action fill <b>nextToken</b> in the request with the value of <b>NextToken</b> from the previous response to continue listing data.
    string nextToken = 2;
    // The ARN of the assessment template for which you want to list the existing event subscriptions.
    string resourceArn = 3;
}

message ListEventSubscriptionsResponse {
    //  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
    string nextToken = 1;
    // Details of the returned event subscriptions.
    array subscriptions = 2;
}

message ListFindingsRequest {
    // The ARNs of the assessment runs that generate the findings that you want to list.
    array assessmentRunArns = 1;
    // <p>You can use this parameter to specify a subset of data to be included in the action's response.</p> <p>For a record to match a filter, all specified filter attributes must match. When multiple values are specified for a filter attribute, any of the values can match.</p>
    FindingFilter filter = 2;
    // You can use this parameter to indicate the maximum number of items you want in the response. The default value is 10. The maximum value is 500.
    integer maxResults = 3;
    // You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the <b>ListFindings</b> action. Subsequent calls to the action fill <b>nextToken</b> in the request with the value of <b>NextToken</b> from the previous response to continue listing data.
    string nextToken = 4;
}

message ListFindingsResponse {
    // A list of ARNs that specifies the findings returned by the action.
    array findingArns = 1;
    //  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
    string nextToken = 2;
}



repeated string ListParentArnList = 1

repeated string ListReturnedArnList = 1

message ListRulesPackagesRequest {
    // You can use this parameter to indicate the maximum number of items you want in the response. The default value is 10. The maximum value is 500.
    integer maxResults = 1;
    // You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the <b>ListRulesPackages</b> action. Subsequent calls to the action fill <b>nextToken</b> in the request with the value of <b>NextToken</b> from the previous response to continue listing data.
    string nextToken = 2;
}

message ListRulesPackagesResponse {
    //  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
    string nextToken = 1;
    // The list of ARNs that specifies the rules packages returned by the action.
    array rulesPackageArns = 2;
}

message ListTagsForResourceRequest {
    // The ARN that specifies the assessment template whose tags you want to list.
    string resourceArn = 1;
}

message ListTagsForResourceResponse {
    // A collection of key and value pairs.
    array tags = 1;
}

enum Locale {
    EN_US = 0;
}

enum NoSuchEntityErrorCode {
    ASSESSMENT_TARGET_DOES_NOT_EXIST = 0;
    ASSESSMENT_TEMPLATE_DOES_NOT_EXIST = 1;
    ASSESSMENT_RUN_DOES_NOT_EXIST = 2;
    FINDING_DOES_NOT_EXIST = 3;
    RESOURCE_GROUP_DOES_NOT_EXIST = 4;
    RULES_PACKAGE_DOES_NOT_EXIST = 5;
    SNS_TOPIC_DOES_NOT_EXIST = 6;
    IAM_ROLE_DOES_NOT_EXIST = 7;
}

message NoSuchEntityException {
    // You can immediately retry your request.
    boolean canRetry = 1;
    // Code that indicates the type of error that is generated.
    NoSuchEntityErrorCode errorCode = 2;
    // Details of the exception error.
    string message = 3;
}

message PreviewAgentsRequest {
    // You can use this parameter to indicate the maximum number of items you want in the response. The default value is 10. The maximum value is 500.
    integer maxResults = 1;
    // You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the <b>PreviewAgents</b> action. Subsequent calls to the action fill <b>nextToken</b> in the request with the value of <b>NextToken</b> from the previous response to continue listing data.
    string nextToken = 2;
    // The ARN of the assessment target whose agents you want to preview.
    string previewAgentsArn = 3;
}

message PreviewAgentsResponse {
    // The resulting list of agents.
    array agentPreviews = 1;
    //  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
    string nextToken = 2;
}

message RegisterCrossAccountAccessRoleRequest {
    // The ARN of the IAM role that Amazon Inspector uses to list your EC2 instances during the assessment run or when you call the <a>PreviewAgents</a> action.
    string roleArn = 1;
}

message RemoveAttributesFromFindingsRequest {
    // The array of attribute keys that you want to remove from specified findings.
    array attributeKeys = 1;
    // The ARNs that specify the findings that you want to remove attributes from.
    array findingArns = 2;
}

message RemoveAttributesFromFindingsResponse {
    // Attributes details that cannot be described. An error code is provided for each failed item.
    array failedItems = 1;
}

enum ReportFileFormat {
    HTML = 0;
    PDF = 1;
}

enum ReportStatu {
    WORK_IN_PROGRESS = 0;
    FAILED = 1;
    COMPLETED = 2;
}

enum ReportType {
    FINDING = 0;
    FULL = 1;
}

message ResourceGroup {
    // The ARN of the resource group.
    string arn = 1;
    // The time at which resource group is created.
    string createdAt = 2;
    // The tags (key and value pairs) of the resource group. This data type property is used in the <a>CreateResourceGroup</a> action.
    array tags = 3;
}

repeated ResourceGroup ResourceGroupList = 1

message ResourceGroupTag {
    // A tag key.
    string key = 1;
    // The value assigned to a tag key.
    string value = 2;
}

repeated ResourceGroupTag ResourceGroupTags = 1



repeated string RuleNameList = 1

message RulesPackage {
    // The ARN of the rules package.
    string arn = 1;
    // The description of the rules package.
    string description = 2;
    // The name of the rules package.
    string name = 3;
    // The provider of the rules package.
    string provider = 4;
    // The version ID of the rules package.
    string version = 5;
}

repeated RulesPackage RulesPackageList = 1





message SetTagsForResourceRequest {
    // The ARN of the assessment template that you want to set tags to.
    string resourceArn = 1;
    // A collection of key and value pairs that you want to set to the assessment template.
    array tags = 2;
}

enum Severity {
    LOW = 0;
    MEDIUM = 1;
    HIGH = 2;
    INFORMATIONAL = 3;
    UNDEFINED = 4;
}

repeated Severity SeverityList = 1

message StartAssessmentRunRequest {
    // You can specify the name for the assessment run. The name must be unique for the assessment template whose ARN is used to start the assessment run.
    string assessmentRunName = 1;
    // The ARN of the assessment template of the assessment run that you want to start.
    string assessmentTemplateArn = 2;
}

message StartAssessmentRunResponse {
    // The ARN of the assessment run that has been started.
    string assessmentRunArn = 1;
}

enum StopAction {
    START_EVALUATION = 0;
    SKIP_EVALUATION = 1;
}

message StopAssessmentRunRequest {
    // The ARN of the assessment run that you want to stop.
    string assessmentRunArn = 1;
    // An input option that can be set to either START_EVALUATION or SKIP_EVALUATION. START_EVALUATION (the default value), stops the AWS agent from collecting data and begins the results evaluation and the findings generation process. SKIP_EVALUATION cancels the assessment run immediately, after which no findings are generated.
    StopAction stopAction = 2;
}

message SubscribeToEventRequest {
    // The event for which you want to receive SNS notifications.
    InspectorEvent event = 1;
    // The ARN of the assessment template that is used during the event for which you want to receive SNS notifications.
    string resourceArn = 2;
    // The ARN of the SNS topic to which the SNS notifications are sent.
    string topicArn = 3;
}

message Subscription {
    // The list of existing event subscriptions.
    array eventSubscriptions = 1;
    // The ARN of the assessment template that is used during the event for which the SNS notification is sent.
    string resourceArn = 2;
    // The ARN of the Amazon Simple Notification Service (SNS) topic to which the SNS notifications are sent.
    string topicArn = 3;
}

repeated Subscription SubscriptionList = 1

message Tag {
    // A tag key.
    string key = 1;
    // A value assigned to a tag key.
    string value = 2;
}



repeated Tag TagList = 1



message TelemetryMetadata {
    // The count of messages that the agent sends to the Amazon Inspector service.
    integer count = 1;
    // The data size of messages that the agent sends to the Amazon Inspector service.
    integer dataSize = 2;
    // A specific type of behavioral data that is collected by the agent.
    string messageType = 3;
}

repeated TelemetryMetadata TelemetryMetadataList = 1





message TimestampRange {
    // The minimum value of the timestamp range.
    string beginDate = 1;
    // The maximum value of the timestamp range.
    string endDate = 2;
}

message UnsubscribeFromEventRequest {
    // The event for which you want to stop receiving SNS notifications.
    InspectorEvent event = 1;
    // The ARN of the assessment template that is used during the event for which you want to stop receiving SNS notifications.
    string resourceArn = 2;
    // The ARN of the SNS topic to which SNS notifications are sent.
    string topicArn = 3;
}

message UnsupportedFeatureException {
    boolean canRetry = 1;
    string message = 2;
}

message UpdateAssessmentTargetRequest {
    // The ARN of the assessment target that you want to update.
    string assessmentTargetArn = 1;
    // The name of the assessment target that you want to update.
    string assessmentTargetName = 2;
    // The ARN of the resource group that is used to specify the new resource group to associate with the assessment target.
    string resourceGroupArn = 3;
}



repeated string UserAttributeKeyList = 1

repeated Attribute UserAttributeList = 1

















service AmazonInspectorService {
    // Assigns attributes (key and value pairs) to the findings that are specified by the ARNs of the findings.
    rpc Post(PostRequest) returns (AddAttributesToFindingsResponse) {
      option (google.api.http) = {
        post: "//"
        body: "body"
      };
    }
    // Creates a new assessment target using the ARN of the resource group that is generated by <a>CreateResourceGroup</a>. You can create up to 50 assessment targets per AWS account. You can run up to 500 concurrent agents per AWS account. For more information, see <a href="http://docs.aws.amazon.com/inspector/latest/userguide/inspector_applications.html"> Amazon Inspector Assessment Targets</a>.
    rpc Post#CreateAssessmentTarget(Post#CreateAssessmentTargetRequest) returns (CreateAssessmentTargetResponse) {
      option (google.api.http) = {
        post: "//#CreateAssessmentTarget"
        body: "body"
      };
    }
    // Creates an assessment template for the assessment target that is specified by the ARN of the assessment target.
    rpc Post#CreateAssessmentTemplate(Post#CreateAssessmentTemplateRequest) returns (CreateAssessmentTemplateResponse) {
      option (google.api.http) = {
        post: "//#CreateAssessmentTemplate"
        body: "body"
      };
    }
    // Creates a resource group using the specified set of tags (key and value pairs) that are used to select the EC2 instances to be included in an Amazon Inspector assessment target. The created resource group is then used to create an Amazon Inspector assessment target. For more information, see <a>CreateAssessmentTarget</a>.
    rpc Post#CreateResourceGroup(Post#CreateResourceGroupRequest) returns (CreateResourceGroupResponse) {
      option (google.api.http) = {
        post: "//#CreateResourceGroup"
        body: "body"
      };
    }
    // Deletes the assessment run that is specified by the ARN of the assessment run.
    rpc Post#DeleteAssessmentRun(Post#DeleteAssessmentRunRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#DeleteAssessmentRun"
        body: "body"
      };
    }
    // Deletes the assessment target that is specified by the ARN of the assessment target.
    rpc Post#DeleteAssessmentTarget(Post#DeleteAssessmentTargetRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#DeleteAssessmentTarget"
        body: "body"
      };
    }
    // Deletes the assessment template that is specified by the ARN of the assessment template.
    rpc Post#DeleteAssessmentTemplate(Post#DeleteAssessmentTemplateRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#DeleteAssessmentTemplate"
        body: "body"
      };
    }
    // Describes the assessment runs that are specified by the ARNs of the assessment runs.
    rpc Post#DescribeAssessmentRuns(Post#DescribeAssessmentRunsRequest) returns (DescribeAssessmentRunsResponse) {
      option (google.api.http) = {
        post: "//#DescribeAssessmentRuns"
        body: "body"
      };
    }
    // Describes the assessment targets that are specified by the ARNs of the assessment targets.
    rpc Post#DescribeAssessmentTargets(Post#DescribeAssessmentTargetsRequest) returns (DescribeAssessmentTargetsResponse) {
      option (google.api.http) = {
        post: "//#DescribeAssessmentTargets"
        body: "body"
      };
    }
    // Describes the assessment templates that are specified by the ARNs of the assessment templates.
    rpc Post#DescribeAssessmentTemplates(Post#DescribeAssessmentTemplatesRequest) returns (DescribeAssessmentTemplatesResponse) {
      option (google.api.http) = {
        post: "//#DescribeAssessmentTemplates"
        body: "body"
      };
    }
    // Describes the IAM role that enables Amazon Inspector to access your AWS account.
    rpc Post#DescribeCrossAccountAccessRole(Post#DescribeCrossAccountAccessRoleRequest) returns (DescribeCrossAccountAccessRoleResponse) {
      option (google.api.http) = {
        post: "//#DescribeCrossAccountAccessRole"
      };
    }
    // Describes the findings that are specified by the ARNs of the findings.
    rpc Post#DescribeFindings(Post#DescribeFindingsRequest) returns (DescribeFindingsResponse) {
      option (google.api.http) = {
        post: "//#DescribeFindings"
        body: "body"
      };
    }
    // Describes the resource groups that are specified by the ARNs of the resource groups.
    rpc Post#DescribeResourceGroups(Post#DescribeResourceGroupsRequest) returns (DescribeResourceGroupsResponse) {
      option (google.api.http) = {
        post: "//#DescribeResourceGroups"
        body: "body"
      };
    }
    // Describes the rules packages that are specified by the ARNs of the rules packages.
    rpc Post#DescribeRulesPackages(Post#DescribeRulesPackagesRequest) returns (DescribeRulesPackagesResponse) {
      option (google.api.http) = {
        post: "//#DescribeRulesPackages"
        body: "body"
      };
    }
    // Produces an assessment report that includes detailed and comprehensive results of a specified assessment run.
    rpc Post#GetAssessmentReport(Post#GetAssessmentReportRequest) returns (GetAssessmentReportResponse) {
      option (google.api.http) = {
        post: "//#GetAssessmentReport"
        body: "body"
      };
    }
    // Information about the data that is collected for the specified assessment run.
    rpc Post#GetTelemetryMetadata(Post#GetTelemetryMetadataRequest) returns (GetTelemetryMetadataResponse) {
      option (google.api.http) = {
        post: "//#GetTelemetryMetadata"
        body: "body"
      };
    }
    // Lists the agents of the assessment runs that are specified by the ARNs of the assessment runs.
    rpc Post#ListAssessmentRunAgents(Post#ListAssessmentRunAgentsRequest) returns (ListAssessmentRunAgentsResponse) {
      option (google.api.http) = {
        post: "//#ListAssessmentRunAgents"
        body: "body"
      };
    }
    // Lists the assessment runs that correspond to the assessment templates that are specified by the ARNs of the assessment templates.
    rpc Post#ListAssessmentRuns(Post#ListAssessmentRunsRequest) returns (ListAssessmentRunsResponse) {
      option (google.api.http) = {
        post: "//#ListAssessmentRuns"
        body: "body"
      };
    }
    // Lists the ARNs of the assessment targets within this AWS account. For more information about assessment targets, see <a href="http://docs.aws.amazon.com/inspector/latest/userguide/inspector_applications.html">Amazon Inspector Assessment Targets</a>.
    rpc Post#ListAssessmentTargets(Post#ListAssessmentTargetsRequest) returns (ListAssessmentTargetsResponse) {
      option (google.api.http) = {
        post: "//#ListAssessmentTargets"
        body: "body"
      };
    }
    // Lists the assessment templates that correspond to the assessment targets that are specified by the ARNs of the assessment targets.
    rpc Post#ListAssessmentTemplates(Post#ListAssessmentTemplatesRequest) returns (ListAssessmentTemplatesResponse) {
      option (google.api.http) = {
        post: "//#ListAssessmentTemplates"
        body: "body"
      };
    }
    // Lists all the event subscriptions for the assessment template that is specified by the ARN of the assessment template. For more information, see <a>SubscribeToEvent</a> and <a>UnsubscribeFromEvent</a>.
    rpc Post#ListEventSubscriptions(Post#ListEventSubscriptionsRequest) returns (ListEventSubscriptionsResponse) {
      option (google.api.http) = {
        post: "//#ListEventSubscriptions"
        body: "body"
      };
    }
    // Lists findings that are generated by the assessment runs that are specified by the ARNs of the assessment runs.
    rpc Post#ListFindings(Post#ListFindingsRequest) returns (ListFindingsResponse) {
      option (google.api.http) = {
        post: "//#ListFindings"
        body: "body"
      };
    }
    // Lists all available Amazon Inspector rules packages.
    rpc Post#ListRulesPackages(Post#ListRulesPackagesRequest) returns (ListRulesPackagesResponse) {
      option (google.api.http) = {
        post: "//#ListRulesPackages"
        body: "body"
      };
    }
    // Lists all tags associated with an assessment template.
    rpc Post#ListTagsForResource(Post#ListTagsForResourceRequest) returns (ListTagsForResourceResponse) {
      option (google.api.http) = {
        post: "//#ListTagsForResource"
        body: "body"
      };
    }
    // Previews the agents installed on the EC2 instances that are part of the specified assessment target.
    rpc Post#PreviewAgents(Post#PreviewAgentsRequest) returns (PreviewAgentsResponse) {
      option (google.api.http) = {
        post: "//#PreviewAgents"
        body: "body"
      };
    }
    // Registers the IAM role that Amazon Inspector uses to list your EC2 instances at the start of the assessment run or when you call the <a>PreviewAgents</a> action.
    rpc Post#RegisterCrossAccountAccessRole(Post#RegisterCrossAccountAccessRoleRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#RegisterCrossAccountAccessRole"
        body: "body"
      };
    }
    // Removes entire attributes (key and value pairs) from the findings that are specified by the ARNs of the findings where an attribute with the specified key exists.
    rpc Post#RemoveAttributesFromFindings(Post#RemoveAttributesFromFindingsRequest) returns (RemoveAttributesFromFindingsResponse) {
      option (google.api.http) = {
        post: "//#RemoveAttributesFromFindings"
        body: "body"
      };
    }
    // Sets tags (key and value pairs) to the assessment template that is specified by the ARN of the assessment template.
    rpc Post#SetTagsForResource(Post#SetTagsForResourceRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#SetTagsForResource"
        body: "body"
      };
    }
    // Starts the assessment run specified by the ARN of the assessment template. For this API to function properly, you must not exceed the limit of running up to 500 concurrent agents per AWS account.
    rpc Post#StartAssessmentRun(Post#StartAssessmentRunRequest) returns (StartAssessmentRunResponse) {
      option (google.api.http) = {
        post: "//#StartAssessmentRun"
        body: "body"
      };
    }
    // Stops the assessment run that is specified by the ARN of the assessment run.
    rpc Post#StopAssessmentRun(Post#StopAssessmentRunRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#StopAssessmentRun"
        body: "body"
      };
    }
    // Enables the process of sending Amazon Simple Notification Service (SNS) notifications about a specified event to a specified SNS topic.
    rpc Post#SubscribeToEvent(Post#SubscribeToEventRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#SubscribeToEvent"
        body: "body"
      };
    }
    // Disables the process of sending Amazon Simple Notification Service (SNS) notifications about a specified event to a specified SNS topic.
    rpc Post#UnsubscribeFromEvent(Post#UnsubscribeFromEventRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#UnsubscribeFromEvent"
        body: "body"
      };
    }
    // Updates the assessment target that is specified by the ARN of the assessment target.
    rpc Post#UpdateAssessmentTarget(Post#UpdateAssessmentTargetRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#UpdateAssessmentTarget"
        body: "body"
      };
    }
}

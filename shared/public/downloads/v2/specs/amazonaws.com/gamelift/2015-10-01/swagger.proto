syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package amazongamelift;

message PostRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AcceptMatchInput body = 10;
}

message Post#CreateAliasRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateAliasInput body = 10;
}

message Post#CreateBuildRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateBuildInput body = 10;
}

message Post#CreateFleetRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateFleetInput body = 10;
}

message Post#CreateGameSessionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateGameSessionInput body = 10;
}

message Post#CreateGameSessionQueueRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateGameSessionQueueInput body = 10;
}

message Post#CreateMatchmakingConfigurationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateMatchmakingConfigurationInput body = 10;
}

message Post#CreateMatchmakingRuleSetRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateMatchmakingRuleSetInput body = 10;
}

message Post#CreatePlayerSessionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreatePlayerSessionInput body = 10;
}

message Post#CreatePlayerSessionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreatePlayerSessionsInput body = 10;
}

message Post#CreateVpcPeeringAuthorizationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateVpcPeeringAuthorizationInput body = 10;
}

message Post#CreateVpcPeeringConnectionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateVpcPeeringConnectionInput body = 10;
}

message Post#DeleteAliasRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteAliasInput body = 10;
}

message Post#DeleteBuildRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteBuildInput body = 10;
}

message Post#DeleteFleetRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteFleetInput body = 10;
}

message Post#DeleteGameSessionQueueRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteGameSessionQueueInput body = 10;
}

message Post#DeleteMatchmakingConfigurationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteMatchmakingConfigurationInput body = 10;
}

message Post#DeleteScalingPolicyRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteScalingPolicyInput body = 10;
}

message Post#DeleteVpcPeeringAuthorizationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteVpcPeeringAuthorizationInput body = 10;
}

message Post#DeleteVpcPeeringConnectionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteVpcPeeringConnectionInput body = 10;
}

message Post#DescribeAliasRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeAliasInput body = 10;
}

message Post#DescribeBuildRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeBuildInput body = 10;
}

message Post#DescribeEC2InstanceLimitsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeEC2InstanceLimitsInput body = 10;
}

message Post#DescribeFleetAttributesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeFleetAttributesInput body = 10;
}

message Post#DescribeFleetCapacityRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeFleetCapacityInput body = 10;
}

message Post#DescribeFleetEventsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeFleetEventsInput body = 10;
}

message Post#DescribeFleetPortSettingsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeFleetPortSettingsInput body = 10;
}

message Post#DescribeFleetUtilizationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeFleetUtilizationInput body = 10;
}

message Post#DescribeGameSessionDetailsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeGameSessionDetailsInput body = 10;
}

message Post#DescribeGameSessionPlacementRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeGameSessionPlacementInput body = 10;
}

message Post#DescribeGameSessionQueuesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeGameSessionQueuesInput body = 10;
}

message Post#DescribeGameSessionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeGameSessionsInput body = 10;
}

message Post#DescribeInstancesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeInstancesInput body = 10;
}

message Post#DescribeMatchmakingRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeMatchmakingInput body = 10;
}

message Post#DescribeMatchmakingConfigurationsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeMatchmakingConfigurationsInput body = 10;
}

message Post#DescribeMatchmakingRuleSetsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeMatchmakingRuleSetsInput body = 10;
}

message Post#DescribePlayerSessionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribePlayerSessionsInput body = 10;
}

message Post#DescribeRuntimeConfigurationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeRuntimeConfigurationInput body = 10;
}

message Post#DescribeScalingPoliciesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeScalingPoliciesInput body = 10;
}

message Post#DescribeVpcPeeringAuthorizationsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeVpcPeeringAuthorizationsInput body = 10;
}

message Post#DescribeVpcPeeringConnectionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeVpcPeeringConnectionsInput body = 10;
}

message Post#GetGameSessionLogUrlRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetGameSessionLogUrlInput body = 10;
}

message Post#GetInstanceAccessRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetInstanceAccessInput body = 10;
}

message Post#ListAliasesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListAliasesInput body = 10;
}

message Post#ListBuildsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListBuildsInput body = 10;
}

message Post#ListFleetsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListFleetsInput body = 10;
}

message Post#PutScalingPolicyRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    PutScalingPolicyInput body = 10;
}

message Post#RequestUploadCredentialsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RequestUploadCredentialsInput body = 10;
}

message Post#ResolveAliasRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ResolveAliasInput body = 10;
}

message Post#SearchGameSessionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    SearchGameSessionsInput body = 10;
}

message Post#StartGameSessionPlacementRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StartGameSessionPlacementInput body = 10;
}

message Post#StartMatchmakingRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StartMatchmakingInput body = 10;
}

message Post#StopGameSessionPlacementRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StopGameSessionPlacementInput body = 10;
}

message Post#StopMatchmakingRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StopMatchmakingInput body = 10;
}

message Post#UpdateAliasRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateAliasInput body = 10;
}

message Post#UpdateBuildRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateBuildInput body = 10;
}

message Post#UpdateFleetAttributesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateFleetAttributesInput body = 10;
}

message Post#UpdateFleetCapacityRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateFleetCapacityInput body = 10;
}

message Post#UpdateFleetPortSettingsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateFleetPortSettingsInput body = 10;
}

message Post#UpdateGameSessionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateGameSessionInput body = 10;
}

message Post#UpdateGameSessionQueueRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateGameSessionQueueInput body = 10;
}

message Post#UpdateMatchmakingConfigurationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateMatchmakingConfigurationInput body = 10;
}

message Post#UpdateRuntimeConfigurationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateRuntimeConfigurationInput body = 10;
}

message Post#ValidateMatchmakingRuleSetRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ValidateMatchmakingRuleSetInput body = 10;
}

message AcceptMatchInput {
    // Player response to the proposed match.
    AcceptanceType AcceptanceType = 1;
    // Unique identifier for a player delivering the response. This parameter can include one or multiple player IDs.
    array PlayerIds = 2;
    // Unique identifier for a matchmaking ticket. The ticket must be in status <code>REQUIRES_ACCEPTANCE</code>; otherwise this request will fail.
    string TicketId = 3;
}

message AcceptMatchOutput {
}

enum AcceptanceType {
    ACCEPT = 0;
    REJECT = 1;
}

message Alias {
    // Unique identifier for an alias; alias ARNs are unique across all regions.
    string AliasArn = 1;
    // Unique identifier for an alias; alias IDs are unique within a region.
    string AliasId = 2;
    // Time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
    string CreationTime = 3;
    // Human-readable description of an alias.
    string Description = 4;
    // Time stamp indicating when this data object was last modified. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
    string LastUpdatedTime = 5;
    // Descriptive label that is associated with an alias. Alias names do not need to be unique.
    string Name = 6;
    // Alias configuration for the alias, including routing type and settings.
    RoutingStrategy RoutingStrategy = 7;
}



repeated Alias AliasList = 1



message AttributeValue {
    // For number values, expressed as double.
    number N = 1;
    // For single string values. Maximum string length is 100 characters.
    string S = 2;
    // For a map of up to 10 type:value pairs. Maximum length for each string value is 100 characters.
    array SDM = 3;
    // For a list of up to 10 strings. Maximum length for each string is 100 characters. Duplicate values are not recognized; all occurrences of the repeated value after the first of a repeated value are ignored.
    array SL = 4;
}

message AwsCredentials {
    // Temporary key allowing access to the Amazon GameLift S3 account.
    string AccessKeyId = 1;
    // Temporary secret key allowing access to the Amazon GameLift S3 account.
    string SecretAccessKey = 2;
    // Token used to associate a specific build ID with the files uploaded using these credentials.
    string SessionToken = 3;
}

message Build {
    // Unique identifier for a build.
    string BuildId = 1;
    // Time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
    string CreationTime = 2;
    // Descriptive label that is associated with a build. Build names do not need to be unique. It can be set using <a>CreateBuild</a> or <a>UpdateBuild</a>.
    string Name = 3;
    // Operating system that the game server binaries are built to run on. This value determines the type of fleet resources that you can use for this build.
    OperatingSystem OperatingSystem = 4;
    // File size of the uploaded game build, expressed in bytes. When the build status is <code>INITIALIZED</code>, this value is 0.
    integer SizeOnDisk = 5;
    // <p>Current status of the build.</p> <p>Possible build statuses include the following:</p> <ul> <li> <p> <b>INITIALIZED</b> -- A new build has been defined, but no files have been uploaded. You cannot create fleets for builds that are in this status. When a build is successfully created, the build status is set to this value. </p> </li> <li> <p> <b>READY</b> -- The game build has been successfully uploaded. You can now create new fleets for this build.</p> </li> <li> <p> <b>FAILED</b> -- The game build upload failed. You cannot create new fleets for this build. </p> </li> </ul>
    BuildStatus Status = 6;
    // Version that is associated with this build. Version strings do not need to be unique. This value can be set using <a>CreateBuild</a> or <a>UpdateBuild</a>.
    string Version = 7;
}



repeated Build BuildList = 1

enum BuildStatu {
    INITIALIZED = 0;
    READY = 1;
    FAILED = 2;
}

enum ComparisonOperatorType {
    GREATERTHANOREQUALTOTHRESHOLD = 0;
    GREATERTHANTHRESHOLD = 1;
    LESSTHANTHRESHOLD = 2;
    LESSTHANOREQUALTOTHRESHOLD = 3;
}

message ConflictException {
    string Message = 1;
}

message CreateAliasInput {
    // Human-readable description of an alias.
    string Description = 1;
    // Descriptive label that is associated with an alias. Alias names do not need to be unique.
    string Name = 2;
    // Object that specifies the fleet and routing type to use for the alias.
    RoutingStrategy RoutingStrategy = 3;
}

message CreateAliasOutput {
    // Object that describes the newly created alias record.
    Alias Alias = 1;
}

message CreateBuildInput {
    // Descriptive label that is associated with a build. Build names do not need to be unique. You can use <a>UpdateBuild</a> to change this value later.
    string Name = 1;
    // Operating system that the game server binaries are built to run on. This value determines the type of fleet resources that you can use for this build. If your game build contains multiple executables, they all must run on the same operating system.
    OperatingSystem OperatingSystem = 2;
    // Amazon S3 location of the game build files to be uploaded. The S3 bucket must be owned by the same AWS account that you're using to manage Amazon GameLift. It also must in the same region that you want to create a new build in. Before calling <code>CreateBuild</code> with this location, you must allow Amazon GameLift to access your Amazon S3 bucket (see <a href="http://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-build-cli-uploading.html#gamelift-build-cli-uploading-create-build">Create a Build with Files in Amazon S3</a>).
    S3Location StorageLocation = 3;
    // Version that is associated with this build. Version strings do not need to be unique. You can use <a>UpdateBuild</a> to change this value later.
    string Version = 4;
}

message CreateBuildOutput {
    // The newly created build record, including a unique build ID and status.
    Build Build = 1;
    // Amazon S3 location specified in the request.
    S3Location StorageLocation = 2;
    // This element is not currently in use.
    AwsCredentials UploadCredentials = 3;
}

message CreateFleetInput {
    // Unique identifier for a build to be deployed on the new fleet. The build must have been successfully uploaded to Amazon GameLift and be in a <code>READY</code> status. This fleet setting cannot be changed once the fleet is created.
    string BuildId = 1;
    // Human-readable description of a fleet.
    string Description = 2;
    // Range of IP addresses and port settings that permit inbound traffic to access server processes running on the fleet. If no inbound permissions are set, including both IP address range and port range, the server processes in the fleet cannot accept connections. You can specify one or more sets of permissions for a fleet.
    array EC2InboundPermissions = 3;
    // Name of an EC2 instance type that is supported in Amazon GameLift. A fleet instance type determines the computing resources of each instance in the fleet, including CPU, memory, storage, and networking capacity. Amazon GameLift supports the following EC2 instance types. See <a href="http://aws.amazon.com/ec2/instance-types/">Amazon EC2 Instance Types</a> for detailed descriptions.
    EC2InstanceType EC2InstanceType = 4;
    // This parameter is no longer used. Instead, to specify where Amazon GameLift should store log files once a server process shuts down, use the Amazon GameLift server API <code>ProcessReady()</code> and specify one or more directory paths in <code>logParameters</code>. See more information in the <a href="http://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api-ref.html#gamelift-sdk-server-api-ref-dataypes-process">Server API Reference</a>.
    array LogPaths = 5;
    // Names of metric groups to add this fleet to. Use an existing metric group name to add this fleet to the group. Or use a new name to create a new metric group. A fleet can only be included in one metric group at a time.
    array MetricGroups = 6;
    // Descriptive label that is associated with a fleet. Fleet names do not need to be unique.
    string Name = 7;
    // <p>Game session protection policy to apply to all instances in this fleet. If this parameter is not set, instances in this fleet default to no protection. You can change a fleet's protection policy using UpdateFleetAttributes, but this change will only affect sessions created after the policy change. You can also set protection for individual instances using <a>UpdateGameSession</a>.</p> <ul> <li> <p> <b>NoProtection</b> -- The game session can be terminated during a scale-down event.</p> </li> <li> <p> <b>FullProtection</b> -- If the game session is in an <code>ACTIVE</code> status, it cannot be terminated during a scale-down event.</p> </li> </ul>
    ProtectionPolicy NewGameSessionProtectionPolicy = 8;
    // Unique identifier for the AWS account with the VPC that you want to peer your Amazon GameLift fleet with. You can find your Account ID in the AWS Management Console under account settings.
    string PeerVpcAwsAccountId = 9;
    // Unique identifier for a VPC with resources to be accessed by your Amazon GameLift fleet. The VPC must be in the same region where your fleet is deployed. To get VPC information, including IDs, use the Virtual Private Cloud service tools, including the VPC Dashboard in the AWS Management Console.
    string PeerVpcId = 10;
    // Policy that limits the number of game sessions an individual player can create over a span of time for this fleet.
    ResourceCreationLimitPolicy ResourceCreationLimitPolicy = 11;
    // Instructions for launching server processes on each instance in the fleet. The run-time configuration for a fleet has a collection of server process configurations, one for each type of server process to run on an instance. A server process configuration specifies the location of the server executable, launch parameters, and the number of concurrent processes with that configuration to maintain on each instance. A CreateFleet request must include a run-time configuration with at least one server process configuration; otherwise the request fails with an invalid request exception. (This parameter replaces the parameters <code>ServerLaunchPath</code> and <code>ServerLaunchParameters</code>; requests that contain values for these parameters instead of a run-time configuration will continue to work.)
    RuntimeConfiguration RuntimeConfiguration = 12;
    // This parameter is no longer used. Instead, specify server launch parameters in the <code>RuntimeConfiguration</code> parameter. (Requests that specify a server launch path and launch parameters instead of a run-time configuration will continue to work.)
    string ServerLaunchParameters = 13;
    // This parameter is no longer used. Instead, specify a server launch path using the <code>RuntimeConfiguration</code> parameter. (Requests that specify a server launch path and launch parameters instead of a run-time configuration will continue to work.)
    string ServerLaunchPath = 14;
}

message CreateFleetOutput {
    // Properties for the newly created fleet.
    FleetAttributes FleetAttributes = 1;
}

message CreateGameSessionInput {
    // Unique identifier for an alias associated with the fleet to create a game session in. Each request must reference either a fleet ID or alias ID, but not both.
    string AliasId = 1;
    // Unique identifier for a player or entity creating the game session. This ID is used to enforce a resource protection policy (if one exists) that limits the number of concurrent active game sessions one player can have.
    string CreatorId = 2;
    // Unique identifier for a fleet to create a game session in. Each request must reference either a fleet ID or alias ID, but not both.
    string FleetId = 3;
    // Set of developer-defined properties for a game session, formatted as a set of type:value pairs. These properties are included in the <a>GameSession</a> object, which is passed to the game server with a request to start a new game session (see <a href="http://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession">Start a Game Session</a>).
    array GameProperties = 4;
    // Set of developer-defined game session properties, formatted as a single string value. This data is included in the <a>GameSession</a> object, which is passed to the game server with a request to start a new game session (see <a href="http://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession">Start a Game Session</a>).
    string GameSessionData = 5;
    //  <i>This parameter is no longer preferred. Please use <code>IdempotencyToken</code> instead.</i> Custom string that uniquely identifies a request for a new game session. Maximum token length is 48 characters. If provided, this string is included in the new game session's ID. (A game session ARN has the following format: <code>arn:aws:gamelift:&lt;region&gt;::gamesession/&lt;fleet ID&gt;/&lt;custom ID string or idempotency token&gt;</code>.)
    string GameSessionId = 6;
    // Custom string that uniquely identifies a request for a new game session. Maximum token length is 48 characters. If provided, this string is included in the new game session's ID. (A game session ARN has the following format: <code>arn:aws:gamelift:&lt;region&gt;::gamesession/&lt;fleet ID&gt;/&lt;custom ID string or idempotency token&gt;</code>.) Idempotency tokens remain in use for 30 days after a game session has ended; game session objects are retained for this time period and then deleted.
    string IdempotencyToken = 7;
    // Maximum number of players that can be connected simultaneously to the game session.
    integer MaximumPlayerSessionCount = 8;
    // Descriptive label that is associated with a game session. Session names do not need to be unique.
    string Name = 9;
}

message CreateGameSessionOutput {
    // Object that describes the newly created game session record.
    GameSession GameSession = 1;
}

message CreateGameSessionQueueInput {
    // List of fleets that can be used to fulfill game session placement requests in the queue. Fleets are identified by either a fleet ARN or a fleet alias ARN. Destinations are listed in default preference order.
    array Destinations = 1;
    // Descriptive label that is associated with game session queue. Queue names must be unique within each region.
    string Name = 2;
    // Collection of latency policies to apply when processing game sessions placement requests with player latency information. Multiple policies are evaluated in order of the maximum latency value, starting with the lowest latency values. With just one policy, it is enforced at the start of the game session placement for the duration period. With multiple policies, each policy is enforced consecutively for its duration period. For example, a queue might enforce a 60-second policy followed by a 120-second policy, and then no policy for the remainder of the placement. A player latency policy must set a value for MaximumIndividualPlayerLatencyMilliseconds; if none is set, this API requests will fail.
    array PlayerLatencyPolicies = 3;
    // Maximum time, in seconds, that a new game session placement request remains in the queue. When a request exceeds this time, the game session placement changes to a <code>TIMED_OUT</code> status.
    integer TimeoutInSeconds = 4;
}

message CreateGameSessionQueueOutput {
    // Object that describes the newly created game session queue.
    GameSessionQueue GameSessionQueue = 1;
}

message CreateMatchmakingConfigurationInput {
    // Flag that determines whether or not a match that was created with this configuration must be accepted by the matched players. To require acceptance, set to TRUE.
    boolean AcceptanceRequired = 1;
    // Length of time (in seconds) to wait for players to accept a proposed match. If any player rejects the match or fails to accept before the timeout, the ticket continues to look for an acceptable match.
    integer AcceptanceTimeoutSeconds = 2;
    // Number of player slots in a match to keep open for future players. For example, if the configuration's rule set specifies a match for a single 12-person team, and the additional player count is set to 2, only 10 players are selected for the match.
    integer AdditionalPlayerCount = 3;
    // Information to attached to all events related to the matchmaking configuration.
    string CustomEventData = 4;
    // Meaningful description of the matchmaking configuration.
    string Description = 5;
    // Set of developer-defined properties for a game session, formatted as a set of type:value pairs. These properties are included in the <a>GameSession</a> object, which is passed to the game server with a request to start a new game session (see <a href="http://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession">Start a Game Session</a>). This information is added to the new <a>GameSession</a> object that is created for a successful match.
    array GameProperties = 6;
    // Set of developer-defined game session properties, formatted as a single string value. This data is included in the <a>GameSession</a> object, which is passed to the game server with a request to start a new game session (see <a href="http://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession">Start a Game Session</a>). This information is added to the new <a>GameSession</a> object that is created for a successful match.
    string GameSessionData = 7;
    // Amazon Resource Name (<a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a game session queue and uniquely identifies it. Format is <code>arn:aws:gamelift:&lt;region&gt;::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912</code>. These queues are used when placing game sessions for matches that are created with this matchmaking configuration. Queues can be located in any region.
    array GameSessionQueueArns = 8;
    // Unique identifier for a matchmaking configuration. This name is used to identify the configuration associated with a matchmaking request or ticket.
    string Name = 9;
    // SNS topic ARN that is set up to receive matchmaking notifications.
    string NotificationTarget = 10;
    // Maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out. Requests that time out can be resubmitted as needed.
    integer RequestTimeoutSeconds = 11;
    // Unique identifier for a matchmaking rule set to use with this configuration. A matchmaking configuration can only use rule sets that are defined in the same region.
    string RuleSetName = 12;
}

message CreateMatchmakingConfigurationOutput {
    // Object that describes the newly created matchmaking configuration.
    MatchmakingConfiguration Configuration = 1;
}

message CreateMatchmakingRuleSetInput {
    // Unique identifier for a matchmaking rule set. This name is used to identify the rule set associated with a matchmaking configuration.
    string Name = 1;
    // Collection of matchmaking rules, formatted as a JSON string. (Note that comments are not allowed in JSON, but most elements support a description field.)
    string RuleSetBody = 2;
}

message CreateMatchmakingRuleSetOutput {
    // Object that describes the newly created matchmaking rule set.
    MatchmakingRuleSet RuleSet = 1;
}

message CreatePlayerSessionInput {
    // Unique identifier for the game session to add a player to.
    string GameSessionId = 1;
    // Developer-defined information related to a player. Amazon GameLift does not use this data, so it can be formatted as needed for use in the game.
    string PlayerData = 2;
    // Unique identifier for a player. Player IDs are developer-defined.
    string PlayerId = 3;
}

message CreatePlayerSessionOutput {
    // Object that describes the newly created player session record.
    PlayerSession PlayerSession = 1;
}

message CreatePlayerSessionsInput {
    // Unique identifier for the game session to add players to.
    string GameSessionId = 1;
    // Map of string pairs, each specifying a player ID and a set of developer-defined information related to the player. Amazon GameLift does not use this data, so it can be formatted as needed for use in the game. Player data strings for player IDs not included in the <code>PlayerIds</code> parameter are ignored.
    array PlayerDataMap = 2;
    // List of unique identifiers for the players to be added.
    array PlayerIds = 3;
}

message CreatePlayerSessionsOutput {
    // Collection of player session objects created for the added players.
    array PlayerSessions = 1;
}

message CreateVpcPeeringAuthorizationInput {
    // Unique identifier for the AWS account that you use to manage your Amazon GameLift fleet. You can find your Account ID in the AWS Management Console under account settings.
    string GameLiftAwsAccountId = 1;
    // Unique identifier for a VPC with resources to be accessed by your Amazon GameLift fleet. The VPC must be in the same region where your fleet is deployed. To get VPC information, including IDs, use the Virtual Private Cloud service tools, including the VPC Dashboard in the AWS Management Console.
    string PeerVpcId = 2;
}

message CreateVpcPeeringAuthorizationOutput {
    // Details on the requested VPC peering authorization, including expiration.
    VpcPeeringAuthorization VpcPeeringAuthorization = 1;
}

message CreateVpcPeeringConnectionInput {
    // Unique identifier for a fleet. This tells Amazon GameLift which GameLift VPC to peer with.
    string FleetId = 1;
    // Unique identifier for the AWS account with the VPC that you want to peer your Amazon GameLift fleet with. You can find your Account ID in the AWS Management Console under account settings.
    string PeerVpcAwsAccountId = 2;
    // Unique identifier for a VPC with resources to be accessed by your Amazon GameLift fleet. The VPC must be in the same region where your fleet is deployed. To get VPC information, including IDs, use the Virtual Private Cloud service tools, including the VPC Dashboard in the AWS Management Console.
    string PeerVpcId = 3;
}

message CreateVpcPeeringConnectionOutput {
}

message DeleteAliasInput {
    // Unique identifier for a fleet alias. Specify the alias you want to delete.
    string AliasId = 1;
}

message DeleteBuildInput {
    // Unique identifier for a build to delete.
    string BuildId = 1;
}

message DeleteFleetInput {
    // Unique identifier for a fleet to be deleted.
    string FleetId = 1;
}

message DeleteGameSessionQueueInput {
    // Descriptive label that is associated with game session queue. Queue names must be unique within each region.
    string Name = 1;
}

message DeleteGameSessionQueueOutput {
}

message DeleteMatchmakingConfigurationInput {
    // Unique identifier for a matchmaking configuration
    string Name = 1;
}

message DeleteMatchmakingConfigurationOutput {
}

message DeleteScalingPolicyInput {
    // Unique identifier for a fleet to be deleted.
    string FleetId = 1;
    // Descriptive label that is associated with a scaling policy. Policy names do not need to be unique.
    string Name = 2;
}

message DeleteVpcPeeringAuthorizationInput {
    // Unique identifier for the AWS account that you use to manage your Amazon GameLift fleet. You can find your Account ID in the AWS Management Console under account settings.
    string GameLiftAwsAccountId = 1;
    // Unique identifier for a VPC with resources to be accessed by your Amazon GameLift fleet. The VPC must be in the same region where your fleet is deployed. To get VPC information, including IDs, use the Virtual Private Cloud service tools, including the VPC Dashboard in the AWS Management Console.
    string PeerVpcId = 2;
}

message DeleteVpcPeeringAuthorizationOutput {
}

message DeleteVpcPeeringConnectionInput {
    // Unique identifier for a fleet. This value must match the fleet ID referenced in the VPC peering connection record.
    string FleetId = 1;
    // Unique identifier for a VPC peering connection. This value is included in the <a>VpcPeeringConnection</a> object, which can be retrieved by calling <a>DescribeVpcPeeringConnections</a>.
    string VpcPeeringConnectionId = 2;
}

message DeleteVpcPeeringConnectionOutput {
}

message DescribeAliasInput {
    // Unique identifier for a fleet alias. Specify the alias you want to retrieve.
    string AliasId = 1;
}

message DescribeAliasOutput {
    // Object that contains the requested alias.
    Alias Alias = 1;
}

message DescribeBuildInput {
    // Unique identifier for a build to retrieve properties for.
    string BuildId = 1;
}

message DescribeBuildOutput {
    // Set of properties describing the requested build.
    Build Build = 1;
}

message DescribeEC2InstanceLimitsInput {
    // Name of an EC2 instance type that is supported in Amazon GameLift. A fleet instance type determines the computing resources of each instance in the fleet, including CPU, memory, storage, and networking capacity. Amazon GameLift supports the following EC2 instance types. See <a href="http://aws.amazon.com/ec2/instance-types/">Amazon EC2 Instance Types</a> for detailed descriptions. Leave this parameter blank to retrieve limits for all types.
    EC2InstanceType EC2InstanceType = 1;
}

message DescribeEC2InstanceLimitsOutput {
    // Object that contains the maximum number of instances for the specified instance type.
    array EC2InstanceLimits = 1;
}

message DescribeFleetAttributesInput {
    // Unique identifier for a fleet(s) to retrieve attributes for. To request attributes for all fleets, leave this parameter empty.
    array FleetIds = 1;
    // Maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages. This parameter is ignored when the request specifies one or a list of fleet IDs.
    integer Limit = 2;
    // Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To start at the beginning of the result set, do not specify a value. This parameter is ignored when the request specifies one or a list of fleet IDs.
    string NextToken = 3;
}

message DescribeFleetAttributesOutput {
    // Collection of objects containing attribute metadata for each requested fleet ID.
    array FleetAttributes = 1;
    // Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
    string NextToken = 2;
}

message DescribeFleetCapacityInput {
    // Unique identifier for a fleet(s) to retrieve capacity information for. To request capacity information for all fleets, leave this parameter empty.
    array FleetIds = 1;
    // Maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages. This parameter is ignored when the request specifies one or a list of fleet IDs.
    integer Limit = 2;
    // Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To start at the beginning of the result set, do not specify a value. This parameter is ignored when the request specifies one or a list of fleet IDs.
    string NextToken = 3;
}

message DescribeFleetCapacityOutput {
    // Collection of objects containing capacity information for each requested fleet ID. Leave this parameter empty to retrieve capacity information for all fleets.
    array FleetCapacity = 1;
    // Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
    string NextToken = 2;
}

message DescribeFleetEventsInput {
    // Most recent date to retrieve event logs for. If no end time is specified, this call returns entries from the specified start time up to the present. Format is a number expressed in Unix time as milliseconds (ex: "1469498468.057").
    string EndTime = 1;
    // Unique identifier for a fleet to get event logs for.
    string FleetId = 2;
    // Maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.
    integer Limit = 3;
    // Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To start at the beginning of the result set, do not specify a value.
    string NextToken = 4;
    // Earliest date to retrieve event logs for. If no start time is specified, this call returns entries starting from when the fleet was created to the specified end time. Format is a number expressed in Unix time as milliseconds (ex: "1469498468.057").
    string StartTime = 5;
}

message DescribeFleetEventsOutput {
    // Collection of objects containing event log entries for the specified fleet.
    array Events = 1;
    // Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
    string NextToken = 2;
}

message DescribeFleetPortSettingsInput {
    // Unique identifier for a fleet to retrieve port settings for.
    string FleetId = 1;
}

message DescribeFleetPortSettingsOutput {
    // Object that contains port settings for the requested fleet ID.
    array InboundPermissions = 1;
}

message DescribeFleetUtilizationInput {
    // Unique identifier for a fleet(s) to retrieve utilization data for. To request utilization data for all fleets, leave this parameter empty.
    array FleetIds = 1;
    // Maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages. This parameter is ignored when the request specifies one or a list of fleet IDs.
    integer Limit = 2;
    // Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To start at the beginning of the result set, do not specify a value. This parameter is ignored when the request specifies one or a list of fleet IDs.
    string NextToken = 3;
}

message DescribeFleetUtilizationOutput {
    // Collection of objects containing utilization information for each requested fleet ID.
    array FleetUtilization = 1;
    // Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
    string NextToken = 2;
}

message DescribeGameSessionDetailsInput {
    // Unique identifier for an alias associated with the fleet to retrieve all game sessions for.
    string AliasId = 1;
    // Unique identifier for a fleet to retrieve all game sessions active on the fleet.
    string FleetId = 2;
    // Unique identifier for the game session to retrieve.
    string GameSessionId = 3;
    // Maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.
    integer Limit = 4;
    // Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To start at the beginning of the result set, do not specify a value.
    string NextToken = 5;
    // Game session status to filter results on. Possible game session statuses include <code>ACTIVE</code>, <code>TERMINATED</code>, <code>ACTIVATING</code> and <code>TERMINATING</code> (the last two are transitory).
    string StatusFilter = 6;
}

message DescribeGameSessionDetailsOutput {
    // Collection of objects containing game session properties and the protection policy currently in force for each session matching the request.
    array GameSessionDetails = 1;
    // Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
    string NextToken = 2;
}

message DescribeGameSessionPlacementInput {
    // Unique identifier for a game session placement to retrieve.
    string PlacementId = 1;
}

message DescribeGameSessionPlacementOutput {
    // Object that describes the requested game session placement.
    GameSessionPlacement GameSessionPlacement = 1;
}

message DescribeGameSessionQueuesInput {
    // Maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.
    integer Limit = 1;
    // List of queue names to retrieve information for. To request settings for all queues, leave this parameter empty.
    array Names = 2;
    // Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To start at the beginning of the result set, do not specify a value.
    string NextToken = 3;
}

message DescribeGameSessionQueuesOutput {
    // Collection of objects that describes the requested game session queues.
    array GameSessionQueues = 1;
    // Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
    string NextToken = 2;
}

message DescribeGameSessionsInput {
    // Unique identifier for an alias associated with the fleet to retrieve all game sessions for.
    string AliasId = 1;
    // Unique identifier for a fleet to retrieve all game sessions for.
    string FleetId = 2;
    // Unique identifier for the game session to retrieve. You can use either a <code>GameSessionId</code> or <code>GameSessionArn</code> value.
    string GameSessionId = 3;
    // Maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.
    integer Limit = 4;
    // Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To start at the beginning of the result set, do not specify a value.
    string NextToken = 5;
    // Game session status to filter results on. Possible game session statuses include <code>ACTIVE</code>, <code>TERMINATED</code>, <code>ACTIVATING</code>, and <code>TERMINATING</code> (the last two are transitory).
    string StatusFilter = 6;
}

message DescribeGameSessionsOutput {
    // Collection of objects containing game session properties for each session matching the request.
    array GameSessions = 1;
    // Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
    string NextToken = 2;
}

message DescribeInstancesInput {
    // Unique identifier for a fleet to retrieve instance information for.
    string FleetId = 1;
    // Unique identifier for an instance to retrieve. Specify an instance ID or leave blank to retrieve all instances in the fleet.
    string InstanceId = 2;
    // Maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.
    integer Limit = 3;
    // Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To start at the beginning of the result set, do not specify a value.
    string NextToken = 4;
}

message DescribeInstancesOutput {
    // Collection of objects containing properties for each instance returned.
    array Instances = 1;
    // Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
    string NextToken = 2;
}

message DescribeMatchmakingConfigurationsInput {
    // Maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages. This parameter is limited to 10.
    integer Limit = 1;
    // Unique identifier for a matchmaking configuration(s) to retrieve. To request all existing configurations, leave this parameter empty.
    array Names = 2;
    // Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To start at the beginning of the result set, do not specify a value.
    string NextToken = 3;
    // Unique identifier for a matchmaking rule set. Use this parameter to retrieve all matchmaking configurations that use this rule set.
    string RuleSetName = 4;
}

message DescribeMatchmakingConfigurationsOutput {
    // Collection of requested matchmaking configuration objects.
    array Configurations = 1;
    // Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
    string NextToken = 2;
}

message DescribeMatchmakingInput {
    // Unique identifier for a matchmaking ticket. To request all existing tickets, leave this parameter empty.
    array TicketIds = 1;
}

message DescribeMatchmakingOutput {
    // Collection of existing matchmaking ticket objects matching the request.
    array TicketList = 1;
}

message DescribeMatchmakingRuleSetsInput {
    // Maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.
    integer Limit = 1;
    // Unique identifier for a matchmaking rule set. This name is used to identify the rule set associated with a matchmaking configuration.
    array Names = 2;
    // Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To start at the beginning of the result set, do not specify a value.
    string NextToken = 3;
}

message DescribeMatchmakingRuleSetsOutput {
    // Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
    string NextToken = 1;
    // Collection of requested matchmaking rule set objects.
    array RuleSets = 2;
}

message DescribePlayerSessionsInput {
    // Unique identifier for the game session to retrieve player sessions for.
    string GameSessionId = 1;
    // Maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages. If a player session ID is specified, this parameter is ignored.
    integer Limit = 2;
    // Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To start at the beginning of the result set, do not specify a value. If a player session ID is specified, this parameter is ignored.
    string NextToken = 3;
    // Unique identifier for a player to retrieve player sessions for.
    string PlayerId = 4;
    // Unique identifier for a player session to retrieve.
    string PlayerSessionId = 5;
    // <p>Player session status to filter results on.</p> <p>Possible player session statuses include the following:</p> <ul> <li> <p> <b>RESERVED</b> -- The player session request has been received, but the player has not yet connected to the server process and/or been validated. </p> </li> <li> <p> <b>ACTIVE</b> -- The player has been validated by the server process and is currently connected.</p> </li> <li> <p> <b>COMPLETED</b> -- The player connection has been dropped.</p> </li> <li> <p> <b>TIMEDOUT</b> -- A player session request was received, but the player did not connect and/or was not validated within the timeout limit (60 seconds).</p> </li> </ul>
    string PlayerSessionStatusFilter = 6;
}

message DescribePlayerSessionsOutput {
    // Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
    string NextToken = 1;
    // Collection of objects containing properties for each player session that matches the request.
    array PlayerSessions = 2;
}

message DescribeRuntimeConfigurationInput {
    // Unique identifier for a fleet to get the run-time configuration for.
    string FleetId = 1;
}

message DescribeRuntimeConfigurationOutput {
    // Instructions describing how server processes should be launched and maintained on each instance in the fleet.
    RuntimeConfiguration RuntimeConfiguration = 1;
}

message DescribeScalingPoliciesInput {
    // Unique identifier for a fleet to retrieve scaling policies for.
    string FleetId = 1;
    // Maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.
    integer Limit = 2;
    // Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To start at the beginning of the result set, do not specify a value.
    string NextToken = 3;
    // <p>Scaling policy status to filter results on. A scaling policy is only in force when in an <code>ACTIVE</code> status.</p> <ul> <li> <p> <b>ACTIVE</b> -- The scaling policy is currently in force.</p> </li> <li> <p> <b>UPDATEREQUESTED</b> -- A request to update the scaling policy has been received.</p> </li> <li> <p> <b>UPDATING</b> -- A change is being made to the scaling policy.</p> </li> <li> <p> <b>DELETEREQUESTED</b> -- A request to delete the scaling policy has been received.</p> </li> <li> <p> <b>DELETING</b> -- The scaling policy is being deleted.</p> </li> <li> <p> <b>DELETED</b> -- The scaling policy has been deleted.</p> </li> <li> <p> <b>ERROR</b> -- An error occurred in creating the policy. It should be removed and recreated.</p> </li> </ul>
    ScalingStatusType StatusFilter = 4;
}

message DescribeScalingPoliciesOutput {
    // Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
    string NextToken = 1;
    // Collection of objects containing the scaling policies matching the request.
    array ScalingPolicies = 2;
}

message DescribeVpcPeeringAuthorizationsInput {
}

message DescribeVpcPeeringAuthorizationsOutput {
    // Collection of objects that describe all valid VPC peering operations for the current AWS account.
    array VpcPeeringAuthorizations = 1;
}

message DescribeVpcPeeringConnectionsInput {
    // Unique identifier for a fleet.
    string FleetId = 1;
}

message DescribeVpcPeeringConnectionsOutput {
    // Collection of VPC peering connection records that match the request.
    array VpcPeeringConnections = 1;
}

message DesiredPlayerSession {
    // Developer-defined information related to a player. Amazon GameLift does not use this data, so it can be formatted as needed for use in the game.
    string PlayerData = 1;
    // Unique identifier for a player to associate with the player session.
    string PlayerId = 2;
}

repeated DesiredPlayerSession DesiredPlayerSessionList = 1





message EC2InstanceCounts {
    // Actual number of active instances in the fleet.
    integer ACTIVE = 1;
    // Ideal number of active instances in the fleet.
    integer DESIRED = 2;
    // Number of active instances in the fleet that are not currently hosting a game session.
    integer IDLE = 3;
    // Maximum value allowed for the fleet's instance count.
    integer MAXIMUM = 4;
    // Minimum value allowed for the fleet's instance count.
    integer MINIMUM = 5;
    // Number of instances in the fleet that are starting but not yet active.
    integer PENDING = 6;
    // Number of instances in the fleet that are no longer active but haven't yet been terminated.
    integer TERMINATING = 7;
}

message EC2InstanceLimit {
    // Number of instances of the specified type that are currently in use by this AWS account.
    integer CurrentInstances = 1;
    // Name of an EC2 instance type that is supported in Amazon GameLift. A fleet instance type determines the computing resources of each instance in the fleet, including CPU, memory, storage, and networking capacity. Amazon GameLift supports the following EC2 instance types. See <a href="http://aws.amazon.com/ec2/instance-types/">Amazon EC2 Instance Types</a> for detailed descriptions.
    EC2InstanceType EC2InstanceType = 2;
    // Number of instances allowed.
    integer InstanceLimit = 3;
}

repeated EC2InstanceLimit EC2InstanceLimitList = 1

enum EC2InstanceType {
    T2MICRO = 0;
    T2SMALL = 1;
    T2MEDIUM = 2;
    T2LARGE = 3;
    C3LARGE = 4;
    C3XLARGE = 5;
    C32XLARGE = 6;
    C34XLARGE = 7;
    C38XLARGE = 8;
    C4LARGE = 9;
    C4XLARGE = 10;
    C42XLARGE = 11;
    C44XLARGE = 12;
    C48XLARGE = 13;
    R3LARGE = 14;
    R3XLARGE = 15;
    R32XLARGE = 16;
    R34XLARGE = 17;
    R38XLARGE = 18;
    R4LARGE = 19;
    R4XLARGE = 20;
    R42XLARGE = 21;
    R44XLARGE = 22;
    R48XLARGE = 23;
    R416XLARGE = 24;
    M3MEDIUM = 25;
    M3LARGE = 26;
    M3XLARGE = 27;
    M32XLARGE = 28;
    M4LARGE = 29;
    M4XLARGE = 30;
    M42XLARGE = 31;
    M44XLARGE = 32;
    M410XLARGE = 33;
}

message Event {
    // <p>Type of event being logged. The following events are currently in use:</p> <p> <b>General events:</b> </p> <ul> <li> <p> GENERIC_EVENT -- An unspecified event has occurred.</p> </li> </ul> <p> <b>Fleet creation events:</b> </p> <ul> <li> <p>FLEET_CREATED -- A fleet record was successfully created with a status of <code>NEW</code>. Event messaging includes the fleet ID.</p> </li> <li> <p>FLEET_STATE_DOWNLOADING -- Fleet status changed from <code>NEW</code> to <code>DOWNLOADING</code>. The compressed build has started downloading to a fleet instance for installation.</p> </li> <li> <p> FLEET_BINARY_DOWNLOAD_FAILED -- The build failed to download to the fleet instance.</p> </li> <li> <p>FLEET_CREATION_EXTRACTING_BUILD – The game server build was successfully downloaded to an instance, and the build files are now being extracted from the uploaded build and saved to an instance. Failure at this stage prevents a fleet from moving to <code>ACTIVE</code> status. Logs for this stage display a list of the files that are extracted and saved on the instance. Access the logs by using the URL in <i>PreSignedLogUrl</i>.</p> </li> <li> <p>FLEET_CREATION_RUNNING_INSTALLER – The game server build files were successfully extracted, and the Amazon GameLift is now running the build's install script (if one is included). Failure in this stage prevents a fleet from moving to <code>ACTIVE</code> status. Logs for this stage list the installation steps and whether or not the install completed successfully. Access the logs by using the URL in <i>PreSignedLogUrl</i>. </p> </li> <li> <p>FLEET_CREATION_VALIDATING_RUNTIME_CONFIG -- The build process was successful, and the Amazon GameLift is now verifying that the game server launch paths, which are specified in the fleet's run-time configuration, exist. If any listed launch path exists, Amazon GameLift tries to launch a game server process and waits for the process to report ready. Failures in this stage prevent a fleet from moving to <code>ACTIVE</code> status. Logs for this stage list the launch paths in the run-time configuration and indicate whether each is found. Access the logs by using the URL in <i>PreSignedLogUrl</i>. </p> </li> <li> <p>FLEET_STATE_VALIDATING -- Fleet status changed from <code>DOWNLOADING</code> to <code>VALIDATING</code>.</p> </li> <li> <p> FLEET_VALIDATION_LAUNCH_PATH_NOT_FOUND -- Validation of the run-time configuration failed because the executable specified in a launch path does not exist on the instance.</p> </li> <li> <p>FLEET_STATE_BUILDING -- Fleet status changed from <code>VALIDATING</code> to <code>BUILDING</code>.</p> </li> <li> <p>FLEET_VALIDATION_EXECUTABLE_RUNTIME_FAILURE -- Validation of the run-time configuration failed because the executable specified in a launch path failed to run on the fleet instance.</p> </li> <li> <p>FLEET_STATE_ACTIVATING -- Fleet status changed from <code>BUILDING</code> to <code>ACTIVATING</code>. </p> </li> <li> <p> FLEET_ACTIVATION_FAILED - The fleet failed to successfully complete one of the steps in the fleet activation process. This event code indicates that the game build was successfully downloaded to a fleet instance, built, and validated, but was not able to start a server process. A possible reason for failure is that the game server is not reporting "process ready" to the Amazon GameLift service.</p> </li> <li> <p>FLEET_STATE_ACTIVE -- The fleet's status changed from <code>ACTIVATING</code> to <code>ACTIVE</code>. The fleet is now ready to host game sessions.</p> </li> </ul> <p> <b>VPC peering events:</b> </p> <ul> <li> <p>FLEET_VPC_PEERING_SUCCEEDED -- A VPC peering connection has been established between the VPC for an Amazon GameLift fleet and a VPC in your AWS account.</p> </li> <li> <p>FLEET_VPC_PEERING_FAILED -- A requested VPC peering connection has failed. Event details and status information (see <a>DescribeVpcPeeringConnections</a>) provide additional detail. A common reason for peering failure is that the two VPCs have overlapping CIDR blocks of IPv4 addresses. To resolve this, change the CIDR block for the VPC in your AWS account. For more information on VPC peering failures, see <a href="http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide/invalid-peering-configurations.html">http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide/invalid-peering-configurations.html</a> </p> </li> <li> <p>FLEET_VPC_PEERING_DELETED -- A VPC peering connection has been successfully deleted.</p> </li> </ul> <p> <b>Other fleet events:</b> </p> <ul> <li> <p>FLEET_SCALING_EVENT -- A change was made to the fleet's capacity settings (desired instances, minimum/maximum scaling limits). Event messaging includes the new capacity settings.</p> </li> <li> <p>FLEET_NEW_GAME_SESSION_PROTECTION_POLICY_UPDATED -- A change was made to the fleet's game session protection policy setting. Event messaging includes both the old and new policy setting. </p> </li> <li> <p>FLEET_DELETED -- A request to delete a fleet was initiated.</p> </li> </ul>
    EventCode EventCode = 1;
    // Unique identifier for a fleet event.
    string EventId = 2;
    // Time stamp indicating when this event occurred. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
    string EventTime = 3;
    // Additional information related to the event.
    string Message = 4;
    // Location of stored logs with additional detail that is related to the event. This is useful for debugging issues. The URL is valid for 15 minutes. You can also access fleet creation logs through the Amazon GameLift console.
    string PreSignedLogUrl = 5;
    // Unique identifier for an event resource, such as a fleet ID.
    string ResourceId = 6;
}

enum EventCode {
    GENERIC_EVENT = 0;
    FLEET_CREATED = 1;
    FLEET_DELETED = 2;
    FLEET_SCALING_EVENT = 3;
    FLEET_STATE_DOWNLOADING = 4;
    FLEET_STATE_VALIDATING = 5;
    FLEET_STATE_BUILDING = 6;
    FLEET_STATE_ACTIVATING = 7;
    FLEET_STATE_ACTIVE = 8;
    FLEET_STATE_ERROR = 9;
    FLEET_INITIALIZATION_FAILED = 10;
    FLEET_BINARY_DOWNLOAD_FAILED = 11;
    FLEET_VALIDATION_LAUNCH_PATH_NOT_FOUND = 12;
    FLEET_VALIDATION_EXECUTABLE_RUNTIME_FAILURE = 13;
    FLEET_VALIDATION_TIMED_OUT = 14;
    FLEET_ACTIVATION_FAILED = 15;
    FLEET_ACTIVATION_FAILED_NO_INSTANCES = 16;
    FLEET_NEW_GAME_SESSION_PROTECTION_POLICY_UPDATED = 17;
    SERVER_PROCESS_INVALID_PATH = 18;
    SERVER_PROCESS_SDK_INITIALIZATION_TIMEOUT = 19;
    SERVER_PROCESS_PROCESS_READY_TIMEOUT = 20;
    SERVER_PROCESS_CRASHED = 21;
    SERVER_PROCESS_TERMINATED_UNHEALTHY = 22;
    SERVER_PROCESS_FORCE_TERMINATED = 23;
    SERVER_PROCESS_PROCESS_EXIT_TIMEOUT = 24;
    GAME_SESSION_ACTIVATION_TIMEOUT = 25;
    FLEET_CREATION_EXTRACTING_BUILD = 26;
    FLEET_CREATION_RUNNING_INSTALLER = 27;
    FLEET_CREATION_VALIDATING_RUNTIME_CONFIG = 28;
    FLEET_VPC_PEERING_SUCCEEDED = 29;
    FLEET_VPC_PEERING_FAILED = 30;
    FLEET_VPC_PEERING_DELETED = 31;
}

repeated Event EventList = 1

message FleetAttributes {
    // Unique identifier for a build.
    string BuildId = 1;
    // Time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
    string CreationTime = 2;
    // Human-readable description of the fleet.
    string Description = 3;
    // Identifier for a fleet that is unique across all regions.
    string FleetArn = 4;
    // Unique identifier for a fleet.
    string FleetId = 5;
    // Location of default log files. When a server process is shut down, Amazon GameLift captures and stores any log files in this location. These logs are in addition to game session logs; see more on game session logs in the <a href="http://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-api-server-code">Amazon GameLift Developer Guide</a>. If no default log path for a fleet is specified, Amazon GameLift automatically uploads logs that are stored on each instance at <code>C:\game\logs</code> (for Windows) or <code>/local/game/logs</code> (for Linux). Use the Amazon GameLift console to access stored logs.
    array LogPaths = 6;
    // Names of metric groups that this fleet is included in. In Amazon CloudWatch, you can view metrics for an individual fleet or aggregated metrics for fleets that are in a fleet metric group. A fleet can be included in only one metric group at a time.
    array MetricGroups = 7;
    // Descriptive label that is associated with a fleet. Fleet names do not need to be unique.
    string Name = 8;
    // <p>Type of game session protection to set for all new instances started in the fleet.</p> <ul> <li> <p> <b>NoProtection</b> -- The game session can be terminated during a scale-down event.</p> </li> <li> <p> <b>FullProtection</b> -- If the game session is in an <code>ACTIVE</code> status, it cannot be terminated during a scale-down event.</p> </li> </ul>
    ProtectionPolicy NewGameSessionProtectionPolicy = 9;
    // Operating system of the fleet's computing resources. A fleet's operating system depends on the OS specified for the build that is deployed on this fleet.
    OperatingSystem OperatingSystem = 10;
    // Fleet policy to limit the number of game sessions an individual player can create over a span of time.
    ResourceCreationLimitPolicy ResourceCreationLimitPolicy = 11;
    // Game server launch parameters specified for fleets created before 2016-08-04 (or AWS SDK v. 0.12.16). Server launch parameters for fleets created after this date are specified in the fleet's <a>RuntimeConfiguration</a>.
    string ServerLaunchParameters = 12;
    // Path to a game server executable in the fleet's build, specified for fleets created before 2016-08-04 (or AWS SDK v. 0.12.16). Server launch paths for fleets created after this date are specified in the fleet's <a>RuntimeConfiguration</a>.
    string ServerLaunchPath = 13;
    // <p>Current status of the fleet.</p> <p>Possible fleet statuses include the following:</p> <ul> <li> <p> <b>NEW</b> -- A new fleet has been defined and desired instances is set to 1. </p> </li> <li> <p> <b>DOWNLOADING/VALIDATING/BUILDING/ACTIVATING</b> -- Amazon GameLift is setting up the new fleet, creating new instances with the game build and starting server processes.</p> </li> <li> <p> <b>ACTIVE</b> -- Hosts can now accept game sessions.</p> </li> <li> <p> <b>ERROR</b> -- An error occurred when downloading, validating, building, or activating the fleet.</p> </li> <li> <p> <b>DELETING</b> -- Hosts are responding to a delete fleet request.</p> </li> <li> <p> <b>TERMINATED</b> -- The fleet no longer exists.</p> </li> </ul>
    FleetStatus Status = 14;
    // Time stamp indicating when this data object was terminated. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
    string TerminationTime = 15;
}

repeated FleetAttributes FleetAttributesList = 1

message FleetCapacity {
    // Unique identifier for a fleet.
    string FleetId = 1;
    // Current status of fleet capacity.
    EC2InstanceCounts InstanceCounts = 2;
    // Name of an EC2 instance type that is supported in Amazon GameLift. A fleet instance type determines the computing resources of each instance in the fleet, including CPU, memory, storage, and networking capacity. Amazon GameLift supports the following EC2 instance types. See <a href="http://aws.amazon.com/ec2/instance-types/">Amazon EC2 Instance Types</a> for detailed descriptions.
    EC2InstanceType InstanceType = 3;
}

message FleetCapacityExceededException {
    string Message = 1;
}

repeated FleetCapacity FleetCapacityList = 1



repeated string FleetIdList = 1

enum FleetStatu {
    NEW = 0;
    DOWNLOADING = 1;
    VALIDATING = 2;
    BUILDING = 3;
    ACTIVATING = 4;
    ACTIVE = 5;
    DELETING = 6;
    ERROR = 7;
    TERMINATED = 8;
}

message FleetUtilization {
    // Number of active game sessions currently being hosted on all instances in the fleet.
    integer ActiveGameSessionCount = 1;
    // Number of server processes in an <code>ACTIVE</code> status currently running across all instances in the fleet
    integer ActiveServerProcessCount = 2;
    // Number of active player sessions currently being hosted on all instances in the fleet.
    integer CurrentPlayerSessionCount = 3;
    // Unique identifier for a fleet.
    string FleetId = 4;
    // Maximum players allowed across all game sessions currently being hosted on all instances in the fleet.
    integer MaximumPlayerSessionCount = 5;
}

repeated FleetUtilization FleetUtilizationList = 1





message GameProperty {
    // Game property identifier.
    string Key = 1;
    // Game property value.
    string Value = 2;
}



repeated GameProperty GamePropertyList = 1



message GameSession {
    // Time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
    string CreationTime = 1;
    // Unique identifier for a player. This ID is used to enforce a resource protection policy (if one exists), that limits the number of game sessions a player can create.
    string CreatorId = 2;
    // Number of players currently in the game session.
    integer CurrentPlayerSessionCount = 3;
    // Unique identifier for a fleet that the game session is running on.
    string FleetId = 4;
    // Set of developer-defined properties for a game session, formatted as a set of type:value pairs. These properties are included in the <a>GameSession</a> object, which is passed to the game server with a request to start a new game session (see <a href="http://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession">Start a Game Session</a>).
    array GameProperties = 5;
    // Set of developer-defined game session properties, formatted as a single string value. This data is included in the <a>GameSession</a> object, which is passed to the game server with a request to start a new game session (see <a href="http://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession">Start a Game Session</a>).
    string GameSessionData = 6;
    // Unique identifier for the game session. A game session ARN has the following format: <code>arn:aws:gamelift:&lt;region&gt;::gamesession/&lt;fleet ID&gt;/&lt;custom ID string or idempotency token&gt;</code>.
    string GameSessionId = 7;
    // IP address of the game session. To connect to a Amazon GameLift game server, an app needs both the IP address and port number.
    string IpAddress = 8;
    // Maximum number of players that can be connected simultaneously to the game session.
    integer MaximumPlayerSessionCount = 9;
    // Descriptive label that is associated with a game session. Session names do not need to be unique.
    string Name = 10;
    // Indicates whether or not the game session is accepting new players.
    PlayerSessionCreationPolicy PlayerSessionCreationPolicy = 11;
    // Port number for the game session. To connect to a Amazon GameLift game server, an app needs both the IP address and port number.
    integer Port = 12;
    // Current status of the game session. A game session must have an <code>ACTIVE</code> status to have player sessions.
    GameSessionStatus Status = 13;
    // Time stamp indicating when this data object was terminated. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
    string TerminationTime = 14;
}

message GameSessionConnectionInfo {
    // Amazon Resource Name (<a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a game session and uniquely identifies it.
    string GameSessionArn = 1;
    // IP address of the game session. To connect to a Amazon GameLift game server, an app needs both the IP address and port number.
    string IpAddress = 2;
    // Collection of player session IDs, one for each player ID that was included in the original matchmaking request.
    array MatchedPlayerSessions = 3;
    // Port number for the game session. To connect to a Amazon GameLift game server, an app needs both the IP address and port number.
    integer Port = 4;
}

message GameSessionDetail {
    // Object that describes a game session.
    GameSession GameSession = 1;
    // <p>Current status of protection for the game session.</p> <ul> <li> <p> <b>NoProtection</b> -- The game session can be terminated during a scale-down event.</p> </li> <li> <p> <b>FullProtection</b> -- If the game session is in an <code>ACTIVE</code> status, it cannot be terminated during a scale-down event.</p> </li> </ul>
    ProtectionPolicy ProtectionPolicy = 2;
}

repeated GameSessionDetail GameSessionDetailList = 1

message GameSessionFullException {
    string Message = 1;
}

repeated GameSession GameSessionList = 1

message GameSessionPlacement {
    // Time stamp indicating when this request was completed, canceled, or timed out.
    string EndTime = 1;
    // Set of developer-defined properties for a game session, formatted as a set of type:value pairs. These properties are included in the <a>GameSession</a> object, which is passed to the game server with a request to start a new game session (see <a href="http://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession">Start a Game Session</a>).
    array GameProperties = 2;
    // Identifier for the game session created by this placement request. This value is set once the new game session is placed (placement status is <code>FULFILLED</code>). This identifier is unique across all regions. You can use this value as a <code>GameSessionId</code> value as needed.
    string GameSessionArn = 3;
    // Set of developer-defined game session properties, formatted as a single string value. This data is included in the <a>GameSession</a> object, which is passed to the game server with a request to start a new game session (see <a href="http://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession">Start a Game Session</a>).
    string GameSessionData = 4;
    // Unique identifier for the game session. This value is set once the new game session is placed (placement status is <code>FULFILLED</code>).
    string GameSessionId = 5;
    // Descriptive label that is associated with a game session. Session names do not need to be unique.
    string GameSessionName = 6;
    // Descriptive label that is associated with game session queue. Queue names must be unique within each region.
    string GameSessionQueueName = 7;
    // Name of the region where the game session created by this placement request is running. This value is set once the new game session is placed (placement status is <code>FULFILLED</code>).
    string GameSessionRegion = 8;
    // IP address of the game session. To connect to a Amazon GameLift game server, an app needs both the IP address and port number. This value is set once the new game session is placed (placement status is <code>FULFILLED</code>).
    string IpAddress = 9;
    // Maximum number of players that can be connected simultaneously to the game session.
    integer MaximumPlayerSessionCount = 10;
    // Collection of information on player sessions created in response to the game session placement request. These player sessions are created only once a new game session is successfully placed (placement status is <code>FULFILLED</code>). This information includes the player ID (as provided in the placement request) and the corresponding player session ID. Retrieve full player sessions by calling <a>DescribePlayerSessions</a> with the player session ID.
    array PlacedPlayerSessions = 11;
    // Unique identifier for a game session placement.
    string PlacementId = 12;
    // Set of values, expressed in milliseconds, indicating the amount of latency that a player experiences when connected to AWS regions.
    array PlayerLatencies = 13;
    // Port number for the game session. To connect to a Amazon GameLift game server, an app needs both the IP address and port number. This value is set once the new game session is placed (placement status is <code>FULFILLED</code>).
    integer Port = 14;
    // Time stamp indicating when this request was placed in the queue. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
    string StartTime = 15;
    // <p>Current status of the game session placement request.</p> <ul> <li> <p> <b>PENDING</b> -- The placement request is currently in the queue waiting to be processed.</p> </li> <li> <p> <b>FULFILLED</b> -- A new game session and player sessions (if requested) have been successfully created. Values for <i>GameSessionArn</i> and <i>GameSessionRegion</i> are available. </p> </li> <li> <p> <b>CANCELLED</b> -- The placement request was canceled with a call to <a>StopGameSessionPlacement</a>.</p> </li> <li> <p> <b>TIMED_OUT</b> -- A new game session was not successfully created before the time limit expired. You can resubmit the placement request as needed.</p> </li> </ul>
    GameSessionPlacementState Status = 16;
}

enum GameSessionPlacementState {
    PENDING = 0;
    FULFILLED = 1;
    CANCELLED = 2;
    TIMED_OUT = 3;
}

message GameSessionQueue {
    // List of fleets that can be used to fulfill game session placement requests in the queue. Fleets are identified by either a fleet ARN or a fleet alias ARN. Destinations are listed in default preference order.
    array Destinations = 1;
    // Amazon Resource Name (<a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a game session queue and uniquely identifies it. Format is <code>arn:aws:gamelift:&lt;region&gt;::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912</code>.
    string GameSessionQueueArn = 2;
    // Descriptive label that is associated with game session queue. Queue names must be unique within each region.
    string Name = 3;
    // Collection of latency policies to apply when processing game sessions placement requests with player latency information. Multiple policies are evaluated in order of the maximum latency value, starting with the lowest latency values. With just one policy, it is enforced at the start of the game session placement for the duration period. With multiple policies, each policy is enforced consecutively for its duration period. For example, a queue might enforce a 60-second policy followed by a 120-second policy, and then no policy for the remainder of the placement.
    array PlayerLatencyPolicies = 4;
    // Maximum time, in seconds, that a new game session placement request remains in the queue. When a request exceeds this time, the game session placement changes to a <code>TIMED_OUT</code> status.
    integer TimeoutInSeconds = 5;
}

message GameSessionQueueDestination {
    // Amazon Resource Name (ARN) assigned to fleet or fleet alias. ARNs, which include a fleet ID or alias ID and a region name, provide a unique identifier across all regions.
    string DestinationArn = 1;
}

repeated GameSessionQueueDestination GameSessionQueueDestinationList = 1

repeated GameSessionQueue GameSessionQueueList = 1



repeated string GameSessionQueueNameList = 1

enum GameSessionStatu {
    ACTIVE = 0;
    ACTIVATING = 1;
    TERMINATED = 2;
    TERMINATING = 3;
    ERROR = 4;
}

message GetGameSessionLogUrlInput {
    // Unique identifier for the game session to get logs for.
    string GameSessionId = 1;
}

message GetGameSessionLogUrlOutput {
    // Location of the requested game session logs, available for download.
    string PreSignedUrl = 1;
}

message GetInstanceAccessInput {
    // Unique identifier for a fleet that contains the instance you want access to. The fleet can be in any of the following statuses: <code>ACTIVATING</code>, <code>ACTIVE</code>, or <code>ERROR</code>. Fleets with an <code>ERROR</code> status may be accessible for a short time before they are deleted.
    string FleetId = 1;
    // Unique identifier for an instance you want to get access to. You can access an instance in any status.
    string InstanceId = 2;
}

message GetInstanceAccessOutput {
    // Object that contains connection information for a fleet instance, including IP address and access credentials.
    InstanceAccess InstanceAccess = 1;
}

message IdempotentParameterMismatchException {
    string Message = 1;
}

message Instance {
    // Time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
    string CreationTime = 1;
    // Unique identifier for a fleet that the instance is in.
    string FleetId = 2;
    // Unique identifier for an instance.
    string InstanceId = 3;
    // IP address assigned to the instance.
    string IpAddress = 4;
    // Operating system that is running on this instance.
    OperatingSystem OperatingSystem = 5;
    // <p>Current status of the instance. Possible statuses include the following:</p> <ul> <li> <p> <b>PENDING</b> -- The instance is in the process of being created and launching server processes as defined in the fleet's run-time configuration. </p> </li> <li> <p> <b>ACTIVE</b> -- The instance has been successfully created and at least one server process has successfully launched and reported back to Amazon GameLift that it is ready to host a game session. The instance is now considered ready to host game sessions. </p> </li> <li> <p> <b>TERMINATING</b> -- The instance is in the process of shutting down. This may happen to reduce capacity during a scaling down event or to recycle resources in the event of a problem.</p> </li> </ul>
    InstanceStatus Status = 6;
    // EC2 instance type that defines the computing resources of this instance.
    EC2InstanceType Type = 7;
}

message InstanceAccess {
    // Credentials required to access the instance.
    InstanceCredentials Credentials = 1;
    // Unique identifier for a fleet containing the instance being accessed.
    string FleetId = 2;
    // Unique identifier for an instance being accessed.
    string InstanceId = 3;
    // IP address assigned to the instance.
    string IpAddress = 4;
    // Operating system that is running on the instance.
    OperatingSystem OperatingSystem = 5;
}

message InstanceCredentials {
    // Secret string. For Windows instances, the secret is a password for use with Windows Remote Desktop. For Linux instances, it is a private key (which must be saved as a <code>.pem</code> file) for use with SSH.
    string Secret = 1;
    // User login string.
    string UserName = 2;
}



repeated Instance InstanceList = 1

enum InstanceStatu {
    PENDING = 0;
    ACTIVE = 1;
    TERMINATING = 2;
}

message InternalServiceException {
    string Message = 1;
}

message InvalidFleetStatusException {
    string Message = 1;
}

message InvalidGameSessionStatusException {
    string Message = 1;
}

message InvalidRequestException {
    string Message = 1;
}

message IpPermission {
    // Starting value for a range of allowed port numbers.
    integer FromPort = 1;
    // Range of allowed IP addresses. This value must be expressed in CIDR notation. Example: "<code>000.000.000.000/[subnet mask]</code>" or optionally the shortened version "<code>0.0.0.0/[subnet mask]</code>".
    string IpRange = 2;
    // Network communication protocol used by the fleet.
    IpProtocol Protocol = 3;
    // Ending value for a range of allowed port numbers. Port numbers are end-inclusive. This value must be higher than <code>FromPort</code>.
    integer ToPort = 4;
}

repeated IpPermission IpPermissionsList = 1

enum IpProtocol {
    TCP = 0;
    UDP = 1;
}

message LatencyMap {
    string key = 1;
    integer value = 2;
}
repeated LatencyMap LatencyMap = 1

message LimitExceededException {
    string Message = 1;
}

message ListAliasesInput {
    // Maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.
    integer Limit = 1;
    // Descriptive label that is associated with an alias. Alias names do not need to be unique.
    string Name = 2;
    // Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To start at the beginning of the result set, do not specify a value.
    string NextToken = 3;
    // <p>Type of routing to filter results on. Use this parameter to retrieve only aliases of a certain type. To retrieve all aliases, leave this parameter empty.</p> <p>Possible routing types include the following:</p> <ul> <li> <p> <b>SIMPLE</b> -- The alias resolves to one specific fleet. Use this type when routing to active fleets.</p> </li> <li> <p> <b>TERMINAL</b> -- The alias does not resolve to a fleet but instead can be used to display a message to the user. A terminal alias throws a TerminalRoutingStrategyException with the <a>RoutingStrategy</a> message embedded.</p> </li> </ul>
    RoutingStrategyType RoutingStrategyType = 4;
}

message ListAliasesOutput {
    // Collection of alias records that match the list request.
    array Aliases = 1;
    // Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
    string NextToken = 2;
}

message ListBuildsInput {
    // Maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.
    integer Limit = 1;
    // Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To start at the beginning of the result set, do not specify a value.
    string NextToken = 2;
    // <p>Build status to filter results by. To retrieve all builds, leave this parameter empty.</p> <p>Possible build statuses include the following:</p> <ul> <li> <p> <b>INITIALIZED</b> -- A new build has been defined, but no files have been uploaded. You cannot create fleets for builds that are in this status. When a build is successfully created, the build status is set to this value. </p> </li> <li> <p> <b>READY</b> -- The game build has been successfully uploaded. You can now create new fleets for this build.</p> </li> <li> <p> <b>FAILED</b> -- The game build upload failed. You cannot create new fleets for this build. </p> </li> </ul>
    BuildStatus Status = 3;
}

message ListBuildsOutput {
    // Collection of build records that match the request.
    array Builds = 1;
    // Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
    string NextToken = 2;
}

message ListFleetsInput {
    // Unique identifier for a build to return fleets for. Use this parameter to return only fleets using the specified build. To retrieve all fleets, leave this parameter empty.
    string BuildId = 1;
    // Maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.
    integer Limit = 2;
    // Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To start at the beginning of the result set, do not specify a value.
    string NextToken = 3;
}

message ListFleetsOutput {
    // Set of fleet IDs matching the list request. You can retrieve additional information about all returned fleets by passing this result set to a call to <a>DescribeFleetAttributes</a>, <a>DescribeFleetCapacity</a>, or <a>DescribeFleetUtilization</a>.
    array FleetIds = 1;
    // Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
    string NextToken = 2;
}

message MatchedPlayerSession {
    // Unique identifier for a player
    string PlayerId = 1;
    // Unique identifier for a player session
    string PlayerSessionId = 2;
}

repeated MatchedPlayerSession MatchedPlayerSessionList = 1



message MatchmakingConfiguration {
    // Flag that determines whether or not a match that was created with this configuration must be accepted by the matched players. To require acceptance, set to TRUE.
    boolean AcceptanceRequired = 1;
    // Length of time (in seconds) to wait for players to accept a proposed match. If any player rejects the match or fails to accept before the timeout, the ticket continues to look for an acceptable match.
    integer AcceptanceTimeoutSeconds = 2;
    // Number of player slots in a match to keep open for future players. For example, if the configuration's rule set specifies a match for a single 12-person team, and the additional player count is set to 2, only 10 players are selected for the match.
    integer AdditionalPlayerCount = 3;
    // Time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
    string CreationTime = 4;
    // Information to attached to all events related to the matchmaking configuration.
    string CustomEventData = 5;
    // Descriptive label that is associated with matchmaking configuration.
    string Description = 6;
    // Set of developer-defined properties for a game session, formatted as a set of type:value pairs. These properties are included in the <a>GameSession</a> object, which is passed to the game server with a request to start a new game session (see <a href="http://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession">Start a Game Session</a>). This information is added to the new <a>GameSession</a> object that is created for a successful match.
    array GameProperties = 7;
    // Set of developer-defined game session properties, formatted as a single string value. This data is included in the <a>GameSession</a> object, which is passed to the game server with a request to start a new game session (see <a href="http://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession">Start a Game Session</a>). This information is added to the new <a>GameSession</a> object that is created for a successful match.
    string GameSessionData = 8;
    // Amazon Resource Name (<a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a game session queue and uniquely identifies it. Format is <code>arn:aws:gamelift:&lt;region&gt;::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912</code>. These queues are used when placing game sessions for matches that are created with this matchmaking configuration. Queues can be located in any region.
    array GameSessionQueueArns = 9;
    // Unique identifier for a matchmaking configuration. This name is used to identify the configuration associated with a matchmaking request or ticket.
    string Name = 10;
    // SNS topic ARN that is set up to receive matchmaking notifications.
    string NotificationTarget = 11;
    // Maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out. Requests that time out can be resubmitted as needed.
    integer RequestTimeoutSeconds = 12;
    // Unique identifier for a matchmaking rule set to use with this configuration. A matchmaking configuration can only use rule sets that are defined in the same region.
    string RuleSetName = 13;
}

repeated MatchmakingConfiguration MatchmakingConfigurationList = 1

enum MatchmakingConfigurationStatu {
    CANCELLED = 0;
    COMPLETED = 1;
    FAILED = 2;
    PLACING = 3;
    QUEUED = 4;
    REQUIRES_ACCEPTANCE = 5;
    SEARCHING = 6;
    TIMED_OUT = 7;
}

repeated string MatchmakingIdList = 1



repeated string MatchmakingPlayerIdList = 1



message MatchmakingRuleSet {
    // Time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
    string CreationTime = 1;
    // Collection of matchmaking rules, formatted as a JSON string. (Note that comments14 are not allowed in JSON, but most elements support a description field.)
    string RuleSetBody = 2;
    // Unique identifier for a matchmaking rule set
    string RuleSetName = 3;
}

repeated MatchmakingRuleSet MatchmakingRuleSetList = 1

repeated string MatchmakingRuleSetNameList = 1

message MatchmakingTicket {
    // Name of the <a>MatchmakingConfiguration</a> that is used with this ticket. Matchmaking configurations determine how players are grouped into a match and how a new game session is created for the match.
    string ConfigurationName = 1;
    // Time stamp indicating when the matchmaking request stopped being processed due to successful completion, timeout, or cancellation. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
    string EndTime = 2;
    // Average amount of time (in seconds) that players are currently waiting for a match. If there is not enough recent data, this property may be empty.
    integer EstimatedWaitTime = 3;
    // Identifier and connection information of the game session created for the match. This information is added to the ticket only after the matchmaking request has been successfully completed.
    GameSessionConnectionInfo GameSessionConnectionInfo = 4;
    // A set of <code>Player</code> objects, each representing a player to find matches for. Players are identified by a unique player ID and may include latency data for use during matchmaking. If the ticket is in status <code>COMPLETED</code>, the <code>Player</code> objects include the team the players were assigned to in the resulting match.
    array Players = 5;
    // Time stamp indicating when this matchmaking request was received. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
    string StartTime = 6;
    // <p>Current status of the matchmaking request.</p> <ul> <li> <p> <b>QUEUED</b> -- The matchmaking request has been received and is currently waiting to be processed.</p> </li> <li> <p> <b>SEARCHING</b> -- The matchmaking request is currently being processed. </p> </li> <li> <p> <b>REQUIRES_ACCEPTANCE</b> -- A match has been proposed and the players must accept the match (see <a>AcceptMatch</a>). This status is used only with requests that use a matchmaking configuration with a player acceptance requirement.</p> </li> <li> <p> <b>PLACING</b> -- The FlexMatch engine has matched players and is in the process of placing a new game session for the match.</p> </li> <li> <p> <b>COMPLETED</b> -- Players have been matched and a game session is ready to host the players. A ticket in this state contains the necessary connection information for players.</p> </li> <li> <p> <b>FAILED</b> -- The matchmaking request was not completed. Tickets with players who fail to accept a proposed match are placed in <code>FAILED</code> status; new matchmaking requests can be submitted for these players.</p> </li> <li> <p> <b>CANCELLED</b> -- The matchmaking request was canceled with a call to <a>StopMatchmaking</a>.</p> </li> <li> <p> <b>TIMED_OUT</b> -- The matchmaking request was not completed within the duration specified in the matchmaking configuration. Matchmaking requests that time out can be resubmitted.</p> </li> </ul>
    MatchmakingConfigurationStatus Status = 7;
    // Additional information about the current status.
    string StatusMessage = 8;
    // Code to explain the current status. For example, a status reason may indicate when a ticket has returned to <code>SEARCHING</code> status after a proposed match fails to receive player acceptances.
    string StatusReason = 9;
    // Unique identifier for a matchmaking ticket.
    string TicketId = 10;
}

repeated MatchmakingTicket MatchmakingTicketList = 1





repeated string MetricGroupList = 1

enum MetricName {
    ACTIVATINGGAMESESSIONS = 0;
    ACTIVEGAMESESSIONS = 1;
    ACTIVEINSTANCES = 2;
    AVAILABLEGAMESESSIONS = 3;
    AVAILABLEPLAYERSESSIONS = 4;
    CURRENTPLAYERSESSIONS = 5;
    IDLEINSTANCES = 6;
    PERCENTAVAILABLEGAMESESSIONS = 7;
    PERCENTIDLEINSTANCES = 8;
    QUEUEDEPTH = 9;
    WAITTIME = 10;
}

message NotFoundException {
    string Message = 1;
}

enum OperatingSystem {
    WINDOWS_2012 = 0;
    AMAZON_LINUX = 1;
}

message PlacedPlayerSession {
    // Unique identifier for a player that is associated with this player session.
    string PlayerId = 1;
    // Unique identifier for a player session.
    string PlayerSessionId = 2;
}

repeated PlacedPlayerSession PlacedPlayerSessionList = 1

message Player {
    // <p>Set of values, expressed in milliseconds, indicating the amount of latency that a player experiences when connected to AWS regions. If this property is present, FlexMatch considers placing the match only in regions for which latency is reported. </p> <p>If a matchmaker has a rule that evaluates player latency, players must report latency in order to be matched. If no latency is reported in this scenario, FlexMatch assumes that no regions are available to the player and the ticket is not matchable. </p>
    array LatencyInMs = 1;
    // Collection of name:value pairs containing player information for use in matchmaking. Player attribute names need to match <i>playerAttributes</i> names in the rule set being used. Example: <code>"PlayerAttributes": {"skill": {"N": "23"}, "gameMode": {"S": "deathmatch"}}</code>.
    array PlayerAttributes = 2;
    // Unique identifier for a player
    string PlayerId = 3;
    // Name of the team that the player is assigned to in a match. Team names are defined in a matchmaking rule set.
    string Team = 4;
}

message PlayerAttributeMap {
    string key = 1;
    AttributeValue value = 2;
}
repeated PlayerAttributeMap PlayerAttributeMap = 1



message PlayerDataMap {
    string key = 1;
    string value = 2;
}
repeated PlayerDataMap PlayerDataMap = 1

repeated string PlayerIdList = 1



message PlayerLatency {
    // Amount of time that represents the time lag experienced by the player when connected to the specified region.
    number LatencyInMilliseconds = 1;
    // Unique identifier for a player associated with the latency data.
    string PlayerId = 2;
    // Name of the region that is associated with the latency value.
    string RegionIdentifier = 3;
}

repeated PlayerLatency PlayerLatencyList = 1

message PlayerLatencyPolicy {
    // The maximum latency value that is allowed for any player, in milliseconds. All policies must have a value set for this property.
    integer MaximumIndividualPlayerLatencyMilliseconds = 1;
    // The length of time, in seconds, that the policy is enforced while placing a new game session. A null value for this property means that the policy is enforced until the queue times out.
    integer PolicyDurationSeconds = 2;
}

repeated PlayerLatencyPolicy PlayerLatencyPolicyList = 1

repeated Player PlayerList = 1

message PlayerSession {
    // Time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
    string CreationTime = 1;
    // Unique identifier for a fleet that the player's game session is running on.
    string FleetId = 2;
    // Unique identifier for the game session that the player session is connected to.
    string GameSessionId = 3;
    // IP address of the game session. To connect to a Amazon GameLift game server, an app needs both the IP address and port number.
    string IpAddress = 4;
    // Developer-defined information related to a player. Amazon GameLift does not use this data, so it can be formatted as needed for use in the game.
    string PlayerData = 5;
    // Unique identifier for a player that is associated with this player session.
    string PlayerId = 6;
    // Unique identifier for a player session.
    string PlayerSessionId = 7;
    // Port number for the game session. To connect to a Amazon GameLift server process, an app needs both the IP address and port number.
    integer Port = 8;
    // <p>Current status of the player session.</p> <p>Possible player session statuses include the following:</p> <ul> <li> <p> <b>RESERVED</b> -- The player session request has been received, but the player has not yet connected to the server process and/or been validated. </p> </li> <li> <p> <b>ACTIVE</b> -- The player has been validated by the server process and is currently connected.</p> </li> <li> <p> <b>COMPLETED</b> -- The player connection has been dropped.</p> </li> <li> <p> <b>TIMEDOUT</b> -- A player session request was received, but the player did not connect and/or was not validated within the timeout limit (60 seconds).</p> </li> </ul>
    PlayerSessionStatus Status = 9;
    // Time stamp indicating when this data object was terminated. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
    string TerminationTime = 10;
}

enum PlayerSessionCreationPolicy {
    ACCEPT_ALL = 0;
    DENY_ALL = 1;
}



repeated PlayerSession PlayerSessionList = 1

enum PlayerSessionStatu {
    RESERVED = 0;
    ACTIVE = 1;
    COMPLETED = 2;
    TIMEDOUT = 3;
}

enum ProtectionPolicy {
    NOPROTECTION = 0;
    FULLPROTECTION = 1;
}

message PutScalingPolicyInput {
    // Comparison operator to use when measuring the metric against the threshold value.
    ComparisonOperatorType ComparisonOperator = 1;
    // Length of time (in minutes) the metric must be at or beyond the threshold before a scaling event is triggered.
    integer EvaluationPeriods = 2;
    // Unique identifier for a fleet to apply this policy to.
    string FleetId = 3;
    // <p>Name of the Amazon GameLift-defined metric that is used to trigger an adjustment.</p> <ul> <li> <p> <b>ActivatingGameSessions</b> -- number of game sessions in the process of being created (game session status = <code>ACTIVATING</code>).</p> </li> <li> <p> <b>ActiveGameSessions</b> -- number of game sessions currently running (game session status = <code>ACTIVE</code>).</p> </li> <li> <p> <b>CurrentPlayerSessions</b> -- number of active or reserved player sessions (player session status = <code>ACTIVE</code> or <code>RESERVED</code>). </p> </li> <li> <p> <b>AvailablePlayerSessions</b> -- number of player session slots currently available in active game sessions across the fleet, calculated by subtracting a game session's current player session count from its maximum player session count. This number includes game sessions that are not currently accepting players (game session <code>PlayerSessionCreationPolicy</code> = <code>DENY_ALL</code>).</p> </li> <li> <p> <b>ActiveInstances</b> -- number of instances currently running a game session.</p> </li> <li> <p> <b>IdleInstances</b> -- number of instances not currently running a game session.</p> </li> </ul>
    MetricName MetricName = 4;
    // Descriptive label that is associated with a scaling policy. Policy names do not need to be unique. A fleet can have only one scaling policy with the same name.
    string Name = 5;
    // Amount of adjustment to make, based on the scaling adjustment type.
    integer ScalingAdjustment = 6;
    // <p>Type of adjustment to make to a fleet's instance count (see <a>FleetCapacity</a>):</p> <ul> <li> <p> <b>ChangeInCapacity</b> -- add (or subtract) the scaling adjustment value from the current instance count. Positive values scale up while negative values scale down.</p> </li> <li> <p> <b>ExactCapacity</b> -- set the instance count to the scaling adjustment value.</p> </li> <li> <p> <b>PercentChangeInCapacity</b> -- increase or reduce the current instance count by the scaling adjustment, read as a percentage. Positive values scale up while negative values scale down; for example, a value of "-10" scales the fleet down by 10%.</p> </li> </ul>
    ScalingAdjustmentType ScalingAdjustmentType = 7;
    // Metric value used to trigger a scaling event.
    number Threshold = 8;
}

message PutScalingPolicyOutput {
    // Descriptive label that is associated with a scaling policy. Policy names do not need to be unique.
    string Name = 1;
}

repeated string QueueArnsList = 1

message RequestUploadCredentialsInput {
    // Unique identifier for a build to get credentials for.
    string BuildId = 1;
}

message RequestUploadCredentialsOutput {
    // Amazon S3 path and key, identifying where the game build files are stored.
    S3Location StorageLocation = 1;
    // AWS credentials required when uploading a game build to the storage location. These credentials have a limited lifespan and are valid only for the build they were issued for.
    AwsCredentials UploadCredentials = 2;
}

message ResolveAliasInput {
    // Unique identifier for the alias you want to resolve.
    string AliasId = 1;
}

message ResolveAliasOutput {
    // Fleet identifier that is associated with the requested alias.
    string FleetId = 1;
}

message ResourceCreationLimitPolicy {
    // Maximum number of game sessions that an individual can create during the policy period.
    integer NewGameSessionsPerCreator = 1;
    // Time span used in evaluating the resource creation limit policy.
    integer PolicyPeriodInMinutes = 2;
}

message RoutingStrategy {
    // Unique identifier for a fleet that the alias points to.
    string FleetId = 1;
    // Message text to be used with a terminal routing strategy.
    string Message = 2;
    // <p>Type of routing strategy.</p> <p>Possible routing types include the following:</p> <ul> <li> <p> <b>SIMPLE</b> -- The alias resolves to one specific fleet. Use this type when routing to active fleets.</p> </li> <li> <p> <b>TERMINAL</b> -- The alias does not resolve to a fleet but instead can be used to display a message to the user. A terminal alias throws a TerminalRoutingStrategyException with the <a>RoutingStrategy</a> message embedded.</p> </li> </ul>
    RoutingStrategyType Type = 3;
}

enum RoutingStrategyType {
    SIMPLE = 0;
    TERMINAL = 1;
}

message RuntimeConfiguration {
    // Maximum amount of time (in seconds) that a game session can remain in status <code>ACTIVATING</code>. If the game session is not active before the timeout, activation is terminated and the game session status is changed to <code>TERMINATED</code>.
    integer GameSessionActivationTimeoutSeconds = 1;
    // Maximum number of game sessions with status <code>ACTIVATING</code> to allow on an instance simultaneously. This setting limits the amount of instance resources that can be used for new game activations at any one time.
    integer MaxConcurrentGameSessionActivations = 2;
    // Collection of server process configurations that describe which server processes to run on each instance in a fleet.
    array ServerProcesses = 3;
}

message S3Location {
    // Amazon S3 bucket identifier. This is the name of your S3 bucket.
    string Bucket = 1;
    // Name of the zip file containing your build files.
    string Key = 2;
    // Amazon Resource Name (<a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) for the access role that allows Amazon GameLift to access your S3 bucket.
    string RoleArn = 3;
}

enum ScalingAdjustmentType {
    CHANGEINCAPACITY = 0;
    EXACTCAPACITY = 1;
    PERCENTCHANGEINCAPACITY = 2;
}

message ScalingPolicy {
    // Comparison operator to use when measuring a metric against the threshold value.
    ComparisonOperatorType ComparisonOperator = 1;
    // Length of time (in minutes) the metric must be at or beyond the threshold before a scaling event is triggered.
    integer EvaluationPeriods = 2;
    // Unique identifier for a fleet that is associated with this scaling policy.
    string FleetId = 3;
    // <p>Name of the Amazon GameLift-defined metric that is used to trigger an adjustment.</p> <ul> <li> <p> <b>ActivatingGameSessions</b> -- number of game sessions in the process of being created (game session status = <code>ACTIVATING</code>).</p> </li> <li> <p> <b>ActiveGameSessions</b> -- number of game sessions currently running (game session status = <code>ACTIVE</code>).</p> </li> <li> <p> <b>CurrentPlayerSessions</b> -- number of active or reserved player sessions (player session status = <code>ACTIVE</code> or <code>RESERVED</code>). </p> </li> <li> <p> <b>AvailablePlayerSessions</b> -- number of player session slots currently available in active game sessions across the fleet, calculated by subtracting a game session's current player session count from its maximum player session count. This number does include game sessions that are not currently accepting players (game session <code>PlayerSessionCreationPolicy</code> = <code>DENY_ALL</code>).</p> </li> <li> <p> <b>ActiveInstances</b> -- number of instances currently running a game session.</p> </li> <li> <p> <b>IdleInstances</b> -- number of instances not currently running a game session.</p> </li> </ul>
    MetricName MetricName = 4;
    // Descriptive label that is associated with a scaling policy. Policy names do not need to be unique.
    string Name = 5;
    // Amount of adjustment to make, based on the scaling adjustment type.
    integer ScalingAdjustment = 6;
    // <p>Type of adjustment to make to a fleet's instance count (see <a>FleetCapacity</a>):</p> <ul> <li> <p> <b>ChangeInCapacity</b> -- add (or subtract) the scaling adjustment value from the current instance count. Positive values scale up while negative values scale down.</p> </li> <li> <p> <b>ExactCapacity</b> -- set the instance count to the scaling adjustment value.</p> </li> <li> <p> <b>PercentChangeInCapacity</b> -- increase or reduce the current instance count by the scaling adjustment, read as a percentage. Positive values scale up while negative values scale down.</p> </li> </ul>
    ScalingAdjustmentType ScalingAdjustmentType = 7;
    // <p>Current status of the scaling policy. The scaling policy is only in force when in an <code>ACTIVE</code> status.</p> <ul> <li> <p> <b>ACTIVE</b> -- The scaling policy is currently in force.</p> </li> <li> <p> <b>UPDATE_REQUESTED</b> -- A request to update the scaling policy has been received.</p> </li> <li> <p> <b>UPDATING</b> -- A change is being made to the scaling policy.</p> </li> <li> <p> <b>DELETE_REQUESTED</b> -- A request to delete the scaling policy has been received.</p> </li> <li> <p> <b>DELETING</b> -- The scaling policy is being deleted.</p> </li> <li> <p> <b>DELETED</b> -- The scaling policy has been deleted.</p> </li> <li> <p> <b>ERROR</b> -- An error occurred in creating the policy. It should be removed and recreated.</p> </li> </ul>
    ScalingStatusType Status = 8;
    // Metric value used to trigger a scaling event.
    number Threshold = 9;
}

repeated ScalingPolicy ScalingPolicyList = 1

enum ScalingStatusType {
    ACTIVE = 0;
    UPDATE_REQUESTED = 1;
    UPDATING = 2;
    DELETE_REQUESTED = 3;
    DELETING = 4;
    DELETED = 5;
    ERROR = 6;
}

message SearchGameSessionsInput {
    // Unique identifier for an alias associated with the fleet to search for active game sessions. Each request must reference either a fleet ID or alias ID, but not both.
    string AliasId = 1;
    // <p>String containing the search criteria for the session search. If no filter expression is included, the request returns results for all game sessions in the fleet that are in <code>ACTIVE</code> status.</p> <p>A filter expression can contain one or multiple conditions. Each condition consists of the following:</p> <ul> <li> <p> <b>Operand</b> -- Name of a game session attribute. Valid values are <code>gameSessionName</code>, <code>gameSessionId</code>, <code>creationTimeMillis</code>, <code>playerSessionCount</code>, <code>maximumSessions</code>, <code>hasAvailablePlayerSessions</code>.</p> </li> <li> <p> <b>Comparator</b> -- Valid comparators are: <code>=</code>, <code>&lt;&gt;</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>. </p> </li> <li> <p> <b>Value</b> -- Value to be searched for. Values can be numbers, boolean values (true/false) or strings. String values are case sensitive, enclosed in single quotes. Special characters must be escaped. Boolean and string values can only be used with the comparators <code>=</code> and <code>&lt;&gt;</code>. For example, the following filter expression searches on <code>gameSessionName</code>: "<code>FilterExpression": "gameSessionName = 'Matt\\'s Awesome Game 1'"</code>. </p> </li> </ul> <p>To chain multiple conditions in a single expression, use the logical keywords <code>AND</code>, <code>OR</code>, and <code>NOT</code> and parentheses as needed. For example: <code>x AND y AND NOT z</code>, <code>NOT (x OR y)</code>.</p> <p>Session search evaluates conditions from left to right using the following precedence rules:</p> <ol> <li> <p> <code>=</code>, <code>&lt;&gt;</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code> </p> </li> <li> <p>Parentheses</p> </li> <li> <p>NOT</p> </li> <li> <p>AND</p> </li> <li> <p>OR</p> </li> </ol> <p>For example, this filter expression retrieves game sessions hosting at least ten players that have an open player slot: <code>"maximumSessions&gt;=10 AND hasAvailablePlayerSessions=true"</code>. </p>
    string FilterExpression = 2;
    // Unique identifier for a fleet to search for active game sessions. Each request must reference either a fleet ID or alias ID, but not both.
    string FleetId = 3;
    // Maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages. The maximum number of results returned is 20, even if this value is not set or is set higher than 20.
    integer Limit = 4;
    // Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To start at the beginning of the result set, do not specify a value.
    string NextToken = 5;
    // <p>Instructions on how to sort the search results. If no sort expression is included, the request returns results in random order. A sort expression consists of the following elements:</p> <ul> <li> <p> <b>Operand</b> -- Name of a game session attribute. Valid values are <code>gameSessionName</code>, <code>gameSessionId</code>, <code>creationTimeMillis</code>, <code>playerSessionCount</code>, <code>maximumSessions</code>, <code>hasAvailablePlayerSessions</code>.</p> </li> <li> <p> <b>Order</b> -- Valid sort orders are <code>ASC</code> (ascending) and <code>DESC</code> (descending).</p> </li> </ul> <p>For example, this sort expression returns the oldest active sessions first: <code>"SortExpression": "creationTimeMillis ASC"</code>. Results with a null value for the sort operand are returned at the end of the list.</p>
    string SortExpression = 6;
}

message SearchGameSessionsOutput {
    // Collection of objects containing game session properties for each session matching the request.
    array GameSessions = 1;
    // Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
    string NextToken = 2;
}

message ServerProcess {
    // Number of server processes using this configuration to run concurrently on an instance.
    integer ConcurrentExecutions = 1;
    // Location of the server executable in a game build. All game builds are installed on instances at the root : for Windows instances <code>C:\game</code>, and for Linux instances <code>/local/game</code>. A Windows game build with an executable file located at <code>MyGame\latest\server.exe</code> must have a launch path of "<code>C:\game\MyGame\latest\server.exe</code>". A Linux game build with an executable file located at <code>MyGame/latest/server.exe</code> must have a launch path of "<code>/local/game/MyGame/latest/server.exe</code>".
    string LaunchPath = 2;
    // Optional list of parameters to pass to the server executable on launch.
    string Parameters = 3;
}

repeated ServerProcess ServerProcessList = 1



message StartGameSessionPlacementInput {
    // Set of information on each player to create a player session for.
    array DesiredPlayerSessions = 1;
    // Set of developer-defined properties for a game session, formatted as a set of type:value pairs. These properties are included in the <a>GameSession</a> object, which is passed to the game server with a request to start a new game session (see <a href="http://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession">Start a Game Session</a>).
    array GameProperties = 2;
    // Set of developer-defined game session properties, formatted as a single string value. This data is included in the <a>GameSession</a> object, which is passed to the game server with a request to start a new game session (see <a href="http://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession">Start a Game Session</a>).
    string GameSessionData = 3;
    // Descriptive label that is associated with a game session. Session names do not need to be unique.
    string GameSessionName = 4;
    // Name of the queue to use to place the new game session.
    string GameSessionQueueName = 5;
    // Maximum number of players that can be connected simultaneously to the game session.
    integer MaximumPlayerSessionCount = 6;
    // Unique identifier to assign to the new game session placement. This value is developer-defined. The value must be unique across all regions and cannot be reused unless you are resubmitting a canceled or timed-out placement request.
    string PlacementId = 7;
    // Set of values, expressed in milliseconds, indicating the amount of latency that a player experiences when connected to AWS regions. This information is used to try to place the new game session where it can offer the best possible gameplay experience for the players.
    array PlayerLatencies = 8;
}

message StartGameSessionPlacementOutput {
    // Object that describes the newly created game session placement. This object includes all the information provided in the request, as well as start/end time stamps and placement status.
    GameSessionPlacement GameSessionPlacement = 1;
}

message StartMatchmakingInput {
    // Name of the matchmaking configuration to use for this request. Matchmaking configurations must exist in the same region as this request.
    string ConfigurationName = 1;
    // Information on each player to be matched. This information must include a player ID, and may contain player attributes and latency data to be used in the matchmaking process. After a successful match, <code>Player</code> objects contain the name of the team the player is assigned to.
    array Players = 2;
    // Unique identifier for a matchmaking ticket. Use this identifier to track the matchmaking ticket status and retrieve match results.
    string TicketId = 3;
}

message StartMatchmakingOutput {
    // Ticket representing the matchmaking request. This object include the information included in the request, ticket status, and match results as generated during the matchmaking process.
    MatchmakingTicket MatchmakingTicket = 1;
}

message StopGameSessionPlacementInput {
    // Unique identifier for a game session placement to cancel.
    string PlacementId = 1;
}

message StopGameSessionPlacementOutput {
    // Object that describes the canceled game session placement, with <code>CANCELLED</code> status and an end time stamp.
    GameSessionPlacement GameSessionPlacement = 1;
}

message StopMatchmakingInput {
    // Unique identifier for a matchmaking ticket.
    string TicketId = 1;
}

message StopMatchmakingOutput {
}

message StringDoubleMap {
    string key = 1;
    number value = 2;
}
repeated StringDoubleMap StringDoubleMap = 1

repeated string StringList = 1



message TerminalRoutingStrategyException {
    string Message = 1;
}

message UnauthorizedException {
    string Message = 1;
}

message UnsupportedRegionException {
    string Message = 1;
}

message UpdateAliasInput {
    // Unique identifier for a fleet alias. Specify the alias you want to update.
    string AliasId = 1;
    // Human-readable description of an alias.
    string Description = 2;
    // Descriptive label that is associated with an alias. Alias names do not need to be unique.
    string Name = 3;
    // Object that specifies the fleet and routing type to use for the alias.
    RoutingStrategy RoutingStrategy = 4;
}

message UpdateAliasOutput {
    // Object that contains the updated alias configuration.
    Alias Alias = 1;
}

message UpdateBuildInput {
    // Unique identifier for a build to update.
    string BuildId = 1;
    // Descriptive label that is associated with a build. Build names do not need to be unique.
    string Name = 2;
    // Version that is associated with this build. Version strings do not need to be unique.
    string Version = 3;
}

message UpdateBuildOutput {
    // Object that contains the updated build record.
    Build Build = 1;
}

message UpdateFleetAttributesInput {
    // Human-readable description of a fleet.
    string Description = 1;
    // Unique identifier for a fleet to update attribute metadata for.
    string FleetId = 2;
    // Names of metric groups to include this fleet in. Amazon CloudWatch uses a fleet metric group is to aggregate metrics from multiple fleets. Use an existing metric group name to add this fleet to the group. Or use a new name to create a new metric group. A fleet can only be included in one metric group at a time.
    array MetricGroups = 3;
    // Descriptive label that is associated with a fleet. Fleet names do not need to be unique.
    string Name = 4;
    // <p>Game session protection policy to apply to all new instances created in this fleet. Instances that already exist are not affected. You can set protection for individual instances using <a>UpdateGameSession</a>.</p> <ul> <li> <p> <b>NoProtection</b> -- The game session can be terminated during a scale-down event.</p> </li> <li> <p> <b>FullProtection</b> -- If the game session is in an <code>ACTIVE</code> status, it cannot be terminated during a scale-down event.</p> </li> </ul>
    ProtectionPolicy NewGameSessionProtectionPolicy = 5;
    // Policy that limits the number of game sessions an individual player can create over a span of time.
    ResourceCreationLimitPolicy ResourceCreationLimitPolicy = 6;
}

message UpdateFleetAttributesOutput {
    // Unique identifier for a fleet that was updated.
    string FleetId = 1;
}

message UpdateFleetCapacityInput {
    // Number of EC2 instances you want this fleet to host.
    integer DesiredInstances = 1;
    // Unique identifier for a fleet to update capacity for.
    string FleetId = 2;
    // Maximum value allowed for the fleet's instance count. Default if not set is 1.
    integer MaxSize = 3;
    // Minimum value allowed for the fleet's instance count. Default if not set is 0.
    integer MinSize = 4;
}

message UpdateFleetCapacityOutput {
    // Unique identifier for a fleet that was updated.
    string FleetId = 1;
}

message UpdateFleetPortSettingsInput {
    // Unique identifier for a fleet to update port settings for.
    string FleetId = 1;
    // Collection of port settings to be added to the fleet record.
    array InboundPermissionAuthorizations = 2;
    // Collection of port settings to be removed from the fleet record.
    array InboundPermissionRevocations = 3;
}

message UpdateFleetPortSettingsOutput {
    // Unique identifier for a fleet that was updated.
    string FleetId = 1;
}

message UpdateGameSessionInput {
    // Unique identifier for the game session to update.
    string GameSessionId = 1;
    // Maximum number of players that can be connected simultaneously to the game session.
    integer MaximumPlayerSessionCount = 2;
    // Descriptive label that is associated with a game session. Session names do not need to be unique.
    string Name = 3;
    // Policy determining whether or not the game session accepts new players.
    PlayerSessionCreationPolicy PlayerSessionCreationPolicy = 4;
    // <p>Game session protection policy to apply to this game session only.</p> <ul> <li> <p> <b>NoProtection</b> -- The game session can be terminated during a scale-down event.</p> </li> <li> <p> <b>FullProtection</b> -- If the game session is in an <code>ACTIVE</code> status, it cannot be terminated during a scale-down event.</p> </li> </ul>
    ProtectionPolicy ProtectionPolicy = 5;
}

message UpdateGameSessionOutput {
    // Object that contains the updated game session metadata.
    GameSession GameSession = 1;
}

message UpdateGameSessionQueueInput {
    // List of fleets that can be used to fulfill game session placement requests in the queue. Fleets are identified by either a fleet ARN or a fleet alias ARN. Destinations are listed in default preference order. When updating this list, provide a complete list of destinations.
    array Destinations = 1;
    // Descriptive label that is associated with game session queue. Queue names must be unique within each region.
    string Name = 2;
    // Collection of latency policies to apply when processing game sessions placement requests with player latency information. Multiple policies are evaluated in order of the maximum latency value, starting with the lowest latency values. With just one policy, it is enforced at the start of the game session placement for the duration period. With multiple policies, each policy is enforced consecutively for its duration period. For example, a queue might enforce a 60-second policy followed by a 120-second policy, and then no policy for the remainder of the placement. When updating policies, provide a complete collection of policies.
    array PlayerLatencyPolicies = 3;
    // Maximum time, in seconds, that a new game session placement request remains in the queue. When a request exceeds this time, the game session placement changes to a <code>TIMED_OUT</code> status.
    integer TimeoutInSeconds = 4;
}

message UpdateGameSessionQueueOutput {
    // Object that describes the newly updated game session queue.
    GameSessionQueue GameSessionQueue = 1;
}

message UpdateMatchmakingConfigurationInput {
    // Flag that determines whether or not a match that was created with this configuration must be accepted by the matched players. To require acceptance, set to TRUE.
    boolean AcceptanceRequired = 1;
    // Length of time (in seconds) to wait for players to accept a proposed match. If any player rejects the match or fails to accept before the timeout, the ticket continues to look for an acceptable match.
    integer AcceptanceTimeoutSeconds = 2;
    // Number of player slots in a match to keep open for future players. For example, if the configuration's rule set specifies a match for a single 12-person team, and the additional player count is set to 2, only 10 players are selected for the match.
    integer AdditionalPlayerCount = 3;
    // Information to attached to all events related to the matchmaking configuration.
    string CustomEventData = 4;
    // Descriptive label that is associated with matchmaking configuration.
    string Description = 5;
    // Set of developer-defined properties for a game session, formatted as a set of type:value pairs. These properties are included in the <a>GameSession</a> object, which is passed to the game server with a request to start a new game session (see <a href="http://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession">Start a Game Session</a>). This information is added to the new <a>GameSession</a> object that is created for a successful match.
    array GameProperties = 6;
    // Set of developer-defined game session properties, formatted as a single string value. This data is included in the <a>GameSession</a> object, which is passed to the game server with a request to start a new game session (see <a href="http://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession">Start a Game Session</a>). This information is added to the new <a>GameSession</a> object that is created for a successful match.
    string GameSessionData = 7;
    // Amazon Resource Name (<a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a game session queue and uniquely identifies it. Format is <code>arn:aws:gamelift:&lt;region&gt;::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912</code>. These queues are used when placing game sessions for matches that are created with this matchmaking configuration. Queues can be located in any region.
    array GameSessionQueueArns = 8;
    // Unique identifier for a matchmaking configuration to update.
    string Name = 9;
    // SNS topic ARN that is set up to receive matchmaking notifications. See <a href="http://docs.aws.amazon.com/gamelift/latest/developerguide/match-notification.html"> Setting up Notifications for Matchmaking</a> for more information.
    string NotificationTarget = 10;
    // Maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out. Requests that time out can be resubmitted as needed.
    integer RequestTimeoutSeconds = 11;
    // Unique identifier for a matchmaking rule set to use with this configuration. A matchmaking configuration can only use rule sets that are defined in the same region.
    string RuleSetName = 12;
}

message UpdateMatchmakingConfigurationOutput {
    // Object that describes the updated matchmaking configuration.
    MatchmakingConfiguration Configuration = 1;
}

message UpdateRuntimeConfigurationInput {
    // Unique identifier for a fleet to update run-time configuration for.
    string FleetId = 1;
    // Instructions for launching server processes on each instance in the fleet. The run-time configuration for a fleet has a collection of server process configurations, one for each type of server process to run on an instance. A server process configuration specifies the location of the server executable, launch parameters, and the number of concurrent processes with that configuration to maintain on each instance.
    RuntimeConfiguration RuntimeConfiguration = 2;
}

message UpdateRuntimeConfigurationOutput {
    // The run-time configuration currently in force. If the update was successful, this object matches the one in the request.
    RuntimeConfiguration RuntimeConfiguration = 1;
}

message ValidateMatchmakingRuleSetInput {
    // Collection of matchmaking rules to validate, formatted as a JSON string.
    string RuleSetBody = 1;
}

message ValidateMatchmakingRuleSetOutput {
    // Response indicating whether or not the rule set is valid.
    boolean Valid = 1;
}

message VpcPeeringAuthorization {
    // Time stamp indicating when this authorization was issued. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
    string CreationTime = 1;
    // Time stamp indicating when this authorization expires (24 hours after issuance). Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
    string ExpirationTime = 2;
    // Unique identifier for the AWS account that you use to manage your Amazon GameLift fleet. You can find your Account ID in the AWS Management Console under account settings.
    string GameLiftAwsAccountId = 3;
    // <p/>
    string PeerVpcAwsAccountId = 4;
    // Unique identifier for a VPC with resources to be accessed by your Amazon GameLift fleet. The VPC must be in the same region where your fleet is deployed. To get VPC information, including IDs, use the Virtual Private Cloud service tools, including the VPC Dashboard in the AWS Management Console.
    string PeerVpcId = 5;
}

repeated VpcPeeringAuthorization VpcPeeringAuthorizationList = 1

message VpcPeeringConnection {
    // Unique identifier for a fleet. This ID determines the ID of the Amazon GameLift VPC for your fleet.
    string FleetId = 1;
    // Unique identifier for the VPC that contains the Amazon GameLift fleet for this connection. This VPC is managed by Amazon GameLift and does not appear in your AWS account.
    string GameLiftVpcId = 2;
    // CIDR block of IPv4 addresses assigned to the VPC peering connection for the GameLift VPC. The peered VPC also has an IPv4 CIDR block associated with it; these blocks cannot overlap or the peering connection cannot be created.
    string IpV4CidrBlock = 3;
    // Unique identifier for a VPC with resources to be accessed by your Amazon GameLift fleet. The VPC must be in the same region where your fleet is deployed. To get VPC information, including IDs, use the Virtual Private Cloud service tools, including the VPC Dashboard in the AWS Management Console.
    string PeerVpcId = 4;
    // Object that contains status information about the connection. Status indicates if a connection is pending, successful, or failed.
    VpcPeeringConnectionStatus Status = 5;
    // Unique identifier that is automatically assigned to the connection record. This ID is referenced in VPC peering connection events, and is used when deleting a connection with <a>DeleteVpcPeeringConnection</a>.
    string VpcPeeringConnectionId = 6;
}

repeated VpcPeeringConnection VpcPeeringConnectionList = 1

message VpcPeeringConnectionStatus {
    // Code indicating the status of a VPC peering connection.
    string Code = 1;
    // Additional messaging associated with the connection status.
    string Message = 2;
}

service AmazonGameLiftService {
    // <p>Registers a player's acceptance or rejection of a proposed FlexMatch match. A matchmaking configuration may require player acceptance; if so, then matches built with that configuration cannot be completed unless all players accept the proposed match within a specified time limit. </p> <p>When FlexMatch builds a match, all the matchmaking tickets involved in the proposed match are placed into status <code>REQUIRES_ACCEPTANCE</code>. This is a trigger for your game to get acceptance from all players in the ticket. Acceptances are only valid for tickets when they are in this status; all other acceptances result in an error.</p> <p>To register acceptance, specify the ticket ID, a response, and one or more players. Once all players have registered acceptance, the matchmaking tickets advance to status <code>PLACING</code>, where a new game session is created for the match. </p> <p>If any player rejects the match, or if acceptances are not received before a specified timeout, the proposed match is dropped. The matchmaking tickets are then handled in one of two ways: For tickets where all players accepted the match, the ticket status is returned to <code>SEARCHING</code> to find a new match. For tickets where one or more players failed to accept the match, the ticket status is set to <code>FAILED</code>, and processing is terminated. A new matchmaking request for these players can be submitted as needed. </p> <p>Matchmaking-related operations include:</p> <ul> <li> <p> <a>StartMatchmaking</a> </p> </li> <li> <p> <a>DescribeMatchmaking</a> </p> </li> <li> <p> <a>StopMatchmaking</a> </p> </li> <li> <p> <a>AcceptMatch</a> </p> </li> </ul>
    rpc Post(PostRequest) returns (AcceptMatchOutput) {
      option (google.api.http) = {
        post: "//"
        body: "body"
      };
    }
    // <p>Creates an alias for a fleet. In most situations, you can use an alias ID in place of a fleet ID. By using a fleet alias instead of a specific fleet ID, you can switch gameplay and players to a new fleet without changing your game client or other game components. For example, for games in production, using an alias allows you to seamlessly redirect your player base to a new game server update. </p> <p>Amazon GameLift supports two types of routing strategies for aliases: simple and terminal. A simple alias points to an active fleet. A terminal alias is used to display messaging or link to a URL instead of routing players to an active fleet. For example, you might use a terminal alias when a game version is no longer supported and you want to direct players to an upgrade site. </p> <p>To create a fleet alias, specify an alias name, routing strategy, and optional description. Each simple alias can point to only one fleet, but a fleet can have multiple aliases. If successful, a new alias record is returned, including an alias ID, which you can reference when creating a game session. You can reassign an alias to another fleet by calling <code>UpdateAlias</code>.</p> <p>Alias-related operations include:</p> <ul> <li> <p> <a>CreateAlias</a> </p> </li> <li> <p> <a>ListAliases</a> </p> </li> <li> <p> <a>DescribeAlias</a> </p> </li> <li> <p> <a>UpdateAlias</a> </p> </li> <li> <p> <a>DeleteAlias</a> </p> </li> <li> <p> <a>ResolveAlias</a> </p> </li> </ul>
    rpc Post#CreateAlias(Post#CreateAliasRequest) returns (CreateAliasOutput) {
      option (google.api.http) = {
        post: "//#CreateAlias"
        body: "body"
      };
    }
    // <p>Creates a new Amazon GameLift build from a set of game server binary files stored in an Amazon Simple Storage Service (Amazon S3) location. To use this API call, create a <code>.zip</code> file containing all of the files for the build and store it in an Amazon S3 bucket under your AWS account. For help on packaging your build files and creating a build, see <a href="http://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-build-intro.html">Uploading Your Game to Amazon GameLift</a>.</p> <important> <p>Use this API action ONLY if you are storing your game build files in an Amazon S3 bucket. To create a build using files stored locally, use the CLI command <a href="http://docs.aws.amazon.com/cli/latest/reference/gamelift/upload-build.html"> <code>upload-build</code> </a>, which uploads the build files from a file location you specify.</p> </important> <p>To create a new build using <code>CreateBuild</code>, identify the storage location and operating system of your game build. You also have the option of specifying a build name and version. If successful, this action creates a new build record with an unique build ID and in <code>INITIALIZED</code> status. Use the API call <a>DescribeBuild</a> to check the status of your build. A build must be in <code>READY</code> status before it can be used to create fleets to host your game.</p> <p>Build-related operations include:</p> <ul> <li> <p> <a>CreateBuild</a> </p> </li> <li> <p> <a>ListBuilds</a> </p> </li> <li> <p> <a>DescribeBuild</a> </p> </li> <li> <p> <a>UpdateBuild</a> </p> </li> <li> <p> <a>DeleteBuild</a> </p> </li> </ul>
    rpc Post#CreateBuild(Post#CreateBuildRequest) returns (CreateBuildOutput) {
      option (google.api.http) = {
        post: "//#CreateBuild"
        body: "body"
      };
    }
    // <p>Creates a new fleet to run your game servers. A fleet is a set of Amazon Elastic Compute Cloud (Amazon EC2) instances, each of which can run multiple server processes to host game sessions. You configure a fleet to create instances with certain hardware specifications (see <a href="http://aws.amazon.com/ec2/instance-types/">Amazon EC2 Instance Types</a> for more information), and deploy a specified game build to each instance. A newly created fleet passes through several statuses; once it reaches the <code>ACTIVE</code> status, it can begin hosting game sessions.</p> <p>To create a new fleet, you must specify the following: (1) fleet name, (2) build ID of an uploaded game build, (3) an EC2 instance type, and (4) a run-time configuration that describes which server processes to run on each instance in the fleet. (Although the run-time configuration is not a required parameter, the fleet cannot be successfully activated without it.)</p> <p>You can also configure the new fleet with the following settings:</p> <ul> <li> <p>Fleet description</p> </li> <li> <p>Access permissions for inbound traffic</p> </li> <li> <p>Fleet-wide game session protection</p> </li> <li> <p>Resource creation limit</p> </li> </ul> <p>If you use Amazon CloudWatch for metrics, you can add the new fleet to a metric group. This allows you to view aggregated metrics for a set of fleets. Once you specify a metric group, the new fleet's metrics are included in the metric group's data.</p> <p>You have the option of creating a VPC peering connection with the new fleet. For more information, see <a href="http://docs.aws.amazon.com/gamelift/latest/developerguide/vpc-peering.html">VPC Peering with Amazon GameLift Fleets</a>.</p> <p>If the CreateFleet call is successful, Amazon GameLift performs the following tasks:</p> <ul> <li> <p>Creates a fleet record and sets the status to <code>NEW</code> (followed by other statuses as the fleet is activated).</p> </li> <li> <p>Sets the fleet's target capacity to 1 (desired instances), which causes Amazon GameLift to start one new EC2 instance.</p> </li> <li> <p>Starts launching server processes on the instance. If the fleet is configured to run multiple server processes per instance, Amazon GameLift staggers each launch by a few seconds.</p> </li> <li> <p>Begins writing events to the fleet event log, which can be accessed in the Amazon GameLift console.</p> </li> <li> <p>Sets the fleet's status to <code>ACTIVE</code> as soon as one server process in the fleet is ready to host a game session.</p> </li> </ul> <p>Fleet-related operations include:</p> <ul> <li> <p> <a>CreateFleet</a> </p> </li> <li> <p> <a>ListFleets</a> </p> </li> <li> <p>Describe fleets:</p> <ul> <li> <p> <a>DescribeFleetAttributes</a> </p> </li> <li> <p> <a>DescribeFleetPortSettings</a> </p> </li> <li> <p> <a>DescribeFleetUtilization</a> </p> </li> <li> <p> <a>DescribeRuntimeConfiguration</a> </p> </li> <li> <p> <a>DescribeFleetEvents</a> </p> </li> </ul> </li> <li> <p>Update fleets:</p> <ul> <li> <p> <a>UpdateFleetAttributes</a> </p> </li> <li> <p> <a>UpdateFleetCapacity</a> </p> </li> <li> <p> <a>UpdateFleetPortSettings</a> </p> </li> <li> <p> <a>UpdateRuntimeConfiguration</a> </p> </li> </ul> </li> <li> <p>Manage fleet capacity:</p> <ul> <li> <p> <a>DescribeFleetCapacity</a> </p> </li> <li> <p> <a>UpdateFleetCapacity</a> </p> </li> <li> <p> <a>PutScalingPolicy</a> (automatic scaling)</p> </li> <li> <p> <a>DescribeScalingPolicies</a> (automatic scaling)</p> </li> <li> <p> <a>DeleteScalingPolicy</a> (automatic scaling)</p> </li> <li> <p> <a>DescribeEC2InstanceLimits</a> </p> </li> </ul> </li> <li> <p> <a>DeleteFleet</a> </p> </li> </ul>
    rpc Post#CreateFleet(Post#CreateFleetRequest) returns (CreateFleetOutput) {
      option (google.api.http) = {
        post: "//#CreateFleet"
        body: "body"
      };
    }
    // <p>Creates a multiplayer game session for players. This action creates a game session record and assigns an available server process in the specified fleet to host the game session. A fleet must have an <code>ACTIVE</code> status before a game session can be created in it.</p> <p>To create a game session, specify either fleet ID or alias ID and indicate a maximum number of players to allow in the game session. You can also provide a name and game-specific properties for this game session. If successful, a <a>GameSession</a> object is returned containing the game session properties and other settings you specified.</p> <p> <b>Idempotency tokens.</b> You can add a token that uniquely identifies game session requests. This is useful for ensuring that game session requests are idempotent. Multiple requests with the same idempotency token are processed only once; subsequent requests return the original result. All response values are the same with the exception of game session status, which may change.</p> <p> <b>Resource creation limits.</b> If you are creating a game session on a fleet with a resource creation limit policy in force, then you must specify a creator ID. Without this ID, Amazon GameLift has no way to evaluate the policy for this new game session request.</p> <p> <b>Player acceptance policy.</b> By default, newly created game sessions are open to new players. You can restrict new player access by using <a>UpdateGameSession</a> to change the game session's player session creation policy.</p> <p> <b>Game session logs.</b> Logs are retained for all active game sessions for 14 days. To access the logs, call <a>GetGameSessionLogUrl</a> to download the log files.</p> <p> <i>Available in Amazon GameLift Local.</i> </p> <p>Game-session-related operations include:</p> <ul> <li> <p> <a>CreateGameSession</a> </p> </li> <li> <p> <a>DescribeGameSessions</a> </p> </li> <li> <p> <a>DescribeGameSessionDetails</a> </p> </li> <li> <p> <a>SearchGameSessions</a> </p> </li> <li> <p> <a>UpdateGameSession</a> </p> </li> <li> <p> <a>GetGameSessionLogUrl</a> </p> </li> <li> <p>Game session placements</p> <ul> <li> <p> <a>StartGameSessionPlacement</a> </p> </li> <li> <p> <a>DescribeGameSessionPlacement</a> </p> </li> <li> <p> <a>StopGameSessionPlacement</a> </p> </li> </ul> </li> </ul>
    rpc Post#CreateGameSession(Post#CreateGameSessionRequest) returns (CreateGameSessionOutput) {
      option (google.api.http) = {
        post: "//#CreateGameSession"
        body: "body"
      };
    }
    // <p>Establishes a new queue for processing requests to place new game sessions. A queue identifies where new game sessions can be hosted -- by specifying a list of destinations (fleets or aliases) -- and how long requests can wait in the queue before timing out. You can set up a queue to try to place game sessions on fleets in multiple regions. To add placement requests to a queue, call <a>StartGameSessionPlacement</a> and reference the queue name.</p> <p> <b>Destination order.</b> When processing a request for a game session, Amazon GameLift tries each destination in order until it finds one with available resources to host the new game session. A queue's default order is determined by how destinations are listed. The default order is overridden when a game session placement request provides player latency information. Player latency information enables Amazon GameLift to prioritize destinations where players report the lowest average latency, as a result placing the new game session where the majority of players will have the best possible gameplay experience.</p> <p> <b>Player latency policies.</b> For placement requests containing player latency information, use player latency policies to protect individual players from very high latencies. With a latency cap, even when a destination can deliver a low latency for most players, the game is not placed where any individual player is reporting latency higher than a policy's maximum. A queue can have multiple latency policies, which are enforced consecutively starting with the policy with the lowest latency cap. Use multiple policies to gradually relax latency controls; for example, you might set a policy with a low latency cap for the first 60 seconds, a second policy with a higher cap for the next 60 seconds, etc. </p> <p>To create a new queue, provide a name, timeout value, a list of destinations and, if desired, a set of latency policies. If successful, a new queue object is returned.</p> <p>Queue-related operations include:</p> <ul> <li> <p> <a>CreateGameSessionQueue</a> </p> </li> <li> <p> <a>DescribeGameSessionQueues</a> </p> </li> <li> <p> <a>UpdateGameSessionQueue</a> </p> </li> <li> <p> <a>DeleteGameSessionQueue</a> </p> </li> </ul>
    rpc Post#CreateGameSessionQueue(Post#CreateGameSessionQueueRequest) returns (CreateGameSessionQueueOutput) {
      option (google.api.http) = {
        post: "//#CreateGameSessionQueue"
        body: "body"
      };
    }
    // <p>Defines a new matchmaking configuration for use with FlexMatch. A matchmaking configuration sets out guidelines for matching players and getting the matches into games. You can set up multiple matchmaking configurations to handle the scenarios needed for your game. Each matchmaking request (<a>StartMatchmaking</a>) specifies a configuration for the match and provides player attributes to support the configuration being used. </p> <p>To create a matchmaking configuration, at a minimum you must specify the following: configuration name; a rule set that governs how to evaluate players and find acceptable matches; a game session queue to use when placing a new game session for the match; and the maximum time allowed for a matchmaking attempt.</p> <p> <b>Player acceptance</b> -- In each configuration, you have the option to require that all players accept participation in a proposed match. To enable this feature, set <i>AcceptanceRequired</i> to true and specify a time limit for player acceptance. Players have the option to accept or reject a proposed match, and a match does not move ahead to game session placement unless all matched players accept. </p> <p> <b>Matchmaking status notification</b> -- There are two ways to track the progress of matchmaking tickets: (1) polling ticket status with <a>DescribeMatchmaking</a>; or (2) receiving notifications with Amazon Simple Notification Service (SNS). To use notifications, you first need to set up an SNS topic to receive the notifications, and provide the topic ARN in the matchmaking configuration (see <a href="http://docs.aws.amazon.com/gamelift/latest/developerguide/match-notification.html"> Setting up Notifications for Matchmaking</a>). Since notifications promise only "best effort" delivery, we recommend calling <code>DescribeMatchmaking</code> if no notifications are received within 30 seconds.</p> <p>Operations related to match configurations and rule sets include:</p> <ul> <li> <p> <a>CreateMatchmakingConfiguration</a> </p> </li> <li> <p> <a>DescribeMatchmakingConfigurations</a> </p> </li> <li> <p> <a>UpdateMatchmakingConfiguration</a> </p> </li> <li> <p> <a>DeleteMatchmakingConfiguration</a> </p> </li> <li> <p> <a>CreateMatchmakingRuleSet</a> </p> </li> <li> <p> <a>DescribeMatchmakingRuleSets</a> </p> </li> <li> <p> <a>ValidateMatchmakingRuleSet</a> </p> </li> </ul>
    rpc Post#CreateMatchmakingConfiguration(Post#CreateMatchmakingConfigurationRequest) returns (CreateMatchmakingConfigurationOutput) {
      option (google.api.http) = {
        post: "//#CreateMatchmakingConfiguration"
        body: "body"
      };
    }
    // <p>Creates a new rule set for FlexMatch matchmaking. A rule set describes the type of match to create, such as the number and size of teams, and sets the parameters for acceptable player matches, such as minimum skill level or character type. Rule sets are used in matchmaking configurations, which define how matchmaking requests are handled. Each <a>MatchmakingConfiguration</a> uses one rule set; you can set up multiple rule sets to handle the scenarios that suit your game (such as for different game modes), and create a separate matchmaking configuration for each rule set. See additional information on rule set content in the <a>MatchmakingRuleSet</a> structure. For help creating rule sets, including useful examples, see the topic <a href="http://docs.aws.amazon.com/gamelift/latest/developerguide/match-intro.html"> Adding FlexMatch to Your Game</a>.</p> <p>Once created, matchmaking rule sets cannot be changed or deleted, so we recommend checking the rule set syntax using <a>ValidateMatchmakingRuleSet</a>before creating the rule set.</p> <p>To create a matchmaking rule set, provide the set of rules and a unique name. Rule sets must be defined in the same region as the matchmaking configuration they will be used with. Rule sets cannot be edited or deleted. If you need to change a rule set, create a new one with the necessary edits and then update matchmaking configurations to use the new rule set.</p> <p>Operations related to match configurations and rule sets include:</p> <ul> <li> <p> <a>CreateMatchmakingConfiguration</a> </p> </li> <li> <p> <a>DescribeMatchmakingConfigurations</a> </p> </li> <li> <p> <a>UpdateMatchmakingConfiguration</a> </p> </li> <li> <p> <a>DeleteMatchmakingConfiguration</a> </p> </li> <li> <p> <a>CreateMatchmakingRuleSet</a> </p> </li> <li> <p> <a>DescribeMatchmakingRuleSets</a> </p> </li> <li> <p> <a>ValidateMatchmakingRuleSet</a> </p> </li> </ul>
    rpc Post#CreateMatchmakingRuleSet(Post#CreateMatchmakingRuleSetRequest) returns (CreateMatchmakingRuleSetOutput) {
      option (google.api.http) = {
        post: "//#CreateMatchmakingRuleSet"
        body: "body"
      };
    }
    // <p>Adds a player to a game session and creates a player session record. Before a player can be added, a game session must have an <code>ACTIVE</code> status, have a creation policy of <code>ALLOW_ALL</code>, and have an open player slot. To add a group of players to a game session, use <a>CreatePlayerSessions</a>.</p> <p>To create a player session, specify a game session ID, player ID, and optionally a string of player data. If successful, the player is added to the game session and a new <a>PlayerSession</a> object is returned. Player sessions cannot be updated. </p> <p> <i>Available in Amazon GameLift Local.</i> </p> <p>Player-session-related operations include:</p> <ul> <li> <p> <a>CreatePlayerSession</a> </p> </li> <li> <p> <a>CreatePlayerSessions</a> </p> </li> <li> <p> <a>DescribePlayerSessions</a> </p> </li> <li> <p>Game session placements</p> <ul> <li> <p> <a>StartGameSessionPlacement</a> </p> </li> <li> <p> <a>DescribeGameSessionPlacement</a> </p> </li> <li> <p> <a>StopGameSessionPlacement</a> </p> </li> </ul> </li> </ul>
    rpc Post#CreatePlayerSession(Post#CreatePlayerSessionRequest) returns (CreatePlayerSessionOutput) {
      option (google.api.http) = {
        post: "//#CreatePlayerSession"
        body: "body"
      };
    }
    // <p>Adds a group of players to a game session. This action is useful with a team matching feature. Before players can be added, a game session must have an <code>ACTIVE</code> status, have a creation policy of <code>ALLOW_ALL</code>, and have an open player slot. To add a single player to a game session, use <a>CreatePlayerSession</a>.</p> <p>To create player sessions, specify a game session ID, a list of player IDs, and optionally a set of player data strings. If successful, the players are added to the game session and a set of new <a>PlayerSession</a> objects is returned. Player sessions cannot be updated.</p> <p> <i>Available in Amazon GameLift Local.</i> </p> <p>Player-session-related operations include:</p> <ul> <li> <p> <a>CreatePlayerSession</a> </p> </li> <li> <p> <a>CreatePlayerSessions</a> </p> </li> <li> <p> <a>DescribePlayerSessions</a> </p> </li> <li> <p>Game session placements</p> <ul> <li> <p> <a>StartGameSessionPlacement</a> </p> </li> <li> <p> <a>DescribeGameSessionPlacement</a> </p> </li> <li> <p> <a>StopGameSessionPlacement</a> </p> </li> </ul> </li> </ul>
    rpc Post#CreatePlayerSessions(Post#CreatePlayerSessionsRequest) returns (CreatePlayerSessionsOutput) {
      option (google.api.http) = {
        post: "//#CreatePlayerSessions"
        body: "body"
      };
    }
    // <p>Requests authorization to create or delete a peer connection between the VPC for your Amazon GameLift fleet and a virtual private cloud (VPC) in your AWS account. VPC peering enables the game servers on your fleet to communicate directly with other AWS resources. Once you've received authorization, call <a>CreateVpcPeeringConnection</a> to establish the peering connection. For more information, see <a href="http://docs.aws.amazon.com/gamelift/latest/developerguide/vpc-peering.html">VPC Peering with Amazon GameLift Fleets</a>.</p> <p>You can peer with VPCs that are owned by any AWS account you have access to, including the account that you use to manage your Amazon GameLift fleets. You cannot peer with VPCs that are in different regions.</p> <p>To request authorization to create a connection, call this operation from the AWS account with the VPC that you want to peer to your Amazon GameLift fleet. For example, to enable your game servers to retrieve data from a DynamoDB table, use the account that manages that DynamoDB resource. Identify the following values: (1) The ID of the VPC that you want to peer with, and (2) the ID of the AWS account that you use to manage Amazon GameLift. If successful, VPC peering is authorized for the specified VPC. </p> <p>To request authorization to delete a connection, call this operation from the AWS account with the VPC that is peered with your Amazon GameLift fleet. Identify the following values: (1) VPC ID that you want to delete the peering connection for, and (2) ID of the AWS account that you use to manage Amazon GameLift. </p> <p>The authorization remains valid for 24 hours unless it is canceled by a call to <a>DeleteVpcPeeringAuthorization</a>. You must create or delete the peering connection while the authorization is valid. </p> <p>VPC peering connection operations include:</p> <ul> <li> <p> <a>CreateVpcPeeringAuthorization</a> </p> </li> <li> <p> <a>DescribeVpcPeeringAuthorizations</a> </p> </li> <li> <p> <a>DeleteVpcPeeringAuthorization</a> </p> </li> <li> <p> <a>CreateVpcPeeringConnection</a> </p> </li> <li> <p> <a>DescribeVpcPeeringConnections</a> </p> </li> <li> <p> <a>DeleteVpcPeeringConnection</a> </p> </li> </ul>
    rpc Post#CreateVpcPeeringAuthorization(Post#CreateVpcPeeringAuthorizationRequest) returns (CreateVpcPeeringAuthorizationOutput) {
      option (google.api.http) = {
        post: "//#CreateVpcPeeringAuthorization"
        body: "body"
      };
    }
    // <p>Establishes a VPC peering connection between a virtual private cloud (VPC) in an AWS account with the VPC for your Amazon GameLift fleet. VPC peering enables the game servers on your fleet to communicate directly with other AWS resources. You can peer with VPCs in any AWS account that you have access to, including the account that you use to manage your Amazon GameLift fleets. You cannot peer with VPCs that are in different regions. For more information, see <a href="http://docs.aws.amazon.com/gamelift/latest/developerguide/vpc-peering.html">VPC Peering with Amazon GameLift Fleets</a>.</p> <p>Before calling this operation to establish the peering connection, you first need to call <a>CreateVpcPeeringAuthorization</a> and identify the VPC you want to peer with. Once the authorization for the specified VPC is issued, you have 24 hours to establish the connection. These two operations handle all tasks necessary to peer the two VPCs, including acceptance, updating routing tables, etc. </p> <p>To establish the connection, call this operation from the AWS account that is used to manage the Amazon GameLift fleets. Identify the following values: (1) The ID of the fleet you want to be enable a VPC peering connection for; (2) The AWS account with the VPC that you want to peer with; and (3) The ID of the VPC you want to peer with. This operation is asynchronous. If successful, a <a>VpcPeeringConnection</a> request is created. You can use continuous polling to track the request's status using <a>DescribeVpcPeeringConnections</a>, or by monitoring fleet events for success or failure using <a>DescribeFleetEvents</a>. </p> <p>VPC peering connection operations include:</p> <ul> <li> <p> <a>CreateVpcPeeringAuthorization</a> </p> </li> <li> <p> <a>DescribeVpcPeeringAuthorizations</a> </p> </li> <li> <p> <a>DeleteVpcPeeringAuthorization</a> </p> </li> <li> <p> <a>CreateVpcPeeringConnection</a> </p> </li> <li> <p> <a>DescribeVpcPeeringConnections</a> </p> </li> <li> <p> <a>DeleteVpcPeeringConnection</a> </p> </li> </ul>
    rpc Post#CreateVpcPeeringConnection(Post#CreateVpcPeeringConnectionRequest) returns (CreateVpcPeeringConnectionOutput) {
      option (google.api.http) = {
        post: "//#CreateVpcPeeringConnection"
        body: "body"
      };
    }
    // <p>Deletes an alias. This action removes all record of the alias. Game clients attempting to access a server process using the deleted alias receive an error. To delete an alias, specify the alias ID to be deleted.</p> <p>Alias-related operations include:</p> <ul> <li> <p> <a>CreateAlias</a> </p> </li> <li> <p> <a>ListAliases</a> </p> </li> <li> <p> <a>DescribeAlias</a> </p> </li> <li> <p> <a>UpdateAlias</a> </p> </li> <li> <p> <a>DeleteAlias</a> </p> </li> <li> <p> <a>ResolveAlias</a> </p> </li> </ul>
    rpc Post#DeleteAlias(Post#DeleteAliasRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#DeleteAlias"
        body: "body"
      };
    }
    // <p>Deletes a build. This action permanently deletes the build record and any uploaded build files.</p> <p>To delete a build, specify its ID. Deleting a build does not affect the status of any active fleets using the build, but you can no longer create new fleets with the deleted build.</p> <p>Build-related operations include:</p> <ul> <li> <p> <a>CreateBuild</a> </p> </li> <li> <p> <a>ListBuilds</a> </p> </li> <li> <p> <a>DescribeBuild</a> </p> </li> <li> <p> <a>UpdateBuild</a> </p> </li> <li> <p> <a>DeleteBuild</a> </p> </li> </ul>
    rpc Post#DeleteBuild(Post#DeleteBuildRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#DeleteBuild"
        body: "body"
      };
    }
    // <p>Deletes everything related to a fleet. Before deleting a fleet, you must set the fleet's desired capacity to zero. See <a>UpdateFleetCapacity</a>.</p> <p>This action removes the fleet's resources and the fleet record. Once a fleet is deleted, you can no longer use that fleet.</p> <p>Fleet-related operations include:</p> <ul> <li> <p> <a>CreateFleet</a> </p> </li> <li> <p> <a>ListFleets</a> </p> </li> <li> <p>Describe fleets:</p> <ul> <li> <p> <a>DescribeFleetAttributes</a> </p> </li> <li> <p> <a>DescribeFleetPortSettings</a> </p> </li> <li> <p> <a>DescribeFleetUtilization</a> </p> </li> <li> <p> <a>DescribeRuntimeConfiguration</a> </p> </li> <li> <p> <a>DescribeFleetEvents</a> </p> </li> </ul> </li> <li> <p>Update fleets:</p> <ul> <li> <p> <a>UpdateFleetAttributes</a> </p> </li> <li> <p> <a>UpdateFleetCapacity</a> </p> </li> <li> <p> <a>UpdateFleetPortSettings</a> </p> </li> <li> <p> <a>UpdateRuntimeConfiguration</a> </p> </li> </ul> </li> <li> <p>Manage fleet capacity:</p> <ul> <li> <p> <a>DescribeFleetCapacity</a> </p> </li> <li> <p> <a>UpdateFleetCapacity</a> </p> </li> <li> <p> <a>PutScalingPolicy</a> (automatic scaling)</p> </li> <li> <p> <a>DescribeScalingPolicies</a> (automatic scaling)</p> </li> <li> <p> <a>DeleteScalingPolicy</a> (automatic scaling)</p> </li> <li> <p> <a>DescribeEC2InstanceLimits</a> </p> </li> </ul> </li> <li> <p> <a>DeleteFleet</a> </p> </li> </ul>
    rpc Post#DeleteFleet(Post#DeleteFleetRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#DeleteFleet"
        body: "body"
      };
    }
    // <p>Deletes a game session queue. This action means that any <a>StartGameSessionPlacement</a> requests that reference this queue will fail. To delete a queue, specify the queue name.</p> <p>Queue-related operations include:</p> <ul> <li> <p> <a>CreateGameSessionQueue</a> </p> </li> <li> <p> <a>DescribeGameSessionQueues</a> </p> </li> <li> <p> <a>UpdateGameSessionQueue</a> </p> </li> <li> <p> <a>DeleteGameSessionQueue</a> </p> </li> </ul>
    rpc Post#DeleteGameSessionQueue(Post#DeleteGameSessionQueueRequest) returns (DeleteGameSessionQueueOutput) {
      option (google.api.http) = {
        post: "//#DeleteGameSessionQueue"
        body: "body"
      };
    }
    // <p>Permanently removes a FlexMatch matchmaking configuration. To delete, specify the configuration name. A matchmaking configuration cannot be deleted if it is being used in any active matchmaking tickets.</p> <p>Operations related to match configurations and rule sets include:</p> <ul> <li> <p> <a>CreateMatchmakingConfiguration</a> </p> </li> <li> <p> <a>DescribeMatchmakingConfigurations</a> </p> </li> <li> <p> <a>UpdateMatchmakingConfiguration</a> </p> </li> <li> <p> <a>DeleteMatchmakingConfiguration</a> </p> </li> <li> <p> <a>CreateMatchmakingRuleSet</a> </p> </li> <li> <p> <a>DescribeMatchmakingRuleSets</a> </p> </li> <li> <p> <a>ValidateMatchmakingRuleSet</a> </p> </li> </ul>
    rpc Post#DeleteMatchmakingConfiguration(Post#DeleteMatchmakingConfigurationRequest) returns (DeleteMatchmakingConfigurationOutput) {
      option (google.api.http) = {
        post: "//#DeleteMatchmakingConfiguration"
        body: "body"
      };
    }
    // <p>Deletes a fleet scaling policy. This action means that the policy is no longer in force and removes all record of it. To delete a scaling policy, specify both the scaling policy name and the fleet ID it is associated with.</p> <p>Fleet-related operations include:</p> <ul> <li> <p> <a>CreateFleet</a> </p> </li> <li> <p> <a>ListFleets</a> </p> </li> <li> <p>Describe fleets:</p> <ul> <li> <p> <a>DescribeFleetAttributes</a> </p> </li> <li> <p> <a>DescribeFleetPortSettings</a> </p> </li> <li> <p> <a>DescribeFleetUtilization</a> </p> </li> <li> <p> <a>DescribeRuntimeConfiguration</a> </p> </li> <li> <p> <a>DescribeFleetEvents</a> </p> </li> </ul> </li> <li> <p>Update fleets:</p> <ul> <li> <p> <a>UpdateFleetAttributes</a> </p> </li> <li> <p> <a>UpdateFleetCapacity</a> </p> </li> <li> <p> <a>UpdateFleetPortSettings</a> </p> </li> <li> <p> <a>UpdateRuntimeConfiguration</a> </p> </li> </ul> </li> <li> <p>Manage fleet capacity:</p> <ul> <li> <p> <a>DescribeFleetCapacity</a> </p> </li> <li> <p> <a>UpdateFleetCapacity</a> </p> </li> <li> <p> <a>PutScalingPolicy</a> (automatic scaling)</p> </li> <li> <p> <a>DescribeScalingPolicies</a> (automatic scaling)</p> </li> <li> <p> <a>DeleteScalingPolicy</a> (automatic scaling)</p> </li> <li> <p> <a>DescribeEC2InstanceLimits</a> </p> </li> </ul> </li> <li> <p> <a>DeleteFleet</a> </p> </li> </ul>
    rpc Post#DeleteScalingPolicy(Post#DeleteScalingPolicyRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#DeleteScalingPolicy"
        body: "body"
      };
    }
    // <p>Cancels a pending VPC peering authorization for the specified VPC. If the authorization has already been used to create a peering connection, call <a>DeleteVpcPeeringConnection</a> to remove the connection. </p> <p>VPC peering connection operations include:</p> <ul> <li> <p> <a>CreateVpcPeeringAuthorization</a> </p> </li> <li> <p> <a>DescribeVpcPeeringAuthorizations</a> </p> </li> <li> <p> <a>DeleteVpcPeeringAuthorization</a> </p> </li> <li> <p> <a>CreateVpcPeeringConnection</a> </p> </li> <li> <p> <a>DescribeVpcPeeringConnections</a> </p> </li> <li> <p> <a>DeleteVpcPeeringConnection</a> </p> </li> </ul>
    rpc Post#DeleteVpcPeeringAuthorization(Post#DeleteVpcPeeringAuthorizationRequest) returns (DeleteVpcPeeringAuthorizationOutput) {
      option (google.api.http) = {
        post: "//#DeleteVpcPeeringAuthorization"
        body: "body"
      };
    }
    // <p>Removes a VPC peering connection. To delete the connection, you must have a valid authorization for the VPC peering connection that you want to delete. You can check for an authorization by calling <a>DescribeVpcPeeringAuthorizations</a> or request a new one using <a>CreateVpcPeeringAuthorization</a>. </p> <p>Once a valid authorization exists, call this operation from the AWS account that is used to manage the Amazon GameLift fleets. Identify the connection to delete by the connection ID and fleet ID. If successful, the connection is removed. </p> <p>VPC peering connection operations include:</p> <ul> <li> <p> <a>CreateVpcPeeringAuthorization</a> </p> </li> <li> <p> <a>DescribeVpcPeeringAuthorizations</a> </p> </li> <li> <p> <a>DeleteVpcPeeringAuthorization</a> </p> </li> <li> <p> <a>CreateVpcPeeringConnection</a> </p> </li> <li> <p> <a>DescribeVpcPeeringConnections</a> </p> </li> <li> <p> <a>DeleteVpcPeeringConnection</a> </p> </li> </ul>
    rpc Post#DeleteVpcPeeringConnection(Post#DeleteVpcPeeringConnectionRequest) returns (DeleteVpcPeeringConnectionOutput) {
      option (google.api.http) = {
        post: "//#DeleteVpcPeeringConnection"
        body: "body"
      };
    }
    // <p>Retrieves properties for an alias. This operation returns all alias metadata and settings. To get an alias's target fleet ID only, use <code>ResolveAlias</code>. </p> <p>To get alias properties, specify the alias ID. If successful, the requested alias record is returned.</p> <p>Alias-related operations include:</p> <ul> <li> <p> <a>CreateAlias</a> </p> </li> <li> <p> <a>ListAliases</a> </p> </li> <li> <p> <a>DescribeAlias</a> </p> </li> <li> <p> <a>UpdateAlias</a> </p> </li> <li> <p> <a>DeleteAlias</a> </p> </li> <li> <p> <a>ResolveAlias</a> </p> </li> </ul>
    rpc Post#DescribeAlias(Post#DescribeAliasRequest) returns (DescribeAliasOutput) {
      option (google.api.http) = {
        post: "//#DescribeAlias"
        body: "body"
      };
    }
    // <p>Retrieves properties for a build. To get a build record, specify a build ID. If successful, an object containing the build properties is returned.</p> <p>Build-related operations include:</p> <ul> <li> <p> <a>CreateBuild</a> </p> </li> <li> <p> <a>ListBuilds</a> </p> </li> <li> <p> <a>DescribeBuild</a> </p> </li> <li> <p> <a>UpdateBuild</a> </p> </li> <li> <p> <a>DeleteBuild</a> </p> </li> </ul>
    rpc Post#DescribeBuild(Post#DescribeBuildRequest) returns (DescribeBuildOutput) {
      option (google.api.http) = {
        post: "//#DescribeBuild"
        body: "body"
      };
    }
    // <p>Retrieves the following information for the specified EC2 instance type:</p> <ul> <li> <p>maximum number of instances allowed per AWS account (service limit)</p> </li> <li> <p>current usage level for the AWS account</p> </li> </ul> <p>Service limits vary depending on region. Available regions for Amazon GameLift can be found in the AWS Management Console for Amazon GameLift (see the drop-down list in the upper right corner).</p> <p>Fleet-related operations include:</p> <ul> <li> <p> <a>CreateFleet</a> </p> </li> <li> <p> <a>ListFleets</a> </p> </li> <li> <p>Describe fleets:</p> <ul> <li> <p> <a>DescribeFleetAttributes</a> </p> </li> <li> <p> <a>DescribeFleetPortSettings</a> </p> </li> <li> <p> <a>DescribeFleetUtilization</a> </p> </li> <li> <p> <a>DescribeRuntimeConfiguration</a> </p> </li> <li> <p> <a>DescribeFleetEvents</a> </p> </li> </ul> </li> <li> <p>Update fleets:</p> <ul> <li> <p> <a>UpdateFleetAttributes</a> </p> </li> <li> <p> <a>UpdateFleetCapacity</a> </p> </li> <li> <p> <a>UpdateFleetPortSettings</a> </p> </li> <li> <p> <a>UpdateRuntimeConfiguration</a> </p> </li> </ul> </li> <li> <p>Manage fleet capacity:</p> <ul> <li> <p> <a>DescribeFleetCapacity</a> </p> </li> <li> <p> <a>UpdateFleetCapacity</a> </p> </li> <li> <p> <a>PutScalingPolicy</a> (automatic scaling)</p> </li> <li> <p> <a>DescribeScalingPolicies</a> (automatic scaling)</p> </li> <li> <p> <a>DeleteScalingPolicy</a> (automatic scaling)</p> </li> <li> <p> <a>DescribeEC2InstanceLimits</a> </p> </li> </ul> </li> <li> <p> <a>DeleteFleet</a> </p> </li> </ul>
    rpc Post#DescribeEC2InstanceLimits(Post#DescribeEC2InstanceLimitsRequest) returns (DescribeEC2InstanceLimitsOutput) {
      option (google.api.http) = {
        post: "//#DescribeEC2InstanceLimits"
        body: "body"
      };
    }
    // <p>Retrieves fleet properties, including metadata, status, and configuration, for one or more fleets. You can request attributes for all fleets, or specify a list of one or more fleet IDs. When requesting multiple fleets, use the pagination parameters to retrieve results as a set of sequential pages. If successful, a <a>FleetAttributes</a> object is returned for each requested fleet ID. When specifying a list of fleet IDs, attribute objects are returned only for fleets that currently exist. </p> <note> <p>Some API actions may limit the number of fleet IDs allowed in one request. If a request exceeds this limit, the request fails and the error message includes the maximum allowed.</p> </note> <p>Fleet-related operations include:</p> <ul> <li> <p> <a>CreateFleet</a> </p> </li> <li> <p> <a>ListFleets</a> </p> </li> <li> <p>Describe fleets:</p> <ul> <li> <p> <a>DescribeFleetAttributes</a> </p> </li> <li> <p> <a>DescribeFleetPortSettings</a> </p> </li> <li> <p> <a>DescribeFleetUtilization</a> </p> </li> <li> <p> <a>DescribeRuntimeConfiguration</a> </p> </li> <li> <p> <a>DescribeFleetEvents</a> </p> </li> </ul> </li> <li> <p>Update fleets:</p> <ul> <li> <p> <a>UpdateFleetAttributes</a> </p> </li> <li> <p> <a>UpdateFleetCapacity</a> </p> </li> <li> <p> <a>UpdateFleetPortSettings</a> </p> </li> <li> <p> <a>UpdateRuntimeConfiguration</a> </p> </li> </ul> </li> <li> <p>Manage fleet capacity:</p> <ul> <li> <p> <a>DescribeFleetCapacity</a> </p> </li> <li> <p> <a>UpdateFleetCapacity</a> </p> </li> <li> <p> <a>PutScalingPolicy</a> (automatic scaling)</p> </li> <li> <p> <a>DescribeScalingPolicies</a> (automatic scaling)</p> </li> <li> <p> <a>DeleteScalingPolicy</a> (automatic scaling)</p> </li> <li> <p> <a>DescribeEC2InstanceLimits</a> </p> </li> </ul> </li> <li> <p> <a>DeleteFleet</a> </p> </li> </ul>
    rpc Post#DescribeFleetAttributes(Post#DescribeFleetAttributesRequest) returns (DescribeFleetAttributesOutput) {
      option (google.api.http) = {
        post: "//#DescribeFleetAttributes"
        body: "body"
      };
    }
    // <p>Retrieves the current status of fleet capacity for one or more fleets. This information includes the number of instances that have been requested for the fleet and the number currently active. You can request capacity for all fleets, or specify a list of one or more fleet IDs. When requesting multiple fleets, use the pagination parameters to retrieve results as a set of sequential pages. If successful, a <a>FleetCapacity</a> object is returned for each requested fleet ID. When specifying a list of fleet IDs, attribute objects are returned only for fleets that currently exist. </p> <note> <p>Some API actions may limit the number of fleet IDs allowed in one request. If a request exceeds this limit, the request fails and the error message includes the maximum allowed.</p> </note> <p>Fleet-related operations include:</p> <ul> <li> <p> <a>CreateFleet</a> </p> </li> <li> <p> <a>ListFleets</a> </p> </li> <li> <p>Describe fleets:</p> <ul> <li> <p> <a>DescribeFleetAttributes</a> </p> </li> <li> <p> <a>DescribeFleetPortSettings</a> </p> </li> <li> <p> <a>DescribeFleetUtilization</a> </p> </li> <li> <p> <a>DescribeRuntimeConfiguration</a> </p> </li> <li> <p> <a>DescribeFleetEvents</a> </p> </li> </ul> </li> <li> <p>Update fleets:</p> <ul> <li> <p> <a>UpdateFleetAttributes</a> </p> </li> <li> <p> <a>UpdateFleetCapacity</a> </p> </li> <li> <p> <a>UpdateFleetPortSettings</a> </p> </li> <li> <p> <a>UpdateRuntimeConfiguration</a> </p> </li> </ul> </li> <li> <p>Manage fleet capacity:</p> <ul> <li> <p> <a>DescribeFleetCapacity</a> </p> </li> <li> <p> <a>UpdateFleetCapacity</a> </p> </li> <li> <p> <a>PutScalingPolicy</a> (automatic scaling)</p> </li> <li> <p> <a>DescribeScalingPolicies</a> (automatic scaling)</p> </li> <li> <p> <a>DeleteScalingPolicy</a> (automatic scaling)</p> </li> <li> <p> <a>DescribeEC2InstanceLimits</a> </p> </li> </ul> </li> <li> <p> <a>DeleteFleet</a> </p> </li> </ul>
    rpc Post#DescribeFleetCapacity(Post#DescribeFleetCapacityRequest) returns (DescribeFleetCapacityOutput) {
      option (google.api.http) = {
        post: "//#DescribeFleetCapacity"
        body: "body"
      };
    }
    // <p>Retrieves entries from the specified fleet's event log. You can specify a time range to limit the result set. Use the pagination parameters to retrieve results as a set of sequential pages. If successful, a collection of event log entries matching the request are returned.</p> <p>Fleet-related operations include:</p> <ul> <li> <p> <a>CreateFleet</a> </p> </li> <li> <p> <a>ListFleets</a> </p> </li> <li> <p>Describe fleets:</p> <ul> <li> <p> <a>DescribeFleetAttributes</a> </p> </li> <li> <p> <a>DescribeFleetPortSettings</a> </p> </li> <li> <p> <a>DescribeFleetUtilization</a> </p> </li> <li> <p> <a>DescribeRuntimeConfiguration</a> </p> </li> <li> <p> <a>DescribeFleetEvents</a> </p> </li> </ul> </li> <li> <p>Update fleets:</p> <ul> <li> <p> <a>UpdateFleetAttributes</a> </p> </li> <li> <p> <a>UpdateFleetCapacity</a> </p> </li> <li> <p> <a>UpdateFleetPortSettings</a> </p> </li> <li> <p> <a>UpdateRuntimeConfiguration</a> </p> </li> </ul> </li> <li> <p>Manage fleet capacity:</p> <ul> <li> <p> <a>DescribeFleetCapacity</a> </p> </li> <li> <p> <a>UpdateFleetCapacity</a> </p> </li> <li> <p> <a>PutScalingPolicy</a> (automatic scaling)</p> </li> <li> <p> <a>DescribeScalingPolicies</a> (automatic scaling)</p> </li> <li> <p> <a>DeleteScalingPolicy</a> (automatic scaling)</p> </li> <li> <p> <a>DescribeEC2InstanceLimits</a> </p> </li> </ul> </li> <li> <p> <a>DeleteFleet</a> </p> </li> </ul>
    rpc Post#DescribeFleetEvents(Post#DescribeFleetEventsRequest) returns (DescribeFleetEventsOutput) {
      option (google.api.http) = {
        post: "//#DescribeFleetEvents"
        body: "body"
      };
    }
    // <p>Retrieves the inbound connection permissions for a fleet. Connection permissions include a range of IP addresses and port settings that incoming traffic can use to access server processes in the fleet. To get a fleet's inbound connection permissions, specify a fleet ID. If successful, a collection of <a>IpPermission</a> objects is returned for the requested fleet ID. If the requested fleet has been deleted, the result set is empty.</p> <p>Fleet-related operations include:</p> <ul> <li> <p> <a>CreateFleet</a> </p> </li> <li> <p> <a>ListFleets</a> </p> </li> <li> <p>Describe fleets:</p> <ul> <li> <p> <a>DescribeFleetAttributes</a> </p> </li> <li> <p> <a>DescribeFleetPortSettings</a> </p> </li> <li> <p> <a>DescribeFleetUtilization</a> </p> </li> <li> <p> <a>DescribeRuntimeConfiguration</a> </p> </li> <li> <p> <a>DescribeFleetEvents</a> </p> </li> </ul> </li> <li> <p>Update fleets:</p> <ul> <li> <p> <a>UpdateFleetAttributes</a> </p> </li> <li> <p> <a>UpdateFleetCapacity</a> </p> </li> <li> <p> <a>UpdateFleetPortSettings</a> </p> </li> <li> <p> <a>UpdateRuntimeConfiguration</a> </p> </li> </ul> </li> <li> <p>Manage fleet capacity:</p> <ul> <li> <p> <a>DescribeFleetCapacity</a> </p> </li> <li> <p> <a>UpdateFleetCapacity</a> </p> </li> <li> <p> <a>PutScalingPolicy</a> (automatic scaling)</p> </li> <li> <p> <a>DescribeScalingPolicies</a> (automatic scaling)</p> </li> <li> <p> <a>DeleteScalingPolicy</a> (automatic scaling)</p> </li> <li> <p> <a>DescribeEC2InstanceLimits</a> </p> </li> </ul> </li> <li> <p> <a>DeleteFleet</a> </p> </li> </ul>
    rpc Post#DescribeFleetPortSettings(Post#DescribeFleetPortSettingsRequest) returns (DescribeFleetPortSettingsOutput) {
      option (google.api.http) = {
        post: "//#DescribeFleetPortSettings"
        body: "body"
      };
    }
    // <p>Retrieves utilization statistics for one or more fleets. You can request utilization data for all fleets, or specify a list of one or more fleet IDs. When requesting multiple fleets, use the pagination parameters to retrieve results as a set of sequential pages. If successful, a <a>FleetUtilization</a> object is returned for each requested fleet ID. When specifying a list of fleet IDs, utilization objects are returned only for fleets that currently exist. </p> <note> <p>Some API actions may limit the number of fleet IDs allowed in one request. If a request exceeds this limit, the request fails and the error message includes the maximum allowed.</p> </note> <p>Fleet-related operations include:</p> <ul> <li> <p> <a>CreateFleet</a> </p> </li> <li> <p> <a>ListFleets</a> </p> </li> <li> <p>Describe fleets:</p> <ul> <li> <p> <a>DescribeFleetAttributes</a> </p> </li> <li> <p> <a>DescribeFleetPortSettings</a> </p> </li> <li> <p> <a>DescribeFleetUtilization</a> </p> </li> <li> <p> <a>DescribeRuntimeConfiguration</a> </p> </li> <li> <p> <a>DescribeFleetEvents</a> </p> </li> </ul> </li> <li> <p>Update fleets:</p> <ul> <li> <p> <a>UpdateFleetAttributes</a> </p> </li> <li> <p> <a>UpdateFleetCapacity</a> </p> </li> <li> <p> <a>UpdateFleetPortSettings</a> </p> </li> <li> <p> <a>UpdateRuntimeConfiguration</a> </p> </li> </ul> </li> <li> <p>Manage fleet capacity:</p> <ul> <li> <p> <a>DescribeFleetCapacity</a> </p> </li> <li> <p> <a>UpdateFleetCapacity</a> </p> </li> <li> <p> <a>PutScalingPolicy</a> (automatic scaling)</p> </li> <li> <p> <a>DescribeScalingPolicies</a> (automatic scaling)</p> </li> <li> <p> <a>DeleteScalingPolicy</a> (automatic scaling)</p> </li> <li> <p> <a>DescribeEC2InstanceLimits</a> </p> </li> </ul> </li> <li> <p> <a>DeleteFleet</a> </p> </li> </ul>
    rpc Post#DescribeFleetUtilization(Post#DescribeFleetUtilizationRequest) returns (DescribeFleetUtilizationOutput) {
      option (google.api.http) = {
        post: "//#DescribeFleetUtilization"
        body: "body"
      };
    }
    // <p>Retrieves properties, including the protection policy in force, for one or more game sessions. This action can be used in several ways: (1) provide a <code>GameSessionId</code> or <code>GameSessionArn</code> to request details for a specific game session; (2) provide either a <code>FleetId</code> or an <code>AliasId</code> to request properties for all game sessions running on a fleet. </p> <p>To get game session record(s), specify just one of the following: game session ID, fleet ID, or alias ID. You can filter this request by game session status. Use the pagination parameters to retrieve results as a set of sequential pages. If successful, a <a>GameSessionDetail</a> object is returned for each session matching the request.</p> <p>Game-session-related operations include:</p> <ul> <li> <p> <a>CreateGameSession</a> </p> </li> <li> <p> <a>DescribeGameSessions</a> </p> </li> <li> <p> <a>DescribeGameSessionDetails</a> </p> </li> <li> <p> <a>SearchGameSessions</a> </p> </li> <li> <p> <a>UpdateGameSession</a> </p> </li> <li> <p> <a>GetGameSessionLogUrl</a> </p> </li> <li> <p>Game session placements</p> <ul> <li> <p> <a>StartGameSessionPlacement</a> </p> </li> <li> <p> <a>DescribeGameSessionPlacement</a> </p> </li> <li> <p> <a>StopGameSessionPlacement</a> </p> </li> </ul> </li> </ul>
    rpc Post#DescribeGameSessionDetails(Post#DescribeGameSessionDetailsRequest) returns (DescribeGameSessionDetailsOutput) {
      option (google.api.http) = {
        post: "//#DescribeGameSessionDetails"
        body: "body"
      };
    }
    // <p>Retrieves properties and current status of a game session placement request. To get game session placement details, specify the placement ID. If successful, a <a>GameSessionPlacement</a> object is returned.</p> <p>Game-session-related operations include:</p> <ul> <li> <p> <a>CreateGameSession</a> </p> </li> <li> <p> <a>DescribeGameSessions</a> </p> </li> <li> <p> <a>DescribeGameSessionDetails</a> </p> </li> <li> <p> <a>SearchGameSessions</a> </p> </li> <li> <p> <a>UpdateGameSession</a> </p> </li> <li> <p> <a>GetGameSessionLogUrl</a> </p> </li> <li> <p>Game session placements</p> <ul> <li> <p> <a>StartGameSessionPlacement</a> </p> </li> <li> <p> <a>DescribeGameSessionPlacement</a> </p> </li> <li> <p> <a>StopGameSessionPlacement</a> </p> </li> </ul> </li> </ul>
    rpc Post#DescribeGameSessionPlacement(Post#DescribeGameSessionPlacementRequest) returns (DescribeGameSessionPlacementOutput) {
      option (google.api.http) = {
        post: "//#DescribeGameSessionPlacement"
        body: "body"
      };
    }
    // <p>Retrieves the properties for one or more game session queues. When requesting multiple queues, use the pagination parameters to retrieve results as a set of sequential pages. If successful, a <a>GameSessionQueue</a> object is returned for each requested queue. When specifying a list of queues, objects are returned only for queues that currently exist in the region.</p> <p>Queue-related operations include:</p> <ul> <li> <p> <a>CreateGameSessionQueue</a> </p> </li> <li> <p> <a>DescribeGameSessionQueues</a> </p> </li> <li> <p> <a>UpdateGameSessionQueue</a> </p> </li> <li> <p> <a>DeleteGameSessionQueue</a> </p> </li> </ul>
    rpc Post#DescribeGameSessionQueues(Post#DescribeGameSessionQueuesRequest) returns (DescribeGameSessionQueuesOutput) {
      option (google.api.http) = {
        post: "//#DescribeGameSessionQueues"
        body: "body"
      };
    }
    // <p>Retrieves a set of one or more game sessions. Request a specific game session or request all game sessions on a fleet. Alternatively, use <a>SearchGameSessions</a> to request a set of active game sessions that are filtered by certain criteria. To retrieve protection policy settings for game sessions, use <a>DescribeGameSessionDetails</a>.</p> <p>To get game sessions, specify one of the following: game session ID, fleet ID, or alias ID. You can filter this request by game session status. Use the pagination parameters to retrieve results as a set of sequential pages. If successful, a <a>GameSession</a> object is returned for each game session matching the request.</p> <p> <i>Available in Amazon GameLift Local.</i> </p> <p>Game-session-related operations include:</p> <ul> <li> <p> <a>CreateGameSession</a> </p> </li> <li> <p> <a>DescribeGameSessions</a> </p> </li> <li> <p> <a>DescribeGameSessionDetails</a> </p> </li> <li> <p> <a>SearchGameSessions</a> </p> </li> <li> <p> <a>UpdateGameSession</a> </p> </li> <li> <p> <a>GetGameSessionLogUrl</a> </p> </li> <li> <p>Game session placements</p> <ul> <li> <p> <a>StartGameSessionPlacement</a> </p> </li> <li> <p> <a>DescribeGameSessionPlacement</a> </p> </li> <li> <p> <a>StopGameSessionPlacement</a> </p> </li> </ul> </li> </ul>
    rpc Post#DescribeGameSessions(Post#DescribeGameSessionsRequest) returns (DescribeGameSessionsOutput) {
      option (google.api.http) = {
        post: "//#DescribeGameSessions"
        body: "body"
      };
    }
    // <p>Retrieves information about a fleet's instances, including instance IDs. Use this action to get details on all instances in the fleet or get details on one specific instance.</p> <p>To get a specific instance, specify fleet ID and instance ID. To get all instances in a fleet, specify a fleet ID only. Use the pagination parameters to retrieve results as a set of sequential pages. If successful, an <a>Instance</a> object is returned for each result.</p>
    rpc Post#DescribeInstances(Post#DescribeInstancesRequest) returns (DescribeInstancesOutput) {
      option (google.api.http) = {
        post: "//#DescribeInstances"
        body: "body"
      };
    }
    // <p>Retrieves a set of one or more matchmaking tickets. Use this operation to retrieve ticket information, including status and--once a successful match is made--acquire connection information for the resulting new game session. </p> <p>You can use this operation to track the progress of matchmaking requests (through polling) as an alternative to using event notifications. See more details on tracking matchmaking requests through polling or notifications in <a>StartMatchmaking</a>. </p> <p>You can request data for a one or a list of ticket IDs. If the request is successful, a ticket object is returned for each requested ID. When specifying a list of ticket IDs, objects are returned only for tickets that currently exist. </p> <p>Matchmaking-related operations include:</p> <ul> <li> <p> <a>StartMatchmaking</a> </p> </li> <li> <p> <a>DescribeMatchmaking</a> </p> </li> <li> <p> <a>StopMatchmaking</a> </p> </li> <li> <p> <a>AcceptMatch</a> </p> </li> </ul>
    rpc Post#DescribeMatchmaking(Post#DescribeMatchmakingRequest) returns (DescribeMatchmakingOutput) {
      option (google.api.http) = {
        post: "//#DescribeMatchmaking"
        body: "body"
      };
    }
    // <p>Retrieves the details of FlexMatch matchmaking configurations. with this operation, you have the following options: (1) retrieve all existing configurations, (2) provide the names of one or more configurations to retrieve, or (3) retrieve all configurations that use a specified rule set name. When requesting multiple items, use the pagination parameters to retrieve results as a set of sequential pages. If successful, a configuration is returned for each requested name. When specifying a list of names, only configurations that currently exist are returned. </p> <p>Operations related to match configurations and rule sets include:</p> <ul> <li> <p> <a>CreateMatchmakingConfiguration</a> </p> </li> <li> <p> <a>DescribeMatchmakingConfigurations</a> </p> </li> <li> <p> <a>UpdateMatchmakingConfiguration</a> </p> </li> <li> <p> <a>DeleteMatchmakingConfiguration</a> </p> </li> <li> <p> <a>CreateMatchmakingRuleSet</a> </p> </li> <li> <p> <a>DescribeMatchmakingRuleSets</a> </p> </li> <li> <p> <a>ValidateMatchmakingRuleSet</a> </p> </li> </ul>
    rpc Post#DescribeMatchmakingConfigurations(Post#DescribeMatchmakingConfigurationsRequest) returns (DescribeMatchmakingConfigurationsOutput) {
      option (google.api.http) = {
        post: "//#DescribeMatchmakingConfigurations"
        body: "body"
      };
    }
    // <p>Retrieves the details for FlexMatch matchmaking rule sets. You can request all existing rule sets for the region, or provide a list of one or more rule set names. When requesting multiple items, use the pagination parameters to retrieve results as a set of sequential pages. If successful, a rule set is returned for each requested name. </p> <p>Operations related to match configurations and rule sets include:</p> <ul> <li> <p> <a>CreateMatchmakingConfiguration</a> </p> </li> <li> <p> <a>DescribeMatchmakingConfigurations</a> </p> </li> <li> <p> <a>UpdateMatchmakingConfiguration</a> </p> </li> <li> <p> <a>DeleteMatchmakingConfiguration</a> </p> </li> <li> <p> <a>CreateMatchmakingRuleSet</a> </p> </li> <li> <p> <a>DescribeMatchmakingRuleSets</a> </p> </li> <li> <p> <a>ValidateMatchmakingRuleSet</a> </p> </li> </ul>
    rpc Post#DescribeMatchmakingRuleSets(Post#DescribeMatchmakingRuleSetsRequest) returns (DescribeMatchmakingRuleSetsOutput) {
      option (google.api.http) = {
        post: "//#DescribeMatchmakingRuleSets"
        body: "body"
      };
    }
    // <p>Retrieves properties for one or more player sessions. This action can be used in several ways: (1) provide a <code>PlayerSessionId</code> to request properties for a specific player session; (2) provide a <code>GameSessionId</code> to request properties for all player sessions in the specified game session; (3) provide a <code>PlayerId</code> to request properties for all player sessions of a specified player. </p> <p>To get game session record(s), specify only one of the following: a player session ID, a game session ID, or a player ID. You can filter this request by player session status. Use the pagination parameters to retrieve results as a set of sequential pages. If successful, a <a>PlayerSession</a> object is returned for each session matching the request.</p> <p> <i>Available in Amazon GameLift Local.</i> </p> <p>Player-session-related operations include:</p> <ul> <li> <p> <a>CreatePlayerSession</a> </p> </li> <li> <p> <a>CreatePlayerSessions</a> </p> </li> <li> <p> <a>DescribePlayerSessions</a> </p> </li> <li> <p>Game session placements</p> <ul> <li> <p> <a>StartGameSessionPlacement</a> </p> </li> <li> <p> <a>DescribeGameSessionPlacement</a> </p> </li> <li> <p> <a>StopGameSessionPlacement</a> </p> </li> </ul> </li> </ul>
    rpc Post#DescribePlayerSessions(Post#DescribePlayerSessionsRequest) returns (DescribePlayerSessionsOutput) {
      option (google.api.http) = {
        post: "//#DescribePlayerSessions"
        body: "body"
      };
    }
    // <p>Retrieves the current run-time configuration for the specified fleet. The run-time configuration tells Amazon GameLift how to launch server processes on instances in the fleet.</p> <p>Fleet-related operations include:</p> <ul> <li> <p> <a>CreateFleet</a> </p> </li> <li> <p> <a>ListFleets</a> </p> </li> <li> <p>Describe fleets:</p> <ul> <li> <p> <a>DescribeFleetAttributes</a> </p> </li> <li> <p> <a>DescribeFleetPortSettings</a> </p> </li> <li> <p> <a>DescribeFleetUtilization</a> </p> </li> <li> <p> <a>DescribeRuntimeConfiguration</a> </p> </li> <li> <p> <a>DescribeFleetEvents</a> </p> </li> </ul> </li> <li> <p>Update fleets:</p> <ul> <li> <p> <a>UpdateFleetAttributes</a> </p> </li> <li> <p> <a>UpdateFleetCapacity</a> </p> </li> <li> <p> <a>UpdateFleetPortSettings</a> </p> </li> <li> <p> <a>UpdateRuntimeConfiguration</a> </p> </li> </ul> </li> <li> <p>Manage fleet capacity:</p> <ul> <li> <p> <a>DescribeFleetCapacity</a> </p> </li> <li> <p> <a>UpdateFleetCapacity</a> </p> </li> <li> <p> <a>PutScalingPolicy</a> (automatic scaling)</p> </li> <li> <p> <a>DescribeScalingPolicies</a> (automatic scaling)</p> </li> <li> <p> <a>DeleteScalingPolicy</a> (automatic scaling)</p> </li> <li> <p> <a>DescribeEC2InstanceLimits</a> </p> </li> </ul> </li> <li> <p> <a>DeleteFleet</a> </p> </li> </ul>
    rpc Post#DescribeRuntimeConfiguration(Post#DescribeRuntimeConfigurationRequest) returns (DescribeRuntimeConfigurationOutput) {
      option (google.api.http) = {
        post: "//#DescribeRuntimeConfiguration"
        body: "body"
      };
    }
    // <p>Retrieves all scaling policies applied to a fleet.</p> <p>To get a fleet's scaling policies, specify the fleet ID. You can filter this request by policy status, such as to retrieve only active scaling policies. Use the pagination parameters to retrieve results as a set of sequential pages. If successful, set of <a>ScalingPolicy</a> objects is returned for the fleet.</p> <p>Fleet-related operations include:</p> <ul> <li> <p> <a>CreateFleet</a> </p> </li> <li> <p> <a>ListFleets</a> </p> </li> <li> <p>Describe fleets:</p> <ul> <li> <p> <a>DescribeFleetAttributes</a> </p> </li> <li> <p> <a>DescribeFleetPortSettings</a> </p> </li> <li> <p> <a>DescribeFleetUtilization</a> </p> </li> <li> <p> <a>DescribeRuntimeConfiguration</a> </p> </li> <li> <p> <a>DescribeFleetEvents</a> </p> </li> </ul> </li> <li> <p>Update fleets:</p> <ul> <li> <p> <a>UpdateFleetAttributes</a> </p> </li> <li> <p> <a>UpdateFleetCapacity</a> </p> </li> <li> <p> <a>UpdateFleetPortSettings</a> </p> </li> <li> <p> <a>UpdateRuntimeConfiguration</a> </p> </li> </ul> </li> <li> <p>Manage fleet capacity:</p> <ul> <li> <p> <a>DescribeFleetCapacity</a> </p> </li> <li> <p> <a>UpdateFleetCapacity</a> </p> </li> <li> <p> <a>PutScalingPolicy</a> (automatic scaling)</p> </li> <li> <p> <a>DescribeScalingPolicies</a> (automatic scaling)</p> </li> <li> <p> <a>DeleteScalingPolicy</a> (automatic scaling)</p> </li> <li> <p> <a>DescribeEC2InstanceLimits</a> </p> </li> </ul> </li> <li> <p> <a>DeleteFleet</a> </p> </li> </ul>
    rpc Post#DescribeScalingPolicies(Post#DescribeScalingPoliciesRequest) returns (DescribeScalingPoliciesOutput) {
      option (google.api.http) = {
        post: "//#DescribeScalingPolicies"
        body: "body"
      };
    }
    // <p>Retrieves valid VPC peering authorizations that are pending for the AWS account. This operation returns all VPC peering authorizations and requests for peering. This includes those initiated and received by this account. </p> <p>VPC peering connection operations include:</p> <ul> <li> <p> <a>CreateVpcPeeringAuthorization</a> </p> </li> <li> <p> <a>DescribeVpcPeeringAuthorizations</a> </p> </li> <li> <p> <a>DeleteVpcPeeringAuthorization</a> </p> </li> <li> <p> <a>CreateVpcPeeringConnection</a> </p> </li> <li> <p> <a>DescribeVpcPeeringConnections</a> </p> </li> <li> <p> <a>DeleteVpcPeeringConnection</a> </p> </li> </ul>
    rpc Post#DescribeVpcPeeringAuthorizations(Post#DescribeVpcPeeringAuthorizationsRequest) returns (DescribeVpcPeeringAuthorizationsOutput) {
      option (google.api.http) = {
        post: "//#DescribeVpcPeeringAuthorizations"
        body: "body"
      };
    }
    // <p>Retrieves information on VPC peering connections. Use this operation to get peering information for all fleets or for one specific fleet ID. </p> <p>To retrieve connection information, call this operation from the AWS account that is used to manage the Amazon GameLift fleets. Specify a fleet ID or leave the parameter empty to retrieve all connection records. If successful, the retrieved information includes both active and pending connections. Active connections identify the IpV4 CIDR block that the VPC uses to connect. </p> <p>VPC peering connection operations include:</p> <ul> <li> <p> <a>CreateVpcPeeringAuthorization</a> </p> </li> <li> <p> <a>DescribeVpcPeeringAuthorizations</a> </p> </li> <li> <p> <a>DeleteVpcPeeringAuthorization</a> </p> </li> <li> <p> <a>CreateVpcPeeringConnection</a> </p> </li> <li> <p> <a>DescribeVpcPeeringConnections</a> </p> </li> <li> <p> <a>DeleteVpcPeeringConnection</a> </p> </li> </ul>
    rpc Post#DescribeVpcPeeringConnections(Post#DescribeVpcPeeringConnectionsRequest) returns (DescribeVpcPeeringConnectionsOutput) {
      option (google.api.http) = {
        post: "//#DescribeVpcPeeringConnections"
        body: "body"
      };
    }
    // <p>Retrieves the location of stored game session logs for a specified game session. When a game session is terminated, Amazon GameLift automatically stores the logs in Amazon S3 and retains them for 14 days. Use this URL to download the logs.</p> <note> <p>See the <a href="http://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html#limits_gamelift">AWS Service Limits</a> page for maximum log file sizes. Log files that exceed this limit are not saved.</p> </note> <p>Game-session-related operations include:</p> <ul> <li> <p> <a>CreateGameSession</a> </p> </li> <li> <p> <a>DescribeGameSessions</a> </p> </li> <li> <p> <a>DescribeGameSessionDetails</a> </p> </li> <li> <p> <a>SearchGameSessions</a> </p> </li> <li> <p> <a>UpdateGameSession</a> </p> </li> <li> <p> <a>GetGameSessionLogUrl</a> </p> </li> <li> <p>Game session placements</p> <ul> <li> <p> <a>StartGameSessionPlacement</a> </p> </li> <li> <p> <a>DescribeGameSessionPlacement</a> </p> </li> <li> <p> <a>StopGameSessionPlacement</a> </p> </li> </ul> </li> </ul>
    rpc Post#GetGameSessionLogUrl(Post#GetGameSessionLogUrlRequest) returns (GetGameSessionLogUrlOutput) {
      option (google.api.http) = {
        post: "//#GetGameSessionLogUrl"
        body: "body"
      };
    }
    // <p>Requests remote access to a fleet instance. Remote access is useful for debugging, gathering benchmarking data, or watching activity in real time. </p> <p>Access requires credentials that match the operating system of the instance. For a Windows instance, Amazon GameLift returns a user name and password as strings for use with a Windows Remote Desktop client. For a Linux instance, Amazon GameLift returns a user name and RSA private key, also as strings, for use with an SSH client. The private key must be saved in the proper format to a <code>.pem</code> file before using. If you're making this request using the AWS CLI, saving the secret can be handled as part of the GetInstanceAccess request. (See the example later in this topic). For more information on remote access, see <a href="http://docs.aws.amazon.com/gamelift/latest/developerguide/fleets-remote-access.html">Remotely Accessing an Instance</a>.</p> <p>To request access to a specific instance, specify the IDs of the instance and the fleet it belongs to. If successful, an <a>InstanceAccess</a> object is returned containing the instance's IP address and a set of credentials.</p>
    rpc Post#GetInstanceAccess(Post#GetInstanceAccessRequest) returns (GetInstanceAccessOutput) {
      option (google.api.http) = {
        post: "//#GetInstanceAccess"
        body: "body"
      };
    }
    // <p>Retrieves all aliases for this AWS account. You can filter the result set by alias name and/or routing strategy type. Use the pagination parameters to retrieve results in sequential pages.</p> <note> <p>Returned aliases are not listed in any particular order.</p> </note> <p>Alias-related operations include:</p> <ul> <li> <p> <a>CreateAlias</a> </p> </li> <li> <p> <a>ListAliases</a> </p> </li> <li> <p> <a>DescribeAlias</a> </p> </li> <li> <p> <a>UpdateAlias</a> </p> </li> <li> <p> <a>DeleteAlias</a> </p> </li> <li> <p> <a>ResolveAlias</a> </p> </li> </ul>
    rpc Post#ListAliases(Post#ListAliasesRequest) returns (ListAliasesOutput) {
      option (google.api.http) = {
        post: "//#ListAliases"
        body: "body"
      };
    }
    // <p>Retrieves build records for all builds associated with the AWS account in use. You can limit results to builds that are in a specific status by using the <code>Status</code> parameter. Use the pagination parameters to retrieve results in a set of sequential pages. </p> <note> <p>Build records are not listed in any particular order.</p> </note> <p>Build-related operations include:</p> <ul> <li> <p> <a>CreateBuild</a> </p> </li> <li> <p> <a>ListBuilds</a> </p> </li> <li> <p> <a>DescribeBuild</a> </p> </li> <li> <p> <a>UpdateBuild</a> </p> </li> <li> <p> <a>DeleteBuild</a> </p> </li> </ul>
    rpc Post#ListBuilds(Post#ListBuildsRequest) returns (ListBuildsOutput) {
      option (google.api.http) = {
        post: "//#ListBuilds"
        body: "body"
      };
    }
    // <p>Retrieves a collection of fleet records for this AWS account. You can filter the result set by build ID. Use the pagination parameters to retrieve results in sequential pages.</p> <note> <p>Fleet records are not listed in any particular order.</p> </note> <p>Fleet-related operations include:</p> <ul> <li> <p> <a>CreateFleet</a> </p> </li> <li> <p> <a>ListFleets</a> </p> </li> <li> <p>Describe fleets:</p> <ul> <li> <p> <a>DescribeFleetAttributes</a> </p> </li> <li> <p> <a>DescribeFleetPortSettings</a> </p> </li> <li> <p> <a>DescribeFleetUtilization</a> </p> </li> <li> <p> <a>DescribeRuntimeConfiguration</a> </p> </li> <li> <p> <a>DescribeFleetEvents</a> </p> </li> </ul> </li> <li> <p>Update fleets:</p> <ul> <li> <p> <a>UpdateFleetAttributes</a> </p> </li> <li> <p> <a>UpdateFleetCapacity</a> </p> </li> <li> <p> <a>UpdateFleetPortSettings</a> </p> </li> <li> <p> <a>UpdateRuntimeConfiguration</a> </p> </li> </ul> </li> <li> <p>Manage fleet capacity:</p> <ul> <li> <p> <a>DescribeFleetCapacity</a> </p> </li> <li> <p> <a>UpdateFleetCapacity</a> </p> </li> <li> <p> <a>PutScalingPolicy</a> (automatic scaling)</p> </li> <li> <p> <a>DescribeScalingPolicies</a> (automatic scaling)</p> </li> <li> <p> <a>DeleteScalingPolicy</a> (automatic scaling)</p> </li> <li> <p> <a>DescribeEC2InstanceLimits</a> </p> </li> </ul> </li> <li> <p> <a>DeleteFleet</a> </p> </li> </ul>
    rpc Post#ListFleets(Post#ListFleetsRequest) returns (ListFleetsOutput) {
      option (google.api.http) = {
        post: "//#ListFleets"
        body: "body"
      };
    }
    // <p>Creates or updates a scaling policy for a fleet. An active scaling policy prompts Amazon GameLift to track a certain metric for a fleet and automatically change the fleet's capacity in specific circumstances. Each scaling policy contains one rule statement. Fleets can have multiple scaling policies in force simultaneously.</p> <p>A scaling policy rule statement has the following structure:</p> <p>If <code>[MetricName]</code> is <code>[ComparisonOperator]</code> <code>[Threshold]</code> for <code>[EvaluationPeriods]</code> minutes, then <code>[ScalingAdjustmentType]</code> to/by <code>[ScalingAdjustment]</code>.</p> <p>For example, this policy: "If the number of idle instances exceeds 20 for more than 15 minutes, then reduce the fleet capacity by 10 instances" could be implemented as the following rule statement:</p> <p>If [IdleInstances] is [GreaterThanOrEqualToThreshold] [20] for [15] minutes, then [ChangeInCapacity] by [-10].</p> <p>To create or update a scaling policy, specify a unique combination of name and fleet ID, and set the rule values. All parameters for this action are required. If successful, the policy name is returned. Scaling policies cannot be suspended or made inactive. To stop enforcing a scaling policy, call <a>DeleteScalingPolicy</a>.</p> <p>Fleet-related operations include:</p> <ul> <li> <p> <a>CreateFleet</a> </p> </li> <li> <p> <a>ListFleets</a> </p> </li> <li> <p>Describe fleets:</p> <ul> <li> <p> <a>DescribeFleetAttributes</a> </p> </li> <li> <p> <a>DescribeFleetPortSettings</a> </p> </li> <li> <p> <a>DescribeFleetUtilization</a> </p> </li> <li> <p> <a>DescribeRuntimeConfiguration</a> </p> </li> <li> <p> <a>DescribeFleetEvents</a> </p> </li> </ul> </li> <li> <p>Update fleets:</p> <ul> <li> <p> <a>UpdateFleetAttributes</a> </p> </li> <li> <p> <a>UpdateFleetCapacity</a> </p> </li> <li> <p> <a>UpdateFleetPortSettings</a> </p> </li> <li> <p> <a>UpdateRuntimeConfiguration</a> </p> </li> </ul> </li> <li> <p>Manage fleet capacity:</p> <ul> <li> <p> <a>DescribeFleetCapacity</a> </p> </li> <li> <p> <a>UpdateFleetCapacity</a> </p> </li> <li> <p> <a>PutScalingPolicy</a> (automatic scaling)</p> </li> <li> <p> <a>DescribeScalingPolicies</a> (automatic scaling)</p> </li> <li> <p> <a>DeleteScalingPolicy</a> (automatic scaling)</p> </li> <li> <p> <a>DescribeEC2InstanceLimits</a> </p> </li> </ul> </li> <li> <p> <a>DeleteFleet</a> </p> </li> </ul>
    rpc Post#PutScalingPolicy(Post#PutScalingPolicyRequest) returns (PutScalingPolicyOutput) {
      option (google.api.http) = {
        post: "//#PutScalingPolicy"
        body: "body"
      };
    }
    //  <i>This API call is not currently in use. </i> Retrieves a fresh set of upload credentials and the assigned Amazon S3 storage location for a specific build. Valid credentials are required to upload your game build files to Amazon S3.
    rpc Post#RequestUploadCredentials(Post#RequestUploadCredentialsRequest) returns (RequestUploadCredentialsOutput) {
      option (google.api.http) = {
        post: "//#RequestUploadCredentials"
        body: "body"
      };
    }
    // <p>Retrieves the fleet ID that a specified alias is currently pointing to.</p> <p>Alias-related operations include:</p> <ul> <li> <p> <a>CreateAlias</a> </p> </li> <li> <p> <a>ListAliases</a> </p> </li> <li> <p> <a>DescribeAlias</a> </p> </li> <li> <p> <a>UpdateAlias</a> </p> </li> <li> <p> <a>DeleteAlias</a> </p> </li> <li> <p> <a>ResolveAlias</a> </p> </li> </ul>
    rpc Post#ResolveAlias(Post#ResolveAliasRequest) returns (ResolveAliasOutput) {
      option (google.api.http) = {
        post: "//#ResolveAlias"
        body: "body"
      };
    }
    // <p>Retrieves a set of game sessions that match a set of search criteria and sorts them in a specified order. A game session search is limited to a single fleet. Search results include only game sessions that are in <code>ACTIVE</code> status. If you need to retrieve game sessions with a status other than active, use <a>DescribeGameSessions</a>. If you need to retrieve the protection policy for each game session, use <a>DescribeGameSessionDetails</a>.</p> <p>You can search or sort by the following game session attributes:</p> <ul> <li> <p> <b>gameSessionId</b> -- Unique identifier for the game session. You can use either a <code>GameSessionId</code> or <code>GameSessionArn</code> value. </p> </li> <li> <p> <b>gameSessionName</b> -- Name assigned to a game session. This value is set when requesting a new game session with <a>CreateGameSession</a> or updating with <a>UpdateGameSession</a>. Game session names do not need to be unique to a game session.</p> </li> <li> <p> <b>creationTimeMillis</b> -- Value indicating when a game session was created. It is expressed in Unix time as milliseconds.</p> </li> <li> <p> <b>playerSessionCount</b> -- Number of players currently connected to a game session. This value changes rapidly as players join the session or drop out.</p> </li> <li> <p> <b>maximumSessions</b> -- Maximum number of player sessions allowed for a game session. This value is set when requesting a new game session with <a>CreateGameSession</a> or updating with <a>UpdateGameSession</a>.</p> </li> <li> <p> <b>hasAvailablePlayerSessions</b> -- Boolean value indicating whether a game session has reached its maximum number of players. When searching with this attribute, the search value must be <code>true</code> or <code>false</code>. It is highly recommended that all search requests include this filter attribute to optimize search performance and return only sessions that players can join. </p> </li> </ul> <p>To search or sort, specify either a fleet ID or an alias ID, and provide a search filter expression, a sort expression, or both. Use the pagination parameters to retrieve results as a set of sequential pages. If successful, a collection of <a>GameSession</a> objects matching the request is returned.</p> <note> <p>Returned values for <code>playerSessionCount</code> and <code>hasAvailablePlayerSessions</code> change quickly as players join sessions and others drop out. Results should be considered a snapshot in time. Be sure to refresh search results often, and handle sessions that fill up before a player can join. </p> </note> <p>Game-session-related operations include:</p> <ul> <li> <p> <a>CreateGameSession</a> </p> </li> <li> <p> <a>DescribeGameSessions</a> </p> </li> <li> <p> <a>DescribeGameSessionDetails</a> </p> </li> <li> <p> <a>SearchGameSessions</a> </p> </li> <li> <p> <a>UpdateGameSession</a> </p> </li> <li> <p> <a>GetGameSessionLogUrl</a> </p> </li> <li> <p>Game session placements</p> <ul> <li> <p> <a>StartGameSessionPlacement</a> </p> </li> <li> <p> <a>DescribeGameSessionPlacement</a> </p> </li> <li> <p> <a>StopGameSessionPlacement</a> </p> </li> </ul> </li> </ul>
    rpc Post#SearchGameSessions(Post#SearchGameSessionsRequest) returns (SearchGameSessionsOutput) {
      option (google.api.http) = {
        post: "//#SearchGameSessions"
        body: "body"
      };
    }
    // <p>Places a request for a new game session in a queue (see <a>CreateGameSessionQueue</a>). When processing a placement request, Amazon GameLift searches for available resources on the queue's destinations, scanning each until it finds resources or the placement request times out.</p> <p>A game session placement request can also request player sessions. When a new game session is successfully created, Amazon GameLift creates a player session for each player included in the request.</p> <p>When placing a game session, by default Amazon GameLift tries each fleet in the order they are listed in the queue configuration. Ideally, a queue's destinations are listed in preference order.</p> <p>Alternatively, when requesting a game session with players, you can also provide latency data for each player in relevant regions. Latency data indicates the performance lag a player experiences when connected to a fleet in the region. Amazon GameLift uses latency data to reorder the list of destinations to place the game session in a region with minimal lag. If latency data is provided for multiple players, Amazon GameLift calculates each region's average lag for all players and reorders to get the best game play across all players. </p> <p>To place a new game session request, specify the following:</p> <ul> <li> <p>The queue name and a set of game session properties and settings</p> </li> <li> <p>A unique ID (such as a UUID) for the placement. You use this ID to track the status of the placement request</p> </li> <li> <p>(Optional) A set of IDs and player data for each player you want to join to the new game session</p> </li> <li> <p>Latency data for all players (if you want to optimize game play for the players)</p> </li> </ul> <p>If successful, a new game session placement is created.</p> <p>To track the status of a placement request, call <a>DescribeGameSessionPlacement</a> and check the request's status. If the status is <code>FULFILLED</code>, a new game session has been created and a game session ARN and region are referenced. If the placement request times out, you can resubmit the request or retry it with a different queue. </p> <p>Game-session-related operations include:</p> <ul> <li> <p> <a>CreateGameSession</a> </p> </li> <li> <p> <a>DescribeGameSessions</a> </p> </li> <li> <p> <a>DescribeGameSessionDetails</a> </p> </li> <li> <p> <a>SearchGameSessions</a> </p> </li> <li> <p> <a>UpdateGameSession</a> </p> </li> <li> <p> <a>GetGameSessionLogUrl</a> </p> </li> <li> <p>Game session placements</p> <ul> <li> <p> <a>StartGameSessionPlacement</a> </p> </li> <li> <p> <a>DescribeGameSessionPlacement</a> </p> </li> <li> <p> <a>StopGameSessionPlacement</a> </p> </li> </ul> </li> </ul>
    rpc Post#StartGameSessionPlacement(Post#StartGameSessionPlacementRequest) returns (StartGameSessionPlacementOutput) {
      option (google.api.http) = {
        post: "//#StartGameSessionPlacement"
        body: "body"
      };
    }
    // <p>Uses FlexMatch to create a game match for a group of players based on custom matchmaking rules, and starts a new game for the matched players. Each matchmaking request specifies the type of match to build (team configuration, rules for an acceptable match, etc.). The request also specifies the players to find a match for and where to host the new game session for optimal performance. A matchmaking request might start with a single player or a group of players who want to play together. FlexMatch finds additional players as needed to fill the match. Match type, rules, and the queue used to place a new game session are defined in a <code>MatchmakingConfiguration</code>. For complete information on setting up and using FlexMatch, see the topic <a href="http://docs.aws.amazon.com/gamelift/latest/developerguide/match-intro.html"> Adding FlexMatch to Your Game</a>.</p> <p>To start matchmaking, provide a unique ticket ID, specify a matchmaking configuration, and include the players to be matched. You must also include a set of player attributes relevant for the matchmaking configuration. If successful, a matchmaking ticket is returned with status set to <code>QUEUED</code>. Track the status of the ticket to respond as needed and acquire game session connection information for successfully completed matches.</p> <p> <b>Tracking ticket status</b> -- A couple of options are available for tracking the status of matchmaking requests: </p> <ul> <li> <p>Polling -- Call <code>DescribeMatchmaking</code>. This operation returns the full ticket object, including current status and (for completed tickets) game session connection info. We recommend polling no more than once every 10 seconds.</p> </li> <li> <p>Notifications -- Get event notifications for changes in ticket status using Amazon Simple Notification Service (SNS). Notifications are easy to set up (see <a>CreateMatchmakingConfiguration</a>) and typically deliver match status changes faster and more efficiently than polling. We recommend that you use polling to back up to notifications (since delivery is not guaranteed) and call <code>DescribeMatchmaking</code> only when notifications are not received within 30 seconds.</p> </li> </ul> <p> <b>Processing a matchmaking request</b> -- FlexMatch handles a matchmaking request as follows: </p> <ol> <li> <p>Your client code submits a <code>StartMatchmaking</code> request for one or more players and tracks the status of the request ticket. </p> </li> <li> <p>FlexMatch uses this ticket and others in process to build an acceptable match. When a potential match is identified, all tickets in the proposed match are advanced to the next status. </p> </li> <li> <p>If the match requires player acceptance (set in the matchmaking configuration), the tickets move into status <code>REQUIRES_ACCEPTANCE</code>. This status triggers your client code to solicit acceptance from all players in every ticket involved in the match, and then call <a>AcceptMatch</a> for each player. If any player rejects or fails to accept the match before a specified timeout, the proposed match is dropped (see <code>AcceptMatch</code> for more details).</p> </li> <li> <p>Once a match is proposed and accepted, the matchmaking tickets move into status <code>PLACING</code>. FlexMatch locates resources for a new game session using the game session queue (set in the matchmaking configuration) and creates the game session based on the match data. </p> </li> <li> <p>When the match is successfully placed, the matchmaking tickets move into <code>COMPLETED</code> status. Connection information (including game session endpoint and player session) is added to the matchmaking tickets. Matched players can use the connection information to join the game. </p> </li> </ol> <p>Matchmaking-related operations include:</p> <ul> <li> <p> <a>StartMatchmaking</a> </p> </li> <li> <p> <a>DescribeMatchmaking</a> </p> </li> <li> <p> <a>StopMatchmaking</a> </p> </li> <li> <p> <a>AcceptMatch</a> </p> </li> </ul>
    rpc Post#StartMatchmaking(Post#StartMatchmakingRequest) returns (StartMatchmakingOutput) {
      option (google.api.http) = {
        post: "//#StartMatchmaking"
        body: "body"
      };
    }
    // <p>Cancels a game session placement that is in <code>PENDING</code> status. To stop a placement, provide the placement ID values. If successful, the placement is moved to <code>CANCELLED</code> status.</p> <p>Game-session-related operations include:</p> <ul> <li> <p> <a>CreateGameSession</a> </p> </li> <li> <p> <a>DescribeGameSessions</a> </p> </li> <li> <p> <a>DescribeGameSessionDetails</a> </p> </li> <li> <p> <a>SearchGameSessions</a> </p> </li> <li> <p> <a>UpdateGameSession</a> </p> </li> <li> <p> <a>GetGameSessionLogUrl</a> </p> </li> <li> <p>Game session placements</p> <ul> <li> <p> <a>StartGameSessionPlacement</a> </p> </li> <li> <p> <a>DescribeGameSessionPlacement</a> </p> </li> <li> <p> <a>StopGameSessionPlacement</a> </p> </li> </ul> </li> </ul>
    rpc Post#StopGameSessionPlacement(Post#StopGameSessionPlacementRequest) returns (StopGameSessionPlacementOutput) {
      option (google.api.http) = {
        post: "//#StopGameSessionPlacement"
        body: "body"
      };
    }
    // <p>Cancels a matchmaking ticket that is currently being processed. To stop the matchmaking operation, specify the ticket ID. If successful, work on the ticket is stopped, and the ticket status is changed to <code>CANCELLED</code>.</p> <p>Matchmaking-related operations include:</p> <ul> <li> <p> <a>StartMatchmaking</a> </p> </li> <li> <p> <a>DescribeMatchmaking</a> </p> </li> <li> <p> <a>StopMatchmaking</a> </p> </li> <li> <p> <a>AcceptMatch</a> </p> </li> </ul>
    rpc Post#StopMatchmaking(Post#StopMatchmakingRequest) returns (StopMatchmakingOutput) {
      option (google.api.http) = {
        post: "//#StopMatchmaking"
        body: "body"
      };
    }
    // <p>Updates properties for an alias. To update properties, specify the alias ID to be updated and provide the information to be changed. To reassign an alias to another fleet, provide an updated routing strategy. If successful, the updated alias record is returned.</p> <p>Alias-related operations include:</p> <ul> <li> <p> <a>CreateAlias</a> </p> </li> <li> <p> <a>ListAliases</a> </p> </li> <li> <p> <a>DescribeAlias</a> </p> </li> <li> <p> <a>UpdateAlias</a> </p> </li> <li> <p> <a>DeleteAlias</a> </p> </li> <li> <p> <a>ResolveAlias</a> </p> </li> </ul>
    rpc Post#UpdateAlias(Post#UpdateAliasRequest) returns (UpdateAliasOutput) {
      option (google.api.http) = {
        post: "//#UpdateAlias"
        body: "body"
      };
    }
    // <p>Updates metadata in a build record, including the build name and version. To update the metadata, specify the build ID to update and provide the new values. If successful, a build object containing the updated metadata is returned.</p> <p>Build-related operations include:</p> <ul> <li> <p> <a>CreateBuild</a> </p> </li> <li> <p> <a>ListBuilds</a> </p> </li> <li> <p> <a>DescribeBuild</a> </p> </li> <li> <p> <a>UpdateBuild</a> </p> </li> <li> <p> <a>DeleteBuild</a> </p> </li> </ul>
    rpc Post#UpdateBuild(Post#UpdateBuildRequest) returns (UpdateBuildOutput) {
      option (google.api.http) = {
        post: "//#UpdateBuild"
        body: "body"
      };
    }
    // <p>Updates fleet properties, including name and description, for a fleet. To update metadata, specify the fleet ID and the property values that you want to change. If successful, the fleet ID for the updated fleet is returned.</p> <p>Fleet-related operations include:</p> <ul> <li> <p> <a>CreateFleet</a> </p> </li> <li> <p> <a>ListFleets</a> </p> </li> <li> <p>Describe fleets:</p> <ul> <li> <p> <a>DescribeFleetAttributes</a> </p> </li> <li> <p> <a>DescribeFleetPortSettings</a> </p> </li> <li> <p> <a>DescribeFleetUtilization</a> </p> </li> <li> <p> <a>DescribeRuntimeConfiguration</a> </p> </li> <li> <p> <a>DescribeFleetEvents</a> </p> </li> </ul> </li> <li> <p>Update fleets:</p> <ul> <li> <p> <a>UpdateFleetAttributes</a> </p> </li> <li> <p> <a>UpdateFleetCapacity</a> </p> </li> <li> <p> <a>UpdateFleetPortSettings</a> </p> </li> <li> <p> <a>UpdateRuntimeConfiguration</a> </p> </li> </ul> </li> <li> <p>Manage fleet capacity:</p> <ul> <li> <p> <a>DescribeFleetCapacity</a> </p> </li> <li> <p> <a>UpdateFleetCapacity</a> </p> </li> <li> <p> <a>PutScalingPolicy</a> (automatic scaling)</p> </li> <li> <p> <a>DescribeScalingPolicies</a> (automatic scaling)</p> </li> <li> <p> <a>DeleteScalingPolicy</a> (automatic scaling)</p> </li> <li> <p> <a>DescribeEC2InstanceLimits</a> </p> </li> </ul> </li> <li> <p> <a>DeleteFleet</a> </p> </li> </ul>
    rpc Post#UpdateFleetAttributes(Post#UpdateFleetAttributesRequest) returns (UpdateFleetAttributesOutput) {
      option (google.api.http) = {
        post: "//#UpdateFleetAttributes"
        body: "body"
      };
    }
    // <p>Updates capacity settings for a fleet. Use this action to specify the number of EC2 instances (hosts) that you want this fleet to contain. Before calling this action, you may want to call <a>DescribeEC2InstanceLimits</a> to get the maximum capacity based on the fleet's EC2 instance type.</p> <p>If you're using autoscaling (see <a>PutScalingPolicy</a>), you may want to specify a minimum and/or maximum capacity. If you don't provide these, autoscaling can set capacity anywhere between zero and the <a href="http://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html#limits_gamelift">service limits</a>.</p> <p>To update fleet capacity, specify the fleet ID and the number of instances you want the fleet to host. If successful, Amazon GameLift starts or terminates instances so that the fleet's active instance count matches the desired instance count. You can view a fleet's current capacity information by calling <a>DescribeFleetCapacity</a>. If the desired instance count is higher than the instance type's limit, the "Limit Exceeded" exception occurs.</p> <p>Fleet-related operations include:</p> <ul> <li> <p> <a>CreateFleet</a> </p> </li> <li> <p> <a>ListFleets</a> </p> </li> <li> <p>Describe fleets:</p> <ul> <li> <p> <a>DescribeFleetAttributes</a> </p> </li> <li> <p> <a>DescribeFleetPortSettings</a> </p> </li> <li> <p> <a>DescribeFleetUtilization</a> </p> </li> <li> <p> <a>DescribeRuntimeConfiguration</a> </p> </li> <li> <p> <a>DescribeFleetEvents</a> </p> </li> </ul> </li> <li> <p>Update fleets:</p> <ul> <li> <p> <a>UpdateFleetAttributes</a> </p> </li> <li> <p> <a>UpdateFleetCapacity</a> </p> </li> <li> <p> <a>UpdateFleetPortSettings</a> </p> </li> <li> <p> <a>UpdateRuntimeConfiguration</a> </p> </li> </ul> </li> <li> <p>Manage fleet capacity:</p> <ul> <li> <p> <a>DescribeFleetCapacity</a> </p> </li> <li> <p> <a>UpdateFleetCapacity</a> </p> </li> <li> <p> <a>PutScalingPolicy</a> (automatic scaling)</p> </li> <li> <p> <a>DescribeScalingPolicies</a> (automatic scaling)</p> </li> <li> <p> <a>DeleteScalingPolicy</a> (automatic scaling)</p> </li> <li> <p> <a>DescribeEC2InstanceLimits</a> </p> </li> </ul> </li> <li> <p> <a>DeleteFleet</a> </p> </li> </ul>
    rpc Post#UpdateFleetCapacity(Post#UpdateFleetCapacityRequest) returns (UpdateFleetCapacityOutput) {
      option (google.api.http) = {
        post: "//#UpdateFleetCapacity"
        body: "body"
      };
    }
    // <p>Updates port settings for a fleet. To update settings, specify the fleet ID to be updated and list the permissions you want to update. List the permissions you want to add in <code>InboundPermissionAuthorizations</code>, and permissions you want to remove in <code>InboundPermissionRevocations</code>. Permissions to be removed must match existing fleet permissions. If successful, the fleet ID for the updated fleet is returned.</p> <p>Fleet-related operations include:</p> <ul> <li> <p> <a>CreateFleet</a> </p> </li> <li> <p> <a>ListFleets</a> </p> </li> <li> <p>Describe fleets:</p> <ul> <li> <p> <a>DescribeFleetAttributes</a> </p> </li> <li> <p> <a>DescribeFleetPortSettings</a> </p> </li> <li> <p> <a>DescribeFleetUtilization</a> </p> </li> <li> <p> <a>DescribeRuntimeConfiguration</a> </p> </li> <li> <p> <a>DescribeFleetEvents</a> </p> </li> </ul> </li> <li> <p>Update fleets:</p> <ul> <li> <p> <a>UpdateFleetAttributes</a> </p> </li> <li> <p> <a>UpdateFleetCapacity</a> </p> </li> <li> <p> <a>UpdateFleetPortSettings</a> </p> </li> <li> <p> <a>UpdateRuntimeConfiguration</a> </p> </li> </ul> </li> <li> <p>Manage fleet capacity:</p> <ul> <li> <p> <a>DescribeFleetCapacity</a> </p> </li> <li> <p> <a>UpdateFleetCapacity</a> </p> </li> <li> <p> <a>PutScalingPolicy</a> (automatic scaling)</p> </li> <li> <p> <a>DescribeScalingPolicies</a> (automatic scaling)</p> </li> <li> <p> <a>DeleteScalingPolicy</a> (automatic scaling)</p> </li> <li> <p> <a>DescribeEC2InstanceLimits</a> </p> </li> </ul> </li> <li> <p> <a>DeleteFleet</a> </p> </li> </ul>
    rpc Post#UpdateFleetPortSettings(Post#UpdateFleetPortSettingsRequest) returns (UpdateFleetPortSettingsOutput) {
      option (google.api.http) = {
        post: "//#UpdateFleetPortSettings"
        body: "body"
      };
    }
    // <p>Updates game session properties. This includes the session name, maximum player count, protection policy, which controls whether or not an active game session can be terminated during a scale-down event, and the player session creation policy, which controls whether or not new players can join the session. To update a game session, specify the game session ID and the values you want to change. If successful, an updated <a>GameSession</a> object is returned. </p> <p>Game-session-related operations include:</p> <ul> <li> <p> <a>CreateGameSession</a> </p> </li> <li> <p> <a>DescribeGameSessions</a> </p> </li> <li> <p> <a>DescribeGameSessionDetails</a> </p> </li> <li> <p> <a>SearchGameSessions</a> </p> </li> <li> <p> <a>UpdateGameSession</a> </p> </li> <li> <p> <a>GetGameSessionLogUrl</a> </p> </li> <li> <p>Game session placements</p> <ul> <li> <p> <a>StartGameSessionPlacement</a> </p> </li> <li> <p> <a>DescribeGameSessionPlacement</a> </p> </li> <li> <p> <a>StopGameSessionPlacement</a> </p> </li> </ul> </li> </ul>
    rpc Post#UpdateGameSession(Post#UpdateGameSessionRequest) returns (UpdateGameSessionOutput) {
      option (google.api.http) = {
        post: "//#UpdateGameSession"
        body: "body"
      };
    }
    // <p>Updates settings for a game session queue, which determines how new game session requests in the queue are processed. To update settings, specify the queue name to be updated and provide the new settings. When updating destinations, provide a complete list of destinations. </p> <p>Queue-related operations include:</p> <ul> <li> <p> <a>CreateGameSessionQueue</a> </p> </li> <li> <p> <a>DescribeGameSessionQueues</a> </p> </li> <li> <p> <a>UpdateGameSessionQueue</a> </p> </li> <li> <p> <a>DeleteGameSessionQueue</a> </p> </li> </ul>
    rpc Post#UpdateGameSessionQueue(Post#UpdateGameSessionQueueRequest) returns (UpdateGameSessionQueueOutput) {
      option (google.api.http) = {
        post: "//#UpdateGameSessionQueue"
        body: "body"
      };
    }
    // <p>Updates settings for a FlexMatch matchmaking configuration. To update settings, specify the configuration name to be updated and provide the new settings. </p> <p>Operations related to match configurations and rule sets include:</p> <ul> <li> <p> <a>CreateMatchmakingConfiguration</a> </p> </li> <li> <p> <a>DescribeMatchmakingConfigurations</a> </p> </li> <li> <p> <a>UpdateMatchmakingConfiguration</a> </p> </li> <li> <p> <a>DeleteMatchmakingConfiguration</a> </p> </li> <li> <p> <a>CreateMatchmakingRuleSet</a> </p> </li> <li> <p> <a>DescribeMatchmakingRuleSets</a> </p> </li> <li> <p> <a>ValidateMatchmakingRuleSet</a> </p> </li> </ul>
    rpc Post#UpdateMatchmakingConfiguration(Post#UpdateMatchmakingConfigurationRequest) returns (UpdateMatchmakingConfigurationOutput) {
      option (google.api.http) = {
        post: "//#UpdateMatchmakingConfiguration"
        body: "body"
      };
    }
    // <p>Updates the current run-time configuration for the specified fleet, which tells Amazon GameLift how to launch server processes on instances in the fleet. You can update a fleet's run-time configuration at any time after the fleet is created; it does not need to be in an <code>ACTIVE</code> status.</p> <p>To update run-time configuration, specify the fleet ID and provide a <code>RuntimeConfiguration</code> object with the updated collection of server process configurations.</p> <p>Each instance in a Amazon GameLift fleet checks regularly for an updated run-time configuration and changes how it launches server processes to comply with the latest version. Existing server processes are not affected by the update; they continue to run until they end, while Amazon GameLift simply adds new server processes to fit the current run-time configuration. As a result, the run-time configuration changes are applied gradually as existing processes shut down and new processes are launched in Amazon GameLift's normal process recycling activity.</p> <p>Fleet-related operations include:</p> <ul> <li> <p> <a>CreateFleet</a> </p> </li> <li> <p> <a>ListFleets</a> </p> </li> <li> <p>Describe fleets:</p> <ul> <li> <p> <a>DescribeFleetAttributes</a> </p> </li> <li> <p> <a>DescribeFleetPortSettings</a> </p> </li> <li> <p> <a>DescribeFleetUtilization</a> </p> </li> <li> <p> <a>DescribeRuntimeConfiguration</a> </p> </li> <li> <p> <a>DescribeFleetEvents</a> </p> </li> </ul> </li> <li> <p>Update fleets:</p> <ul> <li> <p> <a>UpdateFleetAttributes</a> </p> </li> <li> <p> <a>UpdateFleetCapacity</a> </p> </li> <li> <p> <a>UpdateFleetPortSettings</a> </p> </li> <li> <p> <a>UpdateRuntimeConfiguration</a> </p> </li> </ul> </li> <li> <p>Manage fleet capacity:</p> <ul> <li> <p> <a>DescribeFleetCapacity</a> </p> </li> <li> <p> <a>UpdateFleetCapacity</a> </p> </li> <li> <p> <a>PutScalingPolicy</a> (automatic scaling)</p> </li> <li> <p> <a>DescribeScalingPolicies</a> (automatic scaling)</p> </li> <li> <p> <a>DeleteScalingPolicy</a> (automatic scaling)</p> </li> <li> <p> <a>DescribeEC2InstanceLimits</a> </p> </li> </ul> </li> <li> <p> <a>DeleteFleet</a> </p> </li> </ul>
    rpc Post#UpdateRuntimeConfiguration(Post#UpdateRuntimeConfigurationRequest) returns (UpdateRuntimeConfigurationOutput) {
      option (google.api.http) = {
        post: "//#UpdateRuntimeConfiguration"
        body: "body"
      };
    }
    // <p>Validates the syntax of a matchmaking rule or rule set. This operation checks that the rule set uses syntactically correct JSON and that it conforms to allowed property expressions. To validate syntax, provide a rule set string.</p> <p>Operations related to match configurations and rule sets include:</p> <ul> <li> <p> <a>CreateMatchmakingConfiguration</a> </p> </li> <li> <p> <a>DescribeMatchmakingConfigurations</a> </p> </li> <li> <p> <a>UpdateMatchmakingConfiguration</a> </p> </li> <li> <p> <a>DeleteMatchmakingConfiguration</a> </p> </li> <li> <p> <a>CreateMatchmakingRuleSet</a> </p> </li> <li> <p> <a>DescribeMatchmakingRuleSets</a> </p> </li> <li> <p> <a>ValidateMatchmakingRuleSet</a> </p> </li> </ul>
    rpc Post#ValidateMatchmakingRuleSet(Post#ValidateMatchmakingRuleSetRequest) returns (ValidateMatchmakingRuleSetOutput) {
      option (google.api.http) = {
        post: "//#ValidateMatchmakingRuleSet"
        body: "body"
      };
    }
}

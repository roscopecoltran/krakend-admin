syntax = "proto3";

import "google/api/annotations.proto";

package awsopsworksforchefautomate;

message PostRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AssociateNodeRequest body = 10;
}

message Post#CreateBackupRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateBackupRequest body = 10;
}

message Post#CreateServerRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateServerRequest body = 10;
}

message Post#DeleteBackupRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteBackupRequest body = 10;
}

message Post#DeleteServerRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteServerRequest body = 10;
}

message Post#DescribeAccountAttributesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeAccountAttributesRequest body = 10;
}

message Post#DescribeBackupsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeBackupsRequest body = 10;
}

message Post#DescribeEventsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeEventsRequest body = 10;
}

message Post#DescribeNodeAssociationStatusRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeNodeAssociationStatusRequest body = 10;
}

message Post#DescribeServersRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeServersRequest body = 10;
}

message Post#DisassociateNodeRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DisassociateNodeRequest body = 10;
}

message Post#RestoreServerRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RestoreServerRequest body = 10;
}

message Post#StartMaintenanceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StartMaintenanceRequest body = 10;
}

message Post#UpdateServerRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateServerRequest body = 10;
}

message Post#UpdateServerEngineAttributesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateServerEngineAttributesRequest body = 10;
}

message AccountAttribute {
    //  The maximum allowed value.
    integer Maximum = 1;
    // <p> The attribute name. The following are supported attribute names. </p> <ul> <li> <p> <i>ServerLimit:</i> The number of current servers/maximum number of servers allowed. By default, you can have a maximum of 10 servers. </p> </li> <li> <p> <i>ManualBackupLimit:</i> The number of current manual backups/maximum number of backups allowed. By default, you can have a maximum of 50 manual backups saved. </p> </li> </ul>
    string Name = 2;
    //  The current usage, such as the current number of servers that are associated with the account.
    integer Used = 3;
}

repeated AccountAttribute AccountAttributes = 1



message AssociateNodeRequest {
    // <p>Engine attributes used for associating the node. </p> <p class="title"> <b>Attributes accepted in a AssociateNode request:</b> </p> <ul> <li> <p> <code>CHEF_ORGANIZATION</code>: The Chef organization with which the node is associated. By default only one organization named <code>default</code> can exist. </p> </li> <li> <p> <code>CHEF_NODE_PUBLIC_KEY</code>: A PEM-formatted public key. This key is required for the <code>chef-client</code> agent to access the Chef API. </p> </li> </ul>
    array EngineAttributes = 1;
    // The name of the Chef client node.
    string NodeName = 2;
    // The name of the server with which to associate the node.
    string ServerName = 3;
}

message AssociateNodeResponse {
    // Contains a token which can be passed to the <code>DescribeNodeAssociationStatus</code> API call to get the status of the association request.
    string NodeAssociationStatusToken = 1;
}

message Backup {
    // The ARN of the backup.
    string BackupArn = 1;
    //  The generated ID of the backup. Example: <code>myServerName-yyyyMMddHHmmssSSS</code>
    string BackupId = 2;
    //  The backup type. Valid values are <code>automated</code> or <code>manual</code>.
    BackupType BackupType = 3;
    //  The time stamp when the backup was created in the database. Example: <code>2016-07-29T13:38:47.520Z</code>
    string CreatedAt = 4;
    //  A user-provided description for a manual backup. This field is empty for automated backups.
    string Description = 5;
    //  The engine type that is obtained from the server when the backup is created.
    string Engine = 6;
    //  The engine model that is obtained from the server when the backup is created.
    string EngineModel = 7;
    //  The engine version that is obtained from the server when the backup is created.
    string EngineVersion = 8;
    //  The EC2 instance profile ARN that is obtained from the server when the backup is created. Because this value is stored, you are not required to provide the InstanceProfileArn again if you restore a backup.
    string InstanceProfileArn = 9;
    //  The instance type that is obtained from the server when the backup is created.
    string InstanceType = 10;
    //  The key pair that is obtained from the server when the backup is created.
    string KeyPair = 11;
    //  The preferred backup period that is obtained from the server when the backup is created.
    string PreferredBackupWindow = 12;
    //  The preferred maintenance period that is obtained from the server when the backup is created.
    string PreferredMaintenanceWindow = 13;
    //  This field is deprecated and is no longer used.
    integer S3DataSize = 14;
    //  This field is deprecated and is no longer used.
    string S3DataUrl = 15;
    //  The Amazon S3 URL of the backup's log file.
    string S3LogUrl = 16;
    //  The security group IDs that are obtained from the server when the backup is created.
    array SecurityGroupIds = 17;
    //  The name of the server from which the backup was made.
    string ServerName = 18;
    //  The service role ARN that is obtained from the server when the backup is created.
    string ServiceRoleArn = 19;
    // The status of a backup while in progress.
    BackupStatus Status = 20;
    //  An informational message about backup status.
    string StatusDescription = 21;
    //  The subnet IDs that are obtained from the server when the backup is created.
    array SubnetIds = 22;
    //  The version of AWS OpsWorks for Chef Automate-specific tools that is obtained from the server when the backup is created.
    string ToolsVersion = 23;
    //  The IAM user ARN of the requester for manual backups. This field is empty for automated backups.
    string UserArn = 24;
}

enum BackupStatu {
    IN_PROGRESS = 0;
    OK = 1;
    FAILED = 2;
    DELETING = 3;
}

enum BackupType {
    AUTOMATED = 0;
    MANUAL = 1;
}

repeated Backup Backups = 1



message CreateBackupRequest {
    //  A user-defined description of the backup.
    string Description = 1;
    // The name of the server that you want to back up.
    string ServerName = 2;
}

message CreateBackupResponse {
    // Backup created by request.
    Backup Backup = 1;
}

message CreateServerRequest {
    //  Associate a public IP address with a server that you are launching. Valid values are <code>true</code> or <code>false</code>. The default value is <code>true</code>.
    boolean AssociatePublicIpAddress = 1;
    //  If you specify this field, AWS OpsWorks for Chef Automate creates the server by using the backup represented by BackupId.
    string BackupId = 2;
    //  The number of automated backups that you want to keep. Whenever a new backup is created, AWS OpsWorks for Chef Automate deletes the oldest backups if this number is exceeded. The default value is <code>1</code>.
    integer BackupRetentionCount = 3;
    //  Enable or disable scheduled backups. Valid values are <code>true</code> or <code>false</code>. The default value is <code>true</code>.
    boolean DisableAutomatedBackup = 4;
    //  The configuration management engine to use. Valid values include <code>Chef</code>.
    string Engine = 5;
    // <p>Optional engine attributes on a specified server. </p> <p class="title"> <b>Attributes accepted in a createServer request:</b> </p> <ul> <li> <p> <code>CHEF_PIVOTAL_KEY</code>: A base64-encoded RSA private key that is not stored by AWS OpsWorks for Chef. This private key is required to access the Chef API. When no CHEF_PIVOTAL_KEY is set, one is generated and returned in the response. </p> </li> <li> <p> <code>CHEF_DELIVERY_ADMIN_PASSWORD</code>: The password for the administrative user in the Chef Automate GUI. The password length is a minimum of eight characters, and a maximum of 32. The password can contain letters, numbers, and special characters (!/@#$%^&amp;+=_). The password must contain at least one lower case letter, one upper case letter, one number, and one special character. When no CHEF_DELIVERY_ADMIN_PASSWORD is set, one is generated and returned in the response.</p> </li> </ul>
    array EngineAttributes = 6;
    //  The engine model, or option. Valid values include <code>Single</code>.
    string EngineModel = 7;
    //  The major release version of the engine that you want to use. Values depend on the engine that you choose.
    string EngineVersion = 8;
    //  The ARN of the instance profile that your Amazon EC2 instances use. Although the AWS OpsWorks console typically creates the instance profile for you, if you are using API commands instead, run the service-role-creation.yaml AWS CloudFormation template, located at https://s3.amazonaws.com/opsworks-cm-us-east-1-prod-default-assets/misc/opsworks-cm-roles.yaml. This template creates a CloudFormation stack that includes the instance profile you need.
    string InstanceProfileArn = 9;
    //  The Amazon EC2 instance type to use. Valid values must be specified in the following format: <code>^([cm][34]|t2).*</code> For example, <code>m4.large</code>. Valid values are <code>t2.medium</code>, <code>m4.large</code>, or <code>m4.2xlarge</code>.
    string InstanceType = 10;
    //  The Amazon EC2 key pair to set for the instance. This parameter is optional; if desired, you may specify this parameter to connect to your instances by using SSH.
    string KeyPair = 11;
    // <p> The start time for a one-hour period during which AWS OpsWorks for Chef Automate backs up application-level data on your server if automated backups are enabled. Valid values must be specified in one of the following formats: </p> <ul> <li> <p> <code>HH:MM</code> for daily backups</p> </li> <li> <p> <code>DDD:HH:MM</code> for weekly backups</p> </li> </ul> <p>The specified time is in coordinated universal time (UTC). The default value is a random, daily start time.</p> <p> <b>Example:</b> <code>08:00</code>, which represents a daily start time of 08:00 UTC.</p> <p> <b>Example:</b> <code>Mon:08:00</code>, which represents a start time of every Monday at 08:00 UTC. (8:00 a.m.)</p>
    string PreferredBackupWindow = 12;
    // <p> The start time for a one-hour period each week during which AWS OpsWorks for Chef Automate performs maintenance on the instance. Valid values must be specified in the following format: <code>DDD:HH:MM</code>. The specified time is in coordinated universal time (UTC). The default value is a random one-hour period on Tuesday, Wednesday, or Friday. See <code>TimeWindowDefinition</code> for more information. </p> <p> <b>Example:</b> <code>Mon:08:00</code>, which represents a start time of every Monday at 08:00 UTC. (8:00 a.m.) </p>
    string PreferredMaintenanceWindow = 13;
    // <p> A list of security group IDs to attach to the Amazon EC2 instance. If you add this parameter, the specified security groups must be within the VPC that is specified by <code>SubnetIds</code>. </p> <p> If you do not specify this parameter, AWS OpsWorks for Chef Automate creates one new security group that uses TCP ports 22 and 443, open to 0.0.0.0/0 (everyone). </p>
    array SecurityGroupIds = 14;
    //  The name of the server. The server name must be unique within your AWS account, within each region. Server names must start with a letter; then letters, numbers, or hyphens (-) are allowed, up to a maximum of 40 characters.
    string ServerName = 15;
    //  The service role that the AWS OpsWorks for Chef Automate service backend uses to work with your account. Although the AWS OpsWorks management console typically creates the service role for you, if you are using the AWS CLI or API commands, run the service-role-creation.yaml AWS CloudFormation template, located at https://s3.amazonaws.com/opsworks-stuff/latest/service-role-creation.yaml. This template creates a CloudFormation stack that includes the service role that you need.
    string ServiceRoleArn = 16;
    // <p> The IDs of subnets in which to launch the server EC2 instance. </p> <p> Amazon EC2-Classic customers: This field is required. All servers must run within a VPC. The VPC must have "Auto Assign Public IP" enabled. </p> <p> EC2-VPC customers: This field is optional. If you do not specify subnet IDs, your EC2 instances are created in a default subnet that is selected by Amazon EC2. If you specify subnet IDs, the VPC must have "Auto Assign Public IP" enabled. </p> <p>For more information about supported Amazon EC2 platforms, see <a href="http://docs.aws.amazon.com/https:/docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a>.</p>
    array SubnetIds = 17;
}

message CreateServerResponse {
    // The server that is created by the request.
    Server Server = 1;
}

message DeleteBackupRequest {
    // The ID of the backup to delete. Run the DescribeBackups command to get a list of backup IDs. Backup IDs are in the format <code>ServerName-yyyyMMddHHmmssSSS</code>.
    string BackupId = 1;
}

message DeleteBackupResponse {
}

message DeleteServerRequest {
    // The ID of the server to delete.
    string ServerName = 1;
}

message DeleteServerResponse {
}

message DescribeAccountAttributesRequest {
}

message DescribeAccountAttributesResponse {
    //  The attributes that are currently set for the account.
    array Attributes = 1;
}

message DescribeBackupsRequest {
    // Describes a single backup.
    string BackupId = 1;
    // To receive a paginated response, use this parameter to specify the maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a <code>NextToken</code> value that you can assign to the <code>NextToken</code> request parameter to get the next set of results.
    integer MaxResults = 2;
    // NextToken is a string that is returned in some command responses. It indicates that not all entries have been returned, and that you must run at least one more request to get remaining items. To get remaining results, call <code>DescribeBackups</code> again, and assign the token from the previous results as the value of the <code>nextToken</code> parameter. If there are no more results, the response object's <code>nextToken</code> parameter value is <code>null</code>. Setting a <code>nextToken</code> value that was not returned in your previous results causes an <code>InvalidNextTokenException</code> to occur.
    string NextToken = 3;
    // Returns backups for the server with the specified ServerName.
    string ServerName = 4;
}

message DescribeBackupsResponse {
    // Contains the response to a <code>DescribeBackups</code> request.
    array Backups = 1;
    // NextToken is a string that is returned in some command responses. It indicates that not all entries have been returned, and that you must run at least one more request to get remaining items. To get remaining results, call <code>DescribeBackups</code> again, and assign the token from the previous results as the value of the <code>nextToken</code> parameter. If there are no more results, the response object's <code>nextToken</code> parameter value is <code>null</code>. Setting a <code>nextToken</code> value that was not returned in your previous results causes an <code>InvalidNextTokenException</code> to occur.
    string NextToken = 2;
}

message DescribeEventsRequest {
    // To receive a paginated response, use this parameter to specify the maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a <code>NextToken</code> value that you can assign to the <code>NextToken</code> request parameter to get the next set of results.
    integer MaxResults = 1;
    // NextToken is a string that is returned in some command responses. It indicates that not all entries have been returned, and that you must run at least one more request to get remaining items. To get remaining results, call <code>DescribeEvents</code> again, and assign the token from the previous results as the value of the <code>nextToken</code> parameter. If there are no more results, the response object's <code>nextToken</code> parameter value is <code>null</code>. Setting a <code>nextToken</code> value that was not returned in your previous results causes an <code>InvalidNextTokenException</code> to occur.
    string NextToken = 2;
    // The name of the server for which you want to view events.
    string ServerName = 3;
}

message DescribeEventsResponse {
    // NextToken is a string that is returned in some command responses. It indicates that not all entries have been returned, and that you must run at least one more request to get remaining items. To get remaining results, call <code>DescribeEvents</code> again, and assign the token from the previous results as the value of the <code>nextToken</code> parameter. If there are no more results, the response object's <code>nextToken</code> parameter value is <code>null</code>. Setting a <code>nextToken</code> value that was not returned in your previous results causes an <code>InvalidNextTokenException</code> to occur.
    string NextToken = 1;
    // Contains the response to a <code>DescribeEvents</code> request.
    array ServerEvents = 2;
}

message DescribeNodeAssociationStatusRequest {
    string NodeAssociationStatusToken = 1;
    // The name of the server from which to disassociate the node.
    string ServerName = 2;
}

message DescribeNodeAssociationStatusResponse {
    // <p>The status of the association or disassociation request. </p> <p class="title"> <b>Possible values:</b> </p> <ul> <li> <p> <code>SUCCESS</code>: The association or disassociation succeeded. </p> </li> <li> <p> <code>FAILED</code>: The association or disassociation failed. </p> </li> <li> <p> <code>IN_PROGRESS</code>: The association or disassociation is still in progress. </p> </li> </ul>
    NodeAssociationStatus NodeAssociationStatus = 1;
}

message DescribeServersRequest {
    // To receive a paginated response, use this parameter to specify the maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a <code>NextToken</code> value that you can assign to the <code>NextToken</code> request parameter to get the next set of results.
    integer MaxResults = 1;
    // NextToken is a string that is returned in some command responses. It indicates that not all entries have been returned, and that you must run at least one more request to get remaining items. To get remaining results, call <code>DescribeServers</code> again, and assign the token from the previous results as the value of the <code>nextToken</code> parameter. If there are no more results, the response object's <code>nextToken</code> parameter value is <code>null</code>. Setting a <code>nextToken</code> value that was not returned in your previous results causes an <code>InvalidNextTokenException</code> to occur.
    string NextToken = 2;
    // Describes the server with the specified ServerName.
    string ServerName = 3;
}

message DescribeServersResponse {
    // NextToken is a string that is returned in some command responses. It indicates that not all entries have been returned, and that you must run at least one more request to get remaining items. To get remaining results, call <code>DescribeServers</code> again, and assign the token from the previous results as the value of the <code>nextToken</code> parameter. If there are no more results, the response object's <code>nextToken</code> parameter value is <code>null</code>. Setting a <code>nextToken</code> value that was not returned in your previous results causes an <code>InvalidNextTokenException</code> to occur.
    string NextToken = 1;
    // Contains the response to a <code>DescribeServers</code> request.
    array Servers = 2;
}

message DisassociateNodeRequest {
    // <p>Engine attributes used for disassociating the node. </p> <p class="title"> <b>Attributes accepted in a DisassociateNode request:</b> </p> <ul> <li> <p> <code>CHEF_ORGANIZATION</code>: The Chef organization with which the node was associated. By default only one organization named <code>default</code> can exist. </p> </li> </ul>
    array EngineAttributes = 1;
    // The name of the Chef client node.
    string NodeName = 2;
    // The name of the server from which to disassociate the node.
    string ServerName = 3;
}

message DisassociateNodeResponse {
    // Contains a token which can be passed to the <code>DescribeNodeAssociationStatus</code> API call to get the status of the disassociation request.
    string NodeAssociationStatusToken = 1;
}

message EngineAttribute {
    // The name of the engine attribute.
    string Name = 1;
    // The value of the engine attribute.
    string Value = 2;
}





repeated EngineAttribute EngineAttributes = 1





message InvalidNextTokenException {
    // Error or informational message that can contain more detail about a nextToken failure.
    string Message = 1;
}

message InvalidStateException {
    // Error or informational message that provides more detail if a resource is in a state that is not valid for performing a specified action.
    string Message = 1;
}

message LimitExceededException {
    // Error or informational message that the maximum allowed number of servers or backups has been exceeded.
    string Message = 1;
}

enum MaintenanceStatu {
    SUCCESS = 0;
    FAILED = 1;
}

enum NodeAssociationStatu {
    SUCCESS = 0;
    FAILED = 1;
    IN_PROGRESS = 2;
}

message ResourceAlreadyExistsException {
    // Error or informational message in response to a CreateServer request that a resource cannot be created because it already exists.
    string Message = 1;
}

message ResourceNotFoundException {
    // Error or informational message that can contain more detail about problems locating or accessing a resource.
    string Message = 1;
}

message RestoreServerRequest {
    //  The ID of the backup that you want to use to restore a server.
    string BackupId = 1;
    //  The type of the instance to create. Valid values must be specified in the following format: <code>^([cm][34]|t2).*</code> For example, <code>m4.large</code>. Valid values are <code>t2.medium</code>, <code>m4.large</code>, and <code>m4.2xlarge</code>. If you do not specify this parameter, RestoreServer uses the instance type from the specified backup.
    string InstanceType = 2;
    //  The name of the key pair to set on the new EC2 instance. This can be helpful if the administrator no longer has the SSH key.
    string KeyPair = 3;
    //  The name of the server that you want to restore.
    string ServerName = 4;
}

message RestoreServerResponse {
}

message Server {
    // Associate a public IP address with a server that you are launching.
    boolean AssociatePublicIpAddress = 1;
    // The number of automated backups to keep.
    integer BackupRetentionCount = 2;
    // The ARN of the CloudFormation stack that was used to create the server.
    string CloudFormationStackArn = 3;
    // Time stamp of server creation. Example <code>2016-07-29T13:38:47.520Z</code>
    string CreatedAt = 4;
    // Disables automated backups. The number of stored backups is dependent on the value of PreferredBackupCount.
    boolean DisableAutomatedBackup = 5;
    //  A DNS name that can be used to access the engine. Example: <code>myserver-asdfghjkl.us-east-1.opsworks.io</code>
    string Endpoint = 6;
    // The engine type of the server. The valid value in this release is <code>Chef</code>.
    string Engine = 7;
    // <p>The response of a createServer() request returns the master credential to access the server in EngineAttributes. These credentials are not stored by AWS OpsWorks for Chef Automate; they are returned only as part of the result of createServer(). </p> <p class="title"> <b>Attributes returned in a createServer response:</b> </p> <ul> <li> <p> <code>CHEF_PIVOTAL_KEY</code>: A base64-encoded RSA private key that is generated by AWS OpsWorks for Chef Automate. This private key is required to access the Chef API.</p> </li> <li> <p> <code>CHEF_STARTER_KIT</code>: A base64-encoded ZIP file. The ZIP file contains a Chef starter kit, which includes a README, a configuration file, and the required RSA private key. Save this file, unzip it, and then change to the directory where you've unzipped the file contents. From this directory, you can run Knife commands.</p> </li> </ul>
    array EngineAttributes = 8;
    // The engine model of the server. The valid value in this release is <code>Single</code>.
    string EngineModel = 9;
    // The engine version of the server. Because Chef is the engine available in this release, the valid value for EngineVersion is <code>12</code>.
    string EngineVersion = 10;
    // The instance profile ARN of the server.
    string InstanceProfileArn = 11;
    //  The instance type for the server, as specified in the CloudFormation stack. This might not be the same instance type that is shown in the EC2 console.
    string InstanceType = 12;
    // The key pair associated with the server.
    string KeyPair = 13;
    // The status of the most recent server maintenance run. Shows <code>SUCCESS</code> or <code>FAILED</code>.
    MaintenanceStatus MaintenanceStatus = 14;
    // The preferred backup period specified for the server.
    string PreferredBackupWindow = 15;
    // The preferred maintenance period specified for the server.
    string PreferredMaintenanceWindow = 16;
    //  The security group IDs for the server, as specified in the CloudFormation stack. These might not be the same security groups that are shown in the EC2 console.
    array SecurityGroupIds = 17;
    // The ARN of the server.
    string ServerArn = 18;
    // The name of the server.
    string ServerName = 19;
    // The service role ARN used to create the server.
    string ServiceRoleArn = 20;
    //  The server's status. This field displays the states of actions in progress, such as creating, running, or backing up the server, as well as the server's health state.
    ServerStatus Status = 21;
    //  Depending on the server status, this field has either a human-readable message (such as a create or backup error), or an escaped block of JSON (used for health check results).
    string StatusReason = 22;
    //  The subnet IDs specified in a CreateServer request.
    array SubnetIds = 23;
}

message ServerEvent {
    // The time when the event occurred.
    string CreatedAt = 1;
    // The Amazon S3 URL of the event's log file.
    string LogUrl = 2;
    // A human-readable informational or status message.
    string Message = 3;
    // The name of the server on or for which the event occurred.
    string ServerName = 4;
}

repeated ServerEvent ServerEvents = 1



enum ServerStatu {
    BACKING_UP = 0;
    CONNECTION_LOST = 1;
    CREATING = 2;
    DELETING = 3;
    MODIFYING = 4;
    FAILED = 5;
    HEALTHY = 6;
    RUNNING = 7;
    RESTORING = 8;
    SETUP = 9;
    UNDER_MAINTENANCE = 10;
    UNHEALTHY = 11;
    TERMINATED = 12;
}

repeated Server Servers = 1



message StartMaintenanceRequest {
    // The name of the server on which to run maintenance.
    string ServerName = 1;
}

message StartMaintenanceResponse {
    // Contains the response to a <code>StartMaintenance</code> request.
    Server Server = 1;
}



repeated string Strings = 1





message UpdateServerEngineAttributesRequest {
    // The name of the engine attribute to update.
    string AttributeName = 1;
    // The value to set for the attribute.
    string AttributeValue = 2;
    // The name of the server to update.
    string ServerName = 3;
}

message UpdateServerEngineAttributesResponse {
    // Contains the response to an <code>UpdateServerEngineAttributes</code> request.
    Server Server = 1;
}

message UpdateServerRequest {
    // Sets the number of automated backups that you want to keep.
    integer BackupRetentionCount = 1;
    // Setting DisableAutomatedBackup to <code>true</code> disables automated or scheduled backups. Automated backups are enabled by default.
    boolean DisableAutomatedBackup = 2;
    string PreferredBackupWindow = 3;
    string PreferredMaintenanceWindow = 4;
    // The name of the server to update.
    string ServerName = 5;
}

message UpdateServerResponse {
    // Contains the response to a <code>UpdateServer</code> request.
    Server Server = 1;
}

message ValidationException {
    // Error or informational message that can contain more detail about a validation failure.
    string Message = 1;
}

service AWSOpsWorksForChefAutomateService {
    // <p> Associates a new node with the Chef server. This command is an alternative to <code>knife bootstrap</code>. For more information about how to disassociate a node, see <a>DisassociateNode</a>.</p> <p> A node can can only be associated with servers that are in a <code>HEALTHY</code> state. Otherwise, an <code>InvalidStateException</code> is thrown. A <code>ResourceNotFoundException</code> is thrown when the server does not exist. A <code>ValidationException</code> is raised when parameters of the request are not valid. The AssociateNode API call can be integrated into Auto Scaling configurations, AWS Cloudformation templates, or the user data of a server's instance. </p> <p> Example: <code>aws opsworks-cm associate-node --server-name <i>MyServer</i> --node-name <i>MyManagedNode</i> --engine-attributes "Name=<i>MyOrganization</i>,Value=default" "Name=<i>Chef_node_public_key</i>,Value=<i>Public_key_contents</i>"</code> </p>
    rpc Post(PostRequest) returns (AssociateNodeResponse) {
      option (google.api.http) = {
        post: "//"
        body: "body"
      };
    }
    // <p> Creates an application-level backup of a server. While the server is in the <code>BACKING_UP</code> state, the server cannot be changed, and no additional backup can be created. </p> <p> Backups can be created for servers in <code>RUNNING</code>, <code>HEALTHY</code>, and <code>UNHEALTHY</code> states. By default, you can create a maximum of 50 manual backups. </p> <p> This operation is asynchronous. </p> <p> A <code>LimitExceededException</code> is thrown when the maximum number of manual backups is reached. An <code>InvalidStateException</code> is thrown when the server is not in any of the following states: RUNNING, HEALTHY, or UNHEALTHY. A <code>ResourceNotFoundException</code> is thrown when the server is not found. A <code>ValidationException</code> is thrown when parameters of the request are not valid. </p>
    rpc Post#CreateBackup(Post#CreateBackupRequest) returns (CreateBackupResponse) {
      option (google.api.http) = {
        post: "//#CreateBackup"
        body: "body"
      };
    }
    // <p> Creates and immedately starts a new server. The server is ready to use when it is in the <code>HEALTHY</code> state. By default, you can create a maximum of 10 servers. </p> <p> This operation is asynchronous. </p> <p> A <code>LimitExceededException</code> is thrown when you have created the maximum number of servers (10). A <code>ResourceAlreadyExistsException</code> is thrown when a server with the same name already exists in the account. A <code>ResourceNotFoundException</code> is thrown when you specify a backup ID that is not valid or is for a backup that does not exist. A <code>ValidationException</code> is thrown when parameters of the request are not valid. </p> <p> If you do not specify a security group by adding the <code>SecurityGroupIds</code> parameter, AWS OpsWorks creates a new security group. The default security group opens the Chef server to the world on TCP port 443. If a KeyName is present, AWS OpsWorks enables SSH access. SSH is also open to the world on TCP port 22. </p> <p>By default, the Chef Server is accessible from any IP address. We recommend that you update your security group rules to allow access from known IP addresses and address ranges only. To edit security group rules, open Security Groups in the navigation pane of the EC2 management console. </p>
    rpc Post#CreateServer(Post#CreateServerRequest) returns (CreateServerResponse) {
      option (google.api.http) = {
        post: "//#CreateServer"
        body: "body"
      };
    }
    // <p> Deletes a backup. You can delete both manual and automated backups. This operation is asynchronous. </p> <p> An <code>InvalidStateException</code> is thrown when a backup deletion is already in progress. A <code>ResourceNotFoundException</code> is thrown when the backup does not exist. A <code>ValidationException</code> is thrown when parameters of the request are not valid. </p>
    rpc Post#DeleteBackup(Post#DeleteBackupRequest) returns (DeleteBackupResponse) {
      option (google.api.http) = {
        post: "//#DeleteBackup"
        body: "body"
      };
    }
    // <p> Deletes the server and the underlying AWS CloudFormation stack (including the server's EC2 instance). When you run this command, the server state is updated to <code>DELETING</code>. After the server is deleted, it is no longer returned by <code>DescribeServer</code> requests. If the AWS CloudFormation stack cannot be deleted, the server cannot be deleted. </p> <p> This operation is asynchronous. </p> <p> An <code>InvalidStateException</code> is thrown when a server deletion is already in progress. A <code>ResourceNotFoundException</code> is thrown when the server does not exist. A <code>ValidationException</code> is raised when parameters of the request are not valid. </p> <p> </p>
    rpc Post#DeleteServer(Post#DeleteServerRequest) returns (DeleteServerResponse) {
      option (google.api.http) = {
        post: "//#DeleteServer"
        body: "body"
      };
    }
    // <p> Describes your account attributes, and creates requests to increase limits before they are reached or exceeded. </p> <p> This operation is synchronous. </p>
    rpc Post#DescribeAccountAttributes(Post#DescribeAccountAttributesRequest) returns (DescribeAccountAttributesResponse) {
      option (google.api.http) = {
        post: "//#DescribeAccountAttributes"
        body: "body"
      };
    }
    // <p> Describes backups. The results are ordered by time, with newest backups first. If you do not specify a BackupId or ServerName, the command returns all backups. </p> <p> This operation is synchronous. </p> <p> A <code>ResourceNotFoundException</code> is thrown when the backup does not exist. A <code>ValidationException</code> is raised when parameters of the request are not valid. </p>
    rpc Post#DescribeBackups(Post#DescribeBackupsRequest) returns (DescribeBackupsResponse) {
      option (google.api.http) = {
        post: "//#DescribeBackups"
        body: "body"
      };
    }
    // <p> Describes events for a specified server. Results are ordered by time, with newest events first. </p> <p> This operation is synchronous. </p> <p> A <code>ResourceNotFoundException</code> is thrown when the server does not exist. A <code>ValidationException</code> is raised when parameters of the request are not valid. </p>
    rpc Post#DescribeEvents(Post#DescribeEventsRequest) returns (DescribeEventsResponse) {
      option (google.api.http) = {
        post: "//#DescribeEvents"
        body: "body"
      };
    }
    // <p> Returns the current status of an existing association or disassociation request. </p> <p> A <code>ResourceNotFoundException</code> is thrown when no recent association or disassociation request with the specified token is found, or when the server does not exist. A <code>ValidationException</code> is raised when parameters of the request are not valid. </p>
    rpc Post#DescribeNodeAssociationStatus(Post#DescribeNodeAssociationStatusRequest) returns (DescribeNodeAssociationStatusResponse) {
      option (google.api.http) = {
        post: "//#DescribeNodeAssociationStatus"
        body: "body"
      };
    }
    // <p> Lists all configuration management servers that are identified with your account. Only the stored results from Amazon DynamoDB are returned. AWS OpsWorks for Chef Automate does not query other services. </p> <p> This operation is synchronous. </p> <p> A <code>ResourceNotFoundException</code> is thrown when the server does not exist. A <code>ValidationException</code> is raised when parameters of the request are not valid. </p>
    rpc Post#DescribeServers(Post#DescribeServersRequest) returns (DescribeServersResponse) {
      option (google.api.http) = {
        post: "//#DescribeServers"
        body: "body"
      };
    }
    // <p> Disassociates a node from a Chef server, and removes the node from the Chef server's managed nodes. After a node is disassociated, the node key pair is no longer valid for accessing the Chef API. For more information about how to associate a node, see <a>AssociateNode</a>. </p> <p>A node can can only be disassociated from a server that is in a <code>HEALTHY</code> state. Otherwise, an <code>InvalidStateException</code> is thrown. A <code>ResourceNotFoundException</code> is thrown when the server does not exist. A <code>ValidationException</code> is raised when parameters of the request are not valid. </p>
    rpc Post#DisassociateNode(Post#DisassociateNodeRequest) returns (DisassociateNodeResponse) {
      option (google.api.http) = {
        post: "//#DisassociateNode"
        body: "body"
      };
    }
    // <p> Restores a backup to a server that is in a <code>CONNECTION_LOST</code>, <code>HEALTHY</code>, <code>RUNNING</code>, <code>UNHEALTHY</code>, or <code>TERMINATED</code> state. When you run RestoreServer, the server's EC2 instance is deleted, and a new EC2 instance is configured. RestoreServer maintains the existing server endpoint, so configuration management of the server's client devices (nodes) should continue to work. </p> <p> This operation is asynchronous. </p> <p> An <code>InvalidStateException</code> is thrown when the server is not in a valid state. A <code>ResourceNotFoundException</code> is thrown when the server does not exist. A <code>ValidationException</code> is raised when parameters of the request are not valid. </p>
    rpc Post#RestoreServer(Post#RestoreServerRequest) returns (RestoreServerResponse) {
      option (google.api.http) = {
        post: "//#RestoreServer"
        body: "body"
      };
    }
    // <p> Manually starts server maintenance. This command can be useful if an earlier maintenance attempt failed, and the underlying cause of maintenance failure has been resolved. The server is in an <code>UNDER_MAINTENANCE</code> state while maintenance is in progress. </p> <p> Maintenance can only be started on servers in <code>HEALTHY</code> and <code>UNHEALTHY</code> states. Otherwise, an <code>InvalidStateException</code> is thrown. A <code>ResourceNotFoundException</code> is thrown when the server does not exist. A <code>ValidationException</code> is raised when parameters of the request are not valid. </p>
    rpc Post#StartMaintenance(Post#StartMaintenanceRequest) returns (StartMaintenanceResponse) {
      option (google.api.http) = {
        post: "//#StartMaintenance"
        body: "body"
      };
    }
    // <p> Updates settings for a server. </p> <p> This operation is synchronous. </p>
    rpc Post#UpdateServer(Post#UpdateServerRequest) returns (UpdateServerResponse) {
      option (google.api.http) = {
        post: "//#UpdateServer"
        body: "body"
      };
    }
    // <p> Updates engine-specific attributes on a specified server. The server enters the <code>MODIFYING</code> state when this operation is in progress. Only one update can occur at a time. You can use this command to reset the Chef server's private key (<code>CHEF_PIVOTAL_KEY</code>). </p> <p> This operation is asynchronous. </p> <p> This operation can only be called for servers in <code>HEALTHY</code> or <code>UNHEALTHY</code> states. Otherwise, an <code>InvalidStateException</code> is raised. A <code>ResourceNotFoundException</code> is thrown when the server does not exist. A <code>ValidationException</code> is raised when parameters of the request are not valid. </p>
    rpc Post#UpdateServerEngineAttributes(Post#UpdateServerEngineAttributesRequest) returns (UpdateServerEngineAttributesResponse) {
      option (google.api.http) = {
        post: "//#UpdateServerEngineAttributes"
        body: "body"
      };
    }
}

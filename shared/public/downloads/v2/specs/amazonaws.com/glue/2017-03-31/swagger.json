{
  "swagger": "2.0",
  "schemes": [
    "http"
  ],
  "host": "glue.amazonaws.com",
  "basePath": "/",
  "x-hasEquivalentPaths": true,
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi"
    },
    "description": "Defines service operations used by the GlueFrontendService",
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "AWS Glue",
    "version": "2017-03-31",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": [
      "cloud"
    ],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_media.amazonwebservices.com_blog_2007_big_pbaws_logo_300px.jpg"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": {
          "url": "https://github.com/mermade/aws2openapi",
          "version": "1.0.0"
        },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/glue-2017-03-31.normal.json",
        "x-apisguru-direct": true
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "glue"
  },
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://aws.amazon.com/glue/"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "hmac": {
      "description": "Amazon Signature authorization v4",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey",
      "x-amazon-apigateway-authtype": "awsSigv4"
    }
  },
  "security": [
    {
      "hmac": []
    }
  ],
  "parameters": {
    "Action": {
      "in": "header",
      "name": "Action",
      "required": true,
      "type": "string"
    },
    "Version": {
      "in": "header",
      "name": "Version",
      "required": true,
      "type": "string"
    },
    "X-Amz-Algorithm": {
      "in": "header",
      "name": "X-Amz-Algorithm",
      "required": false,
      "type": "string"
    },
    "X-Amz-Content-Sha256": {
      "in": "header",
      "name": "X-Amz-Content-Sha256",
      "required": false,
      "type": "string"
    },
    "X-Amz-Credential": {
      "in": "header",
      "name": "X-Amz-Credential",
      "required": false,
      "type": "string"
    },
    "X-Amz-Date": {
      "in": "header",
      "name": "X-Amz-Date",
      "required": false,
      "type": "string"
    },
    "X-Amz-Security-Token": {
      "in": "header",
      "name": "X-Amz-Security-Token",
      "required": false,
      "type": "string"
    },
    "X-Amz-Signature": {
      "in": "header",
      "name": "X-Amz-Signature",
      "required": false,
      "type": "string"
    },
    "X-Amz-SignedHeaders": {
      "in": "header",
      "name": "X-Amz-SignedHeaders",
      "required": false,
      "type": "string"
    }
  },
  "paths": {
    "/": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates one or more partitions in a batch operation.",
        "operationId": "BatchCreatePartition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchCreatePartitionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchCreatePartitionResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "AlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/AlreadyExistsException"
            }
          },
          "482": {
            "description": "ResourceNumberLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceNumberLimitExceededException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "484": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "485": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#BatchDeleteConnection": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Deletes a list of connection definitions from the Data Catalog.",
        "operationId": "BatchDeleteConnection",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchDeleteConnectionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchDeleteConnectionResponse"
            }
          },
          "480": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "481": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#BatchDeletePartition": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Deletes one or more partitions in a batch operation.",
        "operationId": "BatchDeletePartition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchDeletePartitionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchDeletePartitionResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#BatchDeleteTable": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Deletes multiple tables at once.",
        "operationId": "BatchDeleteTable",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchDeleteTableRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchDeleteTableResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#BatchGetPartition": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieves partitions in a batch request.",
        "operationId": "BatchGetPartition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchGetPartitionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchGetPartitionResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          }
        }
      }
    },
    "/#CreateClassifier": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a <code>Classifier</code> in the user's account.",
        "operationId": "CreateClassifier",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateClassifierRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateClassifierResponse"
            }
          },
          "480": {
            "description": "AlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/AlreadyExistsException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#CreateConnection": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a connection definition in the Data Catalog.",
        "operationId": "CreateConnection",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateConnectionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateConnectionResponse"
            }
          },
          "480": {
            "description": "AlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/AlreadyExistsException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#CreateCrawler": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a new <code>Crawler</code> with specified targets, role, configuration, and optional schedule. At least one crawl target must be specified, in either the <i>s3Targets</i> or the <i>jdbcTargets</i> field.",
        "operationId": "CreateCrawler",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCrawlerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateCrawlerResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "AlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/AlreadyExistsException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "ResourceNumberLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceNumberLimitExceededException"
            }
          }
        }
      }
    },
    "/#CreateDatabase": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a new database in a Data Catalog.",
        "operationId": "CreateDatabase",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDatabaseRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateDatabaseResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "AlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/AlreadyExistsException"
            }
          },
          "482": {
            "description": "ResourceNumberLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceNumberLimitExceededException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "484": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#CreateDevEndpoint": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a new DevEndpoint.",
        "operationId": "CreateDevEndpoint",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDevEndpointRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateDevEndpointResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "AlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/AlreadyExistsException"
            }
          },
          "482": {
            "description": "IdempotentParameterMismatchException",
            "schema": {
              "$ref": "#/definitions/IdempotentParameterMismatchException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "484": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "485": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "486": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "487": {
            "description": "ResourceNumberLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceNumberLimitExceededException"
            }
          }
        }
      }
    },
    "/#CreateJob": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a new job.",
        "operationId": "CreateJob",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateJobResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "IdempotentParameterMismatchException",
            "schema": {
              "$ref": "#/definitions/IdempotentParameterMismatchException"
            }
          },
          "482": {
            "description": "AlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/AlreadyExistsException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "484": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "485": {
            "description": "ResourceNumberLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceNumberLimitExceededException"
            }
          }
        }
      }
    },
    "/#CreatePartition": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a new partition.",
        "operationId": "CreatePartition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreatePartitionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreatePartitionResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "AlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/AlreadyExistsException"
            }
          },
          "482": {
            "description": "ResourceNumberLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceNumberLimitExceededException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "484": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "485": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#CreateScript": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Transforms a directed acyclic graph (DAG) into a Python script.",
        "operationId": "CreateScript",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateScriptRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateScriptResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#CreateTable": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a new table definition in the Data Catalog.",
        "operationId": "CreateTable",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTableRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateTableResponse"
            }
          },
          "480": {
            "description": "AlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/AlreadyExistsException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "483": {
            "description": "ResourceNumberLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceNumberLimitExceededException"
            }
          },
          "484": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "485": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#CreateTrigger": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a new trigger.",
        "operationId": "CreateTrigger",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTriggerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateTriggerResponse"
            }
          },
          "480": {
            "description": "AlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/AlreadyExistsException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "484": {
            "description": "ResourceNumberLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceNumberLimitExceededException"
            }
          }
        }
      }
    },
    "/#CreateUserDefinedFunction": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a new function definition in the Data Catalog.",
        "operationId": "CreateUserDefinedFunction",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUserDefinedFunctionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateUserDefinedFunctionResponse"
            }
          },
          "480": {
            "description": "AlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/AlreadyExistsException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "484": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#DeleteClassifier": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Removes a <code>Classifier</code> from the metadata store.",
        "operationId": "DeleteClassifier",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteClassifierRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteClassifierResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#DeleteConnection": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Deletes a connection from the Data Catalog.",
        "operationId": "DeleteConnection",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteConnectionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteConnectionResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#DeleteCrawler": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Removes a specified <code>Crawler</code> from the metadata store, unless the <code>Crawler</code> state is <code>RUNNING</code>.",
        "operationId": "DeleteCrawler",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteCrawlerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteCrawlerResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "CrawlerRunningException",
            "schema": {
              "$ref": "#/definitions/CrawlerRunningException"
            }
          },
          "482": {
            "description": "SchedulerTransitioningException",
            "schema": {
              "$ref": "#/definitions/SchedulerTransitioningException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#DeleteDatabase": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Removes a specified Database from a Data Catalog.",
        "operationId": "DeleteDatabase",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteDatabaseRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteDatabaseResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#DeleteDevEndpoint": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Deletes a specified DevEndpoint.",
        "operationId": "DeleteDevEndpoint",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteDevEndpointRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteDevEndpointResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          }
        }
      }
    },
    "/#DeleteJob": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Deletes a specified job.",
        "operationId": "DeleteJob",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteJobResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#DeletePartition": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Deletes a specified partition.",
        "operationId": "DeletePartition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeletePartitionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeletePartitionResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#DeleteTable": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Removes a table definition from the Data Catalog.",
        "operationId": "DeleteTable",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteTableRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteTableResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#DeleteTrigger": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Deletes a specified trigger.",
        "operationId": "DeleteTrigger",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteTriggerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteTriggerResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#DeleteUserDefinedFunction": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Deletes an existing function definition from the Data Catalog.",
        "operationId": "DeleteUserDefinedFunction",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteUserDefinedFunctionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteUserDefinedFunctionResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#GetCatalogImportStatus": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieves the status of a migration operation.",
        "operationId": "GetCatalogImportStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetCatalogImportStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetCatalogImportStatusResponse"
            }
          },
          "480": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "481": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#GetClassifier": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieve a <code>Classifier</code> by name.",
        "operationId": "GetClassifier",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetClassifierRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetClassifierResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#GetClassifiers": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Lists all Classifier objects in the metadata store.",
        "operationId": "GetClassifiers",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetClassifiersRequest"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetClassifiersResponse"
            }
          },
          "480": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#GetConnection": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieves a connection definition from the Data Catalog.",
        "operationId": "GetConnection",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetConnectionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetConnectionResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#GetConnections": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieves a list of connection definitions from the Data Catalog.",
        "operationId": "GetConnections",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetConnectionsRequest"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetConnectionsResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#GetCrawler": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieves metadata for a specified <code>Crawler</code>.",
        "operationId": "GetCrawler",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetCrawlerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetCrawlerResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#GetCrawlerMetrics": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieves metrics about specified crawlers.",
        "operationId": "GetCrawlerMetrics",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetCrawlerMetricsRequest"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetCrawlerMetricsResponse"
            }
          },
          "480": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#GetCrawlers": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieves metadata for all <code>Crawlers</code> defined in the customer account.",
        "operationId": "GetCrawlers",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetCrawlersRequest"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetCrawlersResponse"
            }
          },
          "480": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#GetDatabase": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieves the definition of a specified database.",
        "operationId": "GetDatabase",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDatabaseRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDatabaseResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#GetDatabases": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieves all Databases defined in a given Data Catalog.",
        "operationId": "GetDatabases",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDatabasesRequest"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDatabasesResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#GetDataflowGraph": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Transforms a Python script into a directed acyclic graph (DAG). ",
        "operationId": "GetDataflowGraph",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDataflowGraphRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDataflowGraphResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#GetDevEndpoint": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieves information about a specified DevEndpoint.",
        "operationId": "GetDevEndpoint",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDevEndpointRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDevEndpointResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          }
        }
      }
    },
    "/#GetDevEndpoints": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieves all the DevEndpoints in this AWS account.",
        "operationId": "GetDevEndpoints",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDevEndpointsRequest"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDevEndpointsResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          }
        }
      }
    },
    "/#GetJob": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieves an existing job definition.",
        "operationId": "GetJob",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetJobResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#GetJobRun": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieves the metadata for a given job run.",
        "operationId": "GetJobRun",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetJobRunRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetJobRunResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#GetJobRuns": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieves metadata for all runs of a given job.",
        "operationId": "GetJobRuns",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetJobRunsRequest"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetJobRunsResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#GetJobs": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieves all current jobs.",
        "operationId": "GetJobs",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetJobsRequest"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetJobsResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#GetMapping": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates mappings.",
        "operationId": "GetMapping",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetMappingRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetMappingResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#GetPartition": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieves information about a specified partition.",
        "operationId": "GetPartition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetPartitionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetPartitionResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#GetPartitions": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieves information about the partitions in a table.",
        "operationId": "GetPartitions",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetPartitionsRequest"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetPartitionsResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          }
        }
      }
    },
    "/#GetPlan": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Gets a Python script to perform a specified mapping.",
        "operationId": "GetPlan",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetPlanRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetPlanResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#GetTable": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieves the <code>Table</code> definition in a Data Catalog for a specified table.",
        "operationId": "GetTable",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetTableRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetTableResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#GetTableVersions": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieves a list of strings that identify available versions of a specified table.",
        "operationId": "GetTableVersions",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetTableVersionsRequest"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetTableVersionsResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#GetTables": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieves the definitions of some or all of the tables in a given <code>Database</code>.",
        "operationId": "GetTables",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetTablesRequest"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetTablesResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          }
        }
      }
    },
    "/#GetTrigger": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieves the definition of a trigger.",
        "operationId": "GetTrigger",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetTriggerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetTriggerResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#GetTriggers": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Gets all the triggers associated with a job.",
        "operationId": "GetTriggers",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetTriggersRequest"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetTriggersResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#GetUserDefinedFunction": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieves a specified function definition from the Data Catalog.",
        "operationId": "GetUserDefinedFunction",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetUserDefinedFunctionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetUserDefinedFunctionResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#GetUserDefinedFunctions": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieves a multiple function definitions from the Data Catalog.",
        "operationId": "GetUserDefinedFunctions",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetUserDefinedFunctionsRequest"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetUserDefinedFunctionsResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          }
        }
      }
    },
    "/#ImportCatalogToGlue": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Imports an existing Athena Data Catalog to AWS Glue",
        "operationId": "ImportCatalogToGlue",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImportCatalogToGlueRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ImportCatalogToGlueResponse"
            }
          },
          "480": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "481": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#ResetJobBookmark": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Resets a bookmark entry.",
        "operationId": "ResetJobBookmark",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResetJobBookmarkRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ResetJobBookmarkResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#StartCrawler": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Starts a crawl using the specified <code>Crawler</code>, regardless of what is scheduled. If the <code>Crawler</code> is already running, does nothing.",
        "operationId": "StartCrawler",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartCrawlerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StartCrawlerResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "CrawlerRunningException",
            "schema": {
              "$ref": "#/definitions/CrawlerRunningException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#StartCrawlerSchedule": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Changes the schedule state of the specified crawler to <code>SCHEDULED</code>, unless the crawler is already running or the schedule state is already <code>SCHEDULED</code>.",
        "operationId": "StartCrawlerSchedule",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartCrawlerScheduleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StartCrawlerScheduleResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "SchedulerRunningException",
            "schema": {
              "$ref": "#/definitions/SchedulerRunningException"
            }
          },
          "482": {
            "description": "SchedulerTransitioningException",
            "schema": {
              "$ref": "#/definitions/SchedulerTransitioningException"
            }
          },
          "483": {
            "description": "NoScheduleException",
            "schema": {
              "$ref": "#/definitions/NoScheduleException"
            }
          },
          "484": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#StartJobRun": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Runs a job.",
        "operationId": "StartJobRun",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartJobRunRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StartJobRunResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "484": {
            "description": "ResourceNumberLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceNumberLimitExceededException"
            }
          },
          "485": {
            "description": "ConcurrentRunsExceededException",
            "schema": {
              "$ref": "#/definitions/ConcurrentRunsExceededException"
            }
          }
        }
      }
    },
    "/#StartTrigger": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Starts an existing trigger.",
        "operationId": "StartTrigger",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartTriggerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StartTriggerResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "482": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "484": {
            "description": "ResourceNumberLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceNumberLimitExceededException"
            }
          },
          "485": {
            "description": "ConcurrentRunsExceededException",
            "schema": {
              "$ref": "#/definitions/ConcurrentRunsExceededException"
            }
          }
        }
      }
    },
    "/#StopCrawler": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "If the specified <code>Crawler</code> is running, stops the crawl.",
        "operationId": "StopCrawler",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StopCrawlerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StopCrawlerResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "CrawlerNotRunningException",
            "schema": {
              "$ref": "#/definitions/CrawlerNotRunningException"
            }
          },
          "482": {
            "description": "CrawlerStoppingException",
            "schema": {
              "$ref": "#/definitions/CrawlerStoppingException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#StopCrawlerSchedule": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Sets the schedule state of the specified crawler to <code>NOT_SCHEDULED</code>, but does not stop the crawler if it is already running.",
        "operationId": "StopCrawlerSchedule",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StopCrawlerScheduleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StopCrawlerScheduleResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "SchedulerNotRunningException",
            "schema": {
              "$ref": "#/definitions/SchedulerNotRunningException"
            }
          },
          "482": {
            "description": "SchedulerTransitioningException",
            "schema": {
              "$ref": "#/definitions/SchedulerTransitioningException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#StopTrigger": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Stops a specified trigger.",
        "operationId": "StopTrigger",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StopTriggerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StopTriggerResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "482": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#UpdateClassifier": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Modifies an existing <code>Classifier</code>.",
        "operationId": "UpdateClassifier",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateClassifierRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateClassifierResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "VersionMismatchException",
            "schema": {
              "$ref": "#/definitions/VersionMismatchException"
            }
          },
          "482": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#UpdateConnection": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Updates a connection definition in the Data Catalog.",
        "operationId": "UpdateConnection",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateConnectionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateConnectionResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#UpdateCrawler": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Updates a <code>Crawler</code>. If a <code>Crawler</code> is running, you must stop it using <code>StopCrawler</code> before updating it.",
        "operationId": "UpdateCrawler",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCrawlerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateCrawlerResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "VersionMismatchException",
            "schema": {
              "$ref": "#/definitions/VersionMismatchException"
            }
          },
          "482": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "483": {
            "description": "CrawlerRunningException",
            "schema": {
              "$ref": "#/definitions/CrawlerRunningException"
            }
          },
          "484": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#UpdateCrawlerSchedule": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Updates the schedule of a crawler using a Cron expression. ",
        "operationId": "UpdateCrawlerSchedule",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCrawlerScheduleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateCrawlerScheduleResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "VersionMismatchException",
            "schema": {
              "$ref": "#/definitions/VersionMismatchException"
            }
          },
          "483": {
            "description": "SchedulerTransitioningException",
            "schema": {
              "$ref": "#/definitions/SchedulerTransitioningException"
            }
          },
          "484": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#UpdateDatabase": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Updates an existing database definition in a Data Catalog.",
        "operationId": "UpdateDatabase",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDatabaseRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateDatabaseResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#UpdateDevEndpoint": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Updates a specified DevEndpoint.",
        "operationId": "UpdateDevEndpoint",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDevEndpointRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateDevEndpointResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "484": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          }
        }
      }
    },
    "/#UpdateJob": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Updates an existing job definition.",
        "operationId": "UpdateJob",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateJobResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#UpdatePartition": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Updates a partition.",
        "operationId": "UpdatePartition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePartitionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdatePartitionResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#UpdateTable": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Updates a metadata table in the Data Catalog.",
        "operationId": "UpdateTable",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateTableRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateTableResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "484": {
            "description": "ConcurrentModificationException",
            "schema": {
              "$ref": "#/definitions/ConcurrentModificationException"
            }
          }
        }
      }
    },
    "/#UpdateTrigger": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Updates a trigger definition.",
        "operationId": "UpdateTrigger",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateTriggerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateTriggerResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "482": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    },
    "/#UpdateUserDefinedFunction": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Updates an existing function definition in the Data Catalog.",
        "operationId": "UpdateUserDefinedFunction",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserDefinedFunctionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateUserDefinedFunctionResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AccessDeniedException": {
      "description": "Access to a resource was denied.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/MessageString",
          "description": "A message describing the problem."
        }
      },
      "type": "object"
    },
    "Action": {
      "properties": {
        "Arguments": {
          "$ref": "#/definitions/GenericMap"
        },
        "JobName": {
          "$ref": "#/definitions/NameString"
        }
      },
      "type": "object"
    },
    "ActionList": {
      "items": {
        "$ref": "#/definitions/Action"
      },
      "type": "array"
    },
    "AlreadyExistsException": {
      "description": "A resource to be created or added already exists.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/MessageString",
          "description": "A message describing the problem."
        }
      },
      "type": "object"
    },
    "AttemptCount": {
      "type": "integer"
    },
    "BatchCreatePartitionRequest": {
      "properties": {
        "CatalogId": {
          "$ref": "#/definitions/CatalogIdString",
          "description": "The ID of the catalog in which the partion is to be created. Currently, this should be the AWS account ID."
        },
        "DatabaseName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the metadata database in which the partition is to be created."
        },
        "PartitionInputList": {
          "$ref": "#/definitions/PartitionInputList",
          "description": "A list of <code>PartitionInput</code> structures that define the partitions to be created."
        },
        "TableName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the metadata table in which the partition is to be created."
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "PartitionInputList"
      ],
      "type": "object"
    },
    "BatchCreatePartitionResponse": {
      "properties": {
        "Errors": {
          "$ref": "#/definitions/PartitionErrors",
          "description": "Errors encountered when trying to create the requested partitions."
        }
      },
      "type": "object"
    },
    "BatchDeleteConnectionRequest": {
      "properties": {
        "CatalogId": {
          "$ref": "#/definitions/CatalogIdString",
          "description": "The ID of the Data Catalog in which the connections reside. If none is supplied, the AWS account ID is used by default."
        },
        "ConnectionNameList": {
          "$ref": "#/definitions/DeleteConnectionNameList",
          "description": "A list of names of the connections to delete."
        }
      },
      "required": [
        "ConnectionNameList"
      ],
      "type": "object"
    },
    "BatchDeleteConnectionResponse": {
      "properties": {
        "Errors": {
          "$ref": "#/definitions/ErrorByName",
          "description": "A map of the names of connections that were not successfully deleted to error details."
        },
        "Succeeded": {
          "$ref": "#/definitions/NameStringList",
          "description": "A list of names of the connection definitions that were successfully deleted."
        }
      },
      "type": "object"
    },
    "BatchDeletePartitionRequest": {
      "properties": {
        "CatalogId": {
          "$ref": "#/definitions/CatalogIdString",
          "description": "The ID of the Data Catalog where the partition to be deleted resides. If none is supplied, the AWS account ID is used by default."
        },
        "DatabaseName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the catalog database in which the table in question resides."
        },
        "PartitionsToDelete": {
          "$ref": "#/definitions/BatchDeletePartitionValueList",
          "description": "A list of <code>PartitionInput</code> structures that define the partitions to be deleted."
        },
        "TableName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the table where the partitions to be deleted is located."
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "PartitionsToDelete"
      ],
      "type": "object"
    },
    "BatchDeletePartitionResponse": {
      "properties": {
        "Errors": {
          "$ref": "#/definitions/PartitionErrors",
          "description": "Errors encountered when trying to delete the requested partitions."
        }
      },
      "type": "object"
    },
    "BatchDeletePartitionValueList": {
      "items": {
        "$ref": "#/definitions/PartitionValueList"
      },
      "maxItems": 25,
      "minItems": 0,
      "type": "array"
    },
    "BatchDeleteTableNameList": {
      "items": {
        "$ref": "#/definitions/NameString"
      },
      "maxItems": 100,
      "minItems": 0,
      "type": "array"
    },
    "BatchDeleteTableRequest": {
      "properties": {
        "CatalogId": {
          "$ref": "#/definitions/CatalogIdString",
          "description": "The ID of the Data Catalog where the table resides. If none is supplied, the AWS account ID is used by default."
        },
        "DatabaseName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the catalog database where the tables to delete reside."
        },
        "TablesToDelete": {
          "$ref": "#/definitions/BatchDeleteTableNameList",
          "description": "A list of the table to delete."
        }
      },
      "required": [
        "DatabaseName",
        "TablesToDelete"
      ],
      "type": "object"
    },
    "BatchDeleteTableResponse": {
      "properties": {
        "Errors": {
          "$ref": "#/definitions/TableErrors",
          "description": "A list of errors encountered in attempting to delete the specified tables."
        }
      },
      "type": "object"
    },
    "BatchGetPartitionRequest": {
      "properties": {
        "CatalogId": {
          "$ref": "#/definitions/CatalogIdString",
          "description": "The ID of the Data Catalog where the partitions in question reside. If none is supplied, the AWS account ID is used by default."
        },
        "DatabaseName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the catalog database where the partitions reside."
        },
        "PartitionsToGet": {
          "$ref": "#/definitions/BatchGetPartitionValueList",
          "description": "A list of partition values identifying the partitions to retrieve."
        },
        "TableName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the partitions' table."
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "PartitionsToGet"
      ],
      "type": "object"
    },
    "BatchGetPartitionResponse": {
      "properties": {
        "Partitions": {
          "$ref": "#/definitions/PartitionList",
          "description": "A list of the requested partitions."
        },
        "UnprocessedKeys": {
          "$ref": "#/definitions/BatchGetPartitionValueList",
          "description": "A list of the partition values in the request for which partions were not returned."
        }
      },
      "type": "object"
    },
    "BatchGetPartitionValueList": {
      "items": {
        "$ref": "#/definitions/PartitionValueList"
      },
      "maxItems": 1000,
      "minItems": 0,
      "type": "array"
    },
    "Boolean": {
      "type": "boolean"
    },
    "BooleanValue": {
      "type": "boolean"
    },
    "BoundedPartitionValueList": {
      "items": {
        "$ref": "#/definitions/ValueString"
      },
      "maxItems": 100,
      "minItems": 0,
      "type": "array"
    },
    "CatalogEntries": {
      "items": {
        "$ref": "#/definitions/CatalogEntry"
      },
      "type": "array"
    },
    "CatalogEntry": {
      "description": "Specifies a table definition in the Data Catalog.",
      "properties": {
        "DatabaseName": {
          "$ref": "#/definitions/NameString",
          "description": "The database in which the table metadata resides."
        },
        "TableName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the table in question."
        }
      },
      "required": [
        "DatabaseName",
        "TableName"
      ],
      "type": "object"
    },
    "CatalogIdString": {
      "maxLength": 255,
      "minLength": 1,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    },
    "CatalogImportStatus": {
      "description": "A structure containing migration status information.",
      "properties": {
        "ImportCompleted": {
          "$ref": "#/definitions/Boolean",
          "description": "True if the migration has completed, or False otherwise."
        },
        "ImportTime": {
          "$ref": "#/definitions/Timestamp",
          "description": "The time that the migration was started."
        },
        "ImportedBy": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the person who initiated the migration."
        }
      },
      "type": "object"
    },
    "Classification": {
      "type": "string"
    },
    "Classifier": {
      "description": "Classifiers are written in Python and triggered during a Crawl Task. You can write your own Classifiers to best categorize your data sources and specify the appropriate schemas to use for them. A Classifier first checks whether a given file is in a format it can handle, and then, if so, creates a schema in the form of a <code>StructType</code> object that matches that data format.",
      "properties": {
        "GrokClassifier": {
          "$ref": "#/definitions/GrokClassifier",
          "description": "A GrokClassifier object."
        }
      },
      "type": "object"
    },
    "ClassifierList": {
      "items": {
        "$ref": "#/definitions/Classifier"
      },
      "type": "array"
    },
    "ClassifierNameList": {
      "items": {
        "$ref": "#/definitions/NameString"
      },
      "type": "array"
    },
    "CodeGenArgName": {
      "type": "string"
    },
    "CodeGenArgValue": {
      "type": "string"
    },
    "CodeGenEdge": {
      "description": "Represents a directional edge in a directed acyclic graph (DAG).",
      "properties": {
        "Source": {
          "$ref": "#/definitions/CodeGenIdentifier",
          "description": "The ID of the node at which the edge starts."
        },
        "Target": {
          "$ref": "#/definitions/CodeGenIdentifier",
          "description": "The ID of the node at which the edge ends."
        },
        "TargetParameter": {
          "$ref": "#/definitions/CodeGenArgName",
          "description": "The target of the edge."
        }
      },
      "required": [
        "Source",
        "Target"
      ],
      "type": "object"
    },
    "CodeGenIdentifier": {
      "maxLength": 255,
      "minLength": 1,
      "pattern": "[A-Za-z_][A-Za-z0-9_]*",
      "type": "string"
    },
    "CodeGenNode": {
      "description": "Represents a node in a directed acyclic graph (DAG)",
      "properties": {
        "Args": {
          "$ref": "#/definitions/CodeGenNodeArgs",
          "description": "Properties of the node, in the form of name-value pairs."
        },
        "Id": {
          "$ref": "#/definitions/CodeGenIdentifier",
          "description": "A node identifier that is unique within the node's graph."
        },
        "LineNumber": {
          "$ref": "#/definitions/Integer",
          "description": "The line number of the node."
        },
        "NodeType": {
          "$ref": "#/definitions/CodeGenNodeType",
          "description": "The type of node this is."
        }
      },
      "required": [
        "Id",
        "NodeType",
        "Args"
      ],
      "type": "object"
    },
    "CodeGenNodeArg": {
      "description": "An argument or property of a node.",
      "properties": {
        "Name": {
          "$ref": "#/definitions/CodeGenArgName",
          "description": "The name of the argument or property."
        },
        "Param": {
          "$ref": "#/definitions/Boolean",
          "description": "True if the value is used as a parameter."
        },
        "Value": {
          "$ref": "#/definitions/CodeGenArgValue",
          "description": "The value of the argument or property."
        }
      },
      "required": [
        "Name",
        "Value"
      ],
      "type": "object"
    },
    "CodeGenNodeArgs": {
      "items": {
        "$ref": "#/definitions/CodeGenNodeArg"
      },
      "maxItems": 50,
      "minItems": 0,
      "type": "array"
    },
    "CodeGenNodeType": {
      "type": "string"
    },
    "Column": {
      "description": "A column in a <code>Table</code>.",
      "properties": {
        "Comment": {
          "$ref": "#/definitions/CommentString",
          "description": "Free-form text comment."
        },
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the <code>Column</code>."
        },
        "Type": {
          "$ref": "#/definitions/ColumnTypeString",
          "description": "The datatype of data in the <code>Column</code>."
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "ColumnList": {
      "items": {
        "$ref": "#/definitions/Column"
      },
      "type": "array"
    },
    "ColumnTypeString": {
      "maxLength": 131072,
      "minLength": 0,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    },
    "ColumnValueStringList": {
      "items": {
        "$ref": "#/definitions/ColumnValuesString"
      },
      "type": "array"
    },
    "ColumnValuesString": {
      "type": "string"
    },
    "CommentString": {
      "maxLength": 255,
      "minLength": 0,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    },
    "ConcurrentModificationException": {
      "description": "Two processes are trying to modify a resource simultaneously.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/MessageString",
          "description": "A message describing the problem."
        }
      },
      "type": "object"
    },
    "ConcurrentRunsExceededException": {
      "description": "Too many jobs are being run concurrently.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/MessageString",
          "description": "A message describing the problem."
        }
      },
      "type": "object"
    },
    "Condition": {
      "properties": {
        "JobName": {
          "$ref": "#/definitions/NameString"
        },
        "LogicalOperator": {
          "$ref": "#/definitions/LogicalOperator"
        },
        "State": {
          "$ref": "#/definitions/JobRunState"
        }
      },
      "type": "object"
    },
    "ConditionList": {
      "items": {
        "$ref": "#/definitions/Condition"
      },
      "type": "array"
    },
    "Connection": {
      "description": "Defines a connection to a data source.",
      "properties": {
        "ConnectionProperties": {
          "$ref": "#/definitions/ConnectionProperties",
          "description": "A list of key-value pairs used as parameters for this connection."
        },
        "ConnectionType": {
          "$ref": "#/definitions/ConnectionType",
          "description": "The type of the connection."
        },
        "CreationTime": {
          "$ref": "#/definitions/Timestamp",
          "description": "The time this connection definition was created."
        },
        "Description": {
          "$ref": "#/definitions/DescriptionString",
          "description": "Description of the connection."
        },
        "LastUpdatedBy": {
          "$ref": "#/definitions/NameString",
          "description": "The user, group or role that last updated this connection definition."
        },
        "LastUpdatedTime": {
          "$ref": "#/definitions/Timestamp",
          "description": "The last time this connection definition was updated."
        },
        "MatchCriteria": {
          "$ref": "#/definitions/MatchCriteria",
          "description": "A list of criteria that can be used in selecting this connection."
        },
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the connection definition."
        },
        "PhysicalConnectionRequirements": {
          "$ref": "#/definitions/PhysicalConnectionRequirements",
          "description": "A map of physical connection requirements, such as VPC and SecurityGroup, needed for making this connection successfully."
        }
      },
      "type": "object"
    },
    "ConnectionInput": {
      "description": "A structure used to specify a connection to create or update.",
      "properties": {
        "ConnectionProperties": {
          "$ref": "#/definitions/ConnectionProperties",
          "description": "A list of key-value pairs used as parameters for this connection."
        },
        "ConnectionType": {
          "$ref": "#/definitions/ConnectionType",
          "description": "The type of the connection."
        },
        "Description": {
          "$ref": "#/definitions/DescriptionString",
          "description": "Description of the connection."
        },
        "MatchCriteria": {
          "$ref": "#/definitions/MatchCriteria",
          "description": "A list of criteria that can be used in selecting this connection."
        },
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the connection."
        },
        "PhysicalConnectionRequirements": {
          "$ref": "#/definitions/PhysicalConnectionRequirements",
          "description": "A map of physical connection requirements, such as VPC and SecurityGroup, needed for making this connection successfully."
        }
      },
      "type": "object"
    },
    "ConnectionList": {
      "items": {
        "$ref": "#/definitions/Connection"
      },
      "type": "array"
    },
    "ConnectionName": {
      "type": "string"
    },
    "ConnectionProperties": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/ConnectionPropertyKey"
          },
          "value": {
            "$ref": "#/definitions/ValueString"
          }
        },
        "type": "object"
      },
      "maxItems": 100,
      "minItems": 0,
      "type": "array"
    },
    "ConnectionPropertyKey": {
      "enum": [
        "HOST",
        "PORT",
        "USERNAME",
        "PASSWORD",
        "JDBC_DRIVER_JAR_URI",
        "JDBC_DRIVER_CLASS_NAME",
        "JDBC_ENGINE",
        "JDBC_ENGINE_VERSION",
        "CONFIG_FILES",
        "INSTANCE_ID",
        "JDBC_CONNECTION_URL"
      ],
      "type": "string"
    },
    "ConnectionType": {
      "enum": [
        "JDBC",
        "SFTP"
      ],
      "type": "string"
    },
    "ConnectionsList": {
      "description": "Specifies the connections used by a job.",
      "properties": {
        "Connections": {
          "$ref": "#/definitions/StringList",
          "description": "A list of connections used by the job."
        }
      },
      "type": "object"
    },
    "Crawler": {
      "description": "Specifies a crawler program that examines a data source and uses classifiers to try to its schema. If successful, the crawler records metatdata concerning the data source in the Data Catalog.",
      "properties": {
        "Classifiers": {
          "$ref": "#/definitions/ClassifierNameList",
          "description": "A list of custom <code>Classifier</code>s associated with this Crawler."
        },
        "CrawlElapsedTime": {
          "$ref": "#/definitions/MillisecondsCount",
          "description": "If this Crawler is running, contains the total time elapsed since the last crawl began."
        },
        "CreationTime": {
          "$ref": "#/definitions/Timestamp",
          "description": "The time when the Crawler was created."
        },
        "DatabaseName": {
          "$ref": "#/definitions/DatabaseName",
          "description": "The <code>Database</code> where this Crawler's output should be stored."
        },
        "Description": {
          "$ref": "#/definitions/DescriptionString",
          "description": "A description of this Crawler and where it should be used."
        },
        "LastCrawl": {
          "$ref": "#/definitions/LastCrawlInfo",
          "description": "The status of the last crawl, and potentially error information if an error occurred."
        },
        "LastUpdated": {
          "$ref": "#/definitions/Timestamp",
          "description": "The time the Crawler was last updated."
        },
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "The <code>Crawler</code> name."
        },
        "Role": {
          "$ref": "#/definitions/RoleArn",
          "description": "The ARN of an IAM role used to access customer resources such as data in S3."
        },
        "Schedule": {
          "$ref": "#/definitions/Schedule",
          "description": "A <code>Schedule</code> object that specifies the schedule on which this Crawler is to be run."
        },
        "SchemaChangePolicy": {
          "$ref": "#/definitions/SchemaChangePolicy",
          "description": "Sets policy for the crawler's update and delete behavior."
        },
        "State": {
          "$ref": "#/definitions/CrawlerState",
          "description": "Indicates whether this Crawler is running, or whether a run is pending."
        },
        "TablePrefix": {
          "$ref": "#/definitions/TablePrefix",
          "description": "The table prefix used for catalog tables created."
        },
        "Targets": {
          "$ref": "#/definitions/CrawlerTargets",
          "description": "A collection of targets to crawl."
        },
        "Version": {
          "$ref": "#/definitions/VersionId",
          "description": "The version of the Crawler."
        }
      },
      "type": "object"
    },
    "CrawlerList": {
      "items": {
        "$ref": "#/definitions/Crawler"
      },
      "type": "array"
    },
    "CrawlerMetrics": {
      "description": "Metrics for a specified crawler.",
      "properties": {
        "CrawlerName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the crawler."
        },
        "LastRuntimeSeconds": {
          "$ref": "#/definitions/NonNegativeDouble",
          "description": "The duration of the crawler's most recent run, in seconds."
        },
        "MedianRuntimeSeconds": {
          "$ref": "#/definitions/NonNegativeDouble",
          "description": "The median duration of this crawler's runs, in seconds."
        },
        "StillEstimating": {
          "$ref": "#/definitions/Boolean",
          "description": "True if the crawler is estimating its "
        },
        "TablesCreated": {
          "$ref": "#/definitions/NonNegativeInteger",
          "description": "A list of the tables created by this crawler."
        },
        "TablesDeleted": {
          "$ref": "#/definitions/NonNegativeInteger",
          "description": "A list of the tables deleted by this crawler."
        },
        "TablesUpdated": {
          "$ref": "#/definitions/NonNegativeInteger",
          "description": "A list of the tables created by this crawler."
        },
        "TimeLeftSeconds": {
          "$ref": "#/definitions/NonNegativeDouble",
          "description": "The estimated time left to complete a running crawl."
        }
      },
      "type": "object"
    },
    "CrawlerMetricsList": {
      "items": {
        "$ref": "#/definitions/CrawlerMetrics"
      },
      "type": "array"
    },
    "CrawlerNameList": {
      "items": {
        "$ref": "#/definitions/NameString"
      },
      "maxItems": 100,
      "minItems": 0,
      "type": "array"
    },
    "CrawlerNotRunningException": {
      "description": "The specified crawler is not running.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/MessageString",
          "description": "A message describing the problem."
        }
      },
      "type": "object"
    },
    "CrawlerRunningException": {
      "description": "The operation cannot be performed because the crawler is already running.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/MessageString",
          "description": "A message describing the problem."
        }
      },
      "type": "object"
    },
    "CrawlerState": {
      "enum": [
        "READY",
        "RUNNING",
        "STOPPING"
      ],
      "type": "string"
    },
    "CrawlerStoppingException": {
      "description": "The specified crawler is stopping.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/MessageString",
          "description": "A message describing the problem."
        }
      },
      "type": "object"
    },
    "CrawlerTargets": {
      "description": "Specifies crawler targets.",
      "properties": {
        "JdbcTargets": {
          "$ref": "#/definitions/JdbcTargetList",
          "description": "Specifies JDBC targets."
        },
        "S3Targets": {
          "$ref": "#/definitions/S3TargetList",
          "description": "Specifies targets in AWS S3."
        }
      },
      "type": "object"
    },
    "CreateClassifierRequest": {
      "properties": {
        "GrokClassifier": {
          "$ref": "#/definitions/CreateGrokClassifierRequest",
          "description": "A grok classifier to create."
        }
      },
      "type": "object"
    },
    "CreateClassifierResponse": {
      "properties": {},
      "type": "object"
    },
    "CreateConnectionRequest": {
      "properties": {
        "CatalogId": {
          "$ref": "#/definitions/CatalogIdString",
          "description": "The ID of the Data Catalog in which to create the connection. If none is supplied, the AWS account ID is used by default."
        },
        "ConnectionInput": {
          "$ref": "#/definitions/ConnectionInput",
          "description": "A <code>ConnectionInput</code> object defining the connection to create."
        }
      },
      "required": [
        "ConnectionInput"
      ],
      "type": "object"
    },
    "CreateConnectionResponse": {
      "properties": {},
      "type": "object"
    },
    "CreateCrawlerRequest": {
      "properties": {
        "Classifiers": {
          "$ref": "#/definitions/ClassifierNameList",
          "description": "A list of custom <code>Classifier</code> names that the user has registered. By default, all AWS classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification."
        },
        "DatabaseName": {
          "$ref": "#/definitions/DatabaseName",
          "description": "The Glue <code>Database</code> where results will be stored, such as: <code>arn:aws:daylight:us-east-1::database/sometable/*</code>."
        },
        "Description": {
          "$ref": "#/definitions/DescriptionString",
          "description": "A description of the new <code>Crawler</code>."
        },
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "Name of the new <code>Crawler</code>."
        },
        "Role": {
          "$ref": "#/definitions/RoleArn",
          "description": "The AWS ARN of the IAM role used by the new <code>Crawler</code> to access customer resources."
        },
        "Schedule": {
          "$ref": "#/definitions/CronExpression",
          "description": "A cron expression that can be used as a Cloudwatch event (see <a href=\"http://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html\">CloudWatch Schedule Expression Syntax</a>. For example, to run every day at 12:15 UTC, specify: <code>cron(15 12 * * ? *)</code>."
        },
        "SchemaChangePolicy": {
          "$ref": "#/definitions/SchemaChangePolicy",
          "description": "Policy for the crawler's update and deletion behavior."
        },
        "TablePrefix": {
          "$ref": "#/definitions/TablePrefix",
          "description": "The table prefix used for catalog tables created."
        },
        "Targets": {
          "$ref": "#/definitions/CrawlerTargets",
          "description": "A list of collection of targets to crawl."
        }
      },
      "required": [
        "Name",
        "Role",
        "DatabaseName",
        "Targets"
      ],
      "type": "object"
    },
    "CreateCrawlerResponse": {
      "properties": {},
      "type": "object"
    },
    "CreateDatabaseRequest": {
      "properties": {
        "CatalogId": {
          "$ref": "#/definitions/CatalogIdString",
          "description": "The ID of the Data Catalog in which to create the database. If none is supplied, the AWS account ID is used by default."
        },
        "DatabaseInput": {
          "$ref": "#/definitions/DatabaseInput",
          "description": "A <code>DatabaseInput</code> object defining the metadata database to create in the catalog."
        }
      },
      "required": [
        "DatabaseInput"
      ],
      "type": "object"
    },
    "CreateDatabaseResponse": {
      "properties": {},
      "type": "object"
    },
    "CreateDevEndpointRequest": {
      "properties": {
        "EndpointName": {
          "$ref": "#/definitions/GenericString",
          "description": "The name to be assigned to the new DevEndpoint."
        },
        "ExtraJarsS3Path": {
          "$ref": "#/definitions/GenericString",
          "description": "Path to one or more Java Jars in an S3 bucket that should be loaded in your DevEndpoint."
        },
        "ExtraPythonLibsS3Path": {
          "$ref": "#/definitions/GenericString",
          "description": "Path to one or more Python libraries in an S3 bucket that should be loaded in your DevEndpoint."
        },
        "NumberOfNodes": {
          "$ref": "#/definitions/IntegerValue",
          "description": "The number of nodes to use."
        },
        "PublicKey": {
          "$ref": "#/definitions/GenericString",
          "description": "The public key to use for authentication."
        },
        "RoleArn": {
          "$ref": "#/definitions/RoleArn",
          "description": "The IAM role for the DevEndpoint."
        },
        "SecurityGroupIds": {
          "$ref": "#/definitions/StringList",
          "description": "Security group IDs for the security groups to be used by the new DevEndpoint."
        },
        "SubnetId": {
          "$ref": "#/definitions/GenericString",
          "description": "The subnet ID for the new DevEndpoint to use."
        }
      },
      "required": [
        "EndpointName",
        "RoleArn",
        "SecurityGroupIds",
        "SubnetId"
      ],
      "type": "object"
    },
    "CreateDevEndpointResponse": {
      "properties": {
        "AvailabilityZone": {
          "$ref": "#/definitions/GenericString",
          "description": "The AWS availability zone where this DevEndpoint is located."
        },
        "CreatedTimestamp": {
          "$ref": "#/definitions/TimestampValue",
          "description": "The point in time at which this DevEndpoint was created."
        },
        "EndpointName": {
          "$ref": "#/definitions/GenericString",
          "description": "The name assigned to the new DevEndpoint."
        },
        "ExtraJarsS3Path": {
          "$ref": "#/definitions/GenericString",
          "description": "Path to one or more Java Jars in an S3 bucket that will be loaded in your DevEndpoint."
        },
        "ExtraPythonLibsS3Path": {
          "$ref": "#/definitions/GenericString",
          "description": "Path to one or more Python libraries in an S3 bucket that will be loaded in your DevEndpoint."
        },
        "FailureReason": {
          "$ref": "#/definitions/GenericString",
          "description": "The reason for a current failure in this DevEndpoint."
        },
        "NumberOfNodes": {
          "$ref": "#/definitions/IntegerValue",
          "description": "The number of nodes in this DevEndpoint."
        },
        "RoleArn": {
          "$ref": "#/definitions/RoleArn",
          "description": "The AWS ARN of the role assigned to the new DevEndpoint."
        },
        "SecurityGroupIds": {
          "$ref": "#/definitions/StringList",
          "description": "The security groups assigned to the new DevEndpoint."
        },
        "Status": {
          "$ref": "#/definitions/GenericString",
          "description": "The current status of the new DevEndpoint."
        },
        "SubnetId": {
          "$ref": "#/definitions/GenericString",
          "description": "The subnet ID assigned to the new DevEndpoint."
        },
        "VpcId": {
          "$ref": "#/definitions/GenericString",
          "description": "The ID of the VPC used by this DevEndpoint."
        },
        "YarnEndpointAddress": {
          "$ref": "#/definitions/GenericString",
          "description": "The address of the YARN endpoint used by this DevEndpoint."
        }
      },
      "type": "object"
    },
    "CreateGrokClassifierRequest": {
      "description": "Specifies a Grok classifier for CreateClassifier to create.",
      "properties": {
        "Classification": {
          "$ref": "#/definitions/Classification",
          "description": "The type of result that the classifier matches, such as Twitter Json, Omniture logs, Cloudwatch logs, and so forth."
        },
        "CustomPatterns": {
          "$ref": "#/definitions/CustomPatterns",
          "description": "Custom grok patterns used by this classifier."
        },
        "GrokPattern": {
          "$ref": "#/definitions/GrokPattern",
          "description": "The grok pattern used by this classifier."
        },
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the new Classifier."
        }
      },
      "required": [
        "Classification",
        "Name",
        "GrokPattern"
      ],
      "type": "object"
    },
    "CreateJobRequest": {
      "properties": {
        "AllocatedCapacity": {
          "$ref": "#/definitions/IntegerValue",
          "description": "The number of capacity units allocated to this job."
        },
        "Command": {
          "$ref": "#/definitions/JobCommand",
          "description": "The JobCommand that executes this job."
        },
        "Connections": {
          "$ref": "#/definitions/ConnectionsList",
          "description": "The connections used for this job."
        },
        "DefaultArguments": {
          "$ref": "#/definitions/GenericMap",
          "description": "The default parameters for this job."
        },
        "Description": {
          "$ref": "#/definitions/DescriptionString",
          "description": "Description of the job."
        },
        "ExecutionProperty": {
          "$ref": "#/definitions/ExecutionProperty",
          "description": "An ExecutionProperty specifying the maximum number of concurrent runs allowed for this job."
        },
        "LogUri": {
          "$ref": "#/definitions/UriString",
          "description": "Location of the logs for this job."
        },
        "MaxRetries": {
          "$ref": "#/definitions/MaxRetries",
          "description": "The maximum number of times to retry this job if it fails."
        },
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "The name you assign to this job."
        },
        "Role": {
          "$ref": "#/definitions/RoleString",
          "description": "The role associated with this job."
        }
      },
      "required": [
        "Name",
        "Role",
        "Command"
      ],
      "type": "object"
    },
    "CreateJobResponse": {
      "properties": {
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "The unique name of the new job that has been created."
        }
      },
      "type": "object"
    },
    "CreatePartitionRequest": {
      "properties": {
        "CatalogId": {
          "$ref": "#/definitions/CatalogIdString",
          "description": "The ID of the catalog in which the partion is to be created. Currently, this should be the AWS account ID."
        },
        "DatabaseName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the metadata database in which the partition is to be created."
        },
        "PartitionInput": {
          "$ref": "#/definitions/PartitionInput",
          "description": "A <code>PartitionInput</code> structure defining the partition to be created."
        },
        "TableName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the metadata table in which the partition is to be created."
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "PartitionInput"
      ],
      "type": "object"
    },
    "CreatePartitionResponse": {
      "properties": {},
      "type": "object"
    },
    "CreateScriptRequest": {
      "properties": {
        "DagEdges": {
          "$ref": "#/definitions/DagEdges",
          "description": "A list of the edges in the DAG."
        },
        "DagNodes": {
          "$ref": "#/definitions/DagNodes",
          "description": "A list of the nodes in the DAG."
        }
      },
      "type": "object"
    },
    "CreateScriptResponse": {
      "properties": {
        "PythonScript": {
          "$ref": "#/definitions/PythonScript",
          "description": "The Python script generated from the DAG."
        }
      },
      "type": "object"
    },
    "CreateTableRequest": {
      "properties": {
        "CatalogId": {
          "$ref": "#/definitions/CatalogIdString",
          "description": "The ID of the Data Catalog in which to create the <code>Table</code>. If none is supplied, the AWS account ID is used by default."
        },
        "DatabaseName": {
          "$ref": "#/definitions/NameString",
          "description": "The catalog database in which to create the new table."
        },
        "TableInput": {
          "$ref": "#/definitions/TableInput",
          "description": "The <code>TableInput</code> object that defines the metadata table to create in the catalog."
        }
      },
      "required": [
        "DatabaseName",
        "TableInput"
      ],
      "type": "object"
    },
    "CreateTableResponse": {
      "properties": {},
      "type": "object"
    },
    "CreateTriggerRequest": {
      "properties": {
        "Actions": {
          "$ref": "#/definitions/ActionList",
          "description": "The actions initiated by this trigger when it fires."
        },
        "Description": {
          "$ref": "#/definitions/DescriptionString",
          "description": "A description of the new trigger."
        },
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "The name to assign to the new trigger."
        },
        "Predicate": {
          "$ref": "#/definitions/Predicate",
          "description": "A predicate to specify when the new trigger should fire."
        },
        "Schedule": {
          "$ref": "#/definitions/GenericString",
          "description": "A cron schedule expression for the new trigger."
        },
        "Type": {
          "$ref": "#/definitions/TriggerType",
          "description": "The type of the new trigger."
        }
      },
      "required": [
        "Name",
        "Type",
        "Actions"
      ],
      "type": "object"
    },
    "CreateTriggerResponse": {
      "properties": {
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "The name assigned to the new trigger."
        }
      },
      "type": "object"
    },
    "CreateUserDefinedFunctionRequest": {
      "properties": {
        "CatalogId": {
          "$ref": "#/definitions/CatalogIdString",
          "description": "The ID of the Data Catalog in which to create the function. If none is supplied, the AWS account ID is used by default."
        },
        "DatabaseName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the catalog database in which to create the function."
        },
        "FunctionInput": {
          "$ref": "#/definitions/UserDefinedFunctionInput",
          "description": "A <code>FunctionInput</code> object that defines the function to create in the Data Catalog."
        }
      },
      "required": [
        "DatabaseName",
        "FunctionInput"
      ],
      "type": "object"
    },
    "CreateUserDefinedFunctionResponse": {
      "properties": {},
      "type": "object"
    },
    "CronExpression": {
      "type": "string"
    },
    "CustomPatterns": {
      "maxLength": 16000,
      "minLength": 0,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    },
    "DagEdges": {
      "items": {
        "$ref": "#/definitions/CodeGenEdge"
      },
      "type": "array"
    },
    "DagNodes": {
      "items": {
        "$ref": "#/definitions/CodeGenNode"
      },
      "type": "array"
    },
    "Database": {
      "description": "The <code>Database</code> object represents a logical grouping of tables that may reside in a Hive metastore or an RDBMS.",
      "properties": {
        "CreateTime": {
          "$ref": "#/definitions/Timestamp",
          "description": "The time at which the metadata database was created in the catalog."
        },
        "Description": {
          "$ref": "#/definitions/DescriptionString",
          "description": "Description of the database."
        },
        "LocationUri": {
          "$ref": "#/definitions/URI",
          "description": "The location of the database (for example, an HDFS path)."
        },
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "Name of the database."
        },
        "Parameters": {
          "$ref": "#/definitions/ParametersMap",
          "description": "A list of key-value pairs that define parameters and properties of the database."
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "DatabaseInput": {
      "description": "The structure used to create or updata a database.",
      "properties": {
        "Description": {
          "$ref": "#/definitions/DescriptionString",
          "description": "Description of the database"
        },
        "LocationUri": {
          "$ref": "#/definitions/URI",
          "description": "The location of the database (for example, an HDFS path)."
        },
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "Name of the database."
        },
        "Parameters": {
          "$ref": "#/definitions/ParametersMap",
          "description": "A list of key-value pairs that define parameters and properties of the database."
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "DatabaseList": {
      "items": {
        "$ref": "#/definitions/Database"
      },
      "type": "array"
    },
    "DatabaseName": {
      "type": "string"
    },
    "DeleteBehavior": {
      "enum": [
        "LOG",
        "DELETE_FROM_DATABASE",
        "DEPRECATE_IN_DATABASE"
      ],
      "type": "string"
    },
    "DeleteClassifierRequest": {
      "properties": {
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "Name of the <code>Classifier</code> to remove."
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "DeleteClassifierResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteConnectionNameList": {
      "items": {
        "$ref": "#/definitions/NameString"
      },
      "maxItems": 25,
      "minItems": 0,
      "type": "array"
    },
    "DeleteConnectionRequest": {
      "properties": {
        "CatalogId": {
          "$ref": "#/definitions/CatalogIdString",
          "description": "The ID of the Data Catalog in which the connection resides. If none is supplied, the AWS account ID is used by default."
        },
        "ConnectionName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the connection to delete."
        }
      },
      "required": [
        "ConnectionName"
      ],
      "type": "object"
    },
    "DeleteConnectionResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteCrawlerRequest": {
      "properties": {
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "Name of the <code>Crawler</code> to remove."
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "DeleteCrawlerResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteDatabaseRequest": {
      "properties": {
        "CatalogId": {
          "$ref": "#/definitions/CatalogIdString",
          "description": "The ID of the Data Catalog in which the database resides. If none is supplied, the AWS account ID is used by default."
        },
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the Database to delete."
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "DeleteDatabaseResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteDevEndpointRequest": {
      "properties": {
        "EndpointName": {
          "$ref": "#/definitions/GenericString",
          "description": "The name of the DevEndpoint."
        }
      },
      "required": [
        "EndpointName"
      ],
      "type": "object"
    },
    "DeleteDevEndpointResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteJobRequest": {
      "properties": {
        "JobName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the job to delete."
        }
      },
      "required": [
        "JobName"
      ],
      "type": "object"
    },
    "DeleteJobResponse": {
      "properties": {
        "JobName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the job that was deleted."
        }
      },
      "type": "object"
    },
    "DeletePartitionRequest": {
      "properties": {
        "CatalogId": {
          "$ref": "#/definitions/CatalogIdString",
          "description": "The ID of the Data Catalog where the partition to be deleted resides. If none is supplied, the AWS account ID is used by default."
        },
        "DatabaseName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the catalog database in which the table in question resides."
        },
        "PartitionValues": {
          "$ref": "#/definitions/ValueStringList",
          "description": "The values that define the partition."
        },
        "TableName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the table where the partition to be deleted is located."
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "PartitionValues"
      ],
      "type": "object"
    },
    "DeletePartitionResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteTableRequest": {
      "properties": {
        "CatalogId": {
          "$ref": "#/definitions/CatalogIdString",
          "description": "The ID of the Data Catalog where the table resides. If none is supplied, the AWS account ID is used by default."
        },
        "DatabaseName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the catalog database in which the table resides."
        },
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the table to be deleted."
        }
      },
      "required": [
        "DatabaseName",
        "Name"
      ],
      "type": "object"
    },
    "DeleteTableResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteTriggerRequest": {
      "properties": {
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the trigger to delete."
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "DeleteTriggerResponse": {
      "properties": {
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the trigger that was deleted."
        }
      },
      "type": "object"
    },
    "DeleteUserDefinedFunctionRequest": {
      "properties": {
        "CatalogId": {
          "$ref": "#/definitions/CatalogIdString",
          "description": "The ID of the Data Catalog where the function to be deleted is located. If none is supplied, the AWS account ID is used by default."
        },
        "DatabaseName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the catalog database where the function is located."
        },
        "FunctionName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the function definition to be deleted."
        }
      },
      "required": [
        "DatabaseName",
        "FunctionName"
      ],
      "type": "object"
    },
    "DeleteUserDefinedFunctionResponse": {
      "properties": {},
      "type": "object"
    },
    "DescriptionString": {
      "maxLength": 2048,
      "minLength": 0,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    },
    "DescriptionStringRemovable": {
      "maxLength": 2048,
      "minLength": 0,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    },
    "DevEndpoint": {
      "description": "A development endpoint where a developer can remotely debug ETL scripts.",
      "properties": {
        "AvailabilityZone": {
          "$ref": "#/definitions/GenericString",
          "description": "The AWS availability zone where this DevEndpoint is located."
        },
        "CreatedTimestamp": {
          "$ref": "#/definitions/TimestampValue",
          "description": "The point in time at which this DevEndpoint was created."
        },
        "EndpointName": {
          "$ref": "#/definitions/GenericString",
          "description": "The name of the DevEndpoint."
        },
        "ExtraJarsS3Path": {
          "$ref": "#/definitions/GenericString",
          "description": "Path to one or more Java Jars in an S3 bucket that should be loaded in your DevEndpoint."
        },
        "ExtraPythonLibsS3Path": {
          "$ref": "#/definitions/GenericString",
          "description": "Path to one or more Python libraries in an S3 bucket that should be loaded in your DevEndpoint."
        },
        "FailureReason": {
          "$ref": "#/definitions/GenericString",
          "description": "The reason for a current failure in this DevEndpoint."
        },
        "LastModifiedTimestamp": {
          "$ref": "#/definitions/TimestampValue",
          "description": "The point in time at which this DevEndpoint was last modified."
        },
        "LastUpdateStatus": {
          "$ref": "#/definitions/GenericString",
          "description": "The status of the last update."
        },
        "NumberOfNodes": {
          "$ref": "#/definitions/IntegerValue",
          "description": "The number of nodes used by this DevEndpoint."
        },
        "PublicAddress": {
          "$ref": "#/definitions/GenericString",
          "description": "The public address used by this DevEndpoint."
        },
        "PublicKey": {
          "$ref": "#/definitions/GenericString",
          "description": "The public key to be used by this DevEndpoint for authentication."
        },
        "RoleArn": {
          "$ref": "#/definitions/RoleArn",
          "description": "The AWS ARN of the IAM role used in this DevEndpoint."
        },
        "SecurityGroupIds": {
          "$ref": "#/definitions/StringList",
          "description": "A list of security group identifiers used in this DevEndpoint."
        },
        "Status": {
          "$ref": "#/definitions/GenericString",
          "description": "The current status of this DevEndpoint."
        },
        "SubnetId": {
          "$ref": "#/definitions/GenericString",
          "description": "The subnet ID for this DevEndpoint."
        },
        "VpcId": {
          "$ref": "#/definitions/GenericString",
          "description": "The ID of the virtual private cloud (VPC) used by this DevEndpoint."
        },
        "YarnEndpointAddress": {
          "$ref": "#/definitions/GenericString",
          "description": "The YARN endpoint address used by this DevEndpoint."
        }
      },
      "type": "object"
    },
    "DevEndpointCustomLibraries": {
      "description": "Custom libraries to be loaded into a DevEndpoint.",
      "properties": {
        "ExtraJarsS3Path": {
          "$ref": "#/definitions/GenericString",
          "description": "Path to one or more Java Jars in an S3 bucket that should be loaded in your DevEndpoint."
        },
        "ExtraPythonLibsS3Path": {
          "$ref": "#/definitions/GenericString",
          "description": "Path to one or more Python libraries in an S3 bucket that should be loaded in your DevEndpoint."
        }
      },
      "type": "object"
    },
    "DevEndpointList": {
      "items": {
        "$ref": "#/definitions/DevEndpoint"
      },
      "type": "array"
    },
    "EntityNotFoundException": {
      "description": "A specified entity does not exist",
      "properties": {
        "Message": {
          "$ref": "#/definitions/MessageString",
          "description": "A message describing the problem."
        }
      },
      "type": "object"
    },
    "ErrorByName": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/NameString"
          },
          "value": {
            "$ref": "#/definitions/ErrorDetail"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "ErrorDetail": {
      "description": "Contains details about an error.",
      "properties": {
        "ErrorCode": {
          "$ref": "#/definitions/NameString",
          "description": "The code associated with this error."
        },
        "ErrorMessage": {
          "$ref": "#/definitions/DescriptionString",
          "description": "A message describing the error."
        }
      },
      "type": "object"
    },
    "ErrorString": {
      "type": "string"
    },
    "ExecutionProperty": {
      "description": "An execution property of a job.",
      "properties": {
        "MaxConcurrentRuns": {
          "$ref": "#/definitions/MaxConcurrentRuns",
          "description": "The maximum number of concurrent runs allowed for a job."
        }
      },
      "type": "object"
    },
    "FieldType": {
      "type": "string"
    },
    "FilterString": {
      "maxLength": 2048,
      "minLength": 0,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    },
    "FormatString": {
      "maxLength": 128,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    },
    "GenericMap": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/GenericString"
          },
          "value": {
            "$ref": "#/definitions/GenericString"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "GenericString": {
      "type": "string"
    },
    "GetCatalogImportStatusRequest": {
      "properties": {
        "CatalogId": {
          "$ref": "#/definitions/CatalogIdString",
          "description": "The ID of the catalog to migrate. Currently, this should be the AWS account ID."
        }
      },
      "type": "object"
    },
    "GetCatalogImportStatusResponse": {
      "properties": {
        "ImportStatus": {
          "$ref": "#/definitions/CatalogImportStatus",
          "description": "The status of the specified catalog migration."
        }
      },
      "type": "object"
    },
    "GetClassifierRequest": {
      "properties": {
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "Name of the <code>Classifier</code> to retrieve."
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "GetClassifierResponse": {
      "properties": {
        "Classifier": {
          "$ref": "#/definitions/Classifier",
          "description": "The requested <code>Classifier</code>."
        }
      },
      "type": "object"
    },
    "GetClassifiersRequest": {
      "properties": {
        "MaxResults": {
          "$ref": "#/definitions/PageSize",
          "description": "Size of the list to return (optional)."
        },
        "NextToken": {
          "$ref": "#/definitions/Token",
          "description": "An optional continuation token."
        }
      },
      "type": "object"
    },
    "GetClassifiersResponse": {
      "properties": {
        "Classifiers": {
          "$ref": "#/definitions/ClassifierList",
          "description": "The requested list of <code>Classifier</code> objects."
        },
        "NextToken": {
          "$ref": "#/definitions/Token",
          "description": "A continuation token."
        }
      },
      "type": "object"
    },
    "GetConnectionRequest": {
      "properties": {
        "CatalogId": {
          "$ref": "#/definitions/CatalogIdString",
          "description": "The ID of the Data Catalog in which the connection resides. If none is supplied, the AWS account ID is used by default."
        },
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the connection definition to retrieve."
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "GetConnectionResponse": {
      "properties": {
        "Connection": {
          "$ref": "#/definitions/Connection",
          "description": "The requested connection definition."
        }
      },
      "type": "object"
    },
    "GetConnectionsFilter": {
      "description": "Filters the connection definitions returned by the <code>GetConnections</code> API.",
      "properties": {
        "ConnectionType": {
          "$ref": "#/definitions/ConnectionType",
          "description": "The type of connections to return."
        },
        "MatchCriteria": {
          "$ref": "#/definitions/MatchCriteria",
          "description": "A criteria string that must match the criteria recorded in the connection definition for that connection definition to be returned."
        }
      },
      "type": "object"
    },
    "GetConnectionsRequest": {
      "properties": {
        "CatalogId": {
          "$ref": "#/definitions/CatalogIdString",
          "description": "The ID of the Data Catalog in which the connections reside. If none is supplied, the AWS account ID is used by default."
        },
        "Filter": {
          "$ref": "#/definitions/GetConnectionsFilter",
          "description": "A filter that controls which connections will be returned."
        },
        "MaxResults": {
          "$ref": "#/definitions/PageSize",
          "description": "The maximum number of connections to return in one response."
        },
        "NextToken": {
          "$ref": "#/definitions/Token",
          "description": "A continuation token, if this is a continuation call."
        }
      },
      "type": "object"
    },
    "GetConnectionsResponse": {
      "properties": {
        "ConnectionList": {
          "$ref": "#/definitions/ConnectionList",
          "description": "A list of requested connection definitions."
        },
        "NextToken": {
          "$ref": "#/definitions/Token",
          "description": "A continuation token, if the list of connections returned does not include the last of the filtered connections."
        }
      },
      "type": "object"
    },
    "GetCrawlerMetricsRequest": {
      "properties": {
        "CrawlerNameList": {
          "$ref": "#/definitions/CrawlerNameList",
          "description": "A list of the names of crawlers about which to retrieve metrics."
        },
        "MaxResults": {
          "$ref": "#/definitions/PageSize",
          "description": "The maximum size of a list to return."
        },
        "NextToken": {
          "$ref": "#/definitions/Token",
          "description": "A continuation token, if this is a continuation call."
        }
      },
      "type": "object"
    },
    "GetCrawlerMetricsResponse": {
      "properties": {
        "CrawlerMetricsList": {
          "$ref": "#/definitions/CrawlerMetricsList",
          "description": "A list of metrics for the specified crawler."
        },
        "NextToken": {
          "$ref": "#/definitions/Token",
          "description": "A continuation token, if the returned list does not contain the last metric available."
        }
      },
      "type": "object"
    },
    "GetCrawlerRequest": {
      "properties": {
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "Name of the <code>Crawler</code> to retrieve metadata for."
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "GetCrawlerResponse": {
      "properties": {
        "Crawler": {
          "$ref": "#/definitions/Crawler",
          "description": "The metadata for the specified <code>Crawler</code>."
        }
      },
      "type": "object"
    },
    "GetCrawlersRequest": {
      "properties": {
        "MaxResults": {
          "$ref": "#/definitions/PageSize",
          "description": "The number of Crawlers to return on each call."
        },
        "NextToken": {
          "$ref": "#/definitions/Token",
          "description": "A continuation token, if this is a continuation request."
        }
      },
      "type": "object"
    },
    "GetCrawlersResponse": {
      "properties": {
        "Crawlers": {
          "$ref": "#/definitions/CrawlerList",
          "description": "A list of <code>Crawler</code> metadata."
        },
        "NextToken": {
          "$ref": "#/definitions/Token",
          "description": "A continuation token, if the returned list has not reached the end of those defined in this customer account."
        }
      },
      "type": "object"
    },
    "GetDatabaseRequest": {
      "properties": {
        "CatalogId": {
          "$ref": "#/definitions/CatalogIdString",
          "description": "The ID of the Data Catalog in which the database resides. If none is supplied, the AWS account ID is used by default."
        },
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the database to retrieve."
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "GetDatabaseResponse": {
      "properties": {
        "Database": {
          "$ref": "#/definitions/Database",
          "description": "The definition of the specified database in the catalog."
        }
      },
      "type": "object"
    },
    "GetDatabasesRequest": {
      "properties": {
        "CatalogId": {
          "$ref": "#/definitions/CatalogIdString",
          "description": "The ID of the Data Catalog from which to retrieve <code>Databases</code>. If none is supplied, the AWS account ID is used by default."
        },
        "MaxResults": {
          "$ref": "#/definitions/PageSize",
          "description": "The maximum number of databases to return in one response."
        },
        "NextToken": {
          "$ref": "#/definitions/Token",
          "description": "A continuation token, if this is a continuation call."
        }
      },
      "type": "object"
    },
    "GetDatabasesResponse": {
      "properties": {
        "DatabaseList": {
          "$ref": "#/definitions/DatabaseList",
          "description": "A list of <code>Database</code> objects from the specified catalog."
        },
        "NextToken": {
          "$ref": "#/definitions/Token",
          "description": "A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last."
        }
      },
      "required": [
        "DatabaseList"
      ],
      "type": "object"
    },
    "GetDataflowGraphRequest": {
      "properties": {
        "PythonScript": {
          "$ref": "#/definitions/PythonScript",
          "description": "The Python script to transform."
        }
      },
      "type": "object"
    },
    "GetDataflowGraphResponse": {
      "properties": {
        "DagEdges": {
          "$ref": "#/definitions/DagEdges",
          "description": "A list of the edges in the resulting DAG."
        },
        "DagNodes": {
          "$ref": "#/definitions/DagNodes",
          "description": "A list of the nodes in the resulting DAG."
        }
      },
      "type": "object"
    },
    "GetDevEndpointRequest": {
      "properties": {
        "EndpointName": {
          "$ref": "#/definitions/GenericString",
          "description": "Name of the DevEndpoint for which to retrieve information."
        }
      },
      "required": [
        "EndpointName"
      ],
      "type": "object"
    },
    "GetDevEndpointResponse": {
      "properties": {
        "DevEndpoint": {
          "$ref": "#/definitions/DevEndpoint",
          "description": "A DevEndpoint definition."
        }
      },
      "type": "object"
    },
    "GetDevEndpointsRequest": {
      "properties": {
        "MaxResults": {
          "$ref": "#/definitions/PageSize",
          "description": "The maximum size of information to return."
        },
        "NextToken": {
          "$ref": "#/definitions/GenericString",
          "description": "A continuation token, if this is a continuation call."
        }
      },
      "type": "object"
    },
    "GetDevEndpointsResponse": {
      "properties": {
        "DevEndpoints": {
          "$ref": "#/definitions/DevEndpointList",
          "description": "A list of DevEndpoint definitions."
        },
        "NextToken": {
          "$ref": "#/definitions/GenericString",
          "description": "A continuation token, if not all DevEndpoint definitions have yet been returned."
        }
      },
      "type": "object"
    },
    "GetJobRequest": {
      "properties": {
        "JobName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the job to retrieve."
        }
      },
      "required": [
        "JobName"
      ],
      "type": "object"
    },
    "GetJobResponse": {
      "properties": {
        "Job": {
          "$ref": "#/definitions/Job",
          "description": "The requested job definition."
        }
      },
      "type": "object"
    },
    "GetJobRunRequest": {
      "properties": {
        "JobName": {
          "$ref": "#/definitions/NameString",
          "description": "Name of the job being run."
        },
        "PredecessorsIncluded": {
          "$ref": "#/definitions/BooleanValue",
          "description": "A list of the predecessor runs to return as well."
        },
        "RunId": {
          "$ref": "#/definitions/IdString",
          "description": "The ID of the job run."
        }
      },
      "required": [
        "JobName",
        "RunId"
      ],
      "type": "object"
    },
    "GetJobRunResponse": {
      "properties": {
        "JobRun": {
          "$ref": "#/definitions/JobRun",
          "description": "The requested job-run metadata."
        }
      },
      "type": "object"
    },
    "GetJobRunsRequest": {
      "properties": {
        "JobName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the job for which to retrieve all job runs."
        },
        "MaxResults": {
          "$ref": "#/definitions/PageSize",
          "description": "The maximum size of the response."
        },
        "NextToken": {
          "$ref": "#/definitions/GenericString",
          "description": "A continuation token, if this is a continuation call."
        }
      },
      "required": [
        "JobName"
      ],
      "type": "object"
    },
    "GetJobRunsResponse": {
      "properties": {
        "JobRuns": {
          "$ref": "#/definitions/JobRunList",
          "description": "A list of job-run metatdata objects."
        },
        "NextToken": {
          "$ref": "#/definitions/GenericString",
          "description": "A continuation token, if not all reequested job runs have been returned."
        }
      },
      "type": "object"
    },
    "GetJobsRequest": {
      "properties": {
        "MaxResults": {
          "$ref": "#/definitions/PageSize",
          "description": "The maximum size of the response."
        },
        "NextToken": {
          "$ref": "#/definitions/GenericString",
          "description": "A continuation token, if this is a continuation call."
        }
      },
      "type": "object"
    },
    "GetJobsResponse": {
      "properties": {
        "Jobs": {
          "$ref": "#/definitions/JobList",
          "description": "A list of jobs."
        },
        "NextToken": {
          "$ref": "#/definitions/GenericString",
          "description": "A continuation token, if not all jobs have yet been returned."
        }
      },
      "type": "object"
    },
    "GetMappingRequest": {
      "properties": {
        "Location": {
          "$ref": "#/definitions/Location",
          "description": "Parameters for the mapping."
        },
        "Sinks": {
          "$ref": "#/definitions/CatalogEntries",
          "description": "A list of target tables."
        },
        "Source": {
          "$ref": "#/definitions/CatalogEntry",
          "description": "Specifies the source table."
        }
      },
      "required": [
        "Source"
      ],
      "type": "object"
    },
    "GetMappingResponse": {
      "properties": {
        "Mapping": {
          "$ref": "#/definitions/MappingList",
          "description": "A list of mappings to the specified targets."
        }
      },
      "required": [
        "Mapping"
      ],
      "type": "object"
    },
    "GetPartitionRequest": {
      "properties": {
        "CatalogId": {
          "$ref": "#/definitions/CatalogIdString",
          "description": "The ID of the Data Catalog where the partition in question resides. If none is supplied, the AWS account ID is used by default."
        },
        "DatabaseName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the catalog database where the partition resides."
        },
        "PartitionValues": {
          "$ref": "#/definitions/ValueStringList",
          "description": "The values that define the partition."
        },
        "TableName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the partition's table."
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "PartitionValues"
      ],
      "type": "object"
    },
    "GetPartitionResponse": {
      "properties": {
        "Partition": {
          "$ref": "#/definitions/Partition",
          "description": "The requested information, in the form of a <code>Partition</code> object."
        }
      },
      "type": "object"
    },
    "GetPartitionsRequest": {
      "properties": {
        "CatalogId": {
          "$ref": "#/definitions/CatalogIdString",
          "description": "The ID of the Data Catalog where the partitions in question reside. If none is supplied, the AWS account ID is used by default."
        },
        "DatabaseName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the catalog database where the partitions reside."
        },
        "Expression": {
          "$ref": "#/definitions/PredicateString",
          "description": "An expression filtering the partitions to be returned."
        },
        "MaxResults": {
          "$ref": "#/definitions/PageSize",
          "description": "The maximum number of partitions to return in a single response."
        },
        "NextToken": {
          "$ref": "#/definitions/Token",
          "description": "A continuation token, if this is not the first call to retrieve these partitions."
        },
        "Segment": {
          "$ref": "#/definitions/Segment",
          "description": "The segment of the table's partitions to scan in this request."
        },
        "TableName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the partitions' table."
        }
      },
      "required": [
        "DatabaseName",
        "TableName"
      ],
      "type": "object"
    },
    "GetPartitionsResponse": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/Token",
          "description": "A continuation token, if the returned list of partitions does not does not include the last one."
        },
        "Partitions": {
          "$ref": "#/definitions/PartitionList",
          "description": "A list of requested partitions."
        }
      },
      "type": "object"
    },
    "GetPlanRequest": {
      "properties": {
        "Location": {
          "$ref": "#/definitions/Location",
          "description": "Parameters for the mapping."
        },
        "Mapping": {
          "$ref": "#/definitions/MappingList",
          "description": "The list of mappings from a source table to target tables."
        },
        "Sinks": {
          "$ref": "#/definitions/CatalogEntries",
          "description": "The target tables."
        },
        "Source": {
          "$ref": "#/definitions/CatalogEntry",
          "description": "The source table."
        }
      },
      "required": [
        "Mapping",
        "Source"
      ],
      "type": "object"
    },
    "GetPlanResponse": {
      "properties": {
        "PythonScript": {
          "$ref": "#/definitions/PythonScript",
          "description": "A python script to perform the mapping."
        }
      },
      "type": "object"
    },
    "GetTableRequest": {
      "properties": {
        "CatalogId": {
          "$ref": "#/definitions/CatalogIdString",
          "description": "The ID of the Data Catalog where the table resides. If none is supplied, the AWS account ID is used by default."
        },
        "DatabaseName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the database in the catalog in which the table resides."
        },
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the table for which to retrieve the definition."
        }
      },
      "required": [
        "DatabaseName",
        "Name"
      ],
      "type": "object"
    },
    "GetTableResponse": {
      "properties": {
        "Table": {
          "$ref": "#/definitions/Table",
          "description": "The <code>Table</code> object that defines the specified table."
        }
      },
      "type": "object"
    },
    "GetTableVersionsList": {
      "items": {
        "$ref": "#/definitions/TableVersion"
      },
      "type": "array"
    },
    "GetTableVersionsRequest": {
      "properties": {
        "CatalogId": {
          "$ref": "#/definitions/CatalogIdString",
          "description": "The ID of the Data Catalog where the tables reside. If none is supplied, the AWS account ID is used by default."
        },
        "DatabaseName": {
          "$ref": "#/definitions/NameString",
          "description": "The database in the catalog in which the table resides."
        },
        "MaxResults": {
          "$ref": "#/definitions/PageSize",
          "description": "The maximum number of table versions to return in one response."
        },
        "NextToken": {
          "$ref": "#/definitions/Token",
          "description": "A continuation token, if this is not the first call."
        },
        "TableName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the table."
        }
      },
      "required": [
        "DatabaseName",
        "TableName"
      ],
      "type": "object"
    },
    "GetTableVersionsResponse": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/Token",
          "description": "A continuation token, if the list of available versions does not include the last one."
        },
        "TableVersions": {
          "$ref": "#/definitions/GetTableVersionsList",
          "description": "A list of strings identifying available versions of the specified table."
        }
      },
      "type": "object"
    },
    "GetTablesRequest": {
      "properties": {
        "CatalogId": {
          "$ref": "#/definitions/CatalogIdString",
          "description": "The ID of the Data Catalog where the tables reside. If none is supplied, the AWS account ID is used by default."
        },
        "DatabaseName": {
          "$ref": "#/definitions/NameString",
          "description": "The database in the catalog whose tables to list."
        },
        "Expression": {
          "$ref": "#/definitions/FilterString",
          "description": "A regular expression pattern. If present, only those tables whose names match the pattern are returned."
        },
        "MaxResults": {
          "$ref": "#/definitions/PageSize",
          "description": "The maximum number of tables to return in a single response."
        },
        "NextToken": {
          "$ref": "#/definitions/Token",
          "description": "A continuation token, included if this is a continuation call."
        }
      },
      "required": [
        "DatabaseName"
      ],
      "type": "object"
    },
    "GetTablesResponse": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/Token",
          "description": "A continuation token, present if the current list segment is not the last."
        },
        "TableList": {
          "$ref": "#/definitions/TableList",
          "description": "A list of the requested <code>Table</code> objects."
        }
      },
      "type": "object"
    },
    "GetTriggerRequest": {
      "properties": {
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the trigger to retrieve."
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "GetTriggerResponse": {
      "properties": {
        "Trigger": {
          "$ref": "#/definitions/Trigger",
          "description": "The requested trigger definition."
        }
      },
      "type": "object"
    },
    "GetTriggersRequest": {
      "properties": {
        "DependentJobName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the job for which to retrieve triggers."
        },
        "MaxResults": {
          "$ref": "#/definitions/PageSize",
          "description": "The maximum size of the response."
        },
        "NextToken": {
          "$ref": "#/definitions/GenericString",
          "description": "A continuation token, if this is a continuation call."
        }
      },
      "type": "object"
    },
    "GetTriggersResponse": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/GenericString",
          "description": "A continuation token, if not all the requested triggers have yet been returned."
        },
        "Triggers": {
          "$ref": "#/definitions/TriggerList",
          "description": "A list of triggers for the specified job."
        }
      },
      "type": "object"
    },
    "GetUserDefinedFunctionRequest": {
      "properties": {
        "CatalogId": {
          "$ref": "#/definitions/CatalogIdString",
          "description": "The ID of the Data Catalog where the function to be retrieved is located. If none is supplied, the AWS account ID is used by default."
        },
        "DatabaseName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the catalog database where the function is located."
        },
        "FunctionName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the function."
        }
      },
      "required": [
        "DatabaseName",
        "FunctionName"
      ],
      "type": "object"
    },
    "GetUserDefinedFunctionResponse": {
      "properties": {
        "UserDefinedFunction": {
          "$ref": "#/definitions/UserDefinedFunction",
          "description": "The requested function definition."
        }
      },
      "type": "object"
    },
    "GetUserDefinedFunctionsRequest": {
      "properties": {
        "CatalogId": {
          "$ref": "#/definitions/CatalogIdString",
          "description": "The ID of the Data Catalog where the functions to be retrieved are located. If none is supplied, the AWS account ID is used by default."
        },
        "DatabaseName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the catalog database where the functions are located."
        },
        "MaxResults": {
          "$ref": "#/definitions/PageSize",
          "description": "The maximum number of functions to return in one response."
        },
        "NextToken": {
          "$ref": "#/definitions/Token",
          "description": "A continuation token, if this is a continuation call."
        },
        "Pattern": {
          "$ref": "#/definitions/NameString",
          "description": "An optional function-name pattern string that filters the function definitions returned."
        }
      },
      "required": [
        "DatabaseName",
        "Pattern"
      ],
      "type": "object"
    },
    "GetUserDefinedFunctionsResponse": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/Token",
          "description": "A continuation token, if the list of functions returned does not include the last requested function."
        },
        "UserDefinedFunctions": {
          "$ref": "#/definitions/UserDefinedFunctionList",
          "description": "A list of requested function definitions."
        }
      },
      "type": "object"
    },
    "GrokClassifier": {
      "description": "A classifier that uses <code>grok</code>.",
      "properties": {
        "Classification": {
          "$ref": "#/definitions/Classification",
          "description": "The data form that the classifier matches, such as Twitter, JSON, Omniture Logs, and so forth."
        },
        "CreationTime": {
          "$ref": "#/definitions/Timestamp",
          "description": "The time this classifier was registered."
        },
        "CustomPatterns": {
          "$ref": "#/definitions/CustomPatterns",
          "description": "Custom grok patterns used by this classifier."
        },
        "GrokPattern": {
          "$ref": "#/definitions/GrokPattern",
          "description": "The grok pattern used by this classifier."
        },
        "LastUpdated": {
          "$ref": "#/definitions/Timestamp",
          "description": "The time this classifier was last updated."
        },
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the classifier."
        },
        "Version": {
          "$ref": "#/definitions/VersionId",
          "description": "The version of this classifier."
        }
      },
      "required": [
        "Name",
        "Classification",
        "GrokPattern"
      ],
      "type": "object"
    },
    "GrokPattern": {
      "maxLength": 2048,
      "minLength": 1,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\t]*"
    },
    "IdString": {
      "maxLength": 255,
      "minLength": 1,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    },
    "IdempotentParameterMismatchException": {
      "description": "The same unique identifier was associated with two different records.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/MessageString",
          "description": "A message describing the problem."
        }
      },
      "type": "object"
    },
    "ImportCatalogToGlueRequest": {
      "properties": {
        "CatalogId": {
          "$ref": "#/definitions/CatalogIdString",
          "description": "The ID of the catalog to import. Currently, this should be the AWS account ID."
        }
      },
      "type": "object"
    },
    "ImportCatalogToGlueResponse": {
      "properties": {},
      "type": "object"
    },
    "Integer": {
      "type": "integer"
    },
    "IntegerFlag": {
      "maximum": 1,
      "minimum": 0,
      "type": "integer"
    },
    "IntegerValue": {
      "type": "integer"
    },
    "InternalServiceException": {
      "description": "An internal service error occurred.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/MessageString",
          "description": "A message describing the problem."
        }
      },
      "type": "object"
    },
    "InvalidInputException": {
      "description": "The input provided was not valid.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/MessageString",
          "description": "A message describing the problem."
        }
      },
      "type": "object"
    },
    "JdbcTarget": {
      "description": "Specifies a JDBC target for a crawl.",
      "properties": {
        "ConnectionName": {
          "$ref": "#/definitions/ConnectionName",
          "description": "The name of the connection to use for the JDBC target."
        },
        "Exclusions": {
          "$ref": "#/definitions/PathList",
          "description": "A list of items to exclude from the crawl."
        },
        "Path": {
          "$ref": "#/definitions/Path",
          "description": "The path of the JDBC target."
        }
      },
      "type": "object"
    },
    "JdbcTargetList": {
      "items": {
        "$ref": "#/definitions/JdbcTarget"
      },
      "type": "array"
    },
    "Job": {
      "description": "Specifies a job in the Data Catalog.",
      "properties": {
        "AllocatedCapacity": {
          "$ref": "#/definitions/IntegerValue",
          "description": "The number of capacity units allocated to this job."
        },
        "Command": {
          "$ref": "#/definitions/JobCommand",
          "description": "The JobCommand that executes this job."
        },
        "Connections": {
          "$ref": "#/definitions/ConnectionsList",
          "description": "The connections used for this job."
        },
        "CreatedOn": {
          "$ref": "#/definitions/TimestampValue",
          "description": "The time and date that this job specification was created."
        },
        "DefaultArguments": {
          "$ref": "#/definitions/GenericMap",
          "description": "The default parameters for this job."
        },
        "Description": {
          "$ref": "#/definitions/DescriptionString",
          "description": "Description of this job."
        },
        "ExecutionProperty": {
          "$ref": "#/definitions/ExecutionProperty",
          "description": "An ExecutionProperty specifying the maximum number of concurrent runs allowed for this job."
        },
        "LastModifiedOn": {
          "$ref": "#/definitions/TimestampValue",
          "description": "The last point in time when this job specification was modified."
        },
        "LogUri": {
          "$ref": "#/definitions/UriString",
          "description": "Location of the logs for this job."
        },
        "MaxRetries": {
          "$ref": "#/definitions/MaxRetries",
          "description": "The maximum number of times to retry this job if it fails."
        },
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "The name you assign to this job."
        },
        "Role": {
          "$ref": "#/definitions/RoleString",
          "description": "The role associated with this job."
        }
      },
      "type": "object"
    },
    "JobBookmarkEntry": {
      "description": "Defines a point which a job can resume processing.",
      "properties": {
        "Attempt": {
          "$ref": "#/definitions/IntegerValue",
          "description": "The attempt ID number."
        },
        "JobBookmark": {
          "$ref": "#/definitions/JsonValue",
          "description": "The bookmark itself."
        },
        "JobName": {
          "$ref": "#/definitions/JobName",
          "description": "Name of the job in question."
        },
        "Run": {
          "$ref": "#/definitions/IntegerValue",
          "description": "The run ID number."
        },
        "Version": {
          "$ref": "#/definitions/IntegerValue",
          "description": "Version of the job."
        }
      },
      "type": "object"
    },
    "JobCommand": {
      "description": "Specifies code that executes a job.",
      "properties": {
        "Name": {
          "$ref": "#/definitions/GenericString",
          "description": "The name of this job command."
        },
        "ScriptLocation": {
          "$ref": "#/definitions/ScriptLocationString",
          "description": "Specifies the location of a script that executes a job."
        }
      },
      "type": "object"
    },
    "JobList": {
      "items": {
        "$ref": "#/definitions/Job"
      },
      "type": "array"
    },
    "JobName": {
      "type": "string"
    },
    "JobRun": {
      "description": "Contains information about a job run.",
      "properties": {
        "AllocatedCapacity": {
          "$ref": "#/definitions/IntegerValue",
          "description": "The amount of infrastructure capacity allocated to this job run."
        },
        "Arguments": {
          "$ref": "#/definitions/GenericMap",
          "description": "The job arguments associated with this run."
        },
        "Attempt": {
          "$ref": "#/definitions/AttemptCount",
          "description": "The number or the attempt to run this job."
        },
        "CompletedOn": {
          "$ref": "#/definitions/TimestampValue",
          "description": "The date and time this job run completed."
        },
        "ErrorMessage": {
          "$ref": "#/definitions/ErrorString",
          "description": "An error message associated with this job run."
        },
        "Id": {
          "$ref": "#/definitions/IdString",
          "description": "The ID of this job run."
        },
        "JobName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the job being run."
        },
        "JobRunState": {
          "$ref": "#/definitions/JobRunState",
          "description": "The current state of the job run."
        },
        "LastModifiedOn": {
          "$ref": "#/definitions/TimestampValue",
          "description": "The last time this job run was modified."
        },
        "PredecessorRuns": {
          "$ref": "#/definitions/PredecessorList",
          "description": "A list of predecessors to this job run."
        },
        "PreviousRunId": {
          "$ref": "#/definitions/IdString",
          "description": "The ID of the previous run of this job."
        },
        "StartedOn": {
          "$ref": "#/definitions/TimestampValue",
          "description": "The date and time at which this job run was started."
        },
        "TriggerName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the trigger for this job run."
        }
      },
      "type": "object"
    },
    "JobRunList": {
      "items": {
        "$ref": "#/definitions/JobRun"
      },
      "type": "array"
    },
    "JobRunState": {
      "enum": [
        "STARTING",
        "RUNNING",
        "STOPPING",
        "STOPPED",
        "SUCCEEDED",
        "FAILED"
      ],
      "type": "string"
    },
    "JobUpdate": {
      "description": "Specifies information used to update an existing job.",
      "properties": {
        "AllocatedCapacity": {
          "$ref": "#/definitions/IntegerValue",
          "description": "The number of capacity units allocated to this job."
        },
        "Command": {
          "$ref": "#/definitions/JobCommand",
          "description": "The JobCommand that executes this job."
        },
        "Connections": {
          "$ref": "#/definitions/ConnectionsList",
          "description": "The connections used for this job."
        },
        "DefaultArguments": {
          "$ref": "#/definitions/GenericMap",
          "description": "The default parameters for this job."
        },
        "Description": {
          "$ref": "#/definitions/DescriptionString",
          "description": "Description of the job."
        },
        "ExecutionProperty": {
          "$ref": "#/definitions/ExecutionProperty",
          "description": "An ExecutionProperty specifying the maximum number of concurrent runs allowed for this job."
        },
        "LogUri": {
          "$ref": "#/definitions/UriString",
          "description": "Location of the logs for this job."
        },
        "MaxRetries": {
          "$ref": "#/definitions/MaxRetries",
          "description": "The maximum number of times to retry this job if it fails."
        },
        "Role": {
          "$ref": "#/definitions/RoleString",
          "description": "The role associated with this job."
        }
      },
      "type": "object"
    },
    "JsonValue": {
      "type": "string"
    },
    "KeyString": {
      "maxLength": 255,
      "minLength": 1,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    },
    "LastCrawlInfo": {
      "description": "Status and error information about the most recent crawl.",
      "properties": {
        "ErrorMessage": {
          "$ref": "#/definitions/DescriptionString",
          "description": "Error information about the last crawl, if an error occurred."
        },
        "LogGroup": {
          "$ref": "#/definitions/LogGroup",
          "description": "The log group for the last crawl."
        },
        "LogStream": {
          "$ref": "#/definitions/LogStream",
          "description": "The log stream for the last crawl."
        },
        "MessagePrefix": {
          "$ref": "#/definitions/MessagePrefix",
          "description": "The prefix for a message about this crawl."
        },
        "StartTime": {
          "$ref": "#/definitions/Timestamp",
          "description": "The time at which the crawl started."
        },
        "Status": {
          "$ref": "#/definitions/LastCrawlStatus",
          "description": "Status of the last crawl."
        }
      },
      "type": "object"
    },
    "LastCrawlStatus": {
      "enum": [
        "SUCCEEDED",
        "CANCELLED",
        "FAILED"
      ],
      "type": "string"
    },
    "Location": {
      "description": "The location of resources.",
      "properties": {
        "Jdbc": {
          "$ref": "#/definitions/CodeGenNodeArgs",
          "description": "A JDBC location."
        },
        "S3": {
          "$ref": "#/definitions/CodeGenNodeArgs",
          "description": "An AWS S3 location."
        }
      },
      "type": "object"
    },
    "LocationMap": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/ColumnValuesString"
          },
          "value": {
            "$ref": "#/definitions/ColumnValuesString"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "LocationString": {
      "maxLength": 2056,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    },
    "LogGroup": {
      "maxLength": 512,
      "minLength": 1,
      "pattern": "[\\.\\-_/#A-Za-z0-9]+",
      "type": "string"
    },
    "LogStream": {
      "maxLength": 512,
      "minLength": 1,
      "pattern": "[^:*]*",
      "type": "string"
    },
    "Logical": {
      "enum": [
        "AND"
      ],
      "type": "string"
    },
    "LogicalOperator": {
      "enum": [
        "EQUALS"
      ],
      "type": "string"
    },
    "MappingEntry": {
      "description": "Defines a mapping.",
      "properties": {
        "SourcePath": {
          "$ref": "#/definitions/SchemaPathString",
          "description": "The source path."
        },
        "SourceTable": {
          "$ref": "#/definitions/TableName",
          "description": "The name of the source table."
        },
        "SourceType": {
          "$ref": "#/definitions/FieldType",
          "description": "The source type."
        },
        "TargetPath": {
          "$ref": "#/definitions/SchemaPathString",
          "description": "The target path."
        },
        "TargetTable": {
          "$ref": "#/definitions/TableName",
          "description": "The target table."
        },
        "TargetType": {
          "$ref": "#/definitions/FieldType",
          "description": "The target type."
        }
      },
      "type": "object"
    },
    "MappingList": {
      "items": {
        "$ref": "#/definitions/MappingEntry"
      },
      "type": "array"
    },
    "MatchCriteria": {
      "items": {
        "$ref": "#/definitions/NameString"
      },
      "maxItems": 10,
      "minItems": 0,
      "type": "array"
    },
    "MaxConcurrentRuns": {
      "type": "integer"
    },
    "MaxRetries": {
      "type": "integer"
    },
    "MessagePrefix": {
      "maxLength": 255,
      "minLength": 1,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    },
    "MessageString": {
      "type": "string"
    },
    "MillisecondsCount": {
      "type": "integer"
    },
    "NameString": {
      "maxLength": 255,
      "minLength": 1,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    },
    "NameStringList": {
      "items": {
        "$ref": "#/definitions/NameString"
      },
      "type": "array"
    },
    "NoScheduleException": {
      "description": "There is no applicable schedule.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/MessageString",
          "description": "A message describing the problem."
        }
      },
      "type": "object"
    },
    "NonNegativeDouble": {
      "format": "double",
      "minimum": 0,
      "type": "number"
    },
    "NonNegativeInteger": {
      "minimum": 0,
      "type": "integer"
    },
    "OperationTimeoutException": {
      "description": "The operation timed out.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/MessageString",
          "description": "A message describing the problem."
        }
      },
      "type": "object"
    },
    "Order": {
      "description": "Specifies the sort order of a sorted column.",
      "properties": {
        "Column": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the column."
        },
        "SortOrder": {
          "$ref": "#/definitions/IntegerFlag",
          "description": "Indicates that the column is sorted in ascending order (<code>== 1</code>), or in descending order (<code>==0</code>)."
        }
      },
      "required": [
        "Column",
        "SortOrder"
      ],
      "type": "object"
    },
    "OrderList": {
      "items": {
        "$ref": "#/definitions/Order"
      },
      "type": "array"
    },
    "PageSize": {
      "maximum": 1000,
      "minimum": 1,
      "type": "integer"
    },
    "ParametersMap": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/KeyString"
          },
          "value": {
            "$ref": "#/definitions/ParametersMapValue"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "ParametersMapValue": {
      "maxLength": 51200,
      "type": "string"
    },
    "Partition": {
      "description": "Represents a slice of table data.",
      "properties": {
        "CreationTime": {
          "$ref": "#/definitions/Timestamp",
          "description": "The time at which the partition was created."
        },
        "DatabaseName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the catalog database where the table in question is located."
        },
        "LastAccessTime": {
          "$ref": "#/definitions/Timestamp",
          "description": "The last time at which the partition was accessed."
        },
        "LastAnalyzedTime": {
          "$ref": "#/definitions/Timestamp",
          "description": "The last time at which column statistics were computed for this partition."
        },
        "Parameters": {
          "$ref": "#/definitions/ParametersMap",
          "description": "Partition parameters, in the form of a list of key-value pairs."
        },
        "StorageDescriptor": {
          "$ref": "#/definitions/StorageDescriptor",
          "description": "Provides information about the physical location where the partition is stored."
        },
        "TableName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the table in question."
        },
        "Values": {
          "$ref": "#/definitions/ValueStringList",
          "description": "The values of the partition."
        }
      },
      "type": "object"
    },
    "PartitionError": {
      "description": "Contains information about a partition error.",
      "properties": {
        "ErrorDetail": {
          "$ref": "#/definitions/ErrorDetail",
          "description": "Details about the partition error."
        },
        "PartitionValues": {
          "$ref": "#/definitions/ValueStringList",
          "description": "The values that define the partition."
        }
      },
      "type": "object"
    },
    "PartitionErrors": {
      "items": {
        "$ref": "#/definitions/PartitionError"
      },
      "type": "array"
    },
    "PartitionInput": {
      "description": "The structure used to create and update a partion.",
      "properties": {
        "LastAccessTime": {
          "$ref": "#/definitions/Timestamp",
          "description": "The last time at which the partition was accessed."
        },
        "LastAnalyzedTime": {
          "$ref": "#/definitions/Timestamp",
          "description": "The last time at which column statistics were computed for this partition."
        },
        "Parameters": {
          "$ref": "#/definitions/ParametersMap",
          "description": "Partition parameters, in the form of a list of key-value pairs."
        },
        "StorageDescriptor": {
          "$ref": "#/definitions/StorageDescriptor",
          "description": "Provides information about the physical location where the partition is stored."
        },
        "Values": {
          "$ref": "#/definitions/ValueStringList",
          "description": "The values of the partition."
        }
      },
      "type": "object"
    },
    "PartitionInputList": {
      "items": {
        "$ref": "#/definitions/PartitionInput"
      },
      "maxItems": 100,
      "minItems": 0,
      "type": "array"
    },
    "PartitionList": {
      "items": {
        "$ref": "#/definitions/Partition"
      },
      "type": "array"
    },
    "PartitionValueList": {
      "properties": {
        "Values": {
          "$ref": "#/definitions/ValueStringList"
        }
      },
      "required": [
        "Values"
      ],
      "type": "object"
    },
    "Path": {
      "type": "string"
    },
    "PathList": {
      "items": {
        "$ref": "#/definitions/Path"
      },
      "type": "array"
    },
    "PhysicalConnectionRequirements": {
      "description": "Specifies the physical requirements for a connection.",
      "properties": {
        "AvailabilityZone": {
          "$ref": "#/definitions/NameString",
          "description": "The connection's availability zone."
        },
        "SecurityGroupIdList": {
          "$ref": "#/definitions/SecurityGroupIdList",
          "description": "The security group ID list used by the connection."
        },
        "SubnetId": {
          "$ref": "#/definitions/NameString",
          "description": "The subnet ID used by the connection."
        }
      },
      "type": "object"
    },
    "Predecessor": {
      "description": "A job run that preceded this one.",
      "properties": {
        "JobName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the predecessor job."
        },
        "RunId": {
          "$ref": "#/definitions/IdString",
          "description": "The job-run ID of the precessor job run."
        }
      },
      "type": "object"
    },
    "PredecessorList": {
      "items": {
        "$ref": "#/definitions/Predecessor"
      },
      "type": "array"
    },
    "Predicate": {
      "description": "Defines the predicate of the trigger, which determines when it fires.",
      "properties": {
        "Conditions": {
          "$ref": "#/definitions/ConditionList",
          "description": "A list of the conditions that determine when the trigger will fire."
        },
        "Logical": {
          "$ref": "#/definitions/Logical",
          "description": "Currently \"OR\" is not supported."
        }
      },
      "type": "object"
    },
    "PredicateString": {
      "maxLength": 2048,
      "minLength": 0,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    },
    "PrincipalType": {
      "enum": [
        "USER",
        "ROLE",
        "GROUP"
      ],
      "type": "string"
    },
    "PythonScript": {
      "type": "string"
    },
    "ResetJobBookmarkRequest": {
      "properties": {
        "JobName": {
          "$ref": "#/definitions/JobName",
          "description": "The name of the job in question."
        }
      },
      "required": [
        "JobName"
      ],
      "type": "object"
    },
    "ResetJobBookmarkResponse": {
      "properties": {
        "JobBookmarkEntry": {
          "$ref": "#/definitions/JobBookmarkEntry",
          "description": "The reset bookmark entry."
        }
      },
      "type": "object"
    },
    "ResourceNumberLimitExceededException": {
      "description": "A resource numerical limit was exceeded.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/MessageString",
          "description": "A message describing the problem."
        }
      },
      "type": "object"
    },
    "ResourceType": {
      "enum": [
        "JAR",
        "FILE",
        "ARCHIVE"
      ],
      "type": "string"
    },
    "ResourceUri": {
      "description": "URIs for function resources.",
      "properties": {
        "ResourceType": {
          "$ref": "#/definitions/ResourceType",
          "description": "The type of the resource."
        },
        "Uri": {
          "$ref": "#/definitions/URI",
          "description": "The URI for accessing the resource."
        }
      },
      "type": "object"
    },
    "ResourceUriList": {
      "items": {
        "$ref": "#/definitions/ResourceUri"
      },
      "maxItems": 1000,
      "minItems": 0,
      "type": "array"
    },
    "RoleArn": {
      "pattern": "arn:aws:iam::\\d{12}:role/.*",
      "type": "string"
    },
    "RoleString": {
      "type": "string"
    },
    "S3Target": {
      "description": "Specifies a crawler target in AWS S3.",
      "properties": {
        "Exclusions": {
          "$ref": "#/definitions/PathList",
          "description": "A list of S3 objects to exclude from the crawl."
        },
        "Path": {
          "$ref": "#/definitions/Path",
          "description": "The path to the S3 target."
        }
      },
      "type": "object"
    },
    "S3TargetList": {
      "items": {
        "$ref": "#/definitions/S3Target"
      },
      "type": "array"
    },
    "Schedule": {
      "description": "A scheduling object using a <code>cron</code> statement to schedule an event.",
      "properties": {
        "ScheduleExpression": {
          "$ref": "#/definitions/CronExpression",
          "description": "A <code>cron</code> expression that can be used as a Cloudwatch event to schedule something (see <a href=\"http://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html\">CloudWatch Schedule Expression Syntax</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>."
        },
        "State": {
          "$ref": "#/definitions/ScheduleState",
          "description": "The state of the schedule."
        }
      },
      "type": "object"
    },
    "ScheduleState": {
      "enum": [
        "SCHEDULED",
        "NOT_SCHEDULED",
        "TRANSITIONING"
      ],
      "type": "string"
    },
    "SchedulerNotRunningException": {
      "description": "The specified scheduler is not running.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/MessageString",
          "description": "A message describing the problem."
        }
      },
      "type": "object"
    },
    "SchedulerRunningException": {
      "description": "The specified scheduler is already running.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/MessageString",
          "description": "A message describing the problem."
        }
      },
      "type": "object"
    },
    "SchedulerTransitioningException": {
      "description": "The specified scheduler is transitioning.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/MessageString",
          "description": "A message describing the problem."
        }
      },
      "type": "object"
    },
    "SchemaChangePolicy": {
      "description": "Crawler policy for update and deletion behavior.",
      "properties": {
        "DeleteBehavior": {
          "$ref": "#/definitions/DeleteBehavior",
          "description": "The deletion behavior."
        },
        "UpdateBehavior": {
          "$ref": "#/definitions/UpdateBehavior",
          "description": "The update behavior."
        }
      },
      "type": "object"
    },
    "SchemaPathString": {
      "type": "string"
    },
    "ScriptLocationString": {
      "type": "string"
    },
    "SecurityGroupIdList": {
      "items": {
        "$ref": "#/definitions/NameString"
      },
      "maxItems": 50,
      "minItems": 0,
      "type": "array"
    },
    "Segment": {
      "description": "Defines a non-overlapping region of a table's partitions, allowing multiple requests to be executed in parallel.",
      "properties": {
        "SegmentNumber": {
          "$ref": "#/definitions/NonNegativeInteger",
          "description": "The zero-based index number of the this segment. For example, if the total number of segments is 4, SegmentNumber values will range from zero through three."
        },
        "TotalSegments": {
          "$ref": "#/definitions/TotalSegmentsInteger",
          "description": "The total numer of segments."
        }
      },
      "required": [
        "SegmentNumber",
        "TotalSegments"
      ],
      "type": "object"
    },
    "SerDeInfo": {
      "description": "Information about a serialization/deserialization program (SerDe) which serves as an extractor and loader.",
      "properties": {
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "Name of the SerDe."
        },
        "Parameters": {
          "$ref": "#/definitions/ParametersMap",
          "description": "A list of initialization parameters for the SerDe, in key-value form."
        },
        "SerializationLibrary": {
          "$ref": "#/definitions/NameString",
          "description": "Usually the class that implements the SerDe. An example is: <code>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</code>."
        }
      },
      "type": "object"
    },
    "SkewedInfo": {
      "description": "Specifies skewed values in a table. Skewed are ones that occur with very high frequency.",
      "properties": {
        "SkewedColumnNames": {
          "$ref": "#/definitions/NameStringList",
          "description": "A list of names of columns that contain skewed values."
        },
        "SkewedColumnValueLocationMaps": {
          "$ref": "#/definitions/LocationMap",
          "description": "A mapping of skewed values to the columns that contain them."
        },
        "SkewedColumnValues": {
          "$ref": "#/definitions/ColumnValueStringList",
          "description": "A list of values that appear so frequently as to be considered skewed."
        }
      },
      "type": "object"
    },
    "StartCrawlerRequest": {
      "properties": {
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "Name of the <code>Crawler</code> to start."
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "StartCrawlerResponse": {
      "properties": {},
      "type": "object"
    },
    "StartCrawlerScheduleRequest": {
      "properties": {
        "CrawlerName": {
          "$ref": "#/definitions/NameString",
          "description": "Name of the crawler to schedule."
        }
      },
      "required": [
        "CrawlerName"
      ],
      "type": "object"
    },
    "StartCrawlerScheduleResponse": {
      "properties": {},
      "type": "object"
    },
    "StartJobRunRequest": {
      "properties": {
        "AllocatedCapacity": {
          "$ref": "#/definitions/IntegerValue",
          "description": "The infrastructure capacity to allocate to this job."
        },
        "Arguments": {
          "$ref": "#/definitions/GenericMap",
          "description": "Specific arguments for this job run."
        },
        "JobName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the job to start."
        },
        "JobRunId": {
          "$ref": "#/definitions/IdString",
          "description": "The ID of the job run to start."
        }
      },
      "required": [
        "JobName"
      ],
      "type": "object"
    },
    "StartJobRunResponse": {
      "properties": {
        "JobRunId": {
          "$ref": "#/definitions/IdString",
          "description": "The ID assigned to this job run."
        }
      },
      "type": "object"
    },
    "StartTriggerRequest": {
      "properties": {
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the trigger to start."
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "StartTriggerResponse": {
      "properties": {
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the trigger that was started."
        }
      },
      "type": "object"
    },
    "StopCrawlerRequest": {
      "properties": {
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "Name of the <code>Crawler</code> to stop."
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "StopCrawlerResponse": {
      "properties": {},
      "type": "object"
    },
    "StopCrawlerScheduleRequest": {
      "properties": {
        "CrawlerName": {
          "$ref": "#/definitions/NameString",
          "description": "Name of the crawler whose schedule state to set."
        }
      },
      "required": [
        "CrawlerName"
      ],
      "type": "object"
    },
    "StopCrawlerScheduleResponse": {
      "properties": {},
      "type": "object"
    },
    "StopTriggerRequest": {
      "properties": {
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the trigger to stop."
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "StopTriggerResponse": {
      "properties": {
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the trigger that was stopped."
        }
      },
      "type": "object"
    },
    "StorageDescriptor": {
      "description": "Describes the physical storage of table data.",
      "properties": {
        "BucketColumns": {
          "$ref": "#/definitions/NameStringList",
          "description": "A list of reducer grouping columns, clustering columns, and bucketing columns in the table."
        },
        "Columns": {
          "$ref": "#/definitions/ColumnList",
          "description": "A list of the <code>Columns</code> in the table."
        },
        "Compressed": {
          "$ref": "#/definitions/Boolean",
          "description": "True if the data in the table is compressed, or False if not."
        },
        "InputFormat": {
          "$ref": "#/definitions/FormatString",
          "description": "The input format: <code>SequenceFileInputFormat</code> (binary), or <code>TextInputFormat</code>, or a custom format."
        },
        "Location": {
          "$ref": "#/definitions/LocationString",
          "description": "The physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name."
        },
        "NumberOfBuckets": {
          "$ref": "#/definitions/Integer",
          "description": "Must be specified if the table contains any dimension columns."
        },
        "OutputFormat": {
          "$ref": "#/definitions/FormatString",
          "description": "The output format: <code>SequenceFileOutputFormat</code> (binary), or <code>IgnoreKeyTextOutputFormat</code>, or a custom format."
        },
        "Parameters": {
          "$ref": "#/definitions/ParametersMap",
          "description": "User-supplied properties in key-value form."
        },
        "SerdeInfo": {
          "$ref": "#/definitions/SerDeInfo",
          "description": "Serialization/deserialization (SerDe) information."
        },
        "SkewedInfo": {
          "$ref": "#/definitions/SkewedInfo",
          "description": "Information about values that appear very frequently in a column (skewed values)."
        },
        "SortColumns": {
          "$ref": "#/definitions/OrderList",
          "description": "A list specifying the sort order of each bucket in the table."
        },
        "StoredAsSubDirectories": {
          "$ref": "#/definitions/Boolean",
          "description": "True if the table data is stored in subdirectories, or False if not."
        }
      },
      "type": "object"
    },
    "StringList": {
      "items": {
        "$ref": "#/definitions/GenericString"
      },
      "type": "array"
    },
    "Table": {
      "description": "Represents a collection of related data organized in columns and rows.",
      "properties": {
        "CreateTime": {
          "$ref": "#/definitions/Timestamp",
          "description": "Time when the table definition was created in the Data Catalog."
        },
        "CreatedBy": {
          "$ref": "#/definitions/NameString",
          "description": "Person or entity who created the table."
        },
        "DatabaseName": {
          "$ref": "#/definitions/NameString",
          "description": "Name of the metadata database where the table metadata resides."
        },
        "Description": {
          "$ref": "#/definitions/DescriptionString",
          "description": "Description of the table."
        },
        "LastAccessTime": {
          "$ref": "#/definitions/Timestamp",
          "description": "Last time the table was accessed. This is usually taken from HDFS, and may not be reliable."
        },
        "LastAnalyzedTime": {
          "$ref": "#/definitions/Timestamp",
          "description": "Last time column statistics were computed for this table."
        },
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "Name of the table."
        },
        "Owner": {
          "$ref": "#/definitions/NameString",
          "description": "Owner of the table."
        },
        "Parameters": {
          "$ref": "#/definitions/ParametersMap",
          "description": "Properties associated with this table, as a list of key-value pairs."
        },
        "PartitionKeys": {
          "$ref": "#/definitions/ColumnList",
          "description": "A list of columns by which the table is partitioned. Only primitive types are supported as partition keys."
        },
        "Retention": {
          "$ref": "#/definitions/NonNegativeInteger",
          "description": "Retention time for this table."
        },
        "StorageDescriptor": {
          "$ref": "#/definitions/StorageDescriptor",
          "description": "A storage descriptor containing information about the physical storage of this table."
        },
        "TableType": {
          "$ref": "#/definitions/TableTypeString",
          "description": "The type of this table (<code>EXTERNAL_TABLE</code>, <code>VIRTUAL_VIEW</code>, etc.)."
        },
        "UpdateTime": {
          "$ref": "#/definitions/Timestamp",
          "description": "Last time the table was updated."
        },
        "ViewExpandedText": {
          "$ref": "#/definitions/ViewTextString",
          "description": "If the table is a view, the expanded text of the view; otherwise <code>null</code>."
        },
        "ViewOriginalText": {
          "$ref": "#/definitions/ViewTextString",
          "description": "If the table is a view, the original text of the view; otherwise <code>null</code>."
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "TableError": {
      "description": "An error record for table operations.",
      "properties": {
        "ErrorDetail": {
          "$ref": "#/definitions/ErrorDetail",
          "description": "Detail about the error."
        },
        "TableName": {
          "$ref": "#/definitions/NameString",
          "description": "Name of the table."
        }
      },
      "type": "object"
    },
    "TableErrors": {
      "items": {
        "$ref": "#/definitions/TableError"
      },
      "type": "array"
    },
    "TableInput": {
      "description": "Structure used to create or update the table.",
      "properties": {
        "Description": {
          "$ref": "#/definitions/DescriptionString",
          "description": "Description of the table."
        },
        "LastAccessTime": {
          "$ref": "#/definitions/Timestamp",
          "description": "Last time the table was accessed."
        },
        "LastAnalyzedTime": {
          "$ref": "#/definitions/Timestamp",
          "description": "Last time column statistics were computed for this table."
        },
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "Name of the table."
        },
        "Owner": {
          "$ref": "#/definitions/NameString",
          "description": "Owner of the table."
        },
        "Parameters": {
          "$ref": "#/definitions/ParametersMap",
          "description": "Properties associated with this table, as a list of key-value pairs."
        },
        "PartitionKeys": {
          "$ref": "#/definitions/ColumnList",
          "description": "A list of columns by which the table is partitioned. Only primitive types are supported as partition keys."
        },
        "Retention": {
          "$ref": "#/definitions/NonNegativeInteger",
          "description": "Retention time for this table."
        },
        "StorageDescriptor": {
          "$ref": "#/definitions/StorageDescriptor",
          "description": "A storage descriptor containing information about the physical storage of this table."
        },
        "TableType": {
          "$ref": "#/definitions/TableTypeString",
          "description": "The type of this table (<code>EXTERNAL_TABLE</code>, <code>VIRTUAL_VIEW</code>, etc.)."
        },
        "ViewExpandedText": {
          "$ref": "#/definitions/ViewTextString",
          "description": "If the table is a view, the expanded text of the view; otherwise <code>null</code>."
        },
        "ViewOriginalText": {
          "$ref": "#/definitions/ViewTextString",
          "description": "If the table is a view, the original text of the view; otherwise <code>null</code>."
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "TableList": {
      "items": {
        "$ref": "#/definitions/Table"
      },
      "type": "array"
    },
    "TableName": {
      "type": "string"
    },
    "TablePrefix": {
      "maxLength": 128,
      "minLength": 0,
      "type": "string"
    },
    "TableTypeString": {
      "maxLength": 255,
      "type": "string"
    },
    "TableVersion": {
      "properties": {
        "Table": {
          "$ref": "#/definitions/Table"
        },
        "VersionId": {
          "$ref": "#/definitions/VersionString"
        }
      },
      "type": "object"
    },
    "Timestamp": {
      "format": "date-time",
      "type": "string"
    },
    "TimestampValue": {
      "format": "date-time",
      "type": "string"
    },
    "Token": {
      "type": "string"
    },
    "TotalSegmentsInteger": {
      "maximum": 10,
      "minimum": 1,
      "type": "integer"
    },
    "Trigger": {
      "description": "Information about a specific trigger.",
      "properties": {
        "Actions": {
          "$ref": "#/definitions/ActionList",
          "description": "The actions initiated by this trigger."
        },
        "Description": {
          "$ref": "#/definitions/DescriptionString",
          "description": "A description of this trigger."
        },
        "Id": {
          "$ref": "#/definitions/IdString",
          "description": "The trigger ID."
        },
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "Name of the trigger."
        },
        "Predicate": {
          "$ref": "#/definitions/Predicate",
          "description": "The predicate of this trigger."
        },
        "Schedule": {
          "$ref": "#/definitions/GenericString",
          "description": "A cron schedule expression."
        },
        "State": {
          "$ref": "#/definitions/TriggerState",
          "description": "The current state of the trigger."
        },
        "Type": {
          "$ref": "#/definitions/TriggerType",
          "description": "The type of trigger that this is."
        }
      },
      "type": "object"
    },
    "TriggerList": {
      "items": {
        "$ref": "#/definitions/Trigger"
      },
      "type": "array"
    },
    "TriggerState": {
      "enum": [
        "CREATING",
        "CREATED",
        "ACTIVATING",
        "ACTIVATED",
        "DEACTIVATING",
        "DEACTIVATED",
        "DELETING",
        "UPDATING"
      ],
      "type": "string"
    },
    "TriggerType": {
      "enum": [
        "SCHEDULED",
        "CONDITIONAL",
        "ON_DEMAND"
      ],
      "type": "string"
    },
    "TriggerUpdate": {
      "description": "A structure used to provide information used to updata a trigger.",
      "properties": {
        "Actions": {
          "$ref": "#/definitions/ActionList",
          "description": "The actions initiated by this trigger."
        },
        "Description": {
          "$ref": "#/definitions/DescriptionString",
          "description": "A description of this trigger."
        },
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the trigger."
        },
        "Predicate": {
          "$ref": "#/definitions/Predicate",
          "description": "The predicate of this trigger, which defines when it will fire."
        },
        "Schedule": {
          "$ref": "#/definitions/GenericString",
          "description": "A cron expression specifying the schedule."
        }
      },
      "type": "object"
    },
    "URI": {
      "maxLength": 1024,
      "minLength": 1,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    },
    "UpdateBehavior": {
      "enum": [
        "LOG",
        "UPDATE_IN_DATABASE"
      ],
      "type": "string"
    },
    "UpdateClassifierRequest": {
      "properties": {
        "GrokClassifier": {
          "$ref": "#/definitions/UpdateGrokClassifierRequest",
          "description": "A <code>GrokClassifier</code> object with updated fields."
        }
      },
      "type": "object"
    },
    "UpdateClassifierResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateConnectionRequest": {
      "properties": {
        "CatalogId": {
          "$ref": "#/definitions/CatalogIdString",
          "description": "The ID of the Data Catalog in which the connection resides. If none is supplied, the AWS account ID is used by default."
        },
        "ConnectionInput": {
          "$ref": "#/definitions/ConnectionInput",
          "description": "A <code>ConnectionInput</code> object that redefines the connection in question."
        },
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the connection definition to update."
        }
      },
      "required": [
        "Name",
        "ConnectionInput"
      ],
      "type": "object"
    },
    "UpdateConnectionResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateCrawlerRequest": {
      "properties": {
        "Classifiers": {
          "$ref": "#/definitions/ClassifierNameList",
          "description": "A list of custom <code>Classifier</code> names that the user has registered. By default, all AWS classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification."
        },
        "DatabaseName": {
          "$ref": "#/definitions/DatabaseName",
          "description": "The Glue <code>Database</code> where results will be stored, such as: <code>arn:aws:daylight:us-east-1::database/sometable/*</code>."
        },
        "Description": {
          "$ref": "#/definitions/DescriptionStringRemovable",
          "description": "A description of the new <code>Crawler</code>."
        },
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "Name of the new <code>Crawler</code>."
        },
        "Role": {
          "$ref": "#/definitions/RoleArn",
          "description": "The AWS ARN of the IAM role used by the new <code>Crawler</code> to access customer resources."
        },
        "Schedule": {
          "$ref": "#/definitions/CronExpression",
          "description": "A cron expression that can be used as a Cloudwatch event (see <a href=\"http://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html\">CloudWatch Schedule Expression Syntax</a>. For example, to run every day at 12:15 UTC, specify: <code>cron(15 12 * * ? *)</code>."
        },
        "SchemaChangePolicy": {
          "$ref": "#/definitions/SchemaChangePolicy",
          "description": "Policy for the crawler's update and deletion behavior."
        },
        "TablePrefix": {
          "$ref": "#/definitions/TablePrefix",
          "description": "The table prefix used for catalog tables created."
        },
        "Targets": {
          "$ref": "#/definitions/CrawlerTargets",
          "description": "A list of collection of targets to crawl."
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "UpdateCrawlerResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateCrawlerScheduleRequest": {
      "properties": {
        "CrawlerName": {
          "$ref": "#/definitions/NameString",
          "description": "Name of the crawler whose schedule to update."
        },
        "Schedule": {
          "$ref": "#/definitions/CronExpression",
          "description": "Cron expression of the updated schedule."
        }
      },
      "required": [
        "CrawlerName"
      ],
      "type": "object"
    },
    "UpdateCrawlerScheduleResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateDatabaseRequest": {
      "properties": {
        "CatalogId": {
          "$ref": "#/definitions/CatalogIdString",
          "description": "The ID of the Data Catalog in which the metadata database resides. If none is supplied, the AWS account ID is used by default."
        },
        "DatabaseInput": {
          "$ref": "#/definitions/DatabaseInput",
          "description": "A <code>DatabaseInput</code> object specifying the new definition of the metadata database in the catalog."
        },
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the metadata database to update in the catalog."
        }
      },
      "required": [
        "Name",
        "DatabaseInput"
      ],
      "type": "object"
    },
    "UpdateDatabaseResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateDevEndpointRequest": {
      "properties": {
        "CustomLibraries": {
          "$ref": "#/definitions/DevEndpointCustomLibraries",
          "description": "Custom Python or Java custom libraries to be loaded in the DevEndpoint."
        },
        "EndpointName": {
          "$ref": "#/definitions/GenericString",
          "description": "The name of the DevEndpoint to be updated."
        },
        "PublicKey": {
          "$ref": "#/definitions/GenericString",
          "description": "The public key for the DevEndpoint to use."
        }
      },
      "required": [
        "EndpointName"
      ],
      "type": "object"
    },
    "UpdateDevEndpointResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateGrokClassifierRequest": {
      "description": "Specifies a Grok classifier to update when passed to UpdateClassifier.",
      "properties": {
        "Classification": {
          "$ref": "#/definitions/Classification",
          "description": "The type of result that the classifier matches, such as Twitter Json, Omniture logs, Cloudwatch logs, and so forth."
        },
        "CustomPatterns": {
          "$ref": "#/definitions/CustomPatterns",
          "description": "Custom grok patterns used by this classifier."
        },
        "GrokPattern": {
          "$ref": "#/definitions/GrokPattern",
          "description": "The grok pattern used by this classifier."
        },
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the <code>GrokClassifier</code>."
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "UpdateJobRequest": {
      "properties": {
        "JobName": {
          "$ref": "#/definitions/NameString",
          "description": "Name of the job definition to update."
        },
        "JobUpdate": {
          "$ref": "#/definitions/JobUpdate",
          "description": "Specifies the values with which to update the job."
        }
      },
      "required": [
        "JobName",
        "JobUpdate"
      ],
      "type": "object"
    },
    "UpdateJobResponse": {
      "properties": {
        "JobName": {
          "$ref": "#/definitions/NameString",
          "description": "Returns the name of the updated job."
        }
      },
      "type": "object"
    },
    "UpdatePartitionRequest": {
      "properties": {
        "CatalogId": {
          "$ref": "#/definitions/CatalogIdString",
          "description": "The ID of the Data Catalog where the partition to be updated resides. If none is supplied, the AWS account ID is used by default."
        },
        "DatabaseName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the catalog database in which the table in question resides."
        },
        "PartitionInput": {
          "$ref": "#/definitions/PartitionInput",
          "description": "The new partition object to which to update the partition."
        },
        "PartitionValueList": {
          "$ref": "#/definitions/BoundedPartitionValueList",
          "description": "A list of the values defining the partition."
        },
        "TableName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the table where the partition to be updated is located."
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "PartitionValueList",
        "PartitionInput"
      ],
      "type": "object"
    },
    "UpdatePartitionResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateTableRequest": {
      "properties": {
        "CatalogId": {
          "$ref": "#/definitions/CatalogIdString",
          "description": "The ID of the Data Catalog where the table resides. If none is supplied, the AWS account ID is used by default."
        },
        "DatabaseName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the catalog database in which the table resides."
        },
        "TableInput": {
          "$ref": "#/definitions/TableInput",
          "description": "An updated <code>TableInput</code> object to define the metadata table in the catalog."
        }
      },
      "required": [
        "DatabaseName",
        "TableInput"
      ],
      "type": "object"
    },
    "UpdateTableResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateTriggerRequest": {
      "properties": {
        "Name": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the trigger to update."
        },
        "TriggerUpdate": {
          "$ref": "#/definitions/TriggerUpdate",
          "description": "The new values with which to update the trigger."
        }
      },
      "required": [
        "Name",
        "TriggerUpdate"
      ],
      "type": "object"
    },
    "UpdateTriggerResponse": {
      "properties": {
        "Trigger": {
          "$ref": "#/definitions/Trigger",
          "description": "The resulting trigger definition."
        }
      },
      "type": "object"
    },
    "UpdateUserDefinedFunctionRequest": {
      "properties": {
        "CatalogId": {
          "$ref": "#/definitions/CatalogIdString",
          "description": "The ID of the Data Catalog where the function to be updated is located. If none is supplied, the AWS account ID is used by default."
        },
        "DatabaseName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the catalog database where the function to be updated is located."
        },
        "FunctionInput": {
          "$ref": "#/definitions/UserDefinedFunctionInput",
          "description": "A <code>FunctionInput</code> object that re-defines the function in the Data Catalog."
        },
        "FunctionName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the function."
        }
      },
      "required": [
        "DatabaseName",
        "FunctionName",
        "FunctionInput"
      ],
      "type": "object"
    },
    "UpdateUserDefinedFunctionResponse": {
      "properties": {},
      "type": "object"
    },
    "UriString": {
      "type": "string"
    },
    "UserDefinedFunction": {
      "description": "Represents the equivalent of a Hive user-defined function (<code>UDF</code>) definition.",
      "properties": {
        "ClassName": {
          "$ref": "#/definitions/NameString",
          "description": "The Java class that contains the function code."
        },
        "CreateTime": {
          "$ref": "#/definitions/Timestamp",
          "description": "The time at which the function was created."
        },
        "FunctionName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the function."
        },
        "OwnerName": {
          "$ref": "#/definitions/NameString",
          "description": "The owner of the function."
        },
        "OwnerType": {
          "$ref": "#/definitions/PrincipalType",
          "description": "The owner type."
        },
        "ResourceUris": {
          "$ref": "#/definitions/ResourceUriList",
          "description": "The resource URIs for the function."
        }
      },
      "type": "object"
    },
    "UserDefinedFunctionInput": {
      "description": "A structure used to create or updata a user-defined function.",
      "properties": {
        "ClassName": {
          "$ref": "#/definitions/NameString",
          "description": "The Java class that contains the function code."
        },
        "FunctionName": {
          "$ref": "#/definitions/NameString",
          "description": "The name of the function."
        },
        "OwnerName": {
          "$ref": "#/definitions/NameString",
          "description": "The owner of the function."
        },
        "OwnerType": {
          "$ref": "#/definitions/PrincipalType",
          "description": "The owner type."
        },
        "ResourceUris": {
          "$ref": "#/definitions/ResourceUriList",
          "description": "The resource URIs for the function."
        }
      },
      "type": "object"
    },
    "UserDefinedFunctionList": {
      "items": {
        "$ref": "#/definitions/UserDefinedFunction"
      },
      "type": "array"
    },
    "ValidationException": {
      "description": "A value could not be validated.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/MessageString",
          "description": "A message describing the problem."
        }
      },
      "type": "object"
    },
    "ValueString": {
      "maxLength": 1024,
      "type": "string"
    },
    "ValueStringList": {
      "items": {
        "$ref": "#/definitions/ValueString"
      },
      "type": "array"
    },
    "VersionId": {
      "type": "integer"
    },
    "VersionMismatchException": {
      "description": "There was a version conflict.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/MessageString",
          "description": "A message describing the problem."
        }
      },
      "type": "object"
    },
    "VersionString": {
      "maxLength": 255,
      "minLength": 1,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    },
    "ViewTextString": {
      "maxLength": 2048,
      "type": "string"
    }
  }
}

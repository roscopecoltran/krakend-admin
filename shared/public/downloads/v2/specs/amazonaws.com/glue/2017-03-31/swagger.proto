syntax = "proto3";

import "google/api/annotations.proto";

package awsglue;

message PostRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    BatchCreatePartitionRequest body = 10;
}

message Post#BatchDeleteConnectionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    BatchDeleteConnectionRequest body = 10;
}

message Post#BatchDeletePartitionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    BatchDeletePartitionRequest body = 10;
}

message Post#BatchDeleteTableRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    BatchDeleteTableRequest body = 10;
}

message Post#BatchGetPartitionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    BatchGetPartitionRequest body = 10;
}

message Post#CreateClassifierRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateClassifierRequest body = 10;
}

message Post#CreateConnectionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateConnectionRequest body = 10;
}

message Post#CreateCrawlerRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateCrawlerRequest body = 10;
}

message Post#CreateDatabaseRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateDatabaseRequest body = 10;
}

message Post#CreateDevEndpointRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateDevEndpointRequest body = 10;
}

message Post#CreateJobRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateJobRequest body = 10;
}

message Post#CreatePartitionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreatePartitionRequest body = 10;
}

message Post#CreateScriptRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateScriptRequest body = 10;
}

message Post#CreateTableRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateTableRequest body = 10;
}

message Post#CreateTriggerRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateTriggerRequest body = 10;
}

message Post#CreateUserDefinedFunctionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateUserDefinedFunctionRequest body = 10;
}

message Post#DeleteClassifierRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteClassifierRequest body = 10;
}

message Post#DeleteConnectionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteConnectionRequest body = 10;
}

message Post#DeleteCrawlerRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteCrawlerRequest body = 10;
}

message Post#DeleteDatabaseRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteDatabaseRequest body = 10;
}

message Post#DeleteDevEndpointRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteDevEndpointRequest body = 10;
}

message Post#DeleteJobRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteJobRequest body = 10;
}

message Post#DeletePartitionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeletePartitionRequest body = 10;
}

message Post#DeleteTableRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteTableRequest body = 10;
}

message Post#DeleteTriggerRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteTriggerRequest body = 10;
}

message Post#DeleteUserDefinedFunctionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteUserDefinedFunctionRequest body = 10;
}

message Post#GetCatalogImportStatusRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetCatalogImportStatusRequest body = 10;
}

message Post#GetClassifierRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetClassifierRequest body = 10;
}

message Post#GetClassifiersRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    GetClassifiersRequest body = 12;
}

message Post#GetConnectionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetConnectionRequest body = 10;
}

message Post#GetConnectionsRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    GetConnectionsRequest body = 12;
}

message Post#GetCrawlerRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetCrawlerRequest body = 10;
}

message Post#GetCrawlerMetricsRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    GetCrawlerMetricsRequest body = 12;
}

message Post#GetCrawlersRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    GetCrawlersRequest body = 12;
}

message Post#GetDatabaseRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetDatabaseRequest body = 10;
}

message Post#GetDatabasesRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    GetDatabasesRequest body = 12;
}

message Post#GetDataflowGraphRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetDataflowGraphRequest body = 10;
}

message Post#GetDevEndpointRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetDevEndpointRequest body = 10;
}

message Post#GetDevEndpointsRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    GetDevEndpointsRequest body = 12;
}

message Post#GetJobRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetJobRequest body = 10;
}

message Post#GetJobRunRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetJobRunRequest body = 10;
}

message Post#GetJobRunsRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    GetJobRunsRequest body = 12;
}

message Post#GetJobsRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    GetJobsRequest body = 12;
}

message Post#GetMappingRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetMappingRequest body = 10;
}

message Post#GetPartitionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetPartitionRequest body = 10;
}

message Post#GetPartitionsRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    GetPartitionsRequest body = 12;
}

message Post#GetPlanRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetPlanRequest body = 10;
}

message Post#GetTableRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetTableRequest body = 10;
}

message Post#GetTableVersionsRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    GetTableVersionsRequest body = 12;
}

message Post#GetTablesRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    GetTablesRequest body = 12;
}

message Post#GetTriggerRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetTriggerRequest body = 10;
}

message Post#GetTriggersRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    GetTriggersRequest body = 12;
}

message Post#GetUserDefinedFunctionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetUserDefinedFunctionRequest body = 10;
}

message Post#GetUserDefinedFunctionsRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    GetUserDefinedFunctionsRequest body = 12;
}

message Post#ImportCatalogToGlueRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ImportCatalogToGlueRequest body = 10;
}

message Post#ResetJobBookmarkRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ResetJobBookmarkRequest body = 10;
}

message Post#StartCrawlerRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StartCrawlerRequest body = 10;
}

message Post#StartCrawlerScheduleRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StartCrawlerScheduleRequest body = 10;
}

message Post#StartJobRunRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StartJobRunRequest body = 10;
}

message Post#StartTriggerRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StartTriggerRequest body = 10;
}

message Post#StopCrawlerRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StopCrawlerRequest body = 10;
}

message Post#StopCrawlerScheduleRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StopCrawlerScheduleRequest body = 10;
}

message Post#StopTriggerRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StopTriggerRequest body = 10;
}

message Post#UpdateClassifierRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateClassifierRequest body = 10;
}

message Post#UpdateConnectionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateConnectionRequest body = 10;
}

message Post#UpdateCrawlerRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateCrawlerRequest body = 10;
}

message Post#UpdateCrawlerScheduleRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateCrawlerScheduleRequest body = 10;
}

message Post#UpdateDatabaseRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateDatabaseRequest body = 10;
}

message Post#UpdateDevEndpointRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateDevEndpointRequest body = 10;
}

message Post#UpdateJobRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateJobRequest body = 10;
}

message Post#UpdatePartitionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdatePartitionRequest body = 10;
}

message Post#UpdateTableRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateTableRequest body = 10;
}

message Post#UpdateTriggerRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateTriggerRequest body = 10;
}

message Post#UpdateUserDefinedFunctionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateUserDefinedFunctionRequest body = 10;
}

message AccessDeniedException {
    // A message describing the problem.
    string Message = 1;
}



repeated string ActionList = 1

message AlreadyExistsException {
    // A message describing the problem.
    string Message = 1;
}

message BatchCreatePartitionRequest {
    // The ID of the catalog in which the partion is to be created. Currently, this should be the AWS account ID.
    string CatalogId = 1;
    // The name of the metadata database in which the partition is to be created.
    string DatabaseName = 2;
    // A list of <code>PartitionInput</code> structures that define the partitions to be created.
    array PartitionInputList = 3;
    // The name of the metadata table in which the partition is to be created.
    string TableName = 4;
}

message BatchCreatePartitionResponse {
    // Errors encountered when trying to create the requested partitions.
    array Errors = 1;
}

message BatchDeleteConnectionRequest {
    // The ID of the Data Catalog in which the connections reside. If none is supplied, the AWS account ID is used by default.
    string CatalogId = 1;
    // A list of names of the connections to delete.
    array ConnectionNameList = 2;
}

message BatchDeleteConnectionResponse {
    // A map of the names of connections that were not successfully deleted to error details.
    array Errors = 1;
    // A list of names of the connection definitions that were successfully deleted.
    array Succeeded = 2;
}

message BatchDeletePartitionRequest {
    // The ID of the Data Catalog where the partition to be deleted resides. If none is supplied, the AWS account ID is used by default.
    string CatalogId = 1;
    // The name of the catalog database in which the table in question resides.
    string DatabaseName = 2;
    // A list of <code>PartitionInput</code> structures that define the partitions to be deleted.
    array PartitionsToDelete = 3;
    // The name of the table where the partitions to be deleted is located.
    string TableName = 4;
}

message BatchDeletePartitionResponse {
    // Errors encountered when trying to delete the requested partitions.
    array Errors = 1;
}

repeated PartitionValueList BatchDeletePartitionValueList = 1

repeated string BatchDeleteTableNameList = 1

message BatchDeleteTableRequest {
    // The ID of the Data Catalog where the table resides. If none is supplied, the AWS account ID is used by default.
    string CatalogId = 1;
    // The name of the catalog database where the tables to delete reside.
    string DatabaseName = 2;
    // A list of the table to delete.
    array TablesToDelete = 3;
}

message BatchDeleteTableResponse {
    // A list of errors encountered in attempting to delete the specified tables.
    array Errors = 1;
}

message BatchGetPartitionRequest {
    // The ID of the Data Catalog where the partitions in question reside. If none is supplied, the AWS account ID is used by default.
    string CatalogId = 1;
    // The name of the catalog database where the partitions reside.
    string DatabaseName = 2;
    // A list of partition values identifying the partitions to retrieve.
    array PartitionsToGet = 3;
    // The name of the partitions' table.
    string TableName = 4;
}

message BatchGetPartitionResponse {
    // A list of the requested partitions.
    array Partitions = 1;
    // A list of the partition values in the request for which partions were not returned.
    array UnprocessedKeys = 2;
}

repeated PartitionValueList BatchGetPartitionValueList = 1





repeated string BoundedPartitionValueList = 1

repeated CatalogEntry CatalogEntries = 1

message CatalogEntry {
    // The database in which the table metadata resides.
    string DatabaseName = 1;
    // The name of the table in question.
    string TableName = 2;
}

message CatalogImportStatus {
    // True if the migration has completed, or False otherwise.
    boolean ImportCompleted = 1;
    // The time that the migration was started.
    string ImportTime = 2;
    // The name of the person who initiated the migration.
    string ImportedBy = 3;
}

message Classifier {
    // A GrokClassifier object.
    GrokClassifier GrokClassifier = 1;
}

repeated Classifier ClassifierList = 1

repeated string ClassifierNameList = 1





message CodeGenEdge {
    // The ID of the node at which the edge starts.
    string Source = 1;
    // The ID of the node at which the edge ends.
    string Target = 2;
    // The target of the edge.
    string TargetParameter = 3;
}

message CodeGenNode {
    // Properties of the node, in the form of name-value pairs.
    array Args = 1;
    // A node identifier that is unique within the node's graph.
    string Id = 2;
    // The line number of the node.
    integer LineNumber = 3;
    // The type of node this is.
    string NodeType = 4;
}

message CodeGenNodeArg {
    // The name of the argument or property.
    string Name = 1;
    // True if the value is used as a parameter.
    boolean Param = 2;
    // The value of the argument or property.
    string Value = 3;
}

repeated CodeGenNodeArg CodeGenNodeArgs = 1



message Column {
    // Free-form text comment.
    string Comment = 1;
    // The name of the <code>Column</code>.
    string Name = 2;
    // The datatype of data in the <code>Column</code>.
    string Type = 3;
}

repeated Column ColumnList = 1



repeated string ColumnValueStringList = 1





message ConcurrentModificationException {
    // A message describing the problem.
    string Message = 1;
}

message ConcurrentRunsExceededException {
    // A message describing the problem.
    string Message = 1;
}

message Condition {
    string JobName = 1;
    LogicalOperator LogicalOperator = 2;
    JobRunState State = 3;
}

repeated Condition ConditionList = 1

message Connection {
    // A list of key-value pairs used as parameters for this connection.
    array ConnectionProperties = 1;
    // The type of the connection.
    ConnectionType ConnectionType = 2;
    // The time this connection definition was created.
    string CreationTime = 3;
    // Description of the connection.
    string Description = 4;
    // The user, group or role that last updated this connection definition.
    string LastUpdatedBy = 5;
    // The last time this connection definition was updated.
    string LastUpdatedTime = 6;
    // A list of criteria that can be used in selecting this connection.
    array MatchCriteria = 7;
    // The name of the connection definition.
    string Name = 8;
    // A map of physical connection requirements, such as VPC and SecurityGroup, needed for making this connection successfully.
    PhysicalConnectionRequirements PhysicalConnectionRequirements = 9;
}

message ConnectionInput {
    // A list of key-value pairs used as parameters for this connection.
    array ConnectionProperties = 1;
    // The type of the connection.
    ConnectionType ConnectionType = 2;
    // Description of the connection.
    string Description = 3;
    // A list of criteria that can be used in selecting this connection.
    array MatchCriteria = 4;
    // The name of the connection.
    string Name = 5;
    // A map of physical connection requirements, such as VPC and SecurityGroup, needed for making this connection successfully.
    PhysicalConnectionRequirements PhysicalConnectionRequirements = 6;
}

repeated Connection ConnectionList = 1



message ConnectionPropertie {
    ConnectionPropertyKey key = 1;
    string value = 2;
}
repeated ConnectionPropertie ConnectionProperties = 1

enum ConnectionPropertyKey {
    HOST = 0;
    PORT = 1;
    USERNAME = 2;
    PASSWORD = 3;
    JDBC_DRIVER_JAR_URI = 4;
    JDBC_DRIVER_CLASS_NAME = 5;
    JDBC_ENGINE = 6;
    JDBC_ENGINE_VERSION = 7;
    CONFIG_FILES = 8;
    INSTANCE_ID = 9;
    JDBC_CONNECTION_URL = 10;
}

enum ConnectionType {
    JDBC = 0;
    SFTP = 1;
}

message ConnectionsList {
    // A list of connections used by the job.
    array Connections = 1;
}

message Crawler {
    // A list of custom <code>Classifier</code>s associated with this Crawler.
    array Classifiers = 1;
    // If this Crawler is running, contains the total time elapsed since the last crawl began.
    integer CrawlElapsedTime = 2;
    // The time when the Crawler was created.
    string CreationTime = 3;
    // The <code>Database</code> where this Crawler's output should be stored.
    string DatabaseName = 4;
    // A description of this Crawler and where it should be used.
    string Description = 5;
    // The status of the last crawl, and potentially error information if an error occurred.
    LastCrawlInfo LastCrawl = 6;
    // The time the Crawler was last updated.
    string LastUpdated = 7;
    // The <code>Crawler</code> name.
    string Name = 8;
    // The ARN of an IAM role used to access customer resources such as data in S3.
    string Role = 9;
    // A <code>Schedule</code> object that specifies the schedule on which this Crawler is to be run.
    Schedule Schedule = 10;
    // Sets policy for the crawler's update and delete behavior.
    SchemaChangePolicy SchemaChangePolicy = 11;
    // Indicates whether this Crawler is running, or whether a run is pending.
    CrawlerState State = 12;
    // The table prefix used for catalog tables created.
    string TablePrefix = 13;
    // A collection of targets to crawl.
    CrawlerTargets Targets = 14;
    // The version of the Crawler.
    integer Version = 15;
}

repeated Crawler CrawlerList = 1

message CrawlerMetrics {
    // The name of the crawler.
    string CrawlerName = 1;
    // The duration of the crawler's most recent run, in seconds.
    number LastRuntimeSeconds = 2;
    // The median duration of this crawler's runs, in seconds.
    number MedianRuntimeSeconds = 3;
    // True if the crawler is estimating its
    boolean StillEstimating = 4;
    // A list of the tables created by this crawler.
    integer TablesCreated = 5;
    // A list of the tables deleted by this crawler.
    integer TablesDeleted = 6;
    // A list of the tables created by this crawler.
    integer TablesUpdated = 7;
    // The estimated time left to complete a running crawl.
    number TimeLeftSeconds = 8;
}

repeated CrawlerMetrics CrawlerMetricsList = 1

repeated string CrawlerNameList = 1

message CrawlerNotRunningException {
    // A message describing the problem.
    string Message = 1;
}

message CrawlerRunningException {
    // A message describing the problem.
    string Message = 1;
}

enum CrawlerState {
    READY = 0;
    RUNNING = 1;
    STOPPING = 2;
}

message CrawlerStoppingException {
    // A message describing the problem.
    string Message = 1;
}

message CrawlerTargets {
    // Specifies JDBC targets.
    array JdbcTargets = 1;
    // Specifies targets in AWS S3.
    array S3Targets = 2;
}

message CreateClassifierRequest {
    // A grok classifier to create.
    CreateGrokClassifierRequest GrokClassifier = 1;
}

message CreateClassifierResponse {
}

message CreateConnectionRequest {
    // The ID of the Data Catalog in which to create the connection. If none is supplied, the AWS account ID is used by default.
    string CatalogId = 1;
    // A <code>ConnectionInput</code> object defining the connection to create.
    ConnectionInput ConnectionInput = 2;
}

message CreateConnectionResponse {
}

message CreateCrawlerRequest {
    // A list of custom <code>Classifier</code> names that the user has registered. By default, all AWS classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification.
    array Classifiers = 1;
    // The Glue <code>Database</code> where results will be stored, such as: <code>arn:aws:daylight:us-east-1::database/sometable/*</code>.
    string DatabaseName = 2;
    // A description of the new <code>Crawler</code>.
    string Description = 3;
    // Name of the new <code>Crawler</code>.
    string Name = 4;
    // The AWS ARN of the IAM role used by the new <code>Crawler</code> to access customer resources.
    string Role = 5;
    // A cron expression that can be used as a Cloudwatch event (see <a href="http://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html">CloudWatch Schedule Expression Syntax</a>. For example, to run every day at 12:15 UTC, specify: <code>cron(15 12 * * ? *)</code>.
    string Schedule = 6;
    // Policy for the crawler's update and deletion behavior.
    SchemaChangePolicy SchemaChangePolicy = 7;
    // The table prefix used for catalog tables created.
    string TablePrefix = 8;
    // A list of collection of targets to crawl.
    CrawlerTargets Targets = 9;
}

message CreateCrawlerResponse {
}

message CreateDatabaseRequest {
    // The ID of the Data Catalog in which to create the database. If none is supplied, the AWS account ID is used by default.
    string CatalogId = 1;
    // A <code>DatabaseInput</code> object defining the metadata database to create in the catalog.
    DatabaseInput DatabaseInput = 2;
}

message CreateDatabaseResponse {
}

message CreateDevEndpointRequest {
    // The name to be assigned to the new DevEndpoint.
    string EndpointName = 1;
    // Path to one or more Java Jars in an S3 bucket that should be loaded in your DevEndpoint.
    string ExtraJarsS3Path = 2;
    // Path to one or more Python libraries in an S3 bucket that should be loaded in your DevEndpoint.
    string ExtraPythonLibsS3Path = 3;
    // The number of nodes to use.
    integer NumberOfNodes = 4;
    // The public key to use for authentication.
    string PublicKey = 5;
    // The IAM role for the DevEndpoint.
    string RoleArn = 6;
    // Security group IDs for the security groups to be used by the new DevEndpoint.
    array SecurityGroupIds = 7;
    // The subnet ID for the new DevEndpoint to use.
    string SubnetId = 8;
}

message CreateDevEndpointResponse {
    // The AWS availability zone where this DevEndpoint is located.
    string AvailabilityZone = 1;
    // The point in time at which this DevEndpoint was created.
    string CreatedTimestamp = 2;
    // The name assigned to the new DevEndpoint.
    string EndpointName = 3;
    // Path to one or more Java Jars in an S3 bucket that will be loaded in your DevEndpoint.
    string ExtraJarsS3Path = 4;
    // Path to one or more Python libraries in an S3 bucket that will be loaded in your DevEndpoint.
    string ExtraPythonLibsS3Path = 5;
    // The reason for a current failure in this DevEndpoint.
    string FailureReason = 6;
    // The number of nodes in this DevEndpoint.
    integer NumberOfNodes = 7;
    // The AWS ARN of the role assigned to the new DevEndpoint.
    string RoleArn = 8;
    // The security groups assigned to the new DevEndpoint.
    array SecurityGroupIds = 9;
    // The current status of the new DevEndpoint.
    string Status = 10;
    // The subnet ID assigned to the new DevEndpoint.
    string SubnetId = 11;
    // The ID of the VPC used by this DevEndpoint.
    string VpcId = 12;
    // The address of the YARN endpoint used by this DevEndpoint.
    string YarnEndpointAddress = 13;
}

message CreateGrokClassifierRequest {
    // The type of result that the classifier matches, such as Twitter Json, Omniture logs, Cloudwatch logs, and so forth.
    string Classification = 1;
    // Custom grok patterns used by this classifier.
    string CustomPatterns = 2;
    // The grok pattern used by this classifier.
    string GrokPattern = 3;
    // The name of the new Classifier.
    string Name = 4;
}

message CreateJobRequest {
    // The number of capacity units allocated to this job.
    integer AllocatedCapacity = 1;
    // The JobCommand that executes this job.
    JobCommand Command = 2;
    // The connections used for this job.
    ConnectionsList Connections = 3;
    // The default parameters for this job.
    array DefaultArguments = 4;
    // Description of the job.
    string Description = 5;
    // An ExecutionProperty specifying the maximum number of concurrent runs allowed for this job.
    ExecutionProperty ExecutionProperty = 6;
    // Location of the logs for this job.
    string LogUri = 7;
    // The maximum number of times to retry this job if it fails.
    integer MaxRetries = 8;
    // The name you assign to this job.
    string Name = 9;
    // The role associated with this job.
    string Role = 10;
}

message CreateJobResponse {
    // The unique name of the new job that has been created.
    string Name = 1;
}

message CreatePartitionRequest {
    // The ID of the catalog in which the partion is to be created. Currently, this should be the AWS account ID.
    string CatalogId = 1;
    // The name of the metadata database in which the partition is to be created.
    string DatabaseName = 2;
    // A <code>PartitionInput</code> structure defining the partition to be created.
    PartitionInput PartitionInput = 3;
    // The name of the metadata table in which the partition is to be created.
    string TableName = 4;
}

message CreatePartitionResponse {
}

message CreateScriptRequest {
    // A list of the edges in the DAG.
    array DagEdges = 1;
    // A list of the nodes in the DAG.
    array DagNodes = 2;
}

message CreateScriptResponse {
    // The Python script generated from the DAG.
    string PythonScript = 1;
}

message CreateTableRequest {
    // The ID of the Data Catalog in which to create the <code>Table</code>. If none is supplied, the AWS account ID is used by default.
    string CatalogId = 1;
    // The catalog database in which to create the new table.
    string DatabaseName = 2;
    // The <code>TableInput</code> object that defines the metadata table to create in the catalog.
    TableInput TableInput = 3;
}

message CreateTableResponse {
}

message CreateTriggerRequest {
    // The actions initiated by this trigger when it fires.
    array Actions = 1;
    // A description of the new trigger.
    string Description = 2;
    // The name to assign to the new trigger.
    string Name = 3;
    // A predicate to specify when the new trigger should fire.
    Predicate Predicate = 4;
    // A cron schedule expression for the new trigger.
    string Schedule = 5;
    // The type of the new trigger.
    TriggerType Type = 6;
}

message CreateTriggerResponse {
    // The name assigned to the new trigger.
    string Name = 1;
}

message CreateUserDefinedFunctionRequest {
    // The ID of the Data Catalog in which to create the function. If none is supplied, the AWS account ID is used by default.
    string CatalogId = 1;
    // The name of the catalog database in which to create the function.
    string DatabaseName = 2;
    // A <code>FunctionInput</code> object that defines the function to create in the Data Catalog.
    UserDefinedFunctionInput FunctionInput = 3;
}

message CreateUserDefinedFunctionResponse {
}





repeated CodeGenEdge DagEdges = 1

repeated CodeGenNode DagNodes = 1

message Database {
    // The time at which the metadata database was created in the catalog.
    string CreateTime = 1;
    // Description of the database.
    string Description = 2;
    // The location of the database (for example, an HDFS path).
    string LocationUri = 3;
    // Name of the database.
    string Name = 4;
    // A list of key-value pairs that define parameters and properties of the database.
    array Parameters = 5;
}

message DatabaseInput {
    // Description of the database
    string Description = 1;
    // The location of the database (for example, an HDFS path).
    string LocationUri = 2;
    // Name of the database.
    string Name = 3;
    // A list of key-value pairs that define parameters and properties of the database.
    array Parameters = 4;
}

repeated Database DatabaseList = 1



enum DeleteBehavior {
    LOG = 0;
    DELETE_FROM_DATABASE = 1;
    DEPRECATE_IN_DATABASE = 2;
}

message DeleteClassifierRequest {
    // Name of the <code>Classifier</code> to remove.
    string Name = 1;
}

message DeleteClassifierResponse {
}

repeated string DeleteConnectionNameList = 1

message DeleteConnectionRequest {
    // The ID of the Data Catalog in which the connection resides. If none is supplied, the AWS account ID is used by default.
    string CatalogId = 1;
    // The name of the connection to delete.
    string ConnectionName = 2;
}

message DeleteConnectionResponse {
}

message DeleteCrawlerRequest {
    // Name of the <code>Crawler</code> to remove.
    string Name = 1;
}

message DeleteCrawlerResponse {
}

message DeleteDatabaseRequest {
    // The ID of the Data Catalog in which the database resides. If none is supplied, the AWS account ID is used by default.
    string CatalogId = 1;
    // The name of the Database to delete.
    string Name = 2;
}

message DeleteDatabaseResponse {
}

message DeleteDevEndpointRequest {
    // The name of the DevEndpoint.
    string EndpointName = 1;
}

message DeleteDevEndpointResponse {
}

message DeleteJobRequest {
    // The name of the job to delete.
    string JobName = 1;
}

message DeleteJobResponse {
    // The name of the job that was deleted.
    string JobName = 1;
}

message DeletePartitionRequest {
    // The ID of the Data Catalog where the partition to be deleted resides. If none is supplied, the AWS account ID is used by default.
    string CatalogId = 1;
    // The name of the catalog database in which the table in question resides.
    string DatabaseName = 2;
    // The values that define the partition.
    array PartitionValues = 3;
    // The name of the table where the partition to be deleted is located.
    string TableName = 4;
}

message DeletePartitionResponse {
}

message DeleteTableRequest {
    // The ID of the Data Catalog where the table resides. If none is supplied, the AWS account ID is used by default.
    string CatalogId = 1;
    // The name of the catalog database in which the table resides.
    string DatabaseName = 2;
    // The name of the table to be deleted.
    string Name = 3;
}

message DeleteTableResponse {
}

message DeleteTriggerRequest {
    // The name of the trigger to delete.
    string Name = 1;
}

message DeleteTriggerResponse {
    // The name of the trigger that was deleted.
    string Name = 1;
}

message DeleteUserDefinedFunctionRequest {
    // The ID of the Data Catalog where the function to be deleted is located. If none is supplied, the AWS account ID is used by default.
    string CatalogId = 1;
    // The name of the catalog database where the function is located.
    string DatabaseName = 2;
    // The name of the function definition to be deleted.
    string FunctionName = 3;
}

message DeleteUserDefinedFunctionResponse {
}

message DevEndpoint {
    // The AWS availability zone where this DevEndpoint is located.
    string AvailabilityZone = 1;
    // The point in time at which this DevEndpoint was created.
    string CreatedTimestamp = 2;
    // The name of the DevEndpoint.
    string EndpointName = 3;
    // Path to one or more Java Jars in an S3 bucket that should be loaded in your DevEndpoint.
    string ExtraJarsS3Path = 4;
    // Path to one or more Python libraries in an S3 bucket that should be loaded in your DevEndpoint.
    string ExtraPythonLibsS3Path = 5;
    // The reason for a current failure in this DevEndpoint.
    string FailureReason = 6;
    // The point in time at which this DevEndpoint was last modified.
    string LastModifiedTimestamp = 7;
    // The status of the last update.
    string LastUpdateStatus = 8;
    // The number of nodes used by this DevEndpoint.
    integer NumberOfNodes = 9;
    // The public address used by this DevEndpoint.
    string PublicAddress = 10;
    // The public key to be used by this DevEndpoint for authentication.
    string PublicKey = 11;
    // The AWS ARN of the IAM role used in this DevEndpoint.
    string RoleArn = 12;
    // A list of security group identifiers used in this DevEndpoint.
    array SecurityGroupIds = 13;
    // The current status of this DevEndpoint.
    string Status = 14;
    // The subnet ID for this DevEndpoint.
    string SubnetId = 15;
    // The ID of the virtual private cloud (VPC) used by this DevEndpoint.
    string VpcId = 16;
    // The YARN endpoint address used by this DevEndpoint.
    string YarnEndpointAddress = 17;
}

message DevEndpointCustomLibraries {
    // Path to one or more Java Jars in an S3 bucket that should be loaded in your DevEndpoint.
    string ExtraJarsS3Path = 1;
    // Path to one or more Python libraries in an S3 bucket that should be loaded in your DevEndpoint.
    string ExtraPythonLibsS3Path = 2;
}

repeated DevEndpoint DevEndpointList = 1

message EntityNotFoundException {
    // A message describing the problem.
    string Message = 1;
}

message ErrorByName {
    string key = 1;
    ErrorDetail value = 2;
}
repeated ErrorByName ErrorByName = 1

message ErrorDetail {
    // The code associated with this error.
    string ErrorCode = 1;
    // A message describing the error.
    string ErrorMessage = 2;
}

message ExecutionProperty {
    // The maximum number of concurrent runs allowed for a job.
    integer MaxConcurrentRuns = 1;
}

message GenericMap {
    string key = 1;
    string value = 2;
}
repeated GenericMap GenericMap = 1



message GetCatalogImportStatusRequest {
    // The ID of the catalog to migrate. Currently, this should be the AWS account ID.
    string CatalogId = 1;
}

message GetCatalogImportStatusResponse {
    // The status of the specified catalog migration.
    CatalogImportStatus ImportStatus = 1;
}

message GetClassifierRequest {
    // Name of the <code>Classifier</code> to retrieve.
    string Name = 1;
}

message GetClassifierResponse {
    // The requested <code>Classifier</code>.
    Classifier Classifier = 1;
}

message GetClassifiersRequest {
    // Size of the list to return (optional).
    integer MaxResults = 1;
    // An optional continuation token.
    string NextToken = 2;
}

message GetClassifiersResponse {
    // The requested list of <code>Classifier</code> objects.
    array Classifiers = 1;
    // A continuation token.
    string NextToken = 2;
}

message GetConnectionRequest {
    // The ID of the Data Catalog in which the connection resides. If none is supplied, the AWS account ID is used by default.
    string CatalogId = 1;
    // The name of the connection definition to retrieve.
    string Name = 2;
}

message GetConnectionResponse {
    // The requested connection definition.
    Connection Connection = 1;
}

message GetConnectionsFilter {
    // The type of connections to return.
    ConnectionType ConnectionType = 1;
    // A criteria string that must match the criteria recorded in the connection definition for that connection definition to be returned.
    array MatchCriteria = 2;
}

message GetConnectionsRequest {
    // The ID of the Data Catalog in which the connections reside. If none is supplied, the AWS account ID is used by default.
    string CatalogId = 1;
    // A filter that controls which connections will be returned.
    GetConnectionsFilter Filter = 2;
    // The maximum number of connections to return in one response.
    integer MaxResults = 3;
    // A continuation token, if this is a continuation call.
    string NextToken = 4;
}

message GetConnectionsResponse {
    // A list of requested connection definitions.
    array ConnectionList = 1;
    // A continuation token, if the list of connections returned does not include the last of the filtered connections.
    string NextToken = 2;
}

message GetCrawlerMetricsRequest {
    // A list of the names of crawlers about which to retrieve metrics.
    array CrawlerNameList = 1;
    // The maximum size of a list to return.
    integer MaxResults = 2;
    // A continuation token, if this is a continuation call.
    string NextToken = 3;
}

message GetCrawlerMetricsResponse {
    // A list of metrics for the specified crawler.
    array CrawlerMetricsList = 1;
    // A continuation token, if the returned list does not contain the last metric available.
    string NextToken = 2;
}

message GetCrawlerRequest {
    // Name of the <code>Crawler</code> to retrieve metadata for.
    string Name = 1;
}

message GetCrawlerResponse {
    // The metadata for the specified <code>Crawler</code>.
    Crawler Crawler = 1;
}

message GetCrawlersRequest {
    // The number of Crawlers to return on each call.
    integer MaxResults = 1;
    // A continuation token, if this is a continuation request.
    string NextToken = 2;
}

message GetCrawlersResponse {
    // A list of <code>Crawler</code> metadata.
    array Crawlers = 1;
    // A continuation token, if the returned list has not reached the end of those defined in this customer account.
    string NextToken = 2;
}

message GetDatabaseRequest {
    // The ID of the Data Catalog in which the database resides. If none is supplied, the AWS account ID is used by default.
    string CatalogId = 1;
    // The name of the database to retrieve.
    string Name = 2;
}

message GetDatabaseResponse {
    // The definition of the specified database in the catalog.
    Database Database = 1;
}

message GetDatabasesRequest {
    // The ID of the Data Catalog from which to retrieve <code>Databases</code>. If none is supplied, the AWS account ID is used by default.
    string CatalogId = 1;
    // The maximum number of databases to return in one response.
    integer MaxResults = 2;
    // A continuation token, if this is a continuation call.
    string NextToken = 3;
}

message GetDatabasesResponse {
    // A list of <code>Database</code> objects from the specified catalog.
    array DatabaseList = 1;
    // A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last.
    string NextToken = 2;
}

message GetDataflowGraphRequest {
    // The Python script to transform.
    string PythonScript = 1;
}

message GetDataflowGraphResponse {
    // A list of the edges in the resulting DAG.
    array DagEdges = 1;
    // A list of the nodes in the resulting DAG.
    array DagNodes = 2;
}

message GetDevEndpointRequest {
    // Name of the DevEndpoint for which to retrieve information.
    string EndpointName = 1;
}

message GetDevEndpointResponse {
    // A DevEndpoint definition.
    DevEndpoint DevEndpoint = 1;
}

message GetDevEndpointsRequest {
    // The maximum size of information to return.
    integer MaxResults = 1;
    // A continuation token, if this is a continuation call.
    string NextToken = 2;
}

message GetDevEndpointsResponse {
    // A list of DevEndpoint definitions.
    array DevEndpoints = 1;
    // A continuation token, if not all DevEndpoint definitions have yet been returned.
    string NextToken = 2;
}

message GetJobRequest {
    // The name of the job to retrieve.
    string JobName = 1;
}

message GetJobResponse {
    // The requested job definition.
    Job Job = 1;
}

message GetJobRunRequest {
    // Name of the job being run.
    string JobName = 1;
    // A list of the predecessor runs to return as well.
    boolean PredecessorsIncluded = 2;
    // The ID of the job run.
    string RunId = 3;
}

message GetJobRunResponse {
    // The requested job-run metadata.
    JobRun JobRun = 1;
}

message GetJobRunsRequest {
    // The name of the job for which to retrieve all job runs.
    string JobName = 1;
    // The maximum size of the response.
    integer MaxResults = 2;
    // A continuation token, if this is a continuation call.
    string NextToken = 3;
}

message GetJobRunsResponse {
    // A list of job-run metatdata objects.
    array JobRuns = 1;
    // A continuation token, if not all reequested job runs have been returned.
    string NextToken = 2;
}

message GetJobsRequest {
    // The maximum size of the response.
    integer MaxResults = 1;
    // A continuation token, if this is a continuation call.
    string NextToken = 2;
}

message GetJobsResponse {
    // A list of jobs.
    array Jobs = 1;
    // A continuation token, if not all jobs have yet been returned.
    string NextToken = 2;
}

message GetMappingRequest {
    // Parameters for the mapping.
    Location Location = 1;
    // A list of target tables.
    array Sinks = 2;
    // Specifies the source table.
    CatalogEntry Source = 3;
}

message GetMappingResponse {
    // A list of mappings to the specified targets.
    array Mapping = 1;
}

message GetPartitionRequest {
    // The ID of the Data Catalog where the partition in question resides. If none is supplied, the AWS account ID is used by default.
    string CatalogId = 1;
    // The name of the catalog database where the partition resides.
    string DatabaseName = 2;
    // The values that define the partition.
    array PartitionValues = 3;
    // The name of the partition's table.
    string TableName = 4;
}

message GetPartitionResponse {
    // The requested information, in the form of a <code>Partition</code> object.
    Partition Partition = 1;
}

message GetPartitionsRequest {
    // The ID of the Data Catalog where the partitions in question reside. If none is supplied, the AWS account ID is used by default.
    string CatalogId = 1;
    // The name of the catalog database where the partitions reside.
    string DatabaseName = 2;
    // An expression filtering the partitions to be returned.
    string Expression = 3;
    // The maximum number of partitions to return in a single response.
    integer MaxResults = 4;
    // A continuation token, if this is not the first call to retrieve these partitions.
    string NextToken = 5;
    // The segment of the table's partitions to scan in this request.
    Segment Segment = 6;
    // The name of the partitions' table.
    string TableName = 7;
}

message GetPartitionsResponse {
    // A continuation token, if the returned list of partitions does not does not include the last one.
    string NextToken = 1;
    // A list of requested partitions.
    array Partitions = 2;
}

message GetPlanRequest {
    // Parameters for the mapping.
    Location Location = 1;
    // The list of mappings from a source table to target tables.
    array Mapping = 2;
    // The target tables.
    array Sinks = 3;
    // The source table.
    CatalogEntry Source = 4;
}

message GetPlanResponse {
    // A python script to perform the mapping.
    string PythonScript = 1;
}

message GetTableRequest {
    // The ID of the Data Catalog where the table resides. If none is supplied, the AWS account ID is used by default.
    string CatalogId = 1;
    // The name of the database in the catalog in which the table resides.
    string DatabaseName = 2;
    // The name of the table for which to retrieve the definition.
    string Name = 3;
}

message GetTableResponse {
    // The <code>Table</code> object that defines the specified table.
    Table Table = 1;
}

repeated TableVersion GetTableVersionsList = 1

message GetTableVersionsRequest {
    // The ID of the Data Catalog where the tables reside. If none is supplied, the AWS account ID is used by default.
    string CatalogId = 1;
    // The database in the catalog in which the table resides.
    string DatabaseName = 2;
    // The maximum number of table versions to return in one response.
    integer MaxResults = 3;
    // A continuation token, if this is not the first call.
    string NextToken = 4;
    // The name of the table.
    string TableName = 5;
}

message GetTableVersionsResponse {
    // A continuation token, if the list of available versions does not include the last one.
    string NextToken = 1;
    // A list of strings identifying available versions of the specified table.
    array TableVersions = 2;
}

message GetTablesRequest {
    // The ID of the Data Catalog where the tables reside. If none is supplied, the AWS account ID is used by default.
    string CatalogId = 1;
    // The database in the catalog whose tables to list.
    string DatabaseName = 2;
    // A regular expression pattern. If present, only those tables whose names match the pattern are returned.
    string Expression = 3;
    // The maximum number of tables to return in a single response.
    integer MaxResults = 4;
    // A continuation token, included if this is a continuation call.
    string NextToken = 5;
}

message GetTablesResponse {
    // A continuation token, present if the current list segment is not the last.
    string NextToken = 1;
    // A list of the requested <code>Table</code> objects.
    array TableList = 2;
}

message GetTriggerRequest {
    // The name of the trigger to retrieve.
    string Name = 1;
}

message GetTriggerResponse {
    // The requested trigger definition.
    Trigger Trigger = 1;
}

message GetTriggersRequest {
    // The name of the job for which to retrieve triggers.
    string DependentJobName = 1;
    // The maximum size of the response.
    integer MaxResults = 2;
    // A continuation token, if this is a continuation call.
    string NextToken = 3;
}

message GetTriggersResponse {
    // A continuation token, if not all the requested triggers have yet been returned.
    string NextToken = 1;
    // A list of triggers for the specified job.
    array Triggers = 2;
}

message GetUserDefinedFunctionRequest {
    // The ID of the Data Catalog where the function to be retrieved is located. If none is supplied, the AWS account ID is used by default.
    string CatalogId = 1;
    // The name of the catalog database where the function is located.
    string DatabaseName = 2;
    // The name of the function.
    string FunctionName = 3;
}

message GetUserDefinedFunctionResponse {
    // The requested function definition.
    UserDefinedFunction UserDefinedFunction = 1;
}

message GetUserDefinedFunctionsRequest {
    // The ID of the Data Catalog where the functions to be retrieved are located. If none is supplied, the AWS account ID is used by default.
    string CatalogId = 1;
    // The name of the catalog database where the functions are located.
    string DatabaseName = 2;
    // The maximum number of functions to return in one response.
    integer MaxResults = 3;
    // A continuation token, if this is a continuation call.
    string NextToken = 4;
    // An optional function-name pattern string that filters the function definitions returned.
    string Pattern = 5;
}

message GetUserDefinedFunctionsResponse {
    // A continuation token, if the list of functions returned does not include the last requested function.
    string NextToken = 1;
    // A list of requested function definitions.
    array UserDefinedFunctions = 2;
}

message GrokClassifier {
    // The data form that the classifier matches, such as Twitter, JSON, Omniture Logs, and so forth.
    string Classification = 1;
    // The time this classifier was registered.
    string CreationTime = 2;
    // Custom grok patterns used by this classifier.
    string CustomPatterns = 3;
    // The grok pattern used by this classifier.
    string GrokPattern = 4;
    // The time this classifier was last updated.
    string LastUpdated = 5;
    // The name of the classifier.
    string Name = 6;
    // The version of this classifier.
    integer Version = 7;
}

message IdempotentParameterMismatchException {
    // A message describing the problem.
    string Message = 1;
}

message ImportCatalogToGlueRequest {
    // The ID of the catalog to import. Currently, this should be the AWS account ID.
    string CatalogId = 1;
}

message ImportCatalogToGlueResponse {
}

message InternalServiceException {
    // A message describing the problem.
    string Message = 1;
}

message InvalidInputException {
    // A message describing the problem.
    string Message = 1;
}

message JdbcTarget {
    // The name of the connection to use for the JDBC target.
    string ConnectionName = 1;
    // A list of items to exclude from the crawl.
    array Exclusions = 2;
    // The path of the JDBC target.
    string Path = 3;
}

repeated JdbcTarget JdbcTargetList = 1

message Job {
    // The number of capacity units allocated to this job.
    integer AllocatedCapacity = 1;
    // The JobCommand that executes this job.
    JobCommand Command = 2;
    // The connections used for this job.
    ConnectionsList Connections = 3;
    // The time and date that this job specification was created.
    string CreatedOn = 4;
    // The default parameters for this job.
    array DefaultArguments = 5;
    // Description of this job.
    string Description = 6;
    // An ExecutionProperty specifying the maximum number of concurrent runs allowed for this job.
    ExecutionProperty ExecutionProperty = 7;
    // The last point in time when this job specification was modified.
    string LastModifiedOn = 8;
    // Location of the logs for this job.
    string LogUri = 9;
    // The maximum number of times to retry this job if it fails.
    integer MaxRetries = 10;
    // The name you assign to this job.
    string Name = 11;
    // The role associated with this job.
    string Role = 12;
}

message JobBookmarkEntry {
    // The attempt ID number.
    integer Attempt = 1;
    // The bookmark itself.
    string JobBookmark = 2;
    // Name of the job in question.
    string JobName = 3;
    // The run ID number.
    integer Run = 4;
    // Version of the job.
    integer Version = 5;
}

message JobCommand {
    // The name of this job command.
    string Name = 1;
    // Specifies the location of a script that executes a job.
    string ScriptLocation = 2;
}

repeated Job JobList = 1



message JobRun {
    // The amount of infrastructure capacity allocated to this job run.
    integer AllocatedCapacity = 1;
    // The job arguments associated with this run.
    array Arguments = 2;
    // The number or the attempt to run this job.
    integer Attempt = 3;
    // The date and time this job run completed.
    string CompletedOn = 4;
    // An error message associated with this job run.
    string ErrorMessage = 5;
    // The ID of this job run.
    string Id = 6;
    // The name of the job being run.
    string JobName = 7;
    // The current state of the job run.
    JobRunState JobRunState = 8;
    // The last time this job run was modified.
    string LastModifiedOn = 9;
    // A list of predecessors to this job run.
    array PredecessorRuns = 10;
    // The ID of the previous run of this job.
    string PreviousRunId = 11;
    // The date and time at which this job run was started.
    string StartedOn = 12;
    // The name of the trigger for this job run.
    string TriggerName = 13;
}

repeated JobRun JobRunList = 1

enum JobRunState {
    STARTING = 0;
    RUNNING = 1;
    STOPPING = 2;
    STOPPED = 3;
    SUCCEEDED = 4;
    FAILED = 5;
}

message JobUpdate {
    // The number of capacity units allocated to this job.
    integer AllocatedCapacity = 1;
    // The JobCommand that executes this job.
    JobCommand Command = 2;
    // The connections used for this job.
    ConnectionsList Connections = 3;
    // The default parameters for this job.
    array DefaultArguments = 4;
    // Description of the job.
    string Description = 5;
    // An ExecutionProperty specifying the maximum number of concurrent runs allowed for this job.
    ExecutionProperty ExecutionProperty = 6;
    // Location of the logs for this job.
    string LogUri = 7;
    // The maximum number of times to retry this job if it fails.
    integer MaxRetries = 8;
    // The role associated with this job.
    string Role = 9;
}

message LastCrawlInfo {
    // Error information about the last crawl, if an error occurred.
    string ErrorMessage = 1;
    // The log group for the last crawl.
    string LogGroup = 2;
    // The log stream for the last crawl.
    string LogStream = 3;
    // The prefix for a message about this crawl.
    string MessagePrefix = 4;
    // The time at which the crawl started.
    string StartTime = 5;
    // Status of the last crawl.
    LastCrawlStatus Status = 6;
}

enum LastCrawlStatu {
    SUCCEEDED = 0;
    CANCELLED = 1;
    FAILED = 2;
}

message Location {
    // A JDBC location.
    array Jdbc = 1;
    // An AWS S3 location.
    array S3 = 2;
}

message LocationMap {
    string key = 1;
    string value = 2;
}
repeated LocationMap LocationMap = 1







enum Logical {
    AND = 0;
}

enum LogicalOperator {
    EQUALS = 0;
}

message MappingEntry {
    // The source path.
    string SourcePath = 1;
    // The name of the source table.
    string SourceTable = 2;
    // The source type.
    string SourceType = 3;
    // The target path.
    string TargetPath = 4;
    // The target table.
    string TargetTable = 5;
    // The target type.
    string TargetType = 6;
}

repeated MappingEntry MappingList = 1

repeated string MatchCriteria = 1













repeated string NameStringList = 1

message NoScheduleException {
    // A message describing the problem.
    string Message = 1;
}

message OperationTimeoutException {
    // A message describing the problem.
    string Message = 1;
}

message Order {
    // The name of the column.
    string Column = 1;
    // Indicates that the column is sorted in ascending order (<code>== 1</code>), or in descending order (<code>==0</code>).
    integer SortOrder = 2;
}

repeated Order OrderList = 1



message ParametersMap {
    string key = 1;
    string value = 2;
}
repeated ParametersMap ParametersMap = 1



message Partition {
    // The time at which the partition was created.
    string CreationTime = 1;
    // The name of the catalog database where the table in question is located.
    string DatabaseName = 2;
    // The last time at which the partition was accessed.
    string LastAccessTime = 3;
    // The last time at which column statistics were computed for this partition.
    string LastAnalyzedTime = 4;
    // Partition parameters, in the form of a list of key-value pairs.
    array Parameters = 5;
    // Provides information about the physical location where the partition is stored.
    StorageDescriptor StorageDescriptor = 6;
    // The name of the table in question.
    string TableName = 7;
    // The values of the partition.
    array Values = 8;
}

message PartitionError {
    // Details about the partition error.
    ErrorDetail ErrorDetail = 1;
    // The values that define the partition.
    array PartitionValues = 2;
}

repeated PartitionError PartitionErrors = 1

message PartitionInput {
    // The last time at which the partition was accessed.
    string LastAccessTime = 1;
    // The last time at which column statistics were computed for this partition.
    string LastAnalyzedTime = 2;
    // Partition parameters, in the form of a list of key-value pairs.
    array Parameters = 3;
    // Provides information about the physical location where the partition is stored.
    StorageDescriptor StorageDescriptor = 4;
    // The values of the partition.
    array Values = 5;
}

repeated PartitionInput PartitionInputList = 1

repeated Partition PartitionList = 1

message PartitionValueList {
    array Values = 1;
}



repeated string PathList = 1

message PhysicalConnectionRequirements {
    // The connection's availability zone.
    string AvailabilityZone = 1;
    // The security group ID list used by the connection.
    array SecurityGroupIdList = 2;
    // The subnet ID used by the connection.
    string SubnetId = 3;
}

message Predecessor {
    // The name of the predecessor job.
    string JobName = 1;
    // The job-run ID of the precessor job run.
    string RunId = 2;
}

repeated Predecessor PredecessorList = 1

message Predicate {
    // A list of the conditions that determine when the trigger will fire.
    array Conditions = 1;
    // Currently "OR" is not supported.
    Logical Logical = 2;
}

enum PrincipalType {
    USER = 0;
    ROLE = 1;
    GROUP = 2;
}

message ResetJobBookmarkRequest {
    // The name of the job in question.
    string JobName = 1;
}

message ResetJobBookmarkResponse {
    // The reset bookmark entry.
    JobBookmarkEntry JobBookmarkEntry = 1;
}

message ResourceNumberLimitExceededException {
    // A message describing the problem.
    string Message = 1;
}

enum ResourceType {
    JAR = 0;
    FILE = 1;
    ARCHIVE = 2;
}

message ResourceUri {
    // The type of the resource.
    ResourceType ResourceType = 1;
    // The URI for accessing the resource.
    string Uri = 2;
}

repeated ResourceUri ResourceUriList = 1





message S3Target {
    // A list of S3 objects to exclude from the crawl.
    array Exclusions = 1;
    // The path to the S3 target.
    string Path = 2;
}

repeated S3Target S3TargetList = 1

message Schedule {
    // A <code>cron</code> expression that can be used as a Cloudwatch event to schedule something (see <a href="http://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html">CloudWatch Schedule Expression Syntax</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>.
    string ScheduleExpression = 1;
    // The state of the schedule.
    ScheduleState State = 2;
}

enum ScheduleState {
    SCHEDULED = 0;
    NOT_SCHEDULED = 1;
    TRANSITIONING = 2;
}

message SchedulerNotRunningException {
    // A message describing the problem.
    string Message = 1;
}

message SchedulerRunningException {
    // A message describing the problem.
    string Message = 1;
}

message SchedulerTransitioningException {
    // A message describing the problem.
    string Message = 1;
}

message SchemaChangePolicy {
    // The deletion behavior.
    DeleteBehavior DeleteBehavior = 1;
    // The update behavior.
    UpdateBehavior UpdateBehavior = 2;
}





repeated string SecurityGroupIdList = 1

message Segment {
    // The zero-based index number of the this segment. For example, if the total number of segments is 4, SegmentNumber values will range from zero through three.
    integer SegmentNumber = 1;
    // The total numer of segments.
    integer TotalSegments = 2;
}

message SerDeInfo {
    // Name of the SerDe.
    string Name = 1;
    // A list of initialization parameters for the SerDe, in key-value form.
    array Parameters = 2;
    // Usually the class that implements the SerDe. An example is: <code>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</code>.
    string SerializationLibrary = 3;
}

message SkewedInfo {
    // A list of names of columns that contain skewed values.
    array SkewedColumnNames = 1;
    // A mapping of skewed values to the columns that contain them.
    array SkewedColumnValueLocationMaps = 2;
    // A list of values that appear so frequently as to be considered skewed.
    array SkewedColumnValues = 3;
}

message StartCrawlerRequest {
    // Name of the <code>Crawler</code> to start.
    string Name = 1;
}

message StartCrawlerResponse {
}

message StartCrawlerScheduleRequest {
    // Name of the crawler to schedule.
    string CrawlerName = 1;
}

message StartCrawlerScheduleResponse {
}

message StartJobRunRequest {
    // The infrastructure capacity to allocate to this job.
    integer AllocatedCapacity = 1;
    // Specific arguments for this job run.
    array Arguments = 2;
    // The name of the job to start.
    string JobName = 3;
    // The ID of the job run to start.
    string JobRunId = 4;
}

message StartJobRunResponse {
    // The ID assigned to this job run.
    string JobRunId = 1;
}

message StartTriggerRequest {
    // The name of the trigger to start.
    string Name = 1;
}

message StartTriggerResponse {
    // The name of the trigger that was started.
    string Name = 1;
}

message StopCrawlerRequest {
    // Name of the <code>Crawler</code> to stop.
    string Name = 1;
}

message StopCrawlerResponse {
}

message StopCrawlerScheduleRequest {
    // Name of the crawler whose schedule state to set.
    string CrawlerName = 1;
}

message StopCrawlerScheduleResponse {
}

message StopTriggerRequest {
    // The name of the trigger to stop.
    string Name = 1;
}

message StopTriggerResponse {
    // The name of the trigger that was stopped.
    string Name = 1;
}

message StorageDescriptor {
    // A list of reducer grouping columns, clustering columns, and bucketing columns in the table.
    array BucketColumns = 1;
    // A list of the <code>Columns</code> in the table.
    array Columns = 2;
    // True if the data in the table is compressed, or False if not.
    boolean Compressed = 3;
    // The input format: <code>SequenceFileInputFormat</code> (binary), or <code>TextInputFormat</code>, or a custom format.
    string InputFormat = 4;
    // The physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
    string Location = 5;
    // Must be specified if the table contains any dimension columns.
    integer NumberOfBuckets = 6;
    // The output format: <code>SequenceFileOutputFormat</code> (binary), or <code>IgnoreKeyTextOutputFormat</code>, or a custom format.
    string OutputFormat = 7;
    // User-supplied properties in key-value form.
    array Parameters = 8;
    // Serialization/deserialization (SerDe) information.
    SerDeInfo SerdeInfo = 9;
    // Information about values that appear very frequently in a column (skewed values).
    SkewedInfo SkewedInfo = 10;
    // A list specifying the sort order of each bucket in the table.
    array SortColumns = 11;
    // True if the table data is stored in subdirectories, or False if not.
    boolean StoredAsSubDirectories = 12;
}

repeated string StringList = 1

message Table {
    // Time when the table definition was created in the Data Catalog.
    string CreateTime = 1;
    // Person or entity who created the table.
    string CreatedBy = 2;
    // Name of the metadata database where the table metadata resides.
    string DatabaseName = 3;
    // Description of the table.
    string Description = 4;
    // Last time the table was accessed. This is usually taken from HDFS, and may not be reliable.
    string LastAccessTime = 5;
    // Last time column statistics were computed for this table.
    string LastAnalyzedTime = 6;
    // Name of the table.
    string Name = 7;
    // Owner of the table.
    string Owner = 8;
    // Properties associated with this table, as a list of key-value pairs.
    array Parameters = 9;
    // A list of columns by which the table is partitioned. Only primitive types are supported as partition keys.
    array PartitionKeys = 10;
    // Retention time for this table.
    integer Retention = 11;
    // A storage descriptor containing information about the physical storage of this table.
    StorageDescriptor StorageDescriptor = 12;
    // The type of this table (<code>EXTERNAL_TABLE</code>, <code>VIRTUAL_VIEW</code>, etc.).
    string TableType = 13;
    // Last time the table was updated.
    string UpdateTime = 14;
    // If the table is a view, the expanded text of the view; otherwise <code>null</code>.
    string ViewExpandedText = 15;
    // If the table is a view, the original text of the view; otherwise <code>null</code>.
    string ViewOriginalText = 16;
}

message TableError {
    // Detail about the error.
    ErrorDetail ErrorDetail = 1;
    // Name of the table.
    string TableName = 2;
}

repeated TableError TableErrors = 1

message TableInput {
    // Description of the table.
    string Description = 1;
    // Last time the table was accessed.
    string LastAccessTime = 2;
    // Last time column statistics were computed for this table.
    string LastAnalyzedTime = 3;
    // Name of the table.
    string Name = 4;
    // Owner of the table.
    string Owner = 5;
    // Properties associated with this table, as a list of key-value pairs.
    array Parameters = 6;
    // A list of columns by which the table is partitioned. Only primitive types are supported as partition keys.
    array PartitionKeys = 7;
    // Retention time for this table.
    integer Retention = 8;
    // A storage descriptor containing information about the physical storage of this table.
    StorageDescriptor StorageDescriptor = 9;
    // The type of this table (<code>EXTERNAL_TABLE</code>, <code>VIRTUAL_VIEW</code>, etc.).
    string TableType = 10;
    // If the table is a view, the expanded text of the view; otherwise <code>null</code>.
    string ViewExpandedText = 11;
    // If the table is a view, the original text of the view; otherwise <code>null</code>.
    string ViewOriginalText = 12;
}

repeated Table TableList = 1







message TableVersion {
    Table Table = 1;
    string VersionId = 2;
}

message Trigger {
    // The actions initiated by this trigger.
    array Actions = 1;
    // A description of this trigger.
    string Description = 2;
    // The trigger ID.
    string Id = 3;
    // Name of the trigger.
    string Name = 4;
    // The predicate of this trigger.
    Predicate Predicate = 5;
    // A cron schedule expression.
    string Schedule = 6;
    // The current state of the trigger.
    TriggerState State = 7;
    // The type of trigger that this is.
    TriggerType Type = 8;
}

repeated Trigger TriggerList = 1

enum TriggerState {
    CREATING = 0;
    CREATED = 1;
    ACTIVATING = 2;
    ACTIVATED = 3;
    DEACTIVATING = 4;
    DEACTIVATED = 5;
    DELETING = 6;
    UPDATING = 7;
}

enum TriggerType {
    SCHEDULED = 0;
    CONDITIONAL = 1;
    ON_DEMAND = 2;
}

message TriggerUpdate {
    // The actions initiated by this trigger.
    array Actions = 1;
    // A description of this trigger.
    string Description = 2;
    // The name of the trigger.
    string Name = 3;
    // The predicate of this trigger, which defines when it will fire.
    Predicate Predicate = 4;
    // A cron expression specifying the schedule.
    string Schedule = 5;
}

enum UpdateBehavior {
    LOG = 0;
    UPDATE_IN_DATABASE = 1;
}

message UpdateClassifierRequest {
    // A <code>GrokClassifier</code> object with updated fields.
    UpdateGrokClassifierRequest GrokClassifier = 1;
}

message UpdateClassifierResponse {
}

message UpdateConnectionRequest {
    // The ID of the Data Catalog in which the connection resides. If none is supplied, the AWS account ID is used by default.
    string CatalogId = 1;
    // A <code>ConnectionInput</code> object that redefines the connection in question.
    ConnectionInput ConnectionInput = 2;
    // The name of the connection definition to update.
    string Name = 3;
}

message UpdateConnectionResponse {
}

message UpdateCrawlerRequest {
    // A list of custom <code>Classifier</code> names that the user has registered. By default, all AWS classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification.
    array Classifiers = 1;
    // The Glue <code>Database</code> where results will be stored, such as: <code>arn:aws:daylight:us-east-1::database/sometable/*</code>.
    string DatabaseName = 2;
    // A description of the new <code>Crawler</code>.
    string Description = 3;
    // Name of the new <code>Crawler</code>.
    string Name = 4;
    // The AWS ARN of the IAM role used by the new <code>Crawler</code> to access customer resources.
    string Role = 5;
    // A cron expression that can be used as a Cloudwatch event (see <a href="http://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html">CloudWatch Schedule Expression Syntax</a>. For example, to run every day at 12:15 UTC, specify: <code>cron(15 12 * * ? *)</code>.
    string Schedule = 6;
    // Policy for the crawler's update and deletion behavior.
    SchemaChangePolicy SchemaChangePolicy = 7;
    // The table prefix used for catalog tables created.
    string TablePrefix = 8;
    // A list of collection of targets to crawl.
    CrawlerTargets Targets = 9;
}

message UpdateCrawlerResponse {
}

message UpdateCrawlerScheduleRequest {
    // Name of the crawler whose schedule to update.
    string CrawlerName = 1;
    // Cron expression of the updated schedule.
    string Schedule = 2;
}

message UpdateCrawlerScheduleResponse {
}

message UpdateDatabaseRequest {
    // The ID of the Data Catalog in which the metadata database resides. If none is supplied, the AWS account ID is used by default.
    string CatalogId = 1;
    // A <code>DatabaseInput</code> object specifying the new definition of the metadata database in the catalog.
    DatabaseInput DatabaseInput = 2;
    // The name of the metadata database to update in the catalog.
    string Name = 3;
}

message UpdateDatabaseResponse {
}

message UpdateDevEndpointRequest {
    // Custom Python or Java custom libraries to be loaded in the DevEndpoint.
    DevEndpointCustomLibraries CustomLibraries = 1;
    // The name of the DevEndpoint to be updated.
    string EndpointName = 2;
    // The public key for the DevEndpoint to use.
    string PublicKey = 3;
}

message UpdateDevEndpointResponse {
}

message UpdateGrokClassifierRequest {
    // The type of result that the classifier matches, such as Twitter Json, Omniture logs, Cloudwatch logs, and so forth.
    string Classification = 1;
    // Custom grok patterns used by this classifier.
    string CustomPatterns = 2;
    // The grok pattern used by this classifier.
    string GrokPattern = 3;
    // The name of the <code>GrokClassifier</code>.
    string Name = 4;
}

message UpdateJobRequest {
    // Name of the job definition to update.
    string JobName = 1;
    // Specifies the values with which to update the job.
    JobUpdate JobUpdate = 2;
}

message UpdateJobResponse {
    // Returns the name of the updated job.
    string JobName = 1;
}

message UpdatePartitionRequest {
    // The ID of the Data Catalog where the partition to be updated resides. If none is supplied, the AWS account ID is used by default.
    string CatalogId = 1;
    // The name of the catalog database in which the table in question resides.
    string DatabaseName = 2;
    // The new partition object to which to update the partition.
    PartitionInput PartitionInput = 3;
    // A list of the values defining the partition.
    array PartitionValueList = 4;
    // The name of the table where the partition to be updated is located.
    string TableName = 5;
}

message UpdatePartitionResponse {
}

message UpdateTableRequest {
    // The ID of the Data Catalog where the table resides. If none is supplied, the AWS account ID is used by default.
    string CatalogId = 1;
    // The name of the catalog database in which the table resides.
    string DatabaseName = 2;
    // An updated <code>TableInput</code> object to define the metadata table in the catalog.
    TableInput TableInput = 3;
}

message UpdateTableResponse {
}

message UpdateTriggerRequest {
    // The name of the trigger to update.
    string Name = 1;
    // The new values with which to update the trigger.
    TriggerUpdate TriggerUpdate = 2;
}

message UpdateTriggerResponse {
    // The resulting trigger definition.
    Trigger Trigger = 1;
}

message UpdateUserDefinedFunctionRequest {
    // The ID of the Data Catalog where the function to be updated is located. If none is supplied, the AWS account ID is used by default.
    string CatalogId = 1;
    // The name of the catalog database where the function to be updated is located.
    string DatabaseName = 2;
    // A <code>FunctionInput</code> object that re-defines the function in the Data Catalog.
    UserDefinedFunctionInput FunctionInput = 3;
    // The name of the function.
    string FunctionName = 4;
}

message UpdateUserDefinedFunctionResponse {
}

message UserDefinedFunction {
    // The Java class that contains the function code.
    string ClassName = 1;
    // The time at which the function was created.
    string CreateTime = 2;
    // The name of the function.
    string FunctionName = 3;
    // The owner of the function.
    string OwnerName = 4;
    // The owner type.
    PrincipalType OwnerType = 5;
    // The resource URIs for the function.
    array ResourceUris = 6;
}

message UserDefinedFunctionInput {
    // The Java class that contains the function code.
    string ClassName = 1;
    // The name of the function.
    string FunctionName = 2;
    // The owner of the function.
    string OwnerName = 3;
    // The owner type.
    PrincipalType OwnerType = 4;
    // The resource URIs for the function.
    array ResourceUris = 5;
}

repeated UserDefinedFunction UserDefinedFunctionList = 1

message ValidationException {
    // A message describing the problem.
    string Message = 1;
}



repeated string ValueStringList = 1





message VersionMismatchException {
    // A message describing the problem.
    string Message = 1;
}

service AWSGlueService {
    // Creates one or more partitions in a batch operation.
    rpc Post(PostRequest) returns (BatchCreatePartitionResponse) {
      option (google.api.http) = {
        post: "//"
        body: "body"
      };
    }
    // Deletes a list of connection definitions from the Data Catalog.
    rpc Post#BatchDeleteConnection(Post#BatchDeleteConnectionRequest) returns (BatchDeleteConnectionResponse) {
      option (google.api.http) = {
        post: "//#BatchDeleteConnection"
        body: "body"
      };
    }
    // Deletes one or more partitions in a batch operation.
    rpc Post#BatchDeletePartition(Post#BatchDeletePartitionRequest) returns (BatchDeletePartitionResponse) {
      option (google.api.http) = {
        post: "//#BatchDeletePartition"
        body: "body"
      };
    }
    // Deletes multiple tables at once.
    rpc Post#BatchDeleteTable(Post#BatchDeleteTableRequest) returns (BatchDeleteTableResponse) {
      option (google.api.http) = {
        post: "//#BatchDeleteTable"
        body: "body"
      };
    }
    // Retrieves partitions in a batch request.
    rpc Post#BatchGetPartition(Post#BatchGetPartitionRequest) returns (BatchGetPartitionResponse) {
      option (google.api.http) = {
        post: "//#BatchGetPartition"
        body: "body"
      };
    }
    // Creates a <code>Classifier</code> in the user's account.
    rpc Post#CreateClassifier(Post#CreateClassifierRequest) returns (CreateClassifierResponse) {
      option (google.api.http) = {
        post: "//#CreateClassifier"
        body: "body"
      };
    }
    // Creates a connection definition in the Data Catalog.
    rpc Post#CreateConnection(Post#CreateConnectionRequest) returns (CreateConnectionResponse) {
      option (google.api.http) = {
        post: "//#CreateConnection"
        body: "body"
      };
    }
    // Creates a new <code>Crawler</code> with specified targets, role, configuration, and optional schedule. At least one crawl target must be specified, in either the <i>s3Targets</i> or the <i>jdbcTargets</i> field.
    rpc Post#CreateCrawler(Post#CreateCrawlerRequest) returns (CreateCrawlerResponse) {
      option (google.api.http) = {
        post: "//#CreateCrawler"
        body: "body"
      };
    }
    // Creates a new database in a Data Catalog.
    rpc Post#CreateDatabase(Post#CreateDatabaseRequest) returns (CreateDatabaseResponse) {
      option (google.api.http) = {
        post: "//#CreateDatabase"
        body: "body"
      };
    }
    // Creates a new DevEndpoint.
    rpc Post#CreateDevEndpoint(Post#CreateDevEndpointRequest) returns (CreateDevEndpointResponse) {
      option (google.api.http) = {
        post: "//#CreateDevEndpoint"
        body: "body"
      };
    }
    // Creates a new job.
    rpc Post#CreateJob(Post#CreateJobRequest) returns (CreateJobResponse) {
      option (google.api.http) = {
        post: "//#CreateJob"
        body: "body"
      };
    }
    // Creates a new partition.
    rpc Post#CreatePartition(Post#CreatePartitionRequest) returns (CreatePartitionResponse) {
      option (google.api.http) = {
        post: "//#CreatePartition"
        body: "body"
      };
    }
    // Transforms a directed acyclic graph (DAG) into a Python script.
    rpc Post#CreateScript(Post#CreateScriptRequest) returns (CreateScriptResponse) {
      option (google.api.http) = {
        post: "//#CreateScript"
        body: "body"
      };
    }
    // Creates a new table definition in the Data Catalog.
    rpc Post#CreateTable(Post#CreateTableRequest) returns (CreateTableResponse) {
      option (google.api.http) = {
        post: "//#CreateTable"
        body: "body"
      };
    }
    // Creates a new trigger.
    rpc Post#CreateTrigger(Post#CreateTriggerRequest) returns (CreateTriggerResponse) {
      option (google.api.http) = {
        post: "//#CreateTrigger"
        body: "body"
      };
    }
    // Creates a new function definition in the Data Catalog.
    rpc Post#CreateUserDefinedFunction(Post#CreateUserDefinedFunctionRequest) returns (CreateUserDefinedFunctionResponse) {
      option (google.api.http) = {
        post: "//#CreateUserDefinedFunction"
        body: "body"
      };
    }
    // Removes a <code>Classifier</code> from the metadata store.
    rpc Post#DeleteClassifier(Post#DeleteClassifierRequest) returns (DeleteClassifierResponse) {
      option (google.api.http) = {
        post: "//#DeleteClassifier"
        body: "body"
      };
    }
    // Deletes a connection from the Data Catalog.
    rpc Post#DeleteConnection(Post#DeleteConnectionRequest) returns (DeleteConnectionResponse) {
      option (google.api.http) = {
        post: "//#DeleteConnection"
        body: "body"
      };
    }
    // Removes a specified <code>Crawler</code> from the metadata store, unless the <code>Crawler</code> state is <code>RUNNING</code>.
    rpc Post#DeleteCrawler(Post#DeleteCrawlerRequest) returns (DeleteCrawlerResponse) {
      option (google.api.http) = {
        post: "//#DeleteCrawler"
        body: "body"
      };
    }
    // Removes a specified Database from a Data Catalog.
    rpc Post#DeleteDatabase(Post#DeleteDatabaseRequest) returns (DeleteDatabaseResponse) {
      option (google.api.http) = {
        post: "//#DeleteDatabase"
        body: "body"
      };
    }
    // Deletes a specified DevEndpoint.
    rpc Post#DeleteDevEndpoint(Post#DeleteDevEndpointRequest) returns (DeleteDevEndpointResponse) {
      option (google.api.http) = {
        post: "//#DeleteDevEndpoint"
        body: "body"
      };
    }
    // Deletes a specified job.
    rpc Post#DeleteJob(Post#DeleteJobRequest) returns (DeleteJobResponse) {
      option (google.api.http) = {
        post: "//#DeleteJob"
        body: "body"
      };
    }
    // Deletes a specified partition.
    rpc Post#DeletePartition(Post#DeletePartitionRequest) returns (DeletePartitionResponse) {
      option (google.api.http) = {
        post: "//#DeletePartition"
        body: "body"
      };
    }
    // Removes a table definition from the Data Catalog.
    rpc Post#DeleteTable(Post#DeleteTableRequest) returns (DeleteTableResponse) {
      option (google.api.http) = {
        post: "//#DeleteTable"
        body: "body"
      };
    }
    // Deletes a specified trigger.
    rpc Post#DeleteTrigger(Post#DeleteTriggerRequest) returns (DeleteTriggerResponse) {
      option (google.api.http) = {
        post: "//#DeleteTrigger"
        body: "body"
      };
    }
    // Deletes an existing function definition from the Data Catalog.
    rpc Post#DeleteUserDefinedFunction(Post#DeleteUserDefinedFunctionRequest) returns (DeleteUserDefinedFunctionResponse) {
      option (google.api.http) = {
        post: "//#DeleteUserDefinedFunction"
        body: "body"
      };
    }
    // Retrieves the status of a migration operation.
    rpc Post#GetCatalogImportStatus(Post#GetCatalogImportStatusRequest) returns (GetCatalogImportStatusResponse) {
      option (google.api.http) = {
        post: "//#GetCatalogImportStatus"
        body: "body"
      };
    }
    // Retrieve a <code>Classifier</code> by name.
    rpc Post#GetClassifier(Post#GetClassifierRequest) returns (GetClassifierResponse) {
      option (google.api.http) = {
        post: "//#GetClassifier"
        body: "body"
      };
    }
    // Lists all Classifier objects in the metadata store.
    rpc Post#GetClassifiers(Post#GetClassifiersRequest) returns (GetClassifiersResponse) {
      option (google.api.http) = {
        post: "//#GetClassifiers"
        body: "body"
      };
    }
    // Retrieves a connection definition from the Data Catalog.
    rpc Post#GetConnection(Post#GetConnectionRequest) returns (GetConnectionResponse) {
      option (google.api.http) = {
        post: "//#GetConnection"
        body: "body"
      };
    }
    // Retrieves a list of connection definitions from the Data Catalog.
    rpc Post#GetConnections(Post#GetConnectionsRequest) returns (GetConnectionsResponse) {
      option (google.api.http) = {
        post: "//#GetConnections"
        body: "body"
      };
    }
    // Retrieves metadata for a specified <code>Crawler</code>.
    rpc Post#GetCrawler(Post#GetCrawlerRequest) returns (GetCrawlerResponse) {
      option (google.api.http) = {
        post: "//#GetCrawler"
        body: "body"
      };
    }
    // Retrieves metrics about specified crawlers.
    rpc Post#GetCrawlerMetrics(Post#GetCrawlerMetricsRequest) returns (GetCrawlerMetricsResponse) {
      option (google.api.http) = {
        post: "//#GetCrawlerMetrics"
        body: "body"
      };
    }
    // Retrieves metadata for all <code>Crawlers</code> defined in the customer account.
    rpc Post#GetCrawlers(Post#GetCrawlersRequest) returns (GetCrawlersResponse) {
      option (google.api.http) = {
        post: "//#GetCrawlers"
        body: "body"
      };
    }
    // Retrieves the definition of a specified database.
    rpc Post#GetDatabase(Post#GetDatabaseRequest) returns (GetDatabaseResponse) {
      option (google.api.http) = {
        post: "//#GetDatabase"
        body: "body"
      };
    }
    // Retrieves all Databases defined in a given Data Catalog.
    rpc Post#GetDatabases(Post#GetDatabasesRequest) returns (GetDatabasesResponse) {
      option (google.api.http) = {
        post: "//#GetDatabases"
        body: "body"
      };
    }
    // Transforms a Python script into a directed acyclic graph (DAG).
    rpc Post#GetDataflowGraph(Post#GetDataflowGraphRequest) returns (GetDataflowGraphResponse) {
      option (google.api.http) = {
        post: "//#GetDataflowGraph"
        body: "body"
      };
    }
    // Retrieves information about a specified DevEndpoint.
    rpc Post#GetDevEndpoint(Post#GetDevEndpointRequest) returns (GetDevEndpointResponse) {
      option (google.api.http) = {
        post: "//#GetDevEndpoint"
        body: "body"
      };
    }
    // Retrieves all the DevEndpoints in this AWS account.
    rpc Post#GetDevEndpoints(Post#GetDevEndpointsRequest) returns (GetDevEndpointsResponse) {
      option (google.api.http) = {
        post: "//#GetDevEndpoints"
        body: "body"
      };
    }
    // Retrieves an existing job definition.
    rpc Post#GetJob(Post#GetJobRequest) returns (GetJobResponse) {
      option (google.api.http) = {
        post: "//#GetJob"
        body: "body"
      };
    }
    // Retrieves the metadata for a given job run.
    rpc Post#GetJobRun(Post#GetJobRunRequest) returns (GetJobRunResponse) {
      option (google.api.http) = {
        post: "//#GetJobRun"
        body: "body"
      };
    }
    // Retrieves metadata for all runs of a given job.
    rpc Post#GetJobRuns(Post#GetJobRunsRequest) returns (GetJobRunsResponse) {
      option (google.api.http) = {
        post: "//#GetJobRuns"
        body: "body"
      };
    }
    // Retrieves all current jobs.
    rpc Post#GetJobs(Post#GetJobsRequest) returns (GetJobsResponse) {
      option (google.api.http) = {
        post: "//#GetJobs"
        body: "body"
      };
    }
    // Creates mappings.
    rpc Post#GetMapping(Post#GetMappingRequest) returns (GetMappingResponse) {
      option (google.api.http) = {
        post: "//#GetMapping"
        body: "body"
      };
    }
    // Retrieves information about a specified partition.
    rpc Post#GetPartition(Post#GetPartitionRequest) returns (GetPartitionResponse) {
      option (google.api.http) = {
        post: "//#GetPartition"
        body: "body"
      };
    }
    // Retrieves information about the partitions in a table.
    rpc Post#GetPartitions(Post#GetPartitionsRequest) returns (GetPartitionsResponse) {
      option (google.api.http) = {
        post: "//#GetPartitions"
        body: "body"
      };
    }
    // Gets a Python script to perform a specified mapping.
    rpc Post#GetPlan(Post#GetPlanRequest) returns (GetPlanResponse) {
      option (google.api.http) = {
        post: "//#GetPlan"
        body: "body"
      };
    }
    // Retrieves the <code>Table</code> definition in a Data Catalog for a specified table.
    rpc Post#GetTable(Post#GetTableRequest) returns (GetTableResponse) {
      option (google.api.http) = {
        post: "//#GetTable"
        body: "body"
      };
    }
    // Retrieves a list of strings that identify available versions of a specified table.
    rpc Post#GetTableVersions(Post#GetTableVersionsRequest) returns (GetTableVersionsResponse) {
      option (google.api.http) = {
        post: "//#GetTableVersions"
        body: "body"
      };
    }
    // Retrieves the definitions of some or all of the tables in a given <code>Database</code>.
    rpc Post#GetTables(Post#GetTablesRequest) returns (GetTablesResponse) {
      option (google.api.http) = {
        post: "//#GetTables"
        body: "body"
      };
    }
    // Retrieves the definition of a trigger.
    rpc Post#GetTrigger(Post#GetTriggerRequest) returns (GetTriggerResponse) {
      option (google.api.http) = {
        post: "//#GetTrigger"
        body: "body"
      };
    }
    // Gets all the triggers associated with a job.
    rpc Post#GetTriggers(Post#GetTriggersRequest) returns (GetTriggersResponse) {
      option (google.api.http) = {
        post: "//#GetTriggers"
        body: "body"
      };
    }
    // Retrieves a specified function definition from the Data Catalog.
    rpc Post#GetUserDefinedFunction(Post#GetUserDefinedFunctionRequest) returns (GetUserDefinedFunctionResponse) {
      option (google.api.http) = {
        post: "//#GetUserDefinedFunction"
        body: "body"
      };
    }
    // Retrieves a multiple function definitions from the Data Catalog.
    rpc Post#GetUserDefinedFunctions(Post#GetUserDefinedFunctionsRequest) returns (GetUserDefinedFunctionsResponse) {
      option (google.api.http) = {
        post: "//#GetUserDefinedFunctions"
        body: "body"
      };
    }
    // Imports an existing Athena Data Catalog to AWS Glue
    rpc Post#ImportCatalogToGlue(Post#ImportCatalogToGlueRequest) returns (ImportCatalogToGlueResponse) {
      option (google.api.http) = {
        post: "//#ImportCatalogToGlue"
        body: "body"
      };
    }
    // Resets a bookmark entry.
    rpc Post#ResetJobBookmark(Post#ResetJobBookmarkRequest) returns (ResetJobBookmarkResponse) {
      option (google.api.http) = {
        post: "//#ResetJobBookmark"
        body: "body"
      };
    }
    // Starts a crawl using the specified <code>Crawler</code>, regardless of what is scheduled. If the <code>Crawler</code> is already running, does nothing.
    rpc Post#StartCrawler(Post#StartCrawlerRequest) returns (StartCrawlerResponse) {
      option (google.api.http) = {
        post: "//#StartCrawler"
        body: "body"
      };
    }
    // Changes the schedule state of the specified crawler to <code>SCHEDULED</code>, unless the crawler is already running or the schedule state is already <code>SCHEDULED</code>.
    rpc Post#StartCrawlerSchedule(Post#StartCrawlerScheduleRequest) returns (StartCrawlerScheduleResponse) {
      option (google.api.http) = {
        post: "//#StartCrawlerSchedule"
        body: "body"
      };
    }
    // Runs a job.
    rpc Post#StartJobRun(Post#StartJobRunRequest) returns (StartJobRunResponse) {
      option (google.api.http) = {
        post: "//#StartJobRun"
        body: "body"
      };
    }
    // Starts an existing trigger.
    rpc Post#StartTrigger(Post#StartTriggerRequest) returns (StartTriggerResponse) {
      option (google.api.http) = {
        post: "//#StartTrigger"
        body: "body"
      };
    }
    // If the specified <code>Crawler</code> is running, stops the crawl.
    rpc Post#StopCrawler(Post#StopCrawlerRequest) returns (StopCrawlerResponse) {
      option (google.api.http) = {
        post: "//#StopCrawler"
        body: "body"
      };
    }
    // Sets the schedule state of the specified crawler to <code>NOT_SCHEDULED</code>, but does not stop the crawler if it is already running.
    rpc Post#StopCrawlerSchedule(Post#StopCrawlerScheduleRequest) returns (StopCrawlerScheduleResponse) {
      option (google.api.http) = {
        post: "//#StopCrawlerSchedule"
        body: "body"
      };
    }
    // Stops a specified trigger.
    rpc Post#StopTrigger(Post#StopTriggerRequest) returns (StopTriggerResponse) {
      option (google.api.http) = {
        post: "//#StopTrigger"
        body: "body"
      };
    }
    // Modifies an existing <code>Classifier</code>.
    rpc Post#UpdateClassifier(Post#UpdateClassifierRequest) returns (UpdateClassifierResponse) {
      option (google.api.http) = {
        post: "//#UpdateClassifier"
        body: "body"
      };
    }
    // Updates a connection definition in the Data Catalog.
    rpc Post#UpdateConnection(Post#UpdateConnectionRequest) returns (UpdateConnectionResponse) {
      option (google.api.http) = {
        post: "//#UpdateConnection"
        body: "body"
      };
    }
    // Updates a <code>Crawler</code>. If a <code>Crawler</code> is running, you must stop it using <code>StopCrawler</code> before updating it.
    rpc Post#UpdateCrawler(Post#UpdateCrawlerRequest) returns (UpdateCrawlerResponse) {
      option (google.api.http) = {
        post: "//#UpdateCrawler"
        body: "body"
      };
    }
    // Updates the schedule of a crawler using a Cron expression.
    rpc Post#UpdateCrawlerSchedule(Post#UpdateCrawlerScheduleRequest) returns (UpdateCrawlerScheduleResponse) {
      option (google.api.http) = {
        post: "//#UpdateCrawlerSchedule"
        body: "body"
      };
    }
    // Updates an existing database definition in a Data Catalog.
    rpc Post#UpdateDatabase(Post#UpdateDatabaseRequest) returns (UpdateDatabaseResponse) {
      option (google.api.http) = {
        post: "//#UpdateDatabase"
        body: "body"
      };
    }
    // Updates a specified DevEndpoint.
    rpc Post#UpdateDevEndpoint(Post#UpdateDevEndpointRequest) returns (UpdateDevEndpointResponse) {
      option (google.api.http) = {
        post: "//#UpdateDevEndpoint"
        body: "body"
      };
    }
    // Updates an existing job definition.
    rpc Post#UpdateJob(Post#UpdateJobRequest) returns (UpdateJobResponse) {
      option (google.api.http) = {
        post: "//#UpdateJob"
        body: "body"
      };
    }
    // Updates a partition.
    rpc Post#UpdatePartition(Post#UpdatePartitionRequest) returns (UpdatePartitionResponse) {
      option (google.api.http) = {
        post: "//#UpdatePartition"
        body: "body"
      };
    }
    // Updates a metadata table in the Data Catalog.
    rpc Post#UpdateTable(Post#UpdateTableRequest) returns (UpdateTableResponse) {
      option (google.api.http) = {
        post: "//#UpdateTable"
        body: "body"
      };
    }
    // Updates a trigger definition.
    rpc Post#UpdateTrigger(Post#UpdateTriggerRequest) returns (UpdateTriggerResponse) {
      option (google.api.http) = {
        post: "//#UpdateTrigger"
        body: "body"
      };
    }
    // Updates an existing function definition in the Data Catalog.
    rpc Post#UpdateUserDefinedFunction(Post#UpdateUserDefinedFunctionRequest) returns (UpdateUserDefinedFunctionResponse) {
      option (google.api.http) = {
        post: "//#UpdateUserDefinedFunction"
        body: "body"
      };
    }
}

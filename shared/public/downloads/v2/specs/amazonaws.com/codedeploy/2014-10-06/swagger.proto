syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package awscodedeploy;

message PostRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AddTagsToOnPremisesInstancesInput body = 10;
}

message Post#BatchGetApplicationRevisionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    BatchGetApplicationRevisionsInput body = 10;
}

message Post#BatchGetApplicationsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    BatchGetApplicationsInput body = 10;
}

message Post#BatchGetDeploymentGroupsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    BatchGetDeploymentGroupsInput body = 10;
}

message Post#BatchGetDeploymentInstancesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    BatchGetDeploymentInstancesInput body = 10;
}

message Post#BatchGetDeploymentsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    BatchGetDeploymentsInput body = 10;
}

message Post#BatchGetOnPremisesInstancesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    BatchGetOnPremisesInstancesInput body = 10;
}

message Post#ContinueDeploymentRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ContinueDeploymentInput body = 10;
}

message Post#CreateApplicationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateApplicationInput body = 10;
}

message Post#CreateDeploymentRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateDeploymentInput body = 10;
}

message Post#CreateDeploymentConfigRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateDeploymentConfigInput body = 10;
}

message Post#CreateDeploymentGroupRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateDeploymentGroupInput body = 10;
}

message Post#DeleteApplicationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteApplicationInput body = 10;
}

message Post#DeleteDeploymentConfigRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteDeploymentConfigInput body = 10;
}

message Post#DeleteDeploymentGroupRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteDeploymentGroupInput body = 10;
}

message Post#DeregisterOnPremisesInstanceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeregisterOnPremisesInstanceInput body = 10;
}

message Post#GetApplicationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetApplicationInput body = 10;
}

message Post#GetApplicationRevisionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetApplicationRevisionInput body = 10;
}

message Post#GetDeploymentRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetDeploymentInput body = 10;
}

message Post#GetDeploymentConfigRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetDeploymentConfigInput body = 10;
}

message Post#GetDeploymentGroupRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetDeploymentGroupInput body = 10;
}

message Post#GetDeploymentInstanceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetDeploymentInstanceInput body = 10;
}

message Post#GetOnPremisesInstanceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetOnPremisesInstanceInput body = 10;
}

message Post#ListApplicationRevisionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListApplicationRevisionsInput body = 10;
    // Pagination token
    string nextToken = 11;
}

message Post#ListApplicationsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListApplicationsInput body = 10;
    // Pagination token
    string nextToken = 11;
}

message Post#ListDeploymentConfigsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListDeploymentConfigsInput body = 10;
    // Pagination token
    string nextToken = 11;
}

message Post#ListDeploymentGroupsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListDeploymentGroupsInput body = 10;
    // Pagination token
    string nextToken = 11;
}

message Post#ListDeploymentInstancesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListDeploymentInstancesInput body = 10;
    // Pagination token
    string nextToken = 11;
}

message Post#ListDeploymentsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListDeploymentsInput body = 10;
    // Pagination token
    string nextToken = 11;
}

message Post#ListGitHubAccountTokenNamesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListGitHubAccountTokenNamesInput body = 10;
}

message Post#ListOnPremisesInstancesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListOnPremisesInstancesInput body = 10;
}

message Post#RegisterApplicationRevisionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RegisterApplicationRevisionInput body = 10;
}

message Post#RegisterOnPremisesInstanceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RegisterOnPremisesInstanceInput body = 10;
}

message Post#RemoveTagsFromOnPremisesInstancesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RemoveTagsFromOnPremisesInstancesInput body = 10;
}

message Post#SkipWaitTimeForInstanceTerminationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    SkipWaitTimeForInstanceTerminationInput body = 10;
}

message Post#StopDeploymentRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StopDeploymentInput body = 10;
}

message Post#UpdateApplicationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateApplicationInput body = 10;
}

message Post#UpdateDeploymentGroupRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateDeploymentGroupInput body = 10;
}

message AddTagsToOnPremisesInstancesInput {
    // The names of the on-premises instances to which to add tags.
    array instanceNames = 1;
    // <p>The tag key-value pairs to add to the on-premises instances.</p> <p>Keys and values are both required. Keys cannot be null or empty strings. Value-only tags are not allowed.</p>
    array tags = 2;
}

message Alarm {
    // The name of the alarm. Maximum length is 255 characters. Each alarm name can be used only once in a list of alarms.
    string name = 1;
}

message AlarmConfiguration {
    // A list of alarms configured for the deployment group. A maximum of 10 alarms can be added to a deployment group.
    array alarms = 1;
    // Indicates whether the alarm configuration is enabled.
    boolean enabled = 2;
    // <p>Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from Amazon CloudWatch. The default value is false.</p> <ul> <li> <p>true: The deployment will proceed even if alarm status information can't be retrieved from Amazon CloudWatch.</p> </li> <li> <p>false: The deployment will stop if alarm status information can't be retrieved from Amazon CloudWatch.</p> </li> </ul>
    boolean ignorePollAlarmFailure = 3;
}

repeated Alarm AlarmList = 1



message AlarmsLimitExceededException {
}

message ApplicationAlreadyExistsException {
}

message ApplicationDoesNotExistException {
}

message ApplicationInfo {
    // The application ID.
    string applicationId = 1;
    // The application name.
    string applicationName = 2;
    // The time at which the application was created.
    string createTime = 3;
    // The name for a connection to a GitHub account.
    string gitHubAccountName = 4;
    // True if the user has authenticated with GitHub for the specified application; otherwise, false.
    boolean linkedToGitHub = 5;
}

message ApplicationLimitExceededException {
}

message ApplicationNameRequiredException {
}

enum ApplicationRevisionSortBy {
    REGISTERTIME = 0;
    FIRSTUSEDTIME = 1;
    LASTUSEDTIME = 2;
}

repeated ApplicationInfo ApplicationsInfoList = 1

repeated string ApplicationsList = 1

message AutoRollbackConfiguration {
    // Indicates whether a defined automatic rollback configuration is currently enabled.
    boolean enabled = 1;
    // The event type or types that trigger a rollback.
    array events = 2;
}

enum AutoRollbackEvent {
    DEPLOYMENT_FAILURE = 0;
    DEPLOYMENT_STOP_ON_ALARM = 1;
    DEPLOYMENT_STOP_ON_REQUEST = 2;
}

repeated AutoRollbackEvent AutoRollbackEventsList = 1

message AutoScalingGroup {
    // An Auto Scaling lifecycle event hook name.
    string hook = 1;
    // The Auto Scaling group name.
    string name = 2;
}



repeated AutoScalingGroup AutoScalingGroupList = 1



repeated string AutoScalingGroupNameList = 1

message BatchGetApplicationRevisionsInput {
    // The name of an AWS CodeDeploy application about which to get revision information.
    string applicationName = 1;
    // Information to get about the application revisions, including type and location.
    array revisions = 2;
}

message BatchGetApplicationRevisionsOutput {
    // The name of the application that corresponds to the revisions.
    string applicationName = 1;
    // Information about errors that may have occurred during the API call.
    string errorMessage = 2;
    // Additional information about the revisions, including the type and location.
    array revisions = 3;
}

message BatchGetApplicationsInput {
    // A list of application names separated by spaces.
    array applicationNames = 1;
}

message BatchGetApplicationsOutput {
    // Information about the applications.
    array applicationsInfo = 1;
}

message BatchGetDeploymentGroupsInput {
    // The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
    string applicationName = 1;
    // The deployment groups' names.
    array deploymentGroupNames = 2;
}

message BatchGetDeploymentGroupsOutput {
    // Information about the deployment groups.
    array deploymentGroupsInfo = 1;
    // Information about errors that may have occurred during the API call.
    string errorMessage = 2;
}

message BatchGetDeploymentInstancesInput {
    // The unique ID of a deployment.
    string deploymentId = 1;
    // The unique IDs of instances in the deployment group.
    array instanceIds = 2;
}

message BatchGetDeploymentInstancesOutput {
    // Information about errors that may have occurred during the API call.
    string errorMessage = 1;
    // Information about the instance.
    array instancesSummary = 2;
}

message BatchGetDeploymentsInput {
    // A list of deployment IDs, separated by spaces.
    array deploymentIds = 1;
}

message BatchGetDeploymentsOutput {
    // Information about the deployments.
    array deploymentsInfo = 1;
}

message BatchGetOnPremisesInstancesInput {
    // The names of the on-premises instances about which to get information.
    array instanceNames = 1;
}

message BatchGetOnPremisesInstancesOutput {
    // Information about the on-premises instances.
    array instanceInfos = 1;
}

message BatchLimitExceededException {
}

message BlueGreenDeploymentConfiguration {
    // Information about the action to take when newly provisioned instances are ready to receive traffic in a blue/green deployment.
    DeploymentReadyOption deploymentReadyOption = 1;
    // Information about how instances are provisioned for a replacement environment in a blue/green deployment.
    GreenFleetProvisioningOption greenFleetProvisioningOption = 2;
    // Information about whether to terminate instances in the original fleet during a blue/green deployment.
    BlueInstanceTerminationOption terminateBlueInstancesOnDeploymentSuccess = 3;
}

message BlueInstanceTerminationOption {
    // <p>The action to take on instances in the original environment after a successful blue/green deployment.</p> <ul> <li> <p>TERMINATE: Instances are terminated after a specified wait time.</p> </li> <li> <p>KEEP_ALIVE: Instances are left running after they are deregistered from the load balancer and removed from the deployment group.</p> </li> </ul>
    InstanceAction action = 1;
    // The number of minutes to wait after a successful blue/green deployment before terminating instances from the original environment.
    integer terminationWaitTimeInMinutes = 2;
}

message BucketNameFilterRequiredException {
}

enum BundleType {
    TAR = 0;
    TGZ = 1;
    ZIP = 2;
}

message ContinueDeploymentInput {
    // The deployment ID of the blue/green deployment for which you want to start rerouting traffic to the replacement environment.
    string deploymentId = 1;
}

message CreateApplicationInput {
    // The name of the application. This name must be unique with the applicable IAM user or AWS account.
    string applicationName = 1;
}

message CreateApplicationOutput {
    // A unique application ID.
    string applicationId = 1;
}

message CreateDeploymentConfigInput {
    // The name of the deployment configuration to create.
    string deploymentConfigName = 1;
    // <p>The minimum number of healthy instances that should be available at any time during the deployment. There are two parameters expected in the input: type and value.</p> <p>The type parameter takes either of the following values:</p> <ul> <li> <p>HOST_COUNT: The value parameter represents the minimum number of healthy instances as an absolute value.</p> </li> <li> <p>FLEET_PERCENT: The value parameter represents the minimum number of healthy instances as a percentage of the total number of instances in the deployment. If you specify FLEET_PERCENT, at the start of the deployment, AWS CodeDeploy converts the percentage to the equivalent number of instance and rounds up fractional instances.</p> </li> </ul> <p>The value parameter takes an integer.</p> <p>For example, to set a minimum of 95% healthy instance, specify a type of FLEET_PERCENT and a value of 95.</p>
    MinimumHealthyHosts minimumHealthyHosts = 2;
}

message CreateDeploymentConfigOutput {
    // A unique deployment configuration ID.
    string deploymentConfigId = 1;
}

message CreateDeploymentGroupInput {
    // Information to add about Amazon CloudWatch alarms when the deployment group is created.
    AlarmConfiguration alarmConfiguration = 1;
    // The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
    string applicationName = 2;
    // Configuration information for an automatic rollback that is added when a deployment group is created.
    AutoRollbackConfiguration autoRollbackConfiguration = 3;
    // A list of associated Auto Scaling groups.
    array autoScalingGroups = 4;
    // Information about blue/green deployment options for a deployment group.
    BlueGreenDeploymentConfiguration blueGreenDeploymentConfiguration = 5;
    // <p>If specified, the deployment configuration name can be either one of the predefined configurations provided with AWS CodeDeploy or a custom deployment configuration that you create by calling the create deployment configuration operation.</p> <p>CodeDeployDefault.OneAtATime is the default deployment configuration. It is used if a configuration isn't specified for the deployment or the deployment group.</p> <p>For more information about the predefined deployment configurations in AWS CodeDeploy, see <a href="http://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-configurations.html">Working with Deployment Groups in AWS CodeDeploy</a> in the AWS CodeDeploy User Guide.</p>
    string deploymentConfigName = 6;
    // The name of a new deployment group for the specified application.
    string deploymentGroupName = 7;
    // Information about the type of deployment, in-place or blue/green, that you want to run and whether to route deployment traffic behind a load balancer.
    DeploymentStyle deploymentStyle = 8;
    // The Amazon EC2 tags on which to filter. The deployment group will include EC2 instances with any of the specified tags. Cannot be used in the same call as ec2TagSet.
    array ec2TagFilters = 9;
    // Information about groups of tags applied to EC2 instances. The deployment group will include only EC2 instances identified by all the tag groups. Cannot be used in the same call as ec2TagFilters.
    EC2TagSet ec2TagSet = 10;
    // Information about the load balancer used in a deployment.
    LoadBalancerInfo loadBalancerInfo = 11;
    // The on-premises instance tags on which to filter. The deployment group will include on-premises instances with any of the specified tags. Cannot be used in the same call as OnPremisesTagSet.
    array onPremisesInstanceTagFilters = 12;
    // Information about groups of tags applied to on-premises instances. The deployment group will include only on-premises instances identified by all the tag groups. Cannot be used in the same call as onPremisesInstanceTagFilters.
    OnPremisesTagSet onPremisesTagSet = 13;
    // A service role ARN that allows AWS CodeDeploy to act on the user's behalf when interacting with AWS services.
    string serviceRoleArn = 14;
    // Information about triggers to create when the deployment group is created. For examples, see <a href="http://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-notify-sns.html">Create a Trigger for an AWS CodeDeploy Event</a> in the AWS CodeDeploy User Guide.
    array triggerConfigurations = 15;
}

message CreateDeploymentGroupOutput {
    // A unique deployment group ID.
    string deploymentGroupId = 1;
}

message CreateDeploymentInput {
    // The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
    string applicationName = 1;
    // Configuration information for an automatic rollback that is added when a deployment is created.
    AutoRollbackConfiguration autoRollbackConfiguration = 2;
    // <p>The name of a deployment configuration associated with the applicable IAM user or AWS account.</p> <p>If not specified, the value configured in the deployment group will be used as the default. If the deployment group does not have a deployment configuration associated with it, then CodeDeployDefault.OneAtATime will be used by default.</p>
    string deploymentConfigName = 3;
    // The name of the deployment group.
    string deploymentGroupName = 4;
    // A comment about the deployment.
    string description = 5;
    // <p>Information about how AWS CodeDeploy handles files that already exist in a deployment target location but weren't part of the previous successful deployment.</p> <p>The fileExistsBehavior parameter takes any of the following values:</p> <ul> <li> <p>DISALLOW: The deployment fails. This is also the default behavior if no option is specified.</p> </li> <li> <p>OVERWRITE: The version of the file from the application revision currently being deployed replaces the version already on the instance.</p> </li> <li> <p>RETAIN: The version of the file already on the instance is kept and used as part of the new deployment.</p> </li> </ul>
    FileExistsBehavior fileExistsBehavior = 6;
    // <p>If set to true, then if the deployment causes the ApplicationStop deployment lifecycle event to an instance to fail, the deployment to that instance will not be considered to have failed at that point and will continue on to the BeforeInstall deployment lifecycle event.</p> <p>If set to false or not specified, then if the deployment causes the ApplicationStop deployment lifecycle event to fail to an instance, the deployment to that instance will stop, and the deployment to that instance will be considered to have failed.</p>
    boolean ignoreApplicationStopFailures = 7;
    // The type and location of the revision to deploy.
    RevisionLocation revision = 8;
    // Information about the instances that will belong to the replacement environment in a blue/green deployment.
    TargetInstances targetInstances = 9;
    // Indicates whether to deploy to all instances or only to instances that are not running the latest application revision.
    boolean updateOutdatedInstancesOnly = 10;
}

message CreateDeploymentOutput {
    // A unique deployment ID.
    string deploymentId = 1;
}

message DeleteApplicationInput {
    // The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
    string applicationName = 1;
}

message DeleteDeploymentConfigInput {
    // The name of a deployment configuration associated with the applicable IAM user or AWS account.
    string deploymentConfigName = 1;
}

message DeleteDeploymentGroupInput {
    // The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
    string applicationName = 1;
    // The name of an existing deployment group for the specified application.
    string deploymentGroupName = 2;
}

message DeleteDeploymentGroupOutput {
    // If the output contains no data, and the corresponding deployment group contained at least one Auto Scaling group, AWS CodeDeploy successfully removed all corresponding Auto Scaling lifecycle event hooks from the Amazon EC2 instances in the Auto Scaling group. If the output contains data, AWS CodeDeploy could not remove some Auto Scaling lifecycle event hooks from the Amazon EC2 instances in the Auto Scaling group.
    array hooksNotCleanedUp = 1;
}

message DeploymentAlreadyCompletedException {
}

message DeploymentConfigAlreadyExistsException {
}

message DeploymentConfigDoesNotExistException {
}

message DeploymentConfigInUseException {
}

message DeploymentConfigInfo {
    // The time at which the deployment configuration was created.
    string createTime = 1;
    // The deployment configuration ID.
    string deploymentConfigId = 2;
    // The deployment configuration name.
    string deploymentConfigName = 3;
    // Information about the number or percentage of minimum healthy instance.
    MinimumHealthyHosts minimumHealthyHosts = 4;
}

message DeploymentConfigLimitExceededException {
}

message DeploymentConfigNameRequiredException {
}

repeated string DeploymentConfigsList = 1

enum DeploymentCreator {
    USER = 0;
    AUTOSCALING = 1;
    CODEDEPLOYROLLBACK = 2;
}

message DeploymentDoesNotExistException {
}

message DeploymentGroupAlreadyExistsException {
}

message DeploymentGroupDoesNotExistException {
}

message DeploymentGroupInfo {
    // A list of alarms associated with the deployment group.
    AlarmConfiguration alarmConfiguration = 1;
    // The application name.
    string applicationName = 2;
    // Information about the automatic rollback configuration associated with the deployment group.
    AutoRollbackConfiguration autoRollbackConfiguration = 3;
    // A list of associated Auto Scaling groups.
    array autoScalingGroups = 4;
    // Information about blue/green deployment options for a deployment group.
    BlueGreenDeploymentConfiguration blueGreenDeploymentConfiguration = 5;
    // The deployment configuration name.
    string deploymentConfigName = 6;
    // The deployment group ID.
    string deploymentGroupId = 7;
    // The deployment group name.
    string deploymentGroupName = 8;
    // Information about the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer.
    DeploymentStyle deploymentStyle = 9;
    // The Amazon EC2 tags on which to filter. The deployment group includes EC2 instances with any of the specified tags.
    array ec2TagFilters = 10;
    // Information about groups of tags applied to an EC2 instance. The deployment group includes only EC2 instances identified by all the tag groups. Cannot be used in the same call as ec2TagFilters.
    EC2TagSet ec2TagSet = 11;
    // Information about the most recent attempted deployment to the deployment group.
    LastDeploymentInfo lastAttemptedDeployment = 12;
    // Information about the most recent successful deployment to the deployment group.
    LastDeploymentInfo lastSuccessfulDeployment = 13;
    // Information about the load balancer to use in a deployment.
    LoadBalancerInfo loadBalancerInfo = 14;
    // The on-premises instance tags on which to filter. The deployment group includes on-premises instances with any of the specified tags.
    array onPremisesInstanceTagFilters = 15;
    // Information about groups of tags applied to an on-premises instance. The deployment group includes only on-premises instances identified by all the tag groups. Cannot be used in the same call as onPremisesInstanceTagFilters.
    OnPremisesTagSet onPremisesTagSet = 16;
    // A service role ARN.
    string serviceRoleArn = 17;
    // Information about the deployment group's target revision, including type and location.
    RevisionLocation targetRevision = 18;
    // Information about triggers associated with the deployment group.
    array triggerConfigurations = 19;
}

repeated DeploymentGroupInfo DeploymentGroupInfoList = 1

message DeploymentGroupLimitExceededException {
}

message DeploymentGroupNameRequiredException {
}

repeated string DeploymentGroupsList = 1



message DeploymentIdRequiredException {
}

message DeploymentInfo {
    // Provides information about the results of a deployment, such as whether instances in the original environment in a blue/green deployment were not terminated.
    string additionalDeploymentStatusInfo = 1;
    // The application name.
    string applicationName = 2;
    // Information about the automatic rollback configuration associated with the deployment.
    AutoRollbackConfiguration autoRollbackConfiguration = 3;
    // Information about blue/green deployment options for this deployment.
    BlueGreenDeploymentConfiguration blueGreenDeploymentConfiguration = 4;
    // A timestamp indicating when the deployment was complete.
    string completeTime = 5;
    // A timestamp indicating when the deployment was created.
    string createTime = 6;
    // <p>The means by which the deployment was created:</p> <ul> <li> <p>user: A user created the deployment.</p> </li> <li> <p>autoscaling: Auto Scaling created the deployment.</p> </li> <li> <p>codeDeployRollback: A rollback process created the deployment.</p> </li> </ul>
    DeploymentCreator creator = 7;
    // The deployment configuration name.
    string deploymentConfigName = 8;
    // The deployment group name.
    string deploymentGroupName = 9;
    // The deployment ID.
    string deploymentId = 10;
    // A summary of the deployment status of the instances in the deployment.
    DeploymentOverview deploymentOverview = 11;
    // Information about the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer.
    DeploymentStyle deploymentStyle = 12;
    // A comment about the deployment.
    string description = 13;
    // Information about any error associated with this deployment.
    ErrorInformation errorInformation = 14;
    // <p>Information about how AWS CodeDeploy handles files that already exist in a deployment target location but weren't part of the previous successful deployment.</p> <ul> <li> <p>DISALLOW: The deployment fails. This is also the default behavior if no option is specified.</p> </li> <li> <p>OVERWRITE: The version of the file from the application revision currently being deployed replaces the version already on the instance.</p> </li> <li> <p>RETAIN: The version of the file already on the instance is kept and used as part of the new deployment.</p> </li> </ul>
    FileExistsBehavior fileExistsBehavior = 15;
    // <p>If true, then if the deployment causes the ApplicationStop deployment lifecycle event to an instance to fail, the deployment to that instance will not be considered to have failed at that point and will continue on to the BeforeInstall deployment lifecycle event.</p> <p>If false or not specified, then if the deployment causes the ApplicationStop deployment lifecycle event to an instance to fail, the deployment to that instance will stop, and the deployment to that instance will be considered to have failed.</p>
    boolean ignoreApplicationStopFailures = 16;
    // Indicates whether the wait period set for the termination of instances in the original environment has started. Status is 'false' if the KEEP_ALIVE option is specified; otherwise, 'true' as soon as the termination wait period starts.
    boolean instanceTerminationWaitTimeStarted = 17;
    // Information about the load balancer used in the deployment.
    LoadBalancerInfo loadBalancerInfo = 18;
    // Information about the application revision that was deployed to the deployment group before the most recent successful deployment.
    RevisionLocation previousRevision = 19;
    // Information about the location of stored application artifacts and the service from which to retrieve them.
    RevisionLocation revision = 20;
    // Information about a deployment rollback.
    RollbackInfo rollbackInfo = 21;
    // <p>A timestamp indicating when the deployment was deployed to the deployment group.</p> <p>In some cases, the reported value of the start time may be later than the complete time. This is due to differences in the clock settings of back-end servers that participate in the deployment process.</p>
    string startTime = 22;
    // The current state of the deployment as a whole.
    DeploymentStatus status = 23;
    // Information about the instances that belong to the replacement environment in a blue/green deployment.
    TargetInstances targetInstances = 24;
    // Indicates whether only instances that are not running the latest application revision are to be deployed to.
    boolean updateOutdatedInstancesOnly = 25;
}

message DeploymentIsNotInReadyStateException {
}

message DeploymentLimitExceededException {
}

message DeploymentNotStartedException {
}

enum DeploymentOption {
    WITH_TRAFFIC_CONTROL = 0;
    WITHOUT_TRAFFIC_CONTROL = 1;
}

message DeploymentOverview {
    // The number of instances in the deployment in a failed state.
    integer Failed = 1;
    // The number of instances in which the deployment is in progress.
    integer InProgress = 2;
    // The number of instances in the deployment in a pending state.
    integer Pending = 3;
    // The number of instances in a replacement environment ready to receive traffic in a blue/green deployment.
    integer Ready = 4;
    // The number of instances in the deployment in a skipped state.
    integer Skipped = 5;
    // The number of instances in the deployment to which revisions have been successfully deployed.
    integer Succeeded = 6;
}

enum DeploymentReadyAction {
    CONTINUE_DEPLOYMENT = 0;
    STOP_DEPLOYMENT = 1;
}

message DeploymentReadyOption {
    // <p>Information about when to reroute traffic from an original environment to a replacement environment in a blue/green deployment.</p> <ul> <li> <p>CONTINUE_DEPLOYMENT: Register new instances with the load balancer immediately after the new application revision is installed on the instances in the replacement environment.</p> </li> <li> <p>STOP_DEPLOYMENT: Do not register new instances with load balancer unless traffic is rerouted manually. If traffic is not rerouted manually before the end of the specified wait period, the deployment status is changed to Stopped.</p> </li> </ul>
    DeploymentReadyAction actionOnTimeout = 1;
    // The number of minutes to wait before the status of a blue/green deployment changed to Stopped if rerouting is not started manually. Applies only to the STOP_DEPLOYMENT option for actionOnTimeout
    integer waitTimeInMinutes = 2;
}

enum DeploymentStatu {
    CREATED = 0;
    QUEUED = 1;
    INPROGRESS = 2;
    SUCCEEDED = 3;
    FAILED = 4;
    STOPPED = 5;
    READY = 6;
}

repeated DeploymentStatus DeploymentStatusList = 1

message DeploymentStyle {
    // Indicates whether to route deployment traffic behind a load balancer.
    DeploymentOption deploymentOption = 1;
    // Indicates whether to run an in-place deployment or a blue/green deployment.
    DeploymentType deploymentType = 2;
}

enum DeploymentType {
    IN_PLACE = 0;
    BLUE_GREEN = 1;
}

repeated DeploymentInfo DeploymentsInfoList = 1

repeated string DeploymentsList = 1

message DeregisterOnPremisesInstanceInput {
    // The name of the on-premises instance to deregister.
    string instanceName = 1;
}

message DescriptionTooLongException {
}

message Diagnostics {
    // <p>The associated error code:</p> <ul> <li> <p>Success: The specified script ran.</p> </li> <li> <p>ScriptMissing: The specified script was not found in the specified location.</p> </li> <li> <p>ScriptNotExecutable: The specified script is not a recognized executable file type.</p> </li> <li> <p>ScriptTimedOut: The specified script did not finish running in the specified time period.</p> </li> <li> <p>ScriptFailed: The specified script failed to run as expected.</p> </li> <li> <p>UnknownError: The specified script did not run for an unknown reason.</p> </li> </ul>
    LifecycleErrorCode errorCode = 1;
    // <p>The last portion of the diagnostic log.</p> <p>If available, AWS CodeDeploy returns up to the last 4 KB of the diagnostic log.</p>
    string logTail = 2;
    // The message associated with the error.
    string message = 3;
    // The name of the script.
    string scriptName = 4;
}

message EC2TagFilter {
    // The tag filter key.
    string Key = 1;
    // <p>The tag filter type:</p> <ul> <li> <p>KEY_ONLY: Key only.</p> </li> <li> <p>VALUE_ONLY: Value only.</p> </li> <li> <p>KEY_AND_VALUE: Key and value.</p> </li> </ul>
    EC2TagFilterType Type = 2;
    // The tag filter value.
    string Value = 3;
}

repeated EC2TagFilter EC2TagFilterList = 1

enum EC2TagFilterType {
    KEY_ONLY = 0;
    VALUE_ONLY = 1;
    KEY_AND_VALUE = 2;
}

message EC2TagSet {
    // A list containing other lists of EC2 instance tag groups. In order for an instance to be included in the deployment group, it must be identified by all the tag groups in the list.
    array ec2TagSetList = 1;
}

repeated array EC2TagSetList = 1

message ELBInfo {
    // For blue/green deployments, the name of the load balancer that will be used to route traffic from original instances to replacement instances in a blue/green deployment. For in-place deployments, the name of the load balancer that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
    string name = 1;
}

repeated ELBInfo ELBInfoList = 1





enum ErrorCode {
    DEPLOYMENT_GROUP_MISSING = 0;
    APPLICATION_MISSING = 1;
    REVISION_MISSING = 2;
    IAM_ROLE_MISSING = 3;
    IAM_ROLE_PERMISSIONS = 4;
    NO_EC2_SUBSCRIPTION = 5;
    OVER_MAX_INSTANCES = 6;
    NO_INSTANCES = 7;
    TIMEOUT = 8;
    HEALTH_CONSTRAINTS_INVALID = 9;
    HEALTH_CONSTRAINTS = 10;
    INTERNAL_ERROR = 11;
    THROTTLED = 12;
    ALARM_ACTIVE = 13;
    AGENT_ISSUE = 14;
    AUTO_SCALING_IAM_ROLE_PERMISSIONS = 15;
    AUTO_SCALING_CONFIGURATION = 16;
    MANUAL_STOP = 17;
}

message ErrorInformation {
    // <p>For information about additional error codes, see <a href="http://docs.aws.amazon.com/codedeploy/latest/userguide/error-codes.html">Error Codes for AWS CodeDeploy</a> in the <a href="http://docs.aws.amazon.com/codedeploy/latest/userguide">AWS CodeDeploy User Guide</a>.</p> <p>The error code:</p> <ul> <li> <p>APPLICATION_MISSING: The application was missing. This error code will most likely be raised if the application is deleted after the deployment is created but before it is started.</p> </li> <li> <p>DEPLOYMENT_GROUP_MISSING: The deployment group was missing. This error code will most likely be raised if the deployment group is deleted after the deployment is created but before it is started.</p> </li> <li> <p>HEALTH_CONSTRAINTS: The deployment failed on too many instances to be successfully deployed within the instance health constraints specified.</p> </li> <li> <p>HEALTH_CONSTRAINTS_INVALID: The revision cannot be successfully deployed within the instance health constraints specified.</p> </li> <li> <p>IAM_ROLE_MISSING: The service role cannot be accessed.</p> </li> <li> <p>IAM_ROLE_PERMISSIONS: The service role does not have the correct permissions.</p> </li> <li> <p>INTERNAL_ERROR: There was an internal error.</p> </li> <li> <p>NO_EC2_SUBSCRIPTION: The calling account is not subscribed to the Amazon EC2 service.</p> </li> <li> <p>NO_INSTANCES: No instance were specified, or no instance can be found.</p> </li> <li> <p>OVER_MAX_INSTANCES: The maximum number of instance was exceeded.</p> </li> <li> <p>THROTTLED: The operation was throttled because the calling account exceeded the throttling limits of one or more AWS services.</p> </li> <li> <p>TIMEOUT: The deployment has timed out.</p> </li> <li> <p>REVISION_MISSING: The revision ID was missing. This error code will most likely be raised if the revision is deleted after the deployment is created but before it is started.</p> </li> </ul>
    ErrorCode code = 1;
    // An accompanying error message.
    string message = 2;
}

enum FileExistsBehavior {
    DISALLOW = 0;
    OVERWRITE = 1;
    RETAIN = 2;
}

message GenericRevisionInfo {
    // The deployment groups for which this is the current target revision.
    array deploymentGroups = 1;
    // A comment about the revision.
    string description = 2;
    // When the revision was first used by AWS CodeDeploy.
    string firstUsedTime = 3;
    // When the revision was last used by AWS CodeDeploy.
    string lastUsedTime = 4;
    // When the revision was registered with AWS CodeDeploy.
    string registerTime = 5;
}

message GetApplicationInput {
    // The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
    string applicationName = 1;
}

message GetApplicationOutput {
    // Information about the application.
    ApplicationInfo application = 1;
}

message GetApplicationRevisionInput {
    // The name of the application that corresponds to the revision.
    string applicationName = 1;
    // Information about the application revision to get, including type and location.
    RevisionLocation revision = 2;
}

message GetApplicationRevisionOutput {
    // The name of the application that corresponds to the revision.
    string applicationName = 1;
    // Additional information about the revision, including type and location.
    RevisionLocation revision = 2;
    // General information about the revision.
    GenericRevisionInfo revisionInfo = 3;
}

message GetDeploymentConfigInput {
    // The name of a deployment configuration associated with the applicable IAM user or AWS account.
    string deploymentConfigName = 1;
}

message GetDeploymentConfigOutput {
    // Information about the deployment configuration.
    DeploymentConfigInfo deploymentConfigInfo = 1;
}

message GetDeploymentGroupInput {
    // The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
    string applicationName = 1;
    // The name of an existing deployment group for the specified application.
    string deploymentGroupName = 2;
}

message GetDeploymentGroupOutput {
    // Information about the deployment group.
    DeploymentGroupInfo deploymentGroupInfo = 1;
}

message GetDeploymentInput {
    // A deployment ID associated with the applicable IAM user or AWS account.
    string deploymentId = 1;
}

message GetDeploymentInstanceInput {
    // The unique ID of a deployment.
    string deploymentId = 1;
    // The unique ID of an instance in the deployment group.
    string instanceId = 2;
}

message GetDeploymentInstanceOutput {
    // Information about the instance.
    InstanceSummary instanceSummary = 1;
}

message GetDeploymentOutput {
    // Information about the deployment.
    DeploymentInfo deploymentInfo = 1;
}

message GetOnPremisesInstanceInput {
    // The name of the on-premises instance about which to get information.
    string instanceName = 1;
}

message GetOnPremisesInstanceOutput {
    // Information about the on-premises instance.
    InstanceInfo instanceInfo = 1;
}

message GitHubAccountTokenDoesNotExistException {
}



repeated string GitHubAccountTokenNameList = 1

message GitHubLocation {
    // The SHA1 commit ID of the GitHub commit that represents the bundled artifacts for the application revision.
    string commitId = 1;
    // <p>The GitHub account and repository pair that stores a reference to the commit that represents the bundled artifacts for the application revision. </p> <p>Specified as account/repository.</p>
    string repository = 2;
}

enum GreenFleetProvisioningAction {
    DISCOVER_EXISTING = 0;
    COPY_AUTO_SCALING_GROUP = 1;
}

message GreenFleetProvisioningOption {
    // <p>The method used to add instances to a replacement environment.</p> <ul> <li> <p>DISCOVER_EXISTING: Use instances that already exist or will be created manually.</p> </li> <li> <p>COPY_AUTO_SCALING_GROUP: Use settings from a specified Auto Scaling group to define and create instances in a new Auto Scaling group.</p> </li> </ul>
    GreenFleetProvisioningAction action = 1;
}

message IamArnRequiredException {
}

message IamSessionArnAlreadyRegisteredException {
}

message IamUserArnAlreadyRegisteredException {
}

message IamUserArnRequiredException {
}

enum InstanceAction {
    TERMINATE = 0;
    KEEP_ALIVE = 1;
}

message InstanceDoesNotExistException {
}

message InstanceIdRequiredException {
}

message InstanceInfo {
    // If the on-premises instance was deregistered, the time at which the on-premises instance was deregistered.
    string deregisterTime = 1;
    // The ARN of the IAM session associated with the on-premises instance.
    string iamSessionArn = 2;
    // The IAM user ARN associated with the on-premises instance.
    string iamUserArn = 3;
    // The ARN of the on-premises instance.
    string instanceArn = 4;
    // The name of the on-premises instance.
    string instanceName = 5;
    // The time at which the on-premises instance was registered.
    string registerTime = 6;
    // The tags currently associated with the on-premises instance.
    array tags = 7;
}

repeated InstanceInfo InstanceInfoList = 1

message InstanceLimitExceededException {
}

message InstanceNameAlreadyRegisteredException {
}

repeated string InstanceNameList = 1

message InstanceNameRequiredException {
}

message InstanceNotRegisteredException {
}

enum InstanceStatu {
    PENDING = 0;
    INPROGRESS = 1;
    SUCCEEDED = 2;
    FAILED = 3;
    SKIPPED = 4;
    UNKNOWN = 5;
    READY = 6;
}

repeated InstanceStatus InstanceStatusList = 1

message InstanceSummary {
    // The deployment ID.
    string deploymentId = 1;
    // The instance ID.
    string instanceId = 2;
    // <p>Information about which environment an instance belongs to in a blue/green deployment.</p> <ul> <li> <p>BLUE: The instance is part of the original environment.</p> </li> <li> <p>GREEN: The instance is part of the replacement environment.</p> </li> </ul>
    InstanceType instanceType = 3;
    // A timestamp indicating when the instance information was last updated.
    string lastUpdatedAt = 4;
    // A list of lifecycle events for this instance.
    array lifecycleEvents = 5;
    // <p>The deployment status for this instance:</p> <ul> <li> <p>Pending: The deployment is pending for this instance.</p> </li> <li> <p>In Progress: The deployment is in progress for this instance.</p> </li> <li> <p>Succeeded: The deployment has succeeded for this instance.</p> </li> <li> <p>Failed: The deployment has failed for this instance.</p> </li> <li> <p>Skipped: The deployment has been skipped for this instance.</p> </li> <li> <p>Unknown: The deployment status is unknown for this instance.</p> </li> </ul>
    InstanceStatus status = 6;
}

repeated InstanceSummary InstanceSummaryList = 1

enum InstanceType {
    BLUE = 0;
    GREEN = 1;
}

repeated InstanceType InstanceTypeList = 1

repeated string InstancesList = 1

message InvalidAlarmConfigException {
}

message InvalidApplicationNameException {
}

message InvalidAutoRollbackConfigException {
}

message InvalidAutoScalingGroupException {
}

message InvalidBlueGreenDeploymentConfigurationException {
}

message InvalidBucketNameFilterException {
}

message InvalidDeployedStateFilterException {
}

message InvalidDeploymentConfigNameException {
}

message InvalidDeploymentGroupNameException {
}

message InvalidDeploymentIdException {
}

message InvalidDeploymentInstanceTypeException {
}

message InvalidDeploymentStatusException {
}

message InvalidDeploymentStyleException {
}

message InvalidEC2TagCombinationException {
}

message InvalidEC2TagException {
}

message InvalidFileExistsBehaviorException {
}

message InvalidIamSessionArnException {
}

message InvalidIamUserArnException {
}

message InvalidInstanceNameException {
}

message InvalidInstanceStatusException {
}

message InvalidInstanceTypeException {
}

message InvalidKeyPrefixFilterException {
}

message InvalidLoadBalancerInfoException {
}

message InvalidMinimumHealthyHostValueException {
}

message InvalidNextTokenException {
}

message InvalidOnPremisesTagCombinationException {
}

message InvalidOperationException {
}

message InvalidRegistrationStatusException {
}

message InvalidRevisionException {
}

message InvalidRoleException {
}

message InvalidSortByException {
}

message InvalidSortOrderException {
}

message InvalidTagException {
}

message InvalidTagFilterException {
}

message InvalidTargetInstancesException {
}

message InvalidTimeRangeException {
}

message InvalidTriggerConfigException {
}

message LastDeploymentInfo {
    // A timestamp indicating when the most recent deployment to the deployment group started.
    string createTime = 1;
    // The deployment ID.
    string deploymentId = 2;
    // A timestamp indicating when the most recent deployment to the deployment group completed.
    string endTime = 3;
    // The status of the most recent deployment.
    DeploymentStatus status = 4;
}

enum LifecycleErrorCode {
    SUCCESS = 0;
    SCRIPTMISSING = 1;
    SCRIPTNOTEXECUTABLE = 2;
    SCRIPTTIMEDOUT = 3;
    SCRIPTFAILED = 4;
    UNKNOWNERROR = 5;
}

message LifecycleEvent {
    // Diagnostic information about the deployment lifecycle event.
    Diagnostics diagnostics = 1;
    // A timestamp indicating when the deployment lifecycle event ended.
    string endTime = 2;
    // The deployment lifecycle event name, such as ApplicationStop, BeforeInstall, AfterInstall, ApplicationStart, or ValidateService.
    string lifecycleEventName = 3;
    // A timestamp indicating when the deployment lifecycle event started.
    string startTime = 4;
    // <p>The deployment lifecycle event status:</p> <ul> <li> <p>Pending: The deployment lifecycle event is pending.</p> </li> <li> <p>InProgress: The deployment lifecycle event is in progress.</p> </li> <li> <p>Succeeded: The deployment lifecycle event ran successfully.</p> </li> <li> <p>Failed: The deployment lifecycle event has failed.</p> </li> <li> <p>Skipped: The deployment lifecycle event has been skipped.</p> </li> <li> <p>Unknown: The deployment lifecycle event is unknown.</p> </li> </ul>
    LifecycleEventStatus status = 5;
}

repeated LifecycleEvent LifecycleEventList = 1



enum LifecycleEventStatu {
    PENDING = 0;
    INPROGRESS = 1;
    SUCCEEDED = 2;
    FAILED = 3;
    SKIPPED = 4;
    UNKNOWN = 5;
}

message LifecycleHookLimitExceededException {
}

message ListApplicationRevisionsInput {
    // The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
    string applicationName = 1;
    // <p>Whether to list revisions based on whether the revision is the target revision of an deployment group:</p> <ul> <li> <p>include: List revisions that are target revisions of a deployment group.</p> </li> <li> <p>exclude: Do not list revisions that are target revisions of a deployment group.</p> </li> <li> <p>ignore: List all revisions.</p> </li> </ul>
    ListStateFilterAction deployed = 2;
    // An identifier returned from the previous list application revisions call. It can be used to return the next set of applications in the list.
    string nextToken = 3;
    // <p>An Amazon S3 bucket name to limit the search for revisions.</p> <p>If set to null, all of the user's buckets will be searched.</p>
    string s3Bucket = 4;
    // A key prefix for the set of Amazon S3 objects to limit the search for revisions.
    string s3KeyPrefix = 5;
    // <p>The column name to use to sort the list results:</p> <ul> <li> <p>registerTime: Sort by the time the revisions were registered with AWS CodeDeploy.</p> </li> <li> <p>firstUsedTime: Sort by the time the revisions were first used in a deployment.</p> </li> <li> <p>lastUsedTime: Sort by the time the revisions were last used in a deployment.</p> </li> </ul> <p>If not specified or set to null, the results will be returned in an arbitrary order.</p>
    ApplicationRevisionSortBy sortBy = 6;
    // <p>The order in which to sort the list results:</p> <ul> <li> <p>ascending: ascending order.</p> </li> <li> <p>descending: descending order.</p> </li> </ul> <p>If not specified, the results will be sorted in ascending order.</p> <p>If set to null, the results will be sorted in an arbitrary order.</p>
    SortOrder sortOrder = 7;
}

message ListApplicationRevisionsOutput {
    // If a large amount of information is returned, an identifier will also be returned. It can be used in a subsequent list application revisions call to return the next set of application revisions in the list.
    string nextToken = 1;
    // A list of locations that contain the matching revisions.
    array revisions = 2;
}

message ListApplicationsInput {
    // An identifier returned from the previous list applications call. It can be used to return the next set of applications in the list.
    string nextToken = 1;
}

message ListApplicationsOutput {
    // A list of application names.
    array applications = 1;
    // If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list applications call to return the next set of applications, will also be returned. in the list.
    string nextToken = 2;
}

message ListDeploymentConfigsInput {
    // An identifier returned from the previous list deployment configurations call. It can be used to return the next set of deployment configurations in the list.
    string nextToken = 1;
}

message ListDeploymentConfigsOutput {
    // A list of deployment configurations, including built-in configurations such as CodeDeployDefault.OneAtATime.
    array deploymentConfigsList = 1;
    // If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list deployment configurations call to return the next set of deployment configurations in the list.
    string nextToken = 2;
}

message ListDeploymentGroupsInput {
    // The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
    string applicationName = 1;
    // An identifier returned from the previous list deployment groups call. It can be used to return the next set of deployment groups in the list.
    string nextToken = 2;
}

message ListDeploymentGroupsOutput {
    // The application name.
    string applicationName = 1;
    // A list of corresponding deployment group names.
    array deploymentGroups = 2;
    // If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list deployment groups call to return the next set of deployment groups in the list.
    string nextToken = 3;
}

message ListDeploymentInstancesInput {
    // The unique ID of a deployment.
    string deploymentId = 1;
    // <p>A subset of instances to list by status:</p> <ul> <li> <p>Pending: Include those instance with pending deployments.</p> </li> <li> <p>InProgress: Include those instance where deployments are still in progress.</p> </li> <li> <p>Succeeded: Include those instances with successful deployments.</p> </li> <li> <p>Failed: Include those instance with failed deployments.</p> </li> <li> <p>Skipped: Include those instance with skipped deployments.</p> </li> <li> <p>Unknown: Include those instance with deployments in an unknown state.</p> </li> </ul>
    array instanceStatusFilter = 2;
    // The set of instances in a blue/green deployment, either those in the original environment ("BLUE") or those in the replacement environment ("GREEN"), for which you want to view instance information.
    array instanceTypeFilter = 3;
    // An identifier returned from the previous list deployment instances call. It can be used to return the next set of deployment instances in the list.
    string nextToken = 4;
}

message ListDeploymentInstancesOutput {
    // A list of instance IDs.
    array instancesList = 1;
    // If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list deployment instances call to return the next set of deployment instances in the list.
    string nextToken = 2;
}

message ListDeploymentsInput {
    // The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
    string applicationName = 1;
    // A time range (start and end) for returning a subset of the list of deployments.
    TimeRange createTimeRange = 2;
    // The name of an existing deployment group for the specified application.
    string deploymentGroupName = 3;
    // <p>A subset of deployments to list by status:</p> <ul> <li> <p>Created: Include created deployments in the resulting list.</p> </li> <li> <p>Queued: Include queued deployments in the resulting list.</p> </li> <li> <p>In Progress: Include in-progress deployments in the resulting list.</p> </li> <li> <p>Succeeded: Include successful deployments in the resulting list.</p> </li> <li> <p>Failed: Include failed deployments in the resulting list.</p> </li> <li> <p>Stopped: Include stopped deployments in the resulting list.</p> </li> </ul>
    array includeOnlyStatuses = 4;
    // An identifier returned from the previous list deployments call. It can be used to return the next set of deployments in the list.
    string nextToken = 5;
}

message ListDeploymentsOutput {
    // A list of deployment IDs.
    array deployments = 1;
    // If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list deployments call to return the next set of deployments in the list.
    string nextToken = 2;
}

message ListGitHubAccountTokenNamesInput {
    // An identifier returned from the previous ListGitHubAccountTokenNames call. It can be used to return the next set of names in the list.
    string nextToken = 1;
}

message ListGitHubAccountTokenNamesOutput {
    // If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent ListGitHubAccountTokenNames call to return the next set of names in the list.
    string nextToken = 1;
    // A list of names of connections to GitHub accounts.
    array tokenNameList = 2;
}

message ListOnPremisesInstancesInput {
    // An identifier returned from the previous list on-premises instances call. It can be used to return the next set of on-premises instances in the list.
    string nextToken = 1;
    // <p>The registration status of the on-premises instances:</p> <ul> <li> <p>Deregistered: Include deregistered on-premises instances in the resulting list.</p> </li> <li> <p>Registered: Include registered on-premises instances in the resulting list.</p> </li> </ul>
    RegistrationStatus registrationStatus = 2;
    // The on-premises instance tags that will be used to restrict the corresponding on-premises instance names returned.
    array tagFilters = 3;
}

message ListOnPremisesInstancesOutput {
    // The list of matching on-premises instance names.
    array instanceNames = 1;
    // If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list on-premises instances call to return the next set of on-premises instances in the list.
    string nextToken = 2;
}

enum ListStateFilterAction {
    INCLUDE = 0;
    EXCLUDE = 1;
    IGNORE = 2;
}

message LoadBalancerInfo {
    // An array containing information about the load balancer to use for load balancing in a deployment. In Elastic Load Balancing, load balancers are used with Classic Load Balancers.
    array elbInfoList = 1;
    // An array containing information about the target group to use for load balancing in a deployment. In Elastic Load Balancing, target groups are used with Application Load Balancers.
    array targetGroupInfoList = 2;
}

message MinimumHealthyHosts {
    // <p>The minimum healthy instance type:</p> <ul> <li> <p>HOST_COUNT: The minimum number of healthy instance as an absolute value.</p> </li> <li> <p>FLEET_PERCENT: The minimum number of healthy instance as a percentage of the total number of instance in the deployment.</p> </li> </ul> <p>In an example of nine instance, if a HOST_COUNT of six is specified, deploy to up to three instances at a time. The deployment will be successful if six or more instances are deployed to successfully; otherwise, the deployment fails. If a FLEET_PERCENT of 40 is specified, deploy to up to five instance at a time. The deployment will be successful if four or more instance are deployed to successfully; otherwise, the deployment fails.</p> <note> <p>In a call to the get deployment configuration operation, CodeDeployDefault.OneAtATime will return a minimum healthy instance type of MOST_CONCURRENCY and a value of 1. This means a deployment to only one instance at a time. (You cannot set the type to MOST_CONCURRENCY, only to HOST_COUNT or FLEET_PERCENT.) In addition, with CodeDeployDefault.OneAtATime, AWS CodeDeploy will try to ensure that all instances but one are kept in a healthy state during the deployment. Although this allows one instance at a time to be taken offline for a new deployment, it also means that if the deployment to the last instance fails, the overall deployment still succeeds.</p> </note> <p>For more information, see <a href="http://docs.aws.amazon.com/codedeploy/latest/userguide/instances-health.html">AWS CodeDeploy Instance Health</a> in the <i>AWS CodeDeploy User Guide</i>.</p>
    MinimumHealthyHostsType type = 1;
    // The minimum healthy instance value.
    integer value = 2;
}

enum MinimumHealthyHostsType {
    HOST_COUNT = 0;
    FLEET_PERCENT = 1;
}

message MultipleIamArnsProvidedException {
}

message OnPremisesTagSet {
    // A list containing other lists of on-premises instance tag groups. In order for an instance to be included in the deployment group, it must be identified by all the tag groups in the list.
    array onPremisesTagSetList = 1;
}

repeated array OnPremisesTagSetList = 1

message RegisterApplicationRevisionInput {
    // The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
    string applicationName = 1;
    // A comment about the revision.
    string description = 2;
    // Information about the application revision to register, including type and location.
    RevisionLocation revision = 3;
}

message RegisterOnPremisesInstanceInput {
    // The ARN of the IAM session to associate with the on-premises instance.
    string iamSessionArn = 1;
    // The ARN of the IAM user to associate with the on-premises instance.
    string iamUserArn = 2;
    // The name of the on-premises instance to register.
    string instanceName = 3;
}

enum RegistrationStatu {
    REGISTERED = 0;
    DEREGISTERED = 1;
}

message RemoveTagsFromOnPremisesInstancesInput {
    // The names of the on-premises instances from which to remove tags.
    array instanceNames = 1;
    // The tag key-value pairs to remove from the on-premises instances.
    array tags = 2;
}

message ResourceValidationException {
}

message RevisionDoesNotExistException {
}

message RevisionInfo {
    // Information about an application revision, including usage details and associated deployment groups.
    GenericRevisionInfo genericRevisionInfo = 1;
    // Information about the location and type of an application revision.
    RevisionLocation revisionLocation = 2;
}

repeated RevisionInfo RevisionInfoList = 1

message RevisionLocation {
    // Information about the location of application artifacts stored in GitHub.
    GitHubLocation gitHubLocation = 1;
    // <p>The type of application revision:</p> <ul> <li> <p>S3: An application revision stored in Amazon S3.</p> </li> <li> <p>GitHub: An application revision stored in GitHub.</p> </li> </ul>
    RevisionLocationType revisionType = 2;
    // Information about the location of application artifacts stored in Amazon S3.
    S3Location s3Location = 3;
}

repeated RevisionLocation RevisionLocationList = 1

enum RevisionLocationType {
    S3 = 0;
    GITHUB = 1;
}

message RevisionRequiredException {
}

message RoleRequiredException {
}

message RollbackInfo {
    // The ID of the deployment rollback.
    string rollbackDeploymentId = 1;
    // Information describing the status of a deployment rollback; for example, whether the deployment can't be rolled back, is in progress, failed, or succeeded.
    string rollbackMessage = 2;
    // The deployment ID of the deployment that was underway and triggered a rollback deployment because it failed or was stopped.
    string rollbackTriggeringDeploymentId = 3;
}

message S3Location {
    // The name of the Amazon S3 bucket where the application revision is stored.
    string bucket = 1;
    // <p>The file type of the application revision. Must be one of the following:</p> <ul> <li> <p>tar: A tar archive file.</p> </li> <li> <p>tgz: A compressed tar archive file.</p> </li> <li> <p>zip: A zip archive file.</p> </li> </ul>
    BundleType bundleType = 2;
    // <p>The ETag of the Amazon S3 object that represents the bundled artifacts for the application revision.</p> <p>If the ETag is not specified as an input parameter, ETag validation of the object will be skipped.</p>
    string eTag = 3;
    // The name of the Amazon S3 object that represents the bundled artifacts for the application revision.
    string key = 4;
    // <p>A specific version of the Amazon S3 object that represents the bundled artifacts for the application revision.</p> <p>If the version is not specified, the system will use the most recent version by default.</p>
    string version = 5;
}

message SkipWaitTimeForInstanceTerminationInput {
    // The ID of the blue/green deployment for which you want to skip the instance termination wait time.
    string deploymentId = 1;
}

enum SortOrder {
    ASCENDING = 0;
    DESCENDING = 1;
}

message StopDeploymentInput {
    // Indicates, when a deployment is stopped, whether instances that have been updated should be rolled back to the previous version of the application revision.
    boolean autoRollbackEnabled = 1;
    // The unique ID of a deployment.
    string deploymentId = 2;
}

message StopDeploymentOutput {
    // <p>The status of the stop deployment operation:</p> <ul> <li> <p>Pending: The stop operation is pending.</p> </li> <li> <p>Succeeded: The stop operation was successful.</p> </li> </ul>
    StopStatus status = 1;
    // An accompanying status message.
    string statusMessage = 2;
}

enum StopStatu {
    PENDING = 0;
    SUCCEEDED = 1;
}

message Tag {
    // The tag's key.
    string Key = 1;
    // The tag's value.
    string Value = 2;
}

message TagFilter {
    // The on-premises instance tag filter key.
    string Key = 1;
    // <p>The on-premises instance tag filter type:</p> <ul> <li> <p>KEY_ONLY: Key only.</p> </li> <li> <p>VALUE_ONLY: Value only.</p> </li> <li> <p>KEY_AND_VALUE: Key and value.</p> </li> </ul>
    TagFilterType Type = 2;
    // The on-premises instance tag filter value.
    string Value = 3;
}

repeated TagFilter TagFilterList = 1

enum TagFilterType {
    KEY_ONLY = 0;
    VALUE_ONLY = 1;
    KEY_AND_VALUE = 2;
}

message TagLimitExceededException {
}

repeated Tag TagList = 1

message TagRequiredException {
}

message TagSetListLimitExceededException {
}

message TargetGroupInfo {
    // For blue/green deployments, the name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
    string name = 1;
}

repeated TargetGroupInfo TargetGroupInfoList = 1



message TargetInstances {
    // The names of one or more Auto Scaling groups to identify a replacement environment for a blue/green deployment.
    array autoScalingGroups = 1;
    // Information about the groups of EC2 instance tags that an instance must be identified by in order for it to be included in the replacement environment for a blue/green deployment. Cannot be used in the same call as tagFilters.
    EC2TagSet ec2TagSet = 2;
    // The tag filter key, type, and value used to identify Amazon EC2 instances in a replacement environment for a blue/green deployment. Cannot be used in the same call as ec2TagSet.
    array tagFilters = 3;
}

message TimeRange {
    // <p>The end time of the time range.</p> <note> <p>Specify null to leave the end time open-ended.</p> </note>
    string end = 1;
    // <p>The start time of the time range.</p> <note> <p>Specify null to leave the start time open-ended.</p> </note>
    string start = 2;
}

message TriggerConfig {
    // The event type or types for which notifications are triggered.
    array triggerEvents = 1;
    // The name of the notification trigger.
    string triggerName = 2;
    // The ARN of the Amazon Simple Notification Service topic through which notifications about deployment or instance events are sent.
    string triggerTargetArn = 3;
}

repeated TriggerConfig TriggerConfigList = 1

enum TriggerEventType {
    DEPLOYMENTSTART = 0;
    DEPLOYMENTSUCCESS = 1;
    DEPLOYMENTFAILURE = 2;
    DEPLOYMENTSTOP = 3;
    DEPLOYMENTROLLBACK = 4;
    DEPLOYMENTREADY = 5;
    INSTANCESTART = 6;
    INSTANCESUCCESS = 7;
    INSTANCEFAILURE = 8;
    INSTANCEREADY = 9;
}

repeated TriggerEventType TriggerEventTypeList = 1





message TriggerTargetsLimitExceededException {
}

message UnsupportedActionForDeploymentTypeException {
}

message UpdateApplicationInput {
    // The current name of the application you want to change.
    string applicationName = 1;
    // The new name to give the application.
    string newApplicationName = 2;
}

message UpdateDeploymentGroupInput {
    // Information to add or change about Amazon CloudWatch alarms when the deployment group is updated.
    AlarmConfiguration alarmConfiguration = 1;
    // The application name corresponding to the deployment group to update.
    string applicationName = 2;
    // Information for an automatic rollback configuration that is added or changed when a deployment group is updated.
    AutoRollbackConfiguration autoRollbackConfiguration = 3;
    // The replacement list of Auto Scaling groups to be included in the deployment group, if you want to change them. To keep the Auto Scaling groups, enter their names. To remove Auto Scaling groups, do not enter any Auto Scaling group names.
    array autoScalingGroups = 4;
    // Information about blue/green deployment options for a deployment group.
    BlueGreenDeploymentConfiguration blueGreenDeploymentConfiguration = 5;
    // The current name of the deployment group.
    string currentDeploymentGroupName = 6;
    // The replacement deployment configuration name to use, if you want to change it.
    string deploymentConfigName = 7;
    // Information about the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer.
    DeploymentStyle deploymentStyle = 8;
    // The replacement set of Amazon EC2 tags on which to filter, if you want to change them. To keep the existing tags, enter their names. To remove tags, do not enter any tag names.
    array ec2TagFilters = 9;
    // Information about groups of tags applied to on-premises instances. The deployment group will include only EC2 instances identified by all the tag groups.
    EC2TagSet ec2TagSet = 10;
    // Information about the load balancer used in a deployment.
    LoadBalancerInfo loadBalancerInfo = 11;
    // The new name of the deployment group, if you want to change it.
    string newDeploymentGroupName = 12;
    // The replacement set of on-premises instance tags on which to filter, if you want to change them. To keep the existing tags, enter their names. To remove tags, do not enter any tag names.
    array onPremisesInstanceTagFilters = 13;
    // Information about an on-premises instance tag set. The deployment group will include only on-premises instances identified by all the tag groups.
    OnPremisesTagSet onPremisesTagSet = 14;
    // A replacement ARN for the service role, if you want to change it.
    string serviceRoleArn = 15;
    // Information about triggers to change when the deployment group is updated. For examples, see <a href="http://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-notify-edit.html">Modify Triggers in an AWS CodeDeploy Deployment Group</a> in the AWS CodeDeploy User Guide.
    array triggerConfigurations = 16;
}

message UpdateDeploymentGroupOutput {
    // If the output contains no data, and the corresponding deployment group contained at least one Auto Scaling group, AWS CodeDeploy successfully removed all corresponding Auto Scaling lifecycle event hooks from the AWS account. If the output contains data, AWS CodeDeploy could not remove some Auto Scaling lifecycle event hooks from the AWS account.
    array hooksNotCleanedUp = 1;
}

service AWSCodeDeployService {
    // Adds tags to on-premises instances.
    rpc Post(PostRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//"
        body: "body"
      };
    }
    // Gets information about one or more application revisions.
    rpc Post#BatchGetApplicationRevisions(Post#BatchGetApplicationRevisionsRequest) returns (BatchGetApplicationRevisionsOutput) {
      option (google.api.http) = {
        post: "//#BatchGetApplicationRevisions"
        body: "body"
      };
    }
    // Gets information about one or more applications.
    rpc Post#BatchGetApplications(Post#BatchGetApplicationsRequest) returns (BatchGetApplicationsOutput) {
      option (google.api.http) = {
        post: "//#BatchGetApplications"
        body: "body"
      };
    }
    // Gets information about one or more deployment groups.
    rpc Post#BatchGetDeploymentGroups(Post#BatchGetDeploymentGroupsRequest) returns (BatchGetDeploymentGroupsOutput) {
      option (google.api.http) = {
        post: "//#BatchGetDeploymentGroups"
        body: "body"
      };
    }
    // Gets information about one or more instance that are part of a deployment group.
    rpc Post#BatchGetDeploymentInstances(Post#BatchGetDeploymentInstancesRequest) returns (BatchGetDeploymentInstancesOutput) {
      option (google.api.http) = {
        post: "//#BatchGetDeploymentInstances"
        body: "body"
      };
    }
    // Gets information about one or more deployments.
    rpc Post#BatchGetDeployments(Post#BatchGetDeploymentsRequest) returns (BatchGetDeploymentsOutput) {
      option (google.api.http) = {
        post: "//#BatchGetDeployments"
        body: "body"
      };
    }
    // Gets information about one or more on-premises instances.
    rpc Post#BatchGetOnPremisesInstances(Post#BatchGetOnPremisesInstancesRequest) returns (BatchGetOnPremisesInstancesOutput) {
      option (google.api.http) = {
        post: "//#BatchGetOnPremisesInstances"
        body: "body"
      };
    }
    // For a blue/green deployment, starts the process of rerouting traffic from instances in the original environment to instances in the replacement environment without waiting for a specified wait time to elapse. (Traffic rerouting, which is achieved by registering instances in the replacement environment with the load balancer, can start as soon as all instances have a status of Ready.)
    rpc Post#ContinueDeployment(Post#ContinueDeploymentRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#ContinueDeployment"
        body: "body"
      };
    }
    // Creates an application.
    rpc Post#CreateApplication(Post#CreateApplicationRequest) returns (CreateApplicationOutput) {
      option (google.api.http) = {
        post: "//#CreateApplication"
        body: "body"
      };
    }
    // Deploys an application revision through the specified deployment group.
    rpc Post#CreateDeployment(Post#CreateDeploymentRequest) returns (CreateDeploymentOutput) {
      option (google.api.http) = {
        post: "//#CreateDeployment"
        body: "body"
      };
    }
    // Creates a deployment configuration.
    rpc Post#CreateDeploymentConfig(Post#CreateDeploymentConfigRequest) returns (CreateDeploymentConfigOutput) {
      option (google.api.http) = {
        post: "//#CreateDeploymentConfig"
        body: "body"
      };
    }
    // Creates a deployment group to which application revisions will be deployed.
    rpc Post#CreateDeploymentGroup(Post#CreateDeploymentGroupRequest) returns (CreateDeploymentGroupOutput) {
      option (google.api.http) = {
        post: "//#CreateDeploymentGroup"
        body: "body"
      };
    }
    // Deletes an application.
    rpc Post#DeleteApplication(Post#DeleteApplicationRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#DeleteApplication"
        body: "body"
      };
    }
    // <p>Deletes a deployment configuration.</p> <note> <p>A deployment configuration cannot be deleted if it is currently in use. Predefined configurations cannot be deleted.</p> </note>
    rpc Post#DeleteDeploymentConfig(Post#DeleteDeploymentConfigRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#DeleteDeploymentConfig"
        body: "body"
      };
    }
    // Deletes a deployment group.
    rpc Post#DeleteDeploymentGroup(Post#DeleteDeploymentGroupRequest) returns (DeleteDeploymentGroupOutput) {
      option (google.api.http) = {
        post: "//#DeleteDeploymentGroup"
        body: "body"
      };
    }
    // Deregisters an on-premises instance.
    rpc Post#DeregisterOnPremisesInstance(Post#DeregisterOnPremisesInstanceRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#DeregisterOnPremisesInstance"
        body: "body"
      };
    }
    // Gets information about an application.
    rpc Post#GetApplication(Post#GetApplicationRequest) returns (GetApplicationOutput) {
      option (google.api.http) = {
        post: "//#GetApplication"
        body: "body"
      };
    }
    // Gets information about an application revision.
    rpc Post#GetApplicationRevision(Post#GetApplicationRevisionRequest) returns (GetApplicationRevisionOutput) {
      option (google.api.http) = {
        post: "//#GetApplicationRevision"
        body: "body"
      };
    }
    // Gets information about a deployment.
    rpc Post#GetDeployment(Post#GetDeploymentRequest) returns (GetDeploymentOutput) {
      option (google.api.http) = {
        post: "//#GetDeployment"
        body: "body"
      };
    }
    // Gets information about a deployment configuration.
    rpc Post#GetDeploymentConfig(Post#GetDeploymentConfigRequest) returns (GetDeploymentConfigOutput) {
      option (google.api.http) = {
        post: "//#GetDeploymentConfig"
        body: "body"
      };
    }
    // Gets information about a deployment group.
    rpc Post#GetDeploymentGroup(Post#GetDeploymentGroupRequest) returns (GetDeploymentGroupOutput) {
      option (google.api.http) = {
        post: "//#GetDeploymentGroup"
        body: "body"
      };
    }
    // Gets information about an instance as part of a deployment.
    rpc Post#GetDeploymentInstance(Post#GetDeploymentInstanceRequest) returns (GetDeploymentInstanceOutput) {
      option (google.api.http) = {
        post: "//#GetDeploymentInstance"
        body: "body"
      };
    }
    // Gets information about an on-premises instance.
    rpc Post#GetOnPremisesInstance(Post#GetOnPremisesInstanceRequest) returns (GetOnPremisesInstanceOutput) {
      option (google.api.http) = {
        post: "//#GetOnPremisesInstance"
        body: "body"
      };
    }
    // Lists information about revisions for an application.
    rpc Post#ListApplicationRevisions(Post#ListApplicationRevisionsRequest) returns (ListApplicationRevisionsOutput) {
      option (google.api.http) = {
        post: "//#ListApplicationRevisions"
        body: "body"
      };
    }
    // Lists the applications registered with the applicable IAM user or AWS account.
    rpc Post#ListApplications(Post#ListApplicationsRequest) returns (ListApplicationsOutput) {
      option (google.api.http) = {
        post: "//#ListApplications"
        body: "body"
      };
    }
    // Lists the deployment configurations with the applicable IAM user or AWS account.
    rpc Post#ListDeploymentConfigs(Post#ListDeploymentConfigsRequest) returns (ListDeploymentConfigsOutput) {
      option (google.api.http) = {
        post: "//#ListDeploymentConfigs"
        body: "body"
      };
    }
    // Lists the deployment groups for an application registered with the applicable IAM user or AWS account.
    rpc Post#ListDeploymentGroups(Post#ListDeploymentGroupsRequest) returns (ListDeploymentGroupsOutput) {
      option (google.api.http) = {
        post: "//#ListDeploymentGroups"
        body: "body"
      };
    }
    // Lists the instance for a deployment associated with the applicable IAM user or AWS account.
    rpc Post#ListDeploymentInstances(Post#ListDeploymentInstancesRequest) returns (ListDeploymentInstancesOutput) {
      option (google.api.http) = {
        post: "//#ListDeploymentInstances"
        body: "body"
      };
    }
    // Lists the deployments in a deployment group for an application registered with the applicable IAM user or AWS account.
    rpc Post#ListDeployments(Post#ListDeploymentsRequest) returns (ListDeploymentsOutput) {
      option (google.api.http) = {
        post: "//#ListDeployments"
        body: "body"
      };
    }
    // Lists the names of stored connections to GitHub accounts.
    rpc Post#ListGitHubAccountTokenNames(Post#ListGitHubAccountTokenNamesRequest) returns (ListGitHubAccountTokenNamesOutput) {
      option (google.api.http) = {
        post: "//#ListGitHubAccountTokenNames"
        body: "body"
      };
    }
    // <p>Gets a list of names for one or more on-premises instances.</p> <p>Unless otherwise specified, both registered and deregistered on-premises instance names will be listed. To list only registered or deregistered on-premises instance names, use the registration status parameter.</p>
    rpc Post#ListOnPremisesInstances(Post#ListOnPremisesInstancesRequest) returns (ListOnPremisesInstancesOutput) {
      option (google.api.http) = {
        post: "//#ListOnPremisesInstances"
        body: "body"
      };
    }
    // Registers with AWS CodeDeploy a revision for the specified application.
    rpc Post#RegisterApplicationRevision(Post#RegisterApplicationRevisionRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#RegisterApplicationRevision"
        body: "body"
      };
    }
    // <p>Registers an on-premises instance.</p> <note> <p>Only one IAM ARN (an IAM session ARN or IAM user ARN) is supported in the request. You cannot use both.</p> </note>
    rpc Post#RegisterOnPremisesInstance(Post#RegisterOnPremisesInstanceRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#RegisterOnPremisesInstance"
        body: "body"
      };
    }
    // Removes one or more tags from one or more on-premises instances.
    rpc Post#RemoveTagsFromOnPremisesInstances(Post#RemoveTagsFromOnPremisesInstancesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#RemoveTagsFromOnPremisesInstances"
        body: "body"
      };
    }
    // In a blue/green deployment, overrides any specified wait time and starts terminating instances immediately after the traffic routing is completed.
    rpc Post#SkipWaitTimeForInstanceTermination(Post#SkipWaitTimeForInstanceTerminationRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#SkipWaitTimeForInstanceTermination"
        body: "body"
      };
    }
    // Attempts to stop an ongoing deployment.
    rpc Post#StopDeployment(Post#StopDeploymentRequest) returns (StopDeploymentOutput) {
      option (google.api.http) = {
        post: "//#StopDeployment"
        body: "body"
      };
    }
    // Changes the name of an application.
    rpc Post#UpdateApplication(Post#UpdateApplicationRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#UpdateApplication"
        body: "body"
      };
    }
    // Changes information about a deployment group.
    rpc Post#UpdateDeploymentGroup(Post#UpdateDeploymentGroupRequest) returns (UpdateDeploymentGroupOutput) {
      option (google.api.http) = {
        post: "//#UpdateDeploymentGroup"
        body: "body"
      };
    }
}

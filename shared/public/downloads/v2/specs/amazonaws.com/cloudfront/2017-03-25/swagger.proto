syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package amazoncloudfront;

message Get20170325DistributionRequest {
    string Action = 1;
    // Pagination token
    string Marker = 2;
    // Pagination limit
    string MaxItems = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    ListDistributionsRequest body = 12;
}

message Get20170325DistributionDistributionIdInvalidationRequest {
    string Action = 1;
    string DistributionId = 2;
    // Pagination token
    string Marker = 3;
    // Pagination limit
    string MaxItems = 4;
    string Version = 5;
    string X_Amz_Algorithm = 6;
    string X_Amz_Content_Sha256 = 7;
    string X_Amz_Credential = 8;
    string X_Amz_Date = 9;
    string X_Amz_Security_Token = 10;
    string X_Amz_Signature = 11;
    string X_Amz_SignedHeaders = 12;
    ListInvalidationsRequest body = 13;
}

message Get20170325DistributionDistributionIdInvalidationIdRequest {
    string Action = 1;
    string DistributionId = 2;
    string Id = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    GetInvalidationRequest body = 12;
}

message Get20170325DistributionIdRequest {
    string Action = 1;
    string Id = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    GetDistributionRequest body = 11;
}

message Put20170325DistributionIdConfigRequest {
    string Action = 1;
    string Id = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    UpdateDistributionRequest body = 11;
}

message Post20170325DistributionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateDistributionWithTagsRequest body = 10;
}

message Get20170325DistributionsByWebACLIdWebACLIdRequest {
    string Action = 1;
    string Version = 2;
    string WebACLId = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    ListDistributionsByWebACLIdRequest body = 11;
}

message Get20170325OriginAccessIdentityCloudfrontRequest {
    string Action = 1;
    // Pagination token
    string Marker = 2;
    // Pagination limit
    string MaxItems = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    ListCloudFrontOriginAccessIdentitiesRequest body = 12;
}

message Get20170325OriginAccessIdentityCloudfrontIdRequest {
    string Action = 1;
    string Id = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    GetCloudFrontOriginAccessIdentityRequest body = 11;
}

message Put20170325OriginAccessIdentityCloudfrontIdConfigRequest {
    string Action = 1;
    string Id = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    UpdateCloudFrontOriginAccessIdentityRequest body = 11;
}

message Get20170325StreamingDistributionRequest {
    string Action = 1;
    // Pagination token
    string Marker = 2;
    // Pagination limit
    string MaxItems = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    ListStreamingDistributionsRequest body = 12;
}

message Get20170325StreamingDistributionIdRequest {
    string Action = 1;
    string Id = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    GetStreamingDistributionRequest body = 11;
}

message Put20170325StreamingDistributionIdConfigRequest {
    string Action = 1;
    string Id = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    UpdateStreamingDistributionRequest body = 11;
}

message Post20170325StreamingDistributionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateStreamingDistributionWithTagsRequest body = 10;
}

message Get20170325TaggingRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListTagsForResourceRequest body = 10;
}

message Post20170325TaggingRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    TagResourceRequest body = 10;
}

message Post20170325TaggingRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UntagResourceRequest body = 10;
}

message AccessDenied {
    string Message = 1;
}

message ActiveTrustedSigners {
    // <p>Enabled is <code>true</code> if any of the AWS accounts listed in the <code>TrustedSigners</code> complex type for this RTMP distribution have active CloudFront key pairs. If not, <code>Enabled</code> is <code>false</code>.</p> <p>For more information, see <a>ActiveTrustedSigners</a>.</p>
    boolean Enabled = 1;
    // <p>A complex type that contains one <code>Signer</code> complex type for each trusted signer that is specified in the <code>TrustedSigners</code> complex type.</p> <p>For more information, see <a>ActiveTrustedSigners</a>. </p>
    array Items = 2;
    // <p>A complex type that contains one <code>Signer</code> complex type for each trusted signer specified in the <code>TrustedSigners</code> complex type.</p> <p>For more information, see <a>ActiveTrustedSigners</a>.</p>
    integer Quantity = 3;
}

repeated string AliasList = 1

message Aliases {
    // A complex type that contains the CNAME aliases, if any, that you want to associate with this distribution.
    array Items = 1;
    // The number of CNAME aliases, if any, that you want to associate with this distribution.
    integer Quantity = 2;
}

message AllowedMethods {
    CachedMethods CachedMethods = 1;
    // A complex type that contains the HTTP methods that you want CloudFront to process and forward to your origin.
    array Items = 2;
    // The number of HTTP methods that you want CloudFront to forward to your origin. Valid values are 2 (for <code>GET</code> and <code>HEAD</code> requests), 3 (for <code>GET</code>, <code>HEAD</code>, and <code>OPTIONS</code> requests) and 7 (for <code>GET, HEAD, OPTIONS, PUT, PATCH, POST</code>, and <code>DELETE</code> requests).
    integer Quantity = 3;
}

repeated string AwsAccountNumberList = 1

message BatchTooLarge {
    string Message = 1;
}

message CNAMEAlreadyExists {
    string Message = 1;
}

message CacheBehavior {
    AllowedMethods AllowedMethods = 1;
    // Whether you want CloudFront to automatically compress certain files for this cache behavior. If so, specify true; if not, specify false. For more information, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html">Serving Compressed Files</a> in the <i>Amazon CloudFront Developer Guide</i>.
    boolean Compress = 2;
    // The default amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. The value that you specify applies only when your origin does not add HTTP headers such as <code>Cache-Control max-age</code>, <code>Cache-Control s-maxage</code>, and <code>Expires</code> to objects. For more information, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html">Specifying How Long Objects and Errors Stay in a CloudFront Edge Cache (Expiration)</a> in the <i>Amazon CloudFront Developer Guide</i>.
    integer DefaultTTL = 3;
    // A complex type that specifies how CloudFront handles query strings and cookies.
    ForwardedValues ForwardedValues = 4;
    // A complex type that contains zero or more Lambda function associations for a cache behavior.
    LambdaFunctionAssociations LambdaFunctionAssociations = 5;
    // The maximum amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. The value that you specify applies only when your origin adds HTTP headers such as <code>Cache-Control max-age</code>, <code>Cache-Control s-maxage</code>, and <code>Expires</code> to objects. For more information, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html">Specifying How Long Objects and Errors Stay in a CloudFront Edge Cache (Expiration)</a> in the <i>Amazon CloudFront Developer Guide</i>.
    integer MaxTTL = 6;
    // <p>The minimum amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. For more information, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html">Specifying How Long Objects and Errors Stay in a CloudFront Edge Cache (Expiration)</a> in the <i>Amazon Amazon CloudFront Developer Guide</i>.</p> <p>You must specify <code>0</code> for <code>MinTTL</code> if you configure CloudFront to forward all headers to your origin (under <code>Headers</code>, if you specify <code>1</code> for <code>Quantity</code> and <code>*</code> for <code>Name</code>).</p>
    integer MinTTL = 7;
    // <p>The pattern (for example, <code>images/*.jpg</code>) that specifies which requests to apply the behavior to. When CloudFront receives a viewer request, the requested path is compared with path patterns in the order in which cache behaviors are listed in the distribution.</p> <note> <p>You can optionally include a slash (<code>/</code>) at the beginning of the path pattern. For example, <code>/images/*.jpg</code>. CloudFront behavior is the same with or without the leading <code>/</code>.</p> </note> <p>The path pattern for the default cache behavior is <code>*</code> and cannot be changed. If the request for an object does not match the path pattern for any cache behaviors, CloudFront applies the behavior in the default cache behavior.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesPathPattern">Path Pattern</a> in the <i> Amazon CloudFront Developer Guide</i>.</p>
    string PathPattern = 8;
    // Indicates whether you want to distribute media files in the Microsoft Smooth Streaming format using the origin that is associated with this cache behavior. If so, specify <code>true</code>; if not, specify <code>false</code>. If you specify <code>true</code> for <code>SmoothStreaming</code>, you can still distribute other content using this cache behavior if the content matches the value of <code>PathPattern</code>.
    boolean SmoothStreaming = 9;
    // The value of <code>ID</code> for the origin that you want CloudFront to route requests to when a request matches the path pattern either for a cache behavior or for the default cache behavior.
    string TargetOriginId = 10;
    // <p>A complex type that specifies the AWS accounts, if any, that you want to allow to create signed URLs for private content.</p> <p>If you want to require signed URLs in requests for objects in the target origin that match the <code>PathPattern</code> for this cache behavior, specify <code>true</code> for <code>Enabled</code>, and specify the applicable values for <code>Quantity</code> and <code>Items</code>. For more information, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html">Serving Private Content through CloudFront</a> in the <i>Amazon Amazon CloudFront Developer Guide</i>.</p> <p>If you don't want to require signed URLs in requests for objects that match <code>PathPattern</code>, specify <code>false</code> for <code>Enabled</code> and <code>0</code> for <code>Quantity</code>. Omit <code>Items</code>.</p> <p>To add, change, or remove one or more trusted signers, change <code>Enabled</code> to <code>true</code> (if it's currently <code>false</code>), change <code>Quantity</code> as applicable, and specify all of the trusted signers that you want to include in the updated distribution.</p>
    TrustedSigners TrustedSigners = 11;
    // <p>The protocol that viewers can use to access the files in the origin specified by <code>TargetOriginId</code> when a request matches the path pattern in <code>PathPattern</code>. You can specify the following options:</p> <ul> <li> <p> <code>allow-all</code>: Viewers can use HTTP or HTTPS.</p> </li> <li> <p> <code>redirect-to-https</code>: If a viewer submits an HTTP request, CloudFront returns an HTTP status code of 301 (Moved Permanently) to the viewer along with the HTTPS URL. The viewer then resubmits the request using the new URL. </p> </li> <li> <p> <code>https-only</code>: If a viewer sends an HTTP request, CloudFront returns an HTTP status code of 403 (Forbidden). </p> </li> </ul> <p>For more information about requiring the HTTPS protocol, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/SecureConnections.html">Using an HTTPS Connection to Access Your Objects</a> in the <i>Amazon CloudFront Developer Guide</i>.</p> <note> <p>The only way to guarantee that viewers retrieve an object that was fetched from the origin using HTTPS is never to use any other protocol to fetch the object. If you have recently changed from HTTP to HTTPS, we recommend that you clear your objects' cache because cached objects are protocol agnostic. That means that an edge location will return an object from the cache regardless of whether the current request protocol matches the protocol used previously. For more information, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html">Specifying How Long Objects and Errors Stay in a CloudFront Edge Cache (Expiration)</a> in the <i>Amazon CloudFront Developer Guide</i>.</p> </note>
    ViewerProtocolPolicy ViewerProtocolPolicy = 12;
}

repeated CacheBehavior CacheBehaviorList = 1

message CacheBehaviors {
    // Optional: A complex type that contains cache behaviors for this distribution. If <code>Quantity</code> is <code>0</code>, you can omit <code>Items</code>.
    array Items = 1;
    // The number of cache behaviors for this distribution.
    integer Quantity = 2;
}

message CachedMethods {
    // A complex type that contains the HTTP methods that you want CloudFront to cache responses to.
    array Items = 1;
    // The number of HTTP methods for which you want CloudFront to cache responses. Valid values are <code>2</code> (for caching responses to <code>GET</code> and <code>HEAD</code> requests) and <code>3</code> (for caching responses to <code>GET</code>, <code>HEAD</code>, and <code>OPTIONS</code> requests).
    integer Quantity = 2;
}

enum CertificateSource {
    CLOUDFRONT = 0;
    IAM = 1;
    ACM = 2;
}

message CloudFrontOriginAccessIdentity {
    // The current configuration information for the identity.
    CloudFrontOriginAccessIdentityConfig CloudFrontOriginAccessIdentityConfig = 1;
    // The ID for the origin access identity. For example: <code>E74FTE3AJFJ256A</code>.
    string Id = 2;
    // The Amazon S3 canonical user ID for the origin access identity, used when giving the origin access identity read permission to an object in Amazon S3.
    string S3CanonicalUserId = 3;
}

message CloudFrontOriginAccessIdentityAlreadyExists {
    string Message = 1;
}

message CloudFrontOriginAccessIdentityConfig {
    // <p>A unique number that ensures the request can't be replayed.</p> <p>If the <code>CallerReference</code> is new (no matter the content of the <code>CloudFrontOriginAccessIdentityConfig</code> object), a new origin access identity is created.</p> <p>If the <code>CallerReference</code> is a value already sent in a previous identity request, and the content of the <code>CloudFrontOriginAccessIdentityConfig</code> is identical to the original request (ignoring white space), the response includes the same information returned to the original request. </p> <p>If the <code>CallerReference</code> is a value you already sent in a previous request to create an identity, but the content of the <code>CloudFrontOriginAccessIdentityConfig</code> is different from the original request, CloudFront returns a <code>CloudFrontOriginAccessIdentityAlreadyExists</code> error. </p>
    string CallerReference = 1;
    // Any comments you want to include about the origin access identity.
    string Comment = 2;
}

message CloudFrontOriginAccessIdentityInUse {
    string Message = 1;
}

message CloudFrontOriginAccessIdentityList {
    // A flag that indicates whether more origin access identities remain to be listed. If your results were truncated, you can make a follow-up pagination request using the <code>Marker</code> request parameter to retrieve more items in the list.
    boolean IsTruncated = 1;
    // A complex type that contains one <code>CloudFrontOriginAccessIdentitySummary</code> element for each origin access identity that was created by the current AWS account.
    array Items = 2;
    // Use this when paginating results to indicate where to begin in your list of origin access identities. The results include identities in the list that occur after the marker. To get the next page of results, set the <code>Marker</code> to the value of the <code>NextMarker</code> from the current page's response (which is also the ID of the last identity on that page).
    string Marker = 3;
    // The maximum number of origin access identities you want in the response body.
    integer MaxItems = 4;
    // If <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value you can use for the <code>Marker</code> request parameter to continue listing your origin access identities where they left off.
    string NextMarker = 5;
    // The number of CloudFront origin access identities that were created by the current AWS account.
    integer Quantity = 6;
}

message CloudFrontOriginAccessIdentitySummary {
    // The comment for this origin access identity, as originally specified when created.
    string Comment = 1;
    // The ID for the origin access identity. For example: <code>E74FTE3AJFJ256A</code>.
    string Id = 2;
    // The Amazon S3 canonical user ID for the origin access identity, which you use when giving the origin access identity read permission to an object in Amazon S3.
    string S3CanonicalUserId = 3;
}

repeated CloudFrontOriginAccessIdentitySummary CloudFrontOriginAccessIdentitySummaryList = 1

repeated string CookieNameList = 1

message CookieNames {
    // A complex type that contains one <code>Name</code> element for each cookie that you want CloudFront to forward to the origin for this cache behavior.
    array Items = 1;
    // The number of different cookies that you want CloudFront to forward to the origin for this cache behavior.
    integer Quantity = 2;
}

message CookiePreference {
    // <p>Specifies which cookies to forward to the origin for this cache behavior: all, none, or the list of cookies specified in the <code>WhitelistedNames</code> complex type.</p> <p>Amazon S3 doesn't process cookies. When the cache behavior is forwarding requests to an Amazon S3 origin, specify none for the <code>Forward</code> element. </p>
    ItemSelection Forward = 1;
    // <p>Required if you specify <code>whitelist</code> for the value of <code>Forward:</code>. A complex type that specifies how many different cookies you want CloudFront to forward to the origin for this cache behavior and, if you want to forward selected cookies, the names of those cookies.</p> <p>If you specify <code>all</code> or none for the value of <code>Forward</code>, omit <code>WhitelistedNames</code>. If you change the value of <code>Forward</code> from <code>whitelist</code> to all or none and you don't delete the <code>WhitelistedNames</code> element and its child elements, CloudFront deletes them automatically.</p> <p>For the current limit on the number of cookie names that you can whitelist for each cache behavior, see <a href="http://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html#limits_cloudfront">Amazon CloudFront Limits</a> in the <i>AWS General Reference</i>.</p>
    CookieNames WhitelistedNames = 2;
}

message CreateCloudFrontOriginAccessIdentityRequest {
    // The current configuration information for the identity.
    CloudFrontOriginAccessIdentityConfig CloudFrontOriginAccessIdentityConfig = 1;
}

message CreateCloudFrontOriginAccessIdentityResult {
    // The origin access identity's information.
    CloudFrontOriginAccessIdentity CloudFrontOriginAccessIdentity = 1;
}

message CreateDistributionRequest {
    // The distribution's configuration information.
    DistributionConfig DistributionConfig = 1;
}

message CreateDistributionResult {
    // The distribution's information.
    Distribution Distribution = 1;
}

message CreateDistributionWithTagsRequest {
    // The distribution's configuration information.
    DistributionConfigWithTags DistributionConfigWithTags = 1;
}

message CreateDistributionWithTagsResult {
    // The distribution's information.
    Distribution Distribution = 1;
}

message CreateInvalidationRequest {
    // The batch information for the invalidation.
    InvalidationBatch InvalidationBatch = 1;
}

message CreateInvalidationResult {
    // The invalidation's information.
    Invalidation Invalidation = 1;
}

message CreateStreamingDistributionRequest {
    // The streaming distribution's configuration information.
    StreamingDistributionConfig StreamingDistributionConfig = 1;
}

message CreateStreamingDistributionResult {
    // The streaming distribution's information.
    StreamingDistribution StreamingDistribution = 1;
}

message CreateStreamingDistributionWithTagsRequest {
    //  The streaming distribution's configuration information.
    StreamingDistributionConfigWithTags StreamingDistributionConfigWithTags = 1;
}

message CreateStreamingDistributionWithTagsResult {
    // The streaming distribution's information.
    StreamingDistribution StreamingDistribution = 1;
}

message CustomErrorResponse {
    // <p>The minimum amount of time, in seconds, that you want CloudFront to cache the HTTP status code specified in <code>ErrorCode</code>. When this time period has elapsed, CloudFront queries your origin to see whether the problem that caused the error has been resolved and the requested object is now available.</p> <p>If you don't want to specify a value, include an empty element, <code>&lt;ErrorCachingMinTTL&gt;</code>, in the XML document.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/custom-error-pages.html">Customizing Error Responses</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
    integer ErrorCachingMinTTL = 1;
    // The HTTP status code for which you want to specify a custom error page and/or a caching duration.
    integer ErrorCode = 2;
    // <p>The HTTP status code that you want CloudFront to return to the viewer along with the custom error page. There are a variety of reasons that you might want CloudFront to return a status code different from the status code that your origin returned to CloudFront, for example:</p> <ul> <li> <p>Some Internet devices (some firewalls and corporate proxies, for example) intercept HTTP 4xx and 5xx and prevent the response from being returned to the viewer. If you substitute <code>200</code>, the response typically won't be intercepted.</p> </li> <li> <p>If you don't care about distinguishing among different client errors or server errors, you can specify <code>400</code> or <code>500</code> as the <code>ResponseCode</code> for all 4xx or 5xx errors.</p> </li> <li> <p>You might want to return a <code>200</code> status code (OK) and static website so your customers don't know that your website is down.</p> </li> </ul> <p>If you specify a value for <code>ResponseCode</code>, you must also specify a value for <code>ResponsePagePath</code>. If you don't want to specify a value, include an empty element, <code>&lt;ResponseCode&gt;</code>, in the XML document.</p>
    string ResponseCode = 3;
    // <p>The path to the custom error page that you want CloudFront to return to a viewer when your origin returns the HTTP status code specified by <code>ErrorCode</code>, for example, <code>/4xx-errors/403-forbidden.html</code>. If you want to store your objects and your custom error pages in different locations, your distribution must include a cache behavior for which the following is true:</p> <ul> <li> <p>The value of <code>PathPattern</code> matches the path to your custom error messages. For example, suppose you saved custom error pages for 4xx errors in an Amazon S3 bucket in a directory named <code>/4xx-errors</code>. Your distribution must include a cache behavior for which the path pattern routes requests for your custom error pages to that location, for example, <code>/4xx-errors/*</code>. </p> </li> <li> <p>The value of <code>TargetOriginId</code> specifies the value of the <code>ID</code> element for the origin that contains your custom error pages.</p> </li> </ul> <p>If you specify a value for <code>ResponsePagePath</code>, you must also specify a value for <code>ResponseCode</code>. If you don't want to specify a value, include an empty element, <code>&lt;ResponsePagePath&gt;</code>, in the XML document.</p> <p>We recommend that you store custom error pages in an Amazon S3 bucket. If you store custom error pages on an HTTP server and the server starts to return 5xx errors, CloudFront can't get the files that you want to return to viewers because the origin server is unavailable.</p>
    string ResponsePagePath = 4;
}

repeated CustomErrorResponse CustomErrorResponseList = 1

message CustomErrorResponses {
    // A complex type that contains a <code>CustomErrorResponse</code> element for each HTTP status code for which you want to specify a custom error page and/or a caching duration.
    array Items = 1;
    // The number of HTTP status codes for which you want to specify a custom error page and/or a caching duration. If <code>Quantity</code> is <code>0</code>, you can omit <code>Items</code>.
    integer Quantity = 2;
}

message CustomHeaders {
    //  <b>Optional</b>: A list that contains one <code>OriginCustomHeader</code> element for each custom header that you want CloudFront to forward to the origin. If Quantity is <code>0</code>, omit <code>Items</code>.
    array Items = 1;
    // The number of custom headers, if any, for this distribution.
    integer Quantity = 2;
}

message CustomOriginConfig {
    // The HTTP port the custom origin listens on.
    integer HTTPPort = 1;
    // The HTTPS port the custom origin listens on.
    integer HTTPSPort = 2;
    // <p>You can create a custom keep-alive timeout. All timeout units are in seconds. The default keep-alive timeout is 5 seconds, but you can configure custom timeout lengths using the CloudFront API. The minimum timeout length is 1 second; the maximum is 60 seconds.</p> <p>If you need to increase the maximum time limit, contact the <a href="https://console.aws.amazon.com/support/home#/">AWS Support Center</a>.</p>
    integer OriginKeepaliveTimeout = 3;
    // The origin protocol policy to apply to your origin.
    OriginProtocolPolicy OriginProtocolPolicy = 4;
    // <p>You can create a custom origin read timeout. All timeout units are in seconds. The default origin read timeout is 30 seconds, but you can configure custom timeout lengths using the CloudFront API. The minimum timeout length is 4 seconds; the maximum is 60 seconds.</p> <p>If you need to increase the maximum time limit, contact the <a href="https://console.aws.amazon.com/support/home#/">AWS Support Center</a>.</p>
    integer OriginReadTimeout = 5;
    // The SSL/TLS protocols that you want CloudFront to use when communicating with your origin over HTTPS.
    OriginSslProtocols OriginSslProtocols = 6;
}

message DefaultCacheBehavior {
    AllowedMethods AllowedMethods = 1;
    // Whether you want CloudFront to automatically compress certain files for this cache behavior. If so, specify <code>true</code>; if not, specify <code>false</code>. For more information, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html">Serving Compressed Files</a> in the <i>Amazon CloudFront Developer Guide</i>.
    boolean Compress = 2;
    // The default amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. The value that you specify applies only when your origin does not add HTTP headers such as <code>Cache-Control max-age</code>, <code>Cache-Control s-maxage</code>, and <code>Expires</code> to objects. For more information, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html">Specifying How Long Objects and Errors Stay in a CloudFront Edge Cache (Expiration)</a> in the <i>Amazon CloudFront Developer Guide</i>.
    integer DefaultTTL = 3;
    // A complex type that specifies how CloudFront handles query strings and cookies.
    ForwardedValues ForwardedValues = 4;
    // A complex type that contains zero or more Lambda function associations for a cache behavior.
    LambdaFunctionAssociations LambdaFunctionAssociations = 5;
    integer MaxTTL = 6;
    // <p>The minimum amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. For more information, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html">Specifying How Long Objects and Errors Stay in a CloudFront Edge Cache (Expiration)</a> in the <i>Amazon Amazon CloudFront Developer Guide</i>.</p> <p>You must specify <code>0</code> for <code>MinTTL</code> if you configure CloudFront to forward all headers to your origin (under <code>Headers</code>, if you specify <code>1</code> for <code>Quantity</code> and <code>*</code> for <code>Name</code>).</p>
    integer MinTTL = 7;
    // Indicates whether you want to distribute media files in the Microsoft Smooth Streaming format using the origin that is associated with this cache behavior. If so, specify <code>true</code>; if not, specify <code>false</code>. If you specify <code>true</code> for <code>SmoothStreaming</code>, you can still distribute other content using this cache behavior if the content matches the value of <code>PathPattern</code>.
    boolean SmoothStreaming = 8;
    // The value of <code>ID</code> for the origin that you want CloudFront to route requests to when a request matches the path pattern either for a cache behavior or for the default cache behavior.
    string TargetOriginId = 9;
    // <p>A complex type that specifies the AWS accounts, if any, that you want to allow to create signed URLs for private content.</p> <p>If you want to require signed URLs in requests for objects in the target origin that match the <code>PathPattern</code> for this cache behavior, specify <code>true</code> for <code>Enabled</code>, and specify the applicable values for <code>Quantity</code> and <code>Items</code>. For more information, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html">Serving Private Content through CloudFront</a> in the <i>Amazon Amazon CloudFront Developer Guide</i>.</p> <p>If you don't want to require signed URLs in requests for objects that match <code>PathPattern</code>, specify <code>false</code> for <code>Enabled</code> and <code>0</code> for <code>Quantity</code>. Omit <code>Items</code>.</p> <p>To add, change, or remove one or more trusted signers, change <code>Enabled</code> to <code>true</code> (if it's currently <code>false</code>), change <code>Quantity</code> as applicable, and specify all of the trusted signers that you want to include in the updated distribution.</p>
    TrustedSigners TrustedSigners = 10;
    // <p>The protocol that viewers can use to access the files in the origin specified by <code>TargetOriginId</code> when a request matches the path pattern in <code>PathPattern</code>. You can specify the following options:</p> <ul> <li> <p> <code>allow-all</code>: Viewers can use HTTP or HTTPS.</p> </li> <li> <p> <code>redirect-to-https</code>: If a viewer submits an HTTP request, CloudFront returns an HTTP status code of 301 (Moved Permanently) to the viewer along with the HTTPS URL. The viewer then resubmits the request using the new URL.</p> </li> <li> <p> <code>https-only</code>: If a viewer sends an HTTP request, CloudFront returns an HTTP status code of 403 (Forbidden).</p> </li> </ul> <p>For more information about requiring the HTTPS protocol, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/SecureConnections.html">Using an HTTPS Connection to Access Your Objects</a> in the <i>Amazon CloudFront Developer Guide</i>.</p> <note> <p>The only way to guarantee that viewers retrieve an object that was fetched from the origin using HTTPS is never to use any other protocol to fetch the object. If you have recently changed from HTTP to HTTPS, we recommend that you clear your objects' cache because cached objects are protocol agnostic. That means that an edge location will return an object from the cache regardless of whether the current request protocol matches the protocol used previously. For more information, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html">Specifying How Long Objects and Errors Stay in a CloudFront Edge Cache (Expiration)</a> in the <i>Amazon CloudFront Developer Guide</i>.</p> </note>
    ViewerProtocolPolicy ViewerProtocolPolicy = 11;
}

message DeleteCloudFrontOriginAccessIdentityRequest {
}

message DeleteDistributionRequest {
}

message DeleteStreamingDistributionRequest {
}

message Distribution {
    // The ARN (Amazon Resource Name) for the distribution. For example: <code>arn:aws:cloudfront::123456789012:distribution/EDFDVBD632BHDS5</code>, where <code>123456789012</code> is your AWS account ID.
    string ARN = 1;
    // CloudFront automatically adds this element to the response only if you've set up the distribution to serve private content with signed URLs. The element lists the key pair IDs that CloudFront is aware of for each trusted signer. The <code>Signer</code> child element lists the AWS account number of the trusted signer (or an empty <code>Self</code> element if the signer is you). The <code>Signer</code> element also includes the IDs of any active key pairs associated with the trusted signer's AWS account. If no <code>KeyPairId</code> element appears for a <code>Signer</code>, that signer can't create working signed URLs.
    ActiveTrustedSigners ActiveTrustedSigners = 2;
    // The current configuration information for the distribution. Send a <code>GET</code> request to the <code>/<i>CloudFront API version</i>/distribution ID/config</code> resource.
    DistributionConfig DistributionConfig = 3;
    // The domain name corresponding to the distribution. For example: <code>d604721fxaaqy9.cloudfront.net</code>.
    string DomainName = 4;
    // The identifier for the distribution. For example: <code>EDFDVBD632BHDS5</code>.
    string Id = 5;
    // The number of invalidation batches currently in progress.
    integer InProgressInvalidationBatches = 6;
    // The date and time the distribution was last modified.
    string LastModifiedTime = 7;
    // This response element indicates the current status of the distribution. When the status is <code>Deployed</code>, the distribution's information is fully propagated to all CloudFront edge locations.
    string Status = 8;
}

message DistributionAlreadyExists {
    string Message = 1;
}

message DistributionConfig {
    // A complex type that contains information about CNAMEs (alternate domain names), if any, for this distribution.
    Aliases Aliases = 1;
    // A complex type that contains zero or more <code>CacheBehavior</code> elements.
    CacheBehaviors CacheBehaviors = 2;
    // <p>A unique value (for example, a date-time stamp) that ensures that the request can't be replayed.</p> <p>If the value of <code>CallerReference</code> is new (regardless of the content of the <code>DistributionConfig</code> object), CloudFront creates a new distribution.</p> <p>If <code>CallerReference</code> is a value you already sent in a previous request to create a distribution, and if the content of the <code>DistributionConfig</code> is identical to the original request (ignoring white space), CloudFront returns the same the response that it returned to the original request.</p> <p>If <code>CallerReference</code> is a value you already sent in a previous request to create a distribution but the content of the <code>DistributionConfig</code> is different from the original request, CloudFront returns a <code>DistributionAlreadyExists</code> error.</p>
    string CallerReference = 3;
    // <p>Any comments you want to include about the distribution.</p> <p>If you don't want to specify a comment, include an empty <code>Comment</code> element.</p> <p>To delete an existing comment, update the distribution configuration and include an empty <code>Comment</code> element.</p> <p>To add or change a comment, update the distribution configuration and specify the new comment.</p>
    string Comment = 4;
    // <p>A complex type that controls the following:</p> <ul> <li> <p>Whether CloudFront replaces HTTP status codes in the 4xx and 5xx range with custom error messages before returning the response to the viewer.</p> </li> <li> <p>How long CloudFront caches HTTP status codes in the 4xx and 5xx range.</p> </li> </ul> <p>For more information about custom error pages, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/custom-error-pages.html">Customizing Error Responses</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
    CustomErrorResponses CustomErrorResponses = 5;
    // A complex type that describes the default cache behavior if you do not specify a <code>CacheBehavior</code> element or if files don't match any of the values of <code>PathPattern</code> in <code>CacheBehavior</code> elements. You must create exactly one default cache behavior.
    DefaultCacheBehavior DefaultCacheBehavior = 6;
    // <p>The object that you want CloudFront to request from your origin (for example, <code>index.html</code>) when a viewer requests the root URL for your distribution (<code>http://www.example.com</code>) instead of an object in your distribution (<code>http://www.example.com/product-description.html</code>). Specifying a default root object avoids exposing the contents of your distribution.</p> <p>Specify only the object name, for example, <code>index.html</code>. Do not add a <code>/</code> before the object name.</p> <p>If you don't want to specify a default root object when you create a distribution, include an empty <code>DefaultRootObject</code> element.</p> <p>To delete the default root object from an existing distribution, update the distribution configuration and include an empty <code>DefaultRootObject</code> element.</p> <p>To replace the default root object, update the distribution configuration and specify the new object.</p> <p>For more information about the default root object, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/DefaultRootObject.html">Creating a Default Root Object</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
    string DefaultRootObject = 7;
    // <p>From this field, you can enable or disable the selected distribution.</p> <p>If you specify <code>false</code> for <code>Enabled</code> but you specify values for <code>Bucket</code> and <code>Prefix</code>, the values are automatically deleted.</p>
    boolean Enabled = 8;
    // <p>(Optional) Specify the maximum HTTP version that you want viewers to use to communicate with CloudFront. The default value for new web distributions is http2. Viewers that don't support HTTP/2 automatically use an earlier HTTP version.</p> <p>For viewers and CloudFront to use HTTP/2, viewers must support TLS 1.2 or later, and must support Server Name Identification (SNI).</p> <p>In general, configuring CloudFront to communicate with viewers using HTTP/2 reduces latency. You can improve performance by optimizing for HTTP/2. For more information, do an Internet search for "http/2 optimization." </p>
    HttpVersion HttpVersion = 9;
    // <p>If you want CloudFront to respond to IPv6 DNS requests with an IPv6 address for your distribution, specify <code>true</code>. If you specify <code>false</code>, CloudFront responds to IPv6 DNS requests with the DNS response code <code>NOERROR</code> and with no IP addresses. This allows viewers to submit a second request, for an IPv4 address for your distribution. </p> <p>In general, you should enable IPv6 if you have users on IPv6 networks who want to access your content. However, if you're using signed URLs or signed cookies to restrict access to your content, and if you're using a custom policy that includes the <code>IpAddress</code> parameter to restrict the IP addresses that can access your content, do not enable IPv6. If you want to restrict access to some content by IP address and not restrict access to other content (or restrict access but not by IP address), you can create two distributions. For more information, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-creating-signed-url-custom-policy.html">Creating a Signed URL Using a Custom Policy</a> in the <i>Amazon CloudFront Developer Guide</i>.</p> <p>If you're using an Amazon Route 53 alias resource record set to route traffic to your CloudFront distribution, you need to create a second alias resource record set when both of the following are true:</p> <ul> <li> <p>You enable IPv6 for the distribution</p> </li> <li> <p>You're using alternate domain names in the URLs for your objects</p> </li> </ul> <p>For more information, see <a href="http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-cloudfront-distribution.html">Routing Traffic to an Amazon CloudFront Web Distribution by Using Your Domain Name</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> <p>If you created a CNAME resource record set, either with Amazon Route 53 or with another DNS service, you don't need to make any changes. A CNAME record will route traffic to your distribution regardless of the IP address format of the viewer request.</p>
    boolean IsIPV6Enabled = 10;
    // <p>A complex type that controls whether access logs are written for the distribution.</p> <p>For more information about logging, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/AccessLogs.html">Access Logs</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
    LoggingConfig Logging = 11;
    // A complex type that contains information about origins for this distribution.
    Origins Origins = 12;
    // <p>The price class that corresponds with the maximum price that you want to pay for CloudFront service. If you specify <code>PriceClass_All</code>, CloudFront responds to requests for your objects from all CloudFront edge locations.</p> <p>If you specify a price class other than <code>PriceClass_All</code>, CloudFront serves your objects from the CloudFront edge location that has the lowest latency among the edge locations in your price class. Viewers who are in or near regions that are excluded from your specified price class may encounter slower performance.</p> <p>For more information about price classes, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PriceClass.html">Choosing the Price Class for a CloudFront Distribution</a> in the <i>Amazon CloudFront Developer Guide</i>. For information about CloudFront pricing, including how price classes map to CloudFront regions, see <a href="https://aws.amazon.com/cloudfront/pricing/">Amazon CloudFront Pricing</a>.</p>
    PriceClass PriceClass = 13;
    Restrictions Restrictions = 14;
    ViewerCertificate ViewerCertificate = 15;
    // <p>A unique identifier that specifies the AWS WAF web ACL, if any, to associate with this distribution.</p> <p>AWS WAF is a web application firewall that lets you monitor the HTTP and HTTPS requests that are forwarded to CloudFront, and lets you control access to your content. Based on conditions that you specify, such as the IP addresses that requests originate from or the values of query strings, CloudFront responds to requests either with the requested content or with an HTTP 403 status code (Forbidden). You can also configure CloudFront to return a custom error page when a request is blocked. For more information about AWS WAF, see the <a href="http://docs.aws.amazon.com/waf/latest/developerguide/what-is-aws-waf.html">AWS WAF Developer Guide</a>. </p>
    string WebACLId = 16;
}

message DistributionConfigWithTags {
    // A distribution configuration.
    DistributionConfig DistributionConfig = 1;
    // A complex type that contains zero or more <code>Tag</code> elements.
    Tags Tags = 2;
}

message DistributionList {
    // A flag that indicates whether more distributions remain to be listed. If your results were truncated, you can make a follow-up pagination request using the <code>Marker</code> request parameter to retrieve more distributions in the list.
    boolean IsTruncated = 1;
    // A complex type that contains one <code>DistributionSummary</code> element for each distribution that was created by the current AWS account.
    array Items = 2;
    // The value you provided for the <code>Marker</code> request parameter.
    string Marker = 3;
    // The value you provided for the <code>MaxItems</code> request parameter.
    integer MaxItems = 4;
    // If <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value you can use for the <code>Marker</code> request parameter to continue listing your distributions where they left off.
    string NextMarker = 5;
    // The number of distributions that were created by the current AWS account.
    integer Quantity = 6;
}

message DistributionNotDisabled {
    string Message = 1;
}

message DistributionSummary {
    // The ARN (Amazon Resource Name) for the distribution. For example: <code>arn:aws:cloudfront::123456789012:distribution/EDFDVBD632BHDS5</code>, where <code>123456789012</code> is your AWS account ID.
    string ARN = 1;
    // A complex type that contains information about CNAMEs (alternate domain names), if any, for this distribution.
    Aliases Aliases = 2;
    // A complex type that contains zero or more <code>CacheBehavior</code> elements.
    CacheBehaviors CacheBehaviors = 3;
    // The comment originally specified when this distribution was created.
    string Comment = 4;
    // A complex type that contains zero or more <code>CustomErrorResponses</code> elements.
    CustomErrorResponses CustomErrorResponses = 5;
    // A complex type that describes the default cache behavior if you do not specify a <code>CacheBehavior</code> element or if files don't match any of the values of <code>PathPattern</code> in <code>CacheBehavior</code> elements. You must create exactly one default cache behavior.
    DefaultCacheBehavior DefaultCacheBehavior = 6;
    // The domain name that corresponds to the distribution. For example: <code>d604721fxaaqy9.cloudfront.net</code>.
    string DomainName = 7;
    // Whether the distribution is enabled to accept user requests for content.
    boolean Enabled = 8;
    //  Specify the maximum HTTP version that you want viewers to use to communicate with CloudFront. The default value for new web distributions is <code>http2</code>. Viewers that don't support <code>HTTP/2</code> will automatically use an earlier version.
    HttpVersion HttpVersion = 9;
    // The identifier for the distribution. For example: <code>EDFDVBD632BHDS5</code>.
    string Id = 10;
    // Whether CloudFront responds to IPv6 DNS requests with an IPv6 address for your distribution.
    boolean IsIPV6Enabled = 11;
    // The date and time the distribution was last modified.
    string LastModifiedTime = 12;
    // A complex type that contains information about origins for this distribution.
    Origins Origins = 13;
    PriceClass PriceClass = 14;
    Restrictions Restrictions = 15;
    // The current status of the distribution. When the status is <code>Deployed</code>, the distribution's information is propagated to all CloudFront edge locations.
    string Status = 16;
    ViewerCertificate ViewerCertificate = 17;
    // The Web ACL Id (if any) associated with the distribution.
    string WebACLId = 18;
}

repeated DistributionSummary DistributionSummaryList = 1

enum EventType {
    VIEWERREQUEST = 0;
    VIEWERRESPONSE = 1;
    ORIGINREQUEST = 2;
    ORIGINRESPONSE = 3;
}

message ForwardedValues {
    // A complex type that specifies whether you want CloudFront to forward cookies to the origin and, if so, which ones. For more information about forwarding cookies to the origin, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Cookies.html">How CloudFront Forwards, Caches, and Logs Cookies</a> in the <i>Amazon CloudFront Developer Guide</i>.
    CookiePreference Cookies = 1;
    // A complex type that specifies the <code>Headers</code>, if any, that you want CloudFront to vary upon for this cache behavior.
    Headers Headers = 2;
    // <p>Indicates whether you want CloudFront to forward query strings to the origin that is associated with this cache behavior and cache based on the query string parameters. CloudFront behavior depends on the value of <code>QueryString</code> and on the values that you specify for <code>QueryStringCacheKeys</code>, if any:</p> <p>If you specify true for <code>QueryString</code> and you don't specify any values for <code>QueryStringCacheKeys</code>, CloudFront forwards all query string parameters to the origin and caches based on all query string parameters. Depending on how many query string parameters and values you have, this can adversely affect performance because CloudFront must forward more requests to the origin.</p> <p>If you specify true for <code>QueryString</code> and you specify one or more values for <code>QueryStringCacheKeys</code>, CloudFront forwards all query string parameters to the origin, but it only caches based on the query string parameters that you specify.</p> <p>If you specify false for <code>QueryString</code>, CloudFront doesn't forward any query string parameters to the origin, and doesn't cache based on query string parameters.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/QueryStringParameters.html">Configuring CloudFront to Cache Based on Query String Parameters</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
    boolean QueryString = 3;
    // A complex type that contains information about the query string parameters that you want CloudFront to use for caching for this cache behavior.
    QueryStringCacheKeys QueryStringCacheKeys = 4;
}

message GeoRestriction {
    // <p> A complex type that contains a <code>Location</code> element for each country in which you want CloudFront either to distribute your content (<code>whitelist</code>) or not distribute your content (<code>blacklist</code>).</p> <p>The <code>Location</code> element is a two-letter, uppercase country code for a country that you want to include in your <code>blacklist</code> or <code>whitelist</code>. Include one <code>Location</code> element for each country.</p> <p>CloudFront and <code>MaxMind</code> both use <code>ISO 3166</code> country codes. For the current list of countries and the corresponding codes, see <code>ISO 3166-1-alpha-2</code> code on the <i>International Organization for Standardization</i> website. You can also refer to the country list in the CloudFront console, which includes both country names and codes.</p>
    array Items = 1;
    // When geo restriction is <code>enabled</code>, this is the number of countries in your <code>whitelist</code> or <code>blacklist</code>. Otherwise, when it is not enabled, <code>Quantity</code> is <code>0</code>, and you can omit <code>Items</code>.
    integer Quantity = 2;
    // <p>The method that you want to use to restrict distribution of your content by country:</p> <ul> <li> <p> <code>none</code>: No geo restriction is enabled, meaning access to content is not restricted by client geo location.</p> </li> <li> <p> <code>blacklist</code>: The <code>Location</code> elements specify the countries in which you do not want CloudFront to distribute your content.</p> </li> <li> <p> <code>whitelist</code>: The <code>Location</code> elements specify the countries in which you want CloudFront to distribute your content.</p> </li> </ul>
    GeoRestrictionType RestrictionType = 3;
}

enum GeoRestrictionType {
    BLACKLIST = 0;
    WHITELIST = 1;
    NONE = 2;
}

message GetCloudFrontOriginAccessIdentityConfigRequest {
}

message GetCloudFrontOriginAccessIdentityConfigResult {
    // The origin access identity's configuration information.
    CloudFrontOriginAccessIdentityConfig CloudFrontOriginAccessIdentityConfig = 1;
}

message GetCloudFrontOriginAccessIdentityRequest {
}

message GetCloudFrontOriginAccessIdentityResult {
    // The origin access identity's information.
    CloudFrontOriginAccessIdentity CloudFrontOriginAccessIdentity = 1;
}

message GetDistributionConfigRequest {
}

message GetDistributionConfigResult {
    // The distribution's configuration information.
    DistributionConfig DistributionConfig = 1;
}

message GetDistributionRequest {
}

message GetDistributionResult {
    // The distribution's information.
    Distribution Distribution = 1;
}

message GetInvalidationRequest {
}

message GetInvalidationResult {
    // The invalidation's information. For more information, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/InvalidationDatatype.html">Invalidation Complex Type</a>.
    Invalidation Invalidation = 1;
}

message GetStreamingDistributionConfigRequest {
}

message GetStreamingDistributionConfigResult {
    // The streaming distribution's configuration information.
    StreamingDistributionConfig StreamingDistributionConfig = 1;
}

message GetStreamingDistributionRequest {
}

message GetStreamingDistributionResult {
    // The streaming distribution's information.
    StreamingDistribution StreamingDistribution = 1;
}

repeated string HeaderList = 1

message Headers {
    // A complex type that contains one <code>Name</code> element for each header that you want CloudFront to forward to the origin and to vary on for this cache behavior. If <code>Quantity</code> is <code>0</code>, omit <code>Items</code>.
    array Items = 1;
    // <p>The number of different headers that you want CloudFront to forward to the origin for this cache behavior. You can configure each cache behavior in a web distribution to do one of the following:</p> <ul> <li> <p> <b>Forward all headers to your origin</b>: Specify <code>1</code> for <code>Quantity</code> and <code>*</code> for <code>Name</code>.</p> <important> <p>If you configure CloudFront to forward all headers to your origin, CloudFront doesn't cache the objects associated with this cache behavior. Instead, it sends every request to the origin.</p> </important> </li> <li> <p> <i>Forward a whitelist of headers you specify</i>: Specify the number of headers that you want to forward, and specify the header names in <code>Name</code> elements. CloudFront caches your objects based on the values in all of the specified headers. CloudFront also forwards the headers that it forwards by default, but it caches your objects based only on the headers that you specify. </p> </li> <li> <p> <b>Forward only the default headers</b>: Specify <code>0</code> for <code>Quantity</code> and omit <code>Items</code>. In this configuration, CloudFront doesn't cache based on the values in the request headers.</p> </li> </ul>
    integer Quantity = 2;
}

enum HttpVersion {
    HTTP11 = 0;
    HTTP2 = 1;
}

message IllegalUpdate {
    string Message = 1;
}

message InconsistentQuantities {
    string Message = 1;
}

message InvalidArgument {
    string Message = 1;
}

message InvalidDefaultRootObject {
    string Message = 1;
}

message InvalidErrorCode {
    string Message = 1;
}

message InvalidForwardCookies {
    string Message = 1;
}

message InvalidGeoRestrictionParameter {
    string Message = 1;
}

message InvalidHeadersForS3Origin {
    string Message = 1;
}

message InvalidIfMatchVersion {
    string Message = 1;
}

message InvalidLambdaFunctionAssociation {
    string Message = 1;
}

message InvalidLocationCode {
    string Message = 1;
}

message InvalidMinimumProtocolVersion {
    string Message = 1;
}

message InvalidOrigin {
    string Message = 1;
}

message InvalidOriginAccessIdentity {
    string Message = 1;
}

message InvalidOriginKeepaliveTimeout {
    string Message = 1;
}

message InvalidOriginReadTimeout {
    string Message = 1;
}

message InvalidProtocolSettings {
    string Message = 1;
}

message InvalidQueryStringParameters {
    string Message = 1;
}

message InvalidRelativePath {
    string Message = 1;
}

message InvalidRequiredProtocol {
    string Message = 1;
}

message InvalidResponseCode {
    string Message = 1;
}

message InvalidTTLOrder {
    string Message = 1;
}

message InvalidTagging {
    string Message = 1;
}

message InvalidViewerCertificate {
    string Message = 1;
}

message InvalidWebACLId {
    string Message = 1;
}

message Invalidation {
    // The date and time the invalidation request was first made.
    string CreateTime = 1;
    // The identifier for the invalidation request. For example: <code>IDFDVBD632BHDS5</code>.
    string Id = 2;
    // The current invalidation information for the batch request.
    InvalidationBatch InvalidationBatch = 3;
    // The status of the invalidation request. When the invalidation batch is finished, the status is <code>Completed</code>.
    string Status = 4;
}

message InvalidationBatch {
    // <p>A value that you specify to uniquely identify an invalidation request. CloudFront uses the value to prevent you from accidentally resubmitting an identical request. Whenever you create a new invalidation request, you must specify a new value for <code>CallerReference</code> and change other values in the request as applicable. One way to ensure that the value of <code>CallerReference</code> is unique is to use a <code>timestamp</code>, for example, <code>20120301090000</code>.</p> <p>If you make a second invalidation request with the same value for <code>CallerReference</code>, and if the rest of the request is the same, CloudFront doesn't create a new invalidation request. Instead, CloudFront returns information about the invalidation request that you previously created with the same <code>CallerReference</code>.</p> <p>If <code>CallerReference</code> is a value you already sent in a previous invalidation batch request but the content of any <code>Path</code> is different from the original request, CloudFront returns an <code>InvalidationBatchAlreadyExists</code> error.</p>
    string CallerReference = 1;
    // A complex type that contains information about the objects that you want to invalidate. For more information, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Invalidation.html#invalidation-specifying-objects">Specifying the Objects to Invalidate</a> in the <i>Amazon CloudFront Developer Guide</i>.
    Paths Paths = 2;
}

message InvalidationList {
    // A flag that indicates whether more invalidation batch requests remain to be listed. If your results were truncated, you can make a follow-up pagination request using the <code>Marker</code> request parameter to retrieve more invalidation batches in the list.
    boolean IsTruncated = 1;
    // A complex type that contains one <code>InvalidationSummary</code> element for each invalidation batch created by the current AWS account.
    array Items = 2;
    // The value that you provided for the <code>Marker</code> request parameter.
    string Marker = 3;
    // The value that you provided for the <code>MaxItems</code> request parameter.
    integer MaxItems = 4;
    // If <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value that you can use for the <code>Marker</code> request parameter to continue listing your invalidation batches where they left off.
    string NextMarker = 5;
    // The number of invalidation batches that were created by the current AWS account.
    integer Quantity = 6;
}

message InvalidationSummary {
    string CreateTime = 1;
    // The unique ID for an invalidation request.
    string Id = 2;
    // The status of an invalidation request.
    string Status = 3;
}

repeated InvalidationSummary InvalidationSummaryList = 1

enum ItemSelection {
    NONE = 0;
    WHITELIST = 1;
    ALL = 2;
}

repeated string KeyPairIdList = 1

message KeyPairIds {
    // <p>A complex type that lists the active CloudFront key pairs, if any, that are associated with <code>AwsAccountNumber</code>.</p> <p>For more information, see <a>ActiveTrustedSigners</a>.</p>
    array Items = 1;
    // <p>The number of active CloudFront key pairs for <code>AwsAccountNumber</code>.</p> <p>For more information, see <a>ActiveTrustedSigners</a>.</p>
    integer Quantity = 2;
}

message LambdaFunctionAssociation {
    // <p>Specifies the event type that triggers a Lambda function invocation. Valid values are:</p> <ul> <li> <p> <code>viewer-request</code> </p> </li> <li> <p> <code>origin-request</code> </p> </li> <li> <p> <code>viewer-response</code> </p> </li> <li> <p> <code>origin-response</code> </p> </li> </ul>
    EventType EventType = 1;
    // The ARN of the Lambda function.
    string LambdaFunctionARN = 2;
}

repeated LambdaFunctionAssociation LambdaFunctionAssociationList = 1

message LambdaFunctionAssociations {
    //  <b>Optional</b>: A complex type that contains <code>LambdaFunctionAssociation</code> items for this cache behavior. If <code>Quantity</code> is <code>0</code>, you can omit <code>Items</code>.
    array Items = 1;
    // The number of Lambda function associations for this cache behavior.
    integer Quantity = 2;
}

message ListCloudFrontOriginAccessIdentitiesRequest {
}

message ListCloudFrontOriginAccessIdentitiesResult {
    // The <code>CloudFrontOriginAccessIdentityList</code> type.
    CloudFrontOriginAccessIdentityList CloudFrontOriginAccessIdentityList = 1;
}

message ListDistributionsByWebACLIdRequest {
}

message ListDistributionsByWebACLIdResult {
    // The <code>DistributionList</code> type.
    DistributionList DistributionList = 1;
}

message ListDistributionsRequest {
}

message ListDistributionsResult {
    // The <code>DistributionList</code> type.
    DistributionList DistributionList = 1;
}

message ListInvalidationsRequest {
}

message ListInvalidationsResult {
    // Information about invalidation batches.
    InvalidationList InvalidationList = 1;
}

message ListStreamingDistributionsRequest {
}

message ListStreamingDistributionsResult {
    // The <code>StreamingDistributionList</code> type.
    StreamingDistributionList StreamingDistributionList = 1;
}

message ListTagsForResourceRequest {
}

message ListTagsForResourceResult {
    //  A complex type that contains zero or more <code>Tag</code> elements.
    Tags Tags = 1;
}

repeated string LocationList = 1

message LoggingConfig {
    // The Amazon S3 bucket to store the access logs in, for example, <code>myawslogbucket.s3.amazonaws.com</code>.
    string Bucket = 1;
    // Specifies whether you want CloudFront to save access logs to an Amazon S3 bucket. If you do not want to enable logging when you create a distribution or if you want to disable logging for an existing distribution, specify <code>false</code> for <code>Enabled</code>, and specify empty <code>Bucket</code> and <code>Prefix</code> elements. If you specify <code>false</code> for <code>Enabled</code> but you specify values for <code>Bucket</code>, <code>prefix</code>, and <code>IncludeCookies</code>, the values are automatically deleted.
    boolean Enabled = 2;
    // Specifies whether you want CloudFront to include cookies in access logs, specify <code>true</code> for <code>IncludeCookies</code>. If you choose to include cookies in logs, CloudFront logs all cookies regardless of how you configure the cache behaviors for this distribution. If you do not want to include cookies when you create a distribution or if you want to disable include cookies for an existing distribution, specify <code>false</code> for <code>IncludeCookies</code>.
    boolean IncludeCookies = 3;
    // An optional string that you want CloudFront to prefix to the access log <code>filenames</code> for this distribution, for example, <code>myprefix/</code>. If you want to enable logging, but you do not want to specify a prefix, you still must include an empty <code>Prefix</code> element in the <code>Logging</code> element.
    string Prefix = 4;
}

enum Method {
    GET = 0;
    HEAD = 1;
    POST = 2;
    PUT = 3;
    PATCH = 4;
    OPTIONS = 5;
    DELETE = 6;
}

repeated Method MethodsList = 1

enum MinimumProtocolVersion {
    SSLV3 = 0;
    TLSV1 = 1;
}

message MissingBody {
    string Message = 1;
}

message NoSuchCloudFrontOriginAccessIdentity {
    string Message = 1;
}

message NoSuchDistribution {
    string Message = 1;
}

message NoSuchInvalidation {
    string Message = 1;
}

message NoSuchOrigin {
    string Message = 1;
}

message NoSuchResource {
    string Message = 1;
}

message NoSuchStreamingDistribution {
    string Message = 1;
}

message Origin {
    // A complex type that contains names and values for the custom headers that you want.
    CustomHeaders CustomHeaders = 1;
    // A complex type that contains information about a custom origin. If the origin is an Amazon S3 bucket, use the <code>S3OriginConfig</code> element instead.
    CustomOriginConfig CustomOriginConfig = 2;
    // <p> <b>Amazon S3 origins</b>: The DNS name of the Amazon S3 bucket from which you want CloudFront to get objects for this origin, for example, <code>myawsbucket.s3.amazonaws.com</code>.</p> <p>Constraints for Amazon S3 origins: </p> <ul> <li> <p>If you configured Amazon S3 Transfer Acceleration for your bucket, do not specify the <code>s3-accelerate</code> endpoint for <code>DomainName</code>.</p> </li> <li> <p>The bucket name must be between 3 and 63 characters long (inclusive).</p> </li> <li> <p>The bucket name must contain only lowercase characters, numbers, periods, underscores, and dashes.</p> </li> <li> <p>The bucket name must not contain adjacent periods.</p> </li> </ul> <p> <b>Custom Origins</b>: The DNS domain name for the HTTP server from which you want CloudFront to get objects for this origin, for example, <code>www.example.com</code>. </p> <p>Constraints for custom origins:</p> <ul> <li> <p> <code>DomainName</code> must be a valid DNS name that contains only a-z, A-Z, 0-9, dot (.), hyphen (-), or underscore (_) characters.</p> </li> <li> <p>The name cannot exceed 128 characters.</p> </li> </ul>
    string DomainName = 3;
    // <p>A unique identifier for the origin. The value of <code>Id</code> must be unique within the distribution.</p> <p>When you specify the value of <code>TargetOriginId</code> for the default cache behavior or for another cache behavior, you indicate the origin to which you want the cache behavior to route requests by specifying the value of the <code>Id</code> element for that origin. When a request matches the path pattern for that cache behavior, CloudFront routes the request to the specified origin. For more information, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesCacheBehavior">Cache Behavior Settings</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
    string Id = 4;
    // <p>An optional element that causes CloudFront to request your content from a directory in your Amazon S3 bucket or your custom origin. When you include the <code>OriginPath</code> element, specify the directory name, beginning with a <code>/</code>. CloudFront appends the directory name to the value of <code>DomainName</code>, for example, <code>example.com/production</code>. Do not include a <code>/</code> at the end of the directory name.</p> <p>For example, suppose you've specified the following values for your distribution:</p> <ul> <li> <p> <code>DomainName</code>: An Amazon S3 bucket named <code>myawsbucket</code>.</p> </li> <li> <p> <code>OriginPath</code>: <code>/production</code> </p> </li> <li> <p> <code>CNAME</code>: <code>example.com</code> </p> </li> </ul> <p>When a user enters <code>example.com/index.html</code> in a browser, CloudFront sends a request to Amazon S3 for <code>myawsbucket/production/index.html</code>.</p> <p>When a user enters <code>example.com/acme/index.html</code> in a browser, CloudFront sends a request to Amazon S3 for <code>myawsbucket/production/acme/index.html</code>.</p>
    string OriginPath = 5;
    // A complex type that contains information about the Amazon S3 origin. If the origin is a custom origin, use the <code>CustomOriginConfig</code> element instead.
    S3OriginConfig S3OriginConfig = 6;
}

message OriginCustomHeader {
    // The name of a header that you want CloudFront to forward to your origin. For more information, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/forward-custom-headers.html">Forwarding Custom Headers to Your Origin (Web Distributions Only)</a> in the <i>Amazon Amazon CloudFront Developer Guide</i>.
    string HeaderName = 1;
    // The value for the header that you specified in the <code>HeaderName</code> field.
    string HeaderValue = 2;
}

repeated OriginCustomHeader OriginCustomHeadersList = 1

repeated Origin OriginList = 1

enum OriginProtocolPolicy {
    HTTPONLY = 0;
    MATCHVIEWER = 1;
    HTTPSONLY = 2;
}

message OriginSslProtocols {
    // A list that contains allowed SSL/TLS protocols for this distribution.
    array Items = 1;
    // The number of SSL/TLS protocols that you want to allow CloudFront to use when establishing an HTTPS connection with this origin.
    integer Quantity = 2;
}

message Origins {
    // A complex type that contains origins for this distribution.
    array Items = 1;
    // The number of origins for this distribution.
    integer Quantity = 2;
}

repeated string PathList = 1

message Paths {
    // A complex type that contains a list of the paths that you want to invalidate.
    array Items = 1;
    // The number of objects that you want to invalidate.
    integer Quantity = 2;
}

message PreconditionFailed {
    string Message = 1;
}

enum PriceClass {
    PRICECLASS_100 = 0;
    PRICECLASS_200 = 1;
    PRICECLASS_ALL = 2;
}

message QueryStringCacheKeys {
    // (Optional) A list that contains the query string parameters that you want CloudFront to use as a basis for caching for this cache behavior. If <code>Quantity</code> is 0, you can omit <code>Items</code>.
    array Items = 1;
    // The number of <code>whitelisted</code> query string parameters for this cache behavior.
    integer Quantity = 2;
}

repeated string QueryStringCacheKeysList = 1



message Restrictions {
    GeoRestriction GeoRestriction = 1;
}

message S3Origin {
    // The DNS name of the Amazon S3 origin.
    string DomainName = 1;
    // <p>The CloudFront origin access identity to associate with the RTMP distribution. Use an origin access identity to configure the distribution so that end users can only access objects in an Amazon S3 bucket through CloudFront.</p> <p>If you want end users to be able to access objects using either the CloudFront URL or the Amazon S3 URL, specify an empty <code>OriginAccessIdentity</code> element.</p> <p>To delete the origin access identity from an existing distribution, update the distribution configuration and include an empty <code>OriginAccessIdentity</code> element.</p> <p>To replace the origin access identity, update the distribution configuration and specify the new origin access identity.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html">Using an Origin Access Identity to Restrict Access to Your Amazon S3 Content</a> in the <i>Amazon Amazon CloudFront Developer Guide</i>.</p>
    string OriginAccessIdentity = 2;
}

message S3OriginConfig {
    // <p>The CloudFront origin access identity to associate with the origin. Use an origin access identity to configure the origin so that viewers can <i>only</i> access objects in an Amazon S3 bucket through CloudFront. The format of the value is:</p> <p>origin-access-identity/cloudfront/<i>ID-of-origin-access-identity</i> </p> <p>where <code> <i>ID-of-origin-access-identity</i> </code> is the value that CloudFront returned in the <code>ID</code> element when you created the origin access identity.</p> <p>If you want viewers to be able to access objects using either the CloudFront URL or the Amazon S3 URL, specify an empty <code>OriginAccessIdentity</code> element.</p> <p>To delete the origin access identity from an existing distribution, update the distribution configuration and include an empty <code>OriginAccessIdentity</code> element.</p> <p>To replace the origin access identity, update the distribution configuration and specify the new origin access identity.</p> <p>For more information about the origin access identity, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html">Serving Private Content through CloudFront</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
    string OriginAccessIdentity = 1;
}

enum SSLSupportMethod {
    SNIONLY = 0;
    VIP = 1;
}

message Signer {
    // <p>An AWS account that is included in the <code>TrustedSigners</code> complex type for this RTMP distribution. Valid values include:</p> <ul> <li> <p> <code>self</code>, which is the AWS account used to create the distribution.</p> </li> <li> <p>An AWS account number.</p> </li> </ul>
    string AwsAccountNumber = 1;
    // A complex type that lists the active CloudFront key pairs, if any, that are associated with <code>AwsAccountNumber</code>.
    KeyPairIds KeyPairIds = 2;
}

repeated Signer SignerList = 1

enum SslProtocol {
    SSLV3 = 0;
    TLSV1 = 1;
    TLSV11 = 2;
    TLSV12 = 3;
}

repeated SslProtocol SslProtocolsList = 1

message StreamingDistribution {
    string ARN = 1;
    // <p>A complex type that lists the AWS accounts, if any, that you included in the <code>TrustedSigners</code> complex type for this distribution. These are the accounts that you want to allow to create signed URLs for private content.</p> <p>The <code>Signer</code> complex type lists the AWS account number of the trusted signer or <code>self</code> if the signer is the AWS account that created the distribution. The <code>Signer</code> element also includes the IDs of any active CloudFront key pairs that are associated with the trusted signer's AWS account. If no <code>KeyPairId</code> element appears for a <code>Signer</code>, that signer can't create signed URLs.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html">Serving Private Content through CloudFront</a> in the <i>Amazon CloudFront Developer Guide</i>. </p>
    ActiveTrustedSigners ActiveTrustedSigners = 2;
    // The domain name that corresponds to the streaming distribution. For example: <code>s5c39gqb8ow64r.cloudfront.net</code>.
    string DomainName = 3;
    // The identifier for the RTMP distribution. For example: <code>EGTXBD79EXAMPLE</code>.
    string Id = 4;
    // The date and time that the distribution was last modified.
    string LastModifiedTime = 5;
    // The current status of the RTMP distribution. When the status is <code>Deployed</code>, the distribution's information is propagated to all CloudFront edge locations.
    string Status = 6;
    // The current configuration information for the RTMP distribution.
    StreamingDistributionConfig StreamingDistributionConfig = 7;
}

message StreamingDistributionAlreadyExists {
    string Message = 1;
}

message StreamingDistributionConfig {
    // A complex type that contains information about CNAMEs (alternate domain names), if any, for this streaming distribution.
    Aliases Aliases = 1;
    // A unique number that ensures that the request can't be replayed. If the <code>CallerReference</code> is new (no matter the content of the <code>StreamingDistributionConfig</code> object), a new streaming distribution is created. If the <code>CallerReference</code> is a value that you already sent in a previous request to create a streaming distribution, and the content of the <code>StreamingDistributionConfig</code> is identical to the original request (ignoring white space), the response includes the same information returned to the original request. If the <code>CallerReference</code> is a value that you already sent in a previous request to create a streaming distribution but the content of the <code>StreamingDistributionConfig</code> is different from the original request, CloudFront returns a <code>DistributionAlreadyExists</code> error.
    string CallerReference = 2;
    // Any comments you want to include about the streaming distribution.
    string Comment = 3;
    // Whether the streaming distribution is enabled to accept user requests for content.
    boolean Enabled = 4;
    // A complex type that controls whether access logs are written for the streaming distribution.
    StreamingLoggingConfig Logging = 5;
    // A complex type that contains information about price class for this streaming distribution.
    PriceClass PriceClass = 6;
    // A complex type that contains information about the Amazon S3 bucket from which you want CloudFront to get your media files for distribution.
    S3Origin S3Origin = 7;
    // A complex type that specifies any AWS accounts that you want to permit to create signed URLs for private content. If you want the distribution to use signed URLs, include this element; if you want the distribution to use public URLs, remove this element. For more information, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html">Serving Private Content through CloudFront</a> in the <i>Amazon CloudFront Developer Guide</i>.
    TrustedSigners TrustedSigners = 8;
}

message StreamingDistributionConfigWithTags {
    // A streaming distribution Configuration.
    StreamingDistributionConfig StreamingDistributionConfig = 1;
    // A complex type that contains zero or more <code>Tag</code> elements.
    Tags Tags = 2;
}

message StreamingDistributionList {
    // A flag that indicates whether more streaming distributions remain to be listed. If your results were truncated, you can make a follow-up pagination request using the <code>Marker</code> request parameter to retrieve more distributions in the list.
    boolean IsTruncated = 1;
    // A complex type that contains one <code>StreamingDistributionSummary</code> element for each distribution that was created by the current AWS account.
    array Items = 2;
    // The value you provided for the <code>Marker</code> request parameter.
    string Marker = 3;
    // The value you provided for the <code>MaxItems</code> request parameter.
    integer MaxItems = 4;
    // If <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value you can use for the <code>Marker</code> request parameter to continue listing your RTMP distributions where they left off.
    string NextMarker = 5;
    // The number of streaming distributions that were created by the current AWS account.
    integer Quantity = 6;
}

message StreamingDistributionNotDisabled {
    string Message = 1;
}

message StreamingDistributionSummary {
    //  The ARN (Amazon Resource Name) for the streaming distribution. For example: <code>arn:aws:cloudfront::123456789012:streaming-distribution/EDFDVBD632BHDS5</code>, where <code>123456789012</code> is your AWS account ID.
    string ARN = 1;
    // A complex type that contains information about CNAMEs (alternate domain names), if any, for this streaming distribution.
    Aliases Aliases = 2;
    // The comment originally specified when this distribution was created.
    string Comment = 3;
    // The domain name corresponding to the distribution. For example: <code>d604721fxaaqy9.cloudfront.net</code>.
    string DomainName = 4;
    // Whether the distribution is enabled to accept end user requests for content.
    boolean Enabled = 5;
    // The identifier for the distribution. For example: <code>EDFDVBD632BHDS5</code>.
    string Id = 6;
    // The date and time the distribution was last modified.
    string LastModifiedTime = 7;
    PriceClass PriceClass = 8;
    // A complex type that contains information about the Amazon S3 bucket from which you want CloudFront to get your media files for distribution.
    S3Origin S3Origin = 9;
    //  Indicates the current status of the distribution. When the status is <code>Deployed</code>, the distribution's information is fully propagated throughout the Amazon CloudFront system.
    string Status = 10;
    // A complex type that specifies the AWS accounts, if any, that you want to allow to create signed URLs for private content. If you want to require signed URLs in requests for objects in the target origin that match the <code>PathPattern</code> for this cache behavior, specify <code>true</code> for <code>Enabled</code>, and specify the applicable values for <code>Quantity</code> and <code>Items</code>.If you don't want to require signed URLs in requests for objects that match <code>PathPattern</code>, specify <code>false</code> for <code>Enabled</code> and <code>0</code> for <code>Quantity</code>. Omit <code>Items</code>. To add, change, or remove one or more trusted signers, change <code>Enabled</code> to <code>true</code> (if it's currently <code>false</code>), change <code>Quantity</code> as applicable, and specify all of the trusted signers that you want to include in the updated distribution.
    TrustedSigners TrustedSigners = 11;
}

repeated StreamingDistributionSummary StreamingDistributionSummaryList = 1

message StreamingLoggingConfig {
    // The Amazon S3 bucket to store the access logs in, for example, <code>myawslogbucket.s3.amazonaws.com</code>.
    string Bucket = 1;
    // Specifies whether you want CloudFront to save access logs to an Amazon S3 bucket. If you do not want to enable logging when you create a streaming distribution or if you want to disable logging for an existing streaming distribution, specify <code>false</code> for <code>Enabled</code>, and specify <code>empty Bucket</code> and <code>Prefix</code> elements. If you specify <code>false</code> for <code>Enabled</code> but you specify values for <code>Bucket</code> and <code>Prefix</code>, the values are automatically deleted.
    boolean Enabled = 2;
    // An optional string that you want CloudFront to prefix to the access log <code>filenames</code> for this streaming distribution, for example, <code>myprefix/</code>. If you want to enable logging, but you do not want to specify a prefix, you still must include an empty <code>Prefix</code> element in the <code>Logging</code> element.
    string Prefix = 3;
}

message Tag {
    // <p> A string that contains <code>Tag</code> key.</p> <p>The string length should be between 1 and 128 characters. Valid characters include <code>a-z</code>, <code>A-Z</code>, <code>0-9</code>, space, and the special characters <code>_ - . : / = + @</code>.</p>
    string Key = 1;
    // <p> A string that contains an optional <code>Tag</code> value.</p> <p>The string length should be between 0 and 256 characters. Valid characters include <code>a-z</code>, <code>A-Z</code>, <code>0-9</code>, space, and the special characters <code>_ - . : / = + @</code>.</p>
    string Value = 2;
}



repeated string TagKeyList = 1

message TagKeys {
    //  A complex type that contains <code>Tag</code> key elements.
    array Items = 1;
}

repeated Tag TagList = 1

message TagResourceRequest {
    //  A complex type that contains zero or more <code>Tag</code> elements.
    Tags Tags = 1;
}

message Tags {
    //  A complex type that contains <code>Tag</code> elements.
    array Items = 1;
}

message TooManyCacheBehaviors {
    string Message = 1;
}

message TooManyCertificates {
    string Message = 1;
}

message TooManyCloudFrontOriginAccessIdentities {
    string Message = 1;
}

message TooManyCookieNamesInWhiteList {
    string Message = 1;
}

message TooManyDistributionCNAMEs {
    string Message = 1;
}

message TooManyDistributions {
    string Message = 1;
}

message TooManyDistributionsWithLambdaAssociations {
    string Message = 1;
}

message TooManyHeadersInForwardedValues {
    string Message = 1;
}

message TooManyInvalidationsInProgress {
    string Message = 1;
}

message TooManyLambdaFunctionAssociations {
    string Message = 1;
}

message TooManyOriginCustomHeaders {
    string Message = 1;
}

message TooManyOrigins {
    string Message = 1;
}

message TooManyQueryStringParameters {
    string Message = 1;
}

message TooManyStreamingDistributionCNAMEs {
    string Message = 1;
}

message TooManyStreamingDistributions {
    string Message = 1;
}

message TooManyTrustedSigners {
    string Message = 1;
}

message TrustedSignerDoesNotExist {
    string Message = 1;
}

message TrustedSigners {
    // Specifies whether you want to require viewers to use signed URLs to access the files specified by <code>PathPattern</code> and <code>TargetOriginId</code>.
    boolean Enabled = 1;
    //  <b>Optional</b>: A complex type that contains trusted signers for this cache behavior. If <code>Quantity</code> is <code>0</code>, you can omit <code>Items</code>.
    array Items = 2;
    // The number of trusted signers for this cache behavior.
    integer Quantity = 3;
}

message UntagResourceRequest {
    //  A complex type that contains zero or more <code>Tag</code> key elements.
    TagKeys TagKeys = 1;
}

message UpdateCloudFrontOriginAccessIdentityRequest {
    // The identity's configuration information.
    CloudFrontOriginAccessIdentityConfig CloudFrontOriginAccessIdentityConfig = 1;
}

message UpdateCloudFrontOriginAccessIdentityResult {
    // The origin access identity's information.
    CloudFrontOriginAccessIdentity CloudFrontOriginAccessIdentity = 1;
}

message UpdateDistributionRequest {
    // The distribution's configuration information.
    DistributionConfig DistributionConfig = 1;
}

message UpdateDistributionResult {
    // The distribution's information.
    Distribution Distribution = 1;
}

message UpdateStreamingDistributionRequest {
    // The streaming distribution's configuration information.
    StreamingDistributionConfig StreamingDistributionConfig = 1;
}

message UpdateStreamingDistributionResult {
    // The streaming distribution's information.
    StreamingDistribution StreamingDistribution = 1;
}

message ViewerCertificate {
    string ACMCertificateArn = 1;
    // <p>Include one of these values to specify the following:</p> <ul> <li> <p>Whether you want viewers to use HTTP or HTTPS to request your objects.</p> </li> <li> <p>If you want viewers to use HTTPS, whether you're using an alternate domain name such as example.com or the CloudFront domain name for your distribution, such as <code>d111111abcdef8.cloudfront.net</code>.</p> </li> <li> <p>If you're using an alternate domain name, whether AWS Certificate Manager (ACM) provided the certificate, or you purchased a certificate from a third-party certificate authority and imported it into ACM or uploaded it to the IAM certificate store.</p> </li> </ul> <p>You must specify one (and only one) of the three values. Do not specify <code>false</code> for <code>CloudFrontDefaultCertificate</code>.</p> <p> <b>If you want viewers to use HTTP to request your objects</b>: Specify the following value:</p> <p> <code>&lt;CloudFrontDefaultCertificate&gt;true&lt;CloudFrontDefaultCertificate&gt;</code> </p> <p>In addition, specify <code>allow-all</code> for <code>ViewerProtocolPolicy</code> for all of your cache behaviors.</p> <p> <b>If you want viewers to use HTTPS to request your objects</b>: Choose the type of certificate that you want to use based on whether you're using an alternate domain name for your objects or the CloudFront domain name:</p> <ul> <li> <p> <b>If you're using an alternate domain name, such as example.com</b>: Specify one of the following values, depending on whether ACM provided your certificate or you purchased your certificate from third-party certificate authority:</p> <ul> <li> <p> <code>&lt;ACMCertificateArn&gt;ARN for ACM SSL/TLS certificate&lt;ACMCertificateArn&gt;</code> where ARN for ACM SSL/TLS certificate is the ARN for the ACM SSL/TLS certificate that you want to use for this distribution.</p> </li> <li> <p> <code>&lt;IAMCertificateId&gt;IAM certificate ID&lt;IAMCertificateId&gt;</code> where IAM certificate ID is the ID that IAM returned when you added the certificate to the IAM certificate store.</p> </li> </ul> <p>If you specify <code>ACMCertificateArn</code> or <code>IAMCertificateId</code>, you must also specify a value for <code>SSLSupportMethod</code>.</p> <p>If you choose to use an ACM certificate or a certificate in the IAM certificate store, we recommend that you use only an alternate domain name in your object URLs (<code>https://example.com/logo.jpg</code>). If you use the domain name that is associated with your CloudFront distribution (<code>https://d111111abcdef8.cloudfront.net/logo.jpg</code>) and the viewer supports <code>SNI</code>, then CloudFront behaves normally. However, if the browser does not support SNI, the user's experience depends on the value that you choose for <code>SSLSupportMethod</code>:</p> <ul> <li> <p> <code>vip</code>: The viewer displays a warning because there is a mismatch between the CloudFront domain name and the domain name in your SSL/TLS certificate.</p> </li> <li> <p> <code>sni-only</code>: CloudFront drops the connection with the browser without returning the object.</p> </li> </ul> </li> <li> <p> <b>If you're using the CloudFront domain name for your distribution, such as <code>d111111abcdef8.cloudfront.net</code> </b>: Specify the following value:</p> <p> <code> &lt;CloudFrontDefaultCertificate&gt;true&lt;CloudFrontDefaultCertificate&gt; </code> </p> <p>If you want viewers to use HTTPS, you must also specify one of the following values in your cache behaviors:</p> <ul> <li> <p> <code> &lt;ViewerProtocolPolicy&gt;https-only&lt;ViewerProtocolPolicy&gt; </code> </p> </li> <li> <p> <code> &lt;ViewerProtocolPolicy&gt;redirect-to-https&lt;ViewerProtocolPolicy&gt; </code> </p> </li> </ul> <p>You can also optionally require that CloudFront use HTTPS to communicate with your origin by specifying one of the following values for the applicable origins:</p> <ul> <li> <p> <code> &lt;OriginProtocolPolicy&gt;https-only&lt;OriginProtocolPolicy&gt; </code> </p> </li> <li> <p> <code> &lt;OriginProtocolPolicy&gt;match-viewer&lt;OriginProtocolPolicy&gt; </code> </p> </li> </ul> <p>For more information, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/SecureConnections.html#CNAMEsAndHTTPS">Using Alternate Domain Names and HTTPS</a> in the <i>Amazon CloudFront Developer Guide</i>.</p> </li> </ul>
    string Certificate = 2;
    // <note> <p>This field is deprecated. You can use one of the following: <code>[ACMCertificateArn</code>, <code>IAMCertificateId</code>, or <code>CloudFrontDefaultCertificate]</code>.</p> </note>
    CertificateSource CertificateSource = 3;
    boolean CloudFrontDefaultCertificate = 4;
    string IAMCertificateId = 5;
    // <p>Specify the minimum version of the SSL/TLS protocol that you want CloudFront to use for HTTPS connections between viewers and CloudFront: <code>SSLv3</code> or <code>TLSv1</code>. CloudFront serves your objects only to viewers that support SSL/TLS version that you specify and later versions. The <code>TLSv1</code> protocol is more secure, so we recommend that you specify <code>SSLv3</code> only if your users are using browsers or devices that don't support <code>TLSv1</code>. Note the following:</p> <ul> <li> <p>If you specify &lt;CloudFrontDefaultCertificate&gt;true&lt;CloudFrontDefaultCertificate&gt;, the minimum SSL protocol version is <code>TLSv1</code> and can't be changed.</p> </li> <li> <p>If you're using a custom certificate (if you specify a value for <code>ACMCertificateArn</code> or for <code>IAMCertificateId</code>) and if you're using SNI (if you specify <code>sni-only</code> for <code>SSLSupportMethod</code>), you must specify <code>TLSv1</code> for <code>MinimumProtocolVersion</code>.</p> </li> </ul>
    MinimumProtocolVersion MinimumProtocolVersion = 6;
    // <p>If you specify a value for <code>ACMCertificateArn</code> or for <code>IAMCertificateId</code>, you must also specify how you want CloudFront to serve HTTPS requests: using a method that works for all clients or one that works for most clients:</p> <ul> <li> <p> <code>vip</code>: CloudFront uses dedicated IP addresses for your content and can respond to HTTPS requests from any viewer. However, you will incur additional monthly charges.</p> </li> <li> <p> <code>sni-only</code>: CloudFront can respond to HTTPS requests from viewers that support Server Name Indication (SNI). All modern browsers support SNI, but some browsers still in use don't support SNI. If some of your users' browsers don't support SNI, we recommend that you do one of the following:</p> <ul> <li> <p>Use the <code>vip</code> option (dedicated IP addresses) instead of <code>sni-only</code>.</p> </li> <li> <p>Use the CloudFront SSL/TLS certificate instead of a custom certificate. This requires that you use the CloudFront domain name of your distribution in the URLs for your objects, for example, <code>https://d111111abcdef8.cloudfront.net/logo.png</code>.</p> </li> <li> <p>If you can control which browser your users use, upgrade the browser to one that supports SNI.</p> </li> <li> <p>Use HTTP instead of HTTPS.</p> </li> </ul> </li> </ul> <p>Do not specify a value for <code>SSLSupportMethod</code> if you specified <code>&lt;CloudFrontDefaultCertificate&gt;true&lt;CloudFrontDefaultCertificate&gt;</code>.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/SecureConnections.html#CNAMEsAndHTTPS.html">Using Alternate Domain Names and HTTPS</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
    SSLSupportMethod SSLSupportMethod = 7;
}

enum ViewerProtocolPolicy {
    ALLOWALL = 0;
    HTTPSONLY = 1;
    REDIRECTTOHTTPS = 2;
}

service AmazonCloudFrontService {
    // List distributions.
    rpc Get20170325Distribution(Get20170325DistributionRequest) returns (ListDistributionsResult) {
      option (google.api.http) = {
        get: "//2017-03-25/distribution"
        body: "body"
      };
    }
    // Lists invalidation batches.
    rpc Get20170325DistributionDistributionIdInvalidation(Get20170325DistributionDistributionIdInvalidationRequest) returns (ListInvalidationsResult) {
      option (google.api.http) = {
        get: "//2017-03-25/distribution/{DistributionId}/invalidation"
        body: "body"
      };
    }
    // Get the information about an invalidation.
    rpc Get20170325DistributionDistributionIdInvalidationId(Get20170325DistributionDistributionIdInvalidationIdRequest) returns (GetInvalidationResult) {
      option (google.api.http) = {
        get: "//2017-03-25/distribution/{DistributionId}/invalidation/{Id}"
        body: "body"
      };
    }
    // Get the information about a distribution.
    rpc Get20170325DistributionId(Get20170325DistributionIdRequest) returns (GetDistributionResult) {
      option (google.api.http) = {
        get: "//2017-03-25/distribution/{Id}"
        body: "body"
      };
    }
    // <p>Updates the configuration for a web distribution. Perform the following steps.</p> <p>For information about updating a distribution using the CloudFront console, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-creating-console.html">Creating or Updating a Web Distribution Using the CloudFront Console </a> in the <i>Amazon CloudFront Developer Guide</i>.</p> <p> <b>To update a web distribution using the CloudFront API</b> </p> <ol> <li> <p>Submit a <a>GetDistributionConfig</a> request to get the current configuration and an <code>Etag</code> header for the distribution.</p> <note> <p>If you update the distribution again, you need to get a new <code>Etag</code> header.</p> </note> </li> <li> <p>Update the XML document that was returned in the response to your <code>GetDistributionConfig</code> request to include the desired changes. You can't change the value of <code>CallerReference</code>. If you try to change this value, CloudFront returns an <code>IllegalUpdate</code> error.</p> <important> <p>The new configuration replaces the existing configuration; the values that you specify in an <code>UpdateDistribution</code> request are not merged into the existing configuration. When you add, delete, or replace values in an element that allows multiple values (for example, <code>CNAME</code>), you must specify all of the values that you want to appear in the updated distribution. In addition, you must update the corresponding <code>Quantity</code> element.</p> </important> </li> <li> <p>Submit an <code>UpdateDistribution</code> request to update the configuration for your distribution:</p> <ul> <li> <p>In the request body, include the XML document that you updated in Step 2. The request body must include an XML document with a <code>DistributionConfig</code> element.</p> </li> <li> <p>Set the value of the HTTP <code>If-Match</code> header to the value of the <code>ETag</code> header that CloudFront returned when you submitted the <code>GetDistributionConfig</code> request in Step 1.</p> </li> </ul> </li> <li> <p>Review the response to the <code>UpdateDistribution</code> request to confirm that the configuration was successfully updated.</p> </li> <li> <p>Optional: Submit a <a>GetDistribution</a> request to confirm that your changes have propagated. When propagation is complete, the value of <code>Status</code> is <code>Deployed</code>.</p> <important> <p>Beginning with the 2012-05-05 version of the CloudFront API, we made substantial changes to the format of the XML document that you include in the request body when you create or update a distribution. With previous versions of the API, we discovered that it was too easy to accidentally delete one or more values for an element that accepts multiple values, for example, CNAMEs and trusted signers. Our changes for the 2012-05-05 release are intended to prevent these accidental deletions and to notify you when there's a mismatch between the number of values you say you're specifying in the <code>Quantity</code> element and the number of values you're actually specifying.</p> </important> </li> </ol>
    rpc Put20170325DistributionIdConfig(Put20170325DistributionIdConfigRequest) returns (UpdateDistributionResult) {
      option (google.api.http) = {
        put: "//2017-03-25/distribution/{Id}/config"
        body: "body"
      };
    }
    // Create a new distribution with tags.
    rpc Post20170325Distribution(Post20170325DistributionRequest) returns (CreateDistributionWithTagsResult) {
      option (google.api.http) = {
        post: "//2017-03-25/distribution?WithTags"
        body: "body"
      };
    }
    // List the distributions that are associated with a specified AWS WAF web ACL.
    rpc Get20170325DistributionsByWebACLIdWebACLId(Get20170325DistributionsByWebACLIdWebACLIdRequest) returns (ListDistributionsByWebACLIdResult) {
      option (google.api.http) = {
        get: "//2017-03-25/distributionsByWebACLId/{WebACLId}"
        body: "body"
      };
    }
    // Lists origin access identities.
    rpc Get20170325OriginAccessIdentityCloudfront(Get20170325OriginAccessIdentityCloudfrontRequest) returns (ListCloudFrontOriginAccessIdentitiesResult) {
      option (google.api.http) = {
        get: "//2017-03-25/origin-access-identity/cloudfront"
        body: "body"
      };
    }
    // Get the information about an origin access identity.
    rpc Get20170325OriginAccessIdentityCloudfrontId(Get20170325OriginAccessIdentityCloudfrontIdRequest) returns (GetCloudFrontOriginAccessIdentityResult) {
      option (google.api.http) = {
        get: "//2017-03-25/origin-access-identity/cloudfront/{Id}"
        body: "body"
      };
    }
    // Update an origin access identity.
    rpc Put20170325OriginAccessIdentityCloudfrontIdConfig(Put20170325OriginAccessIdentityCloudfrontIdConfigRequest) returns (UpdateCloudFrontOriginAccessIdentityResult) {
      option (google.api.http) = {
        put: "//2017-03-25/origin-access-identity/cloudfront/{Id}/config"
        body: "body"
      };
    }
    // List streaming distributions.
    rpc Get20170325StreamingDistribution(Get20170325StreamingDistributionRequest) returns (ListStreamingDistributionsResult) {
      option (google.api.http) = {
        get: "//2017-03-25/streaming-distribution"
        body: "body"
      };
    }
    // Gets information about a specified RTMP distribution, including the distribution configuration.
    rpc Get20170325StreamingDistributionId(Get20170325StreamingDistributionIdRequest) returns (GetStreamingDistributionResult) {
      option (google.api.http) = {
        get: "//2017-03-25/streaming-distribution/{Id}"
        body: "body"
      };
    }
    // Update a streaming distribution.
    rpc Put20170325StreamingDistributionIdConfig(Put20170325StreamingDistributionIdConfigRequest) returns (UpdateStreamingDistributionResult) {
      option (google.api.http) = {
        put: "//2017-03-25/streaming-distribution/{Id}/config"
        body: "body"
      };
    }
    // Create a new streaming distribution with tags.
    rpc Post20170325StreamingDistribution(Post20170325StreamingDistributionRequest) returns (CreateStreamingDistributionWithTagsResult) {
      option (google.api.http) = {
        post: "//2017-03-25/streaming-distribution?WithTags"
        body: "body"
      };
    }
    // List tags for a CloudFront resource.
    rpc Get20170325Tagging(Get20170325TaggingRequest) returns (ListTagsForResourceResult) {
      option (google.api.http) = {
        get: "//2017-03-25/tagging"
        body: "body"
      };
    }
    // Add tags to a CloudFront resource.
    rpc Post20170325Tagging(Post20170325TaggingRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//2017-03-25/tagging?Operation=Tag"
        body: "body"
      };
    }
    // Remove tags from a CloudFront resource.
    rpc Post20170325Tagging(Post20170325TaggingRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//2017-03-25/tagging?Operation=Untag"
        body: "body"
      };
    }
}

syntax = "proto3";

import "google/api/annotations.proto";

package amazonroute53;

message Get20130401ChangeIdRequest {
    string Action = 1;
    string Id = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    GetChangeRequest body = 11;
}

message Get20130401CheckeriprangesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetCheckerIpRangesRequest body = 10;
}

message Get20130401DelegationsetRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListReusableDelegationSetsRequest body = 10;
}

message Get20130401DelegationsetIdRequest {
    string Action = 1;
    string Id = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    GetReusableDelegationSetRequest body = 11;
}

message Get20130401GeolocationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetGeoLocationRequest body = 10;
}

message Get20130401GeolocationsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListGeoLocationsRequest body = 10;
}

message Get20130401HealthcheckRequest {
    string Action = 1;
    // Pagination token
    string Marker = 2;
    // Pagination limit
    string MaxItems = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    ListHealthChecksRequest body = 12;
}

message Post20130401HealthcheckHealthCheckIdRequest {
    string Action = 1;
    string HealthCheckId = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    UpdateHealthCheckRequest body = 11;
}

message Get20130401HealthcheckHealthCheckIdLastfailurereasonRequest {
    string Action = 1;
    string HealthCheckId = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    GetHealthCheckLastFailureReasonRequest body = 11;
}

message Get20130401HealthcheckHealthCheckIdStatusRequest {
    string Action = 1;
    string HealthCheckId = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    GetHealthCheckStatusRequest body = 11;
}

message Get20130401HealthcheckcountRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetHealthCheckCountRequest body = 10;
}

message Get20130401HostedzoneRequest {
    string Action = 1;
    // Pagination token
    string Marker = 2;
    // Pagination limit
    string MaxItems = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    ListHostedZonesRequest body = 12;
}

message Post20130401HostedzoneIdRequest {
    string Action = 1;
    string Id = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    UpdateHostedZoneCommentRequest body = 11;
}

message Post20130401HostedzoneIdAssociatevpcRequest {
    string Action = 1;
    string Id = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    AssociateVPCWithHostedZoneRequest body = 11;
}

message Get20130401HostedzoneIdAuthorizevpcassociationRequest {
    string Action = 1;
    string Id = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    ListVPCAssociationAuthorizationsRequest body = 11;
}

message Post20130401HostedzoneIdDeauthorizevpcassociationRequest {
    string Action = 1;
    string Id = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    DeleteVPCAssociationAuthorizationRequest body = 11;
}

message Post20130401HostedzoneIdDisassociatevpcRequest {
    string Action = 1;
    string Id = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    DisassociateVPCFromHostedZoneRequest body = 11;
}

message Get20130401HostedzoneIdRrsetRequest {
    string Action = 1;
    string Id = 2;
    // Pagination limit
    string MaxItems = 3;
    // Pagination token
    string StartRecordIdentifier = 4;
    // Pagination token
    string StartRecordName = 5;
    // Pagination token
    string StartRecordType = 6;
    string Version = 7;
    string X_Amz_Algorithm = 8;
    string X_Amz_Content_Sha256 = 9;
    string X_Amz_Credential = 10;
    string X_Amz_Date = 11;
    string X_Amz_Security_Token = 12;
    string X_Amz_Signature = 13;
    string X_Amz_SignedHeaders = 14;
    ListResourceRecordSetsRequest body = 15;
}

message Post20130401HostedzoneIdRrsetRequest {
    string Action = 1;
    string Id = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    ChangeResourceRecordSetsRequest body = 11;
}

message Get20130401HostedzonecountRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetHostedZoneCountRequest body = 10;
}

message Get20130401HostedzonesbynameRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListHostedZonesByNameRequest body = 10;
}

message Get20130401QueryloggingconfigRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListQueryLoggingConfigsRequest body = 10;
}

message Get20130401QueryloggingconfigIdRequest {
    string Action = 1;
    string Id = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    GetQueryLoggingConfigRequest body = 11;
}

message Post20130401TagsResourceTypeRequest {
    string Action = 1;
    string ResourceType = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    ListTagsForResourcesRequest body = 11;
}

message Get20130401TagsResourceTypeResourceIdRequest {
    string Action = 1;
    string ResourceId = 2;
    string ResourceType = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    ListTagsForResourceRequest body = 12;
}

message Get20130401TestdnsanswerRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    TestDNSAnswerRequest body = 10;
}

message Get20130401TrafficpoliciesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListTrafficPoliciesRequest body = 10;
}

message Get20130401TrafficpoliciesIdVersionsRequest {
    string Action = 1;
    string Id = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    ListTrafficPolicyVersionsRequest body = 11;
}

message Post20130401TrafficpolicyRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateTrafficPolicyRequest body = 10;
}

message Post20130401TrafficpolicyIdRequest {
    string Action = 1;
    string Id = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    CreateTrafficPolicyVersionRequest body = 11;
}

message Post20130401TrafficpolicyIdVersionRequest {
    string Action = 1;
    string Id = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    UpdateTrafficPolicyCommentRequest body = 11;
}

message Post20130401TrafficpolicyinstanceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateTrafficPolicyInstanceRequest body = 10;
}

message Post20130401TrafficpolicyinstanceIdRequest {
    string Action = 1;
    string Id = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    UpdateTrafficPolicyInstanceRequest body = 11;
}

message Get20130401TrafficpolicyinstancecountRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetTrafficPolicyInstanceCountRequest body = 10;
}

message Get20130401TrafficpolicyinstancesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListTrafficPolicyInstancesRequest body = 10;
}

message Get20130401TrafficpolicyinstancesHostedzoneRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListTrafficPolicyInstancesByHostedZoneRequest body = 10;
}

message Get20130401TrafficpolicyinstancesTrafficpolicyRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListTrafficPolicyInstancesByPolicyRequest body = 10;
}

message AlarmIdentifier {
    // The name of the CloudWatch alarm that you want Amazon Route 53 health checkers to use to determine whether this health check is healthy.
    string Name = 1;
    // <p>A complex type that identifies the CloudWatch alarm that you want Amazon Route 53 health checkers to use to determine whether this health check is healthy.</p> <p>For the current list of CloudWatch regions, see <a href="http://docs.aws.amazon.com/general/latest/gr/rande.html#cw_region">Amazon CloudWatch</a> in the <i>AWS Regions and Endpoints</i> chapter of the <i>Amazon Web Services General Reference</i>.</p>
    CloudWatchRegion Region = 2;
}

message AliasTarget {
    // <p> <i>Alias resource record sets only:</i> The value that you specify depends on where you want to route queries:</p> <dl> <dt>CloudFront distribution</dt> <dd> <p>Specify the domain name that CloudFront assigned when you created your distribution.</p> <p>Your CloudFront distribution must include an alternate domain name that matches the name of the resource record set. For example, if the name of the resource record set is <i>acme.example.com</i>, your CloudFront distribution must include <i>acme.example.com</i> as one of the alternate domain names. For more information, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/CNAMEs.html">Using Alternate Domain Names (CNAMEs)</a> in the <i>Amazon CloudFront Developer Guide</i>.</p> </dd> <dt>Elastic Beanstalk environment</dt> <dd> <p>Specify the <code>CNAME</code> attribute for the environment. (The environment must have a regionalized domain name.) You can use the following methods to get the value of the CNAME attribute:</p> <ul> <li> <p> <i>AWS Management Console</i>: For information about how to get the value by using the console, see <a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/customdomains.html">Using Custom Domains with AWS Elastic Beanstalk</a> in the <i>AWS Elastic Beanstalk Developer Guide</i>.</p> </li> <li> <p> <i>Elastic Beanstalk API</i>: Use the <code>DescribeEnvironments</code> action to get the value of the <code>CNAME</code> attribute. For more information, see <a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/api/API_DescribeEnvironments.html">DescribeEnvironments</a> in the <i>AWS Elastic Beanstalk API Reference</i>.</p> </li> <li> <p> <i>AWS CLI</i>: Use the <code>describe-environments</code> command to get the value of the <code>CNAME</code> attribute. For more information, see <a href="http://docs.aws.amazon.com/cli/latest/reference/elasticbeanstalk/describe-environments.html">describe-environments</a> in the <i>AWS Command Line Interface Reference</i>.</p> </li> </ul> </dd> <dt>ELB load balancer</dt> <dd> <p>Specify the DNS name that is associated with the load balancer. Get the DNS name by using the AWS Management Console, the ELB API, or the AWS CLI. </p> <ul> <li> <p> <b>AWS Management Console</b>: Go to the EC2 page, choose <b>Load Balancers</b> in the navigation pane, choose the load balancer, choose the <b>Description</b> tab, and get the value of the <b>DNS name</b> field. (If you're routing traffic to a Classic Load Balancer, get the value that begins with <b>dualstack</b>.) </p> </li> <li> <p> <b>Elastic Load Balancing API</b>: Use <code>DescribeLoadBalancers</code> to get the value of <code>DNSName</code>. For more information, see the applicable guide:</p> <ul> <li> <p>Classic Load Balancers: <a href="http://docs.aws.amazon.com/elasticloadbalancing/2012-06-01/APIReference/API_DescribeLoadBalancers.html">DescribeLoadBalancers</a> </p> </li> <li> <p>Application and Network Load Balancers: <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html">DescribeLoadBalancers</a> </p> </li> </ul> </li> <li> <p> <b>AWS CLI</b>: Use <code>describe-load-balancers</code> to get the value of <code>DNSName</code>. For more information, see the applicable guide:</p> <ul> <li> <p>Classic Load Balancers: <a href="http://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html">describe-load-balancers</a> </p> </li> <li> <p>Application and Network Load Balancers: <a href="http://docs.aws.amazon.com/cli/latest/reference/elbv2/describe-load-balancers.html">describe-load-balancers</a> </p> </li> </ul> </li> </ul> </dd> <dt>Amazon S3 bucket that is configured as a static website</dt> <dd> <p>Specify the domain name of the Amazon S3 website endpoint in which you created the bucket, for example, <code>s3-website-us-east-2.amazonaws.com</code>. For more information about valid values, see the table <a href="http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region">Amazon Simple Storage Service (S3) Website Endpoints</a> in the <i>Amazon Web Services General Reference</i>. For more information about using S3 buckets for websites, see <a href="http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/getting-started.html">Getting Started with Amazon Route 53</a> in the <i>Amazon Route 53 Developer Guide.</i> </p> </dd> <dt>Another Amazon Route 53 resource record set</dt> <dd> <p>Specify the value of the <code>Name</code> element for a resource record set in the current hosted zone.</p> </dd> </dl>
    string DNSName = 1;
    // <p> <i>Applies only to alias, failover alias, geolocation alias, latency alias, and weighted alias resource record sets:</i> When <code>EvaluateTargetHealth</code> is <code>true</code>, an alias resource record set inherits the health of the referenced AWS resource, such as an ELB load balancer, or the referenced resource record set.</p> <p>Note the following:</p> <ul> <li> <p>You can't set <code>EvaluateTargetHealth</code> to <code>true</code> when the alias target is a CloudFront distribution.</p> </li> <li> <p>If the AWS resource that you specify in <code>AliasTarget</code> is a resource record set or a group of resource record sets (for example, a group of weighted resource record sets), but it is not another alias resource record set, we recommend that you associate a health check with all of the resource record sets in the alias target. For more information, see <a href="http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-complex-configs.html#dns-failover-complex-configs-hc-omitting">What Happens When You Omit Health Checks?</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> </li> <li> <p>If you specify an Elastic Beanstalk environment in <code>HostedZoneId</code> and <code>DNSName</code>, and if the environment contains an ELB load balancer, Elastic Load Balancing routes queries only to the healthy Amazon EC2 instances that are registered with the load balancer. (An environment automatically contains an ELB load balancer if it includes more than one EC2 instance.) If you set <code>EvaluateTargetHealth</code> to <code>true</code> and either no EC2 instances are healthy or the load balancer itself is unhealthy, Amazon Route 53 routes queries to other available resources that are healthy, if any.</p> <p>If the environment contains a single EC2 instance, there are no special requirements.</p> </li> <li> <p>If you specify an ELB load balancer in <code> <a>AliasTarget</a> </code>, ELB routes queries only to the healthy EC2 instances that are registered with the load balancer. If no EC2 instances are healthy or if the load balancer itself is unhealthy, and if <code>EvaluateTargetHealth</code> is true for the corresponding alias resource record set, Amazon Route 53 routes queries to other resources. When you create a load balancer, you configure settings for ELB health checks; they're not Amazon Route 53 health checks, but they perform a similar function. Do not create Amazon Route 53 health checks for the EC2 instances that you register with an ELB load balancer.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-complex-configs.html">How Health Checks Work in More Complex Amazon Route 53 Configurations</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> </li> <li> <p>We recommend that you set <code>EvaluateTargetHealth</code> to true only when you have enough idle capacity to handle the failure of one or more endpoints.</p> </li> </ul> <p>For more information and examples, see <a href="http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover.html">Amazon Route 53 Health Checks and DNS Failover</a> in the <i>Amazon Route 53 Developer Guide</i>.</p>
    boolean EvaluateTargetHealth = 2;
    // <p> <i>Alias resource records sets only</i>: The value used depends on where you want to route traffic:</p> <dl> <dt>CloudFront distribution</dt> <dd> <p>Specify <code>Z2FDTNDATAQYW2</code>.</p> <note> <p>Alias resource record sets for CloudFront can't be created in a private zone.</p> </note> </dd> <dt>Elastic Beanstalk environment</dt> <dd> <p>Specify the hosted zone ID for the region in which you created the environment. The environment must have a regionalized subdomain. For a list of regions and the corresponding hosted zone IDs, see <a href="http://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region">AWS Elastic Beanstalk</a> in the "AWS Regions and Endpoints" chapter of the <i>Amazon Web Services General Reference</i>.</p> </dd> <dt>ELB load balancer</dt> <dd> <p>Specify the value of the hosted zone ID for the load balancer. Use the following methods to get the hosted zone ID:</p> <ul> <li> <p> <a href="http://docs.aws.amazon.com/general/latest/gr/rande.html#elb_region">Elastic Load Balancing</a> table in the "AWS Regions and Endpoints" chapter of the <i>Amazon Web Services General Reference</i>: Use the value that corresponds with the region that you created your load balancer in. Note that there are separate columns for Application and Classic Load Balancers and for Network Load Balancers.</p> </li> <li> <p> <b>AWS Management Console</b>: Go to the Amazon EC2 page, choose <b>Load Balancers</b> in the navigation pane, select the load balancer, and get the value of the <b>Hosted zone</b> field on the <b>Description</b> tab.</p> </li> <li> <p> <b>Elastic Load Balancing API</b>: Use <code>DescribeLoadBalancers</code> to get the value of <code>CanonicalHostedZoneNameId</code>. For more information, see the applicable guide:</p> <ul> <li> <p>Classic Load Balancers: <a href="http://docs.aws.amazon.com/elasticloadbalancing/2012-06-01/APIReference/API_DescribeLoadBalancers.html">DescribeLoadBalancers</a> </p> </li> <li> <p>Application and Network Load Balancers: <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html">DescribeLoadBalancers</a> </p> </li> </ul> </li> <li> <p> <b>AWS CLI</b>: Use <code>describe-load-balancers</code> to get the value of <code>CanonicalHostedZoneNameID</code> (for Classic Load Balancers) or <code>CanonicalHostedZoneNameID</code> (for Application and Network Load Balancers). For more information, see the applicable guide:</p> <ul> <li> <p>Classic Load Balancers: <a href="http://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html">describe-load-balancers</a> </p> </li> <li> <p>Application and Network Load Balancers: <a href="http://docs.aws.amazon.com/cli/latest/reference/elbv2/describe-load-balancers.html">describe-load-balancers</a> </p> </li> </ul> </li> </ul> </dd> <dt>An Amazon S3 bucket configured as a static website</dt> <dd> <p>Specify the hosted zone ID for the region that you created the bucket in. For more information about valid values, see the <a href="http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region">Amazon Simple Storage Service Website Endpoints</a> table in the "AWS Regions and Endpoints" chapter of the <i>Amazon Web Services General Reference</i>.</p> </dd> <dt>Another Amazon Route 53 resource record set in your hosted zone</dt> <dd> <p>Specify the hosted zone ID of your hosted zone. (An alias resource record set can't reference a resource record set in a different hosted zone.)</p> </dd> </dl>
    string HostedZoneId = 3;
}

message AssociateVPCWithHostedZoneRequest {
    //  <i>Optional:</i> A comment about the association request.
    string Comment = 1;
    // A complex type that contains information about the VPC that you want to associate with a private hosted zone.
    VPC VPC = 2;
}

message AssociateVPCWithHostedZoneResponse {
    // A complex type that describes the changes made to your hosted zone.
    ChangeInfo ChangeInfo = 1;
}

message Change {
    // <p>The action to perform:</p> <ul> <li> <p> <code>CREATE</code>: Creates a resource record set that has the specified values.</p> </li> <li> <p> <code>DELETE</code>: Deletes a existing resource record set.</p> <important> <p>To delete the resource record set that is associated with a traffic policy instance, use <code> <a>DeleteTrafficPolicyInstance</a> </code>. Amazon Route 53 will delete the resource record set automatically. If you delete the resource record set by using <code>ChangeResourceRecordSets</code>, Amazon Route 53 doesn't automatically delete the traffic policy instance, and you'll continue to be charged for it even though it's no longer in use. </p> </important> </li> <li> <p> <code>UPSERT</code>: If a resource record set doesn't already exist, Amazon Route 53 creates it. If a resource record set does exist, Amazon Route 53 updates it with the values in the request.</p> </li> </ul> <p>The values that you need to include in the request depend on the type of resource record set that you're creating, deleting, or updating:</p> <p> <b>Basic resource record sets (excluding alias, failover, geolocation, latency, and weighted resource record sets)</b> </p> <ul> <li> <p> <code>Name</code> </p> </li> <li> <p> <code>Type</code> </p> </li> <li> <p> <code>TTL</code> </p> </li> </ul> <p> <b>Failover, geolocation, latency, or weighted resource record sets (excluding alias resource record sets)</b> </p> <ul> <li> <p> <code>Name</code> </p> </li> <li> <p> <code>Type</code> </p> </li> <li> <p> <code>TTL</code> </p> </li> <li> <p> <code>SetIdentifier</code> </p> </li> </ul> <p> <b>Alias resource record sets (including failover alias, geolocation alias, latency alias, and weighted alias resource record sets)</b> </p> <ul> <li> <p> <code>Name</code> </p> </li> <li> <p> <code>Type</code> </p> </li> <li> <p> <code>AliasTarget</code> (includes <code>DNSName</code>, <code>EvaluateTargetHealth</code>, and <code>HostedZoneId</code>)</p> </li> <li> <p> <code>SetIdentifier</code> (for failover, geolocation, latency, and weighted resource record sets)</p> </li> </ul>
    ChangeAction Action = 1;
    // Information about the resource record set to create, delete, or update.
    ResourceRecordSet ResourceRecordSet = 2;
}

enum ChangeAction {
    CREATE = 0;
    DELETE = 1;
    UPSERT = 2;
}

message ChangeBatch {
    // Information about the changes to make to the record sets.
    array Changes = 1;
    //  <i>Optional:</i> Any comments you want to include about a change batch request.
    string Comment = 2;
}

message ChangeInfo {
    // <p>A complex type that describes change information about changes made to your hosted zone.</p> <p>This element contains an ID that you use when performing a <a>GetChange</a> action to get detailed information about the change.</p>
    string Comment = 1;
    // The ID of the request.
    string Id = 2;
    // The current state of the request. <code>PENDING</code> indicates that this request has not yet been applied to all Amazon Route 53 DNS servers.
    ChangeStatus Status = 3;
    // The date and time that the change request was submitted in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601 format</a> and Coordinated Universal Time (UTC). For example, the value <code>2017-03-27T17:48:16.751Z</code> represents March 27, 2017 at 17:48:16.751 UTC.
    string SubmittedAt = 4;
}

message ChangeResourceRecordSetsRequest {
    // A complex type that contains an optional comment and the <code>Changes</code> element.
    ChangeBatch ChangeBatch = 1;
}

message ChangeResourceRecordSetsResponse {
    // <p>A complex type that contains information about changes made to your hosted zone.</p> <p>This element contains an ID that you use when performing a <a>GetChange</a> action to get detailed information about the change.</p>
    ChangeInfo ChangeInfo = 1;
}

enum ChangeStatu {
    PENDING = 0;
    INSYNC = 1;
}

message ChangeTagsForResourceRequest {
    // <p>A complex type that contains a list of the tags that you want to add to the specified health check or hosted zone and/or the tags that you want to edit <code>Value</code> for.</p> <p>You can add a maximum of 10 tags to a health check or a hosted zone.</p>
    array AddTags = 1;
    // A complex type that contains a list of the tags that you want to delete from the specified health check or hosted zone. You can specify up to 10 keys.
    array RemoveTagKeys = 2;
}

message ChangeTagsForResourceResponse {
}

repeated Change Changes = 1

repeated string CheckerIpRanges = 1

repeated string ChildHealthCheckList = 1

message CloudWatchAlarmConfiguration {
    // For the metric that the CloudWatch alarm is associated with, the arithmetic operation that is used for the comparison.
    ComparisonOperator ComparisonOperator = 1;
    // For the metric that the CloudWatch alarm is associated with, a complex type that contains information about the dimensions for the metric. For information, see <a href="http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html">Amazon CloudWatch Namespaces, Dimensions, and Metrics Reference</a> in the <i>Amazon CloudWatch User Guide</i>.
    array Dimensions = 2;
    // For the metric that the CloudWatch alarm is associated with, the number of periods that the metric is compared to the threshold.
    integer EvaluationPeriods = 3;
    // The name of the CloudWatch metric that the alarm is associated with.
    string MetricName = 4;
    // The namespace of the metric that the alarm is associated with. For more information, see <a href="http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html">Amazon CloudWatch Namespaces, Dimensions, and Metrics Reference</a> in the <i>Amazon CloudWatch User Guide</i>.
    string Namespace = 5;
    // For the metric that the CloudWatch alarm is associated with, the duration of one evaluation period in seconds.
    integer Period = 6;
    // For the metric that the CloudWatch alarm is associated with, the statistic that is applied to the metric.
    Statistic Statistic = 7;
    // For the metric that the CloudWatch alarm is associated with, the value the metric is compared with.
    number Threshold = 8;
}

enum CloudWatchRegion {
    USEAST1 = 0;
    USEAST2 = 1;
    USWEST1 = 2;
    USWEST2 = 3;
    CACENTRAL1 = 4;
    EUCENTRAL1 = 5;
    EUWEST1 = 6;
    EUWEST2 = 7;
    APSOUTH1 = 8;
    APSOUTHEAST1 = 9;
    APSOUTHEAST2 = 10;
    APNORTHEAST1 = 11;
    APNORTHEAST2 = 12;
    SAEAST1 = 13;
}

enum ComparisonOperator {
    GREATERTHANOREQUALTOTHRESHOLD = 0;
    GREATERTHANTHRESHOLD = 1;
    LESSTHANTHRESHOLD = 2;
    LESSTHANOREQUALTOTHRESHOLD = 3;
}

message ConcurrentModification {
    // Descriptive message for the error response.
    string message = 1;
}

message ConflictingDomainExists {
    string message = 1;
}

message ConflictingTypes {
    // Descriptive message for the error response.
    string message = 1;
}

message CreateHealthCheckRequest {
    // <p>A unique string that identifies the request and that allows you to retry a failed <code>CreateHealthCheck</code> request without the risk of creating two identical health checks:</p> <ul> <li> <p>If you send a <code>CreateHealthCheck</code> request with the same <code>CallerReference</code> and settings as a previous request, and if the health check doesn't exist, Amazon Route 53 creates the health check. If the health check does exist, Amazon Route 53 returns the settings for the existing health check.</p> </li> <li> <p>If you send a <code>CreateHealthCheck</code> request with the same <code>CallerReference</code> as a deleted health check, regardless of the settings, Amazon Route 53 returns a <code>HealthCheckAlreadyExists</code> error.</p> </li> <li> <p>If you send a <code>CreateHealthCheck</code> request with the same <code>CallerReference</code> as an existing health check but with different settings, Amazon Route 53 returns a <code>HealthCheckAlreadyExists</code> error.</p> </li> <li> <p>If you send a <code>CreateHealthCheck</code> request with a unique <code>CallerReference</code> but settings identical to an existing health check, Amazon Route 53 creates the health check.</p> </li> </ul>
    string CallerReference = 1;
    // A complex type that contains the response to a <code>CreateHealthCheck</code> request.
    HealthCheckConfig HealthCheckConfig = 2;
}

message CreateHealthCheckResponse {
    // A complex type that contains identifying information about the health check.
    HealthCheck HealthCheck = 1;
}

message CreateHostedZoneRequest {
    // A unique string that identifies the request and that allows failed <code>CreateHostedZone</code> requests to be retried without the risk of executing the operation twice. You must use a unique <code>CallerReference</code> string every time you submit a <code>CreateHostedZone</code> request. <code>CallerReference</code> can be any unique string, for example, a date/time stamp.
    string CallerReference = 1;
    // If you want to associate a reusable delegation set with this hosted zone, the ID that Amazon Route 53 assigned to the reusable delegation set when you created it. For more information about reusable delegation sets, see <a>CreateReusableDelegationSet</a>.
    string DelegationSetId = 2;
    // <p>(Optional) A complex type that contains the following optional values:</p> <ul> <li> <p>For public and private hosted zones, an optional comment</p> </li> <li> <p>For private hosted zones, an optional <code>PrivateZone</code> element</p> </li> </ul> <p>If you don't specify a comment or the <code>PrivateZone</code> element, omit <code>HostedZoneConfig</code> and the other elements.</p>
    HostedZoneConfig HostedZoneConfig = 3;
    // <p>The name of the domain. For resource record types that include a domain name, specify a fully qualified domain name, for example, <i>www.example.com</i>. The trailing dot is optional; Amazon Route 53 assumes that the domain name is fully qualified. This means that Amazon Route 53 treats <i>www.example.com</i> (without a trailing dot) and <i>www.example.com.</i> (with a trailing dot) as identical.</p> <p>If you're creating a public hosted zone, this is the name you have registered with your DNS registrar. If your domain name is registered with a registrar other than Amazon Route 53, change the name servers for your domain to the set of <code>NameServers</code> that <code>CreateHostedZone</code> returns in <code>DelegationSet</code>.</p>
    string Name = 4;
    // <p>(Private hosted zones only) A complex type that contains information about the Amazon VPC that you're associating with this hosted zone.</p> <p>You can specify only one Amazon VPC when you create a private hosted zone. To associate additional Amazon VPCs with the hosted zone, use <a>AssociateVPCWithHostedZone</a> after you create a hosted zone.</p>
    VPC VPC = 5;
}

message CreateHostedZoneResponse {
    // A complex type that contains information about the <code>CreateHostedZone</code> request.
    ChangeInfo ChangeInfo = 1;
    // A complex type that describes the name servers for this hosted zone.
    DelegationSet DelegationSet = 2;
    // A complex type that contains general information about the hosted zone.
    HostedZone HostedZone = 3;
    // A complex type that contains information about an Amazon VPC that you associated with this hosted zone.
    VPC VPC = 4;
}

message CreateQueryLoggingConfigRequest {
    // <p>The Amazon Resource Name (ARN) for the log group that you want to Amazon Route 53 to send query logs to. This is the format of the ARN:</p> <p>arn:aws:logs:<i>region</i>:<i>account-id</i>:log-group:<i>log_group_name</i> </p> <p>To get the ARN for a log group, you can use the CloudWatch console, the <a href="http://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeLogGroups.html">DescribeLogGroups</a> API action, the <a href="http://docs.aws.amazon.com/cli/latest/reference/logs/describe-log-groups.html">describe-log-groups</a> command, or the applicable command in one of the AWS SDKs.</p>
    string CloudWatchLogsLogGroupArn = 1;
    // The ID of the hosted zone that you want to log queries for. You can log queries only for public hosted zones.
    string HostedZoneId = 2;
}

message CreateQueryLoggingConfigResponse {
    // A complex type that contains the ID for a query logging configuration, the ID of the hosted zone that you want to log queries for, and the ARN for the log group that you want Amazon Route 53 to send query logs to.
    QueryLoggingConfig QueryLoggingConfig = 1;
}

message CreateReusableDelegationSetRequest {
    // A unique string that identifies the request, and that allows you to retry failed <code>CreateReusableDelegationSet</code> requests without the risk of executing the operation twice. You must use a unique <code>CallerReference</code> string every time you submit a <code>CreateReusableDelegationSet</code> request. <code>CallerReference</code> can be any unique string, for example a date/time stamp.
    string CallerReference = 1;
    // If you want to mark the delegation set for an existing hosted zone as reusable, the ID for that hosted zone.
    string HostedZoneId = 2;
}

message CreateReusableDelegationSetResponse {
    // A complex type that contains name server information.
    DelegationSet DelegationSet = 1;
}

message CreateTrafficPolicyInstanceRequest {
    // The ID of the hosted zone in which you want Amazon Route 53 to create resource record sets by using the configuration in a traffic policy.
    string HostedZoneId = 1;
    // The domain name (such as example.com) or subdomain name (such as www.example.com) for which Amazon Route 53 responds to DNS queries by using the resource record sets that Amazon Route 53 creates for this traffic policy instance.
    string Name = 2;
    // (Optional) The TTL that you want Amazon Route 53 to assign to all of the resource record sets that it creates in the specified hosted zone.
    integer TTL = 3;
    // The ID of the traffic policy that you want to use to create resource record sets in the specified hosted zone.
    string TrafficPolicyId = 4;
    // The version of the traffic policy that you want to use to create resource record sets in the specified hosted zone.
    integer TrafficPolicyVersion = 5;
}

message CreateTrafficPolicyInstanceResponse {
    // A complex type that contains settings for the new traffic policy instance.
    TrafficPolicyInstance TrafficPolicyInstance = 1;
}

message CreateTrafficPolicyRequest {
    // (Optional) Any comments that you want to include about the traffic policy.
    string Comment = 1;
    // The definition of this traffic policy in JSON format. For more information, see <a href="http://docs.aws.amazon.com/Route53/latest/APIReference/api-policies-traffic-policy-document-format.html">Traffic Policy Document Format</a>.
    string Document = 2;
    // The name of the traffic policy.
    string Name = 3;
}

message CreateTrafficPolicyResponse {
    // A complex type that contains settings for the new traffic policy.
    TrafficPolicy TrafficPolicy = 1;
}

message CreateTrafficPolicyVersionRequest {
    // The comment that you specified in the <code>CreateTrafficPolicyVersion</code> request, if any.
    string Comment = 1;
    // The definition of this version of the traffic policy, in JSON format. You specified the JSON in the <code>CreateTrafficPolicyVersion</code> request. For more information about the JSON format, see <a>CreateTrafficPolicy</a>.
    string Document = 2;
}

message CreateTrafficPolicyVersionResponse {
    // A complex type that contains settings for the new version of the traffic policy.
    TrafficPolicy TrafficPolicy = 1;
}

message CreateVPCAssociationAuthorizationRequest {
    // A complex type that contains the VPC ID and region for the VPC that you want to authorize associating with your hosted zone.
    VPC VPC = 1;
}

message CreateVPCAssociationAuthorizationResponse {
    // The ID of the hosted zone that you authorized associating a VPC with.
    string HostedZoneId = 1;
    // The VPC that you authorized associating with a hosted zone.
    VPC VPC = 2;
}

message DelegationSet {
    // The value that you specified for <code>CallerReference</code> when you created the reusable delegation set.
    string CallerReference = 1;
    // The ID that Amazon Route 53 assigns to a reusable delegation set.
    string Id = 2;
    // A complex type that contains a list of the authoritative name servers for a hosted zone or for a reusable delegation set.
    array NameServers = 3;
}

message DelegationSetAlreadyCreated {
    // Descriptive message for the error response.
    string message = 1;
}

message DelegationSetAlreadyReusable {
    // Descriptive message for the error response.
    string message = 1;
}

message DelegationSetInUse {
    // Descriptive message for the error response.
    string message = 1;
}

repeated string DelegationSetNameServers = 1

message DelegationSetNotAvailable {
    // Descriptive message for the error response.
    string message = 1;
}

message DelegationSetNotReusable {
    // Descriptive message for the error response.
    string message = 1;
}

repeated DelegationSet DelegationSets = 1

message DeleteHealthCheckRequest {
}

message DeleteHealthCheckResponse {
}

message DeleteHostedZoneRequest {
}

message DeleteHostedZoneResponse {
    // A complex type that contains the ID, the status, and the date and time of a request to delete a hosted zone.
    ChangeInfo ChangeInfo = 1;
}

message DeleteQueryLoggingConfigRequest {
}

message DeleteQueryLoggingConfigResponse {
}

message DeleteReusableDelegationSetRequest {
}

message DeleteReusableDelegationSetResponse {
}

message DeleteTrafficPolicyInstanceRequest {
}

message DeleteTrafficPolicyInstanceResponse {
}

message DeleteTrafficPolicyRequest {
}

message DeleteTrafficPolicyResponse {
}

message DeleteVPCAssociationAuthorizationRequest {
    // When removing authorization to associate a VPC that was created by one AWS account with a hosted zone that was created with a different AWS account, a complex type that includes the ID and region of the VPC.
    VPC VPC = 1;
}

message DeleteVPCAssociationAuthorizationResponse {
}

message Dimension {
    // For the metric that the CloudWatch alarm is associated with, the name of one dimension.
    string Name = 1;
    // For the metric that the CloudWatch alarm is associated with, the value of one dimension.
    string Value = 2;
}



repeated Dimension DimensionList = 1



message DisassociateVPCFromHostedZoneRequest {
    //  <i>Optional:</i> A comment about the disassociation request.
    string Comment = 1;
    // A complex type that contains information about the VPC that you're disassociating from the specified hosted zone.
    VPC VPC = 2;
}

message DisassociateVPCFromHostedZoneResponse {
    // A complex type that describes the changes made to the specified private hosted zone.
    ChangeInfo ChangeInfo = 1;
}





repeated string ErrorMessages = 1







message GeoLocation {
    // <p>The two-letter code for the continent.</p> <p>Valid values: <code>AF</code> | <code>AN</code> | <code>AS</code> | <code>EU</code> | <code>OC</code> | <code>NA</code> | <code>SA</code> </p> <p>Constraint: Specifying <code>ContinentCode</code> with either <code>CountryCode</code> or <code>SubdivisionCode</code> returns an <code>InvalidInput</code> error.</p>
    string ContinentCode = 1;
    // The two-letter code for the country.
    string CountryCode = 2;
    // The code for the subdivision, for example, a state in the United States or a province in Canada.
    string SubdivisionCode = 3;
}

message GeoLocationDetails {
    // The two-letter code for the continent.
    string ContinentCode = 1;
    // The full name of the continent.
    string ContinentName = 2;
    // The two-letter code for the country.
    string CountryCode = 3;
    // The name of the country.
    string CountryName = 4;
    // The code for the subdivision, for example, a state in the United States or a province in Canada.
    string SubdivisionCode = 5;
    // The full name of the subdivision, for example, a state in the United States or a province in Canada.
    string SubdivisionName = 6;
}

repeated GeoLocationDetails GeoLocationDetailsList = 1





message GetChangeRequest {
}

message GetChangeResponse {
    // A complex type that contains information about the specified change batch.
    ChangeInfo ChangeInfo = 1;
}

message GetCheckerIpRangesRequest {
}

message GetCheckerIpRangesResponse {
    array CheckerIpRanges = 1;
}

message GetGeoLocationRequest {
}

message GetGeoLocationResponse {
    // A complex type that contains the codes and full continent, country, and subdivision names for the specified geolocation code.
    GeoLocationDetails GeoLocationDetails = 1;
}

message GetHealthCheckCountRequest {
}

message GetHealthCheckCountResponse {
    // The number of health checks associated with the current AWS account.
    integer HealthCheckCount = 1;
}

message GetHealthCheckLastFailureReasonRequest {
}

message GetHealthCheckLastFailureReasonResponse {
    // A list that contains one <code>Observation</code> element for each Amazon Route 53 health checker that is reporting a last failure reason.
    array HealthCheckObservations = 1;
}

message GetHealthCheckRequest {
}

message GetHealthCheckResponse {
    // A complex type that contains information about one health check that is associated with the current AWS account.
    HealthCheck HealthCheck = 1;
}

message GetHealthCheckStatusRequest {
}

message GetHealthCheckStatusResponse {
    // A list that contains one <code>HealthCheckObservation</code> element for each Amazon Route 53 health checker that is reporting a status about the health check endpoint.
    array HealthCheckObservations = 1;
}

message GetHostedZoneCountRequest {
}

message GetHostedZoneCountResponse {
    // The total number of public and private hosted zones that are associated with the current AWS account.
    integer HostedZoneCount = 1;
}

message GetHostedZoneRequest {
}

message GetHostedZoneResponse {
    // A complex type that lists the Amazon Route 53 name servers for the specified hosted zone.
    DelegationSet DelegationSet = 1;
    // A complex type that contains general information about the specified hosted zone.
    HostedZone HostedZone = 2;
    // A complex type that contains information about the VPCs that are associated with the specified hosted zone.
    array VPCs = 3;
}

message GetQueryLoggingConfigRequest {
}

message GetQueryLoggingConfigResponse {
    // A complex type that contains information about the query logging configuration that you specified in a <a>GetQueryLoggingConfig</a> request.
    QueryLoggingConfig QueryLoggingConfig = 1;
}

message GetReusableDelegationSetRequest {
}

message GetReusableDelegationSetResponse {
    // A complex type that contains information about the reusable delegation set.
    DelegationSet DelegationSet = 1;
}

message GetTrafficPolicyInstanceCountRequest {
}

message GetTrafficPolicyInstanceCountResponse {
    // The number of traffic policy instances that are associated with the current AWS account.
    integer TrafficPolicyInstanceCount = 1;
}

message GetTrafficPolicyInstanceRequest {
}

message GetTrafficPolicyInstanceResponse {
    // A complex type that contains settings for the traffic policy instance.
    TrafficPolicyInstance TrafficPolicyInstance = 1;
}

message GetTrafficPolicyRequest {
}

message GetTrafficPolicyResponse {
    // A complex type that contains settings for the specified traffic policy.
    TrafficPolicy TrafficPolicy = 1;
}

message HealthCheck {
    // A unique string that you specified when you created the health check.
    string CallerReference = 1;
    // A complex type that contains information about the CloudWatch alarm that Amazon Route 53 is monitoring for this health check.
    CloudWatchAlarmConfiguration CloudWatchAlarmConfiguration = 2;
    // A complex type that contains detailed information about one health check.
    HealthCheckConfig HealthCheckConfig = 3;
    // The version of the health check. You can optionally pass this value in a call to <code>UpdateHealthCheck</code> to prevent overwriting another change to the health check.
    integer HealthCheckVersion = 4;
    // The identifier that Amazon Route 53assigned to the health check when you created it. When you add or update a resource record set, you use this value to specify which health check to use. The value can be up to 64 characters long.
    string Id = 5;
}

message HealthCheckAlreadyExists {
    // Descriptive message for the error response.
    string message = 1;
}

message HealthCheckConfig {
    // A complex type that identifies the CloudWatch alarm that you want Amazon Route 53 health checkers to use to determine whether this health check is healthy.
    AlarmIdentifier AlarmIdentifier = 1;
    // (CALCULATED Health Checks Only) A complex type that contains one <code>ChildHealthCheck</code> element for each health check that you want to associate with a <code>CALCULATED</code> health check.
    array ChildHealthChecks = 2;
    // <p>Specify whether you want Amazon Route 53 to send the value of <code>FullyQualifiedDomainName</code> to the endpoint in the <code>client_hello</code> message during TLS negotiation. This allows the endpoint to respond to <code>HTTPS</code> health check requests with the applicable SSL/TLS certificate.</p> <p>Some endpoints require that <code>HTTPS</code> requests include the host name in the <code>client_hello</code> message. If you don't enable SNI, the status of the health check will be <code>SSL alert handshake_failure</code>. A health check can also have that status for other reasons. If SNI is enabled and you're still getting the error, check the SSL/TLS configuration on your endpoint and confirm that your certificate is valid.</p> <p>The SSL/TLS certificate on your endpoint includes a domain name in the <code>Common Name</code> field and possibly several more in the <code>Subject Alternative Names</code> field. One of the domain names in the certificate should match the value that you specify for <code>FullyQualifiedDomainName</code>. If the endpoint responds to the <code>client_hello</code> message with a certificate that does not include the domain name that you specified in <code>FullyQualifiedDomainName</code>, a health checker will retry the handshake. In the second attempt, the health checker will omit <code>FullyQualifiedDomainName</code> from the <code>client_hello</code> message.</p>
    boolean EnableSNI = 3;
    // <p>The number of consecutive health checks that an endpoint must pass or fail for Amazon Route 53 to change the current status of the endpoint from unhealthy to healthy or vice versa. For more information, see <a href="http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html">How Amazon Route 53 Determines Whether an Endpoint Is Healthy</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> <p>If you don't specify a value for <code>FailureThreshold</code>, the default value is three health checks.</p>
    integer FailureThreshold = 4;
    // <p>Amazon Route 53 behavior depends on whether you specify a value for <code>IPAddress</code>.</p> <p> <b>If you specify a value for</b> <code>IPAddress</code>:</p> <p>Amazon Route 53 sends health check requests to the specified IPv4 or IPv6 address and passes the value of <code>FullyQualifiedDomainName</code> in the <code>Host</code> header for all health checks except TCP health checks. This is typically the fully qualified DNS name of the endpoint on which you want Amazon Route 53 to perform health checks.</p> <p>When Amazon Route 53 checks the health of an endpoint, here is how it constructs the <code>Host</code> header:</p> <ul> <li> <p>If you specify a value of <code>80</code> for <code>Port</code> and <code>HTTP</code> or <code>HTTP_STR_MATCH</code> for <code>Type</code>, Amazon Route 53 passes the value of <code>FullyQualifiedDomainName</code> to the endpoint in the Host header. </p> </li> <li> <p>If you specify a value of <code>443</code> for <code>Port</code> and <code>HTTPS</code> or <code>HTTPS_STR_MATCH</code> for <code>Type</code>, Amazon Route 53 passes the value of <code>FullyQualifiedDomainName</code> to the endpoint in the <code>Host</code> header.</p> </li> <li> <p>If you specify another value for <code>Port</code> and any value except <code>TCP</code> for <code>Type</code>, Amazon Route 53 passes <code>FullyQualifiedDomainName:Port</code> to the endpoint in the <code>Host</code> header.</p> </li> </ul> <p>If you don't specify a value for <code>FullyQualifiedDomainName</code>, Amazon Route 53 substitutes the value of <code>IPAddress</code> in the <code>Host</code> header in each of the preceding cases.</p> <p> <b>If you don't specify a value for <code>IPAddress</code> </b>:</p> <p>Amazon Route 53 sends a DNS request to the domain that you specify for <code>FullyQualifiedDomainName</code> at the interval that you specify for <code>RequestInterval</code>. Using an IPv4 address that DNS returns, Amazon Route 53 then checks the health of the endpoint.</p> <note> <p>If you don't specify a value for <code>IPAddress</code>, Amazon Route 53 uses only IPv4 to send health checks to the endpoint. If there's no resource record set with a type of A for the name that you specify for <code>FullyQualifiedDomainName</code>, the health check fails with a "DNS resolution failed" error.</p> </note> <p>If you want to check the health of weighted, latency, or failover resource record sets and you choose to specify the endpoint only by <code>FullyQualifiedDomainName</code>, we recommend that you create a separate health check for each endpoint. For example, create a health check for each HTTP server that is serving content for www.example.com. For the value of <code>FullyQualifiedDomainName</code>, specify the domain name of the server (such as us-east-2-www.example.com), not the name of the resource record sets (www.example.com).</p> <important> <p>In this configuration, if you create a health check for which the value of <code>FullyQualifiedDomainName</code> matches the name of the resource record sets and you then associate the health check with those resource record sets, health check results will be unpredictable.</p> </important> <p>In addition, if the value that you specify for <code>Type</code> is <code>HTTP</code>, <code>HTTPS</code>, <code>HTTP_STR_MATCH</code>, or <code>HTTPS_STR_MATCH</code>, Amazon Route 53 passes the value of <code>FullyQualifiedDomainName</code> in the <code>Host</code> header, as it does when you specify a value for <code>IPAddress</code>. If the value of <code>Type</code> is <code>TCP</code>, Amazon Route 53 doesn't pass a <code>Host</code> header.</p>
    string FullyQualifiedDomainName = 5;
    // <p>The number of child health checks that are associated with a <code>CALCULATED</code> health that Amazon Route 53 must consider healthy for the <code>CALCULATED</code> health check to be considered healthy. To specify the child health checks that you want to associate with a <code>CALCULATED</code> health check, use the <a>HealthCheckConfig$ChildHealthChecks</a> and <a>HealthCheckConfig$ChildHealthChecks</a> elements.</p> <p>Note the following:</p> <ul> <li> <p>If you specify a number greater than the number of child health checks, Amazon Route 53 always considers this health check to be unhealthy.</p> </li> <li> <p>If you specify <code>0</code>, Amazon Route 53 always considers this health check to be healthy.</p> </li> </ul>
    integer HealthThreshold = 6;
    // <p>The IPv4 or IPv6 IP address of the endpoint that you want Amazon Route 53 to perform health checks on. If you don't specify a value for <code>IPAddress</code>, Amazon Route 53 sends a DNS request to resolve the domain name that you specify in <code>FullyQualifiedDomainName</code> at the interval that you specify in <code>RequestInterval</code>. Using an IP address returned by DNS, Amazon Route 53 then checks the health of the endpoint.</p> <p>Use one of the following formats for the value of <code>IPAddress</code>: </p> <ul> <li> <p> <b>IPv4 address</b>: four values between 0 and 255, separated by periods (.), for example, <code>192.0.2.44</code>.</p> </li> <li> <p> <b>IPv6 address</b>: eight groups of four hexadecimal values, separated by colons (:), for example, <code>2001:0db8:85a3:0000:0000:abcd:0001:2345</code>. You can also shorten IPv6 addresses as described in RFC 5952, for example, <code>2001:db8:85a3::abcd:1:2345</code>.</p> </li> </ul> <p>If the endpoint is an EC2 instance, we recommend that you create an Elastic IP address, associate it with your EC2 instance, and specify the Elastic IP address for <code>IPAddress</code>. This ensures that the IP address of your instance will never change.</p> <p>For more information, see <a>HealthCheckConfig$FullyQualifiedDomainName</a>.</p> <p>Constraints: Amazon Route 53 can't check the health of endpoints for which the IP address is in local, private, non-routable, or multicast ranges. For more information about IP addresses for which you can't create health checks, see the following documents:</p> <ul> <li> <p> <a href="https://tools.ietf.org/html/rfc5735">RFC 5735, Special Use IPv4 Addresses</a> </p> </li> <li> <p> <a href="https://tools.ietf.org/html/rfc6598">RFC 6598, IANA-Reserved IPv4 Prefix for Shared Address Space</a> </p> </li> <li> <p> <a href="https://tools.ietf.org/html/rfc5156">RFC 5156, Special-Use IPv6 Addresses</a> </p> </li> </ul> <p>When the value of <code>Type</code> is <code>CALCULATED</code> or <code>CLOUDWATCH_METRIC</code>, omit <code>IPAddress</code>.</p>
    string IPAddress = 7;
    // <p>When CloudWatch has insufficient data about the metric to determine the alarm state, the status that you want Amazon Route 53 to assign to the health check:</p> <ul> <li> <p> <code>Healthy</code>: Amazon Route 53 considers the health check to be healthy.</p> </li> <li> <p> <code>Unhealthy</code>: Amazon Route 53 considers the health check to be unhealthy.</p> </li> <li> <p> <code>LastKnownStatus</code>: Amazon Route 53 uses the status of the health check from the last time that CloudWatch had sufficient data to determine the alarm state. For new health checks that have no last known status, the default status for the health check is healthy.</p> </li> </ul>
    InsufficientDataHealthStatus InsufficientDataHealthStatus = 8;
    // Specify whether you want Amazon Route 53 to invert the status of a health check, for example, to consider a health check unhealthy when it otherwise would be considered healthy.
    boolean Inverted = 9;
    // <p>Specify whether you want Amazon Route 53 to measure the latency between health checkers in multiple AWS regions and your endpoint, and to display CloudWatch latency graphs on the <b>Health Checks</b> page in the Amazon Route 53 console.</p> <important> <p>You can't change the value of <code>MeasureLatency</code> after you create a health check.</p> </important>
    boolean MeasureLatency = 10;
    // The port on the endpoint on which you want Amazon Route 53 to perform health checks. Specify a value for <code>Port</code> only when you specify a value for <code>IPAddress</code>.
    integer Port = 11;
    // <p>A complex type that contains one <code>Region</code> element for each region from which you want Amazon Route 53 health checkers to check the specified endpoint.</p> <p>If you don't specify any regions, Amazon Route 53 health checkers automatically performs checks from all of the regions that are listed under <b>Valid Values</b>.</p> <p>If you update a health check to remove a region that has been performing health checks, Amazon Route 53 will briefly continue to perform checks from that region to ensure that some health checkers are always checking the endpoint (for example, if you replace three regions with four different regions). </p>
    array Regions = 12;
    // <p>The number of seconds between the time that Amazon Route 53 gets a response from your endpoint and the time that it sends the next health check request. Each Amazon Route 53 health checker makes requests at this interval.</p> <important> <p>You can't change the value of <code>RequestInterval</code> after you create a health check.</p> </important> <p>If you don't specify a value for <code>RequestInterval</code>, the default value is <code>30</code> seconds.</p>
    integer RequestInterval = 13;
    // The path, if any, that you want Amazon Route 53 to request when performing health checks. The path can be any value for which your endpoint will return an HTTP status code of 2xx or 3xx when the endpoint is healthy, for example, the file /docs/route53-health-check.html.
    string ResourcePath = 14;
    // <p>If the value of Type is <code>HTTP_STR_MATCH</code> or <code>HTTP_STR_MATCH</code>, the string that you want Amazon Route 53 to search for in the response body from the specified resource. If the string appears in the response body, Amazon Route 53 considers the resource healthy.</p> <p>Amazon Route 53 considers case when searching for <code>SearchString</code> in the response body. </p>
    string SearchString = 15;
    // <p>The type of health check that you want to create, which indicates how Amazon Route 53 determines whether an endpoint is healthy.</p> <important> <p>You can't change the value of <code>Type</code> after you create a health check.</p> </important> <p>You can create the following types of health checks:</p> <ul> <li> <p> <b>HTTP</b>: Amazon Route 53 tries to establish a TCP connection. If successful, Amazon Route 53 submits an HTTP request and waits for an HTTP status code of 200 or greater and less than 400.</p> </li> <li> <p> <b>HTTPS</b>: Amazon Route 53 tries to establish a TCP connection. If successful, Amazon Route 53 submits an HTTPS request and waits for an HTTP status code of 200 or greater and less than 400.</p> <important> <p>If you specify <code>HTTPS</code> for the value of <code>Type</code>, the endpoint must support TLS v1.0 or later.</p> </important> </li> <li> <p> <b>HTTP_STR_MATCH</b>: Amazon Route 53 tries to establish a TCP connection. If successful, Amazon Route 53 submits an HTTP request and searches the first 5,120 bytes of the response body for the string that you specify in <code>SearchString</code>.</p> </li> <li> <p> <b>HTTPS_STR_MATCH</b>: Amazon Route 53 tries to establish a TCP connection. If successful, Amazon Route 53 submits an <code>HTTPS</code> request and searches the first 5,120 bytes of the response body for the string that you specify in <code>SearchString</code>.</p> </li> <li> <p> <b>TCP</b>: Amazon Route 53 tries to establish a TCP connection.</p> </li> <li> <p> <b>CLOUDWATCH_METRIC</b>: The health check is associated with a CloudWatch alarm. If the state of the alarm is <code>OK</code>, the health check is considered healthy. If the state is <code>ALARM</code>, the health check is considered unhealthy. If CloudWatch doesn't have sufficient data to determine whether the state is <code>OK</code> or <code>ALARM</code>, the health check status depends on the setting for <code>InsufficientDataHealthStatus</code>: <code>Healthy</code>, <code>Unhealthy</code>, or <code>LastKnownStatus</code>. </p> </li> <li> <p> <b>CALCULATED</b>: For health checks that monitor the status of other health checks, Amazon Route 53 adds up the number of health checks that Amazon Route 53 health checkers consider to be healthy and compares that number with the value of <code>HealthThreshold</code>. </p> </li> </ul> <p>For more information, see <a href="http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html">How Amazon Route 53 Determines Whether an Endpoint Is Healthy</a> in the <i>Amazon Route 53 Developer Guide</i>.</p>
    HealthCheckType Type = 16;
}

message HealthCheckInUse {
    // Descriptive message for the error response.
    string message = 1;
}

message HealthCheckObservation {
    // The IP address of the Amazon Route 53 health checker that provided the failure reason in <code>StatusReport</code>.
    string IPAddress = 1;
    // The region of the Amazon Route 53 health checker that provided the status in <code>StatusReport</code>.
    HealthCheckRegion Region = 2;
    // A complex type that contains the last failure reason as reported by one Amazon Route 53 health checker and the time of the failed health check.
    StatusReport StatusReport = 3;
}

repeated HealthCheckObservation HealthCheckObservations = 1

enum HealthCheckRegion {
    USEAST1 = 0;
    USWEST1 = 1;
    USWEST2 = 2;
    EUWEST1 = 3;
    APSOUTHEAST1 = 4;
    APSOUTHEAST2 = 5;
    APNORTHEAST1 = 6;
    SAEAST1 = 7;
}

repeated HealthCheckRegion HealthCheckRegionList = 1

enum HealthCheckType {
    HTTP = 0;
    HTTPS = 1;
    HTTP_STR_MATCH = 2;
    HTTPS_STR_MATCH = 3;
    TCP = 4;
    CALCULATED = 5;
    CLOUDWATCH_METRIC = 6;
}

message HealthCheckVersionMismatch {
    string message = 1;
}

repeated HealthCheck HealthChecks = 1



message HostedZone {
    // The value that you specified for <code>CallerReference</code> when you created the hosted zone.
    string CallerReference = 1;
    // A complex type that includes the <code>Comment</code> and <code>PrivateZone</code> elements. If you omitted the <code>HostedZoneConfig</code> and <code>Comment</code> elements from the request, the <code>Config</code> and <code>Comment</code> elements don't appear in the response.
    HostedZoneConfig Config = 2;
    // The ID that Amazon Route 53 assigned to the hosted zone when you created it.
    string Id = 3;
    // <p>The name of the domain. For public hosted zones, this is the name that you have registered with your DNS registrar.</p> <p>For information about how to specify characters other than <code>a-z</code>, <code>0-9</code>, and <code>-</code> (hyphen) and how to specify internationalized domain names, see <a>CreateHostedZone</a>.</p>
    string Name = 4;
    // The number of resource record sets in the hosted zone.
    integer ResourceRecordSetCount = 5;
}

message HostedZoneAlreadyExists {
    // Descriptive message for the error response.
    string message = 1;
}

message HostedZoneConfig {
    // Any comments that you want to include about the hosted zone.
    string Comment = 1;
    // A value that indicates whether this is a private hosted zone.
    boolean PrivateZone = 2;
}

message HostedZoneNotEmpty {
    // Descriptive message for the error response.
    string message = 1;
}

message HostedZoneNotFound {
    // Descriptive message for the error response.
    string message = 1;
}



repeated HostedZone HostedZones = 1





message IncompatibleVersion {
    string message = 1;
}

message InsufficientCloudWatchLogsResourcePolicy {
    string message = 1;
}

enum InsufficientDataHealthStatu {
    HEALTHY = 0;
    UNHEALTHY = 1;
    LASTKNOWNSTATUS = 2;
}

message InvalidArgument {
    // Descriptive message for the error response.
    string message = 1;
}

message InvalidChangeBatch {
    string message = 1;
    // Descriptive message for the error response.
    array messages = 2;
}

message InvalidDomainName {
    // Descriptive message for the error response.
    string message = 1;
}

message InvalidInput {
    // Descriptive message for the error response.
    string message = 1;
}

message InvalidPaginationToken {
    string message = 1;
}

message InvalidTrafficPolicyDocument {
    // Descriptive message for the error response.
    string message = 1;
}

message InvalidVPCId {
    // Descriptive message for the error response.
    string message = 1;
}

message LastVPCAssociation {
    // Descriptive message for the error response.
    string message = 1;
}

message LimitsExceeded {
    // Descriptive message for the error response.
    string message = 1;
}

message ListGeoLocationsRequest {
}

message ListGeoLocationsResponse {
    // A complex type that contains one <code>GeoLocationDetails</code> element for each location that Amazon Route 53 supports for geolocation.
    array GeoLocationDetailsList = 1;
    // A value that indicates whether more locations remain to be listed after the last location in this response. If so, the value of <code>IsTruncated</code> is <code>true</code>. To get more values, submit another request and include the values of <code>NextContinentCode</code>, <code>NextCountryCode</code>, and <code>NextSubdivisionCode</code> in the <code>StartContinentCode</code>, <code>StartCountryCode</code>, and <code>StartSubdivisionCode</code>, as applicable.
    boolean IsTruncated = 2;
    // The value that you specified for <code>MaxItems</code> in the request.
    string MaxItems = 3;
    // If <code>IsTruncated</code> is <code>true</code>, you can make a follow-up request to display more locations. Enter the value of <code>NextContinentCode</code> in the <code>StartContinentCode</code> parameter in another <code>ListGeoLocations</code> request.
    string NextContinentCode = 4;
    // If <code>IsTruncated</code> is <code>true</code>, you can make a follow-up request to display more locations. Enter the value of <code>NextCountryCode</code> in the <code>StartCountryCode</code> parameter in another <code>ListGeoLocations</code> request.
    string NextCountryCode = 5;
    // If <code>IsTruncated</code> is <code>true</code>, you can make a follow-up request to display more locations. Enter the value of <code>NextSubdivisionCode</code> in the <code>StartSubdivisionCode</code> parameter in another <code>ListGeoLocations</code> request.
    string NextSubdivisionCode = 6;
}

message ListHealthChecksRequest {
}

message ListHealthChecksResponse {
    // A complex type that contains one <code>HealthCheck</code> element for each health check that is associated with the current AWS account.
    array HealthChecks = 1;
    // A flag that indicates whether there are more health checks to be listed. If the response was truncated, you can get the next group of health checks by submitting another <code>ListHealthChecks</code> request and specifying the value of <code>NextMarker</code> in the <code>marker</code> parameter.
    boolean IsTruncated = 2;
    // For the second and subsequent calls to <code>ListHealthChecks</code>, <code>Marker</code> is the value that you specified for the <code>marker</code> parameter in the previous request.
    string Marker = 3;
    // The value that you specified for the <code>maxitems</code> parameter in the call to <code>ListHealthChecks</code> that produced the current response.
    string MaxItems = 4;
    // If <code>IsTruncated</code> is <code>true</code>, the value of <code>NextMarker</code> identifies the first health check that Amazon Route 53 returns if you submit another <code>ListHealthChecks</code> request and specify the value of <code>NextMarker</code> in the <code>marker</code> parameter.
    string NextMarker = 5;
}

message ListHostedZonesByNameRequest {
}

message ListHostedZonesByNameResponse {
    // For the second and subsequent calls to <code>ListHostedZonesByName</code>, <code>DNSName</code> is the value that you specified for the <code>dnsname</code> parameter in the request that produced the current response.
    string DNSName = 1;
    // The ID that Amazon Route 53 assigned to the hosted zone when you created it.
    string HostedZoneId = 2;
    // A complex type that contains general information about the hosted zone.
    array HostedZones = 3;
    // A flag that indicates whether there are more hosted zones to be listed. If the response was truncated, you can get the next group of <code>maxitems</code> hosted zones by calling <code>ListHostedZonesByName</code> again and specifying the values of <code>NextDNSName</code> and <code>NextHostedZoneId</code> elements in the <code>dnsname</code> and <code>hostedzoneid</code> parameters.
    boolean IsTruncated = 4;
    // The value that you specified for the <code>maxitems</code> parameter in the call to <code>ListHostedZonesByName</code> that produced the current response.
    string MaxItems = 5;
    // <p>If <code>IsTruncated</code> is true, the value of <code>NextDNSName</code> is the name of the first hosted zone in the next group of <code>maxitems</code> hosted zones. Call <code>ListHostedZonesByName</code> again and specify the value of <code>NextDNSName</code> and <code>NextHostedZoneId</code> in the <code>dnsname</code> and <code>hostedzoneid</code> parameters, respectively.</p> <p>This element is present only if <code>IsTruncated</code> is <code>true</code>.</p>
    string NextDNSName = 6;
    // <p>If <code>IsTruncated</code> is <code>true</code>, the value of <code>NextHostedZoneId</code> identifies the first hosted zone in the next group of <code>maxitems</code> hosted zones. Call <code>ListHostedZonesByName</code> again and specify the value of <code>NextDNSName</code> and <code>NextHostedZoneId</code> in the <code>dnsname</code> and <code>hostedzoneid</code> parameters, respectively.</p> <p>This element is present only if <code>IsTruncated</code> is <code>true</code>.</p>
    string NextHostedZoneId = 7;
}

message ListHostedZonesRequest {
}

message ListHostedZonesResponse {
    // A complex type that contains general information about the hosted zone.
    array HostedZones = 1;
    // A flag indicating whether there are more hosted zones to be listed. If the response was truncated, you can get more hosted zones by submitting another <code>ListHostedZones</code> request and specifying the value of <code>NextMarker</code> in the <code>marker</code> parameter.
    boolean IsTruncated = 2;
    // For the second and subsequent calls to <code>ListHostedZones</code>, <code>Marker</code> is the value that you specified for the <code>marker</code> parameter in the request that produced the current response.
    string Marker = 3;
    // The value that you specified for the <code>maxitems</code> parameter in the call to <code>ListHostedZones</code> that produced the current response.
    string MaxItems = 4;
    // <p>If <code>IsTruncated</code> is <code>true</code>, the value of <code>NextMarker</code> identifies the first hosted zone in the next group of hosted zones. Submit another <code>ListHostedZones</code> request, and specify the value of <code>NextMarker</code> from the response in the <code>marker</code> parameter.</p> <p>This element is present only if <code>IsTruncated</code> is <code>true</code>.</p>
    string NextMarker = 5;
}

message ListQueryLoggingConfigsRequest {
}

message ListQueryLoggingConfigsResponse {
    // <p>If a response includes the last of the query logging configurations that are associated with the current AWS account, <code>NextToken</code> doesn't appear in the response.</p> <p>If a response doesn't include the last of the configurations, you can get more configurations by submitting another <a>ListQueryLoggingConfigs</a> request. Get the value of <code>NextToken</code> that Amazon Route 53 returned in the previous response and include it in <code>NextToken</code> in the next request.</p>
    string NextToken = 1;
    // An array that contains one <a>QueryLoggingConfig</a> element for each configuration for DNS query logging that is associated with the current AWS account.
    array QueryLoggingConfigs = 2;
}

message ListResourceRecordSetsRequest {
}

message ListResourceRecordSetsResponse {
    // A flag that indicates whether more resource record sets remain to be listed. If your results were truncated, you can make a follow-up pagination request by using the <code>NextRecordName</code> element.
    boolean IsTruncated = 1;
    // The maximum number of records you requested.
    string MaxItems = 2;
    //  <i>Weighted, latency, geolocation, and failover resource record sets only</i>: If results were truncated for a given DNS name and type, the value of <code>SetIdentifier</code> for the next resource record set that has the current DNS name and type.
    string NextRecordIdentifier = 3;
    // <p>If the results were truncated, the name of the next record in the list.</p> <p>This element is present only if <code>IsTruncated</code> is true. </p>
    string NextRecordName = 4;
    // <p>If the results were truncated, the type of the next record in the list.</p> <p>This element is present only if <code>IsTruncated</code> is true. </p>
    RRType NextRecordType = 5;
    // Information about multiple resource record sets.
    array ResourceRecordSets = 6;
}

message ListReusableDelegationSetsRequest {
}

message ListReusableDelegationSetsResponse {
    // A complex type that contains one <code>DelegationSet</code> element for each reusable delegation set that was created by the current AWS account.
    array DelegationSets = 1;
    // A flag that indicates whether there are more reusable delegation sets to be listed.
    boolean IsTruncated = 2;
    // For the second and subsequent calls to <code>ListReusableDelegationSets</code>, <code>Marker</code> is the value that you specified for the <code>marker</code> parameter in the request that produced the current response.
    string Marker = 3;
    // The value that you specified for the <code>maxitems</code> parameter in the call to <code>ListReusableDelegationSets</code> that produced the current response.
    string MaxItems = 4;
    // If <code>IsTruncated</code> is <code>true</code>, the value of <code>NextMarker</code> identifies the next reusable delegation set that Amazon Route 53 will return if you submit another <code>ListReusableDelegationSets</code> request and specify the value of <code>NextMarker</code> in the <code>marker</code> parameter.
    string NextMarker = 5;
}

message ListTagsForResourceRequest {
}

message ListTagsForResourceResponse {
    // A <code>ResourceTagSet</code> containing tags associated with the specified resource.
    ResourceTagSet ResourceTagSet = 1;
}

message ListTagsForResourcesRequest {
    // A complex type that contains the ResourceId element for each resource for which you want to get a list of tags.
    array ResourceIds = 1;
}

message ListTagsForResourcesResponse {
    // A list of <code>ResourceTagSet</code>s containing tags associated with the specified resources.
    array ResourceTagSets = 1;
}

message ListTrafficPoliciesRequest {
}

message ListTrafficPoliciesResponse {
    // A flag that indicates whether there are more traffic policies to be listed. If the response was truncated, you can get the next group of traffic policies by submitting another <code>ListTrafficPolicies</code> request and specifying the value of <code>TrafficPolicyIdMarker</code> in the <code>TrafficPolicyIdMarker</code> request parameter.
    boolean IsTruncated = 1;
    // The value that you specified for the <code>MaxItems</code> parameter in the <code>ListTrafficPolicies</code> request that produced the current response.
    string MaxItems = 2;
    // If the value of <code>IsTruncated</code> is <code>true</code>, <code>TrafficPolicyIdMarker</code> is the ID of the first traffic policy in the next group of <code>MaxItems</code> traffic policies.
    string TrafficPolicyIdMarker = 3;
    // A list that contains one <code>TrafficPolicySummary</code> element for each traffic policy that was created by the current AWS account.
    array TrafficPolicySummaries = 4;
}

message ListTrafficPolicyInstancesByHostedZoneRequest {
}

message ListTrafficPolicyInstancesByHostedZoneResponse {
    // A flag that indicates whether there are more traffic policy instances to be listed. If the response was truncated, you can get the next group of traffic policy instances by submitting another <code>ListTrafficPolicyInstancesByHostedZone</code> request and specifying the values of <code>HostedZoneIdMarker</code>, <code>TrafficPolicyInstanceNameMarker</code>, and <code>TrafficPolicyInstanceTypeMarker</code> in the corresponding request parameters.
    boolean IsTruncated = 1;
    // The value that you specified for the <code>MaxItems</code> parameter in the <code>ListTrafficPolicyInstancesByHostedZone</code> request that produced the current response.
    string MaxItems = 2;
    // If <code>IsTruncated</code> is <code>true</code>, <code>TrafficPolicyInstanceNameMarker</code> is the name of the first traffic policy instance in the next group of traffic policy instances.
    string TrafficPolicyInstanceNameMarker = 3;
    // If <code>IsTruncated</code> is true, <code>TrafficPolicyInstanceTypeMarker</code> is the DNS type of the resource record sets that are associated with the first traffic policy instance in the next group of traffic policy instances.
    RRType TrafficPolicyInstanceTypeMarker = 4;
    // A list that contains one <code>TrafficPolicyInstance</code> element for each traffic policy instance that matches the elements in the request.
    array TrafficPolicyInstances = 5;
}

message ListTrafficPolicyInstancesByPolicyRequest {
}

message ListTrafficPolicyInstancesByPolicyResponse {
    // If <code>IsTruncated</code> is <code>true</code>, <code>HostedZoneIdMarker</code> is the ID of the hosted zone of the first traffic policy instance in the next group of traffic policy instances.
    string HostedZoneIdMarker = 1;
    // A flag that indicates whether there are more traffic policy instances to be listed. If the response was truncated, you can get the next group of traffic policy instances by calling <code>ListTrafficPolicyInstancesByPolicy</code> again and specifying the values of the <code>HostedZoneIdMarker</code>, <code>TrafficPolicyInstanceNameMarker</code>, and <code>TrafficPolicyInstanceTypeMarker</code> elements in the corresponding request parameters.
    boolean IsTruncated = 2;
    // The value that you specified for the <code>MaxItems</code> parameter in the call to <code>ListTrafficPolicyInstancesByPolicy</code> that produced the current response.
    string MaxItems = 3;
    // If <code>IsTruncated</code> is <code>true</code>, <code>TrafficPolicyInstanceNameMarker</code> is the name of the first traffic policy instance in the next group of <code>MaxItems</code> traffic policy instances.
    string TrafficPolicyInstanceNameMarker = 4;
    // If <code>IsTruncated</code> is <code>true</code>, <code>TrafficPolicyInstanceTypeMarker</code> is the DNS type of the resource record sets that are associated with the first traffic policy instance in the next group of <code>MaxItems</code> traffic policy instances.
    RRType TrafficPolicyInstanceTypeMarker = 5;
    // A list that contains one <code>TrafficPolicyInstance</code> element for each traffic policy instance that matches the elements in the request.
    array TrafficPolicyInstances = 6;
}

message ListTrafficPolicyInstancesRequest {
}

message ListTrafficPolicyInstancesResponse {
    // If <code>IsTruncated</code> is <code>true</code>, <code>HostedZoneIdMarker</code> is the ID of the hosted zone of the first traffic policy instance that Amazon Route 53 will return if you submit another <code>ListTrafficPolicyInstances</code> request.
    string HostedZoneIdMarker = 1;
    // A flag that indicates whether there are more traffic policy instances to be listed. If the response was truncated, you can get more traffic policy instances by calling <code>ListTrafficPolicyInstances</code> again and specifying the values of the <code>HostedZoneIdMarker</code>, <code>TrafficPolicyInstanceNameMarker</code>, and <code>TrafficPolicyInstanceTypeMarker</code> in the corresponding request parameters.
    boolean IsTruncated = 2;
    // The value that you specified for the <code>MaxItems</code> parameter in the call to <code>ListTrafficPolicyInstances</code> that produced the current response.
    string MaxItems = 3;
    // If <code>IsTruncated</code> is <code>true</code>, <code>TrafficPolicyInstanceNameMarker</code> is the name of the first traffic policy instance that Amazon Route 53 will return if you submit another <code>ListTrafficPolicyInstances</code> request.
    string TrafficPolicyInstanceNameMarker = 4;
    // If <code>IsTruncated</code> is <code>true</code>, <code>TrafficPolicyInstanceTypeMarker</code> is the DNS type of the resource record sets that are associated with the first traffic policy instance that Amazon Route 53 will return if you submit another <code>ListTrafficPolicyInstances</code> request.
    RRType TrafficPolicyInstanceTypeMarker = 5;
    // A list that contains one <code>TrafficPolicyInstance</code> element for each traffic policy instance that matches the elements in the request.
    array TrafficPolicyInstances = 6;
}

message ListTrafficPolicyVersionsRequest {
}

message ListTrafficPolicyVersionsResponse {
    // A flag that indicates whether there are more traffic policies to be listed. If the response was truncated, you can get the next group of traffic policies by submitting another <code>ListTrafficPolicyVersions</code> request and specifying the value of <code>NextMarker</code> in the <code>marker</code> parameter.
    boolean IsTruncated = 1;
    // The value that you specified for the <code>maxitems</code> parameter in the <code>ListTrafficPolicyVersions</code> request that produced the current response.
    string MaxItems = 2;
    // A list that contains one <code>TrafficPolicy</code> element for each traffic policy version that is associated with the specified traffic policy.
    array TrafficPolicies = 3;
    // <p>If <code>IsTruncated</code> is <code>true</code>, the value of <code>TrafficPolicyVersionMarker</code> identifies the first traffic policy that Amazon Route 53 will return if you submit another request. Call <code>ListTrafficPolicyVersions</code> again and specify the value of <code>TrafficPolicyVersionMarker</code> in the <code>TrafficPolicyVersionMarker</code> request parameter.</p> <p>This element is present only if <code>IsTruncated</code> is <code>true</code>.</p>
    string TrafficPolicyVersionMarker = 4;
}

message ListVPCAssociationAuthorizationsRequest {
}

message ListVPCAssociationAuthorizationsResponse {
    // The ID of the hosted zone that you can associate the listed VPCs with.
    string HostedZoneId = 1;
    // When the response includes a <code>NextToken</code> element, there are more VPCs that can be associated with the specified hosted zone. To get the next page of VPCs, submit another <code>ListVPCAssociationAuthorizations</code> request, and include the value of the <code>NextToken</code> element from the response in the <code>nexttoken</code> request parameter.
    string NextToken = 2;
    // The list of VPCs that are authorized to be associated with the specified hosted zone.
    array VPCs = 3;
}

message NoSuchChange {
    string message = 1;
}

message NoSuchCloudWatchLogsLogGroup {
    string message = 1;
}

message NoSuchDelegationSet {
    // Descriptive message for the error response.
    string message = 1;
}

message NoSuchGeoLocation {
    // Descriptive message for the error response.
    string message = 1;
}

message NoSuchHealthCheck {
    // Descriptive message for the error response.
    string message = 1;
}

message NoSuchHostedZone {
    // Descriptive message for the error response.
    string message = 1;
}

message NoSuchQueryLoggingConfig {
    string message = 1;
}

message NoSuchTrafficPolicy {
    // Descriptive message for the error response.
    string message = 1;
}

message NoSuchTrafficPolicyInstance {
    // Descriptive message for the error response.
    string message = 1;
}

message NotAuthorizedException {
    // Descriptive message for the error response.
    string message = 1;
}

message PriorRequestNotComplete {
    string message = 1;
}

message PublicZoneVPCAssociation {
    // Descriptive message for the error response.
    string message = 1;
}

message QueryLoggingConfig {
    // The Amazon Resource Name (ARN) of the CloudWatch Logs log group that Amazon Route 53 is publishing logs to.
    string CloudWatchLogsLogGroupArn = 1;
    // The ID of the hosted zone that CloudWatch Logs is logging queries for.
    string HostedZoneId = 2;
    // The ID for a configuration for DNS query logging.
    string Id = 3;
}

message QueryLoggingConfigAlreadyExists {
    string message = 1;
}



repeated QueryLoggingConfig QueryLoggingConfigs = 1



enum RRType {
    SOA = 0;
    A = 1;
    TXT = 2;
    NS = 3;
    CNAME = 4;
    MX = 5;
    NAPTR = 6;
    PTR = 7;
    SRV = 8;
    SPF = 9;
    AAAA = 10;
    CAA = 11;
}

repeated string RecordData = 1





enum ResettableElementName {
    FULLYQUALIFIEDDOMAINNAME = 0;
    REGIONS = 1;
    RESOURCEPATH = 2;
    CHILDHEALTHCHECKS = 3;
}

repeated ResettableElementName ResettableElementNameList = 1







message ResourceRecord {
    // <p>The current or new DNS record value, not to exceed 4,000 characters. In the case of a <code>DELETE</code> action, if the current value does not match the actual value, an error is returned. For descriptions about how to format <code>Value</code> for different record types, see <a href="http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html">Supported DNS Resource Record Types</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> <p>You can specify more than one value for all record types except <code>CNAME</code> and <code>SOA</code>. </p> <note> <p>If you're creating an alias resource record set, omit <code>Value</code>.</p> </note>
    string Value = 1;
}

message ResourceRecordSet {
    // <p> <i>Alias resource record sets only:</i> Information about the CloudFront distribution, AWS Elastic Beanstalk environment, ELB load balancer, Amazon S3 bucket, or Amazon Route 53 resource record set to which you're redirecting queries. The AWS Elastic Beanstalk environment must have a regionalized subdomain.</p> <p>If you're creating resource records sets for a private hosted zone, note the following:</p> <ul> <li> <p>You can't create alias resource record sets for CloudFront distributions in a private hosted zone.</p> </li> <li> <p>Creating geolocation alias resource record sets or latency alias resource record sets in a private hosted zone is unsupported.</p> </li> <li> <p>For information about creating failover resource record sets in a private hosted zone, see <a href="http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-private-hosted-zones.html">Configuring Failover in a Private Hosted Zone</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> </li> </ul>
    AliasTarget AliasTarget = 1;
    // <p> <i>Failover resource record sets only:</i> To configure failover, you add the <code>Failover</code> element to two resource record sets. For one resource record set, you specify <code>PRIMARY</code> as the value for <code>Failover</code>; for the other resource record set, you specify <code>SECONDARY</code>. In addition, you include the <code>HealthCheckId</code> element and specify the health check that you want Amazon Route 53 to perform for each resource record set.</p> <p>Except where noted, the following failover behaviors assume that you have included the <code>HealthCheckId</code> element in both resource record sets:</p> <ul> <li> <p>When the primary resource record set is healthy, Amazon Route 53 responds to DNS queries with the applicable value from the primary resource record set regardless of the health of the secondary resource record set.</p> </li> <li> <p>When the primary resource record set is unhealthy and the secondary resource record set is healthy, Amazon Route 53 responds to DNS queries with the applicable value from the secondary resource record set.</p> </li> <li> <p>When the secondary resource record set is unhealthy, Amazon Route 53 responds to DNS queries with the applicable value from the primary resource record set regardless of the health of the primary resource record set.</p> </li> <li> <p>If you omit the <code>HealthCheckId</code> element for the secondary resource record set, and if the primary resource record set is unhealthy, Amazon Route 53 always responds to DNS queries with the applicable value from the secondary resource record set. This is true regardless of the health of the associated endpoint.</p> </li> </ul> <p>You can't create non-failover resource record sets that have the same values for the <code>Name</code> and <code>Type</code> elements as failover resource record sets.</p> <p>For failover alias resource record sets, you must also include the <code>EvaluateTargetHealth</code> element and set the value to true.</p> <p>For more information about configuring failover for Amazon Route 53, see the following topics in the <i>Amazon Route 53 Developer Guide</i>: </p> <ul> <li> <p> <a href="http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover.html">Amazon Route 53 Health Checks and DNS Failover</a> </p> </li> <li> <p> <a href="http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-private-hosted-zones.html">Configuring Failover in a Private Hosted Zone</a> </p> </li> </ul>
    ResourceRecordSetFailover Failover = 2;
    // <p> <i>Geo location resource record sets only:</i> A complex type that lets you control how Amazon Route 53 responds to DNS queries based on the geographic origin of the query. For example, if you want all queries from Africa to be routed to a web server with an IP address of <code>192.0.2.111</code>, create a resource record set with a <code>Type</code> of <code>A</code> and a <code>ContinentCode</code> of <code>AF</code>.</p> <note> <p>Creating geolocation and geolocation alias resource record sets in private hosted zones is not supported.</p> </note> <p>If you create separate resource record sets for overlapping geographic regions (for example, one resource record set for a continent and one for a country on the same continent), priority goes to the smallest geographic region. This allows you to route most queries for a continent to one resource and to route queries for a country on that continent to a different resource.</p> <p>You can't create two geolocation resource record sets that specify the same geographic location.</p> <p>The value <code>*</code> in the <code>CountryCode</code> element matches all geographic locations that aren't specified in other geolocation resource record sets that have the same values for the <code>Name</code> and <code>Type</code> elements.</p> <important> <p>Geolocation works by mapping IP addresses to locations. However, some IP addresses aren't mapped to geographic locations, so even if you create geolocation resource record sets that cover all seven continents, Amazon Route 53 will receive some DNS queries from locations that it can't identify. We recommend that you create a resource record set for which the value of <code>CountryCode</code> is <code>*</code>, which handles both queries that come from locations for which you haven't created geolocation resource record sets and queries from IP addresses that aren't mapped to a location. If you don't create a <code>*</code> resource record set, Amazon Route 53 returns a "no answer" response for queries from those locations.</p> </important> <p>You can't create non-geolocation resource record sets that have the same values for the <code>Name</code> and <code>Type</code> elements as geolocation resource record sets.</p>
    GeoLocation GeoLocation = 3;
    // <p>If you want Amazon Route 53 to return this resource record set in response to a DNS query only when a health check is passing, include the <code>HealthCheckId</code> element and specify the ID of the applicable health check.</p> <p>Amazon Route 53 determines whether a resource record set is healthy based on one of the following:</p> <ul> <li> <p>By periodically sending a request to the endpoint that is specified in the health check</p> </li> <li> <p>By aggregating the status of a specified group of health checks (calculated health checks)</p> </li> <li> <p>By determining the current state of a CloudWatch alarm (CloudWatch metric health checks)</p> </li> </ul> <p>For more information, see <a href="http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html">How Amazon Route 53 Determines Whether an Endpoint Is Healthy</a>.</p> <p>The <code>HealthCheckId</code> element is only useful when Amazon Route 53 is choosing between two or more resource record sets to respond to a DNS query, and you want Amazon Route 53 to base the choice in part on the status of a health check. Configuring health checks only makes sense in the following configurations:</p> <ul> <li> <p>You're checking the health of the resource record sets in a group of weighted, latency, geolocation, or failover resource record sets, and you specify health check IDs for all of the resource record sets. If the health check for one resource record set specifies an endpoint that is not healthy, Amazon Route 53 stops responding to queries using the value for that resource record set.</p> </li> <li> <p>You set <code>EvaluateTargetHealth</code> to true for the resource record sets in a group of alias, weighted alias, latency alias, geolocation alias, or failover alias resource record sets, and you specify health check IDs for all of the resource record sets that are referenced by the alias resource record sets.</p> </li> </ul> <important> <p>Amazon Route 53 doesn't check the health of the endpoint specified in the resource record set, for example, the endpoint specified by the IP address in the <code>Value</code> element. When you add a <code>HealthCheckId</code> element to a resource record set, Amazon Route 53 checks the health of the endpoint that you specified in the health check. </p> </important> <p>For geolocation resource record sets, if an endpoint is unhealthy, Amazon Route 53 looks for a resource record set for the larger, associated geographic region. For example, suppose you have resource record sets for a state in the United States, for the United States, for North America, and for all locations. If the endpoint for the state resource record set is unhealthy, Amazon Route 53 checks the resource record sets for the United States, for North America, and for all locations (a resource record set for which the value of <code>CountryCode</code> is <code>*</code>), in that order, until it finds a resource record set for which the endpoint is healthy. </p> <p>If your health checks specify the endpoint only by domain name, we recommend that you create a separate health check for each endpoint. For example, create a health check for each <code>HTTP</code> server that is serving content for <code>www.example.com</code>. For the value of <code>FullyQualifiedDomainName</code>, specify the domain name of the server (such as <code>us-east-2-www.example.com</code>), not the name of the resource record sets (example.com).</p> <important> <p>n this configuration, if you create a health check for which the value of <code>FullyQualifiedDomainName</code> matches the name of the resource record sets and then associate the health check with those resource record sets, health check results will be unpredictable.</p> </important> <p>For more information, see the following topics in the <i>Amazon Route 53 Developer Guide</i>:</p> <ul> <li> <p> <a href="http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover.html">Amazon Route 53 Health Checks and DNS Failover</a> </p> </li> <li> <p> <a href="http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-private-hosted-zones.html">Configuring Failover in a Private Hosted Zone</a> </p> </li> </ul>
    string HealthCheckId = 4;
    // <p> <i>Multivalue answer resource record sets only</i>: To route traffic approximately randomly to multiple resources, such as web servers, create one multivalue answer record for each resource and specify <code>true</code> for <code>MultiValueAnswer</code>. Note the following:</p> <ul> <li> <p>If you associate a health check with a multivalue answer resource record set, Amazon Route 53 responds to DNS queries with the corresponding IP address only when the health check is healthy.</p> </li> <li> <p>If you don't associate a health check with a multivalue answer record, Amazon Route 53 always considers the record to be healthy.</p> </li> <li> <p>Amazon Route 53 responds to DNS queries with up to eight healthy records; if you have eight or fewer healthy records, Amazon Route 53 responds to all DNS queries with all the healthy records.</p> </li> <li> <p>If you have more than eight healthy records, Amazon Route 53 responds to different DNS resolvers with different combinations of healthy records.</p> </li> <li> <p>When all records are unhealthy, Amazon Route 53 responds to DNS queries with up to eight unhealthy records.</p> </li> <li> <p>If a resource becomes unavailable after a resolver caches a response, client software typically tries another of the IP addresses in the response.</p> </li> </ul> <p>You can't create multivalue answer alias records.</p>
    boolean MultiValueAnswer = 5;
    // <p>The name of the domain you want to perform the action on.</p> <p>Enter a fully qualified domain name, for example, <code>www.example.com</code>. You can optionally include a trailing dot. If you omit the trailing dot, Amazon Route 53 still assumes that the domain name that you specify is fully qualified. This means that Amazon Route 53 treats <code>www.example.com</code> (without a trailing dot) and <code>www.example.com.</code> (with a trailing dot) as identical.</p> <p>For information about how to specify characters other than <code>a-z</code>, <code>0-9</code>, and <code>-</code> (hyphen) and how to specify internationalized domain names, see <a href="http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DomainNameFormat.html">DNS Domain Name Format</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> <p>You can use the asterisk (*) wildcard to replace the leftmost label in a domain name, for example, <code>*.example.com</code>. Note the following:</p> <ul> <li> <p>The * must replace the entire label. For example, you can't specify <code>*prod.example.com</code> or <code>prod*.example.com</code>.</p> </li> <li> <p>The * can't replace any of the middle labels, for example, marketing.*.example.com.</p> </li> <li> <p>If you include * in any position other than the leftmost label in a domain name, DNS treats it as an * character (ASCII 42), not as a wildcard.</p> <important> <p>You can't use the * wildcard for resource records sets that have a type of NS.</p> </important> </li> </ul> <p>You can use the * wildcard as the leftmost label in a domain name, for example, <code>*.example.com</code>. You can't use an * for one of the middle labels, for example, <code>marketing.*.example.com</code>. In addition, the * must replace the entire label; for example, you can't specify <code>prod*.example.com</code>.</p>
    string Name = 6;
    // <p> <i>Latency-based resource record sets only:</i> The Amazon EC2 Region where you created the resource that this resource record set refers to. The resource typically is an AWS resource, such as an EC2 instance or an ELB load balancer, and is referred to by an IP address or a DNS domain name, depending on the record type.</p> <note> <p>Creating latency and latency alias resource record sets in private hosted zones is not supported.</p> </note> <p>When Amazon Route 53 receives a DNS query for a domain name and type for which you have created latency resource record sets, Amazon Route 53 selects the latency resource record set that has the lowest latency between the end user and the associated Amazon EC2 Region. Amazon Route 53 then returns the value that is associated with the selected resource record set.</p> <p>Note the following:</p> <ul> <li> <p>You can only specify one <code>ResourceRecord</code> per latency resource record set.</p> </li> <li> <p>You can only create one latency resource record set for each Amazon EC2 Region.</p> </li> <li> <p>You aren't required to create latency resource record sets for all Amazon EC2 Regions. Amazon Route 53 will choose the region with the best latency from among the regions that you create latency resource record sets for.</p> </li> <li> <p>You can't create non-latency resource record sets that have the same values for the <code>Name</code> and <code>Type</code> elements as latency resource record sets.</p> </li> </ul>
    ResourceRecordSetRegion Region = 7;
    // <p>Information about the resource records to act upon.</p> <note> <p>If you're creating an alias resource record set, omit <code>ResourceRecords</code>.</p> </note>
    array ResourceRecords = 8;
    //  <i>Weighted, Latency, Geo, and Failover resource record sets only:</i> An identifier that differentiates among multiple resource record sets that have the same combination of DNS name and type. The value of <code>SetIdentifier</code> must be unique for each resource record set that has the same combination of DNS name and type. Omit <code>SetIdentifier</code> for any other types of record sets.
    string SetIdentifier = 9;
    // <p>The resource record cache time to live (TTL), in seconds. Note the following:</p> <ul> <li> <p>If you're creating or updating an alias resource record set, omit <code>TTL</code>. Amazon Route 53 uses the value of <code>TTL</code> for the alias target. </p> </li> <li> <p>If you're associating this resource record set with a health check (if you're adding a <code>HealthCheckId</code> element), we recommend that you specify a <code>TTL</code> of 60 seconds or less so clients respond quickly to changes in health status.</p> </li> <li> <p>All of the resource record sets in a group of weighted resource record sets must have the same value for <code>TTL</code>.</p> </li> <li> <p>If a group of weighted resource record sets includes one or more weighted alias resource record sets for which the alias target is an ELB load balancer, we recommend that you specify a <code>TTL</code> of 60 seconds for all of the non-alias weighted resource record sets that have the same name and type. Values other than 60 seconds (the TTL for load balancers) will change the effect of the values that you specify for <code>Weight</code>.</p> </li> </ul>
    integer TTL = 10;
    // <p>When you create a traffic policy instance, Amazon Route 53 automatically creates a resource record set. <code>TrafficPolicyInstanceId</code> is the ID of the traffic policy instance that Amazon Route 53 created this resource record set for.</p> <important> <p>To delete the resource record set that is associated with a traffic policy instance, use <code>DeleteTrafficPolicyInstance</code>. Amazon Route 53 will delete the resource record set automatically. If you delete the resource record set by using <code>ChangeResourceRecordSets</code>, Amazon Route 53 doesn't automatically delete the traffic policy instance, and you'll continue to be charged for it even though it's no longer in use. </p> </important>
    string TrafficPolicyInstanceId = 11;
    // <p>The DNS record type. For information about different record types and how data is encoded for them, see <a href="http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html">Supported DNS Resource Record Types</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> <p>Valid values for basic resource record sets: <code>A</code> | <code>AAAA</code> | <code>CAA</code> | <code>CNAME</code> | <code>MX</code> | <code>NAPTR</code> | <code>NS</code> | <code>PTR</code> | <code>SOA</code> | <code>SPF</code> | <code>SRV</code> | <code>TXT</code> </p> <p>Values for weighted, latency, geolocation, and failover resource record sets: <code>A</code> | <code>AAAA</code> | <code>CAA</code> | <code>CNAME</code> | <code>MX</code> | <code>NAPTR</code> | <code>PTR</code> | <code>SPF</code> | <code>SRV</code> | <code>TXT</code>. When creating a group of weighted, latency, geolocation, or failover resource record sets, specify the same value for all of the resource record sets in the group.</p> <p>Valid values for multivalue answer resource record sets: <code>A</code> | <code>AAAA</code> | <code>MX</code> | <code>NAPTR</code> | <code>PTR</code> | <code>SPF</code> | <code>SRV</code> | <code>TXT</code> </p> <note> <p>SPF records were formerly used to verify the identity of the sender of email messages. However, we no longer recommend that you create resource record sets for which the value of <code>Type</code> is <code>SPF</code>. RFC 7208, <i>Sender Policy Framework (SPF) for Authorizing Use of Domains in Email, Version 1</i>, has been updated to say, "...[I]ts existence and mechanism defined in [RFC4408] have led to some interoperability issues. Accordingly, its use is no longer appropriate for SPF version 1; implementations are not to use it." In RFC 7208, see section 14.1, <a href="http://tools.ietf.org/html/rfc7208#section-14.1">The SPF DNS Record Type</a>.</p> </note> <p>Values for alias resource record sets:</p> <ul> <li> <p> <b>CloudFront distributions:</b> <code>A</code> </p> <p>If IPv6 is enabled for the distribution, create two resource record sets to route traffic to your distribution, one with a value of <code>A</code> and one with a value of <code>AAAA</code>. </p> </li> <li> <p> <b>AWS Elastic Beanstalk environment that has a regionalized subdomain</b>: <code>A</code> </p> </li> <li> <p> <b>ELB load balancers:</b> <code>A</code> | <code>AAAA</code> </p> </li> <li> <p> <b>Amazon S3 buckets:</b> <code>A</code> </p> </li> <li> <p> <b>Another resource record set in this hosted zone:</b> Specify the type of the resource record set that you're creating the alias for. All values are supported except <code>NS</code> and <code>SOA</code>.</p> </li> </ul>
    RRType Type = 12;
    // <p> <i>Weighted resource record sets only:</i> Among resource record sets that have the same combination of DNS name and type, a value that determines the proportion of DNS queries that Amazon Route 53 responds to using the current resource record set. Amazon Route 53 calculates the sum of the weights for the resource record sets that have the same combination of DNS name and type. Amazon Route 53 then responds to queries based on the ratio of a resource's weight to the total. Note the following:</p> <ul> <li> <p>You must specify a value for the <code>Weight</code> element for every weighted resource record set.</p> </li> <li> <p>You can only specify one <code>ResourceRecord</code> per weighted resource record set.</p> </li> <li> <p>You can't create latency, failover, or geolocation resource record sets that have the same values for the <code>Name</code> and <code>Type</code> elements as weighted resource record sets.</p> </li> <li> <p>You can create a maximum of 100 weighted resource record sets that have the same values for the <code>Name</code> and <code>Type</code> elements.</p> </li> <li> <p>For weighted (but not weighted alias) resource record sets, if you set <code>Weight</code> to <code>0</code> for a resource record set, Amazon Route 53 never responds to queries with the applicable value for that resource record set. However, if you set <code>Weight</code> to <code>0</code> for all resource record sets that have the same combination of DNS name and type, traffic is routed to all resources with equal probability.</p> <p>The effect of setting <code>Weight</code> to <code>0</code> is different when you associate health checks with weighted resource record sets. For more information, see <a href="http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-configuring-options.html">Options for Configuring Amazon Route 53 Active-Active and Active-Passive Failover</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> </li> </ul>
    integer Weight = 13;
}

enum ResourceRecordSetFailover {
    PRIMARY = 0;
    SECONDARY = 1;
}

enum ResourceRecordSetRegion {
    USEAST1 = 0;
    USEAST2 = 1;
    USWEST1 = 2;
    USWEST2 = 3;
    CACENTRAL1 = 4;
    EUWEST1 = 5;
    EUWEST2 = 6;
    EUCENTRAL1 = 7;
    APSOUTHEAST1 = 8;
    APSOUTHEAST2 = 9;
    APNORTHEAST1 = 10;
    APNORTHEAST2 = 11;
    SAEAST1 = 12;
    CNNORTH1 = 13;
    APSOUTH1 = 14;
}



repeated ResourceRecordSet ResourceRecordSets = 1

repeated ResourceRecord ResourceRecords = 1

message ResourceTagSet {
    // The ID for the specified resource.
    string ResourceId = 1;
    // <p>The type of the resource.</p> <ul> <li> <p>The resource type for health checks is <code>healthcheck</code>.</p> </li> <li> <p>The resource type for hosted zones is <code>hostedzone</code>.</p> </li> </ul>
    TagResourceType ResourceType = 2;
    // The tags associated with the specified resource.
    array Tags = 3;
}

repeated ResourceTagSet ResourceTagSetList = 1





enum Statistic {
    AVERAGE = 0;
    SUM = 1;
    SAMPLECOUNT = 2;
    MAXIMUM = 3;
    MINIMUM = 4;
}

message StatusReport {
    // The date and time that the health checker performed the health check in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601 format</a> and Coordinated Universal Time (UTC). For example, the value <code>2017-03-27T17:48:16.751Z</code> represents March 27, 2017 at 17:48:16.751 UTC.
    string CheckedTime = 1;
    // A description of the status of the health check endpoint as reported by one of the Amazon Route 53 health checkers.
    string Status = 2;
}

message Tag {
    // <p>The value of <code>Key</code> depends on the operation that you want to perform:</p> <ul> <li> <p> <b>Add a tag to a health check or hosted zone</b>: <code>Key</code> is the name that you want to give the new tag.</p> </li> <li> <p> <b>Edit a tag</b>: <code>Key</code> is the name of the tag that you want to change the <code>Value</code> for.</p> </li> <li> <p> <b> Delete a key</b>: <code>Key</code> is the name of the tag you want to remove.</p> </li> <li> <p> <b>Give a name to a health check</b>: Edit the default <code>Name</code> tag. In the Amazon Route 53 console, the list of your health checks includes a <b>Name</b> column that lets you see the name that you've given to each health check.</p> </li> </ul>
    string Key = 1;
    // <p>The value of <code>Value</code> depends on the operation that you want to perform:</p> <ul> <li> <p> <b>Add a tag to a health check or hosted zone</b>: <code>Value</code> is the value that you want to give the new tag.</p> </li> <li> <p> <b>Edit a tag</b>: <code>Value</code> is the new value that you want to assign the tag.</p> </li> </ul>
    string Value = 2;
}



repeated string TagKeyList = 1

repeated Tag TagList = 1



repeated string TagResourceIdList = 1

enum TagResourceType {
    HEALTHCHECK = 0;
    HOSTEDZONE = 1;
}

message TestDNSAnswerRequest {
}

message TestDNSAnswerResponse {
    // The Amazon Route 53 name server used to respond to the request.
    string Nameserver = 1;
    // The protocol that Amazon Route 53 used to respond to the request, either <code>UDP</code> or <code>TCP</code>.
    string Protocol = 2;
    // A list that contains values that Amazon Route 53 returned for this resource record set.
    array RecordData = 3;
    // The name of the resource record set that you submitted a request for.
    string RecordName = 4;
    // The type of the resource record set that you submitted a request for.
    RRType RecordType = 5;
    // A code that indicates whether the request is valid or not. The most common response code is <code>NOERROR</code>, meaning that the request is valid. If the response is not valid, Amazon Route 53 returns a response code that describes the error. For a list of possible response codes, see <a href="http://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-6">DNS RCODES</a> on the IANA website.
    string ResponseCode = 6;
}

message ThrottlingException {
    string message = 1;
}

message TooManyHealthChecks {
    string message = 1;
}

message TooManyHostedZones {
    // Descriptive message for the error response.
    string message = 1;
}

message TooManyTrafficPolicies {
    // Descriptive message for the error response.
    string message = 1;
}

message TooManyTrafficPolicyInstances {
    // Descriptive message for the error response.
    string message = 1;
}

message TooManyVPCAssociationAuthorizations {
    // Descriptive message for the error response.
    string message = 1;
}

repeated TrafficPolicy TrafficPolicies = 1

message TrafficPolicy {
    // The comment that you specify in the <code>CreateTrafficPolicy</code> request, if any.
    string Comment = 1;
    // The definition of a traffic policy in JSON format. You specify the JSON document to use for a new traffic policy in the <code>CreateTrafficPolicy</code> request. For more information about the JSON format, see <a href="http://docs.aws.amazon.com/Route53/latest/APIReference/api-policies-traffic-policy-document-format.html">Traffic Policy Document Format</a>.
    string Document = 2;
    // The ID that Amazon Route 53 assigned to a traffic policy when you created it.
    string Id = 3;
    // The name that you specified when you created the traffic policy.
    string Name = 4;
    // The DNS type of the resource record sets that Amazon Route 53 creates when you use a traffic policy to create a traffic policy instance.
    RRType Type = 5;
    // The version number that Amazon Route 53 assigns to a traffic policy. For a new traffic policy, the value of <code>Version</code> is always 1.
    integer Version = 6;
}

message TrafficPolicyAlreadyExists {
    // Descriptive message for the error response.
    string message = 1;
}

message TrafficPolicyInUse {
    // Descriptive message for the error response.
    string message = 1;
}

message TrafficPolicyInstance {
    // The ID of the hosted zone that Amazon Route 53 created resource record sets in.
    string HostedZoneId = 1;
    // The ID that Amazon Route 53 assigned to the new traffic policy instance.
    string Id = 2;
    // If <code>State</code> is <code>Failed</code>, an explanation of the reason for the failure. If <code>State</code> is another value, <code>Message</code> is empty.
    string Message = 3;
    // The DNS name, such as www.example.com, for which Amazon Route 53 responds to queries by using the resource record sets that are associated with this traffic policy instance.
    string Name = 4;
    // <p>The value of <code>State</code> is one of the following values:</p> <dl> <dt>Applied</dt> <dd> <p>Amazon Route 53 has finished creating resource record sets, and changes have propagated to all Amazon Route 53 edge locations.</p> </dd> <dt>Creating</dt> <dd> <p>Amazon Route 53 is creating the resource record sets. Use <code>GetTrafficPolicyInstance</code> to confirm that the <code>CreateTrafficPolicyInstance</code> request completed successfully.</p> </dd> <dt>Failed</dt> <dd> <p>Amazon Route 53 wasn't able to create or update the resource record sets. When the value of <code>State</code> is <code>Failed</code>, see <code>Message</code> for an explanation of what caused the request to fail.</p> </dd> </dl>
    string State = 5;
    // The TTL that Amazon Route 53 assigned to all of the resource record sets that it created in the specified hosted zone.
    integer TTL = 6;
    // The ID of the traffic policy that Amazon Route 53 used to create resource record sets in the specified hosted zone.
    string TrafficPolicyId = 7;
    // The DNS type that Amazon Route 53 assigned to all of the resource record sets that it created for this traffic policy instance.
    RRType TrafficPolicyType = 8;
    // The version of the traffic policy that Amazon Route 53 used to create resource record sets in the specified hosted zone.
    integer TrafficPolicyVersion = 9;
}

message TrafficPolicyInstanceAlreadyExists {
    // Descriptive message for the error response.
    string message = 1;
}







repeated TrafficPolicyInstance TrafficPolicyInstances = 1



repeated TrafficPolicySummary TrafficPolicySummaries = 1

message TrafficPolicySummary {
    // The ID that Amazon Route 53 assigned to the traffic policy when you created it.
    string Id = 1;
    // The version number of the latest version of the traffic policy.
    integer LatestVersion = 2;
    // The name that you specified for the traffic policy when you created it.
    string Name = 3;
    // The number of traffic policies that are associated with the current AWS account.
    integer TrafficPolicyCount = 4;
    // The DNS type of the resource record sets that Amazon Route 53 creates when you use a traffic policy to create a traffic policy instance.
    RRType Type = 5;
}

message UpdateHealthCheckRequest {
    AlarmIdentifier AlarmIdentifier = 1;
    // A complex type that contains one <code>ChildHealthCheck</code> element for each health check that you want to associate with a <code>CALCULATED</code> health check.
    array ChildHealthChecks = 2;
    // <p>Specify whether you want Amazon Route 53 to send the value of <code>FullyQualifiedDomainName</code> to the endpoint in the <code>client_hello</code> message during <code>TLS</code> negotiation. This allows the endpoint to respond to <code>HTTPS</code> health check requests with the applicable SSL/TLS certificate.</p> <p>Some endpoints require that HTTPS requests include the host name in the <code>client_hello</code> message. If you don't enable SNI, the status of the health check will be SSL alert <code>handshake_failure</code>. A health check can also have that status for other reasons. If SNI is enabled and you're still getting the error, check the SSL/TLS configuration on your endpoint and confirm that your certificate is valid.</p> <p>The SSL/TLS certificate on your endpoint includes a domain name in the <code>Common Name</code> field and possibly several more in the <code>Subject Alternative Names</code> field. One of the domain names in the certificate should match the value that you specify for <code>FullyQualifiedDomainName</code>. If the endpoint responds to the <code>client_hello</code> message with a certificate that does not include the domain name that you specified in <code>FullyQualifiedDomainName</code>, a health checker will retry the handshake. In the second attempt, the health checker will omit <code>FullyQualifiedDomainName</code> from the <code>client_hello</code> message.</p>
    boolean EnableSNI = 3;
    // <p>The number of consecutive health checks that an endpoint must pass or fail for Amazon Route 53 to change the current status of the endpoint from unhealthy to healthy or vice versa. For more information, see <a href="http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html">How Amazon Route 53 Determines Whether an Endpoint Is Healthy</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> <p>If you don't specify a value for <code>FailureThreshold</code>, the default value is three health checks.</p>
    integer FailureThreshold = 4;
    // <p>Amazon Route 53 behavior depends on whether you specify a value for <code>IPAddress</code>.</p> <note> <p>If a health check already has a value for <code>IPAddress</code>, you can change the value. However, you can't update an existing health check to add or remove the value of <code>IPAddress</code>. </p> </note> <p> <b>If you specify a value for</b> <code>IPAddress</code>:</p> <p>Amazon Route 53 sends health check requests to the specified IPv4 or IPv6 address and passes the value of <code>FullyQualifiedDomainName</code> in the <code>Host</code> header for all health checks except TCP health checks. This is typically the fully qualified DNS name of the endpoint on which you want Amazon Route 53 to perform health checks.</p> <p>When Amazon Route 53 checks the health of an endpoint, here is how it constructs the <code>Host</code> header:</p> <ul> <li> <p>If you specify a value of <code>80</code> for <code>Port</code> and <code>HTTP</code> or <code>HTTP_STR_MATCH</code> for <code>Type</code>, Amazon Route 53 passes the value of <code>FullyQualifiedDomainName</code> to the endpoint in the <code>Host</code> header.</p> </li> <li> <p>If you specify a value of <code>443</code> for <code>Port</code> and <code>HTTPS</code> or <code>HTTPS_STR_MATCH</code> for <code>Type</code>, Amazon Route 53 passes the value of <code>FullyQualifiedDomainName</code> to the endpoint in the <code>Host</code> header.</p> </li> <li> <p>If you specify another value for <code>Port</code> and any value except <code>TCP</code> for <code>Type</code>, Amazon Route 53 passes <i> <code>FullyQualifiedDomainName</code>:<code>Port</code> </i> to the endpoint in the <code>Host</code> header.</p> </li> </ul> <p>If you don't specify a value for <code>FullyQualifiedDomainName</code>, Amazon Route 53 substitutes the value of <code>IPAddress</code> in the <code>Host</code> header in each of the above cases.</p> <p> <b>If you don't specify a value for</b> <code>IPAddress</code>:</p> <p>If you don't specify a value for <code>IPAddress</code>, Amazon Route 53 sends a DNS request to the domain that you specify in <code>FullyQualifiedDomainName</code> at the interval you specify in <code>RequestInterval</code>. Using an IPv4 address that is returned by DNS, Amazon Route 53 then checks the health of the endpoint.</p> <note> <p>If you don't specify a value for <code>IPAddress</code>, Amazon Route 53 uses only IPv4 to send health checks to the endpoint. If there's no resource record set with a type of A for the name that you specify for <code>FullyQualifiedDomainName</code>, the health check fails with a "DNS resolution failed" error.</p> </note> <p>If you want to check the health of weighted, latency, or failover resource record sets and you choose to specify the endpoint only by <code>FullyQualifiedDomainName</code>, we recommend that you create a separate health check for each endpoint. For example, create a health check for each HTTP server that is serving content for www.example.com. For the value of <code>FullyQualifiedDomainName</code>, specify the domain name of the server (such as <code>us-east-2-www.example.com</code>), not the name of the resource record sets (www.example.com).</p> <important> <p>In this configuration, if the value of <code>FullyQualifiedDomainName</code> matches the name of the resource record sets and you then associate the health check with those resource record sets, health check results will be unpredictable.</p> </important> <p>In addition, if the value of <code>Type</code> is <code>HTTP</code>, <code>HTTPS</code>, <code>HTTP_STR_MATCH</code>, or <code>HTTPS_STR_MATCH</code>, Amazon Route 53 passes the value of <code>FullyQualifiedDomainName</code> in the <code>Host</code> header, as it does when you specify a value for <code>IPAddress</code>. If the value of <code>Type</code> is <code>TCP</code>, Amazon Route 53 doesn't pass a <code>Host</code> header.</p>
    string FullyQualifiedDomainName = 5;
    // <p>A sequential counter that Amazon Route 53 sets to <code>1</code> when you create a health check and increments by 1 each time you update settings for the health check.</p> <p>We recommend that you use <code>GetHealthCheck</code> or <code>ListHealthChecks</code> to get the current value of <code>HealthCheckVersion</code> for the health check that you want to update, and that you include that value in your <code>UpdateHealthCheck</code> request. This prevents Amazon Route 53 from overwriting an intervening update:</p> <ul> <li> <p>If the value in the <code>UpdateHealthCheck</code> request matches the value of <code>HealthCheckVersion</code> in the health check, Amazon Route 53 updates the health check with the new settings.</p> </li> <li> <p>If the value of <code>HealthCheckVersion</code> in the health check is greater, the health check was changed after you got the version number. Amazon Route 53 does not update the health check, and it returns a <code>HealthCheckVersionMismatch</code> error.</p> </li> </ul>
    integer HealthCheckVersion = 6;
    // <p>The number of child health checks that are associated with a <code>CALCULATED</code> health that Amazon Route 53 must consider healthy for the <code>CALCULATED</code> health check to be considered healthy. To specify the child health checks that you want to associate with a <code>CALCULATED</code> health check, use the <code>ChildHealthChecks</code> and <code>ChildHealthCheck</code> elements.</p> <p>Note the following:</p> <ul> <li> <p>If you specify a number greater than the number of child health checks, Amazon Route 53 always considers this health check to be unhealthy.</p> </li> <li> <p>If you specify <code>0</code>, Amazon Route 53 always considers this health check to be healthy.</p> </li> </ul>
    integer HealthThreshold = 7;
    // <p>The IPv4 or IPv6 IP address for the endpoint that you want Amazon Route 53 to perform health checks on. If you don't specify a value for <code>IPAddress</code>, Amazon Route 53 sends a DNS request to resolve the domain name that you specify in <code>FullyQualifiedDomainName</code> at the interval that you specify in <code>RequestInterval</code>. Using an IP address that is returned by DNS, Amazon Route 53 then checks the health of the endpoint.</p> <p>Use one of the following formats for the value of <code>IPAddress</code>: </p> <ul> <li> <p> <b>IPv4 address</b>: four values between 0 and 255, separated by periods (.), for example, <code>192.0.2.44</code>.</p> </li> <li> <p> <b>IPv6 address</b>: eight groups of four hexadecimal values, separated by colons (:), for example, <code>2001:0db8:85a3:0000:0000:abcd:0001:2345</code>. You can also shorten IPv6 addresses as described in RFC 5952, for example, <code>2001:db8:85a3::abcd:1:2345</code>.</p> </li> </ul> <p>If the endpoint is an EC2 instance, we recommend that you create an Elastic IP address, associate it with your EC2 instance, and specify the Elastic IP address for <code>IPAddress</code>. This ensures that the IP address of your instance never changes. For more information, see the applicable documentation:</p> <ul> <li> <p>Linux: <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses (EIP)</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> </p> </li> <li> <p>Windows: <a href="http://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses (EIP)</a> in the <i>Amazon EC2 User Guide for Windows Instances</i> </p> </li> </ul> <note> <p>If a health check already has a value for <code>IPAddress</code>, you can change the value. However, you can't update an existing health check to add or remove the value of <code>IPAddress</code>. </p> </note> <p>For more information, see <a>UpdateHealthCheckRequest$FullyQualifiedDomainName</a>.</p> <p>Constraints: Amazon Route 53 can't check the health of endpoints for which the IP address is in local, private, non-routable, or multicast ranges. For more information about IP addresses for which you can't create health checks, see the following documents:</p> <ul> <li> <p> <a href="https://tools.ietf.org/html/rfc5735">RFC 5735, Special Use IPv4 Addresses</a> </p> </li> <li> <p> <a href="https://tools.ietf.org/html/rfc6598">RFC 6598, IANA-Reserved IPv4 Prefix for Shared Address Space</a> </p> </li> <li> <p> <a href="https://tools.ietf.org/html/rfc5156">RFC 5156, Special-Use IPv6 Addresses</a> </p> </li> </ul>
    string IPAddress = 8;
    // <p>When CloudWatch has insufficient data about the metric to determine the alarm state, the status that you want Amazon Route 53 to assign to the health check:</p> <ul> <li> <p> <code>Healthy</code>: Amazon Route 53 considers the health check to be healthy.</p> </li> <li> <p> <code>Unhealthy</code>: Amazon Route 53 considers the health check to be unhealthy.</p> </li> <li> <p> <code>LastKnownStatus</code>: Amazon Route 53 uses the status of the health check from the last time CloudWatch had sufficient data to determine the alarm state. For new health checks that have no last known status, the default status for the health check is healthy.</p> </li> </ul>
    InsufficientDataHealthStatus InsufficientDataHealthStatus = 9;
    // Specify whether you want Amazon Route 53 to invert the status of a health check, for example, to consider a health check unhealthy when it otherwise would be considered healthy.
    boolean Inverted = 10;
    // The port on the endpoint on which you want Amazon Route 53 to perform health checks.
    integer Port = 11;
    // A complex type that contains one <code>Region</code> element for each region that you want Amazon Route 53 health checkers to check the specified endpoint from.
    array Regions = 12;
    // <p>A complex type that contains one <code>ResetElement</code> element for each element that you want to reset to the default value. Valid values for <code>ResetElement</code> include the following:</p> <ul> <li> <p> <code>ChildHealthChecks</code>: Amazon Route 53 resets <a>HealthCheckConfig$ChildHealthChecks</a> to null.</p> </li> <li> <p> <code>FullyQualifiedDomainName</code>: Amazon Route 53 resets <a>HealthCheckConfig$FullyQualifiedDomainName</a> to null.</p> </li> <li> <p> <code>Regions</code>: Amazon Route 53 resets the <a>HealthCheckConfig$Regions</a> list to the default set of regions. </p> </li> <li> <p> <code>ResourcePath</code>: Amazon Route 53 resets <a>HealthCheckConfig$ResourcePath</a> to null.</p> </li> </ul>
    array ResetElements = 13;
    // <p>The path that you want Amazon Route 53 to request when performing health checks. The path can be any value for which your endpoint will return an HTTP status code of 2xx or 3xx when the endpoint is healthy, for example the file /docs/route53-health-check.html. </p> <p>Specify this value only if you want to change it.</p>
    string ResourcePath = 14;
    // If the value of <code>Type</code> is <code>HTTP_STR_MATCH</code> or <code>HTTP_STR_MATCH</code>, the string that you want Amazon Route 53 to search for in the response body from the specified resource. If the string appears in the response body, Amazon Route 53 considers the resource healthy. (You can't change the value of <code>Type</code> when you update a health check.)
    string SearchString = 15;
}

message UpdateHealthCheckResponse {
    HealthCheck HealthCheck = 1;
}

message UpdateHostedZoneCommentRequest {
    // The new comment for the hosted zone. If you don't specify a value for <code>Comment</code>, Amazon Route 53 deletes the existing value of the <code>Comment</code> element, if any.
    string Comment = 1;
}

message UpdateHostedZoneCommentResponse {
    HostedZone HostedZone = 1;
}

message UpdateTrafficPolicyCommentRequest {
    // The new comment for the specified traffic policy and version.
    string Comment = 1;
}

message UpdateTrafficPolicyCommentResponse {
    // A complex type that contains settings for the specified traffic policy.
    TrafficPolicy TrafficPolicy = 1;
}

message UpdateTrafficPolicyInstanceRequest {
    // The TTL that you want Amazon Route 53 to assign to all of the updated resource record sets.
    integer TTL = 1;
    // The ID of the traffic policy that you want Amazon Route 53 to use to update resource record sets for the specified traffic policy instance.
    string TrafficPolicyId = 2;
    // The version of the traffic policy that you want Amazon Route 53 to use to update resource record sets for the specified traffic policy instance.
    integer TrafficPolicyVersion = 3;
}

message UpdateTrafficPolicyInstanceResponse {
    // A complex type that contains settings for the updated traffic policy instance.
    TrafficPolicyInstance TrafficPolicyInstance = 1;
}

message VPC {
    string VPCId = 1;
    // (Private hosted zones only) The region in which you created an Amazon VPC.
    VPCRegion VPCRegion = 2;
}

message VPCAssociationAuthorizationNotFound {
    // Descriptive message for the error response.
    string message = 1;
}

message VPCAssociationNotFound {
    // Descriptive message for the error response.
    string message = 1;
}

enum VPCRegion {
    USEAST1 = 0;
    USEAST2 = 1;
    USWEST1 = 2;
    USWEST2 = 3;
    EUWEST1 = 4;
    EUWEST2 = 5;
    EUCENTRAL1 = 6;
    APSOUTHEAST1 = 7;
    APSOUTHEAST2 = 8;
    APSOUTH1 = 9;
    APNORTHEAST1 = 10;
    APNORTHEAST2 = 11;
    SAEAST1 = 12;
    CACENTRAL1 = 13;
    CNNORTH1 = 14;
}

repeated VPC VPCs = 1

















service AmazonRoute53Service {
    // <p>Returns the current status of a change batch request. The status is one of the following values:</p> <ul> <li> <p> <code>PENDING</code> indicates that the changes in this request have not propagated to all Amazon Route 53 DNS servers. This is the initial status of all change batch requests.</p> </li> <li> <p> <code>INSYNC</code> indicates that the changes have propagated to all Amazon Route 53 DNS servers. </p> </li> </ul>
    rpc Get20130401ChangeId(Get20130401ChangeIdRequest) returns (GetChangeResponse) {
      option (google.api.http) = {
        get: "//2013-04-01/change/{Id}"
        body: "body"
      };
    }
    //  <code>GetCheckerIpRanges</code> still works, but we recommend that you download ip-ranges.json, which includes IP address ranges for all AWS services. For more information, see <a href="http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/route-53-ip-addresses.html">IP Address Ranges of Amazon Route 53 Servers</a> in the <i>Amazon Route 53 Developer Guide</i>.
    rpc Get20130401Checkeripranges(Get20130401CheckeriprangesRequest) returns (GetCheckerIpRangesResponse) {
      option (google.api.http) = {
        get: "//2013-04-01/checkeripranges"
        body: "body"
      };
    }
    // Retrieves a list of the reusable delegation sets that are associated with the current AWS account.
    rpc Get20130401Delegationset(Get20130401DelegationsetRequest) returns (ListReusableDelegationSetsResponse) {
      option (google.api.http) = {
        get: "//2013-04-01/delegationset"
        body: "body"
      };
    }
    // Retrieves information about a specified reusable delegation set, including the four name servers that are assigned to the delegation set.
    rpc Get20130401DelegationsetId(Get20130401DelegationsetIdRequest) returns (GetReusableDelegationSetResponse) {
      option (google.api.http) = {
        get: "//2013-04-01/delegationset/{Id}"
        body: "body"
      };
    }
    // <p>Gets information about whether a specified geographic location is supported for Amazon Route 53 geolocation resource record sets.</p> <p>Use the following syntax to determine whether a continent is supported for geolocation:</p> <p> <code>GET /2013-04-01/geolocation?ContinentCode=<i>two-letter abbreviation for a continent</i> </code> </p> <p>Use the following syntax to determine whether a country is supported for geolocation:</p> <p> <code>GET /2013-04-01/geolocation?CountryCode=<i>two-character country code</i> </code> </p> <p>Use the following syntax to determine whether a subdivision of a country is supported for geolocation:</p> <p> <code>GET /2013-04-01/geolocation?CountryCode=<i>two-character country code</i>&amp;SubdivisionCode=<i>subdivision code</i> </code> </p>
    rpc Get20130401Geolocation(Get20130401GeolocationRequest) returns (GetGeoLocationResponse) {
      option (google.api.http) = {
        get: "//2013-04-01/geolocation"
        body: "body"
      };
    }
    // <p>Retrieves a list of supported geo locations.</p> <p>Countries are listed first, and continents are listed last. If Amazon Route 53 supports subdivisions for a country (for example, states or provinces), the subdivisions for that country are listed in alphabetical order immediately after the corresponding country.</p>
    rpc Get20130401Geolocations(Get20130401GeolocationsRequest) returns (ListGeoLocationsResponse) {
      option (google.api.http) = {
        get: "//2013-04-01/geolocations"
        body: "body"
      };
    }
    // Retrieve a list of the health checks that are associated with the current AWS account.
    rpc Get20130401Healthcheck(Get20130401HealthcheckRequest) returns (ListHealthChecksResponse) {
      option (google.api.http) = {
        get: "//2013-04-01/healthcheck"
        body: "body"
      };
    }
    // <p>Updates an existing health check. Note that some values can't be updated. </p> <p>For more information about updating health checks, see <a href="http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/health-checks-creating-deleting.html">Creating, Updating, and Deleting Health Checks</a> in the <i>Amazon Route 53 Developer Guide</i>.</p>
    rpc Post20130401HealthcheckHealthCheckId(Post20130401HealthcheckHealthCheckIdRequest) returns (UpdateHealthCheckResponse) {
      option (google.api.http) = {
        post: "//2013-04-01/healthcheck/{HealthCheckId}"
        body: "body"
      };
    }
    // Gets the reason that a specified health check failed most recently.
    rpc Get20130401HealthcheckHealthCheckIdLastfailurereason(Get20130401HealthcheckHealthCheckIdLastfailurereasonRequest) returns (GetHealthCheckLastFailureReasonResponse) {
      option (google.api.http) = {
        get: "//2013-04-01/healthcheck/{HealthCheckId}/lastfailurereason"
        body: "body"
      };
    }
    // Gets status of a specified health check.
    rpc Get20130401HealthcheckHealthCheckIdStatus(Get20130401HealthcheckHealthCheckIdStatusRequest) returns (GetHealthCheckStatusResponse) {
      option (google.api.http) = {
        get: "//2013-04-01/healthcheck/{HealthCheckId}/status"
        body: "body"
      };
    }
    // Retrieves the number of health checks that are associated with the current AWS account.
    rpc Get20130401Healthcheckcount(Get20130401HealthcheckcountRequest) returns (GetHealthCheckCountResponse) {
      option (google.api.http) = {
        get: "//2013-04-01/healthcheckcount"
        body: "body"
      };
    }
    // <p>Retrieves a list of the public and private hosted zones that are associated with the current AWS account. The response includes a <code>HostedZones</code> child element for each hosted zone.</p> <p>Amazon Route 53 returns a maximum of 100 items in each response. If you have a lot of hosted zones, you can use the <code>maxitems</code> parameter to list them in groups of up to 100.</p>
    rpc Get20130401Hostedzone(Get20130401HostedzoneRequest) returns (ListHostedZonesResponse) {
      option (google.api.http) = {
        get: "//2013-04-01/hostedzone"
        body: "body"
      };
    }
    // Updates the comment for a specified hosted zone.
    rpc Post20130401HostedzoneId(Post20130401HostedzoneIdRequest) returns (UpdateHostedZoneCommentResponse) {
      option (google.api.http) = {
        post: "//2013-04-01/hostedzone/{Id}"
        body: "body"
      };
    }
    // <p>Associates an Amazon VPC with a private hosted zone. </p> <important> <p>To perform the association, the VPC and the private hosted zone must already exist. You can't convert a public hosted zone into a private hosted zone.</p> </important> <note> <p>If you want to associate a VPC that was created by using one AWS account with a private hosted zone that was created by using a different account, the AWS account that created the private hosted zone must first submit a <code>CreateVPCAssociationAuthorization</code> request. Then the account that created the VPC must submit an <code>AssociateVPCWithHostedZone</code> request.</p> </note>
    rpc Post20130401HostedzoneIdAssociatevpc(Post20130401HostedzoneIdAssociatevpcRequest) returns (AssociateVPCWithHostedZoneResponse) {
      option (google.api.http) = {
        post: "//2013-04-01/hostedzone/{Id}/associatevpc"
        body: "body"
      };
    }
    // <p>Gets a list of the VPCs that were created by other accounts and that can be associated with a specified hosted zone because you've submitted one or more <code>CreateVPCAssociationAuthorization</code> requests. </p> <p>The response includes a <code>VPCs</code> element with a <code>VPC</code> child element for each VPC that can be associated with the hosted zone.</p>
    rpc Get20130401HostedzoneIdAuthorizevpcassociation(Get20130401HostedzoneIdAuthorizevpcassociationRequest) returns (ListVPCAssociationAuthorizationsResponse) {
      option (google.api.http) = {
        get: "//2013-04-01/hostedzone/{Id}/authorizevpcassociation"
        body: "body"
      };
    }
    // <p>Removes authorization to submit an <code>AssociateVPCWithHostedZone</code> request to associate a specified VPC with a hosted zone that was created by a different account. You must use the account that created the hosted zone to submit a <code>DeleteVPCAssociationAuthorization</code> request.</p> <important> <p>Sending this request only prevents the AWS account that created the VPC from associating the VPC with the Amazon Route 53 hosted zone in the future. If the VPC is already associated with the hosted zone, <code>DeleteVPCAssociationAuthorization</code> won't disassociate the VPC from the hosted zone. If you want to delete an existing association, use <code>DisassociateVPCFromHostedZone</code>.</p> </important>
    rpc Post20130401HostedzoneIdDeauthorizevpcassociation(Post20130401HostedzoneIdDeauthorizevpcassociationRequest) returns (DeleteVPCAssociationAuthorizationResponse) {
      option (google.api.http) = {
        post: "//2013-04-01/hostedzone/{Id}/deauthorizevpcassociation"
        body: "body"
      };
    }
    // <p>Disassociates a VPC from a Amazon Route 53 private hosted zone. </p> <note> <p>You can't disassociate the last VPC from a private hosted zone.</p> </note> <important> <p>You can't disassociate a VPC from a private hosted zone when only one VPC is associated with the hosted zone. You also can't convert a private hosted zone into a public hosted zone.</p> </important>
    rpc Post20130401HostedzoneIdDisassociatevpc(Post20130401HostedzoneIdDisassociatevpcRequest) returns (DisassociateVPCFromHostedZoneResponse) {
      option (google.api.http) = {
        post: "//2013-04-01/hostedzone/{Id}/disassociatevpc"
        body: "body"
      };
    }
    // <p>Lists the resource record sets in a specified hosted zone.</p> <p> <code>ListResourceRecordSets</code> returns up to 100 resource record sets at a time in ASCII order, beginning at a position specified by the <code>name</code> and <code>type</code> elements. The action sorts results first by DNS name with the labels reversed, for example:</p> <p> <code>com.example.www.</code> </p> <p>Note the trailing dot, which can change the sort order in some circumstances.</p> <p>When multiple records have the same DNS name, the action sorts results by the record type.</p> <p>You can use the name and type elements to adjust the beginning position of the list of resource record sets returned:</p> <dl> <dt>If you do not specify Name or Type</dt> <dd> <p>The results begin with the first resource record set that the hosted zone contains.</p> </dd> <dt>If you specify Name but not Type</dt> <dd> <p>The results begin with the first resource record set in the list whose name is greater than or equal to <code>Name</code>.</p> </dd> <dt>If you specify Type but not Name</dt> <dd> <p>Amazon Route 53 returns the <code>InvalidInput</code> error.</p> </dd> <dt>If you specify both Name and Type</dt> <dd> <p>The results begin with the first resource record set in the list whose name is greater than or equal to <code>Name</code>, and whose type is greater than or equal to <code>Type</code>.</p> </dd> </dl> <p>This action returns the most current version of the records. This includes records that are <code>PENDING</code>, and that are not yet available on all Amazon Route 53 DNS servers.</p> <p>To ensure that you get an accurate listing of the resource record sets for a hosted zone at a point in time, do not submit a <code>ChangeResourceRecordSets</code> request while you're paging through the results of a <code>ListResourceRecordSets</code> request. If you do, some pages may display results without the latest changes while other pages display results with the latest changes.</p>
    rpc Get20130401HostedzoneIdRrset(Get20130401HostedzoneIdRrsetRequest) returns (ListResourceRecordSetsResponse) {
      option (google.api.http) = {
        get: "//2013-04-01/hostedzone/{Id}/rrset"
        body: "body"
      };
    }
    // <p>Creates, changes, or deletes a resource record set, which contains authoritative DNS information for a specified domain name or subdomain name. For example, you can use <code>ChangeResourceRecordSets</code> to create a resource record set that routes traffic for test.example.com to a web server that has an IP address of 192.0.2.44.</p> <p> <b>Change Batches and Transactional Changes</b> </p> <p>The request body must include a document with a <code>ChangeResourceRecordSetsRequest</code> element. The request body contains a list of change items, known as a change batch. Change batches are considered transactional changes. When using the Amazon Route 53 API to change resource record sets, Amazon Route 53 either makes all or none of the changes in a change batch request. This ensures that Amazon Route 53 never partially implements the intended changes to the resource record sets in a hosted zone. </p> <p>For example, a change batch request that deletes the <code>CNAME</code> record for www.example.com and creates an alias resource record set for www.example.com. Amazon Route 53 deletes the first resource record set and creates the second resource record set in a single operation. If either the <code>DELETE</code> or the <code>CREATE</code> action fails, then both changes (plus any other changes in the batch) fail, and the original <code>CNAME</code> record continues to exist.</p> <important> <p>Due to the nature of transactional changes, you can't delete the same resource record set more than once in a single change batch. If you attempt to delete the same change batch more than once, Amazon Route 53 returns an <code>InvalidChangeBatch</code> error.</p> </important> <p> <b>Traffic Flow</b> </p> <p>To create resource record sets for complex routing configurations, use either the traffic flow visual editor in the Amazon Route 53 console or the API actions for traffic policies and traffic policy instances. Save the configuration as a traffic policy, then associate the traffic policy with one or more domain names (such as example.com) or subdomain names (such as www.example.com), in the same hosted zone or in multiple hosted zones. You can roll back the updates if the new configuration isn't performing as expected. For more information, see <a href="http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/traffic-flow.html">Using Traffic Flow to Route DNS Traffic</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> <p> <b>Create, Delete, and Upsert</b> </p> <p>Use <code>ChangeResourceRecordsSetsRequest</code> to perform the following actions:</p> <ul> <li> <p> <code>CREATE</code>: Creates a resource record set that has the specified values.</p> </li> <li> <p> <code>DELETE</code>: Deletes an existing resource record set that has the specified values.</p> </li> <li> <p> <code>UPSERT</code>: If a resource record set does not already exist, AWS creates it. If a resource set does exist, Amazon Route 53 updates it with the values in the request. </p> </li> </ul> <p> <b>Syntaxes for Creating, Updating, and Deleting Resource Record Sets</b> </p> <p>The syntax for a request depends on the type of resource record set that you want to create, delete, or update, such as weighted, alias, or failover. The XML elements in your request must appear in the order listed in the syntax. </p> <p>For an example for each type of resource record set, see "Examples."</p> <p>Don't refer to the syntax in the "Parameter Syntax" section, which includes all of the elements for every kind of resource record set that you can create, delete, or update by using <code>ChangeResourceRecordSets</code>. </p> <p> <b>Change Propagation to Amazon Route 53 DNS Servers</b> </p> <p>When you submit a <code>ChangeResourceRecordSets</code> request, Amazon Route 53 propagates your changes to all of the Amazon Route 53 authoritative DNS servers. While your changes are propagating, <code>GetChange</code> returns a status of <code>PENDING</code>. When propagation is complete, <code>GetChange</code> returns a status of <code>INSYNC</code>. Changes generally propagate to all Amazon Route 53 name servers within 60 seconds. For more information, see <a>GetChange</a>.</p> <p> <b>Limits on ChangeResourceRecordSets Requests</b> </p> <p>For information about the limits on a <code>ChangeResourceRecordSets</code> request, see <a href="http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DNSLimitations.html">Limits</a> in the <i>Amazon Route 53 Developer Guide</i>.</p>
    rpc Post20130401HostedzoneIdRrset(Post20130401HostedzoneIdRrsetRequest) returns (ChangeResourceRecordSetsResponse) {
      option (google.api.http) = {
        post: "//2013-04-01/hostedzone/{Id}/rrset/"
        body: "body"
      };
    }
    // Retrieves the number of hosted zones that are associated with the current AWS account.
    rpc Get20130401Hostedzonecount(Get20130401HostedzonecountRequest) returns (GetHostedZoneCountResponse) {
      option (google.api.http) = {
        get: "//2013-04-01/hostedzonecount"
        body: "body"
      };
    }
    // <p>Retrieves a list of your hosted zones in lexicographic order. The response includes a <code>HostedZones</code> child element for each hosted zone created by the current AWS account. </p> <p> <code>ListHostedZonesByName</code> sorts hosted zones by name with the labels reversed. For example:</p> <p> <code>com.example.www.</code> </p> <p>Note the trailing dot, which can change the sort order in some circumstances.</p> <p>If the domain name includes escape characters or Punycode, <code>ListHostedZonesByName</code> alphabetizes the domain name using the escaped or Punycoded value, which is the format that Amazon Route 53 saves in its database. For example, to create a hosted zone for exämple.com, you specify ex\344mple.com for the domain name. <code>ListHostedZonesByName</code> alphabetizes it as:</p> <p> <code>com.ex\344mple.</code> </p> <p>The labels are reversed and alphabetized using the escaped value. For more information about valid domain name formats, including internationalized domain names, see <a href="http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DomainNameFormat.html">DNS Domain Name Format</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> <p>Amazon Route 53 returns up to 100 items in each response. If you have a lot of hosted zones, use the <code>MaxItems</code> parameter to list them in groups of up to 100. The response includes values that help navigate from one group of <code>MaxItems</code> hosted zones to the next:</p> <ul> <li> <p>The <code>DNSName</code> and <code>HostedZoneId</code> elements in the response contain the values, if any, specified for the <code>dnsname</code> and <code>hostedzoneid</code> parameters in the request that produced the current response.</p> </li> <li> <p>The <code>MaxItems</code> element in the response contains the value, if any, that you specified for the <code>maxitems</code> parameter in the request that produced the current response.</p> </li> <li> <p>If the value of <code>IsTruncated</code> in the response is true, there are more hosted zones associated with the current AWS account. </p> <p>If <code>IsTruncated</code> is false, this response includes the last hosted zone that is associated with the current account. The <code>NextDNSName</code> element and <code>NextHostedZoneId</code> elements are omitted from the response.</p> </li> <li> <p>The <code>NextDNSName</code> and <code>NextHostedZoneId</code> elements in the response contain the domain name and the hosted zone ID of the next hosted zone that is associated with the current AWS account. If you want to list more hosted zones, make another call to <code>ListHostedZonesByName</code>, and specify the value of <code>NextDNSName</code> and <code>NextHostedZoneId</code> in the <code>dnsname</code> and <code>hostedzoneid</code> parameters, respectively.</p> </li> </ul>
    rpc Get20130401Hostedzonesbyname(Get20130401HostedzonesbynameRequest) returns (ListHostedZonesByNameResponse) {
      option (google.api.http) = {
        get: "//2013-04-01/hostedzonesbyname"
        body: "body"
      };
    }
    // <p>Lists the configurations for DNS query logging that are associated with the current AWS account or the configuration that is associated with a specified hosted zone.</p> <p>For more information about DNS query logs, see <a>CreateQueryLoggingConfig</a>. Additional information, including the format of DNS query logs, appears in <a href="http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/query-logs.html">Logging DNS Queries</a> in the <i>Amazon Route 53 Developer Guide</i>.</p>
    rpc Get20130401Queryloggingconfig(Get20130401QueryloggingconfigRequest) returns (ListQueryLoggingConfigsResponse) {
      option (google.api.http) = {
        get: "//2013-04-01/queryloggingconfig"
        body: "body"
      };
    }
    // <p>Gets information about a specified configuration for DNS query logging.</p> <p>For more information about DNS query logs, see <a>CreateQueryLoggingConfig</a> and <a href="http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/query-logs.html">Logging DNS Queries</a>.</p>
    rpc Get20130401QueryloggingconfigId(Get20130401QueryloggingconfigIdRequest) returns (GetQueryLoggingConfigResponse) {
      option (google.api.http) = {
        get: "//2013-04-01/queryloggingconfig/{Id}"
        body: "body"
      };
    }
    // <p>Lists tags for up to 10 health checks or hosted zones.</p> <p>For information about using tags for cost allocation, see <a href="http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html">Using Cost Allocation Tags</a> in the <i>AWS Billing and Cost Management User Guide</i>.</p>
    rpc Post20130401TagsResourceType(Post20130401TagsResourceTypeRequest) returns (ListTagsForResourcesResponse) {
      option (google.api.http) = {
        post: "//2013-04-01/tags/{ResourceType}"
        body: "body"
      };
    }
    // <p>Lists tags for one health check or hosted zone. </p> <p>For information about using tags for cost allocation, see <a href="http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html">Using Cost Allocation Tags</a> in the <i>AWS Billing and Cost Management User Guide</i>.</p>
    rpc Get20130401TagsResourceTypeResourceId(Get20130401TagsResourceTypeResourceIdRequest) returns (ListTagsForResourceResponse) {
      option (google.api.http) = {
        get: "//2013-04-01/tags/{ResourceType}/{ResourceId}"
        body: "body"
      };
    }
    // Gets the value that Amazon Route 53 returns in response to a DNS request for a specified record name and type. You can optionally specify the IP address of a DNS resolver, an EDNS0 client subnet IP address, and a subnet mask.
    rpc Get20130401Testdnsanswer(Get20130401TestdnsanswerRequest) returns (TestDNSAnswerResponse) {
      option (google.api.http) = {
        get: "//2013-04-01/testdnsanswer"
        body: "body"
      };
    }
    // Gets information about the latest version for every traffic policy that is associated with the current AWS account. Policies are listed in the order in which they were created.
    rpc Get20130401Trafficpolicies(Get20130401TrafficpoliciesRequest) returns (ListTrafficPoliciesResponse) {
      option (google.api.http) = {
        get: "//2013-04-01/trafficpolicies"
        body: "body"
      };
    }
    // <p>Gets information about all of the versions for a specified traffic policy.</p> <p>Traffic policy versions are listed in numerical order by <code>VersionNumber</code>.</p>
    rpc Get20130401TrafficpoliciesIdVersions(Get20130401TrafficpoliciesIdVersionsRequest) returns (ListTrafficPolicyVersionsResponse) {
      option (google.api.http) = {
        get: "//2013-04-01/trafficpolicies/{Id}/versions"
        body: "body"
      };
    }
    // Creates a traffic policy, which you use to create multiple DNS resource record sets for one domain name (such as example.com) or one subdomain name (such as www.example.com).
    rpc Post20130401Trafficpolicy(Post20130401TrafficpolicyRequest) returns (CreateTrafficPolicyResponse) {
      option (google.api.http) = {
        post: "//2013-04-01/trafficpolicy"
        body: "body"
      };
    }
    // Creates a new version of an existing traffic policy. When you create a new version of a traffic policy, you specify the ID of the traffic policy that you want to update and a JSON-formatted document that describes the new version. You use traffic policies to create multiple DNS resource record sets for one domain name (such as example.com) or one subdomain name (such as www.example.com). You can create a maximum of 1000 versions of a traffic policy. If you reach the limit and need to create another version, you'll need to start a new traffic policy.
    rpc Post20130401TrafficpolicyId(Post20130401TrafficpolicyIdRequest) returns (CreateTrafficPolicyVersionResponse) {
      option (google.api.http) = {
        post: "//2013-04-01/trafficpolicy/{Id}"
        body: "body"
      };
    }
    // Updates the comment for a specified traffic policy version.
    rpc Post20130401TrafficpolicyIdVersion(Post20130401TrafficpolicyIdVersionRequest) returns (UpdateTrafficPolicyCommentResponse) {
      option (google.api.http) = {
        post: "//2013-04-01/trafficpolicy/{Id}/{Version}"
        body: "body"
      };
    }
    // Creates resource record sets in a specified hosted zone based on the settings in a specified traffic policy version. In addition, <code>CreateTrafficPolicyInstance</code> associates the resource record sets with a specified domain name (such as example.com) or subdomain name (such as www.example.com). Amazon Route 53 responds to DNS queries for the domain or subdomain name by using the resource record sets that <code>CreateTrafficPolicyInstance</code> created.
    rpc Post20130401Trafficpolicyinstance(Post20130401TrafficpolicyinstanceRequest) returns (CreateTrafficPolicyInstanceResponse) {
      option (google.api.http) = {
        post: "//2013-04-01/trafficpolicyinstance"
        body: "body"
      };
    }
    // <p>Updates the resource record sets in a specified hosted zone that were created based on the settings in a specified traffic policy version.</p> <p>When you update a traffic policy instance, Amazon Route 53 continues to respond to DNS queries for the root resource record set name (such as example.com) while it replaces one group of resource record sets with another. Amazon Route 53 performs the following operations:</p> <ol> <li> <p>Amazon Route 53 creates a new group of resource record sets based on the specified traffic policy. This is true regardless of how significant the differences are between the existing resource record sets and the new resource record sets. </p> </li> <li> <p>When all of the new resource record sets have been created, Amazon Route 53 starts to respond to DNS queries for the root resource record set name (such as example.com) by using the new resource record sets.</p> </li> <li> <p>Amazon Route 53 deletes the old group of resource record sets that are associated with the root resource record set name.</p> </li> </ol>
    rpc Post20130401TrafficpolicyinstanceId(Post20130401TrafficpolicyinstanceIdRequest) returns (UpdateTrafficPolicyInstanceResponse) {
      option (google.api.http) = {
        post: "//2013-04-01/trafficpolicyinstance/{Id}"
        body: "body"
      };
    }
    // Gets the number of traffic policy instances that are associated with the current AWS account.
    rpc Get20130401Trafficpolicyinstancecount(Get20130401TrafficpolicyinstancecountRequest) returns (GetTrafficPolicyInstanceCountResponse) {
      option (google.api.http) = {
        get: "//2013-04-01/trafficpolicyinstancecount"
        body: "body"
      };
    }
    // <p>Gets information about the traffic policy instances that you created by using the current AWS account.</p> <note> <p>After you submit an <code>UpdateTrafficPolicyInstance</code> request, there's a brief delay while Amazon Route 53 creates the resource record sets that are specified in the traffic policy definition. For more information, see the <code>State</code> response element.</p> </note> <p>Amazon Route 53 returns a maximum of 100 items in each response. If you have a lot of traffic policy instances, you can use the <code>MaxItems</code> parameter to list them in groups of up to 100.</p>
    rpc Get20130401Trafficpolicyinstances(Get20130401TrafficpolicyinstancesRequest) returns (ListTrafficPolicyInstancesResponse) {
      option (google.api.http) = {
        get: "//2013-04-01/trafficpolicyinstances"
        body: "body"
      };
    }
    // <p>Gets information about the traffic policy instances that you created in a specified hosted zone.</p> <note> <p>After you submit a <code>CreateTrafficPolicyInstance</code> or an <code>UpdateTrafficPolicyInstance</code> request, there's a brief delay while Amazon Route 53 creates the resource record sets that are specified in the traffic policy definition. For more information, see the <code>State</code> response element.</p> </note> <p>Amazon Route 53 returns a maximum of 100 items in each response. If you have a lot of traffic policy instances, you can use the <code>MaxItems</code> parameter to list them in groups of up to 100.</p>
    rpc Get20130401TrafficpolicyinstancesHostedzone(Get20130401TrafficpolicyinstancesHostedzoneRequest) returns (ListTrafficPolicyInstancesByHostedZoneResponse) {
      option (google.api.http) = {
        get: "//2013-04-01/trafficpolicyinstances/hostedzone"
        body: "body"
      };
    }
    // <p>Gets information about the traffic policy instances that you created by using a specify traffic policy version.</p> <note> <p>After you submit a <code>CreateTrafficPolicyInstance</code> or an <code>UpdateTrafficPolicyInstance</code> request, there's a brief delay while Amazon Route 53 creates the resource record sets that are specified in the traffic policy definition. For more information, see the <code>State</code> response element.</p> </note> <p>Amazon Route 53 returns a maximum of 100 items in each response. If you have a lot of traffic policy instances, you can use the <code>MaxItems</code> parameter to list them in groups of up to 100.</p>
    rpc Get20130401TrafficpolicyinstancesTrafficpolicy(Get20130401TrafficpolicyinstancesTrafficpolicyRequest) returns (ListTrafficPolicyInstancesByPolicyResponse) {
      option (google.api.http) = {
        get: "//2013-04-01/trafficpolicyinstances/trafficpolicy"
        body: "body"
      };
    }
}

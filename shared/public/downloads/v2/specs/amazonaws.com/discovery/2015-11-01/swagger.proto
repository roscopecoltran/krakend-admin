syntax = "proto3";

import "google/api/annotations.proto";

package awsapplicationdiscoveryservice;

message PostRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AssociateConfigurationItemsToApplicationRequest body = 10;
}

message Post#CreateApplicationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateApplicationRequest body = 10;
}

message Post#CreateTagsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateTagsRequest body = 10;
}

message Post#DeleteApplicationsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteApplicationsRequest body = 10;
}

message Post#DeleteTagsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteTagsRequest body = 10;
}

message Post#DescribeAgentsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeAgentsRequest body = 10;
}

message Post#DescribeConfigurationsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeConfigurationsRequest body = 10;
}

message Post#DescribeExportConfigurationsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeExportConfigurationsRequest body = 10;
}

message Post#DescribeExportTasksRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeExportTasksRequest body = 10;
}

message Post#DescribeTagsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeTagsRequest body = 10;
}

message Post#DisassociateConfigurationItemsFromApplicationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DisassociateConfigurationItemsFromApplicationRequest body = 10;
}

message Post#ExportConfigurationsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
}

message Post#GetDiscoverySummaryRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetDiscoverySummaryRequest body = 10;
}

message Post#ListConfigurationsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListConfigurationsRequest body = 10;
}

message Post#ListServerNeighborsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListServerNeighborsRequest body = 10;
}

message Post#StartDataCollectionByAgentIdsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StartDataCollectionByAgentIdsRequest body = 10;
}

message Post#StartExportTaskRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StartExportTaskRequest body = 10;
}

message Post#StopDataCollectionByAgentIdsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StopDataCollectionByAgentIdsRequest body = 10;
}

message Post#UpdateApplicationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateApplicationRequest body = 10;
}

message AgentConfigurationStatus {
    // The agent/connector ID.
    string agentId = 1;
    // A description of the operation performed.
    string description = 2;
    // Information about the status of the <code>StartDataCollection</code> and <code>StopDataCollection</code> operations. The system has recorded the data collection operation. The agent/connector receives this command the next time it polls for a new command.
    boolean operationSucceeded = 3;
}

repeated AgentConfigurationStatus AgentConfigurationStatusList = 1



repeated string AgentIds = 1

message AgentInfo {
    // The agent or connector ID.
    string agentId = 1;
    // Network details about the host where the agent or connector resides.
    array agentNetworkInfoList = 2;
    // Type of agent.
    string agentType = 3;
    // Status of the collection process for an agent or connector.
    string collectionStatus = 4;
    // The ID of the connector.
    string connectorId = 5;
    // The health of the agent or connector.
    AgentStatus health = 6;
    // The name of the host where the agent or connector resides. The host can be a server or virtual machine.
    string hostName = 7;
    // Time since agent or connector health was reported.
    string lastHealthPingTime = 8;
    // Agent's first registration timestamp in UTC.
    string registeredTime = 9;
    // The agent or connector version.
    string version = 10;
}

message AgentNetworkInfo {
    // The IP address for the host where the agent/connector resides.
    string ipAddress = 1;
    // The MAC address for the host where the agent/connector resides.
    string macAddress = 2;
}

repeated AgentNetworkInfo AgentNetworkInfoList = 1

enum AgentStatu {
    HEALTHY = 0;
    UNHEALTHY = 1;
    RUNNING = 2;
    UNKNOWN = 3;
    BLACKLISTED = 4;
    SHUTDOWN = 5;
}

repeated AgentInfo AgentsInfo = 1



repeated string ApplicationIdsList = 1

message AssociateConfigurationItemsToApplicationRequest {
    // The configuration ID of an application with which items are to be associated.
    string applicationConfigurationId = 1;
    // The ID of each configuration item to be associated with an application.
    array configurationIds = 2;
}

message AssociateConfigurationItemsToApplicationResponse {
}

message AuthorizationErrorException {
    string message = 1;
}

message Configuration {
    string key = 1;
    string value = 2;
}
repeated Configuration Configuration = 1



repeated string ConfigurationIdList = 1

enum ConfigurationItemType {
    SERVER = 0;
    PROCESS = 1;
    CONNECTION = 2;
    APPLICATION = 3;
}

message ConfigurationTag {
    // The configuration ID for the item to tag. You can specify a list of keys and values.
    string configurationId = 1;
    // A type of IT asset to tag.
    ConfigurationItemType configurationType = 2;
    // A type of tag on which to filter. For example, <i>serverType</i>.
    string key = 3;
    // The time the configuration tag was created in Coordinated Universal Time (UTC).
    string timeOfCreation = 4;
    // A value on which to filter. For example <i>key = serverType</i> and <i>value = web server</i>.
    string value = 5;
}

repeated ConfigurationTag ConfigurationTagSet = 1

repeated array Configurations = 1





message CreateApplicationRequest {
    // Description of the application to be created.
    string description = 1;
    // Name of the application to be created.
    string name = 2;
}

message CreateApplicationResponse {
    // Configuration ID of an application to be created.
    string configurationId = 1;
}

message CreateTagsRequest {
    // A list of configuration items that you want to tag.
    array configurationIds = 1;
    // <p>Tags that you want to associate with one or more configuration items. Specify the tags that you want to create in a <i>key</i>-<i>value</i> format. For example:</p> <p> <code>{"key": "serverType", "value": "webServer"}</code> </p>
    array tags = 2;
}

message CreateTagsResponse {
}

message CustomerAgentInfo {
    // Number of active discovery agents.
    integer activeAgents = 1;
    // Number of blacklisted discovery agents.
    integer blackListedAgents = 2;
    // Number of healthy discovery agents
    integer healthyAgents = 3;
    // Number of discovery agents with status SHUTDOWN.
    integer shutdownAgents = 4;
    // Total number of discovery agents.
    integer totalAgents = 5;
    // Number of unhealthy discovery agents.
    integer unhealthyAgents = 6;
    // Number of unknown discovery agents.
    integer unknownAgents = 7;
}

message CustomerConnectorInfo {
    // Number of active discovery connectors.
    integer activeConnectors = 1;
    // Number of blacklisted discovery connectors.
    integer blackListedConnectors = 2;
    // Number of healthy discovery connectors.
    integer healthyConnectors = 3;
    // Number of discovery connectors with status SHUTDOWN,
    integer shutdownConnectors = 4;
    // Total number of discovery connectors.
    integer totalConnectors = 5;
    // Number of unhealthy discovery connectors.
    integer unhealthyConnectors = 6;
    // Number of unknown discovery connectors.
    integer unknownConnectors = 7;
}

message DeleteApplicationsRequest {
    // Configuration ID of an application to be deleted.
    array configurationIds = 1;
}

message DeleteApplicationsResponse {
}

message DeleteTagsRequest {
    // A list of configuration items with tags that you want to delete.
    array configurationIds = 1;
    // <p>Tags that you want to delete from one or more configuration items. Specify the tags that you want to delete in a <i>key</i>-<i>value</i> format. For example:</p> <p> <code>{"key": "serverType", "value": "webServer"}</code> </p>
    array tags = 2;
}

message DeleteTagsResponse {
}

message DescribeAgentsRequest {
    // The agent or the Connector IDs for which you want information. If you specify no IDs, the system returns information about all agents/Connectors associated with your AWS user account.
    array agentIds = 1;
    // <p>You can filter the request using various logical operators and a <i>key</i>-<i>value</i> format. For example: </p> <p> <code>{"key": "collectionStatus", "value": "STARTED"}</code> </p>
    array filters = 2;
    // The total number of agents/Connectors to return in a single page of output. The maximum value is 100.
    integer maxResults = 3;
    // Token to retrieve the next set of results. For example, if you previously specified 100 IDs for <code>DescribeAgentsRequest$agentIds</code> but set <code>DescribeAgentsRequest$maxResults</code> to 10, you received a set of 10 results along with a token. Use that token in this query to get the next set of 10.
    string nextToken = 4;
}

message DescribeAgentsResponse {
    // Lists agents or the Connector by ID or lists all agents/Connectors associated with your user account if you did not specify an agent/Connector ID. The output includes agent/Connector IDs, IP addresses, media access control (MAC) addresses, agent/Connector health, host name where the agent/Connector resides, and the version number of each agent/Connector.
    array agentsInfo = 1;
    // Token to retrieve the next set of results. For example, if you specified 100 IDs for <code>DescribeAgentsRequest$agentIds</code> but set <code>DescribeAgentsRequest$maxResults</code> to 10, you received a set of 10 results along with this token. Use this token in the next query to retrieve the next set of 10.
    string nextToken = 2;
}

message DescribeConfigurationsAttribute {
    string key = 1;
    string value = 2;
}
repeated DescribeConfigurationsAttribute DescribeConfigurationsAttribute = 1

repeated array DescribeConfigurationsAttributes = 1

message DescribeConfigurationsRequest {
    // One or more configuration IDs.
    array configurationIds = 1;
}

message DescribeConfigurationsResponse {
    // A key in the response map. The value is an array of data.
    array configurations = 1;
}

message DescribeExportConfigurationsRequest {
    // A unique identifier that you can use to query the export status.
    array exportIds = 1;
    // The maximum number of results that you want to display as a part of the query.
    integer maxResults = 2;
    // A token to get the next set of results. For example, if you specify 100 IDs for <code>DescribeExportConfigurationsRequest$exportIds</code> but set <code>DescribeExportConfigurationsRequest$maxResults</code> to 10, you get results in a set of 10. Use the token in the query to get the next set of 10.
    string nextToken = 3;
}

message DescribeExportConfigurationsResponse {
    // Returns export details. When the status is complete, the response includes a URL for an Amazon S3 bucket where you can view the data in a CSV file.
    array exportsInfo = 1;
    // A token to get the next set of results. For example, if you specify 100 IDs for <code>DescribeExportConfigurationsRequest$exportIds</code> but set <code>DescribeExportConfigurationsRequest$maxResults</code> to 10, you get results in a set of 10. Use the token in the query to get the next set of 10.
    string nextToken = 2;
}

message DescribeExportTasksRequest {
    // One or more unique identifiers used to query the status of an export request.
    array exportIds = 1;
    // <p>One or more filters.</p> <ul> <li> <p> <code>AgentId</code> - ID of the agent whose collected data will be exported</p> </li> </ul>
    array filters = 2;
    // The maximum number of volume results returned by <code>DescribeExportTasks</code> in paginated output. When this parameter is used, <code>DescribeExportTasks</code> only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code> response element.
    integer maxResults = 3;
    // The <code>nextToken</code> value returned from a previous paginated <code>DescribeExportTasks</code> request where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value. This value is null when there are no more results to return.
    string nextToken = 4;
}

message DescribeExportTasksResponse {
    // Contains one or more sets of export request details. When the status of a request is <code>SUCCEEDED</code>, the response includes a URL for an Amazon S3 bucket where you can view the data in a CSV file.
    array exportsInfo = 1;
    // The <code>nextToken</code> value to include in a future <code>DescribeExportTasks</code> request. When the results of a <code>DescribeExportTasks</code> request exceed <code>maxResults</code>, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
    string nextToken = 2;
}

message DescribeTagsRequest {
    // You can filter the list using a <i>key</i>-<i>value</i> format. You can separate these items by using logical operators. Allowed filters include <code>tagKey</code>, <code>tagValue</code>, and <code>configurationId</code>.
    array filters = 1;
    // The total number of items to return in a single page of output. The maximum value is 100.
    integer maxResults = 2;
    // A token to start the list. Use this token to get the next set of results.
    string nextToken = 3;
}

message DescribeTagsResponse {
    // The call returns a token. Use this token to get the next set of results.
    string nextToken = 1;
    // Depending on the input, this is a list of configuration items tagged with a specific tag, or a list of tags for a specific configuration item.
    array tags = 2;
}

message DisassociateConfigurationItemsFromApplicationRequest {
    // Configuration ID of an application from which each item is disassociated.
    string applicationConfigurationId = 1;
    // Configuration ID of each item to be disassociated from an application.
    array configurationIds = 2;
}

message DisassociateConfigurationItemsFromApplicationResponse {
}

message ExportConfigurationsResponse {
    // A unique identifier that you can use to query the export status.
    string exportId = 1;
}

enum ExportDataFormat {
    CSV = 0;
    GRAPHML = 1;
}

repeated ExportDataFormat ExportDataFormats = 1

message ExportFilter {
    // Supported condition: <code>EQUALS</code>
    string condition = 1;
    // A single <code>ExportFilter</code> name. Supported filters: <code>agentId</code>.
    string name = 2;
    // A single <code>agentId</code> for a Discovery Agent. An <code>agentId</code> can be found using the <a href="http://docs.aws.amazon.com/application-discovery/latest/APIReference/API_DescribeExportTasks.html">DescribeAgents</a> action. Typically an ADS <code>agentId</code> is in the form <code>o-0123456789abcdef0</code>.
    array values = 3;
}

repeated ExportFilter ExportFilters = 1

repeated string ExportIds = 1

message ExportInfo {
    // A URL for an Amazon S3 bucket where you can review the exported data. The URL is displayed only if the export succeeded.
    string configurationsDownloadUrl = 1;
    // A unique identifier used to query an export.
    string exportId = 2;
    // The time that the data export was initiated.
    string exportRequestTime = 3;
    // The status of the data export job.
    ExportStatus exportStatus = 4;
    // If true, the export of agent information exceeded the size limit for a single export and the exported data is incomplete for the requested time range. To address this, select a smaller time range for the export by using <code>startDate</code> and <code>endDate</code>.
    boolean isTruncated = 5;
    // The <code>endTime</code> used in the <code>StartExportTask</code> request. If no <code>endTime</code> was requested, this result does not appear in <code>ExportInfo</code>.
    string requestedEndTime = 6;
    // The value of <code>startTime</code> parameter in the <code>StartExportTask</code> request. If no <code>startTime</code> was requested, this result does not appear in <code>ExportInfo</code>.
    string requestedStartTime = 7;
    // A status message provided for API callers.
    string statusMessage = 8;
}

enum ExportStatu {
    FAILED = 0;
    SUCCEEDED = 1;
    IN_PROGRESS = 2;
}



repeated ExportInfo ExportsInfo = 1

message Filter {
    // A conditional operator. The following operators are valid: EQUALS, NOT_EQUALS, CONTAINS, NOT_CONTAINS. If you specify multiple filters, the system utilizes all filters as though concatenated by <i>AND</i>. If you specify multiple values for a particular filter, the system differentiates the values using <i>OR</i>. Calling either <i>DescribeConfigurations</i> or <i>ListConfigurations</i> returns attributes of matching configuration items.
    string condition = 1;
    // The name of the filter.
    string name = 2;
    // A string value on which to filter. For example, if you choose the <code>destinationServer.osVersion</code> filter name, you could specify <code>Ubuntu</code> for the value.
    array values = 3;
}





repeated string FilterValues = 1

repeated Filter Filters = 1

message GetDiscoverySummaryRequest {
}

message GetDiscoverySummaryResponse {
    // Details about discovered agents, including agent status and health.
    CustomerAgentInfo agentSummary = 1;
    // The number of applications discovered.
    integer applications = 2;
    // Details about discovered connectors, including connector status and health.
    CustomerConnectorInfo connectorSummary = 3;
    // The number of servers discovered.
    integer servers = 4;
    // The number of servers mapped to applications.
    integer serversMappedToApplications = 5;
    // The number of servers mapped to tags.
    integer serversMappedtoTags = 6;
}

message InvalidParameterException {
    string message = 1;
}

message InvalidParameterValueException {
    string message = 1;
}

message ListConfigurationsRequest {
    // A valid configuration identified by Application Discovery Service.
    ConfigurationItemType configurationType = 1;
    // <p>You can filter the request using various logical operators and a <i>key</i>-<i>value</i> format. For example: </p> <p> <code>{"key": "serverType", "value": "webServer"}</code> </p> <p>For a complete list of filter options and guidance about using them with this action, see <a href="http://docs.aws.amazon.com/application-discovery/latest/APIReference/discovery-api-queries.html#ListConfigurations">Querying Discovered Configuration Items</a>. </p>
    array filters = 2;
    // The total number of items to return. The maximum value is 100.
    integer maxResults = 3;
    // Token to retrieve the next set of results. For example, if a previous call to ListConfigurations returned 100 items, but you set <code>ListConfigurationsRequest$maxResults</code> to 10, you received a set of 10 results along with a token. Use that token in this query to get the next set of 10.
    string nextToken = 4;
    // Certain filter criteria return output that can be sorted in ascending or descending order. For a list of output characteristics for each filter, see <a href="http://docs.aws.amazon.com/application-discovery/latest/APIReference/discovery-api-queries.html#ListConfigurations">Using the ListConfigurations Action</a>.
    array orderBy = 5;
}

message ListConfigurationsResponse {
    // Returns configuration details, including the configuration ID, attribute names, and attribute values.
    array configurations = 1;
    // Token to retrieve the next set of results. For example, if your call to ListConfigurations returned 100 items, but you set <code>ListConfigurationsRequest$maxResults</code> to 10, you received a set of 10 results along with this token. Use this token in the next query to retrieve the next set of 10.
    string nextToken = 2;
}

message ListServerNeighborsRequest {
    // Configuration ID of the server for which neighbors are being listed.
    string configurationId = 1;
    // Maximum number of results to return in a single page of output.
    integer maxResults = 2;
    // List of configuration IDs to test for one-hop-away.
    array neighborConfigurationIds = 3;
    // Token to retrieve the next set of results. For example, if you previously specified 100 IDs for <code>ListServerNeighborsRequest$neighborConfigurationIds</code> but set <code>ListServerNeighborsRequest$maxResults</code> to 10, you received a set of 10 results along with a token. Use that token in this query to get the next set of 10.
    string nextToken = 4;
    // Flag to indicate if port and protocol information is needed as part of the response.
    boolean portInformationNeeded = 5;
}

message ListServerNeighborsResponse {
    // Count of distinct servers that are one hop away from the given server.
    integer knownDependencyCount = 1;
    // List of distinct servers that are one hop away from the given server.
    array neighbors = 2;
    // Token to retrieve the next set of results. For example, if you specified 100 IDs for <code>ListServerNeighborsRequest$neighborConfigurationIds</code> but set <code>ListServerNeighborsRequest$maxResults</code> to 10, you received a set of 10 results along with this token. Use this token in the next query to retrieve the next set of 10.
    string nextToken = 3;
}

message NeighborConnectionDetail {
    // The number of open network connections with the neighboring server.
    integer connectionsCount = 1;
    // The destination network port for the connection.
    integer destinationPort = 2;
    // The ID of the server that accepted the network connection.
    string destinationServerId = 3;
    // The ID of the server that opened the network connection.
    string sourceServerId = 4;
    // The network protocol used for the connection.
    string transportProtocol = 5;
}

repeated NeighborConnectionDetail NeighborDetailsList = 1



message OperationNotPermittedException {
    string message = 1;
}

message OrderByElement {
    // The field on which to order.
    string fieldName = 1;
    // Ordering direction.
    orderString sortOrder = 2;
}

repeated OrderByElement OrderByList = 1

message ResourceNotFoundException {
    string message = 1;
}

message ServerInternalErrorException {
    string message = 1;
}

message StartDataCollectionByAgentIdsRequest {
    // The IDs of the agents or connectors from which to start collecting data. If you send a request to an agent/connector ID that you do not have permission to contact, according to your AWS account, the service does not throw an exception. Instead, it returns the error in the <i>Description</i> field. If you send a request to multiple agents/connectors and you do not have permission to contact some of those agents/connectors, the system does not throw an exception. Instead, the system shows <code>Failed</code> in the <i>Description</i> field.
    array agentIds = 1;
}

message StartDataCollectionByAgentIdsResponse {
    // Information about agents or the connector that were instructed to start collecting data. Information includes the agent/connector ID, a description of the operation performed, and whether the agent/connector configuration was updated.
    array agentsConfigurationStatus = 1;
}

message StartExportTaskRequest {
    // The end timestamp for exported data from the single Application Discovery Agent selected in the filters. If no value is specified, exported data includes the most recent data collected by the agent.
    string endTime = 1;
    // The file format for the returned export data. Default value is <code>CSV</code>.
    array exportDataFormat = 2;
    // If a filter is present, it selects the single <code>agentId</code> of the Application Discovery Agent for which data is exported. The <code>agentId</code> can be found in the results of the <code>DescribeAgents</code> API or CLI. If no filter is present, <code>startTime</code> and <code>endTime</code> are ignored and exported data includes both Agentless Discovery Connector data and summary data from Application Discovery agents.
    array filters = 3;
    // The start timestamp for exported data from the single Application Discovery Agent selected in the filters. If no value is specified, data is exported starting from the first data collected by the agent.
    string startTime = 4;
}

message StartExportTaskResponse {
    // A unique identifier used to query the status of an export request.
    string exportId = 1;
}

message StopDataCollectionByAgentIdsRequest {
    // The IDs of the agents or connectors from which to stop collecting data.
    array agentIds = 1;
}

message StopDataCollectionByAgentIdsResponse {
    // Information about the agents or connector that were instructed to stop collecting data. Information includes the agent/connector ID, a description of the operation performed, and whether the agent/connector configuration was updated.
    array agentsConfigurationStatus = 1;
}

message Tag {
    // The type of tag on which to filter.
    string key = 1;
    // A value for a tag key on which to filter.
    string value = 2;
}

message TagFilter {
    // A name of the tag filter.
    string name = 1;
    // Values for the tag filter.
    array values = 2;
}

repeated TagFilter TagFilters = 1



repeated Tag TagSet = 1





message UpdateApplicationRequest {
    // Configuration ID of the application to be updated.
    string configurationId = 1;
    // New description of the application to be updated.
    string description = 2;
    // New name of the application to be updated.
    string name = 3;
}

message UpdateApplicationResponse {
}

enum OrderString {
    ASC = 0;
    DESC = 1;
}

service AWSApplicationDiscoveryServiceService {
    // Associates one or more configuration items with an application.
    rpc Post(PostRequest) returns (AssociateConfigurationItemsToApplicationResponse) {
      option (google.api.http) = {
        post: "//"
        body: "body"
      };
    }
    // Creates an application with the given name and description.
    rpc Post#CreateApplication(Post#CreateApplicationRequest) returns (CreateApplicationResponse) {
      option (google.api.http) = {
        post: "//#CreateApplication"
        body: "body"
      };
    }
    // Creates one or more tags for configuration items. Tags are metadata that help you categorize IT assets. This API accepts a list of multiple configuration items.
    rpc Post#CreateTags(Post#CreateTagsRequest) returns (CreateTagsResponse) {
      option (google.api.http) = {
        post: "//#CreateTags"
        body: "body"
      };
    }
    // Deletes a list of applications and their associations with configuration items.
    rpc Post#DeleteApplications(Post#DeleteApplicationsRequest) returns (DeleteApplicationsResponse) {
      option (google.api.http) = {
        post: "//#DeleteApplications"
        body: "body"
      };
    }
    // Deletes the association between configuration items and one or more tags. This API accepts a list of multiple configuration items.
    rpc Post#DeleteTags(Post#DeleteTagsRequest) returns (DeleteTagsResponse) {
      option (google.api.http) = {
        post: "//#DeleteTags"
        body: "body"
      };
    }
    // Lists agents or the Connector by ID or lists all agents/Connectors associated with your user account if you did not specify an ID.
    rpc Post#DescribeAgents(Post#DescribeAgentsRequest) returns (DescribeAgentsResponse) {
      option (google.api.http) = {
        post: "//#DescribeAgents"
        body: "body"
      };
    }
    // <p>Retrieves attributes for a list of configuration item IDs. All of the supplied IDs must be for the same asset type (server, application, process, or connection). Output fields are specific to the asset type selected. For example, the output for a <i>server</i> configuration item includes a list of attributes about the server, such as host name, operating system, and number of network cards.</p> <p>For a complete list of outputs for each asset type, see <a href="http://docs.aws.amazon.com/application-discovery/latest/APIReference/discovery-api-queries.html#DescribeConfigurations">Using the DescribeConfigurations Action</a>.</p>
    rpc Post#DescribeConfigurations(Post#DescribeConfigurationsRequest) returns (DescribeConfigurationsResponse) {
      option (google.api.http) = {
        post: "//#DescribeConfigurations"
        body: "body"
      };
    }
    // <p>Deprecated. Use <code>DescribeExportTasks</code> instead.</p> <p>Retrieves the status of a given export process. You can retrieve status from a maximum of 100 processes.</p>
    rpc Post#DescribeExportConfigurations(Post#DescribeExportConfigurationsRequest) returns (DescribeExportConfigurationsResponse) {
      option (google.api.http) = {
        post: "//#DescribeExportConfigurations"
        body: "body"
      };
    }
    // Retrieve status of one or more export tasks. You can retrieve the status of up to 100 export tasks.
    rpc Post#DescribeExportTasks(Post#DescribeExportTasksRequest) returns (DescribeExportTasksResponse) {
      option (google.api.http) = {
        post: "//#DescribeExportTasks"
        body: "body"
      };
    }
    // Retrieves a list of configuration items that are tagged with a specific tag. Or retrieves a list of all tags assigned to a specific configuration item.
    rpc Post#DescribeTags(Post#DescribeTagsRequest) returns (DescribeTagsResponse) {
      option (google.api.http) = {
        post: "//#DescribeTags"
        body: "body"
      };
    }
    // Disassociates one or more configuration items from an application.
    rpc Post#DisassociateConfigurationItemsFromApplication(Post#DisassociateConfigurationItemsFromApplicationRequest) returns (DisassociateConfigurationItemsFromApplicationResponse) {
      option (google.api.http) = {
        post: "//#DisassociateConfigurationItemsFromApplication"
        body: "body"
      };
    }
    // <p>Deprecated. Use <code>StartExportTask</code> instead.</p> <p>Exports all discovered configuration data to an Amazon S3 bucket or an application that enables you to view and evaluate the data. Data includes tags and tag associations, processes, connections, servers, and system performance. This API returns an export ID that you can query using the <i>DescribeExportConfigurations</i> API. The system imposes a limit of two configuration exports in six hours.</p>
    rpc Post#ExportConfigurations(Post#ExportConfigurationsRequest) returns (ExportConfigurationsResponse) {
      option (google.api.http) = {
        post: "//#ExportConfigurations"
      };
    }
    // Retrieves a short summary of discovered assets.
    rpc Post#GetDiscoverySummary(Post#GetDiscoverySummaryRequest) returns (GetDiscoverySummaryResponse) {
      option (google.api.http) = {
        post: "//#GetDiscoverySummary"
        body: "body"
      };
    }
    // Retrieves a list of configuration items according to criteria that you specify in a filter. The filter criteria identifies the relationship requirements.
    rpc Post#ListConfigurations(Post#ListConfigurationsRequest) returns (ListConfigurationsResponse) {
      option (google.api.http) = {
        post: "//#ListConfigurations"
        body: "body"
      };
    }
    // Retrieves a list of servers that are one network hop away from a specified server.
    rpc Post#ListServerNeighbors(Post#ListServerNeighborsRequest) returns (ListServerNeighborsResponse) {
      option (google.api.http) = {
        post: "//#ListServerNeighbors"
        body: "body"
      };
    }
    // Instructs the specified agents or connectors to start collecting data.
    rpc Post#StartDataCollectionByAgentIds(Post#StartDataCollectionByAgentIdsRequest) returns (StartDataCollectionByAgentIdsResponse) {
      option (google.api.http) = {
        post: "//#StartDataCollectionByAgentIds"
        body: "body"
      };
    }
    // <p> Begins the export of discovered data to an S3 bucket.</p> <p> If you specify <code>agentId</code> in a filter, the task exports up to 72 hours of detailed data collected by the identified Application Discovery Agent, including network, process, and performance details. A time range for exported agent data may be set by using <code>startTime</code> and <code>endTime</code>. Export of detailed agent data is limited to five concurrently running exports. </p> <p> If you do not include an <code>agentId</code> filter, summary data is exported that includes both AWS Agentless Discovery Connector data and summary data from AWS Discovery Agents. Export of summary data is limited to two exports per day. </p>
    rpc Post#StartExportTask(Post#StartExportTaskRequest) returns (StartExportTaskResponse) {
      option (google.api.http) = {
        post: "//#StartExportTask"
        body: "body"
      };
    }
    // Instructs the specified agents or connectors to stop collecting data.
    rpc Post#StopDataCollectionByAgentIds(Post#StopDataCollectionByAgentIdsRequest) returns (StopDataCollectionByAgentIdsResponse) {
      option (google.api.http) = {
        post: "//#StopDataCollectionByAgentIds"
        body: "body"
      };
    }
    // Updates metadata about an application.
    rpc Post#UpdateApplication(Post#UpdateApplicationRequest) returns (UpdateApplicationResponse) {
      option (google.api.http) = {
        post: "//#UpdateApplication"
        body: "body"
      };
    }
}

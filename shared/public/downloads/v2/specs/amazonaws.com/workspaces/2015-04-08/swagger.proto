syntax = "proto3";

import "google/api/annotations.proto";

package amazonworkspaces;

message PostRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateTagsRequest body = 10;
}

message Post#CreateWorkspacesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateWorkspacesRequest body = 10;
}

message Post#DeleteTagsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteTagsRequest body = 10;
}

message Post#DescribeTagsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeTagsRequest body = 10;
}

message Post#DescribeWorkspaceBundlesRequest {
    string Action = 1;
    // Pagination token
    string NextToken = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    DescribeWorkspaceBundlesRequest body = 11;
}

message Post#DescribeWorkspaceDirectoriesRequest {
    string Action = 1;
    // Pagination token
    string NextToken = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    DescribeWorkspaceDirectoriesRequest body = 11;
}

message Post#DescribeWorkspacesRequest {
    string Action = 1;
    // Pagination limit
    string Limit = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    DescribeWorkspacesRequest body = 12;
}

message Post#DescribeWorkspacesConnectionStatusRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeWorkspacesConnectionStatusRequest body = 10;
}

message Post#ModifyWorkspacePropertiesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ModifyWorkspacePropertiesRequest body = 10;
}

message Post#RebootWorkspacesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RebootWorkspacesRequest body = 10;
}

message Post#RebuildWorkspacesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RebuildWorkspacesRequest body = 10;
}

message Post#StartWorkspacesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StartWorkspacesRequest body = 10;
}

message Post#StopWorkspacesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StopWorkspacesRequest body = 10;
}

message Post#TerminateWorkspacesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    TerminateWorkspacesRequest body = 10;
}

message AccessDeniedException {
    string message = 1;
}









repeated string BundleIdList = 1

repeated WorkspaceBundle BundleList = 1



enum Compute {
    VALUE = 0;
    STANDARD = 1;
    PERFORMANCE = 2;
}

message ComputeType {
    // The name of the compute type for the bundle.
    Compute Name = 1;
}

enum ConnectionState {
    CONNECTED = 0;
    DISCONNECTED = 1;
    UNKNOWN = 2;
}

message CreateTagsRequest {
    // The resource ID of the request.
    string ResourceId = 1;
    // The tags of the request.
    array Tags = 2;
}

message CreateTagsResult {
}

message CreateWorkspacesRequest {
    // An array of structures that specify the WorkSpaces to create.
    array Workspaces = 1;
}

message CreateWorkspacesResult {
    // An array of structures that represent the WorkSpaces that could not be created.
    array FailedRequests = 1;
    // <p>An array of structures that represent the WorkSpaces that were created.</p> <p>Because this operation is asynchronous, the identifier in <code>WorkspaceId</code> is not immediately available. If you immediately call <a>DescribeWorkspaces</a> with this identifier, no information will be returned.</p>
    array PendingRequests = 2;
}

message DefaultWorkspaceCreationProperties {
    // The identifier of any custom security groups that are applied to the WorkSpaces when they are created.
    string CustomSecurityGroupId = 1;
    // The organizational unit (OU) in the directory that the WorkSpace machine accounts are placed in.
    string DefaultOu = 2;
    // A public IP address will be attached to all WorkSpaces that are created or rebuilt.
    boolean EnableInternetAccess = 3;
    // Specifies if the directory is enabled for Amazon WorkDocs.
    boolean EnableWorkDocs = 4;
    // The WorkSpace user is an administrator on the WorkSpace.
    boolean UserEnabledAsLocalAdministrator = 5;
}

message DeleteTagsRequest {
    // The resource ID of the request.
    string ResourceId = 1;
    // The tag keys of the request.
    array TagKeys = 2;
}

message DeleteTagsResult {
}

message DescribeTagsRequest {
    // The resource ID of the request.
    string ResourceId = 1;
}

message DescribeTagsResult {
    // The list of tags.
    array TagList = 1;
}

message DescribeWorkspaceBundlesRequest {
    // An array of strings that contains the identifiers of the bundles to retrieve. This parameter cannot be combined with any other filter parameter.
    array BundleIds = 1;
    // The <code>NextToken</code> value from a previous call to this operation. Pass null if this is the first call.
    string NextToken = 2;
    // <p>The owner of the bundles to retrieve. This parameter cannot be combined with any other filter parameter.</p> <p>This contains one of the following values:</p> <ul> <li> <p>null- Retrieves the bundles that belong to the account making the call.</p> </li> <li> <p> <code>AMAZON</code>- Retrieves the bundles that are provided by AWS.</p> </li> </ul>
    string Owner = 3;
}

message DescribeWorkspaceBundlesResult {
    // An array of structures that contain information about the bundles.
    array Bundles = 1;
    // If not null, more results are available. Pass this value for the <code>NextToken</code> parameter in a subsequent call to this operation to retrieve the next set of items. This token is valid for one day and must be used within that time frame.
    string NextToken = 2;
}

message DescribeWorkspaceDirectoriesRequest {
    // An array of strings that contains the directory identifiers to retrieve information for. If this member is null, all directories are retrieved.
    array DirectoryIds = 1;
    // The <code>NextToken</code> value from a previous call to this operation. Pass null if this is the first call.
    string NextToken = 2;
}

message DescribeWorkspaceDirectoriesResult {
    // An array of structures that contain information about the directories.
    array Directories = 1;
    // If not null, more results are available. Pass this value for the <code>NextToken</code> parameter in a subsequent call to this operation to retrieve the next set of items. This token is valid for one day and must be used within that time frame.
    string NextToken = 2;
}

message DescribeWorkspacesConnectionStatusRequest {
    // The next token of the request.
    string NextToken = 1;
    // An array of strings that contain the identifiers of the WorkSpaces.
    array WorkspaceIds = 2;
}

message DescribeWorkspacesConnectionStatusResult {
    // The next token of the result.
    string NextToken = 1;
    // The connection status of the WorkSpace.
    array WorkspacesConnectionStatus = 2;
}

message DescribeWorkspacesRequest {
    // The identifier of a bundle to obtain the WorkSpaces for. All WorkSpaces that are created from this bundle will be retrieved. This parameter cannot be combined with any other filter parameter.
    string BundleId = 1;
    // Specifies the directory identifier to which to limit the WorkSpaces. Optionally, you can specify a specific directory user with the <code>UserName</code> parameter. This parameter cannot be combined with any other filter parameter.
    string DirectoryId = 2;
    // The maximum number of items to return.
    integer Limit = 3;
    // The <code>NextToken</code> value from a previous call to this operation. Pass null if this is the first call.
    string NextToken = 4;
    // Used with the <code>DirectoryId</code> parameter to specify the directory user for whom to obtain the WorkSpace.
    string UserName = 5;
    // <p>An array of strings that contain the identifiers of the WorkSpaces for which to retrieve information. This parameter cannot be combined with any other filter parameter.</p> <p>Because the <a>CreateWorkspaces</a> operation is asynchronous, the identifier it returns is not immediately available. If you immediately call <a>DescribeWorkspaces</a> with this identifier, no information is returned.</p>
    array WorkspaceIds = 6;
}

message DescribeWorkspacesResult {
    // If not null, more results are available. Pass this value for the <code>NextToken</code> parameter in a subsequent call to this operation to retrieve the next set of items. This token is valid for one day and must be used within that time frame.
    string NextToken = 1;
    // <p>An array of structures that contain the information about the WorkSpaces.</p> <p>Because the <a>CreateWorkspaces</a> operation is asynchronous, some of this information may be incomplete for a newly-created WorkSpace.</p>
    array Workspaces = 2;
}





repeated string DirectoryIdList = 1

repeated WorkspaceDirectory DirectoryList = 1



repeated string DnsIpAddresses = 1





message FailedCreateWorkspaceRequest {
    // The error code.
    string ErrorCode = 1;
    // The textual error message.
    string ErrorMessage = 2;
    // A <a>FailedCreateWorkspaceRequest$WorkspaceRequest</a> object that contains the information about the WorkSpace that could not be created.
    WorkspaceRequest WorkspaceRequest = 3;
}

repeated FailedCreateWorkspaceRequest FailedCreateWorkspaceRequests = 1

repeated FailedWorkspaceChangeRequest FailedRebootWorkspaceRequests = 1

repeated FailedWorkspaceChangeRequest FailedRebuildWorkspaceRequests = 1

repeated FailedWorkspaceChangeRequest FailedStartWorkspaceRequests = 1

repeated FailedWorkspaceChangeRequest FailedStopWorkspaceRequests = 1

repeated FailedWorkspaceChangeRequest FailedTerminateWorkspaceRequests = 1

message FailedWorkspaceChangeRequest {
    // The error code.
    string ErrorCode = 1;
    // The textual error message.
    string ErrorMessage = 2;
    // The identifier of the WorkSpace.
    string WorkspaceId = 3;
}

message InvalidParameterValuesException {
    // The exception error message.
    string message = 1;
}

message InvalidResourceStateException {
    string message = 1;
}

message ModifyWorkspacePropertiesRequest {
    // The ID of the WorkSpace.
    string WorkspaceId = 1;
    // The WorkSpace properties of the request.
    WorkspaceProperties WorkspaceProperties = 2;
}

message ModifyWorkspacePropertiesResult {
}

message OperationInProgressException {
    string message = 1;
}

message RebootRequest {
    // The identifier of the WorkSpace to reboot.
    string WorkspaceId = 1;
}

repeated RebootRequest RebootWorkspaceRequests = 1

message RebootWorkspacesRequest {
    // An array of structures that specify the WorkSpaces to reboot.
    array RebootWorkspaceRequests = 1;
}

message RebootWorkspacesResult {
    // An array of structures representing any WorkSpaces that could not be rebooted.
    array FailedRequests = 1;
}

message RebuildRequest {
    // The identifier of the WorkSpace to rebuild.
    string WorkspaceId = 1;
}

repeated RebuildRequest RebuildWorkspaceRequests = 1

message RebuildWorkspacesRequest {
    // An array of structures that specify the WorkSpaces to rebuild.
    array RebuildWorkspaceRequests = 1;
}

message RebuildWorkspacesResult {
    // An array of structures representing any WorkSpaces that could not be rebuilt.
    array FailedRequests = 1;
}

message ResourceLimitExceededException {
    // The exception error message.
    string message = 1;
}

message ResourceNotFoundException {
    // The resource could not be found.
    string ResourceId = 1;
    // The resource could not be found.
    string message = 2;
}

message ResourceUnavailableException {
    // The identifier of the resource that is not available.
    string ResourceId = 1;
    // The exception error message.
    string message = 2;
}

enum RunningMode {
    AUTO_STOP = 0;
    ALWAYS_ON = 1;
}

message StartRequest {
    // The ID of the WorkSpace.
    string WorkspaceId = 1;
}

repeated StartRequest StartWorkspaceRequests = 1

message StartWorkspacesRequest {
    // The requests.
    array StartWorkspaceRequests = 1;
}

message StartWorkspacesResult {
    // The failed requests.
    array FailedRequests = 1;
}

message StopRequest {
    // The ID of the WorkSpace.
    string WorkspaceId = 1;
}

repeated StopRequest StopWorkspaceRequests = 1

message StopWorkspacesRequest {
    // The requests.
    array StopWorkspaceRequests = 1;
}

message StopWorkspacesResult {
    // The failed requests.
    array FailedRequests = 1;
}



repeated string SubnetIds = 1

message Tag {
    // The key of the tag.
    string Key = 1;
    // The value of the tag.
    string Value = 2;
}



repeated string TagKeyList = 1

repeated Tag TagList = 1



message TerminateRequest {
    // The identifier of the WorkSpace to terminate.
    string WorkspaceId = 1;
}

repeated TerminateRequest TerminateWorkspaceRequests = 1

message TerminateWorkspacesRequest {
    // An array of structures that specify the WorkSpaces to terminate.
    array TerminateWorkspaceRequests = 1;
}

message TerminateWorkspacesResult {
    // An array of structures representing any WorkSpaces that could not be terminated.
    array FailedRequests = 1;
}

message UnsupportedWorkspaceConfigurationException {
    string message = 1;
}

message UserStorage {
    // The amount of user storage for the bundle.
    string Capacity = 1;
}

message Workspace {
    // The identifier of the bundle that the WorkSpace was created from.
    string BundleId = 1;
    // The name of the WorkSpace as seen by the operating system.
    string ComputerName = 2;
    // The identifier of the AWS Directory Service directory that the WorkSpace belongs to.
    string DirectoryId = 3;
    // If the WorkSpace could not be created, this contains the error code.
    string ErrorCode = 4;
    // If the WorkSpace could not be created, this contains a textual error message that describes the failure.
    string ErrorMessage = 5;
    // The IP address of the WorkSpace.
    string IpAddress = 6;
    // Specifies whether the data stored on the root volume, or C: drive, is encrypted.
    boolean RootVolumeEncryptionEnabled = 7;
    // The operational state of the WorkSpace.
    WorkspaceState State = 8;
    // The identifier of the subnet that the WorkSpace is in.
    string SubnetId = 9;
    // The user that the WorkSpace is assigned to.
    string UserName = 10;
    // Specifies whether the data stored on the user volume, or D: drive, is encrypted.
    boolean UserVolumeEncryptionEnabled = 11;
    // The KMS key used to encrypt data stored on your WorkSpace.
    string VolumeEncryptionKey = 12;
    // The identifier of the WorkSpace.
    string WorkspaceId = 13;
    WorkspaceProperties WorkspaceProperties = 14;
}

message WorkspaceBundle {
    // The bundle identifier.
    string BundleId = 1;
    // A <a>ComputeType</a> object that specifies the compute type for the bundle.
    ComputeType ComputeType = 2;
    // The bundle description.
    string Description = 3;
    // The name of the bundle.
    string Name = 4;
    // The owner of the bundle. This contains the owner's account identifier, or <code>AMAZON</code> if the bundle is provided by AWS.
    string Owner = 5;
    // A <a>UserStorage</a> object that specifies the amount of user storage that the bundle contains.
    UserStorage UserStorage = 6;
}

message WorkspaceConnectionStatus {
    // The connection state of the WorkSpace. Returns UNKOWN if the WorkSpace is in a Stopped state.
    ConnectionState ConnectionState = 1;
    // The timestamp of the connection state check.
    string ConnectionStateCheckTimestamp = 2;
    // The timestamp of the last known user connection.
    string LastKnownUserConnectionTimestamp = 3;
    // The ID of the WorkSpace.
    string WorkspaceId = 4;
}

repeated WorkspaceConnectionStatus WorkspaceConnectionStatusList = 1

message WorkspaceDirectory {
    // The directory alias.
    string Alias = 1;
    // The user name for the service account.
    string CustomerUserName = 2;
    // The directory identifier.
    string DirectoryId = 3;
    // The name of the directory.
    string DirectoryName = 4;
    // The directory type.
    WorkspaceDirectoryType DirectoryType = 5;
    // An array of strings that contains the IP addresses of the DNS servers for the directory.
    array DnsIpAddresses = 6;
    // The identifier of the IAM role. This is the role that allows Amazon WorkSpaces to make calls to other services, such as Amazon EC2, on your behalf.
    string IamRoleId = 7;
    // The registration code for the directory. This is the code that users enter in their Amazon WorkSpaces client application to connect to the directory.
    string RegistrationCode = 8;
    // The state of the directory's registration with Amazon WorkSpaces
    WorkspaceDirectoryState State = 9;
    // An array of strings that contains the identifiers of the subnets used with the directory.
    array SubnetIds = 10;
    // A structure that specifies the default creation properties for all WorkSpaces in the directory.
    DefaultWorkspaceCreationProperties WorkspaceCreationProperties = 11;
    // The identifier of the security group that is assigned to new WorkSpaces.
    string WorkspaceSecurityGroupId = 12;
}

enum WorkspaceDirectoryState {
    REGISTERING = 0;
    REGISTERED = 1;
    DEREGISTERING = 2;
    DEREGISTERED = 3;
    ERROR = 4;
}

enum WorkspaceDirectoryType {
    SIMPLE_AD = 0;
    AD_CONNECTOR = 1;
}





repeated string WorkspaceIdList = 1

repeated Workspace WorkspaceList = 1

message WorkspaceProperties {
    // The running mode of the WorkSpace. AlwaysOn WorkSpaces are billed monthly. AutoStop WorkSpaces are billed by the hour and stopped when no longer being used in order to save on costs.
    RunningMode RunningMode = 1;
    // The time after a user logs off when WorkSpaces are automatically stopped. Configured in 60 minute intervals.
    integer RunningModeAutoStopTimeoutInMinutes = 2;
}

message WorkspaceRequest {
    // The identifier of the bundle to create the WorkSpace from. You can use the <a>DescribeWorkspaceBundles</a> operation to obtain a list of the bundles that are available.
    string BundleId = 1;
    // The identifier of the AWS Directory Service directory to create the WorkSpace in. You can use the <a>DescribeWorkspaceDirectories</a> operation to obtain a list of the directories that are available.
    string DirectoryId = 2;
    // Specifies whether the data stored on the root volume, or C: drive, is encrypted.
    boolean RootVolumeEncryptionEnabled = 3;
    // The tags of the WorkSpace request.
    array Tags = 4;
    // The username that the WorkSpace is assigned to. This username must exist in the AWS Directory Service directory specified by the <code>DirectoryId</code> member.
    string UserName = 5;
    // Specifies whether the data stored on the user volume, or D: drive, is encrypted.
    boolean UserVolumeEncryptionEnabled = 6;
    // The KMS key used to encrypt data stored on your WorkSpace.
    string VolumeEncryptionKey = 7;
    WorkspaceProperties WorkspaceProperties = 8;
}

repeated WorkspaceRequest WorkspaceRequestList = 1

enum WorkspaceState {
    PENDING = 0;
    AVAILABLE = 1;
    IMPAIRED = 2;
    UNHEALTHY = 3;
    REBOOTING = 4;
    STARTING = 5;
    REBUILDING = 6;
    MAINTENANCE = 7;
    TERMINATING = 8;
    TERMINATED = 9;
    SUSPENDED = 10;
    STOPPING = 11;
    STOPPED = 12;
    ERROR = 13;
}

service AmazonWorkSpacesService {
    // Creates tags for a WorkSpace.
    rpc Post(PostRequest) returns (CreateTagsResult) {
      option (google.api.http) = {
        post: "//"
        body: "body"
      };
    }
    // <p>Creates one or more WorkSpaces.</p> <note> <p>This operation is asynchronous and returns before the WorkSpaces are created.</p> </note>
    rpc Post#CreateWorkspaces(Post#CreateWorkspacesRequest) returns (CreateWorkspacesResult) {
      option (google.api.http) = {
        post: "//#CreateWorkspaces"
        body: "body"
      };
    }
    // Deletes tags from a WorkSpace.
    rpc Post#DeleteTags(Post#DeleteTagsRequest) returns (DeleteTagsResult) {
      option (google.api.http) = {
        post: "//#DeleteTags"
        body: "body"
      };
    }
    // Describes tags for a WorkSpace.
    rpc Post#DescribeTags(Post#DescribeTagsRequest) returns (DescribeTagsResult) {
      option (google.api.http) = {
        post: "//#DescribeTags"
        body: "body"
      };
    }
    // <p>Obtains information about the WorkSpace bundles that are available to your account in the specified region.</p> <p>You can filter the results with either the <code>BundleIds</code> parameter, or the <code>Owner</code> parameter, but not both.</p> <p>This operation supports pagination with the use of the <code>NextToken</code> request and response parameters. If more results are available, the <code>NextToken</code> response member contains a token that you pass in the next call to this operation to retrieve the next set of items.</p>
    rpc Post#DescribeWorkspaceBundles(Post#DescribeWorkspaceBundlesRequest) returns (DescribeWorkspaceBundlesResult) {
      option (google.api.http) = {
        post: "//#DescribeWorkspaceBundles"
        body: "body"
      };
    }
    // <p>Retrieves information about the AWS Directory Service directories in the region that are registered with Amazon WorkSpaces and are available to your account.</p> <p>This operation supports pagination with the use of the <code>NextToken</code> request and response parameters. If more results are available, the <code>NextToken</code> response member contains a token that you pass in the next call to this operation to retrieve the next set of items.</p>
    rpc Post#DescribeWorkspaceDirectories(Post#DescribeWorkspaceDirectoriesRequest) returns (DescribeWorkspaceDirectoriesResult) {
      option (google.api.http) = {
        post: "//#DescribeWorkspaceDirectories"
        body: "body"
      };
    }
    // <p>Obtains information about the specified WorkSpaces.</p> <p>Only one of the filter parameters, such as <code>BundleId</code>, <code>DirectoryId</code>, or <code>WorkspaceIds</code>, can be specified at a time.</p> <p>This operation supports pagination with the use of the <code>NextToken</code> request and response parameters. If more results are available, the <code>NextToken</code> response member contains a token that you pass in the next call to this operation to retrieve the next set of items.</p>
    rpc Post#DescribeWorkspaces(Post#DescribeWorkspacesRequest) returns (DescribeWorkspacesResult) {
      option (google.api.http) = {
        post: "//#DescribeWorkspaces"
        body: "body"
      };
    }
    // Describes the connection status of a specified WorkSpace.
    rpc Post#DescribeWorkspacesConnectionStatus(Post#DescribeWorkspacesConnectionStatusRequest) returns (DescribeWorkspacesConnectionStatusResult) {
      option (google.api.http) = {
        post: "//#DescribeWorkspacesConnectionStatus"
        body: "body"
      };
    }
    // Modifies the WorkSpace properties, including the running mode and AutoStop time.
    rpc Post#ModifyWorkspaceProperties(Post#ModifyWorkspacePropertiesRequest) returns (ModifyWorkspacePropertiesResult) {
      option (google.api.http) = {
        post: "//#ModifyWorkspaceProperties"
        body: "body"
      };
    }
    // <p>Reboots the specified WorkSpaces.</p> <p>To be able to reboot a WorkSpace, the WorkSpace must have a <b>State</b> of <code>AVAILABLE</code>, <code>IMPAIRED</code>, or <code>INOPERABLE</code>.</p> <note> <p>This operation is asynchronous and returns before the WorkSpaces have rebooted.</p> </note>
    rpc Post#RebootWorkspaces(Post#RebootWorkspacesRequest) returns (RebootWorkspacesResult) {
      option (google.api.http) = {
        post: "//#RebootWorkspaces"
        body: "body"
      };
    }
    // <p>Rebuilds the specified WorkSpaces.</p> <p>Rebuilding a WorkSpace is a potentially destructive action that can result in the loss of data. Rebuilding a WorkSpace causes the following to occur:</p> <ul> <li> <p>The system is restored to the image of the bundle that the WorkSpace is created from. Any applications that have been installed, or system settings that have been made since the WorkSpace was created will be lost.</p> </li> <li> <p>The data drive (D drive) is re-created from the last automatic snapshot taken of the data drive. The current contents of the data drive are overwritten. Automatic snapshots of the data drive are taken every 12 hours, so the snapshot can be as much as 12 hours old.</p> </li> </ul> <p>To be able to rebuild a WorkSpace, the WorkSpace must have a <b>State</b> of <code>AVAILABLE</code> or <code>ERROR</code>.</p> <note> <p>This operation is asynchronous and returns before the WorkSpaces have been completely rebuilt.</p> </note>
    rpc Post#RebuildWorkspaces(Post#RebuildWorkspacesRequest) returns (RebuildWorkspacesResult) {
      option (google.api.http) = {
        post: "//#RebuildWorkspaces"
        body: "body"
      };
    }
    // Starts the specified WorkSpaces. The WorkSpaces must have a running mode of AutoStop and a state of STOPPED.
    rpc Post#StartWorkspaces(Post#StartWorkspacesRequest) returns (StartWorkspacesResult) {
      option (google.api.http) = {
        post: "//#StartWorkspaces"
        body: "body"
      };
    }
    //  Stops the specified WorkSpaces. The WorkSpaces must have a running mode of AutoStop and a state of AVAILABLE, IMPAIRED, UNHEALTHY, or ERROR.
    rpc Post#StopWorkspaces(Post#StopWorkspacesRequest) returns (StopWorkspacesResult) {
      option (google.api.http) = {
        post: "//#StopWorkspaces"
        body: "body"
      };
    }
    // <p>Terminates the specified WorkSpaces.</p> <p>Terminating a WorkSpace is a permanent action and cannot be undone. The user's data is not maintained and will be destroyed. If you need to archive any user data, contact Amazon Web Services before terminating the WorkSpace.</p> <p>You can terminate a WorkSpace that is in any state except <code>SUSPENDED</code>.</p> <note> <p>This operation is asynchronous and returns before the WorkSpaces have been completely terminated.</p> </note>
    rpc Post#TerminateWorkspaces(Post#TerminateWorkspacesRequest) returns (TerminateWorkspacesResult) {
      option (google.api.http) = {
        post: "//#TerminateWorkspaces"
        body: "body"
      };
    }
}

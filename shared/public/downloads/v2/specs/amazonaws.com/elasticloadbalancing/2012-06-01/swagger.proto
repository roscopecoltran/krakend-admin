syntax = "proto3";

import "google/api/annotations.proto";

package elasticloadbalancing;

message PostRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AddTagsInput body = 10;
}

message Post#ApplySecurityGroupsToLoadBalancerRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ApplySecurityGroupsToLoadBalancerInput body = 10;
}

message Post#AttachLoadBalancerToSubnetsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AttachLoadBalancerToSubnetsInput body = 10;
}

message Post#ConfigureHealthCheckRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ConfigureHealthCheckInput body = 10;
}

message Post#CreateAppCookieStickinessPolicyRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateAppCookieStickinessPolicyInput body = 10;
}

message Post#CreateLBCookieStickinessPolicyRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateLBCookieStickinessPolicyInput body = 10;
}

message Post#CreateLoadBalancerRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateAccessPointInput body = 10;
}

message Post#CreateLoadBalancerListenersRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateLoadBalancerListenerInput body = 10;
}

message Post#CreateLoadBalancerPolicyRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateLoadBalancerPolicyInput body = 10;
}

message Post#DeleteLoadBalancerRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteAccessPointInput body = 10;
}

message Post#DeleteLoadBalancerListenersRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteLoadBalancerListenerInput body = 10;
}

message Post#DeleteLoadBalancerPolicyRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteLoadBalancerPolicyInput body = 10;
}

message Post#DeregisterInstancesFromLoadBalancerRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeregisterEndPointsInput body = 10;
}

message Post#DescribeAccountLimitsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeAccountLimitsInput body = 10;
}

message Post#DescribeInstanceHealthRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeEndPointStateInput body = 10;
}

message Post#DescribeLoadBalancerAttributesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeLoadBalancerAttributesInput body = 10;
}

message Post#DescribeLoadBalancerPoliciesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeLoadBalancerPoliciesInput body = 10;
}

message Post#DescribeLoadBalancerPolicyTypesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeLoadBalancerPolicyTypesInput body = 10;
}

message Post#DescribeLoadBalancersRequest {
    string Action = 1;
    // Pagination token
    string Marker = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    DescribeAccessPointsInput body = 11;
}

message Post#DescribeTagsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeTagsInput body = 10;
}

message Post#DetachLoadBalancerFromSubnetsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DetachLoadBalancerFromSubnetsInput body = 10;
}

message Post#DisableAvailabilityZonesForLoadBalancerRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RemoveAvailabilityZonesInput body = 10;
}

message Post#EnableAvailabilityZonesForLoadBalancerRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AddAvailabilityZonesInput body = 10;
}

message Post#ModifyLoadBalancerAttributesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ModifyLoadBalancerAttributesInput body = 10;
}

message Post#RegisterInstancesWithLoadBalancerRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RegisterEndPointsInput body = 10;
}

message Post#RemoveTagsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RemoveTagsInput body = 10;
}

message Post#SetLoadBalancerListenerSSLCertificateRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    SetLoadBalancerListenerSSLCertificateInput body = 10;
}

message Post#SetLoadBalancerPoliciesForBackendServerRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    SetLoadBalancerPoliciesForBackendServerInput body = 10;
}

message Post#SetLoadBalancerPoliciesOfListenerRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    SetLoadBalancerPoliciesOfListenerInput body = 10;
}

message AccessLog {
    // <p>The interval for publishing the access logs. You can specify an interval of either 5 minutes or 60 minutes.</p> <p>Default: 60 minutes</p>
    integer EmitInterval = 1;
    // Specifies whether access logs are enabled for the load balancer.
    boolean Enabled = 2;
    // The name of the Amazon S3 bucket where the access logs are stored.
    string S3BucketName = 3;
    // The logical hierarchy you created for your Amazon S3 bucket, for example <code>my-bucket-prefix/prod</code>. If the prefix is not provided, the log is placed at the root level of the bucket.
    string S3BucketPrefix = 4;
}

message AccessPointNotFoundException {
}

message AddAvailabilityZonesInput {
    // The Availability Zones. These must be in the same region as the load balancer.
    array AvailabilityZones = 1;
    // The name of the load balancer.
    string LoadBalancerName = 2;
}

message AddAvailabilityZonesOutput {
    // The updated list of Availability Zones for the load balancer.
    array AvailabilityZones = 1;
}

message AddTagsInput {
    // The name of the load balancer. You can specify one load balancer only.
    array LoadBalancerNames = 1;
    // The tags.
    array Tags = 2;
}

message AddTagsOutput {
}

message AdditionalAttribute {
    // This parameter is reserved.
    string Key = 1;
    // This parameter is reserved.
    string Value = 2;
}





repeated AdditionalAttribute AdditionalAttributes = 1

repeated AppCookieStickinessPolicy AppCookieStickinessPolicies = 1

message AppCookieStickinessPolicy {
    // The name of the application cookie used for stickiness.
    string CookieName = 1;
    // The mnemonic name for the policy being created. The name must be unique within a set of policies for this load balancer.
    string PolicyName = 2;
}

message ApplySecurityGroupsToLoadBalancerInput {
    // The name of the load balancer.
    string LoadBalancerName = 1;
    // The IDs of the security groups to associate with the load balancer. Note that you cannot specify the name of the security group.
    array SecurityGroups = 2;
}

message ApplySecurityGroupsToLoadBalancerOutput {
    // The IDs of the security groups associated with the load balancer.
    array SecurityGroups = 1;
}

message AttachLoadBalancerToSubnetsInput {
    // The name of the load balancer.
    string LoadBalancerName = 1;
    // The IDs of the subnets to add. You can add only one subnet per Availability Zone.
    array Subnets = 2;
}

message AttachLoadBalancerToSubnetsOutput {
    // The IDs of the subnets attached to the load balancer.
    array Subnets = 1;
}









repeated string AvailabilityZones = 1

message BackendServerDescription {
    // The port on which the EC2 instance is listening.
    integer InstancePort = 1;
    // The names of the policies enabled for the EC2 instance.
    array PolicyNames = 2;
}

repeated BackendServerDescription BackendServerDescriptions = 1



message CertificateNotFoundException {
}

message ConfigureHealthCheckInput {
    // The configuration information.
    HealthCheck HealthCheck = 1;
    // The name of the load balancer.
    string LoadBalancerName = 2;
}

message ConfigureHealthCheckOutput {
    // The updated health check.
    HealthCheck HealthCheck = 1;
}

message ConnectionDraining {
    // Specifies whether connection draining is enabled for the load balancer.
    boolean Enabled = 1;
    // The maximum time, in seconds, to keep the existing connections open before deregistering the instances.
    integer Timeout = 2;
}

message ConnectionSettings {
    // The time, in seconds, that the connection is allowed to be idle (no data has been sent over the connection) before it is closed by the load balancer.
    integer IdleTimeout = 1;
}

message CreateAccessPointInput {
    // <p>One or more Availability Zones from the same region as the load balancer.</p> <p>You must specify at least one Availability Zone.</p> <p>You can add more Availability Zones after you create the load balancer using <a>EnableAvailabilityZonesForLoadBalancer</a>.</p>
    array AvailabilityZones = 1;
    // <p>The listeners.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-listener-config.html">Listeners for Your Classic Load Balancer</a> in the <i>Classic Load Balancer Guide</i>.</p>
    array Listeners = 2;
    // <p>The name of the load balancer.</p> <p>This name must be unique within your set of load balancers for the region, must have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and cannot begin or end with a hyphen.</p>
    string LoadBalancerName = 3;
    // <p>The type of a load balancer. Valid only for load balancers in a VPC.</p> <p>By default, Elastic Load Balancing creates an Internet-facing load balancer with a DNS name that resolves to public IP addresses. For more information about Internet-facing and Internal load balancers, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/how-elastic-load-balancing-works.html#load-balancer-scheme">Load Balancer Scheme</a> in the <i>Elastic Load Balancing User Guide</i>.</p> <p>Specify <code>internal</code> to create a load balancer with a DNS name that resolves to private IP addresses.</p>
    string Scheme = 4;
    // The IDs of the security groups to assign to the load balancer.
    array SecurityGroups = 5;
    // The IDs of the subnets in your VPC to attach to the load balancer. Specify one subnet per Availability Zone specified in <code>AvailabilityZones</code>.
    array Subnets = 6;
    // <p>A list of tags to assign to the load balancer.</p> <p>For more information about tagging your load balancer, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/add-remove-tags.html">Tag Your Classic Load Balancer</a> in the <i>Classic Load Balancer Guide</i>.</p>
    array Tags = 7;
}

message CreateAccessPointOutput {
    // The DNS name of the load balancer.
    string DNSName = 1;
}

message CreateAppCookieStickinessPolicyInput {
    // The name of the application cookie used for stickiness.
    string CookieName = 1;
    // The name of the load balancer.
    string LoadBalancerName = 2;
    // The name of the policy being created. Policy names must consist of alphanumeric characters and dashes (-). This name must be unique within the set of policies for this load balancer.
    string PolicyName = 3;
}

message CreateAppCookieStickinessPolicyOutput {
}

message CreateLBCookieStickinessPolicyInput {
    // The time period, in seconds, after which the cookie should be considered stale. If you do not specify this parameter, the default value is 0, which indicates that the sticky session should last for the duration of the browser session.
    integer CookieExpirationPeriod = 1;
    // The name of the load balancer.
    string LoadBalancerName = 2;
    // The name of the policy being created. Policy names must consist of alphanumeric characters and dashes (-). This name must be unique within the set of policies for this load balancer.
    string PolicyName = 3;
}

message CreateLBCookieStickinessPolicyOutput {
}

message CreateLoadBalancerListenerInput {
    // The listeners.
    array Listeners = 1;
    // The name of the load balancer.
    string LoadBalancerName = 2;
}

message CreateLoadBalancerListenerOutput {
}

message CreateLoadBalancerPolicyInput {
    // The name of the load balancer.
    string LoadBalancerName = 1;
    // The policy attributes.
    array PolicyAttributes = 2;
    // The name of the load balancer policy to be created. This name must be unique within the set of policies for this load balancer.
    string PolicyName = 3;
    // The name of the base policy type. To get the list of policy types, use <a>DescribeLoadBalancerPolicyTypes</a>.
    string PolicyTypeName = 4;
}

message CreateLoadBalancerPolicyOutput {
}

message CrossZoneLoadBalancing {
    // Specifies whether cross-zone load balancing is enabled for the load balancer.
    boolean Enabled = 1;
}

message DeleteAccessPointInput {
    // The name of the load balancer.
    string LoadBalancerName = 1;
}

message DeleteAccessPointOutput {
}

message DeleteLoadBalancerListenerInput {
    // The name of the load balancer.
    string LoadBalancerName = 1;
    // The client port numbers of the listeners.
    array LoadBalancerPorts = 2;
}

message DeleteLoadBalancerListenerOutput {
}

message DeleteLoadBalancerPolicyInput {
    // The name of the load balancer.
    string LoadBalancerName = 1;
    // The name of the policy.
    string PolicyName = 2;
}

message DeleteLoadBalancerPolicyOutput {
}

message DependencyThrottleException {
}

message DeregisterEndPointsInput {
    // The IDs of the instances.
    array Instances = 1;
    // The name of the load balancer.
    string LoadBalancerName = 2;
}

message DeregisterEndPointsOutput {
    // The remaining instances registered with the load balancer.
    array Instances = 1;
}

message DescribeAccessPointsInput {
    // The names of the load balancers.
    array LoadBalancerNames = 1;
    // The marker for the next set of results. (You received this marker from a previous call.)
    string Marker = 2;
    // The maximum number of results to return with this call (a number from 1 to 400). The default is 400.
    integer PageSize = 3;
}

message DescribeAccessPointsOutput {
    // Information about the load balancers.
    array LoadBalancerDescriptions = 1;
    // The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
    string NextMarker = 2;
}

message DescribeAccountLimitsInput {
    // The marker for the next set of results. (You received this marker from a previous call.)
    string Marker = 1;
    // The maximum number of results to return with this call.
    integer PageSize = 2;
}

message DescribeAccountLimitsOutput {
    // Information about the limits.
    array Limits = 1;
    // The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
    string NextMarker = 2;
}

message DescribeEndPointStateInput {
    // The IDs of the instances.
    array Instances = 1;
    // The name of the load balancer.
    string LoadBalancerName = 2;
}

message DescribeEndPointStateOutput {
    // Information about the health of the instances.
    array InstanceStates = 1;
}

message DescribeLoadBalancerAttributesInput {
    // The name of the load balancer.
    string LoadBalancerName = 1;
}

message DescribeLoadBalancerAttributesOutput {
    // Information about the load balancer attributes.
    LoadBalancerAttributes LoadBalancerAttributes = 1;
}

message DescribeLoadBalancerPoliciesInput {
    // The name of the load balancer.
    string LoadBalancerName = 1;
    // The names of the policies.
    array PolicyNames = 2;
}

message DescribeLoadBalancerPoliciesOutput {
    // Information about the policies.
    array PolicyDescriptions = 1;
}

message DescribeLoadBalancerPolicyTypesInput {
    // The names of the policy types. If no names are specified, describes all policy types defined by Elastic Load Balancing.
    array PolicyTypeNames = 1;
}

message DescribeLoadBalancerPolicyTypesOutput {
    // Information about the policy types.
    array PolicyTypeDescriptions = 1;
}

message DescribeTagsInput {
    // The names of the load balancers.
    array LoadBalancerNames = 1;
}

message DescribeTagsOutput {
    // Information about the tags.
    array TagDescriptions = 1;
}

message DetachLoadBalancerFromSubnetsInput {
    // The name of the load balancer.
    string LoadBalancerName = 1;
    // The IDs of the subnets.
    array Subnets = 2;
}

message DetachLoadBalancerFromSubnetsOutput {
    // The IDs of the remaining subnets for the load balancer.
    array Subnets = 1;
}

message DuplicateAccessPointNameException {
}

message DuplicateListenerException {
}

message DuplicatePolicyNameException {
}

message DuplicateTagKeysException {
}

message HealthCheck {
    // The number of consecutive health checks successes required before moving the instance to the <code>Healthy</code> state.
    integer HealthyThreshold = 1;
    // The approximate interval, in seconds, between health checks of an individual instance.
    integer Interval = 2;
    // <p>The instance being checked. The protocol is either TCP, HTTP, HTTPS, or SSL. The range of valid ports is one (1) through 65535.</p> <p>TCP is the default, specified as a TCP: port pair, for example "TCP:5000". In this case, a health check simply attempts to open a TCP connection to the instance on the specified port. Failure to connect within the configured timeout is considered unhealthy.</p> <p>SSL is also specified as SSL: port pair, for example, SSL:5000.</p> <p>For HTTP/HTTPS, you must include a ping path in the string. HTTP is specified as a HTTP:port;/;PathToPing; grouping, for example "HTTP:80/weather/us/wa/seattle". In this case, a HTTP GET request is issued to the instance on the given port and path. Any answer other than "200 OK" within the timeout period is considered unhealthy.</p> <p>The total length of the HTTP ping target must be 1024 16-bit Unicode characters or less.</p>
    string Target = 3;
    // <p>The amount of time, in seconds, during which no response means a failed health check.</p> <p>This value must be less than the <code>Interval</code> value.</p>
    integer Timeout = 4;
    // The number of consecutive health check failures required before moving the instance to the <code>Unhealthy</code> state.
    integer UnhealthyThreshold = 5;
}

message Instance {
    // The instance ID.
    string InstanceId = 1;
}

message InstanceState {
    // <p>A description of the instance state. This string can contain one or more of the following messages.</p> <ul> <li> <p> <code>N/A</code> </p> </li> <li> <p> <code>A transient error occurred. Please try again later.</code> </p> </li> <li> <p> <code>Instance has failed at least the UnhealthyThreshold number of health checks consecutively.</code> </p> </li> <li> <p> <code>Instance has not passed the configured HealthyThreshold number of health checks consecutively.</code> </p> </li> <li> <p> <code>Instance registration is still in progress.</code> </p> </li> <li> <p> <code>Instance is in the EC2 Availability Zone for which LoadBalancer is not configured to route traffic to.</code> </p> </li> <li> <p> <code>Instance is not currently registered with the LoadBalancer.</code> </p> </li> <li> <p> <code>Instance deregistration currently in progress.</code> </p> </li> <li> <p> <code>Disable Availability Zone is currently in progress.</code> </p> </li> <li> <p> <code>Instance is in pending state.</code> </p> </li> <li> <p> <code>Instance is in stopped state.</code> </p> </li> <li> <p> <code>Instance is in terminated state.</code> </p> </li> </ul>
    string Description = 1;
    // The ID of the instance.
    string InstanceId = 2;
    // <p>Information about the cause of <code>OutOfService</code> instances. Specifically, whether the cause is Elastic Load Balancing or the instance.</p> <p>Valid values: <code>ELB</code> | <code>Instance</code> | <code>N/A</code> </p>
    string ReasonCode = 3;
    // <p>The current state of the instance.</p> <p>Valid values: <code>InService</code> | <code>OutOfService</code> | <code>Unknown</code> </p>
    string State = 4;
}

repeated InstanceState InstanceStates = 1

repeated Instance Instances = 1

message InvalidConfigurationRequestException {
}

message InvalidEndPointException {
}

message InvalidSchemeException {
}

message InvalidSecurityGroupException {
}

message InvalidSubnetException {
}

repeated LBCookieStickinessPolicy LBCookieStickinessPolicies = 1

message LBCookieStickinessPolicy {
    // The time period, in seconds, after which the cookie should be considered stale. If this parameter is not specified, the stickiness session lasts for the duration of the browser session.
    integer CookieExpirationPeriod = 1;
    // The name of the policy. This name must be unique within the set of policies for this load balancer.
    string PolicyName = 2;
}

message Limit {
    // The maximum value of the limit.
    string Max = 1;
    // <p>The name of the limit. The possible values are:</p> <ul> <li> <p>classic-listeners</p> </li> <li> <p>classic-load-balancers</p> </li> </ul>
    string Name = 2;
}

repeated Limit Limits = 1

message Listener {
    // The port on which the instance is listening.
    integer InstancePort = 1;
    // <p>The protocol to use for routing traffic to instances: HTTP, HTTPS, TCP, or SSL.</p> <p>If the front-end protocol is HTTP, HTTPS, TCP, or SSL, <code>InstanceProtocol</code> must be at the same protocol.</p> <p>If there is another listener with the same <code>InstancePort</code> whose <code>InstanceProtocol</code> is secure, (HTTPS or SSL), the listener's <code>InstanceProtocol</code> must also be secure.</p> <p>If there is another listener with the same <code>InstancePort</code> whose <code>InstanceProtocol</code> is HTTP or TCP, the listener's <code>InstanceProtocol</code> must be HTTP or TCP.</p>
    string InstanceProtocol = 2;
    // The port on which the load balancer is listening. On EC2-VPC, you can specify any port from the range 1-65535. On EC2-Classic, you can specify any port from the following list: 25, 80, 443, 465, 587, 1024-65535.
    integer LoadBalancerPort = 3;
    // The load balancer transport protocol to use for routing: HTTP, HTTPS, TCP, or SSL.
    string Protocol = 4;
    // The Amazon Resource Name (ARN) of the server certificate.
    string SSLCertificateId = 5;
}

message ListenerDescription {
    // The listener.
    Listener Listener = 1;
    // The policies. If there are no policies enabled, the list is empty.
    array PolicyNames = 2;
}

repeated ListenerDescription ListenerDescriptions = 1

message ListenerNotFoundException {
}

repeated Listener Listeners = 1

message LoadBalancerAttributeNotFoundException {
}

message LoadBalancerAttributes {
    // <p>If enabled, the load balancer captures detailed information of all requests and delivers the information to the Amazon S3 bucket that you specify.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-access-logs.html">Enable Access Logs</a> in the <i>Classic Load Balancer Guide</i>.</p>
    AccessLog AccessLog = 1;
    // This parameter is reserved.
    array AdditionalAttributes = 2;
    // <p>If enabled, the load balancer allows existing requests to complete before the load balancer shifts traffic away from a deregistered or unhealthy instance.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-conn-drain.html">Configure Connection Draining</a> in the <i>Classic Load Balancer Guide</i>.</p>
    ConnectionDraining ConnectionDraining = 3;
    // <p>If enabled, the load balancer allows the connections to remain idle (no data is sent over the connection) for the specified duration.</p> <p>By default, Elastic Load Balancing maintains a 60-second idle connection timeout for both front-end and back-end connections of your load balancer. For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-idle-timeout.html">Configure Idle Connection Timeout</a> in the <i>Classic Load Balancer Guide</i>.</p>
    ConnectionSettings ConnectionSettings = 4;
    // <p>If enabled, the load balancer routes the request traffic evenly across all instances regardless of the Availability Zones.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-crosszone-lb.html">Configure Cross-Zone Load Balancing</a> in the <i>Classic Load Balancer Guide</i>.</p>
    CrossZoneLoadBalancing CrossZoneLoadBalancing = 5;
}

message LoadBalancerDescription {
    // The Availability Zones for the load balancer.
    array AvailabilityZones = 1;
    // Information about your EC2 instances.
    array BackendServerDescriptions = 2;
    // <p>The DNS name of the load balancer.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/using-domain-names-with-elb.html">Configure a Custom Domain Name</a> in the <i>Classic Load Balancer Guide</i>.</p>
    string CanonicalHostedZoneName = 3;
    // The ID of the Amazon Route 53 hosted zone for the load balancer.
    string CanonicalHostedZoneNameID = 4;
    // The date and time the load balancer was created.
    string CreatedTime = 5;
    // The DNS name of the load balancer.
    string DNSName = 6;
    // Information about the health checks conducted on the load balancer.
    HealthCheck HealthCheck = 7;
    // The IDs of the instances for the load balancer.
    array Instances = 8;
    // The listeners for the load balancer.
    array ListenerDescriptions = 9;
    // The name of the load balancer.
    string LoadBalancerName = 10;
    // The policies defined for the load balancer.
    Policies Policies = 11;
    // <p>The type of load balancer. Valid only for load balancers in a VPC.</p> <p>If <code>Scheme</code> is <code>internet-facing</code>, the load balancer has a public DNS name that resolves to a public IP address.</p> <p>If <code>Scheme</code> is <code>internal</code>, the load balancer has a public DNS name that resolves to a private IP address.</p>
    string Scheme = 12;
    // The security groups for the load balancer. Valid only for load balancers in a VPC.
    array SecurityGroups = 13;
    // The security group for the load balancer, which you can use as part of your inbound rules for your registered instances. To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
    SourceSecurityGroup SourceSecurityGroup = 14;
    // The IDs of the subnets for the load balancer.
    array Subnets = 15;
    // The ID of the VPC for the load balancer.
    string VPCId = 16;
}

repeated LoadBalancerDescription LoadBalancerDescriptions = 1

repeated string LoadBalancerNames = 1

repeated string LoadBalancerNamesMax20 = 1







message ModifyLoadBalancerAttributesInput {
    // The attributes for the load balancer.
    LoadBalancerAttributes LoadBalancerAttributes = 1;
    // The name of the load balancer.
    string LoadBalancerName = 2;
}

message ModifyLoadBalancerAttributesOutput {
    // Information about the load balancer attributes.
    LoadBalancerAttributes LoadBalancerAttributes = 1;
    // The name of the load balancer.
    string LoadBalancerName = 2;
}

message Policies {
    // The stickiness policies created using <a>CreateAppCookieStickinessPolicy</a>.
    array AppCookieStickinessPolicies = 1;
    // The stickiness policies created using <a>CreateLBCookieStickinessPolicy</a>.
    array LBCookieStickinessPolicies = 2;
    // The policies other than the stickiness policies.
    array OtherPolicies = 3;
}

message PolicyAttribute {
    // The name of the attribute.
    string AttributeName = 1;
    // The value of the attribute.
    string AttributeValue = 2;
}

message PolicyAttributeDescription {
    // The name of the attribute.
    string AttributeName = 1;
    // The value of the attribute.
    string AttributeValue = 2;
}

repeated PolicyAttributeDescription PolicyAttributeDescriptions = 1

message PolicyAttributeTypeDescription {
    // The name of the attribute.
    string AttributeName = 1;
    // The type of the attribute. For example, <code>Boolean</code> or <code>Integer</code>.
    string AttributeType = 2;
    // <p>The cardinality of the attribute.</p> <p>Valid values:</p> <ul> <li> <p>ONE(1) : Single value required</p> </li> <li> <p>ZERO_OR_ONE(0..1) : Up to one value is allowed</p> </li> <li> <p>ZERO_OR_MORE(0..*) : Optional. Multiple values are allowed</p> </li> <li> <p>ONE_OR_MORE(1..*0) : Required. Multiple values are allowed</p> </li> </ul>
    string Cardinality = 3;
    // The default value of the attribute, if applicable.
    string DefaultValue = 4;
    // A description of the attribute.
    string Description = 5;
}

repeated PolicyAttributeTypeDescription PolicyAttributeTypeDescriptions = 1

repeated PolicyAttribute PolicyAttributes = 1

message PolicyDescription {
    // The policy attributes.
    array PolicyAttributeDescriptions = 1;
    // The name of the policy.
    string PolicyName = 2;
    // The name of the policy type.
    string PolicyTypeName = 3;
}

repeated PolicyDescription PolicyDescriptions = 1



repeated string PolicyNames = 1

message PolicyNotFoundException {
}

message PolicyTypeDescription {
    // A description of the policy type.
    string Description = 1;
    // The description of the policy attributes associated with the policies defined by Elastic Load Balancing.
    array PolicyAttributeTypeDescriptions = 2;
    // The name of the policy type.
    string PolicyTypeName = 3;
}

repeated PolicyTypeDescription PolicyTypeDescriptions = 1



repeated string PolicyTypeNames = 1

message PolicyTypeNotFoundException {
}

repeated integer Ports = 1





message RegisterEndPointsInput {
    // The IDs of the instances.
    array Instances = 1;
    // The name of the load balancer.
    string LoadBalancerName = 2;
}

message RegisterEndPointsOutput {
    // The updated list of instances for the load balancer.
    array Instances = 1;
}

message RemoveAvailabilityZonesInput {
    // The Availability Zones.
    array AvailabilityZones = 1;
    // The name of the load balancer.
    string LoadBalancerName = 2;
}

message RemoveAvailabilityZonesOutput {
    // The remaining Availability Zones for the load balancer.
    array AvailabilityZones = 1;
}

message RemoveTagsInput {
    // The name of the load balancer. You can specify a maximum of one load balancer name.
    array LoadBalancerNames = 1;
    // The list of tag keys to remove.
    array Tags = 2;
}

message RemoveTagsOutput {
}











repeated string SecurityGroups = 1

message SetLoadBalancerListenerSSLCertificateInput {
    // The name of the load balancer.
    string LoadBalancerName = 1;
    // The port that uses the specified SSL certificate.
    integer LoadBalancerPort = 2;
    // The Amazon Resource Name (ARN) of the SSL certificate.
    string SSLCertificateId = 3;
}

message SetLoadBalancerListenerSSLCertificateOutput {
}

message SetLoadBalancerPoliciesForBackendServerInput {
    // The port number associated with the EC2 instance.
    integer InstancePort = 1;
    // The name of the load balancer.
    string LoadBalancerName = 2;
    // The names of the policies. If the list is empty, then all current polices are removed from the EC2 instance.
    array PolicyNames = 3;
}

message SetLoadBalancerPoliciesForBackendServerOutput {
}

message SetLoadBalancerPoliciesOfListenerInput {
    // The name of the load balancer.
    string LoadBalancerName = 1;
    // The external port of the load balancer.
    integer LoadBalancerPort = 2;
    // The names of the policies. This list must include all policies to be enabled. If you omit a policy that is currently enabled, it is disabled. If the list is empty, all current policies are disabled.
    array PolicyNames = 3;
}

message SetLoadBalancerPoliciesOfListenerOutput {
}

message SourceSecurityGroup {
    // The name of the security group.
    string GroupName = 1;
    // The owner of the security group.
    string OwnerAlias = 2;
}

message SubnetNotFoundException {
}

repeated string Subnets = 1

message Tag {
    // The key of the tag.
    string Key = 1;
    // The value of the tag.
    string Value = 2;
}

message TagDescription {
    // The name of the load balancer.
    string LoadBalancerName = 1;
    // The tags.
    array Tags = 2;
}

repeated TagDescription TagDescriptions = 1



repeated TagKeyOnly TagKeyList = 1

message TagKeyOnly {
    // The name of the key.
    string Key = 1;
}

repeated Tag TagList = 1



message TooManyAccessPointsException {
}

message TooManyPoliciesException {
}

message TooManyTagsException {
}

message UnsupportedProtocolException {
}

service ElasticLoadBalancingService {
    // <p>Adds the specified tags to the specified load balancer. Each load balancer can have a maximum of 10 tags.</p> <p>Each tag consists of a key and an optional value. If a tag with the same key is already associated with the load balancer, <code>AddTags</code> updates its value.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/add-remove-tags.html">Tag Your Classic Load Balancer</a> in the <i>Classic Load Balancer Guide</i>.</p>
    rpc Post(PostRequest) returns (AddTagsOutput) {
      option (google.api.http) = {
        post: "//"
        body: "body"
      };
    }
    // <p>Associates one or more security groups with your load balancer in a virtual private cloud (VPC). The specified security groups override the previously associated security groups.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-security-groups.html#elb-vpc-security-groups">Security Groups for Load Balancers in a VPC</a> in the <i>Classic Load Balancer Guide</i>.</p>
    rpc Post#ApplySecurityGroupsToLoadBalancer(Post#ApplySecurityGroupsToLoadBalancerRequest) returns (ApplySecurityGroupsToLoadBalancerOutput) {
      option (google.api.http) = {
        post: "//#ApplySecurityGroupsToLoadBalancer"
        body: "body"
      };
    }
    // <p>Adds one or more subnets to the set of configured subnets for the specified load balancer.</p> <p>The load balancer evenly distributes requests across all registered subnets. For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-manage-subnets.html">Add or Remove Subnets for Your Load Balancer in a VPC</a> in the <i>Classic Load Balancer Guide</i>.</p>
    rpc Post#AttachLoadBalancerToSubnets(Post#AttachLoadBalancerToSubnetsRequest) returns (AttachLoadBalancerToSubnetsOutput) {
      option (google.api.http) = {
        post: "//#AttachLoadBalancerToSubnets"
        body: "body"
      };
    }
    // <p>Specifies the health check settings to use when evaluating the health state of your EC2 instances.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-healthchecks.html">Configure Health Checks for Your Load Balancer</a> in the <i>Classic Load Balancer Guide</i>.</p>
    rpc Post#ConfigureHealthCheck(Post#ConfigureHealthCheckRequest) returns (ConfigureHealthCheckOutput) {
      option (google.api.http) = {
        post: "//#ConfigureHealthCheck"
        body: "body"
      };
    }
    // <p>Generates a stickiness policy with sticky session lifetimes that follow that of an application-generated cookie. This policy can be associated only with HTTP/HTTPS listeners.</p> <p>This policy is similar to the policy created by <a>CreateLBCookieStickinessPolicy</a>, except that the lifetime of the special Elastic Load Balancing cookie, <code>AWSELB</code>, follows the lifetime of the application-generated cookie specified in the policy configuration. The load balancer only inserts a new stickiness cookie when the application response includes a new application cookie.</p> <p>If the application cookie is explicitly removed or expires, the session stops being sticky until a new application cookie is issued.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-application">Application-Controlled Session Stickiness</a> in the <i>Classic Load Balancer Guide</i>.</p>
    rpc Post#CreateAppCookieStickinessPolicy(Post#CreateAppCookieStickinessPolicyRequest) returns (CreateAppCookieStickinessPolicyOutput) {
      option (google.api.http) = {
        post: "//#CreateAppCookieStickinessPolicy"
        body: "body"
      };
    }
    // <p>Generates a stickiness policy with sticky session lifetimes controlled by the lifetime of the browser (user-agent) or a specified expiration period. This policy can be associated only with HTTP/HTTPS listeners.</p> <p>When a load balancer implements this policy, the load balancer uses a special cookie to track the instance for each request. When the load balancer receives a request, it first checks to see if this cookie is present in the request. If so, the load balancer sends the request to the application server specified in the cookie. If not, the load balancer sends the request to a server that is chosen based on the existing load-balancing algorithm.</p> <p>A cookie is inserted into the response for binding subsequent requests from the same user to that server. The validity of the cookie is based on the cookie expiration time, which is specified in the policy configuration.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-duration">Duration-Based Session Stickiness</a> in the <i>Classic Load Balancer Guide</i>.</p>
    rpc Post#CreateLBCookieStickinessPolicy(Post#CreateLBCookieStickinessPolicyRequest) returns (CreateLBCookieStickinessPolicyOutput) {
      option (google.api.http) = {
        post: "//#CreateLBCookieStickinessPolicy"
        body: "body"
      };
    }
    // <p>Creates a Classic Load Balancer.</p> <p>You can add listeners, security groups, subnets, and tags when you create your load balancer, or you can add them later using <a>CreateLoadBalancerListeners</a>, <a>ApplySecurityGroupsToLoadBalancer</a>, <a>AttachLoadBalancerToSubnets</a>, and <a>AddTags</a>.</p> <p>To describe your current load balancers, see <a>DescribeLoadBalancers</a>. When you are finished with a load balancer, you can delete it using <a>DeleteLoadBalancer</a>.</p> <p>You can create up to 20 load balancers per region per account. You can request an increase for the number of load balancers for your account. For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-limits.html">Limits for Your Classic Load Balancer</a> in the <i>Classic Load Balancer Guide</i>.</p>
    rpc Post#CreateLoadBalancer(Post#CreateLoadBalancerRequest) returns (CreateAccessPointOutput) {
      option (google.api.http) = {
        post: "//#CreateLoadBalancer"
        body: "body"
      };
    }
    // <p>Creates one or more listeners for the specified load balancer. If a listener with the specified port does not already exist, it is created; otherwise, the properties of the new listener must match the properties of the existing listener.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-listener-config.html">Listeners for Your Classic Load Balancer</a> in the <i>Classic Load Balancer Guide</i>.</p>
    rpc Post#CreateLoadBalancerListeners(Post#CreateLoadBalancerListenersRequest) returns (CreateLoadBalancerListenerOutput) {
      option (google.api.http) = {
        post: "//#CreateLoadBalancerListeners"
        body: "body"
      };
    }
    // <p>Creates a policy with the specified attributes for the specified load balancer.</p> <p>Policies are settings that are saved for your load balancer and that can be applied to the listener or the application server, depending on the policy type.</p>
    rpc Post#CreateLoadBalancerPolicy(Post#CreateLoadBalancerPolicyRequest) returns (CreateLoadBalancerPolicyOutput) {
      option (google.api.http) = {
        post: "//#CreateLoadBalancerPolicy"
        body: "body"
      };
    }
    // <p>Deletes the specified load balancer.</p> <p>If you are attempting to recreate a load balancer, you must reconfigure all settings. The DNS name associated with a deleted load balancer are no longer usable. The name and associated DNS record of the deleted load balancer no longer exist and traffic sent to any of its IP addresses is no longer delivered to your instances.</p> <p>If the load balancer does not exist or has already been deleted, the call to <code>DeleteLoadBalancer</code> still succeeds.</p>
    rpc Post#DeleteLoadBalancer(Post#DeleteLoadBalancerRequest) returns (DeleteAccessPointOutput) {
      option (google.api.http) = {
        post: "//#DeleteLoadBalancer"
        body: "body"
      };
    }
    // Deletes the specified listeners from the specified load balancer.
    rpc Post#DeleteLoadBalancerListeners(Post#DeleteLoadBalancerListenersRequest) returns (DeleteLoadBalancerListenerOutput) {
      option (google.api.http) = {
        post: "//#DeleteLoadBalancerListeners"
        body: "body"
      };
    }
    // Deletes the specified policy from the specified load balancer. This policy must not be enabled for any listeners.
    rpc Post#DeleteLoadBalancerPolicy(Post#DeleteLoadBalancerPolicyRequest) returns (DeleteLoadBalancerPolicyOutput) {
      option (google.api.http) = {
        post: "//#DeleteLoadBalancerPolicy"
        body: "body"
      };
    }
    // <p>Deregisters the specified instances from the specified load balancer. After the instance is deregistered, it no longer receives traffic from the load balancer.</p> <p>You can use <a>DescribeLoadBalancers</a> to verify that the instance is deregistered from the load balancer.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-deregister-register-instances.html">Register or De-Register EC2 Instances</a> in the <i>Classic Load Balancer Guide</i>.</p>
    rpc Post#DeregisterInstancesFromLoadBalancer(Post#DeregisterInstancesFromLoadBalancerRequest) returns (DeregisterEndPointsOutput) {
      option (google.api.http) = {
        post: "//#DeregisterInstancesFromLoadBalancer"
        body: "body"
      };
    }
    // <p>Describes the current Elastic Load Balancing resource limits for your AWS account.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-limits.html">Limits for Your Classic Load Balancer</a> in the <i>Classic Load Balancer Guide</i>.</p>
    rpc Post#DescribeAccountLimits(Post#DescribeAccountLimitsRequest) returns (DescribeAccountLimitsOutput) {
      option (google.api.http) = {
        post: "//#DescribeAccountLimits"
        body: "body"
      };
    }
    // Describes the state of the specified instances with respect to the specified load balancer. If no instances are specified, the call describes the state of all instances that are currently registered with the load balancer. If instances are specified, their state is returned even if they are no longer registered with the load balancer. The state of terminated instances is not returned.
    rpc Post#DescribeInstanceHealth(Post#DescribeInstanceHealthRequest) returns (DescribeEndPointStateOutput) {
      option (google.api.http) = {
        post: "//#DescribeInstanceHealth"
        body: "body"
      };
    }
    // Describes the attributes for the specified load balancer.
    rpc Post#DescribeLoadBalancerAttributes(Post#DescribeLoadBalancerAttributesRequest) returns (DescribeLoadBalancerAttributesOutput) {
      option (google.api.http) = {
        post: "//#DescribeLoadBalancerAttributes"
        body: "body"
      };
    }
    // <p>Describes the specified policies.</p> <p>If you specify a load balancer name, the action returns the descriptions of all policies created for the load balancer. If you specify a policy name associated with your load balancer, the action returns the description of that policy. If you don't specify a load balancer name, the action returns descriptions of the specified sample policies, or descriptions of all sample policies. The names of the sample policies have the <code>ELBSample-</code> prefix.</p>
    rpc Post#DescribeLoadBalancerPolicies(Post#DescribeLoadBalancerPoliciesRequest) returns (DescribeLoadBalancerPoliciesOutput) {
      option (google.api.http) = {
        post: "//#DescribeLoadBalancerPolicies"
        body: "body"
      };
    }
    // <p>Describes the specified load balancer policy types or all load balancer policy types.</p> <p>The description of each type indicates how it can be used. For example, some policies can be used only with layer 7 listeners, some policies can be used only with layer 4 listeners, and some policies can be used only with your EC2 instances.</p> <p>You can use <a>CreateLoadBalancerPolicy</a> to create a policy configuration for any of these policy types. Then, depending on the policy type, use either <a>SetLoadBalancerPoliciesOfListener</a> or <a>SetLoadBalancerPoliciesForBackendServer</a> to set the policy.</p>
    rpc Post#DescribeLoadBalancerPolicyTypes(Post#DescribeLoadBalancerPolicyTypesRequest) returns (DescribeLoadBalancerPolicyTypesOutput) {
      option (google.api.http) = {
        post: "//#DescribeLoadBalancerPolicyTypes"
        body: "body"
      };
    }
    // Describes the specified the load balancers. If no load balancers are specified, the call describes all of your load balancers.
    rpc Post#DescribeLoadBalancers(Post#DescribeLoadBalancersRequest) returns (DescribeAccessPointsOutput) {
      option (google.api.http) = {
        post: "//#DescribeLoadBalancers"
        body: "body"
      };
    }
    // Describes the tags associated with the specified load balancers.
    rpc Post#DescribeTags(Post#DescribeTagsRequest) returns (DescribeTagsOutput) {
      option (google.api.http) = {
        post: "//#DescribeTags"
        body: "body"
      };
    }
    // <p>Removes the specified subnets from the set of configured subnets for the load balancer.</p> <p>After a subnet is removed, all EC2 instances registered with the load balancer in the removed subnet go into the <code>OutOfService</code> state. Then, the load balancer balances the traffic among the remaining routable subnets.</p>
    rpc Post#DetachLoadBalancerFromSubnets(Post#DetachLoadBalancerFromSubnetsRequest) returns (DetachLoadBalancerFromSubnetsOutput) {
      option (google.api.http) = {
        post: "//#DetachLoadBalancerFromSubnets"
        body: "body"
      };
    }
    // <p>Removes the specified Availability Zones from the set of Availability Zones for the specified load balancer.</p> <p>There must be at least one Availability Zone registered with a load balancer at all times. After an Availability Zone is removed, all instances registered with the load balancer that are in the removed Availability Zone go into the <code>OutOfService</code> state. Then, the load balancer attempts to equally balance the traffic among its remaining Availability Zones.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-az.html">Add or Remove Availability Zones</a> in the <i>Classic Load Balancer Guide</i>.</p>
    rpc Post#DisableAvailabilityZonesForLoadBalancer(Post#DisableAvailabilityZonesForLoadBalancerRequest) returns (RemoveAvailabilityZonesOutput) {
      option (google.api.http) = {
        post: "//#DisableAvailabilityZonesForLoadBalancer"
        body: "body"
      };
    }
    // <p>Adds the specified Availability Zones to the set of Availability Zones for the specified load balancer.</p> <p>The load balancer evenly distributes requests across all its registered Availability Zones that contain instances.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-az.html">Add or Remove Availability Zones</a> in the <i>Classic Load Balancer Guide</i>.</p>
    rpc Post#EnableAvailabilityZonesForLoadBalancer(Post#EnableAvailabilityZonesForLoadBalancerRequest) returns (AddAvailabilityZonesOutput) {
      option (google.api.http) = {
        post: "//#EnableAvailabilityZonesForLoadBalancer"
        body: "body"
      };
    }
    // <p>Modifies the attributes of the specified load balancer.</p> <p>You can modify the load balancer attributes, such as <code>AccessLogs</code>, <code>ConnectionDraining</code>, and <code>CrossZoneLoadBalancing</code> by either enabling or disabling them. Or, you can modify the load balancer attribute <code>ConnectionSettings</code> by specifying an idle connection timeout value for your load balancer.</p> <p>For more information, see the following in the <i>Classic Load Balancer Guide</i>:</p> <ul> <li> <p> <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-crosszone-lb.html">Cross-Zone Load Balancing</a> </p> </li> <li> <p> <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-conn-drain.html">Connection Draining</a> </p> </li> <li> <p> <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/access-log-collection.html">Access Logs</a> </p> </li> <li> <p> <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-idle-timeout.html">Idle Connection Timeout</a> </p> </li> </ul>
    rpc Post#ModifyLoadBalancerAttributes(Post#ModifyLoadBalancerAttributesRequest) returns (ModifyLoadBalancerAttributesOutput) {
      option (google.api.http) = {
        post: "//#ModifyLoadBalancerAttributes"
        body: "body"
      };
    }
    // <p>Adds the specified instances to the specified load balancer.</p> <p>The instance must be a running instance in the same network as the load balancer (EC2-Classic or the same VPC). If you have EC2-Classic instances and a load balancer in a VPC with ClassicLink enabled, you can link the EC2-Classic instances to that VPC and then register the linked EC2-Classic instances with the load balancer in the VPC.</p> <p>Note that <code>RegisterInstanceWithLoadBalancer</code> completes when the request has been registered. Instance registration takes a little time to complete. To check the state of the registered instances, use <a>DescribeLoadBalancers</a> or <a>DescribeInstanceHealth</a>.</p> <p>After the instance is registered, it starts receiving traffic and requests from the load balancer. Any instance that is not in one of the Availability Zones registered for the load balancer is moved to the <code>OutOfService</code> state. If an Availability Zone is added to the load balancer later, any instances registered with the load balancer move to the <code>InService</code> state.</p> <p>To deregister instances from a load balancer, use <a>DeregisterInstancesFromLoadBalancer</a>.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-deregister-register-instances.html">Register or De-Register EC2 Instances</a> in the <i>Classic Load Balancer Guide</i>.</p>
    rpc Post#RegisterInstancesWithLoadBalancer(Post#RegisterInstancesWithLoadBalancerRequest) returns (RegisterEndPointsOutput) {
      option (google.api.http) = {
        post: "//#RegisterInstancesWithLoadBalancer"
        body: "body"
      };
    }
    // Removes one or more tags from the specified load balancer.
    rpc Post#RemoveTags(Post#RemoveTagsRequest) returns (RemoveTagsOutput) {
      option (google.api.http) = {
        post: "//#RemoveTags"
        body: "body"
      };
    }
    // <p>Sets the certificate that terminates the specified listener's SSL connections. The specified certificate replaces any prior certificate that was used on the same load balancer and port.</p> <p>For more information about updating your SSL certificate, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-update-ssl-cert.html">Replace the SSL Certificate for Your Load Balancer</a> in the <i>Classic Load Balancer Guide</i>.</p>
    rpc Post#SetLoadBalancerListenerSSLCertificate(Post#SetLoadBalancerListenerSSLCertificateRequest) returns (SetLoadBalancerListenerSSLCertificateOutput) {
      option (google.api.http) = {
        post: "//#SetLoadBalancerListenerSSLCertificate"
        body: "body"
      };
    }
    // <p>Replaces the set of policies associated with the specified port on which the EC2 instance is listening with a new set of policies. At this time, only the back-end server authentication policy type can be applied to the instance ports; this policy type is composed of multiple public key policies.</p> <p>Each time you use <code>SetLoadBalancerPoliciesForBackendServer</code> to enable the policies, use the <code>PolicyNames</code> parameter to list the policies that you want to enable.</p> <p>You can use <a>DescribeLoadBalancers</a> or <a>DescribeLoadBalancerPolicies</a> to verify that the policy is associated with the EC2 instance.</p> <p>For more information about enabling back-end instance authentication, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-create-https-ssl-load-balancer.html#configure_backendauth_clt">Configure Back-end Instance Authentication</a> in the <i>Classic Load Balancer Guide</i>. For more information about Proxy Protocol, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-proxy-protocol.html">Configure Proxy Protocol Support</a> in the <i>Classic Load Balancer Guide</i>.</p>
    rpc Post#SetLoadBalancerPoliciesForBackendServer(Post#SetLoadBalancerPoliciesForBackendServerRequest) returns (SetLoadBalancerPoliciesForBackendServerOutput) {
      option (google.api.http) = {
        post: "//#SetLoadBalancerPoliciesForBackendServer"
        body: "body"
      };
    }
    // <p>Replaces the current set of policies for the specified load balancer port with the specified set of policies.</p> <p>To enable back-end server authentication, use <a>SetLoadBalancerPoliciesForBackendServer</a>.</p> <p>For more information about setting policies, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/ssl-config-update.html">Update the SSL Negotiation Configuration</a>, <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-duration">Duration-Based Session Stickiness</a>, and <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-application">Application-Controlled Session Stickiness</a> in the <i>Classic Load Balancer Guide</i>.</p>
    rpc Post#SetLoadBalancerPoliciesOfListener(Post#SetLoadBalancerPoliciesOfListenerRequest) returns (SetLoadBalancerPoliciesOfListenerOutput) {
      option (google.api.http) = {
        post: "//#SetLoadBalancerPoliciesOfListener"
        body: "body"
      };
    }
}

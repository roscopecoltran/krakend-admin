syntax = "proto3";

import "google/api/annotations.proto";

package elasticloadbalancing;

message PostRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AddTagsInput body = 10;
}

message Post#CreateListenerRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateListenerInput body = 10;
}

message Post#CreateLoadBalancerRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateLoadBalancerInput body = 10;
}

message Post#CreateRuleRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateRuleInput body = 10;
}

message Post#CreateTargetGroupRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateTargetGroupInput body = 10;
}

message Post#DeleteListenerRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteListenerInput body = 10;
}

message Post#DeleteLoadBalancerRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteLoadBalancerInput body = 10;
}

message Post#DeleteRuleRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteRuleInput body = 10;
}

message Post#DeleteTargetGroupRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteTargetGroupInput body = 10;
}

message Post#DeregisterTargetsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeregisterTargetsInput body = 10;
}

message Post#DescribeAccountLimitsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeAccountLimitsInput body = 10;
}

message Post#DescribeListenersRequest {
    string Action = 1;
    // Pagination token
    string Marker = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    DescribeListenersInput body = 11;
}

message Post#DescribeLoadBalancerAttributesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeLoadBalancerAttributesInput body = 10;
}

message Post#DescribeLoadBalancersRequest {
    string Action = 1;
    // Pagination token
    string Marker = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    DescribeLoadBalancersInput body = 11;
}

message Post#DescribeRulesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeRulesInput body = 10;
}

message Post#DescribeSSLPoliciesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeSSLPoliciesInput body = 10;
}

message Post#DescribeTagsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeTagsInput body = 10;
}

message Post#DescribeTargetGroupAttributesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeTargetGroupAttributesInput body = 10;
}

message Post#DescribeTargetGroupsRequest {
    string Action = 1;
    // Pagination token
    string Marker = 2;
    string Version = 3;
    string X_Amz_Algorithm = 4;
    string X_Amz_Content_Sha256 = 5;
    string X_Amz_Credential = 6;
    string X_Amz_Date = 7;
    string X_Amz_Security_Token = 8;
    string X_Amz_Signature = 9;
    string X_Amz_SignedHeaders = 10;
    DescribeTargetGroupsInput body = 11;
}

message Post#DescribeTargetHealthRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeTargetHealthInput body = 10;
}

message Post#ModifyListenerRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ModifyListenerInput body = 10;
}

message Post#ModifyLoadBalancerAttributesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ModifyLoadBalancerAttributesInput body = 10;
}

message Post#ModifyRuleRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ModifyRuleInput body = 10;
}

message Post#ModifyTargetGroupRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ModifyTargetGroupInput body = 10;
}

message Post#ModifyTargetGroupAttributesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ModifyTargetGroupAttributesInput body = 10;
}

message Post#RegisterTargetsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RegisterTargetsInput body = 10;
}

message Post#RemoveTagsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RemoveTagsInput body = 10;
}

message Post#SetIpAddressTypeRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    SetIpAddressTypeInput body = 10;
}

message Post#SetRulePrioritiesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    SetRulePrioritiesInput body = 10;
}

message Post#SetSecurityGroupsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    SetSecurityGroupsInput body = 10;
}

message Post#SetSubnetsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    SetSubnetsInput body = 10;
}

enum ActionTypeEnum {
    FORWARD = 0;
}

repeated string Actions = 1

message AddTagsInput {
    // The Amazon Resource Name (ARN) of the resource.
    array ResourceArns = 1;
    // The tags. Each resource can have a maximum of 10 tags.
    array Tags = 2;
}

message AddTagsOutput {
}

message AllocationIdNotFoundException {
}

message AvailabilityZone {
    // [Network Load Balancers] The static IP address.
    array LoadBalancerAddresses = 1;
    // The ID of the subnet.
    string SubnetId = 2;
    // The name of the Availability Zone.
    string ZoneName = 3;
}

message AvailabilityZoneNotSupportedException {
}

repeated AvailabilityZone AvailabilityZones = 1



message Certificate {
    // The Amazon Resource Name (ARN) of the certificate.
    string CertificateArn = 1;
}



repeated Certificate CertificateList = 1

message CertificateNotFoundException {
}

message Cipher {
    // The name of the cipher.
    string Name = 1;
    // The priority of the cipher.
    integer Priority = 2;
}





repeated Cipher Ciphers = 1



message CreateListenerInput {
    // [HTTPS listeners] The SSL server certificate. You must provide exactly one certificate.
    array Certificates = 1;
    // The default action for the listener. For Application Load Balancers, the protocol of the specified target group must be HTTP or HTTPS. For Network Load Balancers, the protocol of the specified target group must be TCP.
    array DefaultActions = 2;
    // The Amazon Resource Name (ARN) of the load balancer.
    string LoadBalancerArn = 3;
    // The port on which the load balancer is listening.
    integer Port = 4;
    // The protocol for connections from clients to the load balancer. For Application Load Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported protocol is TCP.
    ProtocolEnum Protocol = 5;
    // [HTTPS listeners] The security policy that defines which ciphers and protocols are supported. The default is the current predefined security policy.
    string SslPolicy = 6;
}

message CreateListenerOutput {
    // Information about the listener.
    array Listeners = 1;
}

message CreateLoadBalancerInput {
    // [Application Load Balancers] The type of IP addresses used by the subnets for your load balancer. The possible values are <code>ipv4</code> (for IPv4 addresses) and <code>dualstack</code> (for IPv4 and IPv6 addresses). Internal load balancers must use <code>ipv4</code>.
    IpAddressType IpAddressType = 1;
    // <p>The name of the load balancer.</p> <p>This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.</p>
    string Name = 2;
    // <p>The nodes of an Internet-facing load balancer have public IP addresses. The DNS name of an Internet-facing load balancer is publicly resolvable to the public IP addresses of the nodes. Therefore, Internet-facing load balancers can route requests from clients over the Internet.</p> <p>The nodes of an internal load balancer have only private IP addresses. The DNS name of an internal load balancer is publicly resolvable to the private IP addresses of the nodes. Therefore, internal load balancers can only route requests from clients with access to the VPC for the load balancer.</p> <p>The default is an Internet-facing load balancer.</p>
    LoadBalancerSchemeEnum Scheme = 3;
    // [Application Load Balancers] The IDs of the security groups to assign to the load balancer.
    array SecurityGroups = 4;
    // <p>The IDs of the subnets to attach to the load balancer. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings.</p> <p>[Network Load Balancers] You can specify one Elastic IP address per subnet.</p> <p>[Application Load Balancers] You cannot specify Elastic IP addresses for your subnets.</p>
    array SubnetMappings = 5;
    // <p>The IDs of the subnets to attach to the load balancer. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings.</p> <p>[Application Load Balancers] You must specify subnets from at least two Availability Zones.</p>
    array Subnets = 6;
    // One or more tags to assign to the load balancer.
    array Tags = 7;
    // The type of load balancer to create. The default is <code>application</code>.
    LoadBalancerTypeEnum Type = 8;
}

message CreateLoadBalancerOutput {
    // Information about the load balancer.
    array LoadBalancers = 1;
}

message CreateRuleInput {
    // An action. Each action has the type <code>forward</code> and specifies a target group.
    array Actions = 1;
    // <p>The conditions. Each condition specifies a field name and a single value.</p> <p>If the field name is <code>host-header</code>, you can specify a single host name (for example, my.example.com). A host name is case insensitive, can be up to 128 characters in length, and can contain any of the following characters. Note that you can include up to three wildcard characters.</p> <ul> <li> <p>A-Z, a-z, 0-9</p> </li> <li> <p>- .</p> </li> <li> <p>* (matches 0 or more characters)</p> </li> <li> <p>? (matches exactly 1 character)</p> </li> </ul> <p>If the field name is <code>path-pattern</code>, you can specify a single path pattern. A path pattern is case sensitive, can be up to 128 characters in length, and can contain any of the following characters. Note that you can include up to three wildcard characters.</p> <ul> <li> <p>A-Z, a-z, 0-9</p> </li> <li> <p>_ - . $ / ~ " ' @ : +</p> </li> <li> <p>&amp; (using &amp;amp;)</p> </li> <li> <p>* (matches 0 or more characters)</p> </li> <li> <p>? (matches exactly 1 character)</p> </li> </ul>
    array Conditions = 2;
    // The Amazon Resource Name (ARN) of the listener.
    string ListenerArn = 3;
    // The priority for the rule. A listener can't have multiple rules with the same priority.
    integer Priority = 4;
}

message CreateRuleOutput {
    // Information about the rule.
    array Rules = 1;
}

message CreateTargetGroupInput {
    // The approximate amount of time, in seconds, between health checks of an individual target. For Application Load Balancers, the range is 5 to 300 seconds. For Network Load Balancers, the supported values are 10 or 30 seconds. The default is 30 seconds.
    integer HealthCheckIntervalSeconds = 1;
    // [HTTP/HTTPS health checks] The ping path that is the destination on the targets for health checks. The default is /.
    string HealthCheckPath = 2;
    // The port the load balancer uses when performing health checks on targets. The default is <code>traffic-port</code>, which is the port on which each target receives traffic from the load balancer.
    string HealthCheckPort = 3;
    // The protocol the load balancer uses when performing health checks on targets. The TCP protocol is supported only if the protocol of the target group is TCP. For Application Load Balancers, the default is HTTP. For Network Load Balancers, the default is TCP.
    ProtocolEnum HealthCheckProtocol = 4;
    // The amount of time, in seconds, during which no response from a target means a failed health check. For Application Load Balancers, the range is 2 to 60 seconds and the default is 5 seconds. For Network Load Balancers, this is 10 seconds for TCP and HTTPS health checks and 6 seconds for HTTP health checks.
    integer HealthCheckTimeoutSeconds = 5;
    // The number of consecutive health checks successes required before considering an unhealthy target healthy. For Application Load Balancers, the default is 5. For Network Load Balancers, the default is 3.
    integer HealthyThresholdCount = 6;
    // [HTTP/HTTPS health checks] The HTTP codes to use when checking for a successful response from a target.
    Matcher Matcher = 7;
    // <p>The name of the target group.</p> <p>This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.</p>
    string Name = 8;
    // The port on which the targets receive traffic. This port is used unless you specify a port override when registering the target.
    integer Port = 9;
    // The protocol to use for routing traffic to the targets. For Application Load Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported protocol is TCP.
    ProtocolEnum Protocol = 10;
    // <p>The type of target that you must specify when registering targets with this target group. The possible values are <code>instance</code> (targets are specified by instance ID) or <code>ip</code> (targets are specified by IP address). The default is <code>instance</code>. Note that you can't specify targets for a target group using both instance IDs and IP addresses.</p> <p>If the target type is <code>ip</code>, specify IP addresses from the subnets of the virtual private cloud (VPC) for the target group, the RFC 1918 range (10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16), and the RFC 6598 range (100.64.0.0/10). You can't specify publicly routable IP addresses.</p>
    TargetTypeEnum TargetType = 11;
    // The number of consecutive health check failures required before considering a target unhealthy. For Application Load Balancers, the default is 2. For Network Load Balancers, this value must be the same as the healthy threshold count.
    integer UnhealthyThresholdCount = 12;
    // The identifier of the virtual private cloud (VPC).
    string VpcId = 13;
}

message CreateTargetGroupOutput {
    // Information about the target group.
    array TargetGroups = 1;
}

message DeleteListenerInput {
    // The Amazon Resource Name (ARN) of the listener.
    string ListenerArn = 1;
}

message DeleteListenerOutput {
}

message DeleteLoadBalancerInput {
    // The Amazon Resource Name (ARN) of the load balancer.
    string LoadBalancerArn = 1;
}

message DeleteLoadBalancerOutput {
}

message DeleteRuleInput {
    // The Amazon Resource Name (ARN) of the rule.
    string RuleArn = 1;
}

message DeleteRuleOutput {
}

message DeleteTargetGroupInput {
    // The Amazon Resource Name (ARN) of the target group.
    string TargetGroupArn = 1;
}

message DeleteTargetGroupOutput {
}

message DeregisterTargetsInput {
    // The Amazon Resource Name (ARN) of the target group.
    string TargetGroupArn = 1;
    // The targets. If you specified a port override when you registered a target, you must specify both the target ID and the port when you deregister it.
    array Targets = 2;
}

message DeregisterTargetsOutput {
}

message DescribeAccountLimitsInput {
    // The marker for the next set of results. (You received this marker from a previous call.)
    string Marker = 1;
    // The maximum number of results to return with this call.
    integer PageSize = 2;
}

message DescribeAccountLimitsOutput {
    // Information about the limits.
    array Limits = 1;
    // The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
    string NextMarker = 2;
}

message DescribeListenersInput {
    // The Amazon Resource Names (ARN) of the listeners.
    array ListenerArns = 1;
    // The Amazon Resource Name (ARN) of the load balancer.
    string LoadBalancerArn = 2;
    // The marker for the next set of results. (You received this marker from a previous call.)
    string Marker = 3;
    // The maximum number of results to return with this call.
    integer PageSize = 4;
}

message DescribeListenersOutput {
    // Information about the listeners.
    array Listeners = 1;
    // The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
    string NextMarker = 2;
}

message DescribeLoadBalancerAttributesInput {
    // The Amazon Resource Name (ARN) of the load balancer.
    string LoadBalancerArn = 1;
}

message DescribeLoadBalancerAttributesOutput {
    // Information about the load balancer attributes.
    array Attributes = 1;
}

message DescribeLoadBalancersInput {
    // The Amazon Resource Names (ARN) of the load balancers. You can specify up to 20 load balancers in a single call.
    array LoadBalancerArns = 1;
    // The marker for the next set of results. (You received this marker from a previous call.)
    string Marker = 2;
    // The names of the load balancers.
    array Names = 3;
    // The maximum number of results to return with this call.
    integer PageSize = 4;
}

message DescribeLoadBalancersOutput {
    // Information about the load balancers.
    array LoadBalancers = 1;
    // The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
    string NextMarker = 2;
}

message DescribeRulesInput {
    // The Amazon Resource Name (ARN) of the listener.
    string ListenerArn = 1;
    // The marker for the next set of results. (You received this marker from a previous call.)
    string Marker = 2;
    // The maximum number of results to return with this call.
    integer PageSize = 3;
    // The Amazon Resource Names (ARN) of the rules.
    array RuleArns = 4;
}

message DescribeRulesOutput {
    // The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
    string NextMarker = 1;
    // Information about the rules.
    array Rules = 2;
}

message DescribeSSLPoliciesInput {
    // The marker for the next set of results. (You received this marker from a previous call.)
    string Marker = 1;
    // The names of the policies.
    array Names = 2;
    // The maximum number of results to return with this call.
    integer PageSize = 3;
}

message DescribeSSLPoliciesOutput {
    // The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
    string NextMarker = 1;
    // Information about the policies.
    array SslPolicies = 2;
}

message DescribeTagsInput {
    // The Amazon Resource Names (ARN) of the resources.
    array ResourceArns = 1;
}

message DescribeTagsOutput {
    // Information about the tags.
    array TagDescriptions = 1;
}

message DescribeTargetGroupAttributesInput {
    // The Amazon Resource Name (ARN) of the target group.
    string TargetGroupArn = 1;
}

message DescribeTargetGroupAttributesOutput {
    // Information about the target group attributes
    array Attributes = 1;
}

message DescribeTargetGroupsInput {
    // The Amazon Resource Name (ARN) of the load balancer.
    string LoadBalancerArn = 1;
    // The marker for the next set of results. (You received this marker from a previous call.)
    string Marker = 2;
    // The names of the target groups.
    array Names = 3;
    // The maximum number of results to return with this call.
    integer PageSize = 4;
    // The Amazon Resource Names (ARN) of the target groups.
    array TargetGroupArns = 5;
}

message DescribeTargetGroupsOutput {
    // The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
    string NextMarker = 1;
    // Information about the target groups.
    array TargetGroups = 2;
}

message DescribeTargetHealthInput {
    // The Amazon Resource Name (ARN) of the target group.
    string TargetGroupArn = 1;
    // The targets.
    array Targets = 2;
}

message DescribeTargetHealthOutput {
    // Information about the health of the targets.
    array TargetHealthDescriptions = 1;
}

message DuplicateListenerException {
}

message DuplicateLoadBalancerNameException {
}

message DuplicateTagKeysException {
}

message DuplicateTargetGroupNameException {
}

message HealthUnavailableException {
}

message IncompatibleProtocolsException {
}

message InvalidConfigurationRequestException {
}

message InvalidSchemeException {
}

message InvalidSecurityGroupException {
}

message InvalidSubnetException {
}

message InvalidTargetException {
}

enum IpAddressType {
    IPV4 = 0;
    DUALSTACK = 1;
}

message Limit {
    // The maximum value of the limit.
    string Max = 1;
    // <p>The name of the limit. The possible values are:</p> <ul> <li> <p>application-load-balancers</p> </li> <li> <p>listeners-per-application-load-balancer</p> </li> <li> <p>listeners-per-network-load-balancer</p> </li> <li> <p>network-load-balancers</p> </li> <li> <p>rules-per-application-load-balancer</p> </li> <li> <p>target-groups</p> </li> <li> <p>targets-per-application-load-balancer</p> </li> </ul>
    string Name = 2;
}

repeated Limit Limits = 1

repeated string ListOfString = 1

message Listener {
    // The SSL server certificate. You must provide a certificate if the protocol is HTTPS.
    array Certificates = 1;
    // The default actions for the listener.
    array DefaultActions = 2;
    // The Amazon Resource Name (ARN) of the listener.
    string ListenerArn = 3;
    // The Amazon Resource Name (ARN) of the load balancer.
    string LoadBalancerArn = 4;
    // The port on which the load balancer is listening.
    integer Port = 5;
    // The protocol for connections from clients to the load balancer.
    ProtocolEnum Protocol = 6;
    // The security policy that defines which ciphers and protocols are supported. The default is the current predefined security policy.
    string SslPolicy = 7;
}



repeated string ListenerArns = 1

message ListenerNotFoundException {
}

repeated Listener Listeners = 1

message LoadBalancer {
    // The Availability Zones for the load balancer.
    array AvailabilityZones = 1;
    // The ID of the Amazon Route 53 hosted zone associated with the load balancer.
    string CanonicalHostedZoneId = 2;
    // The date and time the load balancer was created.
    string CreatedTime = 3;
    // The public DNS name of the load balancer.
    string DNSName = 4;
    // The type of IP addresses used by the subnets for your load balancer. The possible values are <code>ipv4</code> (for IPv4 addresses) and <code>dualstack</code> (for IPv4 and IPv6 addresses).
    IpAddressType IpAddressType = 5;
    // The Amazon Resource Name (ARN) of the load balancer.
    string LoadBalancerArn = 6;
    // The name of the load balancer.
    string LoadBalancerName = 7;
    // <p>The nodes of an Internet-facing load balancer have public IP addresses. The DNS name of an Internet-facing load balancer is publicly resolvable to the public IP addresses of the nodes. Therefore, Internet-facing load balancers can route requests from clients over the Internet.</p> <p>The nodes of an internal load balancer have only private IP addresses. The DNS name of an internal load balancer is publicly resolvable to the private IP addresses of the nodes. Therefore, internal load balancers can only route requests from clients with access to the VPC for the load balancer.</p>
    LoadBalancerSchemeEnum Scheme = 8;
    // The IDs of the security groups for the load balancer.
    array SecurityGroups = 9;
    // The state of the load balancer.
    LoadBalancerState State = 10;
    // The type of load balancer.
    LoadBalancerTypeEnum Type = 11;
    // The ID of the VPC for the load balancer.
    string VpcId = 12;
}

message LoadBalancerAddress {
    // [Network Load Balancers] The allocation ID of the Elastic IP address.
    string AllocationId = 1;
    // The static IP address.
    string IpAddress = 2;
}

repeated LoadBalancerAddress LoadBalancerAddresses = 1



repeated string LoadBalancerArns = 1

message LoadBalancerAttribute {
    // <p>The name of the attribute.</p> <ul> <li> <p> <code>access_logs.s3.enabled</code> - [Application Load Balancers] Indicates whether access logs stored in Amazon S3 are enabled. The value is <code>true</code> or <code>false</code>.</p> </li> <li> <p> <code>access_logs.s3.bucket</code> - [Application Load Balancers] The name of the S3 bucket for the access logs. This attribute is required if access logs in Amazon S3 are enabled. The bucket must exist in the same region as the load balancer and have a bucket policy that grants Elastic Load Balancing permission to write to the bucket.</p> </li> <li> <p> <code>access_logs.s3.prefix</code> - [Application Load Balancers] The prefix for the location in the S3 bucket. If you don't specify a prefix, the access logs are stored in the root of the bucket.</p> </li> <li> <p> <code>deletion_protection.enabled</code> - Indicates whether deletion protection is enabled. The value is <code>true</code> or <code>false</code>.</p> </li> <li> <p> <code>idle_timeout.timeout_seconds</code> - [Application Load Balancers] The idle timeout value, in seconds. The valid range is 1-4000. The default is 60 seconds.</p> </li> </ul>
    string Key = 1;
    // The value of the attribute.
    string Value = 2;
}





repeated LoadBalancerAttribute LoadBalancerAttributes = 1



repeated string LoadBalancerNames = 1

message LoadBalancerNotFoundException {
}

enum LoadBalancerSchemeEnum {
    INTERNETFACING = 0;
    INTERNAL = 1;
}

message LoadBalancerState {
    // The state code. The initial state of the load balancer is <code>provisioning</code>. After the load balancer is fully set up and ready to route traffic, its state is <code>active</code>. If the load balancer could not be set up, its state is <code>failed</code>.
    LoadBalancerStateEnum Code = 1;
    // A description of the state.
    string Reason = 2;
}

enum LoadBalancerStateEnum {
    ACTIVE = 0;
    PROVISIONING = 1;
    ACTIVE_IMPAIRED = 2;
    FAILED = 3;
}

enum LoadBalancerTypeEnum {
    APPLICATION = 0;
    NETWORK = 1;
}

repeated LoadBalancer LoadBalancers = 1



message Matcher {
    // <p>The HTTP codes.</p> <p>For Application Load Balancers, you can specify values between 200 and 499, and the default value is 200. You can specify multiple values (for example, "200,202") or a range of values (for example, "200-299").</p> <p>For Network Load Balancers, this is 200 to 399.</p>
    string HttpCode = 1;
}

message ModifyListenerInput {
    // The SSL server certificate.
    array Certificates = 1;
    // The default action. For Application Load Balancers, the protocol of the specified target group must be HTTP or HTTPS. For Network Load Balancers, the protocol of the specified target group must be TCP.
    array DefaultActions = 2;
    // The Amazon Resource Name (ARN) of the listener.
    string ListenerArn = 3;
    // The port for connections from clients to the load balancer.
    integer Port = 4;
    // The protocol for connections from clients to the load balancer. Application Load Balancers support HTTP and HTTPS and Network Load Balancers support TCP.
    ProtocolEnum Protocol = 5;
    // The security policy that defines which protocols and ciphers are supported. For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies">Security Policies</a> in the <i>Application Load Balancers Guide</i>.
    string SslPolicy = 6;
}

message ModifyListenerOutput {
    // Information about the modified listeners.
    array Listeners = 1;
}

message ModifyLoadBalancerAttributesInput {
    // The load balancer attributes.
    array Attributes = 1;
    // The Amazon Resource Name (ARN) of the load balancer.
    string LoadBalancerArn = 2;
}

message ModifyLoadBalancerAttributesOutput {
    // Information about the load balancer attributes.
    array Attributes = 1;
}

message ModifyRuleInput {
    // The actions. The target group must use the HTTP or HTTPS protocol.
    array Actions = 1;
    // The conditions.
    array Conditions = 2;
    // The Amazon Resource Name (ARN) of the rule.
    string RuleArn = 3;
}

message ModifyRuleOutput {
    // Information about the rule.
    array Rules = 1;
}

message ModifyTargetGroupAttributesInput {
    // The attributes.
    array Attributes = 1;
    // The Amazon Resource Name (ARN) of the target group.
    string TargetGroupArn = 2;
}

message ModifyTargetGroupAttributesOutput {
    // Information about the attributes.
    array Attributes = 1;
}

message ModifyTargetGroupInput {
    // The approximate amount of time, in seconds, between health checks of an individual target. For Application Load Balancers, the range is 5 to 300 seconds. For Network Load Balancers, the supported values are 10 or 30 seconds.
    integer HealthCheckIntervalSeconds = 1;
    // [HTTP/HTTPS health checks] The ping path that is the destination for the health check request.
    string HealthCheckPath = 2;
    // The port the load balancer uses when performing health checks on targets.
    string HealthCheckPort = 3;
    // The protocol the load balancer uses when performing health checks on targets. The TCP protocol is supported only if the protocol of the target group is TCP.
    ProtocolEnum HealthCheckProtocol = 4;
    // [HTTP/HTTPS health checks] The amount of time, in seconds, during which no response means a failed health check.
    integer HealthCheckTimeoutSeconds = 5;
    // The number of consecutive health checks successes required before considering an unhealthy target healthy.
    integer HealthyThresholdCount = 6;
    // [HTTP/HTTPS health checks] The HTTP codes to use when checking for a successful response from a target.
    Matcher Matcher = 7;
    // The Amazon Resource Name (ARN) of the target group.
    string TargetGroupArn = 8;
    // The number of consecutive health check failures required before considering the target unhealthy. For Network Load Balancers, this value must be the same as the healthy threshold count.
    integer UnhealthyThresholdCount = 9;
}

message ModifyTargetGroupOutput {
    // Information about the target group.
    array TargetGroups = 1;
}

message OperationNotPermittedException {
}

message PriorityInUseException {
}

enum ProtocolEnum {
    HTTP = 0;
    HTTPS = 1;
    TCP = 2;
}

message RegisterTargetsInput {
    // The Amazon Resource Name (ARN) of the target group.
    string TargetGroupArn = 1;
    // The targets. The default port for a target is the port for the target group. You can specify a port override. If a target is already registered, you can register it again using a different port.
    array Targets = 2;
}

message RegisterTargetsOutput {
}

message RemoveTagsInput {
    // The Amazon Resource Name (ARN) of the resource.
    array ResourceArns = 1;
    // The tag keys for the tags to remove.
    array TagKeys = 2;
}

message RemoveTagsOutput {
}



repeated string ResourceArns = 1

message ResourceInUseException {
}

message Rule {
    // The actions.
    array Actions = 1;
    // The conditions.
    array Conditions = 2;
    // Indicates whether this is the default rule.
    boolean IsDefault = 3;
    // The priority.
    string Priority = 4;
    // The Amazon Resource Name (ARN) of the rule.
    string RuleArn = 5;
}



repeated string RuleArns = 1

message RuleCondition {
    // The name of the field. The possible values are <code>host-header</code> and <code>path-pattern</code>.
    string Field = 1;
    // <p>The condition value.</p> <p>If the field name is <code>host-header</code>, you can specify a single host name (for example, my.example.com). A host name is case insensitive, can be up to 128 characters in length, and can contain any of the following characters. Note that you can include up to three wildcard characters.</p> <ul> <li> <p>A-Z, a-z, 0-9</p> </li> <li> <p>- .</p> </li> <li> <p>* (matches 0 or more characters)</p> </li> <li> <p>? (matches exactly 1 character)</p> </li> </ul> <p>If the field name is <code>path-pattern</code>, you can specify a single path pattern (for example, /img/*). A path pattern is case sensitive, can be up to 128 characters in length, and can contain any of the following characters. Note that you can include up to three wildcard characters.</p> <ul> <li> <p>A-Z, a-z, 0-9</p> </li> <li> <p>_ - . $ / ~ " ' @ : +</p> </li> <li> <p>&amp; (using &amp;amp;)</p> </li> <li> <p>* (matches 0 or more characters)</p> </li> <li> <p>? (matches exactly 1 character)</p> </li> </ul>
    array Values = 2;
}

repeated RuleCondition RuleConditionList = 1

message RuleNotFoundException {
}



repeated RulePriorityPair RulePriorityList = 1

message RulePriorityPair {
    // The rule priority.
    integer Priority = 1;
    // The Amazon Resource Name (ARN) of the rule.
    string RuleArn = 2;
}

repeated Rule Rules = 1

message SSLPolicyNotFoundException {
}



repeated string SecurityGroups = 1

message SetIpAddressTypeInput {
    // The IP address type. The possible values are <code>ipv4</code> (for IPv4 addresses) and <code>dualstack</code> (for IPv4 and IPv6 addresses). Internal load balancers must use <code>ipv4</code>.
    IpAddressType IpAddressType = 1;
    // The Amazon Resource Name (ARN) of the load balancer.
    string LoadBalancerArn = 2;
}

message SetIpAddressTypeOutput {
    // The IP address type.
    IpAddressType IpAddressType = 1;
}

message SetRulePrioritiesInput {
    // The rule priorities.
    array RulePriorities = 1;
}

message SetRulePrioritiesOutput {
    // Information about the rules.
    array Rules = 1;
}

message SetSecurityGroupsInput {
    // The Amazon Resource Name (ARN) of the load balancer.
    string LoadBalancerArn = 1;
    // The IDs of the security groups.
    array SecurityGroups = 2;
}

message SetSecurityGroupsOutput {
    // The IDs of the security groups associated with the load balancer.
    array SecurityGroupIds = 1;
}

message SetSubnetsInput {
    // The Amazon Resource Name (ARN) of the load balancer.
    string LoadBalancerArn = 1;
    // <p>The IDs of the subnets. You must specify subnets from at least two Availability Zones. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings.</p> <p>The load balancer is allocated one static IP address per subnet. You cannot specify your own Elastic IP addresses.</p>
    array SubnetMappings = 2;
    // The IDs of the subnets. You must specify subnets from at least two Availability Zones. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings.
    array Subnets = 3;
}

message SetSubnetsOutput {
    // Information about the subnet and Availability Zone.
    array AvailabilityZones = 1;
}

repeated SslPolicy SslPolicies = 1

message SslPolicy {
    // The ciphers.
    array Ciphers = 1;
    // The name of the policy.
    string Name = 2;
    // The protocols.
    array SslProtocols = 3;
}



repeated string SslPolicyNames = 1



repeated string SslProtocols = 1









message SubnetMapping {
    // [Network Load Balancers] The allocation ID of the Elastic IP address.
    string AllocationId = 1;
    // The ID of the subnet.
    string SubnetId = 2;
}

repeated SubnetMapping SubnetMappings = 1

message SubnetNotFoundException {
}

repeated string Subnets = 1

message Tag {
    // The key of the tag.
    string Key = 1;
    // The value of the tag.
    string Value = 2;
}

message TagDescription {
    // The Amazon Resource Name (ARN) of the resource.
    string ResourceArn = 1;
    // Information about the tags.
    array Tags = 2;
}

repeated TagDescription TagDescriptions = 1



repeated string TagKeys = 1

repeated Tag TagList = 1



message TargetDescription {
    // <p>The Availability Zone where the IP address is to be registered. Specify <code>all</code> to register an IP address outside the target group VPC with all Availability Zones that are enabled for the load balancer.</p> <p>If the IP address is in a subnet of the VPC for the target group, the Availability Zone is automatically detected and this parameter is optional.</p> <p>This parameter is not supported if the target type of the target group is <code>instance</code>.</p>
    string AvailabilityZone = 1;
    // The ID of the target. If the target type of the target group is <code>instance</code>, specify an instance ID. If the target type is <code>ip</code>, specify an IP address.
    string Id = 2;
    // The port on which the target is listening.
    integer Port = 3;
}

repeated TargetDescription TargetDescriptions = 1

message TargetGroup {
    // The approximate amount of time, in seconds, between health checks of an individual target.
    integer HealthCheckIntervalSeconds = 1;
    // The destination for the health check request.
    string HealthCheckPath = 2;
    // The port to use to connect with the target.
    string HealthCheckPort = 3;
    // The protocol to use to connect with the target.
    ProtocolEnum HealthCheckProtocol = 4;
    // The amount of time, in seconds, during which no response means a failed health check.
    integer HealthCheckTimeoutSeconds = 5;
    // The number of consecutive health checks successes required before considering an unhealthy target healthy.
    integer HealthyThresholdCount = 6;
    // The Amazon Resource Names (ARN) of the load balancers that route traffic to this target group.
    array LoadBalancerArns = 7;
    // The HTTP codes to use when checking for a successful response from a target.
    Matcher Matcher = 8;
    // The port on which the targets are listening.
    integer Port = 9;
    // The protocol to use for routing traffic to the targets.
    ProtocolEnum Protocol = 10;
    // The Amazon Resource Name (ARN) of the target group.
    string TargetGroupArn = 11;
    // The name of the target group.
    string TargetGroupName = 12;
    // The type of target that you must specify when registering targets with this target group. The possible values are <code>instance</code> (targets are specified by instance ID) or <code>ip</code> (targets are specified by IP address).
    TargetTypeEnum TargetType = 13;
    // The number of consecutive health check failures required before considering the target unhealthy.
    integer UnhealthyThresholdCount = 14;
    // The ID of the VPC for the targets.
    string VpcId = 15;
}



repeated string TargetGroupArns = 1

message TargetGroupAssociationLimitException {
}

message TargetGroupAttribute {
    // <p>The name of the attribute.</p> <ul> <li> <p> <code>deregistration_delay.timeout_seconds</code> - The amount time for Elastic Load Balancing to wait before changing the state of a deregistering target from <code>draining</code> to <code>unused</code>. The range is 0-3600 seconds. The default value is 300 seconds.</p> </li> <li> <p> <code>stickiness.enabled</code> - [Application Load Balancers] Indicates whether sticky sessions are enabled. The value is <code>true</code> or <code>false</code>.</p> </li> <li> <p> <code>stickiness.type</code> - [Application Load Balancers] The type of sticky sessions. The possible value is <code>lb_cookie</code>.</p> </li> <li> <p> <code>stickiness.lb_cookie.duration_seconds</code> - [Application Load Balancers] The time period, in seconds, during which requests from a client should be routed to the same target. After this time period expires, the load balancer-generated cookie is considered stale. The range is 1 second to 1 week (604800 seconds). The default value is 1 day (86400 seconds).</p> </li> </ul>
    string Key = 1;
    // The value of the attribute.
    string Value = 2;
}





repeated TargetGroupAttribute TargetGroupAttributes = 1



repeated string TargetGroupNames = 1

message TargetGroupNotFoundException {
}

repeated TargetGroup TargetGroups = 1

message TargetHealth {
    // A description of the target health that provides additional details. If the state is <code>healthy</code>, a description is not provided.
    string Description = 1;
    // <p>The reason code. If the target state is <code>healthy</code>, a reason code is not provided.</p> <p>If the target state is <code>initial</code>, the reason code can be one of the following values:</p> <ul> <li> <p> <code>Elb.RegistrationInProgress</code> - The target is in the process of being registered with the load balancer.</p> </li> <li> <p> <code>Elb.InitialHealthChecking</code> - The load balancer is still sending the target the minimum number of health checks required to determine its health status.</p> </li> </ul> <p>If the target state is <code>unhealthy</code>, the reason code can be one of the following values:</p> <ul> <li> <p> <code>Target.ResponseCodeMismatch</code> - The health checks did not return an expected HTTP code.</p> </li> <li> <p> <code>Target.Timeout</code> - The health check requests timed out.</p> </li> <li> <p> <code>Target.FailedHealthChecks</code> - The health checks failed because the connection to the target timed out, the target response was malformed, or the target failed the health check for an unknown reason.</p> </li> <li> <p> <code>Elb.InternalError</code> - The health checks failed due to an internal error.</p> </li> </ul> <p>If the target state is <code>unused</code>, the reason code can be one of the following values:</p> <ul> <li> <p> <code>Target.NotRegistered</code> - The target is not registered with the target group.</p> </li> <li> <p> <code>Target.NotInUse</code> - The target group is not used by any load balancer or the target is in an Availability Zone that is not enabled for its load balancer.</p> </li> <li> <p> <code>Target.IpUnusable</code> - The target IP address is reserved for use by a load balancer.</p> </li> <li> <p> <code>Target.InvalidState</code> - The target is in the stopped or terminated state.</p> </li> </ul> <p>If the target state is <code>draining</code>, the reason code can be the following value:</p> <ul> <li> <p> <code>Target.DeregistrationInProgress</code> - The target is in the process of being deregistered and the deregistration delay period has not expired.</p> </li> </ul>
    TargetHealthReasonEnum Reason = 2;
    // The state of the target.
    TargetHealthStateEnum State = 3;
}

message TargetHealthDescription {
    // The port to use to connect with the target.
    string HealthCheckPort = 1;
    // The description of the target.
    TargetDescription Target = 2;
    // The health information for the target.
    TargetHealth TargetHealth = 3;
}

repeated TargetHealthDescription TargetHealthDescriptions = 1

enum TargetHealthReasonEnum {
    ELBREGISTRATIONINPROGRESS = 0;
    ELBINITIALHEALTHCHECKING = 1;
    TARGETRESPONSECODEMISMATCH = 2;
    TARGETTIMEOUT = 3;
    TARGETFAILEDHEALTHCHECKS = 4;
    TARGETNOTREGISTERED = 5;
    TARGETNOTINUSE = 6;
    TARGETDEREGISTRATIONINPROGRESS = 7;
    TARGETINVALIDSTATE = 8;
    TARGETIPUNUSABLE = 9;
    ELBINTERNALERROR = 10;
}

enum TargetHealthStateEnum {
    INITIAL = 0;
    HEALTHY = 1;
    UNHEALTHY = 2;
    UNUSED = 3;
    DRAINING = 4;
    UNAVAILABLE = 5;
}

enum TargetTypeEnum {
    INSTANCE = 0;
    IP = 1;
}

message TooManyCertificatesException {
}

message TooManyListenersException {
}

message TooManyLoadBalancersException {
}

message TooManyRegistrationsForTargetIdException {
}

message TooManyRulesException {
}

message TooManyTagsException {
}

message TooManyTargetGroupsException {
}

message TooManyTargetsException {
}

message UnsupportedProtocolException {
}

service ElasticLoadBalancingService {
    // <p>Adds the specified tags to the specified Elastic Load Balancing resource. You can tag your Application Load Balancers, Network Load Balancers, and your target groups.</p> <p>Each tag consists of a key and an optional value. If a resource already has a tag with the same key, <code>AddTags</code> updates its value.</p> <p>To list the current tags for your resources, use <a>DescribeTags</a>. To remove tags from your resources, use <a>RemoveTags</a>.</p>
    rpc Post(PostRequest) returns (AddTagsOutput) {
      option (google.api.http) = {
        post: "//"
        body: "body"
      };
    }
    // <p>Creates a listener for the specified Application Load Balancer or Network Load Balancer.</p> <p>You can create up to 10 listeners per load balancer.</p> <p>To update a listener, use <a>ModifyListener</a>. When you are finished with a listener, you can delete it using <a>DeleteListener</a>. If you are finished with both the listener and the load balancer, you can delete them both using <a>DeleteLoadBalancer</a>.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html">Listeners for Your Application Load Balancers</a> in the <i>Application Load Balancers Guide</i> and <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-listeners.html">Listeners for Your Network Load Balancers</a> in the <i>Network Load Balancers Guide</i>.</p>
    rpc Post#CreateListener(Post#CreateListenerRequest) returns (CreateListenerOutput) {
      option (google.api.http) = {
        post: "//#CreateListener"
        body: "body"
      };
    }
    // <p>Creates an Application Load Balancer or a Network Load Balancer.</p> <p>When you create a load balancer, you can specify security groups, subnets, IP address type, and tags. Otherwise, you could do so later using <a>SetSecurityGroups</a>, <a>SetSubnets</a>, <a>SetIpAddressType</a>, and <a>AddTags</a>.</p> <p>To create listeners for your load balancer, use <a>CreateListener</a>. To describe your current load balancers, see <a>DescribeLoadBalancers</a>. When you are finished with a load balancer, you can delete it using <a>DeleteLoadBalancer</a>.</p> <p>You can create up to 20 load balancers per region per account. You can request an increase for the number of load balancers for your account. For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-limits.html">Limits for Your Application Load Balancer</a> in the <i>Application Load Balancers Guide</i> and <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-limits.html">Limits for Your Network Load Balancer</a> in the <i>Network Load Balancers Guide</i>.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html">Application Load Balancers</a> in the <i>Application Load Balancers Guide</i> and <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/network/network-load-balancers.html">Network Load Balancers</a> in the <i>Network Load Balancers Guide</i>.</p>
    rpc Post#CreateLoadBalancer(Post#CreateLoadBalancerRequest) returns (CreateLoadBalancerOutput) {
      option (google.api.http) = {
        post: "//#CreateLoadBalancer"
        body: "body"
      };
    }
    // <p>Creates a rule for the specified listener. The listener must be associated with an Application Load Balancer.</p> <p>Rules are evaluated in priority order, from the lowest value to the highest value. When the condition for a rule is met, the specified action is taken. If no conditions are met, the action for the default rule is taken. For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html#listener-rules">Listener Rules</a> in the <i>Application Load Balancers Guide</i>.</p> <p>To view your current rules, use <a>DescribeRules</a>. To update a rule, use <a>ModifyRule</a>. To set the priorities of your rules, use <a>SetRulePriorities</a>. To delete a rule, use <a>DeleteRule</a>.</p>
    rpc Post#CreateRule(Post#CreateRuleRequest) returns (CreateRuleOutput) {
      option (google.api.http) = {
        post: "//#CreateRule"
        body: "body"
      };
    }
    // <p>Creates a target group.</p> <p>To register targets with the target group, use <a>RegisterTargets</a>. To update the health check settings for the target group, use <a>ModifyTargetGroup</a>. To monitor the health of targets in the target group, use <a>DescribeTargetHealth</a>.</p> <p>To route traffic to the targets in a target group, specify the target group in an action using <a>CreateListener</a> or <a>CreateRule</a>.</p> <p>To delete a target group, use <a>DeleteTargetGroup</a>.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html">Target Groups for Your Application Load Balancers</a> in the <i>Application Load Balancers Guide</i> or <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html">Target Groups for Your Network Load Balancers</a> in the <i>Network Load Balancers Guide</i>.</p>
    rpc Post#CreateTargetGroup(Post#CreateTargetGroupRequest) returns (CreateTargetGroupOutput) {
      option (google.api.http) = {
        post: "//#CreateTargetGroup"
        body: "body"
      };
    }
    // <p>Deletes the specified listener.</p> <p>Alternatively, your listener is deleted when you delete the load balancer it is attached to using <a>DeleteLoadBalancer</a>.</p>
    rpc Post#DeleteListener(Post#DeleteListenerRequest) returns (DeleteListenerOutput) {
      option (google.api.http) = {
        post: "//#DeleteListener"
        body: "body"
      };
    }
    // <p>Deletes the specified Application Load Balancer or Network Load Balancer and its attached listeners.</p> <p>You can't delete a load balancer if deletion protection is enabled. If the load balancer does not exist or has already been deleted, the call succeeds.</p> <p>Deleting a load balancer does not affect its registered targets. For example, your EC2 instances continue to run and are still registered to their target groups. If you no longer need these EC2 instances, you can stop or terminate them.</p>
    rpc Post#DeleteLoadBalancer(Post#DeleteLoadBalancerRequest) returns (DeleteLoadBalancerOutput) {
      option (google.api.http) = {
        post: "//#DeleteLoadBalancer"
        body: "body"
      };
    }
    // Deletes the specified rule.
    rpc Post#DeleteRule(Post#DeleteRuleRequest) returns (DeleteRuleOutput) {
      option (google.api.http) = {
        post: "//#DeleteRule"
        body: "body"
      };
    }
    // <p>Deletes the specified target group.</p> <p>You can delete a target group if it is not referenced by any actions. Deleting a target group also deletes any associated health checks.</p>
    rpc Post#DeleteTargetGroup(Post#DeleteTargetGroupRequest) returns (DeleteTargetGroupOutput) {
      option (google.api.http) = {
        post: "//#DeleteTargetGroup"
        body: "body"
      };
    }
    // Deregisters the specified targets from the specified target group. After the targets are deregistered, they no longer receive traffic from the load balancer.
    rpc Post#DeregisterTargets(Post#DeregisterTargetsRequest) returns (DeregisterTargetsOutput) {
      option (google.api.http) = {
        post: "//#DeregisterTargets"
        body: "body"
      };
    }
    // <p>Describes the current Elastic Load Balancing resource limits for your AWS account.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-limits.html">Limits for Your Application Load Balancers</a> in the <i>Application Load Balancer Guide</i> or <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-limits.html">Limits for Your Network Load Balancers</a> in the <i>Network Load Balancers Guide</i>.</p>
    rpc Post#DescribeAccountLimits(Post#DescribeAccountLimitsRequest) returns (DescribeAccountLimitsOutput) {
      option (google.api.http) = {
        post: "//#DescribeAccountLimits"
        body: "body"
      };
    }
    // Describes the specified listeners or the listeners for the specified Application Load Balancer or Network Load Balancer. You must specify either a load balancer or one or more listeners.
    rpc Post#DescribeListeners(Post#DescribeListenersRequest) returns (DescribeListenersOutput) {
      option (google.api.http) = {
        post: "//#DescribeListeners"
        body: "body"
      };
    }
    // Describes the attributes for the specified Application Load Balancer or Network Load Balancer.
    rpc Post#DescribeLoadBalancerAttributes(Post#DescribeLoadBalancerAttributesRequest) returns (DescribeLoadBalancerAttributesOutput) {
      option (google.api.http) = {
        post: "//#DescribeLoadBalancerAttributes"
        body: "body"
      };
    }
    // <p>Describes the specified load balancers or all of your load balancers.</p> <p>To describe the listeners for a load balancer, use <a>DescribeListeners</a>. To describe the attributes for a load balancer, use <a>DescribeLoadBalancerAttributes</a>.</p>
    rpc Post#DescribeLoadBalancers(Post#DescribeLoadBalancersRequest) returns (DescribeLoadBalancersOutput) {
      option (google.api.http) = {
        post: "//#DescribeLoadBalancers"
        body: "body"
      };
    }
    // Describes the specified rules or the rules for the specified listener. You must specify either a listener or one or more rules.
    rpc Post#DescribeRules(Post#DescribeRulesRequest) returns (DescribeRulesOutput) {
      option (google.api.http) = {
        post: "//#DescribeRules"
        body: "body"
      };
    }
    // <p>Describes the specified policies or all policies used for SSL negotiation.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies">Security Policies</a> in the <i>Application Load Balancers Guide</i>.</p>
    rpc Post#DescribeSSLPolicies(Post#DescribeSSLPoliciesRequest) returns (DescribeSSLPoliciesOutput) {
      option (google.api.http) = {
        post: "//#DescribeSSLPolicies"
        body: "body"
      };
    }
    // Describes the tags for the specified resources. You can describe the tags for one or more Application Load Balancers, Network Load Balancers, and target groups.
    rpc Post#DescribeTags(Post#DescribeTagsRequest) returns (DescribeTagsOutput) {
      option (google.api.http) = {
        post: "//#DescribeTags"
        body: "body"
      };
    }
    // Describes the attributes for the specified target group.
    rpc Post#DescribeTargetGroupAttributes(Post#DescribeTargetGroupAttributesRequest) returns (DescribeTargetGroupAttributesOutput) {
      option (google.api.http) = {
        post: "//#DescribeTargetGroupAttributes"
        body: "body"
      };
    }
    // <p>Describes the specified target groups or all of your target groups. By default, all target groups are described. Alternatively, you can specify one of the following to filter the results: the ARN of the load balancer, the names of one or more target groups, or the ARNs of one or more target groups.</p> <p>To describe the targets for a target group, use <a>DescribeTargetHealth</a>. To describe the attributes of a target group, use <a>DescribeTargetGroupAttributes</a>.</p>
    rpc Post#DescribeTargetGroups(Post#DescribeTargetGroupsRequest) returns (DescribeTargetGroupsOutput) {
      option (google.api.http) = {
        post: "//#DescribeTargetGroups"
        body: "body"
      };
    }
    // Describes the health of the specified targets or all of your targets.
    rpc Post#DescribeTargetHealth(Post#DescribeTargetHealthRequest) returns (DescribeTargetHealthOutput) {
      option (google.api.http) = {
        post: "//#DescribeTargetHealth"
        body: "body"
      };
    }
    // <p>Modifies the specified properties of the specified listener.</p> <p>Any properties that you do not specify retain their current values. However, changing the protocol from HTTPS to HTTP removes the security policy and SSL certificate properties. If you change the protocol from HTTP to HTTPS, you must add the security policy and server certificate.</p>
    rpc Post#ModifyListener(Post#ModifyListenerRequest) returns (ModifyListenerOutput) {
      option (google.api.http) = {
        post: "//#ModifyListener"
        body: "body"
      };
    }
    // <p>Modifies the specified attributes of the specified Application Load Balancer or Network Load Balancer.</p> <p>If any of the specified attributes can't be modified as requested, the call fails. Any existing attributes that you do not modify retain their current values.</p>
    rpc Post#ModifyLoadBalancerAttributes(Post#ModifyLoadBalancerAttributesRequest) returns (ModifyLoadBalancerAttributesOutput) {
      option (google.api.http) = {
        post: "//#ModifyLoadBalancerAttributes"
        body: "body"
      };
    }
    // <p>Modifies the specified rule.</p> <p>Any existing properties that you do not modify retain their current values.</p> <p>To modify the default action, use <a>ModifyListener</a>.</p>
    rpc Post#ModifyRule(Post#ModifyRuleRequest) returns (ModifyRuleOutput) {
      option (google.api.http) = {
        post: "//#ModifyRule"
        body: "body"
      };
    }
    // <p>Modifies the health checks used when evaluating the health state of the targets in the specified target group.</p> <p>To monitor the health of the targets, use <a>DescribeTargetHealth</a>.</p>
    rpc Post#ModifyTargetGroup(Post#ModifyTargetGroupRequest) returns (ModifyTargetGroupOutput) {
      option (google.api.http) = {
        post: "//#ModifyTargetGroup"
        body: "body"
      };
    }
    // Modifies the specified attributes of the specified target group.
    rpc Post#ModifyTargetGroupAttributes(Post#ModifyTargetGroupAttributesRequest) returns (ModifyTargetGroupAttributesOutput) {
      option (google.api.http) = {
        post: "//#ModifyTargetGroupAttributes"
        body: "body"
      };
    }
    // <p>Registers the specified targets with the specified target group.</p> <p>By default, the load balancer routes requests to registered targets using the protocol and port number for the target group. Alternatively, you can override the port for a target when you register it.</p> <p>The target must be in the virtual private cloud (VPC) that you specified for the target group. If the target is an EC2 instance, it must be in the <code>running</code> state when you register it.</p> <p>Network Load Balancers do not support the following instance types as targets: C1, CC1, CC2, CG1, CG2, CR1, CS1, G1, G2, HI1, HS1, M1, M2, M3, and T1.</p> <p>To remove a target from a target group, use <a>DeregisterTargets</a>.</p>
    rpc Post#RegisterTargets(Post#RegisterTargetsRequest) returns (RegisterTargetsOutput) {
      option (google.api.http) = {
        post: "//#RegisterTargets"
        body: "body"
      };
    }
    // <p>Removes the specified tags from the specified Elastic Load Balancing resource.</p> <p>To list the current tags for your resources, use <a>DescribeTags</a>.</p>
    rpc Post#RemoveTags(Post#RemoveTagsRequest) returns (RemoveTagsOutput) {
      option (google.api.http) = {
        post: "//#RemoveTags"
        body: "body"
      };
    }
    // <p>Sets the type of IP addresses used by the subnets of the specified Application Load Balancer or Network Load Balancer.</p> <p>Note that Network Load Balancers must use <code>ipv4</code>.</p>
    rpc Post#SetIpAddressType(Post#SetIpAddressTypeRequest) returns (SetIpAddressTypeOutput) {
      option (google.api.http) = {
        post: "//#SetIpAddressType"
        body: "body"
      };
    }
    // <p>Sets the priorities of the specified rules.</p> <p>You can reorder the rules as long as there are no priority conflicts in the new order. Any existing rules that you do not specify retain their current priority.</p>
    rpc Post#SetRulePriorities(Post#SetRulePrioritiesRequest) returns (SetRulePrioritiesOutput) {
      option (google.api.http) = {
        post: "//#SetRulePriorities"
        body: "body"
      };
    }
    // <p>Associates the specified security groups with the specified Application Load Balancer. The specified security groups override the previously associated security groups.</p> <p>Note that you can't specify a security group for a Network Load Balancer.</p>
    rpc Post#SetSecurityGroups(Post#SetSecurityGroupsRequest) returns (SetSecurityGroupsOutput) {
      option (google.api.http) = {
        post: "//#SetSecurityGroups"
        body: "body"
      };
    }
    // <p>Enables the Availability Zone for the specified subnets for the specified Application Load Balancer. The specified subnets replace the previously enabled subnets.</p> <p>Note that you can't change the subnets for a Network Load Balancer.</p>
    rpc Post#SetSubnets(Post#SetSubnetsRequest) returns (SetSubnetsOutput) {
      option (google.api.http) = {
        post: "//#SetSubnets"
        body: "body"
      };
    }
}

syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package amazonsimpledb;

message PostRequest {
    string AWSAccessKeyId = 1;
    string Action = 2;
    string Signature = 3;
    string SignatureMethod = 4;
    string SignatureVersion = 5;
    string Timestamp = 6;
    string Version = 7;
    BatchDeleteAttributesRequest body = 8;
}

message Post#BatchPutAttributesRequest {
    string AWSAccessKeyId = 1;
    string Action = 2;
    string Signature = 3;
    string SignatureMethod = 4;
    string SignatureVersion = 5;
    string Timestamp = 6;
    string Version = 7;
    BatchPutAttributesRequest body = 8;
}

message Post#CreateDomainRequest {
    string AWSAccessKeyId = 1;
    string Action = 2;
    string Signature = 3;
    string SignatureMethod = 4;
    string SignatureVersion = 5;
    string Timestamp = 6;
    string Version = 7;
    CreateDomainRequest body = 8;
}

message Post#DeleteAttributesRequest {
    string AWSAccessKeyId = 1;
    string Action = 2;
    string Signature = 3;
    string SignatureMethod = 4;
    string SignatureVersion = 5;
    string Timestamp = 6;
    string Version = 7;
    DeleteAttributesRequest body = 8;
}

message Post#DeleteDomainRequest {
    string AWSAccessKeyId = 1;
    string Action = 2;
    string Signature = 3;
    string SignatureMethod = 4;
    string SignatureVersion = 5;
    string Timestamp = 6;
    string Version = 7;
    DeleteDomainRequest body = 8;
}

message Post#DomainMetadataRequest {
    string AWSAccessKeyId = 1;
    string Action = 2;
    string Signature = 3;
    string SignatureMethod = 4;
    string SignatureVersion = 5;
    string Timestamp = 6;
    string Version = 7;
    DomainMetadataRequest body = 8;
}

message Post#GetAttributesRequest {
    string AWSAccessKeyId = 1;
    string Action = 2;
    string Signature = 3;
    string SignatureMethod = 4;
    string SignatureVersion = 5;
    string Timestamp = 6;
    string Version = 7;
    GetAttributesRequest body = 8;
}

message Post#ListDomainsRequest {
    string AWSAccessKeyId = 1;
    string Action = 2;
    // Pagination limit
    string MaxNumberOfDomains = 3;
    // Pagination token
    string NextToken = 4;
    string Signature = 5;
    string SignatureMethod = 6;
    string SignatureVersion = 7;
    string Timestamp = 8;
    string Version = 9;
    ListDomainsRequest body = 10;
}

message Post#PutAttributesRequest {
    string AWSAccessKeyId = 1;
    string Action = 2;
    string Signature = 3;
    string SignatureMethod = 4;
    string SignatureVersion = 5;
    string Timestamp = 6;
    string Version = 7;
    PutAttributesRequest body = 8;
}

message Post#SelectRequest {
    string AWSAccessKeyId = 1;
    string Action = 2;
    // Pagination token
    string NextToken = 3;
    string Signature = 4;
    string SignatureMethod = 5;
    string SignatureVersion = 6;
    string Timestamp = 7;
    string Version = 8;
    SelectRequest body = 9;
}

message Attribute {
    string AlternateNameEncoding = 1;
    string AlternateValueEncoding = 2;
    // The name of the attribute.
    string Name = 3;
    // The value of the attribute.
    string Value = 4;
}

message AttributeDoesNotExist {
    number BoxUsage = 1;
}

repeated Attribute AttributeList = 1

repeated string AttributeNameList = 1

message BatchDeleteAttributesRequest {
    // The name of the domain in which the attributes are being deleted.
    string DomainName = 1;
    // A list of items on which to perform the operation.
    array Items = 2;
}

message BatchPutAttributesRequest {
    // The name of the domain in which the attributes are being stored.
    string DomainName = 1;
    // A list of items on which to perform the operation.
    array Items = 2;
}

message CreateDomainRequest {
    // The name of the domain to create. The name can range between 3 and 255 characters and can contain the following characters: a-z, A-Z, 0-9, '_', '-', and '.'.
    string DomainName = 1;
}

message DeletableAttribute {
    // The name of the attribute.
    string Name = 1;
    // The value of the attribute.
    string Value = 2;
}

repeated DeletableAttribute DeletableAttributeList = 1

message DeletableItem {
    array Attributes = 1;
    string Name = 2;
}

repeated DeletableItem DeletableItemList = 1

message DeleteAttributesRequest {
    // A list of Attributes. Similar to columns on a spreadsheet, attributes represent categories of data that can be assigned to items.
    array Attributes = 1;
    // The name of the domain in which to perform the operation.
    string DomainName = 2;
    // The update condition which, if specified, determines whether the specified attributes will be deleted or not. The update condition must be satisfied in order for this request to be processed and the attributes to be deleted.
    UpdateCondition Expected = 3;
    // The name of the item. Similar to rows on a spreadsheet, items represent individual objects that contain one or more value-attribute pairs.
    string ItemName = 4;
}

message DeleteDomainRequest {
    // The name of the domain to delete.
    string DomainName = 1;
}

message DomainMetadataRequest {
    // The name of the domain for which to display the metadata of.
    string DomainName = 1;
}

message DomainMetadataResult {
    // The number of unique attribute names in the domain.
    integer AttributeNameCount = 1;
    // The total size of all unique attribute names in the domain, in bytes.
    integer AttributeNamesSizeBytes = 2;
    // The number of all attribute name/value pairs in the domain.
    integer AttributeValueCount = 3;
    // The total size of all attribute values in the domain, in bytes.
    integer AttributeValuesSizeBytes = 4;
    // The number of all items in the domain.
    integer ItemCount = 5;
    // The total size of all item names in the domain, in bytes.
    integer ItemNamesSizeBytes = 6;
    // The data and time when metadata was calculated, in Epoch (UNIX) seconds.
    integer Timestamp = 7;
}

repeated string DomainNameList = 1

message DuplicateItemName {
    number BoxUsage = 1;
}

message GetAttributesRequest {
    // The names of the attributes.
    array AttributeNames = 1;
    // Determines whether or not strong consistency should be enforced when data is read from SimpleDB. If <code>true</code>, any data previously written to SimpleDB will be returned. Otherwise, results will be consistent eventually, and the client may not see data that was written immediately before your read.
    boolean ConsistentRead = 2;
    // The name of the domain in which to perform the operation.
    string DomainName = 3;
    // The name of the item.
    string ItemName = 4;
}

message GetAttributesResult {
    // The list of attributes returned by the operation.
    array Attributes = 1;
}

message InvalidNextToken {
    number BoxUsage = 1;
}

message InvalidNumberPredicates {
    number BoxUsage = 1;
}

message InvalidNumberValueTests {
    number BoxUsage = 1;
}

message InvalidParameterValue {
    number BoxUsage = 1;
}

message InvalidQueryExpression {
    number BoxUsage = 1;
}

message Item {
    string AlternateNameEncoding = 1;
    // A list of attributes.
    array Attributes = 2;
    // The name of the item.
    string Name = 3;
}

repeated Item ItemList = 1

message ListDomainsRequest {
    // The maximum number of domain names you want returned. The range is 1 to 100. The default setting is 100.
    integer MaxNumberOfDomains = 1;
    // A string informing Amazon SimpleDB where to start the next list of domain names.
    string NextToken = 2;
}

message ListDomainsResult {
    // A list of domain names that match the expression.
    array DomainNames = 1;
    // An opaque token indicating that there are more domains than the specified <code>MaxNumberOfDomains</code> still available.
    string NextToken = 2;
}

message MissingParameter {
    number BoxUsage = 1;
}

message NoSuchDomain {
    number BoxUsage = 1;
}

message NumberDomainAttributesExceeded {
    number BoxUsage = 1;
}

message NumberDomainBytesExceeded {
    number BoxUsage = 1;
}

message NumberDomainsExceeded {
    number BoxUsage = 1;
}

message NumberItemAttributesExceeded {
    number BoxUsage = 1;
}

message NumberSubmittedAttributesExceeded {
    number BoxUsage = 1;
}

message NumberSubmittedItemsExceeded {
    number BoxUsage = 1;
}

message PutAttributesRequest {
    // The list of attributes.
    array Attributes = 1;
    // The name of the domain in which to perform the operation.
    string DomainName = 2;
    // The update condition which, if specified, determines whether the specified attributes will be updated or not. The update condition must be satisfied in order for this request to be processed and the attributes to be updated.
    UpdateCondition Expected = 3;
    // The name of the item.
    string ItemName = 4;
}

message ReplaceableAttribute {
    // The name of the replaceable attribute.
    string Name = 1;
    // A flag specifying whether or not to replace the attribute/value pair or to add a new attribute/value pair. The default setting is <code>false</code>.
    boolean Replace = 2;
    // The value of the replaceable attribute.
    string Value = 3;
}

repeated ReplaceableAttribute ReplaceableAttributeList = 1

message ReplaceableItem {
    // The list of attributes for a replaceable item.
    array Attributes = 1;
    // The name of the replaceable item.
    string Name = 2;
}

repeated ReplaceableItem ReplaceableItemList = 1

message RequestTimeout {
    number BoxUsage = 1;
}

message SelectRequest {
    // Determines whether or not strong consistency should be enforced when data is read from SimpleDB. If <code>true</code>, any data previously written to SimpleDB will be returned. Otherwise, results will be consistent eventually, and the client may not see data that was written immediately before your read.
    boolean ConsistentRead = 1;
    // A string informing Amazon SimpleDB where to start the next list of <code>ItemNames</code>.
    string NextToken = 2;
    // The expression used to query the domain.
    string SelectExpression = 3;
}

message SelectResult {
    // A list of items that match the select expression.
    array Items = 1;
    // An opaque token indicating that more items than <code>MaxNumberOfItems</code> were matched, the response size exceeded 1 megabyte, or the execution time exceeded 5 seconds.
    string NextToken = 2;
}

message TooManyRequestedAttributes {
    number BoxUsage = 1;
}

message UpdateCondition {
    // A value specifying whether or not the specified attribute must exist with the specified value in order for the update condition to be satisfied. Specify <code>true</code> if the attribute must exist for the update condition to be satisfied. Specify <code>false</code> if the attribute should not exist in order for the update condition to be satisfied.
    boolean Exists = 1;
    // The name of the attribute involved in the condition.
    string Name = 2;
    // The value of an attribute. This value can only be specified when the <code>Exists</code> parameter is equal to <code>true</code>.
    string Value = 3;
}

service AmazonSimpleDBService {
    // <p> Performs multiple DeleteAttributes operations in a single call, which reduces round trips and latencies. This enables Amazon SimpleDB to optimize requests, which generally yields better throughput. </p> <note> <p> If you specify BatchDeleteAttributes without attributes or values, all the attributes for the item are deleted. </p> <p> BatchDeleteAttributes is an idempotent operation; running it multiple times on the same item or attribute doesn't result in an error. </p> <p> The BatchDeleteAttributes operation succeeds or fails in its entirety. There are no partial deletes. You can execute multiple BatchDeleteAttributes operations and other operations in parallel. However, large numbers of concurrent BatchDeleteAttributes calls can result in Service Unavailable (503) responses. </p> <p> This operation is vulnerable to exceeding the maximum URL size when making a REST request using the HTTP GET method. </p> <p> This operation does not support conditions using Expected.X.Name, Expected.X.Value, or Expected.X.Exists. </p> </note> <p> The following limitations are enforced for this operation: <ul> <li>1 MB request size</li> <li>25 item limit per BatchDeleteAttributes operation</li> </ul> </p>
    rpc Post(PostRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//"
        body: "body"
      };
    }
    // <p> The <code>BatchPutAttributes</code> operation creates or replaces attributes within one or more items. By using this operation, the client can perform multiple <a>PutAttribute</a> operation with a single call. This helps yield savings in round trips and latencies, enabling Amazon SimpleDB to optimize requests and generally produce better throughput. </p> <p> The client may specify the item name with the <code>Item.X.ItemName</code> parameter. The client may specify new attributes using a combination of the <code>Item.X.Attribute.Y.Name</code> and <code>Item.X.Attribute.Y.Value</code> parameters. The client may specify the first attribute for the first item using the parameters <code>Item.0.Attribute.0.Name</code> and <code>Item.0.Attribute.0.Value</code>, and for the second attribute for the first item by the parameters <code>Item.0.Attribute.1.Name</code> and <code>Item.0.Attribute.1.Value</code>, and so on. </p> <p> Attributes are uniquely identified within an item by their name/value combination. For example, a single item can have the attributes <code>{ "first_name", "first_value" }</code> and <code>{ "first_name", "second_value" }</code>. However, it cannot have two attribute instances where both the <code>Item.X.Attribute.Y.Name</code> and <code>Item.X.Attribute.Y.Value</code> are the same. </p> <p> Optionally, the requester can supply the <code>Replace</code> parameter for each individual value. Setting this value to <code>true</code> will cause the new attribute values to replace the existing attribute values. For example, if an item <code>I</code> has the attributes <code>{ 'a', '1' }, { 'b', '2'}</code> and <code>{ 'b', '3' }</code> and the requester does a BatchPutAttributes of <code>{'I', 'b', '4' }</code> with the Replace parameter set to true, the final attributes of the item will be <code>{ 'a', '1' }</code> and <code>{ 'b', '4' }</code>, replacing the previous values of the 'b' attribute with the new value. </p> <note> You cannot specify an empty string as an item or as an attribute name. The <code>BatchPutAttributes</code> operation succeeds or fails in its entirety. There are no partial puts. </note> <important> This operation is vulnerable to exceeding the maximum URL size when making a REST request using the HTTP GET method. This operation does not support conditions using <code>Expected.X.Name</code>, <code>Expected.X.Value</code>, or <code>Expected.X.Exists</code>. </important> <p> You can execute multiple <code>BatchPutAttributes</code> operations and other operations in parallel. However, large numbers of concurrent <code>BatchPutAttributes</code> calls can result in Service Unavailable (503) responses. </p> <p> The following limitations are enforced for this operation: <ul> <li>256 attribute name-value pairs per item</li> <li>1 MB request size</li> <li>1 billion attributes per domain</li> <li>10 GB of total user data storage per domain</li> <li>25 item limit per <code>BatchPutAttributes</code> operation</li> </ul> </p>
    rpc Post#BatchPutAttributes(Post#BatchPutAttributesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#BatchPutAttributes"
        body: "body"
      };
    }
    // <p> The <code>CreateDomain</code> operation creates a new domain. The domain name should be unique among the domains associated with the Access Key ID provided in the request. The <code>CreateDomain</code> operation may take 10 or more seconds to complete. </p> <note> CreateDomain is an idempotent operation; running it multiple times using the same domain name will not result in an error response. </note> <p> The client can create up to 100 domains per account. </p> <p> If the client requires additional domains, go to <a href="http://aws.amazon.com/contact-us/simpledb-limit-request/"> http://aws.amazon.com/contact-us/simpledb-limit-request/</a>. </p>
    rpc Post#CreateDomain(Post#CreateDomainRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#CreateDomain"
        body: "body"
      };
    }
    // <p> Deletes one or more attributes associated with an item. If all attributes of the item are deleted, the item is deleted. </p> <note> If <code>DeleteAttributes</code> is called without being passed any attributes or values specified, all the attributes for the item are deleted. </note> <p> <code>DeleteAttributes</code> is an idempotent operation; running it multiple times on the same item or attribute does not result in an error response. </p> <p> Because Amazon SimpleDB makes multiple copies of item data and uses an eventual consistency update model, performing a <a>GetAttributes</a> or <a>Select</a> operation (read) immediately after a <code>DeleteAttributes</code> or <a>PutAttributes</a> operation (write) might not return updated item data. </p>
    rpc Post#DeleteAttributes(Post#DeleteAttributesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#DeleteAttributes"
        body: "body"
      };
    }
    // <p> The <code>DeleteDomain</code> operation deletes a domain. Any items (and their attributes) in the domain are deleted as well. The <code>DeleteDomain</code> operation might take 10 or more seconds to complete. </p> <note> Running <code>DeleteDomain</code> on a domain that does not exist or running the function multiple times using the same domain name will not result in an error response. </note>
    rpc Post#DeleteDomain(Post#DeleteDomainRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#DeleteDomain"
        body: "body"
      };
    }
    //  Returns information about the domain, including when the domain was created, the number of items and attributes in the domain, and the size of the attribute names and values.
    rpc Post#DomainMetadata(Post#DomainMetadataRequest) returns (DomainMetadataResult) {
      option (google.api.http) = {
        post: "//#DomainMetadata"
        body: "body"
      };
    }
    // <p> Returns all of the attributes associated with the specified item. Optionally, the attributes returned can be limited to one or more attributes by specifying an attribute name parameter. </p> <p> If the item does not exist on the replica that was accessed for this operation, an empty set is returned. The system does not return an error as it cannot guarantee the item does not exist on other replicas. </p> <note> If GetAttributes is called without being passed any attribute names, all the attributes for the item are returned. </note>
    rpc Post#GetAttributes(Post#GetAttributesRequest) returns (GetAttributesResult) {
      option (google.api.http) = {
        post: "//#GetAttributes"
        body: "body"
      };
    }
    //  The <code>ListDomains</code> operation lists all domains associated with the Access Key ID. It returns domain names up to the limit set by <a href="#MaxNumberOfDomains">MaxNumberOfDomains</a>. A <a href="#NextToken">NextToken</a> is returned if there are more than <code>MaxNumberOfDomains</code> domains. Calling <code>ListDomains</code> successive times with the <code>NextToken</code> provided by the operation returns up to <code>MaxNumberOfDomains</code> more domain names with each successive operation call.
    rpc Post#ListDomains(Post#ListDomainsRequest) returns (ListDomainsResult) {
      option (google.api.http) = {
        post: "//#ListDomains"
        body: "body"
      };
    }
    // <p> The PutAttributes operation creates or replaces attributes in an item. The client may specify new attributes using a combination of the <code>Attribute.X.Name</code> and <code>Attribute.X.Value</code> parameters. The client specifies the first attribute by the parameters <code>Attribute.0.Name</code> and <code>Attribute.0.Value</code>, the second attribute by the parameters <code>Attribute.1.Name</code> and <code>Attribute.1.Value</code>, and so on. </p> <p> Attributes are uniquely identified in an item by their name/value combination. For example, a single item can have the attributes <code>{ "first_name", "first_value" }</code> and <code>{ "first_name", second_value" }</code>. However, it cannot have two attribute instances where both the <code>Attribute.X.Name</code> and <code>Attribute.X.Value</code> are the same. </p> <p> Optionally, the requestor can supply the <code>Replace</code> parameter for each individual attribute. Setting this value to <code>true</code> causes the new attribute value to replace the existing attribute value(s). For example, if an item has the attributes <code>{ 'a', '1' }</code>, <code>{ 'b', '2'}</code> and <code>{ 'b', '3' }</code> and the requestor calls <code>PutAttributes</code> using the attributes <code>{ 'b', '4' }</code> with the <code>Replace</code> parameter set to true, the final attributes of the item are changed to <code>{ 'a', '1' }</code> and <code>{ 'b', '4' }</code>, which replaces the previous values of the 'b' attribute with the new value. </p> <note> Using <code>PutAttributes</code> to replace attribute values that do not exist will not result in an error response. </note> <p> You cannot specify an empty string as an attribute name. </p> <p> Because Amazon SimpleDB makes multiple copies of client data and uses an eventual consistency update model, an immediate <a>GetAttributes</a> or <a>Select</a> operation (read) immediately after a <a>PutAttributes</a> or <a>DeleteAttributes</a> operation (write) might not return the updated data. </p> <p> The following limitations are enforced for this operation: <ul> <li>256 total attribute name-value pairs per item</li> <li>One billion attributes per domain</li> <li>10 GB of total user data storage per domain</li> </ul> </p>
    rpc Post#PutAttributes(Post#PutAttributesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#PutAttributes"
        body: "body"
      };
    }
    // <p> The <code>Select</code> operation returns a set of attributes for <code>ItemNames</code> that match the select expression. <code>Select</code> is similar to the standard SQL SELECT statement. </p> <p> The total size of the response cannot exceed 1 MB in total size. Amazon SimpleDB automatically adjusts the number of items returned per page to enforce this limit. For example, if the client asks to retrieve 2500 items, but each individual item is 10 kB in size, the system returns 100 items and an appropriate <code>NextToken</code> so the client can access the next page of results. </p> <p> For information on how to construct select expressions, see Using Select to Create Amazon SimpleDB Queries in the Developer Guide. </p>
    rpc Post#Select(Post#SelectRequest) returns (SelectResult) {
      option (google.api.http) = {
        post: "//#Select"
        body: "body"
      };
    }
}

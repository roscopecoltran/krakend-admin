syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package amazonclouddirectory;

message PostAmazonclouddirectory20170111BatchreadRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    BatchReadRequest body = 10;
}

message PutAmazonclouddirectory20170111BatchwriteRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    BatchWriteRequest body = 10;
}

message PutAmazonclouddirectory20170111DirectoryRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteDirectoryRequest body = 10;
}

message PutAmazonclouddirectory20170111DirectoryCreateRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateDirectoryRequest body = 10;
}

message PutAmazonclouddirectory20170111DirectoryDisableRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DisableDirectoryRequest body = 10;
}

message PutAmazonclouddirectory20170111DirectoryEnableRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    EnableDirectoryRequest body = 10;
}

message PostAmazonclouddirectory20170111DirectoryGetRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetDirectoryRequest body = 10;
}

message PostAmazonclouddirectory20170111DirectoryListRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    ListDirectoriesRequest body = 12;
}

message PutAmazonclouddirectory20170111FacetRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateFacetRequest body = 10;
}

message PostAmazonclouddirectory20170111FacetAttributesRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    ListFacetAttributesRequest body = 12;
}

message PutAmazonclouddirectory20170111FacetCreateRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateFacetRequest body = 10;
}

message PutAmazonclouddirectory20170111FacetDeleteRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteFacetRequest body = 10;
}

message PostAmazonclouddirectory20170111FacetListRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    ListFacetNamesRequest body = 12;
}

message PutAmazonclouddirectory20170111IndexRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateIndexRequest body = 10;
}

message PutAmazonclouddirectory20170111IndexAttachRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AttachToIndexRequest body = 10;
}

message PutAmazonclouddirectory20170111IndexDetachRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DetachFromIndexRequest body = 10;
}

message PostAmazonclouddirectory20170111IndexTargetsRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    ListIndexRequest body = 12;
}

message PutAmazonclouddirectory20170111ObjectRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateObjectRequest body = 10;
}

message PutAmazonclouddirectory20170111ObjectAttachRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AttachObjectRequest body = 10;
}

message PostAmazonclouddirectory20170111ObjectAttributesRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    ListObjectAttributesRequest body = 12;
}

message PostAmazonclouddirectory20170111ObjectChildrenRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    ListObjectChildrenRequest body = 12;
}

message PutAmazonclouddirectory20170111ObjectDeleteRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteObjectRequest body = 10;
}

message PutAmazonclouddirectory20170111ObjectDetachRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DetachObjectRequest body = 10;
}

message PutAmazonclouddirectory20170111ObjectFacetsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AddFacetToObjectRequest body = 10;
}

message PutAmazonclouddirectory20170111ObjectFacetsDeleteRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RemoveFacetFromObjectRequest body = 10;
}

message PostAmazonclouddirectory20170111ObjectIndicesRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    ListAttachedIndicesRequest body = 12;
}

message PostAmazonclouddirectory20170111ObjectInformationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetObjectInformationRequest body = 10;
}

message PostAmazonclouddirectory20170111ObjectParentRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    ListObjectParentsRequest body = 12;
}

message PostAmazonclouddirectory20170111ObjectParentpathsRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    ListObjectParentPathsRequest body = 12;
}

message PostAmazonclouddirectory20170111ObjectPolicyRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    ListObjectPoliciesRequest body = 12;
}

message PutAmazonclouddirectory20170111ObjectUpdateRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateObjectAttributesRequest body = 10;
}

message PutAmazonclouddirectory20170111PolicyAttachRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AttachPolicyRequest body = 10;
}

message PostAmazonclouddirectory20170111PolicyAttachmentRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    ListPolicyAttachmentsRequest body = 12;
}

message PutAmazonclouddirectory20170111PolicyDetachRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DetachPolicyRequest body = 10;
}

message PostAmazonclouddirectory20170111PolicyLookupRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    LookupPolicyRequest body = 12;
}

message PutAmazonclouddirectory20170111SchemaRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteSchemaRequest body = 10;
}

message PostAmazonclouddirectory20170111SchemaAppliedRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    ListAppliedSchemaArnsRequest body = 12;
}

message PutAmazonclouddirectory20170111SchemaApplyRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ApplySchemaRequest body = 10;
}

message PutAmazonclouddirectory20170111SchemaCreateRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateSchemaRequest body = 10;
}

message PostAmazonclouddirectory20170111SchemaDevelopmentRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    ListDevelopmentSchemaArnsRequest body = 12;
}

message PutAmazonclouddirectory20170111SchemaJsonRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    PutSchemaFromJsonRequest body = 10;
}

message PutAmazonclouddirectory20170111SchemaPublishRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    PublishSchemaRequest body = 10;
}

message PostAmazonclouddirectory20170111SchemaPublishedRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    ListPublishedSchemaArnsRequest body = 12;
}

message PutAmazonclouddirectory20170111SchemaUpdateRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateSchemaRequest body = 10;
}

message PostAmazonclouddirectory20170111TagsRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    ListTagsForResourceRequest body = 12;
}

message PutAmazonclouddirectory20170111TagsAddRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    TagResourceRequest body = 10;
}

message PutAmazonclouddirectory20170111TagsRemoveRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UntagResourceRequest body = 10;
}

message PutAmazonclouddirectory20170111TypedlinkAttachRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AttachTypedLinkRequest body = 10;
}

message PutAmazonclouddirectory20170111TypedlinkDetachRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DetachTypedLinkRequest body = 10;
}

message PutAmazonclouddirectory20170111TypedlinkFacetRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateTypedLinkFacetRequest body = 10;
}

message PostAmazonclouddirectory20170111TypedlinkFacetAttributesRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    ListTypedLinkFacetAttributesRequest body = 12;
}

message PutAmazonclouddirectory20170111TypedlinkFacetCreateRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateTypedLinkFacetRequest body = 10;
}

message PutAmazonclouddirectory20170111TypedlinkFacetDeleteRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteTypedLinkFacetRequest body = 10;
}

message PostAmazonclouddirectory20170111TypedlinkFacetGetRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetTypedLinkFacetInformationRequest body = 10;
}

message PostAmazonclouddirectory20170111TypedlinkFacetListRequest {
    string Action = 1;
    // Pagination limit
    string MaxResults = 2;
    // Pagination token
    string NextToken = 3;
    string Version = 4;
    string X_Amz_Algorithm = 5;
    string X_Amz_Content_Sha256 = 6;
    string X_Amz_Credential = 7;
    string X_Amz_Date = 8;
    string X_Amz_Security_Token = 9;
    string X_Amz_Signature = 10;
    string X_Amz_SignedHeaders = 11;
    ListTypedLinkFacetNamesRequest body = 12;
}

message PostAmazonclouddirectory20170111TypedlinkIncomingRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListIncomingTypedLinksRequest body = 10;
}

message PostAmazonclouddirectory20170111TypedlinkOutgoingRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListOutgoingTypedLinksRequest body = 10;
}

message AccessDeniedException {
    string Message = 1;
}

message AddFacetToObjectRequest {
    // Attributes on the facet that you are adding to the object.
    array ObjectAttributeList = 1;
    // A reference to the object you are adding the specified facet to.
    ObjectReference ObjectReference = 2;
    // Identifiers for the facet that you are adding to the object.
    SchemaFacet SchemaFacet = 3;
}

message AddFacetToObjectResponse {
}

message ApplySchemaRequest {
    // Published schema Amazon Resource Name (ARN) that needs to be copied. For more information, see <a>arns</a>.
    string PublishedSchemaArn = 1;
}

message ApplySchemaResponse {
    // The applied schema ARN that is associated with the copied schema in the <a>Directory</a>. You can use this ARN to describe the schema information applied on this directory. For more information, see <a>arns</a>.
    string AppliedSchemaArn = 1;
    // The ARN that is associated with the <a>Directory</a>. For more information, see <a>arns</a>.
    string DirectoryArn = 2;
}



repeated string Arns = 1

message AttachObjectRequest {
    // The child object reference to be attached to the object.
    ObjectReference ChildReference = 1;
    // The link name with which the child object is attached to the parent.
    string LinkName = 2;
    // The parent object reference.
    ObjectReference ParentReference = 3;
}

message AttachObjectResponse {
    // The attached <code>ObjectIdentifier</code>, which is the child <code>ObjectIdentifier</code>.
    string AttachedObjectIdentifier = 1;
}

message AttachPolicyRequest {
    // The reference that identifies the object to which the policy will be attached.
    ObjectReference ObjectReference = 1;
    // The reference that is associated with the policy object.
    ObjectReference PolicyReference = 2;
}

message AttachPolicyResponse {
}

message AttachToIndexRequest {
    // A reference to the index that you are attaching the object to.
    ObjectReference IndexReference = 1;
    // A reference to the object that you are attaching to the index.
    ObjectReference TargetReference = 2;
}

message AttachToIndexResponse {
    // The <code>ObjectIdentifier</code> of the object that was attached to the index.
    string AttachedObjectIdentifier = 1;
}

message AttachTypedLinkRequest {
    // A set of attributes that are associated with the typed link.
    array Attributes = 1;
    // Identifies the source object that the typed link will attach to.
    ObjectReference SourceObjectReference = 2;
    // Identifies the target object that the typed link will attach to.
    ObjectReference TargetObjectReference = 3;
    // Identifies the typed link facet that is associated with the typed link.
    TypedLinkSchemaAndFacetName TypedLinkFacet = 4;
}

message AttachTypedLinkResponse {
    // Returns a typed link specifier as output.
    TypedLinkSpecifier TypedLinkSpecifier = 1;
}

message AttributeKey {
    // The name of the facet that the attribute exists within.
    string FacetName = 1;
    // The name of the attribute.
    string Name = 2;
    // The Amazon Resource Name (ARN) of the schema that contains the facet and attribute.
    string SchemaArn = 3;
}

message AttributeKeyAndValue {
    // The key of the attribute.
    AttributeKey Key = 1;
    // The value of the attribute.
    TypedAttributeValue Value = 2;
}

repeated AttributeKeyAndValue AttributeKeyAndValueList = 1

repeated AttributeKey AttributeKeyList = 1



message AttributeNameAndValue {
    // The attribute name of the typed link.
    string AttributeName = 1;
    // The value for the typed link.
    TypedAttributeValue Value = 2;
}

repeated AttributeNameAndValue AttributeNameAndValueList = 1

repeated string AttributeNameList = 1

message BatchAddFacetToObject {
    // The attributes to set on the object.
    array ObjectAttributeList = 1;
    // A reference to the object being mutated.
    ObjectReference ObjectReference = 2;
    // Represents the facet being added to the object.
    SchemaFacet SchemaFacet = 3;
}

message BatchAddFacetToObjectResponse {
}

message BatchAttachObject {
    // The child object reference that is to be attached to the object.
    ObjectReference ChildReference = 1;
    // The name of the link.
    string LinkName = 2;
    // The parent object reference.
    ObjectReference ParentReference = 3;
}

message BatchAttachObjectResponse {
    // The <code>ObjectIdentifier</code> of the object that has been attached.
    string attachedObjectIdentifier = 1;
}

message BatchAttachPolicy {
    // The reference that identifies the object to which the policy will be attached.
    ObjectReference ObjectReference = 1;
    // The reference that is associated with the policy object.
    ObjectReference PolicyReference = 2;
}

message BatchAttachPolicyResponse {
}

message BatchAttachToIndex {
    // A reference to the index that you are attaching the object to.
    ObjectReference IndexReference = 1;
    // A reference to the object that you are attaching to the index.
    ObjectReference TargetReference = 2;
}

message BatchAttachToIndexResponse {
    // The <code>ObjectIdentifier</code> of the object that was attached to the index.
    string AttachedObjectIdentifier = 1;
}

message BatchAttachTypedLink {
    // A set of attributes that are associated with the typed link.
    array Attributes = 1;
    // Identifies the source object that the typed link will attach to.
    ObjectReference SourceObjectReference = 2;
    // Identifies the target object that the typed link will attach to.
    ObjectReference TargetObjectReference = 3;
    // Identifies the typed link facet that is associated with the typed link.
    TypedLinkSchemaAndFacetName TypedLinkFacet = 4;
}

message BatchAttachTypedLinkResponse {
    // Returns a typed link specifier as output.
    TypedLinkSpecifier TypedLinkSpecifier = 1;
}

message BatchCreateIndex {
    // The batch reference name. See <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_advanced.html#batches">Batches</a> for more information.
    string BatchReferenceName = 1;
    // Indicates whether the attribute that is being indexed has unique values or not.
    boolean IsUnique = 2;
    // The name of the link between the parent object and the index object.
    string LinkName = 3;
    // Specifies the attributes that should be indexed on. Currently only a single attribute is supported.
    array OrderedIndexedAttributeList = 4;
    // A reference to the parent object that contains the index object.
    ObjectReference ParentReference = 5;
}

message BatchCreateIndexResponse {
    // The <code>ObjectIdentifier</code> of the index created by this operation.
    string ObjectIdentifier = 1;
}

message BatchCreateObject {
    // The batch reference name. See <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_advanced.html#batches">Batches</a> for more information.
    string BatchReferenceName = 1;
    // The name of the link.
    string LinkName = 2;
    // An attribute map, which contains an attribute ARN as the key and attribute value as the map value.
    array ObjectAttributeList = 3;
    // If specified, the parent reference to which this object will be attached.
    ObjectReference ParentReference = 4;
    // A list of <code>FacetArns</code> that will be associated with the object. For more information, see <a>arns</a>.
    array SchemaFacet = 5;
}

message BatchCreateObjectResponse {
    // The ID that is associated with the object.
    string ObjectIdentifier = 1;
}

message BatchDeleteObject {
    // The reference that identifies the object.
    ObjectReference ObjectReference = 1;
}

message BatchDeleteObjectResponse {
}

message BatchDetachFromIndex {
    // A reference to the index object.
    ObjectReference IndexReference = 1;
    // A reference to the object being detached from the index.
    ObjectReference TargetReference = 2;
}

message BatchDetachFromIndexResponse {
    // The <code>ObjectIdentifier</code> of the object that was detached from the index.
    string DetachedObjectIdentifier = 1;
}

message BatchDetachObject {
    // The batch reference name. See <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_advanced.html#batches">Batches</a> for more information.
    string BatchReferenceName = 1;
    // The name of the link.
    string LinkName = 2;
    // Parent reference from which the object with the specified link name is detached.
    ObjectReference ParentReference = 3;
}

message BatchDetachObjectResponse {
    // The <code>ObjectIdentifier</code> of the detached object.
    string detachedObjectIdentifier = 1;
}

message BatchDetachPolicy {
    // Reference that identifies the object whose policy object will be detached.
    ObjectReference ObjectReference = 1;
    // Reference that identifies the policy object.
    ObjectReference PolicyReference = 2;
}

message BatchDetachPolicyResponse {
}

message BatchDetachTypedLink {
    // Used to accept a typed link specifier as input.
    TypedLinkSpecifier TypedLinkSpecifier = 1;
}

message BatchDetachTypedLinkResponse {
}

message BatchGetObjectInformation {
    // A reference to the object.
    ObjectReference ObjectReference = 1;
}

message BatchGetObjectInformationResponse {
    // The <code>ObjectIdentifier</code> of the specified object.
    string ObjectIdentifier = 1;
    // The facets attached to the specified object.
    array SchemaFacets = 2;
}

message BatchListAttachedIndices {
    // The maximum number of results to retrieve.
    integer MaxResults = 1;
    // The pagination token.
    string NextToken = 2;
    // A reference to the object that has indices attached.
    ObjectReference TargetReference = 3;
}

message BatchListAttachedIndicesResponse {
    // The indices attached to the specified object.
    array IndexAttachments = 1;
    // The pagination token.
    string NextToken = 2;
}

message BatchListIncomingTypedLinks {
    // Provides range filters for multiple attributes. When providing ranges to typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range.
    array FilterAttributeRanges = 1;
    // Filters are interpreted in the order of the attributes on the typed link facet, not the order in which they are supplied to any API calls.
    TypedLinkSchemaAndFacetName FilterTypedLink = 2;
    // The maximum number of results to retrieve.
    integer MaxResults = 3;
    // The pagination token.
    string NextToken = 4;
    // The reference that identifies the object whose attributes will be listed.
    ObjectReference ObjectReference = 5;
}

message BatchListIncomingTypedLinksResponse {
    // Returns one or more typed link specifiers as output.
    array LinkSpecifiers = 1;
    // The pagination token.
    string NextToken = 2;
}

message BatchListIndex {
    // The reference to the index to list.
    ObjectReference IndexReference = 1;
    // The maximum number of results to retrieve.
    integer MaxResults = 2;
    // The pagination token.
    string NextToken = 3;
    // Specifies the ranges of indexed values that you want to query.
    array RangesOnIndexedValues = 4;
}

message BatchListIndexResponse {
    // The objects and indexed values attached to the index.
    array IndexAttachments = 1;
    // The pagination token.
    string NextToken = 2;
}

message BatchListObjectAttributes {
    // Used to filter the list of object attributes that are associated with a certain facet.
    SchemaFacet FacetFilter = 1;
    // The maximum number of items to be retrieved in a single call. This is an approximate number.
    integer MaxResults = 2;
    // The pagination token.
    string NextToken = 3;
    // Reference of the object whose attributes need to be listed.
    ObjectReference ObjectReference = 4;
}

message BatchListObjectAttributesResponse {
    // The attributes map that is associated with the object. <code>AttributeArn</code> is the key; attribute value is the value.
    array Attributes = 1;
    // The pagination token.
    string NextToken = 2;
}

message BatchListObjectChildren {
    // Maximum number of items to be retrieved in a single call. This is an approximate number.
    integer MaxResults = 1;
    // The pagination token.
    string NextToken = 2;
    // Reference of the object for which child objects are being listed.
    ObjectReference ObjectReference = 3;
}

message BatchListObjectChildrenResponse {
    // The children structure, which is a map with the key as the <code>LinkName</code> and <code>ObjectIdentifier</code> as the value.
    array Children = 1;
    // The pagination token.
    string NextToken = 2;
}

message BatchListObjectParentPaths {
    // The maximum number of results to retrieve.
    integer MaxResults = 1;
    // The pagination token.
    string NextToken = 2;
    // The reference that identifies the object whose attributes will be listed.
    ObjectReference ObjectReference = 3;
}

message BatchListObjectParentPathsResponse {
    // The pagination token.
    string NextToken = 1;
    // Returns the path to the <code>ObjectIdentifiers</code> that are associated with the directory.
    array PathToObjectIdentifiersList = 2;
}

message BatchListObjectPolicies {
    // The maximum number of results to retrieve.
    integer MaxResults = 1;
    // The pagination token.
    string NextToken = 2;
    // The reference that identifies the object whose attributes will be listed.
    ObjectReference ObjectReference = 3;
}

message BatchListObjectPoliciesResponse {
    // A list of policy <code>ObjectIdentifiers</code>, that are attached to the object.
    array AttachedPolicyIds = 1;
    // The pagination token.
    string NextToken = 2;
}

message BatchListOutgoingTypedLinks {
    // Provides range filters for multiple attributes. When providing ranges to typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range.
    array FilterAttributeRanges = 1;
    // Filters are interpreted in the order of the attributes defined on the typed link facet, not the order they are supplied to any API calls.
    TypedLinkSchemaAndFacetName FilterTypedLink = 2;
    // The maximum number of results to retrieve.
    integer MaxResults = 3;
    // The pagination token.
    string NextToken = 4;
    // The reference that identifies the object whose attributes will be listed.
    ObjectReference ObjectReference = 5;
}

message BatchListOutgoingTypedLinksResponse {
    // The pagination token.
    string NextToken = 1;
    // Returns a typed link specifier as output.
    array TypedLinkSpecifiers = 2;
}

message BatchListPolicyAttachments {
    // The maximum number of results to retrieve.
    integer MaxResults = 1;
    // The pagination token.
    string NextToken = 2;
    // The reference that identifies the policy object.
    ObjectReference PolicyReference = 3;
}

message BatchListPolicyAttachmentsResponse {
    // The pagination token.
    string NextToken = 1;
    // A list of <code>ObjectIdentifiers</code> to which the policy is attached.
    array ObjectIdentifiers = 2;
}

message BatchLookupPolicy {
    // The maximum number of results to retrieve.
    integer MaxResults = 1;
    // The pagination token.
    string NextToken = 2;
    // Reference that identifies the object whose policies will be looked up.
    ObjectReference ObjectReference = 3;
}

message BatchLookupPolicyResponse {
    // The pagination token.
    string NextToken = 1;
    // Provides list of path to policies. Policies contain <code>PolicyId</code>, <code>ObjectIdentifier</code>, and <code>PolicyType</code>. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_key_concepts.html#policies">Policies</a>.
    array PolicyToPathList = 2;
}

message BatchReadException {
    // An exception message that is associated with the failure.
    string Message = 1;
    // A type of exception, such as <code>InvalidArnException</code>.
    BatchReadExceptionType Type = 2;
}

enum BatchReadExceptionType {
    VALIDATIONEXCEPTION = 0;
    INVALIDARNEXCEPTION = 1;
    RESOURCENOTFOUNDEXCEPTION = 2;
    INVALIDNEXTTOKENEXCEPTION = 3;
    ACCESSDENIEDEXCEPTION = 4;
    NOTNODEEXCEPTION = 5;
    FACETVALIDATIONEXCEPTION = 6;
    CANNOTLISTPARENTOFROOTEXCEPTION = 7;
    NOTINDEXEXCEPTION = 8;
    NOTPOLICYEXCEPTION = 9;
    DIRECTORYNOTENABLEDEXCEPTION = 10;
    LIMITEXCEEDEDEXCEPTION = 11;
    INTERNALSERVICEEXCEPTION = 12;
}

message BatchReadOperation {
    // Retrieves metadata about an object.
    BatchGetObjectInformation GetObjectInformation = 1;
    // Lists indices attached to an object.
    BatchListAttachedIndices ListAttachedIndices = 2;
    // Returns a paginated list of all the incoming <a>TypedLinkSpecifier</a> information for an object. It also supports filtering by typed link facet and identity attributes. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
    BatchListIncomingTypedLinks ListIncomingTypedLinks = 3;
    // Lists objects attached to the specified index.
    BatchListIndex ListIndex = 4;
    // Lists all attributes that are associated with an object.
    BatchListObjectAttributes ListObjectAttributes = 5;
    // Returns a paginated list of child objects that are associated with a given object.
    BatchListObjectChildren ListObjectChildren = 6;
    // Retrieves all available parent paths for any object type such as node, leaf node, policy node, and index node objects. For more information about objects, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_key_concepts.html#dirstructure">Directory Structure</a>.
    BatchListObjectParentPaths ListObjectParentPaths = 7;
    // Returns policies attached to an object in pagination fashion.
    BatchListObjectPolicies ListObjectPolicies = 8;
    // Returns a paginated list of all the outgoing <a>TypedLinkSpecifier</a> information for an object. It also supports filtering by typed link facet and identity attributes. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
    BatchListOutgoingTypedLinks ListOutgoingTypedLinks = 9;
    // Returns all of the <code>ObjectIdentifiers</code> to which a given policy is attached.
    BatchListPolicyAttachments ListPolicyAttachments = 10;
    // Lists all policies from the root of the <a>Directory</a> to the object specified. If there are no policies present, an empty list is returned. If policies are present, and if some objects don't have the policies attached, it returns the <code>ObjectIdentifier</code> for such objects. If policies are present, it returns <code>ObjectIdentifier</code>, <code>policyId</code>, and <code>policyType</code>. Paths that don't lead to the root from the target object are ignored. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_key_concepts.html#policies">Policies</a>.
    BatchLookupPolicy LookupPolicy = 11;
}

repeated BatchReadOperation BatchReadOperationList = 1

message BatchReadOperationResponse {
    // Identifies which operation in a batch has failed.
    BatchReadException ExceptionResponse = 1;
    // Identifies which operation in a batch has succeeded.
    BatchReadSuccessfulResponse SuccessfulResponse = 2;
}

repeated BatchReadOperationResponse BatchReadOperationResponseList = 1

message BatchReadRequest {
    // A list of operations that are part of the batch.
    array Operations = 1;
}

message BatchReadResponse {
    // A list of all the responses for each batch read.
    array Responses = 1;
}

message BatchReadSuccessfulResponse {
    // Retrieves metadata about an object.
    BatchGetObjectInformationResponse GetObjectInformation = 1;
    // Lists indices attached to an object.
    BatchListAttachedIndicesResponse ListAttachedIndices = 2;
    // Returns a paginated list of all the incoming <a>TypedLinkSpecifier</a> information for an object. It also supports filtering by typed link facet and identity attributes. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
    BatchListIncomingTypedLinksResponse ListIncomingTypedLinks = 3;
    // Lists objects attached to the specified index.
    BatchListIndexResponse ListIndex = 4;
    // Lists all attributes that are associated with an object.
    BatchListObjectAttributesResponse ListObjectAttributes = 5;
    // Returns a paginated list of child objects that are associated with a given object.
    BatchListObjectChildrenResponse ListObjectChildren = 6;
    // Retrieves all available parent paths for any object type such as node, leaf node, policy node, and index node objects. For more information about objects, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_key_concepts.html#dirstructure">Directory Structure</a>.
    BatchListObjectParentPathsResponse ListObjectParentPaths = 7;
    // Returns policies attached to an object in pagination fashion.
    BatchListObjectPoliciesResponse ListObjectPolicies = 8;
    // Returns a paginated list of all the outgoing <a>TypedLinkSpecifier</a> information for an object. It also supports filtering by typed link facet and identity attributes. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
    BatchListOutgoingTypedLinksResponse ListOutgoingTypedLinks = 9;
    // Returns all of the <code>ObjectIdentifiers</code> to which a given policy is attached.
    BatchListPolicyAttachmentsResponse ListPolicyAttachments = 10;
    // Lists all policies from the root of the <a>Directory</a> to the object specified. If there are no policies present, an empty list is returned. If policies are present, and if some objects don't have the policies attached, it returns the <code>ObjectIdentifier</code> for such objects. If policies are present, it returns <code>ObjectIdentifier</code>, <code>policyId</code>, and <code>policyType</code>. Paths that don't lead to the root from the target object are ignored. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_key_concepts.html#policies">Policies</a>.
    BatchLookupPolicyResponse LookupPolicy = 11;
}

message BatchRemoveFacetFromObject {
    // A reference to the object whose facet will be removed.
    ObjectReference ObjectReference = 1;
    // The facet to remove from the object.
    SchemaFacet SchemaFacet = 2;
}

message BatchRemoveFacetFromObjectResponse {
}

message BatchUpdateObjectAttributes {
    // Attributes update structure.
    array AttributeUpdates = 1;
    // Reference that identifies the object.
    ObjectReference ObjectReference = 2;
}

message BatchUpdateObjectAttributesResponse {
    // ID that is associated with the object.
    string ObjectIdentifier = 1;
}

message BatchWriteException {
    integer Index = 1;
    string Message = 2;
    BatchWriteExceptionType Type = 3;
}

enum BatchWriteExceptionType {
    INTERNALSERVICEEXCEPTION = 0;
    VALIDATIONEXCEPTION = 1;
    INVALIDARNEXCEPTION = 2;
    LINKNAMEALREADYINUSEEXCEPTION = 3;
    STILLCONTAINSLINKSEXCEPTION = 4;
    FACETVALIDATIONEXCEPTION = 5;
    OBJECTNOTDETACHEDEXCEPTION = 6;
    RESOURCENOTFOUNDEXCEPTION = 7;
    ACCESSDENIEDEXCEPTION = 8;
    INVALIDATTACHMENTEXCEPTION = 9;
    NOTINDEXEXCEPTION = 10;
    INDEXEDATTRIBUTEMISSINGEXCEPTION = 11;
    OBJECTALREADYDETACHEDEXCEPTION = 12;
    NOTPOLICYEXCEPTION = 13;
    DIRECTORYNOTENABLEDEXCEPTION = 14;
    LIMITEXCEEDEDEXCEPTION = 15;
    UNSUPPORTEDINDEXTYPEEXCEPTION = 16;
}

message BatchWriteOperation {
    // A batch operation that adds a facet to an object.
    BatchAddFacetToObject AddFacetToObject = 1;
    // Attaches an object to a <a>Directory</a>.
    BatchAttachObject AttachObject = 2;
    // Attaches a policy object to a regular object. An object can have a limited number of attached policies.
    BatchAttachPolicy AttachPolicy = 3;
    // Attaches the specified object to the specified index.
    BatchAttachToIndex AttachToIndex = 4;
    // Attaches a typed link to a specified source and target object. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
    BatchAttachTypedLink AttachTypedLink = 5;
    // Creates an index object. See <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_indexing.html">Indexing</a> for more information.
    BatchCreateIndex CreateIndex = 6;
    // Creates an object.
    BatchCreateObject CreateObject = 7;
    // Deletes an object in a <a>Directory</a>.
    BatchDeleteObject DeleteObject = 8;
    // Detaches the specified object from the specified index.
    BatchDetachFromIndex DetachFromIndex = 9;
    // Detaches an object from a <a>Directory</a>.
    BatchDetachObject DetachObject = 10;
    // Detaches a policy from a <a>Directory</a>.
    BatchDetachPolicy DetachPolicy = 11;
    // Detaches a typed link from a specified source and target object. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
    BatchDetachTypedLink DetachTypedLink = 12;
    // A batch operation that removes a facet from an object.
    BatchRemoveFacetFromObject RemoveFacetFromObject = 13;
    // Updates a given object's attributes.
    BatchUpdateObjectAttributes UpdateObjectAttributes = 14;
}

repeated BatchWriteOperation BatchWriteOperationList = 1

message BatchWriteOperationResponse {
    // The result of an add facet to object batch operation.
    BatchAddFacetToObjectResponse AddFacetToObject = 1;
    // Attaches an object to a <a>Directory</a>.
    BatchAttachObjectResponse AttachObject = 2;
    // Attaches a policy object to a regular object. An object can have a limited number of attached policies.
    BatchAttachPolicyResponse AttachPolicy = 3;
    // Attaches the specified object to the specified index.
    BatchAttachToIndexResponse AttachToIndex = 4;
    // Attaches a typed link to a specified source and target object. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
    BatchAttachTypedLinkResponse AttachTypedLink = 5;
    // Creates an index object. See <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_indexing.html">Indexing</a> for more information.
    BatchCreateIndexResponse CreateIndex = 6;
    // Creates an object in a <a>Directory</a>.
    BatchCreateObjectResponse CreateObject = 7;
    // Deletes an object in a <a>Directory</a>.
    BatchDeleteObjectResponse DeleteObject = 8;
    // Detaches the specified object from the specified index.
    BatchDetachFromIndexResponse DetachFromIndex = 9;
    // Detaches an object from a <a>Directory</a>.
    BatchDetachObjectResponse DetachObject = 10;
    // Detaches a policy from a <a>Directory</a>.
    BatchDetachPolicyResponse DetachPolicy = 11;
    // Detaches a typed link from a specified source and target object. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
    BatchDetachTypedLinkResponse DetachTypedLink = 12;
    // The result of a batch remove facet from object operation.
    BatchRemoveFacetFromObjectResponse RemoveFacetFromObject = 13;
    // Updates a given object’s attributes.
    BatchUpdateObjectAttributesResponse UpdateObjectAttributes = 14;
}

repeated BatchWriteOperationResponse BatchWriteOperationResponseList = 1

message BatchWriteRequest {
    // A list of operations that are part of the batch.
    array Operations = 1;
}

message BatchWriteResponse {
    // A list of all the responses for each batch write.
    array Responses = 1;
}

message CannotListParentOfRootException {
    string Message = 1;
}

enum ConsistencyLevel {
    SERIALIZABLE = 0;
    EVENTUAL = 1;
}

message CreateDirectoryRequest {
    // The name of the <a>Directory</a>. Should be unique per account, per region.
    string Name = 1;
}

message CreateDirectoryResponse {
    // The ARN of the published schema in the <a>Directory</a>. Once a published schema is copied into the directory, it has its own ARN, which is referred to applied schema ARN. For more information, see <a>arns</a>.
    string AppliedSchemaArn = 1;
    // The ARN that is associated with the <a>Directory</a>. For more information, see <a>arns</a>.
    string DirectoryArn = 2;
    // The name of the <a>Directory</a>.
    string Name = 3;
    // The root object node of the created directory.
    string ObjectIdentifier = 4;
}

message CreateFacetRequest {
    // The attributes that are associated with the <a>Facet</a>.
    array Attributes = 1;
    // The name of the <a>Facet</a>, which is unique for a given schema.
    string Name = 2;
    // <p>Specifies whether a given object created from this facet is of type node, leaf node, policy or index.</p> <ul> <li> <p>Node: Can have multiple children but one parent.</p> </li> </ul> <ul> <li> <p>Leaf node: Cannot have children but can have multiple parents.</p> </li> </ul> <ul> <li> <p>Policy: Allows you to store a policy document and policy type. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_key_concepts.html#policies">Policies</a>.</p> </li> </ul> <ul> <li> <p>Index: Can be created with the Index API.</p> </li> </ul>
    ObjectType ObjectType = 3;
}

message CreateFacetResponse {
}

message CreateIndexRequest {
    // Indicates whether the attribute that is being indexed has unique values or not.
    boolean IsUnique = 1;
    // The name of the link between the parent object and the index object.
    string LinkName = 2;
    // Specifies the attributes that should be indexed on. Currently only a single attribute is supported.
    array OrderedIndexedAttributeList = 3;
    // A reference to the parent object that contains the index object.
    ObjectReference ParentReference = 4;
}

message CreateIndexResponse {
    // The <code>ObjectIdentifier</code> of the index created by this operation.
    string ObjectIdentifier = 1;
}

message CreateObjectRequest {
    // The name of link that is used to attach this object to a parent.
    string LinkName = 1;
    // The attribute map whose attribute ARN contains the key and attribute value as the map value.
    array ObjectAttributeList = 2;
    // If specified, the parent reference to which this object will be attached.
    ObjectReference ParentReference = 3;
    // A list of schema facets to be associated with the object that contains <code>SchemaArn</code> and facet name. For more information, see <a>arns</a>.
    array SchemaFacets = 4;
}

message CreateObjectResponse {
    // The identifier that is associated with the object.
    string ObjectIdentifier = 1;
}

message CreateSchemaRequest {
    // The name that is associated with the schema. This is unique to each account and in each region.
    string Name = 1;
}

message CreateSchemaResponse {
    // The Amazon Resource Name (ARN) that is associated with the schema. For more information, see <a>arns</a>.
    string SchemaArn = 1;
}

message CreateTypedLinkFacetRequest {
    //  <a>Facet</a> structure that is associated with the typed link facet.
    TypedLinkFacet Facet = 1;
}

message CreateTypedLinkFacetResponse {
}

message DeleteDirectoryRequest {
}

message DeleteDirectoryResponse {
    // The ARN of the deleted directory.
    string DirectoryArn = 1;
}

message DeleteFacetRequest {
    // The name of the facet to delete.
    string Name = 1;
}

message DeleteFacetResponse {
}

message DeleteObjectRequest {
    // A reference that identifies the object.
    ObjectReference ObjectReference = 1;
}

message DeleteObjectResponse {
}

message DeleteSchemaRequest {
}

message DeleteSchemaResponse {
    // The input ARN that is returned as part of the response. For more information, see <a>arns</a>.
    string SchemaArn = 1;
}

message DeleteTypedLinkFacetRequest {
    // The unique name of the typed link facet.
    string Name = 1;
}

message DeleteTypedLinkFacetResponse {
}

message DetachFromIndexRequest {
    // A reference to the index object.
    ObjectReference IndexReference = 1;
    // A reference to the object being detached from the index.
    ObjectReference TargetReference = 2;
}

message DetachFromIndexResponse {
    // The <code>ObjectIdentifier</code> of the object that was detached from the index.
    string DetachedObjectIdentifier = 1;
}

message DetachObjectRequest {
    // The link name associated with the object that needs to be detached.
    string LinkName = 1;
    // The parent reference from which the object with the specified link name is detached.
    ObjectReference ParentReference = 2;
}

message DetachObjectResponse {
    // The <code>ObjectIdentifier</code> that was detached from the object.
    string DetachedObjectIdentifier = 1;
}

message DetachPolicyRequest {
    // Reference that identifies the object whose policy object will be detached.
    ObjectReference ObjectReference = 1;
    // Reference that identifies the policy object.
    ObjectReference PolicyReference = 2;
}

message DetachPolicyResponse {
}

message DetachTypedLinkRequest {
    // Used to accept a typed link specifier as input.
    TypedLinkSpecifier TypedLinkSpecifier = 1;
}

message Directory {
    // The date and time when the directory was created.
    string CreationDateTime = 1;
    // The Amazon Resource Name (ARN) that is associated with the directory. For more information, see <a>arns</a>.
    string DirectoryArn = 2;
    // The name of the directory.
    string Name = 3;
    // The state of the directory. Can be either <code>Enabled</code>, <code>Disabled</code>, or <code>Deleted</code>.
    DirectoryState State = 4;
}

message DirectoryAlreadyExistsException {
    string Message = 1;
}

message DirectoryDeletedException {
    string Message = 1;
}

repeated Directory DirectoryList = 1



message DirectoryNotDisabledException {
    string Message = 1;
}

message DirectoryNotEnabledException {
    string Message = 1;
}

enum DirectoryState {
    ENABLED = 0;
    DISABLED = 1;
    DELETED = 2;
}

message DisableDirectoryRequest {
}

message DisableDirectoryResponse {
    // The ARN of the directory that has been disabled.
    string DirectoryArn = 1;
}

message EnableDirectoryRequest {
}

message EnableDirectoryResponse {
    // The ARN of the enabled directory.
    string DirectoryArn = 1;
}

message Facet {
    // The name of the <a>Facet</a>.
    string Name = 1;
    // The object type that is associated with the facet. See <a>CreateFacetRequest$ObjectType</a> for more details.
    ObjectType ObjectType = 2;
}

message FacetAlreadyExistsException {
    string Message = 1;
}

message FacetAttribute {
    // A facet attribute consists of either a definition or a reference. This structure contains the attribute definition. See <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_advanced.html#attributereferences">Attribute References</a> for more information.
    FacetAttributeDefinition AttributeDefinition = 1;
    // An attribute reference that is associated with the attribute. See <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_advanced.html#attributereferences">Attribute References</a> for more information.
    FacetAttributeReference AttributeReference = 2;
    // The name of the facet attribute.
    string Name = 3;
    // The required behavior of the <code>FacetAttribute</code>.
    RequiredAttributeBehavior RequiredBehavior = 4;
}

message FacetAttributeDefinition {
    // The default value of the attribute (if configured).
    TypedAttributeValue DefaultValue = 1;
    // Whether the attribute is mutable or not.
    boolean IsImmutable = 2;
    // Validation rules attached to the attribute definition.
    array Rules = 3;
    // The type of the attribute.
    FacetAttributeType Type = 4;
}

repeated FacetAttribute FacetAttributeList = 1

message FacetAttributeReference {
    // The target attribute name that is associated with the facet reference. See <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_advanced.html#attributereferences">Attribute References</a> for more information.
    string TargetAttributeName = 1;
    // The target facet name that is associated with the facet reference. See <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_advanced.html#attributereferences">Attribute References</a> for more information.
    string TargetFacetName = 2;
}

enum FacetAttributeType {
    STRING = 0;
    BINARY = 1;
    BOOLEAN = 2;
    NUMBER = 3;
    DATETIME = 4;
}

message FacetAttributeUpdate {
    // The action to perform when updating the attribute.
    UpdateActionType Action = 1;
    // The attribute to update.
    FacetAttribute Attribute = 2;
}

repeated FacetAttributeUpdate FacetAttributeUpdateList = 1

message FacetInUseException {
    string Message = 1;
}



repeated string FacetNameList = 1

message FacetNotFoundException {
    string Message = 1;
}

message FacetValidationException {
    string Message = 1;
}

message GetDirectoryRequest {
}

message GetDirectoryResponse {
    // Metadata about the directory.
    Directory Directory = 1;
}

message GetFacetRequest {
    // The name of the facet to retrieve.
    string Name = 1;
}

message GetFacetResponse {
    // The <a>Facet</a> structure that is associated with the facet.
    Facet Facet = 1;
}

message GetObjectInformationRequest {
    // A reference to the object.
    ObjectReference ObjectReference = 1;
}

message GetObjectInformationResponse {
    // The <code>ObjectIdentifier</code> of the specified object.
    string ObjectIdentifier = 1;
    // The facets attached to the specified object.
    array SchemaFacets = 2;
}

message GetSchemaAsJsonRequest {
}

message GetSchemaAsJsonResponse {
    // The JSON representation of the schema document.
    string Document = 1;
    // The name of the retrieved schema.
    string Name = 2;
}

message GetTypedLinkFacetInformationRequest {
    // The unique name of the typed link facet.
    string Name = 1;
}

message GetTypedLinkFacetInformationResponse {
    // The order of identity attributes for the facet, from most significant to least significant. The ability to filter typed links considers the order that the attributes are defined on the typed link facet. When providing ranges to typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range. Filters are interpreted in the order of the attributes on the typed link facet, not the order in which they are supplied to any API calls. For more information about identity attributes, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
    array IdentityAttributeOrder = 1;
}

message IndexAttachment {
    // The indexed attribute values.
    array IndexedAttributes = 1;
    // The <code>ObjectIdentifier</code> of the object attached to the index.
    string ObjectIdentifier = 2;
}

repeated IndexAttachment IndexAttachmentList = 1

message IndexedAttributeMissingException {
    string Message = 1;
}

message InternalServiceException {
    string Message = 1;
}

message InvalidArnException {
    string Message = 1;
}

message InvalidAttachmentException {
    string Message = 1;
}

message InvalidFacetUpdateException {
    string Message = 1;
}

message InvalidNextTokenException {
    string Message = 1;
}

message InvalidRuleException {
    string Message = 1;
}

message InvalidSchemaDocException {
    string Message = 1;
}

message InvalidTaggingRequestException {
    string Message = 1;
}

message LimitExceededException {
    string Message = 1;
}

message LinkNameAlreadyInUseException {
    string Message = 1;
}

message LinkNameToObjectIdentifierMap {
    string key = 1;
    string value = 2;
}
repeated LinkNameToObjectIdentifierMap LinkNameToObjectIdentifierMap = 1

message ListAppliedSchemaArnsRequest {
    // The ARN of the directory you are listing.
    string DirectoryArn = 1;
    // The maximum number of results to retrieve.
    integer MaxResults = 2;
    // The pagination token.
    string NextToken = 3;
}

message ListAppliedSchemaArnsResponse {
    // The pagination token.
    string NextToken = 1;
    // The ARNs of schemas that are applied to the directory.
    array SchemaArns = 2;
}

message ListAttachedIndicesRequest {
    // The maximum number of results to retrieve.
    integer MaxResults = 1;
    // The pagination token.
    string NextToken = 2;
    // A reference to the object that has indices attached.
    ObjectReference TargetReference = 3;
}

message ListAttachedIndicesResponse {
    // The indices attached to the specified object.
    array IndexAttachments = 1;
    // The pagination token.
    string NextToken = 2;
}

message ListDevelopmentSchemaArnsRequest {
    // The maximum number of results to retrieve.
    integer MaxResults = 1;
    // The pagination token.
    string NextToken = 2;
}

message ListDevelopmentSchemaArnsResponse {
    // The pagination token.
    string NextToken = 1;
    // The ARNs of retrieved development schemas.
    array SchemaArns = 2;
}

message ListDirectoriesRequest {
    // The maximum number of results to retrieve.
    integer MaxResults = 1;
    // The pagination token.
    string NextToken = 2;
    // The state of the directories in the list. Can be either Enabled, Disabled, or Deleted.
    DirectoryState state = 3;
}

message ListDirectoriesResponse {
    // Lists all directories that are associated with your account in pagination fashion.
    array Directories = 1;
    // The pagination token.
    string NextToken = 2;
}

message ListFacetAttributesRequest {
    // The maximum number of results to retrieve.
    integer MaxResults = 1;
    // The name of the facet whose attributes will be retrieved.
    string Name = 2;
    // The pagination token.
    string NextToken = 3;
}

message ListFacetAttributesResponse {
    // The attributes attached to the facet.
    array Attributes = 1;
    // The pagination token.
    string NextToken = 2;
}

message ListFacetNamesRequest {
    // The maximum number of results to retrieve.
    integer MaxResults = 1;
    // The pagination token.
    string NextToken = 2;
}

message ListFacetNamesResponse {
    // The names of facets that exist within the schema.
    array FacetNames = 1;
    // The pagination token.
    string NextToken = 2;
}

message ListIncomingTypedLinksRequest {
    // The consistency level to execute the request at.
    ConsistencyLevel ConsistencyLevel = 1;
    // Provides range filters for multiple attributes. When providing ranges to typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range.
    array FilterAttributeRanges = 2;
    // Filters are interpreted in the order of the attributes on the typed link facet, not the order in which they are supplied to any API calls.
    TypedLinkSchemaAndFacetName FilterTypedLink = 3;
    // The maximum number of results to retrieve.
    integer MaxResults = 4;
    // The pagination token.
    string NextToken = 5;
    // Reference that identifies the object whose attributes will be listed.
    ObjectReference ObjectReference = 6;
}

message ListIncomingTypedLinksResponse {
    // Returns one or more typed link specifiers as output.
    array LinkSpecifiers = 1;
    // The pagination token.
    string NextToken = 2;
}

message ListIndexRequest {
    // The reference to the index to list.
    ObjectReference IndexReference = 1;
    // The maximum number of results to retrieve from the index.
    integer MaxResults = 2;
    // The pagination token.
    string NextToken = 3;
    // Specifies the ranges of indexed values that you want to query.
    array RangesOnIndexedValues = 4;
}

message ListIndexResponse {
    // The objects and indexed values attached to the index.
    array IndexAttachments = 1;
    // The pagination token.
    string NextToken = 2;
}

message ListObjectAttributesRequest {
    // Used to filter the list of object attributes that are associated with a certain facet.
    SchemaFacet FacetFilter = 1;
    // The maximum number of items to be retrieved in a single call. This is an approximate number.
    integer MaxResults = 2;
    // The pagination token.
    string NextToken = 3;
    // The reference that identifies the object whose attributes will be listed.
    ObjectReference ObjectReference = 4;
}

message ListObjectAttributesResponse {
    // Attributes map that is associated with the object. <code>AttributeArn</code> is the key, and attribute value is the value.
    array Attributes = 1;
    // The pagination token.
    string NextToken = 2;
}

message ListObjectChildrenRequest {
    // The maximum number of items to be retrieved in a single call. This is an approximate number.
    integer MaxResults = 1;
    // The pagination token.
    string NextToken = 2;
    // The reference that identifies the object for which child objects are being listed.
    ObjectReference ObjectReference = 3;
}

message ListObjectChildrenResponse {
    // Children structure, which is a map with key as the <code>LinkName</code> and <code>ObjectIdentifier</code> as the value.
    array Children = 1;
    // The pagination token.
    string NextToken = 2;
}

message ListObjectParentPathsRequest {
    // The maximum number of items to be retrieved in a single call. This is an approximate number.
    integer MaxResults = 1;
    // The pagination token.
    string NextToken = 2;
    // The reference that identifies the object whose parent paths are listed.
    ObjectReference ObjectReference = 3;
}

message ListObjectParentPathsResponse {
    // The pagination token.
    string NextToken = 1;
    // Returns the path to the <code>ObjectIdentifiers</code> that are associated with the directory.
    array PathToObjectIdentifiersList = 2;
}

message ListObjectParentsRequest {
    // The maximum number of items to be retrieved in a single call. This is an approximate number.
    integer MaxResults = 1;
    // The pagination token.
    string NextToken = 2;
    // The reference that identifies the object for which parent objects are being listed.
    ObjectReference ObjectReference = 3;
}

message ListObjectParentsResponse {
    // The pagination token.
    string NextToken = 1;
    // The parent structure, which is a map with key as the <code>ObjectIdentifier</code> and LinkName as the value.
    array Parents = 2;
}

message ListObjectPoliciesRequest {
    // The maximum number of items to be retrieved in a single call. This is an approximate number.
    integer MaxResults = 1;
    // The pagination token.
    string NextToken = 2;
    // Reference that identifies the object for which policies will be listed.
    ObjectReference ObjectReference = 3;
}

message ListObjectPoliciesResponse {
    // A list of policy <code>ObjectIdentifiers</code>, that are attached to the object.
    array AttachedPolicyIds = 1;
    // The pagination token.
    string NextToken = 2;
}

message ListOutgoingTypedLinksRequest {
    // The consistency level to execute the request at.
    ConsistencyLevel ConsistencyLevel = 1;
    // Provides range filters for multiple attributes. When providing ranges to typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range.
    array FilterAttributeRanges = 2;
    // Filters are interpreted in the order of the attributes defined on the typed link facet, not the order they are supplied to any API calls.
    TypedLinkSchemaAndFacetName FilterTypedLink = 3;
    // The maximum number of results to retrieve.
    integer MaxResults = 4;
    // The pagination token.
    string NextToken = 5;
    // A reference that identifies the object whose attributes will be listed.
    ObjectReference ObjectReference = 6;
}

message ListOutgoingTypedLinksResponse {
    // The pagination token.
    string NextToken = 1;
    // Returns a typed link specifier as output.
    array TypedLinkSpecifiers = 2;
}

message ListPolicyAttachmentsRequest {
    // The maximum number of items to be retrieved in a single call. This is an approximate number.
    integer MaxResults = 1;
    // The pagination token.
    string NextToken = 2;
    // The reference that identifies the policy object.
    ObjectReference PolicyReference = 3;
}

message ListPolicyAttachmentsResponse {
    // The pagination token.
    string NextToken = 1;
    // A list of <code>ObjectIdentifiers</code> to which the policy is attached.
    array ObjectIdentifiers = 2;
}

message ListPublishedSchemaArnsRequest {
    // The maximum number of results to retrieve.
    integer MaxResults = 1;
    // The pagination token.
    string NextToken = 2;
}

message ListPublishedSchemaArnsResponse {
    // The pagination token.
    string NextToken = 1;
    // The ARNs of published schemas.
    array SchemaArns = 2;
}

message ListTagsForResourceRequest {
    // The <code>MaxResults</code> parameter sets the maximum number of results returned in a single page. This is for future use and is not supported currently.
    integer MaxResults = 1;
    // The pagination token. This is for future use. Currently pagination is not supported for tagging.
    string NextToken = 2;
    // The Amazon Resource Name (ARN) of the resource. Tagging is only supported for directories.
    string ResourceArn = 3;
}

message ListTagsForResourceResponse {
    // The token to use to retrieve the next page of results. This value is null when there are no more results to return.
    string NextToken = 1;
    // A list of tag key value pairs that are associated with the response.
    array Tags = 2;
}

message ListTypedLinkFacetAttributesRequest {
    // The maximum number of results to retrieve.
    integer MaxResults = 1;
    // The unique name of the typed link facet.
    string Name = 2;
    // The pagination token.
    string NextToken = 3;
}

message ListTypedLinkFacetAttributesResponse {
    // An ordered set of attributes associate with the typed link.
    array Attributes = 1;
    // The pagination token.
    string NextToken = 2;
}

message ListTypedLinkFacetNamesRequest {
    // The maximum number of results to retrieve.
    integer MaxResults = 1;
    // The pagination token.
    string NextToken = 2;
}

message ListTypedLinkFacetNamesResponse {
    // The names of typed link facets that exist within the schema.
    array FacetNames = 1;
    // The pagination token.
    string NextToken = 2;
}

message LookupPolicyRequest {
    // The maximum number of items to be retrieved in a single call. This is an approximate number.
    integer MaxResults = 1;
    // The token to request the next page of results.
    string NextToken = 2;
    // Reference that identifies the object whose policies will be looked up.
    ObjectReference ObjectReference = 3;
}

message LookupPolicyResponse {
    // The pagination token.
    string NextToken = 1;
    // Provides list of path to policies. Policies contain <code>PolicyId</code>, <code>ObjectIdentifier</code>, and <code>PolicyType</code>. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_key_concepts.html#policies">Policies</a>.
    array PolicyToPathList = 2;
}

message NotIndexException {
    string Message = 1;
}

message NotNodeException {
    string Message = 1;
}

message NotPolicyException {
    string Message = 1;
}

message ObjectAlreadyDetachedException {
    string Message = 1;
}

message ObjectAttributeAction {
    // A type that can be either <code>Update</code> or <code>Delete</code>.
    UpdateActionType ObjectAttributeActionType = 1;
    // The value that you want to update to.
    TypedAttributeValue ObjectAttributeUpdateValue = 2;
}

message ObjectAttributeRange {
    // The key of the attribute that the attribute range covers.
    AttributeKey AttributeKey = 1;
    // The range of attribute values being selected.
    TypedAttributeValueRange Range = 2;
}

repeated ObjectAttributeRange ObjectAttributeRangeList = 1

message ObjectAttributeUpdate {
    // The action to perform as part of the attribute update.
    ObjectAttributeAction ObjectAttributeAction = 1;
    // The key of the attribute being updated.
    AttributeKey ObjectAttributeKey = 2;
}

repeated ObjectAttributeUpdate ObjectAttributeUpdateList = 1



repeated string ObjectIdentifierList = 1

message ObjectIdentifierToLinkNameMap {
    string key = 1;
    string value = 2;
}
repeated ObjectIdentifierToLinkNameMap ObjectIdentifierToLinkNameMap = 1

message ObjectNotDetachedException {
    string Message = 1;
}

message ObjectReference {
    // <p>A path selector supports easy selection of an object by the parent/child links leading to it from the directory root. Use the link names from each parent/child link to construct the path. Path selectors start with a slash (/) and link names are separated by slashes. For more information about paths, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#accessingobjects">Accessing Objects</a>. You can identify an object in one of the following ways:</p> <ul> <li> <p> <i>$ObjectIdentifier</i> - An object identifier is an opaque string provided by Amazon Cloud Directory. When creating objects, the system will provide you with the identifier of the created object. An object’s identifier is immutable and no two objects will ever share the same object identifier</p> </li> <li> <p> <i>/some/path</i> - Identifies the object based on path</p> </li> <li> <p> <i>#SomeBatchReference</i> - Identifies the object in a batch call</p> </li> </ul>
    string Selector = 1;
}

enum ObjectType {
    NODE = 0;
    LEAF_NODE = 1;
    POLICY = 2;
    INDEX = 3;
}

message PathToObjectIdentifiers {
    // Lists <code>ObjectIdentifiers</code> starting from directory root to the object in the request.
    array ObjectIdentifiers = 1;
    // The path that is used to identify the object starting from directory root.
    string Path = 2;
}

repeated PathToObjectIdentifiers PathToObjectIdentifiersList = 1

message PolicyAttachment {
    // The <code>ObjectIdentifier</code> that is associated with <code>PolicyAttachment</code>.
    string ObjectIdentifier = 1;
    // The ID of <code>PolicyAttachment</code>.
    string PolicyId = 2;
    // The type of policy that can be associated with <code>PolicyAttachment</code>.
    string PolicyType = 3;
}

repeated PolicyAttachment PolicyAttachmentList = 1

message PolicyToPath {
    // The path that is referenced from the root.
    string Path = 1;
    // List of policy objects.
    array Policies = 2;
}

repeated PolicyToPath PolicyToPathList = 1



message PublishSchemaRequest {
    // The new name under which the schema will be published. If this is not provided, the development schema is considered.
    string Name = 1;
    // The version under which the schema will be published.
    string Version = 2;
}

message PublishSchemaResponse {
    // The ARN that is associated with the published schema. For more information, see <a>arns</a>.
    string PublishedSchemaArn = 1;
}

message PutSchemaFromJsonRequest {
    // The replacement JSON schema.
    string Document = 1;
}

message PutSchemaFromJsonResponse {
    // The ARN of the schema to update.
    string Arn = 1;
}

enum RangeMode {
    FIRST = 0;
    LAST = 1;
    LAST_BEFORE_MISSING_VALUES = 2;
    INCLUSIVE = 3;
    EXCLUSIVE = 4;
}

message RemoveFacetFromObjectRequest {
    // A reference to the object to remove the facet from.
    ObjectReference ObjectReference = 1;
    // The facet to remove.
    SchemaFacet SchemaFacet = 2;
}

message RemoveFacetFromObjectResponse {
}

enum RequiredAttributeBehavior {
    REQUIRED_ALWAYS = 0;
    NOT_REQUIRED = 1;
}

message ResourceNotFoundException {
    string Message = 1;
}

message RetryableConflictException {
    string Message = 1;
}

message Rule {
    // The minimum and maximum parameters that are associated with the rule.
    array Parameters = 1;
    // The type of attribute validation rule.
    RuleType Type = 2;
}

message RuleMap {
    string key = 1;
    Rule value = 2;
}
repeated RuleMap RuleMap = 1



message RuleParameterMap {
    string key = 1;
    string value = 2;
}
repeated RuleParameterMap RuleParameterMap = 1



enum RuleType {
    BINARY_LENGTH = 0;
    NUMBER_COMPARISON = 1;
    STRING_FROM_SET = 2;
    STRING_LENGTH = 3;
}

message SchemaAlreadyExistsException {
    string Message = 1;
}

message SchemaAlreadyPublishedException {
    string Message = 1;
}

message SchemaFacet {
    // The name of the facet.
    string FacetName = 1;
    // The ARN of the schema that contains the facet.
    string SchemaArn = 2;
}

repeated SchemaFacet SchemaFacetList = 1







message StillContainsLinksException {
    string Message = 1;
}

message Tag {
    // The key that is associated with the tag.
    string Key = 1;
    // The value that is associated with the tag.
    string Value = 2;
}



repeated string TagKeyList = 1

repeated Tag TagList = 1

message TagResourceRequest {
    // The Amazon Resource Name (ARN) of the resource. Tagging is only supported for directories.
    string ResourceArn = 1;
    // A list of tag key-value pairs.
    array Tags = 2;
}

message TagResourceResponse {
}

message TypedAttributeValue {
    // A binary data value.
    string BinaryValue = 1;
    // A Boolean data value.
    boolean BooleanValue = 2;
    // A date and time value.
    string DatetimeValue = 3;
    // A number data value.
    string NumberValue = 4;
    // A string data value.
    string StringValue = 5;
}

message TypedAttributeValueRange {
    // The inclusive or exclusive range end.
    RangeMode EndMode = 1;
    // The attribute value to terminate the range at.
    TypedAttributeValue EndValue = 2;
    // The inclusive or exclusive range start.
    RangeMode StartMode = 3;
    // The value to start the range at.
    TypedAttributeValue StartValue = 4;
}

message TypedLinkAttributeDefinition {
    // The default value of the attribute (if configured).
    TypedAttributeValue DefaultValue = 1;
    // Whether the attribute is mutable or not.
    boolean IsImmutable = 2;
    // The unique name of the typed link attribute.
    string Name = 3;
    // The required behavior of the <code>TypedLinkAttributeDefinition</code>.
    RequiredAttributeBehavior RequiredBehavior = 4;
    // Validation rules that are attached to the attribute definition.
    array Rules = 5;
    // The type of the attribute.
    FacetAttributeType Type = 6;
}

repeated TypedLinkAttributeDefinition TypedLinkAttributeDefinitionList = 1

message TypedLinkAttributeRange {
    // The unique name of the typed link attribute.
    string AttributeName = 1;
    // The range of attribute values that are being selected.
    TypedAttributeValueRange Range = 2;
}

repeated TypedLinkAttributeRange TypedLinkAttributeRangeList = 1

message TypedLinkFacet {
    // A set of key-value pairs associated with the typed link. Typed link attributes are used when you have data values that are related to the link itself, and not to one of the two objects being linked. Identity attributes also serve to distinguish the link from others of the same type between the same objects.
    array Attributes = 1;
    // The set of attributes that distinguish links made from this facet from each other, in the order of significance. Listing typed links can filter on the values of these attributes. See <a>ListOutgoingTypedLinks</a> and <a>ListIncomingTypedLinks</a> for details.
    array IdentityAttributeOrder = 2;
    // The unique name of the typed link facet.
    string Name = 3;
}

message TypedLinkFacetAttributeUpdate {
    // The action to perform when updating the attribute.
    UpdateActionType Action = 1;
    // The attribute to update.
    TypedLinkAttributeDefinition Attribute = 2;
}

repeated TypedLinkFacetAttributeUpdate TypedLinkFacetAttributeUpdateList = 1



repeated string TypedLinkNameList = 1

message TypedLinkSchemaAndFacetName {
    // The Amazon Resource Name (ARN) that is associated with the schema. For more information, see <a>arns</a>.
    string SchemaArn = 1;
    // The unique name of the typed link facet.
    string TypedLinkName = 2;
}

message TypedLinkSpecifier {
    // Identifies the attribute value to update.
    array IdentityAttributeValues = 1;
    // Identifies the source object that the typed link will attach to.
    ObjectReference SourceObjectReference = 2;
    // Identifies the target object that the typed link will attach to.
    ObjectReference TargetObjectReference = 3;
    // Identifies the typed link facet that is associated with the typed link.
    TypedLinkSchemaAndFacetName TypedLinkFacet = 4;
}

repeated TypedLinkSpecifier TypedLinkSpecifierList = 1

message UnsupportedIndexTypeException {
    string Message = 1;
}

message UntagResourceRequest {
    // The Amazon Resource Name (ARN) of the resource. Tagging is only supported for directories.
    string ResourceArn = 1;
    // Keys of the tag that need to be removed from the resource.
    array TagKeys = 2;
}

message UntagResourceResponse {
}

enum UpdateActionType {
    CREATE_OR_UPDATE = 0;
    DELETE = 1;
}

message UpdateFacetRequest {
    // List of attributes that need to be updated in a given schema <a>Facet</a>. Each attribute is followed by <code>AttributeAction</code>, which specifies the type of update operation to perform.
    array AttributeUpdates = 1;
    // The name of the facet.
    string Name = 2;
    // The object type that is associated with the facet. See <a>CreateFacetRequest$ObjectType</a> for more details.
    ObjectType ObjectType = 3;
}

message UpdateFacetResponse {
}

message UpdateObjectAttributesRequest {
    // The attributes update structure.
    array AttributeUpdates = 1;
    // The reference that identifies the object.
    ObjectReference ObjectReference = 2;
}

message UpdateObjectAttributesResponse {
    // The <code>ObjectIdentifier</code> of the updated object.
    string ObjectIdentifier = 1;
}

message UpdateSchemaRequest {
    // The name of the schema.
    string Name = 1;
}

message UpdateSchemaResponse {
    // The ARN that is associated with the updated schema. For more information, see <a>arns</a>.
    string SchemaArn = 1;
}

message UpdateTypedLinkFacetRequest {
    // Attributes update structure.
    array AttributeUpdates = 1;
    // The order of identity attributes for the facet, from most significant to least significant. The ability to filter typed links considers the order that the attributes are defined on the typed link facet. When providing ranges to a typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range. Filters are interpreted in the order of the attributes on the typed link facet, not the order in which they are supplied to any API calls. For more information about identity attributes, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
    array IdentityAttributeOrder = 2;
    // The unique name of the typed link facet.
    string Name = 3;
}

message UpdateTypedLinkFacetResponse {
}

message ValidationException {
    string Message = 1;
}

service AmazonCloudDirectoryService {
    // Performs all the read operations in a batch.
    rpc PostAmazonclouddirectory20170111Batchread(PostAmazonclouddirectory20170111BatchreadRequest) returns (BatchReadResponse) {
      option (google.api.http) = {
        post: "//amazonclouddirectory/2017-01-11/batchread"
        body: "body"
      };
    }
    // Performs all the write operations in a batch. Either all the operations succeed or none. Batch writes supports only object-related operations.
    rpc PutAmazonclouddirectory20170111Batchwrite(PutAmazonclouddirectory20170111BatchwriteRequest) returns (BatchWriteResponse) {
      option (google.api.http) = {
        put: "//amazonclouddirectory/2017-01-11/batchwrite"
        body: "body"
      };
    }
    // Deletes a directory. Only disabled directories can be deleted. A deleted directory cannot be undone. Exercise extreme caution when deleting directories.
    rpc PutAmazonclouddirectory20170111Directory(PutAmazonclouddirectory20170111DirectoryRequest) returns (DeleteDirectoryResponse) {
      option (google.api.http) = {
        put: "//amazonclouddirectory/2017-01-11/directory"
        body: "body"
      };
    }
    // Creates a <a>Directory</a> by copying the published schema into the directory. A directory cannot be created without a schema.
    rpc PutAmazonclouddirectory20170111DirectoryCreate(PutAmazonclouddirectory20170111DirectoryCreateRequest) returns (CreateDirectoryResponse) {
      option (google.api.http) = {
        put: "//amazonclouddirectory/2017-01-11/directory/create"
        body: "body"
      };
    }
    // Disables the specified directory. Disabled directories cannot be read or written to. Only enabled directories can be disabled. Disabled directories may be reenabled.
    rpc PutAmazonclouddirectory20170111DirectoryDisable(PutAmazonclouddirectory20170111DirectoryDisableRequest) returns (DisableDirectoryResponse) {
      option (google.api.http) = {
        put: "//amazonclouddirectory/2017-01-11/directory/disable"
        body: "body"
      };
    }
    // Enables the specified directory. Only disabled directories can be enabled. Once enabled, the directory can then be read and written to.
    rpc PutAmazonclouddirectory20170111DirectoryEnable(PutAmazonclouddirectory20170111DirectoryEnableRequest) returns (EnableDirectoryResponse) {
      option (google.api.http) = {
        put: "//amazonclouddirectory/2017-01-11/directory/enable"
        body: "body"
      };
    }
    // Retrieves metadata about a directory.
    rpc PostAmazonclouddirectory20170111DirectoryGet(PostAmazonclouddirectory20170111DirectoryGetRequest) returns (GetDirectoryResponse) {
      option (google.api.http) = {
        post: "//amazonclouddirectory/2017-01-11/directory/get"
        body: "body"
      };
    }
    // Lists directories created within an account.
    rpc PostAmazonclouddirectory20170111DirectoryList(PostAmazonclouddirectory20170111DirectoryListRequest) returns (ListDirectoriesResponse) {
      option (google.api.http) = {
        post: "//amazonclouddirectory/2017-01-11/directory/list"
        body: "body"
      };
    }
    // <p>Does the following:</p> <ol> <li> <p>Adds new <code>Attributes</code>, <code>Rules</code>, or <code>ObjectTypes</code>.</p> </li> <li> <p>Updates existing <code>Attributes</code>, <code>Rules</code>, or <code>ObjectTypes</code>.</p> </li> <li> <p>Deletes existing <code>Attributes</code>, <code>Rules</code>, or <code>ObjectTypes</code>.</p> </li> </ol>
    rpc PutAmazonclouddirectory20170111Facet(PutAmazonclouddirectory20170111FacetRequest) returns (UpdateFacetResponse) {
      option (google.api.http) = {
        put: "//amazonclouddirectory/2017-01-11/facet"
        body: "body"
      };
    }
    // Retrieves attributes attached to the facet.
    rpc PostAmazonclouddirectory20170111FacetAttributes(PostAmazonclouddirectory20170111FacetAttributesRequest) returns (ListFacetAttributesResponse) {
      option (google.api.http) = {
        post: "//amazonclouddirectory/2017-01-11/facet/attributes"
        body: "body"
      };
    }
    // Creates a new <a>Facet</a> in a schema. Facet creation is allowed only in development or applied schemas.
    rpc PutAmazonclouddirectory20170111FacetCreate(PutAmazonclouddirectory20170111FacetCreateRequest) returns (CreateFacetResponse) {
      option (google.api.http) = {
        put: "//amazonclouddirectory/2017-01-11/facet/create"
        body: "body"
      };
    }
    // Deletes a given <a>Facet</a>. All attributes and <a>Rule</a>s that are associated with the facet will be deleted. Only development schema facets are allowed deletion.
    rpc PutAmazonclouddirectory20170111FacetDelete(PutAmazonclouddirectory20170111FacetDeleteRequest) returns (DeleteFacetResponse) {
      option (google.api.http) = {
        put: "//amazonclouddirectory/2017-01-11/facet/delete"
        body: "body"
      };
    }
    // Retrieves the names of facets that exist in a schema.
    rpc PostAmazonclouddirectory20170111FacetList(PostAmazonclouddirectory20170111FacetListRequest) returns (ListFacetNamesResponse) {
      option (google.api.http) = {
        post: "//amazonclouddirectory/2017-01-11/facet/list"
        body: "body"
      };
    }
    // Creates an index object. See <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_indexing.html">Indexing</a> for more information.
    rpc PutAmazonclouddirectory20170111Index(PutAmazonclouddirectory20170111IndexRequest) returns (CreateIndexResponse) {
      option (google.api.http) = {
        put: "//amazonclouddirectory/2017-01-11/index"
        body: "body"
      };
    }
    // Attaches the specified object to the specified index.
    rpc PutAmazonclouddirectory20170111IndexAttach(PutAmazonclouddirectory20170111IndexAttachRequest) returns (AttachToIndexResponse) {
      option (google.api.http) = {
        put: "//amazonclouddirectory/2017-01-11/index/attach"
        body: "body"
      };
    }
    // Detaches the specified object from the specified index.
    rpc PutAmazonclouddirectory20170111IndexDetach(PutAmazonclouddirectory20170111IndexDetachRequest) returns (DetachFromIndexResponse) {
      option (google.api.http) = {
        put: "//amazonclouddirectory/2017-01-11/index/detach"
        body: "body"
      };
    }
    // Lists objects attached to the specified index.
    rpc PostAmazonclouddirectory20170111IndexTargets(PostAmazonclouddirectory20170111IndexTargetsRequest) returns (ListIndexResponse) {
      option (google.api.http) = {
        post: "//amazonclouddirectory/2017-01-11/index/targets"
        body: "body"
      };
    }
    // Creates an object in a <a>Directory</a>. Additionally attaches the object to a parent, if a parent reference and <code>LinkName</code> is specified. An object is simply a collection of <a>Facet</a> attributes. You can also use this API call to create a policy object, if the facet from which you create the object is a policy facet.
    rpc PutAmazonclouddirectory20170111Object(PutAmazonclouddirectory20170111ObjectRequest) returns (CreateObjectResponse) {
      option (google.api.http) = {
        put: "//amazonclouddirectory/2017-01-11/object"
        body: "body"
      };
    }
    // <p>Attaches an existing object to another object. An object can be accessed in two ways:</p> <ol> <li> <p>Using the path</p> </li> <li> <p>Using <code>ObjectIdentifier</code> </p> </li> </ol>
    rpc PutAmazonclouddirectory20170111ObjectAttach(PutAmazonclouddirectory20170111ObjectAttachRequest) returns (AttachObjectResponse) {
      option (google.api.http) = {
        put: "//amazonclouddirectory/2017-01-11/object/attach"
        body: "body"
      };
    }
    // Lists all attributes that are associated with an object.
    rpc PostAmazonclouddirectory20170111ObjectAttributes(PostAmazonclouddirectory20170111ObjectAttributesRequest) returns (ListObjectAttributesResponse) {
      option (google.api.http) = {
        post: "//amazonclouddirectory/2017-01-11/object/attributes"
        body: "body"
      };
    }
    // Returns a paginated list of child objects that are associated with a given object.
    rpc PostAmazonclouddirectory20170111ObjectChildren(PostAmazonclouddirectory20170111ObjectChildrenRequest) returns (ListObjectChildrenResponse) {
      option (google.api.http) = {
        post: "//amazonclouddirectory/2017-01-11/object/children"
        body: "body"
      };
    }
    // Deletes an object and its associated attributes. Only objects with no children and no parents can be deleted.
    rpc PutAmazonclouddirectory20170111ObjectDelete(PutAmazonclouddirectory20170111ObjectDeleteRequest) returns (DeleteObjectResponse) {
      option (google.api.http) = {
        put: "//amazonclouddirectory/2017-01-11/object/delete"
        body: "body"
      };
    }
    // Detaches a given object from the parent object. The object that is to be detached from the parent is specified by the link name.
    rpc PutAmazonclouddirectory20170111ObjectDetach(PutAmazonclouddirectory20170111ObjectDetachRequest) returns (DetachObjectResponse) {
      option (google.api.http) = {
        put: "//amazonclouddirectory/2017-01-11/object/detach"
        body: "body"
      };
    }
    // Adds a new <a>Facet</a> to an object.
    rpc PutAmazonclouddirectory20170111ObjectFacets(PutAmazonclouddirectory20170111ObjectFacetsRequest) returns (AddFacetToObjectResponse) {
      option (google.api.http) = {
        put: "//amazonclouddirectory/2017-01-11/object/facets"
        body: "body"
      };
    }
    // Removes the specified facet from the specified object.
    rpc PutAmazonclouddirectory20170111ObjectFacetsDelete(PutAmazonclouddirectory20170111ObjectFacetsDeleteRequest) returns (RemoveFacetFromObjectResponse) {
      option (google.api.http) = {
        put: "//amazonclouddirectory/2017-01-11/object/facets/delete"
        body: "body"
      };
    }
    // Lists indices attached to an object.
    rpc PostAmazonclouddirectory20170111ObjectIndices(PostAmazonclouddirectory20170111ObjectIndicesRequest) returns (ListAttachedIndicesResponse) {
      option (google.api.http) = {
        post: "//amazonclouddirectory/2017-01-11/object/indices"
        body: "body"
      };
    }
    // Retrieves metadata about an object.
    rpc PostAmazonclouddirectory20170111ObjectInformation(PostAmazonclouddirectory20170111ObjectInformationRequest) returns (GetObjectInformationResponse) {
      option (google.api.http) = {
        post: "//amazonclouddirectory/2017-01-11/object/information"
        body: "body"
      };
    }
    // Lists parent objects that are associated with a given object in pagination fashion.
    rpc PostAmazonclouddirectory20170111ObjectParent(PostAmazonclouddirectory20170111ObjectParentRequest) returns (ListObjectParentsResponse) {
      option (google.api.http) = {
        post: "//amazonclouddirectory/2017-01-11/object/parent"
        body: "body"
      };
    }
    // <p>Retrieves all available parent paths for any object type such as node, leaf node, policy node, and index node objects. For more information about objects, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_key_concepts.html#dirstructure">Directory Structure</a>.</p> <p>Use this API to evaluate all parents for an object. The call returns all objects from the root of the directory up to the requested object. The API returns the number of paths based on user-defined <code>MaxResults</code>, in case there are multiple paths to the parent. The order of the paths and nodes returned is consistent among multiple API calls unless the objects are deleted or moved. Paths not leading to the directory root are ignored from the target object.</p>
    rpc PostAmazonclouddirectory20170111ObjectParentpaths(PostAmazonclouddirectory20170111ObjectParentpathsRequest) returns (ListObjectParentPathsResponse) {
      option (google.api.http) = {
        post: "//amazonclouddirectory/2017-01-11/object/parentpaths"
        body: "body"
      };
    }
    // Returns policies attached to an object in pagination fashion.
    rpc PostAmazonclouddirectory20170111ObjectPolicy(PostAmazonclouddirectory20170111ObjectPolicyRequest) returns (ListObjectPoliciesResponse) {
      option (google.api.http) = {
        post: "//amazonclouddirectory/2017-01-11/object/policy"
        body: "body"
      };
    }
    // Updates a given object's attributes.
    rpc PutAmazonclouddirectory20170111ObjectUpdate(PutAmazonclouddirectory20170111ObjectUpdateRequest) returns (UpdateObjectAttributesResponse) {
      option (google.api.http) = {
        put: "//amazonclouddirectory/2017-01-11/object/update"
        body: "body"
      };
    }
    // Attaches a policy object to a regular object. An object can have a limited number of attached policies.
    rpc PutAmazonclouddirectory20170111PolicyAttach(PutAmazonclouddirectory20170111PolicyAttachRequest) returns (AttachPolicyResponse) {
      option (google.api.http) = {
        put: "//amazonclouddirectory/2017-01-11/policy/attach"
        body: "body"
      };
    }
    // Returns all of the <code>ObjectIdentifiers</code> to which a given policy is attached.
    rpc PostAmazonclouddirectory20170111PolicyAttachment(PostAmazonclouddirectory20170111PolicyAttachmentRequest) returns (ListPolicyAttachmentsResponse) {
      option (google.api.http) = {
        post: "//amazonclouddirectory/2017-01-11/policy/attachment"
        body: "body"
      };
    }
    // Detaches a policy from an object.
    rpc PutAmazonclouddirectory20170111PolicyDetach(PutAmazonclouddirectory20170111PolicyDetachRequest) returns (DetachPolicyResponse) {
      option (google.api.http) = {
        put: "//amazonclouddirectory/2017-01-11/policy/detach"
        body: "body"
      };
    }
    // Lists all policies from the root of the <a>Directory</a> to the object specified. If there are no policies present, an empty list is returned. If policies are present, and if some objects don't have the policies attached, it returns the <code>ObjectIdentifier</code> for such objects. If policies are present, it returns <code>ObjectIdentifier</code>, <code>policyId</code>, and <code>policyType</code>. Paths that don't lead to the root from the target object are ignored. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_key_concepts.html#policies">Policies</a>.
    rpc PostAmazonclouddirectory20170111PolicyLookup(PostAmazonclouddirectory20170111PolicyLookupRequest) returns (LookupPolicyResponse) {
      option (google.api.http) = {
        post: "//amazonclouddirectory/2017-01-11/policy/lookup"
        body: "body"
      };
    }
    // Deletes a given schema. Schemas in a development and published state can only be deleted.
    rpc PutAmazonclouddirectory20170111Schema(PutAmazonclouddirectory20170111SchemaRequest) returns (DeleteSchemaResponse) {
      option (google.api.http) = {
        put: "//amazonclouddirectory/2017-01-11/schema"
        body: "body"
      };
    }
    // Lists schemas applied to a directory.
    rpc PostAmazonclouddirectory20170111SchemaApplied(PostAmazonclouddirectory20170111SchemaAppliedRequest) returns (ListAppliedSchemaArnsResponse) {
      option (google.api.http) = {
        post: "//amazonclouddirectory/2017-01-11/schema/applied"
        body: "body"
      };
    }
    // Copies the input published schema into the <a>Directory</a> with the same name and version as that of the published schema .
    rpc PutAmazonclouddirectory20170111SchemaApply(PutAmazonclouddirectory20170111SchemaApplyRequest) returns (ApplySchemaResponse) {
      option (google.api.http) = {
        put: "//amazonclouddirectory/2017-01-11/schema/apply"
        body: "body"
      };
    }
    // <p>Creates a new schema in a development state. A schema can exist in three phases:</p> <ul> <li> <p> <i>Development:</i> This is a mutable phase of the schema. All new schemas are in the development phase. Once the schema is finalized, it can be published.</p> </li> <li> <p> <i>Published:</i> Published schemas are immutable and have a version associated with them.</p> </li> <li> <p> <i>Applied:</i> Applied schemas are mutable in a way that allows you to add new schema facets. You can also add new, nonrequired attributes to existing schema facets. You can apply only published schemas to directories. </p> </li> </ul>
    rpc PutAmazonclouddirectory20170111SchemaCreate(PutAmazonclouddirectory20170111SchemaCreateRequest) returns (CreateSchemaResponse) {
      option (google.api.http) = {
        put: "//amazonclouddirectory/2017-01-11/schema/create"
        body: "body"
      };
    }
    // Retrieves each Amazon Resource Name (ARN) of schemas in the development state.
    rpc PostAmazonclouddirectory20170111SchemaDevelopment(PostAmazonclouddirectory20170111SchemaDevelopmentRequest) returns (ListDevelopmentSchemaArnsResponse) {
      option (google.api.http) = {
        post: "//amazonclouddirectory/2017-01-11/schema/development"
        body: "body"
      };
    }
    // Allows a schema to be updated using JSON upload. Only available for development schemas. See <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_schemas.html#jsonformat">JSON Schema Format</a> for more information.
    rpc PutAmazonclouddirectory20170111SchemaJson(PutAmazonclouddirectory20170111SchemaJsonRequest) returns (PutSchemaFromJsonResponse) {
      option (google.api.http) = {
        put: "//amazonclouddirectory/2017-01-11/schema/json"
        body: "body"
      };
    }
    // Publishes a development schema with a version. If description and attributes are specified, <code>PublishSchema</code> overrides the development schema description and attributes. If not, the development schema description and attributes are used.
    rpc PutAmazonclouddirectory20170111SchemaPublish(PutAmazonclouddirectory20170111SchemaPublishRequest) returns (PublishSchemaResponse) {
      option (google.api.http) = {
        put: "//amazonclouddirectory/2017-01-11/schema/publish"
        body: "body"
      };
    }
    // Retrieves each published schema Amazon Resource Name (ARN).
    rpc PostAmazonclouddirectory20170111SchemaPublished(PostAmazonclouddirectory20170111SchemaPublishedRequest) returns (ListPublishedSchemaArnsResponse) {
      option (google.api.http) = {
        post: "//amazonclouddirectory/2017-01-11/schema/published"
        body: "body"
      };
    }
    // Updates the schema name with a new name. Only development schema names can be updated.
    rpc PutAmazonclouddirectory20170111SchemaUpdate(PutAmazonclouddirectory20170111SchemaUpdateRequest) returns (UpdateSchemaResponse) {
      option (google.api.http) = {
        put: "//amazonclouddirectory/2017-01-11/schema/update"
        body: "body"
      };
    }
    // Returns tags for a resource. Tagging is currently supported only for directories with a limit of 50 tags per directory. All 50 tags are returned for a given directory with this API call.
    rpc PostAmazonclouddirectory20170111Tags(PostAmazonclouddirectory20170111TagsRequest) returns (ListTagsForResourceResponse) {
      option (google.api.http) = {
        post: "//amazonclouddirectory/2017-01-11/tags"
        body: "body"
      };
    }
    // An API operation for adding tags to a resource.
    rpc PutAmazonclouddirectory20170111TagsAdd(PutAmazonclouddirectory20170111TagsAddRequest) returns (TagResourceResponse) {
      option (google.api.http) = {
        put: "//amazonclouddirectory/2017-01-11/tags/add"
        body: "body"
      };
    }
    // An API operation for removing tags from a resource.
    rpc PutAmazonclouddirectory20170111TagsRemove(PutAmazonclouddirectory20170111TagsRemoveRequest) returns (UntagResourceResponse) {
      option (google.api.http) = {
        put: "//amazonclouddirectory/2017-01-11/tags/remove"
        body: "body"
      };
    }
    // Attaches a typed link to a specified source and target object. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
    rpc PutAmazonclouddirectory20170111TypedlinkAttach(PutAmazonclouddirectory20170111TypedlinkAttachRequest) returns (AttachTypedLinkResponse) {
      option (google.api.http) = {
        put: "//amazonclouddirectory/2017-01-11/typedlink/attach"
        body: "body"
      };
    }
    // Detaches a typed link from a specified source and target object. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
    rpc PutAmazonclouddirectory20170111TypedlinkDetach(PutAmazonclouddirectory20170111TypedlinkDetachRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "//amazonclouddirectory/2017-01-11/typedlink/detach"
        body: "body"
      };
    }
    // Updates a <a>TypedLinkFacet</a>. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
    rpc PutAmazonclouddirectory20170111TypedlinkFacet(PutAmazonclouddirectory20170111TypedlinkFacetRequest) returns (UpdateTypedLinkFacetResponse) {
      option (google.api.http) = {
        put: "//amazonclouddirectory/2017-01-11/typedlink/facet"
        body: "body"
      };
    }
    // Returns a paginated list of all attribute definitions for a particular <a>TypedLinkFacet</a>. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
    rpc PostAmazonclouddirectory20170111TypedlinkFacetAttributes(PostAmazonclouddirectory20170111TypedlinkFacetAttributesRequest) returns (ListTypedLinkFacetAttributesResponse) {
      option (google.api.http) = {
        post: "//amazonclouddirectory/2017-01-11/typedlink/facet/attributes"
        body: "body"
      };
    }
    // Creates a <a>TypedLinkFacet</a>. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
    rpc PutAmazonclouddirectory20170111TypedlinkFacetCreate(PutAmazonclouddirectory20170111TypedlinkFacetCreateRequest) returns (CreateTypedLinkFacetResponse) {
      option (google.api.http) = {
        put: "//amazonclouddirectory/2017-01-11/typedlink/facet/create"
        body: "body"
      };
    }
    // Deletes a <a>TypedLinkFacet</a>. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
    rpc PutAmazonclouddirectory20170111TypedlinkFacetDelete(PutAmazonclouddirectory20170111TypedlinkFacetDeleteRequest) returns (DeleteTypedLinkFacetResponse) {
      option (google.api.http) = {
        put: "//amazonclouddirectory/2017-01-11/typedlink/facet/delete"
        body: "body"
      };
    }
    // Returns the identity attribute order for a specific <a>TypedLinkFacet</a>. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
    rpc PostAmazonclouddirectory20170111TypedlinkFacetGet(PostAmazonclouddirectory20170111TypedlinkFacetGetRequest) returns (GetTypedLinkFacetInformationResponse) {
      option (google.api.http) = {
        post: "//amazonclouddirectory/2017-01-11/typedlink/facet/get"
        body: "body"
      };
    }
    // Returns a paginated list of <code>TypedLink</code> facet names for a particular schema. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
    rpc PostAmazonclouddirectory20170111TypedlinkFacetList(PostAmazonclouddirectory20170111TypedlinkFacetListRequest) returns (ListTypedLinkFacetNamesResponse) {
      option (google.api.http) = {
        post: "//amazonclouddirectory/2017-01-11/typedlink/facet/list"
        body: "body"
      };
    }
    // Returns a paginated list of all the incoming <a>TypedLinkSpecifier</a> information for an object. It also supports filtering by typed link facet and identity attributes. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
    rpc PostAmazonclouddirectory20170111TypedlinkIncoming(PostAmazonclouddirectory20170111TypedlinkIncomingRequest) returns (ListIncomingTypedLinksResponse) {
      option (google.api.http) = {
        post: "//amazonclouddirectory/2017-01-11/typedlink/incoming"
        body: "body"
      };
    }
    // Returns a paginated list of all the outgoing <a>TypedLinkSpecifier</a> information for an object. It also supports filtering by typed link facet and identity attributes. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
    rpc PostAmazonclouddirectory20170111TypedlinkOutgoing(PostAmazonclouddirectory20170111TypedlinkOutgoingRequest) returns (ListOutgoingTypedLinksResponse) {
      option (google.api.http) = {
        post: "//amazonclouddirectory/2017-01-11/typedlink/outgoing"
        body: "body"
      };
    }
}

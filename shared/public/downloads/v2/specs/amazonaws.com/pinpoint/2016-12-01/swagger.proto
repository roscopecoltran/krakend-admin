syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package amazonpinpoint;

message GetV1AppsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetAppsRequest body = 10;
}

message GetV1AppsApplicationIdRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    string application_id = 10;
    GetAppRequest body = 11;
}

message GetV1AppsApplicationIdCampaignsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    string application_id = 10;
    GetCampaignsRequest body = 11;
}

message PutV1AppsApplicationIdCampaignsCampaignIdRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    string application_id = 10;
    UpdateCampaignRequest body = 11;
    string campaign_id = 12;
}

message GetV1AppsApplicationIdCampaignsCampaignIdActivitiesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    string application_id = 10;
    GetCampaignActivitiesRequest body = 11;
    string campaign_id = 12;
}

message GetV1AppsApplicationIdCampaignsCampaignIdVersionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    string application_id = 10;
    GetCampaignVersionsRequest body = 11;
    string campaign_id = 12;
}

message GetV1AppsApplicationIdCampaignsCampaignIdVersionsVersionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    string application_id = 10;
    GetCampaignVersionRequest body = 11;
    string campaign_id = 12;
    string version = 13;
}

message PutV1AppsApplicationIdChannelsAdmRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    string application_id = 10;
    UpdateAdmChannelRequest body = 11;
}

message PutV1AppsApplicationIdChannelsApnsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    string application_id = 10;
    UpdateApnsChannelRequest body = 11;
}

message PutV1AppsApplicationIdChannelsApns_sandboxRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    string application_id = 10;
    UpdateApnsSandboxChannelRequest body = 11;
}

message PutV1AppsApplicationIdChannelsBaiduRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    string application_id = 10;
    UpdateBaiduChannelRequest body = 11;
}

message PutV1AppsApplicationIdChannelsEmailRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    string application_id = 10;
    UpdateEmailChannelRequest body = 11;
}

message PutV1AppsApplicationIdChannelsGcmRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    string application_id = 10;
    UpdateGcmChannelRequest body = 11;
}

message PutV1AppsApplicationIdChannelsSmsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    string application_id = 10;
    UpdateSmsChannelRequest body = 11;
}

message PutV1AppsApplicationIdEndpointsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    string application_id = 10;
    UpdateEndpointsBatchRequest body = 11;
}

message PutV1AppsApplicationIdEndpointsEndpointIdRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    string application_id = 10;
    UpdateEndpointRequest body = 11;
    string endpoint_id = 12;
}

message PostV1AppsApplicationIdEventstreamRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    string application_id = 10;
    PutEventStreamRequest body = 11;
}

message GetV1AppsApplicationIdJobsImportRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    string application_id = 10;
    GetImportJobsRequest body = 11;
}

message GetV1AppsApplicationIdJobsImportJobIdRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    string application_id = 10;
    GetImportJobRequest body = 11;
    string job_id = 12;
}

message PostV1AppsApplicationIdMessagesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    string application_id = 10;
    SendMessagesRequest body = 11;
}

message GetV1AppsApplicationIdSegmentsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    string application_id = 10;
    GetSegmentsRequest body = 11;
}

message PutV1AppsApplicationIdSegmentsSegmentIdRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    string application_id = 10;
    UpdateSegmentRequest body = 11;
    string segment_id = 12;
}

message GetV1AppsApplicationIdSegmentsSegmentIdJobsImportRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    string application_id = 10;
    GetSegmentImportJobsRequest body = 11;
    string segment_id = 12;
}

message GetV1AppsApplicationIdSegmentsSegmentIdVersionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    string application_id = 10;
    GetSegmentVersionsRequest body = 11;
    string segment_id = 12;
}

message GetV1AppsApplicationIdSegmentsSegmentIdVersionsVersionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    string application_id = 10;
    GetSegmentVersionRequest body = 11;
    string segment_id = 12;
    string version = 13;
}

message PutV1AppsApplicationIdSettingsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    string application_id = 10;
    UpdateApplicationSettingsRequest body = 11;
}

message PostV1AppsApplicationIdUsersMessagesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    string application_id = 10;
    SendUsersMessagesRequest body = 11;
}

message ADMChannelRequest {
    // Client ID as gotten from Amazon
    string ClientId = 1;
    // Client secret as gotten from Amazon
    string ClientSecret = 2;
    // If the channel is enabled for sending messages.
    boolean Enabled = 3;
}

message ADMChannelResponse {
    // Application id
    string ApplicationId = 1;
    // When was this segment created
    string CreationDate = 2;
    // If the channel is enabled for sending messages.
    boolean Enabled = 3;
    // Channel ID. Not used, only for backwards compatibility.
    string Id = 4;
    // Is this channel archived
    boolean IsArchived = 5;
    // Who last updated this entry
    string LastModifiedBy = 6;
    // Last date this was updated
    string LastModifiedDate = 7;
    // Platform type. Will be "ADM"
    string Platform = 8;
    // Version of channel
    integer Version = 9;
}

message ADMMessage {
    // The action that occurs if the user taps a push notification delivered by the campaign: OPEN_APP - Your app launches, or it becomes the foreground app if it has been sent to the background. This is the default action. DEEP_LINK - Uses deep linking features in iOS and Android to open your app and display a designated user interface within the app. URL - The default mobile browser on the user's device launches and opens a web page at the URL you specify. Possible values include: OPEN_APP | DEEP_LINK | URL
    string Action = 1;
    // The message body of the notification, the email body or the text message.
    string Body = 2;
    // Optional. Arbitrary string used to indicate multiple messages are logically the same and that ADM is allowed to drop previously enqueued messages in favor of this one.
    string ConsolidationKey = 3;
    // The data payload used for a silent push. This payload is added to the notifications' data.pinpoint.jsonBody' object
    array Data = 4;
    // Optional. Number of seconds ADM should retain the message if the device is offline
    string ExpiresAfter = 5;
    // The icon image name of the asset saved in your application.
    string IconReference = 6;
    // The URL that points to an image used as the large icon to the notification content view.
    string ImageIconUrl = 7;
    // The URL that points to an image used in the push notification.
    string ImageUrl = 8;
    // The data payload used for a silent push. This payload is added to the notifications' data.pinpoint.jsonBody' object
    string JsonData = 9;
    // Optional. Base-64-encoded MD5 checksum of the data parameter. Used to verify data integrity
    string MD5 = 10;
    // The Raw JSON formatted string to be used as the payload. This value overrides the message.
    string RawContent = 11;
    // Indicates if the message should display on the users device. Silent pushes can be used for Remote Configuration and Phone Home use cases.
    boolean SilentPush = 12;
    // The URL that points to an image used as the small icon for the notification which will be used to represent the notification in the status bar and content view
    string SmallImageIconUrl = 13;
    // Indicates a sound to play when the device receives the notification. Supports default, or the filename of a sound resource bundled in the app. Android sound files must reside in /res/raw
    string Sound = 14;
    // Default message substitutions. Can be overridden by individual address substitutions.
    array Substitutions = 15;
    // The message title that displays above the message on the user's device.
    string Title = 16;
    // The URL to open in the user's mobile browser. Used if the value for Action is URL.
    string Url = 17;
}

message APNSChannelRequest {
    // The bundle id used for APNs Tokens.
    string BundleId = 1;
    // The distribution certificate from Apple.
    string Certificate = 2;
    // The default authentication method used for APNs.
    string DefaultAuthenticationMethod = 3;
    // If the channel is enabled for sending messages.
    boolean Enabled = 4;
    // The certificate private key.
    string PrivateKey = 5;
    // The team id used for APNs Tokens.
    string TeamId = 6;
    // The token key used for APNs Tokens.
    string TokenKey = 7;
    // The token key used for APNs Tokens.
    string TokenKeyId = 8;
}

message APNSChannelResponse {
    // The ID of the application to which the channel applies.
    string ApplicationId = 1;
    // When was this segment created
    string CreationDate = 2;
    // If the channel is enabled for sending messages.
    boolean Enabled = 3;
    // Channel ID. Not used. Present only for backwards compatibility.
    string Id = 4;
    // Is this channel archived
    boolean IsArchived = 5;
    // Who last updated this entry
    string LastModifiedBy = 6;
    // Last date this was updated
    string LastModifiedDate = 7;
    // The platform type. Will be APNS.
    string Platform = 8;
    // Version of channel
    integer Version = 9;
}

message APNSMessage {
    // The action that occurs if the user taps a push notification delivered by the campaign: OPEN_APP - Your app launches, or it becomes the foreground app if it has been sent to the background. This is the default action. DEEP_LINK - Uses deep linking features in iOS and Android to open your app and display a designated user interface within the app. URL - The default mobile browser on the user's device launches and opens a web page at the URL you specify. Possible values include: OPEN_APP | DEEP_LINK | URL
    string Action = 1;
    // Include this key when you want the system to modify the badge of your app icon. If this key is not included in the dictionary, the badge is not changed. To remove the badge, set the value of this key to 0.
    integer Badge = 2;
    // The message body of the notification, the email body or the text message.
    string Body = 3;
    // Provide this key with a string value that represents the notification's type. This value corresponds to the value in the identifier property of one of your app's registered categories.
    string Category = 4;
    // The data payload used for a silent push. This payload is added to the notifications' data.pinpoint.jsonBody' object
    array Data = 5;
    // The data payload used for a silent push. This payload is added to the notifications' data.pinpoint.jsonBody' object
    string JsonData = 6;
    // The URL that points to a video used in the push notification.
    string MediaUrl = 7;
    // The preferred authentication method, either "CERTIFICATE" or "TOKEN"
    string PreferredAuthenticationMethod = 8;
    // The Raw JSON formatted string to be used as the payload. This value overrides the message.
    string RawContent = 9;
    // Indicates if the message should display on the users device. Silent pushes can be used for Remote Configuration and Phone Home use cases.
    boolean SilentPush = 10;
    // Include this key when you want the system to play a sound. The value of this key is the name of a sound file in your app's main bundle or in the Library/Sounds folder of your app's data container. If the sound file cannot be found, or if you specify defaultfor the value, the system plays the default alert sound.
    string Sound = 11;
    // Default message substitutions. Can be overridden by individual address substitutions.
    array Substitutions = 12;
    // Provide this key with a string value that represents the app-specific identifier for grouping notifications. If you provide a Notification Content app extension, you can use this value to group your notifications together.
    string ThreadId = 13;
    // The message title that displays above the message on the user's device.
    string Title = 14;
    // The URL to open in the user's mobile browser. Used if the value for Action is URL.
    string Url = 15;
}

message APNSSandboxChannelRequest {
    // The bundle id used for APNs Tokens.
    string BundleId = 1;
    // The distribution certificate from Apple.
    string Certificate = 2;
    // The default authentication method used for APNs.
    string DefaultAuthenticationMethod = 3;
    // If the channel is enabled for sending messages.
    boolean Enabled = 4;
    // The certificate private key.
    string PrivateKey = 5;
    // The team id used for APNs Tokens.
    string TeamId = 6;
    // The token key used for APNs Tokens.
    string TokenKey = 7;
    // The token key used for APNs Tokens.
    string TokenKeyId = 8;
}

message APNSSandboxChannelResponse {
    // Application id
    string ApplicationId = 1;
    // When was this segment created
    string CreationDate = 2;
    // If the channel is enabled for sending messages.
    boolean Enabled = 3;
    // Channel ID. Not used, only for backwards compatibility.
    string Id = 4;
    // Is this channel archived
    boolean IsArchived = 5;
    // Who last updated this entry
    string LastModifiedBy = 6;
    // Last date this was updated
    string LastModifiedDate = 7;
    // The platform type. Will be APNS_SANDBOX.
    string Platform = 8;
    // Version of channel
    integer Version = 9;
}

message ActivitiesResponse {
    // List of campaign activities
    array Item = 1;
}

message ActivityResponse {
    // The ID of the application to which the campaign applies.
    string ApplicationId = 1;
    // The ID of the campaign to which the activity applies.
    string CampaignId = 2;
    // The actual time the activity was marked CANCELLED or COMPLETED. Provided in ISO 8601 format.
    string End = 3;
    // The unique activity ID.
    string Id = 4;
    // Indicates whether the activity succeeded.
    // 
    // Valid values: SUCCESS, FAIL
    string Result = 5;
    // The scheduled start time for the activity in ISO 8601 format.
    string ScheduledStart = 6;
    // The actual start time of the activity in ISO 8601 format.
    string Start = 7;
    // The state of the activity.
    // 
    // Valid values: PENDING, INITIALIZING, RUNNING, PAUSED, CANCELLED, COMPLETED
    string State = 8;
    // The total number of endpoints to which the campaign successfully delivered messages.
    integer SuccessfulEndpointCount = 9;
    // The total number of timezones completed.
    integer TimezonesCompletedCount = 10;
    // The total number of unique timezones present in the segment.
    integer TimezonesTotalCount = 11;
    // The total number of endpoints to which the campaign attempts to deliver messages.
    integer TotalEndpointCount = 12;
    // The ID of a variation of the campaign used for A/B testing.
    string TreatmentId = 13;
}

message AddressConfiguration {
    // Body override. If specified will override default body.
    string BodyOverride = 1;
    // The channel type.
    // 
    // Valid values: GCM | APNS | SMS | EMAIL
    ChannelType ChannelType = 2;
    // A map of custom attributes to attributes to be attached to the message for this address. This payload is added to the push notification's 'data.pinpoint' object or added to the email/sms delivery receipt event attributes.
    array Context = 3;
    // The Raw JSON formatted string to be used as the payload. This value overrides the message.
    string RawContent = 4;
    // A map of substitution values for the message to be merged with the DefaultMessage's substitutions. Substitutions on this map take precedence over the all other substitutions.
    array Substitutions = 5;
    // Title override. If specified will override default title if applicable.
    string TitleOverride = 6;
}

message ApplicationResponse {
    // The unique application ID.
    string Id = 1;
    // The display name of the application.
    string Name = 2;
}

message ApplicationSettingsResource {
    // The unique ID for the application.
    string ApplicationId = 1;
    // The date that the settings were last updated in ISO 8601 format.
    string LastModifiedDate = 2;
    // The default campaign limits for the app. These limits apply to each campaign for the app, unless the campaign overrides the default with limits of its own.
    CampaignLimits Limits = 3;
    // The default quiet time for the app. Each campaign for this app sends no messages during this time unless the campaign overrides the default with a quiet time of its own.
    QuietTime QuietTime = 4;
}

message ApplicationsResponse {
    // List of applications returned in this page.
    array Item = 1;
    // The string that you use in a subsequent request to get the next page of results in a paginated response.
    string NextToken = 2;
}

message AttributeDimension {
    // The type of dimension:
    // INCLUSIVE - Endpoints that match the criteria are included in the segment.
    // EXCLUSIVE - Endpoints that match the criteria are excluded from the segment.
    AttributeType AttributeType = 1;
    // The criteria values for the segment dimension. Endpoints with matching attribute values are included or excluded from the segment, depending on the setting for Type.
    array Values = 2;
}

enum AttributeType {
    INCLUSIVE = 0;
    EXCLUSIVE = 1;
}

message BadRequestException {
    // The error message returned from the API.
    string Message = 1;
    // The unique message body ID.
    string RequestID = 2;
}

message BaiduChannelRequest {
    // Platform credential API key from Baidu.
    string ApiKey = 1;
    // If the channel is enabled for sending messages.
    boolean Enabled = 2;
    // Platform credential Secret key from Baidu.
    string SecretKey = 3;
}

message BaiduChannelResponse {
    // Application id
    string ApplicationId = 1;
    // When was this segment created
    string CreationDate = 2;
    // The Baidu API key from Baidu.
    string Credential = 3;
    // If the channel is enabled for sending messages.
    boolean Enabled = 4;
    // Channel ID. Not used, only for backwards compatibility.
    string Id = 5;
    // Is this channel archived
    boolean IsArchived = 6;
    // Who made the last change
    string LastModifiedBy = 7;
    // Last date this was updated
    string LastModifiedDate = 8;
    // The platform type. Will be BAIDU
    string Platform = 9;
    // Version of channel
    integer Version = 10;
}

message BaiduMessage {
    // The action that occurs if the user taps a push notification delivered by the campaign: OPEN_APP - Your app launches, or it becomes the foreground app if it has been sent to the background. This is the default action. DEEP_LINK - Uses deep linking features in iOS and Android to open your app and display a designated user interface within the app. URL - The default mobile browser on the user's device launches and opens a web page at the URL you specify. Possible values include: OPEN_APP | DEEP_LINK | URL
    string Action = 1;
    // The message body of the notification, the email body or the text message.
    string Body = 2;
    // The data payload used for a silent push. This payload is added to the notifications' data.pinpoint.jsonBody' object
    array Data = 3;
    // The icon image name of the asset saved in your application.
    string IconReference = 4;
    // The URL that points to an image used as the large icon to the notification content view.
    string ImageIconUrl = 5;
    // The URL that points to an image used in the push notification.
    string ImageUrl = 6;
    // The data payload used for a silent push. This payload is added to the notifications' data.pinpoint.jsonBody' object
    string JsonData = 7;
    // The Raw JSON formatted string to be used as the payload. This value overrides the message.
    string RawContent = 8;
    // Indicates if the message should display on the users device. Silent pushes can be used for Remote Configuration and Phone Home use cases.
    boolean SilentPush = 9;
    // The URL that points to an image used as the small icon for the notification which will be used to represent the notification in the status bar and content view
    string SmallImageIconUrl = 10;
    // Indicates a sound to play when the device receives the notification. Supports default, or the filename of a sound resource bundled in the app. Android sound files must reside in /res/raw
    string Sound = 11;
    // Default message substitutions. Can be overridden by individual address substitutions.
    array Substitutions = 12;
    // The message title that displays above the message on the user's device.
    string Title = 13;
    // The URL to open in the user's mobile browser. Used if the value for Action is URL.
    string Url = 14;
}

message CampaignEmailMessage {
    // The email text body.
    string Body = 1;
    // The email address used to send the email from. Defaults to use FromAddress specified in the Email Channel.
    string FromAddress = 2;
    // The email html body.
    string HtmlBody = 3;
    // The email title (Or subject).
    string Title = 4;
}

message CampaignLimits {
    // The maximum number of messages that the campaign can send daily.
    integer Daily = 1;
    // The maximum duration of a campaign from the scheduled start. Must be a minimum of 60 seconds.
    integer MaximumDuration = 2;
    // The maximum number of messages per second that the campaign will send. This is a best effort maximum cap and can go as high as 20000 and as low as 50
    integer MessagesPerSecond = 3;
    // The maximum total number of messages that the campaign can send.
    integer Total = 4;
}

message CampaignResponse {
    // Treatments that are defined in addition to the default treatment.
    array AdditionalTreatments = 1;
    // The ID of the application to which the campaign applies.
    string ApplicationId = 2;
    // The date the campaign was created in ISO 8601 format.
    string CreationDate = 3;
    // The status of the campaign's default treatment. Only present for A/B test campaigns.
    CampaignState DefaultState = 4;
    // A description of the campaign.
    string Description = 5;
    // The allocated percentage of end users who will not receive messages from this campaign.
    integer HoldoutPercent = 6;
    // The unique campaign ID.
    string Id = 7;
    // Indicates whether the campaign is paused. A paused campaign does not send messages unless you resume it by setting IsPaused to false.
    boolean IsPaused = 8;
    // The date the campaign was last updated in ISO 8601 format.	
    string LastModifiedDate = 9;
    // The campaign limits settings.
    CampaignLimits Limits = 10;
    // The message configuration settings.
    MessageConfiguration MessageConfiguration = 11;
    // The custom name of the campaign.
    string Name = 12;
    // The campaign schedule.
    Schedule Schedule = 13;
    // The ID of the segment to which the campaign sends messages.
    string SegmentId = 14;
    // The version of the segment to which the campaign sends messages.
    integer SegmentVersion = 15;
    // The campaign status.
    // 
    // An A/B test campaign will have a status of COMPLETED only when all treatments have a status of COMPLETED.
    CampaignState State = 16;
    // A custom description for the treatment.
    string TreatmentDescription = 17;
    // The custom name of a variation of the campaign used for A/B testing.
    string TreatmentName = 18;
    // The campaign version number.
    integer Version = 19;
}

message CampaignSmsMessage {
    // The SMS text body.
    string Body = 1;
    // Is this is a transactional SMS message, otherwise a promotional message.
    MessageType MessageType = 2;
    // Sender ID of sent message.
    string SenderId = 3;
}

message CampaignState {
    // The status of the campaign, or the status of a treatment that belongs to an A/B test campaign.
    // 
    // Valid values: SCHEDULED, EXECUTING, PENDING_NEXT_RUN, COMPLETED, PAUSED
    CampaignStatus CampaignStatus = 1;
}

enum CampaignStatu {
    SCHEDULED = 0;
    EXECUTING = 1;
    PENDING_NEXT_RUN = 2;
    COMPLETED = 3;
    PAUSED = 4;
}

message CampaignsResponse {
    // A list of campaigns.
    array Item = 1;
    // The string that you use in a subsequent request to get the next page of results in a paginated response.
    string NextToken = 2;
}

enum ChannelType {
    GCM = 0;
    APNS = 1;
    APNS_SANDBOX = 2;
    ADM = 3;
    SMS = 4;
    EMAIL = 5;
    BAIDU = 6;
}

message CreateAppRequest {
    CreateApplicationRequest CreateApplicationRequest = 1;
}

message CreateAppResponse {
    ApplicationResponse ApplicationResponse = 1;
}

message CreateApplicationRequest {
    // The display name of the application. Used in the Amazon Pinpoint console.
    string Name = 1;
}

message CreateCampaignRequest {
    WriteCampaignRequest WriteCampaignRequest = 1;
}

message CreateCampaignResponse {
    CampaignResponse CampaignResponse = 1;
}

message CreateImportJobRequest {
    ImportJobRequest ImportJobRequest = 1;
}

message CreateImportJobResponse {
    ImportJobResponse ImportJobResponse = 1;
}

message CreateSegmentRequest {
    WriteSegmentRequest WriteSegmentRequest = 1;
}

message CreateSegmentResponse {
    SegmentResponse SegmentResponse = 1;
}

message DefaultMessage {
    // The message body of the notification, the email body or the text message.
    string Body = 1;
    // Default message substitutions. Can be overridden by individual address substitutions.
    array Substitutions = 2;
}

message DefaultPushNotificationMessage {
    // The action that occurs if the user taps a push notification delivered by the campaign: OPEN_APP - Your app launches, or it becomes the foreground app if it has been sent to the background. This is the default action. DEEP_LINK - Uses deep linking features in iOS and Android to open your app and display a designated user interface within the app. URL - The default mobile browser on the user's device launches and opens a web page at the URL you specify. Possible values include: OPEN_APP | DEEP_LINK | URL
    string Action = 1;
    // The message body of the notification, the email body or the text message.
    string Body = 2;
    // The data payload used for a silent push. This payload is added to the notifications' data.pinpoint.jsonBody' object
    array Data = 3;
    // The data payload used for a silent push. This payload is added to the notifications' data.pinpoint.jsonBody' object
    string JsonData = 4;
    // Indicates if the message should display on the users device. Silent pushes can be used for Remote Configuration and Phone Home use cases.
    boolean SilentPush = 5;
    // Default message substitutions. Can be overridden by individual address substitutions.
    array Substitutions = 6;
    // The message title that displays above the message on the user's device.
    string Title = 7;
    // The URL to open in the user's mobile browser. Used if the value for Action is URL.
    string Url = 8;
}

message DeleteAdmChannelRequest {
}

message DeleteAdmChannelResponse {
    ADMChannelResponse ADMChannelResponse = 1;
}

message DeleteApnsChannelRequest {
}

message DeleteApnsChannelResponse {
    APNSChannelResponse APNSChannelResponse = 1;
}

message DeleteApnsSandboxChannelRequest {
}

message DeleteApnsSandboxChannelResponse {
    APNSSandboxChannelResponse APNSSandboxChannelResponse = 1;
}

message DeleteAppRequest {
}

message DeleteAppResponse {
    ApplicationResponse ApplicationResponse = 1;
}

message DeleteBaiduChannelRequest {
}

message DeleteBaiduChannelResponse {
    BaiduChannelResponse BaiduChannelResponse = 1;
}

message DeleteCampaignRequest {
}

message DeleteCampaignResponse {
    CampaignResponse CampaignResponse = 1;
}

message DeleteEmailChannelRequest {
}

message DeleteEmailChannelResponse {
    EmailChannelResponse EmailChannelResponse = 1;
}

message DeleteEventStreamRequest {
}

message DeleteEventStreamResponse {
    EventStream EventStream = 1;
}

message DeleteGcmChannelRequest {
}

message DeleteGcmChannelResponse {
    GCMChannelResponse GCMChannelResponse = 1;
}

message DeleteSegmentRequest {
}

message DeleteSegmentResponse {
    SegmentResponse SegmentResponse = 1;
}

message DeleteSmsChannelRequest {
}

message DeleteSmsChannelResponse {
    SMSChannelResponse SMSChannelResponse = 1;
}

enum DeliveryStatu {
    SUCCESSFUL = 0;
    THROTTLED = 1;
    TEMPORARY_FAILURE = 2;
    PERMANENT_FAILURE = 3;
    UNKNOWN_FAILURE = 4;
    OPT_OUT = 5;
    DUPLICATE = 6;
}

enum DimensionType {
    INCLUSIVE = 0;
    EXCLUSIVE = 1;
}

message DirectMessageConfiguration {
    // The message to ADM channels. Overrides the default push notification message.
    ADMMessage ADMMessage = 1;
    // The message to APNS channels. Overrides the default push notification message.
    APNSMessage APNSMessage = 2;
    // The message to Baidu GCM channels. Overrides the default push notification message.
    BaiduMessage BaiduMessage = 3;
    // The default message for all channels.
    DefaultMessage DefaultMessage = 4;
    // The default push notification message for all push channels.
    DefaultPushNotificationMessage DefaultPushNotificationMessage = 5;
    // The message to Email channels. Overrides the default message.
    EmailMessage EmailMessage = 6;
    // The message to GCM channels. Overrides the default push notification message.
    GCMMessage GCMMessage = 7;
    // The message to SMS channels. Overrides the default message.
    SMSMessage SMSMessage = 8;
}

enum Duration {
    HR_24 = 0;
    DAY_7 = 1;
    DAY_14 = 2;
    DAY_30 = 3;
}

message EmailChannelRequest {
    // If the channel is enabled for sending messages.
    boolean Enabled = 1;
    // The email address used to send emails from.
    string FromAddress = 2;
    // The ARN of an identity verified with SES.
    string Identity = 3;
    // The ARN of an IAM Role used to submit events to Mobile Analytics' event ingestion service
    string RoleArn = 4;
}

message EmailChannelResponse {
    // The unique ID of the application to which the email channel belongs.
    string ApplicationId = 1;
    // The date that the settings were last updated in ISO 8601 format.
    string CreationDate = 2;
    // If the channel is enabled for sending messages.
    boolean Enabled = 3;
    // The email address used to send emails from.
    string FromAddress = 4;
    // Channel ID. Not used, only for backwards compatibility.
    string Id = 5;
    // The ARN of an identity verified with SES.
    string Identity = 6;
    // Is this channel archived
    boolean IsArchived = 7;
    // Who last updated this entry
    string LastModifiedBy = 8;
    // Last date this was updated
    string LastModifiedDate = 9;
    // Platform type. Will be "EMAIL"
    string Platform = 10;
    // The ARN of an IAM Role used to submit events to Mobile Analytics' event ingestion service
    string RoleArn = 11;
    // Version of channel
    integer Version = 12;
}

message EmailMessage {
    // The message body of the notification, the email body or the text message.
    string Body = 1;
    // The email address used to send the email from. Defaults to use FromAddress specified in the Email Channel.
    string FromAddress = 2;
    // The HTML part of the email.
    string HtmlBody = 3;
    // Default message substitutions. Can be overridden by individual address substitutions.
    array Substitutions = 4;
    // The ARN of the template to use for the email.
    string TemplateArn = 5;
    // The subject of the email.
    string Title = 6;
}

message EndpointBatchItem {
    // The address or token of the endpoint as provided by your push provider (e.g. DeviceToken or RegistrationId).
    string Address = 1;
    // Custom attributes that your app reports to Amazon Pinpoint. You can use these attributes as selection criteria when you create a segment.
    array Attributes = 2;
    // The channel type.
    // 
    // Valid values: GCM | APNS | SMS | EMAIL
    ChannelType ChannelType = 3;
    // The endpoint demographic attributes.
    EndpointDemographic Demographic = 4;
    // The last time the endpoint was updated. Provided in ISO 8601 format.
    string EffectiveDate = 5;
    // The endpoint status. Can be either ACTIVE or INACTIVE. Will be set to INACTIVE if a delivery fails. Will be set to ACTIVE if the address is updated.
    string EndpointStatus = 6;
    // The unique Id for the Endpoint in the batch.
    string Id = 7;
    // The endpoint location attributes.
    EndpointLocation Location = 8;
    // Custom metrics that your app reports to Amazon Pinpoint.
    array Metrics = 9;
    // Indicates whether a user has opted out of receiving messages with one of the following values:
    // 
    // ALL - User has opted out of all messages.
    // 
    // NONE - Users has not opted out and receives all messages.
    string OptOut = 10;
    // The unique ID for the most recent request to update the endpoint.
    string RequestId = 11;
    // Custom user-specific attributes that your app reports to Amazon Pinpoint.
    EndpointUser User = 12;
}

message EndpointBatchRequest {
    // List of items to update. Maximum 100 items
    array Item = 1;
}

message EndpointDemographic {
    // The version of the application associated with the endpoint.
    string AppVersion = 1;
    // The endpoint locale in the following format: The ISO 639-1 alpha-2 code, followed by an underscore, followed by an ISO 3166-1 alpha-2 value.
    string Locale = 2;
    // The endpoint make, such as such as Apple or Samsung.
    string Make = 3;
    // The endpoint model, such as iPhone.
    string Model = 4;
    // The endpoint model version.
    string ModelVersion = 5;
    // The endpoint platform, such as ios or android.
    string Platform = 6;
    // The endpoint platform version.
    string PlatformVersion = 7;
    // The timezone of the endpoint. Specified as a tz database value, such as Americas/Los_Angeles.
    string Timezone = 8;
}

message EndpointLocation {
    // The city where the endpoint is located.
    string City = 1;
    // Country according to ISO 3166-1 Alpha-2 codes. For example, US.
    string Country = 2;
    // The latitude of the endpoint location. Rounded to one decimal (Roughly corresponding to a mile).
    number Latitude = 3;
    // The longitude of the endpoint location. Rounded to one decimal (Roughly corresponding to a mile).
    number Longitude = 4;
    // The postal code or zip code of the endpoint.
    string PostalCode = 5;
    // The region of the endpoint location. For example, corresponds to a state in US.
    string Region = 6;
}

message EndpointMessageResult {
    // Address that endpoint message was delivered to.
    string Address = 1;
    // Delivery status of message.
    DeliveryStatus DeliveryStatus = 2;
    // Downstream service status code.
    integer StatusCode = 3;
    // Status message for message delivery.
    string StatusMessage = 4;
    // If token was updated as part of delivery. (This is GCM Specific)
    string UpdatedToken = 5;
}

message EndpointRequest {
    // The address or token of the endpoint as provided by your push provider (e.g. DeviceToken or RegistrationId).
    string Address = 1;
    // Custom attributes that your app reports to Amazon Pinpoint. You can use these attributes as selection criteria when you create a segment.
    array Attributes = 2;
    // The channel type.
    // 
    // Valid values: GCM | APNS | SMS | EMAIL
    ChannelType ChannelType = 3;
    // The endpoint demographic attributes.
    EndpointDemographic Demographic = 4;
    // The last time the endpoint was updated. Provided in ISO 8601 format.
    string EffectiveDate = 5;
    // The endpoint status. Can be either ACTIVE or INACTIVE. Will be set to INACTIVE if a delivery fails. Will be set to ACTIVE if the address is updated.
    string EndpointStatus = 6;
    // The endpoint location attributes.
    EndpointLocation Location = 7;
    // Custom metrics that your app reports to Amazon Pinpoint.
    array Metrics = 8;
    // Indicates whether a user has opted out of receiving messages with one of the following values:
    // 
    // ALL - User has opted out of all messages.
    // 
    // NONE - Users has not opted out and receives all messages.
    string OptOut = 9;
    // The unique ID for the most recent request to update the endpoint.
    string RequestId = 10;
    // Custom user-specific attributes that your app reports to Amazon Pinpoint.
    EndpointUser User = 11;
}

message EndpointResponse {
    // The address or token of the endpoint as provided by your push provider (e.g. DeviceToken or RegistrationId).
    string Address = 1;
    // The ID of the application associated with the endpoint.
    string ApplicationId = 2;
    // Custom attributes that your app reports to Amazon Pinpoint. You can use these attributes as selection criteria when you create a segment.
    array Attributes = 3;
    // The channel type.
    // 
    // Valid values: GCM | APNS | SMS | EMAIL
    ChannelType ChannelType = 4;
    // A number from 0 - 99 that represents the cohort the endpoint is assigned to. Endpoints are grouped into cohorts randomly, and each cohort contains approximately 1 percent of the endpoints for an app. Amazon Pinpoint assigns cohorts to the holdout or treatment allocations for a campaign.
    string CohortId = 5;
    // The last time the endpoint was created. Provided in ISO 8601 format.
    string CreationDate = 6;
    // The endpoint demographic attributes.
    EndpointDemographic Demographic = 7;
    // The last time the endpoint was updated. Provided in ISO 8601 format.
    string EffectiveDate = 8;
    // The endpoint status. Can be either ACTIVE or INACTIVE. Will be set to INACTIVE if a delivery fails. Will be set to ACTIVE if the address is updated.
    string EndpointStatus = 9;
    // The unique ID that you assigned to the endpoint. The ID should be a globally unique identifier (GUID) to ensure that it is unique compared to all other endpoints for the application.
    string Id = 10;
    // The endpoint location attributes.
    EndpointLocation Location = 11;
    // Custom metrics that your app reports to Amazon Pinpoint.
    array Metrics = 12;
    // Indicates whether a user has opted out of receiving messages with one of the following values:
    // 
    // ALL - User has opted out of all messages.
    // 
    // NONE - Users has not opted out and receives all messages.
    string OptOut = 13;
    // The unique ID for the most recent request to update the endpoint.
    string RequestId = 14;
    // The ShardId of endpoint.
    string ShardId = 15;
    // Custom user-specific attributes that your app reports to Amazon Pinpoint.
    EndpointUser User = 16;
}

message EndpointSendConfiguration {
    // Body override. If specified will override default body.
    string BodyOverride = 1;
    // A map of custom attributes to attributes to be attached to the message for this address. This payload is added to the push notification's 'data.pinpoint' object or added to the email/sms delivery receipt event attributes.
    array Context = 2;
    // The Raw JSON formatted string to be used as the payload. This value overrides the message.
    string RawContent = 3;
    // A map of substitution values for the message to be merged with the DefaultMessage's substitutions. Substitutions on this map take precedence over the all other substitutions.
    array Substitutions = 4;
    // Title override. If specified will override default title if applicable.
    string TitleOverride = 5;
}

message EndpointUser {
    // Custom attributes specific to the user.
    array UserAttributes = 1;
    // The unique ID of the user.
    string UserId = 2;
}

message EventStream {
    // The ID of the application from which events should be published.
    string ApplicationId = 1;
    // The Amazon Resource Name (ARN) of the Amazon Kinesis stream or Firehose delivery stream to which you want to publish events.
    //  Firehose ARN: arn:aws:firehose:REGION:ACCOUNT_ID:deliverystream/STREAM_NAME
    //  Kinesis ARN: arn:aws:kinesis:REGION:ACCOUNT_ID:stream/STREAM_NAME
    string DestinationStreamArn = 2;
    // The external ID assigned the IAM role that authorizes Amazon Pinpoint to publish to the stream.
    string ExternalId = 3;
    // The date the event stream was last updated in ISO 8601 format.
    string LastModifiedDate = 4;
    // The IAM user who last modified the event stream.
    string LastUpdatedBy = 5;
    // The IAM role that authorizes Amazon Pinpoint to publish events to the stream in your account.
    string RoleArn = 6;
}

message ForbiddenException {
    // The error message returned from the API.
    string Message = 1;
    // The unique message body ID.
    string RequestID = 2;
}

enum Format {
    CSV = 0;
    JSON = 1;
}

enum Frequency {
    ONCE = 0;
    HOURLY = 1;
    DAILY = 2;
    WEEKLY = 3;
    MONTHLY = 4;
}

message GCMChannelRequest {
    // Platform credential API key from Google.
    string ApiKey = 1;
    // If the channel is enabled for sending messages.
    boolean Enabled = 2;
}

message GCMChannelResponse {
    // The ID of the application to which the channel applies.
    string ApplicationId = 1;
    // When was this segment created
    string CreationDate = 2;
    // The GCM API key from Google.
    string Credential = 3;
    // If the channel is enabled for sending messages.
    boolean Enabled = 4;
    // Channel ID. Not used. Present only for backwards compatibility.
    string Id = 5;
    // Is this channel archived
    boolean IsArchived = 6;
    // Who last updated this entry
    string LastModifiedBy = 7;
    // Last date this was updated
    string LastModifiedDate = 8;
    // The platform type. Will be GCM
    string Platform = 9;
    // Version of channel
    integer Version = 10;
}

message GCMMessage {
    // The action that occurs if the user taps a push notification delivered by the campaign: OPEN_APP - Your app launches, or it becomes the foreground app if it has been sent to the background. This is the default action. DEEP_LINK - Uses deep linking features in iOS and Android to open your app and display a designated user interface within the app. URL - The default mobile browser on the user's device launches and opens a web page at the URL you specify. Possible values include: OPEN_APP | DEEP_LINK | URL
    string Action = 1;
    // The message body of the notification, the email body or the text message.
    string Body = 2;
    // This parameter identifies a group of messages (e.g., with collapse_key: "Updates Available") that can be collapsed, so that only the last message gets sent when delivery can be resumed. This is intended to avoid sending too many of the same messages when the device comes back online or becomes active.
    string CollapseKey = 3;
    // The data payload used for a silent push. This payload is added to the notifications' data.pinpoint.jsonBody' object
    array Data = 4;
    // The icon image name of the asset saved in your application.
    string IconReference = 5;
    // The URL that points to an image used as the large icon to the notification content view.
    string ImageIconUrl = 6;
    // The URL that points to an image used in the push notification.
    string ImageUrl = 7;
    // The data payload used for a silent push. This payload is added to the notifications' data.pinpoint.jsonBody' object
    string JsonData = 8;
    // The Raw JSON formatted string to be used as the payload. This value overrides the message.
    string RawContent = 9;
    // This parameter specifies the package name of the application where the registration tokens must match in order to receive the message.
    string RestrictedPackageName = 10;
    // Indicates if the message should display on the users device. Silent pushes can be used for Remote Configuration and Phone Home use cases.
    boolean SilentPush = 11;
    // The URL that points to an image used as the small icon for the notification which will be used to represent the notification in the status bar and content view
    string SmallImageIconUrl = 12;
    // Indicates a sound to play when the device receives the notification. Supports default, or the filename of a sound resource bundled in the app. Android sound files must reside in /res/raw
    string Sound = 13;
    // Default message substitutions. Can be overridden by individual address substitutions.
    array Substitutions = 14;
    // The message title that displays above the message on the user's device.
    string Title = 15;
    // The URL to open in the user's mobile browser. Used if the value for Action is URL.
    string Url = 16;
}

message GetAdmChannelRequest {
}

message GetAdmChannelResponse {
    ADMChannelResponse ADMChannelResponse = 1;
}

message GetApnsChannelRequest {
}

message GetApnsChannelResponse {
    APNSChannelResponse APNSChannelResponse = 1;
}

message GetApnsSandboxChannelRequest {
}

message GetApnsSandboxChannelResponse {
    APNSSandboxChannelResponse APNSSandboxChannelResponse = 1;
}

message GetAppRequest {
}

message GetAppResponse {
    ApplicationResponse ApplicationResponse = 1;
}

message GetApplicationSettingsRequest {
}

message GetApplicationSettingsResponse {
    ApplicationSettingsResource ApplicationSettingsResource = 1;
}

message GetAppsRequest {
}

message GetAppsResponse {
    ApplicationsResponse ApplicationsResponse = 1;
}

message GetBaiduChannelRequest {
}

message GetBaiduChannelResponse {
    BaiduChannelResponse BaiduChannelResponse = 1;
}

message GetCampaignActivitiesRequest {
}

message GetCampaignActivitiesResponse {
    ActivitiesResponse ActivitiesResponse = 1;
}

message GetCampaignRequest {
}

message GetCampaignResponse {
    CampaignResponse CampaignResponse = 1;
}

message GetCampaignVersionRequest {
}

message GetCampaignVersionResponse {
    CampaignResponse CampaignResponse = 1;
}

message GetCampaignVersionsRequest {
}

message GetCampaignVersionsResponse {
    CampaignsResponse CampaignsResponse = 1;
}

message GetCampaignsRequest {
}

message GetCampaignsResponse {
    CampaignsResponse CampaignsResponse = 1;
}

message GetEmailChannelRequest {
}

message GetEmailChannelResponse {
    EmailChannelResponse EmailChannelResponse = 1;
}

message GetEndpointRequest {
}

message GetEndpointResponse {
    EndpointResponse EndpointResponse = 1;
}

message GetEventStreamRequest {
}

message GetEventStreamResponse {
    EventStream EventStream = 1;
}

message GetGcmChannelRequest {
}

message GetGcmChannelResponse {
    GCMChannelResponse GCMChannelResponse = 1;
}

message GetImportJobRequest {
}

message GetImportJobResponse {
    ImportJobResponse ImportJobResponse = 1;
}

message GetImportJobsRequest {
}

message GetImportJobsResponse {
    ImportJobsResponse ImportJobsResponse = 1;
}

message GetSegmentImportJobsRequest {
}

message GetSegmentImportJobsResponse {
    ImportJobsResponse ImportJobsResponse = 1;
}

message GetSegmentRequest {
}

message GetSegmentResponse {
    SegmentResponse SegmentResponse = 1;
}

message GetSegmentVersionRequest {
}

message GetSegmentVersionResponse {
    SegmentResponse SegmentResponse = 1;
}

message GetSegmentVersionsRequest {
}

message GetSegmentVersionsResponse {
    SegmentsResponse SegmentsResponse = 1;
}

message GetSegmentsRequest {
}

message GetSegmentsResponse {
    SegmentsResponse SegmentsResponse = 1;
}

message GetSmsChannelRequest {
}

message GetSmsChannelResponse {
    SMSChannelResponse SMSChannelResponse = 1;
}

message ImportJobRequest {
    // Sets whether the endpoints create a segment when they are imported.
    boolean DefineSegment = 1;
    // A unique, custom ID assigned to the IAM role that restricts who can assume the role.	
    string ExternalId = 2;
    // The format of the files that contain the endpoint definitions.
    // Valid values: CSV, JSON
    Format Format = 3;
    // Sets whether the endpoints are registered with Amazon Pinpoint when they are imported.
    boolean RegisterEndpoints = 4;
    // The Amazon Resource Name (ARN) of an IAM role that grants Amazon Pinpoint access to the Amazon S3 location that contains the endpoints to import.
    string RoleArn = 5;
    // A URL that points to the location within an Amazon S3 bucket that contains the endpoints to import. The location can be a folder or a single file.
    // The URL should follow this format: s3://bucket-name/folder-name/file-name
    // 
    // Amazon Pinpoint will import endpoints from this location and any subfolders it contains.
    string S3Url = 6;
    // The ID of the segment to update if the import job is meant to update an existing segment.
    string SegmentId = 7;
    // A custom name for the segment created by the import job. Use if DefineSegment is true.
    string SegmentName = 8;
}

message ImportJobResource {
    // Sets whether the endpoints create a segment when they are imported.
    boolean DefineSegment = 1;
    // A unique, custom ID assigned to the IAM role that restricts who can assume the role.	
    string ExternalId = 2;
    // The format of the files that contain the endpoint definitions.
    // Valid values: CSV, JSON
    Format Format = 3;
    // Sets whether the endpoints are registered with Amazon Pinpoint when they are imported.
    boolean RegisterEndpoints = 4;
    // The Amazon Resource Name (ARN) of an IAM role that grants Amazon Pinpoint access to the Amazon S3 location that contains the endpoints to import.
    string RoleArn = 5;
    // A URL that points to the location within an Amazon S3 bucket that contains the endpoints to import. The location can be a folder or a single file.
    // The URL should follow this format: s3://bucket-name/folder-name/file-name
    // 
    // Amazon Pinpoint will import endpoints from this location and any subfolders it contains.
    string S3Url = 6;
    // The ID of the segment to update if the import job is meant to update an existing segment.
    string SegmentId = 7;
    // A custom name for the segment created by the import job. Use if DefineSegment is true.
    string SegmentName = 8;
}

message ImportJobResponse {
    // The unique ID of the application to which the import job applies.
    string ApplicationId = 1;
    // The number of pieces that have successfully imported as of the time of the request.
    integer CompletedPieces = 2;
    // The date the import job completed in ISO 8601 format.
    string CompletionDate = 3;
    // The date the import job was created in ISO 8601 format.
    string CreationDate = 4;
    // The import job settings.
    ImportJobResource Definition = 5;
    // The number of pieces that have failed to import as of the time of the request.
    integer FailedPieces = 6;
    // Provides up to 100 of the first failed entries for the job, if any exist.
    array Failures = 7;
    // The unique ID of the import job.
    string Id = 8;
    // The status of the import job.
    // Valid values: CREATED, INITIALIZING, PROCESSING, COMPLETING, COMPLETED, FAILING, FAILED
    // 
    // The job status is FAILED if one or more pieces failed to import.
    JobStatus JobStatus = 9;
    // The number of endpoints that failed to import; for example, because of syntax errors.
    integer TotalFailures = 10;
    // The total number of pieces that must be imported to finish the job. Each piece is an approximately equal portion of the endpoints to import.
    integer TotalPieces = 11;
    // The number of endpoints that were processed by the import job.
    integer TotalProcessed = 12;
    // The job type. Will be Import.
    string Type = 13;
}

message ImportJobsResponse {
    // A list of import jobs for the application.
    array Item = 1;
    // The string that you use in a subsequent request to get the next page of results in a paginated response.
    string NextToken = 2;
}

message InternalServerErrorException {
    // The error message returned from the API.
    string Message = 1;
    // The unique message body ID.
    string RequestID = 2;
}

enum JobStatu {
    CREATED = 0;
    INITIALIZING = 1;
    PROCESSING = 2;
    COMPLETING = 3;
    COMPLETED = 4;
    FAILING = 5;
    FAILED = 6;
}

repeated ActivityResponse ListOfActivityResponse = 1

repeated ApplicationResponse ListOfApplicationResponse = 1

repeated CampaignResponse ListOfCampaignResponse = 1

repeated EndpointBatchItem ListOfEndpointBatchItem = 1

repeated ImportJobResponse ListOfImportJobResponse = 1

repeated SegmentResponse ListOfSegmentResponse = 1

repeated TreatmentResource ListOfTreatmentResource = 1

repeated WriteTreatmentResource ListOfWriteTreatmentResource = 1

repeated string ListOf__string = 1

message MapOfAddressConfiguration {
    string key = 1;
    AddressConfiguration value = 2;
}
repeated MapOfAddressConfiguration MapOfAddressConfiguration = 1

message MapOfAttributeDimension {
    string key = 1;
    AttributeDimension value = 2;
}
repeated MapOfAttributeDimension MapOfAttributeDimension = 1

message MapOfEndpointMessageResult {
    string key = 1;
    EndpointMessageResult value = 2;
}
repeated MapOfEndpointMessageResult MapOfEndpointMessageResult = 1

message MapOfEndpointSendConfiguration {
    string key = 1;
    EndpointSendConfiguration value = 2;
}
repeated MapOfEndpointSendConfiguration MapOfEndpointSendConfiguration = 1

message MapOfListOf__string {
    string key = 1;
    array value = 2;
}
repeated MapOfListOf__string MapOfListOf__string = 1

message MapOfMapOfEndpointMessageResult {
    string key = 1;
    array value = 2;
}
repeated MapOfMapOfEndpointMessageResult MapOfMapOfEndpointMessageResult = 1

message MapOfMessageResult {
    string key = 1;
    MessageResult value = 2;
}
repeated MapOfMessageResult MapOfMessageResult = 1

message MapOf__double {
    string key = 1;
    number value = 2;
}
repeated MapOf__double MapOf__double = 1

message MapOf__integer {
    string key = 1;
    integer value = 2;
}
repeated MapOf__integer MapOf__integer = 1

message MapOf__string {
    string key = 1;
    string value = 2;
}
repeated MapOf__string MapOf__string = 1

message Message {
    // The action that occurs if the user taps a push notification delivered by the campaign:
    // OPEN_APP - Your app launches, or it becomes the foreground app if it has been sent to the background. This is the default action.
    // 
    // DEEP_LINK - Uses deep linking features in iOS and Android to open your app and display a designated user interface within the app.
    // 
    // URL - The default mobile browser on the user's device launches and opens a web page at the URL you specify.
    string Action = 1;
    // The message body. Can include up to 140 characters.
    string Body = 2;
    // The URL that points to the icon image for the push notification icon, for example, the app icon.
    string ImageIconUrl = 3;
    // The URL that points to the small icon image for the push notification icon, for example, the app icon.
    string ImageSmallIconUrl = 4;
    // The URL that points to an image used in the push notification.
    string ImageUrl = 5;
    // The JSON payload used for a silent push.
    string JsonBody = 6;
    // The URL that points to the media resource, for example a .mp4 or .gif file.
    string MediaUrl = 7;
    // The Raw JSON formatted string to be used as the payload. This value overrides the message.
    string RawContent = 8;
    // Indicates if the message should display on the users device.
    // 
    // Silent pushes can be used for Remote Configuration and Phone Home use cases.
    boolean SilentPush = 9;
    // The message title that displays above the message on the user's device.
    string Title = 10;
    // The URL to open in the user's mobile browser. Used if the value for Action is URL.
    string Url = 11;
}

message MessageBody {
    // The error message returned from the API.
    string Message = 1;
    // The unique message body ID.
    string RequestID = 2;
}

message MessageConfiguration {
    // The message that the campaign delivers to APNS channels. Overrides the default message.
    Message APNSMessage = 1;
    // The default message for all channels.
    Message DefaultMessage = 2;
    // The email message configuration.
    CampaignEmailMessage EmailMessage = 3;
    // The message that the campaign delivers to GCM channels. Overrides the default message.
    Message GCMMessage = 4;
    // The SMS message configuration.
    CampaignSmsMessage SMSMessage = 5;
}

message MessageRequest {
    // A map of destination addresses, with the address as the key(Email address, phone number or push token) and the Address Configuration as the value.
    array Addresses = 1;
    // The JSON payload used for campaign attributes. This payload is added to the notifications' data->pinpoint->campaign' object in iOS and flattened to pinpoint.campaign.{AttributeName} keys in Android. Email will use the attribute campaign_id to save the templates.
    array Campaign = 2;
    // A map of custom attributes to attributes to be attached to the message. This payload is added to the push notification's 'data.pinpoint' object or added to the email/sms delivery receipt event attributes.
    array Context = 3;
    // A map of destination addresses, with the address as the key(Email address, phone number or push token) and the Address Configuration as the value.
    array Endpoints = 4;
    // Message configuration.
    DirectMessageConfiguration MessageConfiguration = 5;
    // Original request Id for which this message is delivered.
    string RequestId = 6;
}

message MessageResponse {
    // Application id of the message.
    string ApplicationId = 1;
    // A map containing a multi part response for each address, with the endpointId as the key and the result as the value.
    array EndpointResult = 2;
    // Original request Id for which this message was delivered.
    string RequestId = 3;
    // A map containing a multi part response for each address, with the address as the key(Email address, phone number or push token) and the result as the value.
    array Result = 4;
}

message MessageResult {
    // Delivery status of message.
    DeliveryStatus DeliveryStatus = 1;
    // Downstream service status code.
    integer StatusCode = 2;
    // Status message for message delivery.
    string StatusMessage = 3;
    // If token was updated as part of delivery. (This is GCM Specific)
    string UpdatedToken = 4;
}

enum MessageType {
    TRANSACTIONAL = 0;
    PROMOTIONAL = 1;
}

message MethodNotAllowedException {
    // The error message returned from the API.
    string Message = 1;
    // The unique message body ID.
    string RequestID = 2;
}

message NotFoundException {
    // The error message returned from the API.
    string Message = 1;
    // The unique message body ID.
    string RequestID = 2;
}

message PutEventStreamRequest {
    // EventStream to write.
    WriteEventStream WriteEventStream = 1;
}

message PutEventStreamResponse {
    EventStream EventStream = 1;
}

message QuietTime {
    // The default end time for quiet time in ISO 8601 format.
    string End = 1;
    // The default start time for quiet time in ISO 8601 format.
    string Start = 2;
}

message RecencyDimension {
    // The length of time during which users have been active or inactive with your app.
    // Valid values: HR_24, DAY_7, DAY_14, DAY_30
    Duration Duration = 1;
    // The recency dimension type:
    // ACTIVE - Users who have used your app within the specified duration are included in the segment.
    // INACTIVE - Users who have not used your app within the specified duration are included in the segment.
    RecencyType RecencyType = 2;
}

enum RecencyType {
    ACTIVE = 0;
    INACTIVE = 1;
}

message SMSChannelRequest {
    // If the channel is enabled for sending messages.
    boolean Enabled = 1;
    // Sender identifier of your messages.
    string SenderId = 2;
    // ShortCode registered with phone provider.
    string ShortCode = 3;
}

message SMSChannelResponse {
    // The unique ID of the application to which the SMS channel belongs.
    string ApplicationId = 1;
    // The date that the settings were last updated in ISO 8601 format.
    string CreationDate = 2;
    // If the channel is enabled for sending messages.
    boolean Enabled = 3;
    // Channel ID. Not used, only for backwards compatibility.
    string Id = 4;
    // Is this channel archived
    boolean IsArchived = 5;
    // Who last updated this entry
    string LastModifiedBy = 6;
    // Last date this was updated
    string LastModifiedDate = 7;
    // Platform type. Will be "SMS"
    string Platform = 8;
    // Sender identifier of your messages.
    string SenderId = 9;
    // The short code registered with the phone provider.
    string ShortCode = 10;
    // Version of channel
    integer Version = 11;
}

message SMSMessage {
    // The message body of the notification, the email body or the text message.
    string Body = 1;
    // Is this a transaction priority message or lower priority.
    MessageType MessageType = 2;
    // Sender ID of sent message.
    string SenderId = 3;
    // Default message substitutions. Can be overridden by individual address substitutions.
    array Substitutions = 4;
}

message Schedule {
    // The scheduled time that the campaign ends in ISO 8601 format.
    string EndTime = 1;
    // How often the campaign delivers messages.
    // 
    // Valid values: ONCE, HOURLY, DAILY, WEEKLY, MONTHLY
    Frequency Frequency = 2;
    // Indicates whether the campaign schedule takes effect according to each user's local time.
    boolean IsLocalTime = 3;
    // The time during which the campaign sends no messages.
    QuietTime QuietTime = 4;
    // The scheduled time that the campaign begins in ISO 8601 format.
    string StartTime = 5;
    // The starting UTC offset for the schedule if the value for isLocalTime is true
    // 
    // Valid values: 
    // UTC
    // UTC+01
    // UTC+02
    // UTC+03
    // UTC+03:30
    // UTC+04
    // UTC+04:30
    // UTC+05
    // UTC+05:30
    // UTC+05:45
    // UTC+06
    // UTC+06:30
    // UTC+07
    // UTC+08
    // UTC+09
    // UTC+09:30
    // UTC+10
    // UTC+10:30
    // UTC+11
    // UTC+12
    // UTC+13
    // UTC-02
    // UTC-03
    // UTC-04
    // UTC-05
    // UTC-06
    // UTC-07
    // UTC-08
    // UTC-09
    // UTC-10
    // UTC-11
    string Timezone = 6;
}

message SegmentBehaviors {
    // The recency of use.
    RecencyDimension Recency = 1;
}

message SegmentDemographics {
    // The app version criteria for the segment.
    SetDimension AppVersion = 1;
    // The channel criteria for the segment.
    SetDimension Channel = 2;
    // The device type criteria for the segment.
    SetDimension DeviceType = 3;
    // The device make criteria for the segment.
    SetDimension Make = 4;
    // The device model criteria for the segment.
    SetDimension Model = 5;
    // The device platform criteria for the segment.
    SetDimension Platform = 6;
}

message SegmentDimensions {
    // Custom segment attributes.
    array Attributes = 1;
    // The segment behaviors attributes.
    SegmentBehaviors Behavior = 2;
    // The segment demographics attributes.
    SegmentDemographics Demographic = 3;
    // The segment location attributes.
    SegmentLocation Location = 4;
    // Custom segment user attributes.
    array UserAttributes = 5;
}

message SegmentImportResource {
    // Channel type counts
    array ChannelCounts = 1;
    // A unique, custom ID assigned to the IAM role that restricts who can assume the role.
    string ExternalId = 2;
    // The format of the endpoint files that were imported to create this segment.
    // Valid values: CSV, JSON
    Format Format = 3;
    // The Amazon Resource Name (ARN) of an IAM role that grants Amazon Pinpoint access to the endpoints in Amazon S3.
    string RoleArn = 4;
    // A URL that points to the Amazon S3 location from which the endpoints for this segment were imported.
    string S3Url = 5;
    // The number of endpoints that were successfully imported to create this segment.
    integer Size = 6;
}

message SegmentLocation {
    // The country filter according to ISO 3166-1 Alpha-2 codes.
    SetDimension Country = 1;
}

message SegmentResponse {
    // The ID of the application to which the segment applies.
    string ApplicationId = 1;
    // The date the segment was created in ISO 8601 format.
    string CreationDate = 2;
    // The segment dimensions attributes.
    SegmentDimensions Dimensions = 3;
    // The unique segment ID.
    string Id = 4;
    // The import job settings.
    SegmentImportResource ImportDefinition = 5;
    // The date the segment was last updated in ISO 8601 format.
    string LastModifiedDate = 6;
    // The name of segment
    string Name = 7;
    // The segment type:
    // DIMENSIONAL - A dynamic segment built from selection criteria based on endpoint data reported by your app. You create this type of segment by using the segment builder in the Amazon Pinpoint console or by making a POST request to the segments resource.
    // IMPORT - A static segment built from an imported set of endpoint definitions. You create this type of segment by importing a segment in the Amazon Pinpoint console or by making a POST request to the jobs/import resource.
    SegmentType SegmentType = 8;
    // The segment version number.
    integer Version = 9;
}

enum SegmentType {
    DIMENSIONAL = 0;
    IMPORT = 1;
}

message SegmentsResponse {
    // The list of segments.
    array Item = 1;
    // An identifier used to retrieve the next page of results. The token is null if no additional pages exist.
    string NextToken = 2;
}

message SendMessagesRequest {
    MessageRequest MessageRequest = 1;
}

message SendMessagesResponse {
    MessageResponse MessageResponse = 1;
}

message SendUsersMessageRequest {
    // A map of custom attributes to attributes to be attached to the message. This payload is added to the push notification's 'data.pinpoint' object or added to the email/sms delivery receipt event attributes.
    array Context = 1;
    // Message configuration.
    DirectMessageConfiguration MessageConfiguration = 2;
    // Original request Id for which this message is delivered.
    string RequestId = 3;
    // A map of destination endpoints, with the EndpointId as the key Endpoint Message Configuration as the value.
    array Users = 4;
}

message SendUsersMessageResponse {
    // Application id of the message.
    string ApplicationId = 1;
    // Original request Id for which this message was delivered.
    string RequestId = 2;
    // A map containing of UserId to Map of EndpointId to Endpoint Message Result.
    array Result = 3;
}

message SendUsersMessagesRequest {
    SendUsersMessageRequest SendUsersMessageRequest = 1;
}

message SendUsersMessagesResponse {
    SendUsersMessageResponse SendUsersMessageResponse = 1;
}

message SetDimension {
    // The type of dimension:
    // INCLUSIVE - Endpoints that match the criteria are included in the segment.
    // EXCLUSIVE - Endpoints that match the criteria are excluded from the segment.
    DimensionType DimensionType = 1;
    // The criteria values for the segment dimension. Endpoints with matching attribute values are included or excluded from the segment, depending on the setting for Type.
    array Values = 2;
}

message TooManyRequestsException {
    // The error message returned from the API.
    string Message = 1;
    // The unique message body ID.
    string RequestID = 2;
}

message TreatmentResource {
    // The unique treatment ID.
    string Id = 1;
    // The message configuration settings.
    MessageConfiguration MessageConfiguration = 2;
    // The campaign schedule.
    Schedule Schedule = 3;
    // The allocated percentage of users for this treatment.
    integer SizePercent = 4;
    // The treatment status.
    CampaignState State = 5;
    // A custom description for the treatment.
    string TreatmentDescription = 6;
    // The custom name of a variation of the campaign used for A/B testing.
    string TreatmentName = 7;
}

message UpdateAdmChannelRequest {
    ADMChannelRequest ADMChannelRequest = 1;
}

message UpdateAdmChannelResponse {
    ADMChannelResponse ADMChannelResponse = 1;
}

message UpdateApnsChannelRequest {
    APNSChannelRequest APNSChannelRequest = 1;
}

message UpdateApnsChannelResponse {
    APNSChannelResponse APNSChannelResponse = 1;
}

message UpdateApnsSandboxChannelRequest {
    APNSSandboxChannelRequest APNSSandboxChannelRequest = 1;
}

message UpdateApnsSandboxChannelResponse {
    APNSSandboxChannelResponse APNSSandboxChannelResponse = 1;
}

message UpdateApplicationSettingsRequest {
    WriteApplicationSettingsRequest WriteApplicationSettingsRequest = 1;
}

message UpdateApplicationSettingsResponse {
    ApplicationSettingsResource ApplicationSettingsResource = 1;
}

message UpdateBaiduChannelRequest {
    BaiduChannelRequest BaiduChannelRequest = 1;
}

message UpdateBaiduChannelResponse {
    BaiduChannelResponse BaiduChannelResponse = 1;
}

message UpdateCampaignRequest {
    WriteCampaignRequest WriteCampaignRequest = 1;
}

message UpdateCampaignResponse {
    CampaignResponse CampaignResponse = 1;
}

message UpdateEmailChannelRequest {
    EmailChannelRequest EmailChannelRequest = 1;
}

message UpdateEmailChannelResponse {
    EmailChannelResponse EmailChannelResponse = 1;
}

message UpdateEndpointRequest {
    EndpointRequest EndpointRequest = 1;
}

message UpdateEndpointResponse {
    MessageBody MessageBody = 1;
}

message UpdateEndpointsBatchRequest {
    EndpointBatchRequest EndpointBatchRequest = 1;
}

message UpdateEndpointsBatchResponse {
    MessageBody MessageBody = 1;
}

message UpdateGcmChannelRequest {
    GCMChannelRequest GCMChannelRequest = 1;
}

message UpdateGcmChannelResponse {
    GCMChannelResponse GCMChannelResponse = 1;
}

message UpdateSegmentRequest {
    WriteSegmentRequest WriteSegmentRequest = 1;
}

message UpdateSegmentResponse {
    SegmentResponse SegmentResponse = 1;
}

message UpdateSmsChannelRequest {
    SMSChannelRequest SMSChannelRequest = 1;
}

message UpdateSmsChannelResponse {
    SMSChannelResponse SMSChannelResponse = 1;
}

message WriteApplicationSettingsRequest {
    // The default campaign limits for the app. These limits apply to each campaign for the app, unless the campaign overrides the default with limits of its own.
    CampaignLimits Limits = 1;
    // The default quiet time for the app. Each campaign for this app sends no messages during this time unless the campaign overrides the default with a quiet time of its own.
    QuietTime QuietTime = 2;
}

message WriteCampaignRequest {
    // Treatments that are defined in addition to the default treatment.
    array AdditionalTreatments = 1;
    // A description of the campaign.
    string Description = 2;
    // The allocated percentage of end users who will not receive messages from this campaign.
    integer HoldoutPercent = 3;
    // Indicates whether the campaign is paused. A paused campaign does not send messages unless you resume it by setting IsPaused to false.
    boolean IsPaused = 4;
    // The campaign limits settings.
    CampaignLimits Limits = 5;
    // The message configuration settings.
    MessageConfiguration MessageConfiguration = 6;
    // The custom name of the campaign.
    string Name = 7;
    // The campaign schedule.
    Schedule Schedule = 8;
    // The ID of the segment to which the campaign sends messages.
    string SegmentId = 9;
    // The version of the segment to which the campaign sends messages.
    integer SegmentVersion = 10;
    // Whether or not to enable trace logging for the campaign. Undocumented
    boolean Trace = 11;
    // A custom description for the treatment.
    string TreatmentDescription = 12;
    // The custom name of a variation of the campaign used for A/B testing.
    string TreatmentName = 13;
}

message WriteEventStream {
    // The Amazon Resource Name (ARN) of the Amazon Kinesis stream or Firehose delivery stream to which you want to publish events.
    //  Firehose ARN: arn:aws:firehose:REGION:ACCOUNT_ID:deliverystream/STREAM_NAME
    //  Kinesis ARN: arn:aws:kinesis:REGION:ACCOUNT_ID:stream/STREAM_NAME
    string DestinationStreamArn = 1;
    // The external ID assigned the IAM role that authorizes Amazon Pinpoint to publish to the stream.
    string ExternalId = 2;
    // The IAM role that authorizes Amazon Pinpoint to publish events to the stream in your account.
    string RoleArn = 3;
}

message WriteSegmentRequest {
    // The segment dimensions attributes.
    SegmentDimensions Dimensions = 1;
    // The name of segment
    string Name = 2;
}

message WriteTreatmentResource {
    // The message configuration settings.
    MessageConfiguration MessageConfiguration = 1;
    // The campaign schedule.
    Schedule Schedule = 2;
    // The allocated percentage of users for this treatment.
    integer SizePercent = 3;
    // A custom description for the treatment.
    string TreatmentDescription = 4;
    // The custom name of a variation of the campaign used for A/B testing.
    string TreatmentName = 5;
}

service AmazonPinpointService {
    // Returns information about your apps.
    rpc GetV1Apps(GetV1AppsRequest) returns (GetAppsResponse) {
      option (google.api.http) = {
        get: "//v1/apps"
        body: "body"
      };
    }
    // Returns information about an app.
    rpc GetV1AppsApplicationId(GetV1AppsApplicationIdRequest) returns (GetAppResponse) {
      option (google.api.http) = {
        get: "//v1/apps/{application-id}"
        body: "body"
      };
    }
    // Returns information about your campaigns.
    rpc GetV1AppsApplicationIdCampaigns(GetV1AppsApplicationIdCampaignsRequest) returns (GetCampaignsResponse) {
      option (google.api.http) = {
        get: "//v1/apps/{application-id}/campaigns"
        body: "body"
      };
    }
    // Use to update a campaign.
    rpc PutV1AppsApplicationIdCampaignsCampaignId(PutV1AppsApplicationIdCampaignsCampaignIdRequest) returns (UpdateCampaignResponse) {
      option (google.api.http) = {
        put: "//v1/apps/{application-id}/campaigns/{campaign-id}"
        body: "body"
      };
    }
    // Returns information about the activity performed by a campaign.
    rpc GetV1AppsApplicationIdCampaignsCampaignIdActivities(GetV1AppsApplicationIdCampaignsCampaignIdActivitiesRequest) returns (GetCampaignActivitiesResponse) {
      option (google.api.http) = {
        get: "//v1/apps/{application-id}/campaigns/{campaign-id}/activities"
        body: "body"
      };
    }
    // Returns information about your campaign versions.
    rpc GetV1AppsApplicationIdCampaignsCampaignIdVersions(GetV1AppsApplicationIdCampaignsCampaignIdVersionsRequest) returns (GetCampaignVersionsResponse) {
      option (google.api.http) = {
        get: "//v1/apps/{application-id}/campaigns/{campaign-id}/versions"
        body: "body"
      };
    }
    // Returns information about a specific version of a campaign.
    rpc GetV1AppsApplicationIdCampaignsCampaignIdVersionsVersion(GetV1AppsApplicationIdCampaignsCampaignIdVersionsVersionRequest) returns (GetCampaignVersionResponse) {
      option (google.api.http) = {
        get: "//v1/apps/{application-id}/campaigns/{campaign-id}/versions/{version}"
        body: "body"
      };
    }
    // Update an ADM channel
    rpc PutV1AppsApplicationIdChannelsAdm(PutV1AppsApplicationIdChannelsAdmRequest) returns (UpdateAdmChannelResponse) {
      option (google.api.http) = {
        put: "//v1/apps/{application-id}/channels/adm"
        body: "body"
      };
    }
    // Use to update the APNs channel for an app.
    rpc PutV1AppsApplicationIdChannelsApns(PutV1AppsApplicationIdChannelsApnsRequest) returns (UpdateApnsChannelResponse) {
      option (google.api.http) = {
        put: "//v1/apps/{application-id}/channels/apns"
        body: "body"
      };
    }
    // Update an APNS sandbox channel
    rpc PutV1AppsApplicationIdChannelsApns_sandbox(PutV1AppsApplicationIdChannelsApns_sandboxRequest) returns (UpdateApnsSandboxChannelResponse) {
      option (google.api.http) = {
        put: "//v1/apps/{application-id}/channels/apns_sandbox"
        body: "body"
      };
    }
    // Update a BAIDU GCM channel
    rpc PutV1AppsApplicationIdChannelsBaidu(PutV1AppsApplicationIdChannelsBaiduRequest) returns (UpdateBaiduChannelResponse) {
      option (google.api.http) = {
        put: "//v1/apps/{application-id}/channels/baidu"
        body: "body"
      };
    }
    // Update an email channel
    rpc PutV1AppsApplicationIdChannelsEmail(PutV1AppsApplicationIdChannelsEmailRequest) returns (UpdateEmailChannelResponse) {
      option (google.api.http) = {
        put: "//v1/apps/{application-id}/channels/email"
        body: "body"
      };
    }
    // Use to update the GCM channel for an app.
    rpc PutV1AppsApplicationIdChannelsGcm(PutV1AppsApplicationIdChannelsGcmRequest) returns (UpdateGcmChannelResponse) {
      option (google.api.http) = {
        put: "//v1/apps/{application-id}/channels/gcm"
        body: "body"
      };
    }
    // Update an SMS channel
    rpc PutV1AppsApplicationIdChannelsSms(PutV1AppsApplicationIdChannelsSmsRequest) returns (UpdateSmsChannelResponse) {
      option (google.api.http) = {
        put: "//v1/apps/{application-id}/channels/sms"
        body: "body"
      };
    }
    // Use to update a batch of endpoints.
    rpc PutV1AppsApplicationIdEndpoints(PutV1AppsApplicationIdEndpointsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "//v1/apps/{application-id}/endpoints"
        body: "body"
      };
    }
    // Use to update an endpoint.
    rpc PutV1AppsApplicationIdEndpointsEndpointId(PutV1AppsApplicationIdEndpointsEndpointIdRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "//v1/apps/{application-id}/endpoints/{endpoint-id}"
        body: "body"
      };
    }
    // Use to create or update the event stream for an app.
    rpc PostV1AppsApplicationIdEventstream(PostV1AppsApplicationIdEventstreamRequest) returns (PutEventStreamResponse) {
      option (google.api.http) = {
        post: "//v1/apps/{application-id}/eventstream"
        body: "body"
      };
    }
    // Returns information about your import jobs.
    rpc GetV1AppsApplicationIdJobsImport(GetV1AppsApplicationIdJobsImportRequest) returns (GetImportJobsResponse) {
      option (google.api.http) = {
        get: "//v1/apps/{application-id}/jobs/import"
        body: "body"
      };
    }
    // Returns information about an import job.
    rpc GetV1AppsApplicationIdJobsImportJobId(GetV1AppsApplicationIdJobsImportJobIdRequest) returns (GetImportJobResponse) {
      option (google.api.http) = {
        get: "//v1/apps/{application-id}/jobs/import/{job-id}"
        body: "body"
      };
    }
    // Send a batch of messages
    rpc PostV1AppsApplicationIdMessages(PostV1AppsApplicationIdMessagesRequest) returns (SendMessagesResponse) {
      option (google.api.http) = {
        post: "//v1/apps/{application-id}/messages"
        body: "body"
      };
    }
    // Used to get information about your segments.
    rpc GetV1AppsApplicationIdSegments(GetV1AppsApplicationIdSegmentsRequest) returns (GetSegmentsResponse) {
      option (google.api.http) = {
        get: "//v1/apps/{application-id}/segments"
        body: "body"
      };
    }
    // Use to update a segment.
    rpc PutV1AppsApplicationIdSegmentsSegmentId(PutV1AppsApplicationIdSegmentsSegmentIdRequest) returns (UpdateSegmentResponse) {
      option (google.api.http) = {
        put: "//v1/apps/{application-id}/segments/{segment-id}"
        body: "body"
      };
    }
    // Returns a list of import jobs for a specific segment.
    rpc GetV1AppsApplicationIdSegmentsSegmentIdJobsImport(GetV1AppsApplicationIdSegmentsSegmentIdJobsImportRequest) returns (GetSegmentImportJobsResponse) {
      option (google.api.http) = {
        get: "//v1/apps/{application-id}/segments/{segment-id}/jobs/import"
        body: "body"
      };
    }
    // Returns information about your segment versions.
    rpc GetV1AppsApplicationIdSegmentsSegmentIdVersions(GetV1AppsApplicationIdSegmentsSegmentIdVersionsRequest) returns (GetSegmentVersionsResponse) {
      option (google.api.http) = {
        get: "//v1/apps/{application-id}/segments/{segment-id}/versions"
        body: "body"
      };
    }
    // Returns information about a segment version.
    rpc GetV1AppsApplicationIdSegmentsSegmentIdVersionsVersion(GetV1AppsApplicationIdSegmentsSegmentIdVersionsVersionRequest) returns (GetSegmentVersionResponse) {
      option (google.api.http) = {
        get: "//v1/apps/{application-id}/segments/{segment-id}/versions/{version}"
        body: "body"
      };
    }
    // Used to update the settings for an app.
    rpc PutV1AppsApplicationIdSettings(PutV1AppsApplicationIdSettingsRequest) returns (UpdateApplicationSettingsResponse) {
      option (google.api.http) = {
        put: "//v1/apps/{application-id}/settings"
        body: "body"
      };
    }
    // Send a batch of messages to users
    rpc PostV1AppsApplicationIdUsersMessages(PostV1AppsApplicationIdUsersMessagesRequest) returns (SendUsersMessagesResponse) {
      option (google.api.http) = {
        post: "//v1/apps/{application-id}/users-messages"
        body: "body"
      };
    }
}

syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package amazoncognitoidentityprovider;

message PostRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AddCustomAttributesRequest body = 10;
}

message Post#AdminAddUserToGroupRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AdminAddUserToGroupRequest body = 10;
}

message Post#AdminConfirmSignUpRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AdminConfirmSignUpRequest body = 10;
}

message Post#AdminCreateUserRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AdminCreateUserRequest body = 10;
}

message Post#AdminDeleteUserRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AdminDeleteUserRequest body = 10;
}

message Post#AdminDeleteUserAttributesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AdminDeleteUserAttributesRequest body = 10;
}

message Post#AdminDisableProviderForUserRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AdminDisableProviderForUserRequest body = 10;
}

message Post#AdminDisableUserRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AdminDisableUserRequest body = 10;
}

message Post#AdminEnableUserRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AdminEnableUserRequest body = 10;
}

message Post#AdminForgetDeviceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AdminForgetDeviceRequest body = 10;
}

message Post#AdminGetDeviceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AdminGetDeviceRequest body = 10;
}

message Post#AdminGetUserRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AdminGetUserRequest body = 10;
}

message Post#AdminInitiateAuthRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AdminInitiateAuthRequest body = 10;
}

message Post#AdminLinkProviderForUserRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AdminLinkProviderForUserRequest body = 10;
}

message Post#AdminListDevicesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AdminListDevicesRequest body = 10;
}

message Post#AdminListGroupsForUserRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AdminListGroupsForUserRequest body = 10;
}

message Post#AdminRemoveUserFromGroupRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AdminRemoveUserFromGroupRequest body = 10;
}

message Post#AdminResetUserPasswordRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AdminResetUserPasswordRequest body = 10;
}

message Post#AdminRespondToAuthChallengeRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AdminRespondToAuthChallengeRequest body = 10;
}

message Post#AdminSetUserSettingsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AdminSetUserSettingsRequest body = 10;
}

message Post#AdminUpdateDeviceStatusRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AdminUpdateDeviceStatusRequest body = 10;
}

message Post#AdminUpdateUserAttributesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AdminUpdateUserAttributesRequest body = 10;
}

message Post#AdminUserGlobalSignOutRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    AdminUserGlobalSignOutRequest body = 10;
}

message Post#ChangePasswordRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ChangePasswordRequest body = 10;
}

message Post#ConfirmDeviceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ConfirmDeviceRequest body = 10;
}

message Post#ConfirmForgotPasswordRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ConfirmForgotPasswordRequest body = 10;
}

message Post#ConfirmSignUpRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ConfirmSignUpRequest body = 10;
}

message Post#CreateGroupRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateGroupRequest body = 10;
}

message Post#CreateIdentityProviderRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateIdentityProviderRequest body = 10;
}

message Post#CreateResourceServerRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateResourceServerRequest body = 10;
}

message Post#CreateUserImportJobRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateUserImportJobRequest body = 10;
}

message Post#CreateUserPoolRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateUserPoolRequest body = 10;
}

message Post#CreateUserPoolClientRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateUserPoolClientRequest body = 10;
}

message Post#CreateUserPoolDomainRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateUserPoolDomainRequest body = 10;
}

message Post#DeleteGroupRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteGroupRequest body = 10;
}

message Post#DeleteIdentityProviderRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteIdentityProviderRequest body = 10;
}

message Post#DeleteResourceServerRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteResourceServerRequest body = 10;
}

message Post#DeleteUserRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteUserRequest body = 10;
}

message Post#DeleteUserAttributesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteUserAttributesRequest body = 10;
}

message Post#DeleteUserPoolRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteUserPoolRequest body = 10;
}

message Post#DeleteUserPoolClientRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteUserPoolClientRequest body = 10;
}

message Post#DeleteUserPoolDomainRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteUserPoolDomainRequest body = 10;
}

message Post#DescribeIdentityProviderRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeIdentityProviderRequest body = 10;
}

message Post#DescribeResourceServerRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeResourceServerRequest body = 10;
}

message Post#DescribeUserImportJobRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeUserImportJobRequest body = 10;
}

message Post#DescribeUserPoolRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeUserPoolRequest body = 10;
}

message Post#DescribeUserPoolClientRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeUserPoolClientRequest body = 10;
}

message Post#DescribeUserPoolDomainRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeUserPoolDomainRequest body = 10;
}

message Post#ForgetDeviceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ForgetDeviceRequest body = 10;
}

message Post#ForgotPasswordRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ForgotPasswordRequest body = 10;
}

message Post#GetCSVHeaderRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetCSVHeaderRequest body = 10;
}

message Post#GetDeviceRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetDeviceRequest body = 10;
}

message Post#GetGroupRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetGroupRequest body = 10;
}

message Post#GetIdentityProviderByIdentifierRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetIdentityProviderByIdentifierRequest body = 10;
}

message Post#GetUICustomizationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetUICustomizationRequest body = 10;
}

message Post#GetUserRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetUserRequest body = 10;
}

message Post#GetUserAttributeVerificationCodeRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GetUserAttributeVerificationCodeRequest body = 10;
}

message Post#GlobalSignOutRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    GlobalSignOutRequest body = 10;
}

message Post#InitiateAuthRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    InitiateAuthRequest body = 10;
}

message Post#ListDevicesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListDevicesRequest body = 10;
}

message Post#ListGroupsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListGroupsRequest body = 10;
}

message Post#ListIdentityProvidersRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListIdentityProvidersRequest body = 10;
}

message Post#ListResourceServersRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListResourceServersRequest body = 10;
}

message Post#ListUserImportJobsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListUserImportJobsRequest body = 10;
}

message Post#ListUserPoolClientsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListUserPoolClientsRequest body = 10;
}

message Post#ListUserPoolsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListUserPoolsRequest body = 10;
}

message Post#ListUsersRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListUsersRequest body = 10;
}

message Post#ListUsersInGroupRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListUsersInGroupRequest body = 10;
}

message Post#ResendConfirmationCodeRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ResendConfirmationCodeRequest body = 10;
}

message Post#RespondToAuthChallengeRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RespondToAuthChallengeRequest body = 10;
}

message Post#SetUICustomizationRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    SetUICustomizationRequest body = 10;
}

message Post#SetUserSettingsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    SetUserSettingsRequest body = 10;
}

message Post#SignUpRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    SignUpRequest body = 10;
}

message Post#StartUserImportJobRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StartUserImportJobRequest body = 10;
}

message Post#StopUserImportJobRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    StopUserImportJobRequest body = 10;
}

message Post#UpdateDeviceStatusRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateDeviceStatusRequest body = 10;
}

message Post#UpdateGroupRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateGroupRequest body = 10;
}

message Post#UpdateIdentityProviderRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateIdentityProviderRequest body = 10;
}

message Post#UpdateResourceServerRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateResourceServerRequest body = 10;
}

message Post#UpdateUserAttributesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateUserAttributesRequest body = 10;
}

message Post#UpdateUserPoolRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateUserPoolRequest body = 10;
}

message Post#UpdateUserPoolClientRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateUserPoolClientRequest body = 10;
}

message Post#VerifyUserAttributeRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    VerifyUserAttributeRequest body = 10;
}

message AddCustomAttributesRequest {
    // An array of custom attributes, such as Mutable and Name.
    array CustomAttributes = 1;
    // The user pool ID for the user pool where you want to add custom attributes.
    string UserPoolId = 2;
}

message AddCustomAttributesResponse {
}

message AdminAddUserToGroupRequest {
    // The group name.
    string GroupName = 1;
    // The user pool ID for the user pool.
    string UserPoolId = 2;
    // The username for the user.
    string Username = 3;
}

message AdminConfirmSignUpRequest {
    // The user pool ID for which you want to confirm user registration.
    string UserPoolId = 1;
    // The user name for which you want to confirm user registration.
    string Username = 2;
}

message AdminConfirmSignUpResponse {
}

message AdminCreateUserConfigType {
    // Set to <code>True</code> if only the administrator is allowed to create user profiles. Set to <code>False</code> if users can sign themselves up via an app.
    boolean AllowAdminCreateUserOnly = 1;
    // The message template to be used for the welcome message to new users.
    MessageTemplateType InviteMessageTemplate = 2;
    // The user account expiration limit, in days, after which the account is no longer usable. To reset the account after that time limit, you must call <code>AdminCreateUser</code> again, specifying <code>"RESEND"</code> for the <code>MessageAction</code> parameter. The default value for this parameter is 7.
    integer UnusedAccountValidityDays = 3;
}

message AdminCreateUserRequest {
    // Specify <code>"EMAIL"</code> if email will be used to send the welcome message. Specify <code>"SMS"</code> if the phone number will be used. The default value is <code>"SMS"</code>. More than one value can be specified.
    array DesiredDeliveryMediums = 1;
    // <p>This parameter is only used if the <code>phone_number_verified</code> or <code>email_verified</code> attribute is set to <code>True</code>. Otherwise, it is ignored.</p> <p>If this parameter is set to <code>True</code> and the phone number or email address specified in the UserAttributes parameter already exists as an alias with a different user, the API call will migrate the alias from the previous user to the newly created user. The previous user will no longer be able to log in using that alias.</p> <p>If this parameter is set to <code>False</code>, the API throws an <code>AliasExistsException</code> error if the alias already exists. The default value is <code>False</code>.</p>
    boolean ForceAliasCreation = 2;
    // Set to <code>"RESEND"</code> to resend the invitation message to a user that already exists and reset the expiration limit on the user's account. Set to <code>"SUPPRESS"</code> to suppress sending the message. Only one value can be specified.
    MessageActionType MessageAction = 3;
    // <p>The user's temporary password. This password must conform to the password policy that you specified when you created the user pool.</p> <p>The temporary password is valid only once. To complete the Admin Create User flow, the user must enter the temporary password in the sign-in page along with a new password to be used in all future sign-ins.</p> <p>This parameter is not required. If you do not specify a value, Amazon Cognito generates one for you.</p> <p>The temporary password can only be used until the user account expiration limit that you specified when you created the user pool. To reset the account after that time limit, you must call <code>AdminCreateUser</code> again, specifying <code>"RESEND"</code> for the <code>MessageAction</code> parameter.</p>
    string TemporaryPassword = 4;
    // <p>An array of name-value pairs that contain user attributes and attribute values to be set for the user to be created. You can create a user without specifying any attributes other than <code>Username</code>. However, any attributes that you specify as required (in <a href="API_CreateUserPool.html">CreateUserPool</a> or in the <b>Attributes</b> tab of the console) must be supplied either by you (in your call to <code>AdminCreateUser</code>) or by the user (when he or she signs up in response to your welcome message).</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p> <p>To send a message inviting the user to sign up, you must specify the user's email address or phone number. This can be done in your call to AdminCreateUser or in the <b>Users</b> tab of the Amazon Cognito console for managing your user pools.</p> <p>In your call to <code>AdminCreateUser</code>, you can set the <code>email_verified</code> attribute to <code>True</code>, and you can set the <code>phone_number_verified</code> attribute to <code>True</code>. (You can also do this by calling <a href="API_AdminUpdateUserAttributes.html">AdminUpdateUserAttributes</a>.)</p> <ul> <li> <p> <b>email</b>: The email address of the user to whom the message that contains the code and username will be sent. Required if the <code>email_verified</code> attribute is set to <code>True</code>, or if <code>"EMAIL"</code> is specified in the <code>DesiredDeliveryMediums</code> parameter.</p> </li> <li> <p> <b>phone_number</b>: The phone number of the user to whom the message that contains the code and username will be sent. Required if the <code>phone_number_verified</code> attribute is set to <code>True</code>, or if <code>"SMS"</code> is specified in the <code>DesiredDeliveryMediums</code> parameter.</p> </li> </ul>
    array UserAttributes = 5;
    // The user pool ID for the user pool where the user will be created.
    string UserPoolId = 6;
    // The username for the user. Must be unique within the user pool. Must be a UTF-8 string between 1 and 128 characters. After the user is created, the username cannot be changed.
    string Username = 7;
    // <p>The user's validation data. This is an array of name-value pairs that contain user attributes and attribute values that you can use for custom validation, such as restricting the types of user accounts that can be registered. For example, you might choose to allow or disallow user sign-up based on the user's domain.</p> <p>To configure custom validation, you must create a Pre Sign-up Lambda trigger for the user pool as described in the Amazon Cognito Developer Guide. The Lambda trigger receives the validation data and uses it in the validation process.</p> <p>The user's validation data is not persisted.</p>
    array ValidationData = 8;
}

message AdminCreateUserResponse {
    // The newly created user.
    UserType User = 1;
}

message AdminDeleteUserAttributesRequest {
    // <p>An array of strings representing the user attribute names you wish to delete.</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>
    array UserAttributeNames = 1;
    // The user pool ID for the user pool where you want to delete user attributes.
    string UserPoolId = 2;
    // The user name of the user from which you would like to delete attributes.
    string Username = 3;
}

message AdminDeleteUserAttributesResponse {
}

message AdminDeleteUserRequest {
    // The user pool ID for the user pool where you want to delete the user.
    string UserPoolId = 1;
    // The user name of the user you wish to delete.
    string Username = 2;
}

message AdminDisableProviderForUserRequest {
    // The user to be disabled.
    ProviderUserIdentifierType User = 1;
    // The user pool ID for the user pool.
    string UserPoolId = 2;
}

message AdminDisableProviderForUserResponse {
}

message AdminDisableUserRequest {
    // The user pool ID for the user pool where you want to disable the user.
    string UserPoolId = 1;
    // The user name of the user you wish to disable.
    string Username = 2;
}

message AdminDisableUserResponse {
}

message AdminEnableUserRequest {
    // The user pool ID for the user pool where you want to enable the user.
    string UserPoolId = 1;
    // The user name of the user you wish to enable.
    string Username = 2;
}

message AdminEnableUserResponse {
}

message AdminForgetDeviceRequest {
    // The device key.
    string DeviceKey = 1;
    // The user pool ID.
    string UserPoolId = 2;
    // The user name.
    string Username = 3;
}

message AdminGetDeviceRequest {
    // The device key.
    string DeviceKey = 1;
    // The user pool ID.
    string UserPoolId = 2;
    // The user name.
    string Username = 3;
}

message AdminGetDeviceResponse {
    // The device.
    DeviceType Device = 1;
}

message AdminGetUserRequest {
    // The user pool ID for the user pool where you want to get information about the user.
    string UserPoolId = 1;
    // The user name of the user you wish to retrieve.
    string Username = 2;
}

message AdminGetUserResponse {
    // Indicates that the status is enabled.
    boolean Enabled = 1;
    // Specifies the options for MFA (e.g., email or phone number).
    array MFAOptions = 2;
    // An array of name-value pairs representing user attributes.
    array UserAttributes = 3;
    // The date the user was created.
    string UserCreateDate = 4;
    // The date the user was last modified.
    string UserLastModifiedDate = 5;
    // <p>The user status. Can be one of the following:</p> <ul> <li> <p>UNCONFIRMED - User has been created but not confirmed.</p> </li> <li> <p>CONFIRMED - User has been confirmed.</p> </li> <li> <p>ARCHIVED - User is no longer active.</p> </li> <li> <p>COMPROMISED - User is disabled due to a potential security threat.</p> </li> <li> <p>UNKNOWN - User status is not known.</p> </li> </ul>
    UserStatusType UserStatus = 6;
    // The user name of the user about whom you are receiving information.
    string Username = 7;
}

message AdminInitiateAuthRequest {
    // <p>The authentication flow for this call to execute. The API action will depend on this value. For example:</p> <ul> <li> <p> <code>REFRESH_TOKEN_AUTH</code> will take in a valid refresh token and return new tokens.</p> </li> <li> <p> <code>USER_SRP_AUTH</code> will take in <code>USERNAME</code> and <code>SRP_A</code> and return the SRP variables to be used for next challenge execution.</p> </li> </ul> <p>Valid values include:</p> <ul> <li> <p> <code>USER_SRP_AUTH</code>: Authentication flow for the Secure Remote Password (SRP) protocol.</p> </li> <li> <p> <code>REFRESH_TOKEN_AUTH</code>/<code>REFRESH_TOKEN</code>: Authentication flow for refreshing the access token and ID token by supplying a valid refresh token.</p> </li> <li> <p> <code>CUSTOM_AUTH</code>: Custom authentication flow.</p> </li> <li> <p> <code>ADMIN_NO_SRP_AUTH</code>: Non-SRP authentication flow; you can pass in the USERNAME and PASSWORD directly if the flow is enabled for calling the app client.</p> </li> </ul>
    AuthFlowType AuthFlow = 1;
    // <p>The authentication parameters. These are inputs corresponding to the <code>AuthFlow</code> that you are invoking. The required values depend on the value of <code>AuthFlow</code>:</p> <ul> <li> <p>For <code>USER_SRP_AUTH</code>: <code>USERNAME</code> (required), <code>SRP_A</code> (required), <code>SECRET_HASH</code> (required if the app client is configured with a client secret), <code>DEVICE_KEY</code> </p> </li> <li> <p>For <code>REFRESH_TOKEN_AUTH/REFRESH_TOKEN</code>: <code>USERNAME</code> (required), <code>SECRET_HASH</code> (required if the app client is configured with a client secret), <code>REFRESH_TOKEN</code> (required), <code>DEVICE_KEY</code> </p> </li> <li> <p>For <code>ADMIN_NO_SRP_AUTH</code>: <code>USERNAME</code> (required), <code>SECRET_HASH</code> (if app client is configured with client secret), <code>PASSWORD</code> (required), <code>DEVICE_KEY</code> </p> </li> <li> <p>For <code>CUSTOM_AUTH</code>: <code>USERNAME</code> (required), <code>SECRET_HASH</code> (if app client is configured with client secret), <code>DEVICE_KEY</code> </p> </li> </ul>
    array AuthParameters = 2;
    // The app client ID.
    string ClientId = 3;
    // This is a random key-value pair map which can contain any key and will be passed to your PreAuthentication Lambda trigger as-is. It can be used to implement additional validations around authentication.
    array ClientMetadata = 4;
    // The ID of the Amazon Cognito user pool.
    string UserPoolId = 5;
}

message AdminInitiateAuthResponse {
    // The result of the authentication response. This is only returned if the caller does not need to pass another challenge. If the caller does need to pass another challenge before it gets tokens, <code>ChallengeName</code>, <code>ChallengeParameters</code>, and <code>Session</code> are returned.
    AuthenticationResultType AuthenticationResult = 1;
    // <p>The name of the challenge which you are responding to with this call. This is returned to you in the <code>AdminInitiateAuth</code> response if you need to pass another challenge.</p> <ul> <li> <p> <code>SMS_MFA</code>: Next challenge is to supply an <code>SMS_MFA_CODE</code>, delivered via SMS.</p> </li> <li> <p> <code>PASSWORD_VERIFIER</code>: Next challenge is to supply <code>PASSWORD_CLAIM_SIGNATURE</code>, <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, and <code>TIMESTAMP</code> after the client-side SRP calculations.</p> </li> <li> <p> <code>CUSTOM_CHALLENGE</code>: This is returned if your custom authentication flow determines that the user should pass another challenge before tokens are issued.</p> </li> <li> <p> <code>DEVICE_SRP_AUTH</code>: If device tracking was enabled on your user pool and the previous challenges were passed, this challenge is returned so that Amazon Cognito can start tracking this device.</p> </li> <li> <p> <code>DEVICE_PASSWORD_VERIFIER</code>: Similar to <code>PASSWORD_VERIFIER</code>, but for devices only.</p> </li> <li> <p> <code>ADMIN_NO_SRP_AUTH</code>: This is returned if you need to authenticate with <code>USERNAME</code> and <code>PASSWORD</code> directly. An app client must be enabled to use this flow.</p> </li> <li> <p> <code>NEW_PASSWORD_REQUIRED</code>: For users which are required to change their passwords after successful first login. This challenge should be passed with <code>NEW_PASSWORD</code> and any other required attributes.</p> </li> </ul>
    ChallengeNameType ChallengeName = 2;
    // <p>The challenge parameters. These are returned to you in the <code>AdminInitiateAuth</code> response if you need to pass another challenge. The responses in this parameter should be used to compute inputs to the next call (<code>AdminRespondToAuthChallenge</code>).</p> <p>All challenges require <code>USERNAME</code> and <code>SECRET_HASH</code> (if applicable).</p> <p>The value of the <code>USER_IF_FOR_SRP</code> attribute will be the user's actual username, not an alias (such as email address or phone number), even if you specified an alias in your call to <code>AdminInitiateAuth</code>. This is because, in the <code>AdminRespondToAuthChallenge</code> API <code>ChallengeResponses</code>, the <code>USERNAME</code> attribute cannot be an alias.</p>
    array ChallengeParameters = 3;
    // The session which should be passed both ways in challenge-response calls to the service. If <code>AdminInitiateAuth</code> or <code>AdminRespondToAuthChallenge</code> API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next <code>AdminRespondToAuthChallenge</code> API call.
    string Session = 4;
}

message AdminLinkProviderForUserRequest {
    // <p>The existing user in the user pool to be linked to the external identity provider user account. Can be a native (Username + Password) Cognito User Pools user or a federated user (for example, a SAML or Facebook user). If the user doesn't exist, an exception is thrown. This is the user that is returned when the new user (with the linked identity provider attribute) signs in.</p> <p>The <code>ProviderAttributeValue</code> for the <code>DestinationUser</code> must match the username for the user in the user pool. The <code>ProviderAttributeName</code> will always be ignored.</p>
    ProviderUserIdentifierType DestinationUser = 1;
    // <p>An external identity provider account for a user who does not currently exist yet in the user pool. This user must be a federated user (for example, a SAML or Facebook user), not another native user.</p> <p>If the <code>SourceUser</code> is a federated social identity provider user (Facebook, Google, or Login with Amazon), you must set the <code>ProviderAttributeName</code> to <code>Cognito_Subject</code>. For social identity providers, the <code>ProviderName</code> will be <code>Facebook</code>, <code>Google</code>, or <code>LoginWithAmazon</code>, and Cognito will automatically parse the Facebook, Google, and Login with Amazon tokens for <code>id</code>, <code>sub</code>, and <code>user_id</code>, respectively. The <code>ProviderAttributeValue</code> for the user must be the same value as the <code>id</code>, <code>sub</code>, or <code>user_id</code> value found in the social identity provider token.</p> <p/> <p>For SAML, the <code>ProviderAttributeName</code> can be any value that matches a claim in the SAML assertion. If you wish to link SAML users based on the subject of the SAML assertion, you should map the subject to a claim through the SAML identity provider and submit that claim name as the <code>ProviderAttributeName</code>. If you set <code>ProviderAttributeName</code> to <code>Cognito_Subject</code>, Cognito will automatically parse the default unique identifier found in the subject from the SAML token.</p>
    ProviderUserIdentifierType SourceUser = 2;
    // The user pool ID for the user pool.
    string UserPoolId = 3;
}

message AdminLinkProviderForUserResponse {
}

message AdminListDevicesRequest {
    // The limit of the devices request.
    integer Limit = 1;
    // The pagination token.
    string PaginationToken = 2;
    // The user pool ID.
    string UserPoolId = 3;
    // The user name.
    string Username = 4;
}

message AdminListDevicesResponse {
    // The devices in the list of devices response.
    array Devices = 1;
    // The pagination token.
    string PaginationToken = 2;
}

message AdminListGroupsForUserRequest {
    // The limit of the request to list groups.
    integer Limit = 1;
    // An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    string NextToken = 2;
    // The user pool ID for the user pool.
    string UserPoolId = 3;
    // The username for the user.
    string Username = 4;
}

message AdminListGroupsForUserResponse {
    // The groups that the user belongs to.
    array Groups = 1;
    // An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    string NextToken = 2;
}

message AdminRemoveUserFromGroupRequest {
    // The group name.
    string GroupName = 1;
    // The user pool ID for the user pool.
    string UserPoolId = 2;
    // The username for the user.
    string Username = 3;
}

message AdminResetUserPasswordRequest {
    // The user pool ID for the user pool where you want to reset the user's password.
    string UserPoolId = 1;
    // The user name of the user whose password you wish to reset.
    string Username = 2;
}

message AdminResetUserPasswordResponse {
}

message AdminRespondToAuthChallengeRequest {
    // The challenge name. For more information, see <a href="API_AdminInitiateAuth.html">AdminInitiateAuth</a>.
    ChallengeNameType ChallengeName = 1;
    // <p>The challenge responses. These are inputs corresponding to the value of <code>ChallengeName</code>, for example:</p> <ul> <li> <p> <code>SMS_MFA</code>: <code>SMS_MFA_CODE</code>, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured with client secret).</p> </li> <li> <p> <code>PASSWORD_VERIFIER</code>: <code>PASSWORD_CLAIM_SIGNATURE</code>, <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, <code>TIMESTAMP</code>, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured with client secret).</p> </li> <li> <p> <code>ADMIN_NO_SRP_AUTH</code>: <code>PASSWORD</code>, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured with client secret). </p> </li> <li> <p> <code>NEW_PASSWORD_REQUIRED</code>: <code>NEW_PASSWORD</code>, any other required attributes, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured with client secret). </p> </li> </ul> <p>The value of the <code>USERNAME</code> attribute must be the user's actual username, not an alias (such as email address or phone number). To make this easier, the <code>AdminInitiateAuth</code> response includes the actual username value in the <code>USERNAMEUSER_ID_FOR_SRP</code> attribute, even if you specified an alias in your call to <code>AdminInitiateAuth</code>.</p>
    array ChallengeResponses = 2;
    // The app client ID.
    string ClientId = 3;
    // The session which should be passed both ways in challenge-response calls to the service. If <code>InitiateAuth</code> or <code>RespondToAuthChallenge</code> API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next <code>RespondToAuthChallenge</code> API call.
    string Session = 4;
    // The ID of the Amazon Cognito user pool.
    string UserPoolId = 5;
}

message AdminRespondToAuthChallengeResponse {
    // The result returned by the server in response to the authentication request.
    AuthenticationResultType AuthenticationResult = 1;
    // The name of the challenge. For more information, see <a href="API_AdminInitiateAuth.html">AdminInitiateAuth</a>.
    ChallengeNameType ChallengeName = 2;
    // The challenge parameters. For more information, see <a href="API_AdminInitiateAuth.html">AdminInitiateAuth</a>.
    array ChallengeParameters = 3;
    // The session which should be passed both ways in challenge-response calls to the service. If the <a href="API_InitiateAuth.html">InitiateAuth</a> or <a href="API_RespondToAuthChallenge.html">RespondToAuthChallenge</a> API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next <code>RespondToAuthChallenge</code> API call.
    string Session = 4;
}

message AdminSetUserSettingsRequest {
    // Specifies the options for MFA (e.g., email or phone number).
    array MFAOptions = 1;
    // The user pool ID for the user pool where you want to set the user's settings, such as MFA options.
    string UserPoolId = 2;
    // The user name of the user for whom you wish to set user settings.
    string Username = 3;
}

message AdminSetUserSettingsResponse {
}

message AdminUpdateDeviceStatusRequest {
    // The device key.
    string DeviceKey = 1;
    // The status indicating whether a device has been remembered or not.
    DeviceRememberedStatusType DeviceRememberedStatus = 2;
    // The user pool ID.
    string UserPoolId = 3;
    // The user name.
    string Username = 4;
}

message AdminUpdateDeviceStatusResponse {
}

message AdminUpdateUserAttributesRequest {
    // <p>An array of name-value pairs representing user attributes.</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>
    array UserAttributes = 1;
    // The user pool ID for the user pool where you want to update user attributes.
    string UserPoolId = 2;
    // The user name of the user for whom you want to update user attributes.
    string Username = 3;
}

message AdminUpdateUserAttributesResponse {
}

message AdminUserGlobalSignOutRequest {
    // The user pool ID.
    string UserPoolId = 1;
    // The user name.
    string Username = 2;
}

message AdminUserGlobalSignOutResponse {
}

enum AliasAttributeType {
    PHONE_NUMBER = 0;
    EMAIL = 1;
    PREFERRED_USERNAME = 2;
}

repeated AliasAttributeType AliasAttributesListType = 1

message AliasExistsException {
    // The message sent to the user when an alias exists.
    string message = 1;
}

enum AttributeDataType {
    STRING = 0;
    NUMBER = 1;
    DATETIME = 2;
    BOOLEAN = 3;
}

repeated AttributeType AttributeListType = 1



message AttributeMappingType {
    string key = 1;
    string value = 2;
}
repeated AttributeMappingType AttributeMappingType = 1

repeated string AttributeNameListType = 1



message AttributeType {
    // The name of the attribute.
    string Name = 1;
    // The value of the attribute.
    string Value = 2;
}

enum AuthFlowType {
    USER_SRP_AUTH = 0;
    REFRESH_TOKEN_AUTH = 1;
    REFRESH_TOKEN = 2;
    CUSTOM_AUTH = 3;
    ADMIN_NO_SRP_AUTH = 4;
}

message AuthParametersType {
    string key = 1;
    string value = 2;
}
repeated AuthParametersType AuthParametersType = 1

message AuthenticationResultType {
    // The access token of the authentication result.
    string AccessToken = 1;
    // The expiration period of the authentication result.
    integer ExpiresIn = 2;
    // The ID token of the authentication result.
    string IdToken = 3;
    // The new device metadata from an authentication result.
    NewDeviceMetadataType NewDeviceMetadata = 4;
    // The refresh token of the authentication result.
    string RefreshToken = 5;
    // The token type of the authentication result.
    string TokenType = 6;
}







repeated string CallbackURLsListType = 1

enum ChallengeNameType {
    SMS_MFA = 0;
    PASSWORD_VERIFIER = 1;
    CUSTOM_CHALLENGE = 2;
    DEVICE_SRP_AUTH = 3;
    DEVICE_PASSWORD_VERIFIER = 4;
    ADMIN_NO_SRP_AUTH = 5;
    NEW_PASSWORD_REQUIRED = 6;
}

message ChallengeParametersType {
    string key = 1;
    string value = 2;
}
repeated ChallengeParametersType ChallengeParametersType = 1

message ChallengeResponsesType {
    string key = 1;
    string value = 2;
}
repeated ChallengeResponsesType ChallengeResponsesType = 1

message ChangePasswordRequest {
    // The access token in the change password request.
    string AccessToken = 1;
    // The old password in the change password request.
    string PreviousPassword = 2;
    // The new password in the change password request.
    string ProposedPassword = 3;
}

message ChangePasswordResponse {
}

message ClientMetadataType {
    string key = 1;
    string value = 2;
}
repeated ClientMetadataType ClientMetadataType = 1



repeated string ClientPermissionListType = 1





repeated CodeDeliveryDetailsType CodeDeliveryDetailsListType = 1

message CodeDeliveryDetailsType {
    // The name of the attribute in the code delivery details type.
    string AttributeName = 1;
    // The delivery medium (email message or phone number).
    DeliveryMediumType DeliveryMedium = 2;
    // The destination for the code delivery details.
    string Destination = 3;
}

message CodeDeliveryFailureException {
    // The message sent when a verification code fails to deliver successfully.
    string message = 1;
}

message CodeMismatchException {
    // The message provided when the code mismatch exception is thrown.
    string message = 1;
}

message ConcurrentModificationException {
    // The message provided when the concurrent exception is thrown.
    string message = 1;
}

message ConfirmDeviceRequest {
    // The access token.
    string AccessToken = 1;
    // The device key.
    string DeviceKey = 2;
    // The device name.
    string DeviceName = 3;
    // The configuration of the device secret verifier.
    DeviceSecretVerifierConfigType DeviceSecretVerifierConfig = 4;
}

message ConfirmDeviceResponse {
    // Indicates whether the user confirmation is necessary to confirm the device response.
    boolean UserConfirmationNecessary = 1;
}

message ConfirmForgotPasswordRequest {
    // The app client ID of the app associated with the user pool.
    string ClientId = 1;
    // The confirmation code sent by a user's request to retrieve a forgotten password. For more information, see <a href="API_ForgotPassword.html">ForgotPassword</a>
    string ConfirmationCode = 2;
    // The password sent by a user's request to retrieve a forgotten password.
    string Password = 3;
    // A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
    string SecretHash = 4;
    // The user name of the user for whom you want to enter a code to retrieve a forgotten password.
    string Username = 5;
}

message ConfirmForgotPasswordResponse {
}

message ConfirmSignUpRequest {
    // The ID of the app client associated with the user pool.
    string ClientId = 1;
    // The confirmation code sent by a user's request to confirm registration.
    string ConfirmationCode = 2;
    // Boolean to be specified to force user confirmation irrespective of existing alias. By default set to <code>False</code>. If this parameter is set to <code>True</code> and the phone number/email used for sign up confirmation already exists as an alias with a different user, the API call will migrate the alias from the previous user to the newly created user being confirmed. If set to <code>False</code>, the API will throw an <b>AliasExistsException</b> error.
    boolean ForceAliasCreation = 3;
    // A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
    string SecretHash = 4;
    // The user name of the user whose registration you wish to confirm.
    string Username = 5;
}

message ConfirmSignUpResponse {
}

message CreateGroupRequest {
    // A string containing the description of the group.
    string Description = 1;
    // The name of the group. Must be unique.
    string GroupName = 2;
    // <p>A nonnegative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. Zero is the highest precedence value. Groups with lower <code>Precedence</code> values take precedence over groups with higher or null <code>Precedence</code> values. If a user belongs to two or more groups, it is the group with the lowest precedence value whose role ARN will be used in the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the user's tokens.</p> <p>Two groups can have the same <code>Precedence</code> value. If this happens, neither group takes precedence over the other. If two groups with the same <code>Precedence</code> have the same role ARN, that role is used in the <code>cognito:preferred_role</code> claim in tokens for users in each group. If the two groups have different role ARNs, the <code>cognito:preferred_role</code> claim is not set in users' tokens.</p> <p>The default <code>Precedence</code> value is null.</p>
    integer Precedence = 3;
    // The role ARN for the group.
    string RoleArn = 4;
    // The user pool ID for the user pool.
    string UserPoolId = 5;
}

message CreateGroupResponse {
    // The group object for the group.
    GroupType Group = 1;
}

message CreateIdentityProviderRequest {
    // A mapping of identity provider attributes to standard and custom user pool attributes.
    array AttributeMapping = 1;
    // A list of identity provider identifiers.
    array IdpIdentifiers = 2;
    // The identity provider details, such as <code>MetadataURL</code> and <code>MetadataFile</code>.
    array ProviderDetails = 3;
    // The identity provider name.
    string ProviderName = 4;
    // The identity provider type.
    IdentityProviderTypeType ProviderType = 5;
    // The user pool ID.
    string UserPoolId = 6;
}

message CreateIdentityProviderResponse {
    // The newly created identity provider object.
    IdentityProviderType IdentityProvider = 1;
}

message CreateResourceServerRequest {
    // A unique resource server identifier for the resource server. This could be an HTTPS endpoint where the resource server is located. For example, <code>https://my-weather-api.example.com</code>.
    string Identifier = 1;
    // A friendly name for the resource server.
    string Name = 2;
    // A list of scopes. Each scope is map, where the keys are <code>name</code> and <code>description</code>.
    array Scopes = 3;
    // The user pool ID for the user pool.
    string UserPoolId = 4;
}

message CreateResourceServerResponse {
    // The newly created resource server.
    ResourceServerType ResourceServer = 1;
}

message CreateUserImportJobRequest {
    // The role ARN for the Amazon CloudWatch Logging role for the user import job.
    string CloudWatchLogsRoleArn = 1;
    // The job name for the user import job.
    string JobName = 2;
    // The user pool ID for the user pool that the users are being imported into.
    string UserPoolId = 3;
}

message CreateUserImportJobResponse {
    // The job object that represents the user import job.
    UserImportJobType UserImportJob = 1;
}

message CreateUserPoolClientRequest {
    // <p>Set to <code>code</code> to initiate a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the token endpoint.</p> <p>Set to <code>token</code> to specify that the client should get the access token (and, optionally, ID token, based on scopes) directly.</p>
    array AllowedOAuthFlows = 1;
    // Set to <code>True</code> if the client is allowed to follow the OAuth protocol when interacting with Cognito user pools.
    boolean AllowedOAuthFlowsUserPoolClient = 2;
    // A list of allowed <code>OAuth</code> scopes. Currently supported values are <code>"phone"</code>, <code>"email"</code>, <code>"openid"</code>, and <code>"Cognito"</code>.
    array AllowedOAuthScopes = 3;
    // A list of allowed callback URLs for the identity providers.
    array CallbackURLs = 4;
    // The client name for the user pool client you would like to create.
    string ClientName = 5;
    // The default redirect URI. Must be in the <code>CallbackURLs</code> list.
    string DefaultRedirectURI = 6;
    // The explicit authentication flows.
    array ExplicitAuthFlows = 7;
    // Boolean to specify whether you want to generate a secret for the user pool client being created.
    boolean GenerateSecret = 8;
    // A list of allowed logout URLs for the identity providers.
    array LogoutURLs = 9;
    // The read attributes.
    array ReadAttributes = 10;
    // The time limit, in days, after which the refresh token is no longer valid and cannot be used.
    integer RefreshTokenValidity = 11;
    // A list of provider names for the identity providers that are supported on this client.
    array SupportedIdentityProviders = 12;
    // The user pool ID for the user pool where you want to create a user pool client.
    string UserPoolId = 13;
    // The write attributes.
    array WriteAttributes = 14;
}

message CreateUserPoolClientResponse {
    // The user pool client that was just created.
    UserPoolClientType UserPoolClient = 1;
}

message CreateUserPoolDomainRequest {
    // The domain string.
    string Domain = 1;
    // The user pool ID.
    string UserPoolId = 2;
}

message CreateUserPoolDomainResponse {
}

message CreateUserPoolRequest {
    // The configuration for <code>AdminCreateUser</code> requests.
    AdminCreateUserConfigType AdminCreateUserConfig = 1;
    // Attributes supported as an alias for this user pool. Possible values: <b>phone_number</b>, <b>email</b>, or <b>preferred_username</b>.
    array AliasAttributes = 2;
    // The attributes to be auto-verified. Possible values: <b>email</b>, <b>phone_number</b>.
    array AutoVerifiedAttributes = 3;
    // The device configuration.
    DeviceConfigurationType DeviceConfiguration = 4;
    // The email configuration.
    EmailConfigurationType EmailConfiguration = 5;
    // A string representing the email verification message.
    string EmailVerificationMessage = 6;
    // A string representing the email verification subject.
    string EmailVerificationSubject = 7;
    // The Lambda trigger configuration information for the new user pool.
    LambdaConfigType LambdaConfig = 8;
    // Specifies MFA configuration details.
    UserPoolMfaType MfaConfiguration = 9;
    // The policies associated with the new user pool.
    UserPoolPolicyType Policies = 10;
    // A string used to name the user pool.
    string PoolName = 11;
    // An array of schema attributes for the new user pool. These attributes can be standard or custom attributes.
    array Schema = 12;
    // A string representing the SMS authentication message.
    string SmsAuthenticationMessage = 13;
    // The SMS configuration.
    SmsConfigurationType SmsConfiguration = 14;
    // A string representing the SMS verification message.
    string SmsVerificationMessage = 15;
    // The cost allocation tags for the user pool. For more information, see <a href="http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-cost-allocation-tagging.html">Adding Cost Allocation Tags to Your User Pool</a>
    array UserPoolTags = 16;
    // Specifies whether email addresses or phone numbers can be specified as usernames when a user signs up.
    array UsernameAttributes = 17;
    // The template for the verification message that the user sees when the app requests permission to access the user's information.
    VerificationMessageTemplateType VerificationMessageTemplate = 18;
}

message CreateUserPoolResponse {
    // A container for the user pool details.
    UserPoolType UserPool = 1;
}



repeated SchemaAttributeType CustomAttributesListType = 1



enum DefaultEmailOptionType {
    CONFIRM_WITH_LINK = 0;
    CONFIRM_WITH_CODE = 1;
}

message DeleteGroupRequest {
    // The name of the group.
    string GroupName = 1;
    // The user pool ID for the user pool.
    string UserPoolId = 2;
}

message DeleteIdentityProviderRequest {
    // The identity provider name.
    string ProviderName = 1;
    // The user pool ID.
    string UserPoolId = 2;
}

message DeleteResourceServerRequest {
    // The identifier for the resource server.
    string Identifier = 1;
    // The user pool ID for the user pool that hosts the resource server.
    string UserPoolId = 2;
}

message DeleteUserAttributesRequest {
    // The access token used in the request to delete user attributes.
    string AccessToken = 1;
    // <p>An array of strings representing the user attribute names you wish to delete.</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>
    array UserAttributeNames = 2;
}

message DeleteUserAttributesResponse {
}

message DeleteUserPoolClientRequest {
    // The app client ID of the app associated with the user pool.
    string ClientId = 1;
    // The user pool ID for the user pool where you want to delete the client.
    string UserPoolId = 2;
}

message DeleteUserPoolDomainRequest {
    // The domain string.
    string Domain = 1;
    // The user pool ID.
    string UserPoolId = 2;
}

message DeleteUserPoolDomainResponse {
}

message DeleteUserPoolRequest {
    // The user pool ID for the user pool you want to delete.
    string UserPoolId = 1;
}

message DeleteUserRequest {
    // The access token from a request to delete a user.
    string AccessToken = 1;
}

repeated DeliveryMediumType DeliveryMediumListType = 1

enum DeliveryMediumType {
    SMS = 0;
    EMAIL = 1;
}

message DescribeIdentityProviderRequest {
    // The identity provider name.
    string ProviderName = 1;
    // The user pool ID.
    string UserPoolId = 2;
}

message DescribeIdentityProviderResponse {
    // The identity provider that was deleted.
    IdentityProviderType IdentityProvider = 1;
}

message DescribeResourceServerRequest {
    // The identifier for the resource server
    string Identifier = 1;
    // The user pool ID for the user pool that hosts the resource server.
    string UserPoolId = 2;
}

message DescribeResourceServerResponse {
    // The resource server.
    ResourceServerType ResourceServer = 1;
}

message DescribeUserImportJobRequest {
    // The job ID for the user import job.
    string JobId = 1;
    // The user pool ID for the user pool that the users are being imported into.
    string UserPoolId = 2;
}

message DescribeUserImportJobResponse {
    // The job object that represents the user import job.
    UserImportJobType UserImportJob = 1;
}

message DescribeUserPoolClientRequest {
    // The app client ID of the app associated with the user pool.
    string ClientId = 1;
    // The user pool ID for the user pool you want to describe.
    string UserPoolId = 2;
}

message DescribeUserPoolClientResponse {
    // The user pool client from a server response to describe the user pool client.
    UserPoolClientType UserPoolClient = 1;
}

message DescribeUserPoolDomainRequest {
    // The domain string.
    string Domain = 1;
}

message DescribeUserPoolDomainResponse {
    // A domain description object containing information about the domain.
    DomainDescriptionType DomainDescription = 1;
}

message DescribeUserPoolRequest {
    // The user pool ID for the user pool you want to describe.
    string UserPoolId = 1;
}

message DescribeUserPoolResponse {
    // The container of metadata returned by the server to describe the pool.
    UserPoolType UserPool = 1;
}

message DeviceConfigurationType {
    // Indicates whether a challenge is required on a new device. Only applicable to a new device.
    boolean ChallengeRequiredOnNewDevice = 1;
    // If true, a device is only remembered on user prompt.
    boolean DeviceOnlyRememberedOnUserPrompt = 2;
}



repeated DeviceType DeviceListType = 1



enum DeviceRememberedStatusType {
    REMEMBERED = 0;
    NOT_REMEMBERED = 1;
}

message DeviceSecretVerifierConfigType {
    // The password verifier.
    string PasswordVerifier = 1;
    // The salt.
    string Salt = 2;
}

message DeviceType {
    // The device attributes.
    array DeviceAttributes = 1;
    // The creation date of the device.
    string DeviceCreateDate = 2;
    // The device key.
    string DeviceKey = 3;
    // The date in which the device was last authenticated.
    string DeviceLastAuthenticatedDate = 4;
    // The last modified date of the device.
    string DeviceLastModifiedDate = 5;
}

message DomainDescriptionType {
    // The AWS account ID for the user pool owner.
    string AWSAccountId = 1;
    // The ARN of the CloudFront distribution.
    string CloudFrontDistribution = 2;
    // The domain string.
    string Domain = 3;
    // The S3 bucket where the static files for this domain are stored.
    string S3Bucket = 4;
    // The domain status.
    DomainStatusType Status = 5;
    // The user pool ID.
    string UserPoolId = 6;
    // The app version.
    string Version = 7;
}

enum DomainStatusType {
    CREATING = 0;
    DELETING = 1;
    UPDATING = 2;
    ACTIVE = 3;
    FAILED = 4;
}

message DuplicateProviderException {
    string message = 1;
}

message EmailConfigurationType {
    // The REPLY-TO email address.
    string ReplyToEmailAddress = 1;
    // The Amazon Resource Name (ARN) of the email source.
    string SourceArn = 2;
}

message ExpiredCodeException {
    // The message returned when the expired code exception is thrown.
    string message = 1;
}

repeated ExplicitAuthFlowsType ExplicitAuthFlowsListType = 1

enum ExplicitAuthFlowsType {
    ADMIN_NO_SRP_AUTH = 0;
    CUSTOM_AUTH_FLOW_ONLY = 1;
}

message ForgetDeviceRequest {
    // The access token for the forgotten device request.
    string AccessToken = 1;
    // The device key.
    string DeviceKey = 2;
}

message ForgotPasswordRequest {
    // The ID of the client associated with the user pool.
    string ClientId = 1;
    // A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
    string SecretHash = 2;
    // The user name of the user for whom you want to enter a code to reset a forgotten password.
    string Username = 3;
}

message ForgotPasswordResponse {
    // The code delivery details returned by the server in response to the request to reset a password.
    CodeDeliveryDetailsType CodeDeliveryDetails = 1;
}

message GetCSVHeaderRequest {
    // The user pool ID for the user pool that the users are to be imported into.
    string UserPoolId = 1;
}

message GetCSVHeaderResponse {
    // The header information for the .csv file for the user import job.
    array CSVHeader = 1;
    // The user pool ID for the user pool that the users are to be imported into.
    string UserPoolId = 2;
}

message GetDeviceRequest {
    // The access token.
    string AccessToken = 1;
    // The device key.
    string DeviceKey = 2;
}

message GetDeviceResponse {
    // The device.
    DeviceType Device = 1;
}

message GetGroupRequest {
    // The name of the group.
    string GroupName = 1;
    // The user pool ID for the user pool.
    string UserPoolId = 2;
}

message GetGroupResponse {
    // The group object for the group.
    GroupType Group = 1;
}

message GetIdentityProviderByIdentifierRequest {
    // The identity provider ID.
    string IdpIdentifier = 1;
    // The user pool ID.
    string UserPoolId = 2;
}

message GetIdentityProviderByIdentifierResponse {
    // The identity provider object.
    IdentityProviderType IdentityProvider = 1;
}

message GetUICustomizationRequest {
    // The client ID for the client app.
    string ClientId = 1;
    // The user pool ID for the user pool.
    string UserPoolId = 2;
}

message GetUICustomizationResponse {
    // The UI customization information.
    UICustomizationType UICustomization = 1;
}

message GetUserAttributeVerificationCodeRequest {
    // The access token returned by the server response to get the user attribute verification code.
    string AccessToken = 1;
    // The attribute name returned by the server response to get the user attribute verification code.
    string AttributeName = 2;
}

message GetUserAttributeVerificationCodeResponse {
    // The code delivery details returned by the server in response to the request to get the user attribute verification code.
    CodeDeliveryDetailsType CodeDeliveryDetails = 1;
}

message GetUserRequest {
    // The access token returned by the server response to get information about the user.
    string AccessToken = 1;
}

message GetUserResponse {
    // Specifies the options for MFA (e.g., email or phone number).
    array MFAOptions = 1;
    // <p>An array of name-value pairs representing user attributes.</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>
    array UserAttributes = 2;
    // The user name of the user you wish to retrieve from the get user request.
    string Username = 3;
}

message GlobalSignOutRequest {
    // The access token.
    string AccessToken = 1;
}

message GlobalSignOutResponse {
}

message GroupExistsException {
    string message = 1;
}

repeated GroupType GroupListType = 1



message GroupType {
    // The date the group was created.
    string CreationDate = 1;
    // A string containing the description of the group.
    string Description = 2;
    // The name of the group.
    string GroupName = 3;
    // The date the group was last modified.
    string LastModifiedDate = 4;
    // <p>A nonnegative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. If a user belongs to two or more groups, it is the group with the highest precedence whose role ARN will be used in the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the user's tokens. Groups with higher <code>Precedence</code> values take precedence over groups with lower <code>Precedence</code> values or with null <code>Precedence</code> values.</p> <p>Two groups can have the same <code>Precedence</code> value. If this happens, neither group takes precedence over the other. If two groups with the same <code>Precedence</code> have the same role ARN, that role is used in the <code>cognito:preferred_role</code> claim in tokens for users in each group. If the two groups have different role ARNs, the <code>cognito:preferred_role</code> claim is not set in users' tokens.</p> <p>The default <code>Precedence</code> value is null.</p>
    integer Precedence = 5;
    // The role ARN for the group.
    string RoleArn = 6;
    // The user pool ID for the user pool.
    string UserPoolId = 7;
}

message IdentityProviderType {
    // A mapping of identity provider attributes to standard and custom user pool attributes.
    array AttributeMapping = 1;
    // The date the identity provider was created.
    string CreationDate = 2;
    // A list of identity provider identifiers.
    array IdpIdentifiers = 3;
    // The date the identity provider was last modified.
    string LastModifiedDate = 4;
    // The identity provider details, such as <code>MetadataURL</code> and <code>MetadataFile</code>.
    array ProviderDetails = 5;
    // The identity provider name.
    string ProviderName = 6;
    // The identity provider type.
    IdentityProviderTypeType ProviderType = 7;
    // The user pool ID.
    string UserPoolId = 8;
}

enum IdentityProviderTypeType {
    SAML = 0;
    FACEBOOK = 1;
    GOOGLE = 2;
    LOGINWITHAMAZON = 3;
}



repeated string IdpIdentifiersListType = 1





message InitiateAuthRequest {
    // <p>The authentication flow for this call to execute. The API action will depend on this value. For example: </p> <ul> <li> <p> <code>REFRESH_TOKEN_AUTH</code> will take in a valid refresh token and return new tokens.</p> </li> <li> <p> <code>USER_SRP_AUTH</code> will take in <code>USERNAME</code> and <code>SRP_A</code> and return the SRP variables to be used for next challenge execution.</p> </li> </ul> <p>Valid values include:</p> <ul> <li> <p> <code>USER_SRP_AUTH</code>: Authentication flow for the Secure Remote Password (SRP) protocol.</p> </li> <li> <p> <code>REFRESH_TOKEN_AUTH</code>/<code>REFRESH_TOKEN</code>: Authentication flow for refreshing the access token and ID token by supplying a valid refresh token.</p> </li> <li> <p> <code>CUSTOM_AUTH</code>: Custom authentication flow.</p> </li> </ul> <p> <code>ADMIN_NO_SRP_AUTH</code> is not a valid value.</p>
    AuthFlowType AuthFlow = 1;
    // <p>The authentication parameters. These are inputs corresponding to the <code>AuthFlow</code> that you are invoking. The required values depend on the value of <code>AuthFlow</code>:</p> <ul> <li> <p>For <code>USER_SRP_AUTH</code>: <code>USERNAME</code> (required), <code>SRP_A</code> (required), <code>SECRET_HASH</code> (required if the app client is configured with a client secret), <code>DEVICE_KEY</code> </p> </li> <li> <p>For <code>REFRESH_TOKEN_AUTH/REFRESH_TOKEN</code>: <code>USERNAME</code> (required), <code>SECRET_HASH</code> (required if the app client is configured with a client secret), <code>REFRESH_TOKEN</code> (required), <code>DEVICE_KEY</code> </p> </li> <li> <p>For <code>CUSTOM_AUTH</code>: <code>USERNAME</code> (required), <code>SECRET_HASH</code> (if app client is configured with client secret), <code>DEVICE_KEY</code> </p> </li> </ul>
    array AuthParameters = 2;
    // The app client ID.
    string ClientId = 3;
    // This is a random key-value pair map which can contain any key and will be passed to your PreAuthentication Lambda trigger as-is. It can be used to implement additional validations around authentication.
    array ClientMetadata = 4;
}

message InitiateAuthResponse {
    // The result of the authentication response. This is only returned if the caller does not need to pass another challenge. If the caller does need to pass another challenge before it gets tokens, <code>ChallengeName</code>, <code>ChallengeParameters</code>, and <code>Session</code> are returned.
    AuthenticationResultType AuthenticationResult = 1;
    // <p>The name of the challenge which you are responding to with this call. This is returned to you in the <code>AdminInitiateAuth</code> response if you need to pass another challenge.</p> <p>Valid values include the following. Note that all of these challenges require <code>USERNAME</code> and <code>SECRET_HASH</code> (if applicable) in the parameters.</p> <ul> <li> <p> <code>SMS_MFA</code>: Next challenge is to supply an <code>SMS_MFA_CODE</code>, delivered via SMS.</p> </li> <li> <p> <code>PASSWORD_VERIFIER</code>: Next challenge is to supply <code>PASSWORD_CLAIM_SIGNATURE</code>, <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, and <code>TIMESTAMP</code> after the client-side SRP calculations.</p> </li> <li> <p> <code>CUSTOM_CHALLENGE</code>: This is returned if your custom authentication flow determines that the user should pass another challenge before tokens are issued.</p> </li> <li> <p> <code>DEVICE_SRP_AUTH</code>: If device tracking was enabled on your user pool and the previous challenges were passed, this challenge is returned so that Amazon Cognito can start tracking this device.</p> </li> <li> <p> <code>DEVICE_PASSWORD_VERIFIER</code>: Similar to <code>PASSWORD_VERIFIER</code>, but for devices only.</p> </li> <li> <p> <code>NEW_PASSWORD_REQUIRED</code>: For users which are required to change their passwords after successful first login. This challenge should be passed with <code>NEW_PASSWORD</code> and any other required attributes.</p> </li> </ul>
    ChallengeNameType ChallengeName = 2;
    // <p>The challenge parameters. These are returned to you in the <code>InitiateAuth</code> response if you need to pass another challenge. The responses in this parameter should be used to compute inputs to the next call (<code>RespondToAuthChallenge</code>). </p> <p>All challenges require <code>USERNAME</code> and <code>SECRET_HASH</code> (if applicable).</p>
    array ChallengeParameters = 3;
    // The session which should be passed both ways in challenge-response calls to the service. If the <a href="API_InitiateAuth.html">InitiateAuth</a> or <a href="API_RespondToAuthChallenge.html">RespondToAuthChallenge</a> API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next <code>RespondToAuthChallenge</code> API call.
    string Session = 4;
}

message InternalErrorException {
    // The message returned when Amazon Cognito throws an internal error exception.
    string message = 1;
}

message InvalidEmailRoleAccessPolicyException {
    // The message returned when you have an unverified email address or the identity policy is not set on an email address that Amazon Cognito can access.
    string message = 1;
}

message InvalidLambdaResponseException {
    // The message returned when the Amazon Cognito service throws an invalid AWS Lambda response exception.
    string message = 1;
}

message InvalidOAuthFlowException {
    string message = 1;
}

message InvalidParameterException {
    // The message returned when the Amazon Cognito service throws an invalid parameter exception.
    string message = 1;
}

message InvalidPasswordException {
    // The message returned when the Amazon Cognito service throws an invalid user password exception.
    string message = 1;
}

message InvalidSmsRoleAccessPolicyException {
    // The message retuned when the invalid SMS role access policy exception is thrown.
    string message = 1;
}

message InvalidSmsRoleTrustRelationshipException {
    // The message returned when the role trust relationship for the SMS message is invalid.
    string message = 1;
}

message InvalidUserPoolConfigurationException {
    // The message returned when the user pool configuration is invalid.
    string message = 1;
}

message LambdaConfigType {
    // Creates an authentication challenge.
    string CreateAuthChallenge = 1;
    // A custom Message AWS Lambda trigger.
    string CustomMessage = 2;
    // Defines the authentication challenge.
    string DefineAuthChallenge = 3;
    // A post-authentication AWS Lambda trigger.
    string PostAuthentication = 4;
    // A post-confirmation AWS Lambda trigger.
    string PostConfirmation = 5;
    // A pre-authentication AWS Lambda trigger.
    string PreAuthentication = 6;
    // A pre-registration AWS Lambda trigger.
    string PreSignUp = 7;
    // Verifies the authentication challenge response.
    string VerifyAuthChallengeResponse = 8;
}

message LimitExceededException {
    // The message returned when Amazon Cognito throws a limit exceeded exception.
    string message = 1;
}

message ListDevicesRequest {
    // The access tokens for the request to list devices.
    string AccessToken = 1;
    // The limit of the device request.
    integer Limit = 2;
    // The pagination token for the list request.
    string PaginationToken = 3;
}

message ListDevicesResponse {
    // The devices returned in the list devices response.
    array Devices = 1;
    // The pagination token for the list device response.
    string PaginationToken = 2;
}

message ListGroupsRequest {
    // The limit of the request to list groups.
    integer Limit = 1;
    // An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    string NextToken = 2;
    // The user pool ID for the user pool.
    string UserPoolId = 3;
}

message ListGroupsResponse {
    // The group objects for the groups.
    array Groups = 1;
    // An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    string NextToken = 2;
}

message ListIdentityProvidersRequest {
    // The maximum number of identity providers to return.
    integer MaxResults = 1;
    // A pagination token.
    string NextToken = 2;
    // The user pool ID.
    string UserPoolId = 3;
}

message ListIdentityProvidersResponse {
    // A pagination token.
    string NextToken = 1;
    // A list of identity provider objects.
    array Providers = 2;
}

repeated string ListOfStringTypes = 1





message ListResourceServersRequest {
    // The maximum number of resource servers to return.
    integer MaxResults = 1;
    // A pagination token.
    string NextToken = 2;
    // The user pool ID for the user pool.
    string UserPoolId = 3;
}

message ListResourceServersResponse {
    // A pagination token.
    string NextToken = 1;
    // The resource servers.
    array ResourceServers = 2;
}

message ListUserImportJobsRequest {
    // The maximum number of import jobs you want the request to return.
    integer MaxResults = 1;
    // An identifier that was returned from the previous call to <code>ListUserImportJobs</code>, which can be used to return the next set of import jobs in the list.
    string PaginationToken = 2;
    // The user pool ID for the user pool that the users are being imported into.
    string UserPoolId = 3;
}

message ListUserImportJobsResponse {
    // An identifier that can be used to return the next set of user import jobs in the list.
    string PaginationToken = 1;
    // The user import jobs.
    array UserImportJobs = 2;
}

message ListUserPoolClientsRequest {
    // The maximum number of results you want the request to return when listing the user pool clients.
    integer MaxResults = 1;
    // An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    string NextToken = 2;
    // The user pool ID for the user pool where you want to list user pool clients.
    string UserPoolId = 3;
}

message ListUserPoolClientsResponse {
    // An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    string NextToken = 1;
    // The user pool clients in the response that lists user pool clients.
    array UserPoolClients = 2;
}

message ListUserPoolsRequest {
    // The maximum number of results you want the request to return when listing the user pools.
    integer MaxResults = 1;
    // An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    string NextToken = 2;
}

message ListUserPoolsResponse {
    // An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    string NextToken = 1;
    // The user pools from the response to list users.
    array UserPools = 2;
}

message ListUsersInGroupRequest {
    // The name of the group.
    string GroupName = 1;
    // The limit of the request to list users.
    integer Limit = 2;
    // An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    string NextToken = 3;
    // The user pool ID for the user pool.
    string UserPoolId = 4;
}

message ListUsersInGroupResponse {
    // An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    string NextToken = 1;
    // The users returned in the request to list users.
    array Users = 2;
}

message ListUsersRequest {
    // An array of strings, where each string is the name of a user attribute to be returned for each user in the search results. If the array is empty, all attributes are returned.
    array AttributesToGet = 1;
    // <p>A filter string of the form "<i>AttributeName</i> <i>Filter-Type</i> "<i>AttributeValue</i>"". Quotation marks within the filter string must be escaped using the backslash (\) character. For example, "<code>family_name</code> = \"Reddy\"".</p> <ul> <li> <p> <i>AttributeName</i>: The name of the attribute to search for. You can only search for one attribute at a time.</p> </li> <li> <p> <i>Filter-Type</i>: For an exact match, use =, for example, "<code>given_name</code> = \"Jon\"". For a prefix ("starts with") match, use ^=, for example, "<code>given_name</code> ^= \"Jon\"". </p> </li> <li> <p> <i>AttributeValue</i>: The attribute value that must be matched for each user.</p> </li> </ul> <p>If the filter string is empty, <code>ListUsers</code> returns all users in the user pool.</p> <p>You can only search for the following standard attributes:</p> <ul> <li> <p> <code>username</code> (case-sensitive)</p> </li> <li> <p> <code>email</code> </p> </li> <li> <p> <code>phone_number</code> </p> </li> <li> <p> <code>name</code> </p> </li> <li> <p> <code>given_name</code> </p> </li> <li> <p> <code>family_name</code> </p> </li> <li> <p> <code>preferred_username</code> </p> </li> <li> <p> <code>cognito:user_status</code> (called <b>Enabled</b> in the Console) (case-sensitive)</p> </li> <li> <p> <code>status</code> (case-insensitive)</p> </li> </ul> <p>Custom attributes are not searchable.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-using-listusers-api">Searching for Users Using the ListUsers API</a> and <a href="http://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-listusers-api-examples">Examples of Using the ListUsers API</a> in the <i>Amazon Cognito Developer Guide</i>.</p>
    string Filter = 2;
    // Maximum number of users to be returned.
    integer Limit = 3;
    // An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    string PaginationToken = 4;
    // The user pool ID for the user pool on which the search should be performed.
    string UserPoolId = 5;
}

message ListUsersResponse {
    // An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    string PaginationToken = 1;
    // The users returned in the request to list users.
    array Users = 2;
}

repeated string LogoutURLsListType = 1



message MFAMethodNotFoundException {
    // The message returned when Amazon Cognito throws an MFA method not found exception.
    string message = 1;
}

repeated MFAOptionType MFAOptionListType = 1

message MFAOptionType {
    // The attribute name of the MFA option type.
    string AttributeName = 1;
    // The delivery medium (email message or SMS message) to send the MFA code.
    DeliveryMediumType DeliveryMedium = 2;
}

enum MessageActionType {
    RESEND = 0;
    SUPPRESS = 1;
}

message MessageTemplateType {
    // The message template for email messages.
    string EmailMessage = 1;
    // The subject line for email messages.
    string EmailSubject = 2;
    // The message template for SMS messages.
    string SMSMessage = 3;
}

message NewDeviceMetadataType {
    // The device group key.
    string DeviceGroupKey = 1;
    // The device key.
    string DeviceKey = 2;
}

message NotAuthorizedException {
    // The message returned when the Amazon Cognito service returns a not authorized exception.
    string message = 1;
}

message NumberAttributeConstraintsType {
    // The maximum value of an attribute that is of the number data type.
    string MaxValue = 1;
    // The minimum value of an attribute that is of the number data type.
    string MinValue = 2;
}

enum OAuthFlowType {
    CODE = 0;
    IMPLICIT = 1;
    CLIENT_CREDENTIALS = 2;
}

repeated OAuthFlowType OAuthFlowsType = 1







message PasswordPolicyType {
    // The minimum length of the password policy that you have set. Cannot be less than 6.
    integer MinimumLength = 1;
    // In the password policy that you have set, refers to whether you have required users to use at least one lowercase letter in their password.
    boolean RequireLowercase = 2;
    // In the password policy that you have set, refers to whether you have required users to use at least one number in their password.
    boolean RequireNumbers = 3;
    // In the password policy that you have set, refers to whether you have required users to use at least one symbol in their password.
    boolean RequireSymbols = 4;
    // In the password policy that you have set, refers to whether you have required users to use at least one uppercase letter in their password.
    boolean RequireUppercase = 5;
}

message PasswordResetRequiredException {
    // The message returned when a password reset is required.
    string message = 1;
}

message PreconditionNotMetException {
    // The message returned when a precondition is not met.
    string message = 1;
}

message ProviderDescription {
    // The date the provider was added to the user pool.
    string CreationDate = 1;
    // The date the provider was last modified.
    string LastModifiedDate = 2;
    // The identity provider name.
    string ProviderName = 3;
    // The identity provider type.
    IdentityProviderTypeType ProviderType = 4;
}

message ProviderDetailsType {
    string key = 1;
    string value = 2;
}
repeated ProviderDetailsType ProviderDetailsType = 1





message ProviderUserIdentifierType {
    // The name of the provider attribute to link to, for example, <code>NameID</code>.
    string ProviderAttributeName = 1;
    // The value of the provider attribute to link to, for example, <code>xxxxx_account</code>.
    string ProviderAttributeValue = 2;
    // The name of the provider, for example, Facebook, Google, or Login with Amazon.
    string ProviderName = 3;
}

repeated ProviderDescription ProvidersListType = 1









message ResendConfirmationCodeRequest {
    // The ID of the client associated with the user pool.
    string ClientId = 1;
    // A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
    string SecretHash = 2;
    // The user name of the user to whom you wish to resend a confirmation code.
    string Username = 3;
}

message ResendConfirmationCodeResponse {
    // The code delivery details returned by the server in response to the request to resend the confirmation code.
    CodeDeliveryDetailsType CodeDeliveryDetails = 1;
}

message ResourceNotFoundException {
    // The message returned when the Amazon Cognito service returns a resource not found exception.
    string message = 1;
}







repeated ResourceServerScopeType ResourceServerScopeListType = 1



message ResourceServerScopeType {
    // A description of the scope.
    string ScopeDescription = 1;
    // The name of the scope.
    string ScopeName = 2;
}

message ResourceServerType {
    // The identifier for the resource server.
    string Identifier = 1;
    // The name of the resource server.
    string Name = 2;
    // A list of scopes that are defined for the resource server.
    array Scopes = 3;
    // The user pool ID for the user pool that hosts the resource server.
    string UserPoolId = 4;
}

repeated ResourceServerType ResourceServersListType = 1

message RespondToAuthChallengeRequest {
    // <p>The challenge name. For more information, see <a href="API_InitiateAuth.html">InitiateAuth</a>.</p> <p> <code>ADMIN_NO_SRP_AUTH</code> is not a valid value.</p>
    ChallengeNameType ChallengeName = 1;
    // <p>The challenge responses. These are inputs corresponding to the value of <code>ChallengeName</code>, for example:</p> <ul> <li> <p> <code>SMS_MFA</code>: <code>SMS_MFA_CODE</code>, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured with client secret).</p> </li> <li> <p> <code>PASSWORD_VERIFIER</code>: <code>PASSWORD_CLAIM_SIGNATURE</code>, <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, <code>TIMESTAMP</code>, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured with client secret).</p> </li> <li> <p> <code>NEW_PASSWORD_REQUIRED</code>: <code>NEW_PASSWORD</code>, any other required attributes, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured with client secret). </p> </li> </ul>
    array ChallengeResponses = 2;
    // The app client ID.
    string ClientId = 3;
    // The session which should be passed both ways in challenge-response calls to the service. If <code>InitiateAuth</code> or <code>RespondToAuthChallenge</code> API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next <code>RespondToAuthChallenge</code> API call.
    string Session = 4;
}

message RespondToAuthChallengeResponse {
    // The result returned by the server in response to the request to respond to the authentication challenge.
    AuthenticationResultType AuthenticationResult = 1;
    // The challenge name. For more information, see <a href="API_InitiateAuth.html">InitiateAuth</a>.
    ChallengeNameType ChallengeName = 2;
    // The challenge parameters. For more information, see <a href="API_InitiateAuth.html">InitiateAuth</a>.
    array ChallengeParameters = 3;
    // The session which should be passed both ways in challenge-response calls to the service. If the <a href="API_InitiateAuth.html">InitiateAuth</a> or <a href="API_RespondToAuthChallenge.html">RespondToAuthChallenge</a> API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next <code>RespondToAuthChallenge</code> API call.
    string Session = 4;
}

message SchemaAttributeType {
    // The attribute data type.
    AttributeDataType AttributeDataType = 1;
    // Specifies whether the attribute type is developer only.
    boolean DeveloperOnlyAttribute = 2;
    // Specifies whether the attribute can be changed once it has been created.
    boolean Mutable = 3;
    // A schema attribute of the name type.
    string Name = 4;
    // Specifies the constraints for an attribute of the number type.
    NumberAttributeConstraintsType NumberAttributeConstraints = 5;
    // Specifies whether a user pool attribute is required. If the attribute is required and the user does not provide a value, registration or sign-in will fail.
    boolean Required = 6;
    // Specifies the constraints for an attribute of the string type.
    StringAttributeConstraintsType StringAttributeConstraints = 7;
}

repeated SchemaAttributeType SchemaAttributesListType = 1

message ScopeDoesNotExistException {
    string message = 1;
}

repeated string ScopeListType = 1





repeated string SearchedAttributeNamesListType = 1





message SetUICustomizationRequest {
    // The CSS values in the UI customization.
    string CSS = 1;
    // The client ID for the client app.
    string ClientId = 2;
    // The uploaded logo image for the UI customization.
    string ImageFile = 3;
    // The user pool ID for the user pool.
    string UserPoolId = 4;
}

message SetUICustomizationResponse {
    // The UI customization information.
    UICustomizationType UICustomization = 1;
}

message SetUserSettingsRequest {
    // The access token for the set user settings request.
    string AccessToken = 1;
    // Specifies the options for MFA (e.g., email or phone number).
    array MFAOptions = 2;
}

message SetUserSettingsResponse {
}

message SignUpRequest {
    // The ID of the client associated with the user pool.
    string ClientId = 1;
    // The password of the user you wish to register.
    string Password = 2;
    // A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
    string SecretHash = 3;
    // <p>An array of name-value pairs representing user attributes.</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>
    array UserAttributes = 4;
    // The user name of the user you wish to register.
    string Username = 5;
    // The validation data in the request to register a user.
    array ValidationData = 6;
}

message SignUpResponse {
    // The code delivery details returned by the server response to the user registration request.
    CodeDeliveryDetailsType CodeDeliveryDetails = 1;
    // A response from the server indicating that a user registration has been confirmed.
    boolean UserConfirmed = 2;
    // The UUID of the authenticated user. This is not the same as <code>username</code>.
    string UserSub = 3;
}

message SmsConfigurationType {
    // The external ID.
    string ExternalId = 1;
    // The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) caller.
    string SnsCallerArn = 2;
}

message StartUserImportJobRequest {
    // The job ID for the user import job.
    string JobId = 1;
    // The user pool ID for the user pool that the users are being imported into.
    string UserPoolId = 2;
}

message StartUserImportJobResponse {
    // The job object that represents the user import job.
    UserImportJobType UserImportJob = 1;
}

enum StatusType {
    ENABLED = 0;
    DISABLED = 1;
}

message StopUserImportJobRequest {
    // The job ID for the user import job.
    string JobId = 1;
    // The user pool ID for the user pool that the users are being imported into.
    string UserPoolId = 2;
}

message StopUserImportJobResponse {
    // The job object that represents the user import job.
    UserImportJobType UserImportJob = 1;
}

message StringAttributeConstraintsType {
    // The maximum length of an attribute value of the string type.
    string MaxLength = 1;
    // The minimum length of an attribute value of the string type.
    string MinLength = 2;
}



repeated string SupportedIdentityProvidersListType = 1



message TooManyFailedAttemptsException {
    // The message returned when the Amazon Cognito service returns a too many failed attempts exception.
    string message = 1;
}

message TooManyRequestsException {
    // The message returned when the Amazon Cognito service returns a too many requests exception.
    string message = 1;
}

message UICustomizationType {
    // The CSS values in the UI customization.
    string CSS = 1;
    // The CSS version number.
    string CSSVersion = 2;
    // The client ID for the client app.
    string ClientId = 3;
    // The creation date for the UI customization.
    string CreationDate = 4;
    // The logo image for the UI customization.
    string ImageUrl = 5;
    // The last-modified date for the UI customization.
    string LastModifiedDate = 6;
    // The user pool ID for the user pool.
    string UserPoolId = 7;
}

message UnexpectedLambdaException {
    // The message returned when the Amazon Cognito service returns an unexpected AWS Lambda exception.
    string message = 1;
}

message UnsupportedIdentityProviderException {
    string message = 1;
}

message UnsupportedUserStateException {
    // The message returned when the user is in an unsupported state.
    string message = 1;
}

message UpdateDeviceStatusRequest {
    // The access token.
    string AccessToken = 1;
    // The device key.
    string DeviceKey = 2;
    // The status of whether a device is remembered.
    DeviceRememberedStatusType DeviceRememberedStatus = 3;
}

message UpdateDeviceStatusResponse {
}

message UpdateGroupRequest {
    // A string containing the new description of the group.
    string Description = 1;
    // The name of the group.
    string GroupName = 2;
    // The new precedence value for the group. For more information about this parameter, see <a href="API_CreateGroup.html">CreateGroup</a>.
    integer Precedence = 3;
    // The new role ARN for the group. This is used for setting the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the token.
    string RoleArn = 4;
    // The user pool ID for the user pool.
    string UserPoolId = 5;
}

message UpdateGroupResponse {
    // The group object for the group.
    GroupType Group = 1;
}

message UpdateIdentityProviderRequest {
    // The identity provider attribute mapping to be changed.
    array AttributeMapping = 1;
    // A list of identity provider identifiers.
    array IdpIdentifiers = 2;
    // The identity provider details to be updated, such as <code>MetadataURL</code> and <code>MetadataFile</code>.
    array ProviderDetails = 3;
    // The identity provider name.
    string ProviderName = 4;
    // The user pool ID.
    string UserPoolId = 5;
}

message UpdateIdentityProviderResponse {
    // The identity provider object.
    IdentityProviderType IdentityProvider = 1;
}

message UpdateResourceServerRequest {
    // The identifier for the resource server.
    string Identifier = 1;
    // The name of the resource server.
    string Name = 2;
    // The scope values to be set for the resource server.
    array Scopes = 3;
    // The user pool ID for the user pool.
    string UserPoolId = 4;
}

message UpdateResourceServerResponse {
    // The resource server.
    ResourceServerType ResourceServer = 1;
}

message UpdateUserAttributesRequest {
    // The access token for the request to update user attributes.
    string AccessToken = 1;
    // <p>An array of name-value pairs representing user attributes.</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>
    array UserAttributes = 2;
}

message UpdateUserAttributesResponse {
    // The code delivery details list from the server for the request to update user attributes.
    array CodeDeliveryDetailsList = 1;
}

message UpdateUserPoolClientRequest {
    // <p>Set to <code>code</code> to initiate a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the token endpoint.</p> <p>Set to <code>token</code> to specify that the client should get the access token (and, optionally, ID token, based on scopes) directly.</p>
    array AllowedOAuthFlows = 1;
    // Set to TRUE if the client is allowed to follow the OAuth protocol when interacting with Cognito user pools.
    boolean AllowedOAuthFlowsUserPoolClient = 2;
    // A list of allowed <code>OAuth</code> scopes. Currently supported values are <code>"phone"</code>, <code>"email"</code>, <code>"openid"</code>, and <code>"Cognito"</code>.
    array AllowedOAuthScopes = 3;
    // A list of allowed callback URLs for the identity providers.
    array CallbackURLs = 4;
    // The ID of the client associated with the user pool.
    string ClientId = 5;
    // The client name from the update user pool client request.
    string ClientName = 6;
    // The default redirect URI. Must be in the <code>CallbackURLs</code> list.
    string DefaultRedirectURI = 7;
    // Explicit authentication flows.
    array ExplicitAuthFlows = 8;
    // A list of allowed logout URLs for the identity providers.
    array LogoutURLs = 9;
    // The read-only attributes of the user pool.
    array ReadAttributes = 10;
    // The time limit, in days, after which the refresh token is no longer valid and cannot be used.
    integer RefreshTokenValidity = 11;
    // A list of provider names for the identity providers that are supported on this client.
    array SupportedIdentityProviders = 12;
    // The user pool ID for the user pool where you want to update the user pool client.
    string UserPoolId = 13;
    // The writeable attributes of the user pool.
    array WriteAttributes = 14;
}

message UpdateUserPoolClientResponse {
    // The user pool client value from the response from the server when an update user pool client request is made.
    UserPoolClientType UserPoolClient = 1;
}

message UpdateUserPoolRequest {
    // The configuration for <code>AdminCreateUser</code> requests.
    AdminCreateUserConfigType AdminCreateUserConfig = 1;
    // The attributes that are automatically verified when the Amazon Cognito service makes a request to update user pools.
    array AutoVerifiedAttributes = 2;
    // Device configuration.
    DeviceConfigurationType DeviceConfiguration = 3;
    // Email configuration.
    EmailConfigurationType EmailConfiguration = 4;
    // The contents of the email verification message.
    string EmailVerificationMessage = 5;
    // The subject of the email verification message.
    string EmailVerificationSubject = 6;
    // The AWS Lambda configuration information from the request to update the user pool.
    LambdaConfigType LambdaConfig = 7;
    // <p>Can be one of the following values:</p> <ul> <li> <p> <code>OFF</code> - MFA tokens are not required and cannot be specified during user registration.</p> </li> <li> <p> <code>ON</code> - MFA tokens are required for all user registrations. You can only specify required when you are initially creating a user pool.</p> </li> <li> <p> <code>OPTIONAL</code> - Users have the option when registering to create an MFA token.</p> </li> </ul>
    UserPoolMfaType MfaConfiguration = 8;
    // A container with the policies you wish to update in a user pool.
    UserPoolPolicyType Policies = 9;
    // The contents of the SMS authentication message.
    string SmsAuthenticationMessage = 10;
    // SMS configuration.
    SmsConfigurationType SmsConfiguration = 11;
    // A container with information about the SMS verification message.
    string SmsVerificationMessage = 12;
    // The user pool ID for the user pool you want to update.
    string UserPoolId = 13;
    // The cost allocation tags for the user pool. For more information, see <a href="http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-cost-allocation-tagging.html">Adding Cost Allocation Tags to Your User Pool</a>
    array UserPoolTags = 14;
    // The template for verification messages.
    VerificationMessageTemplateType VerificationMessageTemplate = 15;
}

message UpdateUserPoolResponse {
}

message UserImportInProgressException {
    // The message returned when the user pool has an import job running.
    string message = 1;
}

enum UserImportJobStatusType {
    CREATED = 0;
    PENDING = 1;
    INPROGRESS = 2;
    STOPPING = 3;
    EXPIRED = 4;
    STOPPED = 5;
    FAILED = 6;
    SUCCEEDED = 7;
}

message UserImportJobType {
    // The role ARN for the Amazon CloudWatch Logging role for the user import job. For more information, see "Creating the CloudWatch Logs IAM Role" in the Amazon Cognito Developer Guide.
    string CloudWatchLogsRoleArn = 1;
    // The date when the user import job was completed.
    string CompletionDate = 2;
    // The message returned when the user import job is completed.
    string CompletionMessage = 3;
    // The date the user import job was created.
    string CreationDate = 4;
    // The number of users that could not be imported.
    integer FailedUsers = 5;
    // The number of users that were successfully imported.
    integer ImportedUsers = 6;
    // The job ID for the user import job.
    string JobId = 7;
    // The job name for the user import job.
    string JobName = 8;
    // The pre-signed URL to be used to upload the <code>.csv</code> file.
    string PreSignedUrl = 9;
    // The number of users that were skipped.
    integer SkippedUsers = 10;
    // The date when the user import job was started.
    string StartDate = 11;
    // <p>The status of the user import job. One of the following:</p> <ul> <li> <p> <code>Created</code> - The job was created but not started.</p> </li> <li> <p> <code>Pending</code> - A transition state. You have started the job, but it has not begun importing users yet.</p> </li> <li> <p> <code>InProgress</code> - The job has started, and users are being imported.</p> </li> <li> <p> <code>Stopping</code> - You have stopped the job, but the job has not stopped importing users yet.</p> </li> <li> <p> <code>Stopped</code> - You have stopped the job, and the job has stopped importing users.</p> </li> <li> <p> <code>Succeeded</code> - The job has completed successfully.</p> </li> <li> <p> <code>Failed</code> - The job has stopped due to an error.</p> </li> <li> <p> <code>Expired</code> - You created a job, but did not start the job within 24-48 hours. All data associated with the job was deleted, and the job cannot be started.</p> </li> </ul>
    UserImportJobStatusType Status = 12;
    // The user pool ID for the user pool that the users are being imported into.
    string UserPoolId = 13;
}

repeated UserImportJobType UserImportJobsListType = 1

message UserLambdaValidationException {
    // The message returned when the Amazon Cognito service returns a user validation exception with the AWS Lambda service.
    string message = 1;
}

message UserNotConfirmedException {
    // The message returned when a user is not confirmed successfully.
    string message = 1;
}

message UserNotFoundException {
    // The message returned when a user is not found.
    string message = 1;
}

message UserPoolClientDescription {
    // The ID of the client associated with the user pool.
    string ClientId = 1;
    // The client name from the user pool client description.
    string ClientName = 2;
    // The user pool ID for the user pool where you want to describe the user pool client.
    string UserPoolId = 3;
}

repeated UserPoolClientDescription UserPoolClientListType = 1

message UserPoolClientType {
    // <p>Set to <code>code</code> to initiate a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the token endpoint.</p> <p>Set to <code>token</code> to specify that the client should get the access token (and, optionally, ID token, based on scopes) directly.</p>
    array AllowedOAuthFlows = 1;
    // Set to TRUE if the client is allowed to follow the OAuth protocol when interacting with Cognito user pools.
    boolean AllowedOAuthFlowsUserPoolClient = 2;
    // A list of allowed <code>OAuth</code> scopes. Currently supported values are <code>"phone"</code>, <code>"email"</code>, <code>"openid"</code>, and <code>"Cognito"</code>.
    array AllowedOAuthScopes = 3;
    // A list of allowed callback URLs for the identity providers.
    array CallbackURLs = 4;
    // The ID of the client associated with the user pool.
    string ClientId = 5;
    // The client name from the user pool request of the client type.
    string ClientName = 6;
    // The client secret from the user pool request of the client type.
    string ClientSecret = 7;
    // The date the user pool client was created.
    string CreationDate = 8;
    // The default redirect URI. Must be in the <code>CallbackURLs</code> list.
    string DefaultRedirectURI = 9;
    // The explicit authentication flows.
    array ExplicitAuthFlows = 10;
    // The date the user pool client was last modified.
    string LastModifiedDate = 11;
    // A list of allowed logout URLs for the identity providers.
    array LogoutURLs = 12;
    // The Read-only attributes.
    array ReadAttributes = 13;
    // The time limit, in days, after which the refresh token is no longer valid and cannot be used.
    integer RefreshTokenValidity = 14;
    // A list of provider names for the identity providers that are supported on this client.
    array SupportedIdentityProviders = 15;
    // The user pool ID for the user pool client.
    string UserPoolId = 16;
    // The writeable attributes.
    array WriteAttributes = 17;
}

message UserPoolDescriptionType {
    // The date the user pool description was created.
    string CreationDate = 1;
    // The ID in a user pool description.
    string Id = 2;
    // The AWS Lambda configuration information in a user pool description.
    LambdaConfigType LambdaConfig = 3;
    // The date the user pool description was last modified.
    string LastModifiedDate = 4;
    // The name in a user pool description.
    string Name = 5;
    // The user pool status in a user pool description.
    StatusType Status = 6;
}



repeated UserPoolDescriptionType UserPoolListType = 1

enum UserPoolMfaType {
    OFF = 0;
    ON = 1;
    OPTIONAL = 2;
}

message UserPoolPolicyType {
    // A container for information about the user pool password policy.
    PasswordPolicyType PasswordPolicy = 1;
}

message UserPoolTaggingException {
    string message = 1;
}

message UserPoolTagsType {
    string key = 1;
    string value = 2;
}
repeated UserPoolTagsType UserPoolTagsType = 1

message UserPoolType {
    // The configuration for <code>AdminCreateUser</code> requests.
    AdminCreateUserConfigType AdminCreateUserConfig = 1;
    // Specifies the attributes that are aliased in a user pool.
    array AliasAttributes = 2;
    // Specifies the attributes that are auto-verified in a user pool.
    array AutoVerifiedAttributes = 3;
    // The date the user pool was created.
    string CreationDate = 4;
    // The device configuration.
    DeviceConfigurationType DeviceConfiguration = 5;
    // The email configuration.
    EmailConfigurationType EmailConfiguration = 6;
    // The reason why the email configuration cannot send the messages to your users.
    string EmailConfigurationFailure = 7;
    // The contents of the email verification message.
    string EmailVerificationMessage = 8;
    // The subject of the email verification message.
    string EmailVerificationSubject = 9;
    // A number estimating the size of the user pool.
    integer EstimatedNumberOfUsers = 10;
    // The ID of the user pool.
    string Id = 11;
    // A container for the AWS Lambda triggers associated with a user pool.
    LambdaConfigType LambdaConfig = 12;
    // The date the user pool was last modified.
    string LastModifiedDate = 13;
    // <p>Can be one of the following values:</p> <ul> <li> <p> <code>OFF</code> - MFA tokens are not required and cannot be specified during user registration.</p> </li> <li> <p> <code>ON</code> - MFA tokens are required for all user registrations. You can only specify required when you are initially creating a user pool.</p> </li> <li> <p> <code>OPTIONAL</code> - Users have the option when registering to create an MFA token.</p> </li> </ul>
    UserPoolMfaType MfaConfiguration = 14;
    // The name of the user pool.
    string Name = 15;
    // A container for the policies associated with a user pool.
    UserPoolPolicyType Policies = 16;
    // A container with the schema attributes of a user pool.
    array SchemaAttributes = 17;
    // The contents of the SMS authentication message.
    string SmsAuthenticationMessage = 18;
    // The SMS configuration.
    SmsConfigurationType SmsConfiguration = 19;
    // The reason why the SMS configuration cannot send the messages to your users.
    string SmsConfigurationFailure = 20;
    // The contents of the SMS verification message.
    string SmsVerificationMessage = 21;
    // The status of a user pool.
    StatusType Status = 22;
    // The cost allocation tags for the user pool. For more information, see <a href="http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-cost-allocation-tagging.html">Adding Cost Allocation Tags to Your User Pool</a>
    array UserPoolTags = 23;
    // Specifies whether email addresses or phone numbers can be specified as usernames when a user signs up.
    array UsernameAttributes = 24;
    // The template for verification messages.
    VerificationMessageTemplateType VerificationMessageTemplate = 25;
}

enum UserStatusType {
    UNCONFIRMED = 0;
    CONFIRMED = 1;
    ARCHIVED = 2;
    COMPROMISED = 3;
    UNKNOWN = 4;
    RESET_REQUIRED = 5;
    FORCE_CHANGE_PASSWORD = 6;
}

message UserType {
    // A container with information about the user type attributes.
    array Attributes = 1;
    // Specifies whether the user is enabled.
    boolean Enabled = 2;
    // The MFA options for the user.
    array MFAOptions = 3;
    // The creation date of the user.
    string UserCreateDate = 4;
    // The last modified date of the user.
    string UserLastModifiedDate = 5;
    // <p>The user status. Can be one of the following:</p> <ul> <li> <p>UNCONFIRMED - User has been created but not confirmed.</p> </li> <li> <p>CONFIRMED - User has been confirmed.</p> </li> <li> <p>ARCHIVED - User is no longer active.</p> </li> <li> <p>COMPROMISED - User is disabled due to a potential security threat.</p> </li> <li> <p>UNKNOWN - User status is not known.</p> </li> </ul>
    UserStatusType UserStatus = 6;
    // The user name of the user you wish to describe.
    string Username = 7;
}

enum UsernameAttributeType {
    PHONE_NUMBER = 0;
    EMAIL = 1;
}

repeated UsernameAttributeType UsernameAttributesListType = 1

message UsernameExistsException {
    // The message returned when Amazon Cognito throws a user name exists exception.
    string message = 1;
}



repeated UserType UsersListType = 1

message VerificationMessageTemplateType {
    // The default email option.
    DefaultEmailOptionType DefaultEmailOption = 1;
    // The email message template.
    string EmailMessage = 2;
    // The email message template for sending a confirmation link to the user.
    string EmailMessageByLink = 3;
    // The subject line for the email message template.
    string EmailSubject = 4;
    // The subject line for the email message template for sending a confirmation link to the user.
    string EmailSubjectByLink = 5;
    // The SMS message template.
    string SmsMessage = 6;
}

enum VerifiedAttributeType {
    PHONE_NUMBER = 0;
    EMAIL = 1;
}

repeated VerifiedAttributeType VerifiedAttributesListType = 1

message VerifyUserAttributeRequest {
    // Represents the access token of the request to verify user attributes.
    string AccessToken = 1;
    // The attribute name in the request to verify user attributes.
    string AttributeName = 2;
    // The verification code in the request to verify user attributes.
    string Code = 3;
}

message VerifyUserAttributeResponse {
}

service AmazonCognitoIdentityProviderService {
    // Adds additional user attributes to the user pool schema.
    rpc Post(PostRequest) returns (AddCustomAttributesResponse) {
      option (google.api.http) = {
        post: "//"
        body: "body"
      };
    }
    // <p>Adds the specified user to the specified group.</p> <p>Requires developer credentials.</p>
    rpc Post#AdminAddUserToGroup(Post#AdminAddUserToGroupRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#AdminAddUserToGroup"
        body: "body"
      };
    }
    // <p>Confirms user registration as an admin without using a confirmation code. Works on any user.</p> <p>Requires developer credentials.</p>
    rpc Post#AdminConfirmSignUp(Post#AdminConfirmSignUpRequest) returns (AdminConfirmSignUpResponse) {
      option (google.api.http) = {
        post: "//#AdminConfirmSignUp"
        body: "body"
      };
    }
    // <p>Creates a new user in the specified user pool and sends a welcome message via email or phone (SMS). This message is based on a template that you configured in your call to <a href="API_CreateUserPool.html">CreateUserPool</a> or <a href="API_UpdateUserPool.html">UpdateUserPool</a>. This template includes your custom sign-up instructions and placeholders for user name and temporary password.</p> <p>Requires developer credentials.</p>
    rpc Post#AdminCreateUser(Post#AdminCreateUserRequest) returns (AdminCreateUserResponse) {
      option (google.api.http) = {
        post: "//#AdminCreateUser"
        body: "body"
      };
    }
    // <p>Deletes a user as an administrator. Works on any user.</p> <p>Requires developer credentials.</p>
    rpc Post#AdminDeleteUser(Post#AdminDeleteUserRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#AdminDeleteUser"
        body: "body"
      };
    }
    // <p>Deletes the user attributes in a user pool as an administrator. Works on any user.</p> <p>Requires developer credentials.</p>
    rpc Post#AdminDeleteUserAttributes(Post#AdminDeleteUserAttributesRequest) returns (AdminDeleteUserAttributesResponse) {
      option (google.api.http) = {
        post: "//#AdminDeleteUserAttributes"
        body: "body"
      };
    }
    // <p>Disables the user from signing in with the specified external (SAML or social) identity provider. If the user to disable is a Cognito User Pools native username + password user, they are not permitted to use their password to sign-in. If the user to disable is a linked external IdP user, any link between that user and an existing user is removed. The next time the external user (no longer attached to the previously linked <code>DestinationUser</code>) signs in, they must create a new user account. See <a href="API_AdminLinkProviderForUser.html">AdminLinkProviderForUser</a>.</p> <p>This action is enabled only for admin access and requires developer credentials.</p> <p>The <code>ProviderName</code> must match the value specified when creating an IdP for the pool. </p> <p>To disable a native username + password user, the <code>ProviderName</code> value must be <code>Cognito</code> and the <code>ProviderAttributeName</code> must be <code>Cognito_Subject</code>, with the <code>ProviderAttributeValue</code> being the name that is used in the user pool for the user.</p> <p>The <code>ProviderAttributeName</code> must always be <code>Cognito_Subject</code> for social identity providers. The <code>ProviderAttributeValue</code> must always be the exact subject that was used when the user was originally linked as a source user.</p> <p>For de-linking a SAML identity, there are two scenarios. If the linked identity has not yet been used to sign-in, the <code>ProviderAttributeName</code> and <code>ProviderAttributeValue</code> must be the same values that were used for the <code>SourceUser</code> when the identities were originally linked in the <a href="API_AdminLinkProviderForUser.html">AdminLinkProviderForUser</a> call. (If the linking was done with <code>ProviderAttributeName</code> set to <code>Cognito_Subject</code>, the same applies here). However, if the user has already signed in, the <code>ProviderAttributeName</code> must be <code>Cognito_Subject</code> and <code>ProviderAttributeValue</code> must be the subject of the SAML assertion.</p>
    rpc Post#AdminDisableProviderForUser(Post#AdminDisableProviderForUserRequest) returns (AdminDisableProviderForUserResponse) {
      option (google.api.http) = {
        post: "//#AdminDisableProviderForUser"
        body: "body"
      };
    }
    // <p>Disables the specified user as an administrator. Works on any user.</p> <p>Requires developer credentials.</p>
    rpc Post#AdminDisableUser(Post#AdminDisableUserRequest) returns (AdminDisableUserResponse) {
      option (google.api.http) = {
        post: "//#AdminDisableUser"
        body: "body"
      };
    }
    // <p>Enables the specified user as an administrator. Works on any user.</p> <p>Requires developer credentials.</p>
    rpc Post#AdminEnableUser(Post#AdminEnableUserRequest) returns (AdminEnableUserResponse) {
      option (google.api.http) = {
        post: "//#AdminEnableUser"
        body: "body"
      };
    }
    // <p>Forgets the device, as an administrator.</p> <p>Requires developer credentials.</p>
    rpc Post#AdminForgetDevice(Post#AdminForgetDeviceRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#AdminForgetDevice"
        body: "body"
      };
    }
    // <p>Gets the device, as an administrator.</p> <p>Requires developer credentials.</p>
    rpc Post#AdminGetDevice(Post#AdminGetDeviceRequest) returns (AdminGetDeviceResponse) {
      option (google.api.http) = {
        post: "//#AdminGetDevice"
        body: "body"
      };
    }
    // <p>Gets the specified user by user name in a user pool as an administrator. Works on any user.</p> <p>Requires developer credentials.</p>
    rpc Post#AdminGetUser(Post#AdminGetUserRequest) returns (AdminGetUserResponse) {
      option (google.api.http) = {
        post: "//#AdminGetUser"
        body: "body"
      };
    }
    // <p>Initiates the authentication flow, as an administrator.</p> <p>Requires developer credentials.</p>
    rpc Post#AdminInitiateAuth(Post#AdminInitiateAuthRequest) returns (AdminInitiateAuthResponse) {
      option (google.api.http) = {
        post: "//#AdminInitiateAuth"
        body: "body"
      };
    }
    // <p>Links an existing user account in a user pool (<code>DestinationUser</code>) to an identity from an external identity provider (<code>SourceUser</code>) based on a specified attribute name and value from the external identity provider. This allows you to create a link from the existing user account to an external federated user identity that has not yet been used to sign in, so that the federated user identity can be used to sign in as the existing user account. </p> <p> For example, if there is an existing user with a username and password, this API links that user to a federated user identity, so that when the federated user identity is used, the user signs in as the existing user account. </p> <important> <p>Because this API allows a user with an external federated identity to sign in as an existing user in the user pool, it is critical that it only be used with external identity providers and provider attributes that have been trusted by the application owner.</p> </important> <p>See also <a href="API_AdminDisableProviderForUser.html">AdminDisableProviderForUser</a>.</p> <p>This action is enabled only for admin access and requires developer credentials.</p>
    rpc Post#AdminLinkProviderForUser(Post#AdminLinkProviderForUserRequest) returns (AdminLinkProviderForUserResponse) {
      option (google.api.http) = {
        post: "//#AdminLinkProviderForUser"
        body: "body"
      };
    }
    // <p>Lists devices, as an administrator.</p> <p>Requires developer credentials.</p>
    rpc Post#AdminListDevices(Post#AdminListDevicesRequest) returns (AdminListDevicesResponse) {
      option (google.api.http) = {
        post: "//#AdminListDevices"
        body: "body"
      };
    }
    // <p>Lists the groups that the user belongs to.</p> <p>Requires developer credentials.</p>
    rpc Post#AdminListGroupsForUser(Post#AdminListGroupsForUserRequest) returns (AdminListGroupsForUserResponse) {
      option (google.api.http) = {
        post: "//#AdminListGroupsForUser"
        body: "body"
      };
    }
    // <p>Removes the specified user from the specified group.</p> <p>Requires developer credentials.</p>
    rpc Post#AdminRemoveUserFromGroup(Post#AdminRemoveUserFromGroupRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#AdminRemoveUserFromGroup"
        body: "body"
      };
    }
    // <p>Resets the specified user's password in a user pool as an administrator. Works on any user.</p> <p>When a developer calls this API, the current password is invalidated, so it must be changed. If a user tries to sign in after the API is called, the app will get a PasswordResetRequiredException exception back and should direct the user down the flow to reset the password, which is the same as the forgot password flow. In addition, if the user pool has phone verification selected and a verified phone number exists for the user, or if email verification is selected and a verified email exists for the user, calling this API will also result in sending a message to the end user with the code to change their password.</p> <p>Requires developer credentials.</p>
    rpc Post#AdminResetUserPassword(Post#AdminResetUserPasswordRequest) returns (AdminResetUserPasswordResponse) {
      option (google.api.http) = {
        post: "//#AdminResetUserPassword"
        body: "body"
      };
    }
    // <p>Responds to an authentication challenge, as an administrator.</p> <p>Requires developer credentials.</p>
    rpc Post#AdminRespondToAuthChallenge(Post#AdminRespondToAuthChallengeRequest) returns (AdminRespondToAuthChallengeResponse) {
      option (google.api.http) = {
        post: "//#AdminRespondToAuthChallenge"
        body: "body"
      };
    }
    // <p>Sets all the user settings for a specified user name. Works on any user.</p> <p>Requires developer credentials.</p>
    rpc Post#AdminSetUserSettings(Post#AdminSetUserSettingsRequest) returns (AdminSetUserSettingsResponse) {
      option (google.api.http) = {
        post: "//#AdminSetUserSettings"
        body: "body"
      };
    }
    // <p>Updates the device status as an administrator.</p> <p>Requires developer credentials.</p>
    rpc Post#AdminUpdateDeviceStatus(Post#AdminUpdateDeviceStatusRequest) returns (AdminUpdateDeviceStatusResponse) {
      option (google.api.http) = {
        post: "//#AdminUpdateDeviceStatus"
        body: "body"
      };
    }
    // <p>Updates the specified user's attributes, including developer attributes, as an administrator. Works on any user.</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p> <p>In addition to updating user attributes, this API can also be used to mark phone and email as verified.</p> <p>Requires developer credentials.</p>
    rpc Post#AdminUpdateUserAttributes(Post#AdminUpdateUserAttributesRequest) returns (AdminUpdateUserAttributesResponse) {
      option (google.api.http) = {
        post: "//#AdminUpdateUserAttributes"
        body: "body"
      };
    }
    // <p>Signs out users from all devices, as an administrator.</p> <p>Requires developer credentials.</p>
    rpc Post#AdminUserGlobalSignOut(Post#AdminUserGlobalSignOutRequest) returns (AdminUserGlobalSignOutResponse) {
      option (google.api.http) = {
        post: "//#AdminUserGlobalSignOut"
        body: "body"
      };
    }
    // Changes the password for a specified user in a user pool.
    rpc Post#ChangePassword(Post#ChangePasswordRequest) returns (ChangePasswordResponse) {
      option (google.api.http) = {
        post: "//#ChangePassword"
        body: "body"
      };
    }
    // Confirms tracking of the device. This API call is the call that begins device tracking.
    rpc Post#ConfirmDevice(Post#ConfirmDeviceRequest) returns (ConfirmDeviceResponse) {
      option (google.api.http) = {
        post: "//#ConfirmDevice"
        body: "body"
      };
    }
    // Allows a user to enter a confirmation code to reset a forgotten password.
    rpc Post#ConfirmForgotPassword(Post#ConfirmForgotPasswordRequest) returns (ConfirmForgotPasswordResponse) {
      option (google.api.http) = {
        post: "//#ConfirmForgotPassword"
        body: "body"
      };
    }
    // Confirms registration of a user and handles the existing alias from a previous user.
    rpc Post#ConfirmSignUp(Post#ConfirmSignUpRequest) returns (ConfirmSignUpResponse) {
      option (google.api.http) = {
        post: "//#ConfirmSignUp"
        body: "body"
      };
    }
    // <p>Creates a new group in the specified user pool.</p> <p>Requires developer credentials.</p>
    rpc Post#CreateGroup(Post#CreateGroupRequest) returns (CreateGroupResponse) {
      option (google.api.http) = {
        post: "//#CreateGroup"
        body: "body"
      };
    }
    // Creates an identity provider for a user pool.
    rpc Post#CreateIdentityProvider(Post#CreateIdentityProviderRequest) returns (CreateIdentityProviderResponse) {
      option (google.api.http) = {
        post: "//#CreateIdentityProvider"
        body: "body"
      };
    }
    // Creates a new OAuth2.0 resource server and defines custom scopes in it.
    rpc Post#CreateResourceServer(Post#CreateResourceServerRequest) returns (CreateResourceServerResponse) {
      option (google.api.http) = {
        post: "//#CreateResourceServer"
        body: "body"
      };
    }
    // Creates the user import job.
    rpc Post#CreateUserImportJob(Post#CreateUserImportJobRequest) returns (CreateUserImportJobResponse) {
      option (google.api.http) = {
        post: "//#CreateUserImportJob"
        body: "body"
      };
    }
    // Creates a new Amazon Cognito user pool and sets the password policy for the pool.
    rpc Post#CreateUserPool(Post#CreateUserPoolRequest) returns (CreateUserPoolResponse) {
      option (google.api.http) = {
        post: "//#CreateUserPool"
        body: "body"
      };
    }
    // Creates the user pool client.
    rpc Post#CreateUserPoolClient(Post#CreateUserPoolClientRequest) returns (CreateUserPoolClientResponse) {
      option (google.api.http) = {
        post: "//#CreateUserPoolClient"
        body: "body"
      };
    }
    // Creates a new domain for a user pool.
    rpc Post#CreateUserPoolDomain(Post#CreateUserPoolDomainRequest) returns (CreateUserPoolDomainResponse) {
      option (google.api.http) = {
        post: "//#CreateUserPoolDomain"
        body: "body"
      };
    }
    // <p>Deletes a group. Currently only groups with no members can be deleted.</p> <p>Requires developer credentials.</p>
    rpc Post#DeleteGroup(Post#DeleteGroupRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#DeleteGroup"
        body: "body"
      };
    }
    // Deletes an identity provider for a user pool.
    rpc Post#DeleteIdentityProvider(Post#DeleteIdentityProviderRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#DeleteIdentityProvider"
        body: "body"
      };
    }
    // Deletes a resource server.
    rpc Post#DeleteResourceServer(Post#DeleteResourceServerRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#DeleteResourceServer"
        body: "body"
      };
    }
    // Allows a user to delete himself or herself.
    rpc Post#DeleteUser(Post#DeleteUserRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#DeleteUser"
        body: "body"
      };
    }
    // Deletes the attributes for a user.
    rpc Post#DeleteUserAttributes(Post#DeleteUserAttributesRequest) returns (DeleteUserAttributesResponse) {
      option (google.api.http) = {
        post: "//#DeleteUserAttributes"
        body: "body"
      };
    }
    // Deletes the specified Amazon Cognito user pool.
    rpc Post#DeleteUserPool(Post#DeleteUserPoolRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#DeleteUserPool"
        body: "body"
      };
    }
    // Allows the developer to delete the user pool client.
    rpc Post#DeleteUserPoolClient(Post#DeleteUserPoolClientRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#DeleteUserPoolClient"
        body: "body"
      };
    }
    // Deletes a domain for a user pool.
    rpc Post#DeleteUserPoolDomain(Post#DeleteUserPoolDomainRequest) returns (DeleteUserPoolDomainResponse) {
      option (google.api.http) = {
        post: "//#DeleteUserPoolDomain"
        body: "body"
      };
    }
    // Gets information about a specific identity provider.
    rpc Post#DescribeIdentityProvider(Post#DescribeIdentityProviderRequest) returns (DescribeIdentityProviderResponse) {
      option (google.api.http) = {
        post: "//#DescribeIdentityProvider"
        body: "body"
      };
    }
    // Describes a resource server.
    rpc Post#DescribeResourceServer(Post#DescribeResourceServerRequest) returns (DescribeResourceServerResponse) {
      option (google.api.http) = {
        post: "//#DescribeResourceServer"
        body: "body"
      };
    }
    // Describes the user import job.
    rpc Post#DescribeUserImportJob(Post#DescribeUserImportJobRequest) returns (DescribeUserImportJobResponse) {
      option (google.api.http) = {
        post: "//#DescribeUserImportJob"
        body: "body"
      };
    }
    // Returns the configuration information and metadata of the specified user pool.
    rpc Post#DescribeUserPool(Post#DescribeUserPoolRequest) returns (DescribeUserPoolResponse) {
      option (google.api.http) = {
        post: "//#DescribeUserPool"
        body: "body"
      };
    }
    // Client method for returning the configuration information and metadata of the specified user pool client.
    rpc Post#DescribeUserPoolClient(Post#DescribeUserPoolClientRequest) returns (DescribeUserPoolClientResponse) {
      option (google.api.http) = {
        post: "//#DescribeUserPoolClient"
        body: "body"
      };
    }
    // Gets information about a domain.
    rpc Post#DescribeUserPoolDomain(Post#DescribeUserPoolDomainRequest) returns (DescribeUserPoolDomainResponse) {
      option (google.api.http) = {
        post: "//#DescribeUserPoolDomain"
        body: "body"
      };
    }
    // Forgets the specified device.
    rpc Post#ForgetDevice(Post#ForgetDeviceRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "//#ForgetDevice"
        body: "body"
      };
    }
    // Calling this API causes a message to be sent to the end user with a confirmation code that is required to change the user's password. For the <code>Username</code> parameter, you can use the username or user alias. If a verified phone number exists for the user, the confirmation code is sent to the phone number. Otherwise, if a verified email exists, the confirmation code is sent to the email. If neither a verified phone number nor a verified email exists, <code>InvalidParameterException</code> is thrown. To use the confirmation code for resetting the password, call <a href="API_ConfirmForgotPassword.html">ConfirmForgotPassword</a>.
    rpc Post#ForgotPassword(Post#ForgotPasswordRequest) returns (ForgotPasswordResponse) {
      option (google.api.http) = {
        post: "//#ForgotPassword"
        body: "body"
      };
    }
    // Gets the header information for the .csv file to be used as input for the user import job.
    rpc Post#GetCSVHeader(Post#GetCSVHeaderRequest) returns (GetCSVHeaderResponse) {
      option (google.api.http) = {
        post: "//#GetCSVHeader"
        body: "body"
      };
    }
    // Gets the device.
    rpc Post#GetDevice(Post#GetDeviceRequest) returns (GetDeviceResponse) {
      option (google.api.http) = {
        post: "//#GetDevice"
        body: "body"
      };
    }
    // <p>Gets a group.</p> <p>Requires developer credentials.</p>
    rpc Post#GetGroup(Post#GetGroupRequest) returns (GetGroupResponse) {
      option (google.api.http) = {
        post: "//#GetGroup"
        body: "body"
      };
    }
    // Gets the specified identity provider.
    rpc Post#GetIdentityProviderByIdentifier(Post#GetIdentityProviderByIdentifierRequest) returns (GetIdentityProviderByIdentifierResponse) {
      option (google.api.http) = {
        post: "//#GetIdentityProviderByIdentifier"
        body: "body"
      };
    }
    // Gets the UI Customization information for a particular app client's app UI, if there is something set. If nothing is set for the particular client, but there is an existing pool level customization (app <code>clientId</code> will be <code>ALL</code>), then that is returned. If nothing is present, then an empty shape is returned.
    rpc Post#GetUICustomization(Post#GetUICustomizationRequest) returns (GetUICustomizationResponse) {
      option (google.api.http) = {
        post: "//#GetUICustomization"
        body: "body"
      };
    }
    // Gets the user attributes and metadata for a user.
    rpc Post#GetUser(Post#GetUserRequest) returns (GetUserResponse) {
      option (google.api.http) = {
        post: "//#GetUser"
        body: "body"
      };
    }
    // Gets the user attribute verification code for the specified attribute name.
    rpc Post#GetUserAttributeVerificationCode(Post#GetUserAttributeVerificationCodeRequest) returns (GetUserAttributeVerificationCodeResponse) {
      option (google.api.http) = {
        post: "//#GetUserAttributeVerificationCode"
        body: "body"
      };
    }
    // Signs out users from all devices.
    rpc Post#GlobalSignOut(Post#GlobalSignOutRequest) returns (GlobalSignOutResponse) {
      option (google.api.http) = {
        post: "//#GlobalSignOut"
        body: "body"
      };
    }
    // Initiates the authentication flow.
    rpc Post#InitiateAuth(Post#InitiateAuthRequest) returns (InitiateAuthResponse) {
      option (google.api.http) = {
        post: "//#InitiateAuth"
        body: "body"
      };
    }
    // Lists the devices.
    rpc Post#ListDevices(Post#ListDevicesRequest) returns (ListDevicesResponse) {
      option (google.api.http) = {
        post: "//#ListDevices"
        body: "body"
      };
    }
    // <p>Lists the groups associated with a user pool.</p> <p>Requires developer credentials.</p>
    rpc Post#ListGroups(Post#ListGroupsRequest) returns (ListGroupsResponse) {
      option (google.api.http) = {
        post: "//#ListGroups"
        body: "body"
      };
    }
    // Lists information about all identity providers for a user pool.
    rpc Post#ListIdentityProviders(Post#ListIdentityProvidersRequest) returns (ListIdentityProvidersResponse) {
      option (google.api.http) = {
        post: "//#ListIdentityProviders"
        body: "body"
      };
    }
    // Lists the resource servers for a user pool.
    rpc Post#ListResourceServers(Post#ListResourceServersRequest) returns (ListResourceServersResponse) {
      option (google.api.http) = {
        post: "//#ListResourceServers"
        body: "body"
      };
    }
    // Lists the user import jobs.
    rpc Post#ListUserImportJobs(Post#ListUserImportJobsRequest) returns (ListUserImportJobsResponse) {
      option (google.api.http) = {
        post: "//#ListUserImportJobs"
        body: "body"
      };
    }
    // Lists the clients that have been created for the specified user pool.
    rpc Post#ListUserPoolClients(Post#ListUserPoolClientsRequest) returns (ListUserPoolClientsResponse) {
      option (google.api.http) = {
        post: "//#ListUserPoolClients"
        body: "body"
      };
    }
    // Lists the user pools associated with an AWS account.
    rpc Post#ListUserPools(Post#ListUserPoolsRequest) returns (ListUserPoolsResponse) {
      option (google.api.http) = {
        post: "//#ListUserPools"
        body: "body"
      };
    }
    // Lists the users in the Amazon Cognito user pool.
    rpc Post#ListUsers(Post#ListUsersRequest) returns (ListUsersResponse) {
      option (google.api.http) = {
        post: "//#ListUsers"
        body: "body"
      };
    }
    // <p>Lists the users in the specified group.</p> <p>Requires developer credentials.</p>
    rpc Post#ListUsersInGroup(Post#ListUsersInGroupRequest) returns (ListUsersInGroupResponse) {
      option (google.api.http) = {
        post: "//#ListUsersInGroup"
        body: "body"
      };
    }
    // Resends the confirmation (for confirmation of registration) to a specific user in the user pool.
    rpc Post#ResendConfirmationCode(Post#ResendConfirmationCodeRequest) returns (ResendConfirmationCodeResponse) {
      option (google.api.http) = {
        post: "//#ResendConfirmationCode"
        body: "body"
      };
    }
    // Responds to the authentication challenge.
    rpc Post#RespondToAuthChallenge(Post#RespondToAuthChallengeRequest) returns (RespondToAuthChallengeResponse) {
      option (google.api.http) = {
        post: "//#RespondToAuthChallenge"
        body: "body"
      };
    }
    // <p>Sets the UI customization information for a user pool's built-in app UI.</p> <p>You can specify app UI customization settings for a single client (with a specific <code>clientId</code>) or for all clients (by setting the <code>clientId</code> to <code>ALL</code>). If you specify <code>ALL</code>, the default configuration will be used for every client that has no UI customization set previously. If you specify UI customization settings for a particular client, it will no longer fall back to the <code>ALL</code> configuration. </p> <note> <p>To use this API, your user pool must have a domain associated with it. Otherwise, there is no place to host the app's pages, and the service will throw an error.</p> </note>
    rpc Post#SetUICustomization(Post#SetUICustomizationRequest) returns (SetUICustomizationResponse) {
      option (google.api.http) = {
        post: "//#SetUICustomization"
        body: "body"
      };
    }
    // Sets the user settings like multi-factor authentication (MFA). If MFA is to be removed for a particular attribute pass the attribute with code delivery as null. If null list is passed, all MFA options are removed.
    rpc Post#SetUserSettings(Post#SetUserSettingsRequest) returns (SetUserSettingsResponse) {
      option (google.api.http) = {
        post: "//#SetUserSettings"
        body: "body"
      };
    }
    // Registers the user in the specified user pool and creates a user name, password, and user attributes.
    rpc Post#SignUp(Post#SignUpRequest) returns (SignUpResponse) {
      option (google.api.http) = {
        post: "//#SignUp"
        body: "body"
      };
    }
    // Starts the user import.
    rpc Post#StartUserImportJob(Post#StartUserImportJobRequest) returns (StartUserImportJobResponse) {
      option (google.api.http) = {
        post: "//#StartUserImportJob"
        body: "body"
      };
    }
    // Stops the user import job.
    rpc Post#StopUserImportJob(Post#StopUserImportJobRequest) returns (StopUserImportJobResponse) {
      option (google.api.http) = {
        post: "//#StopUserImportJob"
        body: "body"
      };
    }
    // Updates the device status.
    rpc Post#UpdateDeviceStatus(Post#UpdateDeviceStatusRequest) returns (UpdateDeviceStatusResponse) {
      option (google.api.http) = {
        post: "//#UpdateDeviceStatus"
        body: "body"
      };
    }
    // <p>Updates the specified group with the specified attributes.</p> <p>Requires developer credentials.</p>
    rpc Post#UpdateGroup(Post#UpdateGroupRequest) returns (UpdateGroupResponse) {
      option (google.api.http) = {
        post: "//#UpdateGroup"
        body: "body"
      };
    }
    // Updates identity provider information for a user pool.
    rpc Post#UpdateIdentityProvider(Post#UpdateIdentityProviderRequest) returns (UpdateIdentityProviderResponse) {
      option (google.api.http) = {
        post: "//#UpdateIdentityProvider"
        body: "body"
      };
    }
    // Updates the name and scopes of resource server. All other fields are read-only.
    rpc Post#UpdateResourceServer(Post#UpdateResourceServerRequest) returns (UpdateResourceServerResponse) {
      option (google.api.http) = {
        post: "//#UpdateResourceServer"
        body: "body"
      };
    }
    // Allows a user to update a specific attribute (one at a time).
    rpc Post#UpdateUserAttributes(Post#UpdateUserAttributesRequest) returns (UpdateUserAttributesResponse) {
      option (google.api.http) = {
        post: "//#UpdateUserAttributes"
        body: "body"
      };
    }
    // Updates the specified user pool with the specified attributes.
    rpc Post#UpdateUserPool(Post#UpdateUserPoolRequest) returns (UpdateUserPoolResponse) {
      option (google.api.http) = {
        post: "//#UpdateUserPool"
        body: "body"
      };
    }
    // Allows the developer to update the specified user pool client and password policy.
    rpc Post#UpdateUserPoolClient(Post#UpdateUserPoolClientRequest) returns (UpdateUserPoolClientResponse) {
      option (google.api.http) = {
        post: "//#UpdateUserPoolClient"
        body: "body"
      };
    }
    // Verifies the specified user attributes in the user pool.
    rpc Post#VerifyUserAttribute(Post#VerifyUserAttributeRequest) returns (VerifyUserAttributeResponse) {
      option (google.api.http) = {
        post: "//#VerifyUserAttribute"
        body: "body"
      };
    }
}

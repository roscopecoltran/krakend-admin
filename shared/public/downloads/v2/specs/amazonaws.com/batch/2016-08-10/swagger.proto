syntax = "proto3";

import "google/api/annotations.proto";

package awsbatch;

message PostV1CanceljobRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CancelJobRequest body = 10;
}

message PostV1CreatecomputeenvironmentRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateComputeEnvironmentRequest body = 10;
}

message PostV1CreatejobqueueRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    CreateJobQueueRequest body = 10;
}

message PostV1DeletecomputeenvironmentRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteComputeEnvironmentRequest body = 10;
}

message PostV1DeletejobqueueRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeleteJobQueueRequest body = 10;
}

message PostV1DeregisterjobdefinitionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DeregisterJobDefinitionRequest body = 10;
}

message PostV1DescribecomputeenvironmentsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeComputeEnvironmentsRequest body = 10;
}

message PostV1DescribejobdefinitionsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeJobDefinitionsRequest body = 10;
}

message PostV1DescribejobqueuesRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeJobQueuesRequest body = 10;
}

message PostV1DescribejobsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    DescribeJobsRequest body = 10;
}

message PostV1ListjobsRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    ListJobsRequest body = 10;
}

message PostV1RegisterjobdefinitionRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    RegisterJobDefinitionRequest body = 10;
}

message PostV1SubmitjobRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    SubmitJobRequest body = 10;
}

message PostV1TerminatejobRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    TerminateJobRequest body = 10;
}

message PostV1UpdatecomputeenvironmentRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateComputeEnvironmentRequest body = 10;
}

message PostV1UpdatejobqueueRequest {
    string Action = 1;
    string Version = 2;
    string X_Amz_Algorithm = 3;
    string X_Amz_Content_Sha256 = 4;
    string X_Amz_Credential = 5;
    string X_Amz_Date = 6;
    string X_Amz_Security_Token = 7;
    string X_Amz_Signature = 8;
    string X_Amz_SignedHeaders = 9;
    UpdateJobQueueRequest body = 10;
}

message AttemptContainerDetail {
    // The Amazon Resource Name (ARN) of the Amazon ECS container instance that hosts the job attempt.
    string containerInstanceArn = 1;
    // The exit code for the job attempt. A non-zero exit code is considered a failure.
    integer exitCode = 2;
    // The name of the CloudWatch Logs log stream associated with the container. The log group for AWS Batch jobs is <code>/aws/batch/job</code>. Each container attempt receives a log stream name when they reach the <code>RUNNING</code> status.
    string logStreamName = 3;
    // A short (255 max characters) human-readable string to provide additional details about a running or stopped container.
    string reason = 4;
    // The Amazon Resource Name (ARN) of the Amazon ECS task that is associated with the job attempt.
    string taskArn = 5;
}

message AttemptDetail {
    // Details about the container in this job attempt.
    AttemptContainerDetail container = 1;
    // The Unix timestamp for when the attempt was started (when the task transitioned from the <code>PENDING</code> state to the <code>RUNNING</code> state).
    integer startedAt = 2;
    // A short, human-readable string to provide additional details about the current status of the job attempt.
    string statusReason = 3;
    // The Unix timestamp for when the attempt was stopped (when the task transitioned from the <code>RUNNING</code> state to the <code>STOPPED</code> state).
    integer stoppedAt = 4;
}

repeated AttemptDetail AttemptDetails = 1



enum CEState {
    ENABLED = 0;
    DISABLED = 1;
}

enum CEStatu {
    CREATING = 0;
    UPDATING = 1;
    DELETING = 2;
    DELETED = 3;
    VALID = 4;
    INVALID = 5;
}

enum CEType {
    MANAGED = 0;
    UNMANAGED = 1;
}

enum CRType {
    EC2 = 0;
    SPOT = 1;
}

message CancelJobRequest {
    // A list of up to 100 job IDs to cancel.
    string jobId = 1;
    // A message to attach to the job that explains the reason for cancelling it. This message is returned by future <a>DescribeJobs</a> operations on the job. This message is also recorded in the AWS Batch activity logs.
    string reason = 2;
}

message CancelJobResponse {
}

message ClientException {
    string message = 1;
}

message ComputeEnvironmentDetail {
    // The Amazon Resource Name (ARN) of the compute environment.
    string computeEnvironmentArn = 1;
    // The name of the compute environment.
    string computeEnvironmentName = 2;
    // The compute resources defined for the compute environment.
    ComputeResource computeResources = 3;
    // The Amazon Resource Name (ARN) of the underlying Amazon ECS cluster used by the compute environment.
    string ecsClusterArn = 4;
    // The service role associated with the compute environment that allows AWS Batch to make calls to AWS API operations on your behalf.
    string serviceRole = 5;
    // The state of the compute environment. The valid values are <code>ENABLED</code> or <code>DISABLED</code>. An <code>ENABLED</code> state indicates that you can register instances with the compute environment and that the associated instances can accept jobs.
    CEState state = 6;
    // The current status of the compute environment (for example, <code>CREATING</code> or <code>VALID</code>).
    CEStatus status = 7;
    // A short, human-readable string to provide additional details about the current status of the compute environment.
    string statusReason = 8;
    // The type of the compute environment.
    CEType type = 9;
}

repeated ComputeEnvironmentDetail ComputeEnvironmentDetailList = 1

message ComputeEnvironmentOrder {
    // The Amazon Resource Name (ARN) of the compute environment.
    string computeEnvironment = 1;
    // The order of the compute environment.
    integer order = 2;
}

repeated ComputeEnvironmentOrder ComputeEnvironmentOrders = 1

message ComputeResource {
    // The minimum percentage that a Spot Instance price must be when compared with the On-Demand price for that instance type before instances are launched. For example, if your bid percentage is 20%, then the Spot price must be below 20% of the current On-Demand price for that EC2 instance.
    integer bidPercentage = 1;
    // The desired number of EC2 vCPUS in the compute environment.
    integer desiredvCpus = 2;
    // The EC2 key pair that is used for instances launched in the compute environment.
    string ec2KeyPair = 3;
    // The Amazon Machine Image (AMI) ID used for instances launched in the compute environment.
    string imageId = 4;
    // The Amazon ECS instance profile applied to Amazon EC2 instances in a compute environment. You can specify the short name or full Amazon Resource Name (ARN) of an instance profile. For example, <code>ecsInstanceRole</code> or <code>arn:aws:iam::&lt;aws_account_id&gt;:instance-profile/ecsInstanceRole</code>. For more information, see <a href="http://docs.aws.amazon.com/batch/latest/userguide/instance_IAM_role.html">Amazon ECS Instance Role</a> in the <i>AWS Batch User Guide</i>.
    string instanceRole = 5;
    // The instances types that may launched.
    array instanceTypes = 6;
    // The maximum number of EC2 vCPUs that an environment can reach.
    integer maxvCpus = 7;
    // The minimum number of EC2 vCPUs that an environment should maintain.
    integer minvCpus = 8;
    // The EC2 security group that is associated with instances launched in the compute environment.
    array securityGroupIds = 9;
    // The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a <code>SPOT</code> compute environment.
    string spotIamFleetRole = 10;
    // The VPC subnets into which the compute resources are launched.
    array subnets = 11;
    // Key-value pair tags to be applied to resources that are launched in the compute environment.
    array tags = 12;
    // The type of compute environment.
    CRType type = 13;
}

message ComputeResourceUpdate {
    // The desired number of EC2 vCPUS in the compute environment.
    integer desiredvCpus = 1;
    // The maximum number of EC2 vCPUs that an environment can reach.
    integer maxvCpus = 2;
    // The minimum number of EC2 vCPUs that an environment should maintain.
    integer minvCpus = 3;
}

message ContainerDetail {
    // The command that is passed to the container.
    array command = 1;
    // The Amazon Resource Name (ARN) of the container instance on which the container is running.
    string containerInstanceArn = 2;
    // The environment variables to pass to a container.
    array environment = 3;
    // The exit code to return upon completion.
    integer exitCode = 4;
    // The image used to start the container.
    string image = 5;
    // The Amazon Resource Name (ARN) associated with the job upon execution.
    string jobRoleArn = 6;
    // The name of the CloudWatch Logs log stream associated with the container. The log group for AWS Batch jobs is <code>/aws/batch/job</code>. Each container attempt receives a log stream name when they reach the <code>RUNNING</code> status.
    string logStreamName = 7;
    // The number of MiB of memory reserved for the job.
    integer memory = 8;
    // The mount points for data volumes in your container.
    array mountPoints = 9;
    // When this parameter is true, the container is given elevated privileges on the host container instance (similar to the <code>root</code> user).
    boolean privileged = 10;
    // When this parameter is true, the container is given read-only access to its root file system.
    boolean readonlyRootFilesystem = 11;
    // A short (255 max characters) human-readable string to provide additional details about a running or stopped container.
    string reason = 12;
    // The Amazon Resource Name (ARN) of the Amazon ECS task that is associated with the container job.
    string taskArn = 13;
    // A list of <code>ulimit</code> values to set in the container.
    array ulimits = 14;
    // The user name to use inside the container.
    string user = 15;
    // The number of VCPUs allocated for the job.
    integer vcpus = 16;
    // A list of volumes associated with the job.
    array volumes = 17;
}

message ContainerOverrides {
    // The command to send to the container that overrides the default command from the Docker image or the job definition.
    array command = 1;
    // The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the job definition.
    array environment = 2;
    // The number of MiB of memory reserved for the job. This value overrides the value set in the job definition.
    integer memory = 3;
    // The number of vCPUs to reserve for the container. This value overrides the value set in the job definition.
    integer vcpus = 4;
}

message ContainerProperties {
    // The command that is passed to the container. This parameter maps to <code>Cmd</code> in the <a href="https://docs.docker.com/engine/reference/api/docker_remote_api_v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/reference/api/docker_remote_api_v1.23/">Docker Remote API</a> and the <code>COMMAND</code> parameter to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>. For more information, see <a href="https://docs.docker.com/engine/reference/builder/#cmd">https://docs.docker.com/engine/reference/builder/#cmd</a>.
    array command = 1;
    // <p>The environment variables to pass to a container. This parameter maps to <code>Env</code> in the <a href="https://docs.docker.com/engine/reference/api/docker_remote_api_v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/reference/api/docker_remote_api_v1.23/">Docker Remote API</a> and the <code>--env</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>.</p> <important> <p>We do not recommend using plain text environment variables for sensitive information, such as credential data.</p> </important>
    array environment = 2;
    // <p>The image used to start a container. This string is passed directly to the Docker daemon. Images in the Docker Hub registry are available by default. Other repositories are specified with <code> <i>repository-url</i>/<i>image</i>:<i>tag</i> </code>. Up to 255 letters (uppercase and lowercase), numbers, hyphens, underscores, colons, periods, forward slashes, and number signs are allowed. This parameter maps to <code>Image</code> in the <a href="https://docs.docker.com/engine/reference/api/docker_remote_api_v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/reference/api/docker_remote_api_v1.23/">Docker Remote API</a> and the <code>IMAGE</code> parameter of <a href="https://docs.docker.com/engine/reference/run/">docker run</a>.</p> <ul> <li> <p>Images in Amazon ECR repositories use the full registry and repository URI (for example, <code>012345678910.dkr.ecr.&lt;region-name&gt;.amazonaws.com/&lt;repository-name&gt;</code>). </p> </li> <li> <p>Images in official repositories on Docker Hub use a single name (for example, <code>ubuntu</code> or <code>mongo</code>).</p> </li> <li> <p>Images in other repositories on Docker Hub are qualified with an organization name (for example, <code>amazon/amazon-ecs-agent</code>).</p> </li> <li> <p>Images in other online repositories are qualified further by a domain name (for example, <code>quay.io/assemblyline/ubuntu</code>).</p> </li> </ul>
    string image = 3;
    // The Amazon Resource Name (ARN) of the IAM role that the container can assume for AWS permissions.
    string jobRoleArn = 4;
    // The hard limit (in MiB) of memory to present to the container. If your container attempts to exceed the memory specified here, the container is killed. This parameter maps to <code>Memory</code> in the <a href="https://docs.docker.com/engine/reference/api/docker_remote_api_v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/reference/api/docker_remote_api_v1.23/">Docker Remote API</a> and the <code>--memory</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>. You must specify at least 4 MiB of memory for a job.
    integer memory = 5;
    // The mount points for data volumes in your container. This parameter maps to <code>Volumes</code> in the <a href="https://docs.docker.com/engine/reference/api/docker_remote_api_v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/reference/api/docker_remote_api_v1.23/">Docker Remote API</a> and the <code>--volume</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>.
    array mountPoints = 6;
    // When this parameter is true, the container is given elevated privileges on the host container instance (similar to the <code>root</code> user). This parameter maps to <code>Privileged</code> in the <a href="https://docs.docker.com/engine/reference/api/docker_remote_api_v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/reference/api/docker_remote_api_v1.23/">Docker Remote API</a> and the <code>--privileged</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>.
    boolean privileged = 7;
    // When this parameter is true, the container is given read-only access to its root file system. This parameter maps to <code>ReadonlyRootfs</code> in the <a href="https://docs.docker.com/engine/reference/api/docker_remote_api_v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/reference/api/docker_remote_api_v1.23/">Docker Remote API</a> and the <code>--read-only</code> option to <code>docker run</code>.
    boolean readonlyRootFilesystem = 8;
    // A list of <code>ulimits</code> to set in the container. This parameter maps to <code>Ulimits</code> in the <a href="https://docs.docker.com/engine/reference/api/docker_remote_api_v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/reference/api/docker_remote_api_v1.23/">Docker Remote API</a> and the <code>--ulimit</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>.
    array ulimits = 9;
    // The user name to use inside the container. This parameter maps to <code>User</code> in the <a href="https://docs.docker.com/engine/reference/api/docker_remote_api_v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/reference/api/docker_remote_api_v1.23/">Docker Remote API</a> and the <code>--user</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>.
    string user = 10;
    // The number of vCPUs reserved for the container. This parameter maps to <code>CpuShares</code> in the <a href="https://docs.docker.com/engine/reference/api/docker_remote_api_v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/reference/api/docker_remote_api_v1.23/">Docker Remote API</a> and the <code>--cpu-shares</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>. Each vCPU is equivalent to 1,024 CPU shares. You must specify at least 1 vCPU.
    integer vcpus = 11;
    // A list of data volumes used in a job.
    array volumes = 12;
}

message CreateComputeEnvironmentRequest {
    // The name for your compute environment. Up to 128 letters (uppercase and lowercase), numbers, and underscores are allowed.
    string computeEnvironmentName = 1;
    // Details of the compute resources managed by the compute environment. This parameter is required for managed compute environments.
    ComputeResource computeResources = 2;
    // <p>The full Amazon Resource Name (ARN) of the IAM role that allows AWS Batch to make calls to other AWS services on your behalf.</p> <p>If your specified role has a path other than <code>/</code>, then you must either specify the full role ARN (this is recommended) or prefix the role name with the path.</p> <note> <p>Depending on how you created your AWS Batch service role, its ARN may contain the <code>service-role</code> path prefix. When you only specify the name of the service role, AWS Batch assumes that your ARN does not use the <code>service-role</code> path prefix. Because of this, we recommend that you specify the full ARN of your service role when you create compute environments.</p> </note>
    string serviceRole = 3;
    // The state of the compute environment. If the state is <code>ENABLED</code>, then the compute environment accepts jobs from a queue and can scale out automatically based on queues.
    CEState state = 4;
    // The type of the compute environment.
    CEType type = 5;
}

message CreateComputeEnvironmentResponse {
    // The Amazon Resource Name (ARN) of the compute environment.
    string computeEnvironmentArn = 1;
    // The name of the compute environment.
    string computeEnvironmentName = 2;
}

message CreateJobQueueRequest {
    // The set of compute environments mapped to a job queue and their order relative to each other. The job scheduler uses this parameter to determine which compute environment should execute a given job. Compute environments must be in the <code>VALID</code> state before you can associate them with a job queue. You can associate up to 3 compute environments with a job queue.
    array computeEnvironmentOrder = 1;
    // The name of the job queue.
    string jobQueueName = 2;
    // The priority of the job queue. Job queues with a higher priority (or a higher integer value for the <code>priority</code> parameter) are evaluated first when associated with same compute environment. Priority is determined in descending order, for example, a job queue with a priority value of <code>10</code> is given scheduling preference over a job queue with a priority value of <code>1</code>.
    integer priority = 3;
    // The state of the job queue. If the job queue state is <code>ENABLED</code>, it is able to accept jobs.
    JQState state = 4;
}

message CreateJobQueueResponse {
    // The Amazon Resource Name (ARN) of the job queue.
    string jobQueueArn = 1;
    // The name of the job queue.
    string jobQueueName = 2;
}

message DeleteComputeEnvironmentRequest {
    // The name or Amazon Resource Name (ARN) of the compute environment to delete.
    string computeEnvironment = 1;
}

message DeleteComputeEnvironmentResponse {
}

message DeleteJobQueueRequest {
    // The short name or full Amazon Resource Name (ARN) of the queue to delete.
    string jobQueue = 1;
}

message DeleteJobQueueResponse {
}

message DeregisterJobDefinitionRequest {
    // The name and revision (<code>name:revision</code>) or full Amazon Resource Name (ARN) of the job definition to deregister.
    string jobDefinition = 1;
}

message DeregisterJobDefinitionResponse {
}

message DescribeComputeEnvironmentsRequest {
    // A list of up to 100 compute environment names or full Amazon Resource Name (ARN) entries.
    array computeEnvironments = 1;
    // The maximum number of cluster results returned by <code>DescribeComputeEnvironments</code> in paginated output. When this parameter is used, <code>DescribeComputeEnvironments</code> only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>DescribeComputeEnvironments</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If this parameter is not used, then <code>DescribeComputeEnvironments</code> returns up to 100 results and a <code>nextToken</code> value if applicable.
    integer maxResults = 2;
    // <p>The <code>nextToken</code> value returned from a previous paginated <code>DescribeComputeEnvironments</code> request where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value. This value is <code>null</code> when there are no more results to return.</p> <note> <p>This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.</p> </note>
    string nextToken = 3;
}

message DescribeComputeEnvironmentsResponse {
    // The list of compute environments.
    array computeEnvironments = 1;
    // The <code>nextToken</code> value to include in a future <code>DescribeComputeEnvironments</code> request. When the results of a <code>DescribeJobDefinitions</code> request exceed <code>maxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.
    string nextToken = 2;
}

message DescribeJobDefinitionsRequest {
    // The name of the job definition to describe.
    string jobDefinitionName = 1;
    // A space-separated list of up to 100 job definition names or full Amazon Resource Name (ARN) entries.
    array jobDefinitions = 2;
    // The maximum number of results returned by <code>DescribeJobDefinitions</code> in paginated output. When this parameter is used, <code>DescribeJobDefinitions</code> only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>DescribeJobDefinitions</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If this parameter is not used, then <code>DescribeJobDefinitions</code> returns up to 100 results and a <code>nextToken</code> value if applicable.
    integer maxResults = 3;
    // <p>The <code>nextToken</code> value returned from a previous paginated <code>DescribeJobDefinitions</code> request where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value. This value is <code>null</code> when there are no more results to return.</p> <note> <p>This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.</p> </note>
    string nextToken = 4;
    // The status with which to filter job definitions.
    string status = 5;
}

message DescribeJobDefinitionsResponse {
    // The list of job definitions.
    array jobDefinitions = 1;
    // The <code>nextToken</code> value to include in a future <code>DescribeJobDefinitions</code> request. When the results of a <code>DescribeJobDefinitions</code> request exceed <code>maxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.
    string nextToken = 2;
}

message DescribeJobQueuesRequest {
    // A list of up to 100 queue names or full queue Amazon Resource Name (ARN) entries.
    array jobQueues = 1;
    // The maximum number of results returned by <code>DescribeJobQueues</code> in paginated output. When this parameter is used, <code>DescribeJobQueues</code> only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>DescribeJobQueues</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If this parameter is not used, then <code>DescribeJobQueues</code> returns up to 100 results and a <code>nextToken</code> value if applicable.
    integer maxResults = 2;
    // <p>The <code>nextToken</code> value returned from a previous paginated <code>DescribeJobQueues</code> request where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value. This value is <code>null</code> when there are no more results to return.</p> <note> <p>This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.</p> </note>
    string nextToken = 3;
}

message DescribeJobQueuesResponse {
    // The list of job queues.
    array jobQueues = 1;
    // The <code>nextToken</code> value to include in a future <code>DescribeJobQueues</code> request. When the results of a <code>DescribeJobQueues</code> request exceed <code>maxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.
    string nextToken = 2;
}

message DescribeJobsRequest {
    // A space-separated list of up to 100 job IDs.
    array jobs = 1;
}

message DescribeJobsResponse {
    // The list of jobs.
    array jobs = 1;
}

repeated KeyValuePair EnvironmentVariables = 1

message Host {
    // The path on the host container instance that is presented to the container. If this parameter is empty, then the Docker daemon has assigned a host path for you. If the <code>host</code> parameter contains a <code>sourcePath</code> file location, then the data volume persists at the specified location on the host container instance until you delete it manually. If the <code>sourcePath</code> value does not exist on the host container instance, the Docker daemon creates it. If the location does exist, the contents of the source path folder are exported.
    string sourcePath = 1;
}

enum JQState {
    ENABLED = 0;
    DISABLED = 1;
}

enum JQStatu {
    CREATING = 0;
    UPDATING = 1;
    DELETING = 2;
    DELETED = 3;
    VALID = 4;
    INVALID = 5;
}

message JobDefinition {
    // An object with various properties specific to container-based jobs.
    ContainerProperties containerProperties = 1;
    // The Amazon Resource Name (ARN) for the job definition.
    string jobDefinitionArn = 2;
    // The name of the job definition.
    string jobDefinitionName = 3;
    // Default parameters or parameter substitution placeholders that are set in the job definition. Parameters are specified as a key-value pair mapping. Parameters in a <code>SubmitJob</code> request override any corresponding parameter defaults from the job definition.
    array parameters = 4;
    // The retry strategy to use for failed jobs that are submitted with this job definition.
    RetryStrategy retryStrategy = 5;
    // The revision of the job definition.
    integer revision = 6;
    // The status of the job definition.
    string status = 7;
    // The type of job definition.
    string type = 8;
}

repeated JobDefinition JobDefinitionList = 1

enum JobDefinitionType {
    CONTAINER = 0;
}

message JobDependency {
    // The job ID of the AWS Batch job associated with this dependency.
    string jobId = 1;
}

repeated JobDependency JobDependencyList = 1

message JobDetail {
    // A list of job attempts associated with this job.
    array attempts = 1;
    // An object representing the details of the container that is associated with the job.
    ContainerDetail container = 2;
    // The Unix timestamp for when the job was created (when the task entered the <code>PENDING</code> state).
    integer createdAt = 3;
    // A list of job names or IDs on which this job depends.
    array dependsOn = 4;
    // The job definition that is used by this job.
    string jobDefinition = 5;
    // The ID for the job.
    string jobId = 6;
    // The name of the job.
    string jobName = 7;
    // The Amazon Resource Name (ARN) of the job queue with which the job is associated.
    string jobQueue = 8;
    // Additional parameters passed to the job that replace parameter substitution placeholders or override any corresponding parameter defaults from the job definition.
    array parameters = 9;
    // The retry strategy to use for this job if an attempt fails.
    RetryStrategy retryStrategy = 10;
    // The Unix timestamp for when the job was started (when the task transitioned from the <code>PENDING</code> state to the <code>RUNNING</code> state).
    integer startedAt = 11;
    // The current status for the job.
    JobStatus status = 12;
    // A short, human-readable string to provide additional details about the current status of the job.
    string statusReason = 13;
    // The Unix timestamp for when the job was stopped (when the task transitioned from the <code>RUNNING</code> state to the <code>STOPPED</code> state).
    integer stoppedAt = 14;
}

repeated JobDetail JobDetailList = 1

message JobQueueDetail {
    // The compute environments that are attached to the job queue and the order in which job placement is preferred. Compute environments are selected for job placement in ascending order.
    array computeEnvironmentOrder = 1;
    // The Amazon Resource Name (ARN) of the job queue.
    string jobQueueArn = 2;
    // The name of the job queue.
    string jobQueueName = 3;
    // The priority of the job queue.
    integer priority = 4;
    // Describes the ability of the queue to accept new jobs.
    JQState state = 5;
    // The status of the job queue (for example, <code>CREATING</code> or <code>VALID</code>).
    JQStatus status = 6;
    // A short, human-readable string to provide additional details about the current status of the job queue.
    string statusReason = 7;
}

repeated JobQueueDetail JobQueueDetailList = 1

enum JobStatu {
    SUBMITTED = 0;
    PENDING = 1;
    RUNNABLE = 2;
    STARTING = 3;
    RUNNING = 4;
    SUCCEEDED = 5;
    FAILED = 6;
}

message JobSummary {
    // The ID of the job.
    string jobId = 1;
    // The name of the job.
    string jobName = 2;
}

repeated JobSummary JobSummaryList = 1

message KeyValuePair {
    // The name of the key value pair. For environment variables, this is the name of the environment variable.
    string name = 1;
    // The value of the key value pair. For environment variables, this is the value of the environment variable.
    string value = 2;
}

message ListJobsRequest {
    // The name or full Amazon Resource Name (ARN) of the job queue with which to list jobs.
    string jobQueue = 1;
    // The job status with which to filter jobs in the specified queue. If you do not specify a status, only <code>RUNNING</code> jobs are returned.
    JobStatus jobStatus = 2;
    // The maximum number of results returned by <code>ListJobs</code> in paginated output. When this parameter is used, <code>ListJobs</code> only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>ListJobs</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If this parameter is not used, then <code>ListJobs</code> returns up to 100 results and a <code>nextToken</code> value if applicable.
    integer maxResults = 3;
    // <p>The <code>nextToken</code> value returned from a previous paginated <code>ListJobs</code> request where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value. This value is <code>null</code> when there are no more results to return.</p> <note> <p>This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.</p> </note>
    string nextToken = 4;
}

message ListJobsResponse {
    // A list of job summaries that match the request.
    array jobSummaryList = 1;
    // The <code>nextToken</code> value to include in a future <code>ListJobs</code> request. When the results of a <code>ListJobs</code> request exceed <code>maxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.
    string nextToken = 2;
}

message MountPoint {
    // The path on the container at which to mount the host volume.
    string containerPath = 1;
    // If this value is <code>true</code>, the container has read-only access to the volume; otherwise, the container can write to the volume. The default value is <code>false</code>.
    boolean readOnly = 2;
    // The name of the volume to mount.
    string sourceVolume = 3;
}

repeated MountPoint MountPoints = 1

message ParametersMap {
    string key = 1;
    string value = 2;
}
repeated ParametersMap ParametersMap = 1

message RegisterJobDefinitionRequest {
    // An object with various properties specific for container-based jobs. This parameter is required if the <code>type</code> parameter is <code>container</code>.
    ContainerProperties containerProperties = 1;
    // The name of the job definition to register. Up to 128 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed.
    string jobDefinitionName = 2;
    // Default parameter substitution placeholders to set in the job definition. Parameters are specified as a key-value pair mapping. Parameters in a <code>SubmitJob</code> request override any corresponding parameter defaults from the job definition.
    array parameters = 3;
    // The retry strategy to use for failed jobs that are submitted with this job definition. Any retry strategy that is specified during a <a>SubmitJob</a> operation overrides the retry strategy defined here.
    RetryStrategy retryStrategy = 4;
    // The type of job definition.
    JobDefinitionType type = 5;
}

message RegisterJobDefinitionResponse {
    // The Amazon Resource Name (ARN) of the job definition.
    string jobDefinitionArn = 1;
    // The name of the job definition.
    string jobDefinitionName = 2;
    // The revision of the job definition.
    integer revision = 3;
}

message RetryStrategy {
    // The number of times to move a job to the <code>RUNNABLE</code> status. You may specify between 1 and 10 attempts. If <code>attempts</code> is greater than one, the job is retried if it fails until it has moved to <code>RUNNABLE</code> that many times.
    integer attempts = 1;
}

message ServerException {
    string message = 1;
}



repeated string StringList = 1

message SubmitJobRequest {
    // A list of container overrides in JSON format that specify the name of a container in the specified job definition and the overrides it should receive. You can override the default command for a container (that is specified in the job definition or the Docker image) with a <code>command</code> override. You can also override existing environment variables (that are specified in the job definition or Docker image) on a container or add new environment variables to it with an <code>environment</code> override.
    ContainerOverrides containerOverrides = 1;
    // A list of job IDs on which this job depends. A job can depend upon a maximum of 20 jobs.
    array dependsOn = 2;
    // The job definition used by this job. This value can be either a <code>name:revision</code> or the Amazon Resource Name (ARN) for the job definition.
    string jobDefinition = 3;
    // The name of the job. The first character must be alphanumeric, and up to 128 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed.
    string jobName = 4;
    // The job queue into which the job will be submitted. You can specify either the name or the Amazon Resource Name (ARN) of the queue.
    string jobQueue = 5;
    // Additional parameters passed to the job that replace parameter substitution placeholders that are set in the job definition. Parameters are specified as a key and value pair mapping. Parameters in a <code>SubmitJob</code> request override any corresponding parameter defaults from the job definition.
    array parameters = 6;
    // The retry strategy to use for failed jobs from this <a>SubmitJob</a> operation. When a retry strategy is specified here, it overrides the retry strategy defined in the job definition.
    RetryStrategy retryStrategy = 7;
}

message SubmitJobResponse {
    // The unique identifier for the job.
    string jobId = 1;
    // The name of the job.
    string jobName = 2;
}

message TagsMap {
    string key = 1;
    string value = 2;
}
repeated TagsMap TagsMap = 1

message TerminateJobRequest {
    // Job IDs to be terminated. Up to 100 jobs can be specified.
    string jobId = 1;
    // A message to attach to the job that explains the reason for cancelling it. This message is returned by future <a>DescribeJobs</a> operations on the job. This message is also recorded in the AWS Batch activity logs.
    string reason = 2;
}

message TerminateJobResponse {
}

message Ulimit {
    // The hard limit for the <code>ulimit</code> type.
    integer hardLimit = 1;
    // The <code>type</code> of the <code>ulimit</code>.
    string name = 2;
    // The soft limit for the <code>ulimit</code> type.
    integer softLimit = 3;
}

repeated Ulimit Ulimits = 1

message UpdateComputeEnvironmentRequest {
    // The name or full Amazon Resource Name (ARN) of the compute environment to update.
    string computeEnvironment = 1;
    // Details of the compute resources managed by the compute environment. Required for a managed compute environment.
    ComputeResourceUpdate computeResources = 2;
    // <p>The full Amazon Resource Name (ARN) of the IAM role that allows AWS Batch to make calls to other AWS services on your behalf.</p> <p>If your specified role has a path other than <code>/</code>, then you must either specify the full role ARN (this is recommended) or prefix the role name with the path.</p> <note> <p>Depending on how you created your AWS Batch service role, its ARN may contain the <code>service-role</code> path prefix. When you only specify the name of the service role, AWS Batch assumes that your ARN does not use the <code>service-role</code> path prefix. Because of this, we recommend that you specify the full ARN of your service role when you create compute environments.</p> </note>
    string serviceRole = 3;
    // The state of the compute environment. Compute environments in the <code>ENABLED</code> state can accept jobs from a queue and scale in or out automatically based on the workload demand of its associated queues.
    CEState state = 4;
}

message UpdateComputeEnvironmentResponse {
    // The Amazon Resource Name (ARN) of the compute environment.
    string computeEnvironmentArn = 1;
    // The name of compute environment.
    string computeEnvironmentName = 2;
}

message UpdateJobQueueRequest {
    // Details the set of compute environments mapped to a job queue and their order relative to each other. This is one of the parameters used by the job scheduler to determine which compute environment should execute a given job.
    array computeEnvironmentOrder = 1;
    // The name or the Amazon Resource Name (ARN) of the job queue.
    string jobQueue = 2;
    // The priority of the job queue. Job queues with a higher priority (or a higher integer value for the <code>priority</code> parameter) are evaluated first when associated with same compute environment. Priority is determined in descending order, for example, a job queue with a priority value of <code>10</code> is given scheduling preference over a job queue with a priority value of <code>1</code>.
    integer priority = 3;
    // Describes the queue's ability to accept new jobs.
    JQState state = 4;
}

message UpdateJobQueueResponse {
    // The Amazon Resource Name (ARN) of the job queue.
    string jobQueueArn = 1;
    // The name of the job queue.
    string jobQueueName = 2;
}

message Volume {
    // The contents of the <code>host</code> parameter determine whether your data volume persists on the host container instance and where it is stored. If the host parameter is empty, then the Docker daemon assigns a host path for your data volume, but the data is not guaranteed to persist after the containers associated with it stop running.
    Host host = 1;
    // The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed. This name is referenced in the <code>sourceVolume</code> parameter of container definition <code>mountPoints</code>.
    string name = 2;
}

repeated Volume Volumes = 1















service AWSBatchService {
    // Cancels jobs in an AWS Batch job queue. Jobs that are in the <code>SUBMITTED</code>, <code>PENDING</code>, or <code>RUNNABLE</code> state are cancelled. Jobs that have progressed to <code>STARTING</code> or <code>RUNNING</code> are not cancelled (but the API operation still succeeds, even if no jobs are cancelled); these jobs must be terminated with the <a>TerminateJob</a> operation.
    rpc PostV1Canceljob(PostV1CanceljobRequest) returns (CancelJobResponse) {
      option (google.api.http) = {
        post: "//v1/canceljob"
        body: "body"
      };
    }
    // <p>Creates an AWS Batch compute environment. You can create <code>MANAGED</code> or <code>UNMANAGED</code> compute environments.</p> <p>In a managed compute environment, AWS Batch manages the compute resources within the environment, based on the compute resources that you specify. Instances launched into a managed compute environment use a recent, approved version of the Amazon ECS-optimized AMI. You can choose to use Amazon EC2 On-Demand instances in your managed compute environment, or you can use Amazon EC2 Spot instances that only launch when the Spot bid price is below a specified percentage of the On-Demand price.</p> <p>In an unmanaged compute environment, you can manage your own compute resources. This provides more compute resource configuration options, such as using a custom AMI, but you must ensure that your AMI meets the Amazon ECS container instance AMI specification. For more information, see <a href="http://docs.aws.amazon.com/AmazonECS/latest/developerguide/container_instance_AMIs.html">Container Instance AMIs</a> in the <i>Amazon EC2 Container Service Developer Guide</i>. After you have created your unmanaged compute environment, you can use the <a>DescribeComputeEnvironments</a> operation to find the Amazon ECS cluster that is associated with it and then manually launch your container instances into that Amazon ECS cluster. For more information, see <a href="http://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_container_instance.html">Launching an Amazon ECS Container Instance</a> in the <i>Amazon EC2 Container Service Developer Guide</i>.</p>
    rpc PostV1Createcomputeenvironment(PostV1CreatecomputeenvironmentRequest) returns (CreateComputeEnvironmentResponse) {
      option (google.api.http) = {
        post: "//v1/createcomputeenvironment"
        body: "body"
      };
    }
    // <p>Creates an AWS Batch job queue. When you create a job queue, you associate one or more compute environments to the queue and assign an order of preference for the compute environments.</p> <p>You also set a priority to the job queue that determines the order in which the AWS Batch scheduler places jobs onto its associated compute environments. For example, if a compute environment is associated with more than one job queue, the job queue with a higher priority is given preference for scheduling jobs to that compute environment.</p>
    rpc PostV1Createjobqueue(PostV1CreatejobqueueRequest) returns (CreateJobQueueResponse) {
      option (google.api.http) = {
        post: "//v1/createjobqueue"
        body: "body"
      };
    }
    // <p>Deletes an AWS Batch compute environment.</p> <p>Before you can delete a compute environment, you must set its state to <code>DISABLED</code> with the <a>UpdateComputeEnvironment</a> API operation and disassociate it from any job queues with the <a>UpdateJobQueue</a> API operation.</p>
    rpc PostV1Deletecomputeenvironment(PostV1DeletecomputeenvironmentRequest) returns (DeleteComputeEnvironmentResponse) {
      option (google.api.http) = {
        post: "//v1/deletecomputeenvironment"
        body: "body"
      };
    }
    // <p>Deletes the specified job queue. You must first disable submissions for a queue with the <a>UpdateJobQueue</a> operation. All jobs in the queue are terminated when you delete a job queue.</p> <p>It is not necessary to disassociate compute environments from a queue before submitting a <code>DeleteJobQueue</code> request. </p>
    rpc PostV1Deletejobqueue(PostV1DeletejobqueueRequest) returns (DeleteJobQueueResponse) {
      option (google.api.http) = {
        post: "//v1/deletejobqueue"
        body: "body"
      };
    }
    // Deregisters an AWS Batch job definition.
    rpc PostV1Deregisterjobdefinition(PostV1DeregisterjobdefinitionRequest) returns (DeregisterJobDefinitionResponse) {
      option (google.api.http) = {
        post: "//v1/deregisterjobdefinition"
        body: "body"
      };
    }
    // <p>Describes one or more of your compute environments.</p> <p>If you are using an unmanaged compute environment, you can use the <code>DescribeComputeEnvironment</code> operation to determine the <code>ecsClusterArn</code> that you should launch your Amazon ECS container instances into.</p>
    rpc PostV1Describecomputeenvironments(PostV1DescribecomputeenvironmentsRequest) returns (DescribeComputeEnvironmentsResponse) {
      option (google.api.http) = {
        post: "//v1/describecomputeenvironments"
        body: "body"
      };
    }
    // Describes a list of job definitions. You can specify a <code>status</code> (such as <code>ACTIVE</code>) to only return job definitions that match that status.
    rpc PostV1Describejobdefinitions(PostV1DescribejobdefinitionsRequest) returns (DescribeJobDefinitionsResponse) {
      option (google.api.http) = {
        post: "//v1/describejobdefinitions"
        body: "body"
      };
    }
    // Describes one or more of your job queues.
    rpc PostV1Describejobqueues(PostV1DescribejobqueuesRequest) returns (DescribeJobQueuesResponse) {
      option (google.api.http) = {
        post: "//v1/describejobqueues"
        body: "body"
      };
    }
    // Describes a list of AWS Batch jobs.
    rpc PostV1Describejobs(PostV1DescribejobsRequest) returns (DescribeJobsResponse) {
      option (google.api.http) = {
        post: "//v1/describejobs"
        body: "body"
      };
    }
    // Returns a list of task jobs for a specified job queue. You can filter the results by job status with the <code>jobStatus</code> parameter. If you do not specify a status, only <code>RUNNING</code> jobs are returned.
    rpc PostV1Listjobs(PostV1ListjobsRequest) returns (ListJobsResponse) {
      option (google.api.http) = {
        post: "//v1/listjobs"
        body: "body"
      };
    }
    // Registers an AWS Batch job definition.
    rpc PostV1Registerjobdefinition(PostV1RegisterjobdefinitionRequest) returns (RegisterJobDefinitionResponse) {
      option (google.api.http) = {
        post: "//v1/registerjobdefinition"
        body: "body"
      };
    }
    // Submits an AWS Batch job from a job definition. Parameters specified during <a>SubmitJob</a> override parameters defined in the job definition.
    rpc PostV1Submitjob(PostV1SubmitjobRequest) returns (SubmitJobResponse) {
      option (google.api.http) = {
        post: "//v1/submitjob"
        body: "body"
      };
    }
    // Terminates jobs in a job queue. Jobs that are in the <code>STARTING</code> or <code>RUNNING</code> state are terminated, which causes them to transition to <code>FAILED</code>. Jobs that have not progressed to the <code>STARTING</code> state are cancelled.
    rpc PostV1Terminatejob(PostV1TerminatejobRequest) returns (TerminateJobResponse) {
      option (google.api.http) = {
        post: "//v1/terminatejob"
        body: "body"
      };
    }
    // Updates an AWS Batch compute environment.
    rpc PostV1Updatecomputeenvironment(PostV1UpdatecomputeenvironmentRequest) returns (UpdateComputeEnvironmentResponse) {
      option (google.api.http) = {
        post: "//v1/updatecomputeenvironment"
        body: "body"
      };
    }
    // Updates a job queue.
    rpc PostV1Updatejobqueue(PostV1UpdatejobqueueRequest) returns (UpdateJobQueueResponse) {
      option (google.api.http) = {
        post: "//v1/updatejobqueue"
        body: "body"
      };
    }
}

syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package yunbi;

message GetV2AddressesAddressRequest {
    string address = 1;
}

message GetV2DepositRequest {
    // Access key.
    string access_key = 1;
    // The signature of your request payload, generated using your secret key.
    string signature = 2;
    // Tonce is an integer represents the milliseconds elapsed since Unix epoch.
    int32 tonce = 3;
    string txid = 4;
}

message GetV2Deposit_addressRequest {
    // Access key.
    string access_key = 1;
    // The account to which you want to deposit. Available values: cny, btc, eth, pls, note, bts, bitcny, bitusd, bitbtc, yun, nxt, ltc, doge, sc, dgd, dcs, dao, etc, amp, 1st, rep, ans, zec, zmc, gnt, gxs, qtum, eos, snt, bcc, omg, lun, pay, ven
    string currency = 2;
    // The signature of your request payload, generated using your secret key.
    string signature = 3;
    // Tonce is an integer represents the milliseconds elapsed since Unix epoch.
    int32 tonce = 4;
}

message GetV2DepositsRequest {
    // Access key.
    string access_key = 1;
    // Currency value contains  cny, btc, eth, pls, note, bts, bitcny, bitusd, bitbtc, yun, nxt, ltc, doge, sc, dgd, dcs, dao, etc, amp, 1st, rep, ans, zec, zmc, gnt, gxs, qtum, eos, snt, bcc, omg, lun, pay, ven
    string currency = 2;
    // Set result limit.
    int32 limit = 3;
    // The signature of your request payload, generated using your secret key.
    string signature = 4;
    // State value contains  submitting, cancelled, submitted, rejected, accepted, checked, warning
    string state = 5;
    // Tonce is an integer represents the milliseconds elapsed since Unix epoch.
    int32 tonce = 6;
}

message GetV2DepthRequest {
    // Limit the number of returned price levels. Default to 300.
    int32 limit = 1;
    // Unique market id. It's always in the form of xxxyyy, where xxx is the base currency code, yyy is the quote currency code, e.g. 'btccny'. All available markets can be found at /api/v2/markets.
    string market = 2;
}

message GetV2KRequest {
    // Limit the number of returned data points, default to 30.
    int32 limit = 1;
    // Unique market id. It's always in the form of xxxyyy, where xxx is the base currency code, yyy is the quote currency code, e.g. 'btccny'. All available markets can be found at /api/v2/markets.
    string market = 2;
    // Time period of K line, default to 1. You can choose between 1, 5, 15, 30, 60, 120, 240, 360, 720, 1440, 4320, 10080
    int32 period = 3;
    // An integer represents the seconds elapsed since Unix epoch. If set, only k-line data after that time will be returned.
    int32 timestamp = 4;
}

message GetV2K_with_pending_tradesRequest {
    // Limit the number of returned data points, default to 30.
    int32 limit = 1;
    // Unique market id. It's always in the form of xxxyyy, where xxx is the base currency code, yyy is the quote currency code, e.g. 'btccny'. All available markets can be found at /api/v2/markets.
    string market = 2;
    // Time period of K line, default to 1. You can choose between 1, 5, 15, 30, 60, 120, 240, 360, 720, 1440, 4320, 10080
    int32 period = 3;
    // An integer represents the seconds elapsed since Unix epoch. If set, only k-line data after that time will be returned.
    int32 timestamp = 4;
    // The trade id of the first trade you received.
    int32 trade_id = 5;
}

message GetV2MembersMeRequest {
    // Access key.
    string access_key = 1;
    // The signature of your request payload, generated using your secret key.
    string signature = 2;
    // Tonce is an integer represents the milliseconds elapsed since Unix epoch.
    int32 tonce = 3;
}

message GetV2OrderRequest {
    // Access key.
    string access_key = 1;
    // Unique order id.
    int32 id = 2;
    // The signature of your request payload, generated using your secret key.
    string signature = 3;
    // Tonce is an integer represents the milliseconds elapsed since Unix epoch.
    int32 tonce = 4;
}

message PostV2OrderDeleteRequest {
    // Access key.
    string access_key = 1;
    // Unique order id.
    int32 id = 2;
    // The signature of your request payload, generated using your secret key.
    string signature = 3;
    // Tonce is an integer represents the milliseconds elapsed since Unix epoch.
    int32 tonce = 4;
}

message GetV2Order_bookRequest {
    // Limit the number of returned sell orders. Default to 20.
    int32 asks_limit = 1;
    // Limit the number of returned buy orders. Default to 20.
    int32 bids_limit = 2;
    // Unique market id. It's always in the form of xxxyyy, where xxx is the base currency code, yyy is the quote currency code, e.g. 'btccny'. All available markets can be found at /api/v2/markets.
    string market = 3;
}

message GetV2OrdersRequest {
    // Access key.
    string access_key = 1;
    // Limit the number of returned orders, default to 100.
    int32 limit = 2;
    // Unique market id. It's always in the form of xxxyyy, where xxx is the base currency code, yyy is the quote currency code, e.g. 'btccny'. All available markets can be found at /api/v2/markets.
    string market = 3;
    // If set, returned orders will be sorted in specific order. One of 'asc' or 'desc', default to 'asc'.
    string order_by = 4;
    // Specify the page of paginated results.
    int32 page = 5;
    // The signature of your request payload, generated using your secret key.
    string signature = 6;
    // Filter order by state. One of 'wait', 'done', or 'cancel'. An order in 'wait' is an active order, waiting fullfillment; a 'done' order is an order fullfilled; 'cancel' means the order has been cancelled. Default to 'wait'.
    string state = 7;
    // Tonce is an integer represents the milliseconds elapsed since Unix epoch.
    int32 tonce = 8;
}

message PostV2OrdersRequest {
    // Access key.
    string access_key = 1;
    // Unique market id. It's always in the form of xxxyyy, where xxx is the base currency code, yyy is the quote currency code, e.g. 'btccny'. All available markets can be found at /api/v2/markets.
    string market = 2;
    // Type of order, either 'limit' or 'market'.
    string ord_type = 3;
    // Price for each unit. e.g. If you want to sell/buy 1 btc at 3000 CNY, the price is '3000.0'
    string price = 4;
    // Either 'sell' or 'buy'.
    string side = 5;
    // The signature of your request payload, generated using your secret key.
    string signature = 6;
    // Tonce is an integer represents the milliseconds elapsed since Unix epoch.
    int32 tonce = 7;
    // The amount user want to sell/buy. An order could be partially executed, e.g. an order sell 5 btc can be matched with a buy 3 btc order, left 2 btc to be sold; in this case the order's volume would be '5.0', its remaining_volume would be '2.0', its executed volume is '3.0'.
    string volume = 8;
}

message PostV2OrdersClearRequest {
    // Access key.
    string access_key = 1;
    // If present, only sell orders (asks) or buy orders (bids) will be canncelled.
    string side = 2;
    // The signature of your request payload, generated using your secret key.
    string signature = 3;
    // Tonce is an integer represents the milliseconds elapsed since Unix epoch.
    int32 tonce = 4;
}

message PostV2OrdersMultiRequest {
    // Access key.
    string access_key = 1;
    // Unique market id. It's always in the form of xxxyyy, where xxx is the base currency code, yyy is the quote currency code, e.g. 'btccny'. All available markets can be found at /api/v2/markets.
    string market = 2;
    repeated string orders = 3;
    // Type of order, either 'limit' or 'market'.
    string orders[ord_type] = 4;
    // Price for each unit. e.g. If you want to sell/buy 1 btc at 3000 CNY, the price is '3000.0'
    string orders[price] = 5;
    // Either 'sell' or 'buy'.
    string orders[side] = 6;
    // The amount user want to sell/buy. An order could be partially executed, e.g. an order sell 5 btc can be matched with a buy 3 btc order, left 2 btc to be sold; in this case the order's volume would be '5.0', its remaining_volume would be '2.0', its executed volume is '3.0'.
    string orders[volume] = 7;
    // The signature of your request payload, generated using your secret key.
    string signature = 8;
    // Tonce is an integer represents the milliseconds elapsed since Unix epoch.
    int32 tonce = 9;
}

message GetV2PartnersOrdersIdTradesRequest {
    string access_key_hash = 1;
    string id = 2;
}

message GetV2TickersMarketRequest {
    // Unique market id. It's always in the form of xxxyyy, where xxx is the base currency code, yyy is the quote currency code, e.g. 'btccny'. All available markets can be found at /api/v2/markets.
    string market = 1;
}

message GetV2TradesRequest {
    // Trade id. If set, only trades created after the trade will be returned.
    int32 from = 1;
    // Limit the number of returned trades. Default to 50.
    int32 limit = 2;
    // Unique market id. It's always in the form of xxxyyy, where xxx is the base currency code, yyy is the quote currency code, e.g. 'btccny'. All available markets can be found at /api/v2/markets.
    string market = 3;
    // If set, returned trades will be sorted in specific order. One of 'asc' or 'desc', default to 'desc'.
    string order_by = 4;
    // An integer represents the seconds elapsed since Unix epoch. If set, only trades executed before the time will be returned.
    int32 timestamp = 5;
    // Trade id. If set, only trades created before the trade will be returned.
    int32 to = 6;
}

message GetV2TradesMyRequest {
    // Access key.
    string access_key = 1;
    // Trade id. If set, only trades created after the trade will be returned.
    int32 from = 2;
    // Limit the number of returned trades. Default to 50.
    int32 limit = 3;
    // Unique market id. It's always in the form of xxxyyy, where xxx is the base currency code, yyy is the quote currency code, e.g. 'btccny'. All available markets can be found at /api/v2/markets.
    string market = 4;
    // If set, returned trades will be sorted in specific order. One of 'asc' or 'desc', default to 'desc'.
    string order_by = 5;
    // The signature of your request payload, generated using your secret key.
    string signature = 6;
    // An integer represents the seconds elapsed since Unix epoch. If set, only trades executed before the time will be returned.
    int32 timestamp = 7;
    // Trade id. If set, only trades created before the trade will be returned.
    int32 to = 8;
    // Tonce is an integer represents the milliseconds elapsed since Unix epoch.
    int32 tonce = 9;
}

service YunbiService {
    // Check Deposit Address
    rpc GetV2AddressesAddress(GetV2AddressesAddressRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v2/addresses/{address}.json"
      };
    }
    // Get details of specific deposit.
    rpc GetV2Deposit(GetV2DepositRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v2/deposit.json"
      };
    }
    // Where to deposit. The address field could be empty when a new address is generating (e.g. for bitcoin), you should try again later in that case.
    rpc GetV2Deposit_address(GetV2Deposit_addressRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v2/deposit_address.json"
      };
    }
    // Get your deposits history.
    rpc GetV2Deposits(GetV2DepositsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v2/deposits.json"
      };
    }
    // Get depth or specified market. Both asks and bids are sorted from highest price to lowest.
    rpc GetV2Depth(GetV2DepthRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v2/depth.json"
      };
    }
    // Get OHLC(k line) of specific market.
    rpc GetV2K(GetV2KRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v2/k.json"
      };
    }
    // Get K data with pending trades, which are the trades not included in K data yet, because there's delay between trade generated and processed by K data generator.
    rpc GetV2K_with_pending_trades(GetV2K_with_pending_tradesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v2/k_with_pending_trades.json"
      };
    }
    // Get all available markets.
    rpc GetV2Markets(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v2/markets.json"
      };
    }
    // Get your profile and accounts info.
    rpc GetV2MembersMe(GetV2MembersMeRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v2/members/me.json"
      };
    }
    // Get information of specified order.
    rpc GetV2Order(GetV2OrderRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v2/order.json"
      };
    }
    // Cancel an order.
    rpc PostV2OrderDelete(PostV2OrderDeleteRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/api/v2/order/delete.json"
      };
    }
    // Get the order book of specified market.
    rpc GetV2Order_book(GetV2Order_bookRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v2/order_book.json"
      };
    }
    // Get your orders, results is paginated.
    rpc GetV2Orders(GetV2OrdersRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v2/orders.json"
      };
    }
    // Create a Sell/Buy order.
    rpc PostV2Orders(PostV2OrdersRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/api/v2/orders.json"
      };
    }
    // Cancel all my orders.
    rpc PostV2OrdersClear(PostV2OrdersClearRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/api/v2/orders/clear.json"
      };
    }
    // Create multiple sell/buy orders.
    rpc PostV2OrdersMulti(PostV2OrdersMultiRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/api/v2/orders/multi.json"
      };
    }
    rpc GetV2PartnersOrdersIdTrades(GetV2PartnersOrdersIdTradesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v2/partners/orders/{id}/trades.json"
      };
    }
    // Get ticker of all markets.
    rpc GetV2Tickers(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v2/tickers.json"
      };
    }
    // Get ticker of specific market.
    rpc GetV2TickersMarket(GetV2TickersMarketRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v2/tickers/{market}.json"
      };
    }
    // Get server current time, in seconds since Unix epoch.
    rpc GetV2Timestamp(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v2/timestamp.json"
      };
    }
    // Get recent trades on market, each trade is included only once. Trades are sorted in reverse creation order.
    rpc GetV2Trades(GetV2TradesRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v2/trades.json"
      };
    }
    // Get your executed trades. Trades are sorted in reverse creation order.
    rpc GetV2TradesMy(GetV2TradesMyRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/api/v2/trades/my.json"
      };
    }
}

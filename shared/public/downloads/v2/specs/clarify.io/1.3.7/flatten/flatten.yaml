basePath: /
definitions.Bundle.$ref: '#/definitions/object'
definitions.Bundle.properties._class.description: Bundle
definitions.Bundle.properties._class.type: string
definitions.Bundle.properties._embedded.$ref: '#/definitions/object'
definitions.Bundle.properties._embedded.description: Embedded objects, keyed by link
  relation
definitions.Bundle.properties._links.$ref: '#/definitions/object'
definitions.Bundle.properties._links.description: HAL hyper links, keyed by relation
  (self, clarify:metadata, clarify:tracks)
definitions.Bundle.properties.created.description: Date the bundle was created, ex.
  "2014-02-25T14:23:45Z"
definitions.Bundle.properties.created.type: string
definitions.Bundle.properties.external_id.description: A string that can refer to
  an item in an external system. Up to 128 characters.
definitions.Bundle.properties.external_id.type: string
definitions.Bundle.properties.id.description: id of the bundle
definitions.Bundle.properties.id.type: string
definitions.Bundle.properties.name.description: Name of the bundle. Up to 128 characters.
definitions.Bundle.properties.name.type: string
definitions.Bundle.properties.notify_url.description: URL for notifications on this
  bundle
definitions.Bundle.properties.notify_url.type: string
definitions.Bundle.properties.updated.description: Date the bundle was updated, ex.
  "2014-02-25T14:23:45Z"
definitions.Bundle.properties.updated.type: string
definitions.Bundle.properties.version.description: Object version
definitions.Bundle.properties.version.type: integer
definitions.Bundle.required.length: 6
definitions.Bundle.required[0]: _class
definitions.Bundle.required[1]: _links
definitions.Bundle.required[2]: created
definitions.Bundle.required[3]: id
definitions.Bundle.required[4]: updated
definitions.Bundle.required[5]: version
definitions.BundleReport.$ref: '#/definitions/object'
definitions.BundleReport.properties._class.description: BundleRport
definitions.BundleReport.properties._class.type: string
definitions.BundleReport.properties._links.$ref: '#/definitions/object'
definitions.BundleReport.properties._links.description: HAL hyper links, keyed by
  relation (self)
definitions.BundleReport.properties.bundle_count.description: Total number of bundles
  in report
definitions.BundleReport.properties.bundle_count.type: integer
definitions.BundleReport.properties.filter.description: Filter expression used to
  limit bundles in report
definitions.BundleReport.properties.filter.type: string
definitions.BundleReport.properties.generated.description: Date the report was created,
  ex. "2014-02-25T14:23:45Z"
definitions.BundleReport.properties.generated.type: string
definitions.BundleReport.properties.interval.description: Interval of periods Up to
  128 characters.
definitions.BundleReport.properties.interval.type: string
definitions.BundleReport.properties.periods.description: Data for interval period
definitions.BundleReport.properties.periods.items.$ref: '#/definitions/ReportPeriod'
definitions.BundleReport.properties.periods.type: array
definitions.BundleReport.properties.type.description: Type of report Up to 128 characters.
definitions.BundleReport.properties.type.type: string
definitions.BundleReport.required.length: 5
definitions.BundleReport.required[0]: _class
definitions.BundleReport.required[1]: _links
definitions.BundleReport.required[2]: bundle_count
definitions.BundleReport.required[3]: generated
definitions.BundleReport.required[4]: periods
definitions.Collection.$ref: '#/definitions/object'
definitions.Collection.properties._class.description: Collection
definitions.Collection.properties._class.type: string
definitions.Collection.properties._embedded.$ref: '#/definitions/object'
definitions.Collection.properties._embedded.description: Embedded objects, keyed by
  link relation
definitions.Collection.properties._links.$ref: '#/definitions/object'
definitions.Collection.properties._links.description: HAL hyper links, keyed by relation
  (items, first, last, next, prev)
definitions.Collection.properties.limit.description: Maximum number of items requested
definitions.Collection.properties.limit.type: integer
definitions.Collection.properties.total.description: Total number of items available
definitions.Collection.properties.total.type: integer
definitions.Collection.required.length: 4
definitions.Collection.required[0]: _class
definitions.Collection.required[1]: _links
definitions.Collection.required[2]: limit
definitions.Collection.required[3]: total
definitions.Insight.$ref: '#/definitions/object'
definitions.Insight.properties._class.description: Class name of Insight
definitions.Insight.properties._class.type: string
definitions.Insight.properties._links.$ref: '#/definitions/object'
definitions.Insight.properties._links.description: HAL hyper links, keyed by relation
  (self, parent, clarify:bundle)
definitions.Insight.properties.bundle_id.description: id of the bundle
definitions.Insight.properties.bundle_id.type: string
definitions.Insight.properties.created.description: Date the insight was created,
  ex. "2014-02-25T14:23:45Z"
definitions.Insight.properties.created.type: string
definitions.Insight.properties.data.$ref: '#/definitions/object'
definitions.Insight.properties.data.description: Bundle insight data values (only
  present for some insights)
definitions.Insight.properties.id.description: id of the insight
definitions.Insight.properties.id.type: string
definitions.Insight.properties.name.description: Name of the insight
definitions.Insight.properties.name.type: string
definitions.Insight.properties.status.description: 'Status of insight: ready, pending,
  queued, processing, error'
definitions.Insight.properties.status.type: string
definitions.Insight.properties.track_data.description: Array of objects containing
  insight data values per track, with array indexes matching the tracks array
definitions.Insight.properties.track_data.type: array
definitions.Insight.properties.updated.description: Date the insight was updated,
  ex. "2014-02-25T14:23:45Z"
definitions.Insight.properties.updated.type: string
definitions.Insight.required.length: 8
definitions.Insight.required[0]: _class
definitions.Insight.required[1]: _links
definitions.Insight.required[2]: bundle_id
definitions.Insight.required[3]: created
definitions.Insight.required[4]: id
definitions.Insight.required[5]: name
definitions.Insight.required[6]: status
definitions.Insight.required[7]: updated
definitions.Insights.$ref: '#/definitions/object'
definitions.Insights.properties._class.description: Insights
definitions.Insights.properties._class.type: string
definitions.Insights.properties._links.$ref: '#/definitions/object'
definitions.Insights.properties._links.description: HAL hyper links, keyed by relation
  (self, parent, [insight:*])
definitions.Insights.properties.bundle_id.description: id of the bundle
definitions.Insights.properties.bundle_id.type: string
definitions.Insights.properties.created.description: Date the insights was created,
  ex. "2014-02-25T14:23:45Z"
definitions.Insights.properties.created.type: string
definitions.Insights.properties.updated.description: Date the insights was updated,
  ex. "2014-02-25T14:23:45Z"
definitions.Insights.properties.updated.type: string
definitions.Insights.required.length: 5
definitions.Insights.required[0]: _class
definitions.Insights.required[1]: _links
definitions.Insights.required[2]: bundle_id
definitions.Insights.required[3]: created
definitions.Insights.required[4]: updated
definitions.ItemResult.$ref: '#/definitions/object'
definitions.ItemResult.properties.score.description: Relevance of the item according
  to the search criteria. A value between 0 and 1
definitions.ItemResult.properties.score.type: number
definitions.ItemResult.properties.term_results.description: Results of each search
  term for the item. Indexes match the search_terms array
definitions.ItemResult.properties.term_results.items.$ref: '#/definitions/TermResult'
definitions.ItemResult.properties.term_results.type: array
definitions.ItemResult.required.length: 2
definitions.ItemResult.required[0]: score
definitions.ItemResult.required[1]: term_results
definitions.MatchHit.$ref: '#/definitions/object'
definitions.MatchHit.properties.end.description: For "text" matches, the index of
  the character in the string immediately after the matched term (exclusive.) For
  "audio" matches, the end time in seconds where the word was spoken
definitions.MatchHit.properties.end.type: number
definitions.MatchHit.properties.start.description: For "text" matches, the index of
  the character in the string. For "array" matches, the index of the value in the
  array. For "audio" matches, the start time in seconds where the word was spoken
definitions.MatchHit.properties.start.type: number
definitions.MatchHit.required.length: 1
definitions.MatchHit.required[0]: start
definitions.Metadata.$ref: '#/definitions/object'
definitions.Metadata.properties._class.description: Metadata
definitions.Metadata.properties._class.type: string
definitions.Metadata.properties._links.$ref: '#/definitions/object'
definitions.Metadata.properties._links.description: HAL hyper links, keyed by relation
  (self, parent)
definitions.Metadata.properties.bundle_id.description: id of the bundle
definitions.Metadata.properties.bundle_id.type: string
definitions.Metadata.properties.created.description: Date the metadata was created,
  ex. "2014-02-25T14:23:45Z"
definitions.Metadata.properties.created.type: string
definitions.Metadata.properties.data.$ref: '#/definitions/object'
definitions.Metadata.properties.data.description: User-defined JSON metadata for the
  bundle
definitions.Metadata.properties.updated.description: Date the metadata was updated,
  ex. "2014-02-25T14:23:45Z"
definitions.Metadata.properties.updated.type: string
definitions.Metadata.properties.version.description: Object version
definitions.Metadata.properties.version.type: integer
definitions.Metadata.required.length: 7
definitions.Metadata.required[0]: _class
definitions.Metadata.required[1]: _links
definitions.Metadata.required[2]: bundle_id
definitions.Metadata.required[3]: created
definitions.Metadata.required[4]: data
definitions.Metadata.required[5]: updated
definitions.Metadata.required[6]: version
definitions.Ref.$ref: '#/definitions/object'
definitions.Ref.properties._class.description: Ref
definitions.Ref.properties._class.type: string
definitions.Ref.properties._links.$ref: '#/definitions/object'
definitions.Ref.properties._links.description: HAL hyper links, keyed by relation
  (self, parent)
definitions.Ref.required.length: 2
definitions.Ref.required[0]: _class
definitions.Ref.required[1]: _links
definitions.Ref_(of_Bundle).$ref: '#/definitions/object'
definitions.Ref_(of_Bundle).properties._class.description: Ref
definitions.Ref_(of_Bundle).properties._class.type: string
definitions.Ref_(of_Bundle).properties._links.$ref: '#/definitions/object'
definitions.Ref_(of_Bundle).properties._links.description: HAL hyper links, keyed
  by relation (self, clarify:metadata, clarify:tracks, clarify:tracks (if track created))
definitions.Ref_(of_Bundle).properties.id.description: id of the bundle
definitions.Ref_(of_Bundle).properties.id.type: string
definitions.Ref_(of_Bundle).properties.track_id.description: id of created track (if
  a track was created)
definitions.Ref_(of_Bundle).properties.track_id.type: string
definitions.Ref_(of_Bundle).required.length: 3
definitions.Ref_(of_Bundle).required[0]: _class
definitions.Ref_(of_Bundle).required[1]: _links
definitions.Ref_(of_Bundle).required[2]: id
definitions.Ref_(of_Track).$ref: '#/definitions/object'
definitions.Ref_(of_Track).properties._class.description: Ref
definitions.Ref_(of_Track).properties._class.type: string
definitions.Ref_(of_Track).properties._links.$ref: '#/definitions/object'
definitions.Ref_(of_Track).properties._links.description: HAL hyper links, keyed by
  relation (self, parent, clarify:bundle)
definitions.Ref_(of_Track).properties.id.description: id of the track
definitions.Ref_(of_Track).properties.id.type: string
definitions.Ref_(of_Track).required.length: 3
definitions.Ref_(of_Track).required[0]: _class
definitions.Ref_(of_Track).required[1]: _links
definitions.Ref_(of_Track).required[2]: id
definitions.ReportPeriod.$ref: '#/definitions/object'
definitions.ReportPeriod.properties.bundle.$ref: '#/definitions/ReportPeriodBundle'
definitions.ReportPeriod.properties.start.description: Start date and time of the
  period ex. "2018-01-01T00:00:00Z"
definitions.ReportPeriod.properties.start.type: string
definitions.ReportPeriod.required.length: 1
definitions.ReportPeriod.required[0]: start
definitions.ReportPeriodBundle.$ref: '#/definitions/object'
definitions.ReportPeriodBundle.properties.count.description: Number of bundles in
  the period
definitions.ReportPeriodBundle.properties.count.type: integer
definitions.ReportPeriodBundle.required.length: 1
definitions.ReportPeriodBundle.required[0]: count
definitions.SearchCollection.$ref: '#/definitions/object'
definitions.SearchCollection.properties._class.description: SearchCollection
definitions.SearchCollection.properties._class.type: string
definitions.SearchCollection.properties._embedded.$ref: '#/definitions/object'
definitions.SearchCollection.properties._embedded.description: Embedded objects, keyed
  by link relation
definitions.SearchCollection.properties._links.$ref: '#/definitions/object'
definitions.SearchCollection.properties._links.description: HAL hyper links, keyed
  by relation (items, first, next, prev)
definitions.SearchCollection.properties.item_results.description: Search results per
  item. Indexes match the items array.
definitions.SearchCollection.properties.item_results.items.$ref: '#/definitions/ItemResult'
definitions.SearchCollection.properties.item_results.type: array
definitions.SearchCollection.properties.limit.description: Maximum number of items
  requested
definitions.SearchCollection.properties.limit.type: integer
definitions.SearchCollection.properties.search_terms.description: Terms in the search
definitions.SearchCollection.properties.search_terms.items.$ref: '#/definitions/SearchTerm'
definitions.SearchCollection.properties.search_terms.type: array
definitions.SearchCollection.properties.total.description: Total number of items available
definitions.SearchCollection.properties.total.type: integer
definitions.SearchCollection.required.length: 6
definitions.SearchCollection.required[0]: _class
definitions.SearchCollection.required[1]: _links
definitions.SearchCollection.required[2]: item_results
definitions.SearchCollection.required[3]: limit
definitions.SearchCollection.required[4]: search_terms
definitions.SearchCollection.required[5]: total
definitions.SearchTerm.$ref: '#/definitions/object'
definitions.SearchTerm.properties.term.description: A term from the query
definitions.SearchTerm.properties.term.type: string
definitions.SearchTerm.required.length: 1
definitions.SearchTerm.required[0]: term
definitions.TermMatch.$ref: '#/definitions/object'
definitions.TermMatch.properties.field.description: For "text" or "array" match types,
  specifies the metadata field that contains the match
definitions.TermMatch.properties.field.type: string
definitions.TermMatch.properties.hits.description: Array listing exactly where the
  search term was found in a metadata field or audio
definitions.TermMatch.properties.hits.items.$ref: '#/definitions/MatchHit'
definitions.TermMatch.properties.hits.type: array
definitions.TermMatch.properties.type.description: 'Type of match: "text", "array",
  or "audio"'
definitions.TermMatch.properties.type.type: string
definitions.TermMatch.required.length: 2
definitions.TermMatch.required[0]: hits
definitions.TermMatch.required[1]: type
definitions.TermResult.$ref: '#/definitions/object'
definitions.TermResult.properties.matches.description: Array of locations where the
  search term was found in the bundle
definitions.TermResult.properties.matches.items.$ref: '#/definitions/TermMatch'
definitions.TermResult.properties.matches.type: array
definitions.TermResult.properties.score.description: Score for the search term in
  the item. A value between 0 and 1
definitions.TermResult.properties.score.type: number
definitions.TermResult.required.length: 2
definitions.TermResult.required[0]: matches
definitions.TermResult.required[1]: score
definitions.Track.$ref: '#/definitions/object'
definitions.Track.properties._class.description: Track
definitions.Track.properties._class.type: string
definitions.Track.properties._links.$ref: '#/definitions/object'
definitions.Track.properties._links.description: HAL hyper links, keyed by relation
  (self, parent, bundle)
definitions.Track.properties.audio_channel.description: The audio channel used for
  the track ( "" | left | right). Empty string means all channels of audio in the
  media file are used for the track
definitions.Track.properties.audio_channel.enum.length: 2
definitions.Track.properties.audio_channel.enum[0]: left
definitions.Track.properties.audio_channel.enum[1]: right
definitions.Track.properties.audio_channel.type: string
definitions.Track.properties.audio_language.description: Language of the audio in
  the track. An RFC5646 language code or empty string. (Ex. en-US)
definitions.Track.properties.audio_language.type: string
definitions.Track.properties.created.description: Date the track was created, ex.
  "2014-02-25T14:23:45Z"
definitions.Track.properties.created.type: string
definitions.Track.properties.duration.description: Number of seconds of media. Automatically
  determined
definitions.Track.properties.duration.type: number
definitions.Track.properties.fetch_response_code.description: HTTP response code returned
  from requesting the media_url
definitions.Track.properties.fetch_response_code.type: integer
definitions.Track.properties.fetch_response_message.description: If media request
  fails, a message describing the failure
definitions.Track.properties.fetch_response_message.type: string
definitions.Track.properties.id.description: Id of the track
definitions.Track.properties.id.type: string
definitions.Track.properties.label.description: Label for the track. Up to 128 characters.
definitions.Track.properties.label.type: string
definitions.Track.properties.media_code.description: Status code returned from verifying
  the media
definitions.Track.properties.media_code.type: integer
definitions.Track.properties.media_message.description: If media is invalid, a message
  describing the problem
definitions.Track.properties.media_message.type: string
definitions.Track.properties.media_size.description: Number of bytes in the media.
  Automatically determined
definitions.Track.properties.media_size.type: integer
definitions.Track.properties.media_url.type: string
definitions.Track.properties.mime_type.description: Mime type. This is automatically
  determined from the media
definitions.Track.properties.mime_type.type: string
definitions.Track.properties.start_time.description: Start time of media, an offset
  in seconds from the start time of the bundle
definitions.Track.properties.start_time.type: number
definitions.Track.properties.status.description: 'Status of track: ready, pending,
  queued, processing, error'
definitions.Track.properties.status.type: string
definitions.Track.properties.track.description: Track index in the Tracks array
definitions.Track.properties.track.type: integer
definitions.Track.properties.updated.description: Date the track was updated, ex.
  "2014-02-25T14:23:45Z"
definitions.Track.properties.updated.type: string
definitions.Track.required.length: 15
definitions.Track.required[0]: _class
definitions.Track.required[1]: _links
definitions.Track.required[2]: audio_channel
definitions.Track.required[3]: audio_language
definitions.Track.required[4]: created
definitions.Track.required[5]: duration
definitions.Track.required[6]: fetch_response_code
definitions.Track.required[7]: id
definitions.Track.required[8]: media_code
definitions.Track.required[9]: media_size
definitions.Track.required[10]: media_url
definitions.Track.required[11]: start_time
definitions.Track.required[12]: status
definitions.Track.required[13]: track
definitions.Track.required[14]: updated
definitions.Track_(array_item).$ref: '#/definitions/object'
definitions.Track_(array_item).properties.audio_channel.description: The audio channel
  used for the track ( "" | left | right). Empty string means all channels of audio
  in the media file are used for the track
definitions.Track_(array_item).properties.audio_channel.enum.length: 2
definitions.Track_(array_item).properties.audio_channel.enum[0]: left
definitions.Track_(array_item).properties.audio_channel.enum[1]: right
definitions.Track_(array_item).properties.audio_channel.type: string
definitions.Track_(array_item).properties.audio_language.description: Language of
  the audio in the track. An RFC5646 language code or empty string. (Ex. en-US)
definitions.Track_(array_item).properties.audio_language.type: string
definitions.Track_(array_item).properties.created.description: Date the track was
  created, ex. "2014-02-25T14:23:45Z"
definitions.Track_(array_item).properties.created.type: string
definitions.Track_(array_item).properties.duration.description: Number of seconds
  of media. Automatically determined
definitions.Track_(array_item).properties.duration.type: number
definitions.Track_(array_item).properties.fetch_response_code.description: HTTP response
  code returned from requesting the media_url
definitions.Track_(array_item).properties.fetch_response_code.type: integer
definitions.Track_(array_item).properties.fetch_response_message.description: If media
  request fails, a message describing the failure
definitions.Track_(array_item).properties.fetch_response_message.type: string
definitions.Track_(array_item).properties.id.description: Id of the track
definitions.Track_(array_item).properties.id.type: string
definitions.Track_(array_item).properties.label.description: Label for the track.
  Up to 128 characters.
definitions.Track_(array_item).properties.label.type: string
definitions.Track_(array_item).properties.media_code.description: Status code returned
  from verifying the media
definitions.Track_(array_item).properties.media_code.type: integer
definitions.Track_(array_item).properties.media_message.description: If media is invalid,
  a message describing the problem
definitions.Track_(array_item).properties.media_message.type: string
definitions.Track_(array_item).properties.media_size.description: Number of bytes
  in the media. Automatically determined
definitions.Track_(array_item).properties.media_size.type: integer
definitions.Track_(array_item).properties.media_url.type: string
definitions.Track_(array_item).properties.mime_type.description: Mime type. This is
  automatically determined from the media
definitions.Track_(array_item).properties.mime_type.type: string
definitions.Track_(array_item).properties.start_time.description: Start time of media,
  an offset in seconds from the start time of the bundle
definitions.Track_(array_item).properties.start_time.type: number
definitions.Track_(array_item).properties.status.description: 'Status of track: ready,
  pending, queued, processing, error'
definitions.Track_(array_item).properties.status.type: string
definitions.Track_(array_item).properties.track.description: Track index in the Tracks
  array
definitions.Track_(array_item).properties.track.type: integer
definitions.Track_(array_item).properties.updated.description: Date the track was
  updated, ex. "2014-02-25T14:23:45Z"
definitions.Track_(array_item).properties.updated.type: string
definitions.Track_(array_item).required.length: 13
definitions.Track_(array_item).required[0]: audio_channel
definitions.Track_(array_item).required[1]: audio_language
definitions.Track_(array_item).required[2]: created
definitions.Track_(array_item).required[3]: duration
definitions.Track_(array_item).required[4]: fetch_response_code
definitions.Track_(array_item).required[5]: id
definitions.Track_(array_item).required[6]: media_code
definitions.Track_(array_item).required[7]: media_size
definitions.Track_(array_item).required[8]: media_url
definitions.Track_(array_item).required[9]: start_time
definitions.Track_(array_item).required[10]: status
definitions.Track_(array_item).required[11]: track
definitions.Track_(array_item).required[12]: updated
definitions.Tracks.$ref: '#/definitions/object'
definitions.Tracks.properties._class.description: Tracks
definitions.Tracks.properties._class.type: string
definitions.Tracks.properties._links.$ref: '#/definitions/object'
definitions.Tracks.properties._links.description: HAL hyper links, keyed by relation
  (self, parent)
definitions.Tracks.properties.bundle_id.description: id of the bundle
definitions.Tracks.properties.bundle_id.type: string
definitions.Tracks.properties.created.description: Date the tracks was created, ex.
  "2014-02-25T14:23:45Z"
definitions.Tracks.properties.created.type: string
definitions.Tracks.properties.status.description: 'Summary status of tracks: ready,
  pending, queued, processing, error'
definitions.Tracks.properties.status.type: string
definitions.Tracks.properties.tracks.description: Array of tracks
definitions.Tracks.properties.tracks.items.$ref: '#/definitions/Track (array item)'
definitions.Tracks.properties.tracks.type: array
definitions.Tracks.properties.updated.description: Date the tracks was updated, ex.
  "2014-02-25T14:23:45Z"
definitions.Tracks.properties.updated.type: string
definitions.Tracks.properties.version.description: Object version
definitions.Tracks.properties.version.type: integer
definitions.Tracks.required.length: 8
definitions.Tracks.required[0]: _class
definitions.Tracks.required[1]: _links
definitions.Tracks.required[2]: bundle_id
definitions.Tracks.required[3]: created
definitions.Tracks.required[4]: status
definitions.Tracks.required[5]: tracks
definitions.Tracks.required[6]: updated
definitions.Tracks.required[7]: version
definitions.object.$ref: '#/definitions/object'
host: api.clarify.io
info.description: The API to Search and Understand Audio & Video Data.
info.title: Clarify
info.version: 1.3.7
info.x-apisguru-categories.length: 1
info.x-apisguru-categories[0]: search
info.x-logo.backgroundColor: '#65A8B5'
info.x-logo.url: https://api.apis.guru/v2/cache/logo/https_pbs.twimg.com_profile_images_505050260498968577_WJFqkciV_400x400.png
info.x-origin.length: 1
info.x-origin[0].converter.url: https://github.com/lucybot/api-spec-converter
info.x-origin[0].converter.version: 2.5.0
info.x-origin[0].format: swagger
info.x-origin[0].url: https://api.clarify.io/api-docs
info.x-origin[0].version: "1.2"
info.x-preferred: true
info.x-providerName: clarify.io
paths./v1/bundles.get.description: Gets the list of bundles. Links to each item are
  in the _links with link relation <b>items</b>.<br/><br/>After getting the initial
  list, use the <b>first</b>, <b>last</b>, <b>next</b>, <b>prev</b> link relations
  to get more bundles in the list. Note that <b>next</b> will not be available at
  the end of the list and <b>prev</b> will not be available at the start of the list.
  If the results are exactly one page neither <b>prev</b> nor <b>next</b> will be
  available.<br/><br/>The <b>embed</b> parameter specifies link relations to embed
  in the results. The models for the specified link relations will be in an array
  in the embedded object with the link relation as the key. For example, if you do
  embed=items, _embedded will contain a property <b>items</b> whose value is the array
  of bundle models. For link relations that are curies (ex. "clarify:metadata"), you
  may simply use the base name (ex. "metadata").
paths./v1/bundles.get.parameters.length: 3
paths./v1/bundles.get.parameters[0].description: limit results to specified number
  of bundles. Default is 10. Max 100.
paths./v1/bundles.get.parameters[0].in: query
paths./v1/bundles.get.parameters[0].maximum: 100
paths./v1/bundles.get.parameters[0].minimum: 1
paths./v1/bundles.get.parameters[0].name: limit
paths./v1/bundles.get.parameters[0].required: false
paths./v1/bundles.get.parameters[0].type: integer
paths./v1/bundles.get.parameters[1].description: 'list of link relations to embed
  in the result collection. Zero or more of: items, tracks, metadata, insights. List
  is space or comma separated single string or an array of strings'
paths./v1/bundles.get.parameters[1].in: query
paths./v1/bundles.get.parameters[1].name: embed
paths./v1/bundles.get.parameters[1].required: false
paths./v1/bundles.get.parameters[1].type: string
paths./v1/bundles.get.parameters[2].description: optional opaque value, automatically
  provided in next/prev links, or literal "first", "last"
paths./v1/bundles.get.parameters[2].in: query
paths./v1/bundles.get.parameters[2].name: iterator
paths./v1/bundles.get.parameters[2].required: false
paths./v1/bundles.get.parameters[2].type: string
paths./v1/bundles.get.produces.length: 1
paths./v1/bundles.get.produces[0]: application/hal+json
paths./v1/bundles.get.responses.200.description: OK
paths./v1/bundles.get.responses.200.schema.$ref: '#/definitions/Collection'
paths./v1/bundles.get.responses.400.description: Bad request
paths./v1/bundles.get.summary: List bundles
paths./v1/bundles.get.tags.length: 1
paths./v1/bundles.get.tags[0]: bundles
paths./v1/bundles.post.description: 'Create a new bundle with the specified name,
  media url, and optional JSON metadata.<br/><br/><b>name</b> can be any string you
  wish to associate with the bundle.<br/><br/><b>media_url</b> must be a publicly
  accessible url to a media file. It will be fetched asynchronously after the REST
  call returns. The audio can be mono or stereo.<br/><br/><b>audio_channel</b> is
  used to specify audio channels if the media is a stereo file. A value of <i>left</i>
  or <i>right</i> signifies that only the specified channel will be used. If no value
  or an empty string is specified for <b>audio_channel</b>, all channels will be used
  in a single track. If your stereo channels were recorded separately with each channel
  containing distinct content (for example if 2 legs of a phone call were recorded
  separately and combined into a single stereo file), for best speech recognition,
  create two tracks, with <b>audio_channel</b> set to <i>left</i> and <i>right</i>
  in each track respectively. If your stereo file is simply a recording made with
  a stereo microphone, <b>audio_channel</b> should be set to an empty string (or not
  be specified.) If you have audio channels as separate media files, after creating
  the bundle with one <b>media_url</b>, POST another <b>media_url</b> to /bundles/{bundle_id}/tracks.<br/><br/><b>audio_language</b>
  can be used to specify the language of the audio media. This is an optional parameter
  and if not specified or an empty string, the language of the track will be automatically
  detected. If specified, it must be a language code as described in RFC5646 (see
  <a href="http://tools.ietf.org/html/rfc5646" target="_blank">http://tools.ietf.org/html/rfc5646</a>).
  Supported languages: en-US, en-UK, es, fr.<br/><br/><b>label</b> is a short name
  for the track.<br/><br/><b>metadata</b> is a single-level JSON object of your own
  definition, containing key-values that can be searched and filtered on. Metadata
  can be used to hold text such as names, titles, descriptions and values for segregating
  bundles, for example by user, topic, folder name etc. The keys (property names)
  can be up to 64 characters and must contain only alphanumeric characters and underscore
  (but not start with underscore) and must not be a reserved name. Reserved names
  are &quot;true&quot;, &quot;false&quot;, and &quot;null&quot;. Values can be strings,
  numbers, boolean true/false, date-times represented as a string in ISO 8601 format
  (ex. &quot;2014-02-25T14:23:45.000Z&quot;), or an array of these primitive types.
  Strings can be up to 2000 characters and strings in arrays can be up to 128 characters
  each. Nested objects are not allowed. Metadata can contain up to 50 key-value pairs
  up to a total JSON size of 4000 characters.<br/><br/><b>start_time</b> a time in
  seconds that the media starts, relative to start time of the bundle. This allows
  you to specify sequential parts of media. If not specified, the default is 0.<br/><br/><b>parts_pending</b>
  a boolean flag specifying if more media parts will subsequently be added to the
  track. If true, a subsequent API call must be made to signify that the track is
  complete. If not specified, the default is false.<br/><br/><b>external_id</b> is
  an optional parameter that can be used to logically link a bundle to an item in
  an external system. The <b>external_id</b> can be whatever you use to identify items
  in your own database.<br/><br/><b>notify_url</b> is a webhook. It must be a publicly
  accessible url (http or https) on your server to which notifications for the bundle
  will be POSTed. There are three types of notifications: Track Notifications, Insight
  Notifications and Bundle Notifications. For more information on the content of notifications
  and when they are sent, see the <a href="http://docs.clarify.io/overview/#notifications"
  target="clarify">notification docs page</a>.<br/><br/>If a track was created along
  with the budle, the link relation <b>clarify:track</b> will be included with a link
  to the new track.'
paths./v1/bundles.post.parameters.length: 10
paths./v1/bundles.post.parameters[0].description: Name of the bundle. Up to 128 characters.
paths./v1/bundles.post.parameters[0].in: formData
paths./v1/bundles.post.parameters[0].name: name
paths./v1/bundles.post.parameters[0].required: false
paths./v1/bundles.post.parameters[0].type: string
paths./v1/bundles.post.parameters[1].description: URL of a media (audio or video)
  file for this bundle. Up to 2083 characters.
paths./v1/bundles.post.parameters[1].in: formData
paths./v1/bundles.post.parameters[1].name: media_url
paths./v1/bundles.post.parameters[1].required: false
paths./v1/bundles.post.parameters[1].type: string
paths./v1/bundles.post.parameters[2].description: The audio channel to use for the
  track ( "" | left | right ). Default is empty string which means all channels of
  audio in the media file are used for the track.
paths./v1/bundles.post.parameters[2].enum.length: 2
paths./v1/bundles.post.parameters[2].enum[0]: left
paths./v1/bundles.post.parameters[2].enum[1]: right
paths./v1/bundles.post.parameters[2].in: formData
paths./v1/bundles.post.parameters[2].name: audio_channel
paths./v1/bundles.post.parameters[2].required: false
paths./v1/bundles.post.parameters[2].type: string
paths./v1/bundles.post.parameters[3].description: Language of the audio in the track,
  specified with an RFC5646 code.
paths./v1/bundles.post.parameters[3].enum.length: 4
paths./v1/bundles.post.parameters[3].enum[0]: en-US
paths./v1/bundles.post.parameters[3].enum[1]: en-UK
paths./v1/bundles.post.parameters[3].enum[2]: es
paths./v1/bundles.post.parameters[3].enum[3]: fr
paths./v1/bundles.post.parameters[3].in: formData
paths./v1/bundles.post.parameters[3].name: audio_language
paths./v1/bundles.post.parameters[3].required: false
paths./v1/bundles.post.parameters[3].type: string
paths./v1/bundles.post.parameters[4].description: Time offset in seconds that the
  media starts relative to the bundle. Default is 0.
paths./v1/bundles.post.parameters[4].in: formData
paths./v1/bundles.post.parameters[4].name: start_time
paths./v1/bundles.post.parameters[4].required: false
paths./v1/bundles.post.parameters[4].type: number
paths./v1/bundles.post.parameters[5].description: Set to true if more media parts
  will be added to the track. Default is false.
paths./v1/bundles.post.parameters[5].in: formData
paths./v1/bundles.post.parameters[5].name: parts_pending
paths./v1/bundles.post.parameters[5].required: false
paths./v1/bundles.post.parameters[5].type: boolean
paths./v1/bundles.post.parameters[6].description: Label for the track (if media_url
  is specified.) Up to 128 characters.
paths./v1/bundles.post.parameters[6].in: formData
paths./v1/bundles.post.parameters[6].name: label
paths./v1/bundles.post.parameters[6].required: false
paths./v1/bundles.post.parameters[6].type: string
paths./v1/bundles.post.parameters[7].description: User-defined JSON data associated
  with the bundle. Must be valid JSON, up to 4000 characters.
paths./v1/bundles.post.parameters[7].in: formData
paths./v1/bundles.post.parameters[7].name: metadata
paths./v1/bundles.post.parameters[7].required: false
paths./v1/bundles.post.parameters[7].type: string
paths./v1/bundles.post.parameters[8].description: URL for notifications on this bundle.
  Up to 2083 characters.
paths./v1/bundles.post.parameters[8].in: formData
paths./v1/bundles.post.parameters[8].name: notify_url
paths./v1/bundles.post.parameters[8].required: false
paths./v1/bundles.post.parameters[8].type: string
paths./v1/bundles.post.parameters[9].description: A string that can refer to an item
  in an external system. Up to 128 characters.
paths./v1/bundles.post.parameters[9].in: formData
paths./v1/bundles.post.parameters[9].name: external_id
paths./v1/bundles.post.parameters[9].required: false
paths./v1/bundles.post.parameters[9].type: string
paths./v1/bundles.post.produces.length: 1
paths./v1/bundles.post.produces[0]: application/hal+json
paths./v1/bundles.post.responses.200.description: No response was specified
paths./v1/bundles.post.responses.200.schema.$ref: '#/definitions/Ref_(of_Bundle)'
paths./v1/bundles.post.responses.201.description: Created
paths./v1/bundles.post.responses.400.description: Bad request
paths./v1/bundles.post.summary: Create a bundle
paths./v1/bundles.post.tags.length: 1
paths./v1/bundles.post.tags[0]: bundles
paths./v1/bundles/{bundle_id}.delete.description: Delete a bundle and its related
  metadata and tracks. This will only delete media stored on Clarify systems and not
  delete the source media on remote systems.<br/><br/>Successful response will be
  a HTTP code 204 with an empty body.
paths./v1/bundles/{bundle_id}.delete.parameters.length: 1
paths./v1/bundles/{bundle_id}.delete.parameters[0].description: id of a bundle
paths./v1/bundles/{bundle_id}.delete.parameters[0].in: path
paths./v1/bundles/{bundle_id}.delete.parameters[0].name: bundle_id
paths./v1/bundles/{bundle_id}.delete.parameters[0].required: true
paths./v1/bundles/{bundle_id}.delete.parameters[0].type: string
paths./v1/bundles/{bundle_id}.delete.responses.200.description: No response was specified
paths./v1/bundles/{bundle_id}.delete.responses.204.description: No Content (success)
paths./v1/bundles/{bundle_id}.delete.responses.400.description: Bad request
paths./v1/bundles/{bundle_id}.delete.responses.404.description: Not found
paths./v1/bundles/{bundle_id}.delete.summary: Delete a bundle
paths./v1/bundles/{bundle_id}.delete.tags.length: 1
paths./v1/bundles/{bundle_id}.delete.tags[0]: bundles
paths./v1/bundles/{bundle_id}.get.description: Get a bundle that has previously been
  created.
paths./v1/bundles/{bundle_id}.get.parameters.length: 2
paths./v1/bundles/{bundle_id}.get.parameters[0].description: id of a bundle
paths./v1/bundles/{bundle_id}.get.parameters[0].in: path
paths./v1/bundles/{bundle_id}.get.parameters[0].name: bundle_id
paths./v1/bundles/{bundle_id}.get.parameters[0].required: true
paths./v1/bundles/{bundle_id}.get.parameters[0].type: string
paths./v1/bundles/{bundle_id}.get.parameters[1].description: 'list of link relations
  to embed in the result bundle. Zero or more of: tracks, metadata, insights. List
  is space or comma separated single string or an array of strings'
paths./v1/bundles/{bundle_id}.get.parameters[1].in: query
paths./v1/bundles/{bundle_id}.get.parameters[1].name: embed
paths./v1/bundles/{bundle_id}.get.parameters[1].required: false
paths./v1/bundles/{bundle_id}.get.parameters[1].type: string
paths./v1/bundles/{bundle_id}.get.produces.length: 1
paths./v1/bundles/{bundle_id}.get.produces[0]: application/hal+json
paths./v1/bundles/{bundle_id}.get.responses.200.description: OK
paths./v1/bundles/{bundle_id}.get.responses.200.schema.$ref: '#/definitions/Bundle'
paths./v1/bundles/{bundle_id}.get.responses.400.description: Bad request
paths./v1/bundles/{bundle_id}.get.responses.404.description: Not found
paths./v1/bundles/{bundle_id}.get.summary: Get a bundle
paths./v1/bundles/{bundle_id}.get.tags.length: 1
paths./v1/bundles/{bundle_id}.get.tags[0]: bundles
paths./v1/bundles/{bundle_id}.put.description: 'Update a bundle. To update the tracks,
  media, or metadata of a bundle, use the tracks and metadata endpoints.<br/><br/><b>name</b>
  can be any string you wish to associate with the bundle.<br/><br/><b>external_id</b>
  is an optional parameter that can be used to logically link a bundle to an item
  in an external system. The <b>external_id</b> can be whatever you use to identify
  items in your own database.<br/><br/><b>notify_url</b> is a webhook. It must be
  a publicly accessible url (http or https) on your server to which notifications
  for the bundle will be POSTed. There are three types of notifications: Track Notifications,
  Insight Notifications and Bundle Notifications. For more information on the content
  of notifications and when they are sent, see the <a href="http://docs.clarify.io/overview/#notifications"
  target="clarify">notification docs page</a>.<br/><br/>If <b>version</b> is specified,
  the bundle will only be updated if the current version matches this parameter value.
  If the version doesn''t match, a 409 Conflict error will be returned. If version
  not specified, the bundle will always be updated.'
paths./v1/bundles/{bundle_id}.put.parameters.length: 5
paths./v1/bundles/{bundle_id}.put.parameters[0].description: id of a bundle
paths./v1/bundles/{bundle_id}.put.parameters[0].in: path
paths./v1/bundles/{bundle_id}.put.parameters[0].name: bundle_id
paths./v1/bundles/{bundle_id}.put.parameters[0].required: true
paths./v1/bundles/{bundle_id}.put.parameters[0].type: string
paths./v1/bundles/{bundle_id}.put.parameters[1].description: Name of the bundle. Up
  to 128 characters.
paths./v1/bundles/{bundle_id}.put.parameters[1].in: formData
paths./v1/bundles/{bundle_id}.put.parameters[1].name: name
paths./v1/bundles/{bundle_id}.put.parameters[1].required: false
paths./v1/bundles/{bundle_id}.put.parameters[1].type: string
paths./v1/bundles/{bundle_id}.put.parameters[2].description: URL for notifications
  on this bundle. Up to 2083 characters.
paths./v1/bundles/{bundle_id}.put.parameters[2].in: formData
paths./v1/bundles/{bundle_id}.put.parameters[2].name: notify_url
paths./v1/bundles/{bundle_id}.put.parameters[2].required: false
paths./v1/bundles/{bundle_id}.put.parameters[2].type: string
paths./v1/bundles/{bundle_id}.put.parameters[3].description: A string that can refer
  to an item in an external system. Up to 128 characters.
paths./v1/bundles/{bundle_id}.put.parameters[3].in: formData
paths./v1/bundles/{bundle_id}.put.parameters[3].name: external_id
paths./v1/bundles/{bundle_id}.put.parameters[3].required: false
paths./v1/bundles/{bundle_id}.put.parameters[3].type: string
paths./v1/bundles/{bundle_id}.put.parameters[4].description: Object version.
paths./v1/bundles/{bundle_id}.put.parameters[4].in: formData
paths./v1/bundles/{bundle_id}.put.parameters[4].name: version
paths./v1/bundles/{bundle_id}.put.parameters[4].required: false
paths./v1/bundles/{bundle_id}.put.parameters[4].type: integer
paths./v1/bundles/{bundle_id}.put.produces.length: 1
paths./v1/bundles/{bundle_id}.put.produces[0]: application/hal+json
paths./v1/bundles/{bundle_id}.put.responses.200.description: No response was specified
paths./v1/bundles/{bundle_id}.put.responses.200.schema.$ref: '#/definitions/Ref_(of_Bundle)'
paths./v1/bundles/{bundle_id}.put.responses.202.description: Accepted
paths./v1/bundles/{bundle_id}.put.responses.400.description: Bad request
paths./v1/bundles/{bundle_id}.put.responses.404.description: Not found
paths./v1/bundles/{bundle_id}.put.responses.409.description: Conflict
paths./v1/bundles/{bundle_id}.put.summary: Update a bundle
paths./v1/bundles/{bundle_id}.put.tags.length: 1
paths./v1/bundles/{bundle_id}.put.tags[0]: bundles
paths./v1/bundles/{bundle_id}/insights.get.description: Gets the insights for a bundle.<br/><br/>URLs
  of the available insights for the bundle are in the _links object, with the link
  relations (keys) of the format <b>insight:insight_name</b>.<br/><br/>Documentation
  on the insights available and the data returned can be found at <a target="clarify"
  href="http://docs.clarify.io/insights/">http://docs.clarify.io/insights/</a>
paths./v1/bundles/{bundle_id}/insights.get.parameters.length: 1
paths./v1/bundles/{bundle_id}/insights.get.parameters[0].description: id of a bundle
paths./v1/bundles/{bundle_id}/insights.get.parameters[0].in: path
paths./v1/bundles/{bundle_id}/insights.get.parameters[0].name: bundle_id
paths./v1/bundles/{bundle_id}/insights.get.parameters[0].required: true
paths./v1/bundles/{bundle_id}/insights.get.parameters[0].type: string
paths./v1/bundles/{bundle_id}/insights.get.produces.length: 1
paths./v1/bundles/{bundle_id}/insights.get.produces[0]: application/hal+json
paths./v1/bundles/{bundle_id}/insights.get.responses.200.description: OK
paths./v1/bundles/{bundle_id}/insights.get.responses.200.schema.$ref: '#/definitions/Insights'
paths./v1/bundles/{bundle_id}/insights.get.responses.400.description: Bad request
paths./v1/bundles/{bundle_id}/insights.get.responses.404.description: Not found
paths./v1/bundles/{bundle_id}/insights.get.summary: Get bundle insights
paths./v1/bundles/{bundle_id}/insights.get.tags.length: 1
paths./v1/bundles/{bundle_id}/insights.get.tags[0]: bundles
paths./v1/bundles/{bundle_id}/insights.post.description: Request an insight to be
  run on a bundle. Note that most insights are set to automatically run on all bundles
  so you commonly won&apos;t need to call this endpoint except to request transcripts.
  To configure which insights are automatically run for an app, visit the <a href="https://developer.clarify.io"
  target="clarify">Clarify Developer Portal</a>.<br/><br/> Insights that are not configured
  to autorun can be requested to run on an individual bundle using this endpoint.
  The following insights can be requested:<br/><br/><b>transcript_r9</b> - High-accuracy
  transcript of the speech in audio media.<br/><br/>Transcripts will produced on the
  mixed audio of all tracks in the bundle and are charged per minute (rounded up for
  partial minutes), based on the duration of the longest track. If the request has
  already been made, this method has no effect other than to return the existing insight.<br/><br/>Transcripts
  will typically take about 48 hours. When the transcript is ready, an InsightNotification
  webhook will be POSTed to the bundle <b>notify_url</b>.<br/><br/>For more information
  see <a href="http://docs.clarify.io/quickstarts/human-transcripts.html" title="human
  transcripts" target="clarify">Human Transcripts Quick Start</a>.<br/><br/><b>captions_r9</b>
  - High-accuracy captions of the speech in video media.<br/><br/>Captions will be
  generated on the first track in the bundle. and are charged per minute (rounded
  up for partial minutes), based on the duration of the media.  See the <a href="http://clarify.io/pricing"
  title="pricing" target="clarify">pricing page</a>. If the request has already been
  made, this method has no effect other than to return the existing insight.<br/><br/>Captions
  will typically take about 72 hours. When the captions are ready, an InsightNotification
  webhook will be POSTed to the bundle <b>notify_url</b>.<br/><br/>For more information
  see <a href="http://docs.clarify.io/quickstarts/closed-captions.html" title="captions"
  target="clarify">Captions Quick Start</a>.<br/><br/><b>spoken_keywords</b> - Spoken
  words of interest found in audio media. <b>Note:</b> Normally spoken_keywords is
  set to autorun so you do not need to run it explicitly.<br/><br/><b>spoken_topics</b>
  - Topics spoken about in the audio media.
paths./v1/bundles/{bundle_id}/insights.post.parameters.length: 2
paths./v1/bundles/{bundle_id}/insights.post.parameters[0].description: id of a bundle
paths./v1/bundles/{bundle_id}/insights.post.parameters[0].in: path
paths./v1/bundles/{bundle_id}/insights.post.parameters[0].name: bundle_id
paths./v1/bundles/{bundle_id}/insights.post.parameters[0].required: true
paths./v1/bundles/{bundle_id}/insights.post.parameters[0].type: string
paths./v1/bundles/{bundle_id}/insights.post.parameters[1].description: 'name of the
  insight: transcript_r9, captions_r9, spoken_keywords, spoken_topics, spoken_words'
paths./v1/bundles/{bundle_id}/insights.post.parameters[1].enum.length: 5
paths./v1/bundles/{bundle_id}/insights.post.parameters[1].enum[0]: transcript_r9
paths./v1/bundles/{bundle_id}/insights.post.parameters[1].enum[1]: captions_r9
paths./v1/bundles/{bundle_id}/insights.post.parameters[1].enum[2]: spoken_keywords
paths./v1/bundles/{bundle_id}/insights.post.parameters[1].enum[3]: spoken_topics
paths./v1/bundles/{bundle_id}/insights.post.parameters[1].enum[4]: spoken_words
paths./v1/bundles/{bundle_id}/insights.post.parameters[1].in: formData
paths./v1/bundles/{bundle_id}/insights.post.parameters[1].name: insight
paths./v1/bundles/{bundle_id}/insights.post.parameters[1].required: true
paths./v1/bundles/{bundle_id}/insights.post.parameters[1].type: string
paths./v1/bundles/{bundle_id}/insights.post.produces.length: 1
paths./v1/bundles/{bundle_id}/insights.post.produces[0]: application/hal+json
paths./v1/bundles/{bundle_id}/insights.post.responses.200.description: OK if the insight
  already exists
paths./v1/bundles/{bundle_id}/insights.post.responses.200.schema.$ref: '#/definitions/Insight'
paths./v1/bundles/{bundle_id}/insights.post.responses.202.description: Accepted if
  the insight has been requested and is queued for processing
paths./v1/bundles/{bundle_id}/insights.post.responses.400.description: Bad request
paths./v1/bundles/{bundle_id}/insights.post.responses.404.description: Not found
paths./v1/bundles/{bundle_id}/insights.post.responses.409.description: Conflict if
  tracks have a status of error
paths./v1/bundles/{bundle_id}/insights.post.summary: Request an insight to be run
paths./v1/bundles/{bundle_id}/insights.post.tags.length: 1
paths./v1/bundles/{bundle_id}/insights.post.tags[0]: bundles
paths./v1/bundles/{bundle_id}/insights/{insight_id}.get.description: Gets a particular
  insight for a bundle. Typically, you will hit this endpoint from a link contained
  in a response to <b>/v1/bundles/{bundle_id}/insights</b><br/><br/>The insight response
  may contain a <b>data</b> object containing insight-specific data and/or an array
  of objects called <b>track_data</b>, where the array indexes correspond to the tracks
  in the bundle. Each object in the array contains the <b>track_id</b>, <b>track_label</b>
  and insight-specific data related to that insight. For example, in the <b>spoken_words</b>
  insight, the <b>track_data</b> objects contain the field <b>word_count</b> which
  is the number of spoken words found in the track.<br/><br/>Documentation on the
  insights available and the data returned can be found at <a target="clarify" href="http://docs.clarify.io/insights/">http://docs.clarify.io/insights/</a><br/><br/>Insights
  that contain data in different file formats (such as for video captions) will have
  one or more link relations in the _links array for the corresponding data. Note
  that the href URLs in these links have a limited lifespan and should not be stored
  locally.
paths./v1/bundles/{bundle_id}/insights/{insight_id}.get.operationId: v1bundlesbundle_idinsightsinsight_id
paths./v1/bundles/{bundle_id}/insights/{insight_id}.get.parameters.length: 2
paths./v1/bundles/{bundle_id}/insights/{insight_id}.get.parameters[0].description: id
  of a bundle
paths./v1/bundles/{bundle_id}/insights/{insight_id}.get.parameters[0].in: path
paths./v1/bundles/{bundle_id}/insights/{insight_id}.get.parameters[0].name: bundle_id
paths./v1/bundles/{bundle_id}/insights/{insight_id}.get.parameters[0].required: true
paths./v1/bundles/{bundle_id}/insights/{insight_id}.get.parameters[0].type: string
paths./v1/bundles/{bundle_id}/insights/{insight_id}.get.parameters[1].description: id
  of an insight
paths./v1/bundles/{bundle_id}/insights/{insight_id}.get.parameters[1].in: path
paths./v1/bundles/{bundle_id}/insights/{insight_id}.get.parameters[1].name: insight_id
paths./v1/bundles/{bundle_id}/insights/{insight_id}.get.parameters[1].required: true
paths./v1/bundles/{bundle_id}/insights/{insight_id}.get.parameters[1].type: string
paths./v1/bundles/{bundle_id}/insights/{insight_id}.get.produces.length: 1
paths./v1/bundles/{bundle_id}/insights/{insight_id}.get.produces[0]: application/hal+json
paths./v1/bundles/{bundle_id}/insights/{insight_id}.get.responses.200.description: OK
paths./v1/bundles/{bundle_id}/insights/{insight_id}.get.responses.200.schema.$ref: '#/definitions/Insight'
paths./v1/bundles/{bundle_id}/insights/{insight_id}.get.responses.400.description: Bad
  request
paths./v1/bundles/{bundle_id}/insights/{insight_id}.get.responses.404.description: Not
  found
paths./v1/bundles/{bundle_id}/insights/{insight_id}.get.summary: Get bundle insight
paths./v1/bundles/{bundle_id}/insights/{insight_id}.get.tags.length: 1
paths./v1/bundles/{bundle_id}/insights/{insight_id}.get.tags[0]: bundles
paths./v1/bundles/{bundle_id}/metadata.delete.description: Delete the metadata of
  a bundle and set data to {} (empty object.) This is functionally equivalent to an
  update metadata request with data set to {}.<br/><br/>Successful response will be
  a HTTP code 204 with an empty body.
paths./v1/bundles/{bundle_id}/metadata.delete.parameters.length: 1
paths./v1/bundles/{bundle_id}/metadata.delete.parameters[0].description: id of a bundle
paths./v1/bundles/{bundle_id}/metadata.delete.parameters[0].in: path
paths./v1/bundles/{bundle_id}/metadata.delete.parameters[0].name: bundle_id
paths./v1/bundles/{bundle_id}/metadata.delete.parameters[0].required: true
paths./v1/bundles/{bundle_id}/metadata.delete.parameters[0].type: string
paths./v1/bundles/{bundle_id}/metadata.delete.responses.200.description: No response
  was specified
paths./v1/bundles/{bundle_id}/metadata.delete.responses.204.description: No Content
  (success)
paths./v1/bundles/{bundle_id}/metadata.delete.responses.400.description: Bad request
paths./v1/bundles/{bundle_id}/metadata.delete.responses.404.description: Not found
paths./v1/bundles/{bundle_id}/metadata.delete.summary: Delete bundle metadata
paths./v1/bundles/{bundle_id}/metadata.delete.tags.length: 1
paths./v1/bundles/{bundle_id}/metadata.delete.tags[0]: bundles
paths./v1/bundles/{bundle_id}/metadata.get.description: Gets the metadata for a bundle.
paths./v1/bundles/{bundle_id}/metadata.get.parameters.length: 1
paths./v1/bundles/{bundle_id}/metadata.get.parameters[0].description: id of a bundle
paths./v1/bundles/{bundle_id}/metadata.get.parameters[0].in: path
paths./v1/bundles/{bundle_id}/metadata.get.parameters[0].name: bundle_id
paths./v1/bundles/{bundle_id}/metadata.get.parameters[0].required: true
paths./v1/bundles/{bundle_id}/metadata.get.parameters[0].type: string
paths./v1/bundles/{bundle_id}/metadata.get.produces.length: 1
paths./v1/bundles/{bundle_id}/metadata.get.produces[0]: application/hal+json
paths./v1/bundles/{bundle_id}/metadata.get.responses.200.description: OK
paths./v1/bundles/{bundle_id}/metadata.get.responses.200.schema.$ref: '#/definitions/Metadata'
paths./v1/bundles/{bundle_id}/metadata.get.responses.400.description: Bad request
paths./v1/bundles/{bundle_id}/metadata.get.responses.404.description: Not found
paths./v1/bundles/{bundle_id}/metadata.get.summary: Get bundle metadata
paths./v1/bundles/{bundle_id}/metadata.get.tags.length: 1
paths./v1/bundles/{bundle_id}/metadata.get.tags[0]: bundles
paths./v1/bundles/{bundle_id}/metadata.put.description: Update the metadata for a
  bundle.<br/><br/>The metadata is a single-level JSON object of your own definition,
  containing key-values that can be searched and filtered on. Metadata can be used
  to hold text such as names, titles, descriptions and values for segregating bundles,
  for example by user, topic, folder name etc. The keys (property names) can be up
  to 64 characters and must contain only alphanumeric characters and underscore (but
  not start with underscore) and must not be a reserved name. Reserved names are &quot;true&quot;,
  &quot;false&quot;, and &quot;null&quot;. Values can be strings, numbers, boolean
  true/false, date-times represented as a string in ISO 8601 format (ex. &quot;2014-02-25T14:23:45.000Z&quot;),
  or an array of these primitive types. Strings can be up to 2000 characters and strings
  in arrays can be up to 128 characters each. Nested objects are not allowed. Metadata
  can contain up to 50 key-value pairs up to a total JSON size of 4000 characters.<br/><br/>To
  clear the metadata for a bundle, send <b>data</b>={}.<br/><br/>If <b>version</b>
  specified, the metadata will only be updated if the current version matches this
  parameter value. If the version doesn't match, a 409 Conflict will be returned.
  If version not specified, the metadata will always be updated.
paths./v1/bundles/{bundle_id}/metadata.put.parameters.length: 3
paths./v1/bundles/{bundle_id}/metadata.put.parameters[0].description: id of a bundle
paths./v1/bundles/{bundle_id}/metadata.put.parameters[0].in: path
paths./v1/bundles/{bundle_id}/metadata.put.parameters[0].name: bundle_id
paths./v1/bundles/{bundle_id}/metadata.put.parameters[0].required: true
paths./v1/bundles/{bundle_id}/metadata.put.parameters[0].type: string
paths./v1/bundles/{bundle_id}/metadata.put.parameters[1].description: User-defined
  JSON data associated with the bundle. Must be valid JSON, up to 4000 characters.
paths./v1/bundles/{bundle_id}/metadata.put.parameters[1].in: formData
paths./v1/bundles/{bundle_id}/metadata.put.parameters[1].name: data
paths./v1/bundles/{bundle_id}/metadata.put.parameters[1].required: true
paths./v1/bundles/{bundle_id}/metadata.put.parameters[1].type: string
paths./v1/bundles/{bundle_id}/metadata.put.parameters[2].description: Object version.
paths./v1/bundles/{bundle_id}/metadata.put.parameters[2].in: formData
paths./v1/bundles/{bundle_id}/metadata.put.parameters[2].name: version
paths./v1/bundles/{bundle_id}/metadata.put.parameters[2].required: false
paths./v1/bundles/{bundle_id}/metadata.put.parameters[2].type: integer
paths./v1/bundles/{bundle_id}/metadata.put.produces.length: 1
paths./v1/bundles/{bundle_id}/metadata.put.produces[0]: application/hal+json
paths./v1/bundles/{bundle_id}/metadata.put.responses.200.description: No response
  was specified
paths./v1/bundles/{bundle_id}/metadata.put.responses.200.schema.$ref: '#/definitions/Ref'
paths./v1/bundles/{bundle_id}/metadata.put.responses.202.description: Accepted
paths./v1/bundles/{bundle_id}/metadata.put.responses.400.description: Bad request
paths./v1/bundles/{bundle_id}/metadata.put.responses.404.description: Not found
paths./v1/bundles/{bundle_id}/metadata.put.responses.409.description: Conflict
paths./v1/bundles/{bundle_id}/metadata.put.summary: Update bundle metadata
paths./v1/bundles/{bundle_id}/metadata.put.tags.length: 1
paths./v1/bundles/{bundle_id}/metadata.put.tags[0]: bundles
paths./v1/bundles/{bundle_id}/tracks.delete.description: Delete tracks of a bundle.
  This will only delete media stored on Clarify systems and not delete the source
  media on remote systems.<br/><br/>Successful response will be a HTTP code 204 with
  an empty body.
paths./v1/bundles/{bundle_id}/tracks.delete.parameters.length: 1
paths./v1/bundles/{bundle_id}/tracks.delete.parameters[0].description: id of a bundle
paths./v1/bundles/{bundle_id}/tracks.delete.parameters[0].in: path
paths./v1/bundles/{bundle_id}/tracks.delete.parameters[0].name: bundle_id
paths./v1/bundles/{bundle_id}/tracks.delete.parameters[0].required: true
paths./v1/bundles/{bundle_id}/tracks.delete.parameters[0].type: string
paths./v1/bundles/{bundle_id}/tracks.delete.responses.200.description: No response
  was specified
paths./v1/bundles/{bundle_id}/tracks.delete.responses.204.description: No Content
  (success)
paths./v1/bundles/{bundle_id}/tracks.delete.responses.400.description: Bad request
paths./v1/bundles/{bundle_id}/tracks.delete.responses.404.description: Not found
paths./v1/bundles/{bundle_id}/tracks.delete.summary: Delete bundle tracks
paths./v1/bundles/{bundle_id}/tracks.delete.tags.length: 1
paths./v1/bundles/{bundle_id}/tracks.delete.tags[0]: bundles
paths./v1/bundles/{bundle_id}/tracks.get.description: Gets the array of tracks for
  a bundle. This includes the specification of the media and the status of fetching
  and processing it.<br/><br/>Media for tracks is fetched asynchronously. Until media
  has been retrieved, a track&apos;s <b>duration</b> and <b>size</b> will both be
  set to -1.
paths./v1/bundles/{bundle_id}/tracks.get.parameters.length: 1
paths./v1/bundles/{bundle_id}/tracks.get.parameters[0].description: id of a bundle
paths./v1/bundles/{bundle_id}/tracks.get.parameters[0].in: path
paths./v1/bundles/{bundle_id}/tracks.get.parameters[0].name: bundle_id
paths./v1/bundles/{bundle_id}/tracks.get.parameters[0].required: true
paths./v1/bundles/{bundle_id}/tracks.get.parameters[0].type: string
paths./v1/bundles/{bundle_id}/tracks.get.produces.length: 1
paths./v1/bundles/{bundle_id}/tracks.get.produces[0]: application/hal+json
paths./v1/bundles/{bundle_id}/tracks.get.responses.200.description: OK
paths./v1/bundles/{bundle_id}/tracks.get.responses.200.schema.$ref: '#/definitions/Tracks'
paths./v1/bundles/{bundle_id}/tracks.get.responses.400.description: Bad request
paths./v1/bundles/{bundle_id}/tracks.get.responses.404.description: Not found
paths./v1/bundles/{bundle_id}/tracks.get.summary: Get bundle tracks
paths./v1/bundles/{bundle_id}/tracks.get.tags.length: 1
paths./v1/bundles/{bundle_id}/tracks.get.tags[0]: bundles
paths./v1/bundles/{bundle_id}/tracks.post.description: 'Add a new track to a bundle.
  This will insert or append a new track in the tracks array or return an error if
  the maximum number of tracks (12) has been reached or the track number specifies
  an invalid index.<br/><br/>Once all media parts have been added to a track it is
  immutable, meaning it cannot be modified. If you wish to modify a track, simply
  add a new one and delete the existing one.<br/><br/><b>label</b> is a short name
  for the track.<br/><br/><b>media_url</b> must be a publicly accessible url to a
  media file. It will be fetched asynchronously after the REST call returns. The audio
  can be mono or stereo.<br/><br/><b>audio_channel</b> is used to specify audio channels
  if the media is a stereo file. A value of <i>left</i> or <i>right</i> signifies
  that only the specified channel will be used. If no value or an empty string is
  specified for <b>audio_channel</b>, all channels will be used in a single track.
  If your stereo channels were recorded separately with each channel containing distinct
  content (for example if 2 legs of a phone call were recorded separately and combined
  into a single stereo file), for best speech recognition, create two tracks with
  <b>audio_channel</b> to be <i>left</i> and <i>right</i>. If your stereo file is
  simply a recording made with a stereo microphone, <b>audio_channel</b> should be
  set to an empty string (or not be specified.)<br/><br/><b>audio_language</b> can
  be used to specify the language of the audio media. This is an optional parameter
  and if not specified or an empty string, the language of the track will be automatically
  detected. If specified, it must be a language code as described in RFC5646 (see
  <a href="http://tools.ietf.org/html/rfc5646" target="_blank">http://tools.ietf.org/html/rfc5646</a>).
  Supported languages: en-US, en-UK, es, fr.<br/><br/><b>start_time</b> a time in
  seconds that the media starts, relative to start time of the bundle. This allows
  you to specify sequential parts of media. If not specified, the default is 0.<br/><br/><b>parts_pending</b>
  a boolean flag specifying if more media parts will subsequently be added to the
  track. If true, a subsequent API call must be made to signify that the track is
  complete. If not specified, the default is false.<br/><br/><b>track</b> is the index
  in the tracks array where the new track will be added. Track numbers start at 0.
  If this parameter is not specified the new track will always be appended to the
  end of the array. If the track specified is greater than the last index of the array
  + 1, an error will be returned.<br/><br/>If <b>version</b> specified, the track
  will only be added if the current version matches this parameter value. If the version
  doesn''t match, a 409 Conflict error will be returned. If version not specified,
  the track will always be updated.'
paths./v1/bundles/{bundle_id}/tracks.post.parameters.length: 9
paths./v1/bundles/{bundle_id}/tracks.post.parameters[0].description: id of a bundle
paths./v1/bundles/{bundle_id}/tracks.post.parameters[0].in: path
paths./v1/bundles/{bundle_id}/tracks.post.parameters[0].name: bundle_id
paths./v1/bundles/{bundle_id}/tracks.post.parameters[0].required: true
paths./v1/bundles/{bundle_id}/tracks.post.parameters[0].type: string
paths./v1/bundles/{bundle_id}/tracks.post.parameters[1].description: Label for the
  track. Up to 128 characters.
paths./v1/bundles/{bundle_id}/tracks.post.parameters[1].in: formData
paths./v1/bundles/{bundle_id}/tracks.post.parameters[1].name: label
paths./v1/bundles/{bundle_id}/tracks.post.parameters[1].required: false
paths./v1/bundles/{bundle_id}/tracks.post.parameters[1].type: string
paths./v1/bundles/{bundle_id}/tracks.post.parameters[2].description: URL of a media
  file for this bundle. Up to 2083 characters.
paths./v1/bundles/{bundle_id}/tracks.post.parameters[2].in: formData
paths./v1/bundles/{bundle_id}/tracks.post.parameters[2].name: media_url
paths./v1/bundles/{bundle_id}/tracks.post.parameters[2].required: true
paths./v1/bundles/{bundle_id}/tracks.post.parameters[2].type: string
paths./v1/bundles/{bundle_id}/tracks.post.parameters[3].description: The audio channel
  to use for the track ( "" | left | right ). Default is empty string which means
  all channels of audio in the media file are used for the track.
paths./v1/bundles/{bundle_id}/tracks.post.parameters[3].enum.length: 2
paths./v1/bundles/{bundle_id}/tracks.post.parameters[3].enum[0]: left
paths./v1/bundles/{bundle_id}/tracks.post.parameters[3].enum[1]: right
paths./v1/bundles/{bundle_id}/tracks.post.parameters[3].in: formData
paths./v1/bundles/{bundle_id}/tracks.post.parameters[3].name: audio_channel
paths./v1/bundles/{bundle_id}/tracks.post.parameters[3].required: false
paths./v1/bundles/{bundle_id}/tracks.post.parameters[3].type: string
paths./v1/bundles/{bundle_id}/tracks.post.parameters[4].description: Language of the
  audio in the track, specified with an RFC5646 code.
paths./v1/bundles/{bundle_id}/tracks.post.parameters[4].enum.length: 4
paths./v1/bundles/{bundle_id}/tracks.post.parameters[4].enum[0]: en-US
paths./v1/bundles/{bundle_id}/tracks.post.parameters[4].enum[1]: en-UK
paths./v1/bundles/{bundle_id}/tracks.post.parameters[4].enum[2]: es
paths./v1/bundles/{bundle_id}/tracks.post.parameters[4].enum[3]: fr
paths./v1/bundles/{bundle_id}/tracks.post.parameters[4].in: formData
paths./v1/bundles/{bundle_id}/tracks.post.parameters[4].name: audio_language
paths./v1/bundles/{bundle_id}/tracks.post.parameters[4].required: false
paths./v1/bundles/{bundle_id}/tracks.post.parameters[4].type: string
paths./v1/bundles/{bundle_id}/tracks.post.parameters[5].description: Time offset in
  seconds that the media starts relative to the bundle. Default is 0.
paths./v1/bundles/{bundle_id}/tracks.post.parameters[5].in: formData
paths./v1/bundles/{bundle_id}/tracks.post.parameters[5].name: start_time
paths./v1/bundles/{bundle_id}/tracks.post.parameters[5].required: false
paths./v1/bundles/{bundle_id}/tracks.post.parameters[5].type: number
paths./v1/bundles/{bundle_id}/tracks.post.parameters[6].description: Set to true if
  more media parts will be added to the track. Default is false.
paths./v1/bundles/{bundle_id}/tracks.post.parameters[6].in: formData
paths./v1/bundles/{bundle_id}/tracks.post.parameters[6].name: parts_pending
paths./v1/bundles/{bundle_id}/tracks.post.parameters[6].required: false
paths./v1/bundles/{bundle_id}/tracks.post.parameters[6].type: boolean
paths./v1/bundles/{bundle_id}/tracks.post.parameters[7].description: Track number
  specifies the index of the new track in the tracks array. An integer from 0 to 11.
  If not specified, the new track is appended to the array.
paths./v1/bundles/{bundle_id}/tracks.post.parameters[7].in: formData
paths./v1/bundles/{bundle_id}/tracks.post.parameters[7].maximum: 11
paths./v1/bundles/{bundle_id}/tracks.post.parameters[7].name: track
paths./v1/bundles/{bundle_id}/tracks.post.parameters[7].required: false
paths./v1/bundles/{bundle_id}/tracks.post.parameters[7].type: integer
paths./v1/bundles/{bundle_id}/tracks.post.parameters[8].description: Object version.
paths./v1/bundles/{bundle_id}/tracks.post.parameters[8].in: formData
paths./v1/bundles/{bundle_id}/tracks.post.parameters[8].name: version
paths./v1/bundles/{bundle_id}/tracks.post.parameters[8].required: false
paths./v1/bundles/{bundle_id}/tracks.post.parameters[8].type: integer
paths./v1/bundles/{bundle_id}/tracks.post.produces.length: 1
paths./v1/bundles/{bundle_id}/tracks.post.produces[0]: application/hal+json
paths./v1/bundles/{bundle_id}/tracks.post.responses.200.description: No response was
  specified
paths./v1/bundles/{bundle_id}/tracks.post.responses.200.schema.$ref: '#/definitions/Ref_(of_Track)'
paths./v1/bundles/{bundle_id}/tracks.post.responses.201.description: Created
paths./v1/bundles/{bundle_id}/tracks.post.responses.400.description: Bad request
paths./v1/bundles/{bundle_id}/tracks.post.responses.404.description: Not found
paths./v1/bundles/{bundle_id}/tracks.post.responses.409.description: Conflict
paths./v1/bundles/{bundle_id}/tracks.post.summary: Add a track for a bundle
paths./v1/bundles/{bundle_id}/tracks.post.tags.length: 1
paths./v1/bundles/{bundle_id}/tracks.post.tags[0]: bundles
paths./v1/bundles/{bundle_id}/tracks.put.description: Update tracks for a bundle.<br/><br/><b>parts_complete</b>
  a boolean <code>true</code> or <cade>false</code>. If true, any tracks in the PENDING
  state will be queued for processing and no more media parts may be added to the
  tracks. Default is false.<br/><br/>If <b>version</b> specified, the track will only
  be updated if the current version matches this parameter value. If the version doesn't
  match, a 409 Conflict error will be returned. If version not specified, the track
  will always be updated.
paths./v1/bundles/{bundle_id}/tracks.put.parameters.length: 3
paths./v1/bundles/{bundle_id}/tracks.put.parameters[0].description: id of a bundle
paths./v1/bundles/{bundle_id}/tracks.put.parameters[0].in: path
paths./v1/bundles/{bundle_id}/tracks.put.parameters[0].name: bundle_id
paths./v1/bundles/{bundle_id}/tracks.put.parameters[0].required: true
paths./v1/bundles/{bundle_id}/tracks.put.parameters[0].type: string
paths./v1/bundles/{bundle_id}/tracks.put.parameters[1].description: Set to true if
  media parts in all tracks are complete. Default is false.
paths./v1/bundles/{bundle_id}/tracks.put.parameters[1].in: formData
paths./v1/bundles/{bundle_id}/tracks.put.parameters[1].name: parts_complete
paths./v1/bundles/{bundle_id}/tracks.put.parameters[1].required: true
paths./v1/bundles/{bundle_id}/tracks.put.parameters[1].type: boolean
paths./v1/bundles/{bundle_id}/tracks.put.parameters[2].description: Object version.
paths./v1/bundles/{bundle_id}/tracks.put.parameters[2].in: formData
paths./v1/bundles/{bundle_id}/tracks.put.parameters[2].name: version
paths./v1/bundles/{bundle_id}/tracks.put.parameters[2].required: false
paths./v1/bundles/{bundle_id}/tracks.put.parameters[2].type: integer
paths./v1/bundles/{bundle_id}/tracks.put.produces.length: 1
paths./v1/bundles/{bundle_id}/tracks.put.produces[0]: application/hal+json
paths./v1/bundles/{bundle_id}/tracks.put.responses.200.description: OK
paths./v1/bundles/{bundle_id}/tracks.put.responses.200.schema.$ref: '#/definitions/Ref'
paths./v1/bundles/{bundle_id}/tracks.put.responses.400.description: Bad request
paths./v1/bundles/{bundle_id}/tracks.put.responses.404.description: Not found
paths./v1/bundles/{bundle_id}/tracks.put.responses.409.description: Conflict
paths./v1/bundles/{bundle_id}/tracks.put.summary: Update a tracks for a bundle
paths./v1/bundles/{bundle_id}/tracks.put.tags.length: 1
paths./v1/bundles/{bundle_id}/tracks.put.tags[0]: bundles
paths./v1/bundles/{bundle_id}/tracks/{track_id}.delete.description: Delete a track
  of a bundle. This will only delete media stored on Clarify systems and not delete
  the source media on remote systems.<br/><br/>Successful response will be a HTTP
  code 204 with an empty body.
paths./v1/bundles/{bundle_id}/tracks/{track_id}.delete.parameters.length: 2
paths./v1/bundles/{bundle_id}/tracks/{track_id}.delete.parameters[0].description: id
  of a bundle
paths./v1/bundles/{bundle_id}/tracks/{track_id}.delete.parameters[0].in: path
paths./v1/bundles/{bundle_id}/tracks/{track_id}.delete.parameters[0].name: bundle_id
paths./v1/bundles/{bundle_id}/tracks/{track_id}.delete.parameters[0].required: true
paths./v1/bundles/{bundle_id}/tracks/{track_id}.delete.parameters[0].type: string
paths./v1/bundles/{bundle_id}/tracks/{track_id}.delete.parameters[1].description: id
  of a track
paths./v1/bundles/{bundle_id}/tracks/{track_id}.delete.parameters[1].in: path
paths./v1/bundles/{bundle_id}/tracks/{track_id}.delete.parameters[1].name: track_id
paths./v1/bundles/{bundle_id}/tracks/{track_id}.delete.parameters[1].required: true
paths./v1/bundles/{bundle_id}/tracks/{track_id}.delete.parameters[1].type: string
paths./v1/bundles/{bundle_id}/tracks/{track_id}.delete.responses.200.description: No
  response was specified
paths./v1/bundles/{bundle_id}/tracks/{track_id}.delete.responses.204.description: No
  Content (success)
paths./v1/bundles/{bundle_id}/tracks/{track_id}.delete.responses.400.description: Bad
  request
paths./v1/bundles/{bundle_id}/tracks/{track_id}.delete.responses.404.description: Not
  found
paths./v1/bundles/{bundle_id}/tracks/{track_id}.delete.summary: Delete a bundle track
paths./v1/bundles/{bundle_id}/tracks/{track_id}.delete.tags.length: 1
paths./v1/bundles/{bundle_id}/tracks/{track_id}.delete.tags[0]: bundles
paths./v1/bundles/{bundle_id}/tracks/{track_id}.get.description: Gets a single track
  in a bundle. This includes the specification of the media and the status of fetching
  and processing it.<br/><br/>Media for a track is fetched asynchronously. Until media
  has been retrieved, a track&apos;s <b>duration</b> and <b>size</b> will both be
  set to -1.
paths./v1/bundles/{bundle_id}/tracks/{track_id}.get.parameters.length: 2
paths./v1/bundles/{bundle_id}/tracks/{track_id}.get.parameters[0].description: id
  of a bundle
paths./v1/bundles/{bundle_id}/tracks/{track_id}.get.parameters[0].in: path
paths./v1/bundles/{bundle_id}/tracks/{track_id}.get.parameters[0].name: bundle_id
paths./v1/bundles/{bundle_id}/tracks/{track_id}.get.parameters[0].required: true
paths./v1/bundles/{bundle_id}/tracks/{track_id}.get.parameters[0].type: string
paths./v1/bundles/{bundle_id}/tracks/{track_id}.get.parameters[1].description: id
  of a track
paths./v1/bundles/{bundle_id}/tracks/{track_id}.get.parameters[1].in: path
paths./v1/bundles/{bundle_id}/tracks/{track_id}.get.parameters[1].name: track_id
paths./v1/bundles/{bundle_id}/tracks/{track_id}.get.parameters[1].required: true
paths./v1/bundles/{bundle_id}/tracks/{track_id}.get.parameters[1].type: string
paths./v1/bundles/{bundle_id}/tracks/{track_id}.get.produces.length: 1
paths./v1/bundles/{bundle_id}/tracks/{track_id}.get.produces[0]: application/hal+json
paths./v1/bundles/{bundle_id}/tracks/{track_id}.get.responses.200.description: OK
paths./v1/bundles/{bundle_id}/tracks/{track_id}.get.responses.200.schema.$ref: '#/definitions/Track'
paths./v1/bundles/{bundle_id}/tracks/{track_id}.get.responses.400.description: Bad
  request
paths./v1/bundles/{bundle_id}/tracks/{track_id}.get.responses.404.description: Not
  found
paths./v1/bundles/{bundle_id}/tracks/{track_id}.get.summary: Get bundle track
paths./v1/bundles/{bundle_id}/tracks/{track_id}.get.tags.length: 1
paths./v1/bundles/{bundle_id}/tracks/{track_id}.get.tags[0]: bundles
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.description: 'Add media to an
  existing track of a bundle. This can only be called on a track that currently has
  no media set or has parts pending.<br/><br/>Once all media parts have been added
  to a track it is immutable, meaning it cannot be modified. If you wish to modify
  a track, simply add a new one and delete the existing one.<br/><br/><b>media_url</b>
  must be a publicly accessible url to a media file. It will be fetched asynchronously
  after the REST call returns. The audio can be mono or stereo.<br/><br/><b>audio_channel</b>
  is used to specify audio channels if the media is a stereo file. A value of <i>left</i>
  or <i>right</i> signifies that only the specified channel will be used. If no value
  or an empty string is specified for <b>audio_channel</b>, all channels will be used
  in a single track. If your stereo channels were recorded separately with each channel
  containing distinct content (for example if 2 legs of a phone call were recorded
  separately and combined into a single stereo file), for best speech recognition,
  create two tracks with <b>audio_channel</b> to be <i>left</i> and <i>right</i>.
  If your stereo file is simply a recording made with a stereo microphone, <b>audio_channel</b>
  should be set to an empty string (or not be specified.)<br/><br/><b>audio_language</b>
  can be used to specify the language of the audio media. This is an optional parameter
  and if not specified or an empty string, the language of the track will be automatically
  detected. If specified, it must be a language code as described in RFC5646 (see
  <a href="http://tools.ietf.org/html/rfc5646" target="_blank">http://tools.ietf.org/html/rfc5646</a>).
  Supported languages: en-US, en-UK, es, fr.<br/><br/><b>start_time</b> a time in
  seconds that the media starts, relative to start time of the bundle. This allows
  you to specify sequential parts of media. If not specified, the default is 0.<br/><br/><b>parts_pending</b>
  a boolean flag specifying if more media parts will subsequently be added to the
  track. If true, a subsequent API call must be made to signify that the track is
  complete. If not specified, the default is false.<br/><br/>If <b>version</b> specified,
  the track will only be added if the current version matches this parameter value.
  If the version doesn''t match, a 409 Conflict error will be returned. If version
  not specified, the track will always be updated.'
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters.length: 8
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[0].description: id
  of a bundle
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[0].in: path
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[0].name: bundle_id
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[0].required: true
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[0].type: string
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[1].description: id
  of a track
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[1].in: path
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[1].name: track_id
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[1].required: true
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[1].type: string
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[2].description: URL
  of a media file for this bundle. Up to 2083 characters.
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[2].in: formData
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[2].name: media_url
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[2].required: true
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[2].type: string
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[3].description: The
  audio channel to use for the track ( "" | left | right ). Default is empty string
  which means all channels of audio in the media file are used for the track.
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[3].enum.length: 2
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[3].enum[0]: left
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[3].enum[1]: right
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[3].in: formData
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[3].name: audio_channel
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[3].required: false
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[3].type: string
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[4].description: Language
  of the audio in the track, specified with an RFC5646 code.
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[4].enum.length: 4
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[4].enum[0]: en-US
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[4].enum[1]: en-UK
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[4].enum[2]: es
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[4].enum[3]: fr
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[4].in: formData
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[4].name: audio_language
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[4].required: false
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[4].type: string
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[5].description: Time
  offset in seconds that the media starts relative to the bundle. Default is 0.
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[5].in: formData
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[5].name: start_time
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[5].required: false
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[5].type: number
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[6].description: Set
  to true if more media parts will be added to the track. Default is false.
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[6].in: formData
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[6].name: parts_pending
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[6].required: false
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[6].type: boolean
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[7].description: Object
  version.
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[7].in: formData
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[7].name: version
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[7].required: false
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.parameters[7].type: integer
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.produces.length: 1
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.produces[0]: application/hal+json
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.responses.200.description: No
  response was specified
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.responses.200.schema.$ref: '#/definitions/Ref_(of_Track)'
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.responses.202.description: Accepted
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.responses.400.description: Bad
  request
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.responses.404.description: Not
  found
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.responses.409.description: Conflict
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.summary: Add media to a track
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.tags.length: 1
paths./v1/bundles/{bundle_id}/tracks/{track_id}.put.tags[0]: bundles
paths./v1/reports/scores.get.description: 'Analyzes bundle content over a series of
  time periods grouped by the value of <b>group_field</b> metadata field and generates
  a report of top scores.<br/><br/><b>interval</b> specifies the duration of each
  time period in the report. For example, you can generate a report that gives monthly
  statistics. If there are no bundles for a given period, that period will not be
  present in the report.<br/><br/><b>score_field</b> specifies a bundle, insights,
  or metadata field to use as a score. The scores will be averaged across the group
  and listed in descending order.<br/><br/><b>group_field</b> specifies a metadata
  field by which to group statistics. Typically the field will represent a user or
  team id to get a report of the scores for the top users or teams.<br/><br/><b>filter</b>
  is used to limit the bundles in the report according to specific criteria based
  on metadata and bundle values.  A report filter behaves in the same way as a search
  filter. It uses an expression syntax similar to Javascript boolean expressions.
  An expression is made up of zero or more terms joined by logical operators with
  each term having a field, a comparison operator, and a literal value. Parentheses
  can be used to logically group terms.<br/><br/><div class="notes-indent">A filter
  term is of the form: <b><i><code>field-name comparison-operator literal-value</code></b></i>
  where:<br/><br/><b><i><code>field-name</code></i></b> is a metadata field or <code>bundle.name</code>,
  <code>bundle.id</code>, <code>bundle.external_id</code>, <code>bundle.created</code>,
  or <code>bundle.updated</code>.<br/><br/><b><i><code>comparison-operator</code></i></b>
  is <code>==</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt=</code>,
  or <code>!=</code><br/><br/><b><i><code>literal-value</code></i></b> is a number
  (integer or decimal), boolean <code><i>true</i></code> or <code><i>false</i></code>,
  or a string with either double quotes (<code>"</code>) or single quotes (<code>''</code>).<br/><br/>Logical
  operators between terms (and groups of terms) can be <code>&&</code> (logical AND),
  <code>||</code> (logical OR). A logical NOT is <code>!</code> and can be placed
  before a term (or group of terms.)</div><br/><br/>An example filter expression (assuming
  you have used metadata fields category and tag): </p><br><div class="notes-indent"><code>category=="music"
  && (tag == "soft" || tag == "smooth") && tag != "jazz" && bundle.created > "2014-03-15T00:00:00.0Z"</code></div><br/><br/><p><b>language</b>
  parameter specifies the language to use for analyzing the report. This value is
  only relevant for language-related insight data. Supported languages: en, en-UK,
  en-US, es, fr.'
paths./v1/reports/scores.get.operationId: v1reportsscores
paths./v1/reports/scores.get.parameters.length: 5
paths./v1/reports/scores.get.parameters[0].description: Duration of report periods.
  Default is month.
paths./v1/reports/scores.get.parameters[0].enum.length: 6
paths./v1/reports/scores.get.parameters[0].enum[0]: year
paths./v1/reports/scores.get.parameters[0].enum[1]: quarter
paths./v1/reports/scores.get.parameters[0].enum[2]: month
paths./v1/reports/scores.get.parameters[0].enum[3]: week
paths./v1/reports/scores.get.parameters[0].enum[4]: day
paths./v1/reports/scores.get.parameters[0].enum[5]: hour
paths./v1/reports/scores.get.parameters[0].in: query
paths./v1/reports/scores.get.parameters[0].name: interval
paths./v1/reports/scores.get.parameters[0].required: true
paths./v1/reports/scores.get.parameters[0].type: string
paths./v1/reports/scores.get.parameters[1].description: A bundle/metadata field to
  use as a score. Ex. insights.spoken_words.listener_score.
paths./v1/reports/scores.get.parameters[1].in: query
paths./v1/reports/scores.get.parameters[1].name: score_field
paths./v1/reports/scores.get.parameters[1].required: true
paths./v1/reports/scores.get.parameters[1].type: string
paths./v1/reports/scores.get.parameters[2].description: A metadata field by which
  to group scores, typically a user or team id field.
paths./v1/reports/scores.get.parameters[2].in: query
paths./v1/reports/scores.get.parameters[2].name: group_field
paths./v1/reports/scores.get.parameters[2].required: true
paths./v1/reports/scores.get.parameters[2].type: string
paths./v1/reports/scores.get.parameters[3].description: filter expression, typically
  programmatically generated based on input controls and data segregation rules etc.
  Up to 500 characters.
paths./v1/reports/scores.get.parameters[3].in: query
paths./v1/reports/scores.get.parameters[3].name: filter
paths./v1/reports/scores.get.parameters[3].required: false
paths./v1/reports/scores.get.parameters[3].type: string
paths./v1/reports/scores.get.parameters[4].description: Language to search in, specified
  with an RFC5646 code. Default is "en"
paths./v1/reports/scores.get.parameters[4].enum.length: 5
paths./v1/reports/scores.get.parameters[4].enum[0]: en
paths./v1/reports/scores.get.parameters[4].enum[1]: en-UK
paths./v1/reports/scores.get.parameters[4].enum[2]: en-US
paths./v1/reports/scores.get.parameters[4].enum[3]: es
paths./v1/reports/scores.get.parameters[4].enum[4]: fr
paths./v1/reports/scores.get.parameters[4].in: query
paths./v1/reports/scores.get.parameters[4].name: language
paths./v1/reports/scores.get.parameters[4].required: false
paths./v1/reports/scores.get.parameters[4].type: string
paths./v1/reports/scores.get.produces.length: 1
paths./v1/reports/scores.get.produces[0]: application/hal+json
paths./v1/reports/scores.get.responses.200.description: OK
paths./v1/reports/scores.get.responses.200.schema.$ref: '#/definitions/BundleReport'
paths./v1/reports/scores.get.responses.400.description: Bad request
paths./v1/reports/scores.get.summary: Generate Group Report <span class="label">beta</span>
paths./v1/reports/scores.get.tags.length: 1
paths./v1/reports/scores.get.tags[0]: reports
paths./v1/reports/trends.get.description: 'Analyzes bundle content over a series of
  time periods and generates a trend report.<br/><br/><b>interval</b> specifies the
  duration of each time period in the report. For example, you can generate a report
  that gives monthly statistics. If there are no bundles for a given period, that
  period will not be present in the report.<br/><br/><b>content</b> specifies the
  content type to analyze and include in the report. These can include tracks and
  insights. Multiple values can be specified to generate a rich report. If <b>content</b>
  is not specified, only bundle counts are included in the report.<br/><br/><b>filter</b>
  is used to limit the bundles in the report according to specific criteria based
  on metadata and bundle values.  A report filter behaves in the same way as a search
  filter. It uses an expression syntax similar to Javascript boolean expressions.
  An expression is made up of zero or more terms joined by logical operators with
  each term having a field, a comparison operator, and a literal value. Parentheses
  can be used to logically group terms.<br/><br/><div class="notes-indent">A filter
  term is of the form: <b><i><code>field-name comparison-operator literal-value</code></b></i>
  where:<br/><br/><b><i><code>field-name</code></i></b> is a metadata field or <code>bundle.name</code>,
  <code>bundle.id</code>, <code>bundle.external_id</code>, <code>bundle.created</code>,
  or <code>bundle.updated</code>.<br/><br/><b><i><code>comparison-operator</code></i></b>
  is <code>==</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt=</code>,
  or <code>!=</code><br/><br/><b><i><code>literal-value</code></i></b> is a number
  (integer or decimal), boolean <code><i>true</i></code> or <code><i>false</i></code>,
  or a string with either double quotes (<code>"</code>) or single quotes (<code>''</code>).<br/><br/>Logical
  operators between terms (and groups of terms) can be <code>&&</code> (logical AND),
  <code>||</code> (logical OR). A logical NOT is <code>!</code> and can be placed
  before a term (or group of terms.)</div><br/><br/>An example filter expression (assuming
  you have used metadata fields category and tag): </p><br><div class="notes-indent"><code>category=="music"
  && (tag == "soft" || tag == "smooth") && tag != "jazz" && bundle.created > "2014-03-15T00:00:00.0Z"</code></div><br/><br/><p><b>language</b>
  parameter specifies the language to use for analyzing the report. This value is
  only relevant for language-related insight data. Supported languages: en, en-UK,
  en-US, es, fr.'
paths./v1/reports/trends.get.operationId: v1reportstrends
paths./v1/reports/trends.get.parameters.length: 4
paths./v1/reports/trends.get.parameters[0].description: Duration of report periods.
  Default is month.
paths./v1/reports/trends.get.parameters[0].enum.length: 6
paths./v1/reports/trends.get.parameters[0].enum[0]: year
paths./v1/reports/trends.get.parameters[0].enum[1]: quarter
paths./v1/reports/trends.get.parameters[0].enum[2]: month
paths./v1/reports/trends.get.parameters[0].enum[3]: week
paths./v1/reports/trends.get.parameters[0].enum[4]: day
paths./v1/reports/trends.get.parameters[0].enum[5]: hour
paths./v1/reports/trends.get.parameters[0].in: query
paths./v1/reports/trends.get.parameters[0].name: interval
paths./v1/reports/trends.get.parameters[0].required: true
paths./v1/reports/trends.get.parameters[0].type: string
paths./v1/reports/trends.get.parameters[1].description: Content reported in each period.
  Zero or more of tracks, spoken_words, spoken_keywords. List is space or comma separated
  single string or an array of strings.
paths./v1/reports/trends.get.parameters[1].in: query
paths./v1/reports/trends.get.parameters[1].name: content
paths./v1/reports/trends.get.parameters[1].required: false
paths./v1/reports/trends.get.parameters[1].type: string
paths./v1/reports/trends.get.parameters[2].description: filter expression, typically
  programmatically generated based on input controls and data segregation rules etc.
  Up to 500 characters.
paths./v1/reports/trends.get.parameters[2].in: query
paths./v1/reports/trends.get.parameters[2].name: filter
paths./v1/reports/trends.get.parameters[2].required: false
paths./v1/reports/trends.get.parameters[2].type: string
paths./v1/reports/trends.get.parameters[3].description: Language to search in, specified
  with an RFC5646 code. Default is "en"
paths./v1/reports/trends.get.parameters[3].enum.length: 5
paths./v1/reports/trends.get.parameters[3].enum[0]: en
paths./v1/reports/trends.get.parameters[3].enum[1]: en-UK
paths./v1/reports/trends.get.parameters[3].enum[2]: en-US
paths./v1/reports/trends.get.parameters[3].enum[3]: es
paths./v1/reports/trends.get.parameters[3].enum[4]: fr
paths./v1/reports/trends.get.parameters[3].in: query
paths./v1/reports/trends.get.parameters[3].name: language
paths./v1/reports/trends.get.parameters[3].required: false
paths./v1/reports/trends.get.parameters[3].type: string
paths./v1/reports/trends.get.produces.length: 1
paths./v1/reports/trends.get.produces[0]: application/hal+json
paths./v1/reports/trends.get.responses.200.description: OK
paths./v1/reports/trends.get.responses.200.schema.$ref: '#/definitions/BundleReport'
paths./v1/reports/trends.get.responses.400.description: Bad request
paths./v1/reports/trends.get.summary: Generate Trends Report <span class="label">beta</span>
paths./v1/reports/trends.get.tags.length: 1
paths./v1/reports/trends.get.tags[0]: reports
paths./v1/search.get.description: 'Searches the bundles and returns a list of matching
  bundles, along with what matched and where for each bundle.<br/><br/><b>query</b>
  is used to search for text in the audio and metadata. It uses a simple query language
  similar to Google. At its simplest, it can be a space separated list of words (ex.
  <code>open voice</code>) which will find all bundles matching all the words. To
  search for a phrase, put it in quotes (ex. <code>"open source"</code>) You can exclude
  bundles that contain a word by putting a minus (hyphen) in front of the word (ex.
  <code>-opaque</code>) To search for one word or another, use <code>OR</code> (in
  uppercase) between the words (ex. <code>pizza OR pasta</code>). As an alternative
  to <code>OR</code>, you can use <code><b>|</b></code> (pipe character). A full query
  could look something like: <code>restaurant "little italy" pizza OR pasta -mushrooms</code><br/><br/><b>query_fields</b>
  is used to specify what data in a bundle the query will search. It can contain one
  or more of <i>insights.spoken_words</i>, metadata fields, and/or bundle fields.
  Multiple values can be either an array of strings or a comma or space separated
  single string. By default (if the <b>query_fields</b> param is not included in a
  request or is a single empty string) all data will be searched.<br/><br/><table><tr><td><b>query_fields</b></td><td><b>Bundle&nbsp;data&nbsp;searched</b></td><td></td></tr><tr><td>*</td><td>all
  data</td><td>This is the default value.</td></tr><tr><td>insights.spoken_words</td><td><i>[spoken
  words]</i></td><td>All audio tracks are searched.</td></tr><tr><td><i>fieldname</i></td><td>metadata.<i>fieldname</i></td><td>Your
  custom metadata field. Wildcard metadata.* searches all metadata fields.</td></tr><tr><td>bundle.<i>fieldname</i></td><td>bundle.<i>fieldname</i></td><td>The
  searchable bundle fieldnames are name, id, external_id, created and updated. Wildcard
  bundle.* searches all bundle fields</td></tr></table><br>As an example, suppose
  you have metadata fields <b>name</b> and <b>description</b> that you would like
  to search and other metadata fields you don&apos;t want to search. You also want
  to search the audio words, so you could specify <b>query_fields</b> = &quot;insights.spoken_words,
  name, description&quot;.<br/><br/><b>filter</b> is used to limit the search results
  according to specific criteria based on metadata and bundle values. It uses an expression
  syntax similar to Javascript boolean expressions. An expression is made up of zero
  or more terms joined by logical operators with each term having a field, a comparison
  operator, and a literal value. Parentheses can be used to logically group terms.<br/><br/><div
  class="notes-indent">A filter term is of the form: <b><i><code>field-name comparison-operator
  literal-value</code></b></i> where:<br/><br/><b><i><code>field-name</code></i></b>
  is a metadata field or <code>bundle.name</code>, <code>bundle.id</code>, <code>bundle.external_id</code>,
  <code>bundle.created</code>, or <code>bundle.updated</code>.<br/><br/><b><i><code>comparison-operator</code></i></b>
  is <code>==</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt=</code>,
  or <code>!=</code><br/><br/><b><i><code>literal-value</code></i></b> is a number
  (integer or decimal), boolean <code><i>true</i></code> or <code><i>false</i></code>,
  or a string with either double quotes (<code>"</code>) or single quotes (<code>''</code>).<br/><br/>Logical
  operators between terms (and groups of terms) can be <code>&&</code> (logical AND),
  <code>||</code> (logical OR). A logical NOT is <code>!</code> and can be placed
  before a term (or group of terms.)</div><br/><br/>An example filter expression (assuming
  you have used metadata fields category and tag): </p><br><div class="notes-indent"><code>category=="music"
  && (tag == "soft" || tag == "smooth") && tag != "jazz" && bundle.created > "2014-03-15T00:00:00.0Z"</code></div><br/><br/><p><b>language</b>
  parameter specifies the language of the words in the search query. This value is
  used for word-stemming etc. while searching text. Regardless of what you set for
  this parameter, all your bundles will be searched, no matter what language content
  they contain. Supported languages: en, en-UK, en-US, es, fr.<br/><br/>After getting
  the initial list, use the <b>first</b>, <b>next</b>, <b>prev</b> link relations
  to get more bundles in the list. Note that <b>next</b> will not be available at
  the end of the list and <b>prev</b> will not be available at the start of the list.
  A maximum of <b>limit</b> items will be returned. If the results are exactly one
  page neither <b>prev</b> nor <b>next</b> will be available.<br/><br/>The <b>embed</b>
  parameter specifies link relations to embed in the results. For link relations that
  are curies (ex. "clarify:metadata"), you may simply use the base name (ex. "metadata").</p>'
paths./v1/search.get.operationId: v1search
paths./v1/search.get.parameters.length: 7
paths./v1/search.get.parameters[0].description: search terms, typically as typed into
  a search field. Up to 120 characters.
paths./v1/search.get.parameters[0].in: query
paths./v1/search.get.parameters[0].name: query
paths./v1/search.get.parameters[0].required: false
paths./v1/search.get.parameters[0].type: string
paths./v1/search.get.parameters[1].description: list of insights, metadata, and bundle
  fields to search with the query. Use insights.spoken_words for searching audio,
  metadata.* for all metadata fields, bundle.* for all bundle fields, * for audio
  and all fields. Default is insights.spoken_words and metadata.*. List is space or
  comma separated single string or an array of strings. If single string, up to 1024
  characters.
paths./v1/search.get.parameters[1].in: query
paths./v1/search.get.parameters[1].name: query_fields
paths./v1/search.get.parameters[1].required: false
paths./v1/search.get.parameters[1].type: string
paths./v1/search.get.parameters[2].description: filter expression, typically programmatically
  generated based on input controls and data segregation rules etc. Up to 500 characters.
paths./v1/search.get.parameters[2].in: query
paths./v1/search.get.parameters[2].name: filter
paths./v1/search.get.parameters[2].required: false
paths./v1/search.get.parameters[2].type: string
paths./v1/search.get.parameters[3].description: Language to search in, specified with
  an RFC5646 code. Default is "en"
paths./v1/search.get.parameters[3].enum.length: 5
paths./v1/search.get.parameters[3].enum[0]: en
paths./v1/search.get.parameters[3].enum[1]: en-UK
paths./v1/search.get.parameters[3].enum[2]: en-US
paths./v1/search.get.parameters[3].enum[3]: es
paths./v1/search.get.parameters[3].enum[4]: fr
paths./v1/search.get.parameters[3].in: query
paths./v1/search.get.parameters[3].name: language
paths./v1/search.get.parameters[3].required: false
paths./v1/search.get.parameters[3].type: string
paths./v1/search.get.parameters[4].description: limit results to specified number
  of bundles. Default is 10. Max 100.
paths./v1/search.get.parameters[4].in: query
paths./v1/search.get.parameters[4].maximum: 100
paths./v1/search.get.parameters[4].minimum: 1
paths./v1/search.get.parameters[4].name: limit
paths./v1/search.get.parameters[4].required: false
paths./v1/search.get.parameters[4].type: integer
paths./v1/search.get.parameters[5].description: 'list of link relations to embed in
  the result collection. Zero or more of: items, tracks, metadata, insights. List
  is space or comma separated single string or an array of strings'
paths./v1/search.get.parameters[5].in: query
paths./v1/search.get.parameters[5].name: embed
paths./v1/search.get.parameters[5].required: false
paths./v1/search.get.parameters[5].type: string
paths./v1/search.get.parameters[6].description: opaque value, automatically provided
  in next/prev links
paths./v1/search.get.parameters[6].in: query
paths./v1/search.get.parameters[6].name: iterator
paths./v1/search.get.parameters[6].required: false
paths./v1/search.get.parameters[6].type: string
paths./v1/search.get.produces.length: 1
paths./v1/search.get.produces[0]: application/hal+json
paths./v1/search.get.responses.200.description: OK
paths./v1/search.get.responses.200.schema.$ref: '#/definitions/SearchCollection'
paths./v1/search.get.responses.400.description: Bad request
paths./v1/search.get.summary: Search bundles
paths./v1/search.get.tags.length: 1
paths./v1/search.get.tags[0]: search
schemes.length: 1
schemes[0]: https
swagger: "2.0"
tags.length: 3
tags[0].name: bundles
tags[1].name: reports
tags[2].name: search

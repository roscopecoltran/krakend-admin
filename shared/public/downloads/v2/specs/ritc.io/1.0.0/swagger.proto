syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package ritc;

message GetActionsResponse {
    repeated ActionShortResponse items = 1;
}

message PostActionsRequest {
    // Action information
    Action59 Action Object = 1;
}

message GetActionsAction_idRequest {
    // Id of action_id
    string action_id = 1;
}

message GetActionsAction_idResponse {
    repeated ActionFullResponse items = 1;
}

message DeleteActionsAction_idRequest {
    // Id of action
    string action_id = 1;
}

message GetAdminResponse {
}

message PostAdminLogRequest {
    // Log message
    message Message {
    }
    Message message = 1;
}

message PostAdminLogResponse {
}

message GetAdminPingResponse {
}

message GetAppsResponse {
    repeated AppResponse items = 1;
}

message PostAppsRequest {
    // App information
    App App Object = 1;
}

message GetAppsChannelsUsersResponse {
    repeated AppChannelResponse items = 1;
}

message GetAppsChannelsChannel_idUsersRequest {
    // Id of Channel
    string channel_id = 1;
}

message GetAppsChannelsChannel_idUsersResponse {
    repeated AppChannelResponse items = 1;
}

message GetAppsChannelsChannel_idUsersUser_idRequest {
    // Id of Channel
    string channel_id = 1;
    // Id of User
    string user_id = 2;
}

message GetAppsChannelsChannel_idUsersUser_idResponse {
    repeated AppChannelResponse items = 1;
}

message PostAppsChannelsChannel_idUsersUser_idRequest {
    // Id of Channel
    string channel_id = 1;
    // Id of User
    string user_id = 2;
}

message GetAppsExtApiCredentialsResponse {
    repeated AppExternalCredentialsResponse items = 1;
}

message PostAppsExtApiCredentialsRequest {
    // App_External_Credentials information
    AppExternalCredentials App_External_Credentials Object = 1;
}

message GetAppsExtApiCredentialsChannel_idRequest {
    // Id of Channel
    string channel_id = 1;
}

message GetAppsExtApiCredentialsChannel_idResponse {
    repeated AppExternalCredentialsResponse items = 1;
}

message DeleteAppsExtApiCredentialsChannel_idRequest {
    // Id of Channel
    string channel_id = 1;
}

message PostAppsRulegroupRunRule_id_listRequest {
    // Do not continue with remaining rules after a rule fires
    bool break_when_rule_fires = 1;
    // Initial data
    message Initial_data {
    }
    Initial_data initial_data = 2;
    // Ids of rules in the group, separated by commas, no spaces
    string rule_id_list = 3;
}

message PostAppsRulegroupRunRule_id_listResponse {
    repeated RuleResults items = 1;
}

message PostAppsRulesRunRequest {
    // Do not continue with remaining rules after a rule fires
    bool break_when_rule_fires = 1;
    // Initial data
    message Initial_data {
    }
    Initial_data initial_data = 2;
}

message PostAppsRulesRunResponse {
    repeated RuleResults items = 1;
}

message GetAppsApp_idRequest {
    // Id of App
    string app_id = 1;
}

message GetAppsApp_idResponse {
    repeated AppResponse items = 1;
}

message DeleteAppsApp_idRequest {
    // Id of App
    string app_id = 1;
}

message GetChannelsResponse {
    repeated ChannelResponse items = 1;
}

message PostChannelsRequest {
    // Channel information
    Channel Channel Object = 1;
}

message GetChannelsAnonymousResponse {
    repeated ChannelResponse items = 1;
}

message GetChannelsChannel_idRequest {
    // Id of Channel
    string channel_id = 1;
}

message GetChannelsChannel_idResponse {
    repeated ChannelResponse items = 1;
}

message DeleteChannelsChannel_idRequest {
    // Id of Channel
    string channel_id = 1;
}

message GetChannelsChannel_idFunctionsRequest {
    // Id of Channel
    string channel_id = 1;
}

message GetChannelsChannel_idFunctionsResponse {
    repeated FunctionResponse items = 1;
}

message PostChannelsChannel_idFunctionsRequest {
    // Channel Function information
    Function7 Channel Function Object = 1;
    // Id of Channel
    string channel_id = 2;
}

message GetChannelsChannel_idFunctionsFunction_idRequest {
    // Id of Channel
    string channel_id = 1;
    // Id of Channel Function
    string function_id = 2;
}

message GetChannelsChannel_idFunctionsFunction_idResponse {
    repeated FunctionResponse items = 1;
}

message PostOrgsRequest {
    // Org information
    Org Org Object = 1;
}

message PostOrgsResponse {
    repeated OrgResponse items = 1;
}

message GetOrgsMeResponse {
    repeated OrgResponse items = 1;
}

message GetRulesResponse {
    repeated RuleShortResponse items = 1;
}

message PostRulesRequest {
    // Rule information
    Rule Rule Object = 1;
}

message GetRulesRule_idRequest {
    // Id of rule
    string rule_id = 1;
}

message GetRulesRule_idResponse {
    repeated RuleFullResponse items = 1;
}

message DeleteRulesRule_idRequest {
    // Id of rule
    string rule_id = 1;
}

message PostRulesRule_idRunRequest {
    // Initial data
    message Initial_data {
    }
    Initial_data initial_data = 1;
    // Id of rule
    string rule_id = 2;
}

message PostRulesRule_idRunResponse {
}

message GetTriggersResponse {
    repeated TriggerShortResponse items = 1;
}

message PostTriggersRequest {
    // Trigger parameters and configuration
    Trigger54 Trigger Object = 1;
}

message GetTriggersTrigger_idRequest {
    // Id of Trigger
    string trigger_id = 1;
}

message GetTriggersTrigger_idResponse {
    repeated TriggerFullResponse items = 1;
}

message DeleteTriggersTrigger_idRequest {
    // Id of Trigger
    string trigger_id = 1;
}

message GetUsersResponse {
    repeated AppUserResponse items = 1;
}

message PostUsersRequest {
    // App User information
    AppUser App User Object = 1;
}

message GetUsersAdminResponse {
    repeated AdminUserResponse items = 1;
}

message PostUsersAdminRequest {
    // Admin User information
    AdminUser Admin_User Object = 1;
}

message GetUsersAdminUser_idRequest {
    // Id of Admin_User
    string user_id = 1;
}

message GetUsersAdminUser_idResponse {
    repeated AdminUserResponse items = 1;
}

message DeleteUsersAdminUser_idRequest {
    // Id of Admin_User
    string user_id = 1;
}

message PostUsersAuthenticateUser_idChannelChannel_idRequest {
    // Id of Channel
    string channel_id = 1;
    // Id of User
    string user_id = 2;
}

message PostUsersAuthenticateUser_idChannelChannel_idResponse {
    repeated AuthorizeUrlResponse items = 1;
}

message GetUsersUser_idRequest {
    // Id of App User
    string user_id = 1;
}

message GetUsersUser_idResponse {
    repeated AppUserResponse items = 1;
}

message DeleteUsersUser_idRequest {
    // Id of user
    string user_id = 1;
}

message GetUsersUser_idChannelsRequest {
    // Id of user
    string user_id = 1;
}

message GetUsersUser_idChannelsResponse {
    repeated UserChannel items = 1;
}

message PostUsersUser_idChannelsRequest {
    // Id of Channel
    string channel_id = 1;
    // Id of user
    string user_id = 2;
}

message GetUsersUser_idChannelsChannel_idRequest {
    // Id of Channel
    string channel_id = 1;
    // Id of User
    string user_id = 2;
}

message GetUsersUser_idChannelsChannel_idResponse {
    repeated UserChannel items = 1;
}

message DeleteUsersUser_idChannelsChannel_idRequest {
    // Id of Channel
    string channel_id = 1;
    // Id of User
    string user_id = 2;
}

message GetUsersUser_idRulesRequest {
    // Id of user
    string user_id = 1;
}

message GetUsersUser_idRulesResponse {
    repeated RuleShortResponse items = 1;
}

message GetUsersUser_idRulesRule_idRequest {
    // Id of Rule
    string rule_id = 1;
    // Id of User
    string user_id = 2;
}

message GetUsersUser_idRulesRule_idResponse {
    repeated RuleFullResponse items = 1;
}

message PostUsersUser_idRulesRule_idRequest {
    // Id of Rule
    string rule_id = 1;
    // Id of User
    string user_id = 2;
}

message DeleteUsersUser_idRulesRule_idRequest {
    // Id of Rule
    string rule_id = 1;
    // Id of User
    string user_id = 2;
}

message PostUsersUser_idRulesRule_idRunRequest {
    // Id of Rule
    string rule_id = 1;
    // Id of User
    string user_id = 2;
}

message PostUsersUser_idRulesRule_idRunResponse {
}

message Action {
    string channelId = 1;
    // The date the rule was created
    string createdDate = 2;
    string description = 3;
    string functionId = 4;
    string id = 5;
    // The date the rule was modified
    string modifiedDate = 6;
    string name = 7;
    Status status = 8;
}

message Action59 {
    // Id of channel used by action
    int32 channelId = 1;
    // Object containing named Javascript code sets
    message Codes {
    }
    Codes codes = 2;
    // Action description
    string desc = 3;
    // Hash id of channel function used by action
    string functionId = 4;
    // Action name
    string name = 5;
    // Object containing channel-defined action parameters
    message Parameters {
    }
    Parameters parameters = 6;
}

message ActionFullResponse {
    int32 channelId = 1;
    message Codes {
    }
    Codes codes = 2;
    // The date the action was created
    string createdDate = 3;
    // Action description
    string description = 4;
    string functionId = 5;
    int32 id = 6;
    // The date the action was modified
    string modifiedDate = 7;
    // Action name
    string name = 8;
    message Parameters {
    }
    Parameters parameters = 9;
    Status status = 10;
}

message ActionShortResponse {
    string channelId = 1;
    // The date the action was created
    string createdDate = 2;
    // Action description
    string description = 3;
    string functionId = 4;
    string id = 5;
    // The date the action was modified
    string modifiedDate = 6;
    // Action name
    string name = 7;
    Status status = 8;
}

message AdminUser {
    // Admin User email address
    string email = 1;
    // Admin User password
    string password = 2;
    Type41 type = 3;
}

message AdminUserResponse {
    // The date the admin user was created
    string createdDate = 1;
    // Admin User email address
    string email = 2;
    int32 id = 3;
    // The date the admin user was modified
    string modifiedDate = 4;
    // Admin User name
    string name = 5;
    // Indicates the status of an Admin User
    Status status = 6;
}

enum ApiType {
    INTERNAL = 0;
    REST = 1;
    SDK = 2;
}

message App {
    // App description
    string desc = 1;
    // App name
    string name = 2;
}

message AppChannelResponse {
    // Channel Id
    int32 channelId = 1;
    // The date the user was created
    string createdDate = 2;
    int32 id = 3;
    // Assignment status
    Status status = 4;
    // Id of App User assigned to Channel
    int32 userId = 5;
}

message AppExternalCredentials {
    AuthType authType = 1;
    string channel_id = 2;
    message Credentials {
    }
    Credentials credentials = 3;
    // App external credentials api name
    string name = 4;
}

message AppExternalCredentialsResponse {
    AuthType authType = 1;
    string channel_id = 2;
    message Credentials {
    }
    Credentials credentials = 3;
    string id = 4;
    // App external credentials api name
    string name = 5;
}

message AppResponse {
    // App ApiKey
    string apiKey = 1;
    // The date the app was created
    string createdDate = 2;
    // App description
    string description = 3;
    string id = 4;
    // The date the app was modified
    string modifiedDate = 5;
    // App name
    string name = 6;
    Status status = 7;
}

message AppUser {
    // Object containing user-defined app user configuration
    message Config {
    }
    Config config = 1;
    // Display name of App User
    string name = 2;
    // App User password
    string password = 3;
}

message AppUserResponse {
    // The date the user was created
    string createdDate = 1;
    // Description of App User
    string description = 2;
    // Id of App User
    string id = 3;
    // The date the user was modified
    string modifiedDate = 4;
    // Display name of App User
    string name = 5;
    // App User status
    Status status = 6;
}

enum AuthType {
    APIKEY = 0;
    BASIC = 1;
    NONE = 2;
    OAUTH2 = 3;
}

message AuthorizeUrlResponse {
    string url = 1;
}

message Channel {
    // Channel description
    string description = 1;
    repeated Function functions = 2;
    // Id of channel
    string id = 3;
    // Channel name
    string name = 4;
    // Type of channel. Choices are 'public' or 'private'. Private channels are only viewable within an account, while public channels are viewable to everyone in the system
    message Type {
    }
    Type type = 5;
}

message ChannelResponse {
    // Channel description
    string description = 1;
    repeated Function5 functions = 2;
    // Id of channel
    string id = 3;
    // Channel name
    string name = 4;
    // Type of channel. Choices are 'public' or 'private'. Private channels are only viewable within an account, while public channels are viewable to everyone
    message Type {
    }
    Type type = 5;
}

message Error {
    int32 code = 1;
    string fields = 2;
    string message = 3;
}

message Function {
    string id = 1;
    // Function name
    string name = 2;
    repeated Parameter parameters = 3;
    Type type = 4;
}

message Function5 {
    // Function description
    string description = 1;
    string id = 2;
    // Function name
    string name = 3;
    Type type = 4;
}

message Function7 {
    ApiType apiType = 1;
    // Function description
    string desc = 2;
    // Function endpoint
    string endpoint = 3;
    HttpMethod httpMethod = 4;
    // Function name
    string name = 5;
    repeated RequestParameter requestParameters = 6;
    ResponseFormat responseFormat = 7;
    Type type = 8;
}

message FunctionResponse {
    ApiType apiType = 1;
    // Function description
    string description = 2;
    // Function endpoint
    string endpoint = 3;
    HttpMethod httpMethod = 4;
    string id = 5;
    // Function name
    string name = 6;
    repeated RequestParameter requestParameters = 7;
    ResponseFormat responseFormat = 8;
    Type type = 9;
}

enum HttpMethod {
    DELETE = 0;
    GET = 1;
    PATCH = 2;
    POST = 3;
}

message Org {
    // Org description
    string desc = 1;
    // Org name
    string name = 2;
    // Org type
    string type = 3;
}

message OrgResponse {
    // The date the org was created
    string createdDate = 1;
    string id = 2;
    // The date the org was modified
    string modifiedDate = 3;
    // Org name
    string name = 4;
    Plan plan = 5;
    message PlanCat {
    }
    PlanCat planCat = 6;
    // Org name
    string status = 7;
    message Type {
    }
    Type type = 8;
}

message Parameter {
    string key = 1;
    string value = 2;
}

enum Plan {
    FREE = 0;
    BASIC = 1;
}

message RequestParameter {
    string description = 1;
    string fieldType = 2;
    string label = 3;
    string name = 4;
    Schema schema = 5;
}

enum ResponseFormat {
    HTML = 0;
    JSON = 1;
    TEXT = 2;
    XML = 3;
}

message Rule {
    // Rule description
    string actionIds = 1;
    // Rule description
    string description = 2;
    // Rule name
    string name = 3;
    // Rule status
    Status status = 4;
    // Rule description
    string triggerIds = 5;
}

message RuleFullResponse {
    repeated Action actions = 1;
    // The date the rule was created
    string createdDate = 2;
    // Rule description
    string description = 3;
    // Rule Id
    int32 id = 4;
    // The date the rule was modified
    string modifiedDate = 5;
    // Rule name
    string name = 6;
    // Rule status
    Status status = 7;
    repeated Trigger triggers = 8;
}

message RuleResults {
    string id = 1;
    // Name of rule results
    string name = 2;
    Type type = 3;
}

message RuleShortResponse {
    // The date the rule was created
    string createdDate = 1;
    // Rule description
    string description = 2;
    // Rule Id
    int32 id = 3;
    // The date the rule was modified
    string modifiedDate = 4;
    // Rule name
    string name = 5;
    // Rule status
    Status status = 6;
}

message Schema {
    message Datatype {
    }
    Datatype datatype = 1;
    string default = 2;
    message Expose {
    }
    Expose expose = 3;
    message Required {
    }
    Required required = 4;
    Style style = 5;
}

enum Statu {
    ACTIVE = 0;
    INACTIVE = 1;
}

enum Style {
    POSTBODY = 0;
    QUERY = 1;
    TEMPLATE = 2;
}

message Trigger {
    string channelId = 1;
    // The date the rule was created
    string createdDate = 2;
    string description = 3;
    string functionId = 4;
    string id = 5;
    // The date the rule was modified
    string modifiedDate = 6;
    string name = 7;
    Status status = 8;
}

message Trigger54 {
    // Id of channel used by trigger
    int32 channelId = 1;
    // Object containing named Javascript code sets
    message Codes {
    }
    Codes codes = 2;
    // Trigger description
    string desc = 3;
    // Hash id of channel function used by trigger
    string functionId = 4;
    // Trigger name
    string name = 5;
    // Object containing channel-defined trigger parameters
    message Parameters {
    }
    Parameters parameters = 6;
}

message TriggerFullResponse {
    int32 channelId = 1;
    message Codes {
    }
    Codes codes = 2;
    // The date the trigger was created
    string createdDate = 3;
    // Trigger description
    string description = 4;
    string functionId = 5;
    int32 id = 6;
    // The date the trigger was modified
    string modifiedDate = 7;
    // Trigger name
    string name = 8;
    message Parameters {
    }
    Parameters parameters = 9;
    Status status = 10;
}

message TriggerShortResponse {
    int32 channelId = 1;
    // The date the trigger was created
    string createdDate = 2;
    // Trigger description
    string description = 3;
    string functionId = 4;
    int32 id = 5;
    // The date the trigger was modified
    string modifiedDate = 6;
    // Trigger name
    string name = 7;
    Status status = 8;
}

enum Type {
    ACTION = 0;
    TRIGGER = 1;
}

enum Type41 {
    ADMIN = 0;
    GUEST = 1;
}

message UserChannel {
    int32 channelId = 1;
    int32 userId = 2;
}

service RitcService {
    // List actions
    rpc GetActions(google.protobuf.Empty) returns (GetActionsResponse) {
      option (google.api.http) = {
        get: "//actions"
      };
    }
    // Create a new action
    rpc PostActions(PostActionsRequest) returns (ActionShortResponse) {
      option (google.api.http) = {
        post: "//actions"
        body: "Action Object"
      };
    }
    // Get an action
    rpc GetActionsAction_id(GetActionsAction_idRequest) returns (GetActionsAction_idResponse) {
      option (google.api.http) = {
        get: "//actions/{action_id}"
      };
    }
    // Delete an action
    rpc DeleteActionsAction_id(DeleteActionsAction_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//actions/{action_id}"
      };
    }
    // Ping the server
    rpc GetAdmin(google.protobuf.Empty) returns (GetAdminResponse) {
      option (google.api.http) = {
        get: "//admin"
      };
    }
    // Log a message
    rpc PostAdminLog(PostAdminLogRequest) returns (PostAdminLogResponse) {
      option (google.api.http) = {
        post: "//admin/log"
        body: "message"
      };
    }
    // Ping the server
    rpc GetAdminPing(google.protobuf.Empty) returns (GetAdminPingResponse) {
      option (google.api.http) = {
        get: "//admin/ping"
      };
    }
    // Get apps information
    rpc GetApps(google.protobuf.Empty) returns (GetAppsResponse) {
      option (google.api.http) = {
        get: "//apps"
      };
    }
    // Create a new app
    rpc PostApps(PostAppsRequest) returns (AppResponse) {
      option (google.api.http) = {
        post: "//apps"
        body: "App Object"
      };
    }
    // Get app channels
    rpc GetAppsChannelsUsers(google.protobuf.Empty) returns (GetAppsChannelsUsersResponse) {
      option (google.api.http) = {
        get: "//apps/channels/users"
      };
    }
    // Get users of a specified channel
    rpc GetAppsChannelsChannel_idUsers(GetAppsChannelsChannel_idUsersRequest) returns (GetAppsChannelsChannel_idUsersResponse) {
      option (google.api.http) = {
        get: "//apps/channels/{channel_id}/users"
      };
    }
    // Get user of a specified channel
    rpc GetAppsChannelsChannel_idUsersUser_id(GetAppsChannelsChannel_idUsersUser_idRequest) returns (GetAppsChannelsChannel_idUsersUser_idResponse) {
      option (google.api.http) = {
        get: "//apps/channels/{channel_id}/users/{user_id}"
      };
    }
    // Create user channel
    rpc PostAppsChannelsChannel_idUsersUser_id(PostAppsChannelsChannel_idUsersUser_idRequest) returns (AppChannelResponse) {
      option (google.api.http) = {
        post: "//apps/channels/{channel_id}/users/{user_id}"
      };
    }
    // Get external credentials
    rpc GetAppsExtApiCredentials(google.protobuf.Empty) returns (GetAppsExtApiCredentialsResponse) {
      option (google.api.http) = {
        get: "//apps/ext/api/credentials"
      };
    }
    // Create new external credentials
    rpc PostAppsExtApiCredentials(PostAppsExtApiCredentialsRequest) returns (AppExternalCredentialsResponse) {
      option (google.api.http) = {
        post: "//apps/ext/api/credentials"
        body: "App_External_Credentials Object"
      };
    }
    // Get credentials for a channel in an app
    rpc GetAppsExtApiCredentialsChannel_id(GetAppsExtApiCredentialsChannel_idRequest) returns (GetAppsExtApiCredentialsChannel_idResponse) {
      option (google.api.http) = {
        get: "//apps/ext/api/credentials/{channel_id}"
      };
    }
    // Delete credentials for a channel
    rpc DeleteAppsExtApiCredentialsChannel_id(DeleteAppsExtApiCredentialsChannel_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//apps/ext/api/credentials/{channel_id}"
      };
    }
    // Run specified rule group in the app
    rpc PostAppsRulegroupRunRule_id_list(PostAppsRulegroupRunRule_id_listRequest) returns (PostAppsRulegroupRunRule_id_listResponse) {
      option (google.api.http) = {
        post: "//apps/rulegroup/run/{rule_id_list}"
        body: "initial_data"
      };
    }
    // Run active app rules
    rpc PostAppsRulesRun(PostAppsRulesRunRequest) returns (PostAppsRulesRunResponse) {
      option (google.api.http) = {
        post: "//apps/rules/run"
        body: "initial_data"
      };
    }
    // Get app information
    rpc GetAppsApp_id(GetAppsApp_idRequest) returns (GetAppsApp_idResponse) {
      option (google.api.http) = {
        get: "//apps/{app_id}"
      };
    }
    // Delete an app
    rpc DeleteAppsApp_id(DeleteAppsApp_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//apps/{app_id}"
      };
    }
    // Retrieve Channels
    rpc GetChannels(google.protobuf.Empty) returns (GetChannelsResponse) {
      option (google.api.http) = {
        get: "//channels"
      };
    }
    // Create a channel
    rpc PostChannels(PostChannelsRequest) returns (ChannelResponse) {
      option (google.api.http) = {
        post: "//channels"
        body: "Channel Object"
      };
    }
    // Retrieve Channels anonymously
    rpc GetChannelsAnonymous(google.protobuf.Empty) returns (GetChannelsAnonymousResponse) {
      option (google.api.http) = {
        get: "//channels/anonymous"
      };
    }
    // Get channel information
    rpc GetChannelsChannel_id(GetChannelsChannel_idRequest) returns (GetChannelsChannel_idResponse) {
      option (google.api.http) = {
        get: "//channels/{channel_id}"
      };
    }
    // Delete a channel
    rpc DeleteChannelsChannel_id(DeleteChannelsChannel_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//channels/{channel_id}"
      };
    }
    // Retrieve Channel Functions
    rpc GetChannelsChannel_idFunctions(GetChannelsChannel_idFunctionsRequest) returns (GetChannelsChannel_idFunctionsResponse) {
      option (google.api.http) = {
        get: "//channels/{channel_id}/functions"
      };
    }
    // Create a channel function
    rpc PostChannelsChannel_idFunctions(PostChannelsChannel_idFunctionsRequest) returns (FunctionResponse) {
      option (google.api.http) = {
        post: "//channels/{channel_id}/functions"
        body: "Channel Function Object"
      };
    }
    // Get channel function information
    rpc GetChannelsChannel_idFunctionsFunction_id(GetChannelsChannel_idFunctionsFunction_idRequest) returns (GetChannelsChannel_idFunctionsFunction_idResponse) {
      option (google.api.http) = {
        get: "//channels/{channel_id}/functions/{function_id}"
      };
    }
    // Create an org
    rpc PostOrgs(PostOrgsRequest) returns (PostOrgsResponse) {
      option (google.api.http) = {
        post: "//orgs"
        body: "Org Object"
      };
    }
    // Get org information
    rpc GetOrgsMe(google.protobuf.Empty) returns (GetOrgsMeResponse) {
      option (google.api.http) = {
        get: "//orgs/me"
      };
    }
    // List rules
    rpc GetRules(google.protobuf.Empty) returns (GetRulesResponse) {
      option (google.api.http) = {
        get: "//rules"
      };
    }
    // Create a new rule
    rpc PostRules(PostRulesRequest) returns (RuleFullResponse) {
      option (google.api.http) = {
        post: "//rules"
        body: "Rule Object"
      };
    }
    // Get a rule
    rpc GetRulesRule_id(GetRulesRule_idRequest) returns (GetRulesRule_idResponse) {
      option (google.api.http) = {
        get: "//rules/{rule_id}"
      };
    }
    // Delete a rule
    rpc DeleteRulesRule_id(DeleteRulesRule_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//rules/{rule_id}"
      };
    }
    // Run a rule
    rpc PostRulesRule_idRun(PostRulesRule_idRunRequest) returns (PostRulesRule_idRunResponse) {
      option (google.api.http) = {
        post: "//rules/{rule_id}/run"
        body: "initial_data"
      };
    }
    // Triggers in an app
    rpc GetTriggers(google.protobuf.Empty) returns (GetTriggersResponse) {
      option (google.api.http) = {
        get: "//triggers"
      };
    }
    // Create a new trigger in an app
    rpc PostTriggers(PostTriggersRequest) returns (TriggerShortResponse) {
      option (google.api.http) = {
        post: "//triggers"
        body: "Trigger Object"
      };
    }
    // Get a trigger
    rpc GetTriggersTrigger_id(GetTriggersTrigger_idRequest) returns (GetTriggersTrigger_idResponse) {
      option (google.api.http) = {
        get: "//triggers/{trigger_id}"
      };
    }
    // Delete a trigger
    rpc DeleteTriggersTrigger_id(DeleteTriggersTrigger_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//triggers/{trigger_id}"
      };
    }
    // Users
    rpc GetUsers(google.protobuf.Empty) returns (GetUsersResponse) {
      option (google.api.http) = {
        get: "//users"
      };
    }
    // Create a new App User
    rpc PostUsers(PostUsersRequest) returns (AppUserResponse) {
      option (google.api.http) = {
        post: "//users"
        body: "App User Object"
      };
    }
    // Admin users
    rpc GetUsersAdmin(google.protobuf.Empty) returns (GetUsersAdminResponse) {
      option (google.api.http) = {
        get: "//users/admin"
      };
    }
    // Create a new admin user
    rpc PostUsersAdmin(PostUsersAdminRequest) returns (AdminUserResponse) {
      option (google.api.http) = {
        post: "//users/admin"
        body: "Admin_User Object"
      };
    }
    // Get an admin user
    rpc GetUsersAdminUser_id(GetUsersAdminUser_idRequest) returns (GetUsersAdminUser_idResponse) {
      option (google.api.http) = {
        get: "//users/admin/{user_id}"
      };
    }
    // Remove an admin user
    rpc DeleteUsersAdminUser_id(DeleteUsersAdminUser_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//users/admin/{user_id}"
      };
    }
    // Authenticate a user for a channel
    rpc PostUsersAuthenticateUser_idChannelChannel_id(PostUsersAuthenticateUser_idChannelChannel_idRequest) returns (PostUsersAuthenticateUser_idChannelChannel_idResponse) {
      option (google.api.http) = {
        post: "//users/authenticate/{user_id}/channel/{channel_id}"
      };
    }
    // Get an App User
    rpc GetUsersUser_id(GetUsersUser_idRequest) returns (GetUsersUser_idResponse) {
      option (google.api.http) = {
        get: "//users/{user_id}"
      };
    }
    // Remove a user
    rpc DeleteUsersUser_id(DeleteUsersUser_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//users/{user_id}"
      };
    }
    // Channels available to a User
    rpc GetUsersUser_idChannels(GetUsersUser_idChannelsRequest) returns (GetUsersUser_idChannelsResponse) {
      option (google.api.http) = {
        get: "//users/{user_id}/channels"
      };
    }
    // Assign a channel to a user
    rpc PostUsersUser_idChannels(PostUsersUser_idChannelsRequest) returns (UserChannel) {
      option (google.api.http) = {
        post: "//users/{user_id}/channels"
        body: "channel_id"
      };
    }
    // Get a user channel
    rpc GetUsersUser_idChannelsChannel_id(GetUsersUser_idChannelsChannel_idRequest) returns (GetUsersUser_idChannelsChannel_idResponse) {
      option (google.api.http) = {
        get: "//users/{user_id}/channels/{channel_id}"
      };
    }
    // Remove a user channel assignment
    rpc DeleteUsersUser_idChannelsChannel_id(DeleteUsersUser_idChannelsChannel_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//users/{user_id}/channels/{channel_id}"
      };
    }
    // Rules for a User
    rpc GetUsersUser_idRules(GetUsersUser_idRulesRequest) returns (GetUsersUser_idRulesResponse) {
      option (google.api.http) = {
        get: "//users/{user_id}/rules"
      };
    }
    // Get a user
    rpc GetUsersUser_idRulesRule_id(GetUsersUser_idRulesRule_idRequest) returns (GetUsersUser_idRulesRule_idResponse) {
      option (google.api.http) = {
        get: "//users/{user_id}/rules/{rule_id}"
      };
    }
    // Assign a user to a rule
    rpc PostUsersUser_idRulesRule_id(PostUsersUser_idRulesRule_idRequest) returns (RuleShortResponse) {
      option (google.api.http) = {
        post: "//users/{user_id}/rules/{rule_id}"
      };
    }
    // Remove a rule user
    rpc DeleteUsersUser_idRulesRule_id(DeleteUsersUser_idRulesRule_idRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "//users/{user_id}/rules/{rule_id}"
      };
    }
    // Run rule for a user
    rpc PostUsersUser_idRulesRule_idRun(PostUsersUser_idRulesRule_idRunRequest) returns (PostUsersUser_idRulesRule_idRunResponse) {
      option (google.api.http) = {
        post: "//users/{user_id}/rules/{rule_id}/run"
      };
    }
}

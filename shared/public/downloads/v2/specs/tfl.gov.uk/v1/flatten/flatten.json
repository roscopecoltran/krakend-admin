{
	"consumes.length": 0,
	"definitions.AccidentDetail.properties.borough.type": "string",
	"definitions.AccidentDetail.properties.casualties.items.$ref": "#/definitions/Casualty",
	"definitions.AccidentDetail.properties.casualties.type": "array",
	"definitions.AccidentDetail.properties.date.format": "date-time",
	"definitions.AccidentDetail.properties.date.type": "string",
	"definitions.AccidentDetail.properties.id.format": "int32",
	"definitions.AccidentDetail.properties.id.type": "integer",
	"definitions.AccidentDetail.properties.lat.format": "double",
	"definitions.AccidentDetail.properties.lat.type": "number",
	"definitions.AccidentDetail.properties.location.type": "string",
	"definitions.AccidentDetail.properties.lon.format": "double",
	"definitions.AccidentDetail.properties.lon.type": "number",
	"definitions.AccidentDetail.properties.severity.type": "string",
	"definitions.AccidentDetail.properties.vehicles.items.$ref": "#/definitions/Vehicle",
	"definitions.AccidentDetail.properties.vehicles.type": "array",
	"definitions.AccidentDetail.type": "object",
	"definitions.AccidentStatsOrderedSummary.properties.accidents.format": "int32",
	"definitions.AccidentStatsOrderedSummary.properties.accidents.type": "integer",
	"definitions.AccidentStatsOrderedSummary.properties.borough.type": "string",
	"definitions.AccidentStatsOrderedSummary.properties.year.format": "int32",
	"definitions.AccidentStatsOrderedSummary.properties.year.type": "integer",
	"definitions.AccidentStatsOrderedSummary.type": "object",
	"definitions.ActiveServiceType.properties.mode.type": "string",
	"definitions.ActiveServiceType.properties.serviceType.type": "string",
	"definitions.ActiveServiceType.type": "object",
	"definitions.AdditionalProperties.properties.category.type": "string",
	"definitions.AdditionalProperties.properties.key.type": "string",
	"definitions.AdditionalProperties.properties.modified.format": "date-time",
	"definitions.AdditionalProperties.properties.modified.type": "string",
	"definitions.AdditionalProperties.properties.sourceSystemKey.type": "string",
	"definitions.AdditionalProperties.properties.value.type": "string",
	"definitions.AdditionalProperties.type": "object",
	"definitions.ApiVersionInfo.properties.assemblies.items.type": "string",
	"definitions.ApiVersionInfo.properties.assemblies.type": "array",
	"definitions.ApiVersionInfo.properties.label.type": "string",
	"definitions.ApiVersionInfo.properties.timestamp.format": "date-time",
	"definitions.ApiVersionInfo.properties.timestamp.type": "string",
	"definitions.ApiVersionInfo.properties.version.type": "string",
	"definitions.ApiVersionInfo.type": "object",
	"definitions.Bay.properties.bayCount.format": "int32",
	"definitions.Bay.properties.bayCount.type": "integer",
	"definitions.Bay.properties.bayType.type": "string",
	"definitions.Bay.properties.free.format": "int32",
	"definitions.Bay.properties.free.type": "integer",
	"definitions.Bay.properties.occupied.format": "int32",
	"definitions.Bay.properties.occupied.type": "integer",
	"definitions.Bay.type": "object",
	"definitions.BikePointOccupancy.description": "Bike point occupancy",
	"definitions.BikePointOccupancy.properties.bikesCount.description": "Total bike counts",
	"definitions.BikePointOccupancy.properties.bikesCount.format": "int32",
	"definitions.BikePointOccupancy.properties.bikesCount.type": "integer",
	"definitions.BikePointOccupancy.properties.emptyDocks.description": "Empty docks",
	"definitions.BikePointOccupancy.properties.emptyDocks.format": "int32",
	"definitions.BikePointOccupancy.properties.emptyDocks.type": "integer",
	"definitions.BikePointOccupancy.properties.id.description": "Id of the bike point such as BikePoints_1",
	"definitions.BikePointOccupancy.properties.id.type": "string",
	"definitions.BikePointOccupancy.properties.name.description": "Name / Common name of the bike point",
	"definitions.BikePointOccupancy.properties.name.type": "string",
	"definitions.BikePointOccupancy.properties.totalDocks.description": "Total docks available",
	"definitions.BikePointOccupancy.properties.totalDocks.format": "int32",
	"definitions.BikePointOccupancy.properties.totalDocks.type": "integer",
	"definitions.BikePointOccupancy.type": "object",
	"definitions.CarParkOccupancy.properties.bays.items.$ref": "#/definitions/Bay",
	"definitions.CarParkOccupancy.properties.bays.type": "array",
	"definitions.CarParkOccupancy.properties.carParkDetailsUrl.type": "string",
	"definitions.CarParkOccupancy.properties.id.type": "string",
	"definitions.CarParkOccupancy.properties.name.type": "string",
	"definitions.CarParkOccupancy.type": "object",
	"definitions.Casualty.properties.age.format": "int32",
	"definitions.Casualty.properties.age.type": "integer",
	"definitions.Casualty.properties.ageBand.type": "string",
	"definitions.Casualty.properties.class.type": "string",
	"definitions.Casualty.properties.mode.type": "string",
	"definitions.Casualty.properties.severity.type": "string",
	"definitions.Casualty.type": "object",
	"definitions.ChargeConnectorOccupancy.description": "",
	"definitions.ChargeConnectorOccupancy.properties.id.description": "",
	"definitions.ChargeConnectorOccupancy.properties.id.format": "int32",
	"definitions.ChargeConnectorOccupancy.properties.id.type": "integer",
	"definitions.ChargeConnectorOccupancy.properties.sourceSystemPlaceId.description": "",
	"definitions.ChargeConnectorOccupancy.properties.sourceSystemPlaceId.type": "string",
	"definitions.ChargeConnectorOccupancy.properties.status.description": "",
	"definitions.ChargeConnectorOccupancy.properties.status.type": "string",
	"definitions.ChargeConnectorOccupancy.type": "object",
	"definitions.Coordinate.properties.easting.format": "double",
	"definitions.Coordinate.properties.easting.type": "number",
	"definitions.Coordinate.properties.latitude.format": "double",
	"definitions.Coordinate.properties.latitude.type": "number",
	"definitions.Coordinate.properties.longitude.format": "double",
	"definitions.Coordinate.properties.longitude.type": "number",
	"definitions.Coordinate.properties.northing.format": "double",
	"definitions.Coordinate.properties.northing.type": "number",
	"definitions.Coordinate.properties.xCoord.format": "int32",
	"definitions.Coordinate.properties.xCoord.type": "integer",
	"definitions.Coordinate.properties.yCoord.format": "int32",
	"definitions.Coordinate.properties.yCoord.type": "integer",
	"definitions.Coordinate.type": "object",
	"definitions.Crowding.properties.passengerFlows.description": "Busiest times at a station (static information)",
	"definitions.Crowding.properties.passengerFlows.items.$ref": "#/definitions/PassengerFlow",
	"definitions.Crowding.properties.passengerFlows.type": "array",
	"definitions.Crowding.properties.trainLoadings.description": "Train Loading on a scale 1-6, 1 being \"Very quiet\" and 6 being \"Exceptionally busy\" (static information)",
	"definitions.Crowding.properties.trainLoadings.items.$ref": "#/definitions/TrainLoading",
	"definitions.Crowding.properties.trainLoadings.type": "array",
	"definitions.Crowding.type": "object",
	"definitions.CycleSuperhighway.properties.geography.$ref": "#/definitions/DbGeography",
	"definitions.CycleSuperhighway.properties.geography.description": "A LineString or MultiLineString that forms the route of the highway",
	"definitions.CycleSuperhighway.properties.id.description": "The Id",
	"definitions.CycleSuperhighway.properties.id.type": "string",
	"definitions.CycleSuperhighway.properties.label.description": "The long label to show on maps when zoomed in",
	"definitions.CycleSuperhighway.properties.label.type": "string",
	"definitions.CycleSuperhighway.properties.labelShort.description": "The short label to show on maps",
	"definitions.CycleSuperhighway.properties.labelShort.type": "string",
	"definitions.CycleSuperhighway.properties.modified.description": "When the data was last updated",
	"definitions.CycleSuperhighway.properties.modified.format": "date-time",
	"definitions.CycleSuperhighway.properties.modified.type": "string",
	"definitions.CycleSuperhighway.properties.segmented.description": "True if the route is split into segments",
	"definitions.CycleSuperhighway.properties.segmented.type": "boolean",
	"definitions.CycleSuperhighway.type": "object",
	"definitions.DateRange.properties.endDate.format": "date-time",
	"definitions.DateRange.properties.endDate.type": "string",
	"definitions.DateRange.properties.startDate.format": "date-time",
	"definitions.DateRange.properties.startDate.type": "string",
	"definitions.DateRange.type": "object",
	"definitions.DateRangeNullable.properties.endDate.format": "date-time",
	"definitions.DateRangeNullable.properties.endDate.type": "string",
	"definitions.DateRangeNullable.properties.startDate.format": "date-time",
	"definitions.DateRangeNullable.properties.startDate.type": "string",
	"definitions.DateRangeNullable.type": "object",
	"definitions.DbGeography.properties.geography.$ref": "#/definitions/DbGeographyWellKnownValue",
	"definitions.DbGeography.type": "object",
	"definitions.DbGeographyWellKnownValue.properties.coordinateSystemId.format": "int32",
	"definitions.DbGeographyWellKnownValue.properties.coordinateSystemId.type": "integer",
	"definitions.DbGeographyWellKnownValue.properties.wellKnownBinary.format": "byte",
	"definitions.DbGeographyWellKnownValue.properties.wellKnownBinary.type": "string",
	"definitions.DbGeographyWellKnownValue.properties.wellKnownText.type": "string",
	"definitions.DbGeographyWellKnownValue.type": "object",
	"definitions.Disambiguation.properties.disambiguationOptions.items.$ref": "#/definitions/DisambiguationOption",
	"definitions.Disambiguation.properties.disambiguationOptions.type": "array",
	"definitions.Disambiguation.type": "object",
	"definitions.DisambiguationOption.properties.description.type": "string",
	"definitions.DisambiguationOption.properties.uri.type": "string",
	"definitions.DisambiguationOption.type": "object",
	"definitions.DisruptedPoint.properties.additionalInformation.type": "string",
	"definitions.DisruptedPoint.properties.appearance.type": "string",
	"definitions.DisruptedPoint.properties.atcoCode.type": "string",
	"definitions.DisruptedPoint.properties.commonName.type": "string",
	"definitions.DisruptedPoint.properties.description.type": "string",
	"definitions.DisruptedPoint.properties.fromDate.format": "date-time",
	"definitions.DisruptedPoint.properties.fromDate.type": "string",
	"definitions.DisruptedPoint.properties.mode.type": "string",
	"definitions.DisruptedPoint.properties.stationAtcoCode.type": "string",
	"definitions.DisruptedPoint.properties.toDate.format": "date-time",
	"definitions.DisruptedPoint.properties.toDate.type": "string",
	"definitions.DisruptedPoint.properties.type.type": "string",
	"definitions.DisruptedPoint.type": "object",
	"definitions.Disruption.description": "Represents a disruption to a route within the transport network.",
	"definitions.Disruption.properties.additionalInfo.description": "Gets or sets the additionaInfo of this disruption.",
	"definitions.Disruption.properties.additionalInfo.type": "string",
	"definitions.Disruption.properties.affectedRoutes.description": "Gets or sets the routes affected by this disruption",
	"definitions.Disruption.properties.affectedRoutes.items.$ref": "#/definitions/RouteSection",
	"definitions.Disruption.properties.affectedRoutes.type": "array",
	"definitions.Disruption.properties.affectedStops.description": "Gets or sets the stops affected by this disruption",
	"definitions.Disruption.properties.affectedStops.items.$ref": "#/definitions/StopPoint",
	"definitions.Disruption.properties.affectedStops.type": "array",
	"definitions.Disruption.properties.category.description": "Gets or sets the category of this dispruption.",
	"definitions.Disruption.properties.category.enum.length": 7,
	"definitions.Disruption.properties.category.enum[0]": "Undefined",
	"definitions.Disruption.properties.category.enum[1]": "RealTime",
	"definitions.Disruption.properties.category.enum[2]": "PlannedWork",
	"definitions.Disruption.properties.category.enum[3]": "Information",
	"definitions.Disruption.properties.category.enum[4]": "Event",
	"definitions.Disruption.properties.category.enum[5]": "Crowding",
	"definitions.Disruption.properties.category.enum[6]": "StatusAlert",
	"definitions.Disruption.properties.category.type": "string",
	"definitions.Disruption.properties.categoryDescription.description": "Gets or sets the description of the category.",
	"definitions.Disruption.properties.categoryDescription.type": "string",
	"definitions.Disruption.properties.closureText.type": "string",
	"definitions.Disruption.properties.created.description": "Gets or sets the date/time when this disruption was created.",
	"definitions.Disruption.properties.created.format": "date-time",
	"definitions.Disruption.properties.created.type": "string",
	"definitions.Disruption.properties.description.description": "Gets or sets the description of this disruption.",
	"definitions.Disruption.properties.description.type": "string",
	"definitions.Disruption.properties.isBlocking.type": "boolean",
	"definitions.Disruption.properties.isWholeLine.type": "boolean",
	"definitions.Disruption.properties.lastUpdate.description": "Gets or sets the date/time when this disruption was last updated.",
	"definitions.Disruption.properties.lastUpdate.format": "date-time",
	"definitions.Disruption.properties.lastUpdate.type": "string",
	"definitions.Disruption.properties.type.description": "Gets or sets the disruption type of this dispruption.",
	"definitions.Disruption.properties.type.type": "string",
	"definitions.Disruption.type": "object",
	"definitions.EmissionsSurchargeVehicle.description": "",
	"definitions.EmissionsSurchargeVehicle.properties.colour.type": "string",
	"definitions.EmissionsSurchargeVehicle.properties.compliance.enum.length": 3,
	"definitions.EmissionsSurchargeVehicle.properties.compliance.enum[0]": "NotCompliant",
	"definitions.EmissionsSurchargeVehicle.properties.compliance.enum[1]": "Compliant",
	"definitions.EmissionsSurchargeVehicle.properties.compliance.enum[2]": "Exempt",
	"definitions.EmissionsSurchargeVehicle.properties.compliance.type": "string",
	"definitions.EmissionsSurchargeVehicle.properties.make.type": "string",
	"definitions.EmissionsSurchargeVehicle.properties.model.type": "string",
	"definitions.EmissionsSurchargeVehicle.properties.type.type": "string",
	"definitions.EmissionsSurchargeVehicle.properties.vrm.type": "string",
	"definitions.EmissionsSurchargeVehicle.type": "object",
	"definitions.Fare.properties.cap.format": "double",
	"definitions.Fare.properties.cap.type": "number",
	"definitions.Fare.properties.cost.type": "string",
	"definitions.Fare.properties.description.type": "string",
	"definitions.Fare.properties.id.format": "int32",
	"definitions.Fare.properties.id.type": "integer",
	"definitions.Fare.properties.mode.type": "string",
	"definitions.Fare.properties.passengerType.type": "string",
	"definitions.Fare.properties.ticketTime.type": "string",
	"definitions.Fare.properties.ticketType.type": "string",
	"definitions.Fare.properties.validFrom.format": "date-time",
	"definitions.Fare.properties.validFrom.type": "string",
	"definitions.Fare.properties.validUntil.format": "date-time",
	"definitions.Fare.properties.validUntil.type": "string",
	"definitions.Fare.properties.zone.type": "string",
	"definitions.Fare.type": "object",
	"definitions.FareBounds.properties.description.type": "string",
	"definitions.FareBounds.properties.displayName.type": "string",
	"definitions.FareBounds.properties.displayOrder.format": "int32",
	"definitions.FareBounds.properties.displayOrder.type": "integer",
	"definitions.FareBounds.properties.from.type": "string",
	"definitions.FareBounds.properties.id.format": "int32",
	"definitions.FareBounds.properties.id.type": "integer",
	"definitions.FareBounds.properties.isPopularFare.type": "boolean",
	"definitions.FareBounds.properties.isPopularTravelCard.type": "boolean",
	"definitions.FareBounds.properties.isTour.type": "boolean",
	"definitions.FareBounds.properties.messages.items.$ref": "#/definitions/Message",
	"definitions.FareBounds.properties.messages.type": "array",
	"definitions.FareBounds.properties.operator.type": "string",
	"definitions.FareBounds.properties.routeCode.type": "string",
	"definitions.FareBounds.properties.to.type": "string",
	"definitions.FareBounds.properties.via.type": "string",
	"definitions.FareBounds.type": "object",
	"definitions.FareDetails.properties.boundsId.format": "int32",
	"definitions.FareDetails.properties.boundsId.type": "integer",
	"definitions.FareDetails.properties.displayName.type": "string",
	"definitions.FareDetails.properties.displayOrder.format": "int32",
	"definitions.FareDetails.properties.displayOrder.type": "integer",
	"definitions.FareDetails.properties.endDate.format": "date-time",
	"definitions.FareDetails.properties.endDate.type": "string",
	"definitions.FareDetails.properties.from.type": "string",
	"definitions.FareDetails.properties.fromStation.type": "string",
	"definitions.FareDetails.properties.isTour.type": "boolean",
	"definitions.FareDetails.properties.messages.items.$ref": "#/definitions/Message",
	"definitions.FareDetails.properties.messages.type": "array",
	"definitions.FareDetails.properties.mode.type": "string",
	"definitions.FareDetails.properties.operator.type": "string",
	"definitions.FareDetails.properties.passengerType.type": "string",
	"definitions.FareDetails.properties.routeCode.type": "string",
	"definitions.FareDetails.properties.routeDescription.type": "string",
	"definitions.FareDetails.properties.specialFare.type": "boolean",
	"definitions.FareDetails.properties.startDate.format": "date-time",
	"definitions.FareDetails.properties.startDate.type": "string",
	"definitions.FareDetails.properties.throughFare.type": "boolean",
	"definitions.FareDetails.properties.ticketsAvailable.items.$ref": "#/definitions/Ticket",
	"definitions.FareDetails.properties.ticketsAvailable.type": "array",
	"definitions.FareDetails.properties.to.type": "string",
	"definitions.FareDetails.properties.toStation.type": "string",
	"definitions.FareDetails.properties.validatorInformation.type": "string",
	"definitions.FareDetails.properties.via.type": "string",
	"definitions.FareDetails.type": "object",
	"definitions.FaresMode.properties.description.type": "string",
	"definitions.FaresMode.properties.id.format": "int32",
	"definitions.FaresMode.properties.id.type": "integer",
	"definitions.FaresMode.properties.name.type": "string",
	"definitions.FaresMode.type": "object",
	"definitions.FaresPeriod.properties.endDate.format": "date-time",
	"definitions.FaresPeriod.properties.endDate.type": "string",
	"definitions.FaresPeriod.properties.id.format": "int32",
	"definitions.FaresPeriod.properties.id.type": "integer",
	"definitions.FaresPeriod.properties.isFuture.type": "boolean",
	"definitions.FaresPeriod.properties.startDate.format": "date-time",
	"definitions.FaresPeriod.properties.startDate.type": "string",
	"definitions.FaresPeriod.properties.viewableDate.format": "date-time",
	"definitions.FaresPeriod.properties.viewableDate.type": "string",
	"definitions.FaresPeriod.type": "object",
	"definitions.FaresSection.properties.header.type": "string",
	"definitions.FaresSection.properties.index.format": "int32",
	"definitions.FaresSection.properties.index.type": "integer",
	"definitions.FaresSection.properties.messages.items.$ref": "#/definitions/Message",
	"definitions.FaresSection.properties.messages.type": "array",
	"definitions.FaresSection.properties.rows.items.$ref": "#/definitions/FareDetails",
	"definitions.FaresSection.properties.rows.type": "array",
	"definitions.FaresSection.type": "object",
	"definitions.GeoCodeSearchMatch.properties.address.description": "A string describing the formatted address of the place. Adds additional context to the place's Name.",
	"definitions.GeoCodeSearchMatch.properties.address.type": "string",
	"definitions.GeoCodeSearchMatch.properties.id.type": "string",
	"definitions.GeoCodeSearchMatch.properties.lat.format": "double",
	"definitions.GeoCodeSearchMatch.properties.lat.type": "number",
	"definitions.GeoCodeSearchMatch.properties.lon.format": "double",
	"definitions.GeoCodeSearchMatch.properties.lon.type": "number",
	"definitions.GeoCodeSearchMatch.properties.name.type": "string",
	"definitions.GeoCodeSearchMatch.properties.types.description": "The type of the place e.g. \"street_address\"",
	"definitions.GeoCodeSearchMatch.properties.types.items.type": "string",
	"definitions.GeoCodeSearchMatch.properties.types.type": "array",
	"definitions.GeoCodeSearchMatch.properties.url.type": "string",
	"definitions.GeoCodeSearchMatch.type": "object",
	"definitions.GeoPoint.properties.lat.format": "double",
	"definitions.GeoPoint.properties.lat.type": "number",
	"definitions.GeoPoint.properties.lon.format": "double",
	"definitions.GeoPoint.properties.lon.type": "number",
	"definitions.GeoPoint.required.length": 2,
	"definitions.GeoPoint.required[0]": "lat",
	"definitions.GeoPoint.required[1]": "lon",
	"definitions.GeoPoint.type": "object",
	"definitions.GeoPointBBox.properties.neLat.format": "double",
	"definitions.GeoPointBBox.properties.neLat.type": "number",
	"definitions.GeoPointBBox.properties.neLon.format": "double",
	"definitions.GeoPointBBox.properties.neLon.type": "number",
	"definitions.GeoPointBBox.properties.swLat.format": "double",
	"definitions.GeoPointBBox.properties.swLat.type": "number",
	"definitions.GeoPointBBox.properties.swLon.format": "double",
	"definitions.GeoPointBBox.properties.swLon.type": "number",
	"definitions.GeoPointBBox.required.length": 4,
	"definitions.GeoPointBBox.required[0]": "swLat",
	"definitions.GeoPointBBox.required[1]": "swLon",
	"definitions.GeoPointBBox.required[2]": "neLat",
	"definitions.GeoPointBBox.required[3]": "neLon",
	"definitions.GeoPointBBox.type": "object",
	"definitions.Identifier.properties.crowding.$ref": "#/definitions/Crowding",
	"definitions.Identifier.properties.fullName.type": "string",
	"definitions.Identifier.properties.id.type": "string",
	"definitions.Identifier.properties.name.type": "string",
	"definitions.Identifier.properties.type.type": "string",
	"definitions.Identifier.properties.uri.type": "string",
	"definitions.Identifier.type": "object",
	"definitions.Instruction.properties.detailed.type": "string",
	"definitions.Instruction.properties.steps.items.$ref": "#/definitions/InstructionStep",
	"definitions.Instruction.properties.steps.type": "array",
	"definitions.Instruction.properties.summary.type": "string",
	"definitions.Instruction.type": "object",
	"definitions.InstructionStep.properties.cumulativeDistance.format": "int32",
	"definitions.InstructionStep.properties.cumulativeDistance.type": "integer",
	"definitions.InstructionStep.properties.cumulativeTravelTime.format": "int32",
	"definitions.InstructionStep.properties.cumulativeTravelTime.type": "integer",
	"definitions.InstructionStep.properties.description.type": "string",
	"definitions.InstructionStep.properties.descriptionHeading.type": "string",
	"definitions.InstructionStep.properties.distance.format": "int32",
	"definitions.InstructionStep.properties.distance.type": "integer",
	"definitions.InstructionStep.properties.latitude.format": "double",
	"definitions.InstructionStep.properties.latitude.type": "number",
	"definitions.InstructionStep.properties.longitude.format": "double",
	"definitions.InstructionStep.properties.longitude.type": "number",
	"definitions.InstructionStep.properties.pathAttribute.$ref": "#/definitions/PathAttribute",
	"definitions.InstructionStep.properties.skyDirection.format": "int32",
	"definitions.InstructionStep.properties.skyDirection.type": "integer",
	"definitions.InstructionStep.properties.skyDirectionDescription.enum.length": 8,
	"definitions.InstructionStep.properties.skyDirectionDescription.enum[0]": "North",
	"definitions.InstructionStep.properties.skyDirectionDescription.enum[1]": "NorthEast",
	"definitions.InstructionStep.properties.skyDirectionDescription.enum[2]": "East",
	"definitions.InstructionStep.properties.skyDirectionDescription.enum[3]": "SouthEast",
	"definitions.InstructionStep.properties.skyDirectionDescription.enum[4]": "South",
	"definitions.InstructionStep.properties.skyDirectionDescription.enum[5]": "SouthWest",
	"definitions.InstructionStep.properties.skyDirectionDescription.enum[6]": "West",
	"definitions.InstructionStep.properties.skyDirectionDescription.enum[7]": "NorthWest",
	"definitions.InstructionStep.properties.skyDirectionDescription.type": "string",
	"definitions.InstructionStep.properties.streetName.type": "string",
	"definitions.InstructionStep.properties.trackType.enum.length": 7,
	"definitions.InstructionStep.properties.trackType.enum[0]": "CycleSuperHighway",
	"definitions.InstructionStep.properties.trackType.enum[1]": "CanalTowpath",
	"definitions.InstructionStep.properties.trackType.enum[2]": "QuietRoad",
	"definitions.InstructionStep.properties.trackType.enum[3]": "ProvisionForCyclists",
	"definitions.InstructionStep.properties.trackType.enum[4]": "BusyRoads",
	"definitions.InstructionStep.properties.trackType.enum[5]": "None",
	"definitions.InstructionStep.properties.trackType.enum[6]": "PushBike",
	"definitions.InstructionStep.properties.trackType.type": "string",
	"definitions.InstructionStep.properties.turnDirection.type": "string",
	"definitions.InstructionStep.type": "object",
	"definitions.Interval.properties.stopId.type": "string",
	"definitions.Interval.properties.timeToArrival.format": "double",
	"definitions.Interval.properties.timeToArrival.type": "number",
	"definitions.Interval.type": "object",
	"definitions.ItineraryResult.description": "A DTO representing a list of possible journeys.",
	"definitions.ItineraryResult.properties.cycleHireDockingStationData.$ref": "#/definitions/JourneyPlannerCycleHireDockingStationData",
	"definitions.ItineraryResult.properties.journeyVector.$ref": "#/definitions/JourneyVector",
	"definitions.ItineraryResult.properties.journeys.items.$ref": "#/definitions/Journey",
	"definitions.ItineraryResult.properties.journeys.type": "array",
	"definitions.ItineraryResult.properties.lines.items.$ref": "#/definitions/Line",
	"definitions.ItineraryResult.properties.lines.type": "array",
	"definitions.ItineraryResult.properties.recommendedMaxAgeMinutes.format": "int32",
	"definitions.ItineraryResult.properties.recommendedMaxAgeMinutes.type": "integer",
	"definitions.ItineraryResult.properties.searchCriteria.$ref": "#/definitions/SearchCriteria",
	"definitions.ItineraryResult.properties.stopMessages.items.type": "string",
	"definitions.ItineraryResult.properties.stopMessages.type": "array",
	"definitions.ItineraryResult.type": "object",
	"definitions.Journey.description": "Object that represents an end to end journey (see schematic).",
	"definitions.Journey.properties.arrivalDateTime.format": "date-time",
	"definitions.Journey.properties.arrivalDateTime.type": "string",
	"definitions.Journey.properties.duration.format": "int32",
	"definitions.Journey.properties.duration.type": "integer",
	"definitions.Journey.properties.legs.items.$ref": "#/definitions/Leg",
	"definitions.Journey.properties.legs.type": "array",
	"definitions.Journey.properties.startDateTime.format": "date-time",
	"definitions.Journey.properties.startDateTime.type": "string",
	"definitions.Journey.type": "object",
	"definitions.JourneyPlannerCycleHireDockingStationData.properties.destinationId.type": "string",
	"definitions.JourneyPlannerCycleHireDockingStationData.properties.destinationNumberOfBikes.format": "int32",
	"definitions.JourneyPlannerCycleHireDockingStationData.properties.destinationNumberOfBikes.type": "integer",
	"definitions.JourneyPlannerCycleHireDockingStationData.properties.destinationNumberOfEmptySlots.format": "int32",
	"definitions.JourneyPlannerCycleHireDockingStationData.properties.destinationNumberOfEmptySlots.type": "integer",
	"definitions.JourneyPlannerCycleHireDockingStationData.properties.originId.type": "string",
	"definitions.JourneyPlannerCycleHireDockingStationData.properties.originNumberOfBikes.format": "int32",
	"definitions.JourneyPlannerCycleHireDockingStationData.properties.originNumberOfBikes.type": "integer",
	"definitions.JourneyPlannerCycleHireDockingStationData.properties.originNumberOfEmptySlots.format": "int32",
	"definitions.JourneyPlannerCycleHireDockingStationData.properties.originNumberOfEmptySlots.type": "integer",
	"definitions.JourneyPlannerCycleHireDockingStationData.type": "object",
	"definitions.JourneyVector.properties.from.type": "string",
	"definitions.JourneyVector.properties.to.type": "string",
	"definitions.JourneyVector.properties.uri.type": "string",
	"definitions.JourneyVector.properties.via.type": "string",
	"definitions.JourneyVector.type": "object",
	"definitions.JpElevation.properties.distance.format": "int32",
	"definitions.JpElevation.properties.distance.type": "integer",
	"definitions.JpElevation.properties.endLat.format": "double",
	"definitions.JpElevation.properties.endLat.type": "number",
	"definitions.JpElevation.properties.endLon.format": "double",
	"definitions.JpElevation.properties.endLon.type": "number",
	"definitions.JpElevation.properties.gradient.format": "double",
	"definitions.JpElevation.properties.gradient.type": "number",
	"definitions.JpElevation.properties.heightFromPreviousPoint.format": "int32",
	"definitions.JpElevation.properties.heightFromPreviousPoint.type": "integer",
	"definitions.JpElevation.properties.startLat.format": "double",
	"definitions.JpElevation.properties.startLat.type": "number",
	"definitions.JpElevation.properties.startLon.format": "double",
	"definitions.JpElevation.properties.startLon.type": "number",
	"definitions.JpElevation.type": "object",
	"definitions.KnownJourney.properties.hour.type": "string",
	"definitions.KnownJourney.properties.intervalId.format": "int32",
	"definitions.KnownJourney.properties.intervalId.type": "integer",
	"definitions.KnownJourney.properties.minute.type": "string",
	"definitions.KnownJourney.type": "object",
	"definitions.Leg.properties.arrivalPoint.$ref": "#/definitions/Point",
	"definitions.Leg.properties.arrivalTime.format": "date-time",
	"definitions.Leg.properties.arrivalTime.type": "string",
	"definitions.Leg.properties.departurePoint.$ref": "#/definitions/Point",
	"definitions.Leg.properties.departureTime.format": "date-time",
	"definitions.Leg.properties.departureTime.type": "string",
	"definitions.Leg.properties.disruptions.items.$ref": "#/definitions/Disruption",
	"definitions.Leg.properties.disruptions.type": "array",
	"definitions.Leg.properties.distance.format": "double",
	"definitions.Leg.properties.distance.type": "number",
	"definitions.Leg.properties.duration.format": "int32",
	"definitions.Leg.properties.duration.type": "integer",
	"definitions.Leg.properties.hasFixedLocations.readOnly": true,
	"definitions.Leg.properties.hasFixedLocations.type": "boolean",
	"definitions.Leg.properties.instruction.$ref": "#/definitions/Instruction",
	"definitions.Leg.properties.instruction.description": "Describes the action the user need to take for this section, E.g. \"walk to the\r\n            district line\"",
	"definitions.Leg.properties.isDisrupted.readOnly": true,
	"definitions.Leg.properties.isDisrupted.type": "boolean",
	"definitions.Leg.properties.mode.$ref": "#/definitions/Identifier",
	"definitions.Leg.properties.obstacles.items.$ref": "#/definitions/Obstacle",
	"definitions.Leg.properties.obstacles.type": "array",
	"definitions.Leg.properties.path.$ref": "#/definitions/Path",
	"definitions.Leg.properties.plannedWorks.items.$ref": "#/definitions/PlannedWork",
	"definitions.Leg.properties.plannedWorks.type": "array",
	"definitions.Leg.properties.routeOptions.items.$ref": "#/definitions/RouteOption",
	"definitions.Leg.properties.routeOptions.type": "array",
	"definitions.Leg.properties.speed.type": "string",
	"definitions.Leg.type": "object",
	"definitions.Line.properties.created.format": "date-time",
	"definitions.Line.properties.created.type": "string",
	"definitions.Line.properties.crowding.$ref": "#/definitions/Crowding",
	"definitions.Line.properties.disruptions.items.$ref": "#/definitions/Disruption",
	"definitions.Line.properties.disruptions.type": "array",
	"definitions.Line.properties.id.type": "string",
	"definitions.Line.properties.lineStatuses.items.$ref": "#/definitions/LineStatus",
	"definitions.Line.properties.lineStatuses.type": "array",
	"definitions.Line.properties.modeName.type": "string",
	"definitions.Line.properties.modified.format": "date-time",
	"definitions.Line.properties.modified.type": "string",
	"definitions.Line.properties.name.type": "string",
	"definitions.Line.properties.routeSections.items.$ref": "#/definitions/MatchedRoute",
	"definitions.Line.properties.routeSections.type": "array",
	"definitions.Line.properties.serviceTypes.items.$ref": "#/definitions/LineServiceTypeInfo",
	"definitions.Line.properties.serviceTypes.type": "array",
	"definitions.Line.type": "object",
	"definitions.LineGroup.properties.lineIdentifier.items.type": "string",
	"definitions.LineGroup.properties.lineIdentifier.type": "array",
	"definitions.LineGroup.properties.naptanIdReference.type": "string",
	"definitions.LineGroup.properties.stationAtcoCode.type": "string",
	"definitions.LineGroup.type": "object",
	"definitions.LineModeGroup.properties.lineIdentifier.items.type": "string",
	"definitions.LineModeGroup.properties.lineIdentifier.type": "array",
	"definitions.LineModeGroup.properties.modeName.type": "string",
	"definitions.LineModeGroup.type": "object",
	"definitions.LineRouteSection.properties.destination.type": "string",
	"definitions.LineRouteSection.properties.direction.type": "string",
	"definitions.LineRouteSection.properties.fromStation.type": "string",
	"definitions.LineRouteSection.properties.routeId.format": "int32",
	"definitions.LineRouteSection.properties.routeId.type": "integer",
	"definitions.LineRouteSection.properties.serviceType.type": "string",
	"definitions.LineRouteSection.properties.toStation.type": "string",
	"definitions.LineRouteSection.properties.vehicleDestinationText.type": "string",
	"definitions.LineRouteSection.type": "object",
	"definitions.LineServiceType.properties.lineName.type": "string",
	"definitions.LineServiceType.properties.lineSpecificServiceTypes.items.$ref": "#/definitions/LineSpecificServiceType",
	"definitions.LineServiceType.properties.lineSpecificServiceTypes.type": "array",
	"definitions.LineServiceType.type": "object",
	"definitions.LineServiceTypeInfo.properties.name.type": "string",
	"definitions.LineServiceTypeInfo.properties.uri.type": "string",
	"definitions.LineServiceTypeInfo.type": "object",
	"definitions.LineSpecificServiceType.properties.serviceType.$ref": "#/definitions/LineServiceTypeInfo",
	"definitions.LineSpecificServiceType.properties.stopServesServiceType.type": "boolean",
	"definitions.LineSpecificServiceType.type": "object",
	"definitions.LineStatus.properties.created.format": "date-time",
	"definitions.LineStatus.properties.created.type": "string",
	"definitions.LineStatus.properties.disruption.$ref": "#/definitions/Disruption",
	"definitions.LineStatus.properties.id.format": "int32",
	"definitions.LineStatus.properties.id.type": "integer",
	"definitions.LineStatus.properties.lineId.type": "string",
	"definitions.LineStatus.properties.modified.format": "date-time",
	"definitions.LineStatus.properties.modified.type": "string",
	"definitions.LineStatus.properties.reason.type": "string",
	"definitions.LineStatus.properties.statusSeverity.format": "int32",
	"definitions.LineStatus.properties.statusSeverity.type": "integer",
	"definitions.LineStatus.properties.statusSeverityDescription.type": "string",
	"definitions.LineStatus.properties.validityPeriods.items.$ref": "#/definitions/ValidityPeriod",
	"definitions.LineStatus.properties.validityPeriods.type": "array",
	"definitions.LineStatus.type": "object",
	"definitions.MatchedRoute.properties.destination.description": "eg: Destination",
	"definitions.MatchedRoute.properties.destination.type": "string",
	"definitions.MatchedRoute.properties.destinationName.description": "eg: Destination Name",
	"definitions.MatchedRoute.properties.destinationName.type": "string",
	"definitions.MatchedRoute.properties.direction.description": "eg: N or S or I or O",
	"definitions.MatchedRoute.properties.direction.type": "string",
	"definitions.MatchedRoute.properties.name.description": "Name such as \"72\"",
	"definitions.MatchedRoute.properties.name.type": "string",
	"definitions.MatchedRoute.properties.originationName.description": "eg: Origination Name",
	"definitions.MatchedRoute.properties.originationName.type": "string",
	"definitions.MatchedRoute.properties.originator.description": "eg: Origination",
	"definitions.MatchedRoute.properties.originator.type": "string",
	"definitions.MatchedRoute.properties.routeCode.description": "The route code",
	"definitions.MatchedRoute.properties.routeCode.type": "string",
	"definitions.MatchedRoute.properties.serviceType.description": "eg: Regular, Night",
	"definitions.MatchedRoute.properties.serviceType.type": "string",
	"definitions.MatchedRoute.type": "object",
	"definitions.MatchedRouteSections.properties.id.format": "int32",
	"definitions.MatchedRouteSections.properties.id.type": "integer",
	"definitions.MatchedRouteSections.type": "object",
	"definitions.MatchedStop.properties.accessibilitySummary.type": "string",
	"definitions.MatchedStop.properties.direction.type": "string",
	"definitions.MatchedStop.properties.hasDisruption.type": "boolean",
	"definitions.MatchedStop.properties.icsId.type": "string",
	"definitions.MatchedStop.properties.id.type": "string",
	"definitions.MatchedStop.properties.lat.format": "double",
	"definitions.MatchedStop.properties.lat.type": "number",
	"definitions.MatchedStop.properties.lines.items.$ref": "#/definitions/Identifier",
	"definitions.MatchedStop.properties.lines.type": "array",
	"definitions.MatchedStop.properties.lon.format": "double",
	"definitions.MatchedStop.properties.lon.type": "number",
	"definitions.MatchedStop.properties.modes.items.type": "string",
	"definitions.MatchedStop.properties.modes.type": "array",
	"definitions.MatchedStop.properties.name.type": "string",
	"definitions.MatchedStop.properties.parentId.type": "string",
	"definitions.MatchedStop.properties.routeId.format": "int32",
	"definitions.MatchedStop.properties.routeId.type": "integer",
	"definitions.MatchedStop.properties.stationId.type": "string",
	"definitions.MatchedStop.properties.status.type": "boolean",
	"definitions.MatchedStop.properties.stopLetter.type": "string",
	"definitions.MatchedStop.properties.stopType.type": "string",
	"definitions.MatchedStop.properties.topMostParentId.type": "string",
	"definitions.MatchedStop.properties.towards.type": "string",
	"definitions.MatchedStop.properties.url.type": "string",
	"definitions.MatchedStop.properties.zone.type": "string",
	"definitions.MatchedStop.type": "object",
	"definitions.Message.properties.bulletOrder.format": "int32",
	"definitions.Message.properties.bulletOrder.type": "integer",
	"definitions.Message.properties.header.type": "boolean",
	"definitions.Message.properties.linkText.type": "string",
	"definitions.Message.properties.messageText.type": "string",
	"definitions.Message.properties.url.type": "string",
	"definitions.Message.type": "object",
	"definitions.Mode.properties.isFarePaying.type": "boolean",
	"definitions.Mode.properties.isScheduledService.type": "boolean",
	"definitions.Mode.properties.isTflService.type": "boolean",
	"definitions.Mode.properties.modeName.type": "string",
	"definitions.Mode.type": "object",
	"definitions.Object.type": "object",
	"definitions.Obstacle.properties.incline.type": "string",
	"definitions.Obstacle.properties.position.type": "string",
	"definitions.Obstacle.properties.stopId.format": "int32",
	"definitions.Obstacle.properties.stopId.type": "integer",
	"definitions.Obstacle.properties.type.type": "string",
	"definitions.Obstacle.type": "object",
	"definitions.OrderedRoute.properties.name.type": "string",
	"definitions.OrderedRoute.properties.naptanIds.items.type": "string",
	"definitions.OrderedRoute.properties.naptanIds.type": "array",
	"definitions.OrderedRoute.properties.serviceType.type": "string",
	"definitions.OrderedRoute.type": "object",
	"definitions.PassengerFlow.properties.timeSlice.description": "Time in 24hr format with 15 minute intervals e.g. 0500-0515, 0515-0530 etc.",
	"definitions.PassengerFlow.properties.timeSlice.type": "string",
	"definitions.PassengerFlow.properties.value.description": "Count of passenger flow towards a platform",
	"definitions.PassengerFlow.properties.value.format": "int32",
	"definitions.PassengerFlow.properties.value.type": "integer",
	"definitions.PassengerFlow.type": "object",
	"definitions.PassengerType.properties.description.type": "string",
	"definitions.PassengerType.properties.displayName.type": "string",
	"definitions.PassengerType.properties.displayOrder.format": "int32",
	"definitions.PassengerType.properties.displayOrder.type": "integer",
	"definitions.PassengerType.properties.type.type": "string",
	"definitions.PassengerType.type": "object",
	"definitions.Path.properties.elevation.items.$ref": "#/definitions/JpElevation",
	"definitions.Path.properties.elevation.type": "array",
	"definitions.Path.properties.lineString.type": "string",
	"definitions.Path.properties.stopPoints.items.$ref": "#/definitions/Identifier",
	"definitions.Path.properties.stopPoints.type": "array",
	"definitions.Path.type": "object",
	"definitions.PathAttribute.properties.name.type": "string",
	"definitions.PathAttribute.properties.value.type": "string",
	"definitions.PathAttribute.type": "object",
	"definitions.Period.properties.frequency.$ref": "#/definitions/ServiceFrequency",
	"definitions.Period.properties.fromTime.$ref": "#/definitions/TwentyFourHourClockTime",
	"definitions.Period.properties.toTime.$ref": "#/definitions/TwentyFourHourClockTime",
	"definitions.Period.properties.type.enum.length": 4,
	"definitions.Period.properties.type.enum[0]": "Normal",
	"definitions.Period.properties.type.enum[1]": "FrequencyHours",
	"definitions.Period.properties.type.enum[2]": "FrequencyMinutes",
	"definitions.Period.properties.type.enum[3]": "Unknown",
	"definitions.Period.properties.type.type": "string",
	"definitions.Period.type": "object",
	"definitions.Place.properties.additionalProperties.description": "A bag of additional key/value pairs with extra information about this place.",
	"definitions.Place.properties.additionalProperties.items.$ref": "#/definitions/AdditionalProperties",
	"definitions.Place.properties.additionalProperties.type": "array",
	"definitions.Place.properties.children.items.$ref": "#/definitions/Place",
	"definitions.Place.properties.children.type": "array",
	"definitions.Place.properties.childrenUrls.items.type": "string",
	"definitions.Place.properties.childrenUrls.type": "array",
	"definitions.Place.properties.commonName.description": "A human readable name.",
	"definitions.Place.properties.commonName.type": "string",
	"definitions.Place.properties.distance.description": "The distance of the place from its search point, if this is the result\r\n            of a geographical search, otherwise zero.",
	"definitions.Place.properties.distance.format": "double",
	"definitions.Place.properties.distance.type": "number",
	"definitions.Place.properties.id.description": "A unique identifier.",
	"definitions.Place.properties.id.type": "string",
	"definitions.Place.properties.lat.description": "WGS84 latitude of the location.",
	"definitions.Place.properties.lat.format": "double",
	"definitions.Place.properties.lat.type": "number",
	"definitions.Place.properties.lon.description": "WGS84 longitude of the location.",
	"definitions.Place.properties.lon.format": "double",
	"definitions.Place.properties.lon.type": "number",
	"definitions.Place.properties.placeType.description": "The type of Place. See /Place/Meta/placeTypes for possible values.",
	"definitions.Place.properties.placeType.type": "string",
	"definitions.Place.properties.url.description": "The unique location of this resource.",
	"definitions.Place.properties.url.type": "string",
	"definitions.Place.type": "object",
	"definitions.PlaceCategory.properties.availableKeys.items.type": "string",
	"definitions.PlaceCategory.properties.availableKeys.type": "array",
	"definitions.PlaceCategory.properties.category.type": "string",
	"definitions.PlaceCategory.type": "object",
	"definitions.PlacePolygon.properties.commonName.type": "string",
	"definitions.PlacePolygon.properties.geoPoints.items.$ref": "#/definitions/GeoPoint",
	"definitions.PlacePolygon.properties.geoPoints.type": "array",
	"definitions.PlacePolygon.type": "object",
	"definitions.PlannedWork.properties.createdDateTime.format": "date-time",
	"definitions.PlannedWork.properties.createdDateTime.type": "string",
	"definitions.PlannedWork.properties.description.type": "string",
	"definitions.PlannedWork.properties.id.type": "string",
	"definitions.PlannedWork.properties.lastUpdateDateTime.format": "date-time",
	"definitions.PlannedWork.properties.lastUpdateDateTime.type": "string",
	"definitions.PlannedWork.type": "object",
	"definitions.Point.description": "Represents a point located at a latitude and longitude using the WGS84 co-ordinate system.",
	"definitions.Point.properties.lat.description": "WGS84 latitude of the location.",
	"definitions.Point.properties.lat.format": "double",
	"definitions.Point.properties.lat.type": "number",
	"definitions.Point.properties.lon.description": "WGS84 longitude of the location.",
	"definitions.Point.properties.lon.format": "double",
	"definitions.Point.properties.lon.type": "number",
	"definitions.Point.type": "object",
	"definitions.PostcodeInput.properties.postcode.pattern": "^(([gG][iI][rR] {0,}0[aA]{2})|((([a-pr-uwyzA-PR-UWYZ][a-hk-yA-HK-Y]?[0-9][0-9]?)|(([a-pr-uwyzA-PR-UWYZ][0-9][a-hjkstuwA-HJKSTUW])|([a-pr-uwyzA-PR-UWYZ][a-hk-yA-HK-Y][0-9][abehmnprv-yABEHMNPRV-Y]))) {0,}[0-9][abd-hjlnp-uw-zABD-HJLNP-UW-Z]{2}))$",
	"definitions.PostcodeInput.properties.postcode.type": "string",
	"definitions.PostcodeInput.type": "object",
	"definitions.Prediction.description": "DTO to capture the prediction details",
	"definitions.Prediction.properties.bearing.description": "Bearing (between 0 to 359)",
	"definitions.Prediction.properties.bearing.type": "string",
	"definitions.Prediction.properties.currentLocation.description": "The current location of the vehicle.",
	"definitions.Prediction.properties.currentLocation.type": "string",
	"definitions.Prediction.properties.destinationName.description": "Name of the destination",
	"definitions.Prediction.properties.destinationName.type": "string",
	"definitions.Prediction.properties.destinationNaptanId.description": "Naptan Identifier for the prediction's destination",
	"definitions.Prediction.properties.destinationNaptanId.type": "string",
	"definitions.Prediction.properties.direction.description": "Direction (unified to inbound/outbound)",
	"definitions.Prediction.properties.direction.type": "string",
	"definitions.Prediction.properties.expectedArrival.description": "The expected arrival time of the vehicle at the stop/station",
	"definitions.Prediction.properties.expectedArrival.format": "date-time",
	"definitions.Prediction.properties.expectedArrival.type": "string",
	"definitions.Prediction.properties.id.description": "The identitier for the prediction",
	"definitions.Prediction.properties.id.type": "string",
	"definitions.Prediction.properties.lineId.description": "Unique identifier for the Line",
	"definitions.Prediction.properties.lineId.type": "string",
	"definitions.Prediction.properties.lineName.description": "Line Name",
	"definitions.Prediction.properties.lineName.type": "string",
	"definitions.Prediction.properties.modeName.description": "The mode name of the station/line the prediction relates to",
	"definitions.Prediction.properties.modeName.type": "string",
	"definitions.Prediction.properties.naptanId.description": "Identifier for the prediction",
	"definitions.Prediction.properties.naptanId.type": "string",
	"definitions.Prediction.properties.operationType.description": "The type of the operation (1: is new or has been updated, 2: should be deleted from any client cache)",
	"definitions.Prediction.properties.operationType.format": "int32",
	"definitions.Prediction.properties.operationType.type": "integer",
	"definitions.Prediction.properties.platformName.description": "Platform name (for bus, this is the stop letter)",
	"definitions.Prediction.properties.platformName.type": "string",
	"definitions.Prediction.properties.stationName.description": "Station name",
	"definitions.Prediction.properties.stationName.type": "string",
	"definitions.Prediction.properties.timeToLive.description": "The expiry time for the prediction",
	"definitions.Prediction.properties.timeToLive.format": "date-time",
	"definitions.Prediction.properties.timeToLive.type": "string",
	"definitions.Prediction.properties.timeToStation.description": "Prediction of the Time to station in seconds",
	"definitions.Prediction.properties.timeToStation.format": "int32",
	"definitions.Prediction.properties.timeToStation.type": "integer",
	"definitions.Prediction.properties.timestamp.description": "Timestamp for when the prediction was inserted/modified (source column drives what objects are broadcast on each iteration)",
	"definitions.Prediction.properties.timestamp.format": "date-time",
	"definitions.Prediction.properties.timestamp.type": "string",
	"definitions.Prediction.properties.timing.$ref": "#/definitions/PredictionTiming",
	"definitions.Prediction.properties.timing.description": "Keep the original timestamp from MongoDb fo debugging purposes",
	"definitions.Prediction.properties.towards.description": "Routing information or other descriptive text about the path of the vehicle towards the destination",
	"definitions.Prediction.properties.towards.type": "string",
	"definitions.Prediction.properties.vehicleId.description": "The actual vehicle in transit (for train modes, the leading car of the rolling set)",
	"definitions.Prediction.properties.vehicleId.type": "string",
	"definitions.Prediction.type": "object",
	"definitions.PredictionTiming.properties.countdownServerAdjustment.type": "string",
	"definitions.PredictionTiming.properties.insert.format": "date-time",
	"definitions.PredictionTiming.properties.insert.type": "string",
	"definitions.PredictionTiming.properties.read.format": "date-time",
	"definitions.PredictionTiming.properties.read.type": "string",
	"definitions.PredictionTiming.properties.received.format": "date-time",
	"definitions.PredictionTiming.properties.received.type": "string",
	"definitions.PredictionTiming.properties.sent.format": "date-time",
	"definitions.PredictionTiming.properties.sent.type": "string",
	"definitions.PredictionTiming.properties.source.format": "date-time",
	"definitions.PredictionTiming.properties.source.type": "string",
	"definitions.PredictionTiming.type": "object",
	"definitions.Recommendation.properties.cost.type": "string",
	"definitions.Recommendation.properties.discountCard.type": "string",
	"definitions.Recommendation.properties.fareType.type": "string",
	"definitions.Recommendation.properties.gettingYourTicket.items.$ref": "#/definitions/Message",
	"definitions.Recommendation.properties.gettingYourTicket.type": "array",
	"definitions.Recommendation.properties.id.format": "int32",
	"definitions.Recommendation.properties.id.type": "integer",
	"definitions.Recommendation.properties.keyFeatures.items.$ref": "#/definitions/Message",
	"definitions.Recommendation.properties.keyFeatures.type": "array",
	"definitions.Recommendation.properties.notes.items.$ref": "#/definitions/Message",
	"definitions.Recommendation.properties.notes.type": "array",
	"definitions.Recommendation.properties.priceComparison.type": "string",
	"definitions.Recommendation.properties.priceDescription.type": "string",
	"definitions.Recommendation.properties.product.type": "string",
	"definitions.Recommendation.properties.productType.type": "string",
	"definitions.Recommendation.properties.rank.format": "int32",
	"definitions.Recommendation.properties.rank.type": "integer",
	"definitions.Recommendation.properties.recommendedTopUp.type": "string",
	"definitions.Recommendation.properties.rule.format": "int32",
	"definitions.Recommendation.properties.rule.type": "integer",
	"definitions.Recommendation.properties.singleFare.format": "double",
	"definitions.Recommendation.properties.singleFare.type": "number",
	"definitions.Recommendation.properties.ticketTime.type": "string",
	"definitions.Recommendation.properties.ticketType.type": "string",
	"definitions.Recommendation.properties.zones.type": "string",
	"definitions.Recommendation.type": "object",
	"definitions.RecommendationResponse.properties.recommendations.items.$ref": "#/definitions/Recommendation",
	"definitions.RecommendationResponse.properties.recommendations.type": "array",
	"definitions.RecommendationResponse.type": "object",
	"definitions.Redirect.properties.active.type": "boolean",
	"definitions.Redirect.properties.longUrl.type": "string",
	"definitions.Redirect.properties.shortUrl.type": "string",
	"definitions.Redirect.type": "object",
	"definitions.RoadCorridor.properties.bounds.description": "The Bounds of the Corridor, given by the south-east followed by the north-west co-ordinate\r\n            pair in geoJSON format e.g. \"[[-1.241531,51.242151],[1.641223,53.765721]]\"",
	"definitions.RoadCorridor.properties.bounds.type": "string",
	"definitions.RoadCorridor.properties.displayName.description": "The display name of the Corridor e.g. \"North Circular (A406)\". This\r\n            may be identical to the Id.",
	"definitions.RoadCorridor.properties.displayName.type": "string",
	"definitions.RoadCorridor.properties.envelope.description": "The Envelope of the Corridor, given by the corner co-ordinates of a rectangular (four-point) polygon\r\n            in geoJSON format e.g. \"[[-1.241531,51.242151],[-1.241531,53.765721],[1.641223,53.765721],[1.641223,51.242151]]\"",
	"definitions.RoadCorridor.properties.envelope.type": "string",
	"definitions.RoadCorridor.properties.group.description": "The group name of the Corridor e.g. \"Central London\". Most corridors are not grouped, in which case this field can be null.",
	"definitions.RoadCorridor.properties.group.type": "string",
	"definitions.RoadCorridor.properties.id.description": "The Id of the Corridor e.g. \"A406\"",
	"definitions.RoadCorridor.properties.id.type": "string",
	"definitions.RoadCorridor.properties.statusAggregationEndDate.description": "The end of the period over which status has been aggregated, or null if this is the current corridor status.",
	"definitions.RoadCorridor.properties.statusAggregationEndDate.format": "date-time",
	"definitions.RoadCorridor.properties.statusAggregationEndDate.type": "string",
	"definitions.RoadCorridor.properties.statusAggregationStartDate.description": "The start of the period over which status has been aggregated, or null if this is the current corridor status.",
	"definitions.RoadCorridor.properties.statusAggregationStartDate.format": "date-time",
	"definitions.RoadCorridor.properties.statusAggregationStartDate.type": "string",
	"definitions.RoadCorridor.properties.statusSeverity.description": "Standard multi-mode status severity code",
	"definitions.RoadCorridor.properties.statusSeverity.type": "string",
	"definitions.RoadCorridor.properties.statusSeverityDescription.description": "Description of the status severity as applied to RoadCorridors",
	"definitions.RoadCorridor.properties.statusSeverityDescription.type": "string",
	"definitions.RoadCorridor.properties.url.description": "URL to retrieve this Corridor.",
	"definitions.RoadCorridor.properties.url.type": "string",
	"definitions.RoadCorridor.type": "object",
	"definitions.RoadDisruption.properties.category.description": "Describes the nature of disruption e.g. Traffic Incidents, Works",
	"definitions.RoadDisruption.properties.category.type": "string",
	"definitions.RoadDisruption.properties.comments.description": "Full text of comments describing the disruption, including details of any road closures and diversions, where appropriate.",
	"definitions.RoadDisruption.properties.comments.type": "string",
	"definitions.RoadDisruption.properties.corridorIds.description": "The Ids of affected corridors, if any.",
	"definitions.RoadDisruption.properties.corridorIds.items.type": "string",
	"definitions.RoadDisruption.properties.corridorIds.type": "array",
	"definitions.RoadDisruption.properties.currentUpdate.description": "Text of the most recent update from the LSTCC on the state of the\r\n             disruption, including the current traffic impact and any advice to\r\n             road users.",
	"definitions.RoadDisruption.properties.currentUpdate.type": "string",
	"definitions.RoadDisruption.properties.currentUpdateDateTime.description": "The time when the last CurrentUpdate description was recorded, \r\n            or null if no CurrentUpdate has been applied.",
	"definitions.RoadDisruption.properties.currentUpdateDateTime.format": "date-time",
	"definitions.RoadDisruption.properties.currentUpdateDateTime.type": "string",
	"definitions.RoadDisruption.properties.endDateTime.description": "The date and time on which the disruption ended. For planned disruptions, this date will have a valid value. For unplanned \r\n            disruptions in progress, this field will be omitted.",
	"definitions.RoadDisruption.properties.endDateTime.format": "date-time",
	"definitions.RoadDisruption.properties.endDateTime.type": "string",
	"definitions.RoadDisruption.properties.geography.$ref": "#/definitions/DbGeography",
	"definitions.RoadDisruption.properties.geography.description": "Geography version of Point for output as GeoJSON.\r\n            Can not use Geometry in a consistent way as non-TIMS disruptions do not have a polygon",
	"definitions.RoadDisruption.properties.geometry.$ref": "#/definitions/DbGeography",
	"definitions.RoadDisruption.properties.geometry.description": "GeoJSON formatted latitude/longitude (WGS84) pairs forming an enclosed polyline or polygon. The polygon will only be included where affected streets information\r\n            is not available for the disruption, would be inappropriate (e.g. a very large number of streets), or is centred on an area without streets (e.g. a football stadium).",
	"definitions.RoadDisruption.properties.hasClosures.description": "True if any of the affected Streets have a \"Full Closure\" status, false otherwise. A RoadDisruption that has HasClosures is considered a \r\n            Severe or Serious disruption for severity filtering purposes.",
	"definitions.RoadDisruption.properties.hasClosures.type": "boolean",
	"definitions.RoadDisruption.properties.id.description": "Unique identifier for the road disruption",
	"definitions.RoadDisruption.properties.id.type": "string",
	"definitions.RoadDisruption.properties.isProvisional.description": "True if the disruption is planned on a future date that is open to change",
	"definitions.RoadDisruption.properties.isProvisional.type": "boolean",
	"definitions.RoadDisruption.properties.lastModifiedTime.description": "The date and time on which the disruption was last modified in the system. This information can reliably be used by a developer to quickly\r\n            compare two instances of the same disruption to determine if it has been changed.",
	"definitions.RoadDisruption.properties.lastModifiedTime.format": "date-time",
	"definitions.RoadDisruption.properties.lastModifiedTime.type": "string",
	"definitions.RoadDisruption.properties.levelOfInterest.description": "This describes the level of potential impact on traffic operations of the disruption. \r\n            High = e.g. a one-off disruption on a major or high profile route which will require a high level of operational attention \r\n            Medium = This is the default value \r\n            Low = e.g. a frequently occurring disruption which is well known",
	"definitions.RoadDisruption.properties.levelOfInterest.type": "string",
	"definitions.RoadDisruption.properties.linkText.description": "The text of any associated link",
	"definitions.RoadDisruption.properties.linkText.type": "string",
	"definitions.RoadDisruption.properties.linkUrl.description": "The url of any associated link",
	"definitions.RoadDisruption.properties.linkUrl.type": "string",
	"definitions.RoadDisruption.properties.location.description": "Main road name / number (borough) or preset area name where the disruption is located. This might be useful for a map popup where space is limited.",
	"definitions.RoadDisruption.properties.location.type": "string",
	"definitions.RoadDisruption.properties.ordinal.description": "An ordinal of the disruption based on severity, level of interest and corridor.",
	"definitions.RoadDisruption.properties.ordinal.format": "int32",
	"definitions.RoadDisruption.properties.ordinal.type": "integer",
	"definitions.RoadDisruption.properties.point.description": "Latitude and longitude (WGS84) of the centroid of the disruption, stored in a geoJSON-formatted string.",
	"definitions.RoadDisruption.properties.point.type": "string",
	"definitions.RoadDisruption.properties.publishEndDate.format": "date-time",
	"definitions.RoadDisruption.properties.publishEndDate.type": "string",
	"definitions.RoadDisruption.properties.publishStartDate.description": "TDM Additional properties",
	"definitions.RoadDisruption.properties.publishStartDate.format": "date-time",
	"definitions.RoadDisruption.properties.publishStartDate.type": "string",
	"definitions.RoadDisruption.properties.recurringSchedules.items.$ref": "#/definitions/RoadDisruptionSchedule",
	"definitions.RoadDisruption.properties.recurringSchedules.type": "array",
	"definitions.RoadDisruption.properties.roadDisruptionImpactAreas.items.$ref": "#/definitions/RoadDisruptionImpactArea",
	"definitions.RoadDisruption.properties.roadDisruptionImpactAreas.type": "array",
	"definitions.RoadDisruption.properties.roadDisruptionLines.items.$ref": "#/definitions/RoadDisruptionLine",
	"definitions.RoadDisruption.properties.roadDisruptionLines.type": "array",
	"definitions.RoadDisruption.properties.roadProject.$ref": "#/definitions/RoadProject",
	"definitions.RoadDisruption.properties.roadProject.description": "Any associated road project",
	"definitions.RoadDisruption.properties.severity.description": "A description of the severity of the disruption.",
	"definitions.RoadDisruption.properties.severity.type": "string",
	"definitions.RoadDisruption.properties.startDateTime.description": "The date and time which the disruption started. For a planned disruption (i.e. planned road works) this date will be in the future.\r\n            For unplanned disruptions, this will default to the date on which the disruption was first recorded, but may be adjusted by the operator.",
	"definitions.RoadDisruption.properties.startDateTime.format": "date-time",
	"definitions.RoadDisruption.properties.startDateTime.type": "string",
	"definitions.RoadDisruption.properties.status.description": "This describes the status of the disruption.  \r\n            Active = currently in progress \r\n            Active Long Term = currently in progress and long term\r\n            Scheduled = scheduled to start within the next 180 days\r\n            Recurring Works = planned maintenance works that follow a regular routine or pattern and whose next occurrence is to start within the next 180 days.\r\n            Recently Cleared = recently cleared in the last 24 hours\r\n            Note that the status of Scheduled or Recurring Works disruptions will change to Active when they start, and will change status again when they end.",
	"definitions.RoadDisruption.properties.status.type": "string",
	"definitions.RoadDisruption.properties.streets.description": "A collection of zero or more streets affected by the disruption.",
	"definitions.RoadDisruption.properties.streets.items.$ref": "#/definitions/Street",
	"definitions.RoadDisruption.properties.streets.type": "array",
	"definitions.RoadDisruption.properties.subCategory.description": "Describes the sub-category of disruption e.g. Collapsed Manhole, Abnormal Load",
	"definitions.RoadDisruption.properties.subCategory.type": "string",
	"definitions.RoadDisruption.properties.timeFrame.type": "string",
	"definitions.RoadDisruption.properties.url.description": "URL to retrieve this road disruption",
	"definitions.RoadDisruption.properties.url.type": "string",
	"definitions.RoadDisruption.type": "object",
	"definitions.RoadDisruptionImpactArea.properties.endDate.format": "date-time",
	"definitions.RoadDisruptionImpactArea.properties.endDate.type": "string",
	"definitions.RoadDisruptionImpactArea.properties.endTime.type": "string",
	"definitions.RoadDisruptionImpactArea.properties.id.format": "int32",
	"definitions.RoadDisruptionImpactArea.properties.id.type": "integer",
	"definitions.RoadDisruptionImpactArea.properties.polygon.$ref": "#/definitions/DbGeography",
	"definitions.RoadDisruptionImpactArea.properties.roadDisruptionId.type": "string",
	"definitions.RoadDisruptionImpactArea.properties.startDate.format": "date-time",
	"definitions.RoadDisruptionImpactArea.properties.startDate.type": "string",
	"definitions.RoadDisruptionImpactArea.properties.startTime.type": "string",
	"definitions.RoadDisruptionImpactArea.type": "object",
	"definitions.RoadDisruptionLine.properties.endDate.format": "date-time",
	"definitions.RoadDisruptionLine.properties.endDate.type": "string",
	"definitions.RoadDisruptionLine.properties.endTime.type": "string",
	"definitions.RoadDisruptionLine.properties.id.format": "int32",
	"definitions.RoadDisruptionLine.properties.id.type": "integer",
	"definitions.RoadDisruptionLine.properties.isDiversion.type": "boolean",
	"definitions.RoadDisruptionLine.properties.multiLineString.$ref": "#/definitions/DbGeography",
	"definitions.RoadDisruptionLine.properties.roadDisruptionId.type": "string",
	"definitions.RoadDisruptionLine.properties.startDate.format": "date-time",
	"definitions.RoadDisruptionLine.properties.startDate.type": "string",
	"definitions.RoadDisruptionLine.properties.startTime.type": "string",
	"definitions.RoadDisruptionLine.type": "object",
	"definitions.RoadDisruptionSchedule.properties.endTime.format": "date-time",
	"definitions.RoadDisruptionSchedule.properties.endTime.type": "string",
	"definitions.RoadDisruptionSchedule.properties.startTime.format": "date-time",
	"definitions.RoadDisruptionSchedule.properties.startTime.type": "string",
	"definitions.RoadDisruptionSchedule.type": "object",
	"definitions.RoadProject.properties.boroughsBenefited.items.type": "string",
	"definitions.RoadProject.properties.boroughsBenefited.type": "array",
	"definitions.RoadProject.properties.constructionEndDate.format": "date-time",
	"definitions.RoadProject.properties.constructionEndDate.type": "string",
	"definitions.RoadProject.properties.constructionStartDate.format": "date-time",
	"definitions.RoadProject.properties.constructionStartDate.type": "string",
	"definitions.RoadProject.properties.consultationEndDate.format": "date-time",
	"definitions.RoadProject.properties.consultationEndDate.type": "string",
	"definitions.RoadProject.properties.consultationPageUrl.type": "string",
	"definitions.RoadProject.properties.consultationStartDate.format": "date-time",
	"definitions.RoadProject.properties.consultationStartDate.type": "string",
	"definitions.RoadProject.properties.contactEmail.type": "string",
	"definitions.RoadProject.properties.contactName.type": "string",
	"definitions.RoadProject.properties.cycleSuperhighwayId.type": "string",
	"definitions.RoadProject.properties.externalPageUrl.type": "string",
	"definitions.RoadProject.properties.phase.enum.length": 6,
	"definitions.RoadProject.properties.phase.enum[0]": "Unscoped",
	"definitions.RoadProject.properties.phase.enum[1]": "Concept",
	"definitions.RoadProject.properties.phase.enum[2]": "ConsultationEnded",
	"definitions.RoadProject.properties.phase.enum[3]": "Consultation",
	"definitions.RoadProject.properties.phase.enum[4]": "Construction",
	"definitions.RoadProject.properties.phase.enum[5]": "Complete",
	"definitions.RoadProject.properties.phase.type": "string",
	"definitions.RoadProject.properties.projectDescription.type": "string",
	"definitions.RoadProject.properties.projectId.type": "string",
	"definitions.RoadProject.properties.projectName.type": "string",
	"definitions.RoadProject.properties.projectPageUrl.type": "string",
	"definitions.RoadProject.properties.projectSummaryPageUrl.type": "string",
	"definitions.RoadProject.properties.schemeName.type": "string",
	"definitions.RoadProject.type": "object",
	"definitions.RouteOption.properties.directions.items.type": "string",
	"definitions.RouteOption.properties.directions.type": "array",
	"definitions.RouteOption.properties.id.description": "The Id of the route",
	"definitions.RouteOption.properties.id.type": "string",
	"definitions.RouteOption.properties.lineIdentifier.$ref": "#/definitions/Identifier",
	"definitions.RouteOption.properties.lineIdentifier.description": "The line identifier (e.g. District Line), from where you can obtain line status information e.g. the rainbow board status \"good service\".",
	"definitions.RouteOption.properties.name.description": "Name such as \"72\"",
	"definitions.RouteOption.properties.name.type": "string",
	"definitions.RouteOption.type": "object",
	"definitions.RouteSearchMatch.properties.id.type": "string",
	"definitions.RouteSearchMatch.properties.lat.format": "double",
	"definitions.RouteSearchMatch.properties.lat.type": "number",
	"definitions.RouteSearchMatch.properties.lineId.type": "string",
	"definitions.RouteSearchMatch.properties.lineName.type": "string",
	"definitions.RouteSearchMatch.properties.lineRouteSection.items.$ref": "#/definitions/LineRouteSection",
	"definitions.RouteSearchMatch.properties.lineRouteSection.type": "array",
	"definitions.RouteSearchMatch.properties.lon.format": "double",
	"definitions.RouteSearchMatch.properties.lon.type": "number",
	"definitions.RouteSearchMatch.properties.matchedRouteSections.items.$ref": "#/definitions/MatchedRouteSections",
	"definitions.RouteSearchMatch.properties.matchedRouteSections.type": "array",
	"definitions.RouteSearchMatch.properties.matchedStops.items.$ref": "#/definitions/MatchedStop",
	"definitions.RouteSearchMatch.properties.matchedStops.type": "array",
	"definitions.RouteSearchMatch.properties.mode.type": "string",
	"definitions.RouteSearchMatch.properties.name.type": "string",
	"definitions.RouteSearchMatch.properties.url.type": "string",
	"definitions.RouteSearchMatch.type": "object",
	"definitions.RouteSearchResponse.properties.input.type": "string",
	"definitions.RouteSearchResponse.properties.searchMatches.items.$ref": "#/definitions/RouteSearchMatch",
	"definitions.RouteSearchResponse.properties.searchMatches.type": "array",
	"definitions.RouteSearchResponse.type": "object",
	"definitions.RouteSection.properties.destinationName.description": "eg: Destination Name",
	"definitions.RouteSection.properties.destinationName.type": "string",
	"definitions.RouteSection.properties.direction.description": "eg: N or S or I or O",
	"definitions.RouteSection.properties.direction.type": "string",
	"definitions.RouteSection.properties.id.description": "The Id of the route",
	"definitions.RouteSection.properties.id.type": "string",
	"definitions.RouteSection.properties.lineId.description": "The Id of the Line",
	"definitions.RouteSection.properties.lineId.type": "string",
	"definitions.RouteSection.properties.lineString.description": "eg: Path coordindates",
	"definitions.RouteSection.properties.lineString.type": "string",
	"definitions.RouteSection.properties.name.description": "Name such as \"72\"",
	"definitions.RouteSection.properties.name.type": "string",
	"definitions.RouteSection.properties.originationName.description": "eg: Origination Name",
	"definitions.RouteSection.properties.originationName.type": "string",
	"definitions.RouteSection.properties.routeCode.description": "The route code",
	"definitions.RouteSection.properties.routeCode.type": "string",
	"definitions.RouteSection.properties.routeSectionNaptanEntrySequence.items.$ref": "#/definitions/RouteSectionNaptanEntrySequence",
	"definitions.RouteSection.properties.routeSectionNaptanEntrySequence.type": "array",
	"definitions.RouteSection.type": "object",
	"definitions.RouteSectionNaptanEntrySequence.properties.ordinal.format": "int32",
	"definitions.RouteSectionNaptanEntrySequence.properties.ordinal.type": "integer",
	"definitions.RouteSectionNaptanEntrySequence.properties.stopPoint.$ref": "#/definitions/StopPoint",
	"definitions.RouteSectionNaptanEntrySequence.type": "object",
	"definitions.RouteSequence.properties.direction.type": "string",
	"definitions.RouteSequence.properties.isOutboundOnly.type": "boolean",
	"definitions.RouteSequence.properties.lineId.type": "string",
	"definitions.RouteSequence.properties.lineName.type": "string",
	"definitions.RouteSequence.properties.lineStrings.items.type": "string",
	"definitions.RouteSequence.properties.lineStrings.type": "array",
	"definitions.RouteSequence.properties.mode.type": "string",
	"definitions.RouteSequence.properties.orderedLineRoutes.items.$ref": "#/definitions/OrderedRoute",
	"definitions.RouteSequence.properties.orderedLineRoutes.type": "array",
	"definitions.RouteSequence.properties.stations.items.$ref": "#/definitions/MatchedStop",
	"definitions.RouteSequence.properties.stations.type": "array",
	"definitions.RouteSequence.properties.stopPointSequences.items.$ref": "#/definitions/StopPointSequence",
	"definitions.RouteSequence.properties.stopPointSequences.type": "array",
	"definitions.RouteSequence.type": "object",
	"definitions.Schedule.properties.firstJourney.$ref": "#/definitions/KnownJourney",
	"definitions.Schedule.properties.knownJourneys.items.$ref": "#/definitions/KnownJourney",
	"definitions.Schedule.properties.knownJourneys.type": "array",
	"definitions.Schedule.properties.lastJourney.$ref": "#/definitions/KnownJourney",
	"definitions.Schedule.properties.name.type": "string",
	"definitions.Schedule.properties.periods.items.$ref": "#/definitions/Period",
	"definitions.Schedule.properties.periods.type": "array",
	"definitions.Schedule.type": "object",
	"definitions.SearchCriteria.properties.dateTime.format": "date-time",
	"definitions.SearchCriteria.properties.dateTime.type": "string",
	"definitions.SearchCriteria.properties.dateTimeType.enum.length": 2,
	"definitions.SearchCriteria.properties.dateTimeType.enum[0]": "Arriving",
	"definitions.SearchCriteria.properties.dateTimeType.enum[1]": "Departing",
	"definitions.SearchCriteria.properties.dateTimeType.type": "string",
	"definitions.SearchCriteria.properties.timeAdjustments.$ref": "#/definitions/TimeAdjustments",
	"definitions.SearchCriteria.type": "object",
	"definitions.SearchMatch.properties.id.type": "string",
	"definitions.SearchMatch.properties.lat.format": "double",
	"definitions.SearchMatch.properties.lat.type": "number",
	"definitions.SearchMatch.properties.lon.format": "double",
	"definitions.SearchMatch.properties.lon.type": "number",
	"definitions.SearchMatch.properties.name.type": "string",
	"definitions.SearchMatch.properties.url.type": "string",
	"definitions.SearchMatch.type": "object",
	"definitions.SearchResponse.properties.from.format": "int32",
	"definitions.SearchResponse.properties.from.type": "integer",
	"definitions.SearchResponse.properties.matches.items.$ref": "#/definitions/SearchMatch",
	"definitions.SearchResponse.properties.matches.type": "array",
	"definitions.SearchResponse.properties.maxScore.format": "double",
	"definitions.SearchResponse.properties.maxScore.type": "number",
	"definitions.SearchResponse.properties.page.format": "int32",
	"definitions.SearchResponse.properties.page.type": "integer",
	"definitions.SearchResponse.properties.pageSize.format": "int32",
	"definitions.SearchResponse.properties.pageSize.type": "integer",
	"definitions.SearchResponse.properties.provider.type": "string",
	"definitions.SearchResponse.properties.query.type": "string",
	"definitions.SearchResponse.properties.total.format": "int32",
	"definitions.SearchResponse.properties.total.type": "integer",
	"definitions.SearchResponse.type": "object",
	"definitions.ServiceFrequency.properties.highestFrequency.format": "double",
	"definitions.ServiceFrequency.properties.highestFrequency.type": "number",
	"definitions.ServiceFrequency.properties.lowestFrequency.format": "double",
	"definitions.ServiceFrequency.properties.lowestFrequency.type": "number",
	"definitions.ServiceFrequency.type": "object",
	"definitions.StationInterval.properties.id.type": "string",
	"definitions.StationInterval.properties.intervals.items.$ref": "#/definitions/Interval",
	"definitions.StationInterval.properties.intervals.type": "array",
	"definitions.StationInterval.type": "object",
	"definitions.StatusSeverity.properties.description.type": "string",
	"definitions.StatusSeverity.properties.modeName.type": "string",
	"definitions.StatusSeverity.properties.severityLevel.format": "int32",
	"definitions.StatusSeverity.properties.severityLevel.type": "integer",
	"definitions.StatusSeverity.type": "object",
	"definitions.StopPoint.properties.accessibilitySummary.type": "string",
	"definitions.StopPoint.properties.additionalProperties.description": "A bag of additional key/value pairs with extra information about this place.",
	"definitions.StopPoint.properties.additionalProperties.items.$ref": "#/definitions/AdditionalProperties",
	"definitions.StopPoint.properties.additionalProperties.type": "array",
	"definitions.StopPoint.properties.children.items.$ref": "#/definitions/Place",
	"definitions.StopPoint.properties.children.type": "array",
	"definitions.StopPoint.properties.childrenUrls.items.type": "string",
	"definitions.StopPoint.properties.childrenUrls.type": "array",
	"definitions.StopPoint.properties.commonName.description": "A human readable name.",
	"definitions.StopPoint.properties.commonName.type": "string",
	"definitions.StopPoint.properties.distance.description": "The distance of the place from its search point, if this is the result\r\n            of a geographical search, otherwise zero.",
	"definitions.StopPoint.properties.distance.format": "double",
	"definitions.StopPoint.properties.distance.type": "number",
	"definitions.StopPoint.properties.fullName.type": "string",
	"definitions.StopPoint.properties.hubNaptanCode.type": "string",
	"definitions.StopPoint.properties.icsCode.type": "string",
	"definitions.StopPoint.properties.id.description": "A unique identifier.",
	"definitions.StopPoint.properties.id.type": "string",
	"definitions.StopPoint.properties.indicator.description": "The indicator of the stop point e.g. \"Stop K\"",
	"definitions.StopPoint.properties.indicator.type": "string",
	"definitions.StopPoint.properties.lat.description": "WGS84 latitude of the location.",
	"definitions.StopPoint.properties.lat.format": "double",
	"definitions.StopPoint.properties.lat.type": "number",
	"definitions.StopPoint.properties.lineGroup.items.$ref": "#/definitions/LineGroup",
	"definitions.StopPoint.properties.lineGroup.type": "array",
	"definitions.StopPoint.properties.lineModeGroups.items.$ref": "#/definitions/LineModeGroup",
	"definitions.StopPoint.properties.lineModeGroups.type": "array",
	"definitions.StopPoint.properties.lines.items.$ref": "#/definitions/Identifier",
	"definitions.StopPoint.properties.lines.type": "array",
	"definitions.StopPoint.properties.lon.description": "WGS84 longitude of the location.",
	"definitions.StopPoint.properties.lon.format": "double",
	"definitions.StopPoint.properties.lon.type": "number",
	"definitions.StopPoint.properties.modes.items.type": "string",
	"definitions.StopPoint.properties.modes.type": "array",
	"definitions.StopPoint.properties.naptanId.type": "string",
	"definitions.StopPoint.properties.naptanMode.type": "string",
	"definitions.StopPoint.properties.placeType.description": "The type of Place. See /Place/Meta/placeTypes for possible values.",
	"definitions.StopPoint.properties.placeType.type": "string",
	"definitions.StopPoint.properties.platformName.type": "string",
	"definitions.StopPoint.properties.smsCode.type": "string",
	"definitions.StopPoint.properties.stationNaptan.type": "string",
	"definitions.StopPoint.properties.status.type": "boolean",
	"definitions.StopPoint.properties.stopLetter.description": "The stop letter, if it could be cleansed from the Indicator e.g. \"K\"",
	"definitions.StopPoint.properties.stopLetter.type": "string",
	"definitions.StopPoint.properties.stopType.type": "string",
	"definitions.StopPoint.properties.url.description": "The unique location of this resource.",
	"definitions.StopPoint.properties.url.type": "string",
	"definitions.StopPoint.type": "object",
	"definitions.StopPointCategory.properties.availableKeys.items.type": "string",
	"definitions.StopPointCategory.properties.availableKeys.type": "array",
	"definitions.StopPointCategory.properties.category.type": "string",
	"definitions.StopPointCategory.type": "object",
	"definitions.StopPointRouteSection.properties.destinationName.type": "string",
	"definitions.StopPointRouteSection.properties.direction.type": "string",
	"definitions.StopPointRouteSection.properties.isActive.type": "boolean",
	"definitions.StopPointRouteSection.properties.lineId.type": "string",
	"definitions.StopPointRouteSection.properties.lineString.type": "string",
	"definitions.StopPointRouteSection.properties.mode.type": "string",
	"definitions.StopPointRouteSection.properties.naptanId.type": "string",
	"definitions.StopPointRouteSection.properties.routeSectionName.type": "string",
	"definitions.StopPointRouteSection.properties.serviceType.type": "string",
	"definitions.StopPointRouteSection.properties.validFrom.format": "date-time",
	"definitions.StopPointRouteSection.properties.validFrom.type": "string",
	"definitions.StopPointRouteSection.properties.validTo.format": "date-time",
	"definitions.StopPointRouteSection.properties.validTo.type": "string",
	"definitions.StopPointRouteSection.properties.vehicleDestinationText.type": "string",
	"definitions.StopPointRouteSection.type": "object",
	"definitions.StopPointSequence.properties.branchId.description": "The id of this branch.",
	"definitions.StopPointSequence.properties.branchId.format": "int32",
	"definitions.StopPointSequence.properties.branchId.type": "integer",
	"definitions.StopPointSequence.properties.direction.type": "string",
	"definitions.StopPointSequence.properties.lineId.type": "string",
	"definitions.StopPointSequence.properties.lineName.type": "string",
	"definitions.StopPointSequence.properties.nextBranchIds.description": "The ids of the next branch(es) in the sequence. Note that the next and previous branch id can be\r\n            identical in the case of a looped route e.g. the Circle line.",
	"definitions.StopPointSequence.properties.nextBranchIds.items.format": "int32",
	"definitions.StopPointSequence.properties.nextBranchIds.items.type": "integer",
	"definitions.StopPointSequence.properties.nextBranchIds.type": "array",
	"definitions.StopPointSequence.properties.prevBranchIds.description": "The ids of the previous branch(es) in the sequence. Note that the next and previous branch id can be\r\n            identical in the case of a looped route e.g. the Circle line.",
	"definitions.StopPointSequence.properties.prevBranchIds.items.format": "int32",
	"definitions.StopPointSequence.properties.prevBranchIds.items.type": "integer",
	"definitions.StopPointSequence.properties.prevBranchIds.type": "array",
	"definitions.StopPointSequence.properties.serviceType.enum.length": 2,
	"definitions.StopPointSequence.properties.serviceType.enum[0]": "Regular",
	"definitions.StopPointSequence.properties.serviceType.enum[1]": "Night",
	"definitions.StopPointSequence.properties.serviceType.type": "string",
	"definitions.StopPointSequence.properties.stopPoint.items.$ref": "#/definitions/MatchedStop",
	"definitions.StopPointSequence.properties.stopPoint.type": "array",
	"definitions.StopPointSequence.type": "object",
	"definitions.StopPointsResponse.description": "A paged response containing StopPoints",
	"definitions.StopPointsResponse.properties.centrePoint.description": "The centre latitude/longitude of this list of StopPoints",
	"definitions.StopPointsResponse.properties.centrePoint.items.format": "double",
	"definitions.StopPointsResponse.properties.centrePoint.items.type": "number",
	"definitions.StopPointsResponse.properties.centrePoint.type": "array",
	"definitions.StopPointsResponse.properties.page.description": "The index of this page",
	"definitions.StopPointsResponse.properties.page.format": "int32",
	"definitions.StopPointsResponse.properties.page.type": "integer",
	"definitions.StopPointsResponse.properties.pageSize.description": "The maximum size of the page in this response i.e. the maximum number of StopPoints",
	"definitions.StopPointsResponse.properties.pageSize.format": "int32",
	"definitions.StopPointsResponse.properties.pageSize.type": "integer",
	"definitions.StopPointsResponse.properties.stopPoints.description": "Collection of stop points",
	"definitions.StopPointsResponse.properties.stopPoints.items.$ref": "#/definitions/StopPoint",
	"definitions.StopPointsResponse.properties.stopPoints.type": "array",
	"definitions.StopPointsResponse.properties.total.description": "The total number of StopPoints available across all pages",
	"definitions.StopPointsResponse.properties.total.format": "int32",
	"definitions.StopPointsResponse.properties.total.type": "integer",
	"definitions.StopPointsResponse.type": "object",
	"definitions.Street.properties.closure.description": "Type of road closure. Some example values:\r\n            Open = road is open, not blocked, not closed, not restricted. It maybe that the disruption has been moved out of the carriageway.\r\n            Partial Closure = road is partially blocked, closed or restricted. \r\n            Full Closure = road is fully blocked or closed.",
	"definitions.Street.properties.closure.type": "string",
	"definitions.Street.properties.directions.description": "The direction of the disruption on the street. Some example values:\r\n            All Directions\r\n            All Approaches\r\n            Clockwise\r\n            Anti-Clockwise\r\n            Northbound\r\n            Eastbound\r\n            Southbound\r\n            Westbound\r\n            Both Directions",
	"definitions.Street.properties.directions.type": "string",
	"definitions.Street.properties.name.description": "Street name",
	"definitions.Street.properties.name.type": "string",
	"definitions.Street.properties.segments.description": "Geographic description of the sections of this street that are affected.",
	"definitions.Street.properties.segments.items.$ref": "#/definitions/StreetSegment",
	"definitions.Street.properties.segments.type": "array",
	"definitions.Street.properties.sourceSystemId.description": "The ID from the source system of the disruption that this street belongs to.",
	"definitions.Street.properties.sourceSystemId.format": "int64",
	"definitions.Street.properties.sourceSystemId.type": "integer",
	"definitions.Street.properties.sourceSystemKey.description": "The key of the source system of the disruption that this street belongs to.",
	"definitions.Street.properties.sourceSystemKey.type": "string",
	"definitions.Street.type": "object",
	"definitions.StreetSegment.properties.lineString.description": "geoJSON formatted LineString containing two latitude/longitude (WGS84) pairs that identify the start and end points of the street segment.",
	"definitions.StreetSegment.properties.lineString.type": "string",
	"definitions.StreetSegment.properties.sourceSystemId.description": "The ID from the source system of the disruption that this street belongs to.",
	"definitions.StreetSegment.properties.sourceSystemId.format": "int64",
	"definitions.StreetSegment.properties.sourceSystemId.type": "integer",
	"definitions.StreetSegment.properties.sourceSystemKey.description": "The key of the source system of the disruption that this street belongs to.",
	"definitions.StreetSegment.properties.sourceSystemKey.type": "string",
	"definitions.StreetSegment.properties.toid.description": "A 16 digit unique integer identifying a OS ITN (Ordnance Survey Integrated Transport Network) road link.",
	"definitions.StreetSegment.properties.toid.type": "string",
	"definitions.StreetSegment.type": "object",
	"definitions.Ticket.properties.cost.type": "string",
	"definitions.Ticket.properties.description.type": "string",
	"definitions.Ticket.properties.displayOrder.format": "int32",
	"definitions.Ticket.properties.displayOrder.type": "integer",
	"definitions.Ticket.properties.messages.items.$ref": "#/definitions/Message",
	"definitions.Ticket.properties.messages.type": "array",
	"definitions.Ticket.properties.mode.type": "string",
	"definitions.Ticket.properties.passengerType.type": "string",
	"definitions.Ticket.properties.ticketTime.$ref": "#/definitions/TicketTime",
	"definitions.Ticket.properties.ticketType.$ref": "#/definitions/TicketType",
	"definitions.Ticket.type": "object",
	"definitions.TicketTime.properties.description.type": "string",
	"definitions.TicketTime.properties.type.type": "string",
	"definitions.TicketTime.type": "object",
	"definitions.TicketType.properties.description.type": "string",
	"definitions.TicketType.properties.type.type": "string",
	"definitions.TicketType.type": "object",
	"definitions.TimeAdjustment.properties.date.type": "string",
	"definitions.TimeAdjustment.properties.time.type": "string",
	"definitions.TimeAdjustment.properties.timeIs.type": "string",
	"definitions.TimeAdjustment.properties.uri.type": "string",
	"definitions.TimeAdjustment.type": "object",
	"definitions.TimeAdjustments.properties.earlier.$ref": "#/definitions/TimeAdjustment",
	"definitions.TimeAdjustments.properties.earliest.$ref": "#/definitions/TimeAdjustment",
	"definitions.TimeAdjustments.properties.later.$ref": "#/definitions/TimeAdjustment",
	"definitions.TimeAdjustments.properties.latest.$ref": "#/definitions/TimeAdjustment",
	"definitions.TimeAdjustments.type": "object",
	"definitions.Timetable.properties.departureStopId.type": "string",
	"definitions.Timetable.properties.routes.items.$ref": "#/definitions/TimetableRoute",
	"definitions.Timetable.properties.routes.type": "array",
	"definitions.Timetable.type": "object",
	"definitions.TimetableResponse.properties.direction.type": "string",
	"definitions.TimetableResponse.properties.disambiguation.$ref": "#/definitions/Disambiguation",
	"definitions.TimetableResponse.properties.lineId.type": "string",
	"definitions.TimetableResponse.properties.lineName.type": "string",
	"definitions.TimetableResponse.properties.pdfUrl.type": "string",
	"definitions.TimetableResponse.properties.stations.items.$ref": "#/definitions/MatchedStop",
	"definitions.TimetableResponse.properties.stations.type": "array",
	"definitions.TimetableResponse.properties.statusErrorMessage.type": "string",
	"definitions.TimetableResponse.properties.stops.items.$ref": "#/definitions/MatchedStop",
	"definitions.TimetableResponse.properties.stops.type": "array",
	"definitions.TimetableResponse.properties.timetable.$ref": "#/definitions/Timetable",
	"definitions.TimetableResponse.type": "object",
	"definitions.TimetableRoute.properties.schedules.items.$ref": "#/definitions/Schedule",
	"definitions.TimetableRoute.properties.schedules.type": "array",
	"definitions.TimetableRoute.properties.stationIntervals.items.$ref": "#/definitions/StationInterval",
	"definitions.TimetableRoute.properties.stationIntervals.type": "array",
	"definitions.TimetableRoute.type": "object",
	"definitions.TrainLoading.properties.direction.description": "Direction in regards to Journey Planner i.e. inbound or outbound",
	"definitions.TrainLoading.properties.direction.type": "string",
	"definitions.TrainLoading.properties.line.description": "The Line Name e.g. \"Victoria\"",
	"definitions.TrainLoading.properties.line.type": "string",
	"definitions.TrainLoading.properties.lineDirection.description": "Direction of the Line e.g. NB, SB, WB etc.",
	"definitions.TrainLoading.properties.lineDirection.type": "string",
	"definitions.TrainLoading.properties.naptanTo.description": "Naptan of the adjacent station",
	"definitions.TrainLoading.properties.naptanTo.type": "string",
	"definitions.TrainLoading.properties.platformDirection.description": "Direction displayed on the platform e.g. NB, SB, WB etc.",
	"definitions.TrainLoading.properties.platformDirection.type": "string",
	"definitions.TrainLoading.properties.timeSlice.description": "Time in 24hr format with 15 minute intervals e.g. 0500-0515, 0515-0530 etc.",
	"definitions.TrainLoading.properties.timeSlice.type": "string",
	"definitions.TrainLoading.properties.value.description": "Scale between 1-6, \r\n             1 = Very quiet, 2 = Quiet, 3 = Fairly busy, 4 = Busy, 5 = Very busy, 6 = Exceptionally busy",
	"definitions.TrainLoading.properties.value.format": "int32",
	"definitions.TrainLoading.properties.value.type": "integer",
	"definitions.TrainLoading.type": "object",
	"definitions.TwentyFourHourClockTime.properties.hour.type": "string",
	"definitions.TwentyFourHourClockTime.properties.minute.type": "string",
	"definitions.TwentyFourHourClockTime.type": "object",
	"definitions.ValidityPeriod.description": "Represents a period for which a planned works is valid.",
	"definitions.ValidityPeriod.properties.fromDate.description": "Gets or sets the start date.",
	"definitions.ValidityPeriod.properties.fromDate.format": "date-time",
	"definitions.ValidityPeriod.properties.fromDate.type": "string",
	"definitions.ValidityPeriod.properties.isNow.description": "If true is a realtime status rather than planned or info",
	"definitions.ValidityPeriod.properties.isNow.type": "boolean",
	"definitions.ValidityPeriod.properties.toDate.description": "Gets or sets the end date.",
	"definitions.ValidityPeriod.properties.toDate.format": "date-time",
	"definitions.ValidityPeriod.properties.toDate.type": "string",
	"definitions.ValidityPeriod.type": "object",
	"definitions.Vehicle.properties.type.type": "string",
	"definitions.Vehicle.type": "object",
	"host": "api.tfl.gov.uk",
	"info.description": "Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk",
	"info.title": "Transport for London Unified",
	"info.version": "v1",
	"info.x-apisguru-categories.length": 2,
	"info.x-apisguru-categories[0]": "transport",
	"info.x-apisguru-categories[1]": "open_data",
	"info.x-logo.url": "https://api.apis.guru/v2/cache/logo/https_pbs.twimg.com_profile_images_773531056670646272_dsuVeVSg.jpg",
	"info.x-origin.length": 1,
	"info.x-origin[0].format": "swagger",
	"info.x-origin[0].url": "https://api.tfl.gov.uk/swagger/docs/v1",
	"info.x-origin[0].version": "2.0",
	"info.x-preferred": true,
	"info.x-providerName": "tfl.gov.uk",
	"paths./AccidentStats/{year}.get.deprecated": false,
	"paths./AccidentStats/{year}.get.operationId": "AccidentStats_Get",
	"paths./AccidentStats/{year}.get.parameters.length": 1,
	"paths./AccidentStats/{year}.get.parameters[0].description": "The year for which to filter the accidents on.",
	"paths./AccidentStats/{year}.get.parameters[0].format": "int32",
	"paths./AccidentStats/{year}.get.parameters[0].in": "path",
	"paths./AccidentStats/{year}.get.parameters[0].name": "year",
	"paths./AccidentStats/{year}.get.parameters[0].required": true,
	"paths./AccidentStats/{year}.get.parameters[0].type": "integer",
	"paths./AccidentStats/{year}.get.produces.length": 4,
	"paths./AccidentStats/{year}.get.produces[0]": "application/json",
	"paths./AccidentStats/{year}.get.produces[1]": "text/json",
	"paths./AccidentStats/{year}.get.produces[2]": "application/xml",
	"paths./AccidentStats/{year}.get.produces[3]": "text/xml",
	"paths./AccidentStats/{year}.get.responses.200.description": "OK",
	"paths./AccidentStats/{year}.get.responses.200.schema.items.$ref": "#/definitions/AccidentDetail",
	"paths./AccidentStats/{year}.get.responses.200.schema.type": "array",
	"paths./AccidentStats/{year}.get.summary": "Gets all accident details for accidents occuring in the specified year",
	"paths./AccidentStats/{year}.get.tags.length": 1,
	"paths./AccidentStats/{year}.get.tags[0]": "AccidentStats",
	"paths./AirQuality.get.deprecated": false,
	"paths./AirQuality.get.operationId": "AirQuality_Get",
	"paths./AirQuality.get.produces.length": 4,
	"paths./AirQuality.get.produces[0]": "application/json",
	"paths./AirQuality.get.produces[1]": "text/json",
	"paths./AirQuality.get.produces[2]": "application/xml",
	"paths./AirQuality.get.produces[3]": "text/xml",
	"paths./AirQuality.get.responses.200.description": "OK",
	"paths./AirQuality.get.responses.200.schema.$ref": "#/definitions/Object",
	"paths./AirQuality.get.summary": "Gets air quality data feed",
	"paths./AirQuality.get.tags.length": 1,
	"paths./AirQuality.get.tags[0]": "AirQuality",
	"paths./BikePoint.get.deprecated": false,
	"paths./BikePoint.get.operationId": "BikePoint_GetAll",
	"paths./BikePoint.get.produces.length": 4,
	"paths./BikePoint.get.produces[0]": "application/json",
	"paths./BikePoint.get.produces[1]": "text/json",
	"paths./BikePoint.get.produces[2]": "application/xml",
	"paths./BikePoint.get.produces[3]": "text/xml",
	"paths./BikePoint.get.responses.200.description": "OK",
	"paths./BikePoint.get.responses.200.schema.items.$ref": "#/definitions/Place",
	"paths./BikePoint.get.responses.200.schema.type": "array",
	"paths./BikePoint.get.summary": "Gets all bike point locations. The Place object has an addtionalProperties array which contains the nbBikes, nbDocks and nbSpaces\r\n            numbers which give the status of the BikePoint. A mismatch in these numbers i.e. nbDocks - (nbBikes + nbSpaces) != 0 indicates broken docks.",
	"paths./BikePoint.get.tags.length": 1,
	"paths./BikePoint.get.tags[0]": "BikePoint",
	"paths./BikePoint/Search.get.deprecated": false,
	"paths./BikePoint/Search.get.operationId": "BikePoint_Search",
	"paths./BikePoint/Search.get.parameters.length": 1,
	"paths./BikePoint/Search.get.parameters[0].description": "The search term e.g. \"St. James\"",
	"paths./BikePoint/Search.get.parameters[0].in": "query",
	"paths./BikePoint/Search.get.parameters[0].name": "query",
	"paths./BikePoint/Search.get.parameters[0].required": true,
	"paths./BikePoint/Search.get.parameters[0].type": "string",
	"paths./BikePoint/Search.get.produces.length": 4,
	"paths./BikePoint/Search.get.produces[0]": "application/json",
	"paths./BikePoint/Search.get.produces[1]": "text/json",
	"paths./BikePoint/Search.get.produces[2]": "application/xml",
	"paths./BikePoint/Search.get.produces[3]": "text/xml",
	"paths./BikePoint/Search.get.responses.200.description": "OK",
	"paths./BikePoint/Search.get.responses.200.schema.items.$ref": "#/definitions/Place",
	"paths./BikePoint/Search.get.responses.200.schema.type": "array",
	"paths./BikePoint/Search.get.summary": "Search for bike stations by their name, a bike point's name often contains information about the name of the street\r\n            or nearby landmarks, for example. Note that the search result does not contain the PlaceProperties i.e. the status\r\n            or occupancy of the BikePoint, to get that information you should retrieve the BikePoint by its id on /BikePoint/id.",
	"paths./BikePoint/Search.get.tags.length": 1,
	"paths./BikePoint/Search.get.tags[0]": "BikePoint",
	"paths./BikePoint/{id}.get.deprecated": false,
	"paths./BikePoint/{id}.get.operationId": "BikePoint_Get",
	"paths./BikePoint/{id}.get.parameters.length": 1,
	"paths./BikePoint/{id}.get.parameters[0].description": "A bike point id (a list of ids can be obtained from the above BikePoint call)",
	"paths./BikePoint/{id}.get.parameters[0].in": "path",
	"paths./BikePoint/{id}.get.parameters[0].name": "id",
	"paths./BikePoint/{id}.get.parameters[0].required": true,
	"paths./BikePoint/{id}.get.parameters[0].type": "string",
	"paths./BikePoint/{id}.get.produces.length": 4,
	"paths./BikePoint/{id}.get.produces[0]": "application/json",
	"paths./BikePoint/{id}.get.produces[1]": "text/json",
	"paths./BikePoint/{id}.get.produces[2]": "application/xml",
	"paths./BikePoint/{id}.get.produces[3]": "text/xml",
	"paths./BikePoint/{id}.get.responses.200.description": "OK",
	"paths./BikePoint/{id}.get.responses.200.schema.$ref": "#/definitions/Place",
	"paths./BikePoint/{id}.get.summary": "Gets the bike point with the given id.",
	"paths./BikePoint/{id}.get.tags.length": 1,
	"paths./BikePoint/{id}.get.tags[0]": "BikePoint",
	"paths./Cabwise/search.get.deprecated": false,
	"paths./Cabwise/search.get.operationId": "Cabwise_Get",
	"paths./Cabwise/search.get.parameters.length": 10,
	"paths./Cabwise/search.get.parameters[0].description": "Latitude",
	"paths./Cabwise/search.get.parameters[0].format": "double",
	"paths./Cabwise/search.get.parameters[0].in": "query",
	"paths./Cabwise/search.get.parameters[0].name": "lat",
	"paths./Cabwise/search.get.parameters[0].required": true,
	"paths./Cabwise/search.get.parameters[0].type": "number",
	"paths./Cabwise/search.get.parameters[1].description": "Longitude",
	"paths./Cabwise/search.get.parameters[1].format": "double",
	"paths./Cabwise/search.get.parameters[1].in": "query",
	"paths./Cabwise/search.get.parameters[1].name": "lon",
	"paths./Cabwise/search.get.parameters[1].required": true,
	"paths./Cabwise/search.get.parameters[1].type": "number",
	"paths./Cabwise/search.get.parameters[2].description": "Operator Type e.g Minicab, Executive, Limousine",
	"paths./Cabwise/search.get.parameters[2].in": "query",
	"paths./Cabwise/search.get.parameters[2].name": "optype",
	"paths./Cabwise/search.get.parameters[2].required": false,
	"paths./Cabwise/search.get.parameters[2].type": "string",
	"paths./Cabwise/search.get.parameters[3].description": "Wheelchair accessible",
	"paths./Cabwise/search.get.parameters[3].in": "query",
	"paths./Cabwise/search.get.parameters[3].name": "wc",
	"paths./Cabwise/search.get.parameters[3].required": false,
	"paths./Cabwise/search.get.parameters[3].type": "string",
	"paths./Cabwise/search.get.parameters[4].description": "The radius of the bounding circle in metres",
	"paths./Cabwise/search.get.parameters[4].format": "double",
	"paths./Cabwise/search.get.parameters[4].in": "query",
	"paths./Cabwise/search.get.parameters[4].name": "radius",
	"paths./Cabwise/search.get.parameters[4].required": false,
	"paths./Cabwise/search.get.parameters[4].type": "number",
	"paths./Cabwise/search.get.parameters[5].description": "Trading name of operating company",
	"paths./Cabwise/search.get.parameters[5].in": "query",
	"paths./Cabwise/search.get.parameters[5].name": "name",
	"paths./Cabwise/search.get.parameters[5].required": false,
	"paths./Cabwise/search.get.parameters[5].type": "string",
	"paths./Cabwise/search.get.parameters[6].description": "An optional parameter to limit the number of results return. Default and maximum is 20.",
	"paths./Cabwise/search.get.parameters[6].format": "int32",
	"paths./Cabwise/search.get.parameters[6].in": "query",
	"paths./Cabwise/search.get.parameters[6].name": "maxResults",
	"paths./Cabwise/search.get.parameters[6].required": false,
	"paths./Cabwise/search.get.parameters[6].type": "integer",
	"paths./Cabwise/search.get.parameters[7].description": "Legacy Format",
	"paths./Cabwise/search.get.parameters[7].in": "query",
	"paths./Cabwise/search.get.parameters[7].name": "legacyFormat",
	"paths./Cabwise/search.get.parameters[7].required": false,
	"paths./Cabwise/search.get.parameters[7].type": "boolean",
	"paths./Cabwise/search.get.parameters[8].description": "Force Xml",
	"paths./Cabwise/search.get.parameters[8].in": "query",
	"paths./Cabwise/search.get.parameters[8].name": "forceXml",
	"paths./Cabwise/search.get.parameters[8].required": false,
	"paths./Cabwise/search.get.parameters[8].type": "boolean",
	"paths./Cabwise/search.get.parameters[9].description": "Twenty Four Seven Only",
	"paths./Cabwise/search.get.parameters[9].in": "query",
	"paths./Cabwise/search.get.parameters[9].name": "twentyFourSevenOnly",
	"paths./Cabwise/search.get.parameters[9].required": false,
	"paths./Cabwise/search.get.parameters[9].type": "boolean",
	"paths./Cabwise/search.get.produces.length": 4,
	"paths./Cabwise/search.get.produces[0]": "application/json",
	"paths./Cabwise/search.get.produces[1]": "text/json",
	"paths./Cabwise/search.get.produces[2]": "application/xml",
	"paths./Cabwise/search.get.produces[3]": "text/xml",
	"paths./Cabwise/search.get.responses.200.description": "OK",
	"paths./Cabwise/search.get.responses.200.schema.$ref": "#/definitions/Object",
	"paths./Cabwise/search.get.summary": "Gets taxis and minicabs contact information",
	"paths./Cabwise/search.get.tags.length": 1,
	"paths./Cabwise/search.get.tags[0]": "Cabwise",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.deprecated": false,
	"paths./Journey/JourneyResults/{from}/to/{to}.get.operationId": "Journey_JourneyResults",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters.length": 25,
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[0].description": "Origin of the journey. Can be WGS84 coordinates expressed as \"lat,long\", a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[0].in": "path",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[0].name": "from",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[0].required": true,
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[0].type": "string",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[10].description": "An optional name to associate with the origin of the journey in the results.",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[10].in": "query",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[10].name": "fromName",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[10].required": false,
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[10].type": "string",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[11].description": "An optional name to associate with the destination of the journey in the results.",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[11].in": "query",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[11].name": "toName",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[11].required": false,
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[11].type": "string",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[12].description": "An optional name to associate with the via point of the journey in the results.",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[12].in": "query",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[12].name": "viaName",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[12].required": false,
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[12].type": "string",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[13].description": "The max walking time in minutes for transfer eg. \"120\"",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[13].in": "query",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[13].name": "maxTransferMinutes",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[13].required": false,
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[13].type": "string",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[14].description": "The max walking time in minutes for journeys eg. \"120\"",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[14].in": "query",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[14].name": "maxWalkingMinutes",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[14].required": false,
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[14].type": "string",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[15].description": "The walking speed. eg possible options: \"slow\" | \"average\" | \"fast\".",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[15].enum.length": 3,
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[15].enum[0]": "Slow",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[15].enum[1]": "Average",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[15].enum[2]": "Fast",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[15].in": "query",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[15].name": "walkingSpeed",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[15].required": false,
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[15].type": "string",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[16].description": "The cycle preference. eg possible options: \"allTheWay\" | \"leaveAtStation\" | \"takeOnTransport\" | \"cycleHire\"",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[16].enum.length": 5,
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[16].enum[0]": "None",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[16].enum[1]": "LeaveAtStation",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[16].enum[2]": "TakeOnTransport",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[16].enum[3]": "AllTheWay",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[16].enum[4]": "CycleHire",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[16].in": "query",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[16].name": "cyclePreference",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[16].required": false,
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[16].type": "string",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[17].description": "Time adjustment command. eg possible options: \"TripFirst\" | \"TripLast\"",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[17].in": "query",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[17].name": "adjustment",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[17].required": false,
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[17].type": "string",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[18].collectionFormat": "multi",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[18].description": "A comma separated list of cycling proficiency levels. eg possible options: \"easy,moderate,fast\"",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[18].in": "query",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[18].items.enum.length": 3,
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[18].items.enum[0]": "Easy",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[18].items.enum[1]": "Moderate",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[18].items.enum[2]": "Fast",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[18].items.type": "string",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[18].name": "bikeProficiency",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[18].required": false,
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[18].type": "array",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[19].description": "Option to determine whether to return alternative cycling journey",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[19].in": "query",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[19].name": "alternativeCycle",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[19].required": false,
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[19].type": "boolean",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[1].description": "Destination of the journey. Can be WGS84 coordinates expressed as \"lat,long\", a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[1].in": "path",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[1].name": "to",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[1].required": true,
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[1].type": "string",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[20].description": "Option to determine whether to return alternative walking journey",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[20].in": "query",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[20].name": "alternativeWalking",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[20].required": false,
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[20].type": "boolean",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[21].description": "Flag to determine whether certain text (e.g. walking instructions) should be output with HTML tags or not.",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[21].in": "query",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[21].name": "applyHtmlMarkup",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[21].required": false,
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[21].type": "boolean",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[22].description": "A boolean to indicate whether or not to return 3 public transport journeys, a bus journey, a cycle hire journey, a personal cycle journey and a walking journey",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[22].in": "query",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[22].name": "useMultiModalCall",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[22].required": false,
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[22].type": "boolean",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[23].description": "A boolean to indicate whether to optimize journeys using walking",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[23].in": "query",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[23].name": "walkingOptimization",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[23].required": false,
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[23].type": "boolean",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[24].description": "A boolean to indicate whether to return one or more taxi journeys. Note, setting this to true will override \"useMultiModalCall\".",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[24].in": "query",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[24].name": "taxiOnlyTrip",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[24].required": false,
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[24].type": "boolean",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[2].description": "Travel through point on the journey. Can be WGS84 coordinates expressed as \"lat,long\", a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[2].in": "query",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[2].name": "via",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[2].required": false,
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[2].type": "string",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[3].description": "Does the journey cover stops outside London? eg. \"nationalSearch=true\"",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[3].in": "query",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[3].name": "nationalSearch",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[3].required": false,
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[3].type": "boolean",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[4].description": "The date must be in yyyyMMdd format",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[4].in": "query",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[4].name": "date",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[4].required": false,
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[4].type": "string",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[5].description": "The time must be in HHmm format",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[5].in": "query",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[5].name": "time",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[5].required": false,
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[5].type": "string",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[6].description": "Does the time given relate to arrival or leaving time? Possible options: \"departing\" | \"arriving\"",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[6].enum.length": 2,
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[6].enum[0]": "Arriving",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[6].enum[1]": "Departing",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[6].in": "query",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[6].name": "timeIs",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[6].required": false,
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[6].type": "string",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[7].description": "The journey preference eg possible options: \"leastinterchange\" | \"leasttime\" | \"leastwalking\"",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[7].enum.length": 3,
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[7].enum[0]": "LeastInterchange",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[7].enum[1]": "LeastTime",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[7].enum[2]": "LeastWalking",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[7].in": "query",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[7].name": "journeyPreference",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[7].required": false,
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[7].type": "string",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[8].collectionFormat": "multi",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[8].description": "The mode must be a comma separated list of modes. eg possible options: \"public-bus,overground,train,tube,coach,dlr,cablecar,tram,river,walking,cycle\"",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[8].in": "query",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[8].items.type": "string",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[8].name": "mode",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[8].required": false,
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[8].type": "array",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[9].collectionFormat": "multi",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[9].description": "The accessibility preference must be a comma separated list eg. \"noSolidStairs,noEscalators,noElevators,stepFreeToVehicle,stepFreeToPlatform\"",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[9].in": "query",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[9].items.enum.length": 6,
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[9].items.enum[0]": "NoRequirements",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[9].items.enum[1]": "NoSolidStairs",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[9].items.enum[2]": "NoEscalators",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[9].items.enum[3]": "NoElevators",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[9].items.enum[4]": "StepFreeToVehicle",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[9].items.enum[5]": "StepFreeToPlatform",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[9].items.type": "string",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[9].name": "accessibilityPreference",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[9].required": false,
	"paths./Journey/JourneyResults/{from}/to/{to}.get.parameters[9].type": "array",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.produces.length": 4,
	"paths./Journey/JourneyResults/{from}/to/{to}.get.produces[0]": "application/json",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.produces[1]": "text/json",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.produces[2]": "application/xml",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.produces[3]": "text/xml",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.responses.200.description": "OK",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.responses.200.schema.$ref": "#/definitions/ItineraryResult",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.summary": "Perform a Journey Planner search from the parameters specified in simple types",
	"paths./Journey/JourneyResults/{from}/to/{to}.get.tags.length": 1,
	"paths./Journey/JourneyResults/{from}/to/{to}.get.tags[0]": "Journey",
	"paths./Journey/Meta/Modes.get.deprecated": false,
	"paths./Journey/Meta/Modes.get.operationId": "Journey_Meta",
	"paths./Journey/Meta/Modes.get.produces.length": 4,
	"paths./Journey/Meta/Modes.get.produces[0]": "application/json",
	"paths./Journey/Meta/Modes.get.produces[1]": "text/json",
	"paths./Journey/Meta/Modes.get.produces[2]": "application/xml",
	"paths./Journey/Meta/Modes.get.produces[3]": "text/xml",
	"paths./Journey/Meta/Modes.get.responses.200.description": "OK",
	"paths./Journey/Meta/Modes.get.responses.200.schema.items.$ref": "#/definitions/Mode",
	"paths./Journey/Meta/Modes.get.responses.200.schema.type": "array",
	"paths./Journey/Meta/Modes.get.summary": "Gets a list of all of the available journey planner modes",
	"paths./Journey/Meta/Modes.get.tags.length": 1,
	"paths./Journey/Meta/Modes.get.tags[0]": "Journey",
	"paths./Line/Meta/DisruptionCategories.get.deprecated": false,
	"paths./Line/Meta/DisruptionCategories.get.operationId": "Line_MetaDisruptionCategories",
	"paths./Line/Meta/DisruptionCategories.get.produces.length": 4,
	"paths./Line/Meta/DisruptionCategories.get.produces[0]": "application/json",
	"paths./Line/Meta/DisruptionCategories.get.produces[1]": "text/json",
	"paths./Line/Meta/DisruptionCategories.get.produces[2]": "application/xml",
	"paths./Line/Meta/DisruptionCategories.get.produces[3]": "text/xml",
	"paths./Line/Meta/DisruptionCategories.get.responses.200.description": "OK",
	"paths./Line/Meta/DisruptionCategories.get.responses.200.schema.items.type": "string",
	"paths./Line/Meta/DisruptionCategories.get.responses.200.schema.type": "array",
	"paths./Line/Meta/DisruptionCategories.get.summary": "Gets a list of valid disruption categories",
	"paths./Line/Meta/DisruptionCategories.get.tags.length": 1,
	"paths./Line/Meta/DisruptionCategories.get.tags[0]": "Line",
	"paths./Line/Meta/Modes.get.deprecated": false,
	"paths./Line/Meta/Modes.get.operationId": "Line_MetaModes",
	"paths./Line/Meta/Modes.get.produces.length": 4,
	"paths./Line/Meta/Modes.get.produces[0]": "application/json",
	"paths./Line/Meta/Modes.get.produces[1]": "text/json",
	"paths./Line/Meta/Modes.get.produces[2]": "application/xml",
	"paths./Line/Meta/Modes.get.produces[3]": "text/xml",
	"paths./Line/Meta/Modes.get.responses.200.description": "OK",
	"paths./Line/Meta/Modes.get.responses.200.schema.items.$ref": "#/definitions/Mode",
	"paths./Line/Meta/Modes.get.responses.200.schema.type": "array",
	"paths./Line/Meta/Modes.get.summary": "Gets a list of valid modes",
	"paths./Line/Meta/Modes.get.tags.length": 1,
	"paths./Line/Meta/Modes.get.tags[0]": "Line",
	"paths./Line/Meta/ServiceTypes.get.deprecated": false,
	"paths./Line/Meta/ServiceTypes.get.operationId": "Line_MetaServiceTypes",
	"paths./Line/Meta/ServiceTypes.get.produces.length": 4,
	"paths./Line/Meta/ServiceTypes.get.produces[0]": "application/json",
	"paths./Line/Meta/ServiceTypes.get.produces[1]": "text/json",
	"paths./Line/Meta/ServiceTypes.get.produces[2]": "application/xml",
	"paths./Line/Meta/ServiceTypes.get.produces[3]": "text/xml",
	"paths./Line/Meta/ServiceTypes.get.responses.200.description": "OK",
	"paths./Line/Meta/ServiceTypes.get.responses.200.schema.items.type": "string",
	"paths./Line/Meta/ServiceTypes.get.responses.200.schema.type": "array",
	"paths./Line/Meta/ServiceTypes.get.summary": "Gets a list of valid ServiceTypes to filter on",
	"paths./Line/Meta/ServiceTypes.get.tags.length": 1,
	"paths./Line/Meta/ServiceTypes.get.tags[0]": "Line",
	"paths./Line/Meta/Severity.get.deprecated": false,
	"paths./Line/Meta/Severity.get.operationId": "Line_MetaSeverity",
	"paths./Line/Meta/Severity.get.produces.length": 4,
	"paths./Line/Meta/Severity.get.produces[0]": "application/json",
	"paths./Line/Meta/Severity.get.produces[1]": "text/json",
	"paths./Line/Meta/Severity.get.produces[2]": "application/xml",
	"paths./Line/Meta/Severity.get.produces[3]": "text/xml",
	"paths./Line/Meta/Severity.get.responses.200.description": "OK",
	"paths./Line/Meta/Severity.get.responses.200.schema.items.$ref": "#/definitions/StatusSeverity",
	"paths./Line/Meta/Severity.get.responses.200.schema.type": "array",
	"paths./Line/Meta/Severity.get.summary": "Gets a list of valid severity codes",
	"paths./Line/Meta/Severity.get.tags.length": 1,
	"paths./Line/Meta/Severity.get.tags[0]": "Line",
	"paths./Line/Mode/{modes}.get.deprecated": false,
	"paths./Line/Mode/{modes}.get.operationId": "Line_GetByMode",
	"paths./Line/Mode/{modes}.get.parameters.length": 1,
	"paths./Line/Mode/{modes}.get.parameters[0].description": "A comma-separated list of modes e.g. tube,dlr",
	"paths./Line/Mode/{modes}.get.parameters[0].in": "path",
	"paths./Line/Mode/{modes}.get.parameters[0].items.type": "string",
	"paths./Line/Mode/{modes}.get.parameters[0].name": "modes",
	"paths./Line/Mode/{modes}.get.parameters[0].required": true,
	"paths./Line/Mode/{modes}.get.parameters[0].type": "array",
	"paths./Line/Mode/{modes}.get.produces.length": 4,
	"paths./Line/Mode/{modes}.get.produces[0]": "application/json",
	"paths./Line/Mode/{modes}.get.produces[1]": "text/json",
	"paths./Line/Mode/{modes}.get.produces[2]": "application/xml",
	"paths./Line/Mode/{modes}.get.produces[3]": "text/xml",
	"paths./Line/Mode/{modes}.get.responses.200.description": "OK",
	"paths./Line/Mode/{modes}.get.responses.200.schema.items.$ref": "#/definitions/Line",
	"paths./Line/Mode/{modes}.get.responses.200.schema.type": "array",
	"paths./Line/Mode/{modes}.get.summary": "Gets lines that serve the given modes.",
	"paths./Line/Mode/{modes}.get.tags.length": 1,
	"paths./Line/Mode/{modes}.get.tags[0]": "Line",
	"paths./Line/Mode/{modes}/Disruption.get.deprecated": false,
	"paths./Line/Mode/{modes}/Disruption.get.operationId": "Line_DisruptionByMode",
	"paths./Line/Mode/{modes}/Disruption.get.parameters.length": 1,
	"paths./Line/Mode/{modes}/Disruption.get.parameters[0].description": "A comma-separated list of modes e.g. tube,dlr",
	"paths./Line/Mode/{modes}/Disruption.get.parameters[0].in": "path",
	"paths./Line/Mode/{modes}/Disruption.get.parameters[0].items.type": "string",
	"paths./Line/Mode/{modes}/Disruption.get.parameters[0].name": "modes",
	"paths./Line/Mode/{modes}/Disruption.get.parameters[0].required": true,
	"paths./Line/Mode/{modes}/Disruption.get.parameters[0].type": "array",
	"paths./Line/Mode/{modes}/Disruption.get.produces.length": 4,
	"paths./Line/Mode/{modes}/Disruption.get.produces[0]": "application/json",
	"paths./Line/Mode/{modes}/Disruption.get.produces[1]": "text/json",
	"paths./Line/Mode/{modes}/Disruption.get.produces[2]": "application/xml",
	"paths./Line/Mode/{modes}/Disruption.get.produces[3]": "text/xml",
	"paths./Line/Mode/{modes}/Disruption.get.responses.200.description": "OK",
	"paths./Line/Mode/{modes}/Disruption.get.responses.200.schema.items.$ref": "#/definitions/Disruption",
	"paths./Line/Mode/{modes}/Disruption.get.responses.200.schema.type": "array",
	"paths./Line/Mode/{modes}/Disruption.get.summary": "Get disruptions for all lines of the given modes.",
	"paths./Line/Mode/{modes}/Disruption.get.tags.length": 1,
	"paths./Line/Mode/{modes}/Disruption.get.tags[0]": "Line",
	"paths./Line/Mode/{modes}/Route.get.deprecated": false,
	"paths./Line/Mode/{modes}/Route.get.operationId": "Line_RouteByMode",
	"paths./Line/Mode/{modes}/Route.get.parameters.length": 2,
	"paths./Line/Mode/{modes}/Route.get.parameters[0].description": "A comma-separated list of modes e.g. tube,dlr",
	"paths./Line/Mode/{modes}/Route.get.parameters[0].in": "path",
	"paths./Line/Mode/{modes}/Route.get.parameters[0].items.type": "string",
	"paths./Line/Mode/{modes}/Route.get.parameters[0].name": "modes",
	"paths./Line/Mode/{modes}/Route.get.parameters[0].required": true,
	"paths./Line/Mode/{modes}/Route.get.parameters[0].type": "array",
	"paths./Line/Mode/{modes}/Route.get.parameters[1].collectionFormat": "multi",
	"paths./Line/Mode/{modes}/Route.get.parameters[1].description": "A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified",
	"paths./Line/Mode/{modes}/Route.get.parameters[1].in": "query",
	"paths./Line/Mode/{modes}/Route.get.parameters[1].items.enum.length": 2,
	"paths./Line/Mode/{modes}/Route.get.parameters[1].items.enum[0]": "Regular",
	"paths./Line/Mode/{modes}/Route.get.parameters[1].items.enum[1]": "Night",
	"paths./Line/Mode/{modes}/Route.get.parameters[1].items.type": "string",
	"paths./Line/Mode/{modes}/Route.get.parameters[1].name": "serviceTypes",
	"paths./Line/Mode/{modes}/Route.get.parameters[1].required": false,
	"paths./Line/Mode/{modes}/Route.get.parameters[1].type": "array",
	"paths./Line/Mode/{modes}/Route.get.produces.length": 4,
	"paths./Line/Mode/{modes}/Route.get.produces[0]": "application/json",
	"paths./Line/Mode/{modes}/Route.get.produces[1]": "text/json",
	"paths./Line/Mode/{modes}/Route.get.produces[2]": "application/xml",
	"paths./Line/Mode/{modes}/Route.get.produces[3]": "text/xml",
	"paths./Line/Mode/{modes}/Route.get.responses.200.description": "OK",
	"paths./Line/Mode/{modes}/Route.get.responses.200.schema.items.$ref": "#/definitions/Line",
	"paths./Line/Mode/{modes}/Route.get.responses.200.schema.type": "array",
	"paths./Line/Mode/{modes}/Route.get.summary": "Gets all lines and their valid routes for given modes, including the name and id of the originating and terminating stops for each route",
	"paths./Line/Mode/{modes}/Route.get.tags.length": 1,
	"paths./Line/Mode/{modes}/Route.get.tags[0]": "Line",
	"paths./Line/Mode/{modes}/Status.get.deprecated": false,
	"paths./Line/Mode/{modes}/Status.get.operationId": "Line_StatusByMode",
	"paths./Line/Mode/{modes}/Status.get.parameters.length": 2,
	"paths./Line/Mode/{modes}/Status.get.parameters[0].description": "A comma-separated list of modes to filter by. e.g. tube,dlr",
	"paths./Line/Mode/{modes}/Status.get.parameters[0].in": "path",
	"paths./Line/Mode/{modes}/Status.get.parameters[0].items.type": "string",
	"paths./Line/Mode/{modes}/Status.get.parameters[0].name": "modes",
	"paths./Line/Mode/{modes}/Status.get.parameters[0].required": true,
	"paths./Line/Mode/{modes}/Status.get.parameters[0].type": "array",
	"paths./Line/Mode/{modes}/Status.get.parameters[1].description": "Include details of the disruptions that are causing the line status including the affected stops and routes",
	"paths./Line/Mode/{modes}/Status.get.parameters[1].in": "query",
	"paths./Line/Mode/{modes}/Status.get.parameters[1].name": "detail",
	"paths./Line/Mode/{modes}/Status.get.parameters[1].required": false,
	"paths./Line/Mode/{modes}/Status.get.parameters[1].type": "boolean",
	"paths./Line/Mode/{modes}/Status.get.produces.length": 4,
	"paths./Line/Mode/{modes}/Status.get.produces[0]": "application/json",
	"paths./Line/Mode/{modes}/Status.get.produces[1]": "text/json",
	"paths./Line/Mode/{modes}/Status.get.produces[2]": "application/xml",
	"paths./Line/Mode/{modes}/Status.get.produces[3]": "text/xml",
	"paths./Line/Mode/{modes}/Status.get.responses.200.description": "OK",
	"paths./Line/Mode/{modes}/Status.get.responses.200.schema.items.$ref": "#/definitions/Line",
	"paths./Line/Mode/{modes}/Status.get.responses.200.schema.type": "array",
	"paths./Line/Mode/{modes}/Status.get.summary": "Gets the line status of for all lines for the given modes",
	"paths./Line/Mode/{modes}/Status.get.tags.length": 1,
	"paths./Line/Mode/{modes}/Status.get.tags[0]": "Line",
	"paths./Line/Route.get.deprecated": false,
	"paths./Line/Route.get.operationId": "Line_Route",
	"paths./Line/Route.get.parameters.length": 1,
	"paths./Line/Route.get.parameters[0].collectionFormat": "multi",
	"paths./Line/Route.get.parameters[0].description": "A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified",
	"paths./Line/Route.get.parameters[0].in": "query",
	"paths./Line/Route.get.parameters[0].items.enum.length": 2,
	"paths./Line/Route.get.parameters[0].items.enum[0]": "Regular",
	"paths./Line/Route.get.parameters[0].items.enum[1]": "Night",
	"paths./Line/Route.get.parameters[0].items.type": "string",
	"paths./Line/Route.get.parameters[0].name": "serviceTypes",
	"paths./Line/Route.get.parameters[0].required": false,
	"paths./Line/Route.get.parameters[0].type": "array",
	"paths./Line/Route.get.produces.length": 4,
	"paths./Line/Route.get.produces[0]": "application/json",
	"paths./Line/Route.get.produces[1]": "text/json",
	"paths./Line/Route.get.produces[2]": "application/xml",
	"paths./Line/Route.get.produces[3]": "text/xml",
	"paths./Line/Route.get.responses.200.description": "OK",
	"paths./Line/Route.get.responses.200.schema.items.$ref": "#/definitions/Line",
	"paths./Line/Route.get.responses.200.schema.type": "array",
	"paths./Line/Route.get.summary": "Get all valid routes for all lines, including the name and id of the originating and terminating stops for each route.",
	"paths./Line/Route.get.tags.length": 1,
	"paths./Line/Route.get.tags[0]": "Line",
	"paths./Line/Search/{query}.get.deprecated": false,
	"paths./Line/Search/{query}.get.operationId": "Line_Search",
	"paths./Line/Search/{query}.get.parameters.length": 3,
	"paths./Line/Search/{query}.get.parameters[0].description": "Search term e.g victoria",
	"paths./Line/Search/{query}.get.parameters[0].in": "path",
	"paths./Line/Search/{query}.get.parameters[0].name": "query",
	"paths./Line/Search/{query}.get.parameters[0].required": true,
	"paths./Line/Search/{query}.get.parameters[0].type": "string",
	"paths./Line/Search/{query}.get.parameters[1].collectionFormat": "multi",
	"paths./Line/Search/{query}.get.parameters[1].description": "Optionally filter by the specified modes",
	"paths./Line/Search/{query}.get.parameters[1].in": "query",
	"paths./Line/Search/{query}.get.parameters[1].items.type": "string",
	"paths./Line/Search/{query}.get.parameters[1].name": "modes",
	"paths./Line/Search/{query}.get.parameters[1].required": false,
	"paths./Line/Search/{query}.get.parameters[1].type": "array",
	"paths./Line/Search/{query}.get.parameters[2].collectionFormat": "multi",
	"paths./Line/Search/{query}.get.parameters[2].description": "A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified",
	"paths./Line/Search/{query}.get.parameters[2].in": "query",
	"paths./Line/Search/{query}.get.parameters[2].items.enum.length": 2,
	"paths./Line/Search/{query}.get.parameters[2].items.enum[0]": "Regular",
	"paths./Line/Search/{query}.get.parameters[2].items.enum[1]": "Night",
	"paths./Line/Search/{query}.get.parameters[2].items.type": "string",
	"paths./Line/Search/{query}.get.parameters[2].name": "serviceTypes",
	"paths./Line/Search/{query}.get.parameters[2].required": false,
	"paths./Line/Search/{query}.get.parameters[2].type": "array",
	"paths./Line/Search/{query}.get.produces.length": 4,
	"paths./Line/Search/{query}.get.produces[0]": "application/json",
	"paths./Line/Search/{query}.get.produces[1]": "text/json",
	"paths./Line/Search/{query}.get.produces[2]": "application/xml",
	"paths./Line/Search/{query}.get.produces[3]": "text/xml",
	"paths./Line/Search/{query}.get.responses.200.description": "OK",
	"paths./Line/Search/{query}.get.responses.200.schema.$ref": "#/definitions/RouteSearchResponse",
	"paths./Line/Search/{query}.get.summary": "Search for lines or routes matching the query string",
	"paths./Line/Search/{query}.get.tags.length": 1,
	"paths./Line/Search/{query}.get.tags[0]": "Line",
	"paths./Line/Status/{severity}.get.deprecated": false,
	"paths./Line/Status/{severity}.get.operationId": "Line_StatusBySeverity",
	"paths./Line/Status/{severity}.get.parameters.length": 1,
	"paths./Line/Status/{severity}.get.parameters[0].description": "The level of severity (eg: a number from 0 to 14)",
	"paths./Line/Status/{severity}.get.parameters[0].format": "int32",
	"paths./Line/Status/{severity}.get.parameters[0].in": "path",
	"paths./Line/Status/{severity}.get.parameters[0].name": "severity",
	"paths./Line/Status/{severity}.get.parameters[0].required": true,
	"paths./Line/Status/{severity}.get.parameters[0].type": "integer",
	"paths./Line/Status/{severity}.get.produces.length": 4,
	"paths./Line/Status/{severity}.get.produces[0]": "application/json",
	"paths./Line/Status/{severity}.get.produces[1]": "text/json",
	"paths./Line/Status/{severity}.get.produces[2]": "application/xml",
	"paths./Line/Status/{severity}.get.produces[3]": "text/xml",
	"paths./Line/Status/{severity}.get.responses.200.description": "OK",
	"paths./Line/Status/{severity}.get.responses.200.schema.items.$ref": "#/definitions/Line",
	"paths./Line/Status/{severity}.get.responses.200.schema.type": "array",
	"paths./Line/Status/{severity}.get.summary": "Gets the line status for all lines with a given severity\r\n            A list of valid severity codes can be obtained from a call to Line/Meta/Severity",
	"paths./Line/Status/{severity}.get.tags.length": 1,
	"paths./Line/Status/{severity}.get.tags[0]": "Line",
	"paths./Line/{ids}.get.deprecated": false,
	"paths./Line/{ids}.get.operationId": "Line_Get",
	"paths./Line/{ids}.get.parameters.length": 1,
	"paths./Line/{ids}.get.parameters[0].description": "A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.",
	"paths./Line/{ids}.get.parameters[0].in": "path",
	"paths./Line/{ids}.get.parameters[0].items.type": "string",
	"paths./Line/{ids}.get.parameters[0].name": "ids",
	"paths./Line/{ids}.get.parameters[0].required": true,
	"paths./Line/{ids}.get.parameters[0].type": "array",
	"paths./Line/{ids}.get.produces.length": 4,
	"paths./Line/{ids}.get.produces[0]": "application/json",
	"paths./Line/{ids}.get.produces[1]": "text/json",
	"paths./Line/{ids}.get.produces[2]": "application/xml",
	"paths./Line/{ids}.get.produces[3]": "text/xml",
	"paths./Line/{ids}.get.responses.200.description": "OK",
	"paths./Line/{ids}.get.responses.200.schema.items.$ref": "#/definitions/Line",
	"paths./Line/{ids}.get.responses.200.schema.type": "array",
	"paths./Line/{ids}.get.summary": "Gets lines that match the specified line ids.",
	"paths./Line/{ids}.get.tags.length": 1,
	"paths./Line/{ids}.get.tags[0]": "Line",
	"paths./Line/{ids}/Arrivals/{stopPointId}.get.deprecated": false,
	"paths./Line/{ids}/Arrivals/{stopPointId}.get.operationId": "Line_Arrivals",
	"paths./Line/{ids}/Arrivals/{stopPointId}.get.parameters.length": 4,
	"paths./Line/{ids}/Arrivals/{stopPointId}.get.parameters[0].description": "A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.",
	"paths./Line/{ids}/Arrivals/{stopPointId}.get.parameters[0].in": "path",
	"paths./Line/{ids}/Arrivals/{stopPointId}.get.parameters[0].items.type": "string",
	"paths./Line/{ids}/Arrivals/{stopPointId}.get.parameters[0].name": "ids",
	"paths./Line/{ids}/Arrivals/{stopPointId}.get.parameters[0].required": true,
	"paths./Line/{ids}/Arrivals/{stopPointId}.get.parameters[0].type": "array",
	"paths./Line/{ids}/Arrivals/{stopPointId}.get.parameters[1].description": "Optional. Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)",
	"paths./Line/{ids}/Arrivals/{stopPointId}.get.parameters[1].in": "path",
	"paths./Line/{ids}/Arrivals/{stopPointId}.get.parameters[1].name": "stopPointId",
	"paths./Line/{ids}/Arrivals/{stopPointId}.get.parameters[1].required": true,
	"paths./Line/{ids}/Arrivals/{stopPointId}.get.parameters[1].type": "string",
	"paths./Line/{ids}/Arrivals/{stopPointId}.get.parameters[2].description": "Optional. The direction of travel. Can be inbound or outbound or all. If left blank, and destinationStopId is set, will default to all",
	"paths./Line/{ids}/Arrivals/{stopPointId}.get.parameters[2].enum.length": 3,
	"paths./Line/{ids}/Arrivals/{stopPointId}.get.parameters[2].enum[0]": "inbound",
	"paths./Line/{ids}/Arrivals/{stopPointId}.get.parameters[2].enum[1]": "outbound",
	"paths./Line/{ids}/Arrivals/{stopPointId}.get.parameters[2].enum[2]": "all",
	"paths./Line/{ids}/Arrivals/{stopPointId}.get.parameters[2].in": "query",
	"paths./Line/{ids}/Arrivals/{stopPointId}.get.parameters[2].name": "direction",
	"paths./Line/{ids}/Arrivals/{stopPointId}.get.parameters[2].required": false,
	"paths./Line/{ids}/Arrivals/{stopPointId}.get.parameters[2].type": "string",
	"paths./Line/{ids}/Arrivals/{stopPointId}.get.parameters[3].description": "Optional. Id of destination stop",
	"paths./Line/{ids}/Arrivals/{stopPointId}.get.parameters[3].in": "query",
	"paths./Line/{ids}/Arrivals/{stopPointId}.get.parameters[3].name": "destinationStationId",
	"paths./Line/{ids}/Arrivals/{stopPointId}.get.parameters[3].required": false,
	"paths./Line/{ids}/Arrivals/{stopPointId}.get.parameters[3].type": "string",
	"paths./Line/{ids}/Arrivals/{stopPointId}.get.produces.length": 4,
	"paths./Line/{ids}/Arrivals/{stopPointId}.get.produces[0]": "application/json",
	"paths./Line/{ids}/Arrivals/{stopPointId}.get.produces[1]": "text/json",
	"paths./Line/{ids}/Arrivals/{stopPointId}.get.produces[2]": "application/xml",
	"paths./Line/{ids}/Arrivals/{stopPointId}.get.produces[3]": "text/xml",
	"paths./Line/{ids}/Arrivals/{stopPointId}.get.responses.200.description": "OK",
	"paths./Line/{ids}/Arrivals/{stopPointId}.get.responses.200.schema.items.$ref": "#/definitions/Prediction",
	"paths./Line/{ids}/Arrivals/{stopPointId}.get.responses.200.schema.type": "array",
	"paths./Line/{ids}/Arrivals/{stopPointId}.get.summary": "Get the list of arrival predictions for given line ids based at the given stop",
	"paths./Line/{ids}/Arrivals/{stopPointId}.get.tags.length": 1,
	"paths./Line/{ids}/Arrivals/{stopPointId}.get.tags[0]": "Line",
	"paths./Line/{ids}/Disruption.get.deprecated": false,
	"paths./Line/{ids}/Disruption.get.operationId": "Line_Disruption",
	"paths./Line/{ids}/Disruption.get.parameters.length": 1,
	"paths./Line/{ids}/Disruption.get.parameters[0].description": "A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.",
	"paths./Line/{ids}/Disruption.get.parameters[0].in": "path",
	"paths./Line/{ids}/Disruption.get.parameters[0].items.type": "string",
	"paths./Line/{ids}/Disruption.get.parameters[0].name": "ids",
	"paths./Line/{ids}/Disruption.get.parameters[0].required": true,
	"paths./Line/{ids}/Disruption.get.parameters[0].type": "array",
	"paths./Line/{ids}/Disruption.get.produces.length": 4,
	"paths./Line/{ids}/Disruption.get.produces[0]": "application/json",
	"paths./Line/{ids}/Disruption.get.produces[1]": "text/json",
	"paths./Line/{ids}/Disruption.get.produces[2]": "application/xml",
	"paths./Line/{ids}/Disruption.get.produces[3]": "text/xml",
	"paths./Line/{ids}/Disruption.get.responses.200.description": "OK",
	"paths./Line/{ids}/Disruption.get.responses.200.schema.items.$ref": "#/definitions/Disruption",
	"paths./Line/{ids}/Disruption.get.responses.200.schema.type": "array",
	"paths./Line/{ids}/Disruption.get.summary": "Get disruptions for the given line ids",
	"paths./Line/{ids}/Disruption.get.tags.length": 1,
	"paths./Line/{ids}/Disruption.get.tags[0]": "Line",
	"paths./Line/{ids}/Route.get.deprecated": false,
	"paths./Line/{ids}/Route.get.operationId": "Line_LineRoutesByIds",
	"paths./Line/{ids}/Route.get.parameters.length": 2,
	"paths./Line/{ids}/Route.get.parameters[0].description": "A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.",
	"paths./Line/{ids}/Route.get.parameters[0].in": "path",
	"paths./Line/{ids}/Route.get.parameters[0].items.type": "string",
	"paths./Line/{ids}/Route.get.parameters[0].name": "ids",
	"paths./Line/{ids}/Route.get.parameters[0].required": true,
	"paths./Line/{ids}/Route.get.parameters[0].type": "array",
	"paths./Line/{ids}/Route.get.parameters[1].collectionFormat": "multi",
	"paths./Line/{ids}/Route.get.parameters[1].description": "A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified",
	"paths./Line/{ids}/Route.get.parameters[1].in": "query",
	"paths./Line/{ids}/Route.get.parameters[1].items.enum.length": 2,
	"paths./Line/{ids}/Route.get.parameters[1].items.enum[0]": "Regular",
	"paths./Line/{ids}/Route.get.parameters[1].items.enum[1]": "Night",
	"paths./Line/{ids}/Route.get.parameters[1].items.type": "string",
	"paths./Line/{ids}/Route.get.parameters[1].name": "serviceTypes",
	"paths./Line/{ids}/Route.get.parameters[1].required": false,
	"paths./Line/{ids}/Route.get.parameters[1].type": "array",
	"paths./Line/{ids}/Route.get.produces.length": 4,
	"paths./Line/{ids}/Route.get.produces[0]": "application/json",
	"paths./Line/{ids}/Route.get.produces[1]": "text/json",
	"paths./Line/{ids}/Route.get.produces[2]": "application/xml",
	"paths./Line/{ids}/Route.get.produces[3]": "text/xml",
	"paths./Line/{ids}/Route.get.responses.200.description": "OK",
	"paths./Line/{ids}/Route.get.responses.200.schema.items.$ref": "#/definitions/Line",
	"paths./Line/{ids}/Route.get.responses.200.schema.type": "array",
	"paths./Line/{ids}/Route.get.summary": "Get all valid routes for given line ids, including the name and id of the originating and terminating stops for each route.",
	"paths./Line/{ids}/Route.get.tags.length": 1,
	"paths./Line/{ids}/Route.get.tags[0]": "Line",
	"paths./Line/{ids}/Status.get.deprecated": false,
	"paths./Line/{ids}/Status.get.operationId": "Line_StatusByIds",
	"paths./Line/{ids}/Status.get.parameters.length": 2,
	"paths./Line/{ids}/Status.get.parameters[0].description": "A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.",
	"paths./Line/{ids}/Status.get.parameters[0].in": "path",
	"paths./Line/{ids}/Status.get.parameters[0].items.type": "string",
	"paths./Line/{ids}/Status.get.parameters[0].name": "ids",
	"paths./Line/{ids}/Status.get.parameters[0].required": true,
	"paths./Line/{ids}/Status.get.parameters[0].type": "array",
	"paths./Line/{ids}/Status.get.parameters[1].description": "Include details of the disruptions that are causing the line status including the affected stops and routes",
	"paths./Line/{ids}/Status.get.parameters[1].in": "query",
	"paths./Line/{ids}/Status.get.parameters[1].name": "detail",
	"paths./Line/{ids}/Status.get.parameters[1].required": false,
	"paths./Line/{ids}/Status.get.parameters[1].type": "boolean",
	"paths./Line/{ids}/Status.get.produces.length": 4,
	"paths./Line/{ids}/Status.get.produces[0]": "application/json",
	"paths./Line/{ids}/Status.get.produces[1]": "text/json",
	"paths./Line/{ids}/Status.get.produces[2]": "application/xml",
	"paths./Line/{ids}/Status.get.produces[3]": "text/xml",
	"paths./Line/{ids}/Status.get.responses.200.description": "OK",
	"paths./Line/{ids}/Status.get.responses.200.schema.items.$ref": "#/definitions/Line",
	"paths./Line/{ids}/Status.get.responses.200.schema.type": "array",
	"paths./Line/{ids}/Status.get.summary": "Gets the line status of for given line ids e.g Minor Delays",
	"paths./Line/{ids}/Status.get.tags.length": 1,
	"paths./Line/{ids}/Status.get.tags[0]": "Line",
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.deprecated": false,
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.operationId": "Line_Status",
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.parameters.length": 8,
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.parameters[0].description": "A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.",
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.parameters[0].in": "path",
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.parameters[0].items.type": "string",
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.parameters[0].name": "ids",
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.parameters[0].required": true,
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.parameters[0].type": "array",
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.parameters[1].description": "Include details of the disruptions that are causing the line status including the affected stops and routes",
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.parameters[1].in": "query",
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.parameters[1].name": "detail",
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.parameters[1].required": false,
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.parameters[1].type": "boolean",
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.parameters[2].in": "query",
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.parameters[2].name": "startDate",
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.parameters[2].required": true,
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.parameters[2].type": "string",
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.parameters[3].in": "query",
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.parameters[3].name": "endDate",
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.parameters[3].required": true,
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.parameters[3].type": "string",
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.parameters[4].format": "date-time",
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.parameters[4].in": "query",
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.parameters[4].name": "dateRange.startDate",
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.parameters[4].required": false,
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.parameters[4].type": "string",
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.parameters[5].format": "date-time",
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.parameters[5].in": "query",
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.parameters[5].name": "dateRange.endDate",
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.parameters[5].required": false,
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.parameters[5].type": "string",
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.parameters[6].in": "path",
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.parameters[6].name": "StartDate",
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.parameters[6].required": true,
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.parameters[6].type": "string",
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.parameters[7].in": "path",
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.parameters[7].name": "EndDate",
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.parameters[7].required": true,
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.parameters[7].type": "string",
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.produces.length": 4,
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.produces[0]": "application/json",
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.produces[1]": "text/json",
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.produces[2]": "application/xml",
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.produces[3]": "text/xml",
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.responses.200.description": "OK",
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.responses.200.schema.items.$ref": "#/definitions/Line",
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.responses.200.schema.type": "array",
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.summary": "Gets the line status for given line ids during the provided dates e.g Minor Delays",
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.tags.length": 1,
	"paths./Line/{ids}/Status/{StartDate}/to/{EndDate}.get.tags[0]": "Line",
	"paths./Line/{id}/Route/Sequence/{direction}.get.deprecated": false,
	"paths./Line/{id}/Route/Sequence/{direction}.get.operationId": "Line_RouteSequence",
	"paths./Line/{id}/Route/Sequence/{direction}.get.parameters.length": 4,
	"paths./Line/{id}/Route/Sequence/{direction}.get.parameters[0].description": "A single line id e.g. victoria",
	"paths./Line/{id}/Route/Sequence/{direction}.get.parameters[0].in": "path",
	"paths./Line/{id}/Route/Sequence/{direction}.get.parameters[0].name": "id",
	"paths./Line/{id}/Route/Sequence/{direction}.get.parameters[0].required": true,
	"paths./Line/{id}/Route/Sequence/{direction}.get.parameters[0].type": "string",
	"paths./Line/{id}/Route/Sequence/{direction}.get.parameters[1].description": "The direction of travel. Can be inbound or outbound.",
	"paths./Line/{id}/Route/Sequence/{direction}.get.parameters[1].enum.length": 3,
	"paths./Line/{id}/Route/Sequence/{direction}.get.parameters[1].enum[0]": "inbound",
	"paths./Line/{id}/Route/Sequence/{direction}.get.parameters[1].enum[1]": "outbound",
	"paths./Line/{id}/Route/Sequence/{direction}.get.parameters[1].enum[2]": "all",
	"paths./Line/{id}/Route/Sequence/{direction}.get.parameters[1].in": "path",
	"paths./Line/{id}/Route/Sequence/{direction}.get.parameters[1].name": "direction",
	"paths./Line/{id}/Route/Sequence/{direction}.get.parameters[1].required": true,
	"paths./Line/{id}/Route/Sequence/{direction}.get.parameters[1].type": "string",
	"paths./Line/{id}/Route/Sequence/{direction}.get.parameters[2].collectionFormat": "multi",
	"paths./Line/{id}/Route/Sequence/{direction}.get.parameters[2].description": "A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified",
	"paths./Line/{id}/Route/Sequence/{direction}.get.parameters[2].in": "query",
	"paths./Line/{id}/Route/Sequence/{direction}.get.parameters[2].items.enum.length": 2,
	"paths./Line/{id}/Route/Sequence/{direction}.get.parameters[2].items.enum[0]": "Regular",
	"paths./Line/{id}/Route/Sequence/{direction}.get.parameters[2].items.enum[1]": "Night",
	"paths./Line/{id}/Route/Sequence/{direction}.get.parameters[2].items.type": "string",
	"paths./Line/{id}/Route/Sequence/{direction}.get.parameters[2].name": "serviceTypes",
	"paths./Line/{id}/Route/Sequence/{direction}.get.parameters[2].required": false,
	"paths./Line/{id}/Route/Sequence/{direction}.get.parameters[2].type": "array",
	"paths./Line/{id}/Route/Sequence/{direction}.get.parameters[3].description": "That excludes crowding from line disruptions. Can be true or false.",
	"paths./Line/{id}/Route/Sequence/{direction}.get.parameters[3].in": "query",
	"paths./Line/{id}/Route/Sequence/{direction}.get.parameters[3].name": "excludeCrowding",
	"paths./Line/{id}/Route/Sequence/{direction}.get.parameters[3].required": false,
	"paths./Line/{id}/Route/Sequence/{direction}.get.parameters[3].type": "boolean",
	"paths./Line/{id}/Route/Sequence/{direction}.get.produces.length": 4,
	"paths./Line/{id}/Route/Sequence/{direction}.get.produces[0]": "application/json",
	"paths./Line/{id}/Route/Sequence/{direction}.get.produces[1]": "text/json",
	"paths./Line/{id}/Route/Sequence/{direction}.get.produces[2]": "application/xml",
	"paths./Line/{id}/Route/Sequence/{direction}.get.produces[3]": "text/xml",
	"paths./Line/{id}/Route/Sequence/{direction}.get.responses.200.description": "OK",
	"paths./Line/{id}/Route/Sequence/{direction}.get.responses.200.schema.$ref": "#/definitions/RouteSequence",
	"paths./Line/{id}/Route/Sequence/{direction}.get.summary": "Gets all valid routes for given line id, including the sequence of stops on each route.",
	"paths./Line/{id}/Route/Sequence/{direction}.get.tags.length": 1,
	"paths./Line/{id}/Route/Sequence/{direction}.get.tags[0]": "Line",
	"paths./Line/{id}/StopPoints.get.deprecated": false,
	"paths./Line/{id}/StopPoints.get.operationId": "Line_StopPoints",
	"paths./Line/{id}/StopPoints.get.parameters.length": 1,
	"paths./Line/{id}/StopPoints.get.parameters[0].description": "A single line id e.g. victoria",
	"paths./Line/{id}/StopPoints.get.parameters[0].in": "path",
	"paths./Line/{id}/StopPoints.get.parameters[0].name": "id",
	"paths./Line/{id}/StopPoints.get.parameters[0].required": true,
	"paths./Line/{id}/StopPoints.get.parameters[0].type": "string",
	"paths./Line/{id}/StopPoints.get.produces.length": 4,
	"paths./Line/{id}/StopPoints.get.produces[0]": "application/json",
	"paths./Line/{id}/StopPoints.get.produces[1]": "text/json",
	"paths./Line/{id}/StopPoints.get.produces[2]": "application/xml",
	"paths./Line/{id}/StopPoints.get.produces[3]": "text/xml",
	"paths./Line/{id}/StopPoints.get.responses.200.description": "OK",
	"paths./Line/{id}/StopPoints.get.responses.200.schema.items.$ref": "#/definitions/StopPoint",
	"paths./Line/{id}/StopPoints.get.responses.200.schema.type": "array",
	"paths./Line/{id}/StopPoints.get.summary": "Gets a list of the stations that serve the given line id",
	"paths./Line/{id}/StopPoints.get.tags.length": 1,
	"paths./Line/{id}/StopPoints.get.tags[0]": "Line",
	"paths./Line/{id}/Timetable/{fromStopPointId}.get.deprecated": false,
	"paths./Line/{id}/Timetable/{fromStopPointId}.get.operationId": "Line_Timetable",
	"paths./Line/{id}/Timetable/{fromStopPointId}.get.parameters.length": 2,
	"paths./Line/{id}/Timetable/{fromStopPointId}.get.parameters[0].description": "The originating station's stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)",
	"paths./Line/{id}/Timetable/{fromStopPointId}.get.parameters[0].in": "path",
	"paths./Line/{id}/Timetable/{fromStopPointId}.get.parameters[0].name": "fromStopPointId",
	"paths./Line/{id}/Timetable/{fromStopPointId}.get.parameters[0].required": true,
	"paths./Line/{id}/Timetable/{fromStopPointId}.get.parameters[0].type": "string",
	"paths./Line/{id}/Timetable/{fromStopPointId}.get.parameters[1].description": "A single line id e.g. victoria",
	"paths./Line/{id}/Timetable/{fromStopPointId}.get.parameters[1].in": "path",
	"paths./Line/{id}/Timetable/{fromStopPointId}.get.parameters[1].name": "id",
	"paths./Line/{id}/Timetable/{fromStopPointId}.get.parameters[1].required": true,
	"paths./Line/{id}/Timetable/{fromStopPointId}.get.parameters[1].type": "string",
	"paths./Line/{id}/Timetable/{fromStopPointId}.get.produces.length": 4,
	"paths./Line/{id}/Timetable/{fromStopPointId}.get.produces[0]": "application/json",
	"paths./Line/{id}/Timetable/{fromStopPointId}.get.produces[1]": "text/json",
	"paths./Line/{id}/Timetable/{fromStopPointId}.get.produces[2]": "application/xml",
	"paths./Line/{id}/Timetable/{fromStopPointId}.get.produces[3]": "text/xml",
	"paths./Line/{id}/Timetable/{fromStopPointId}.get.responses.200.description": "OK",
	"paths./Line/{id}/Timetable/{fromStopPointId}.get.responses.200.schema.$ref": "#/definitions/TimetableResponse",
	"paths./Line/{id}/Timetable/{fromStopPointId}.get.summary": "Gets the timetable for a specified station on the give line",
	"paths./Line/{id}/Timetable/{fromStopPointId}.get.tags.length": 1,
	"paths./Line/{id}/Timetable/{fromStopPointId}.get.tags[0]": "Line",
	"paths./Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}.get.deprecated": false,
	"paths./Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}.get.operationId": "Line_TimetableTo",
	"paths./Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}.get.parameters.length": 3,
	"paths./Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}.get.parameters[0].description": "The originating station's stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)",
	"paths./Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}.get.parameters[0].in": "path",
	"paths./Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}.get.parameters[0].name": "fromStopPointId",
	"paths./Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}.get.parameters[0].required": true,
	"paths./Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}.get.parameters[0].type": "string",
	"paths./Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}.get.parameters[1].description": "A single line id e.g. victoria",
	"paths./Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}.get.parameters[1].in": "path",
	"paths./Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}.get.parameters[1].name": "id",
	"paths./Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}.get.parameters[1].required": true,
	"paths./Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}.get.parameters[1].type": "string",
	"paths./Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}.get.parameters[2].description": "The destination stations's Naptan code",
	"paths./Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}.get.parameters[2].in": "path",
	"paths./Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}.get.parameters[2].name": "toStopPointId",
	"paths./Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}.get.parameters[2].required": true,
	"paths./Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}.get.parameters[2].type": "string",
	"paths./Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}.get.produces.length": 4,
	"paths./Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}.get.produces[0]": "application/json",
	"paths./Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}.get.produces[1]": "text/json",
	"paths./Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}.get.produces[2]": "application/xml",
	"paths./Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}.get.produces[3]": "text/xml",
	"paths./Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}.get.responses.200.description": "OK",
	"paths./Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}.get.responses.200.schema.$ref": "#/definitions/TimetableResponse",
	"paths./Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}.get.summary": "Gets the timetable for a specified station on the give line with specified destination",
	"paths./Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}.get.tags.length": 1,
	"paths./Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}.get.tags[0]": "Line",
	"paths./Mode/ActiveServiceTypes.get.deprecated": false,
	"paths./Mode/ActiveServiceTypes.get.operationId": "Mode_GetActiveServiceTypes",
	"paths./Mode/ActiveServiceTypes.get.produces.length": 4,
	"paths./Mode/ActiveServiceTypes.get.produces[0]": "application/json",
	"paths./Mode/ActiveServiceTypes.get.produces[1]": "text/json",
	"paths./Mode/ActiveServiceTypes.get.produces[2]": "application/xml",
	"paths./Mode/ActiveServiceTypes.get.produces[3]": "text/xml",
	"paths./Mode/ActiveServiceTypes.get.responses.200.description": "OK",
	"paths./Mode/ActiveServiceTypes.get.responses.200.schema.items.$ref": "#/definitions/ActiveServiceType",
	"paths./Mode/ActiveServiceTypes.get.responses.200.schema.type": "array",
	"paths./Mode/ActiveServiceTypes.get.summary": "Returns the service type active for a mode.\r\n            Currently only supports tube",
	"paths./Mode/ActiveServiceTypes.get.tags.length": 1,
	"paths./Mode/ActiveServiceTypes.get.tags[0]": "Mode",
	"paths./Mode/{mode}/Arrivals.get.deprecated": false,
	"paths./Mode/{mode}/Arrivals.get.operationId": "Mode_Arrivals",
	"paths./Mode/{mode}/Arrivals.get.parameters.length": 2,
	"paths./Mode/{mode}/Arrivals.get.parameters[0].description": "A mode name e.g. tube, dlr",
	"paths./Mode/{mode}/Arrivals.get.parameters[0].in": "path",
	"paths./Mode/{mode}/Arrivals.get.parameters[0].name": "mode",
	"paths./Mode/{mode}/Arrivals.get.parameters[0].required": true,
	"paths./Mode/{mode}/Arrivals.get.parameters[0].type": "string",
	"paths./Mode/{mode}/Arrivals.get.parameters[1].description": "A number of arrivals to return for each stop, -1 to return all available.",
	"paths./Mode/{mode}/Arrivals.get.parameters[1].format": "int32",
	"paths./Mode/{mode}/Arrivals.get.parameters[1].in": "query",
	"paths./Mode/{mode}/Arrivals.get.parameters[1].name": "count",
	"paths./Mode/{mode}/Arrivals.get.parameters[1].required": false,
	"paths./Mode/{mode}/Arrivals.get.parameters[1].type": "integer",
	"paths./Mode/{mode}/Arrivals.get.produces.length": 4,
	"paths./Mode/{mode}/Arrivals.get.produces[0]": "application/json",
	"paths./Mode/{mode}/Arrivals.get.produces[1]": "text/json",
	"paths./Mode/{mode}/Arrivals.get.produces[2]": "application/xml",
	"paths./Mode/{mode}/Arrivals.get.produces[3]": "text/xml",
	"paths./Mode/{mode}/Arrivals.get.responses.200.description": "OK",
	"paths./Mode/{mode}/Arrivals.get.responses.200.schema.items.$ref": "#/definitions/Prediction",
	"paths./Mode/{mode}/Arrivals.get.responses.200.schema.type": "array",
	"paths./Mode/{mode}/Arrivals.get.summary": "Gets the next arrival predictions for all stops of a given mode",
	"paths./Mode/{mode}/Arrivals.get.tags.length": 1,
	"paths./Mode/{mode}/Arrivals.get.tags[0]": "Mode",
	"paths./Occupancy/BikePoints/{ids}.get.deprecated": false,
	"paths./Occupancy/BikePoints/{ids}.get.operationId": "Occupancy_GetBikePointsOccupancies",
	"paths./Occupancy/BikePoints/{ids}.get.parameters.length": 1,
	"paths./Occupancy/BikePoints/{ids}.get.parameters[0].description": "",
	"paths./Occupancy/BikePoints/{ids}.get.parameters[0].in": "path",
	"paths./Occupancy/BikePoints/{ids}.get.parameters[0].items.type": "string",
	"paths./Occupancy/BikePoints/{ids}.get.parameters[0].name": "ids",
	"paths./Occupancy/BikePoints/{ids}.get.parameters[0].required": true,
	"paths./Occupancy/BikePoints/{ids}.get.parameters[0].type": "array",
	"paths./Occupancy/BikePoints/{ids}.get.produces.length": 4,
	"paths./Occupancy/BikePoints/{ids}.get.produces[0]": "application/json",
	"paths./Occupancy/BikePoints/{ids}.get.produces[1]": "text/json",
	"paths./Occupancy/BikePoints/{ids}.get.produces[2]": "application/xml",
	"paths./Occupancy/BikePoints/{ids}.get.produces[3]": "text/xml",
	"paths./Occupancy/BikePoints/{ids}.get.responses.200.description": "OK",
	"paths./Occupancy/BikePoints/{ids}.get.responses.200.schema.items.$ref": "#/definitions/BikePointOccupancy",
	"paths./Occupancy/BikePoints/{ids}.get.responses.200.schema.type": "array",
	"paths./Occupancy/BikePoints/{ids}.get.summary": "Get the occupancy for bike points.",
	"paths./Occupancy/BikePoints/{ids}.get.tags.length": 1,
	"paths./Occupancy/BikePoints/{ids}.get.tags[0]": "Occupancy",
	"paths./Occupancy/CarPark.get.deprecated": false,
	"paths./Occupancy/CarPark.get.produces.length": 4,
	"paths./Occupancy/CarPark.get.produces[0]": "application/json",
	"paths./Occupancy/CarPark.get.produces[1]": "text/json",
	"paths./Occupancy/CarPark.get.produces[2]": "application/xml",
	"paths./Occupancy/CarPark.get.produces[3]": "text/xml",
	"paths./Occupancy/CarPark.get.responses.200.description": "OK",
	"paths./Occupancy/CarPark.get.responses.200.schema.items.$ref": "#/definitions/CarParkOccupancy",
	"paths./Occupancy/CarPark.get.responses.200.schema.type": "array",
	"paths./Occupancy/CarPark.get.summary": "Gets the occupancy for all car parks that have occupancy data",
	"paths./Occupancy/CarPark.get.tags.length": 1,
	"paths./Occupancy/CarPark.get.tags[0]": "Occupancy",
	"paths./Occupancy/CarPark/{id}.get.deprecated": false,
	"paths./Occupancy/CarPark/{id}.get.parameters.length": 1,
	"paths./Occupancy/CarPark/{id}.get.parameters[0].description": "",
	"paths./Occupancy/CarPark/{id}.get.parameters[0].in": "path",
	"paths./Occupancy/CarPark/{id}.get.parameters[0].name": "id",
	"paths./Occupancy/CarPark/{id}.get.parameters[0].required": true,
	"paths./Occupancy/CarPark/{id}.get.parameters[0].type": "string",
	"paths./Occupancy/CarPark/{id}.get.produces.length": 4,
	"paths./Occupancy/CarPark/{id}.get.produces[0]": "application/json",
	"paths./Occupancy/CarPark/{id}.get.produces[1]": "text/json",
	"paths./Occupancy/CarPark/{id}.get.produces[2]": "application/xml",
	"paths./Occupancy/CarPark/{id}.get.produces[3]": "text/xml",
	"paths./Occupancy/CarPark/{id}.get.responses.200.description": "OK",
	"paths./Occupancy/CarPark/{id}.get.responses.200.schema.$ref": "#/definitions/CarParkOccupancy",
	"paths./Occupancy/CarPark/{id}.get.summary": "Gets the occupancy for a car park with a given id",
	"paths./Occupancy/CarPark/{id}.get.tags.length": 1,
	"paths./Occupancy/CarPark/{id}.get.tags[0]": "Occupancy",
	"paths./Occupancy/ChargeConnector.get.deprecated": false,
	"paths./Occupancy/ChargeConnector.get.operationId": "Occupancy_GetAllChargeConnectorStatus",
	"paths./Occupancy/ChargeConnector.get.produces.length": 4,
	"paths./Occupancy/ChargeConnector.get.produces[0]": "application/json",
	"paths./Occupancy/ChargeConnector.get.produces[1]": "text/json",
	"paths./Occupancy/ChargeConnector.get.produces[2]": "application/xml",
	"paths./Occupancy/ChargeConnector.get.produces[3]": "text/xml",
	"paths./Occupancy/ChargeConnector.get.responses.200.description": "OK",
	"paths./Occupancy/ChargeConnector.get.responses.200.schema.items.$ref": "#/definitions/ChargeConnectorOccupancy",
	"paths./Occupancy/ChargeConnector.get.responses.200.schema.type": "array",
	"paths./Occupancy/ChargeConnector.get.summary": "Gets the occupancy for all charge connectors",
	"paths./Occupancy/ChargeConnector.get.tags.length": 1,
	"paths./Occupancy/ChargeConnector.get.tags[0]": "Occupancy",
	"paths./Occupancy/ChargeConnector/{ids}.get.deprecated": false,
	"paths./Occupancy/ChargeConnector/{ids}.get.operationId": "Occupancy_GetChargeConnectorStatus",
	"paths./Occupancy/ChargeConnector/{ids}.get.parameters.length": 1,
	"paths./Occupancy/ChargeConnector/{ids}.get.parameters[0].in": "path",
	"paths./Occupancy/ChargeConnector/{ids}.get.parameters[0].items.type": "string",
	"paths./Occupancy/ChargeConnector/{ids}.get.parameters[0].name": "ids",
	"paths./Occupancy/ChargeConnector/{ids}.get.parameters[0].required": true,
	"paths./Occupancy/ChargeConnector/{ids}.get.parameters[0].type": "array",
	"paths./Occupancy/ChargeConnector/{ids}.get.produces.length": 4,
	"paths./Occupancy/ChargeConnector/{ids}.get.produces[0]": "application/json",
	"paths./Occupancy/ChargeConnector/{ids}.get.produces[1]": "text/json",
	"paths./Occupancy/ChargeConnector/{ids}.get.produces[2]": "application/xml",
	"paths./Occupancy/ChargeConnector/{ids}.get.produces[3]": "text/xml",
	"paths./Occupancy/ChargeConnector/{ids}.get.responses.200.description": "OK",
	"paths./Occupancy/ChargeConnector/{ids}.get.responses.200.schema.items.$ref": "#/definitions/ChargeConnectorOccupancy",
	"paths./Occupancy/ChargeConnector/{ids}.get.responses.200.schema.type": "array",
	"paths./Occupancy/ChargeConnector/{ids}.get.summary": "Gets the occupancy for a charge connectors with a given id (sourceSystemPlaceId)",
	"paths./Occupancy/ChargeConnector/{ids}.get.tags.length": 1,
	"paths./Occupancy/ChargeConnector/{ids}.get.tags[0]": "Occupancy",
	"paths./Place.get.deprecated": false,
	"paths./Place.get.operationId": "Place_GetByGeoBox",
	"paths./Place.get.parameters.length": 8,
	"paths./Place.get.parameters[0].collectionFormat": "multi",
	"paths./Place.get.parameters[0].description": "an optional list of comma separated property categories to return in the Place's property bag. If null or empty, all categories of property are returned. Pass the keyword \"none\" to return no properties (a valid list of categories can be obtained from the /Place/Meta/categories endpoint)",
	"paths./Place.get.parameters[0].in": "query",
	"paths./Place.get.parameters[0].items.type": "string",
	"paths./Place.get.parameters[0].name": "categories",
	"paths./Place.get.parameters[0].required": false,
	"paths./Place.get.parameters[0].type": "array",
	"paths./Place.get.parameters[1].description": "Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned",
	"paths./Place.get.parameters[1].in": "query",
	"paths./Place.get.parameters[1].name": "includeChildren",
	"paths./Place.get.parameters[1].required": false,
	"paths./Place.get.parameters[1].type": "boolean",
	"paths./Place.get.parameters[2].collectionFormat": "multi",
	"paths./Place.get.parameters[2].description": "place types to filter on, or null to return all types",
	"paths./Place.get.parameters[2].in": "query",
	"paths./Place.get.parameters[2].items.type": "string",
	"paths./Place.get.parameters[2].name": "type",
	"paths./Place.get.parameters[2].required": false,
	"paths./Place.get.parameters[2].type": "array",
	"paths./Place.get.parameters[3].description": "An optional parameter to limit the results to active records only (Currently only the 'VariableMessageSign' place type is supported)",
	"paths./Place.get.parameters[3].in": "query",
	"paths./Place.get.parameters[3].name": "activeOnly",
	"paths./Place.get.parameters[3].required": false,
	"paths./Place.get.parameters[3].type": "boolean",
	"paths./Place.get.parameters[4].format": "double",
	"paths./Place.get.parameters[4].in": "query",
	"paths./Place.get.parameters[4].name": "bbBoxpoints.swLat",
	"paths./Place.get.parameters[4].required": true,
	"paths./Place.get.parameters[4].type": "number",
	"paths./Place.get.parameters[5].format": "double",
	"paths./Place.get.parameters[5].in": "query",
	"paths./Place.get.parameters[5].name": "bbBoxpoints.swLon",
	"paths./Place.get.parameters[5].required": true,
	"paths./Place.get.parameters[5].type": "number",
	"paths./Place.get.parameters[6].format": "double",
	"paths./Place.get.parameters[6].in": "query",
	"paths./Place.get.parameters[6].name": "bbBoxpoints.neLat",
	"paths./Place.get.parameters[6].required": true,
	"paths./Place.get.parameters[6].type": "number",
	"paths./Place.get.parameters[7].format": "double",
	"paths./Place.get.parameters[7].in": "query",
	"paths./Place.get.parameters[7].name": "bbBoxpoints.neLon",
	"paths./Place.get.parameters[7].required": true,
	"paths./Place.get.parameters[7].type": "number",
	"paths./Place.get.produces.length": 4,
	"paths./Place.get.produces[0]": "application/json",
	"paths./Place.get.produces[1]": "text/json",
	"paths./Place.get.produces[2]": "application/xml",
	"paths./Place.get.produces[3]": "text/xml",
	"paths./Place.get.responses.200.description": "OK",
	"paths./Place.get.responses.200.schema.items.$ref": "#/definitions/StopPoint",
	"paths./Place.get.responses.200.schema.type": "array",
	"paths./Place.get.summary": "Gets the places that lie within the bounding box defined by the lat/lon of its north-west and south-east corners. Optionally filters\r\n            on type and can strip properties for a smaller payload.",
	"paths./Place.get.tags.length": 1,
	"paths./Place.get.tags[0]": "Place",
	"paths./Place/Address/Streets/{Postcode}.get.deprecated": false,
	"paths./Place/Address/Streets/{Postcode}.get.operationId": "Place_GetStreetsByPostCode",
	"paths./Place/Address/Streets/{Postcode}.get.parameters.length": 3,
	"paths./Place/Address/Streets/{Postcode}.get.parameters[0].in": "query",
	"paths./Place/Address/Streets/{Postcode}.get.parameters[0].name": "postcode",
	"paths./Place/Address/Streets/{Postcode}.get.parameters[0].required": true,
	"paths./Place/Address/Streets/{Postcode}.get.parameters[0].type": "string",
	"paths./Place/Address/Streets/{Postcode}.get.parameters[1].in": "query",
	"paths./Place/Address/Streets/{Postcode}.get.parameters[1].name": "postcodeInput.postcode",
	"paths./Place/Address/Streets/{Postcode}.get.parameters[1].pattern": "^(([gG][iI][rR] {0,}0[aA]{2})|((([a-pr-uwyzA-PR-UWYZ][a-hk-yA-HK-Y]?[0-9][0-9]?)|(([a-pr-uwyzA-PR-UWYZ][0-9][a-hjkstuwA-HJKSTUW])|([a-pr-uwyzA-PR-UWYZ][a-hk-yA-HK-Y][0-9][abehmnprv-yABEHMNPRV-Y]))) {0,}[0-9][abd-hjlnp-uw-zABD-HJLNP-UW-Z]{2}))$",
	"paths./Place/Address/Streets/{Postcode}.get.parameters[1].required": false,
	"paths./Place/Address/Streets/{Postcode}.get.parameters[1].type": "string",
	"paths./Place/Address/Streets/{Postcode}.get.parameters[2].in": "path",
	"paths./Place/Address/Streets/{Postcode}.get.parameters[2].name": "Postcode",
	"paths./Place/Address/Streets/{Postcode}.get.parameters[2].required": true,
	"paths./Place/Address/Streets/{Postcode}.get.parameters[2].type": "string",
	"paths./Place/Address/Streets/{Postcode}.get.produces.length": 4,
	"paths./Place/Address/Streets/{Postcode}.get.produces[0]": "application/json",
	"paths./Place/Address/Streets/{Postcode}.get.produces[1]": "text/json",
	"paths./Place/Address/Streets/{Postcode}.get.produces[2]": "application/xml",
	"paths./Place/Address/Streets/{Postcode}.get.produces[3]": "text/xml",
	"paths./Place/Address/Streets/{Postcode}.get.responses.200.description": "OK",
	"paths./Place/Address/Streets/{Postcode}.get.responses.200.schema.$ref": "#/definitions/Object",
	"paths./Place/Address/Streets/{Postcode}.get.summary": "Gets the set of streets associated with a post code.",
	"paths./Place/Address/Streets/{Postcode}.get.tags.length": 1,
	"paths./Place/Address/Streets/{Postcode}.get.tags[0]": "Place",
	"paths./Place/Meta/Categories.get.deprecated": false,
	"paths./Place/Meta/Categories.get.operationId": "Place_MetaCategories",
	"paths./Place/Meta/Categories.get.produces.length": 4,
	"paths./Place/Meta/Categories.get.produces[0]": "application/json",
	"paths./Place/Meta/Categories.get.produces[1]": "text/json",
	"paths./Place/Meta/Categories.get.produces[2]": "application/xml",
	"paths./Place/Meta/Categories.get.produces[3]": "text/xml",
	"paths./Place/Meta/Categories.get.responses.200.description": "OK",
	"paths./Place/Meta/Categories.get.responses.200.schema.items.$ref": "#/definitions/PlaceCategory",
	"paths./Place/Meta/Categories.get.responses.200.schema.type": "array",
	"paths./Place/Meta/Categories.get.summary": "Gets a list of all of the available place property categories and keys.",
	"paths./Place/Meta/Categories.get.tags.length": 1,
	"paths./Place/Meta/Categories.get.tags[0]": "Place",
	"paths./Place/Meta/PlaceTypes.get.deprecated": false,
	"paths./Place/Meta/PlaceTypes.get.operationId": "Place_MetaPlaceTypes",
	"paths./Place/Meta/PlaceTypes.get.produces.length": 4,
	"paths./Place/Meta/PlaceTypes.get.produces[0]": "application/json",
	"paths./Place/Meta/PlaceTypes.get.produces[1]": "text/json",
	"paths./Place/Meta/PlaceTypes.get.produces[2]": "application/xml",
	"paths./Place/Meta/PlaceTypes.get.produces[3]": "text/xml",
	"paths./Place/Meta/PlaceTypes.get.responses.200.description": "OK",
	"paths./Place/Meta/PlaceTypes.get.responses.200.schema.items.$ref": "#/definitions/PlaceCategory",
	"paths./Place/Meta/PlaceTypes.get.responses.200.schema.type": "array",
	"paths./Place/Meta/PlaceTypes.get.summary": "Gets a list of the available types of Place.",
	"paths./Place/Meta/PlaceTypes.get.tags.length": 1,
	"paths./Place/Meta/PlaceTypes.get.tags[0]": "Place",
	"paths./Place/Search.get.deprecated": false,
	"paths./Place/Search.get.operationId": "Place_Search",
	"paths./Place/Search.get.parameters.length": 2,
	"paths./Place/Search.get.parameters[0].description": "The name of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their names.",
	"paths./Place/Search.get.parameters[0].in": "query",
	"paths./Place/Search.get.parameters[0].name": "name",
	"paths./Place/Search.get.parameters[0].required": true,
	"paths./Place/Search.get.parameters[0].type": "string",
	"paths./Place/Search.get.parameters[1].collectionFormat": "multi",
	"paths./Place/Search.get.parameters[1].description": "A comma-separated list of the types to return. Max. approx 12 types.",
	"paths./Place/Search.get.parameters[1].in": "query",
	"paths./Place/Search.get.parameters[1].items.type": "string",
	"paths./Place/Search.get.parameters[1].name": "types",
	"paths./Place/Search.get.parameters[1].required": false,
	"paths./Place/Search.get.parameters[1].type": "array",
	"paths./Place/Search.get.produces.length": 4,
	"paths./Place/Search.get.produces[0]": "application/json",
	"paths./Place/Search.get.produces[1]": "text/json",
	"paths./Place/Search.get.produces[2]": "application/xml",
	"paths./Place/Search.get.produces[3]": "text/xml",
	"paths./Place/Search.get.responses.200.description": "OK",
	"paths./Place/Search.get.responses.200.schema.items.$ref": "#/definitions/Place",
	"paths./Place/Search.get.responses.200.schema.type": "array",
	"paths./Place/Search.get.summary": "Gets all places that matches the given query",
	"paths./Place/Search.get.tags.length": 1,
	"paths./Place/Search.get.tags[0]": "Place",
	"paths./Place/Type/{types}.get.deprecated": false,
	"paths./Place/Type/{types}.get.operationId": "Place_GetByType",
	"paths./Place/Type/{types}.get.parameters.length": 2,
	"paths./Place/Type/{types}.get.parameters[0].description": "A comma-separated list of the types to return. Max. approx 12 types.\r\n            A valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint.",
	"paths./Place/Type/{types}.get.parameters[0].in": "path",
	"paths./Place/Type/{types}.get.parameters[0].items.type": "string",
	"paths./Place/Type/{types}.get.parameters[0].name": "types",
	"paths./Place/Type/{types}.get.parameters[0].required": true,
	"paths./Place/Type/{types}.get.parameters[0].type": "array",
	"paths./Place/Type/{types}.get.parameters[1].description": "An optional parameter to limit the results to active records only (Currently only the 'VariableMessageSign' place type is supported)",
	"paths./Place/Type/{types}.get.parameters[1].in": "query",
	"paths./Place/Type/{types}.get.parameters[1].name": "activeOnly",
	"paths./Place/Type/{types}.get.parameters[1].required": false,
	"paths./Place/Type/{types}.get.parameters[1].type": "boolean",
	"paths./Place/Type/{types}.get.produces.length": 4,
	"paths./Place/Type/{types}.get.produces[0]": "application/json",
	"paths./Place/Type/{types}.get.produces[1]": "text/json",
	"paths./Place/Type/{types}.get.produces[2]": "application/xml",
	"paths./Place/Type/{types}.get.produces[3]": "text/xml",
	"paths./Place/Type/{types}.get.responses.200.description": "OK",
	"paths./Place/Type/{types}.get.responses.200.schema.items.$ref": "#/definitions/Place",
	"paths./Place/Type/{types}.get.responses.200.schema.type": "array",
	"paths./Place/Type/{types}.get.summary": "Gets all places of a given type",
	"paths./Place/Type/{types}.get.tags.length": 1,
	"paths./Place/Type/{types}.get.tags[0]": "Place",
	"paths./Place/{id}.get.deprecated": false,
	"paths./Place/{id}.get.operationId": "Place_Get",
	"paths./Place/{id}.get.parameters.length": 2,
	"paths./Place/{id}.get.parameters[0].description": "The id of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their ids",
	"paths./Place/{id}.get.parameters[0].in": "path",
	"paths./Place/{id}.get.parameters[0].name": "id",
	"paths./Place/{id}.get.parameters[0].required": true,
	"paths./Place/{id}.get.parameters[0].type": "string",
	"paths./Place/{id}.get.parameters[1].description": "Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned",
	"paths./Place/{id}.get.parameters[1].in": "query",
	"paths./Place/{id}.get.parameters[1].name": "includeChildren",
	"paths./Place/{id}.get.parameters[1].required": false,
	"paths./Place/{id}.get.parameters[1].type": "boolean",
	"paths./Place/{id}.get.produces.length": 4,
	"paths./Place/{id}.get.produces[0]": "application/json",
	"paths./Place/{id}.get.produces[1]": "text/json",
	"paths./Place/{id}.get.produces[2]": "application/xml",
	"paths./Place/{id}.get.produces[3]": "text/xml",
	"paths./Place/{id}.get.responses.200.description": "OK",
	"paths./Place/{id}.get.responses.200.schema.items.$ref": "#/definitions/Place",
	"paths./Place/{id}.get.responses.200.schema.type": "array",
	"paths./Place/{id}.get.summary": "Gets the place with the given id.",
	"paths./Place/{id}.get.tags.length": 1,
	"paths./Place/{id}.get.tags[0]": "Place",
	"paths./Place/{type}/At/{Lat}/{Lon}.get.deprecated": false,
	"paths./Place/{type}/At/{Lat}/{Lon}.get.operationId": "Place_GetAt",
	"paths./Place/{type}/At/{Lat}/{Lon}.get.parameters.length": 7,
	"paths./Place/{type}/At/{Lat}/{Lon}.get.parameters[0].description": "The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint)",
	"paths./Place/{type}/At/{Lat}/{Lon}.get.parameters[0].in": "path",
	"paths./Place/{type}/At/{Lat}/{Lon}.get.parameters[0].items.type": "string",
	"paths./Place/{type}/At/{Lat}/{Lon}.get.parameters[0].name": "type",
	"paths./Place/{type}/At/{Lat}/{Lon}.get.parameters[0].required": true,
	"paths./Place/{type}/At/{Lat}/{Lon}.get.parameters[0].type": "array",
	"paths./Place/{type}/At/{Lat}/{Lon}.get.parameters[1].in": "query",
	"paths./Place/{type}/At/{Lat}/{Lon}.get.parameters[1].name": "lat",
	"paths./Place/{type}/At/{Lat}/{Lon}.get.parameters[1].required": true,
	"paths./Place/{type}/At/{Lat}/{Lon}.get.parameters[1].type": "string",
	"paths./Place/{type}/At/{Lat}/{Lon}.get.parameters[2].in": "query",
	"paths./Place/{type}/At/{Lat}/{Lon}.get.parameters[2].name": "lon",
	"paths./Place/{type}/At/{Lat}/{Lon}.get.parameters[2].required": true,
	"paths./Place/{type}/At/{Lat}/{Lon}.get.parameters[2].type": "string",
	"paths./Place/{type}/At/{Lat}/{Lon}.get.parameters[3].format": "double",
	"paths./Place/{type}/At/{Lat}/{Lon}.get.parameters[3].in": "query",
	"paths./Place/{type}/At/{Lat}/{Lon}.get.parameters[3].name": "location.lat",
	"paths./Place/{type}/At/{Lat}/{Lon}.get.parameters[3].required": true,
	"paths./Place/{type}/At/{Lat}/{Lon}.get.parameters[3].type": "number",
	"paths./Place/{type}/At/{Lat}/{Lon}.get.parameters[4].format": "double",
	"paths./Place/{type}/At/{Lat}/{Lon}.get.parameters[4].in": "query",
	"paths./Place/{type}/At/{Lat}/{Lon}.get.parameters[4].name": "location.lon",
	"paths./Place/{type}/At/{Lat}/{Lon}.get.parameters[4].required": true,
	"paths./Place/{type}/At/{Lat}/{Lon}.get.parameters[4].type": "number",
	"paths./Place/{type}/At/{Lat}/{Lon}.get.parameters[5].in": "path",
	"paths./Place/{type}/At/{Lat}/{Lon}.get.parameters[5].name": "Lat",
	"paths./Place/{type}/At/{Lat}/{Lon}.get.parameters[5].required": true,
	"paths./Place/{type}/At/{Lat}/{Lon}.get.parameters[5].type": "string",
	"paths./Place/{type}/At/{Lat}/{Lon}.get.parameters[6].in": "path",
	"paths./Place/{type}/At/{Lat}/{Lon}.get.parameters[6].name": "Lon",
	"paths./Place/{type}/At/{Lat}/{Lon}.get.parameters[6].required": true,
	"paths./Place/{type}/At/{Lat}/{Lon}.get.parameters[6].type": "string",
	"paths./Place/{type}/At/{Lat}/{Lon}.get.produces.length": 4,
	"paths./Place/{type}/At/{Lat}/{Lon}.get.produces[0]": "application/json",
	"paths./Place/{type}/At/{Lat}/{Lon}.get.produces[1]": "text/json",
	"paths./Place/{type}/At/{Lat}/{Lon}.get.produces[2]": "application/xml",
	"paths./Place/{type}/At/{Lat}/{Lon}.get.produces[3]": "text/xml",
	"paths./Place/{type}/At/{Lat}/{Lon}.get.responses.200.description": "OK",
	"paths./Place/{type}/At/{Lat}/{Lon}.get.responses.200.schema.$ref": "#/definitions/Object",
	"paths./Place/{type}/At/{Lat}/{Lon}.get.summary": "Gets any places of the given type whose geography intersects the given latitude and longitude. In practice this means the Place\r\n            must be polygonal e.g. a BoroughBoundary.",
	"paths./Place/{type}/At/{Lat}/{Lon}.get.tags.length": 1,
	"paths./Place/{type}/At/{Lat}/{Lon}.get.tags[0]": "Place",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.deprecated": false,
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.operationId": "Place_GetOverlay",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters.length": 10,
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[0].description": "The zoom level",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[0].format": "int32",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[0].in": "path",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[0].name": "z",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[0].required": true,
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[0].type": "integer",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[1].description": "The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint)",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[1].in": "path",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[1].items.type": "string",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[1].name": "type",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[1].required": true,
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[1].type": "array",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[2].description": "The width of the requested overlay.",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[2].format": "int32",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[2].in": "path",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[2].name": "width",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[2].required": true,
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[2].type": "integer",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[3].description": "The height of the requested overlay.",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[3].format": "int32",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[3].in": "path",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[3].name": "height",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[3].required": true,
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[3].type": "integer",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[4].in": "query",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[4].name": "lat",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[4].required": true,
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[4].type": "string",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[5].in": "query",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[5].name": "lon",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[5].required": true,
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[5].type": "string",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[6].format": "double",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[6].in": "query",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[6].name": "location.lat",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[6].required": true,
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[6].type": "number",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[7].format": "double",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[7].in": "query",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[7].name": "location.lon",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[7].required": true,
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[7].type": "number",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[8].in": "path",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[8].name": "Lat",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[8].required": true,
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[8].type": "string",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[9].in": "path",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[9].name": "Lon",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[9].required": true,
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.parameters[9].type": "string",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.produces.length": 4,
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.produces[0]": "application/json",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.produces[1]": "text/json",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.produces[2]": "application/xml",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.produces[3]": "text/xml",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.responses.200.description": "OK",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.responses.200.schema.$ref": "#/definitions/Object",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.summary": "Gets the place overlay for a given set of co-ordinates and a given width/height.",
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.tags.length": 1,
	"paths./Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}.get.tags[0]": "Place",
	"paths./Road.get.deprecated": false,
	"paths./Road.get.produces.length": 4,
	"paths./Road.get.produces[0]": "application/json",
	"paths./Road.get.produces[1]": "text/json",
	"paths./Road.get.produces[2]": "application/xml",
	"paths./Road.get.produces[3]": "text/xml",
	"paths./Road.get.responses.200.description": "OK",
	"paths./Road.get.responses.200.schema.items.$ref": "#/definitions/RoadCorridor",
	"paths./Road.get.responses.200.schema.type": "array",
	"paths./Road.get.summary": "Gets all roads managed by TfL",
	"paths./Road.get.tags.length": 1,
	"paths./Road.get.tags[0]": "Road",
	"paths./Road/Meta/Categories.get.deprecated": false,
	"paths./Road/Meta/Categories.get.operationId": "Road_MetaCategories",
	"paths./Road/Meta/Categories.get.produces.length": 4,
	"paths./Road/Meta/Categories.get.produces[0]": "application/json",
	"paths./Road/Meta/Categories.get.produces[1]": "text/json",
	"paths./Road/Meta/Categories.get.produces[2]": "application/xml",
	"paths./Road/Meta/Categories.get.produces[3]": "text/xml",
	"paths./Road/Meta/Categories.get.responses.200.description": "OK",
	"paths./Road/Meta/Categories.get.responses.200.schema.items.type": "string",
	"paths./Road/Meta/Categories.get.responses.200.schema.type": "array",
	"paths./Road/Meta/Categories.get.summary": "Gets a list of valid RoadDisruption categories",
	"paths./Road/Meta/Categories.get.tags.length": 1,
	"paths./Road/Meta/Categories.get.tags[0]": "Road",
	"paths./Road/Meta/Severities.get.deprecated": false,
	"paths./Road/Meta/Severities.get.operationId": "Road_MetaSeverities",
	"paths./Road/Meta/Severities.get.produces.length": 4,
	"paths./Road/Meta/Severities.get.produces[0]": "application/json",
	"paths./Road/Meta/Severities.get.produces[1]": "text/json",
	"paths./Road/Meta/Severities.get.produces[2]": "application/xml",
	"paths./Road/Meta/Severities.get.produces[3]": "text/xml",
	"paths./Road/Meta/Severities.get.responses.200.description": "OK",
	"paths./Road/Meta/Severities.get.responses.200.schema.items.$ref": "#/definitions/StatusSeverity",
	"paths./Road/Meta/Severities.get.responses.200.schema.type": "array",
	"paths./Road/Meta/Severities.get.summary": "Gets a list of valid RoadDisruption severity codes",
	"paths./Road/Meta/Severities.get.tags.length": 1,
	"paths./Road/Meta/Severities.get.tags[0]": "Road",
	"paths./Road/all/Disruption/{disruptionIds}.get.deprecated": false,
	"paths./Road/all/Disruption/{disruptionIds}.get.operationId": "Road_DisruptionById",
	"paths./Road/all/Disruption/{disruptionIds}.get.parameters.length": 2,
	"paths./Road/all/Disruption/{disruptionIds}.get.parameters[0].description": "Comma-separated list of disruption identifiers to filter by.",
	"paths./Road/all/Disruption/{disruptionIds}.get.parameters[0].in": "path",
	"paths./Road/all/Disruption/{disruptionIds}.get.parameters[0].items.type": "string",
	"paths./Road/all/Disruption/{disruptionIds}.get.parameters[0].name": "disruptionIds",
	"paths./Road/all/Disruption/{disruptionIds}.get.parameters[0].required": true,
	"paths./Road/all/Disruption/{disruptionIds}.get.parameters[0].type": "array",
	"paths./Road/all/Disruption/{disruptionIds}.get.parameters[1].description": "Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location and comments.",
	"paths./Road/all/Disruption/{disruptionIds}.get.parameters[1].in": "query",
	"paths./Road/all/Disruption/{disruptionIds}.get.parameters[1].name": "stripContent",
	"paths./Road/all/Disruption/{disruptionIds}.get.parameters[1].required": false,
	"paths./Road/all/Disruption/{disruptionIds}.get.parameters[1].type": "boolean",
	"paths./Road/all/Disruption/{disruptionIds}.get.produces.length": 5,
	"paths./Road/all/Disruption/{disruptionIds}.get.produces[0]": "application/json",
	"paths./Road/all/Disruption/{disruptionIds}.get.produces[1]": "text/json",
	"paths./Road/all/Disruption/{disruptionIds}.get.produces[2]": "application/xml",
	"paths./Road/all/Disruption/{disruptionIds}.get.produces[3]": "text/xml",
	"paths./Road/all/Disruption/{disruptionIds}.get.produces[4]": "application/geo+json",
	"paths./Road/all/Disruption/{disruptionIds}.get.responses.200.description": "OK",
	"paths./Road/all/Disruption/{disruptionIds}.get.responses.200.schema.$ref": "#/definitions/RoadDisruption",
	"paths./Road/all/Disruption/{disruptionIds}.get.summary": "Gets a list of active disruptions filtered by disruption Ids.",
	"paths./Road/all/Disruption/{disruptionIds}.get.tags.length": 1,
	"paths./Road/all/Disruption/{disruptionIds}.get.tags[0]": "Road",
	"paths./Road/all/Street/Disruption.get.deprecated": false,
	"paths./Road/all/Street/Disruption.get.operationId": "Road_DisruptedStreets",
	"paths./Road/all/Street/Disruption.get.parameters.length": 2,
	"paths./Road/all/Street/Disruption.get.parameters[0].description": "Optional, the start time to filter on.",
	"paths./Road/all/Street/Disruption.get.parameters[0].format": "date-time",
	"paths./Road/all/Street/Disruption.get.parameters[0].in": "query",
	"paths./Road/all/Street/Disruption.get.parameters[0].name": "startDate",
	"paths./Road/all/Street/Disruption.get.parameters[0].required": true,
	"paths./Road/all/Street/Disruption.get.parameters[0].type": "string",
	"paths./Road/all/Street/Disruption.get.parameters[1].description": "Optional, The end time to filter on.",
	"paths./Road/all/Street/Disruption.get.parameters[1].format": "date-time",
	"paths./Road/all/Street/Disruption.get.parameters[1].in": "query",
	"paths./Road/all/Street/Disruption.get.parameters[1].name": "endDate",
	"paths./Road/all/Street/Disruption.get.parameters[1].required": true,
	"paths./Road/all/Street/Disruption.get.parameters[1].type": "string",
	"paths./Road/all/Street/Disruption.get.produces.length": 4,
	"paths./Road/all/Street/Disruption.get.produces[0]": "application/json",
	"paths./Road/all/Street/Disruption.get.produces[1]": "text/json",
	"paths./Road/all/Street/Disruption.get.produces[2]": "application/xml",
	"paths./Road/all/Street/Disruption.get.produces[3]": "text/xml",
	"paths./Road/all/Street/Disruption.get.responses.200.description": "OK",
	"paths./Road/all/Street/Disruption.get.responses.200.schema.$ref": "#/definitions/Object",
	"paths./Road/all/Street/Disruption.get.summary": "Gets a list of disrupted streets. If no date filters are provided, current disruptions are returned.",
	"paths./Road/all/Street/Disruption.get.tags.length": 1,
	"paths./Road/all/Street/Disruption.get.tags[0]": "Road",
	"paths./Road/{ids}.get.deprecated": false,
	"paths./Road/{ids}.get.parameters.length": 1,
	"paths./Road/{ids}.get.parameters[0].description": "Comma-separated list of road identifiers e.g. \"A406, A2\" (a full list of supported road identifiers can be found at the /Road/ endpoint)",
	"paths./Road/{ids}.get.parameters[0].in": "path",
	"paths./Road/{ids}.get.parameters[0].items.type": "string",
	"paths./Road/{ids}.get.parameters[0].name": "ids",
	"paths./Road/{ids}.get.parameters[0].required": true,
	"paths./Road/{ids}.get.parameters[0].type": "array",
	"paths./Road/{ids}.get.produces.length": 4,
	"paths./Road/{ids}.get.produces[0]": "application/json",
	"paths./Road/{ids}.get.produces[1]": "text/json",
	"paths./Road/{ids}.get.produces[2]": "application/xml",
	"paths./Road/{ids}.get.produces[3]": "text/xml",
	"paths./Road/{ids}.get.responses.200.description": "OK",
	"paths./Road/{ids}.get.responses.200.schema.items.$ref": "#/definitions/RoadCorridor",
	"paths./Road/{ids}.get.responses.200.schema.type": "array",
	"paths./Road/{ids}.get.summary": "Gets the road with the specified id (e.g. A1)",
	"paths./Road/{ids}.get.tags.length": 1,
	"paths./Road/{ids}.get.tags[0]": "Road",
	"paths./Road/{ids}/Disruption.get.deprecated": false,
	"paths./Road/{ids}/Disruption.get.operationId": "Road_Disruption",
	"paths./Road/{ids}/Disruption.get.parameters.length": 5,
	"paths./Road/{ids}/Disruption.get.parameters[0].description": "Comma-separated list of road identifiers e.g. \"A406, A2\" use all for all to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint)",
	"paths./Road/{ids}/Disruption.get.parameters[0].in": "path",
	"paths./Road/{ids}/Disruption.get.parameters[0].items.type": "string",
	"paths./Road/{ids}/Disruption.get.parameters[0].name": "ids",
	"paths./Road/{ids}/Disruption.get.parameters[0].required": true,
	"paths./Road/{ids}/Disruption.get.parameters[0].type": "array",
	"paths./Road/{ids}/Disruption.get.parameters[1].description": "Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location, comments and streets",
	"paths./Road/{ids}/Disruption.get.parameters[1].in": "query",
	"paths./Road/{ids}/Disruption.get.parameters[1].name": "stripContent",
	"paths./Road/{ids}/Disruption.get.parameters[1].required": false,
	"paths./Road/{ids}/Disruption.get.parameters[1].type": "boolean",
	"paths./Road/{ids}/Disruption.get.parameters[2].collectionFormat": "multi",
	"paths./Road/{ids}/Disruption.get.parameters[2].description": "an optional list of Severity names to filter on (a valid list of severities can be obtained from the /Road/Meta/severities endpoint)",
	"paths./Road/{ids}/Disruption.get.parameters[2].in": "query",
	"paths./Road/{ids}/Disruption.get.parameters[2].items.type": "string",
	"paths./Road/{ids}/Disruption.get.parameters[2].name": "severities",
	"paths./Road/{ids}/Disruption.get.parameters[2].required": false,
	"paths./Road/{ids}/Disruption.get.parameters[2].type": "array",
	"paths./Road/{ids}/Disruption.get.parameters[3].collectionFormat": "multi",
	"paths./Road/{ids}/Disruption.get.parameters[3].description": "an optional list of category names to filter on (a valid list of categories can be obtained from the /Road/Meta/categories endpoint)",
	"paths./Road/{ids}/Disruption.get.parameters[3].in": "query",
	"paths./Road/{ids}/Disruption.get.parameters[3].items.type": "string",
	"paths./Road/{ids}/Disruption.get.parameters[3].name": "categories",
	"paths./Road/{ids}/Disruption.get.parameters[3].required": false,
	"paths./Road/{ids}/Disruption.get.parameters[3].type": "array",
	"paths./Road/{ids}/Disruption.get.parameters[4].description": "Optional, defaults to true. When true, always includes disruptions that have road closures, regardless of the severity filter. When false, the severity filter works as normal.",
	"paths./Road/{ids}/Disruption.get.parameters[4].in": "query",
	"paths./Road/{ids}/Disruption.get.parameters[4].name": "closures",
	"paths./Road/{ids}/Disruption.get.parameters[4].required": false,
	"paths./Road/{ids}/Disruption.get.parameters[4].type": "boolean",
	"paths./Road/{ids}/Disruption.get.produces.length": 5,
	"paths./Road/{ids}/Disruption.get.produces[0]": "application/json",
	"paths./Road/{ids}/Disruption.get.produces[1]": "text/json",
	"paths./Road/{ids}/Disruption.get.produces[2]": "application/xml",
	"paths./Road/{ids}/Disruption.get.produces[3]": "text/xml",
	"paths./Road/{ids}/Disruption.get.produces[4]": "application/geo+json",
	"paths./Road/{ids}/Disruption.get.responses.200.description": "OK",
	"paths./Road/{ids}/Disruption.get.responses.200.schema.items.$ref": "#/definitions/RoadDisruption",
	"paths./Road/{ids}/Disruption.get.responses.200.schema.type": "array",
	"paths./Road/{ids}/Disruption.get.summary": "Get active disruptions, filtered by road ids",
	"paths./Road/{ids}/Disruption.get.tags.length": 1,
	"paths./Road/{ids}/Disruption.get.tags[0]": "Road",
	"paths./Road/{ids}/Status.get.deprecated": false,
	"paths./Road/{ids}/Status.get.operationId": "Road_Status",
	"paths./Road/{ids}/Status.get.parameters.length": 3,
	"paths./Road/{ids}/Status.get.parameters[0].description": "Comma-separated list of road identifiers e.g. \"A406, A2\" or use \"all\" to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint)",
	"paths./Road/{ids}/Status.get.parameters[0].in": "path",
	"paths./Road/{ids}/Status.get.parameters[0].items.type": "string",
	"paths./Road/{ids}/Status.get.parameters[0].name": "ids",
	"paths./Road/{ids}/Status.get.parameters[0].required": true,
	"paths./Road/{ids}/Status.get.parameters[0].type": "array",
	"paths./Road/{ids}/Status.get.parameters[1].format": "date-time",
	"paths./Road/{ids}/Status.get.parameters[1].in": "query",
	"paths./Road/{ids}/Status.get.parameters[1].name": "dateRangeNullable.startDate",
	"paths./Road/{ids}/Status.get.parameters[1].required": false,
	"paths./Road/{ids}/Status.get.parameters[1].type": "string",
	"paths./Road/{ids}/Status.get.parameters[2].format": "date-time",
	"paths./Road/{ids}/Status.get.parameters[2].in": "query",
	"paths./Road/{ids}/Status.get.parameters[2].name": "dateRangeNullable.endDate",
	"paths./Road/{ids}/Status.get.parameters[2].required": false,
	"paths./Road/{ids}/Status.get.parameters[2].type": "string",
	"paths./Road/{ids}/Status.get.produces.length": 4,
	"paths./Road/{ids}/Status.get.produces[0]": "application/json",
	"paths./Road/{ids}/Status.get.produces[1]": "text/json",
	"paths./Road/{ids}/Status.get.produces[2]": "application/xml",
	"paths./Road/{ids}/Status.get.produces[3]": "text/xml",
	"paths./Road/{ids}/Status.get.responses.200.description": "OK",
	"paths./Road/{ids}/Status.get.responses.200.schema.items.$ref": "#/definitions/RoadCorridor",
	"paths./Road/{ids}/Status.get.responses.200.schema.type": "array",
	"paths./Road/{ids}/Status.get.summary": "Gets the specified roads with the status aggregated over the date range specified, or now until the end of today if no dates are passed.",
	"paths./Road/{ids}/Status.get.tags.length": 1,
	"paths./Road/{ids}/Status.get.tags[0]": "Road",
	"paths./Search.get.deprecated": false,
	"paths./Search.get.operationId": "Search_Get",
	"paths./Search.get.parameters.length": 1,
	"paths./Search.get.parameters[0].description": "The search query",
	"paths./Search.get.parameters[0].in": "query",
	"paths./Search.get.parameters[0].name": "query",
	"paths./Search.get.parameters[0].required": true,
	"paths./Search.get.parameters[0].type": "string",
	"paths./Search.get.produces.length": 4,
	"paths./Search.get.produces[0]": "application/json",
	"paths./Search.get.produces[1]": "text/json",
	"paths./Search.get.produces[2]": "application/xml",
	"paths./Search.get.produces[3]": "text/xml",
	"paths./Search.get.responses.200.description": "OK",
	"paths./Search.get.responses.200.schema.$ref": "#/definitions/SearchResponse",
	"paths./Search.get.summary": "Search the site for occurrences of the query string. The maximum number of results returned is equal to the maximum page size\r\n            of 100. To return subsequent pages, use the paginated overload.",
	"paths./Search.get.tags.length": 1,
	"paths./Search.get.tags[0]": "Search",
	"paths./Search/BusSchedules.get.deprecated": false,
	"paths./Search/BusSchedules.get.operationId": "Search_BusSchedules",
	"paths./Search/BusSchedules.get.parameters.length": 1,
	"paths./Search/BusSchedules.get.parameters[0].description": "The search query",
	"paths./Search/BusSchedules.get.parameters[0].in": "query",
	"paths./Search/BusSchedules.get.parameters[0].name": "query",
	"paths./Search/BusSchedules.get.parameters[0].required": true,
	"paths./Search/BusSchedules.get.parameters[0].type": "string",
	"paths./Search/BusSchedules.get.produces.length": 4,
	"paths./Search/BusSchedules.get.produces[0]": "application/json",
	"paths./Search/BusSchedules.get.produces[1]": "text/json",
	"paths./Search/BusSchedules.get.produces[2]": "application/xml",
	"paths./Search/BusSchedules.get.produces[3]": "text/xml",
	"paths./Search/BusSchedules.get.responses.200.description": "OK",
	"paths./Search/BusSchedules.get.responses.200.schema.$ref": "#/definitions/SearchResponse",
	"paths./Search/BusSchedules.get.summary": "Searches the bus schedules folder on S3 for a given bus number.",
	"paths./Search/BusSchedules.get.tags.length": 1,
	"paths./Search/BusSchedules.get.tags[0]": "Search",
	"paths./Search/Meta/Categories.get.deprecated": false,
	"paths./Search/Meta/Categories.get.operationId": "Search_MetaCategories",
	"paths./Search/Meta/Categories.get.produces.length": 4,
	"paths./Search/Meta/Categories.get.produces[0]": "application/json",
	"paths./Search/Meta/Categories.get.produces[1]": "text/json",
	"paths./Search/Meta/Categories.get.produces[2]": "application/xml",
	"paths./Search/Meta/Categories.get.produces[3]": "text/xml",
	"paths./Search/Meta/Categories.get.responses.200.description": "OK",
	"paths./Search/Meta/Categories.get.responses.200.schema.items.type": "string",
	"paths./Search/Meta/Categories.get.responses.200.schema.type": "array",
	"paths./Search/Meta/Categories.get.summary": "Gets the available search categories.",
	"paths./Search/Meta/Categories.get.tags.length": 1,
	"paths./Search/Meta/Categories.get.tags[0]": "Search",
	"paths./Search/Meta/SearchProviders.get.deprecated": false,
	"paths./Search/Meta/SearchProviders.get.operationId": "Search_MetaSearchProviders",
	"paths./Search/Meta/SearchProviders.get.produces.length": 4,
	"paths./Search/Meta/SearchProviders.get.produces[0]": "application/json",
	"paths./Search/Meta/SearchProviders.get.produces[1]": "text/json",
	"paths./Search/Meta/SearchProviders.get.produces[2]": "application/xml",
	"paths./Search/Meta/SearchProviders.get.produces[3]": "text/xml",
	"paths./Search/Meta/SearchProviders.get.responses.200.description": "OK",
	"paths./Search/Meta/SearchProviders.get.responses.200.schema.items.type": "string",
	"paths./Search/Meta/SearchProviders.get.responses.200.schema.type": "array",
	"paths./Search/Meta/SearchProviders.get.summary": "Gets the available searchProvider names.",
	"paths./Search/Meta/SearchProviders.get.tags.length": 1,
	"paths./Search/Meta/SearchProviders.get.tags[0]": "Search",
	"paths./Search/Meta/Sorts.get.deprecated": false,
	"paths./Search/Meta/Sorts.get.operationId": "Search_MetaSorts",
	"paths./Search/Meta/Sorts.get.produces.length": 4,
	"paths./Search/Meta/Sorts.get.produces[0]": "application/json",
	"paths./Search/Meta/Sorts.get.produces[1]": "text/json",
	"paths./Search/Meta/Sorts.get.produces[2]": "application/xml",
	"paths./Search/Meta/Sorts.get.produces[3]": "text/xml",
	"paths./Search/Meta/Sorts.get.responses.200.description": "OK",
	"paths./Search/Meta/Sorts.get.responses.200.schema.items.type": "string",
	"paths./Search/Meta/Sorts.get.responses.200.schema.type": "array",
	"paths./Search/Meta/Sorts.get.summary": "Gets the available sorting options.",
	"paths./Search/Meta/Sorts.get.tags.length": 1,
	"paths./Search/Meta/Sorts.get.tags[0]": "Search",
	"paths./StopPoint.get.deprecated": false,
	"paths./StopPoint.get.operationId": "StopPoint_GetByGeoPoint",
	"paths./StopPoint.get.parameters.length": 8,
	"paths./StopPoint.get.parameters[0].collectionFormat": "multi",
	"paths./StopPoint.get.parameters[0].description": "a list of stopTypes that should be returned (a list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint)",
	"paths./StopPoint.get.parameters[0].in": "query",
	"paths./StopPoint.get.parameters[0].items.type": "string",
	"paths./StopPoint.get.parameters[0].name": "stopTypes",
	"paths./StopPoint.get.parameters[0].required": true,
	"paths./StopPoint.get.parameters[0].type": "array",
	"paths./StopPoint.get.parameters[1].description": "the radius of the bounding circle in metres (default : 200)",
	"paths./StopPoint.get.parameters[1].format": "int32",
	"paths./StopPoint.get.parameters[1].in": "query",
	"paths./StopPoint.get.parameters[1].name": "radius",
	"paths./StopPoint.get.parameters[1].required": false,
	"paths./StopPoint.get.parameters[1].type": "integer",
	"paths./StopPoint.get.parameters[2].description": "Re-arrange the output into a parent/child hierarchy",
	"paths./StopPoint.get.parameters[2].in": "query",
	"paths./StopPoint.get.parameters[2].name": "useStopPointHierarchy",
	"paths./StopPoint.get.parameters[2].required": false,
	"paths./StopPoint.get.parameters[2].type": "boolean",
	"paths./StopPoint.get.parameters[3].collectionFormat": "multi",
	"paths./StopPoint.get.parameters[3].description": "the list of modes to search (comma separated mode names e.g. tube,dlr)",
	"paths./StopPoint.get.parameters[3].in": "query",
	"paths./StopPoint.get.parameters[3].items.type": "string",
	"paths./StopPoint.get.parameters[3].name": "modes",
	"paths./StopPoint.get.parameters[3].required": false,
	"paths./StopPoint.get.parameters[3].type": "array",
	"paths./StopPoint.get.parameters[4].collectionFormat": "multi",
	"paths./StopPoint.get.parameters[4].description": "an optional list of comma separated property categories to return in the StopPoint's property bag. If null or empty, all categories of property are returned. Pass the keyword \"none\" to return no properties (a valid list of categories can be obtained from the /StopPoint/Meta/categories endpoint)",
	"paths./StopPoint.get.parameters[4].in": "query",
	"paths./StopPoint.get.parameters[4].items.type": "string",
	"paths./StopPoint.get.parameters[4].name": "categories",
	"paths./StopPoint.get.parameters[4].required": false,
	"paths./StopPoint.get.parameters[4].type": "array",
	"paths./StopPoint.get.parameters[5].description": "true to return the lines that each stop point serves as a nested resource",
	"paths./StopPoint.get.parameters[5].in": "query",
	"paths./StopPoint.get.parameters[5].name": "returnLines",
	"paths./StopPoint.get.parameters[5].required": false,
	"paths./StopPoint.get.parameters[5].type": "boolean",
	"paths./StopPoint.get.parameters[6].format": "double",
	"paths./StopPoint.get.parameters[6].in": "query",
	"paths./StopPoint.get.parameters[6].name": "location.lat",
	"paths./StopPoint.get.parameters[6].required": true,
	"paths./StopPoint.get.parameters[6].type": "number",
	"paths./StopPoint.get.parameters[7].format": "double",
	"paths./StopPoint.get.parameters[7].in": "query",
	"paths./StopPoint.get.parameters[7].name": "location.lon",
	"paths./StopPoint.get.parameters[7].required": true,
	"paths./StopPoint.get.parameters[7].type": "number",
	"paths./StopPoint.get.produces.length": 4,
	"paths./StopPoint.get.produces[0]": "application/json",
	"paths./StopPoint.get.produces[1]": "text/json",
	"paths./StopPoint.get.produces[2]": "application/xml",
	"paths./StopPoint.get.produces[3]": "text/xml",
	"paths./StopPoint.get.responses.200.description": "OK",
	"paths./StopPoint.get.responses.200.schema.$ref": "#/definitions/StopPointsResponse",
	"paths./StopPoint.get.summary": "Gets a list of StopPoints within {radius} by the specified criteria",
	"paths./StopPoint.get.tags.length": 1,
	"paths./StopPoint.get.tags[0]": "StopPoint",
	"paths./StopPoint/Meta/Categories.get.deprecated": false,
	"paths./StopPoint/Meta/Categories.get.operationId": "StopPoint_MetaCategories",
	"paths./StopPoint/Meta/Categories.get.produces.length": 4,
	"paths./StopPoint/Meta/Categories.get.produces[0]": "application/json",
	"paths./StopPoint/Meta/Categories.get.produces[1]": "text/json",
	"paths./StopPoint/Meta/Categories.get.produces[2]": "application/xml",
	"paths./StopPoint/Meta/Categories.get.produces[3]": "text/xml",
	"paths./StopPoint/Meta/Categories.get.responses.200.description": "OK",
	"paths./StopPoint/Meta/Categories.get.responses.200.schema.items.$ref": "#/definitions/StopPointCategory",
	"paths./StopPoint/Meta/Categories.get.responses.200.schema.type": "array",
	"paths./StopPoint/Meta/Categories.get.summary": "Gets the list of available StopPoint additional information categories",
	"paths./StopPoint/Meta/Categories.get.tags.length": 1,
	"paths./StopPoint/Meta/Categories.get.tags[0]": "StopPoint",
	"paths./StopPoint/Meta/Modes.get.deprecated": false,
	"paths./StopPoint/Meta/Modes.get.operationId": "StopPoint_MetaModes",
	"paths./StopPoint/Meta/Modes.get.produces.length": 4,
	"paths./StopPoint/Meta/Modes.get.produces[0]": "application/json",
	"paths./StopPoint/Meta/Modes.get.produces[1]": "text/json",
	"paths./StopPoint/Meta/Modes.get.produces[2]": "application/xml",
	"paths./StopPoint/Meta/Modes.get.produces[3]": "text/xml",
	"paths./StopPoint/Meta/Modes.get.responses.200.description": "OK",
	"paths./StopPoint/Meta/Modes.get.responses.200.schema.items.$ref": "#/definitions/Mode",
	"paths./StopPoint/Meta/Modes.get.responses.200.schema.type": "array",
	"paths./StopPoint/Meta/Modes.get.summary": "Gets the list of available StopPoint modes",
	"paths./StopPoint/Meta/Modes.get.tags.length": 1,
	"paths./StopPoint/Meta/Modes.get.tags[0]": "StopPoint",
	"paths./StopPoint/Meta/StopTypes.get.deprecated": false,
	"paths./StopPoint/Meta/StopTypes.get.operationId": "StopPoint_MetaStopTypes",
	"paths./StopPoint/Meta/StopTypes.get.produces.length": 4,
	"paths./StopPoint/Meta/StopTypes.get.produces[0]": "application/json",
	"paths./StopPoint/Meta/StopTypes.get.produces[1]": "text/json",
	"paths./StopPoint/Meta/StopTypes.get.produces[2]": "application/xml",
	"paths./StopPoint/Meta/StopTypes.get.produces[3]": "text/xml",
	"paths./StopPoint/Meta/StopTypes.get.responses.200.description": "OK",
	"paths./StopPoint/Meta/StopTypes.get.responses.200.schema.items.type": "string",
	"paths./StopPoint/Meta/StopTypes.get.responses.200.schema.type": "array",
	"paths./StopPoint/Meta/StopTypes.get.summary": "Gets the list of available StopPoint types",
	"paths./StopPoint/Meta/StopTypes.get.tags.length": 1,
	"paths./StopPoint/Meta/StopTypes.get.tags[0]": "StopPoint",
	"paths./StopPoint/Mode/{modes}.get.deprecated": false,
	"paths./StopPoint/Mode/{modes}.get.operationId": "StopPoint_GetByMode",
	"paths./StopPoint/Mode/{modes}.get.parameters.length": 2,
	"paths./StopPoint/Mode/{modes}.get.parameters[0].description": "A comma-seperated list of modes e.g. tube,dlr",
	"paths./StopPoint/Mode/{modes}.get.parameters[0].in": "path",
	"paths./StopPoint/Mode/{modes}.get.parameters[0].items.type": "string",
	"paths./StopPoint/Mode/{modes}.get.parameters[0].name": "modes",
	"paths./StopPoint/Mode/{modes}.get.parameters[0].required": true,
	"paths./StopPoint/Mode/{modes}.get.parameters[0].type": "array",
	"paths./StopPoint/Mode/{modes}.get.parameters[1].description": "The data set page to return. Page 1 equates to the first 1000 stop points, page 2 equates to 1001-2000 etc. Must be entered for bus mode as data set is too large.",
	"paths./StopPoint/Mode/{modes}.get.parameters[1].format": "int32",
	"paths./StopPoint/Mode/{modes}.get.parameters[1].in": "query",
	"paths./StopPoint/Mode/{modes}.get.parameters[1].name": "page",
	"paths./StopPoint/Mode/{modes}.get.parameters[1].required": false,
	"paths./StopPoint/Mode/{modes}.get.parameters[1].type": "integer",
	"paths./StopPoint/Mode/{modes}.get.produces.length": 4,
	"paths./StopPoint/Mode/{modes}.get.produces[0]": "application/json",
	"paths./StopPoint/Mode/{modes}.get.produces[1]": "text/json",
	"paths./StopPoint/Mode/{modes}.get.produces[2]": "application/xml",
	"paths./StopPoint/Mode/{modes}.get.produces[3]": "text/xml",
	"paths./StopPoint/Mode/{modes}.get.responses.200.description": "OK",
	"paths./StopPoint/Mode/{modes}.get.responses.200.schema.$ref": "#/definitions/StopPointsResponse",
	"paths./StopPoint/Mode/{modes}.get.summary": "Gets a list of StopPoints filtered by the modes available at that StopPoint.",
	"paths./StopPoint/Mode/{modes}.get.tags.length": 1,
	"paths./StopPoint/Mode/{modes}.get.tags[0]": "StopPoint",
	"paths./StopPoint/Mode/{modes}/Disruption.get.deprecated": false,
	"paths./StopPoint/Mode/{modes}/Disruption.get.operationId": "StopPoint_DisruptionByMode",
	"paths./StopPoint/Mode/{modes}/Disruption.get.parameters.length": 2,
	"paths./StopPoint/Mode/{modes}/Disruption.get.parameters[0].description": "A comma-seperated list of modes e.g. tube,dlr",
	"paths./StopPoint/Mode/{modes}/Disruption.get.parameters[0].in": "path",
	"paths./StopPoint/Mode/{modes}/Disruption.get.parameters[0].items.type": "string",
	"paths./StopPoint/Mode/{modes}/Disruption.get.parameters[0].name": "modes",
	"paths./StopPoint/Mode/{modes}/Disruption.get.parameters[0].required": true,
	"paths./StopPoint/Mode/{modes}/Disruption.get.parameters[0].type": "array",
	"paths./StopPoint/Mode/{modes}/Disruption.get.parameters[1].description": "",
	"paths./StopPoint/Mode/{modes}/Disruption.get.parameters[1].in": "query",
	"paths./StopPoint/Mode/{modes}/Disruption.get.parameters[1].name": "includeRouteBlockedStops",
	"paths./StopPoint/Mode/{modes}/Disruption.get.parameters[1].required": false,
	"paths./StopPoint/Mode/{modes}/Disruption.get.parameters[1].type": "boolean",
	"paths./StopPoint/Mode/{modes}/Disruption.get.produces.length": 4,
	"paths./StopPoint/Mode/{modes}/Disruption.get.produces[0]": "application/json",
	"paths./StopPoint/Mode/{modes}/Disruption.get.produces[1]": "text/json",
	"paths./StopPoint/Mode/{modes}/Disruption.get.produces[2]": "application/xml",
	"paths./StopPoint/Mode/{modes}/Disruption.get.produces[3]": "text/xml",
	"paths./StopPoint/Mode/{modes}/Disruption.get.responses.200.description": "OK",
	"paths./StopPoint/Mode/{modes}/Disruption.get.responses.200.schema.items.$ref": "#/definitions/DisruptedPoint",
	"paths./StopPoint/Mode/{modes}/Disruption.get.responses.200.schema.type": "array",
	"paths./StopPoint/Mode/{modes}/Disruption.get.summary": "Gets a distinct list of disrupted stop points for the given modes",
	"paths./StopPoint/Mode/{modes}/Disruption.get.tags.length": 1,
	"paths./StopPoint/Mode/{modes}/Disruption.get.tags[0]": "StopPoint",
	"paths./StopPoint/Search.get.deprecated": false,
	"paths./StopPoint/Search.get.parameters.length": 6,
	"paths./StopPoint/Search.get.parameters[0].description": "The query string, case-insensitive. Leading and trailing wildcards are applied automatically.",
	"paths./StopPoint/Search.get.parameters[0].in": "query",
	"paths./StopPoint/Search.get.parameters[0].name": "query",
	"paths./StopPoint/Search.get.parameters[0].required": true,
	"paths./StopPoint/Search.get.parameters[0].type": "string",
	"paths./StopPoint/Search.get.parameters[1].collectionFormat": "multi",
	"paths./StopPoint/Search.get.parameters[1].description": "An optional, parameter separated list of the modes to filter by",
	"paths./StopPoint/Search.get.parameters[1].in": "query",
	"paths./StopPoint/Search.get.parameters[1].items.type": "string",
	"paths./StopPoint/Search.get.parameters[1].name": "modes",
	"paths./StopPoint/Search.get.parameters[1].required": false,
	"paths./StopPoint/Search.get.parameters[1].type": "array",
	"paths./StopPoint/Search.get.parameters[2].description": "True to only return stations in that have Fares data available for single fares to another station.",
	"paths./StopPoint/Search.get.parameters[2].in": "query",
	"paths./StopPoint/Search.get.parameters[2].name": "faresOnly",
	"paths./StopPoint/Search.get.parameters[2].required": false,
	"paths./StopPoint/Search.get.parameters[2].type": "boolean",
	"paths./StopPoint/Search.get.parameters[3].description": "An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,\r\n            it is possible that the flattened result set will contain more than 50 items.",
	"paths./StopPoint/Search.get.parameters[3].format": "int32",
	"paths./StopPoint/Search.get.parameters[3].in": "query",
	"paths./StopPoint/Search.get.parameters[3].name": "maxResults",
	"paths./StopPoint/Search.get.parameters[3].required": false,
	"paths./StopPoint/Search.get.parameters[3].type": "integer",
	"paths./StopPoint/Search.get.parameters[4].collectionFormat": "multi",
	"paths./StopPoint/Search.get.parameters[4].description": "An optional, parameter separated list of the lines to filter by",
	"paths./StopPoint/Search.get.parameters[4].in": "query",
	"paths./StopPoint/Search.get.parameters[4].items.type": "string",
	"paths./StopPoint/Search.get.parameters[4].name": "lines",
	"paths./StopPoint/Search.get.parameters[4].required": false,
	"paths./StopPoint/Search.get.parameters[4].type": "array",
	"paths./StopPoint/Search.get.parameters[5].description": "If true, returns results including HUBs.",
	"paths./StopPoint/Search.get.parameters[5].in": "query",
	"paths./StopPoint/Search.get.parameters[5].name": "includeHubs",
	"paths./StopPoint/Search.get.parameters[5].required": false,
	"paths./StopPoint/Search.get.parameters[5].type": "boolean",
	"paths./StopPoint/Search.get.produces.length": 4,
	"paths./StopPoint/Search.get.produces[0]": "application/json",
	"paths./StopPoint/Search.get.produces[1]": "text/json",
	"paths./StopPoint/Search.get.produces[2]": "application/xml",
	"paths./StopPoint/Search.get.produces[3]": "text/xml",
	"paths./StopPoint/Search.get.responses.200.description": "OK",
	"paths./StopPoint/Search.get.responses.200.schema.$ref": "#/definitions/SearchResponse",
	"paths./StopPoint/Search.get.summary": "Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.",
	"paths./StopPoint/Search.get.tags.length": 1,
	"paths./StopPoint/Search.get.tags[0]": "StopPoint",
	"paths./StopPoint/Search/{query}.get.deprecated": false,
	"paths./StopPoint/Search/{query}.get.parameters.length": 6,
	"paths./StopPoint/Search/{query}.get.parameters[0].description": "The query string, case-insensitive. Leading and trailing wildcards are applied automatically.",
	"paths./StopPoint/Search/{query}.get.parameters[0].in": "path",
	"paths./StopPoint/Search/{query}.get.parameters[0].name": "query",
	"paths./StopPoint/Search/{query}.get.parameters[0].required": true,
	"paths./StopPoint/Search/{query}.get.parameters[0].type": "string",
	"paths./StopPoint/Search/{query}.get.parameters[1].collectionFormat": "multi",
	"paths./StopPoint/Search/{query}.get.parameters[1].description": "An optional, parameter separated list of the modes to filter by",
	"paths./StopPoint/Search/{query}.get.parameters[1].in": "query",
	"paths./StopPoint/Search/{query}.get.parameters[1].items.type": "string",
	"paths./StopPoint/Search/{query}.get.parameters[1].name": "modes",
	"paths./StopPoint/Search/{query}.get.parameters[1].required": false,
	"paths./StopPoint/Search/{query}.get.parameters[1].type": "array",
	"paths./StopPoint/Search/{query}.get.parameters[2].description": "True to only return stations in that have Fares data available for single fares to another station.",
	"paths./StopPoint/Search/{query}.get.parameters[2].in": "query",
	"paths./StopPoint/Search/{query}.get.parameters[2].name": "faresOnly",
	"paths./StopPoint/Search/{query}.get.parameters[2].required": false,
	"paths./StopPoint/Search/{query}.get.parameters[2].type": "boolean",
	"paths./StopPoint/Search/{query}.get.parameters[3].description": "An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,\r\n            it is possible that the flattened result set will contain more than 50 items.",
	"paths./StopPoint/Search/{query}.get.parameters[3].format": "int32",
	"paths./StopPoint/Search/{query}.get.parameters[3].in": "query",
	"paths./StopPoint/Search/{query}.get.parameters[3].name": "maxResults",
	"paths./StopPoint/Search/{query}.get.parameters[3].required": false,
	"paths./StopPoint/Search/{query}.get.parameters[3].type": "integer",
	"paths./StopPoint/Search/{query}.get.parameters[4].collectionFormat": "multi",
	"paths./StopPoint/Search/{query}.get.parameters[4].description": "An optional, parameter separated list of the lines to filter by",
	"paths./StopPoint/Search/{query}.get.parameters[4].in": "query",
	"paths./StopPoint/Search/{query}.get.parameters[4].items.type": "string",
	"paths./StopPoint/Search/{query}.get.parameters[4].name": "lines",
	"paths./StopPoint/Search/{query}.get.parameters[4].required": false,
	"paths./StopPoint/Search/{query}.get.parameters[4].type": "array",
	"paths./StopPoint/Search/{query}.get.parameters[5].description": "If true, returns results including HUBs.",
	"paths./StopPoint/Search/{query}.get.parameters[5].in": "query",
	"paths./StopPoint/Search/{query}.get.parameters[5].name": "includeHubs",
	"paths./StopPoint/Search/{query}.get.parameters[5].required": false,
	"paths./StopPoint/Search/{query}.get.parameters[5].type": "boolean",
	"paths./StopPoint/Search/{query}.get.produces.length": 4,
	"paths./StopPoint/Search/{query}.get.produces[0]": "application/json",
	"paths./StopPoint/Search/{query}.get.produces[1]": "text/json",
	"paths./StopPoint/Search/{query}.get.produces[2]": "application/xml",
	"paths./StopPoint/Search/{query}.get.produces[3]": "text/xml",
	"paths./StopPoint/Search/{query}.get.responses.200.description": "OK",
	"paths./StopPoint/Search/{query}.get.responses.200.schema.$ref": "#/definitions/SearchResponse",
	"paths./StopPoint/Search/{query}.get.summary": "Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.",
	"paths./StopPoint/Search/{query}.get.tags.length": 1,
	"paths./StopPoint/Search/{query}.get.tags[0]": "StopPoint",
	"paths./StopPoint/ServiceTypes.get.deprecated": false,
	"paths./StopPoint/ServiceTypes.get.operationId": "StopPoint_GetServiceTypes",
	"paths./StopPoint/ServiceTypes.get.parameters.length": 3,
	"paths./StopPoint/ServiceTypes.get.parameters[0].description": "The Naptan id of the stop",
	"paths./StopPoint/ServiceTypes.get.parameters[0].in": "query",
	"paths./StopPoint/ServiceTypes.get.parameters[0].name": "id",
	"paths./StopPoint/ServiceTypes.get.parameters[0].required": true,
	"paths./StopPoint/ServiceTypes.get.parameters[0].type": "string",
	"paths./StopPoint/ServiceTypes.get.parameters[1].collectionFormat": "multi",
	"paths./StopPoint/ServiceTypes.get.parameters[1].description": "The lines which contain the given Naptan id (all lines relevant to the given stoppoint if empty)",
	"paths./StopPoint/ServiceTypes.get.parameters[1].in": "query",
	"paths./StopPoint/ServiceTypes.get.parameters[1].items.type": "string",
	"paths./StopPoint/ServiceTypes.get.parameters[1].name": "lineIds",
	"paths./StopPoint/ServiceTypes.get.parameters[1].required": false,
	"paths./StopPoint/ServiceTypes.get.parameters[1].type": "array",
	"paths./StopPoint/ServiceTypes.get.parameters[2].collectionFormat": "multi",
	"paths./StopPoint/ServiceTypes.get.parameters[2].description": "The modes which the lines are relevant to (all if empty)",
	"paths./StopPoint/ServiceTypes.get.parameters[2].in": "query",
	"paths./StopPoint/ServiceTypes.get.parameters[2].items.type": "string",
	"paths./StopPoint/ServiceTypes.get.parameters[2].name": "modes",
	"paths./StopPoint/ServiceTypes.get.parameters[2].required": false,
	"paths./StopPoint/ServiceTypes.get.parameters[2].type": "array",
	"paths./StopPoint/ServiceTypes.get.produces.length": 4,
	"paths./StopPoint/ServiceTypes.get.produces[0]": "application/json",
	"paths./StopPoint/ServiceTypes.get.produces[1]": "text/json",
	"paths./StopPoint/ServiceTypes.get.produces[2]": "application/xml",
	"paths./StopPoint/ServiceTypes.get.produces[3]": "text/xml",
	"paths./StopPoint/ServiceTypes.get.responses.200.description": "OK",
	"paths./StopPoint/ServiceTypes.get.responses.200.schema.items.$ref": "#/definitions/LineServiceType",
	"paths./StopPoint/ServiceTypes.get.responses.200.schema.type": "array",
	"paths./StopPoint/ServiceTypes.get.summary": "Gets the service types for a given stoppoint",
	"paths./StopPoint/ServiceTypes.get.tags.length": 1,
	"paths./StopPoint/ServiceTypes.get.tags[0]": "StopPoint",
	"paths./StopPoint/Sms/{id}.get.deprecated": false,
	"paths./StopPoint/Sms/{id}.get.operationId": "StopPoint_GetBySms",
	"paths./StopPoint/Sms/{id}.get.parameters.length": 2,
	"paths./StopPoint/Sms/{id}.get.parameters[0].description": "A 5-digit Countdown Bus Stop Code e.g. 73241, 50435, 56334.",
	"paths./StopPoint/Sms/{id}.get.parameters[0].in": "path",
	"paths./StopPoint/Sms/{id}.get.parameters[0].name": "id",
	"paths./StopPoint/Sms/{id}.get.parameters[0].required": true,
	"paths./StopPoint/Sms/{id}.get.parameters[0].type": "string",
	"paths./StopPoint/Sms/{id}.get.parameters[1].description": "If set to \"web\", a 302 redirect to relevant website bus stop page is returned. Valid values are : web. All other values are ignored.",
	"paths./StopPoint/Sms/{id}.get.parameters[1].in": "query",
	"paths./StopPoint/Sms/{id}.get.parameters[1].name": "output",
	"paths./StopPoint/Sms/{id}.get.parameters[1].required": false,
	"paths./StopPoint/Sms/{id}.get.parameters[1].type": "string",
	"paths./StopPoint/Sms/{id}.get.produces.length": 4,
	"paths./StopPoint/Sms/{id}.get.produces[0]": "application/json",
	"paths./StopPoint/Sms/{id}.get.produces[1]": "text/json",
	"paths./StopPoint/Sms/{id}.get.produces[2]": "application/xml",
	"paths./StopPoint/Sms/{id}.get.produces[3]": "text/xml",
	"paths./StopPoint/Sms/{id}.get.responses.200.description": "OK",
	"paths./StopPoint/Sms/{id}.get.responses.200.schema.$ref": "#/definitions/Object",
	"paths./StopPoint/Sms/{id}.get.summary": "Gets a StopPoint for a given sms code.",
	"paths./StopPoint/Sms/{id}.get.tags.length": 1,
	"paths./StopPoint/Sms/{id}.get.tags[0]": "StopPoint",
	"paths./StopPoint/Type/{types}.get.deprecated": false,
	"paths./StopPoint/Type/{types}.get.operationId": "StopPoint_GetByType",
	"paths./StopPoint/Type/{types}.get.parameters.length": 1,
	"paths./StopPoint/Type/{types}.get.parameters[0].description": "A comma-separated list of the types to return. Max. approx. 12 types. \r\n            A list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint.",
	"paths./StopPoint/Type/{types}.get.parameters[0].in": "path",
	"paths./StopPoint/Type/{types}.get.parameters[0].items.type": "string",
	"paths./StopPoint/Type/{types}.get.parameters[0].name": "types",
	"paths./StopPoint/Type/{types}.get.parameters[0].required": true,
	"paths./StopPoint/Type/{types}.get.parameters[0].type": "array",
	"paths./StopPoint/Type/{types}.get.produces.length": 4,
	"paths./StopPoint/Type/{types}.get.produces[0]": "application/json",
	"paths./StopPoint/Type/{types}.get.produces[1]": "text/json",
	"paths./StopPoint/Type/{types}.get.produces[2]": "application/xml",
	"paths./StopPoint/Type/{types}.get.produces[3]": "text/xml",
	"paths./StopPoint/Type/{types}.get.responses.200.description": "OK",
	"paths./StopPoint/Type/{types}.get.responses.200.schema.items.$ref": "#/definitions/StopPoint",
	"paths./StopPoint/Type/{types}.get.responses.200.schema.type": "array",
	"paths./StopPoint/Type/{types}.get.summary": "Gets all stop points of a given type",
	"paths./StopPoint/Type/{types}.get.tags.length": 1,
	"paths./StopPoint/Type/{types}.get.tags[0]": "StopPoint",
	"paths./StopPoint/{ids}.get.deprecated": false,
	"paths./StopPoint/{ids}.get.parameters.length": 2,
	"paths./StopPoint/{ids}.get.parameters[0].description": "A comma-separated list of stop point ids (station naptan code e.g. 940GZZLUASL). Max. approx. 20 ids.\r\n            You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name.",
	"paths./StopPoint/{ids}.get.parameters[0].in": "path",
	"paths./StopPoint/{ids}.get.parameters[0].items.type": "string",
	"paths./StopPoint/{ids}.get.parameters[0].name": "ids",
	"paths./StopPoint/{ids}.get.parameters[0].required": true,
	"paths./StopPoint/{ids}.get.parameters[0].type": "array",
	"paths./StopPoint/{ids}.get.parameters[1].description": "Include the crowding data (static). To Filter further use: /StopPoint/{ids}/Crowding/{line}",
	"paths./StopPoint/{ids}.get.parameters[1].in": "query",
	"paths./StopPoint/{ids}.get.parameters[1].name": "includeCrowdingData",
	"paths./StopPoint/{ids}.get.parameters[1].required": false,
	"paths./StopPoint/{ids}.get.parameters[1].type": "boolean",
	"paths./StopPoint/{ids}.get.produces.length": 4,
	"paths./StopPoint/{ids}.get.produces[0]": "application/json",
	"paths./StopPoint/{ids}.get.produces[1]": "text/json",
	"paths./StopPoint/{ids}.get.produces[2]": "application/xml",
	"paths./StopPoint/{ids}.get.produces[3]": "text/xml",
	"paths./StopPoint/{ids}.get.responses.200.description": "OK",
	"paths./StopPoint/{ids}.get.responses.200.schema.items.$ref": "#/definitions/StopPoint",
	"paths./StopPoint/{ids}.get.responses.200.schema.type": "array",
	"paths./StopPoint/{ids}.get.summary": "Gets a list of StopPoints corresponding to the given list of stop ids.",
	"paths./StopPoint/{ids}.get.tags.length": 1,
	"paths./StopPoint/{ids}.get.tags[0]": "StopPoint",
	"paths./StopPoint/{ids}/Disruption.get.deprecated": false,
	"paths./StopPoint/{ids}/Disruption.get.operationId": "StopPoint_Disruption",
	"paths./StopPoint/{ids}/Disruption.get.parameters.length": 4,
	"paths./StopPoint/{ids}/Disruption.get.parameters[0].description": "A comma-seperated list of stop point ids. Max. approx. 20 ids.\r\n            You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name.",
	"paths./StopPoint/{ids}/Disruption.get.parameters[0].in": "path",
	"paths./StopPoint/{ids}/Disruption.get.parameters[0].items.type": "string",
	"paths./StopPoint/{ids}/Disruption.get.parameters[0].name": "ids",
	"paths./StopPoint/{ids}/Disruption.get.parameters[0].required": true,
	"paths./StopPoint/{ids}/Disruption.get.parameters[0].type": "array",
	"paths./StopPoint/{ids}/Disruption.get.parameters[1].description": "Specify true to return disruptions for entire family, or false to return disruptions for just this stop point. Defaults to false.",
	"paths./StopPoint/{ids}/Disruption.get.parameters[1].in": "query",
	"paths./StopPoint/{ids}/Disruption.get.parameters[1].name": "getFamily",
	"paths./StopPoint/{ids}/Disruption.get.parameters[1].required": false,
	"paths./StopPoint/{ids}/Disruption.get.parameters[1].type": "boolean",
	"paths./StopPoint/{ids}/Disruption.get.parameters[2].description": "",
	"paths./StopPoint/{ids}/Disruption.get.parameters[2].in": "query",
	"paths./StopPoint/{ids}/Disruption.get.parameters[2].name": "includeRouteBlockedStops",
	"paths./StopPoint/{ids}/Disruption.get.parameters[2].required": false,
	"paths./StopPoint/{ids}/Disruption.get.parameters[2].type": "boolean",
	"paths./StopPoint/{ids}/Disruption.get.parameters[3].description": "Specify true to associate all disruptions with parent stop point. (Only applicable when getFamily is true).",
	"paths./StopPoint/{ids}/Disruption.get.parameters[3].in": "query",
	"paths./StopPoint/{ids}/Disruption.get.parameters[3].name": "flattenResponse",
	"paths./StopPoint/{ids}/Disruption.get.parameters[3].required": false,
	"paths./StopPoint/{ids}/Disruption.get.parameters[3].type": "boolean",
	"paths./StopPoint/{ids}/Disruption.get.produces.length": 4,
	"paths./StopPoint/{ids}/Disruption.get.produces[0]": "application/json",
	"paths./StopPoint/{ids}/Disruption.get.produces[1]": "text/json",
	"paths./StopPoint/{ids}/Disruption.get.produces[2]": "application/xml",
	"paths./StopPoint/{ids}/Disruption.get.produces[3]": "text/xml",
	"paths./StopPoint/{ids}/Disruption.get.responses.200.description": "OK",
	"paths./StopPoint/{ids}/Disruption.get.responses.200.schema.items.$ref": "#/definitions/DisruptedPoint",
	"paths./StopPoint/{ids}/Disruption.get.responses.200.schema.type": "array",
	"paths./StopPoint/{ids}/Disruption.get.summary": "Gets all disruptions for the specified StopPointId, plus disruptions for any child Naptan records it may have.",
	"paths./StopPoint/{ids}/Disruption.get.tags.length": 1,
	"paths./StopPoint/{ids}/Disruption.get.tags[0]": "StopPoint",
	"paths./StopPoint/{id}/Arrivals.get.deprecated": false,
	"paths./StopPoint/{id}/Arrivals.get.operationId": "StopPoint_Arrivals",
	"paths./StopPoint/{id}/Arrivals.get.parameters.length": 1,
	"paths./StopPoint/{id}/Arrivals.get.parameters[0].description": "A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)",
	"paths./StopPoint/{id}/Arrivals.get.parameters[0].in": "path",
	"paths./StopPoint/{id}/Arrivals.get.parameters[0].name": "id",
	"paths./StopPoint/{id}/Arrivals.get.parameters[0].required": true,
	"paths./StopPoint/{id}/Arrivals.get.parameters[0].type": "string",
	"paths./StopPoint/{id}/Arrivals.get.produces.length": 4,
	"paths./StopPoint/{id}/Arrivals.get.produces[0]": "application/json",
	"paths./StopPoint/{id}/Arrivals.get.produces[1]": "text/json",
	"paths./StopPoint/{id}/Arrivals.get.produces[2]": "application/xml",
	"paths./StopPoint/{id}/Arrivals.get.produces[3]": "text/xml",
	"paths./StopPoint/{id}/Arrivals.get.responses.200.description": "OK",
	"paths./StopPoint/{id}/Arrivals.get.responses.200.schema.items.$ref": "#/definitions/Prediction",
	"paths./StopPoint/{id}/Arrivals.get.responses.200.schema.type": "array",
	"paths./StopPoint/{id}/Arrivals.get.summary": "Gets the list of arrival predictions for the given stop point id",
	"paths./StopPoint/{id}/Arrivals.get.tags.length": 1,
	"paths./StopPoint/{id}/Arrivals.get.tags[0]": "StopPoint",
	"paths./StopPoint/{id}/CanReachOnLine/{lineId}.get.deprecated": false,
	"paths./StopPoint/{id}/CanReachOnLine/{lineId}.get.operationId": "StopPoint_ReachableFrom",
	"paths./StopPoint/{id}/CanReachOnLine/{lineId}.get.parameters.length": 3,
	"paths./StopPoint/{id}/CanReachOnLine/{lineId}.get.parameters[0].description": "The id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) of the stop point to filter by",
	"paths./StopPoint/{id}/CanReachOnLine/{lineId}.get.parameters[0].in": "path",
	"paths./StopPoint/{id}/CanReachOnLine/{lineId}.get.parameters[0].name": "id",
	"paths./StopPoint/{id}/CanReachOnLine/{lineId}.get.parameters[0].required": true,
	"paths./StopPoint/{id}/CanReachOnLine/{lineId}.get.parameters[0].type": "string",
	"paths./StopPoint/{id}/CanReachOnLine/{lineId}.get.parameters[1].description": "Line id of the line to filter by (e.g. victoria)",
	"paths./StopPoint/{id}/CanReachOnLine/{lineId}.get.parameters[1].in": "path",
	"paths./StopPoint/{id}/CanReachOnLine/{lineId}.get.parameters[1].name": "lineId",
	"paths./StopPoint/{id}/CanReachOnLine/{lineId}.get.parameters[1].required": true,
	"paths./StopPoint/{id}/CanReachOnLine/{lineId}.get.parameters[1].type": "string",
	"paths./StopPoint/{id}/CanReachOnLine/{lineId}.get.parameters[2].collectionFormat": "multi",
	"paths./StopPoint/{id}/CanReachOnLine/{lineId}.get.parameters[2].description": "A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to 'Regular' if not specified",
	"paths./StopPoint/{id}/CanReachOnLine/{lineId}.get.parameters[2].in": "query",
	"paths./StopPoint/{id}/CanReachOnLine/{lineId}.get.parameters[2].items.enum.length": 2,
	"paths./StopPoint/{id}/CanReachOnLine/{lineId}.get.parameters[2].items.enum[0]": "Regular",
	"paths./StopPoint/{id}/CanReachOnLine/{lineId}.get.parameters[2].items.enum[1]": "Night",
	"paths./StopPoint/{id}/CanReachOnLine/{lineId}.get.parameters[2].items.type": "string",
	"paths./StopPoint/{id}/CanReachOnLine/{lineId}.get.parameters[2].name": "serviceTypes",
	"paths./StopPoint/{id}/CanReachOnLine/{lineId}.get.parameters[2].required": false,
	"paths./StopPoint/{id}/CanReachOnLine/{lineId}.get.parameters[2].type": "array",
	"paths./StopPoint/{id}/CanReachOnLine/{lineId}.get.produces.length": 4,
	"paths./StopPoint/{id}/CanReachOnLine/{lineId}.get.produces[0]": "application/json",
	"paths./StopPoint/{id}/CanReachOnLine/{lineId}.get.produces[1]": "text/json",
	"paths./StopPoint/{id}/CanReachOnLine/{lineId}.get.produces[2]": "application/xml",
	"paths./StopPoint/{id}/CanReachOnLine/{lineId}.get.produces[3]": "text/xml",
	"paths./StopPoint/{id}/CanReachOnLine/{lineId}.get.responses.200.description": "OK",
	"paths./StopPoint/{id}/CanReachOnLine/{lineId}.get.responses.200.schema.items.$ref": "#/definitions/StopPoint",
	"paths./StopPoint/{id}/CanReachOnLine/{lineId}.get.responses.200.schema.type": "array",
	"paths./StopPoint/{id}/CanReachOnLine/{lineId}.get.summary": "Gets Stopoints that are reachable from a station/line combination.",
	"paths./StopPoint/{id}/CanReachOnLine/{lineId}.get.tags.length": 1,
	"paths./StopPoint/{id}/CanReachOnLine/{lineId}.get.tags[0]": "StopPoint",
	"paths./StopPoint/{id}/Crowding/{line}.get.deprecated": false,
	"paths./StopPoint/{id}/Crowding/{line}.get.operationId": "StopPoint_Crowding",
	"paths./StopPoint/{id}/Crowding/{line}.get.parameters.length": 3,
	"paths./StopPoint/{id}/Crowding/{line}.get.parameters[0].description": "The Naptan id of the stop",
	"paths./StopPoint/{id}/Crowding/{line}.get.parameters[0].in": "path",
	"paths./StopPoint/{id}/Crowding/{line}.get.parameters[0].name": "id",
	"paths./StopPoint/{id}/Crowding/{line}.get.parameters[0].required": true,
	"paths./StopPoint/{id}/Crowding/{line}.get.parameters[0].type": "string",
	"paths./StopPoint/{id}/Crowding/{line}.get.parameters[1].description": "A particular line e.g. victoria, circle, northern etc.",
	"paths./StopPoint/{id}/Crowding/{line}.get.parameters[1].in": "path",
	"paths./StopPoint/{id}/Crowding/{line}.get.parameters[1].name": "line",
	"paths./StopPoint/{id}/Crowding/{line}.get.parameters[1].required": true,
	"paths./StopPoint/{id}/Crowding/{line}.get.parameters[1].type": "string",
	"paths./StopPoint/{id}/Crowding/{line}.get.parameters[2].description": "The direction of travel. Can be inbound or outbound.",
	"paths./StopPoint/{id}/Crowding/{line}.get.parameters[2].enum.length": 3,
	"paths./StopPoint/{id}/Crowding/{line}.get.parameters[2].enum[0]": "inbound",
	"paths./StopPoint/{id}/Crowding/{line}.get.parameters[2].enum[1]": "outbound",
	"paths./StopPoint/{id}/Crowding/{line}.get.parameters[2].enum[2]": "all",
	"paths./StopPoint/{id}/Crowding/{line}.get.parameters[2].in": "query",
	"paths./StopPoint/{id}/Crowding/{line}.get.parameters[2].name": "direction",
	"paths./StopPoint/{id}/Crowding/{line}.get.parameters[2].required": true,
	"paths./StopPoint/{id}/Crowding/{line}.get.parameters[2].type": "string",
	"paths./StopPoint/{id}/Crowding/{line}.get.produces.length": 4,
	"paths./StopPoint/{id}/Crowding/{line}.get.produces[0]": "application/json",
	"paths./StopPoint/{id}/Crowding/{line}.get.produces[1]": "text/json",
	"paths./StopPoint/{id}/Crowding/{line}.get.produces[2]": "application/xml",
	"paths./StopPoint/{id}/Crowding/{line}.get.produces[3]": "text/xml",
	"paths./StopPoint/{id}/Crowding/{line}.get.responses.200.description": "OK",
	"paths./StopPoint/{id}/Crowding/{line}.get.responses.200.schema.items.$ref": "#/definitions/StopPoint",
	"paths./StopPoint/{id}/Crowding/{line}.get.responses.200.schema.type": "array",
	"paths./StopPoint/{id}/Crowding/{line}.get.summary": "Gets all the Crowding data (static) for the StopPointId, plus crowding data for a given line and optionally a particular direction.",
	"paths./StopPoint/{id}/Crowding/{line}.get.tags.length": 1,
	"paths./StopPoint/{id}/Crowding/{line}.get.tags[0]": "StopPoint",
	"paths./StopPoint/{id}/DirectionTo/{toStopPointId}.get.deprecated": false,
	"paths./StopPoint/{id}/DirectionTo/{toStopPointId}.get.operationId": "StopPoint_Direction",
	"paths./StopPoint/{id}/DirectionTo/{toStopPointId}.get.parameters.length": 3,
	"paths./StopPoint/{id}/DirectionTo/{toStopPointId}.get.parameters[0].description": "Originating stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)",
	"paths./StopPoint/{id}/DirectionTo/{toStopPointId}.get.parameters[0].in": "path",
	"paths./StopPoint/{id}/DirectionTo/{toStopPointId}.get.parameters[0].name": "id",
	"paths./StopPoint/{id}/DirectionTo/{toStopPointId}.get.parameters[0].required": true,
	"paths./StopPoint/{id}/DirectionTo/{toStopPointId}.get.parameters[0].type": "string",
	"paths./StopPoint/{id}/DirectionTo/{toStopPointId}.get.parameters[1].description": "Destination stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)",
	"paths./StopPoint/{id}/DirectionTo/{toStopPointId}.get.parameters[1].in": "path",
	"paths./StopPoint/{id}/DirectionTo/{toStopPointId}.get.parameters[1].name": "toStopPointId",
	"paths./StopPoint/{id}/DirectionTo/{toStopPointId}.get.parameters[1].required": true,
	"paths./StopPoint/{id}/DirectionTo/{toStopPointId}.get.parameters[1].type": "string",
	"paths./StopPoint/{id}/DirectionTo/{toStopPointId}.get.parameters[2].description": "Optional line id filter e.g. victoria",
	"paths./StopPoint/{id}/DirectionTo/{toStopPointId}.get.parameters[2].in": "query",
	"paths./StopPoint/{id}/DirectionTo/{toStopPointId}.get.parameters[2].name": "lineId",
	"paths./StopPoint/{id}/DirectionTo/{toStopPointId}.get.parameters[2].required": false,
	"paths./StopPoint/{id}/DirectionTo/{toStopPointId}.get.parameters[2].type": "string",
	"paths./StopPoint/{id}/DirectionTo/{toStopPointId}.get.produces.length": 4,
	"paths./StopPoint/{id}/DirectionTo/{toStopPointId}.get.produces[0]": "application/json",
	"paths./StopPoint/{id}/DirectionTo/{toStopPointId}.get.produces[1]": "text/json",
	"paths./StopPoint/{id}/DirectionTo/{toStopPointId}.get.produces[2]": "application/xml",
	"paths./StopPoint/{id}/DirectionTo/{toStopPointId}.get.produces[3]": "text/xml",
	"paths./StopPoint/{id}/DirectionTo/{toStopPointId}.get.responses.200.description": "OK",
	"paths./StopPoint/{id}/DirectionTo/{toStopPointId}.get.responses.200.schema.type": "string",
	"paths./StopPoint/{id}/DirectionTo/{toStopPointId}.get.summary": "Returns the canonical direction, \"inbound\" or \"outbound\", for a given pair of stop point Ids in the direction from -\u0026gt; to.",
	"paths./StopPoint/{id}/DirectionTo/{toStopPointId}.get.tags.length": 1,
	"paths./StopPoint/{id}/DirectionTo/{toStopPointId}.get.tags[0]": "StopPoint",
	"paths./StopPoint/{id}/Route.get.deprecated": false,
	"paths./StopPoint/{id}/Route.get.operationId": "StopPoint_Route",
	"paths./StopPoint/{id}/Route.get.parameters.length": 2,
	"paths./StopPoint/{id}/Route.get.parameters[0].description": "A stop point id (station naptan codes e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)",
	"paths./StopPoint/{id}/Route.get.parameters[0].in": "path",
	"paths./StopPoint/{id}/Route.get.parameters[0].name": "id",
	"paths./StopPoint/{id}/Route.get.parameters[0].required": true,
	"paths./StopPoint/{id}/Route.get.parameters[0].type": "string",
	"paths./StopPoint/{id}/Route.get.parameters[1].collectionFormat": "multi",
	"paths./StopPoint/{id}/Route.get.parameters[1].description": "A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to 'Regular' if not specified",
	"paths./StopPoint/{id}/Route.get.parameters[1].in": "query",
	"paths./StopPoint/{id}/Route.get.parameters[1].items.enum.length": 2,
	"paths./StopPoint/{id}/Route.get.parameters[1].items.enum[0]": "Regular",
	"paths./StopPoint/{id}/Route.get.parameters[1].items.enum[1]": "Night",
	"paths./StopPoint/{id}/Route.get.parameters[1].items.type": "string",
	"paths./StopPoint/{id}/Route.get.parameters[1].name": "serviceTypes",
	"paths./StopPoint/{id}/Route.get.parameters[1].required": false,
	"paths./StopPoint/{id}/Route.get.parameters[1].type": "array",
	"paths./StopPoint/{id}/Route.get.produces.length": 4,
	"paths./StopPoint/{id}/Route.get.produces[0]": "application/json",
	"paths./StopPoint/{id}/Route.get.produces[1]": "text/json",
	"paths./StopPoint/{id}/Route.get.produces[2]": "application/xml",
	"paths./StopPoint/{id}/Route.get.produces[3]": "text/xml",
	"paths./StopPoint/{id}/Route.get.responses.200.description": "OK",
	"paths./StopPoint/{id}/Route.get.responses.200.schema.items.$ref": "#/definitions/StopPointRouteSection",
	"paths./StopPoint/{id}/Route.get.responses.200.schema.type": "array",
	"paths./StopPoint/{id}/Route.get.summary": "Returns the route sections for all the lines that service the given stop point ids",
	"paths./StopPoint/{id}/Route.get.tags.length": 1,
	"paths./StopPoint/{id}/Route.get.tags[0]": "StopPoint",
	"paths./StopPoint/{id}/placeTypes.get.deprecated": false,
	"paths./StopPoint/{id}/placeTypes.get.parameters.length": 2,
	"paths./StopPoint/{id}/placeTypes.get.parameters[0].description": "A naptan id for a stop point (station naptan code e.g. 940GZZLUASL).",
	"paths./StopPoint/{id}/placeTypes.get.parameters[0].in": "path",
	"paths./StopPoint/{id}/placeTypes.get.parameters[0].name": "id",
	"paths./StopPoint/{id}/placeTypes.get.parameters[0].required": true,
	"paths./StopPoint/{id}/placeTypes.get.parameters[0].type": "string",
	"paths./StopPoint/{id}/placeTypes.get.parameters[1].collectionFormat": "multi",
	"paths./StopPoint/{id}/placeTypes.get.parameters[1].description": "A comcomma-separated value representing the place types.",
	"paths./StopPoint/{id}/placeTypes.get.parameters[1].in": "query",
	"paths./StopPoint/{id}/placeTypes.get.parameters[1].items.type": "string",
	"paths./StopPoint/{id}/placeTypes.get.parameters[1].name": "placeTypes",
	"paths./StopPoint/{id}/placeTypes.get.parameters[1].required": true,
	"paths./StopPoint/{id}/placeTypes.get.parameters[1].type": "array",
	"paths./StopPoint/{id}/placeTypes.get.produces.length": 4,
	"paths./StopPoint/{id}/placeTypes.get.produces[0]": "application/json",
	"paths./StopPoint/{id}/placeTypes.get.produces[1]": "text/json",
	"paths./StopPoint/{id}/placeTypes.get.produces[2]": "application/xml",
	"paths./StopPoint/{id}/placeTypes.get.produces[3]": "text/xml",
	"paths./StopPoint/{id}/placeTypes.get.responses.200.description": "OK",
	"paths./StopPoint/{id}/placeTypes.get.responses.200.schema.items.$ref": "#/definitions/Place",
	"paths./StopPoint/{id}/placeTypes.get.responses.200.schema.type": "array",
	"paths./StopPoint/{id}/placeTypes.get.summary": "Get a list of places corresponding to a given id and place types.",
	"paths./StopPoint/{id}/placeTypes.get.tags.length": 1,
	"paths./StopPoint/{id}/placeTypes.get.tags[0]": "StopPoint",
	"paths./StopPoint/{stopPointId}/CarParks.get.deprecated": false,
	"paths./StopPoint/{stopPointId}/CarParks.get.operationId": "StopPoint_GetCarParksById",
	"paths./StopPoint/{stopPointId}/CarParks.get.parameters.length": 1,
	"paths./StopPoint/{stopPointId}/CarParks.get.parameters[0].description": "stopPointId is required to get the car parks.",
	"paths./StopPoint/{stopPointId}/CarParks.get.parameters[0].in": "path",
	"paths./StopPoint/{stopPointId}/CarParks.get.parameters[0].name": "stopPointId",
	"paths./StopPoint/{stopPointId}/CarParks.get.parameters[0].required": true,
	"paths./StopPoint/{stopPointId}/CarParks.get.parameters[0].type": "string",
	"paths./StopPoint/{stopPointId}/CarParks.get.produces.length": 4,
	"paths./StopPoint/{stopPointId}/CarParks.get.produces[0]": "application/json",
	"paths./StopPoint/{stopPointId}/CarParks.get.produces[1]": "text/json",
	"paths./StopPoint/{stopPointId}/CarParks.get.produces[2]": "application/xml",
	"paths./StopPoint/{stopPointId}/CarParks.get.produces[3]": "text/xml",
	"paths./StopPoint/{stopPointId}/CarParks.get.responses.200.description": "OK",
	"paths./StopPoint/{stopPointId}/CarParks.get.responses.200.schema.items.$ref": "#/definitions/Place",
	"paths./StopPoint/{stopPointId}/CarParks.get.responses.200.schema.type": "array",
	"paths./StopPoint/{stopPointId}/CarParks.get.summary": "Get car parks corresponding to the given stop point id.",
	"paths./StopPoint/{stopPointId}/CarParks.get.tags.length": 1,
	"paths./StopPoint/{stopPointId}/CarParks.get.tags[0]": "StopPoint",
	"paths./StopPoint/{stopPointId}/TaxiRanks.get.deprecated": false,
	"paths./StopPoint/{stopPointId}/TaxiRanks.get.operationId": "StopPoint_GetTaxiRanksByIds",
	"paths./StopPoint/{stopPointId}/TaxiRanks.get.parameters.length": 1,
	"paths./StopPoint/{stopPointId}/TaxiRanks.get.parameters[0].description": "stopPointId is required to get the taxi ranks.",
	"paths./StopPoint/{stopPointId}/TaxiRanks.get.parameters[0].in": "path",
	"paths./StopPoint/{stopPointId}/TaxiRanks.get.parameters[0].name": "stopPointId",
	"paths./StopPoint/{stopPointId}/TaxiRanks.get.parameters[0].required": true,
	"paths./StopPoint/{stopPointId}/TaxiRanks.get.parameters[0].type": "string",
	"paths./StopPoint/{stopPointId}/TaxiRanks.get.produces.length": 4,
	"paths./StopPoint/{stopPointId}/TaxiRanks.get.produces[0]": "application/json",
	"paths./StopPoint/{stopPointId}/TaxiRanks.get.produces[1]": "text/json",
	"paths./StopPoint/{stopPointId}/TaxiRanks.get.produces[2]": "application/xml",
	"paths./StopPoint/{stopPointId}/TaxiRanks.get.produces[3]": "text/xml",
	"paths./StopPoint/{stopPointId}/TaxiRanks.get.responses.200.description": "OK",
	"paths./StopPoint/{stopPointId}/TaxiRanks.get.responses.200.schema.items.$ref": "#/definitions/Place",
	"paths./StopPoint/{stopPointId}/TaxiRanks.get.responses.200.schema.type": "array",
	"paths./StopPoint/{stopPointId}/TaxiRanks.get.summary": "Gets a list of taxi ranks corresponding to the given stop point id.",
	"paths./StopPoint/{stopPointId}/TaxiRanks.get.tags.length": 1,
	"paths./StopPoint/{stopPointId}/TaxiRanks.get.tags[0]": "StopPoint",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.deprecated": false,
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.operationId": "TravelTime_GetCompareOverlay",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters.length": 14,
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[0].description": "The zoom level.",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[0].format": "int32",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[0].in": "path",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[0].name": "z",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[0].required": true,
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[0].type": "integer",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[10].description": "The direction of travel.",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[10].enum.length": 3,
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[10].enum[0]": "Average",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[10].enum[1]": "From",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[10].enum[2]": "To",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[10].in": "query",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[10].name": "direction",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[10].required": true,
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[10].type": "string",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[11].description": "The total minutes between the travel time bands",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[11].format": "int32",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[11].in": "query",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[11].name": "travelTimeInterval",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[11].required": true,
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[11].type": "integer",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[12].in": "query",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[12].name": "compareType",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[12].required": true,
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[12].type": "string",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[13].in": "query",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[13].name": "compareValue",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[13].required": true,
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[13].type": "string",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[1].description": "The latitude of the pin.",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[1].format": "double",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[1].in": "path",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[1].name": "pinLat",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[1].required": true,
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[1].type": "number",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[2].description": "The longitude of the pin.",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[2].format": "double",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[2].in": "path",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[2].name": "pinLon",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[2].required": true,
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[2].type": "number",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[3].description": "The map center latitude.",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[3].format": "double",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[3].in": "path",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[3].name": "mapCenterLat",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[3].required": true,
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[3].type": "number",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[4].description": "The map center longitude.",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[4].format": "double",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[4].in": "path",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[4].name": "mapCenterLon",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[4].required": true,
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[4].type": "number",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[5].description": "The title of the scenario.",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[5].in": "query",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[5].name": "scenarioTitle",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[5].required": true,
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[5].type": "string",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[6].description": "The id for the time of day (AM/INTER/PM)",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[6].in": "query",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[6].name": "timeOfDayId",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[6].required": true,
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[6].type": "string",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[7].description": "The id of the mode.",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[7].in": "query",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[7].name": "modeId",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[7].required": true,
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[7].type": "string",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[8].description": "The width of the requested overlay.",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[8].format": "int32",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[8].in": "path",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[8].name": "width",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[8].required": true,
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[8].type": "integer",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[9].description": "The height of the requested overlay.",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[9].format": "int32",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[9].in": "path",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[9].name": "height",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[9].required": true,
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[9].type": "integer",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.produces.length": 4,
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.produces[0]": "application/json",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.produces[1]": "text/json",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.produces[2]": "application/xml",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.produces[3]": "text/xml",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.responses.200.description": "OK",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.responses.200.schema.$ref": "#/definitions/Object",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.summary": "Gets the TravelTime overlay.",
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.tags.length": 1,
	"paths./TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.tags[0]": "TravelTime",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.deprecated": false,
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.operationId": "TravelTime_GetOverlay",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters.length": 12,
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[0].description": "The zoom level.",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[0].format": "int32",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[0].in": "path",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[0].name": "z",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[0].required": true,
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[0].type": "integer",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[10].description": "The direction of travel.",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[10].enum.length": 3,
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[10].enum[0]": "Average",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[10].enum[1]": "From",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[10].enum[2]": "To",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[10].in": "query",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[10].name": "direction",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[10].required": true,
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[10].type": "string",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[11].description": "The total minutes between the travel time bands",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[11].format": "int32",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[11].in": "query",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[11].name": "travelTimeInterval",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[11].required": true,
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[11].type": "integer",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[1].description": "The latitude of the pin.",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[1].format": "double",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[1].in": "path",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[1].name": "pinLat",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[1].required": true,
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[1].type": "number",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[2].description": "The longitude of the pin.",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[2].format": "double",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[2].in": "path",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[2].name": "pinLon",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[2].required": true,
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[2].type": "number",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[3].description": "The map center latitude.",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[3].format": "double",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[3].in": "path",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[3].name": "mapCenterLat",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[3].required": true,
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[3].type": "number",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[4].description": "The map center longitude.",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[4].format": "double",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[4].in": "path",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[4].name": "mapCenterLon",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[4].required": true,
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[4].type": "number",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[5].description": "The title of the scenario.",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[5].in": "query",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[5].name": "scenarioTitle",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[5].required": true,
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[5].type": "string",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[6].description": "The id for the time of day (AM/INTER/PM)",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[6].in": "query",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[6].name": "timeOfDayId",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[6].required": true,
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[6].type": "string",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[7].description": "The id of the mode.",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[7].in": "query",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[7].name": "modeId",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[7].required": true,
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[7].type": "string",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[8].description": "The width of the requested overlay.",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[8].format": "int32",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[8].in": "path",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[8].name": "width",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[8].required": true,
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[8].type": "integer",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[9].description": "The height of the requested overlay.",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[9].format": "int32",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[9].in": "path",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[9].name": "height",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[9].required": true,
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.parameters[9].type": "integer",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.produces.length": 4,
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.produces[0]": "application/json",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.produces[1]": "text/json",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.produces[2]": "application/xml",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.produces[3]": "text/xml",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.responses.200.description": "OK",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.responses.200.schema.$ref": "#/definitions/Object",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.summary": "Gets the TravelTime overlay.",
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.tags.length": 1,
	"paths./TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}.get.tags[0]": "TravelTime",
	"paths./Vehicle/EmissionSurcharge.get.deprecated": false,
	"paths./Vehicle/EmissionSurcharge.get.operationId": "Vehicle_GetVehicle",
	"paths./Vehicle/EmissionSurcharge.get.parameters.length": 1,
	"paths./Vehicle/EmissionSurcharge.get.parameters[0].description": "The Vehicle Registration Mark",
	"paths./Vehicle/EmissionSurcharge.get.parameters[0].in": "query",
	"paths./Vehicle/EmissionSurcharge.get.parameters[0].name": "vrm",
	"paths./Vehicle/EmissionSurcharge.get.parameters[0].required": true,
	"paths./Vehicle/EmissionSurcharge.get.parameters[0].type": "string",
	"paths./Vehicle/EmissionSurcharge.get.produces.length": 4,
	"paths./Vehicle/EmissionSurcharge.get.produces[0]": "application/json",
	"paths./Vehicle/EmissionSurcharge.get.produces[1]": "text/json",
	"paths./Vehicle/EmissionSurcharge.get.produces[2]": "application/xml",
	"paths./Vehicle/EmissionSurcharge.get.produces[3]": "text/xml",
	"paths./Vehicle/EmissionSurcharge.get.responses.200.description": "OK",
	"paths./Vehicle/EmissionSurcharge.get.responses.200.schema.$ref": "#/definitions/EmissionsSurchargeVehicle",
	"paths./Vehicle/EmissionSurcharge.get.summary": "Gets the Emissions Surcharge compliance for the Vehicle",
	"paths./Vehicle/EmissionSurcharge.get.tags.length": 1,
	"paths./Vehicle/EmissionSurcharge.get.tags[0]": "Vehicle",
	"paths./Vehicle/{ids}/Arrivals.get.deprecated": false,
	"paths./Vehicle/{ids}/Arrivals.get.operationId": "Vehicle_Get",
	"paths./Vehicle/{ids}/Arrivals.get.parameters.length": 1,
	"paths./Vehicle/{ids}/Arrivals.get.parameters[0].description": "A comma-separated list of vehicle ids e.g. LX58CFV,LX11AZB,LX58CFE. Max approx. 25 ids.",
	"paths./Vehicle/{ids}/Arrivals.get.parameters[0].in": "path",
	"paths./Vehicle/{ids}/Arrivals.get.parameters[0].items.type": "string",
	"paths./Vehicle/{ids}/Arrivals.get.parameters[0].name": "ids",
	"paths./Vehicle/{ids}/Arrivals.get.parameters[0].required": true,
	"paths./Vehicle/{ids}/Arrivals.get.parameters[0].type": "array",
	"paths./Vehicle/{ids}/Arrivals.get.produces.length": 4,
	"paths./Vehicle/{ids}/Arrivals.get.produces[0]": "application/json",
	"paths./Vehicle/{ids}/Arrivals.get.produces[1]": "text/json",
	"paths./Vehicle/{ids}/Arrivals.get.produces[2]": "application/xml",
	"paths./Vehicle/{ids}/Arrivals.get.produces[3]": "text/xml",
	"paths./Vehicle/{ids}/Arrivals.get.responses.200.description": "OK",
	"paths./Vehicle/{ids}/Arrivals.get.responses.200.schema.items.$ref": "#/definitions/Prediction",
	"paths./Vehicle/{ids}/Arrivals.get.responses.200.schema.type": "array",
	"paths./Vehicle/{ids}/Arrivals.get.summary": "Gets the predictions for a given list of vehicle Id's.",
	"paths./Vehicle/{ids}/Arrivals.get.tags.length": 1,
	"paths./Vehicle/{ids}/Arrivals.get.tags[0]": "Vehicle",
	"schemes.length": 1,
	"schemes[0]": "https",
	"securityDefinitions.apiKey.description": "API Key Authentication",
	"securityDefinitions.apiKey.in": "query",
	"securityDefinitions.apiKey.name": "app_key",
	"securityDefinitions.apiKey.type": "apiKey",
	"securityDefinitions.appId.description": "Application ID",
	"securityDefinitions.appId.in": "query",
	"securityDefinitions.appId.name": "app_id",
	"securityDefinitions.appId.type": "apiKey",
	"swagger": "2.0"
}
basePath = "/api/v1"
"definitions.Artifact.properties.node_index.type" = "integer"
"definitions.Artifact.properties.path.type" = "string"
"definitions.Artifact.properties.pretty_path.type" = "string"
"definitions.Artifact.properties.url.type" = "string"
"definitions.Artifact.type" = "object"
"definitions.Artifacts.items.$ref" = "#/definitions/Artifact"
"definitions.Artifacts.type" = "array"
"definitions.Aws.properties.keypair.type.length" = 2
"definitions.Aws.properties.keypair.type[0]" = "string"
"definitions.Aws.properties.keypair.type[1]" = "null"
"definitions.Aws.type" = "object"
"definitions.Build.properties.body.description" = "commit message body"
"definitions.Build.properties.body.type" = "string"
"definitions.Build.properties.branch.type" = "string"
"definitions.Build.properties.build_time_millis.type" = "integer"
"definitions.Build.properties.build_url.format" = "uri"
"definitions.Build.properties.build_url.type" = "string"
"definitions.Build.properties.committer_email.format" = "email"
"definitions.Build.properties.committer_email.type" = "string"
"definitions.Build.properties.committer_name.type" = "string"
"definitions.Build.properties.dont_build.description" = "reason why we didn't build, if we didn't build"
"definitions.Build.properties.dont_build.type.length" = 2
"definitions.Build.properties.dont_build.type[0]" = "string"
"definitions.Build.properties.dont_build.type[1]" = "null"
"definitions.Build.properties.lifecycle.$ref" = "#/definitions/Lifecycle"
"definitions.Build.properties.previous.$ref" = "#/definitions/PreviousBuild"
"definitions.Build.properties.queued_at.description" = "time build was queued"
"definitions.Build.properties.queued_at.format" = "date-time"
"definitions.Build.properties.queued_at.type" = "string"
"definitions.Build.properties.reponame.type" = "string"
"definitions.Build.properties.retry_of.description" = "build_num of the build this is a retry of"
"definitions.Build.properties.retry_of.type.length" = 2
"definitions.Build.properties.retry_of.type[0]" = "integer"
"definitions.Build.properties.retry_of.type[1]" = "null"
"definitions.Build.properties.start_time.description" = "time build started"
"definitions.Build.properties.start_time.format" = "date-time"
"definitions.Build.properties.start_time.type" = "string"
"definitions.Build.properties.stop_time.description" = "time build finished"
"definitions.Build.properties.stop_time.format" = "date-time"
"definitions.Build.properties.stop_time.type" = "string"
"definitions.Build.properties.subject.type" = "string"
"definitions.Build.properties.username.type" = "string"
"definitions.Build.properties.vcs_url.format" = "uri"
"definitions.Build.properties.vcs_url.type" = "string"
"definitions.Build.properties.why.description" = "short string explaining the reason we built"
"definitions.Build.properties.why.type" = "string"
"definitions.Build.type" = "object"
"definitions.BuildDetail.description" = "previous build"
"definitions.BuildDetail.properties.all_commit_details.$ref" = "#/definitions/CommitDetails"
"definitions.BuildDetail.properties.compare.format" = "uri"
"definitions.BuildDetail.properties.compare.type.length" = 2
"definitions.BuildDetail.properties.compare.type[0]" = "string"
"definitions.BuildDetail.properties.compare.type[1]" = "null"
"definitions.BuildDetail.properties.job_name.type" = "string"
"definitions.BuildDetail.properties.node.type" = "null"
"definitions.BuildDetail.properties.previous_successful_build.$ref" = "#/definitions/PreviousBuild"
"definitions.BuildDetail.properties.retries.type.length" = 2
"definitions.BuildDetail.properties.retries.type[0]" = "boolean"
"definitions.BuildDetail.properties.retries.type[1]" = "null"
"definitions.BuildDetail.properties.ssh_enabled.type.length" = 2
"definitions.BuildDetail.properties.ssh_enabled.type[0]" = "boolean"
"definitions.BuildDetail.properties.ssh_enabled.type[1]" = "null"
"definitions.BuildDetail.properties.timedout.type.length" = 2
"definitions.BuildDetail.properties.timedout.type[0]" = "boolean"
"definitions.BuildDetail.properties.timedout.type[1]" = "null"
"definitions.BuildDetail.properties.usage_queued_at.format" = "date-time"
"definitions.BuildDetail.properties.usage_queued_at.type" = "string"
"definitions.BuildDetail.properties.user.$ref" = "#/definitions/User"
"definitions.BuildDetail.type" = "object"
"definitions.BuildParameters.description" = "Additional environment variables to inject into the build environment. A map of names to values.\n"
"definitions.BuildParameters.type" = "object"
"definitions.BuildSummary.properties.added_at.format" = "date-time"
"definitions.BuildSummary.properties.added_at.type" = "string"
"definitions.BuildSummary.properties.build_num.type" = "integer"
"definitions.BuildSummary.properties.outcome.$ref" = "#/definitions/Outcome"
"definitions.BuildSummary.properties.pushed_at.format" = "date-time"
"definitions.BuildSummary.properties.pushed_at.type" = "string"
"definitions.BuildSummary.properties.status.$ref" = "#/definitions/Status"
"definitions.BuildSummary.properties.vcs_revision.$ref" = "#/definitions/Sha1"
"definitions.BuildSummary.type" = "object"
"definitions.Builds.items.$ref" = "#/definitions/Build"
"definitions.Builds.type" = "array"
"definitions.CommitDetail.properties.author_date.format" = "date-time"
"definitions.CommitDetail.properties.author_date.type" = "string"
"definitions.CommitDetail.properties.author_email.format" = "email"
"definitions.CommitDetail.properties.author_email.type" = "string"
"definitions.CommitDetail.properties.author_login.type" = "string"
"definitions.CommitDetail.properties.author_name.type" = "string"
"definitions.CommitDetail.properties.body.type" = "string"
"definitions.CommitDetail.properties.commit.$ref" = "#/definitions/Sha1"
"definitions.CommitDetail.properties.commit_url.format" = "uri"
"definitions.CommitDetail.properties.commit_url.type" = "string"
"definitions.CommitDetail.properties.committer_date.format" = "date-time"
"definitions.CommitDetail.properties.committer_date.type" = "string"
"definitions.CommitDetail.properties.committer_email.format" = "email"
"definitions.CommitDetail.properties.committer_email.type" = "string"
"definitions.CommitDetail.properties.committer_login.type" = "string"
"definitions.CommitDetail.properties.committer_name.type" = "string"
"definitions.CommitDetail.properties.subject.type" = "string"
"definitions.CommitDetail.type" = "object"
"definitions.CommitDetails.items.$ref" = "#/definitions/CommitDetail"
"definitions.CommitDetails.type" = "array"
"definitions.Envvar.properties.name.type" = "string"
"definitions.Envvar.properties.value.type" = "string"
"definitions.Envvar.type" = "object"
"definitions.Envvars.items.$ref" = "#/definitions/Envvar"
"definitions.Envvars.type" = "array"
"definitions.Key.properties.fingerprint.type" = "string"
"definitions.Key.properties.preferred.type" = "boolean"
"definitions.Key.properties.public_key.type" = "string"
"definitions.Key.properties.time.description" = "when the key was issued"
"definitions.Key.properties.time.format" = "date-time"
"definitions.Key.properties.time.type" = "string"
"definitions.Key.properties.type.description" = "can be \"deploy-key\" or \"github-user-key\"\n"
"definitions.Key.properties.type.enum.length" = 2
"definitions.Key.properties.type.enum[0]" = "deploy-key"
"definitions.Key.properties.type.enum[1]" = "github-user-key"
"definitions.Key.properties.type.type" = "string"
"definitions.Key.type" = "object"
"definitions.Keys.items.$ref" = "#/definitions/Key"
"definitions.Keys.type" = "array"
"definitions.Lifecycle.enum.length" = 6
"definitions.Lifecycle.enum[0]" = "queued"
"definitions.Lifecycle.enum[1]" = "scheduled"
"definitions.Lifecycle.enum[2]" = "not_run"
"definitions.Lifecycle.enum[3]" = "not_running"
"definitions.Lifecycle.enum[4]" = "running"
"definitions.Lifecycle.enum[5]" = "finished"
"definitions.Lifecycle.type" = "string"
"definitions.Outcome.enum.length" = 6
"definitions.Outcome.enum[0]" = "canceled"
"definitions.Outcome.enum[1]" = "infrastructure_fail"
"definitions.Outcome.enum[2]" = "timedout"
"definitions.Outcome.enum[3]" = "failed"
"definitions.Outcome.enum[4]" = "no_tests"
"definitions.Outcome.enum[5]" = "success"
"definitions.Outcome.type" = "string"
"definitions.Parallel.description" = "The number of containers to use to run the build. Default is null and the project default is used.\n"
"definitions.Parallel.type" = "string"
"definitions.PreviousBuild.description" = "previous build"
"definitions.PreviousBuild.properties.build_num.type" = "integer"
"definitions.PreviousBuild.properties.build_time_millis.type" = "integer"
"definitions.PreviousBuild.properties.status.$ref" = "#/definitions/Status"
"definitions.PreviousBuild.type" = "object"
"definitions.Project.properties.aws.$ref" = "#/definitions/Aws"
"definitions.Project.properties.branches.type" = "object"
"definitions.Project.properties.campfire_notify_prefs.$ref" = "#/definitions/StringOrNull"
"definitions.Project.properties.campfire_room.$ref" = "#/definitions/StringOrNull"
"definitions.Project.properties.campfire_subdomain.$ref" = "#/definitions/StringOrNull"
"definitions.Project.properties.campfire_token.$ref" = "#/definitions/StringOrNull"
"definitions.Project.properties.compile.type" = "string"
"definitions.Project.properties.default_branch.type" = "string"
"definitions.Project.properties.dependencies.type" = "string"
"definitions.Project.properties.extra.type" = "string"
"definitions.Project.properties.feature_flags.properties.build-fork-prs.type" = "boolean"
"definitions.Project.properties.feature_flags.properties.fleet.type.length" = 2
"definitions.Project.properties.feature_flags.properties.fleet.type[0]" = "boolean"
"definitions.Project.properties.feature_flags.properties.fleet.type[1]" = "null"
"definitions.Project.properties.feature_flags.properties.junit.type" = "boolean"
"definitions.Project.properties.feature_flags.properties.oss.type" = "boolean"
"definitions.Project.properties.feature_flags.properties.osx.type" = "boolean"
"definitions.Project.properties.feature_flags.properties.set-github-status.type" = "boolean"
"definitions.Project.properties.feature_flags.properties.trusty-beta.type" = "boolean"
"definitions.Project.properties.feature_flags.type" = "object"
"definitions.Project.properties.flowdock_api_token.$ref" = "#/definitions/StringOrNull"
"definitions.Project.properties.followed.type" = "boolean"
"definitions.Project.properties.has_usable_key.type" = "boolean"
"definitions.Project.properties.heroku_deploy_user.$ref" = "#/definitions/StringOrNull"
"definitions.Project.properties.hipchat_api_token.$ref" = "#/definitions/StringOrNull"
"definitions.Project.properties.hipchat_notify.$ref" = "#/definitions/StringOrNull"
"definitions.Project.properties.hipchat_notify_prefs.type.length" = 2
"definitions.Project.properties.hipchat_notify_prefs.type[0]" = "string"
"definitions.Project.properties.hipchat_notify_prefs.type[1]" = "null"
"definitions.Project.properties.hipchat_room.$ref" = "#/definitions/StringOrNull"
"definitions.Project.properties.irc_channel.$ref" = "#/definitions/StringOrNull"
"definitions.Project.properties.irc_keyword.$ref" = "#/definitions/StringOrNull"
"definitions.Project.properties.irc_notify_prefs.$ref" = "#/definitions/StringOrNull"
"definitions.Project.properties.irc_password.$ref" = "#/definitions/StringOrNull"
"definitions.Project.properties.irc_server.$ref" = "#/definitions/StringOrNull"
"definitions.Project.properties.irc_username.$ref" = "#/definitions/StringOrNull"
"definitions.Project.properties.language.type" = "string"
"definitions.Project.properties.oss.type" = "boolean"
"definitions.Project.properties.parallel.type" = "integer"
"definitions.Project.properties.reponame.type" = "string"
"definitions.Project.properties.scopes.items.$ref" = "#/definitions/Scope"
"definitions.Project.properties.scopes.type" = "array"
"definitions.Project.properties.setup.type" = "string"
"definitions.Project.properties.slack_api_token.$ref" = "#/definitions/StringOrNull"
"definitions.Project.properties.slack_channel.$ref" = "#/definitions/StringOrNull"
"definitions.Project.properties.slack_channel_override.$ref" = "#/definitions/StringOrNull"
"definitions.Project.properties.slack_notify_prefs.$ref" = "#/definitions/StringOrNull"
"definitions.Project.properties.slack_subdomain.$ref" = "#/definitions/StringOrNull"
"definitions.Project.properties.slack_webhook_url.format" = "uri"
"definitions.Project.properties.slack_webhook_url.type" = "string"
"definitions.Project.properties.ssh_keys.items.type" = "string"
"definitions.Project.properties.ssh_keys.type" = "array"
"definitions.Project.properties.test.type" = "string"
"definitions.Project.properties.username.type" = "string"
"definitions.Project.properties.vcs_type.type" = "string"
"definitions.Project.properties.vcs_url.format" = "uri"
"definitions.Project.properties.vcs_url.type" = "string"
"definitions.Project.type" = "object"
"definitions.Projects.items.$ref" = "#/definitions/Project"
"definitions.Projects.type" = "array"
"definitions.Revision.description" = "The specific revision to build.\nDefault is null and the head of the branch is used. Cannot be used with tag parameter.\n"
"definitions.Revision.type" = "string"
"definitions.Scope.enum.length" = 7
"definitions.Scope.enum[0]" = "write-settings"
"definitions.Scope.enum[1]" = "view-builds"
"definitions.Scope.enum[2]" = "read-settings"
"definitions.Scope.enum[3]" = "trigger-builds"
"definitions.Scope.enum[4]" = "all"
"definitions.Scope.enum[5]" = "status"
"definitions.Scope.enum[6]" = "none"
"definitions.Scope.type" = "string"
"definitions.Sha1.type" = "string"
"definitions.Status.enum.length" = 13
"definitions.Status.enum[0]" = "retried"
"definitions.Status.enum[10]" = "no_tests"
"definitions.Status.enum[11]" = "fixed"
"definitions.Status.enum[12]" = "success"
"definitions.Status.enum[1]" = "canceled"
"definitions.Status.enum[2]" = "infrastructure_fail"
"definitions.Status.enum[3]" = "timedout"
"definitions.Status.enum[4]" = "not_run"
"definitions.Status.enum[5]" = "running"
"definitions.Status.enum[6]" = "failed"
"definitions.Status.enum[7]" = "queued"
"definitions.Status.enum[8]" = "scheduled"
"definitions.Status.enum[9]" = "not_running"
"definitions.Status.type" = "string"
"definitions.StringOrNull.type.length" = 2
"definitions.StringOrNull.type[0]" = "string"
"definitions.StringOrNull.type[1]" = "null"
"definitions.Tag.description" = "The tag to build. Default is null. Cannot be used with revision parameter.\n"
"definitions.Tag.type" = "string"
"definitions.Tests.properties.tests.items.properties.classname.type" = "string"
"definitions.Tests.properties.tests.items.properties.file.type" = "string"
"definitions.Tests.properties.tests.items.properties.message.type" = "string"
"definitions.Tests.properties.tests.items.properties.name.type" = "string"
"definitions.Tests.properties.tests.items.properties.result.$ref" = "#/definitions/Status"
"definitions.Tests.properties.tests.items.properties.run_time.type" = "number"
"definitions.Tests.properties.tests.items.properties.source.type" = "string"
"definitions.Tests.properties.tests.items.type" = "object"
"definitions.Tests.properties.tests.type" = "array"
"definitions.Tests.type" = "object"
"definitions.User.properties.admin.type" = "boolean"
"definitions.User.properties.all_emails.items.format" = "email"
"definitions.User.properties.all_emails.items.type" = "string"
"definitions.User.properties.all_emails.type" = "array"
"definitions.User.properties.analytics_id.type" = "string"
"definitions.User.properties.avatar_url.format" = "uri"
"definitions.User.properties.avatar_url.type" = "string"
"definitions.User.properties.basic_email_prefs.type" = "string"
"definitions.User.properties.bitbucket.type.length" = 2
"definitions.User.properties.bitbucket.type[0]" = "integer"
"definitions.User.properties.bitbucket.type[1]" = "null"
"definitions.User.properties.bitbucket_authorized.type" = "boolean"
"definitions.User.properties.containers.type" = "integer"
"definitions.User.properties.created_at.format" = "date-time"
"definitions.User.properties.created_at.type" = "string"
"definitions.User.properties.days_left_in_trial.type" = "integer"
"definitions.User.properties.dev_admin.type" = "boolean"
"definitions.User.properties.enrolled_betas.items.type" = "string"
"definitions.User.properties.enrolled_betas.type" = "array"
"definitions.User.properties.github_id.type.length" = 2
"definitions.User.properties.github_id.type[0]" = "integer"
"definitions.User.properties.github_id.type[1]" = "null"
"definitions.User.properties.github_oauth_scopes.items.type" = "string"
"definitions.User.properties.github_oauth_scopes.type" = "array"
"definitions.User.properties.gravatar_id.type.length" = 2
"definitions.User.properties.gravatar_id.type[0]" = "integer"
"definitions.User.properties.gravatar_id.type[1]" = "null"
"definitions.User.properties.heroku_api_key.type.length" = 2
"definitions.User.properties.heroku_api_key.type[0]" = "string"
"definitions.User.properties.heroku_api_key.type[1]" = "null"
"definitions.User.properties.in_beta_program.type" = "boolean"
"definitions.User.properties.login.type" = "string"
"definitions.User.properties.name.type" = "string"
"definitions.User.properties.organization_prefs.type" = "object"
"definitions.User.properties.parallelism.type" = "integer"
"definitions.User.properties.plan.type.length" = 2
"definitions.User.properties.plan.type[0]" = "string"
"definitions.User.properties.plan.type[1]" = "null"
"definitions.User.properties.projects.type" = "object"
"definitions.User.properties.pusher_id.type" = "string"
"definitions.User.properties.selected_email.format" = "email"
"definitions.User.properties.selected_email.type" = "string"
"definitions.User.properties.sign_in_count.type" = "integer"
"definitions.User.properties.trial_end.format" = "date-time"
"definitions.User.properties.trial_end.type" = "string"
"definitions.User.type" = "object"
host = "circleci.com"
"info.description" = "The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI.\nYou can access all information and trigger all actions.\nThe only thing we don’t provide access to is billing functions, which must be done from the CircleCI web UI.\n"
"info.license.name" = "Attribution-NonCommercial-ShareAlike 4.0 International"
"info.license.url" = "http://creativecommons.org/licenses/by-nc-sa/4.0/"
"info.title" = "CircleCI"
"info.version" = "v1"
"info.x-apisguru-categories.length" = 1
"info.x-apisguru-categories[0]" = "developer_tools"
"info.x-logo.url" = "https://api.apis.guru/v2/cache/logo/https_avatars0.githubusercontent.com_u_1231870.png"
"info.x-origin.length" = 1
"info.x-origin[0].format" = "swagger"
"info.x-origin[0].url" = "https://raw.githubusercontent.com/blockenio/spec-circleci/master/swagger.yml"
"info.x-origin[0].version" = "2.0"
"info.x-preferred" = true
"info.x-providerName" = "circleci.com"
"info.x-unofficialSpec" = true
"parameters.branch.description" = "The branch name should be url-encoded.\n"
"parameters.branch.in" = "path"
"parameters.branch.name" = "branch"
"parameters.branch.required" = true
"parameters.branch.type" = "string"
"parameters.build_num.description" = "XXXXXXXXXX\n"
"parameters.build_num.in" = "path"
"parameters.build_num.name" = "build_num"
"parameters.build_num.required" = true
"parameters.build_num.type" = "integer"
"parameters.envvar_name.description" = "XXXXXXXXXX\n"
"parameters.envvar_name.in" = "path"
"parameters.envvar_name.name" = "name"
"parameters.envvar_name.required" = true
"parameters.envvar_name.type" = "string"
"parameters.filter.description" = "Restricts which builds are returned.\nSet to \"completed\", \"successful\", \"failed\", \"running\", or defaults to no filter.\n"
"parameters.filter.enum.length" = 4
"parameters.filter.enum[0]" = "completed"
"parameters.filter.enum[1]" = "successful"
"parameters.filter.enum[2]" = "failed"
"parameters.filter.enum[3]" = "running"
"parameters.filter.in" = "query"
"parameters.filter.name" = "filter"
"parameters.filter.type" = "string"
"parameters.fingerprint.description" = "XXXXXXXXXX\n"
"parameters.fingerprint.in" = "path"
"parameters.fingerprint.name" = "fingerprint"
"parameters.fingerprint.required" = true
"parameters.fingerprint.type" = "string"
"parameters.limit.default" = 30.0
"parameters.limit.description" = "The number of builds to return. Maximum 100, defaults to 30.\n"
"parameters.limit.in" = "query"
"parameters.limit.maximum" = 100.0
"parameters.limit.name" = "limit"
"parameters.limit.type" = "integer"
"parameters.offset.default" = 0.0
"parameters.offset.description" = "The API returns builds starting from this offset, defaults to 0.\n"
"parameters.offset.in" = "query"
"parameters.offset.name" = "offset"
"parameters.offset.type" = "integer"
"parameters.project.description" = "XXXXXXXXX\n"
"parameters.project.in" = "path"
"parameters.project.name" = "project"
"parameters.project.required" = true
"parameters.project.type" = "string"
"parameters.username.description" = "XXXXXXXXX\n"
"parameters.username.in" = "path"
"parameters.username.name" = "username"
"parameters.username.required" = true
"parameters.username.type" = "string"
"paths./me.get.description" = "Provides information about the signed in user.\n"
"paths./me.get.responses.200.description" = "signed in user"
"paths./me.get.responses.200.schema.$ref" = "#/definitions/User"
"paths./project/{username}/{project}.get.description" = "Build summary for each of the last 30 builds for a single git repo.\n"
"paths./project/{username}/{project}.get.parameters.length" = 3
"paths./project/{username}/{project}.get.parameters[0].$ref" = "#/parameters/limit"
"paths./project/{username}/{project}.get.parameters[1].$ref" = "#/parameters/offset"
"paths./project/{username}/{project}.get.parameters[2].$ref" = "#/parameters/filter"
"paths./project/{username}/{project}.get.responses.200.description" = "Build summary for each of the last 30 builds"
"paths./project/{username}/{project}.get.responses.200.schema.$ref" = "#/definitions/Builds"
"paths./project/{username}/{project}.parameters.length" = 2
"paths./project/{username}/{project}.parameters[0].$ref" = "#/parameters/username"
"paths./project/{username}/{project}.parameters[1].$ref" = "#/parameters/project"
"paths./project/{username}/{project}.post.consumes.length" = 1
"paths./project/{username}/{project}.post.consumes[0]" = "application/json"
"paths./project/{username}/{project}.post.description" = "Triggers a new build, returns a summary of the build.\n"
"paths./project/{username}/{project}.post.parameters.length" = 1
"paths./project/{username}/{project}.post.parameters[0].in" = "body"
"paths./project/{username}/{project}.post.parameters[0].name" = "body"
"paths./project/{username}/{project}.post.parameters[0].schema.properties.build_parameters.$ref" = "#/definitions/BuildParameters"
"paths./project/{username}/{project}.post.parameters[0].schema.properties.parallel.$ref" = "#/definitions/Parallel"
"paths./project/{username}/{project}.post.parameters[0].schema.properties.revision.$ref" = "#/definitions/Revision"
"paths./project/{username}/{project}.post.parameters[0].schema.properties.tag.$ref" = "#/definitions/Tag"
"paths./project/{username}/{project}.post.parameters[0].schema.type" = "object"
"paths./project/{username}/{project}.post.responses.201.description" = "returns a summary of the build"
"paths./project/{username}/{project}.post.responses.201.schema.$ref" = "#/definitions/BuildSummary"
"paths./project/{username}/{project}/build-cache.delete.description" = "Clears the cache for a project.\n"
"paths./project/{username}/{project}/build-cache.delete.responses.200.description" = "status message"
"paths./project/{username}/{project}/build-cache.delete.responses.200.schema.properties.status.type" = "string"
"paths./project/{username}/{project}/build-cache.delete.responses.200.schema.type" = "object"
"paths./project/{username}/{project}/build-cache.parameters.length" = 2
"paths./project/{username}/{project}/build-cache.parameters[0].$ref" = "#/parameters/username"
"paths./project/{username}/{project}/build-cache.parameters[1].$ref" = "#/parameters/project"
"paths./project/{username}/{project}/checkout-key.get.description" = "Lists checkout keys.\n"
"paths./project/{username}/{project}/checkout-key.get.responses.200.description" = "checkout keys"
"paths./project/{username}/{project}/checkout-key.get.responses.200.schema.$ref" = "#/definitions/Keys"
"paths./project/{username}/{project}/checkout-key.parameters.length" = 2
"paths./project/{username}/{project}/checkout-key.parameters[0].$ref" = "#/parameters/username"
"paths./project/{username}/{project}/checkout-key.parameters[1].$ref" = "#/parameters/project"
"paths./project/{username}/{project}/checkout-key.post.description" = "Creates a new checkout key.\nOnly usable with a user API token.\n"
"paths./project/{username}/{project}/checkout-key.post.parameters.length" = 1
"paths./project/{username}/{project}/checkout-key.post.parameters[0].description" = "The type of key to create. Can be 'deploy-key' or 'github-user-key'.\n"
"paths./project/{username}/{project}/checkout-key.post.parameters[0].in" = "body"
"paths./project/{username}/{project}/checkout-key.post.parameters[0].name" = "type"
"paths./project/{username}/{project}/checkout-key.post.parameters[0].schema.enum.length" = 2
"paths./project/{username}/{project}/checkout-key.post.parameters[0].schema.enum[0]" = "deploy-key"
"paths./project/{username}/{project}/checkout-key.post.parameters[0].schema.enum[1]" = "github-user-key"
"paths./project/{username}/{project}/checkout-key.post.parameters[0].schema.type" = "string"
"paths./project/{username}/{project}/checkout-key.post.responses.200.$ref" = "#/responses/key"
"paths./project/{username}/{project}/checkout-key/{fingerprint}.delete.description" = "Delete a checkout key.\n"
"paths./project/{username}/{project}/checkout-key/{fingerprint}.delete.responses.200.description" = "status message"
"paths./project/{username}/{project}/checkout-key/{fingerprint}.delete.responses.200.schema.properties.message.enum.length" = 1
"paths./project/{username}/{project}/checkout-key/{fingerprint}.delete.responses.200.schema.properties.message.enum[0]" = "OK"
"paths./project/{username}/{project}/checkout-key/{fingerprint}.delete.responses.200.schema.properties.message.type" = "string"
"paths./project/{username}/{project}/checkout-key/{fingerprint}.delete.responses.200.schema.type" = "object"
"paths./project/{username}/{project}/checkout-key/{fingerprint}.get.description" = "Get a checkout key.\n"
"paths./project/{username}/{project}/checkout-key/{fingerprint}.get.responses.200.$ref" = "#/responses/key"
"paths./project/{username}/{project}/checkout-key/{fingerprint}.parameters.length" = 3
"paths./project/{username}/{project}/checkout-key/{fingerprint}.parameters[0].$ref" = "#/parameters/username"
"paths./project/{username}/{project}/checkout-key/{fingerprint}.parameters[1].$ref" = "#/parameters/project"
"paths./project/{username}/{project}/checkout-key/{fingerprint}.parameters[2].$ref" = "#/parameters/fingerprint"
"paths./project/{username}/{project}/envvar.get.description" = "Lists the environment variables for :project\n"
"paths./project/{username}/{project}/envvar.get.responses.200.$ref" = "#/responses/envvars"
"paths./project/{username}/{project}/envvar.parameters.length" = 2
"paths./project/{username}/{project}/envvar.parameters[0].$ref" = "#/parameters/username"
"paths./project/{username}/{project}/envvar.parameters[1].$ref" = "#/parameters/project"
"paths./project/{username}/{project}/envvar.post.description" = "Creates a new environment variable\n"
"paths./project/{username}/{project}/envvar.post.responses.200.$ref" = "#/responses/envvar"
"paths./project/{username}/{project}/envvar/{name}.delete.description" = "Deletes the environment variable named ':name'\n"
"paths./project/{username}/{project}/envvar/{name}.delete.responses.200.description" = "Deletes the environment variable named ':name'\n"
"paths./project/{username}/{project}/envvar/{name}.delete.responses.200.schema.properties.message.enum.length" = 1
"paths./project/{username}/{project}/envvar/{name}.delete.responses.200.schema.properties.message.enum[0]" = "OK"
"paths./project/{username}/{project}/envvar/{name}.delete.responses.200.schema.properties.message.type" = "string"
"paths./project/{username}/{project}/envvar/{name}.delete.responses.200.schema.type" = "object"
"paths./project/{username}/{project}/envvar/{name}.get.description" = "Gets the hidden value of environment variable :name\n"
"paths./project/{username}/{project}/envvar/{name}.get.responses.200.$ref" = "#/responses/envvar"
"paths./project/{username}/{project}/envvar/{name}.parameters.length" = 3
"paths./project/{username}/{project}/envvar/{name}.parameters[0].$ref" = "#/parameters/username"
"paths./project/{username}/{project}/envvar/{name}.parameters[1].$ref" = "#/parameters/project"
"paths./project/{username}/{project}/envvar/{name}.parameters[2].$ref" = "#/parameters/envvar_name"
"paths./project/{username}/{project}/ssh-key.parameters.length" = 2
"paths./project/{username}/{project}/ssh-key.parameters[0].$ref" = "#/parameters/username"
"paths./project/{username}/{project}/ssh-key.parameters[1].$ref" = "#/parameters/project"
"paths./project/{username}/{project}/ssh-key.post.consumes.length" = 1
"paths./project/{username}/{project}/ssh-key.post.consumes[0]" = "application/json"
"paths./project/{username}/{project}/ssh-key.post.description" = "Create an ssh key used to access external systems that require SSH key-based authentication\n"
"paths./project/{username}/{project}/ssh-key.post.parameters.length" = 2
"paths./project/{username}/{project}/ssh-key.post.parameters[0].enum.length" = 1
"paths./project/{username}/{project}/ssh-key.post.parameters[0].enum[0]" = "application/json"
"paths./project/{username}/{project}/ssh-key.post.parameters[0].in" = "header"
"paths./project/{username}/{project}/ssh-key.post.parameters[0].name" = "Content-Type"
"paths./project/{username}/{project}/ssh-key.post.parameters[0].required" = true
"paths./project/{username}/{project}/ssh-key.post.parameters[0].type" = "string"
"paths./project/{username}/{project}/ssh-key.post.parameters[1].in" = "body"
"paths./project/{username}/{project}/ssh-key.post.parameters[1].name" = "body"
"paths./project/{username}/{project}/ssh-key.post.parameters[1].required" = true
"paths./project/{username}/{project}/ssh-key.post.parameters[1].schema.properties.hostname.type" = "string"
"paths./project/{username}/{project}/ssh-key.post.parameters[1].schema.properties.private_key.type" = "string"
"paths./project/{username}/{project}/ssh-key.post.parameters[1].schema.type" = "object"
"paths./project/{username}/{project}/ssh-key.post.responses.default.description" = "no response expected"
"paths./project/{username}/{project}/ssh-key.post.responses.default.examples.application/json.message" = "a private key is required"
"paths./project/{username}/{project}/ssh-key.post.responses.default.schema.properties.message.type" = "string"
"paths./project/{username}/{project}/ssh-key.post.responses.default.schema.type" = "object"
"paths./project/{username}/{project}/tree/{branch}.parameters.length" = 3
"paths./project/{username}/{project}/tree/{branch}.parameters[0].$ref" = "#/parameters/username"
"paths./project/{username}/{project}/tree/{branch}.parameters[1].$ref" = "#/parameters/project"
"paths./project/{username}/{project}/tree/{branch}.parameters[2].$ref" = "#/parameters/branch"
"paths./project/{username}/{project}/tree/{branch}.post.consumes.length" = 1
"paths./project/{username}/{project}/tree/{branch}.post.consumes[0]" = "application/json"
"paths./project/{username}/{project}/tree/{branch}.post.description" = "Triggers a new build, returns a summary of the build.\nOptional build parameters can be set using an experimental API.\n\nNote: For more about build parameters, read about [using parameterized builds](https://circleci.com/docs/parameterized-builds/)\n"
"paths./project/{username}/{project}/tree/{branch}.post.parameters.length" = 1
"paths./project/{username}/{project}/tree/{branch}.post.parameters[0].in" = "body"
"paths./project/{username}/{project}/tree/{branch}.post.parameters[0].name" = "body"
"paths./project/{username}/{project}/tree/{branch}.post.parameters[0].schema.properties.build_parameters.$ref" = "#/definitions/BuildParameters"
"paths./project/{username}/{project}/tree/{branch}.post.parameters[0].schema.properties.parallel.$ref" = "#/definitions/Parallel"
"paths./project/{username}/{project}/tree/{branch}.post.parameters[0].schema.properties.revision.$ref" = "#/definitions/Revision"
"paths./project/{username}/{project}/tree/{branch}.post.parameters[0].schema.type" = "object"
"paths./project/{username}/{project}/tree/{branch}.post.responses.201.description" = "returns a summary of the build"
"paths./project/{username}/{project}/tree/{branch}.post.responses.201.headers.Location.format" = "uri"
"paths./project/{username}/{project}/tree/{branch}.post.responses.201.headers.Location.type" = "string"
"paths./project/{username}/{project}/tree/{branch}.post.responses.201.schema.$ref" = "#/definitions/Build"
"paths./project/{username}/{project}/{build_num}.get.description" = "Full details for a single build. The response includes all of the fields from the build summary.\nThis is also the payload for the [notification webhooks](/docs/configuration/#notify), in which case this object is the value to a key named 'payload'.\n"
"paths./project/{username}/{project}/{build_num}.get.responses.200.description" = "Full details for a single build"
"paths./project/{username}/{project}/{build_num}.get.responses.200.schema.$ref" = "#/definitions/BuildDetail"
"paths./project/{username}/{project}/{build_num}.parameters.length" = 3
"paths./project/{username}/{project}/{build_num}.parameters[0].$ref" = "#/parameters/username"
"paths./project/{username}/{project}/{build_num}.parameters[1].$ref" = "#/parameters/project"
"paths./project/{username}/{project}/{build_num}.parameters[2].$ref" = "#/parameters/build_num"
"paths./project/{username}/{project}/{build_num}/artifacts.get.description" = "List the artifacts produced by a given build.\n"
"paths./project/{username}/{project}/{build_num}/artifacts.get.responses.200.description" = "List the artifacts produced by a given build"
"paths./project/{username}/{project}/{build_num}/artifacts.get.responses.200.schema.$ref" = "#/definitions/Artifacts"
"paths./project/{username}/{project}/{build_num}/artifacts.parameters.length" = 3
"paths./project/{username}/{project}/{build_num}/artifacts.parameters[0].$ref" = "#/parameters/username"
"paths./project/{username}/{project}/{build_num}/artifacts.parameters[1].$ref" = "#/parameters/project"
"paths./project/{username}/{project}/{build_num}/artifacts.parameters[2].$ref" = "#/parameters/build_num"
"paths./project/{username}/{project}/{build_num}/cancel.parameters.length" = 3
"paths./project/{username}/{project}/{build_num}/cancel.parameters[0].$ref" = "#/parameters/username"
"paths./project/{username}/{project}/{build_num}/cancel.parameters[1].$ref" = "#/parameters/project"
"paths./project/{username}/{project}/{build_num}/cancel.parameters[2].$ref" = "#/parameters/build_num"
"paths./project/{username}/{project}/{build_num}/cancel.post.description" = "Cancels the build, returns a summary of the build.\n"
"paths./project/{username}/{project}/{build_num}/cancel.post.responses.200.description" = "returns a summary of the build"
"paths./project/{username}/{project}/{build_num}/cancel.post.responses.200.schema.$ref" = "#/definitions/Build"
"paths./project/{username}/{project}/{build_num}/retry.parameters.length" = 3
"paths./project/{username}/{project}/{build_num}/retry.parameters[0].$ref" = "#/parameters/username"
"paths./project/{username}/{project}/{build_num}/retry.parameters[1].$ref" = "#/parameters/project"
"paths./project/{username}/{project}/{build_num}/retry.parameters[2].$ref" = "#/parameters/build_num"
"paths./project/{username}/{project}/{build_num}/retry.post.description" = "Retries the build, returns a summary of the new build.\n"
"paths./project/{username}/{project}/{build_num}/retry.post.responses.200.description" = "returns a summary of the new build"
"paths./project/{username}/{project}/{build_num}/retry.post.responses.200.schema.$ref" = "#/definitions/Build"
"paths./project/{username}/{project}/{build_num}/tests.get.description" = "Provides test metadata for a build\nNote: [Learn how to set up your builds to collect test metadata](https://circleci.com/docs/test-metadata/)\n"
"paths./project/{username}/{project}/{build_num}/tests.get.responses.200.description" = "test metadata for a build\n"
"paths./project/{username}/{project}/{build_num}/tests.get.responses.200.schema.$ref" = "#/definitions/Tests"
"paths./project/{username}/{project}/{build_num}/tests.parameters.length" = 3
"paths./project/{username}/{project}/{build_num}/tests.parameters[0].$ref" = "#/parameters/username"
"paths./project/{username}/{project}/{build_num}/tests.parameters[1].$ref" = "#/parameters/project"
"paths./project/{username}/{project}/{build_num}/tests.parameters[2].$ref" = "#/parameters/build_num"
"paths./projects.get.description" = "List of all the projects you're following on CircleCI, with build information organized by branch.\n"
"paths./projects.get.responses.200.description" = "List of all the projects you're following on CircleCI\n"
"paths./projects.get.responses.200.schema.$ref" = "#/definitions/Projects"
"paths./recent-builds.get.description" = "Build summary for each of the last 30 recent builds, ordered by build_num.\n"
"paths./recent-builds.get.parameters.length" = 2
"paths./recent-builds.get.parameters[0].$ref" = "#/parameters/limit"
"paths./recent-builds.get.parameters[1].$ref" = "#/parameters/offset"
"paths./recent-builds.get.responses.200.description" = "Build summary for each of the last 30 recent builds"
"paths./recent-builds.get.responses.200.schema.$ref" = "#/definitions/Builds"
"paths./user/heroku-key.post.description" = "Adds your Heroku API key to CircleCI, takes apikey as form param name.\n"
"paths./user/heroku-key.post.responses.403.description" = "Your Heroku API key is invalid.\n"
"paths./user/heroku-key.post.responses.403.schema.properties.message.type" = "string"
"paths./user/heroku-key.post.responses.403.schema.type" = "object"
"produces.length" = 1
"produces[0]" = "application/json"
"responses.envvar.description" = "XXX"
"responses.envvar.schema.$ref" = "#/definitions/Envvar"
"responses.envvars.description" = "XXX"
"responses.envvars.schema.$ref" = "#/definitions/Envvars"
"responses.key.description" = "checkout key"
"responses.key.schema.$ref" = "#/definitions/Key"
"schemes.length" = 1
"schemes[0]" = "https"
"security.length" = 1
"securityDefinitions.apikey.in" = "query"
"securityDefinitions.apikey.name" = "circle-token"
"securityDefinitions.apikey.type" = "apiKey"
"security[0].apikey.length" = 0
swagger = "2.0"

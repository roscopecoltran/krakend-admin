{
  "swagger": "2.0",
  "schemes": [
    "https"
  ],
  "host": "api.motaword.com",
  "basePath": "/",
  "info": {
    "description": "Use MotaWord API to post and track your translation projects.",
    "title": "MotaWord",
    "version": "alpha-0.1.0",
    "x-apiClientRegistration": {
      "url": "https://www.motaword.com/developer/register"
    },
    "x-apisguru-categories": [
      "text"
    ],
    "x-logo": {
      "url": "https://api.apis.guru/v2/cache/logo/https_dentycj2qhk72.cloudfront.net_new_images_new_logo_horizontal.png"
    },
    "x-origin": [
      {
        "format": "swagger",
        "url": "https://api.motaword.com/swagger",
        "version": "2.0"
      }
    ],
    "x-preferred": true,
    "x-providerName": "motaword.com"
  },
  "externalDocs": {
    "url": "https://www.motaword.com/developer"
  },
  "consumes": [
    "application/x-www-form-urlencoded"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "client_credentials": {
      "authorizationUrl": "https://api.motaword.com/token",
      "description": "OAuth2 authentication, Client Credentials flow.",
      "flow": "accessCode",
      "scopes": {
        "*": "*"
      },
      "tokenUrl": "https://api.motaword.com/token",
      "type": "oauth2"
    }
  },
  "paths": {
    "/": {
      "get": {
        "description": "The root endpoint will provide you a JSON Swagger definition.\n",
        "operationId": "getEndpoints",
        "responses": {
          "200": {
            "description": "JSON representation of our Swagger API definition.",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "Authentication error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Available endpoints",
        "tags": [
          "Static"
        ]
      }
    },
    "/formats": {
      "get": {
        "description": "Get a list of supported formats for documents, style guides and extensions.\n",
        "operationId": "getFormats",
        "responses": {
          "200": {
            "description": "A list of supported formats",
            "schema": {
              "items": {
                "$ref": "#/definitions/Formats"
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Get a list of supported formats",
        "tags": [
          "Static"
        ]
      }
    },
    "/glossary": {
      "get": {
        "description": "Download your corporate account's global glossary. This endpoint is available only for corporate account customers.",
        "operationId": "downloadGlobalGlossary",
        "responses": {
          "200": {
            "description": "Glossary file streamed.",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "GlossaryNotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Download the global glossary.",
        "tags": [
          "Account",
          "Glossary"
        ]
      },
      "post": {
        "consumes": [
          "multipart/form-data",
          "application/json"
        ],
        "description": "Update your corporate account's global glossary. This endpoint is available only for corporate account customers.",
        "operationId": "updateGlobalGlossary",
        "parameters": [
          {
            "description": "Glossary file. Currently supported formats: .xlsx, .tbx\n",
            "in": "formData",
            "name": "glossary",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "Success response",
            "schema": {
              "properties": {
                "status": {
                  "default": "success",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "FileTooLarge FileTooSmall NoFileUploaded",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "UnsupportedGlossaryFormat",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Create or update the global glossary.",
        "tags": [
          "Account",
          "Glossary"
        ]
      }
    },
    "/languages": {
      "get": {
        "description": "Get a list of supported languages",
        "operationId": "getLanguages",
        "responses": {
          "200": {
            "description": "A list of supported languages",
            "schema": {
              "items": {
                "$ref": "#/definitions/Language"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Get a list of supported languages",
        "tags": [
          "Static"
        ]
      }
    },
    "/me": {
      "get": {
        "operationId": "getAccount",
        "responses": {
          "200": {
            "description": "Account summary",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "404": {
            "description": "UserNotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Get your account information and summary.",
        "tags": [
          "Account"
        ]
      }
    },
    "/projects": {
      "get": {
        "description": "Get a list of your projects",
        "operationId": "getProjects",
        "parameters": [
          {
            "default": 1,
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "default": 10,
            "in": "query",
            "name": "per_page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Project list",
            "schema": {
              "items": {
                "$ref": "#/definitions/ProjectList"
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Get a list of your projects",
        "tags": [
          "Project"
        ]
      },
      "post": {
        "consumes": [
          "multipart/form-data",
          "application/json"
        ],
        "description": "Create a new project",
        "operationId": "createProject",
        "parameters": [
          {
            "in": "formData",
            "name": "source_language",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "in": "formData",
            "items": {
              "type": "string"
            },
            "name": "target_languages[]",
            "required": true,
            "type": "array"
          },
          {
            "description": "Optional. If you provide a callback URL, we will send POST callbacks when the status of the current project is changed. Possible status changes are, 'translated', 'proofread', 'completed'.",
            "in": "formData",
            "name": "callback_url",
            "type": "string"
          },
          {
            "description": "Optional. This is a consistent custom data parameter that will be given to you in the response across every request of this project model. Values should be provided like this, custom[my_key] = my_value.",
            "in": "formData",
            "items": {
              "type": "string"
            },
            "name": "custom",
            "type": "array"
          },
          {
            "description": "Optional. You can add as many files as you want in documents[] parameter. Or you add your documents later in separate calls.",
            "in": "formData",
            "name": "documents[]",
            "type": "file"
          },
          {
            "description": "Optional. You can add as many files as you want in styleguides[] parameter. Or you add your style guides later in separate calls.",
            "in": "formData",
            "name": "styleguides[]",
            "type": "file"
          },
          {
            "description": "Optional. Only one glossary is supported at the moment.",
            "in": "formData",
            "name": "glossaries[]",
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "Newly created project",
            "schema": {
              "items": {
                "$ref": "#/definitions/Project"
              },
              "type": "object"
            }
          },
          "400": {
            "description": "FileTooLarge FileTooSmall FileWasAlreadyUploaded",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "UnsupportedDocumentFormat UnsupportedStyleGuideFormat UnsupportedGlossaryFormat",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "406": {
            "description": "UnsupportedLanguage TooManyGlossaries ProjectAlreadyHasGlossary",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "ProjectInsertFailed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Get a new quote",
        "tags": [
          "Project"
        ]
      }
    },
    "/projects/{id}": {
      "delete": {
        "description": "Delete(cancel) a project.",
        "operationId": "deleteProject",
        "parameters": [
          {
            "description": "Project ID",
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Project canceled successfully",
            "schema": {
              "properties": {
                "status": {
                  "default": "success",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "ProjectNotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Delete a project",
        "tags": [
          "Project"
        ]
      },
      "get": {
        "description": "Get single project",
        "operationId": "getProject",
        "parameters": [
          {
            "description": "Project ID",
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Project model",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "404": {
            "description": "ProjectNotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Get single project",
        "tags": [
          "Project"
        ]
      },
      "put": {
        "consumes": [
          "multipart/form-data",
          "application/json"
        ],
        "description": "Update project language pairs",
        "operationId": "updateProject",
        "parameters": [
          {
            "description": "Project ID",
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "formData",
            "name": "source_language",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "in": "formData",
            "items": {
              "type": "string"
            },
            "name": "target_languages[]",
            "required": true,
            "type": "array"
          },
          {
            "description": "Optional. If you provide a callback URL, we will send POST callbacks when the status of the current project is changed. Possible status changes are, 'translated', 'proofread', 'completed'.",
            "in": "formData",
            "name": "callback_url",
            "type": "string"
          },
          {
            "description": "Optional. This is a consistent custom data parameter that will be given to you in the response across every request of this project model. Values should be provided like this, custom[my_key] = my_value. If you previously provided one, it will be replaced.",
            "in": "formData",
            "items": {
              "type": "string"
            },
            "name": "custom",
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated project",
            "schema": {
              "items": {
                "$ref": "#/definitions/Project"
              },
              "type": "object"
            }
          },
          "404": {
            "description": "ProjectNotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "406": {
            "description": "UnsupportedLanguage",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Update project language pairs",
        "tags": [
          "Project"
        ]
      }
    },
    "/projects/{id}/callback/{actionType}": {
      "get": {
        "description": "Trigger a call to your callback URL related to this project.",
        "operationId": "triggerCallback",
        "parameters": [
          {
            "description": "Project ID",
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Callback type",
            "enum": [
              "translated",
              "proofread",
              "completed"
            ],
            "in": "path",
            "name": "actionType",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Callback result",
            "schema": {
              "$ref": "#/definitions/CallbackResult"
            }
          },
          "404": {
            "description": "ProjectNotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Trigger a call to your callback URL related to this project.",
        "tags": [
          "Project"
        ]
      }
    },
    "/projects/{id}/cancel": {
      "post": {
        "consumes": [
          "multipart/form-data",
          "application/json"
        ],
        "operationId": "cancelProject",
        "parameters": [
          {
            "description": "Project ID",
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Cancellation reason",
            "in": "formData",
            "name": "reason",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Project canceled successfully",
            "schema": {
              "properties": {
                "status": {
                  "default": "success",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "ProjectNotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Cancel your translation project",
        "tags": [
          "Project"
        ]
      }
    },
    "/projects/{id}/download": {
      "post": {
        "description": "Download the latest translation package. You must have given a /package call beforehand and wait until the packaging status is 'completed'.",
        "operationId": "download",
        "parameters": [
          {
            "description": "Project ID",
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Translation package streamed. The streamed file is always a ZIP file, except when the API client is configured for Drupal and Wordpress.",
            "schema": {
              "type": "string"
            }
          },
          "402": {
            "description": "ProjectNotLaunchedYet",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "TranslationPackageNotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Download the latest translation package.",
        "tags": [
          "Project"
        ]
      }
    },
    "/projects/{id}/download/{language}": {
      "post": {
        "description": "Download only the translation package of this language. You must have given a /package call beforehand and wait until the packaging status is 'completed'.",
        "operationId": "downloadLanguage",
        "parameters": [
          {
            "description": "Project ID",
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Language code. You can download the translation of only a specific language.",
            "in": "path",
            "name": "language",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Translation package streamed. The streamed file is always a ZIP file, except when the API client is configured for Drupal and Wordpress.",
            "schema": {
              "type": "string"
            }
          },
          "402": {
            "description": "ProjectNotLaunchedYet",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "TranslationPackageNotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Download the latest translation package.",
        "tags": [
          "Project"
        ]
      }
    },
    "/projects/{id}/launch": {
      "post": {
        "consumes": [
          "multipart/form-data",
          "application/json"
        ],
        "operationId": "launchProject",
        "parameters": [
          {
            "description": "Project ID",
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Optional. Determines which method to use for payment. Options are 'corporate', 'client'.",
            "enum": [
              "corporate",
              "client"
            ],
            "in": "formData",
            "name": "payment_method",
            "type": "string"
          },
          {
            "description": "Optional. According to your corporate account configuration, this may be required.",
            "in": "formData",
            "name": "payment_code",
            "type": "string"
          },
          {
            "description": "Optional with corporate accounts. Not available for others.",
            "in": "formData",
            "name": "budget_code",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Project launched successfully",
            "schema": {
              "properties": {
                "status": {
                  "default": "started",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "MissingPaymentCode MissingCorporateAccount MissingPaymentMethod",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "CorporateAccountNotAllowedForApiPayment ApiClientMissingPaymentInformation",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "ProjectNotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Launch your translation project",
        "tags": [
          "Project"
        ]
      }
    },
    "/projects/{id}/package": {
      "post": {
        "description": "Package the translation project, make it ready to be downloaded.",
        "operationId": "package",
        "parameters": [
          {
            "description": "Project ID",
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "If you want to package and download the translation synchronously, mark this parameter as '0'. It will package the translation and then return the packaged file in the response, identical to /download call after an asynchronous /package call.",
            "in": "query",
            "name": "async",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Packaged translation streamed.",
            "schema": {
              "type": "string"
            }
          },
          "402": {
            "description": "ProjectNotLaunchedYet",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "TranslationPackageNotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Package the translation of all languages to be downloaded.",
        "tags": [
          "Project"
        ]
      }
    },
    "/projects/{id}/package/check": {
      "get": {
        "description": "This request will tell you the current progress of the translation packaging. You will use the 'key' provided by the /package call.",
        "operationId": "trackPackage",
        "parameters": [
          {
            "description": "Project ID",
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "This is the package tracking key provided in the response of a /package call.",
            "in": "query",
            "name": "key",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Current status of packaging process.",
            "schema": {
              "$ref": "#/definitions/PackageStatus"
            }
          },
          "402": {
            "description": "ProjectNotLaunchedYet",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "PackagingStatusMissing",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Track the status of translation packaging.",
        "tags": [
          "Project"
        ]
      }
    },
    "/projects/{id}/package/{language}": {
      "post": {
        "description": "Package the translation project, make it ready to be downloaded.",
        "operationId": "packageLanguage",
        "parameters": [
          {
            "description": "Project ID",
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Language code. You can package the translation of only a specific language.",
            "in": "path",
            "name": "language",
            "required": true,
            "type": "string"
          },
          {
            "default": 0,
            "description": "If you want to package and download the translation synchronously, mark this parameter as '0'. It will package the translation and then return the packaged file in the response, identical to /download call after an asynchronous /package call.",
            "in": "query",
            "name": "async",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Packaging status and tracking code. With the package key, you can track the progress of translation packaging.",
            "schema": {
              "$ref": "#/definitions/Package"
            }
          },
          "201": {
            "description": "Packaged translation streamed. Status code is actually 200, not 201.",
            "schema": {
              "type": "string"
            }
          },
          "402": {
            "description": "ProjectNotLaunchedYet",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "TranslationPackageNotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Package the translation of a specific target language to be downloaded.",
        "tags": [
          "Project"
        ]
      }
    },
    "/projects/{id}/progress": {
      "get": {
        "description": "Get the progress of an already launched project.",
        "operationId": "getProgress",
        "parameters": [
          {
            "description": "Project ID",
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Progress information",
            "schema": {
              "$ref": "#/definitions/Progress"
            }
          },
          "402": {
            "description": "ProjectNotLaunchedYet",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "ProjectNotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Get project progress",
        "tags": [
          "Project"
        ]
      }
    },
    "/projects/{id}/reports": {
      "post": {
        "consumes": [
          "multipart/form-data",
          "application/json"
        ],
        "operationId": "submitProjectReports",
        "parameters": [
          {
            "description": "Project ID",
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Activity Type",
            "in": "formData",
            "name": "activity_type",
            "type": "string"
          },
          {
            "description": "Report Message",
            "in": "formData",
            "name": "message",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Report submitted successfully",
            "schema": {
              "properties": {
                "status": {
                  "default": "success",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "MissingMessage",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "ProjectNotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Submit reports for a project",
        "tags": [
          "Project"
        ]
      }
    },
    "/projects/{projectId}/activities": {
      "get": {
        "description": "Get a list of realtime activities on the project, such as translation suggestion and translation approval.",
        "operationId": "getActivities",
        "parameters": [
          {
            "description": "Project ID",
            "format": "int64",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "integer"
          },
          {
            "default": 1,
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "default": 10,
            "in": "query",
            "name": "per_page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of activity models",
            "schema": {
              "$ref": "#/definitions/ActivityList"
            }
          },
          "404": {
            "description": "ProjectNotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Get a list of realtime activities.",
        "tags": [
          "Activity"
        ]
      }
    },
    "/projects/{projectId}/activities/{activityId}": {
      "get": {
        "description": "Get a single realtime activity.",
        "operationId": "getActivity",
        "parameters": [
          {
            "description": "Project ID",
            "format": "int64",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Activity ID",
            "format": "int64",
            "in": "path",
            "name": "activityId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Activity model",
            "schema": {
              "$ref": "#/definitions/Activity"
            }
          },
          "404": {
            "description": "ProjectActivityNotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Get a single realtime activity.",
        "tags": [
          "Activity"
        ]
      },
      "post": {
        "consumes": [
          "multipart/form-data",
          "application/json"
        ],
        "description": "Submit a comment to an activity.",
        "operationId": "submitComment",
        "parameters": [
          {
            "description": "Project ID",
            "format": "int64",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Activity ID",
            "format": "int64",
            "in": "path",
            "name": "activityId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Comment text.",
            "in": "formData",
            "name": "comment",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Comment model",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "404": {
            "description": "ProjectActivityNotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Submit a comment to an activity.",
        "tags": [
          "Activity"
        ]
      }
    },
    "/projects/{projectId}/activities/{activityId}/comments": {
      "get": {
        "description": "Get a list of comments belonging to this activity.",
        "operationId": "getActivityComments",
        "parameters": [
          {
            "description": "Project ID",
            "format": "int64",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Activity ID",
            "format": "int64",
            "in": "path",
            "name": "activityId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Comment models",
            "schema": {
              "$ref": "#/definitions/CommentList"
            }
          },
          "404": {
            "description": "ProjectActivityNotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Get a list of comments belonging to this activity.",
        "tags": [
          "Activity"
        ]
      }
    },
    "/projects/{projectId}/comments": {
      "get": {
        "description": "Get a list of activity comments throughout the whole project.",
        "operationId": "getComments",
        "parameters": [
          {
            "description": "Project ID",
            "format": "int64",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "integer"
          },
          {
            "default": 1,
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "default": 10,
            "in": "query",
            "name": "per_page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Comment models",
            "schema": {
              "$ref": "#/definitions/CommentList"
            }
          },
          "404": {
            "description": "ProjectNotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Get a list of activity comments throughout the whole project.",
        "tags": [
          "Activity"
        ]
      }
    },
    "/projects/{projectId}/documents": {
      "get": {
        "description": "Get a list of documents",
        "operationId": "getDocuments",
        "parameters": [
          {
            "description": "Project ID",
            "format": "int64",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of document models",
            "schema": {
              "$ref": "#/definitions/DocumentList"
            }
          },
          "404": {
            "description": "ProjectNotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Get a list of documents",
        "tags": [
          "Document"
        ]
      },
      "post": {
        "consumes": [
          "multipart/form-data",
          "application/json"
        ],
        "description": "Upload a new document",
        "operationId": "createDocument",
        "parameters": [
          {
            "description": "Project ID",
            "format": "int64",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "You can add as many files as you want in documents[] parameter.",
            "in": "formData",
            "name": "documents[]",
            "required": true,
            "type": "file"
          },
          {
            "description": "JSON string. If your documents have a scheme, as in cases of CSV files, use the same array index keys for `schemes` parameter to specify their schemes. See `Document Schemes` title in the API documentation.",
            "in": "formData",
            "name": "schemes[]",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of successfully added new documents.",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "400": {
            "description": "FileTooLarge FileTooSmall FileWasAlreadyUploaded",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "ProjectNotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "UnsupportedDocumentFormat",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "406": {
            "description": "InvalidDocumentScheme",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "ProjectAlreadyStarted",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Upload a new document",
        "tags": [
          "Document"
        ]
      }
    },
    "/projects/{projectId}/documents/{documentId}": {
      "delete": {
        "description": "Delete the document",
        "operationId": "deleteDocument",
        "parameters": [
          {
            "description": "Project ID",
            "format": "int64",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Document ID",
            "format": "int64",
            "in": "path",
            "name": "documentId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Document deleted successfully",
            "schema": {
              "properties": {
                "status": {
                  "default": "success",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "DocumentNotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "ProjectAlreadyStarted",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Delete the document",
        "tags": [
          "Document"
        ]
      },
      "get": {
        "description": "Get single document",
        "operationId": "getDocument",
        "parameters": [
          {
            "description": "Project ID",
            "format": "int64",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Document ID",
            "format": "int64",
            "in": "path",
            "name": "documentId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Document model",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "404": {
            "description": "DocumentNotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Get single document",
        "tags": [
          "Document"
        ]
      },
      "put": {
        "consumes": [
          "multipart/form-data",
          "application/json"
        ],
        "description": "Update the document. File name and contents will replaced with the new one.",
        "operationId": "updateDocument",
        "parameters": [
          {
            "description": "Project ID",
            "format": "int64",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Document ID",
            "format": "int64",
            "in": "path",
            "name": "documentId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Single file data. The name is plural to provide a consistent naming convention.",
            "in": "formData",
            "name": "documents",
            "required": false,
            "type": "file"
          },
          {
            "description": "JSON string. If your documents have a scheme, as in cases of CSV files, use the same array index keys for `schemes` parameter to specify their schemes. See `Document Schemes` title in the API documentation.",
            "in": "formData",
            "name": "schemes",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated document model",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "400": {
            "description": "FileTooLarge FileTooSmall FileWasAlreadyUploaded",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "DocumentNotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "UnsupportedDocumentFormat",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "406": {
            "description": "InvalidDocumentScheme",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "ProjectAlreadyStarted",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Update the document.",
        "tags": [
          "Document"
        ]
      }
    },
    "/projects/{projectId}/documents/{documentId}/download": {
      "get": {
        "description": "Download a document",
        "operationId": "downloadDocument",
        "parameters": [
          {
            "description": "Project ID",
            "format": "int64",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Document ID",
            "format": "int64",
            "in": "path",
            "name": "documentId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Document streamed",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "DocumentNotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Download a document",
        "tags": [
          "Document"
        ]
      }
    },
    "/projects/{projectId}/glossaries": {
      "get": {
        "description": "Get a list of glossaries",
        "operationId": "getGlossaries",
        "parameters": [
          {
            "description": "Project ID",
            "format": "int64",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of glossary models",
            "schema": {
              "$ref": "#/definitions/GlossaryList"
            }
          },
          "404": {
            "description": "ProjectNotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Get a list of glossaries",
        "tags": [
          "Glossary"
        ]
      },
      "post": {
        "consumes": [
          "multipart/form-data",
          "application/json"
        ],
        "description": "Upload a new glossary",
        "operationId": "createGlossary",
        "parameters": [
          {
            "description": "Project ID",
            "format": "int64",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "You can only add one glossary, even though the name suggests multiple glossaries. This may be updated in the future to support multiple glossaries.",
            "in": "formData",
            "name": "glossaries",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "Newly created glossary model.",
            "schema": {
              "$ref": "#/definitions/Glossary"
            }
          },
          "400": {
            "description": "FileTooLarge",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "ProjectNotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "UnsupportedGlossaryFormat",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "406": {
            "description": "ProjectAlreadyHasGlossary",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "ProjectAlreadyStarted",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Upload a new glossary",
        "tags": [
          "Glossary"
        ]
      }
    },
    "/projects/{projectId}/glossaries/{glossaryId}": {
      "delete": {
        "description": "Delete the glossary",
        "operationId": "deleteGlossary",
        "parameters": [
          {
            "description": "Project ID",
            "format": "int64",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Glossary ID",
            "format": "int64",
            "in": "path",
            "name": "glossaryId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Glossary deleted successfully",
            "schema": {
              "properties": {
                "status": {
                  "default": "success",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "GlossaryNotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "ProjectAlreadyStarted",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Delete the glossary",
        "tags": [
          "Glossary"
        ]
      },
      "get": {
        "description": "Get single glossary",
        "operationId": "getGlossary",
        "parameters": [
          {
            "description": "Project ID",
            "format": "int64",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Glossary ID",
            "format": "int64",
            "in": "path",
            "name": "glossaryId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Glossary model",
            "schema": {
              "$ref": "#/definitions/Glossary"
            }
          },
          "404": {
            "description": "GlossaryNotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Get single glossary",
        "tags": [
          "Glossary"
        ]
      },
      "put": {
        "consumes": [
          "multipart/form-data",
          "application/json"
        ],
        "description": "Update the glossary. File name and contents will replaced with the new one.",
        "operationId": "updateGlossary",
        "parameters": [
          {
            "description": "Project ID",
            "format": "int64",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Glossary ID",
            "format": "int64",
            "in": "path",
            "name": "glossaryId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Single file data. The name is plural to provide a consistent naming convention.",
            "in": "formData",
            "name": "glossaries",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated glossary model",
            "schema": {
              "$ref": "#/definitions/Glossary"
            }
          },
          "400": {
            "description": "FileTooLarge",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "GlossaryNotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "UnsupportedGlossaryFormat",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "ProjectAlreadyStarted",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Update the glossary.",
        "tags": [
          "Glossary"
        ]
      }
    },
    "/projects/{projectId}/glossaries/{glossaryId}/download": {
      "get": {
        "description": "Download a glossary",
        "operationId": "downloadGlossary",
        "parameters": [
          {
            "description": "Project ID",
            "format": "int64",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Glossary ID",
            "format": "int64",
            "in": "path",
            "name": "glossaryId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Glossary streamed",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "GlossaryNotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Download a glossary",
        "tags": [
          "Glossary"
        ]
      }
    },
    "/projects/{projectId}/styleguides": {
      "get": {
        "description": "Get a list of style guides",
        "operationId": "getStyleGuides",
        "parameters": [
          {
            "description": "Project ID",
            "format": "int64",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of style guide models",
            "schema": {
              "$ref": "#/definitions/StyleGuideList"
            }
          },
          "404": {
            "description": "ProjectNotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Get a list of style guides",
        "tags": [
          "Style Guide"
        ]
      },
      "post": {
        "consumes": [
          "multipart/form-data",
          "application/json"
        ],
        "description": "Upload a new style guide",
        "operationId": "createStyleGuide",
        "parameters": [
          {
            "description": "Project ID",
            "format": "int64",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "You can add as many files as you want in styleguides[] parameter.",
            "in": "formData",
            "name": "styleguides[]",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "Newly created style guide model or a list of new style guide models",
            "schema": {
              "$ref": "#/definitions/StyleGuide"
            }
          },
          "400": {
            "description": "FileTooLarge",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "ProjectNotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "UnsupportedStyleGuideFormat",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "ProjectAlreadyStarted",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Upload a new style guide",
        "tags": [
          "Style Guide"
        ]
      }
    },
    "/projects/{projectId}/styleguides/{styleGuideId}": {
      "delete": {
        "description": "Delete the style guide",
        "operationId": "deleteStyleGuide",
        "parameters": [
          {
            "description": "Project ID",
            "format": "int64",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Style Guide ID",
            "format": "int64",
            "in": "path",
            "name": "styleGuideId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Style guide deleted successfully",
            "schema": {
              "properties": {
                "status": {
                  "default": "success",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "StyleGuideNotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "ProjectAlreadyStarted",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Delete the style guide",
        "tags": [
          "Style Guide"
        ]
      },
      "get": {
        "description": "Get single style guide",
        "operationId": "getStyleGuide",
        "parameters": [
          {
            "description": "Project ID",
            "format": "int64",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Style Guide ID",
            "format": "int64",
            "in": "path",
            "name": "styleGuideId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Style guide model",
            "schema": {
              "$ref": "#/definitions/StyleGuide"
            }
          },
          "404": {
            "description": "StyleGuideNotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Get single style guide",
        "tags": [
          "Style Guide"
        ]
      },
      "put": {
        "consumes": [
          "multipart/form-data",
          "application/json"
        ],
        "description": "Update the style guide. File name and contents will replaced with the new one.",
        "operationId": "updateStyleGuide",
        "parameters": [
          {
            "description": "Project ID",
            "format": "int64",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Style guide ID",
            "format": "int64",
            "in": "path",
            "name": "styleGuideId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Single file data. The name is plural to provide a consistent naming convention.",
            "in": "formData",
            "name": "styleguides",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated style guide model",
            "schema": {
              "$ref": "#/definitions/StyleGuide"
            }
          },
          "400": {
            "description": "FileTooLarge",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "StyleGuideNotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "UnsupportedStyleGuideFormat",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "ProjectAlreadyStarted",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Update the style guide.",
        "tags": [
          "Style Guide"
        ]
      }
    },
    "/projects/{projectId}/styleguides/{styleGuideId}/download": {
      "get": {
        "description": "Download a style guide",
        "operationId": "downloadStyleGuide",
        "parameters": [
          {
            "description": "Project ID",
            "format": "int64",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Style Guide ID",
            "format": "int64",
            "in": "path",
            "name": "styleGuideId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Style guide streamed",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "StyleGuideNotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Download a style guide",
        "tags": [
          "Style Guide"
        ]
      }
    },
    "/styleguide": {
      "get": {
        "description": "Download your corporate account's global style guide. This endpoint is available only for corporate account customers.",
        "operationId": "downloadGlobalStyleGuide",
        "responses": {
          "200": {
            "description": "Style guide file streamed.",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "StyleGuideNotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Download the global style guide.",
        "tags": [
          "Account",
          "Style Guide"
        ]
      },
      "post": {
        "consumes": [
          "multipart/form-data",
          "application/json"
        ],
        "description": "Update your corporate account's global style guide. This endpoint is available only for corporate account customers.",
        "operationId": "updateGlobalStyleGuide",
        "parameters": [
          {
            "description": "Style guide file. Currently supported formats: .pdf, .docx, .txt\n",
            "in": "formData",
            "name": "styleguide",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "Success response",
            "schema": {
              "properties": {
                "status": {
                  "default": "success",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "FileTooLarge FileTooSmall NoFileUploaded MissingCorporateAccount",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "UnsupportedStyleGuideFormat",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "client_credentials": []
          }
        ],
        "summary": "Create or update the global style guide.",
        "tags": [
          "Account",
          "Style Guide"
        ]
      }
    },
    "/token": {
      "post": {
        "consumes": [
          "multipart/form-data",
          "application/json"
        ],
        "description": "MotaWord API is using OAuth2 procedures when authenticating or authorizing your API call. Currently, we only allow Client Credential type flow.\n",
        "operationId": "getAccessToken",
        "parameters": [
          {
            "description": "OAuth2 grant type. Currently only 'client_credentials' available.",
            "in": "formData",
            "name": "grant_type",
            "required": true,
            "type": "string"
          },
          {
            "description": "HTTP Basic Authorization header.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication response",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          },
          "default": {
            "description": "Authentication error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "summary": "Retrieve an access token to interact with the API.",
        "tags": [
          "Auth"
        ]
      }
    }
  },
  "definitions": {
    "Account": {
      "properties": {
        "billing": {
          "properties": {
            "city": {
              "type": "string"
            },
            "country": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "state": {
              "type": "string"
            },
            "street": {
              "type": "string"
            },
            "zip": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "created_at": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "links": {
          "properties": {
            "projects": {
              "properties": {
                "href": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "self": {
              "properties": {
                "href": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "name": {
          "type": "string"
        },
        "stats": {
          "properties": {
            "started_projects": {
              "type": "integer"
            },
            "total_projects": {
              "type": "integer"
            }
          },
          "type": "object"
        }
      }
    },
    "Activity": {
      "properties": {
        "activity_at": {
          "format": "date",
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "links": {
          "$ref": "#/definitions/ActivityLinks"
        },
        "source_text": {
          "description": "Source text",
          "type": "string"
        },
        "target_text": {
          "description": "Target text of the activity, which is actually the translation of the source text.",
          "type": "string"
        },
        "translator": {
          "description": "Unique identifier of the translator/proofreader of this activity.",
          "type": "integer"
        },
        "type": {
          "description": "Currently there are two available activity types; 'translated', 'proofread'.",
          "enum": [
            "translated",
            "proofread"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "ActivityLinks": {
      "allOf": [
        {
          "$ref": "#/definitions/LinksMeta"
        }
      ],
      "properties": {
        "comments": {
          "properties": {
            "href": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "project": {
          "properties": {
            "href": {
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "ActivityList": {
      "properties": {
        "activities": {
          "items": {
            "$ref": "#/definitions/Activity"
          },
          "type": "array"
        },
        "meta": {
          "$ref": "#/definitions/PagingMeta"
        }
      },
      "type": "object"
    },
    "CallbackResult": {
      "properties": {
        "data": {
          "$ref": "#/definitions/Project"
        },
        "result": {
          "description": "Callback response returned from `url`.",
          "type": "string"
        },
        "type": {
          "enum": [
            "translated",
            "proofread",
            "completed"
          ],
          "type": "string"
        },
        "url": {
          "description": "The URL that received the callback.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Comment": {
      "properties": {
        "comment": {
          "description": "Comment text.",
          "type": "string"
        },
        "commented_at": {
          "format": "date",
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "links": {
          "$ref": "#/definitions/CommentLinks"
        }
      },
      "type": "object"
    },
    "CommentLinks": {
      "allOf": [
        {
          "$ref": "#/definitions/LinksMeta"
        }
      ],
      "properties": {
        "activity": {
          "description": "Link to the activity to which this comment was submitted.",
          "properties": {
            "href": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "project": {
          "properties": {
            "href": {
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "CommentList": {
      "properties": {
        "activities": {
          "items": {
            "$ref": "#/definitions/Comment"
          },
          "type": "array"
        },
        "meta": {
          "$ref": "#/definitions/PagingMeta"
        }
      },
      "type": "object"
    },
    "Document": {
      "properties": {
        "id": {
          "type": "integer"
        },
        "links": {
          "$ref": "#/definitions/DocumentLinks"
        },
        "name": {
          "type": "string"
        },
        "scheme": {
          "type": "object"
        },
        "uploaded_at": {
          "format": "date",
          "type": "string"
        },
        "word_count": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "DocumentLinks": {
      "allOf": [
        {
          "$ref": "#/definitions/LinksMeta"
        }
      ],
      "properties": {
        "download": {
          "properties": {
            "href": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "project": {
          "properties": {
            "href": {
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "DocumentList": {
      "properties": {
        "documents": {
          "items": {
            "$ref": "#/definitions/Document"
          },
          "type": "array"
        },
        "meta": {
          "$ref": "#/definitions/PagingMeta"
        }
      },
      "type": "object"
    },
    "Error": {
      "properties": {
        "code": {
          "type": "string"
        },
        "help": {
          "type": "string"
        },
        "http_code": {
          "format": "int32",
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Formats": {
      "properties": {
        "documents": {
          "properties": {
            "extensions": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "mimes": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "glossaries": {
          "properties": {
            "extensions": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "styleguides": {
          "properties": {
            "extensions": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "Glossary": {
      "properties": {
        "id": {
          "type": "integer"
        },
        "links": {
          "$ref": "#/definitions/DocumentLinks"
        },
        "name": {
          "type": "string"
        },
        "uploaded_at": {
          "format": "date",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GlossaryList": {
      "properties": {
        "glossaries": {
          "items": {
            "$ref": "#/definitions/Glossary"
          },
          "type": "array"
        },
        "meta": {
          "$ref": "#/definitions/PagingMeta"
        }
      },
      "type": "object"
    },
    "Language": {
      "properties": {
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "LanguageProgress": {
      "properties": {
        "languageCode": {
          "$ref": "#/definitions/ProgressSub"
        }
      },
      "type": "object"
    },
    "LinksMeta": {
      "properties": {
        "self": {
          "properties": {
            "href": {
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "Package": {
      "properties": {
        "key": {
          "description": "This is the unique package tracking key. You can use this key to track the current progress of the translation packaging with /package/check call.",
          "type": "string"
        },
        "status": {
          "description": "The status of translation packaging. Possible values are 'started', 'packaging', 'completed'. When completed, you can make a /download call to download the last translation package.",
          "enum": [
            "started",
            "packaging",
            "completed"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "PackageStatus": {
      "properties": {
        "status": {
          "description": "The status of translation packaging. Possible values are 'started', 'packaging', 'completed'. When completed, you can make a /download call to download the last translation package.",
          "enum": [
            "started",
            "packaging",
            "completed"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "PagingLinksMeta": {
      "allOf": [
        {
          "$ref": "#/definitions/LinksMeta"
        }
      ],
      "properties": {
        "next": {
          "type": "string"
        },
        "previous": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PagingMeta": {
      "properties": {
        "paging": {
          "properties": {
            "links": {
              "$ref": "#/definitions/PagingLinksMeta"
            },
            "page": {
              "default": 1,
              "type": "integer"
            },
            "per_page": {
              "default": 10,
              "type": "integer"
            },
            "total_count": {
              "type": "integer"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "Progress": {
      "allOf": [
        {
          "$ref": "#/definitions/ProgressSub"
        }
      ],
      "properties": {
        "languages": {
          "$ref": "#/definitions/LanguageProgress"
        },
        "links": {
          "$ref": "#/definitions/ProgressLink"
        }
      },
      "type": "object"
    },
    "ProgressLink": {
      "allOf": [
        {
          "$ref": "#/definitions/LinksMeta"
        }
      ],
      "properties": {
        "project": {
          "properties": {
            "href": {
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "ProgressSub": {
      "properties": {
        "proofreading": {
          "type": "integer"
        },
        "total": {
          "type": "integer"
        },
        "translation": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Project": {
      "properties": {
        "callback_url": {
          "description": "Callback URL to notify when project status changed.",
          "type": "string"
        },
        "created_at": {
          "format": "date",
          "type": "string"
        },
        "custom": {
          "description": "Custom data provided while creating a new project.",
          "type": "object"
        },
        "delivery_at": {
          "format": "date",
          "type": "string"
        },
        "errors": {
          "description": "A list of errors. Visible when creating a project and uploading your documents at the same time, in case of multiple errors.",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "type": "array"
        },
        "id": {
          "type": "integer"
        },
        "links": {
          "$ref": "#/definitions/ProjectLinks"
        },
        "price": {
          "properties": {
            "amount": {
              "format": "float",
              "type": "number"
            },
            "currency": {
              "default": "usd",
              "type": "string"
            }
          },
          "type": "object"
        },
        "source_language": {
          "type": "string"
        },
        "status": {
          "enum": [
            "pending",
            "started",
            "completed"
          ],
          "type": "string"
        },
        "target_languages": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "valid_until": {
          "description": "Available only if status is `pending`",
          "format": "date",
          "type": "string"
        },
        "word_count": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ProjectLinks": {
      "allOf": [
        {
          "$ref": "#/definitions/LinksMeta"
        }
      ],
      "properties": {
        "documents": {
          "properties": {
            "href": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "glossaries": {
          "properties": {
            "href": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "styleguides": {
          "properties": {
            "href": {
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "ProjectList": {
      "properties": {
        "meta": {
          "$ref": "#/definitions/PagingMeta"
        },
        "projects": {
          "items": {
            "$ref": "#/definitions/Project"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "StyleGuide": {
      "properties": {
        "id": {
          "type": "integer"
        },
        "links": {
          "$ref": "#/definitions/DocumentLinks"
        },
        "name": {
          "type": "string"
        },
        "uploaded_at": {
          "format": "date",
          "type": "string"
        }
      },
      "type": "object"
    },
    "StyleGuideList": {
      "properties": {
        "meta": {
          "$ref": "#/definitions/PagingMeta"
        },
        "styleguides": {
          "items": {
            "$ref": "#/definitions/StyleGuide"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Token": {
      "properties": {
        "access_token": {
          "type": "string"
        },
        "expires_in": {
          "type": "integer"
        },
        "scope": {
          "type": "string"
        },
        "token_type": {
          "type": "string"
        }
      }
    }
  }
}
